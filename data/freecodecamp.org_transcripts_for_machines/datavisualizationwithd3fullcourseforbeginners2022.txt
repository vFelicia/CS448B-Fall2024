curran is an expert when it comes to data visualizations this is an edited collection of live streams where current teaches data visualization using d3 so hi everyone i'm curran welcome to this stream get it right in black and white i am super super excited about this this new series which i'm calling get it right in black and white is going to be a long running live stream series and course on data visualization with svg and d3 and maybe other technologies we will weave in in time but that's the theme a little bit about what this course is i'm very excited to begin again from the beginning i have learned a lot from teaching this course in 2018 and 2020 this is the 2018 version of the course which was quite popular and its visualization was d3 this is the 2020 version of the course called dataviz 2020. it was recently published by free codecamp as a giant compilation but having taught this entire course twice now actually three times the first time it wasn't public i've learned quite a lot and one of the main pieces of feedback that i've got from dataviz2020 is that you know that's cool and all but how can i do all that stuff without react so one of the key differences from the last year's version of this is that it's going to be oriented around pure d3 meaning figuring out all these visualization problems purely with d3 but coding it in such a way that if you wanted to you could integrate with different frameworks another key difference is that this is going to be live it's going to be like a tv show about data visualization so you can tune in live to the event i'm gonna have you know youtube chat open and i'll be responsive to that during the event and i'm also inviting a small group of friends and special guests to participate um with me live on the stream with their audio so we can have direct discussions during this event the reason why i'm doing this is because in previous courses i was sitting there all alone making these videos and if i forgot to say something or cover something it would come up only you know a week later that's why i want to have this live element to it this is a great opportunity to explain everything step by step so i'm there's lots of time here i think this series my intention at the moment is to have this series go for about a year so this will be a recurring event every single saturday for a year at this time i mean i might change the time but there's lots of time so there's no need to rush through anything there's no need to skip anything so i want to build up the viewers understanding step by step every step of the way so that's the overall summary of this course so introductions there are a couple here a couple folks here present in audio only via google meet um this is my sort of little uh you know community of collaborators slash learners um you know the idea is that these folks can step in we can have discussions on the fly i can be interrupted and be asked questions to go into more detail about whatever thing is happening so why don't you all just introduce yourselves i think i'll i'll call on you one by one um ideally you want to go first uh sure thank you karum um hello everyone i am adil and i'm very excited to be here i'm based in the uk and i work in the informatics department of a hospital and my work is a bit sequel heavy but i became enamored with d3 a while back and i'm really excited to be learning it uh deeply and yeah i'm really really happy to be here nice welcome a deal um sri ram sharma is also here you want to go sriram sure hi um my name is sriram i used to be a journalist now i'm learning to become a frontend web developer i have been following d3 through current tutorials and uh been a big fan of his database 2020 uh database 2020 and even the 2018 uh series so i'm really looking forward to this uh series as well and just kind of uh learning more from current on d3 as much as possible nice yep welcome shiram and also nita is here you want to go hello everyone my name is nita i'm also very much interested into data visualization and i see this live stream has an opportunity to learn directly from kara and his time is really valuable but he managed to do this trimming so i'm planning on getting benefited from it as much as i can and i hope you also you all also get benefited from it it's really good series is doing all right welcome neeta all right here we go this is episode one of get it right in black and white svg fundamentals what we'll cover today is what is html css and svg adding an svg element to an html page creating circles rectangles and lines adding text in svg and customizing the font with css all right so html hypertext markup language this is the standard that defines the language of web pages that you see on the web every single web page is an html page there's some source code that somebody wrote or that gets generated on the fly that has markup with those brackets and everything and your browser loads that in and it parses that html page and then displays it in your browser so when you go to a url in your browser that makes an http request to some server http means hypertext transfer protocol that's the you know the protocol the networking protocol that web browsers use so the browser makes an http request to some server that server comes back with an http response that has a bunch of text which is html source code and then when that source code gets loaded into your browser your browser parses it meaning it interprets it and then it does a whole bunch of stuff to make the web page appear within the html standard there are apis application programming interfaces that are sort of partitioned off one of them is svg scalable vector graphics another is css cascading style sheets and another is javascript which is often abbreviated js i'll go into detail on each of these a little bit these wikipedia pages are great i would recommend to read them if these are new concepts for you html hypertext markup language it was invented in 1993 28 years ago that's very old by tim bernerslee and it went through many many revisions and each revision introduced a lot of new features right now we're at html5 and this standard is maintained by this group called w3c world wide web consortium so it's an open standard and all these various browsers implement it and this is what a very basic html page looks like and i'll go into more detail later on the specifics css stands for cascading style sheets it is a style sheet language so it's it is its own different language that gets embedded within html and um it it looks um see if i can find an example it looks something like this where inside of a style tag these things are called tags by the way there's an opening tag and a closing tag you can select elements on the page like an h1 element which is a heading one element and you can set a bunch of properties on it like the color and there's many many many properties that you can use this is very useful for styling things on the page and when i say styling i mean changing the color the font the size all sorts of different presentation kind of attributes svg stands for scalable vector graphics so scalable vector graphics it's a way of representing computer graphics that is based on the geometries and the shapes so for example if you have the letter s and you zoom it in with svg because it's vector graphics you don't lose any crispness because the graphics are defined in terms of the geometries themselves points and you know lines that connect the points as opposed to raster images like pngs bitmaps jpegs these are images defined in terms of pixels and a pixel is one of these little squares on your screen um so if you zoom it the pixels will get uh blown up or blurry often when you scale a raster it ends up getting blurry because the rendering engine tries to compensate so that's what happens with raster images when you scale them they get pixelated or blurry that's because they're defined in terms of pixels not the geometries and this is um one of the many reasons why svg is really good for data visualization because if you define a visualization with svg shapes you can for example output that to a pdf and print it out and it's very crisp when you print it in a web browser you can use the browser zoom and scale it and it doesn't lose any clarity that's one huge advantage of svg and also it's generally easy to work with programmatically because it's got this um dom structure which i'll get into but you can you can define um tags essentially in html for these different svg shapes so that's what html is in a nutshell any questions so far sure i was um wondering um svg um elements are they designed to create things that html can't do normally is that why svg exists so the question is um can h can svg elements do things that you can't do in html without svg yes that's right yes that's right um i believe in the early days of html svg was not a part of html and you were limited to things like divs to make shapes and that was it's very limiting to just use divs and css to make graphics on the screen so there are many many many things that you can do in svg that you can't do in html without svg there's a it's it's a massive library essentially of graphics capabilities paths lines areas different ways of blending the colors together all sorts of text utilities um yeah a great many things and and it's svg has a history as an image format as well so um tools like adobe illustrator can be used to create svg image files which if you open up an svg image file you see the text it looks a lot like html it's actually i guess a subset of xml so yeah it does introduce a lot of capabilities to html that that html does not have without svg thank you thanks karen and and we'll get into those the specifics and see what they are so in wikipedia it says svg is an extensible markup language yeah so i'm confused is it's a language itself or it's just a tag in html oh well actually if you read this text carefully it says scalable vector graphics is an xml based vector image format so it's confusing how wikipedia does this but the way to parse it it says it's it's extensible markup language based meaning it's based on xml and xml is is a good thing to know about for context because it defines the structure of svg and html in a sense html it used to be at least a strict subset of xml i think now there's some more language features of html than xml but xml i think came first so the comments that you see in html are derived or inherited from xml the notion of tags with openings and closing is from xml and so what it says in the wikipedia article is that svg is based on xml so you don't have any good example documents there but just the fact that svg is defined in terms of tags that can be nested that's that's all that it means that it's based on xml so htm html is derived from xml yes correct but yeah great question great question i think i'll move on i think sriram has questions oh did you three of them which chat no i just had an observation uh one is that like fonts which we use typically on the browser uh they are vector based um that was kind of like a thing i realized because you can scale up the fonts without losing any quality so that's like a realization that that's a vectorbased format whatever type we import into our files when creating an html file another observation was that in the document formats that use the xml for syntax this includes like rss atom yes so people might have used maybe rss speed readers most likely soap protocols is used more by developers i think were making uh web uh api things like that so that's unlikely but essentially it's just following that same format even html is i think similar to the xml format in a sense yes yep it's very very similar and another thing was that xml was considered to be the way that everything was supposed to be written but then json came in and json has become now the defacto way for applications to talk to each other that's right what has happened is there's been a reversal of fortune because xml is actually two verbose and there's a lot of craft in an xml document which is kind of removed in something like json json is more readable which is why it's become more popular yeah that's true yeah there and i'll get into this when we start getting into like fetching data but there is a a long history to to the idea of um fetching data it used to be that the only like the only way to fetch data into the browser was to use xml files and so that xml text would contain data and nowadays people have migrated to use json instead javascript object notation but yeah long story short nowadays people use json and xml is sort of a thing in the of the past uh except for those little you know legacy systems that still use it like soap is using xml i bet there's still a ton of software that that uses xml as data interchange but for new projects yeah the preference is to use json all right awesome thanks for the questions everyone now let's actually use these things to create some basic shapes with svg now i'd like to get into this segment on creating stuff by writing code and to do this i'm going to use vishub which is this thing that i built over the past couple years essentially to help me teach my courses and i'm trying to evolve it into a business and there it's quite an active community there's you know 5 000 or so unique users over the course of its history and there's a ton of content in here and people are using it every day so this is what i'm going to use for this entire series and you too can use vishub so if you're following along with the live stream or watching this as a video i encourage you to follow the steps that i'm about to do so in vishub to start really using it you have to sign in via github so i'm going to sign into github so now i'm signed in and i can see my profile or create viz so if you click on create vis there are a lot of these templates here the most popular template is just a starter html page which is where we're going to start from today so what i'm going to do next is fork this meaning to make a copy of it that i can modify and you can do the same once you're logged in if you click on this little fork icon you get this little uh popup that says you know choose a name for this vis and i'm gonna say svg fundamentals that's my name so now i've got a copy of this and i can click open editor right here to see this little browserbased ide essentially ide by the way stands for integrated development environment it's not an advanced ide here by any stretch but it lets you edit code right here in the browser so if you click a file it pops open and you can see some details i'm gonna just remove stuff that we don't need um because i really want to sort of start from the beginning here and vishub has all these options to you know reclaim screen real estate a lot of the stuff i built specifically for teaching so here we have a very very bare bones html page now i'm going to get into the details of what is a barebones html page first of all we've got the doctype this is a thing that tells the browser okay this document uses html version five and uh yeah it's not strictly required like i think it would work without it but it's good practice from what i hear to include it so once you've told the browser that we're using html5 then you can open up into this block of html and so i just want to point out that the structure of html is in general you've got an opening tag and a closing tag and a tag is defined by these um greater than less than things here and a closing tag has this slash after the uh this less than symbol right here and once you've got this opening and closing tag pair you can put a bunch of stuff inside it essentially developing a tree data structure and that's what xml is it's really a tree data structure meaning there's nodes and and each node has children so when you define a pair of opening and closing tags that's a that's defining a node a dom node dom means dom document object model so when this html page gets loaded and parsed and it runs in the browser the browser in parsing this and running it creates this thing called the dom the document object model and so this is the document the source code and the document object model is this data structure that gets created from this stuff and so this is the root node of the dom which is a tree data structure and then this root node has two children the head and the body so you can see very clearly here there's the head and the body the head of an html page it defines stuff that sort of uh is not directly visible on the page but may have some side effects uh for example the title tag is a tag that goes into the head and it's i believe it's actually required to to have a valid html document so if you were to have a text file on your machine called index.html and double click it and open it in the browser that the tab would say svg fundamentals and to that point i want to stress the fact that you can do all this stuff without using vishub so let me just show you what i mean i won't spend too much time on this but i want to stress that this is all using standard technologies and there's nothing really viz hub specific about any of this so if i make a new directory called test i'm using linux here and i create a file called index.html and i save this file and then i open up this folder you can see okay there is a file called index.html and if i double click that it opens in the browser and check it out it says svg fundamentals in the tab so that's the role of the title tag see all these different pages they have different text in the tab all of those are derived from the title tag inside of those html pages and then if you right click in the browser you can say view page source you can do this on any web page and it shows you the source code of that page which was just loaded in from this text file on my machine so this little diversion is just to say that you don't have to use vishub per se this is one of the complaints that i've gotten my previous courses like he doesn't tell us how to not use vishub vishub is a tool that makes it easier to get started writing code right away without having to set up a local development environment but for this svg stuff you don't need any development environment you can just double click the file and it should all work in vishub the title tag it feeds into the title of the viz which you see here on the page also invis hub there's a file called readme.md and i'm just going to delete all that stuff this is just where you can add the description of this page i'll type something here like a demonstration of svg shapes so the idea is you can use this readme.md to add a text description to your viz and then um you can close out the editor and then share a link like this just how viz works you can share links to these things with other people and then this page will load up without the editor open all right so now that we've got this basic page here how do we create svg shapes well it turns out you can put svg elements into the body the body is the part of the html document that contains things that end up visible on the actual page so just to give a little preview if we say hello world right here then hello world pops up in really tiny text on the running page and for this sort of thing i like to use the mini mode of vishub which will show the running page right there and i can edit the text over here so to create something with svg we can create an svg element right here in the body so we can have an opening svg tag and then a closing svg tag and this opens up a world of possibilities because within this pair of opening and closing svg tags we can put tags that are not valid outside of svg for example circle we can put a circle right here and again it's all tagged so you have to have opening and closing so we've got circle um not circle i like to phrase a lot of people phrase the closing tag as not so you could say body not body svg not svg circle and then not circle but the circle doesn't actually show because there's no um there's no attributes of it defined and in html attributes are specified like this cx equals 50 cx is the attribute that defines the center x coordinate of the circle in pixels so if we set cx to be 50 and cy to be 50 we still don't have anything showing up because there's no radius defined the radius of the circle you can define with r so if i say r is 50 now we get a circle current yeah can i ask questions um just to recap the an element whether it's a html element or a svg element that is a group of tags is that is that right it's it is the the difference between element and a tag is it is that quite um important to know yeah that's actually a really great point it's it's real oh thank you so much this is what this is so good the distinction between element and tag is is very confusing i feel like a lot of people even folks who have that have been doing this stuff for a long time don't really grok what the difference is so my understanding of what the difference is between an element and a tag is that a tag strictly refers to the text in the source code of the html so this you know when i select this text on my screen that's an svg tag and that's a closing svg tag and then when the page runs in the browser that tag which is part of the source code it's part of the text of the source code all of these tags get parsed by the browser into this tree data structure called the document object model and then in that document object model the instantiation of that object is called the element so this set of tags in the source code when parsed leads to the creation of an svg element and a circle element inside of that svg element and you can see these elements using the chrome dev tools which is a really essential thing so if i right click here on that circle in chrome and click on inspect it opens up what's called the chrome dev tools and you can arrange these or if you like i prefer them at the bottom i'll make it bigger with control plus so you can see here that this is the svg element that's actually instantiated on the page and see when you hover over the svg element that little box appears and that box by the way is the default dimensions of svg when you don't specify width and height you'll also notice that that box is not flush with the edge of of the page so all of these things we will be addressing but yeah to your point the element is what's instantiated in the browser after the page runs the tag is just the text in the source code yeah i think that makes sense say so tags are used to describe what gets created at runtime exactly yes yes that's exactly right thank you thanks correct yep um and and by the way i want to highlight that these chrome dev tools are are so amazing because you can actually edit the dom so if i change cx to say 100 in the chrome devtools the circle moved over and if i change the radius to 500 here it gets bigger it well it fills the entire space of the svg because svg this svg element has the default width and height so we can set the width to be um 960 and the height to be 500 these are the default dimensions inherited from blocks.org which vishub also uses so what we're doing here is i would call it manual dom manipulation so manually manipulating the document object model using the chrome dev tools and when you hear the term dom manipulation that's usually when a javascript program reaches into the dom and changes it around at runtime and that's what d3 does that's what react does that's what vue does felt all these things uh jquery the original they all do dom manipulation and so that's another key distinguishing factor between tags and elements i mean a tag is just it's static it just gets loaded once from the source code but an element the instantiation of the tag is dynamic meaning it can change at run time so it's i'm changing it manually by you know changing this text in the chrome dev tools but you can also make these same kind of dynamic changes using javascript and we'll do that in future episodes but now if this program reruns again if i trigger a rerun by editing it all of those changes are lost so um at this point i noticed some folks poking their head into this file i saw anita and sriram in there in terms of their presence cursors and i want to take this opportunity to open up this viz to be edited in real time by you all so i'm going to go to the collaborators and add both of you and all that ideal too just in case so this is a feature of viz hub where you can give people permission to edit the document in real time and i see some edits are already being made um whoever's editing you want to describe what's going on yeah i'm editing it it's just so much fun right wow this is amazing so okay a copy of the circle was made and the fill was set to be red this is perfect fill is an attribute of svg elements that defines the color of the inside of the shape and notice that the formatting is a little different um there's single quotes in use here uh and there's spaces around the equal sign uh but i've used single double quotes i just want to say it it doesn't really matter in terms of how the program runs but stylistically you can unify all of this stuff with a utility called prettier prettier is an amazing utility that automatically formats code and it's built into vishub oh i see you just use prettier nice if you click this little colorful p it auto formats the code invis hub to be consistently formatted wow this is really cool really cool so cx is 150 on the red circle meaning it's moved over to the right i want to clarify that that the coordinate space of svg it has um the origin in the upper left so the upper left is actually the coordinate 0 0. and then as x increases the shape moves over with my screen the shape moves to the right and as y increases the shape moves down and the y direction is inverted relative to what you see in like math textbooks with graphs and stuff or in data visualizations y typically goes up so that's that's going to be it's a source of confusion um often times when developing visualizations why it's flipped so just to be aware that's the coordinate space of svg so i see some edits are being made where there's a rectangle at x equals 400 but that's not going to show up because the svg currently still has its default width and height so i'm going to just change that by saying width is 960 and height is 500. now the svg should fill up the page and it does this is quite the little party going on here we've got a green circle we got a red circle we got a rectangle this is great so let me just use prettier on this so we can see clearly this rectangle rectangles are another you know fundamental svg shape it's you can create a rectangle with the rect element x and y are the coordinates of the upper left corner of that rectangle rectangles can have width and height these are all in pixels and yeah fill set to none means that the shape is transparent that there's no fill inside of it and stroke stroke is an attribute of svg elements that you could apply you can apply to circles rectangles a lot of different shapes and that's the outline and so stroke equals blue means that this thing here has a blue outline now and stroke width is what you can use to control the thickness of that outline so if i set the stroke width to be like 20 we can see that that rectangle is actually the outer rectangle and and check that out that outer rectangle is actually above the circles that's another thing about svg is that um in in svg you can't control the z index by setting the z index css property which you can with other html elements the z index means which which thing comes on top of which other things the z ordering uh is purely dependent on the ordering of the stuff in the document itself so that's why this rectangle is on top of those circles but check this out if i move the black circle to be to be after that rectangle see how it appears on top now so that's why um that's what i mean when i say the z ordering is determined by the ordering in the svg document and that becomes super super important when you're in the weeds of making a visualization it's like a fundamental thing that you really need to understand so how about this let's collectively clean this up a little bit um these rectangles let's have like one rectangle one circle or no we it's multiple circles or it's nice in a way i also wanted to introduce the svg element of a line so you can have a line element begin line end line and that line has x one so if i put x one at zero y one at zero x at maybe 100 and y2 at 100 should create a line um it does not and i believe that's because we have not set the stroke on the line i think lines might be invisible until you set a stroke on them there we go now you can see that little line i'm currently i noticed something earlier uh when the height of the svg was uh i think maybe halfway down and the nice big yellow rectangle was only only half of it was showing and i was wondering whether that meant you could create uh shapes and elements outside of that uh out of outside of the width and height does that mean uh when one sets a width and a height on the svg element in the sv svg tag sorry that only shows a partial view of what's what's being created or is like a sort of a window if that makes sense yeah that's correct see if we if we were to change the width for example to be 400 or let's say 500 it clips everything that falls outside of that so if you inspect the the svg element you can see that it's bounded at this square which is 500 and 500. the outer svg element clips the things that are inside of it because the the browser gives the svg only the screen real estate of its width and height and the things inside of it may well be outside of those that width and height i mean if we set x to 600 that rectangle is going to be totally off to the side and it's going to get clipped out and you won't be able to see it so yeah i mean you can you can totally put stuff in an svg that's outside the bounds of the width and height and you just won't be able to see it yeah and there's a similar construct called an svg clip path that i think we'll get into a lot later on but that with an svg clip path you can you can use these shapes to clip other shapes inside of it like say if you had a texture you could clip the texture by a circle things like that i'll get into all that quite a bit later on oh i see there's a path who made that path i think it was sriram do you want to talk about that sorry kurt um i was just actually playing around with an svg that i downloaded from icon monster nice so i thought i'll just try and paste some elements out of it to see what exactly it's doing it's very cool like it's actually an element from um this thing that just creates an x button um like a menu x button nice so like we have these burger icons right like which are pretty much now the edm for menu yeah so i was just going through that it was a nice and did it work did it show up there yeah actually it did i saw a small like line cutting across the black circle so that line i believe was the one that i had added see if i set the stroke width on that line you can see it should get bigger there i don't know if that path is visible so let me let me do this i'll inspect the element and the path somehow the path is not showing up there in the svg is it valid oh it's got a selfclosing tag i i don't believe that's uh that's not valid um html it may be valid jsx but in html you have you have to explicitly close the tag like this not path now it should show up yeah that's what i was wondering like it doesn't have a rosy tank there it is yeah yeah you in in in straight html a closing tag is strictly required except for certain elements like maybe an image element don't know but but yeah there's that path it is there it's a nice little rounded uh a rounded line there is there um is there a difference between line and path or is is one based on the other um because that that um i suppose you one could use either either thing to create a straight line like like the line shown in path yes there's a huge difference line is just it's just a straight line from point a to point b point a being um x1 y1 point b being x2 y2 but path is a much much more generic thing that you can use to construct all sorts of shapes really um it's got this domain specific language as part of it so let me let me edit this path because this string this string looks very cryptic and uh when you when you have icons and and stuff that are defined in svg you do have these cryptic strings that you can copy paste over but these cryptic strings actually use a language they use their own language so i'm going to actually edit this particular string i'm going to make some edits right in here to clarify how this little domain specific language works let me preserve that one just so we have it as a reference i'll make a new i'll make a new path so d equals this domain specific string that's specifically for svg paths m is the move to command so m if we want to move to let's say 400 400 move to the x coordinate 400 and the ycoordinate 400 it's like that and then there's another command that you can issue which is the l command which is line two and and this is how it works like this is one command in this little domain specific language it means move to this these coordinates it's like putting a pen down it's like move your pen to this place and then l means line two means draw a line from that place to the other place so if i say l 500 comma 500 it should draw a little line and i believe i have to say i need to i need to specify a stroke so this i'll say the stroke is black and see there there it is there's that little line there which is which is our path and you may be thinking well that's the kind of stuff you can do with an svg line but check this out um you can you can add another line to command attached to that one so let's say if we go l 500 600 what does that do oh it's actually off the screen let me just bring everything down so move to 200 200 line to 300 300 and then another line to let's say 300 400 you can see that it has created this filled in shape there and it's filled in because fill is automatically set to black so if i say fill equals none now it's just this this path here and and let me increase the stroke width too so you can see it so here's an example of a path that's actually comprised of two line segments this is the first line segment and this is the second line segment and so this one here is actually that path element and the path element is what is used to construct line charts for example that are data driven instead of having a bunch of separate lines that are separate elements you can just have one path element that is comprised of many lines and same thing for area charts if you just use the fill it becomes this filled in area so you can use you can use paths for areas and area charts paths are also also used for geometries in maps like you know the shape of a country or what have you so i think that's all i really want to cover today but i feel like that's a lot oh and by the way this is how you can make comments in html begin it with this exclamation mark in two dashes and then end it with two dashes and a in a um a less than a greater than symbol or less than symbol yeah those are html comments so i see there's some activity in the youtube chat let me address those there's a question can you make layers like circle on top of another circle i see when i was talking someone made that edit and in fact yes you can see that there's there's the circle below and the circle above and yeah the layering is just purely based on the ordering of the document so if i were to take this smaller circle and put it before then it would be essentially invisible because it's actually behind the red circle which we can see if we if we move it around a little bit but yeah that's how you would create layers is by just making sure one comes after the other in the document and the one on top is smaller so you can see that what's behind it yeah great question adele you had a question uh yeah i'm just just curious uh about the path elements uh specifically the d attributes and um i would just uh is there a difference between the letters if they're uppercase or lowercase and um uh is is that is that something that um you you you've had to do before to uh because i'm not sure exactly what the difference is um and uh it'd be i'll just wondering a few sure yeah um let's find out if i make it a lowercase m it seems to still work and the lowercase l oh uh looks like that did something different actually so um it appears it is case sensitive uh to learn more about this i would suggest the md n article about svg paths because it's an entire language it says the d attribute is a value of string it is animatable yes um and somewhere in here yeah here it is these are all the path commands so there are a ton of these path commands uh but more often than not you don't need to construct these commands yourself because there's some utility that generates it often you encounter these like if you want to put icons into your svg you can you can copy paste these paths from an icon svg file with data visualization there's a package called d3 shape that will use later that actually generates these strings for you so usually you can treat this d attribute as a black box that you don't really need to know about like you don't really need to understand it um but i wanted to go into a little detail now because it's good to just know um the structure of it and i see in this example there are spaces like i think it could have spaces in it and it would be fine it works just the same and i feel like i've seen space delimited coordinates yeah that works too you don't even need the commas so there there is some flexibility there in terms of the structure but it looks like it is case sensitive maybe uppercase l and lowercase l um honestly i don't know they might be different commands or something yeah i think it's uh it says versus relative coordinates it could be just yeah in the note just below your where you're highlighting ah yes oh look at that uppercase is absolute and lowercase is relative based on the differences oh that's quite interesting so let's let me just see if i really understand that in our path we've got a move to command and let's let's see this second line to command it uses the absolute coordinates 300 400 but in if we were to rephrase that in terms of relative coordinates with the lowercase l the change in x would be zero and the change in y would be 100 and we get the same result yes that's what it is nice nice i'm actually learning that just now so thanks for that oh there's a question in the youtube channel did you say there was a get it right in black and white channel in the u in the d3 slack yeah you know um i was going back and forth mentally about how i wanted to deal with the um asynchronous communication for this and what i've decided is for now at least i want to try to use the vishub forum for these communications not the d3 slack mainly because the d3 slack is very um transient um but if you feel strongly let me know i mean i i i may end up creating a d3 slack channel for for this series i'm not sure but i used i used slack in the past for for the date of his 2020 series and there was so much really great activity in the d3 slack that is currently gone forever lost to the sands of time uh because slack doesn't preserve its history with the d3 slack which is on their free plan of slack so that's why um i want to use this vishub forum thing instead so um in the youtube stream there's a link to the blog post about it and in the blog post there's a link to the forum index and the forum index looks like this this is a page that i plan to maintain that will have an index of all the resources for all of the episodes and right now there's just episode one which doesn't really have anything in here yet but this is one i want to leave you with as we close out today i want to leave you all who are watching with an exercise this is another differentiator between this series and last series i want to give exercises at the end of each and every episode so that you all can engage with this stuff and try your hand at it and share your work and hopefully we'll build up a community of people who are following this series and participating and so here's what i want you to do make something creative with basic svg shapes and do that by you know fork fork the hello html example or you can fork the example that we made today and i'm just going to remove collaborators right now so we can like freeze it the way that it is as a record of today and so you can fork this viz to do your exercise and by the way in this vis hub forum software which is an instance of discourse what you can do is put a vishub link on its own line and it will unfurl to include a thumbnail so when you share your work that's what you can do let me just sign in so i can edit so you can fork this example and what i'm going to do is drop that viz hub link and on its own line and you see what happens here it unfurls so yeah that's what i'll leave you with today uh if you followed along enjoyed this please go ahead uh fork this thing modify it and share your work here um and feel free to ask questions also in this in this forum thread i'm hoping that this forum works out well as a platform for discussions and stuff um if there if it doesn't i might introduce a slack channel or a slack channel might be good to have anyway i'm not sure we'll see uh stay tuned for that so welcome everyone to episode two of get it right in black and white i'm just so pumped to do this so we've got adil here we've got anita here some others may join but in the meantime we can start episode 2 is going to be about pseudo visualizations what that means is we're going to use basic svg shapes to approximate visualizations and this will make sure that you know we really grok the fundamental shapes that go into making visualizations what we'll cover today and this is aspirational i may not get to all of these but i am going to review the exercise submissions from last week we got some really good ones removing the default margins and scroll bars that appear on an html page i would like to revisit the topic of text versus elements because there was some confusion around that and then we'll go ahead and develop a pseudo scatter plot a pseudo bar chart a pseudo line chart and a pseudo area chart and i would like to discuss svg interoperability with figma and other tools and if we get to it we'll add svg text and customize the font before we get into all of that i just want to reflect on what we've gotten into so far it's been html which is comprised of svg css and javascript and we have delved into svg a little bit more so within that svg concept we're looking at circles lines and paths and i think i'll be evolving this diagram as we go to add in all the various concepts that we learn about let's review the submissions from last week the exercise was make something creative with basic svg shapes and this is what happens here's one submission i'll click through it and see what it is this is just gorgeous beautiful beautiful stuff you know it's very artistic and this is what got me thinking of of highlighting some of the integrations with design tools and i want to point out if you put the link on its own line it will unfurl like this get a little preview in here so here's another submission the vision beautiful beautiful stuff and it's all just svg right there in the page oh here anita did one with um transitions actually now that i'm here um anita would you mind just describing the transitions that are happening here should i talk about it yeah yeah can you just talk about it for a few minutes and i'll highlight the the code as you as you talk about it okay so we made a basic uh rectangle using svg so rectangle is graphics here and the properties of these rectangles are width height fill x and y position and we can change all of that using css language which is here on the top style and in the style so using red i'm accessing this left element index vg directly and what is what is our aim is to do the transition on it when i'm hovering on a triangle so what i want to change the feel of it fill and stroke with so when i hover on it the transition is happening at three thousand millisecond means three seconds here and in the beginning the fill of the rectangle is red and stroke is black and on however rect and hover is changing fill to grain and stroke weight to 100 pixel so the first one it just it shows the css properties for rectangle and the next rect semicolon hover is another state on the first state so it changes and that's where the transition come transition is actually between two states first is when the field is read and the second state is going to feel is the green forward angle and that's where transition property comes and we can define that using css language nice thank you that's awesome oh thank you so much for for describing that that's that's really great to see thank you so yeah just to recap a little bit i think this is the first time we're actually using css so when you when you introduce these style tags it opens up into a block of css and then these are the css selectors so this selects the body element this selects all rectangles and this one colon hover it says okay apply these styles when the thing is hovered over and so that is cool by itself and then you know when you add this transition you know this is one way to to animate things with svg and css so yeah great one by nita this one is really incredible i was just blown away by this i mean look at this this is just so beautiful so beautiful and i want to highlight that when this submission originally came in it looked like this and i immediately noticed that there's the default margin that appears with html see on the upper left corner there's a default margin of some i don't know some on pixels and then there are scroll bars here and so these are both undesirable things and so in the forum i just said oh add the css and i want to just discuss this css a little bit because it's very useful for pretty much anything that you do where there's a full screen svg this css applies to the body element that has a default margin in html and so to get rid of that default margin we can set the margin css property to zero that will get rid of the margin but then there do appear these scroll bars which are kind of a bummer and i don't really understand why they appear but anyway to get rid of those scroll bars you can add overflow hidden to the body as well and this gives you a really nice blank canvas where the svg does fill up the screen all right really good stuff yeah here's here's my comment you know that's how you can remove the scroll bars a couple more here's one with some circles it almost looks like a record very cool um oh yeah and you can set the height of things in viz hub so i noticed with this one it's actually larger than the page there's this scroll bar so you could get rid of the scroll bar or another thing that you could do is change the height there's an option here to set the height i just wanted to make sure everybody's aware of this so yeah you can use that to change the aspect ratio of the viz and this one also blew my mind look at that took my avatar with and uh you know exported the paths to svg pretty wild and this one also uses the hover css selector so when you hover it changes the transform which is a css property that you can use to to scale and rotate and translate things so i thought this was very nice work very nice work here's a flag of seychelles very beautiful this one uses the polygon construct within html it also uses an h1 element which is this text here h1 in html means heading one so the text is kind of big and bold and here's what seams work very nice kind of like abstract art and you can see that it's a bunch of path elements where the only difference is where it moves to initially and since these are lowercase commands these are relative so all you need to do is change that one thing and it moves the whole thing down and check this out there's a class on the path element and a class can be selected with css meaning you can use css to select all elements that have a specific class using the dot prefix on the css selector so this one here this little block of css selects this inner path this one here and sets the fill to black just on that one whereas on all the other ones the fill is none so that's a nice you know first sighting of css classes can i ask questions yeah so what is difference between id and class oh id and class yeah this could be a basic question let me just uh fork this so i can modify it and show you to give a sense so the question is about um id versus class class is something that many things can have so there could be many classes that have the same sorry there could be many path elements that have the same class in which case this selector would apply to all of them there's also a construct called id and if you use id see how now it's broken it didn't it didn't select if you use id then the prefix on the css selector is a hash symbol so now that should work oops i i misspelled id as i n so id is inner path and it works the main difference between id and class is that the intention behind id is that there's only one thing that has a given id that's why it's called the id means the identifier for that one particular thing so id is for just one element meaning no two elements should have the same id ideally but class is is it defines a class of elements meaning a grouping of multiple elements so there could be many elements that share the same class so that's the main difference between id and class so going through the submissions and questions here neeta asked a question about svg it says svg is an xmlbased markup language for describing twodimensional vector graphics as such it is text base and so on and so the question is is svg a graphics language similar to html and xml yes yes it is svg in fact stands on its own as an image format and so in a sense it's not strictly within html svg exists as a standard for defining images outside of xml outside of html but it is based on xml so xml is the language used with the tags and everything that's the language used inside of svg images so i hope that i hope that answers the question is that clear enough yes yes intense nice and is everything inside svg tags text data um well this comes to the point of the distinction between the document and the dom this came up last time too i think it was ideal that asks what is the difference between a tag and an element and i gave an answer that i don't think was 100 accurate uh anita did some researching and reading about this um and i wanted to just clarify this point that in a document meaning in the text that defines an html document the source code you know in the dot html file there are elements there in the sense that the syntax in there defines the element and that element in the document is comprised of the start tag the ending tag and everything in between tags on the other hand are constructs that only exist in the document the tags for like every element in its definition in the in the document has two tags an opening tag and a closing tag and those tags are purely syntax for defining the elements but when the document gets loaded and parsed into the browser it becomes the dom the document object model and in the dom it's a tree data structure where there are elements so if you if you google html element and read about it people discuss it in in different ways and they use the same term element to define things that are in the source code meaning you know the start tag the end tag all the attributes and everything in between that's often referred to as an element when you're discussing the source code the document but there is a distinction between an element in the source code and an element in the living breathing dom and so the living breathing dom is a dynamic thing where the elements can change over time but the element in the document is a onetime thing like it's it's fixed when you load the page so i just wanted to discuss about this a little bit i hope it clears up any confusion around this any any remaining questions about this we'll be talking about dom in the future because we did not talk about it yet oh yeah i mean we'll be using the dom quite a bit quite a bit and i think we did talk about it a little bit yeah so if we look at anything in vishub i just want to clarify this with some some grounding um here's the begin tag here's the end tag and taken together it defines the element in the source code similarly here's this svg all this stuff that i've selected defines this svg element and there are elements nested within this but this is the source code you know this is the document but when it runs in the browser you can right click it and say inspect and that gives you this chrome dev tools which is a is a window into the dom not the document not the source code and so um in this sense we have touched the dom by using the chrome dev tools and like i said last time you can manipulate these things these attributes in here and it will update and see look at that it actually it it actually transitions so if i set the width to be 400 it transitions because there's a css transition applied to it but what i'm doing here is manipulating the dom by using the chrome dev tools and in the future we're going to use javascript to manipulate the dom yeah but we're not quite there yet so going through the submissions i want to uh highlight this one by ideal this is so good yeah check this out it's this really beautiful animation with the sun setting and the colors changing so this is just gorgeous gorgeous work and ideal is live with us now and i was hoping we could um dive into this a little bit because there are a couple of new constructs used in here like gradients and animate tags so ideal would you like to sort of narrate what's going on here and also describe you know how you came to create this sure uh this was uh a really fun exercise um uh it i thought of the uh yeah there was a the idea of the sun rising and setting and uh automatically um thinking well i think how would that affect the surroundings as well so we have a um to begin with i created the sky element as a rectangle and gave it a fill um and which would be determined by the something called yeah the sky gradient and so this is a linear gradient that sits in a special tag called defs where it gets defined and sorry this was a radial gradient not a not a linear one and uh the uh it takes an id so we can refer to the definition and it's uh there is also it takes a cx and cy property which is uh familiar i think when when we use the circle tag and what the these do is uh similarly they define the the circle for that gradient and that the perimeter of that circle can be have a gradient um or a color attached to it um and um so yeah this was this was really uh this was the first time i'd really come across the animate and gradient apis of svg um so i just want to make sure i understand and just to explain everything uh if you change cx to zero see how the the gradient is sort of emanating from this side and 50 puts it in the middle and likewise with cy if you put it to zero it's emanating from the top very very nice and you know i didn't actually know that um percentages are the unit here that so i'm learning things as we go so yeah i just wanted to tweak those um but yeah continue please yes the uh yeah it takes uh percentage units uh which was uh interesting and uh i may be wrong but i wonder whether it uh it uh it just corresponds to the position across the screen in terms of how far in terms of as a percentage it goes across this screen um uh so i think this would be 50 50 for each of cx and cy would be right in the middle of the screen um of the svg and there is a it takes a radius um uh which also i i think uh tries to yeah uh describe the again in a percentage um uh but also tries to uh describe the width of the overall where the position of the perimeter would end up and so that was this was quite new um and uh so i think yeah in so i think we after experimenting just like that uh with the various numbers uh i settled on 75 um and then uh but yeah i was experimenting exactly in that way just to get an idea of what what that radius really meant um and uh yeah there's a inside of that radial gradient there are a there is a stop tag um a couple of stop tags um one that uh hasn't uh each of the these have have an offset property of z um and one is zero and the other is a hundred and um i think this really describes the offset property describes where that gradient stop is located and so i think for a radial gradient um it will be the distance from the center to the uh edges of the circle um so um yes again i was experimenting exactly like that just to see what the how the numbers would translate into into different uh yeah colors across the screen um so that was uh yeah just um and then there was uh a little uh yeah so there was a radial gradient used for the sky backdrop and then two linear gradients used for the two landscapes in the foreground and um actually before we go on what is this q is this what makes it curvy uh yes so i think uh this is a cubic curve if if i i looked up the mdn documentation um from uh uh last week and i think this is um it might be sorry not cubic but quadratic um some quadratic bezier curve and so um that will allow uh from the current position which is defined by um the first two sorry the last the second two which is um um the okay see if i just get this right so it takes a current position uh which is uh defined by what comes after m um where we as you described last week that's where when we put the ink to paper we put the pen to paper and then the what comes after q are four numbers the first two of those numbers are control points and the second two are where you would uh where the final point ends up so that's 960 is right on the other end of the screen and yeah again experimenting this is this is how i became a little bit more comfortable uh with understanding what it does and the two um the control points uh straight up to cue i think these help this uh help um these are points located somewhere which help describe the um the curve and the way that it gets pulled towards those control points um yeah again a lot lots of experimentation was involved just to just to see how um this this could this could work um very nice yeah it was it was fun um yeah similarly um we had uh yeah that was yeah again yeah i think that about sums it up there's linear gradients that use a similar format to the radial gradient and stops within those and i'm curious about this animate tag how did you figure this out yeah so this was uh so the problem i was trying to solve here was how could we animate the gradients so to speak how could as as the sun is rising and setting how can the colors change so um in this case uh this is the um this this particular uh landscaping i think in the foreground this would go from um alice blue to steel blue back to alice blue and it would do it across a number of seconds and so yeah the animate tag was very interesting you can try and descr by using something called the attribute name um which is uh the stop color and you can change the values of the stop color from and this blue to still blue and alice blue so that's a list of values that you would like it to go through nice um again so much experimentation yes really to help understand what was really uh what was going on this is really great adil thank you so much it was fun thank you you know this might be a good um transition with the discussion on control points to using um figma figma is this really amazing design tool that i've actually been learning myself for the first time recently and i've used it to create all of the various uh you know pieces of graphics for this series so far uh you may be interested to know that the mask that is applied to my video is actually drawn driven by this graphic right here so that's being masked onto my video and that's actually how it's working but anyway figma and a lot of different design tools like figma including sketch or adobe xd or uh even like straight vector graphics tools like adobe illustrator or inkscape which is open source or i believe has limited svg capabilities but it it lets you design svg graphics and there's this whole interface around it and because the idea of control points came up i want to just create a little sample to illustrate control points so i've got this sort of template here i'm going to delete this stuff and there's this thing called the pen tool you can use it to define svg paths and so there's a path i can set the stroke and interactively control all this stuff so instead of having to tweak it little by little you know in the html you could use a tool like this to very rapidly iterate on stuff like this and because the control point concept is so abstract i wanted to illustrate it in a concrete way and i believe if you drag in here you can define a control point and so this dragging defines the control points along this bezier curve i think it's a bezier curve i may be mistaken but that that is the effect of the control points so if i grab that and change it around see that is that right there is the control point it sort of pulls the line in a certain direction yeah so that's the essence of control points one thing i wanted to do today was pseudo visualizations and what i mean by that is approximating visualizations and i want to take a moment to just discuss that sketching and doing mockups in a design tool are actually very important pieces of data visualization work i mean when i get involved in a client project for example we have a meeting and then the first thing i do you know if they send me the data i'm lucky if they don't i have to imagine the data but often based on a discussion i often sketch out something and this is a popular technique from nadi bremer and shirley wu they have data sketches that whole thing highly recommend it uh but to give a sense you know what i do is sketch on a notebook so i've got all these ideas that i've sketched out this is for like what i wanted to talk about today and the next episode and so sketching is the first step and then once you have a sketch that you like and sketches by the way you can communicate sketches to clients it's a very effective tool because then they realize that it's sketchy it's not final in any way but then once you get a sketch you like the next step often is to mock it up in a design tool i mean sometimes you do go straight to implementing with d3 or whatever but mocking up something in a design tool is a big part of the process and i think it would be good for us to do now to cement our understanding of the basic svg shapes that go into visualizations so here i am in figma which is the tool that i've come to really like for this sort of stuff and i think you know you can sign up for a free figma account and use it for free i think they charge you when you want to add real time collaborators so i'm going to start by making what they call a frame in figma this is going to be the sort of container for our svg and i'm going to set the width to be 960 and the height to be 500 because that's what the default width and height are in vishub and in blocks.org and let's start by creating a pseudo bar chart um p s e u d o pseudo something means a fake version of the thing uh if anybody hasn't heard of that term pseudo so um yeah i wanted to make a pseudo uh scatter plot a pseudo bar chart pseudo line chart so why don't we start with the pseudo scatter plot a scatter plot visualization is comprised of circles and so if you drop in a circle there i can set the fill here to be black because we're going to get it right in black and white and then i'm just going to make a bunch of copies of that circle and position them around the screen like this so this is a pseudo scatter plot really um so i'll just you know spread them out a little more make it sort of aesthetically pleasing and at this point i want to highlight the interoperability of svg between tools like this and html so in figma you can select this frame and click on export and then select svg from this drop down menu here and then say export like that and then you get a dot svg file that you can open up in chrome and then you can say view page source and here you have the svg text which you can then copy into vishub so here i've got the svg fundamentals from last week i'm going to fork this and call it sudo scatterplot so i'll clear out the the readme i'll actually say an approximation of a scatter plot and then in index.html i'm going to get rid of that svg that we had before and paste that text in there and use prettier to autoformat that and there we go we've got a pseudo scatter plot uh current yeah does the xmlns attribute is that important is that necessary that's a great question um i believe it might be necessary for svg files as in image files that are outside of html inside of html you really don't need it it'll work without it and it gives you actually a lot of stuff that you don't need you'll see this a lot with programmatically generated svg there's a bunch of stuff that's not really necessary so we could clean up this svg like the view box um is something that you can use to control the relationship between the actual pixels and like the the pixels that you use the coordinate space that you use to define the shapes it helps with controlling the aspect ratio there's some tricks you can do with the view box but i'm going to delete it because it's not strictly required and also fill of none on the svg that's not required either and also fill equals black i'm going to use vim mode here to delete all of these at once you don't need the fill equals black because the fill is black by default on all svg shapes and this one is suffering from the default margins and the scroll bars issue so i'm going to just add that style back in to remove the margin i'm going to select the body element and say margin is zero see that moved it up just a little bit and then overflow is hidden okay that looks decent so there we go a pseudo scatter plot uh let's do also a pseudo bar chart i'm going to go back to figma here i'm going to make a copy of this frame i'll delete everything in it by selecting it hitting delete we can create rectangles can you give me access to the file oh sure yeah figma has realtime collaborations so i can add you can edit it's an invite you should be able to see it now right so making this pseudo bar chart we can just change the fill of this rectangle to be black and then i will copy this rectangle move it over and make it a little smaller and then do the same thing again and figma has this really nice thing where it will sort of snap to proportions that make sense so like the spacing is now the same 39 pixels between all of these and i think i'll make one more make it a little smaller and then i could select all of these and then drag them in uh yeah figma has these really cool features where you can uh move things around all at once like this see this this here is a bar chart with with no padding it's the term is padding between the bars and when you move them to be spaced out like this that's introducing some padding between the bars but anyway now we have our pseudo bar chart i'm going to export this as svg open it up view the source and i'm just going to copy the inside of the svg because we already have an svg sort of container in vishub then i'll go back to vishub here and i'll fork this and i'll call it pseudo bar chart and i'll change the description to say an approximation of a bar chart and then in the source i'm going to just delete the stuff in the svg and paste whatever came out of figma and there we have it there we have a pseudo bar chart and again there's some unnecessary stuff um there's a white background rectangle that we don't need because the background is already white we don't need to fill all of these with black because black is the default fill and if i run prettier again it nicely formats itself so there we have a pseudo bar chart the essence of a bar chart right here and i want to point out one thing here um because this point trips up people later on when you end up coding with d3 you might think that you can just change the height of the bars and it'll lay out like this but that's actually not the case look at the y coordinates i mean if the y coordinate is the same and we just vary the height you end up with this inverted bar chart and this is because in svg the coordinate space of the y the y coordinate it goes from top to bottom meaning a y of zero is at the top which is again a confusing point and so what you have to do you do have to change the height of the bars but you also need to change the ycoordinates of the bars to be the ycoordinate of the bottom minus the change in height relative to the biggest bar and so we'll express all that in code later but i just want to sort of foreshadow that element you know that aspect of bar charts so let's let's do some more um a bar chart can also go the other way meaning instead of being the bars going from left to right and vertical like this you could have a bar like this and then have several bars that are you know going down the page like this this format often makes more sense mainly because you can position labels to the left of it and the text of the labels is not it's not sideways and that's a great lead into text we can say like okay this is this is bar a and i can change the size of it yeah so there's like bar a and this would be like bar b and these would be replaced with you know actual labels in real database but these are pseudo visualization so it's just abcd for now and the font here i've selected as share tech this is sort of the font that i'll be using throughout the series in figma you can quickly preview different fonts and i think most of these are available with google fonts but anyway share tech is what it'll be and then i'll just uh you know adjust this to be pleasing to the eye and let's export this one as well export frame eight i'll ins i'll view the source copy this stuff um oh that's that's odd the path has ended up as text rather the text has ended up as paths i guess that makes sense so that you can preserve the font but this is a great opportunity actually to to introduce fonts in code so what i'll do is i'll fork this one horizontal bar chart and then i'll paste that svg right in here and it worked there it is but if you want to programmatically set the text it'll have to be a little different from this i mean if you wanted to change what the text says you would have to like regenerate this path which is it's not something you want to get into doing so instead what we can do is define the text as text elements on the svg so i'm going to delete all those paths that gets rid of those letters and then we can add a text element so begin text end text and this is going to say a and i want to put it right next to this particular rectangle so i'm going to inspect it to see what the x and y coordinates are so x is 122 and and with text elements you can have x and y so i'll say x is 122 just as a starting point and y equals 27 and we can't quite see it what if i say x is a hundred i'm not seeing it do you have a question um there it is so it is there it's just not getting shown maybe i need to say explicitly phil is black there it is so we've got a little a okay we've got a little a here now we want to make it so that it's aligned to this bar and it is big and it has a specific font to do that well to do a couple of those things we can use css so we've got this style tag here we can say select all text elements within the svg and say font size is i don't know 36 pixels you just have to sort of tweak it 150 okay maybe 120. or actually what was it in figma i'm going to use the same thing 72 okay now what we want to do is center it so to do that i can just tweak the x and the y so let's say x is 90 or 70. and y should be a little bigger maybe uh 40 how about 80. getting there 90. it looks about right and to move it over to the left i'll make it maybe x is 60 how about 50. there we go that's approximately the right place and now i want to introduce the font the font and so google fonts is the way to go when you want to add custom fonts nowadays there's a long history of fonts on the web but you know this day and age i would recommend google fonts you are dependent on the google servers but i believe all of these fonts are openly licensed so if you wanted to migrate away from google fonts you could but you would have to host these font files yourself which is sort of a pain but to use any of these fonts now you can just use google fonts and i'll show you how to do that so i want to use this font called share tech so you could download it and then to use it we can click on select this style and it gives you this little snippet of css that you can just copy so it says here use on the web just copy this css or no this is html rather that includes a link so in vishab i can just paste that right there oh there's some problem uh looks like i've got a syntax error somewhere does it require a closing tag for the link for the link time you know i think link is one of those things that does not actually require a closing tag and see if i get rid of it the syntax error is still there unexpected character in line 55 oh i didn't see there it is i didn't add this little character to close out the text silly me okay now we're unblocked and i can paste that stuff up here and uh yeah the the link tag is one of those special tags that does not require a closing tag and i think image is also one of these so this is a slightly different syntax this is called a selfclosing tag where it gets closed with the the slash right before this character here but anyway now that we've got those these link tags actually pull in the fonts and then we can set the font family like this by copying this little snippet so all the text gets this share tech font family and boom there we have it all right so we've got a pseudo bar chart here we can fill in these labels just by copying this text i'll make a couple copies of that and move on yeah sure is is the css accessing the dom or just the document oh yeah that's a great question is the css accessing the dom well it's it's like um the browser is this engine you could think of it as an engine that takes all of these things as input and works with everything and so so yeah it's a great question does css manipulate the dom not really it's almost like a layer on top of the dom um but it depends on the dom for sure um so it's not it's not like it's not strictly modifying the dom it's like the dom is there as one thing and then the css is sort of a layer on top of it that describes to the browser how to present that dom and so the dependencies are like the css depends on the structure of the dom to function but the dom does not depend on the css so it's really a layer on top of the dom so once the dom is there the browser says okay i've got this dom i have to present it how do i present it oh i have to check all the css that's there to just see if there's any properties that apply to these elements before i display them on the screen and so the browser engine internally says okay here i've got this text element i want to i want to display it what do i do which font do i use let me go and consult the css uh is there any css selector that matches this if so does it have a font family associated with it oh here it is yes it does therefore you know i need to use that font family to present that that dom element so that's generally how it works like that's generally the relationship between css and the dom does that make sense yeah so it is always css which makes the final decision or it is a dom like if we have fill color in dom and same fill in the style for same element then which one will work first which one is oh which one is dominant yeah that's a really good question that's a really good and this this trips people up sometimes so let me uh give a little demonstration so i'll say the class here for this rectangle is first bar and let me set the fill to be red in the in the html and then in the css we can select that by saying first bar gets a fill of green and look at that the css actually takes precedence the css overrides what's there in the dom in terms of the fill so this is one of those tricky rules and you know sometimes i have run into this particular problem when you're coding with d3 and everything and you use some code that sets the fill of a particular element to be some color and it's not working you know i've often sat there tearing my hair out being like what the what is even happening the twilight zone moment and so the first thing to do if your if your uh fill or any of these attributes in the dom if they're not working check if there's any css that might be overriding it see no matter what we set here if we set this to blue it's not going to work because there's css that is conflicting and the css actually takes priority which is counterintuitive i mean i thought i thought it would make more sense that the attribute in the dom would take precedence because it's more localized but turns out it's not the case so yeah for this first bar we can set the fill to be let's say white and the stroke to be black and the stroke width to be like 20 pixels goes to show you that yeah css overrides what's in the dom um current i have a question um relating to this about um the fill attribute is that um because we are applying it to an svg element uh it works but uh i don't know if i've seen a fill uh attribute would that apply to html as well because i think i've seen other things like background color or color or i don't think i've come across a color a fill attribute for yeah that's a great question i believe it is localized only to svg it only makes sense to use it with respect to svg elements um and and to to clarify this like if i were to have this question this is where i would go the mdn documentation page for phil and i think there's this notion of a presentation attribute and and that's what the presentation attribute is in in the dom if you set the fill attribute on an element and i recall somewhere in here there was a list of things that could be used as attributes and also as css properties because there are a couple of these but i don't know off hand what they are but definitely fill and definitely stroke and stroke width but yeah to answer your question phil is only applicable to svg elements it's not it doesn't make sense outside of svg but there are a lot of properties that do apply outside of svg like transform i think is so is very generic it applies to all html elements not just svg elements but yeah fill and stroke they could be used as attributes or they could be used as css properties and if they are used as css properties then they dominate the value from the attribute yeah that's great thank you awesome so before we close out today i do want to also just do one last pseudo visualization which is a pseudo line chart oh wait i've already done that look at that so this is a pseudo line chart right here it's pretty much an svg path and on this point um there are aspects of svg paths that become important like the line join you could have different values for line join to make it either jagged cut off like this or rounded and then there's also the cap the cap can be set to round for example to make the caps round so as a last pseudo visualization i'll just make this bigger export this as svg view the page source copy that into vishub this is going to be a pseudo line chart and then i'll paste that here yeah so that completes our series on pseudo visualizations yeah i was looking at the youtube chat uh the only thing i see is from wasim isn't the logic with svg phil different from regular html in which inline styling dominates over the style tag that's a great question um i don't know if i mean we've just looked at how it is with svg with svg whatever's in the css dominates but with other types of tags like straight html i'm actually not sure how it is um i can do a little experimentation yeah let's find out so here's this thing that nita made that is sort of an exploration of basic html elements there's the h1 element that ends up as this text there's the p element which is a paragraph h2 which is this smaller text here and i'm going to fork this and call it investigation of css precedence and in here oh this is kind of interesting uh there's some missing tags which is another point we should discuss but to answer the immediate question i'm going to introduce a style tag and i'm going to say h for h1 elements let's make them red oh phil sorry not phil but rather color color is the generic html css property okay so now that's red um how would we make that red otherwise i don't i'm sort of grasping at straws here you have to do can i tell you yeah tell me you write style as a property in h1 equals to and everything else goes in the ports here right yeah this is called inline styles which you can do with svg too by the way um yeah i believe in straight html like this the color is not something it's not there is no attribute for color and so you would do inline styles like this and so in this case um yeah i see in the youtube chat milo is saying yeah both things are style instructions that's right that's right yeah it is css so this is called inline css and the inline css does take precedence over the other css the sort of external noninline css see if i get rid of that it becomes green but if we put the inline style there it does take precedence over the other style and i believe it might be the same with svg let me just uh double check that so we've got this pseudo horizontal bar chart and instead of saying fill equals blue if we say style equals fill is blue does that take precedence it does it does look at that okay cool so we have learned a couple things um inline styles like this inline css always takes precedence over css defined elsewhere however with the attributes if i say fill equals blue the css takes priority over the attributes so that's how that's how it all works with the priorities here that is so deep [Laughter] yeah yeah this is so great i love this question format because um we can stop and really investigate and get to the bottom of things uh that people watching are wondering so yeah this is so uh so good before we go i want to leave you all with this exercise in the forum entry for episode 2 here's the exercise recreate a pseudo visualization from one of these visualization taxonomies and so i invite you to go through i invite you to go through these links under data visualization taxonomies and look through all of these and then pick one to reproduce as a pseudo visualization there's the visual vocabulary deviation correlation see there's already sort of pseudovisualizations in here these are great taxonomies of visualization types that you can use as a reference uh to know how to encode certain types of data and we'll get into all of the logic behind this later on but for now you can just see you know there are a bunch of pseudo visualizations here in these various taxonomies so what i want you to do is look through these pick one and reproduce it with svg invis hub you could modify the html directly or use some design tool like figma or others and here's another one really amazing work these are really fascinating taxonomies of visualizations from data to vis another one sort of a decision tree based on what sort of variables you use which chart types to pick so yeah go through these links and recreate a pseudo visualization from there and post your visa link in this thread alright really looking forward to see what you come up with and thanks for tuning in i'll uh see you again next week take care bye welcome everyone to episode three of get it right in black and white um i've been really looking forward to this one because it's where we're going to dive into dom manipulation with javascript all right so here's what we're going to talk about this time soul li wit reproductions in vanilla javascript and this this thing right here on the screen is a soul lit piece what we'll cover today first i would like to review um the exercise submissions from last week got some really good ones and then i'll talk about sol lewitt this artist who's done a lot of really amazing pieces that we can reproduce with javascript and svg then i'll talk about javascript basics like javascript language features and then i'll talk about the dom api so we're not going to use any libraries no d3 it's just going to be vanilla javascript dom manipulation and to implement some of these solar with pieces we're going to need to use svg masks and perhaps svg clip path all right so let's let's uh review these exercises so here's the forum post from last week's assignment which was recreate a pseudovisualization from a visualization taxonomy i'm just going to step through these these works here's one from nita a pseudo venn diagram very nice um oh anita's here do you want to talk about this at all yeah i can talk about it um i made this one using figma just basic three circles and from the link that current shared last time basic vein diagram it was took like not that long to make it and just exported it using svg so each shape here is a svg and yeah that's it thank you very nice very nice here's a pseudogantt chart from male uh forgive me if i'm not saying that correctly but this is very nice very beautiful i mean this is getting into some serious uh data vis type stuff with the numbers and the labels and the grid and there's a dashed line this is fairly impressive you know this is amazing and and to be able to implement this later with d3 would be a great uh direction for a project wasim made a pseudo slope graph very nice very nice i appreciate the styling with the font and everything it's very much in the theme of get it right in black and white and this is one of those visualization types that we can definitely implement in the future with real data with d3 andre made a pseudo spider chart this is pretty neat also sometimes called radar chart where yeah i could visualize different dimensions of the data along this circular grid shape here very nice and here's a pseudo icon array this is pretty cool pretty cool indeed you know and i love the the creative font and and the trees here they're sort of filled in at different levels very nice work by senna and ideal check out this one by a deal oh my gosh this one when i saw it i i was so happy this is just so gorgeous so gorgeous um ideally you wanna talk about this one a little bit uh yeah this was a really nice exercise it's um circle packing is plays on these tree structure and each circle represents a level and also a branch so in the case of um subcircles will also represent uh subbranches and um and it just i think it brings out the hierarchy uh at different levels of the tree quite nicely and i think maybe one improvement i could have maybe do in the future is to probably apply different shadings to the different levels uh circles just to bring that maybe uh bring the emphasis of the uh hierarchy out a little bit more but yeah this was a really nice fun exercise and built in the shapes were built in figma and the text was added later inside visha oh very nice that's a great approach and i have to say i love how the consecutive levels are inverted that's a really nice touch really nice and i love how it's just totally black and white but yes if you were to add color you could do a lot of different things with this type of viz and this is another one that we will definitely implement later with d3 based on data so i love where where this is going uh there was some discussion about how is this animation done it was using 3js which is this really crazy uh threedimensional library that we might touch later on but yeah the point here is that if you inspect the dom you can do some sleuthing and figure out how these various things that you find on the web we're done alenka did this really nice pseudo joy plot very cool very cool and uh here's here's another one from kirsten this faux data vis it's it's a approximation of a stream graph very nice very nice indeed yeah this is another one that we can implement in the future with real data so great work from everyone on these all right now i'd like to talk about sol lewitt uh the whole context for this is that um i went to this exhibition of solowit art years and years ago and i was very inspired by the the art and and years later i was thinking oh my gosh this is perfect stuff to recreate with code because it highlights some of the uh the sort of foundational things that you can do with code this is solowit he was an american artist and he's done all sorts of interesting art pieces he had a very sort of storied career in art and he does these largescale um exhibitions in in large spaces here's a piece by sol lewitt where it's this giant set of shapes installed on a wall and as you can see it's like bands of black and white vertical and horizontal with different masking patterns applied so this is one of the pieces that i think is really nice and this is the one that i would like to try to reproduce today by writing code and i i really look forward to it it's going to be a lot of fun it may be too ambitious to have the multiple shapes done today but i was thinking just the first one the leftmost one here with the circle masking pattern i think that's what we can target for today before we dive in though i would just like to take a look at a couple other solo wit pieces here's another variation on that theme of different textures going in different directions here's another variation of the same theme with sort of larger scale textures and adding color to some of them here's another piece that explores colors with patterns i don't know how to describe it really but some of the same themes are present in this one here's another piece by sol lewitt where it's interconnected lines between randomly placed points and by the way the the general theme with sol lewitt is he would not do the art himself i don't believe um or this probably changed in different places in his career but the main thing with solowit is he would give instructions almost like algorithmic instructions to a crew of people that would implement his artwork based on those instructions so it's very algorithmic to begin with and it's it's ripe for implementing with computer code here's another solar with piece that is just a grid that's expanding very fundamental i love it let's dive in to trying to reproduce this this solar with piece with code i'm going to start by creating a viz i'm going to fork from this svg fundamentals viz that we did earlier i'll fork this and call it soul lit reproduction all right we've got this sort of blank canvas here i'm going to just adjust the readme and say a reproduction of a solar with art piece and i would like to link into it and this is a good opportunity actually to talk about how to make links in markdown a very small sidetrack thing here this is how you make links in markdown it's very useful so whenever you add a description to things in your visits it's always good idea to link to whatever resources you're drawing from and the way to do that is with square brackets for the text see that becomes a link there and then in parentheses you put the url where the link is going to go and here is the actual article that i got that image from so i'm going to paste that url right there that's how you can add links in markdown and then in index.html i'm going to clear out all of this stuff in the svg okay from here what i would like to do is start using javascript and the way that we can start using javascript is by introducing a script tag inside the html page so script not script like that and what this does here is it opens up a whole world of javascript you can put stuff in the script tag that is you know statements in the javascript language and so the most basic javascript program uh is called hello world and it looks like this console.log hello world in quotes and then if you open up the chrome dev tools by clicking on this little icon here and then going into more tools developer tools by the way this is this is like something that you have to use pretty much all the time when you're developing javascript so i would recommend learning this keyboard shortcut ctrl shift i so inside the developer tools we've got different tabs we've seen the elements tab when we inspect elements but then there's the console meaning the javascript console and by the way with chrome dev you can use this little widget here to move the dev tools around i believe by default they may be on the right so but i personally prefer to put them on the bottom and within here you can change the font size with control plus and control minus but anyway when this program runs it outputs hello world right here there are a bunch of things going on here console is a variable that's just uh there in the browser and when you say console.log you're accessing a property in that object called log and it happens to be a function and that function gets invoked with these parentheses and then the argument that is passed into that function is this string it's called a string when you put something in quotes that is hello world at this point i want to just stop and take a brief tour of the javascript language it's not going to be in depth but it's just um for for folks who've never seen javascript before and i this course is for such people you don't have to know javascript already and i want to introduce everything that you need along the way so that's why i'm going to just touch upon some javascript basics so inside of console.log you could put any javascript expression for example numbers if i hit console.log five it prints out five and in javascript you can comment things out with uh two two slashes in the beginning of the line i'm going to comment out everything that we cover so that this thing is here as a as a record of what we've done console.log 5 works it just outputs a number this highlights that you can pass different types of things into console.log it accepts strings it accepts numbers with numbers in javascript you can use arithmetic like 5 plus 5 is 10. that works and there are you know various operators 5 times 5 works as well that gives us 25. parentheses work the way that you would expect them to um with math so if it's like 2 plus 3 times 5 that's one thing but then if you put parentheses around a group that's another thing so these are basic arithmetic operations in javascript there's also a fundamental concept of a variable in javascript and for that um in modern times at least we use let or const so i'm going to say const num equals 5 that that creates a variable that's called number and it sets the value of that variable to five and then we can say console.log num and that references that variable and it outputs five here the thing with const though is that you you're not allowed to reassign to it so if i say num equals 10 like this it says oh that's not allowed and that's why it's called const because it's a constant it's not allowed to change over time this breaks in order for that not to break we can use let if we say let num equals five we console.log num we get five but then we can say num equals this is called reassignment of a variable it's changing the value that it has over time so if we say num equals 10 it changes the value of num and that works because we're using let not const and we get num and in some older code that you may see you might see var and var works just the same as let for the most part but there's some differences about scoping which we can maybe get into at another time it's not really so critical older format behaves like let and what else in javascript we have objects objects are critical so if we want to create an example object we could say const obj or i'll call it object and the way that you create an object is with a pair of curly braces and then objects can have properties inside of them like num for example and then the way you set the value of properties is with a colon like this and now we can say console.log object dot num the dot is how you access properties within objects so it prints out five and that works and while we're here i want to show you a a thing that is a little conceptually tricky to grok and that is you can assign properties of objects even if the object itself is stored in a const for example object.num we can assign that to a new value and it works see it says 10 here when we access it and that's because we are mutating the object we're not reassigning the variable object that's called object here we are just changing its value its internals this is called mutating something so that's the essence of of objects another piece that we'll need is um iterating over loops because when we do this texture thing we're going to have to make a shape many many times and to do that we can use what's called a for loop and i'm going to type this up in a comment so that it doesn't break because if you run a for loop before you stop typing it sometimes it gets into this infinite loop situation and so this looks like this four we put some stuff in parenthesis and then we put some stuff in curly braces in the parentheses we can set a variable let's say i to 0 initially and then say as long as i is less than some number like five we increment i i plus plus um by the way let me just introduce the plus plus operator on its own so if we say let num is five console.log num we get five we can say num plus plus that increments the number by one so now we get six it's the same as num equals num plus one and so now it's incremented twice so now let's get seven so that's the plus plus operator increment operator and also there's another construct this less than there are comparators so if we say like 4 is less than 5 that outputs true and true and false that's another primitive type you can say true console.log false these are booleans so if you say console.log four is less than 5 that says true yes it is but then if you console.log 4 is greater than 5 that output's false so those are these comparisons between numbers that you can do in javascript and these are to be clear these are expressions in the javascript language that return a value that is a boolean and these can be nested with you know parentheses and whatnot that's the beauty of programming languages but anyway now that we've got this for loop here i'm going to uncomment it and then inside of these curly braces i can say console.log i and it outputs these numbers one two three zero one two three four see it starts at zero and that's the usefulness of a for loop you can have one line that just does one thing but the for loop says okay do that one thing you know x number of times and it gets repeated i'm seeing there's a question in the youtube chat can you assign without const for example just stating object.num equals 10 without first assigning the property with const i can maybe clarify that so it's about this example here maybe the question is can you just say object.num equals 10 without defining object first no you can't you have to have object it has to be something it has to exist first however it does not need to have the property inside of it so i'm going to comment that out make another copy it does not need to have num defined first so it could just be an empty object and then you can you can create a property on that object that didn't exist before just like this and it works yes so i i hope that answers your question i hope that answers your question you don't need to have the property declared like when you create this object it can be added after the fact but the object itself needs to exist if the object doesn't exist you get this what's called a reference error says like object is not defined because it's not there's nothing called object so there you have it as we talked about objects can we talk about other basics of javascript like functions yes while we're here let's do it i want to cover each and every fundamental concept not in a deep level but i do want to cover it so let's say we want to add two numbers five and five we can introduce a function to add two numbers i think this is a good first example of a function so i could say const add equals a function that returns a value and this is es6 es6 syntax for defining functions it can take as input two numbers i'll call them a and b and it can return a plus b so now we can say console.log add five and five and it says ten and so if we say add five and ten we also we get fifteen now this is how you would do it with es6 javascript syntax i want to talk about the different um variants that you might see of this so this is one way of defining add another way of defining add you could say function add and then put the parentheses right here and then open it up into curly braces and then say return a this is the sort of old school way of defining functions it's valid javascript still today but as you can see this arrow syntax is much more concise another way of defining add is like this you could say const add equals function that takes as input a and b and then open up into curly braces see when you open up into curly braces you can put many many different lines of code in there and those lines of code will run when that function gets invoked however you need to explicitly return the thing like this return a plus b see now it says 15. and that's a little confusing thing about this syntax up here is that it uses what's called an implicit return it implicitly adds this return statement if you don't open up the function body with curly braces yeah i was just curious um what if we happen to be returning an object um oh that works yeah the curly braces if we had multiple statements and then on the last line we are returning an object would that be um oh i see yeah i think so yeah the curly braces for the first function would be just just be the function body and returning an object would um still be okay yeah that's fine i think yeah i get i i understand what you're getting at and i i would like to walk through that so let's say for example i'll start with the old school syntax let's say we have a function that's going to return a person object with a first name and last name if we were to construct that object let's say i'll call it person example this is going to be like the output that we would like first name is uh jane last name is do that's a generic name this is the kind of object that we would want to create from a function and so then we could say person example dot first name and it'll output jane and then console.log person example.lastname it should output jane and do and by the way you can console.log and object which we do it often and and then you get this little inspector for that object in the devtools which is super duper nice okay this is setting the stage for for writing a function that generates such objects so i'll call it create person and it can take as input first name and last name or for the sake of brevity i'll just call it person first and last and what we can do in here is say return an object and that object can have first first being the property of the object we can assign the property of the object called first to the value of the variable that's inside this function body called first this is called a closure by the way the arguments become visible just like variables inside of this closure that's demarcated by curly braces so we can return an object where first is first last is last and now we can say console.log person and then we can pass in jane and do and then we should get this object back this is first jane last do so to get at your question how does it play out with the um the es6 arrow syntax it is a sort of tricky business and let me show you what that looks like we can refactor or rearrange this code to use es6 arrow functions um so const person equals function that takes as input first and last arrow to curly braces and then the inside of it can remain just the same like it was this is one valid way to do it and yeah no issues no confusion here the place where it gets confusing is when you start to leverage the implicit return on those that arrow function syntax so the way that looks is if you want to return an object you can't just do it like this as in first name last name like this because uh it gets sort of confused about um you know is this an object or is this a opening up of a function body so if you if you put a begin curly brace directly after the arrow it's always interpreted as okay we're opening up the function body now uh so this this is not velicode it says unexpected token what you can do though is use parentheses to say okay i am going to return the thing that is inside these parentheses so this version of the code works and i think this is uh what you were getting at yes absolutely yes it was the uh um thinking about how es6 syntax would uh accommodate returning an object yeah yep nice and this is this is it this is how it works as the last thing in this segment with this function i want to highlight that in es6 the most recent version of javascript there is a simplification that you can do in the case that the property name matches the variable name and that is you can just get rid of this stuff here and it automatically assigns the value of the property called first to the variable that's in scope here called first so it's a shorthand for defining object properties where the property name happens to match the variable name so this is sort of the most concise way of implementing this person function and maybe it could all fit on one line yeah it can all fit on one line and that's like a very concise way of doing it all right that concludes our um foray into javascript i did not touch arrays yet um i think i'll do that later once we start using them but this is a first first pass at some stuff in javascript okay since that's what this really is i'm going to rename this to be javascript basics and then i'll fork this one into solarwind reproduction okay now we can start having some fun i'm going to delete all this stuff i would like to build up the dom for this textured background that we see in the solar wet piece within this piece i'm going to first target the background of one of these squares so it's going to be the background of the leftmost square where we're just going to have vertical lines going across the screen that's the first target now to do that i think it makes a lot of sense to use javascript so that we can automate the creation of those rectangles otherwise we would be you know creating a hundred rectangles by hand which is just not practical but to get there we need to build up this svg using javascript as a first thing i would like to create this particular svg element using javascript now how do we do that well it turns out there's this thing called document if we say console.log document we can see what this is it says document it turns out it is the html document it's it's a dom node that you can um unpack see it has the head it has the body all of this stuff is available to you in javascript so what we can do is say document.body that actually gives us the body element and on the body element is where we can append things using javascript so as a first goal of something to create using javascript let's create this svg element itself the way we can create a dom element a dom node part of the document object model i'm going to make a variable i'll call it svg and we can use document dot create element and we can give it svg which is the tag name for this element and now if we say console.log svg we see that it is in fact an empty node that is svg right now though this dom node is sort of hanging in space it's not it's not actually attached to the dom it's just in memory in a variable to put it on the page we can use on the body we can use a method called append child svg that will append this dom node to the body and if we inspect the elements on our page here now we should be able to see that in fact there are two svg elements now see there's the one that we created in our html syntax and there's the new one that we created with javascript my aim is to replace this first one with the second one so that we can add more stuff into it it's going to need to have width and height so how do you do that well we can call svg.set attribute and the first argument is the name of the attribute namely width and i'll set that to 960. and from the javascript perspective uh you can pass in numbers and it will be coerced to a string so that's what i'll do because it's conceptually a number and then svg.set attribute width sorry height svg.set attribute height to be 500. now if we inspect the dom we can see that there are two identical svgs look at that so now i can delete this one that's defined in html and just have the one that's defined in javascript there it is so this is our starting point for javascript driven svg without any libraries without using d3 d3 when we do start using it is going to do all this stuff it's d3 uses all of these apis internally it just gives a nice way of interacting with these apis all right now that we've got this svg element let's create a rectangle that goes inside this svg element i'm going to do that by copying this block because it's structurally very similar to what we want to do we want to create a new element let's say a rectangle we can say document.createelement rect to create a rectangle rectangles also have width and height so i'll just set it to 100 and 100 just so we can see something and then instead of appending a child to the body we can append it to the svg this is how you can programmatically build up a tree data structure which the dom is it's a tree data structure so svg.pencil direct should add that rectangle to our svg and i noticed i'm just i have inconsistent formatting i'm going to use prettier to just make everything consistent we should be seeing a rectangle but we're not let's see let's see if the dom is correct oh it's not there's the width and height is 100 on the svg somehow you have to change attribute yeah i just forgot to update it here so rect.set attribute should be the one okay now if we inspect it we can see that it is there all right it is there as vichy has width and height direct is there but it's not showing up the reason why it's not showing up is because we're using create element create element does not work with svg you need to use create element ns so here's why svg and html is a fantastic addition to the web platform but since svg is an xml based language see it comes back to that concept of it is based on xml there is some nuance in how it can be used when parsing html meaning if we write svg and those attributes in html svg elements are automatically created correctly so long as they're inside an svg block but svg elements cannot be dynamically created with create element in the same way as html elements it's in order to dynamically create svg elements you must explicitly tell the browser that you want to use the svg name space so this is something that's particular with xml i must admit i don't fully understand it but what i do understand is this is how you need to do it in order for it to work so let's try this in our code i'm just going to paste that block here for reference it's dot create element ns passing this namespace string that def i think what it's doing is saying okay this is an xml document that uses the svg namespace meaning it's an svg xml document so instead of document.createelement we can say document.createelementns pass that thing and say okay this is an svg container element and similarly with the rectangle we can use the same thing okay now it shows up all right so this is how we can create svg elements that work using the dom api now let's get into um creating a bunch of rectangles to approximate that solar width piece this rectangle is 100 by 100 but what we're going to do is we're going to create a bunch of vertical lines with rectangles so the the width of them could be small let's say 10 just 10 pixels but the height of them should be the same as the height of the whole thing meaning 500. see now now it's going to go all the way down the screen and we can move this rectangle around by setting x if i set x here to be 10 see it moves over a little bit if i set x to be 100 it moves over 100 pixels now at this point i see some duplication duplicated logic in the code it's a very uh simple form of duplicated logic but instinctually i think to myself oh there should not be duplication like that and that is the 500 and 500. now that we're out of html and in javascript we can start using variables and later functions to eliminate duplicated logic to me meaning uh if you have to define something multiple times in different places it's preferable to just define it in one place so that you can you know if you need to change it you could just change it in one place so to do that i'm going to say const width equals 960 and height is 500 and then wherever there's 960 in use i'm going to use width and wherever there's 500 in use i'm going to use height so setting the the height of the svg and the height of the all of these rectangles so it's just a simple refactoring and at this juncture i want to point out that instead of hard coding these we can actually read them from the parent page which i always love to do because then when somebody loads the page and it's resized differently it'll use whatever width and height the page actually is at the time and the way to do that is i believe window dot inner width and window dot inner height yeah so window is another thing kind of like document that's available in the browser that you can call upon and using inner width and inner height gets you the the actual dimensions of the page when it's loaded okay this feels right to me there's no numbers that are hard coded i find this beautiful oh except for 110 but i feel like maybe those are fine for now all right now that we've got one rectangle let's make many rectangles and conceptually what we want to do is you know have this code run but just change x every time but rather than copy paste it a bunch of times i'm going to put it inside of a for loop 4 and i'm going to type this in comments so that we don't run into an infinite loop situation 4 let i equals zero i is less than n i like to use n so that we can change it later if we want to um initially i'll just i'll set it to 100. let's make 100 of these i plus plus and by the way in vishub if you ever do run into an infinite loop you can just type hash recover at the end of the url and this is how you enter recovery mode in recovery mode you can edit the code and it's not going to automatically run and then when you're done fixing the code that created the infinite loop you can just hit exit recovery mode but anyway hopefully that'll never happen so now inside of this for loop this is where i'm going to move this code i'm going to cut this code with control x and then paste it into this block with ctrl v and then use prettier to update the formatting so that it's all indented properly and now we can use i to to move things around see i starts at zero and then uh the second time around i is one and then the next time around i is two and so on and so on until it gets to be 99 in which case oh this still runs for the 99th time but when i gets to be 100 this check fails because 100 is not less than 100 and then the for loop exits so our values of i are going to be from 0 to 99. so the thing that we want to vary is x if we just set x to be i it's going to go across the screen but it's only going to move one pixel at a time right so if we wanted to move let's say 20 pixels at a time i can multiply i times 20 and we get it there it is there it is i see there's a question in the youtube chat um for properties on the window object you actually don't have to write window.inner width just inner width should be enough for the browser to get it yes yes that's true that is true window is an alias for the global object so you can actually say inner height and inner width just like that and it works just the same it's true yeah thanks for that thanks for that however if you use a bundler or a build tool something like that it will complain and say inner width is not defined so that's why i just sort of by default i do like to explicitly say window because those tools well we're not using them now so it doesn't matter but if you are using a tool that sort of checks or eslint for example that checks the validity of the code it often would complain that okay these variables are not defined anywhere so that's an error but it those tools do understand that document and window are things that are provided by the browser and are expected to be in the global namespace so yeah that's why you may need to use window and i see there's another comment you do need window prefix for esm esm oh modules ecmascript modules so i don't know i'll just um i think i'll keep it here for now but i'll just add a little comment that says windows optional sometimes but yeah it's a great little sign discussion thanks for that any other questions in the meantime yes i think uh i have one question um i'm curious about the const inside of the loop um it looks like it's being reassigned but it's it's not um and i'm curious as to how that works yeah that is a great great question it looks as though const is reassigned here but in in fact it's not that's because const and let are block scoped not closure scoped the way that var is so what that means is the block that gets opened up with these curly braces and this for loop defines the scope of that wrecked variable let me give a concrete example here if i say console.log rect out here it says reference error rect is not defined and that's because we use const and it's block scoped that means that that variable does not exist outside of that for loop and so essentially every time that for loop runs with an another version of i that const is recreated in a brand new block scope and so that's what makes it so that cons like this rec it's never actually reassigned the whole variable is recreated again and again each time the for loop runs through one of its loops however if we were to use var here check this out then this console.log rect actually succeeds it actually prints out this dom element here why is that well it's because when you use var it's actually scoped relative to the closure that you're in so right now we're in the global closure because we're not inside of any function definition but if we were inside of a function definition the curly braces of that function would define the closure meaning the scope of that variable and this is actually the core difference between var and the new constructs of let and const let is also block scoped so this is actually the the difference the fundamental difference between var and let var is closure scoped but let see if i use let here it's block scoped meaning it's scoped within the for loop that's why we get this reference error when we try to access it here so yeah that's that's a rundown of scoping with var versus let and const i'll switch it back to const because um it's it's generally i i think and this is a personal preference thing it's generally good practice to use const to default to using const un until you have the need to reassign it and then you can use let it just makes it easier to read the code later on for your future self or for anybody else reading the code someone says let would still be nicer there but i respectfully disagree i mean you could use let i see actually a lot of developers use let by default but um i would argue strongly that it's best practice to use const because when the reader of the code in the future sees that it's it's clear okay this is not going to be reassigned it makes it easier to reason about the code when i see let when i read somebody else's code i immediately look for where it's going to be reassigned like oh that's like something confusing i have to think about it could be reassigned to value where is that reassignment that's where i immediately would go so that's why i would strongly argue that um just use cost by default and if it turns out that you need to reassign it then yeah change it to let change it to let but only if you need it that's just my my personal take on all this all right so i would like to actually reproduce that solarwind piece we've got this as one of the directions of the solar with piece now i would like to change it around so that the texture goes the other way that way we have our two ingredients that we will eventually put together with this clipping path thing to do that i'm going to fork this vis and i'm going to call it solo it reproduction vertical it's just going to be a vertical variant and how do we make it a vertical variant um it's just changing around this stuff here this logic here instead of x varying with i we can very um y with i so y now can be i times 20 and instead of width being 10 height can be 10 and width can be the value of the width variable okay that's it now we've got our vertical and our horizontal and now what we can do is we can use an svg mask the idea with an svg mask is it defines an alpha mask for compositing things so what we can do is say mask give it an id and this mask is going to be the circle in the solar whip piece see how this circle in the middle masks the textures that's exactly what we're going to do here so we're going to have a black background and a white circle for one of the textures and then a white background and a black circle for the other of the textures to invert the mask and this is how we can implement this piece so it looks generally something like this we create a mask element inside the svg and give it an id let's do that and since we're in this world of uh javascript generated stuff we need to use this api which gets cumbersome pretty fast so what i'm going to do is copy that block of the rect and i'm going to change this to mask document.createelement and s mask i'm going to set the id attribute to something arbitrary i'll just call it my or i'll call it um circle mask circle dash mask we don't need anything else and then we say svg.append child mask and that has to set the attribute on the mask and we append the mask as a child okay now that we've got that mask we can we can create a circle within that mask so i'm going to copy this block again and i'm going to say circle is document.createelementns circle and then on that circle we can set the attribute of cx and cy to be the middle so cx would be width divided by 2 to put it in the middle cy would be similarly height divided by two and then we want to append the circle to the mask it has to be a child of the mask now that we have this we can set the mask of these rectangles to be that circle mask and let me just consult the documentation again so on any shape you can say mask equals url parentheses hash the id of the mask and it's kind of a quirky way of doing it but you know that's just what it takes to make it work so i'm going to copy i'm going to paste that reference and then on these rectangles we can implement that by saying rect.set attribute mask and the value of that attribute is going to be url hash and then the id of our mask which is circle dash mask and i think that should work it did not work oh because we need to set the fill of the circle i believe so let's set the fill attribute of the circle to be white i think this is how these masks work no uh black we don't have vertical rectangles at all yeah i know we're not seeing them because i'm sending the mask if i remove the mask then we do see them the question is why is the mask not working oh oh i believe i didn't set the radius of the circle silly me so r of the circle can be say 200 and we may need that fill after all okay so we need cx cy and r i'll just try a value of 200 for r and let me try setting the fill to be white ah there it is there it is got there so now the next challenge uh would be to invert this mask for the other texture the way that we can invert the mask is by setting the fill of the circle to be black and then we put a white background rectangle within the same mask because the way the masks work is black becomes you can't see it and white becomes you can see it i'll follow the same pattern as we have for the circle but with the rect i'll call it mask rect so that it doesn't conflict with the other rect not maybe it wouldn't anyway but anyway i'll call it mass correct and the tag name will be wrecked and on the mask rect we can set width and height just to be width and height because i wanted to fill up the background that's the point of this is to just fill up the background and then mask dot append child mask erect and i would have thought that would work um oh i have to set the fill to be white boom all right see that we've got the inverse and now that we have all of the pieces let's put them together to create our solar with reproduction what we need to do is have the rectangles that go in both directions present at the same time right and so i can use vishhub to look back at what i've just created so we've got these horizontal lines oh and let me consult the direction so the background should be vertical and the foreground should be horizontal so um in this one we have the vertical lines we we should really invert this mask because yeah the foreground should be the vertical ones according to the actual piece and then let's bring back the um let's bring back these lines that go in this direction i'm just going to copy this block from here into here as another for loop that runs n should be really only defined once and check that out that's kind of a cool intermediate state by itself i think i'll fork from that and at this point what we need to do is create another mask that is the inverse of the mask that we already have so i'm going to just take all this stuff that defines the mask and i'm going to paste it and rename this to be mask 2 and i'll call it circle mask 2 not very creative i'll just put 2 at the end of all these variables all right so now we we have that mask 2 with direct and the circle we can invert these colors of the mask so i'll change black to white change white to black and for these um vertical rectangles we can use the mask of the circle mask 2. so instead of circle mask it should be circle mask dash two and boom we have done it there we have our solar with reproduction awesome awesome yeah this is so satisfying i'd like to leave you all with an exercise to do between uh now and next week reproduce any solute piece ideally using the javascript dom manipulation that we've done today and these are actually three different options for an exercise i want it to be openended so instead of reproducing a particular solar with piece you can create art you know just create generative algorithmic art in the spirit of soul the wit very openended you know you can be very creative creative or add animation to what we created today like i was thinking maybe the textures could be rotating or or the circle could change size or something like that so these are your three options in terms of the exercise for this week i have updated the forum index to create uh to have an episode three link so when you uh submit your piece please just submit it as a response to this thread and i'll go over it uh i'll review it next next time all right questions anyone i have a question sure sure what is functional programming and objective programming functional programming versus um perhaps what you're thinking of is object oriented programming that's a great question uh it's it's very like abstract and philosophical in a sense um but i'll give you a brief take you know my brief take on that functional programming generally makes heavy use of functions and in particular passing functions to other functions javascript is actually a functional language it's been called lisp in see's clothing and i love that i think that was who said that i don't remember his name but yeah javascript is lisp a famous functional language nc's clothing and c is a procedural language and c plus plus and java are object oriented languages meaning the central construct in those languages is a class and then you can have instances of the class that are called objects um and so in in the language java for example an object is an instance of a class it's fundamentally different than in javascript an object in javascript is is a set of key value pairs that's often called a you know hash table in other languages and then there's another language called haskell on the extreme side of functional programming in haskell there is no mutation there is no such thing as let and there's no such thing as reassigning a value to an object so you have to create new objects all the time in haskell it's what's called a pure functional language so if you want to learn really really learn about functional programming i would suggest to learn about haskell it's fantastic but yeah practically speaking we are in the world of um functional programming with javascript although it is a mix i mean in es6 there is there is a class construct and you can do objectoriented programming in javascript i personally have sort of moved away from that i don't use classes very much i just use you know objects that have key value pairs that are expected to be a certain thing um and then there's the idea of typescript and type safety which you don't have in vanilla javascript but typescript is great if you want to be sure that there's no um bugs regarding you know objects not having the things you expect them to so that's my brief take on functional versus objectoriented programming i see there are some yeah go ahead what we see here in this one exercise we did just now it's functional programming mostly right i mean is it functional programming is it object oriented programming it's um it's almost like at a at too high of a level of genericness to even say to even make a call i mean the dom api is object oriented in a sense that you know you're you're invoking these functions to create objects that are instances of a class namely the class called dom node i believe it is uh yeah so in this api that we're using it's an interface it's an abstract base class and all of this terminology reeks of objectoriented programming it's like yeah this is definitely objectoriented programming they're having a base class and in objectoriented programming you have classes that inherit from other classes and you have this whole hierarchy of stuff so we are using an object oriented api to the dom so in that sense it is very much object oriented however we're not you know we didn't create any classes of our own so in that sense it's not objectoriented um and we're also not using any functions except for the methods on these instances of the classes so when you when a function is positioned as a property of an object it's often called a method so these are methods on these objects which is also from the objectoriented realm you know instances of classes have methods that's just how objectoriented programming works so if you were to you know broadly say is this code that we wrote today object oriented or functional it's more object oriented honestly we're not using any functions really and even this this way of doing iteration is very procedural if we wanted to do it in in a functional programming kind of way we would use some other constructs and we'll do that later by the way i'm thinking next week we we refactor this whole thing to use d3 and functional programming and abstract away duplicated logic with functions just to see how things get really tight and concise when you do really embrace functional programming and thanks somebody in the youtube chat said um lisp and sees clothing is from douglas crockford yeah yeah yeah douglas crockford he's he's got some really good stuff really good really good written pieces about javascript oh someone asked could i do this using visual studio code yes yes of course i mean it's just a text file here so invis hub by the way you can export the thing and you get a zip file you can extract this somewhere and then just open up index.html in visual studio code and you know everything will just work the same way that it's working here except that you'll have to open up the file in a browser and every time you make a change you can have to save the file and then go and refresh the browser unless you get deeper into the tooling of having something that automatically refreshes like a webpack development environment yeah all this stuff i'm i'm doing here is just purely uh html standard standard html and javascript and svg and it's it's not in any way dependent on the fact that i'm in vishub this hub is i'm just using as a teaching tool so that i can give you references to these code files but yeah you could totally do all this with visual studio code and as we get deeper into javascript i think i'll get deeper into um showing how to work outside of his hub using different build tools yeah great question oh yeah there's a discussion in the youtube chat about um classes in javascript is actually syntactic sugar for appending stuff to the prototype it's very true it's very true but that's like that's a whole other rabbit hole there's like uh when you create objects in javascript you can actually create them to inherit from a prototype which is it's just a whole can of worms that i just would rather not get into because we're not going to need those constructs another comment in the chat is you could have wrapped all this stuff in view.js yeah it's true it's true i mean this is a very crude way of doing dom manipulation but i wanted to explicitly use the dom apis just so you see what it is in its bare form you could wrap all this stuff in d3 do it in react do it in angular do it in view anything but the resulting dom is going to be the same and that's really what matters in terms of what you get uh what you see on the screen all right i think i'll wrap for today this has been a really good session and um yeah i'm really super excited to see what you all come up with feel free to fork this or start from scratch um you know be creative add gradients or whatever add animations and all right really looking forward to next week thanks everyone for joining see you in a week bye all right welcome to episode 4 of get it right in black and white today what we're going to do is use d3 to reproduce this solar with piece in its fullness with different shapes what we'll cover includes uh a review of exercise submissions from last week and then we're gonna start using d3 selections and data joins we're gonna take what we did last week and refactor it you know move the code around change it so that it does the same thing but uses d3 and then we'll look at d3 symbols d3 actually provides these nice shapes that we can use uh and along the way to reproducing that solar whit piece we're going to talk about svg group elements translating group elements meaning moving them around and we'll touch upon d3 point scales and potentially band scales depending on how far we get all right so this is the solar with piece that we're aiming to reproduce and today what i'm hoping to do is get to the point where we have multiple different shapes in this mask and if we get to that point and still have time i want to tackle the problem of the background being different for each of these um i think the first pass would be you know the background is all uh vertical lines and this the filled in shapes are all horizontal lines that would be the first phase that we're going to shoot for so phase two um would be to make it so that each square here has has the um the horizontal lines in the background and the vertical lines in the foreground alternating with the vertical lines in the background and the horizontal lines in the foreground so i don't know i hope it's not too ambitious um let's give it a shot all right here's the forum post from last week let's see what we've got um felipe mayo he's been following and i'm very impressed by this work um this is actually a game check this out uh he is my face with you know this solo witesque kind of a thing going on pretty wild and it changes over time i'm just blown away by this very nice very nice work yeah and i think he actually made this into a fullblown game although i can't find it right now and look he made this one earlier oh this is so good look at that incredible really incredible so here's another one from w gloss this is pretty neat there's some randomness here very cool very cool yeah vanilla javascript and dom api here's one from nita check this out whoa what that's crazy oh my gosh nita you want to talk about this a little bit yes i can can i see the code so i added animations and fast that's very cool but how is how are they all going could you mute yourself now how how is it that each of these are are not going all at the same time it seems like it's the duration of this animate is is a random number that's really cool really cool so that's how that effect happens very nice and whoa look at this one very nice it almost looks like threedimensional uh balls or something wow very cool very cool let's see oh here it is he posted again this is the game version so i was i was quite impressed by this check this out you have to you have to you have this is so funny you have to click when it's black and white so that's i just got one point and if you click when it's not black and white okay i clicked on a black and white again but if you click when it's color you lose a life see that one less little icon there so this is just through the roof really great job really creative very nice work here's another one from nita a bunch of circles wow beautiful beautiful grid of circles very nice do you want to talk about this one at all yeah i would like to talk about it so what i did here uh we are actually positioning each circle in x and y direction so we are using i and j twice so we can get the kind of matrix values in the matrix i and j for each cell there something like that let's say it is going in the x direction and y directions at the same time beautiful you are getting the whole grid gets filled up depending on how many numbers circle we are using and you can add animation and other things on top of it and i did it in another example i kept forking it again and again it was just fun awesome awesome thank you yeah this is great so it's a nested for loop where i goes from zero to count j goes from zero to count and for each combination of i and j the circle is positioned very nice it's very nice and it's pretty close to this other solar with piece so that could be the next phase perhaps all right that's it that's all the work very cool all right here we go here's our piece that we made last time i'm going to start by forking this and i'll call it solar with reproduction with d3 all right open the editor the first order of business that i want to do here is include d3 into our app here one way to do that would be to add a script tag to the head and put the source equal to something usually from a cdn like unpackage a cdn is a content distribution network that essentially hosts files on the web that you can pull in however in modern web development usually you use a a node js based build system like using webpack or rollup or using some starter app system framework thing and there's a relatively new feature of this hub that lets you approximate package.json which i'm very excited to start using so let's let's do that i'm going to make a new file called package.json package.json by the way it's like a it's a standard in a way npm and the node npm stands for node package manager it's a whole ecosystem of javascript libraries and so npm expects this thing called package.json and you can put a bunch of stuff in here like set the license and you know add dependencies dependencies is what matters for us so it's you specify this object that has dependencies and then the library name and the version we can use this to pull in d3 to our program in package.json i'm going to make it an object in in json format javascript object notation format json and the key will be oh there's some something strange happening all right so we can type dependencies as the key and the object can contain d3 at some specific version and um let me check which version d3 is at the way i like to check that is to go to which is a cdn that hosts script files and just type d3 and it will automatically fill in the latest version so we're at version 6.6.1 so in here d3 version will be 6.6.1 all right that's like a bare minimum package.json and then what we can do is introduce a a script file where our javascript can go and just by convention i'm going to call it index.js and what we can do is take all of this javascript that was in this script tag directly on the page and move it over to index.js and everything still runs now i can delete that script tag over here and we have this sort of new setup in which we can import from d3 so here we go let's pull in something from d3 i'm going to say import selection from d3 this is es6 module syntax to import from packages and this syntax you can use again with all the modern um templates and whatnot and so let's see if this worked console.log selection i just want to see did it get defined as anything in the dev tools we can say that indeed it's a function array it's a function from d3 it's got these weird uh characters because it comes from a minified file the the d3 build but anyway this means that now we can start using d3 so let me talk about selection if you google d3 selection and click the first result it's the documentation page for this package called d3selection and d3 by the way is structured as a collection of many smaller packages that are all composed into this one monolithic library called d3 and so if you see in in d3 itself it just it exports things from all of these d3 packages which you could use on their own but for convenience sake i'm just going to pull in the whole d3 build which contains all of this stuff but anyway d3 selection is one of these things and i'm gonna pull in uh from there and feel free to stop me at any time with questions by the way yeah i haven't really introduced um d3 itself let me stop and do that since this is this first time that we're pulling in d3 i thought i would take a moment to discuss d3 and why we'd want to use it overall just some broad context for this d3 stands for data driven documents it refers to documents as in the dot the html document object model d3 has utilities for dom manipulation which we did last time with the vanilla um javascript api for dom manipulation which was quite verbose a lot of that stuff can be changed such that it uses d3 for dom manipulation and the code will shrink down it'll be a lot simpler to read and use in addition to daw manipulation d3 has all sorts of utilities for building data visualizations so that's why it has become sort of the de facto standard for building visualizations on the web today the whole rest of this series is going to be diving into using d3 to make all these different types of visualizations but as a starting point i wanted to introduce d3 in a way that's disconnected from data and all the complexities that comes along with data in this solar with exercise here d3 selection is the package within the set of d3 packages that does dom manipulation here are some examples of how to use it um and and i'll go you know we'll craft these ourselves but for reference this page is the canonical documentation for d3 selections all right now that we've imported selection from d3 we can start to use it to replace this code that we had from last time so here's what i'm going to do i'm going to comment out everything and then reimplement it with d3 one block at a time the first block to consider is the one that sets up the svg element i'm going to comment this out as well and replace it with some d3 based stuff select body is what we need to do to get a d3 selection of the body element and now that i think of it um we really need to import select from d3 not selection so we've got select from d3 we select the body and a d3 selection instance is this sort of complicated thing that we'll be learning more about but it has this this pattern of using it called method chaining where once you invoke something and you get a d3 selection back that thing that gets returned by this function has a bunch of methods on it one of which is append and you can pass into append the tag name like svg and that returns the selection of the svg element that was appended to the body so this this one line here does the exact same thing as this line and this line it creates a new svg element and appends it to the body to set these attributes on this well first of all let me save this as a variable i'll call it svg once we've got that we can say svg.attr which is short for attribute internally this actually invokes set attribute and the signature is compatible with the vanilla dom api method set attribute so i can just paste this stuff here we set the attribute of width to be the value of the variable width and same thing for height the height attribute gets the value of the height variable now we can inspect the dom to see if it worked sure enough there it is there's an svg element with width 960 and height 500 any questions at this point all right so this is one way to set up the svg element due to this method chaining thing you can actually combine these together into one big statement so instead of having multiple different statements it could be one giant statement where we chain these things together so we append this the svg and then on the selection of the svg we set the width and height all right so we've got our svg setup the thing that i wanted to do next was add the the rectangles that are in the background that would be a good next thing to add yeah this block here where it's a for loop that adds a bunch of rectangles let's do this with d3 so i'll bring that up here the way we would do this in d3 is we need to have an array to work with and then once we have an array we can use the d3 data join concept so here's what we can do i'm going to use this code as a template to build up an array of objects where each object represents the attributes of a single rectangle so i'll paste that uncomment it and then i can initialize an array i'll call it marks because it represents the visual marks that are going to appear on the page i'll initialize it like this to an empty array and then in the body of this for loop instead of creating dom elements i'm just going to push objects onto this array meaning you know append them to the array add new entries to this list of things by using the push method so we can say marks.push and pass in an object literal and on this object literal i can build up all the things that it needs to know to render a rectangle so y for example could be set to i times 20 width could be set to width height could be set to 10. i'm just copying from what's there and the mask can be set to this string here that's how we can build up an array of objects that describe the rectangles this is not using d3 at all this is just pure javascript and just to see that it worked let me console.log marks sure enough we get this array and we can see it's got a bunch of objects where the only thing that really varies is y all right so far so good you have a question yes so we are doing this because dt requires right yeah yeah that's right um you know your audio is really bad i don't know what it is but maybe grab a camera or something the reason why we're setting up this array is because d3 expects an array to work with to use this data join feature of d3 which we're going to use right now i'm going to refer to this svg selection from earlier to add rectangles inside of it and to use this pattern of d3 data joins we can take a d3 selection and say you know that selection dot select all uh rect this makes a selection of all rectangles that are on the page already and at the point that where this code runs there are none but the fact that there are none is useful information to d3 because it knows that okay the set of dom elements on the page it doesn't contain what it needs to therefore i have to add it so once we've said select all we can say dot data marks this produces a d3 data join that has a bunch of methods on it um one method which was added fairly recently uh in d3 is dot join it's a simplified api to um the other stuff that was in use before like uh and dot enter uh dot merge sort of stuff and we'll you know we'll get deeper deeper into this but this is the simplified api that we can use for our case so what it's going to do here is create one rectangle for each of these marks and then on this selection that contains all these newly minted rectangles we can set some attributes we can set the attribute of i'm looking at this object here we want to set all four of these attributes we can set the y attribute to be well what we want to set it to is the y value from the corresponding object that was constructed over here to do that we can accept a function as input to the second argument to attr and that function can take as input d which is the datum uh it's just a convention to use d to represent the datum like one row of the data or you know one entry in the data array and that can return d dot y because we've set it up here so when we access d dot y it's going to access the y value that we set up over there and we can do a similar thing for all the other attributes that we need width we can set it to d dot width height we can set it to d dot height and mask we can set to d dot mask and that that's not doing anything now because i commented out the actual masks and as you can see it worked we've got our rectangles back this is how you can use d3 to create a bunch of rectangles on the screen now this duplication between here and here is not ideal but i kind of like this way of doing things in a sense because it decouples the computation of the marks from the rendering of the marks this here it just creates an array of objects that we can directly pass in to all this d3 logic over here and i like this setup because if in the future you ever wanted to change what you were using for doing the dom manipulation you could and this part wouldn't have to change at all the only thing that would have to change is this like if you wanted to render it using react or view for example these other dom manipulation frameworks but this is not often what you see so often what you see is it's all combined into one big block and in a sense that's more efficient because there's no need actually to create all these strings if they're all the same and then refer to it here you know we could just pass in uh the value right here so what i'll do i just want to show you how that looks so i'm going to comment out this so it's there as a reference in the future and then refactor this to use the more common pattern that you find with d3 which is to um to compute all the values in these accessor functions so instead of doing all this stuff here i'll do it down here and if we're doing it like that we don't actually need all this logic to build up the array we can use a utility from d3 called range which creates an array range of say five it creates an array that has five integers in it that start at zero and to use this we need to import range from d3 along with select now that we've done console.log range of five you can see that it did output here that array that just contains some numbers so this is the data array that i'm going to use now as the input instead of saying data marks i'm going to say data range of 5 but we did have this variable called n which is the number of rectangles so i'm going to use that instead now in here instead of accessing the properties that were on those objects we can compute those values on the fly um d is the number in this case so i'm just going to say d times 20. it can take the place of i and for these other ones i'm just going to return width and 10 for height and then this string of the circle mask right here and since these are returning the same values for each rectangle these don't actually need to be functions we could just pass in the value directly like this this highlights an important aspect of this dot attr method that it accepts either constant values like this or functions and when it when it accepts a function it passes in the object from the array into that function and then whatever that function returns it's going to use as the value for that attribute all right so we've got this far let's keep going in our refactoring of this code here what does this block do it creates a mask and it sets the id to be circle mask and it depends it to the svg we can do the same with d3 by saying svg dot append mask and we want to set the id attribute to be circle mask all right that should do the same thing as this block of code over here i don't know why it's not showing up our rectangles though oh oh yes because now that mask exists but it doesn't contain anything yet it doesn't contain those the circle or anything so that's our next step the next block of code adds that background rectangle of the mask let's do that now with d3 that would look like a mask dot append although we don't have mask yet um i'll just define that here to be that d3 selection of that mask element so now we could say mask dot append wrecked this one statement does the same thing as this statement here which creates the rectang element and also appends it to the mask parent now we can set the attributes width height and fill and if i change this to white it should show up all of our rectangles and it does okay but black means hide the rectangles this next block does the same thing but for a circle so i'm going to copy that logic for the rectangle and change it to be for a circle instead where we set the cy attribute we set the cx attribute and we set the radius attribute and finally we set the fill attribute of that circle all right and the mask is working again fantastic now let's do the same for mask 2 now remember mask 2 was all the same stuff as mask one except just the colors were inverted so we can copy uh this whole block of stuff mask 2 oops is a new mask that has the id circle mask dash 2. and then we append a rectangle to mask 2 and instead of it being black it should be white and then we append the circle to mask 2 down here and the fill of that should be black instead of white okay that seems to be working although i forgot to change it to mask 2 so i'll change that now mask 2 dot append mask 2 dot append all right and lastly we have our rectangles which i'll bring up to the top near the other rectangles just so all the rectangle stuff is in one spot so i'll paste that here and it's almost exactly the same as this block of code that we did for the first set of rectangles the only difference is that x gets set to i times 20 so i'll just change this y here to x width gets 10 height gets the value of the height variable and the mask is circle mask dash two okay um see this breakage this is not what we expect see that so does anyone have any idea what's going on here see what appears to be happening here is that this first chunk of code that made these rectangles it set up all of these rectangles uh properly but this line this next block of code that deals with rectangles it actually selected all of the rectangles that were there from the first block of code and then it set um the x value of that and it set the height value um so it's just sort of a mess where our two different blocks of code are you know impacting the same set of rectangles which we don't want so how can we how can we make it so that these two different blocks um act on different rectangles well there's a couple of approaches one approach is we could use classes to differentiate them and another approach is we could use group elements to contain them let me show you how both of those would play out if we want to use classes we can set the class attribute to be something like maybe horizontal and then when we say select all we can say rect.horizon to only pick up on those horizontal ones and it's still broken because we haven't done the same treatment for the other set but we could say class is vertical over here and then we select on the vertical rectangles only this is one way of doing it i'm going to fork at this point just to have a reference of that state of things okay so this is one way of doing it using classes another way i'm just going to put it back to the way it was another way of solving this problem is to use group elements where you could say svg.append g first and that way it would only be working within this newly appended group element and an svg group element is it's a very um useful element it it just groups its children together in the dom tree and let me do the same for the other set okay now you can see it's it's not broken anymore and if we inspect the dom we can see that there's one group element that contains the set of rectangles going from top to bottom and then there's an entirely other group element that contains the rectangles going from left to right yeah and the reason why this works is because the selection for the rectangles only acts within each of these different group elements so that's another way to to solve that breakage okay very good this feels like a milestone from here i'm going to fork this and try to reproduce that the full the full set with the different shapes any questions at this point yeah just a couple uh um the attributes uh the attr um just so to get it straight in my head those the second arguments to the attr methods those effectively s take match a data point in the um your array and put it on the screen basically that they they attach some kind of pixel point to that data point is is that the right way of thinking about these um these these arguments that are passed to attr yes yes that's correct that's exactly right so whatever we pass into dot data should be an array and the dot attr applies to all of the dom elements in that selection and so after we call dot join um the first time this runs i mean it's not running multiple times but when it runs it's going to create a bunch of rectangles and then for each element of that array it's going to pass that element as the argument to this function that we've passed in and so the responsibility of this function is to map that entry in that array whatever it may be whatever shape it may be onto whatever is expected for the x coordinate in this case or in general the you know the attribute value of the dom element and so yeah it's a mapping function that essentially transforms the thing from data space whatever that may be into i like to think of it as screen space in this case the xcoordinate so literal position on the screen uh but it could also be a color or you know width and height like these cases here but yes yes that's exactly what it's doing thank you yeah that makes sense and the earlier chunk where it talks about yeah append g um and select all and data are these so just so my mental model is correct um or as close to correct as possible it's recrea it's creating a brand new selection um at that early stage and what the attr's are doing are modifying that selection is is that is that the way to think about it correct yeah some of these lines create a new selection and others of these lines modify an existing selection there was uh in the past i mean it still is there was a convention around indentation relating to this point and that convention was any line that creates a new selection be indented one level and then any line that modifies the exist the other you know modifies the selection that was defined on the line above uh should be indented by two spaces however that's sort of fallen out of fashion because everybody's using prettier nowadays but it's a nice touch and just to to really make it clear let me walk through each and every line of this svg.append g creates a new group element a dom element you know internally it invokes exactly this code of um you know document.createelementns with the svg namespace and it takes that that dom node that was constructed and associates it with this new newly minted d3 selection that didn't exist before and it creates a brand new selection so the return value from svg.append g is a selection that just contains that one group element when you say dot select all rect this creates yet another d3 selection that happens to be empty um it's it's an empty selection that would contain wrecked elements if there were wrecked elements there but there's not um this information the fact that it's empty is very useful to the internals of the dot data method which associates an array to that selection and at a certain point selections were made immutable which is a really nice feature of selection selections are immutable so the dot data call creates a new selection where that empty selection of no rectangles is associated with this data all right and then when you say dot join rect this is actually a short form of another pattern which i'm not sure i totally want to get into but uh essentially it's dot enter dot append wrecked and so the enter selection handles the case where there's no dom element on the page corresponding to a given data element and so for each of those cases it will append a new rectangle so that's this this dot join is a short form for that in this particular case and then all of these lines that use dot attr they they don't actually mutate the the anything in javascript like the so the d3 selection of these rectangles is immutable however what it does when this line runs it goes through each and every dom element and it mutates the dom element it sets the y attribute to be the return value of you know whatever the value is returned from this function and same thing with all these others it goes through and updates the dom elements based on the return values so i hope that clarifies the the role of the different pieces definitely thank you very much my pleasure i see there's some questions in the youtube chat did join us to be enter rect well no it used to be dot enter dot append wrecked and join it actually does something with merge but we we'll get to that later um another question from the youtube chat since mask height and width are the same can you bind them to a parent g element that's interesting so the mask width and height are applied to the the rectangle within the mask not the mask element itself therefore um no i don't think you can do that i don't think you can do that okay here we go let's um let's fork this one and i'll call it full solar with reproduction with d3 the first thing i'm going to do here is just delete all this junk that is left over from earlier deleting all these blocks that are commented out all right now we're left with this program that is 62 lines of code what we can do next is change this mask to be a shape and d3 actually provides a set of symbols that we can use there is a package called d3 shape and in d3 shape there is a section on symbols these symbols here are provided by d3 and the way this plays out is that um you call some d3 functions and it generates for you the string to use as the d attribute for a path to create one of these symbols on the screen we need to just make a path element and then set the d attribute to the the return value from some invocation let's see what that invocation would be we have to call d3.symbol and pass in type and size the type that we pass in should be one of these symbol types like d3 dot symbol circle d3 dot symbol cross d3 dot symbol diamond also the set of symbols is exposed as d3 dot symbols this is an array that contains all of these individual things and so since our aim is to reproduce this piece which has a bunch of different symbols going across i'd say we can just use that array of all the symbols that are available and you know traverse it use that as our data all right so let's import symbols from d3 in our code import select range and symbols from d3 we also need to import symbol from d3 the way we use this is we call symbol passing in a type and a size and that returns a symbol generator which we then need to invoke with some arguments or no arguments i guess works and that there's some just there's just something complicated um that you could do if you pass an argument but you don't need to pass an argument so once you invoke this function it will return that that string that we can use as the d attribute of a path so let's give it a shot on one of these masks i'm going to replace this circle with a path and instead of cxcy and r we can set the d attribute to be symbol and i'm going to pass in the symbol type which i can just access you know symbols at index 0 the first entry of the symbols array and the second argument here could be the size um i don't really know what the range of size is let's write 300 and this invocation here returns a symbol generator which we then need to invoke as a function and once we do it should return some stuff all right i don't see anything maybe the size needs to be increased there it is i see something start to appear yeah okay there it is the first symbol happens to be a circle but to see some other shape we can access i don't know the next symbol symbols that index one for example notice that the symbol is centered in the upper left that's i think the first problem i would like to address here um yeah and the way we need to do this is uh well we want to move it around my first goal here is to move it so that it's in the center and to do that i think the most straightforward way to would be to use an svg group element as the parent of this path and transform that group element meaning move that group element around with everything in it let's try that all right so here we've got mask dot append path but instead what if we did mask dot append g dot append path this works just the same as it did because it's just a grouping with no transform applied to it to apply the transform to this group element to move this path around we can say dot attr transform and the value will be translate of let's just try some numbers 400 comma 400 yeah that moved it the way this works is um it's a string but it looks like a function invocation it's it's a domain specific language for transforms and what it looks like is the first argument to this function s kind of a thing in a string is the x coordinate so it's going to move it over to the right by 400 pixels and the second argument here is the y coordinate so it's going to move it down by 400 pixels ideally to put it in the center we could say width divided by two and height divided by two but since this is a string that's not going to work we can take advantage of an es6 language feature called string template literals and the way we can use this is by using backticks and then inside of this thing we can bust out into javascript using this syntax here a dollar symbol and then a pair of curly braces so now whatever is inside this pair of curly braces will be evaluated as javascript and inserted into that location in the string so now we can actually use width over two and height over two and now it's dead center look at that i'll bring the size down a little so it fits on the screen there we go all right so the problem now is that one of these masks uses this symbol and the other mask still uses the circle so i mean one thing we could do to address that is copy paste all this code which is what i'll do for now and change white to black all right now this sort of looks is starting to resemble that solar wood piece a little bit more but i hate this duplicated logic between these two blocks these two masks i mean there's a bunch of code that looks almost exactly the same the only difference is one of these is filled with white and has an id of circle mask and the other is filled with black and has an id of circle mask 2. and now that i think of it these names are a little outdated um because it's not circles anymore so i'm going to rename it to mask 1 and mask 2. and i have to go and update the references as well okay now what i would like to do before we go any further is refactor this so that there's no duplicated logic the reason being once we start adding more shapes into here we're going to have to copy paste larger and larger chunks and if we want to change it in one place we'd have to change in two places it would be a total nightmare and so this is a point at which refactoring makes a lot of sense refactoring is this notion of reorganizing code so that it's more maintainable or you can do more things with it generally refactoring is triggered when you see duplicated logic in your code all right so what i'm going to do here is define a function and the idea is we can invoke this function and and we can pass in only the things that vary between the two namely the mask id which is different and the fill which is different so let's try that const um what should i call it render mask equals function and i'm just going to take all this logic that appends the rectangle and the path and put it inside these curly braces and use prettier to automatically indent that now the things that we want to accept here are the id and the fill uh oh but first of all we should actually invoke this function okay now everything is in working order again and we can take as as one argument here the id of the mask and we can use it here when we're setting the id so i'll say render mask and pass in that string mask dash 1 here which surfaces inside of this function as the local variable called id which is used here to set the attribute id on the mask right so we can actually now call render mask twice passing in different ids and i'll just comment out this other block because um it's going to be replaced by this function all right so the the fill is the other thing that we we need to have vary between these two function calls so i think what i'll do is instead of white this will be fill which we can accept as the second argument and so what we can do here is pass in white to the first one and black to the second one although this is not exactly right because we also need to deal with the the background rectangle which needs to be inverted like if it's black it needs to be white so you know what instead of using fill i'm going to accept an argument called inverted and this this will be a boolean where if it's true the colors should be inverted if it's false they shouldn't be and so inverted for the first invocation should be false and for the second invocation should be true and then uh we want the rect fill to be black if it's not inverted and white if it is and to do that i see there's some youtube chatter let me finish this thought and i'll answer some questions there to do that the tool that i would reach for is the ternary operator so we can say inverted question mark if it is inverted this should be white otherwise it should be black since this is the first time i'm using this um i want to stop and show you what it would look like without this syntax it would look kind of like this let rect fill equals black and then we could say if inverted wrecked fill equals white and then we would use rect fill down there so what it's doing is if it's not inverted this code will not run and wrecked fill will be black but if inverted is true erect fill will be white and this will be filled in with white however i think the cleaner syntax would be to use the ternary operator and say if it's inverted it should be see now i'm losing track you know which what should it be let's say black and white now we can apply the same logic to the fill of the path but it should be inverted from the background and so if it's inverted now it should be white if it is and black if it isn't okay there we go victory now we can get rid of this commented out stuff here and now there's just one block of code that is responsible for rendering this mask the first time we render it as mask 1 which is not inverted and the second time we render it as mask 2 which is inverted and at this juncture i want to introduce the the syntax of calling functions on d3 selections what that looks like is it can take this is just a convention that i want to introduce now it's a convention that's used when you start to use functions to abstract uh to build abstractions in this d3 world so what it looks like is we pass the selection as the first argument and inside of this function we refer to it generically as some selection and we would pass it in as svg here as the first argument now it works everything works as expected and the conventional way of doing these sorts of invocations with d3 would be to use selection.call so we could say svg.call render mask and then pass in these second two arguments here like this and we can invoke it again with these other arguments these two are exactly equivalent in terms of what they do i just wanted to introduce this way of invoking functions on selections it doesn't have any immediate benefit right now um but it can be a very nice elegant way of doing it one of the things one of the reasons being that you can chain it like this so this is also valid syntax all right so i'll fork from here just to capture the state of things now the task before us is to render multiple symbols in here instead of just one so how can we do that well we've got symbols at index one in use here and what we essentially want to do is iterate through so if i change it to be symbols at index 2 the shape that you see is a different shape and symbols that index 4 is a star for example what we want to do is append multiple paths where each path has the this d attribute from a different symbol so how can we do this instead of just appending a single path we can use this data join pattern that we used earlier with our rectangles what this looks like um is well instead of doing it on the end of here i'm going to assign a variable called g just to sort of separate these concerns here so g is our parent we can say g dot select all paths and initially it's going to be empty dot data and what should the data be here what i'm thinking is it can just be the same thing we did with the rectangles we can use the range utility to create an array that contains integers starting at zero and how many things should be in here well it should be the same as the number of symbols that are available which we can access from symbols dot length all arrays have this dot length property and it it returns to you the number of elements that are on the array all right so we've got this array of integers going from zero to uh the number of symbols so now what we need to do is use this dot join method on paths now it's going to create a bunch of paths and on each path we want to set the d attribute to be something like this that we had earlier but we want it to vary based on the symbols and we also want the fill to be white or black since we are making multiple paths we can use a function here to take as input d one of these integers and we can access symbols at index d to have it be different symbols and what we get here is like this giant splotch where all the symbols are right on top of each other so the task at hand here now that we've got this far is to split these apart in the x direction so that you know one symbol is on the left and one symbol is on the right since we have d as an integer that starts at zero and goes upward we could potentially move each of these group elements over if we had them but we don't we're just creating path elements and there's a containing parent group element i think what we really want is to have it so that for each symbol there is a separate group element created and then within that group element there should be a path yeah to clarify what i'm what i'm saying if we inspect the dom here we can see that within the mask there's a group element that has a transform and then within that group element there are a bunch of paths i think instead we want to invert this containment relationship where for each symbol there should be a parent group element that gets a different transform that gets translated differently in the x direction and then within each one of those group elements we can put the path yeah that's what i'm going to go for and we could keep this parent element but i don't think it's necessary because we could just set the transform on the inner elements so i'm going to get rid of that for now and instead of appending our paths to g i'm going to append them to mask now it's working again but it's it's in the upper left corner because um you know they're at the origin now the next step here is to use group elements instead of paths so i'm going to say mask dot select all g dot data dot dot dot join g however this this convenience method is no longer enough for this case that we've got now we need to deal with this concept of the enter selection because what we want to do is tell d3 whenever you create a new group element you should also append a path element inside of it yeah and to do that we need to use the join method in a slightly different way um what we've seen so far is the shorthand of join where it accepts a string being the tag name but the long form of dot join is where it accepts arguments for enter update and exits and i'll get more into this later but the simplest form of this is we pass a function to dot join and it's interpreted as uh the enter selection um actually more precisely we need to pass a function that takes as input the enter selection all right i realize it is a little confusing and in here we can say enter dot append g to create our parent group element but on this we can say dot append path and then on these paths is where we can set the d attribute and the fill attribute okay we're back in working order just to work through to walk through this one more time we're passing a function to dot join that function will be invoked with the enter selection of this data join and because there are no group elements initially the enter selection will will have this append method that will get triggered for each and every entry in the array so we append a group element and we append a path element to each of those group elements and we set d and fill on each of those paths so now if we inspect the dom and look at it that way we can see that there are indeed many group elements it's just that what we need to do now is transform each of these group elements to translate them so that they're in the middle vertically but they're spreading across the page horizontally and i see in the youtube chat vonnie says use this code right here okay i'm going to copy that code and see if it works thanks for that i'm just pasting this from the youtube chat oh that's that's what i've got already but yes that's correct that's correct um all right what we want to do here is for these group elements we want to set the attribute of transform to be we can take this thing that we can had constructed earlier translate by width over two height over two okay now it's in the middle again but we don't actually want to translate in the x direction by width over two we want to translate in the x direction by a function of d and keep in mind d is an integer that goes between one and uh however many symbols there are let's just say d times 200 to like spread them out by 200 oh but this is not a function it's just a string literal so let me make it into a function that accepts d okay there we go there we go all right it's starting to come together that looks like pretty cool abstract art right there oh vani says it's not the same it uses i let me see that let me take a look at that yeah so this is the code that i wrote this is the code from vani in youtube it's it is slightly different it accepts i yeah this when you pass a function it does take um a second argument which is the index in the array so this works as well just the same however it just so happens that the array is integers that would be the same as i all the time so that's why this this variant works but anyway um we can just tweak these numbers to make it so that different shapes show up at this point so they seem to be a little too large what if i say you know the size is 50 000. and by the way i think this size is like the number of fills filled in pixels i don't know it's it's just they're high numbers but i don't know this is just what what it takes so i'll bring down the size until we can see multiple shapes there we go starting to starting to come together and i'm just guessing here at the this constant that will split them apart you can make it even smaller all right this is almost there look at that beautiful beautiful any questions at this point so the example of the join in this case that was a case of appending elements to multiple elements which was uh different from before um is that right correct yeah it's it's a slightly different pattern and it's using the the long form of dot join so that we can access the enter selection yeah so it passes in the enter selection and the enter selection is populated with um the case where there is no corresponding group element for a given data element which is the case for all of them when this runs that's why enter dot append g will append a group element for each and every entry in our array here for each and every symbol and then after appending that group element and setting the transform we append to that group element a path and then dot attr d um this whole thing works because of some the way d3 is set up it actually uses the the data element that was bound to the parent so that's why this works the data element d which is one of those integers is associated with the group element and then if you append to it if it came from the enter selection you can you can reference those those data elements from the child so that that's why this this uh works but i realize it is a lot at once in for today um but that's sort of the intention to just like show you know the scope of this d3 data joint thing um and it will hopefully become more clear over time but does that answer your question uh yes thank you yeah that's really clear thank you nice nice and by the way this this dot join method is is new to me i mean i've i i learned really well the old syntax with the dot enter and the dot merge um so for what it's worth i really only learned this this pattern recently and i'm still sort of you know trying to wrap my head around it so yeah feel free to interrupt me as i go and ask questions like this this is great this is great oh my gosh oh look at this what time is it oh look at the time i'm overtime i'm so sorry all right well we've got pretty far for today i just want to wrap this up by tweaking these numbers a little bit so that there's some space along the side see how this circle is right up against the edge there um i can just add some constant to this like a hundred yeah that looks decent and then i'll bring this number down so that there's some space on the right yeah like 125 or so and i'll bring the size down just a bit to make sure that we can see all the shapes and in viz hub you can set the height so i'm going to make it maybe 200 pixels so that it more closely resembles the original piece okay there we have it there we have it that's all we're going to do for today i will leave it as an exercise to make the back sort of scratch that to make the background rectangles match the original solar with piece so here's your exercise and this is this is um kind of a challenging one see how in this original piece each subsequent square uh reorients the lines however in our example what we've done is um they're all the same so that's one thing you could do as an exercise alternatively um i i would encourage you to use d3 to try to reproduce any other solute piece because now that we have this this new tool in our toolbox of the d3 data join it'll become a lot easier to reproduce these solar with pieces or create art just generative art in the spirit of solo wit and just as a reminder here's some other solo wit pieces that you could do with the tools that we have now the svg mask and the paths this one for example could be done with nested for loops and math.random to pre produce the points so yeah that's all for today um thanks everyone for joining and i'll see you next week here's what i'm hoping to cover today javascript arrays writing the dot range function of d3 using vanilla javascript i think this is a good example to cement understanding of arrays and functions and then we're going to look at the ins and outs of d3 selections that's what this diagram is over here we'll get really deep into that and then the d3 data join concepts and various ways of implementing them with the d3 apis all right so from here i'm going to dive into vishub and i'll create something new just to uh to get some variety and how we include d3 i'm going to start with this hello d3 version 6 d3 starter i'm going to fork this and call it um oh actually apologies we're just going to do vanilla javascript first for arrays i think i'll start with this html starter just totally vanilla html here and i'll call it javascript arrays all right i'll open the editor clear out the readme and then we've got this index.html to work inside and again i'll open up the developer tools so we have this console to work with and it says here hello javascript from this console.log hello javascript all right so we won't really need any html output so i'm just going to sort of clobber all this stuff so we can focus on just the javascript and even i'll hide the output just so we have our code and the output in the console here all right javascript arrays javascript arrays are like arrays in many languages it's a list of things essentially and the syntax for javascript arrays is something like this square brackets square brackets right here it just defines an empty array and you see here it inherits from the prototype of array which is a builtin data type in javascript and if we want to put things in this array we could say like 1 for example now it's an array that contains 1 or 0 comma one now it's an array that contains two things zero and one and in the developer tools if you click this little arrow it tells you all right at index zero the entry in the ray is zero and at index one the entry in the the array is one and we could put other types of things in here like a and b for example this really demonstrates the index concept so the index of the array always starts at zero and you can sort of use that to look up things at different indices different places different numbers in the list so let's assign this to a variable then we can do more things with it const array equals this and then we can say console.log array same thing happens now we can access things in this array by using the square bracket notation right after the array and we have to pass it the index like index 0 for example so array at index 0 gives us a and array at index 1 gives us b now arrays have a bunch of methods on them one of which is push so we can say array.push c for example and now the array has a b and c on it and i want to point out that unlike other languages where arrays need to all contain the same type of thing javascript is a little more flexible so you could have a mix of types like a b 1 and c or a b and an object and c it doesn't really matter so it's just a list of things that could be any type and at this point i believe we have everything we need to write the range function of d3 um are there any questions at this point yeah there was an interesting uh an interesting property called length um indeed yeah does that mean an array is an object oh is an array an object well it's a array is one of those types that is built into javascript um is it an object i guess it really depends on what you mean what you can do is say type of array and it will actually tell you object and while we're here i think this is the first time we're seeing typeof so i can just explain a little bit about type of it's useful to figure out what type of thing something is in javascript so if you say type of 0 it says number if you say type of the string a it says string if you say type of an empty object it says object and somewhat surprisingly if you say type of array it also says object so in the javascript language it is actually an object but it's a special kind of object that's an array yeah there are there are some mysteries there to be sure but uh that's that's my understanding of it and yeah because it is an object it can have various properties and methods see if we just say console.log array and we expand it in the devtools here we say we see that the prototype this underscore underscore proto is actually array and on that array prototype it's essentially a class you know from the world of objectoriented programming so what we've got is this instance of this array class so it is an object but it inherits from this prototype which is this builtin array class or interface i don't know really what the correct term is but this is where all of these methods are defined so you've got array.concat every filter find for each join map push reduce i'm just calling out the ones that i actually use on a regular basis sort slice these are all extremely useful things and hey if we're talking about arrays why not dig into some of these but yeah does that answer your question ideal yes thank you yeah that's that's a lot more clever nice thank you whoa all right so at this point let's dig into building that um range function from d3 so the idea with the range function is that if you give it a number say 3 that's what the length of the array should be and this function should return an array that has integers 0 1 and 2. so to simulate what it would be we can enter 0 1 and 2 and now we get out this array with 0 1 and 2. so we can combine all the knowledge from the the basics that we covered before with for loops and everything to define this function range we can say const range is a function that takes as input i'm going to call it n the number of things and then in this function body we can just define an empty array and then at the end of this function we can return this array and in the middle we're going to want to push some stuff onto this array starting with zero and then to sort of test this out i'm going to say console.log range of let's say five okay this is functioning so far but it's not actually giving us an array with the five things what we want to do is push you know 0 1 2 3 4 like this this is the correct result but then if we change the number it's no longer going to be the correct result because we're not even using n inside the function what we can do now is use the for loop construct that we looked at earlier we can say 4 let i equals 0 i is less than n i plus plus so just to remind you the structure here this thing runs once it defines this variable called i this thing runs every time you go through the loop to check if it should proceed or not and so as long as i is less than m we proceed it executes the code in this body and then this thing executes at the end of whatever's in the body of this for loop and this increments i it's equivalent to saying i equals i plus one or i plus equals one these are all the same thing as i plus plus and i typed it in a comment just to avoid an infinite loop if it were to run while i was typing it so now that we've got this in place we can say array.push inside of that loop and now see we get an array with four zeros and now if we just if we want the correct values all we need to do is pass in i to this array.push and now we've got the correct implementation for range so if we were to pass in 10 it would give us this array with with 10 integers in it this is what d3.range does internally so yeah i'm happy to get to this point this is i think a good example to cement our understanding of arrays for loops and functions any questions about this so far all right and i'll i'll just give a brief tour of a couple other frequently used array functions i'm going to extract this return value to a variable and then we can say my range dot uh well we could say a lot of things there's a lot of methods but you know i'll just talk about the methods that i use most frequently for each is a super nice one it allows you to pass a function that takes as input something i'll call it d just by convention this is a convention from the d3 community to refer to each element in an array as d stands for datum and then we can say console.log d so now it's console.logging each of these things here and by the way this is equivalent to writing a for loop and then accessing my range at index i like this it does the same thing oh i i is less than uh my range.length this is what it's equivalent to so yeah dot for each it's like a functional shorthand for writing this uh verbose for loop and then we've got some other things like uh filter super useful filter takes as input a function that takes us input one of the elements of the array and we could just say is is it equal to three and it will just pass three or we could say like is it is it even and we can check if it's even by saying d percent 2 equals 0 so this will give us all the even numbers this by the way is the modulo operator it's like it's the remainder like if you were to divide it by the number it gives you the remainder sometimes useful let's just see what are what what are the other methods i think i might stop here for now but if there's anything that i'm a big fan of sort yeah yeah sort sword is huge because then you can because then it comes back when you're doing dom stuff because the order of things in svg is really important for its rendering so i i use sort a lot to sort of get around that for sure so let me here i'm going to add you as a collaborator and in fact let me add everybody here as a collaborator because i want this to be a live sort of jam session kind of a thing we've got a deal here and we've got sriram so i'm going to add all of you and oh let me drop this link to you i'll share it in the slack i suppose and the meat why not so yeah feel free to jump into this as i'm going here but yes sort sort is hugely useful let me give some examples of sort i guess it's hard because your your data is already sort of presorted you made it in an order so it's already sorted so we can build up an array that's not sorted like four three five you know just sort of random numbers here and if we console.log that that's what we get but then if we just say dot sort on that it's sorted all of a sudden so a couple subtle things sword actually mutates the array and it also returns the array so that's why it works here it returns the sorted array so let me just demonstrate the fact that it mutates the array i'll call it sortable sortable is this thing and if we say console.log sortable.sort it does sort but check this out if we just say console.log sortable it's unsorted and if we say sortable.sort as an expression in between it's sorted in the output that means that it actually changes around the stuff in the array it mutates the array so it's not it's not one of these immutable things it does not create a new array it just sorts the things that are there and um i'm not sure how deep we want to get into it but sort accepts a comparator function well yeah i was going to say how do you what if i want to sort it in the other direction right well well if you want to do that then the easiest thing would be to do reverse on the sword so now it's sorted in the other way i'm curious what would happen if we add a new number like 20 let's find out interesting yeah oh this is so good thank you i do this is amazing so i think what's happening here is if you just call dot sort maybe it treats everything as a string is that right yeah what is it what is it what is the default sort sort on i guess is the real question yeah i don't know let's see mdn javascript array sort the mdn docs are always the best array.prototype.sort it sorts things in place the default sort order is ascending built up here it is built upon converting the elements into strings and then comparing the sequences of utf16 code units values cool makes sense totally right very logical so i think we should actually dive into the comparator idea um should be here compare function that's what they call it here compare function it specifies a function that defines the sort order so we can use this if we wanted to sort it by the actual numbers or if we had an array of objects and we wanted to sort by a specific field of those objects we could use this as well so here's what it does it accepts two things the first element and the second element and it returns i'm surprised that it doesn't specify here specifically what this function should return but i believe it should return negative 1 0 or 1. let's see it's weird that it doesn't say this has always been a fuzzy area if like it's always been sort of like an incantation but the set of like it's like if if your first element is less than your second element return negative one or zero depending on how you want it to sort right right yeah exactly exactly so here it is if you scroll down a little it says if a and b are two elements being compared then compare function should return less than zero oh it says it says if compare function returns less than zero then it leaves a and b unchanged in the order if compare functions so that's our negative one yeah that could be negative one yeah yeah if so if you return negative one it leaves them unchanged meaning a is less than b i'm pretty sure got it but yeah i think you're right about it if it returns zero also leave a and b unchanged with respect to each other but sorted with respect to all different elements i don't know this is kind of confusing yeah i don't know what that means i don't know what that means so but if it returns greater than zero also known as one yeah also known as one or any other number greater than zero but yeah one is is the most common uh then it then it sorts yeah that's how i've i've always seen it b before a so let's give it a shot that was really confusing right so i'll just leave a record of this and i'll say it outputs this is the documentation assuming that the elements are numbers what's being compared um well we can do i think we can do whatever we want in it and return a number it is expecting us to return a number we could have like a random number generator doing negative one through one and it would randomly sort you know what i mean yeah so yeah a and b are the elements in in the array and they could be anything what matters is that this compare function returns a number and it's up to the implementer of the compare function how you derive that number so let's try this again let's say sortable.sort and then console.log sortable i'll get rid of this reverse and we pass in a comparator function that takes as input a and b two things and because these are numbers i believe we could implement this pretty simply as like a minus b and now they're sorted sorry because you're just telling it to not treat it as strings basically yeah yeah exactly and and this little expression follows all of those rules for sorting meaning um if b is greater than a a negative number is returned but if a is greater than b then a a positive number is returned so if you did b minus a it would reverse it i believe so let's give it a shot yeah cool that's right and another way to phrase this would be um like is b less than a if so return minus one otherwise return one that works but i think if they're oh yeah that makes a ton of sense [Laughter] i mean this works um and this is often what you see of like if if these are data elements and you want to compare a field you could say like b dot some field ada some field but i mean it doesn't make sense now because we don't actually have that scenario but later we will i guarantee it yeah i'm sorry for sending you down this sort rabbit hole you were about to move on no no it's good it's good this is why i love these interruptions because because like i want to empty my head of the stuff that people are uncertain about and want to know about i just don't know what people need to hear at the moment you know when i'm going through this stuff and so yeah that that's why i i think yeah go ahead go ahead you go ahead i don't think i've ever read the docs for sort like i've just like seen like this pattern and then sort of like hacked it to because it is mildly intuitive a little bit but it's cool to sort of actually see it laid out in detail the way that you have for sure for sure oh thanks and you know i think um if we really want to be like pedantically correct about it if if two numbers are the same this function should return zero i think ideally and so to do that we can say okay is b less than a return negative one otherwise is b greater than a return one but otherwise they're equal and returns zero so i think this is like the ultimately correct way but it's like who wants to come across this and you know yeah you're a madman what is this yeah what is this there's like some insane pursuing scribbling on a wall so d3 to the rescue um turns out there is a d3 utility to help you through this stuff a and b we can re return ascending of a and b and ascending we can import from d3 um and this is actually the same as just passing ascending into sort and d3 also provides a thing called descending so this is what you would typically use in practice and these ascending and descending things from d3 automatic like i think they implement this logic internally but they hide it from you they just make it you know very intuitive easy to use and that's the same as like like you were about to go talk about d3 range right like that's these are all sort of very simple wrappers so you don't have to get into this level i've been spoiled right i only ever use the d3 wrappers i never really write any of this stuff exactly exactly yeah and some of the you know philosophy of this course the way i'm progressing through things is to like to show uh like how it's made like how the sausage is made sort of thing you know like this is how d3 works inside it's not like so crazy mysterious but it's a pain if you wanted to implement it yourself all the time all right i think i think that's it for arrays let me see um we covered filter for each push oh map i gotta talk about map oh yeah gosh map is map is huge map is like the most you know one of the most useful things that i find myself using all the time all the time all right we've got console.log sortable and we get this stuff oh actually let me let me use the other um arrays just so all these sections are like decoupled we've got my range here console.log my range gives us these numbers from 0 to 9. check it out we can use dot map map expects a function it's a lot like for each it goes through each of the elements of the array and if we just write a function that returns each element it doesn't do anything essentially passes things through this function it generates a new array with all the return values so if we say like d times 2 for example now we get all of the original the original numbers but multiplied by two so this is this is super useful i mean you could you could do all sorts of things in here like return an object that says number is d and then now we're talking now we're talking yeah right and then even like double is d times two so you can construct objects in this way using dot map so yeah dot map is it's just super useful you know especially when you have data loaded from like a csv file or something you can uh parse dates for example uh clean up the number of fields that you have all using dot map well for me a lot of my work is finding an example of a visualization that's pretty close to what i want and then i have a data set that's slightly different from that so most of the way of like bridging that gap is just a dot map where i make my data look like the data that the example works on does that make sense totally yeah and dot map can be the bridge from here to there for sure for sure let's see what else reduce reduce yes yes yes yes now reduce that's one of those ones that is like kind of tricky to wrap your head around and you can get through life without using reduce ever however i find that one of the most useful things with reduce is to build up an object where the keys are derived from some array so let me just uh just try reduce console.log myrange reduce reduce accepts two arguments the first is a function that takes as input two things and i can never remember the order let me just consult the documentation reduce looks something like this you define what's called a reducer it takes as input the accumulator and the current value and here's one that just adds them together you could use this for example to sum all the numbers in the array current value here is one of the elements from the array accumulator is the returned value from this function as it goes through but the first time this this is invoked accumulator gets the value that you pass in as the second argument to reduce so let's put this into practice we can say dot reduce accumulator i do like that term and i can use d you know why not so if we say accumulator plus d we get 45. which is the sum of all those numbers and uh you know i'm not sure what it what it uses as the first value because i didn't pass anything but if you pass in zero as the second argument to reduce that's what accumulator gets for the first entry right this is this may be kind of confusing so let me just open it up into a function and say console.log accumulator just to see what this is um looks like i have a syntax error actually i didn't so what this is doing here is it's logging the value of accumulator as the as it progresses through the array so here's what it's doing it's adding 0 which we passed in as the second argument to reduce and it's also adding zero the first element of the array so the first time through this returns zero plus zero which is zero that's why it's outputting zero twice and then it's then it's returning zero plus one one coming from the first element of the array and then the next time around accumulator is three because it added one plus two 2 being the next element of the array so to be even more clear here we can say adding accumulator plus d so now we can see that it's adding zero plus zero zero plus one one plus two so one plus two is three and then so the output of adding one plus two is the new the next version of the accumulator then it has three plus three which is six and then it adds four to that which is 10 and then it adds 5 and so on until it gets to 45. so that's reduce in a nutshell and while we're here i do want to show the most common use case that i encounter for reduce oh but first of all are there any questions yet here about reduce yes if if you remove the second argument which is zero does the f does it default to something um am i could it just default to the first value of the element in this case that exactly appears like what it is doing yes yeah it appears to be adding zero plus one in the first time around and it must be getting that from the array yeah yep that makes sense and we can we can be totally sure but just by saying like you know two and three it it does see yeah the first time around it takes the first two elements of the array and adds those together meaning it it takes the first element of the array the the thing at index 0 treats that as accumulator and then takes the thing at index one treats that as d so that that is what happens if you leave out the second argument and actually i wasn't sure of that until i just did this just now so i'm learning too all right i think the last thing we're going to do here with arrays is construct an object from an array and let me show you what i mean oops i'm going to make a thing called entries and in this thing there will be objects and the key will be something like um i don't know just a all right and value will be um fool it's just random stuff that doesn't make any sense and then we have another one where the key is b and the value is bar um just to show the mechanics of all this stuff so now let's say what we want is an object that actually has the key of a and the value of foo like this and then the key of b and the value of bar like this this is our desired result so the challenge is how do you write code that gets from this to this i encounter this all the time and here's how you can do it you can do it with reduce entries dot reduce and the trick is that you start with an empty object so you pass in an empty object as the second argument to dot reduce and then this reducer function takes as input the accumulator and i'll call it d just by convention and in the body of this reducer we ultimately want to return the accumulator i mean so here's the approach i'm going to i'm going to add a property to this object and then return the object so we return accumulator but before we do that we can say accumulator at d dot key equals d dot value and then we got that object that we were trying to get and and by the way i'm not sure i've introduced this syntax yet but if you have an object let's say you have an object you can say object dot a equals foo like this but the there's an equivalent syntax where you could say object at a like this using these square brackets and that's equivalent so now object has a is full like that but anyway yeah this is this is how you can use reduce to accomplish that task oh i see there's a question in the youtube chat here let me pull it over here so you can see it question i deal with two dimensional arrays a lot um is there a way to sort by columns question question question question sure let's do it why not i mean so we've got this entries array let's say we wanted to sort by the key and let's say they're out of order to begin with i think the question is asking how would you sort by a certain field of these objects so if you wanted to do that you could say entries dot sort and pass in a comparator or a compare function rather that takes as input a and b these are objects these are the objects in the array and it can return you know if a dot key is less than b dot key and this will be comparing strings so it would be essentially a is less than b which you can do in javascript that works it sorts by alphanumeric values so you could say if a is less than if a dot key is less than b dot key then return one otherwise return one and that works it sorts by key now abc and if we're using d3 we can say entries.sort ascending a dot key and b dot key like this and that would do the same thing if we had d3 at our disposal so thanks for that question so i think what i'll do is actually pull in d3 so that we can use this and it'll work um and then i'll take a short break like a 510 minute break and then come back and do something creative with d3 selections but are there any other questions at this point all right so i'm going to go about pulling in d3 in vishub the most straightforward way of doing this is to use the package.json feature which is relatively new specified dependencies d3 at version something let's see what's the latest latest version of d3 is 6.6.2 so we use that and now now we can put some javascript in index.js so i'll move this into index.js and now we can say import ascending from d3 and now it should run there we go so now this code actually ran and this is how you would sort things by a value with d3 all right i think we'll dive in to d3 selections so here's what i'll do i'm going to fork this viz and say d3 selection exploration fork it and i'll add you all as collaborators again i want this to be kind of a jam session all right i'm going to delete everything here and then we can import select from d3 the select function lets you create d3 selections using what's called a selector string where you can select elements that are on the page already for example we can say select body and that is a d3 selection that contains the body element so here's what i've i think i'm going to do i'll create an svg append it to the body give it a width and height and then we can create some array maybe using the range function from d3 and then make a bunch of circles based on that array and maybe make the circles move around in different ways selections have a method called append so we could say dot append svg like this and it creates a new selection and returns it and that is the selection of that one svg element at this point if we were to inspect the dom we can see that there is in fact an svg element there in the dom and i'm noticing there's an extra script tag yeah there's an empty script tag we'll just get rid of that we can see that in fact there is an svg element appended to the body right here so to work with svg we need to give this svg element width and height so we can say dot attr to set the attribute of that dom element of width to be width which is a variable that i'll create and i'll derive that from the actual width of the browser so we can say window.enter width and we're also going to want height as window.inner height so what's happening here is it's created a selection of that svg element and then when we call dot attr oh hey felipe has joined us hello hello happy birthday thank you thank you very much well i'm so glad you could make it this time alive you i see you've always been watching first time i was able to i mean i was not able to do the exercise from the last class but i was able to join at least amazing amazing so look i'm going to add you here as a collaborator so if you want to jump in you totally can okay thank you oh yeah it's valid oh there it is yeah there it is nice here you are and i will drop you this link in the hangout chat so you can see it so yeah everybody here feel free to jump into this thing once we get rolling all right so we give this svg a height of height here and we can assign this to a variable because we're going to want to add stuff into this svg so const svg equals this stuff so now when we inspect dom we see that it has width of 960 and height of 500. i also noticed that it's slightly offset from the corner and there are scroll bars this is a very common thing that we can address with a little bit of css so in the head i'm going to say style not style and add some css that says for the body make the margin zero that gets rid of the margin but still for some strange reason there are scroll bars we say overflow is hidden to get rid of those pesky scroll bars now we're good to go all right so here's where i want to have some fun we can we can make a bunch of circles and this is our first four a into d3 data joins and it looks something like this svg.select all circle this selects it makes d3 selection that contains all circles that exist within that svg and at this time there are none but that's an important piece of information for the internals of d3 because once we say data and we pass in data and i'll just define data to be range of let's say 15 we're going to make 15 circles and we can import range from d3 like this now that we have called dot data we have created what's known as a d3 data join and on this data join there are three parts enter update and exit and i have a slide about this with a d3 data join there is an array and i'm calling that data here and then there are dom elements which i'm just putting dom calling dom here on this diagram for example it's all of those circles that don't exist yet in the case that there is a data element you know in that array that does not correspond to any existing dom element that's what's known as the enter selection we can tap into the enter selection to append new circles for all of the data elements for which there are no circles yet so let's do that to tap into the enter selection we can say dot enter like this that gives us the enter selection and then on there we can say dot append circle and what this whole expression does is it creates a data join it accesses the enter selection of that data join and then on there it appends a circle so if we inspect the dom now we can see that inside of this svg there are many circles 15 to be precise but they don't have any attributes so let's let's work on setting setting up the circle so that we can see them we can call dot attr on this selection that contains these newly appended circles and whatever we put in here will be applied to all of the circles so we can say attr r is where i'm going to start specify the radius to be maybe a hundred and now we get some circles to show up but they're all on top of each other they're all the same place so to spread them out in the x direction i'm going to say dot attr cx which is the center x of the circle and i could say like i don't know 400 it puts them all in the middle but they're still all overlapping to make it so that they're not overlapping we can pass a function here as the second argument that function takes as input what i'm going to call d one of the entries of this array and if we just return d we can see that they're slightly spread out because it's setting the pixel coordinate of the center of the circle to be those integers but they're only varying by one pixel so they're not that spread out if we wanted to make them very more we could multiply them let's say multiply by a hundred now they spread out across the screen because for each of these numbers it's multiplying it by 100 and we're getting this x coordinate that goes all the way across the screen i'm just going to tweak these variables here or not variables tweak these values so that we can see some of these circles better and i kind of want to see where it ends see there we now we can see there are 15 circles here and i don't really like how it it's touching the corner so i'm just going to add some number like 20 or how about 50. okay now they're nicely spread out in the x direction we can do something similar for the y direction so c y like this so now it's diagonal if we just return let's say 250 that puts them right in the middle and here's where i want to do something fun i'm going to use the sine function for math so we say math math.sin this is a builtin function in the browser and it's the sine function from trigonometry so if we say sine of d it's sort of varies a tiny bit just because the output of sine varies from negative one to one if we want to see that variance we have to multiply it so if i multiply it by say 200 we can see that now they're all spread out which is you know not ideal it's sort of the sine wave is going too fast and to slow it down we can multiply d by some value like 0.5 and now we actually see that it is in fact a sine wave here and i'll just tweak these to you know make it a little bit more uh if if i want to to access the value of cx in the cy how can i do it access the value of cx in cy well the way that i would do that is extract this into a function it's usually not advisable to actually read the properties out of the dom that were already set but what you could do is recompute it and so i could do something like this say const x equals this function and then we can say uh x of d to get that value to c but it would be recomputing it essentially so yeah i was going to say i i i'm tempted to um ask you to turn like when you make data like i would do all of the cool stuff you're doing in a map or like making a new object and then just reference those values when i'm rendering it right love it love it and this this is a great great segue into the discussion about how do you decouple the lodge oh yeah i saw that someone in the youtube chat was asking about like how to separate your your concerns of like processing data versus visualizing it and all that yeah exactly separate the concerns of data from charting yeah another question here from lilac foonish can you please talk about organizing the project top down how to create modules for reusable yeah i'm going to get to all that later but what we can talk about now is this separation of concern between uh data manipulation and charting uh which is you know essentially rendering or dom manipulation right because right now you're sort of you're manipulating it and as you visualize it you're changing it and then rendering those values whereas you might want to like do a making a visualization data middle step that sort of takes your source data and makes it into a format that's ready for visualization and then the visualization side you just grab exactly what you need exactly exactly right now it's tightly coupled this rendering logic is essentially too smart there's there's all this data processing logic embedded in here with the rendering code and this is exactly the pattern that makes it really tough to port things from d3 to other frameworks like react or vue or angular well and also to get the value of cx right so if it's calculated on the visualization side your other visualization parts can't access that right like they have to recompute it but if you do it in the in the viz processing step then any step of the way you can process all those cool values and work with them exactly yeah that's exactly right you wouldn't have to recompute it you could just compute it once and then access it so let's do that the way we would do that is to use dot map right here and so that can take as input d and it can return an object and on that object we can define properties x and y i think this is how i would like to do it and x i can just move this logic over here and say x is this and it's going to work because d is the same and then i can take this logic here for y and move it over here and so now we're constructing the data elements that we can just directly visualize no need to have any complicated logic down here with the d3 selections we can just simply access d dot x and d dot y like this now felipe to answer your question we could just access it like this d dot x in the in the function that computes c y if we wanted to for example if we just use it it would be a diagonal yeah i love it you could do also cool stuff like you could get the extent of your cx and see why like if you wanted to make a light to dark scale for how where they were in the sine wave you know what i mean right yeah for sure for sure we could do something like um yeah so here's here's a place where i want to get to i want to i want to get this thing to move and then we open it up for all sorts of creative directions and so here's what i'm thinking we we can use this construct called request animation frame um well let me sort of ease into this we want to animate it and one construct that's available to us in javascript is set interval and set interval takes as input a function and an interval in milliseconds so if i say 1000 that's one second so every one second it would rerecompute this stuff and i think what i'll do is i'll just move this entire logic into here and so now it's going to append these circles every time but i want to introduce the notion of time so let's say let t equal 0 t is going to be our time and every time we go through this we can say t equals t plus let's say one and then in our sine wave calculation we can say plus t like this so now every second it should work but it's not i think you don't need to like call set interval again or wrap it all in a function or something like that well i think what's happening here is that the enter selection is only triggering on the first run back to our back to our diagram here the enter selection which we're using to set all these properties only triggers in the case where there are no corresponding dom elements for your data elements but what's happening is that is happening the first time that that function runs but one second later when that function runs again actually what we need to work with is the update selection and that's the case where for each data element there already is a dom element and all we want to do is change it we don't need to end we don't need to append new ones again so let's try that let's work with update okay here's what we can do we can say const circles equals and we can define it to be this data join here right so it will select all circle dot data data this is the d3 data join and then we can say circles dot enter dot append circle and this is only going to happen the first time through right so all we want all we really want to do is create the circles um and i suppose we could set the radius here as well because it's not going to change over time and then circles actually contains that update part of the data join so we could say circles dot attr cx and cy like this but notice what happens it actually works so now it's it's animating which is cool which is where i want it to get to let me just tweak it so that it animates in a smoother way so now it's like every tenth of a second and we can say um t equals t plus 0.1 to make it move more slowly so now you can see really what it's what it's doing here however this is super fun right right but there's like no now that you have this there's so many ways that you could just add cool stuff to it exactly yeah there is it's it's going to be so so intense but before we get into that what i want to what i want to highlight is that check it out when this runs let me set this delay to like five seconds then we can see the first time it runs boom see all those little circles there they're in the corner the circles are just in the corner on the first run and then on the second run they get positioned that's because the first time through this whole thing the update selection is empty there's nothing there there are no circles to update enter only triggers so here the the challenge here is that what we want to do is we want to set all the coordinates of all the circles the first time on the enter selection and also on subsequent times using the update selection and so how do we do that let's get back into the code one option here is that we could duplicate this logic right we could set the values for cx and see why on the enter selection so it just appears immediately correctly and then the next time around it increments just a little bit however this is duplicated logic i mean we want to avoid duplicated logic at all costs because i mean if you wanted to change in one place you'd have to change it someplace else so as a best practice we should aim to avoid this sort of duplicated logic and this is where merge comes in see ideally we could just have this logic once applied to something that that will be the enter selection the first time and it will be the update selection on subsequent times and here's how we get to that thing let me assign enter to be a variable so now we have the enter selection defined here as circles enter and we have the update selection defined as circles so what we want to do is merge those two together so we can say circles dot merge circles enter like this and it creates a brand new selection that merges those two together it's like both of them meaning the first time around that selection resolves to the enter selection with all the brand new circles but on subsequent times it um oh i'm just confused at what's happening sorry i i hacked i was playing around with some svg transitions i wasn't sure if it would take effect right away it did it did and i'm like why are those circles moving a tiny little bit sorry that's so cool oh it's cool it's cool uh but you know this is this is where i wanted to get to just to explain this this pattern with dot merge which is one of the most confusing aspects of d3 so if we use circles.merge circlecenter the first time around it's going to be the enter selection with all the brand new circles and we're going to apply cx and cy to those and on the second and subsequent runs it's going to resolve to the circles from the update selection and in recent times i believe it was d3 version 6. there's a new shorthand that you can use to do this exact same thing which is dot join so let me just i'll keep this as it is comment it out just for reference and with the new api you can say right here dot join circle and that actually gives you the merged enter and update selection and on there is where we can set all of the attributes so this is sort of a simpler way to do it and it accomplishes the same thing i mean it would it would actually be equivalent to defining r on the merged enter an update selection so it's assigning r unnecessarily but you know maybe that's fine all right so now we can start really messing around with this uh making the animation go faster and faster ideally it would be 16 milliseconds which is uh at 60 frames a second so like 1000 divided by 60 should give us animation at 60 frames a second and then we can slow down this stuff so yeah i mean we just we talked about a lot of things any questions or discussions at this point oh i see i see there's a question what is the difference between merge and join what is the difference between merge and join so merge is a method on a selection where you can pass in another selection and it will merge them together it's essentially a set union you can think of it as a set union that's what merge does and the most common use case is to merge together the enter and the update selection uh for rendering a bunch of things that's what merge does join on the other hand is sort of a magical shorthand for this entire pattern so it actually does a bunch of stuff internally what join does internally is it creates the enter selection using this tag um so it's what it actually does is it's equivalent to this up here we pass in the tag name to dot join and internally it says okay on this data join we will create the enter selection and we will append tags of this type it does that internally it has this exact logic internally and it also returns the merged enter and update selection so what we get as a return value out of join is essentially the result from merge which uses internally to merge together the enter and update selections and so then once we have that we can set all these attributes on it and i believe join also removes elements that are in the exit selection so it's a shorthand for the entire pattern which is known as the general update pattern yeah and actually i would love to to demonstrate that so i think i'll i think i'll go for that um we're defining a range of 15 every time but what if that number were different so i'm trying to get get us to a case where where there are things exiting the scene where at a certain point there are fewer data elements than dom elements so i'm going to go back to this the long form using dot merge and then i'll define this number as n like the number of circles so if i set it to say 14 it's fixed but what i'm going to do here is i'm going to set it to a value that changes over time so let's say 10 oops i'll say 10 plus math dot sine of time times 5. so now it should vary between 5 and 15 and notice the effect that it has on the animation over time it is sort of disconnecting from those circles but it's leaving those circles there on the page this is where the exit selection comes into play the exit selection is the case where there are dom elements sort of hanging out in the dom from some past events that no longer have any data elements associated to them and the most common thing to do with the exit selection is just to remove those things so let's try that to access the exit selection from the data join we can say circles.exit dot remove to remove all of those circles so now you can see that the circles are added and then as that number gets decreased the circles are actually removed from the dom and this is also done sort of automatically for you when you use this dot join method so as it decreases boom see those circles are removed so that's what dot join is all about so i think i'll fork this just to sort of save the state of everything but then i'll go back to this one where folks have been added as collaborators and we can sort of get a little creative here and uh make something cool but yeah what do you all think so far i mean i hope this is hope this is a clear explanation of d3 data joins yes it's um so this uh it sounds like d3 is automatically matching every data point with every circle in this case it's it knows which data point belongs to which circle that's right yep that's right i believe internally d3 may actually store the data values on the dom elements which are also javascript objects which you can do which is kind of a um a tricky thing if you get into doing it yourself but yeah i believe what d3 does is when it enters i mean when it appends new elements as part of the enter selection i believe it actually associates the data values on those dom nodes for future use i may be wrong you'd have to study the d3 source code but yes essentially it does associate the data elements to the dom elements and so it knows once you create the data join you select all the circles that are there on the page you tell it what data you want to use it computes that venn diagram internally by sort of inspecting those two things comparing them somehow that's how it works yeah sounds that's fantastic current what is this particular programming pattern called where you just join methods together like this oh this is called method chaining yeah method method it's a very uh jquery like thing right was jquery the first kind of language or is this just a common programming pattern you may be right that jquery was the first one i haven't used jquery in so many years i don't even know i don't even remember what it looks like to use it but yeah it does have perhaps this the same method chaining idea where you can say dot something and then that returns the same thing that you invoked it on and so you could chain more and more methods and this still uh this still separates the two concerns one for data processing and then one for displaying it this program yes i would say it does um because we're just using vanilla javascript to produce this data and then in the rendering logic it is just accessing those properties it's not computing anything from those properties i mean if we if we wanted to go all out we could we could associate the radius to these values as well and we could say you know axis d dot r and we could compute that as well and now that we've done this we can you know vary vary the radius as well which could be cool to that question some part of me wants to go like because you basically have two functions here right you have your like make data and you have your vis data you could easily just make this set interval call those two functions right yes yeah you totally could you could you could abstract this into a function and you could abstract this into a function yeah that would make for really clean readable code we could do it shall we yeah do you want to do you want to i'll do you make data and you do this data sounds good then you just need the number it's like you just use n i guess i suppose t is what you would need or no yes i like that yeah n or n t is is used inside of there yeah so you would need it yeah exactly all right does that work did i break everything let's take a look probably huh oh yes the return is critical it's pretty important nice it works sweet yeah now now this is a nice compact little thing that says we compute n we call make data with n and t pass that into viz data yeah and we could even conceivably make it even smaller but i kind of like explicitly saying all right this is our data we're gonna pass it in yeah totally totally this is a great way to decouple these two concerns and these could even be refactored into modules i mean that's something that we could do as well but i don't know if it's worth it actually why not i don't think we've discussed modules yet at all right yeah i'd like to see that that would be really cool yeah let's do it so i'm going to make a new file ej you want to do it at the same time again you want to do make data and all this data yeah that sounds good so i'll make a new file called visdata.js and then i'm just going to grab that stuff inside that function and paste it into that file and in order to expose it to the outside world we need to say export like this now we get what's called a named export from this module and then in index.js i could say import this data from dot slash vis data that tells it to look for a file locally so this is es6 modules super super useful way to break down code into multiple files and scale a code base super due super duper useful so you're all set with make data yeah yeah while i'm here i'll i'll import that to make data from dot slash make data and let's see does it work oh range is not defined and make data nice so we just need to move that import over i'll do it we need to import range in that module got it and then i don't believe we need range in index dot js svg is not defined it says ah yeah yeah yeah so this is my bed uh i i didn't pass it into vis data so this data should take as input the selection svg and the data so the x uh svg can be the first argument and now it's working all right excellent so while we're here i just want to say once you abstract things into a function like this it's sort of a best practice to rename this to be like selection or at least this is my personal preference and i'm realizing we're not using the circles variable so we can just get rid of it and this still works as well the idea is that if you wanted to you know call this on a group element it would and the variable name would still make sense and last but not least i do love to use selection.call when i can so we can say svg.call this data and data like this this is the d3 invocation pattern on selections it just takes whatever arguments you pass and you know passes them as arguments to this function these two lines are equivalent all right so the uh the svg object is the first argument being sent to the first of the argument to call correct is that how it works okay yeah that's how it works when you when you when you use selection.call it takes as input the first argument which is a function and that function should expect the selection that is called on as the as its first argument and then whatever other arguments you pass get sort of spread out as the arguments to that other function right yeah i mean this in this case it really doesn't matter which which way we we do it but i just kind of like to use dot call when we can is dot call a d3 thing or oh yeah something that okay yeah yeah it's a specific method on d3 selections only it's a d3 thing yep it's useful for chaining because then you could call you know multiple things if you wanted to but we don't have that scenario here all right i think i should wrap it up at this point um oh where'd my slides go okay i'd like to leave you all with uh an exercise all of you who are viewing follow me along this this whole series four can modify what we created today and just make something super duper cool you know change the sine wave and like maybe maybe set the fill color based on sign of time or something like that and just see see what you can come up with as an alternative exercise more specific and targeted see if you can add lines between these circles and to do that you could use line elements or you could use a path element or you could use a polygon element any of these things and please once you do this submit it in the hub forum on this episode 5 topic here welcome everyone to episode 6 of get it right in black and white where we'll discuss javascript modules and build tools i often get asked the question how do you work outside vishub every time i've taught this course you know people are happy generally using vishub to learn how to code it's great because you can start coding right away but um when folks start to export the stuff out of his hub they're confronted with this new universe of stuff like npm package.json roll up building a bundle.js and then including it in the page and then having to serve the files locally within http server so all of this stuff is what i want to get into today today's episode is dedicated to answering this question thoroughly what we'll cover today i will start with reviewing last week's uh exercise submissions as usual and then we'll get into this uh content starting from scratch really how you know how to include javascript in html various ways to do this um we'll talk about es6 modules we'll talk about rollup how to use rollup how to configure rollup i think i'll use a rollup starter project webpack as well and perhaps some other things around webpack like create react app if you all could mute yourselves it'd be great thanks webpack and things around webpack um and also using github because if you're not using vishub you need to you know store the code somewhere store the revisions and so i think i'll walk through also using github creating a github repository putting the code into the github repository and maybe even hosting it with github pages if we have time so that's what we'll cover today that's the plan let me pull up next week's last week's exercises here all right here's last week's uh forum post let's see what we've got this is so cool double harmonic look at this it is a double pendulum inspired by sisyphus table not sure what that is but sounds cool beautiful stuff very mesmerizing and it creates something most worthy of being printed out on a canvas or something no there is a lightest version of it on the home page of wheeze up oh yeah yeah it's cool oh wow he's got a lot of stuff going on here oh my gosh look at this black and white version sweet and yeah it looks like spears in there this one oh look at that that's pretty wild wow very cool very cool yeah w gloss nice work w gloss let's see what else have we got oh there was a question actually like oh i just cannot get this running locally which is like okay yes now it's time i have to talk about how to do that so we'll address all of this stuff today for sure oh some new stuff i haven't even seen yet look at this one from nita whoa very cool some nice transitions very nice you want to talk about this at all yeah i will oh it's using transitions i just use uh transitions to create the basic animation the one you created felt a little difficult very nice so yeah if you if if you run this it has a transition when you load it and that's created by so this the cx and cy are initialized i guess at zero which is inferred and then you use transition and duration and change cx and cy very nice very nice i think in a future episode i'm going to get way deep into transitions and here's one from a deal look at this oh nice you got the lines to work fantastic beautiful wow very nice very nice ideal um would you mind like walking through how you did this here oh sure yeah uh it's um it's yeah so it's basically using um trying to make use of the path element to connect all the circles up and and so that yeah d3 has this um a line generator which will uh convert all the data points into the string that gets passed to the d attribute which is uh which is part of the path element um so um yeah this was really just an experiment to see if i could get it to work and uh so i i would be very keen to find out whether there's a better way of doing this but like for for example combining uh everything in one method chain um but uh my first pass was just to try and think about it separately and then use the the join method um to handle all the uh uh yeah syncing up all the dom elements with all the data um and uh yeah but that line generator is is really awesome because it just generates that complicated d string right um you know what's happening here is it's creating a path for each and every element of the array and so for however many circles there are there are an equal number of paths that are all on top of each other ah yes so if you inspect the dom you'll you'll actually see a many many paths and that's why the line appears somewhat uh harsh like thick if the antialiasing around it is not quite right that's because there's maybe you know ten or five lines on top of each other let me just quickly fork this and and you know give you my take on on how to do this so instead of using data here we can just use an element with a single sorry we can we can just use an array with a single element and see now that line is not so thick as it was because now there's only one of them and it doesn't matter what this thing is you could have it be null or whatever because you know none of these functions access it because d is always a line generator of data it's not a it's not a function of the this element in this array so this is um actually something i was hoping to get to in the last episode which is namely the special case the special case of a single element and this is a perfect example of it you know where there's just a path you only want to have one of these path elements but it's driven by data that could have many elements but it's actually just one path if you wanted to have do it a different way where you had maybe line elements multiple line elements then you would you know use an array as data with many elements but since it's just one path this this approach works perfectly well and i would say this is sort of you know the optimal way to do it to use a path and have that path use these multiple lines so yeah great work i feel that's really really good to know yeah i that that's that that's uh it makes a lot more sense now just to have the one element in the uh being passed to the data method that that makes sense nice thank you thank you very much yeah my pleasure all right that's it for the exercise submissions all right that's it for a review of last week's exercises let's get into ways to include javascript in html for this i will start invis hub i'll create a viz from the hello html starter i'll fork this one and call it js in html okay so this example i'll just clear out the readme this example already has some javascript and this is the most straightforward you know maybe simplest way to include javascript in an html page you use a script tag and then inside of that script tag you can put arbitrary javascript but as you see when we write a lot of code it ends up uh getting very large and there may be more stuff in index.html and then pretty soon you're at like 100 lines 200 lines 500 lines in my various work i've seen i've seen you know html files that are a thousand lines or 2 000 lines of code which is just um it's unwieldy so there becomes a need to split the files up so here's one way to split the files up you can take the javascript create a new file let's i don't know i'll call it uh script dot js just as a silly example name and then we can remove the stuff in that script tag there but notice that it's not running now this script is not doing anything because it's not included into the html of the page to include it into the page we can use the src attribute of the script tag so we can say src equals script dot js and now it runs it loads and all this stuff works without any build tools the issue with this approach which by the way used to be the approach years ago in sort of the early years of javascript for a very long time the status quo was you know this is how you include a library on your page and this is how you include your script files on the page but what would happen is that over time you would end up with many script files on the page you know script one script two like this and then you would need to manually keep track of which script depends on which other script so you know for example if in script one you want you want to refer to a global variable introduced by script 3 then you would need to rearrange these such that they're in the right order so everything has its dependencies and the algorithm to do such ordering is called topological sorting um so i i think in like rails ruby on rails you can specify which script depends on which other script and then there's some utility that calculates the correct ordering and automatically generates the script tags but that all is sort of um in the past because in modern times there's this thing called es6 modules anita says that's so deep yeah feel free to speak with sound it's fine this is you know how one option of a way to work but let me let me show you how it looks with es6 modules in vishub you can use a special name called index.js this is a special name of a file that vishub specifically looks for and so if you if you define an index.js see vishub automatically created this file that you you're not allowed to edit called bundle.js this is a bundle created by rollup internally within vis hub so inside of the vis hub software it actually loads in roll up which is an amazing tool for for generating bundles and what a bundle is is it's a it's a file that combines many modules together here's what es6 modules look like you can say import something from i'll say dot slash um something dot js and we can create this file called something.js and in here we can export something equals i'll just define it as a string a thing so you can use export before the the keyword const to export a named well it's called a named export whatever variable you have locally you can export it with a name and then if you have named exports you can import them with this syntax let's use that by saying instead of hello javascript hello plus something whatever something is it should appear and now it says hello a thing all right so that's generally how you author es6 modules let's take a look at bundle.js to see what it's done here rollup has actually combined index.js and something.js together into a single file here's the content of something and here's the content of index.js so bundle.js makes basically index.js with everything included bundle.js is automatically generated from index.js everything that index.js imports is included in bundle.js and also the things that are imported by the things that are imported by index.js are also included in bundle.js so something.js could also you know import um thing from dot slash thing dot js just making stuff up here and then that could say uh plus thing and then we can make another file thing.js equals thing planet earth sure planet earth so that allows us to author this module that defines this named export called thing which we we can import in something.js and use and something.js in turn exports the named export called something which is imported in index.js which is used there and then the cumulative output is hello uh planet earth and if we look at bundle.js all of those various modules are included inside of bundle.js so bundle.js is totally separate file it is yes yep yeah and we if we name we have to name index.js as index.js expanding correct correct because um the viz hub roll up configuration that it uses internally looks for a file called index.js yeah so what role do the curly braces play the ones that wrap something in this case oh that's a great question this is the distinction between named exports and default exports with named exports you could you could import multiple named exports from an es6 module and here's an example let me just see this through we can use both of these and then in something.js we can say export const something else other when you use this form of exporting export const you could also use export function this is valid syntax you could also use let export let something these are the various ways you can use named exports and with named exports the key thing is that you can export multiple things that have names so now we can see that the output is hello uh planet earth other that's named exports if you don't use the curly braces like this right now we get an error that says default is not exported if you don't use the curly braces it uses what's called the default export this is this is the case where you want a module to export only one thing so if we modify some this if we modify something.js we can use the default export like this i believe export default something this will expose the variable in this file which is called something as the default export and by the way you can have a default export as well as named exports let me just show you what that would look like like this so if we don't export something we export something else and then we export default something check this out in index.js we can import something which is the default export and something else as a named export and we can use that here like this and it still works and you'll often see this uh with react if you end up using react react uppercase react is the default export of react but then there's a lot of named exports from react like use effect stuff like that that's an example where you would see this sort of stuff in the wild does it have something like that what default modules and sorry what was that d3 does d3 have d3 well i believe it does not i believe it only uses named exports which is a really good segue let's check it out so in vishub you can include a script tag so here's here's here's the d3 library hosted on unpackage which is a content delivery network that hosts npm packages all right and npm is this giant database of packages with all of their different versions um it's a package manager for javascript and it's sort of the de facto package manager so all this is to say let's let's load in d3 onto our page using unpackage by going to unpackage.com d3 and if we just go to onpackage.com d3 and hit enter it automatically resolves to the latest version of d3 which at the time happens to be 6.6.2 and this is the minified build of d3 which contains all of the different modules that are part of d3 so i'm going to copy this url and then over in index.js i'm going to insert a script tag and set the source equal to that url and this is how cdns content delivery networks or content distribution networks are intended to be used at this point in our javascript we can say console.log d3 and it should work see that script tag defines d3 as a global variable this is called a browser global and this is one way it's like sort of the old school way of using libraries insert a script tag that pulls it from a cdn or you could pull down d3 to your files and load it from your files either way and then access the global variable that it defines this is one way of doing things this is not using es6 modules at all not at all this is this is an older way before there were es6 modules that's called browser globals so you could say d3.select that resolves to a function d3 dot you know scale linear all this stuff so d3 is object and each module is property correct yes values of functions yep that's correct that's great yeah using the d3 browser global you could say that yes d when you include this script tag here that defines d3 that introduces a single global variable into the you know global namespace of javascript that's called d3 so that's a variable called d3 and the value of that variable is an object and on that object you can see all the methods of d3 listed out here and this is great because when this program runs it just pulls in javascript from that cdn and it doesn't cost us anything meaning i don't have to host d3 inside of this hub or anything like that it's just when you load the page it pulls that from that unpackaged server which i have no control over it's you know totally not my thing this is why this is sort of the preferred way of using libraries invis hub in particular and i want to say the vishhub rollup configuration has a mapping for d3 as a package so that's what lets us do import select from d3 like this and then we can say console.log d3 whoops there is no d3 dot anymore it's just select because we've imported select a named export from d3 and it resolves to the right thing this is slightly mysterious right it's there's a little bit of black magic going on here with the roll up configuration roll up has this this feature where you can tell it to resolve package names to browser globals so somewhere in the configuration internally in viz hub that you don't see right now there's a mapping that says okay if you try to import from d3 without the dot slash so it's not looking for a local file it's looking for a package called d3 if you do that then look for the browser global called d3 and resolve all the named exports to properties on that browser global this is a really nice configuration of rollup that allows us to use this really nice es6 import syntax for packages and at the same time pull in the script tag from a cdn now let's take a look at bundle.js for this case oops bundle.js is wrapped up into this this one expression right so it doesn't create any global variables it's very selfcontained it defines a function and inside of that function is all of our code from all of our modules that we've authored and that function is immediately invoked with d3 which is not defined anywhere in this file because there's an assumption that it will be defined as a browser global and that's why all this works uh let me show you um actually there's a little bit of magic as well where vishub is injecting a script tag at the end of the body that includes bundle.js script src equals bundle.js and if we have it there then it is not automatically injected so i want us i want to show you that if we include d3 after bundle.js it doesn't work i wanted to do this to cement this idea that bundle.js when it runs it assumes that there's a browser global called d3 and inside of any html when you have a script tag that script tag is fully loaded parsed and executed before the next script tag in the list so what's happening here is bundle.js is looking for d3 it's not there and we get an error but if we reorder this to include the script before bundle.js then it all works so it is a hierarchical i mean in a sense that bundle.js depends on d3 yes but the data structure is not actually a tree it's not a hierarchy it's actually a graph it's actually a directed acyclic graph if you want to get into the weeds yes knows which one comes first right right yeah internally roll up i mean if you have this dependency graph of modules rollup knows internally that the stuff in thing must come before the stuff in something because something imports from thing and also it knows that this stuff in something must come before the stuff in index.js inside bundle.js so that's why it has done this correct ordering using the topological sort algorithm internally nice so in virtual world also the things are hierarchical sure i see there was a question here from sriram is roll up comparable to npm or yarn what's the what's the difference between a package manager and a module bundler yeah i mean they're at different levels of this hierarchy in a sense npm is it's a company actually that makes money and it's a bunch of servers that exist out there in some cloud somewhere that's what npm is and it's a set of scripts and tools that allow people to publish modules into npm and also to get modules out of npm and so what we're using here is npm as well as unpackage which is another another product in inside of the ecosystem of npm to pull this script down and npm confusingly is also a command line tool where you can say npm install npm run npm this npm that and there's an alternative command line tool to the npm command line tool that's called yarn and yarn is arguably more efficient faster better but it also pulls the packages out of the npm package manager database system cloud thing so in a sense you know npm and yarn are not that different they're pretty much equivalent tools and rollup is a module bundler and rollup has peers in this ecosystem like webpack parcel snowpack recently but roll up is pretty nice yeah so the difference between a package manager and a module bundler is a package manager is a repository of packages but a module bundler is just a tool it's actually a package within npm rollup is also a package inside of npm um and then when you run rollup on your stuff locally it pulls the packages that are that are installed locally using npm and generates a bundle so it's all kind of kind of this big hairball of stuff which is why it's confusing uh shariram says npm and unpackage are sort of like cdns for code in a way in a way i mean the cdn is is essentially a wrapper around npm this unpackaged cdn and on package itself is more akin to a a library like a physical library where you go to get books like when you publish an npm package it's like you're putting a new book in the library and when you're pulling it out it's like you're you're you're asking them to mail you a copy of the book i don't know maybe it's not the right metaphor but yeah i hope that clarifies things current uh going back to the the default exports and the named exports yeah is there um uh are they are they used in different situations uh is is there a a general uh advantage to using named exports over default and vice versa is something there's some general guideline around that that one could keep in mind if you google named exports versus default exports there are a lot of people that have very strong opinions about this stuff and like here why i've stopped exporting defaults from my javascript and this is actually the philosophy that i adhere to there's a lot of issues with default exports often i've seen in the in the module that has a default export internal to that module that export is named something or not not exactly something but it's it has a particular name and then in the in the module that imports it it's imported with a different name which is super confusing that's the that's the one big drawback i see of of using default exports they don't dictate what name you use so you could actually say import it which is the default and then we could use it like this and it still works so um yeah actually this cropped up in the vishub code base where the names don't match and then when you're navigating the code base it makes it super confusing because you have to remember okay it's called this inside the module and it's called this outside the module and it's just it just makes things super confusing so i personally tend to always only use named exports and imports in the code that i author uh but there's pros and cons for sure i mean react has chosen to use the default export of react which makes sense for that case i think um so there are cases where you know using a default export makes sense in a way uh but yeah that's my personal take on it and so all the code that i authored today in my you know work with clients and everything i strictly just use named exports and that's it no default exports yeah that makes sense to me i think i'll follow that nice i see there's a bunch of chatter in the youtube chat so let me get caught up on that guitar covers oh i think i addressed this is bundle.js used there in index.js yes um it's there now because i added it if it's not there vis hub does some magic and it inserts that exact thing so that's that's what's happening there and then yeah you can give the default export of a module any name when you're importing it that's true that's true that's why it's confusing how is index.js included since i don't see it in index.html oh yeah it's the confusing blackmagic part where vishub injects exactly this thing automatically if it's not there you know the intention is to make it easier to use but it's sort of cryptic and strange if you don't know that's happening try out vite sometime as a bundler yeah vite i heard about this like last week for the first time i feel like an old man i can't keep up with his stuff so fight is another one um yeah it looks cool looks cool see the thing with all of this stuff is the intention of vite webpack roll up snowpack parcel the intention of all that stuff is to make it easy and straightforward to author your code so that you don't need to think about or deal with all complexities of generating a bundle including the bundle into your html and all that stuff we've discussed how to use stuff in vishub and es6 modules now i want to talk about how to set a project up locally so let's start by exporting out of this there's this export feature what it gives you is a zip file that has a bunch of files so i'll open up a terminal i'm on linux here i'll go to my my place where i put code called repos short for repositories uh i'll just make a directory called example which is empty um and as you do this stuff you know your setup your mileage may vary i mean i'm very comfortable with the command line and everything but you may want to use gui you may be in windows you may be in mac so the place where we're going is fraught with peril because everybody has a different setup a different system different ide text editor that you use vs code is most popular i think nowadays but i like to use vim doesn't matter once we have this zip file we can hit extract and i'm going to extract it to repos example i'll hit extract show the files in here we have index.html index.js bundle.js which was generated by vishub we've got the readme markdown file and these are all just text files we have something.js and thing.js and we have a few more things that are not visible at all in vishub we have a package.json and a rollup.config.js let's dig into these i'm going to use vim you can use whatever ide you prefer like vs code to look at the files package.json is a file that defines your dependencies and it's a whole it's a whole thing that has a lot of very well defined aspects to it the npm documentation for package.json is the canonical documentation for everything that you could put in package.json this whole concept of package.json has come out of npm essentially it's a way for npm to track dependencies and if you define a package that you want to publish to npm you need a package.json to specify the name the version description keywords home page all this stuff but if and the license you can specify in here which open source license all sorts of things but if you're not publishing a package per se the main thing that we use it for is for dependencies it just maps package name to aversion range and this is using semver semantic versioning and this is what you'd want to research if you get interested in you know how exactly these versions are specified what the carrot means all this stuff here we have a very simple small package.json that says okay we have dev dependencies meaning they're not dependencies of this package if it were to be published but it's dependencies that you need if you're running a development environment locally what this means is that if you run npm install in this directory that has this particular package.json it will use that package.json to figure out what it needs to install and then after it installs that stuff it appears in this directory called node underscore modules node underscore modules let's see what it contains it has all this stuff these are our direct dependencies including rollup and another package called at roll up slash plugin dash buble and we can see those here it's got roll up and it has at roll up and i think the slash um there's stuff inside of there that we're using but what are all these other packages right these are the transitive dependencies of our dependencies a transitive dependency is essentially a dependency of a dependency if we look at rollup for example and we're still inside node modules if we look at the package.json file of the rollup package it contains a bunch of dependencies dev dependencies in particular so all this stuff is pulled in and each of these dependencies has other dependencies so all the dependencies of dependencies of dependencies of dependencies are pulled in and what we end up in node modules with is this list of all the transitive dependencies so this is how you set up a project locally essentially you you run npm install that uses package.json to install these dependencies now the dependency that we're really using is a rollup and we're also using buble to support jsx which we don't actually need here we don't actually need it here but if we want to author react code with jsx we would need buble so i'm actually just going to delete this i'm going to start iterating this configuration locally which i would i would suggest you do because the viz hub export is just sort of a generic simple export that makes it so you can generate bundle.js by yourself outside of vishub here's bundle.js what i'm going to do is delete this file so if i use rm there is no longer any file called bundle.js and then if we look again at package.json it has a scripts field and in that scripts field there's a key called build and the way that the scripts field works with package.json is that you can say npm run followed by the name of a script in which in this case the name is called build and there are sort of conventional names like npm run build generates the bundle across all various tools there's also npm run start which is equivalent to npm start which is set up for a lot with a lot of these templates but it's not set up here there's no script here called start because this is just a very minimal simple configuration that's aimed toward the minimal possible thing that you need to generate bundle.js if we run npm run build it invokes rollup because that's what the script is defined to do rollup dash c and then it creates bundle.js from index.js so this is how you can create bundle.js locally in your own machine outside of vishhub the dash c of rollup means use the rollup configuration file found in rollup.config.js let's take a look at that this is where that mapping exists between the external packages and all of this stuff is sort of preprogrammed into vishub we don't actually need any of it except d3 so i'm going to delete all that junk we don't need and here's the mapping from the browser globals to the package names or rather the other way around from package name to browser global again we just need d3 because that's the only one we're using i mean i would like to imp there's a lot of things to improve with vishub like ideally it shouldn't include any of this stuff that you don't need but this is the state of things at the moment it also uses this buble plugin to transpile jsx but we don't actually need that so i'm going to delete that and yeah here is an interesting use of default exports you could just say export default and boom put it put an object literal right there it doesn't even have a name this is this is an es6 module that defines the role of config so now if we if we run that build script again it still works it generates bundle.js and there it is bundle.js how would you run this locally if you wanted to actually develop well you need to use an http server to serve the file locally you could maybe get away with not doing that by just double clicking on index.html yeah in this case it works but as soon as you introduce any code that uses xmlhttprequest or fetch to fetch data that fetching of data uses the http protocol so you need to be hosting it with a with an http http server locally let me just quickly show you how i would do that my goto tool for that is http dash server which is an npm package so you can say npm install dash g to make it a global command that's available to you http dash server and then you can run http dash server just like that as a command and boom it's created this server that's now running so you can go to this url here and it's serving your page 127.0.0.1 this is a special ip address that is equivalent to local host local host colon 8080 the 8080 is the port number that's a sort of conventional port number that's used that's how you can set up things locally and then once you start developing you get into this loop this development loop this cycle check it out our code is running um there's something about a fav icon file yeah the browser when it loads a page it always looks for this thing called favicon favicon i don't know how to pronounce it but that's the little icon that appears in the tab so that's what that error means it doesn't it doesn't really it's not important but that's what it means if you wanted to customize the little icon that appears in the tab you would have to introduce a favicon file but anyway let's say we wanted to change some of this code and oh check it out here's the log from http server every time we fetch the page it outputs something to this log let's say we wanted to change this text from hello to greetings if i change it and then i save this file oh wait a minute i'm editing bundle.js that's a big no no we don't want to be editing bundle.js because it's an automatically generated file so um here's what i typically do is npm run build that generates bundle.js it's the same it was as it was before it says hello because it was derived from index.js which we should be authoring and changing let's say we wanted to change hello to greetings if i save this file and then i refresh this page it does not get our change because this page is using bundle.js not index.js in order to update bundle.js we need to manually run this script called npm run build now if we go and refresh the page it says hello uh planet earth uh oh there's like something wrong here this is called caching if you hit shift and hit the refresh button now it says greetings because it when you hit shift refresh it disables the cache the browser cache the browser cache is a thing that it uses an older version of the file that you that you got and it's for you know efficiency on the internet uh if you loaded an image yesterday and then you go to the same page that uses that same image and that image is on your machine in the cache then the browser will use it and not fetch the image again it's it's a way to conserve bandwidth so this is another sort of thing that you would run into with local development is the cache and in the network tab of the chrome dev tools you can click a little box that says disable cache which is something i would recommend doing because then you won't have to use shift clicking the refresh button it'll just never use the cache alright so this is how you can set up a local development environment and it basically works however you don't get the automatic refresh stuff which is which is nice to have i mean in invis hub if you make a change it automatically generates bundle.js and reruns the program for you instantly this setup here does not does not do that if you want to do that that's where you get into these project templates and so roll up starter app would let you do that oh but before i get into that are there any questions so far guess not roll up starter app is a more fully fledged project template if we take a look at the package.json here it has more scripts besides build it has start which does the serving for you the http server stuff is built into this it has build which is our same thing we had roll up dash c it also has watch what watch will do is automatically rebuild your bundle every time the source changes the source code changes and then there's dev as a script which is what we would want to use during development we would say npm run dev and what this does is it starts these two scripts in in parallel using this package called npm run all parallel so it runs start which serves the stuff on an http server and it also runs watch and i believe this package called serv which is a dev dependency here it i believe it does that automatic refresh but i don't know let's let's give it a try let's give it a spin so how do we use this what i want to do is i think clone this repository using git i'll call it example roll up starter and then i can run get clone oops i should just copy this here it already has the git clone run this this uses git to make a copy of all these files for me locally it's inside a directory called rollupstarter app which i guess is fine so in here i can run npm install or just npm i which is shorthand for npm install that will install the dependencies and then we can run npm run dev and it gives us this nice little output okay it's running on localhost 5000 let's roll up starter app excellent and then the development workflow looks something like we don't open up these files and this is these are the files from the starter app it's like just their version of hello world we could put our code in here um that's probably that's the way to do it if if you want to like really start a new project based on something in vishub probably the thing to do is just copy your files into one of these starter apps notice how this rollup config is slightly different it looks for src main.js as the entry point instead of index.js like ours does yeah and it has a couple more plugins to resolve npm packages and this is something i want to get into all right so i'm going to gut these files and put our own files in there i'll remove this update.js and then main.js i will replace it with the code that we wrote earlier so here's our index.js i'm just going to copy that over to here and then we need something.js so i'll make a new file called something.js and then i'll just copy this code into there and then we also need thing.js so i'll make a new file called src slash thing dot js and then copy our code into there save all these files and let's see what happened in our window where we're we're running npm run dev we have a couple of warnings here it says unresolved dependencies oh no d3 is imported by src main.js and yeah the bundle has not been updated the problem here is that we don't have d3 as a dependency here now here comes the main difference between what vishub does and what people usually do in projects usually instead of pulling in libraries from a cdn with a browser global usually people add it as a dependency in their package.json and then the bundle contains that entire library let's see how that plays out what we want to do is add to this dependencies d3 at a specific version but rather than hand edit this file what we can do is run a command called npm install dash dash save this will update bundle uh sorry this will update package.json and it will add that new dependencies the new this will update package.json and include whatever we type here as a new dependency at the latest version so if i run npm install dash dash save d3 it will figure out the latest version and add it to our dependencies section and it will also install it in node underscore modules now if we look at package.json it has d3 version 6.6.2 all right let me restart this i don't know if it catches that if i change it like that oh there's some warning about circular dependencies with d3 yeah that's a longstanding issue but it's just a warning it's fine it created a bundle.js let's take a look at bundle.js i'm quite curious to see what it looks like now it's in the public directory public by the way is a conventional directory name for the stuff that gets served over http that's where our index.js is and that's where our bundle is now inside of this version of bundle.js um i forgot how to turn on line numbers in vim one moment oh yes okay in this version of bundle.js let's see how big it is how many lines it's massive it's huge look we're only you know ten percent of the way in 300 lines so what three three thousand lines of code this is because all of d3 is included now inside of our bundle.js vishub does not do this because it would be a huge waste of storage and compute time and everything but as a standard practice nowadays you know if you have for your own project this is typically what folks do you know all the dependencies get included inside of bundle.js which introduces the need for minification uh minification is when this stuff is sort of compacted the variable names are given nonsense names that are just one character or two um and the idea with minification is to get the size of the bundle down i'm just curious what how big is this bundle if we take a look at these files we can see that bundle.js here is 76 kilobytes so that's you know that's what happens when your dependencies get in there and as you add more and more dependencies this bundle gets to be you know 500 kilobytes a megabyte two megabytes um so you got to be careful when you just you know add dependencies willynilly but anyway when we look at the web page now it says roll up starter app i'm not sure why oh perhaps because i did not in i didn't update index.html yeah we're still using their version of this and notice in the rollup starter app version of this they also have script source equals bundle.js it's sort of a standard convention as the last step i'm going to replace that with our version of index.html copy all this stuff that we had from earlier put it into index.html however we no longer need to pull in d3 from unpackage because it's installed locally and it's included inside of bundle.js so i'm going to delete that now if we look at this page it says hello html and it has our greetings here and it also resolves the d3 stuff to the correct thing all right this is how you can essentially bootstrap a local project for development yep that's it any any questions and does this uh also refresh the page every time you make a change oh good question let's see if i change index.html and save it it does not no so we need to manually refresh but i wonder is it set up so that when we edit the code it reruns let's just change something here other thing no it does not it automatically generates the bundle but it does not automatically refresh the page hmm i don't think let me just try again make a change save it no it automatically generates the bundle but does not automatically refresh the page okay at this point if you wanted to add that we can start researching about that sort of thing but it's a whole it's a whole can of worms really there are other starters um for example the webpack dev server um i was hoping to go through this today but we don't have time we're at time here webpack is a great alternative to rollup and it has this thing called the the webpack dev server which does exactly this sort of re automatic refreshing of the page and automatic generating of the bundle so i would encourage you if you're interested to go through the docs of webpack they seem to have a very nice getting started section where was that it's in here somewhere but yeah it's it's a similar kind of configuration to the rollup config where there's an entry and then there's output it's not exactly the same as rollup but it's you know the same in spirit webpack i think is uh perhaps more widely used than rollup for projects for you know applications however rollup is very popular for libraries because it has this efficiency around only including the code that you need which is called tree shaking but anyway i would like to leave you all with an exercise for this week export something you made in vishub put it in a github repository um unfortunately i didn't cover that today but you know try to figure it out and then adopt a build tool roll up maybe go through the same process i did or try webpack or try a newer tool like parcel or snowpack or what was that other one that was suggested today i don't even remember what was that one invite invite yeah yeah yeah maybe try out invite and uh yeah i i hope this has clarified the question of how do i work outside of vis hub all right i think we'll well i think we're pretty much done any any any less questions or discussion points if i have to if i want to do the local development then should i start with roll up only i would suggest it that's actually my go to tool it seems to work extremely well uh but maybe webpack is for you i mean totally up to you and some of these new ones like snowpla snowpack or vite you know they claim to be even better than whatever else is there web packet roll up so it's um it's wide open territory it's average it's an everchanging landscape where things are coming and going people things are hot things are things are cold you know so it's it's really a jungle out there and i've sort of reached the end of what i can recommend because honestly i haven't really kept up with this whole space so it's an you know trial and error and just try a bunch of things and see what works yeah i think i think what i'll do is extend this to next week well actually i should tell you all next week is cancelled the 17th is canceled but i'll resume these streams on the 24th 24th i think that's a saturday and i think it would be worth going through setting up a github repository and maybe walking through using webpack to bootstrap a project and as always i welcome any input or suggestions for things to talk about but then yeah after this we could get into more of the visual stuff d3 making different visualizations and so on all right thanks everyone for joining today i'll uh see you on the 24th and beyond thank you my pleasure very useful thank you testing testing productizing a could base this is part of get it right in black and white but it's a little different because it's just me working on this stuff and this is work i was going to do anyway so why not put it in the series this work is about exporting something that you built invis hub out of vishub putting it into a github repository which is where people you know generally put code and deploying it with github pages also this particular work happens to do some data processing in node js so we'll touch upon that as well this is the thing that i built it's a stream graph of d3 activity for the past 10 years i'm not going to talk at all about how this works but you know think of it as a black box code base that we're going to get out of this hub and sort of productize you know make it a a real open source product i'll start by exporting these files and we get this zip file that has a bunch of files in it but where should we put this stuff we should put it in a git repository let's make one of those in github i'm going to click on this little plus and create new repository i'll call it something like get history stream graph i'll make it public add a readme choose a license i'll make it mit create repository all right we've got this empty repository i'm going to copy this text so that in our terminal we can go to where the repositories are and use git clone and paste that url to clone that down whoops the directory already exists let me try that again and now it's working i'm in a linux terminal by the way this is my typical working environment git is installed you might have to stop and install git on your machine rm means remove uh the dash f means force and the dash r means recursive and git clone is the command that you use to make a copy of all the stuff in the git repository on your machine now that that's there we can cd into that directory cd means change directory and then ls meaning list all the files there and i like to use vim as my editor with nerd tree that lets you see all the files so this is this license is a mit template and this readme is a blank readme i think i'll start this work by just referencing all the input sources in the readme this project aims to visualize get history as stream graphs it draws from the following previous work namely and this is where i'll drop a link to this thing here d3 get history stream graph and i'll make that a link in markdown that goes to that url this one here i'll copy it and paste it right in there and this one refers to this thing that's in github gist right now which is a set of node scripts that are forked from original work by ian johnson he actually figured out how to do this how to get the data of commits out of a git repository and into a csv file so i'll link to this one as well ian johnson's set of scripts to pull the git history and i'll make that a link to this url right here okay i'm going to write the file and quit vim and now i'm going to make the first commit git status dash s is how you see what the status is git diff is how you can tell what changed git add makes sure that all the changes you made are sort of staged to be added to a commit and then git commit dash m add links to readme and then finally get push get push will push up the changes that you made into the repository in github so back in github if we refresh the page we should see this new stuff the language of the readme file by the way is markdown it renders to html and looks like this so now you see these are links but in the original text you know this this big heading is just a hash and you can make the bulleted list with these asterisks all right now that we've got this far i'm going to start by pulling in those node scripts and then after that's done we'll pull in the the front end code that makes the visualization here's my fork of ian johnson's gist which has been modified to remove bulky commit message data and to also publish the combined file to adjust and by the way that that stream graph thing it pulls the data from this gist to add these files to the git repository i'm going to start by cloning this gist i'm going to clone it as a peer directory with git clone and then i'll paste that url for the gist okay it's already there on my machine i'll just do a git pull to make sure i have the latest and i do okay so we have a bunch of files here the main things i'm interested in are these javascript files so i'm just going to say copy everything that ends with js over to our get history stream graph directory then i'll go back to that directory take a look okay everything moved over at this point i know we're going to have a bunch of files eventually so i want to start to organize them these files are the data processing scripts which will be i think in a different directory than like the frontend code so i'm going to make that directory now i'm going to make a new directory called data processing scripts and then i'll move over all those javascript files into that directory now our directory looks something like this where we have a bunch of javascript files and a readme and a license at the top level at this point i'll make another commit oh before that i have to add all these files and then i'll make a commit that says add data processing scripts and get push at this point the main focus is just to get all the code into the repository so i'm not even going to run these scripts i'm going to refactor and massage that stuff later but for now the goal is to get the viz running and publish it with github pages to that end i'm going to extract the stuff from our zip file our vishub export into this directory by clicking on extract scratch that by clicking on extract and navigating to that directory and i think i'll make a new directory actually scratch that and i think i'll make a new directory called vishub export just to keep everything totally separate for now i'll hit extract show the files and there they are okay great now we have our vishab export i'll make a commit but first i have to get ad okay i'll push this up okay the main thing that's missing at this point is the data itself the data is currently hosted in a gist and the viz pulls it down from that gist but as we're unifying things we'd like to make the visualization code pull the data from this repository somewhere scratch that whole segment now that everything is there we should just be able to turn on github pages and get that whole hosting working for that i can go back to the repository which now contains vishub export and inside there there's an index.html that should work if we just host it with github pages which we can enable in the settings of the repository we can just scroll down and find pages by default it's disabled but we can just turn it on and say all right host the main branch at the root and click save now it says your site is ready to be published at this url here and now we just need to modify that path to go to slash vishub export slash index.html i think if i just paste that in it's going to work not quite yet it says it's the site is currently being built i guess it might take some time okay i just refreshed and boom there it is all right that's how you can export something out of this hub and put it into a github repository and then enable hosting with github pages from here on out i'm just gonna massage this code base to be coherent and clean and also make it so that the viz pulls the data from the repository as it gets generated in this repository the first thing i'm going to focus on is whipping these uh node scripts into shape currently they're kind of a mess they create github repository they create git repositories as peers of the source files which is not quite right so if i open up the editor go into data processing scripts there's a bunch of different scripts that do different things this one clones all the d3 repositories from dependencies and then you run this knife sv thing that generates a bunch of files json which converts those files to json and then combine which combines all of those together into a single file ideally we would just have one script that we could run so let me start there and see where it goes i'll make a new file called index.js under data processing scripts and this will be the main thing that runs so first we clone the repositories convert to knife sv files convert to json files and combine the output file since this is node i'm just going to use require rather than import if we say require dot slash clone that should pull in the stuff from this clone file over here i'll call it clone when we import it but the thing is this is currently a script that runs so instead of just running a script i'm going to define a function called clone which is a function that just goes through each of the dependencies and clones them and then in node we can export it by saying module dot exports equals clone now we can just proof that this is working by saying console.log clone it should output a function and then i'll make a new terminal window here navigate to the data processing scripts directory and then run it node index.js okay it's looking for d3s package.json yeah those scripts assume that the d3 repositories is cloned but that's not really the case so i'm just going to take this package.json and drop it into our repository i'll call it d3package.json create that file paste the content and then i believe it's this depends thing that is pulling in that file let's change this path to be d3 package.json and see if it works now okay worked we got a function great now this clone function itself just runs get clone and so um you know i'm not even sure where these would end up let's run it and find out in index.js we can actually run that function so when i run this let's do a bunch of stuff i'm going to stop it before it gets too far and now see there are all these d3 repositories right here in the same directories all the source files which is kind of a mess so i'm just going to delete all those remove everything that starts with d3 dash because i want to keep d3 package jason okay now those are all gone i think the best approach might be to have this clone script make like a directory we can run exec outside of all that and have the command be make directory repositories and we could handle errors here but i don't think we really need to and then we would a cd into repositories and then run git clone on all this stuff we'll see if that works i'll run node index again and then again i'll stop it with ctrl c huh it did not work it did create the repositories directory though i guess the cd didn't work yeah it looks like it doesn't work for cd it looks like we can pass something into exect called cwd let's try that so instead of cd repositories we just pass an object with cwd dot slash repositories would that work i'll get rid of those d3 things again and then see what's in repositories okay it worked look at that all the stuff has been cloned into repositories excellent okay at this point i'll make a commit oh you've added another git repository inside yeah you know i think we just want to totally ignore that directory which we can do by editing dot git ignore if i just put that in get ignore okay it's still added them but let me just remove that whole thing okay now if i go and run that thing again it's going to clone all the repositories now when i do git add it doesn't catch them but i think they are still there yep okay so git ignore is working now i'm going to make a commit that says start iterating data processing script one thing i don't like about this is when you run it it doesn't even tell you what it's doing or how far along it is so i'm just gonna add a little something that says console.log command just so we know which command is running also we may as well output the error just so we know if anything happens or rather if there's no error error is null so let's say if error then console.log error okay now we get some some stuff git clone fails when it already exists okay yeah that makes sense so let me remove that repositories directory and try again okay it's running all this stuff and i finished amazing so if we run that again it's gonna give us all this um these errors but i think i wanted to actually just not tell us if there's an error because i could imagine you know running this this index again and again and if it's already cloned you know it's already cloned so now let's let's work on the knife aspect just copy that line change all clone to knife and then we just run knife but over in knife we need to again make an exported function so i'll make a function called knife that runs this command and then add it to module.exports module.exports is knife now if we run this whole thing oh it's trying to cd into the repositories but it's looking at the wrong place so instead of cd repo it should be cd repositories slash repo let's try that cannot create dot dot slash data slash d3 okay that makes sense because we don't have a data directory similar to clone we might want to make a directory make directory data so now let's try it okay that did not work i think we need to be going dot dot slash dot dot slash because here we go two levels down not one so let me try that dot dot slash dot dot slash okay it's working and we're getting all these nulls because it's doing console.log error i'm going to change it to only console.log the error if there is an error that's not null okay now it runs fine now let's run the json conversion which we can get from that file replace knife with json and in json we can say const json equals a function that runs all this stuff and then export that let's see if that works it seems to have worked but i don't really like how we don't know what's what it's doing so i'm going to add a little bit of console.log cloning dot dot knifing dot dot dot converting to jason dot dot dot that's a little more user friendly i sort of know what's happening and lastly we need to combine the output file dot dot so we can run combine which we get from combine dot js and here again we need to make this a function that runs all this code here and then export it like that all right let's see if it works okay that looks good we've got this new file all d3 commits which looks something like that and you know i'm always a bit hesitant to add data to repositories because the files are usually pretty big and in the case of this one there is actually further aggregation that happens in the front end it actually aggregates by weak yeah with some stuff from d3 utc week and then it applies some smoothing to that data but you know the smoothing i kind of want to keep that on the front end so that if we wanted to we could vary how the smoothing is done but i think it would be advantageous to do this data processing in the node script so that we don't have to fetch a 500 kilobyte file we can fetch a much smaller file that just has the weekly aggregations and then we wouldn't need to add this data file to the git repository at all in our data processing script we can add another step aggregate by week i'll call it aggregate and we can get that from aggregate dot js which is a totally new file which will have a function called aggregate and that will be exported this is where we get to do the fun exercise of porting browserbased code into node this code here expects data as the output from the previous script in this pipeline namely this file here all d3 commits so let's load that file here with fs.read file sync all d3 commits jason and we can call that data string and then data would be json.parse data string and those console.log data just to see if it worked fs is not defined fair enough i'll look at some of these other scripts it just requires fs which is the builtin node file system module and it looks like we might need a dot to string on the result from read file sync but if we run it without that it actually works just fine so maybe we don't need that after all okay we've loaded in this data now we can take the stuff out of his hub that processes this data i'm going to copy all this code up until the place where it computes layer data and what we're calling layer data here i think will be the output it's the aggregated data so i'll paste all that stuff in here this code imports a bunch of stuff from d3 but since we're in node we can say const d3 equals require d3 and for that to work in our data processing scripts we really probably should have a package.json to track our dependencies like d3 to create a package.json i'm going to run npm init and i'll just you know accept all the defaults and then we can run npm install dash s meaning update package.json d3 and if we take a look at package.json this is how it looks that's fine main thing is it has the dependencies now that means that this line of code here will work oh we also need array blur no no we don't we don't that'll be done on the client side that's the smoothing we can reconcile this es6 import syntax with our es5 you know node environment by saying const all this stuff equals d3 this is destructuring right here and i might as well move that up to where it's imported okay so let's organize this code here we've got parse date and layer which are statically defined so i'll pull those out transform data equals data well we don't need that because we're already inside of a function that has data there visible all this stuff should run just fine and then down here is where it sort of trails off it's we gotta just wrap it up here and we we have layer data which we somehow somehow need to get into a file so let's see what layer data looks like here and see if the code runs to this point so if i run index.js apparently layer data is a big array probably the easiest thing to do would just be you know make a an object i'll call it aggregated data and layer here is the name of the layer so i'm just going to say aggregated data at layer equals layered data now we have something that we can output to a json file let's see how did that other module do it there it is fs.write file sync so i'll just drop that line and it calls json.stringify and i'll just pass in aggregated data to there and the file name i think i'll just call it aggregated data now if i run everything we have a new file called aggregateddata.json it contains a bunch of zeros but i think that's okay each of these numbers corresponds to a week but you wouldn't know that based on this data in our code the weeks are available here as all weeks so let me just make that available here in aggregated data as all weeks and then we can nest the repository data under say repositories now we can say aggregateddata.repositories add layer equals layer data let's try this oh okay now we have all weeks the format is a little verbose i kind of want to just clean that up we already have this parser so let's just add a formatter format date is time format and we need to get that out of d3 as well now um instead of all weeks i think i'll call it dates because you know we might want to use months or something in the future and then we can say all weeks dot map format date now when we run this oh we get an error i'll just backtrack okay now it works i don't know how i what i broke or how i broke it just introducing the formatter shouldn't do anything but it does what that's odd if i don't create the formatter all by myself yeah mommy i don't know twilight zone moment okay let's try it again you okay this is super weird it says you know d.date is undefined if we do it like this but if we do it like this explicitly pass one thing into format date then it works weird might be something about a second argument to format date or something but anyway now it's working just fine now if we take a look at the files we can see that the aggregated data now is only 31 kilobytes instead of a whopping 426 we should just make sure that this data doesn't end up in the repository so i'm going to delete this file and i'm going to tweak this script to generate this inside of data inside of the data directory data slash all d3 commits and then when we load that we need to get it from this light the same place data slash all d3 commits and then in our git ignore we can also ignore the data directory so that everything in there does not end up inside the git repository so i'll run all that stuff one last time okay it worked if we do a git status we see the stuff here generally looks good but i see there are swap files being tracked and also node modules is being tracked by git we don't want that so let's go back to our git ignore and say any swap file this is just a temporary thing that vim generates that we don't need and get also node modules okay great there we have it we have aggregateddata.jsonvisible which is only 30 kilobytes so i feel good about adding all this stuff and then i'll make a commit add aggregated data all right now that we've scratched that all right scratch that now that we've got the data processing scripts sorted out let's deal with the frontend code the front end code is currently in this vishub export thing which has sort of a sketchy dead simple package.json and rollup config the first thing i want to do here is make sure that we have a proper setup so i'm going to turn to roll up starter app we can pull things in from here and i like to do it one at a time so here's package.json since the thrust of this project is the front end i'm going to let the front end code live at the root of the repository so i'll just drop that stuff into package.json but instead of roll up starter app we should call this git history stream graph like so everything else looks decent i'm just not sure that it's at the latest version oh and we don't need date functions that's something that's used by you know the starter app i'm just not sure all this stuff would be at the latest version so i'm going to run ncu which is you can get it with node sorry npm install g npm check updates this is a little utility that goes through your package.json and checks if all the versions are the latest we can run it with ncu and it turns out there's some version increments and so i'm going to run ncuu to actually modify package.json to use all the latest versions of things and then i'll run npm install while that runs we can pull in some other stuff from this starter app such as the rollup config this is more of a production oriented configuration for rollup so i'll make a new file called rollup.config.js and i will drop this content into there now let's look at our files and take what we need from the vishub export there are really only two main modules here index.js and transform data i'm inclined to make a new directory called src the source directory and put those files there so i'll just move those into the source directory and notice that the rollup config looks for src slash main.js i'll just change that to index dot js and index.js imports a lot of stuff from d3 and also from d3 area label now this is a fork in the road where we could choose how we want to include our dependencies we could either go the traditional route of pulling in the dependencies into our bundle having a huge bundle with all of the functions from d3 and these libraries that we're using or we could opt to pull our dependencies from a cdn like unpackage and have our bundle only contain our code and not any other library code that's what i'm inclined to do because we're publishing this with github pages and to publish this stuff with github pages we need to include the bundle in the git repository and if we include a bundle in the git repository that contains like d3 and and libraries it's going to bloat the git history so that's why at this juncture i'm going to opt toward using libraries that come from a cdn to do that we need to adopt some of the stuff that's going on in the viz hub config for rollup namely marking things as external i'm going to bring that line into our rollup config it says okay d3 is external also globals and we need that as well under output so that d3 can be resolved to the right thing at runtime since we're using d3 area label as well this piece also needs to be pulled in from our rollup config it just says anything that gets imported from the d3 area label package looks to the d3 global and that just happens to be how that library is set up it adds more stuff to the d3 global okay and finally we have index.html where should we put this and this is a kind of ugly indentation wise let me just fix the formatting okay we're pulling in these three libraries from on package and then we're running our bundle.js uh but is that where it ends up in our new rollup config no it ends up in public slash bundle.js okay good to know that makes a lot of sense the directory name public is typically where index.html lives and also css maybe images or data files things that get loaded by the client so i'll go ahead and make a new directory called public and i'm going to move index.html into public and you know that's where the data should live as well so i'm going to move aggregateddata.json into public there's also styles.css which can go in public as well okay now public has our data our html and our css let's see if our rollup build works see our index.html expects a file called bundle.js and our rollup config outputs a file called bundle.js in public however that's not there at the moment to make that exist we can look at our scripts in package.json see we have a build script which will just run rollup to generate that bundle invoke that we can say npm run build like so and it says unresolved dependencies and also missing global variable name okay we just have to take some more stuff over from our other rollup config from vishub namely we need to add array blur and d3 area label under the external configuration like that also in globals we need to define which global array blur resolves to it just so happens that that library is also set up to add stuff to the d3 global so we can say array blur resolves to the d3 global let's try that again okay no errors and now bundle.js has been generated in the public directory and it looks something like this it's pretty small this has been minified by the way because in the rollup config terser is used terser is a minifier okay great now let's see if everything actually works there is a script here called start which just runs serve which is another npm package and it serves the public directory let's try that npm start okay we have a local http server running on port 5000 and if i run this boom it works look at that amazing so the work is done the final step here is to you know commit whatever we've done and make it work with github pages as well also i'm remembering that i manually copied the data over into the public directory but ideally our scripts would output there directly from the aggregate step so instead of writing aggregateddata.json i'm going to change this to dot dot dot public slash aggregated data this way if we modify any of these scripts we can just run it and then push to github and it'll actually automatically deploy to github pages with the fresh data i'm just going to run that processing script one last time to make sure that the last step works i think it worked but to be sure i'm going to delete this file now it's gone i'll run this again and i'm getting an error now scratch that okay that ran and now in public that file exists boom all done get status to see what changed oh a lot of stuff changed i'll add everything to get this change set looks good make front end work is my commit message push that up now in the github pages config since we have a public directory now we can actually change this configuration so that instead of serving the root at the root it should serve slash public scratch that section okay now we can go to this github pages site oh now shows the readme that's pretty cool but we can go to slash public and we should get the visualization and we do all right sweet you ideally we would not need this slash public but in the settings for github pages we can only select between two options the root and slash docs so the thing to do might be rename public to docs that way we could you know just use the root of this url and that would resolve to the working visualization so i'll go ahead and do that i'll move public to be called docs and then i'll search for all mention of public which gives us these three places that we need to change public to docs and by the way i'm using this a g function which is a really nice thing called the silver searcher it's like a command line search utility okay so in roll up config i'll change public to docs yeah that's the one same thing in package.json public to docs and lastly in our aggregate script public to docs all right there we go i'll add that to git make commit migrate public to docs for github pages push that up now i can change this setting to use slash docs and now if i go to this url it'll take a minute to change but if i refresh now i'm in the middle of something that i really need to have everything in my head we just sat down you it should eventually show up if somebody can get okay um oh i could um let me just finish what i'm doing sweetie hold on you the last sort of loose end we need to wrap up here is the fact that our our client program is still pulling in data from github gist see check it out under source index.js we've got this data url which is still pulling from github gist this one needs to change to pull it from dot slash aggregated data dot json and this is where you know we've moved a bunch of stuff from the front end to the back end or the preprocessing step so we're gonna have to modify this transform data function so that it does not do all the stuff that it did before rather it's going to expect this new format for our aggregated data which contains dates and what else repositories so we can destructure those from data and let's take a look at our aggregate step it does a bunch of stuff in here so we can delete that from the front end code we don't need to do the grouping we don't need to compute all this stuff we do however want to apply the smoothing layers here represents the list of repositories so we can derive that from repositories by saying object dot keys repositories and all weeks is actually dates however we do need to parse those strings into dates using parse date which we have defined there so how about this instead of doing this destructuring we can say data dot repositories and we can also say dates equals data dot dates dot map a function that takes as input one date and returns parse date of that date now dates should be defined correctly and we should be able to set everything up you know just let it run like it did before however there's this thing called data by layer what is that i think i clobbered its instantiation we can use git diff to figure that out yeah here it is i deleted it by accident it's just a new map so we can bring that back scratch that so we can bring that back right here data by layer a new map and now let's see if it works so npm start just serves everything what we want to do now is actually regenerate the bundle so let's try this dev script npm run dev that will run in parallel both the start script and the watch script and the watch script is essentially the same as the build script but it watches meaning every time you change a file it automatically regenerates bundle.js so i'll shut down npm start and run npm run dev oh look at that we have some warnings that's really nice unused external imports utc week utc weeks and group are imported but never used yeah that makes a lot of sense so we can just get rid of those we don't need uct week you see two weeks or group great see i wrote that file and then it updated bundle immediately automatically let's see if the front end works i believe it was localhost to 5000 it appears broken it says grouped data is not defined okay let's see what what is that i think what used to be called grouped data is now called something else but no that's actually not the case what we have is layer data yeah i remember this stuff is actually in our data processing script in the aggregate step yeah so what we're doing is we're saving layer data to the file so we can just get layer data out of the file by saying data dot repositories at layer like that okay let's see if that worked all weeks is not defined yeah i think we re we changed that to be called dates t is not an iterable hmm i don't think i can do it sweetie i'm sorry you okay it says t is not an iterable and if we follow the code it's it's when it tries to compute extent of data apparently data is not an iterable so let's see we just need to connect the dots data i believe was the original data so we actually need to change the frame code so that it doesn't need data at all all it really needs that for is to compute the domain of the x scale which is the extent of the dates and we have those dates available so we can just expose these dates instead of data and then we can use that to compute the extent it's just going to be the extent of the dates and it sort of worked got something kind of funky going on i don't know why the dates go back to 1970. it appears that we might have like an invalid date yeah the dates are going back to like 1971. why is that okay well that's that's what's appearing in our aggregated data so why is that looks like there's some bug in our data processing scripts oh here it is it's all weeks.map that should be well no that looks fine format date of date let's just format all the dates let's counsel.log all weeks at index 0 to see what is the first date here it says 2013. that seems right so what are what's going wrong here what if we pass that into format date it says 1969 1227. why you you okay this is super weird if i just bring back the code like this it gets the correct date and the stream graph appears correctly okay weird but we seem to be missing a bunch of commits on d3 uh you you okay you you you you okay the issue there was it was calling exec and this command was not finishing before the next step in the pipeline ran that's why we were missing some commits so i just changed it to be exec sync so this command actually totally finishes before the next one runs and that was the source of our strange errors so now if we run this and we load the data into the viz it is full and complete and has all our stuff in it all right that's how you can productize a code base all right welcome everyone to episode 8 of get it right in black and white today the goal is to build a d3 scatter plot from scratch so introductions for new folks if any i see oh someone joined the call and left but you're all welcome to join if any money if anybody does join i'll come back and uh we can do introductions i'd like to begin by reviewing some of the submissions from the last episode which was two weeks ago now but let's take a look at what folks did that was the one on javascript modules and build tools and here's a nice roll up example by floating purr very nice very nice and here's another one that uses vite this looks kind of interesting i've never used devite but seems to uh it seems to work and here's another one that seems to be just the straight vishub export which works too but yeah i'm really glad to see folks are able to get their stuff out of his hub into github so that's that's one of the most commonly asked things like how do you get out get out of this hub so that's how and hopefully that's satisfactory and by the way i recorded um episode 7 by myself a couple days ago i'm going to release it as a video soon because i was doing this work anyway of of getting a uh you know makings like an open source product out of something that's in vis up and i just recorded it so i'm going to post that eventually it's not posted yet but that's why we're on episode 8 now not episode 7. metal guitar covers hello everyone hey feel free to join the audio if you'd like it'd be a lot of fun today we'll build a scatter plot and the goal here is to create a vanilla html implementation of a d3 scatter plot that uses modern d3 conventions and implements this pattern of decoupling rendering from data processing the goal of that is to make it easier down the line to swap out the rendering logic if you want to with another framework or canvas or what have you and i hope to get out of this a forkable template that can be sort of a goto resource uh if anybody asks like how do i make a scatter plot with d3 you could just send them a link to this template and like boom that's it and it's like probably less than 100 lines and it works and it's basic and it's vanilla and i mean truly vanilla so we're not going to use es6 modules even because i want to show what that option looks like to not use es6 modules okay i'm going to start by creating a viz invis hub from this vanilla html starter i'm going to fork this and say d3 scatter plot so what have we got here anyway it's a basic html template with some space for javascript i'm just going to gut this delete everything but i'll keep the places to put things like the script and the style because i know we're going to need to use that stuff okay step one let's load in d3 and um there's a number of ways to do this but since we're doing vanilla html let's just load it in from a cdn i'm going to use unpackage as a script tag at the end of the head i'm going to make a new script tag open script close script and the source will be d3 somehow and the way that we get that is i like to go to unpackage.com d3 and it resolves to this minified build of d3 so i'm going to paste that url here now we have access to d3 which we can prove by saying console.log d3 and taking a look in the console and we get this object that has all of the d3 methods right the next step is to load in some data and since this is a you know going to be a template i like to use the iris data set if you just do a google search for the iris data set there's even a wikipedia article about it that helps to give some context it's also known as fisher's iris dataset it's a multivariate data set from like 1936 about flowers about iris flowers these are the iris flowers and it's got like petal width petal length and they're just measurements in centimeters about these particular flowers so it's a classic data set i'm going to use it because we end up with nice scatter plots but part of the goal of this is to develop something that's a template that you could easily swap out the data to be something else so in a sense it doesn't really matter what data we use to start anyway if you scroll down in the search results i've got this gist up in github that contains the iris data set as a csv file publishing data in github gists like this is a pretty common practice for visualizations that are hosted on the web and various platforms it's great because github essentially hosts the stuff for free and lets you pull it down from any program so if we click this raw link right here we get to see the content of this file which is a csv a csv file and csv stands for comma separated value this is the header row and these are all the rows that contain the data so it's got sepal length and the sepal length of the first flower is 5.1 it's got sepal width and the sepal width of the first flower is 3.5 centimeters it's got petal length and the petal length of the first flower is 1.4 and it's got petal width the petal width of the first flower is and it's got species and the species are iris setosa iris versacolor and virginica these are different species of iris so we can take this url right here copy it and paste it into our program i'd like to make a variable for this so i'm going to call it csv url equals and i'm just going to paste it right there and at this juncture you know for me i don't really like seeing these long lines that wrap around in sort of an unwieldy way so here's a little trick that you can use to to clean up the code around strings i'm going to make it an array of strings so we can see the different components of this url yeah i'm just going to split it up here close out the array and then we can say dot join which is a method on javascript arrays and then we can use prettier to format that nicely and now i feel this is a lot more readable we know that it's coming from github gist this is the user name this part of the url is the id of the gist and this part is the commit and then this part is the file name so that's how you can split a long string into multiple lines in you know a somewhat elegant and readable way in javascript and just to make sure we're getting the right thing still we can console.log csv url and we should see that url yeah there it is and we can even click on that and it resolves to the right thing okay now that we've got this csv url we have to fetch this csv file to do that we can use d3 dot csv now at this juncture we can make a decision do we want to have d3 dot all over the place in our code or do we want to extract the d3 stuff into local variables the latter would be my preference because that's how it ends up when you use imports es6 imports so to make this vanilla javascript more closely resemble the code that you would write if you were to use es6 imports i'm going to make a decision to destructure all this stuff out of the d3 global like this we can say const csv equals d3 and i'm going to do it at the top because traditionally that's where the imports go so what this is doing is is exactly the same as this const csv equals d3.csv it's exactly the same thing but it uses es6 destructuring which is a nice language feature so now that we've got this the csv thing we can we can use it we can say csv and pass in csv url and what this does is it makes a network request using http for that particular url and the csv function returns a promise which is a construct in esx javascript to deal with asynchronous control flow so when you run this code it makes a request and then that request takes some time to come back and then after it comes back the promise resolves and that's when we want to get the data that comes back to do that we can say dot then dot then is a method on promises and we could pass in a function that takes as input data and then we can say console.log data to see if it worked indeed it did see we get this array of 150 elements that also has a property on it called columns see this is the result of d3 dot csv doing its thing internally it actually loads the file and it also parses it it goes through that big string of text and it splits it into rows and it constructs these objects one object per row so what we get here it's an array of objects and each of these objects has a bunch of properties like sepal length simple width however these are strings and ideally these would be numbers so the next step here is to parse these strings into numbers takes as input a second argument i'm going to call it parse row and this is a function that takes as input a single row i'm going to call it d and it returns some object that will replace that row so what i'm going to do here is i'm going to return d but before doing that i'm going to mutate d and say d dot sepal width well actually let me just copy the set of columns out because i can't remember all of them and we only want to do this for the things that are numbers so species is not a number so we don't need to parse the strings into numbers and by the way the reason why it's good practice to parse strings into numbers is because you know when you do math on strings you don't always get the right result just as a brief detour let me just show you if you add like five plus 5 as strings you get 55 but if you add 5 plus 5 as numbers you get 10. so how do we get from strings to numbers we can use this operator called unary plus if you put plus right before the string it parses the string into a number and so that's what we can do for for all of these numeric fields here going to paste that here and i'm going to use the macros i think to just write this code quicker so we can say d dot z length equals plus d dot sepal length and then set up for the next one and with these macros i can automate that and then i'll use prettier to format the code and there we go we've got numbers instead of strings and let's just see if that worked in the console we can see indeed these are numbers now we've got some questions in the youtube chat uh by the way anyone can join the live audio be higher bandwidth so csv is converting the file to a json structure yeah you could think of it like that i mean it's a it's converting it to a javascript object in memory which is the same structure as a json file but json is is a serialization of javascript object so it's not exactly json but it's similar it's it's yeah it's an array of objects that's true doesn't d3 add columns yep yep totally does yeah so d3 does all that magic internally where it adds this columns property yep okay what's next here let's start using d3 to build up this graphic using svg so the first step of that is to create an svg element on the page we can do that right here i suppose const svg equals d3 dot select body dot append svg this will append a new svg element to the body however since we don't want to see d3 dot sprinkled throughout our code i'm going to also destructure select from d3 up there and for svgs to work we need to give them a width so i'm going to say attr width and also we need to give them a height so i'm going to give it width as the value of a local variable called width that i haven't created yet and the same for height height gets height and let's define width to be window dot inner width this measures the size of the browser at the time where the program runs i like doing it like this so it's generic and it's not a hardcoded number okay let's see did this work we get these uh these undesirable scroll bars which we can address with some styling in the css we can say okay on the body element set the margin to be zero this is just a common trick that you sort of need to do all the time if you want to have full screen svgs and overflow is hidden that will hide those pesky scroll bars okay that looks better all right now that we've got this svg what do we want to put in here um well a scatter plot is made of circles so let's just go at it that way you know let's add some circles to this svg based on the data the thing is though that data is only available inside of this callback here and i don't know this dot then i don't really like it because because there is a more elegant construct called async and await my preference is to use that and the way you can do this is introduce a function i'm going to call it main and this is going to be an async function and what that means is we can say const data equals await csv all this stuff here this um strike strikes me as a little bit more elegant you know i'd prefer to use it like this um and then we have to invoke main of course and let's just see if it still works after this console.log data indeed there it is okay so that's how you can you can use async and await instead of the then syntax for promises which is sort of a more modern approach now we can add circles to our svg with the d3 general update pattern svg.select all circle dot data data dot join circle and now we can set our attributes on the circle attr cx is going to be now what is it going to be i mean this is where we need to do a lot of work actually to figure out what that x position should be and it brings up the point that um i would like to have the concerns separated of the data processing and the rendering and so i feel like we're getting a bit ahead of ourselves we're not quite ready for the rendering because we haven't done the data processing and so by data processing what i mean is figuring out which x and y coordinate each circle needs to get based on the data and using this construct called scales linear scales in particular so let's do the data processing first and then circle back to this rendering logic all right i'm going to comment out this and to figure out where x should go we need to use a scale and i'm going to just call it x this is going to be the x scale because this is a convention that i've seen in recent times with d3 programs this is going to be an instance of scale linear and it would be d3 dot scale linear but we're also going to destructure that up here out of d3 skill linear but what does a scale linear i mean what is this what is scale linear why do we need it i've prepared a diagram to explain this scale linear has a domain and a range the domain is typically the values that you see in the data in our case this would be like the you know the width of the sepal or whatever and typically the domain goes from the minimum to the maximum value that we see in the data so let's just say we have some data set where the minimum value that we want to use for say the x position is 0 and the maximum value is 10. and what the purpose is for scale linear in this case is to transform data space into pixel space and the range of the scale is the pixel space and in the case of the x coordinate this is going to be you know the the lowest and the highest x pixel coordinate that we want to see whoops hang on so when we have a data value and we want to project it onto the screen we we give this scale a value from the domain and what the scale does is it gives us as output a value in the range for example if we were to have the number five in our data we could say okay mr scale linear my data value was five where should that be on the screen and then scale linear would say oh i know that should be at 25 because think about it 5 is halfway between 0 and 10 and 25 is halfway between 0 and 50. so that's the purpose of skill linear i see someone has joined hey felipe is here hello hello hey i'm late it's really difficult to me to make it oh no worries i'm happy you could join yeah i'll meet you meet you i'm also glad that i came good job nice um i can't remember if you introduced yourself last time you came on but maybe just give a a brief intro to yourself here okay i'm felipe i'm an engineer as a profession i don't code i just love to code but it's not my job and uh and then i'm i'm trying to learn as much as i can to to start coding and make things more more easily very nice i really i'm really enjoying making making things awesome yeah i've been very impressed with your work you know i'm so happy that you've been following the series and and doing the the exercises you know it's very it's very great to see and i'm so happy you could join me today so here's what i'm going to do i'm going to share my screen in the google meet okay so that you can follow along there and you can close the youtube stream because there's a lag there but this is great because you can we can have discussions in real time if you have any questions so feel free to interrupt me if anything's not clear okay we can dive deeper but in the meantime please mute yourself because there's a little bit of background noise oh my gosh adil is here too hey hey adil how are you you're muted hello everyone hi karen how are you hello so glad you could join today sorry about the the last minute arrival at some babysitting duties oh no worries no worries oh this is great two folks joined it once and felipe just joined philippe have you met um a deal not not personally but nice to meet you nice hi filipe hi how are you great well let me just um give a quick recap because you're all just joining this is what we've got so far it's not that much it loads d3 it uh fetches a csv parses the rows from a csv constructs an svg element and constructs a scale linear and the goal here is to make a scatter plot and i just went through this slide about linear scales and the purpose of linear scales is to convert values from a domain to a range domain is like the input the range is like the output the domain is the data space and the range is the screen space so in our case we want to position these circles in the scatter plot in the x direction and what should that be though we have to pick one of these columns to use and this is where i like to define an accessor that i call you know i like to call it x value y value color value size value whatever it's a naming convention that i like to use and it's a function that takes as input one row and it gives you back some value from the data that we should use so here are our various options um i don't think it really matters at this point which one because i just want to get something to show up so i'll pick petal length this is going to be our x value and the same for y let's try simple length for y so we're going to build a scatter plot where you know petal length determines the x position of the circles and sepal length determines the y position of the circles now that we have that in hand we can define the domain of rx scale and the way that you do this is firstly you construct an instance of scale linear by invoking d3 dot scale linear as a function this gives you back this object that has methods on it such as domain and domain can be used to set the domain and the domain remember is just two values a minimum and a maximum and so we can this is going to be like min and max min and max are actually functions from d3 so we could say d3.min give it the data and give it the x value accessor and this will actually iterate through all of the different values and compute the minimum from there and we can do the same for max d3.max data x value and it will compute the maximum x value let's just inspect uh what happened there x value is the same of x x value is just this function okay yeah it's just this function here that returns the petal length for each row and we could tweak it here if we wanted to change which row to use but yeah that's all it is it's just a function that returns the petal length for each row and so what what we're doing here we're passing in that function to d3.min which expects a function that takes as input a single row and we're also passing in the data and when we run this d3.min call it actually checks each and every value that gets returned from this function for each and every row and it keeps track of the minimum one that it saw and then it returns the the minimum of all the values and same thing for max but just for the maximum and we can check if this worked by saying x dot domain and the thing about this scale dot domain is if you pass it a value it acts as a setter meaning it sets the value of the domain but if you don't pass it any value like this it acts as a getter and it returns the value that you set previously i just use prettier there to format and so if we look at the result we can see an array of two values and check it out it goes between 1 and 6.9 so d3.min and d3.max are great and all but there's actually a function that does both of them for you at the same time which is called extend so instead of this we can use d3.extent and d3.extent actually returns an array with two elements so when this runs we can see that it's actually the same the same end result and as a last piece of cleanup instead of using d3 dot extent i'm going to destructure extent from d3 up here okay so now we've got the domain of our x scale figured out it's the minimum and maximum value for that column in the data now we need to figure out what should be the range for our x scale we can set the range in much the same way that we set the domain with a function called dot range and by the way note how it's calling dot range on the return value from dot domain and the thing is uh with this with the d3 api it's using um this technique called method chaining and what this does is if you use for example domain as a setter like this it returns the instance of the scale which is the same thing as x so we could potentially say okay x is a scale linear and then x dot domain is this x dot range is this other thing and this all would work but since it's developed with this method chaining api we can use this shorthand and this works as well so let's figure out what should the range be well the range it's going to be an array of two numbers and i think to start let's just make it go between zero and width to fill up the screen and we can see what that is by saying x dot range like this and it's array of you know 0 to 960 that seems right okay that's our x scale it's finished now let's do the same for y i'm just going to copy all that change x to y and then we want the range to go from zero to height but not actually because the ycoordinate is flipped in svg so so zero is at the top not the bottom but we want the lowest data value to be at the bottom in the screen so we actually need to flip this the range will go from height to 0. now we can do our data processing i'm going to create this thing called marks and it's going to be data.map where we invoke a function for each and every row of our data set and we can return an object and this object can have on it the properties of x and y so x will be x meaning this x scale of the value from the domain and by the way these linear scales are functions and you can pass in a value from the domain and so the value from the domain will be you know d dot what is it pedal length oops however since i don't want to hard code these values in here and we already have this accessor function we can just say x value of d that way it's nice and generic and the same thing for y just replace x with y and there we go now let's console.log marks to see what we ended up with oh i've got two console.logs here which is confusing let me get rid of the other one i'll get rid of this console.log data so now we're just going to see the marks and we have objects that have x and y in pixel coordinates all right fantastic this is great now we're ready to move on to the rendering step and and because we did the data processing separately the rendering step is a very straightforward thing where you just map x and y from these objects directly onto cx and cy of the circles pixels pixels for me i have the the impression that should be in tangent numbers not floating numbers why is that yeah that's an interesting point pixels being integers versus uh floating point numbers with decimals yeah it's interesting um svg because it is scalable vector graphics when you're looking at it on the screen um let's say you're looking at it on a high dpi display like a retina display on a really expensive like macbook and um and you set a pixel value as like 100.5 on a high dpi display that has double or quadruple rather the pixel density as a regular display that incrementing of the pixel coordinate by 0.5 will actually increment it by one physical pixel and svg within svg you could do transforms and even with css you can do transforms of scaling and so svg actually does accept pixel coordinates as floating point numbers they don't need to be integers and by the way interestingly this is different with canvas html5 canvas which is a raster based system if you draw a line in canvas and you give it a floating point number i i i'll have to double check but i think it like takes the floor of the number so you can actually only get down to a single pixel in the canvas which is a raster image because it's made up of pixels however in svg it's more detailed than that so somewhat surprisingly you can actually use fractional values for pixels and also for things like line width if you set the line width to 0.5 it it makes it like slightly lighter when it gets antialiased onto the display uh but again if you were to view it on a high dpi display it would actually be one physical pixel as opposed to like two physical pixels because it depends on the what's it called the device device pixel ratio or something like that but yeah long story short svg accepts floating points as um values okay thank you yeah my pleasure yeah i remember it blew my mind when i learned that actually um and it makes sense in a way because let's say you print an svg when you print something it's like 300 dpi so you can actually get to sub pixel uh precision when you print it or when you view it as a hana highres display um current yeah when it comes to choosing a scale um does that depend on what kind of um what kind of metric we're dealing with so we're chosen a linear scale in this case and does that is that because it it's there's something about the original metrics um that that makes a linear scale appropriate yes it does and um i will be getting into this in the future but yeah long story short linear scales is just one type of scale it's a particular type of continuous scale and these continuous scales include other ones like a power scale which includes a square root scale a log scale a time scale radial scale so all of these continuous scales are meant to deal with numbers as input so any time you have a column of data that just has numbers in it you can use this type of scale however there are other types of scales that make sense to use for other types of values time scales for example work with dates and it it's categorized as a continuous scale because it it acts like scale linear but for dates it treats a date as a point in time and also there are ordinal scales so in our data value for the iris stuff we have one column which is species right and it has three distinct values that are strings that are not numbers and so when you have strings in your data you can use ordinal scales either an ordinal scale directly which is essentially a dictionary that maps an input value to an output value but within this space of ordinal scales you have band scales and point scales a band scale maps these discrete input values to discrete output values that are arranged as bands on the screen so this is useful for bar charts for example and then you have point scales point scales can be used to represent data that has discrete input values like different strings but then project that onto a space so if you wanted to have a scatter plot where for example y is the species you could use scale point to map species to a y value but since we're just dealing with numbers mapping numbers to the screen that's why we're using linear scale and we will start to use all these different scales in the future for all the various um visualization techniques yeah thanks that makes that makes sense thank you my pleasure okay let's get these circles to show up and make a a basic scatter plot i'm going to bring back this rendering logic that we started on earlier by uncommenting it and i'm going to change it to work with marks instead of the original data now if we want to set the cx attribute we can just give it a function that takes as input one entry in the marks array and it can return d dot x and the same thing for y c y which is the center y coordinate of the circle can return d dot y and let's see if it worked sorry they are missing they are yeah good call good call yes yes yes that's it if you don't give it r if you don't give a circle a radius it doesn't have a radius and it doesn't show up so let's say five all right there we go boom got a basic scatter plot okay so how do we add axes to a scatter plot first of all we need to make room for the axes using a margin and in the d3 world there's this this thing called the margin convention actually let me just show that one because it's it's really good if you just google d3 margin convention mike bostock the author of d3 has this piece in observable which is the d3 margin convention the idea behind this is to make room for axes on the left and on the bottom or on the top and the right wherever you want to put them but the whole idea is we define this margin object that has top right bottom and left and our code will sort of use that margin to to know where to put things on the screen so it impacts how we compute the range of our skills instead of going from zero to width for example we would want to go from margin.left to width minus margin.right and that's what this example does here back in our code let's define a margin margin is going to be an object that has top i'll just set them all to 20 for now can change it later right is 20 bottom is 20 and left is 20. and by the way this is an actual convention to to go from top right bottom left because it's clockwise around the screen and i think that's how css sometimes in css you can you can like specify things as a big string and it goes from top right bottom and left like that so that's why i chose that ordering but anyway now that we have this margin we can tweak our scales instead of going from zero to width for our x scale we can make it go from margin dot left to width minus margin dot right and now we can see that there is actually a margin being applied let's do the same for our y scale instead of going from height to zero it's going to go from height minus margin dot bottom to margin dot top like that and everything else just sort of works everything else flows from the scales so it just works we can verify that it's working by testing each one of these one by one like what if we set the top to 200. see that it works we have a big gap on the top what if we set right to 200 it works we have a big gap on the right how about bottom yep got a gap on the bottom and left yes i have a gap on the left that's how you can implement the margin convention now that we have space for axes let's add some axes when we destructor stuff out of d3 let's also pull out axis left and axis bottom and the way that we can use those is on our svg we can append a group element for each of our axes so this is going to be um let's do the yaxis first svg.call and this is where we can construct a new axis axis left and when we construct this axis we can pass in the scale namely uh y like that and we're not seeing anything because it's sort of off to the side of the screen what we need to do is move this group element to the right a little bit actually we need to move it to the right by margin.left we can do that by saying dot attr and we can set the transform to be translated and this is an es6 string template literal we want to translate by margin dot left in the y direction and in the x direction and 0 in the y direction and now it shows up see get some tick marks the numbers seem to be cut off though so let me just tweak the margin i'm going to tweak the left margin to be let's say 50. and now we can see this axis shows up all right that's how you can add an axis with d3 maybe let's do the same for the y axis or let's do the same for the x axis now just going to copy this code and modify it to be for the xaxis which i would like to put at the bottom so we can call x's bottom and pass an x like this but the transform is not quite right anymore see we've got all these numbers at the top we want these to be at the bottom so what we need to do is translate by 0 in the x direction but in the y direction we want to translate it to be all the way down at the bottom and so that's going to be height minus margin dot bottom yep and that works all right very good that's how we can add x and y axes to our scatter plot one last little tweak i would like yeah question uh i'm sorry i i'm not sure how how do you ensure that the uh the mark in the in the axis is exactly matching the the value of the data because since you can transpose the axis you could be ending the number in the different places i don't know if i made myself clear oh sure yeah yeah i mean the shorter the short answer is because they're derived from the same scale but yeah if you if you wanted to you know you could translate it by let's say like 50 pixels in the x direction and make it misaligned like now it's not lined up but if you don't do that it is perfectly aligned just because of how the scales are set up so because the axis takes as input the x scale the axis actually uses the range of the scale to position itself and since it's the same scale that drives the x and y of the circles it it ends up aligning perfectly yeah and we're translating it by notice how we're not translating the xaxis in the xdirection at all we're just translating the xaxis in the ydirection to put it at the bottom and so all yeah so all the x positioning is just strictly coming from the xscale okay okay nice nice and same with y by the way we're translating y in the x direction just to align it with the x scale so when all of the y positioning is just strictly from the y scale here so that's why that's why they all align correctly and you can sort of see that they align because this the the lowest x value which is the circle here the center of the circle is exactly on that line of the axis can i see something yeah um we can check the value for each circle by putting title on it and we will see it matches with the axis oh we totally could yeah that's fairly easy to do let's just do it that's a great idea so there's this thing called title um you know what that might be a little more complicated because we need to tap into the enter selection yeah i don't know that seems a little bit out of scope for today yeah we need to we need to change this code around to access the enter selection so i don't know i don't really yeah but it's no problem my questions was wondering if we could mess it up but as you said we we never transformed in the axis that we are actually moving exactly made sense completely yeah nice yeah great great but but yes we could potentially add tool tips that will show the numbers um which which we could then verify that could conceivably work but i don't think i'd like to do that right now because i want to keep this example um nice and simple i have a question um if if we wanted to the the axes to begin from zero uh what would we need to do oh yeah sure if you wanted the axes to begin at zero you could just use um instead of using extent you could use max d3.max and as the first value you could explicitly just pass in zero like this now the xaxis starts at zero very cool yeah thank you yeah that makes total sense nice yeah my pleasure and i love how you know d3 is is designed in such a way where it's like you can fit things together like lego blocks you know so it's you can just plug in whatever you want to for the domain but it provides utilities like this max and extent for the most common use cases which is you know deriving the domain from your data and for a bar for a scatter plot it makes sense to use extent but for other visualization types um like a bar chart it always makes sense to start at zero so you know if once we make bar charts we'll always start the domain at zero and then use d3.max and same thing if you're assigning areas to circles like the size of a circle based on some numbers i mean we'll get there in the future but i'm saying like there are very concrete use cases where it makes sense to start the domain at zero and then go from zero to the max of the data and that's how you would do it so yeah i think we're pretty much done here i kind of want to just um you know give this a onceover oh one thing i wanted to do was make the ticks the tick marks bigger because um in my opinion the default size is pretty pretty small and i want to give a f just a flavor of how you might customize some of the stuff on the axis which is a rabbit hole there's a lot of different things you could do there but the simplest thing you can do is just use css to say for all text elements which includes the tick marks we can set the font size to be i don't know 24 pixels and that works it's it's bigger but as a best practice i like to scope the changes because if there's you know if there's other text this will apply to all the text which may be what you want but with d3 axes in the dom there is actually a structure that we can leverage namely that each tick mark is is composed of a group element that has a class of tick and then within that group element there's a line element and there's a text element so we can select the text elements inside of the ticks by deleveraging the fact that this group element has a class of tick by saying dot tick space text what this what this does is it constructs a selector css selector that selects the tick elements and then the space signifies okay within within that look for children of that element that are of the type text so this is how you can set the font size of the tick elements and the labels are getting cut off so i'm just going to tweak the margin again i tweak the bottom margin to be say 50. maybe 40. yeah and um at this juncture i think the code is is done in a sense but now just to close this out i want to look through this code from the perspective of someone who wants to fork and modify this because that's what the assignment is to fork this and modify it to show some other data set and so you know in this direction what i want to look for is are all of the tweakable things in one place and all the generic stuff in some other place that's what i would aim for if if the goal is to create a reusable template so let's just look through and i'm going to make a comment here called tweakables and all this stuff should be data set specific so we got the csv url very much data set specific we got parsero very much data set specific x value y value very much tweakable and actually at this point let me just show you how easy it is to change the meaning of of one of these x or y instead of sepal length we can change it to c pull width and boom our scatter plot updates just like that and so when you load in another data set part of the process is just going to be trying out different values for the columns and see and see what pops out the margin very tweakable something you'd want to probably tweak a lot and the width and the height yeah this part is sort of something you might want to tweak like if you have some downstream code that where you want to position the svg inside something else so sure it's tweakable now this part is generic so i'm going to go through this and see is there anything that's specific to this data set in this code or not so far it looks pretty generic you know this cut this same exact code could run on any data set oh there's one thing that's tweakable the radius so i'll pull that out into a tweakable variable i'll put it along with x value y value and margin radius is 5. yeah that's an arbitrary thing that uh you might want to tweak but um i think that's about it that's all i see so that's how that's how you can polish up a a forkable dataviz template all right a great i feel like we've set out the original goal to have something that's just vanilla html javascript it doesn't use any bundler or anything it approximates the feel of es6 modules by destructuring the stuff out of the d3 global but it's it's totally vanilla so anyone could you know export this and use it all right i think that's it any um any questions or things you want to discuss um i have a question about the call function you used for axis sure let me just plug in my laptop there's the batteries running out yeah the question is about dot call i guess you could phrase the question as like what is that what is it really doing and it's it's really just a shorthand for invoking functions and there's a way that you could do this without using dot call let me show you what that looks like um let's let's look at for for axis left we could potentially pull that out like this into a variable and then pull out this group element as another variable so now we have i'll get rid of that dot call now we have the axis as a standalone thing and the group element as a standalone thing and we want to sort of inject that axis into that dom element and one way we could do it is y axis g dot call yaxis which is the same as it was before but now things are split into variables the other way to do it is like this yaxis yaxis g like that and it still works so what's going on here is when you invoke dot call on a selection it expects that you pass in a function and it will invoke that function passing in the selection on which you invoked.call so it's exactly the same as this yaxis is actually a function that expects to be called with a d3 selection of a group element as the input so these two are exactly the same behaviorwise um dot call is just it's just sort of a shorthand a convention it's convenient because you can chain stuff onto it you could say dot call that dot you know select um you know domain path or something and remove it as an example use case where you might want to use dot call and see that removes the domain line that path the which is that vertical thing and often i find myself wanting to remove the domain path because it's like i don't see much value that it provides but anyway yeah i hope that answers your question these two are equivalent dot call just invokes a function and passes the selection but i think i'll put it back to the way it was it's kind of confusing but it will work yeah yeah there's always a tradeoff there's always a tradeoff between writing concise code that might be a little cryptic versus verbose code that's like twice as long but it's easier to read yeah it's gonna try to strike a balance so it's the first argument to the uh yes the first argument of the first argument yeah maybe i should just keep all that around as a reference yeah just commenting will be nice so the you know it's like the argument of axis left function is the selection svg selection is that right yeah the argument that yaxis expects is a group element well rather it's a d3 selection of a group element that's empty and the yaxis function is going to be like okay you give me an empty group element i'm going to put an axis into it and if there's an axis already there i'm going to i'm going to you know update it to be to be accurate and it has to be group element it expects a group element yeah i mean you could conceivably pass in like the top level svg element but yeah i'd expect a group element but yeah it's a good question could you could you pass in something else i don't know um i've only ever seen it used with a group element oh i i broke it there we go so so yeah i mean it's it's good to study this um because it is a lot of stuff sort of wrapped into one so what it does here is says okay i'm constructing an instance of an axis and i'm passing in the y scale so the return value from this constructor is a function that we could call y axis if we wanted to that expects as input a d3 selection of a group element as its argument when it gets invoked and that's exactly what gets passed in when you when you use dot call and the dot call is is called on this group element that's been transformed but um yeah yeah that's how it all works it does take some time to to wrap your head around it um but oh in time i've come to prefer like this this sort of construct rather than making a bunch of variables but again it's just just personal preference either way works you know that another thing another while we're at it another way that you could potentially do this which might be even more confusing is that you can construct the axis and then pass in this selection here that works as well i i don't understand this to me it seems like uh could be because i'm more used to fighting but seems that you're pressing like the svg thing like a argument to the function that's left yeah it's not clear yeah that's right that's right so when you call axis left from d3 you give it the scale it returns an instance of a d3 axis but that instance of d3 axis is in fact a function that expects to be invoked with a single argument namely a d3 selection of a group element and so this statement here returns a function and that's why we can invoke that function like this so this part here we are invoking that function that gets returned from the axis left constructor and we're passing in a d3 selection of this group element because as soon as we call svg.append g it creates a brand new d3 selection of a brand new dom element which is a group element and then it calls dot attr on that group element and because it uses this method chaining api the return value from dot attr is the same as the return value from dot append g it's a d3 selection of the group element and so this whole expression here yields you know it returns a d3 selection of this group element and that's what gets passed into this axis left function okay when when you inspect the inspect the element uh the result is exactly the same right correct yeah all of these different um all of these different ways of of invoking the axes result in the exact same behavior they're just different ways of formulating it but yeah when you when you when you see it visually it's the same and yeah when you inspect the dom it's going to be exactly the same and from the perspective of the dom this thing here is the parent group element that we created with this code here svg.peng said the transform to be translate this is that group element here and then when we pass that into the d3 axis the axis implementation adds all this stuff as children to it so there's a path which is the domain line and then there's group elements for each and every tick and within each tick you have a line and a text element so yeah no matter how you invoke it it ends up to be the exact same dom structure it's quite confusing yeah it looks like you can pass axis function in the svg selection and vice versa well you can that's exactly what dot call does it sort of inverts everything you know i think probably the clearest one to read is this variant here where we don't even use dot call we construct a variable called yaxis which is that return value from axis left and then we construct a group element by appending a group element this is a d3 selection of a group element and you can see the relationship very clearly right here y axis is a function that expects as input a d3 selection of an empty group element and this is this is i guess shows the border between them very clearly but yeah i get it that it's totally confusing that you can invert the order of those in the code with dot call yeah it takes a while to wrap your head around okay let me ask you one thing it's not quite related i i think i got my my head around this it's regarding the the arrow function uh i don't need to use uh the return ever in the arrow function it's always the last line that's returned right there it's only one line so it doesn't make sense my question but if i have um an object and it has more than one line do i have to use return or not that's a good question yeah yeah let me show a variant of this one so with the arrow function if it immediately goes to an expression that could be an object literal could be a string could be a number it it sort of activates this thing called implicit return it's it implicitly adds or exec it implicitly executes a return statement or the equivalent of a return statement and that's sort of one of the magical features of these arrow functions however if you start the arrow function with a curly brace like this then it opens up into a function body where you need to explicitly return so you you could like you know run some code blah blah blah but then at the end of it if you just define an object like this it's not going to be returned you need to explicitly return it like this and so this function here is exactly equivalent to this function here but the one on the top uses that syntactic sugar of the implicit return that comes with arrow functions and that's by the way why it needs to be wrapped in these parentheses because the parentheses signify okay we are defining a literal object and and that's why it gets returned if you leave out these parentheses uh it's not valid javascript and it breaks so like if if we try to run that it's going to say it's not valid it's unexpected token because when the parser goes in it it interprets it okay like we're starting a function body now and then this is like garbage doesn't make any sense so yeah that's why you need those uh parentheses okay i i got this therefore a lot so it's good to know that this could be a reason nice the unexpected two columns yep yeah that's one of the most common areas you got a syntax error then you need to track it down figure out where it is um and by the way you know a lot of folks who have been maybe programming in javascript years ago you're used to this other syntax where it's like a function like this and this is like i like to call it the old school function notation this works too but the arrow function syntax is just it's a lot more concise and that's what folks would use probably nowadays all right very good a lot of fun we've explored some ins and outs of um of the details here and we've ended up with this forkable template oops hold on so i'd like to wrap up and leave you all with an exercise the exercise for this week is fork the scatter plot that we made and i'll share the link and change it around to visualize a different data set and i've provided this link here to uh this data repository that i have where i've just been accumulating over the years um various public data sets of interest and you don't have to necessarily derive any data from here you could just find you know do a search for data that's interesting to you and plug it in to the scatter plot and i've got this other video on youtube called preparing data for visualization and this walks through how you can create a gist and put a csv file in there and then once that's there you can follow the same steps that i did today to pull it into your code and visualize it and this is all there in the vishub forum so please submit your uh your work here looking forward to it okay thank you all right yeah my pleasure and uh thanks everyone for joining today it's a pleasure as always today i'd like to talk about reusable charts this has been a fascination of mine for years because every time you figure out how to make a certain visualization um it becomes sort of a telescope that you can point in different directions right at different data sets and encapsulating the reusable elements has always been somewhat of a challenge hey felipe how are you hey i'm fine thank you what about you good good good we got a full house today we got sriram nita adil and felipe this is amazing very cool so yeah today i'm going to talk about reusable charts and what i'm going to do today the idea is to take what we did last time refactor it a little bit start to use es6 modules and then adopt this reusable charts pattern which is sort of the the module pattern that is is commonly found with pure d3 implementations but first let me review the submissions from last week yeah we got some really good stuff this week uh here's philippe's work title to the dot um nice so there's little tool tips that you get when you hover um you want to talk about this a little bit well that's that's not much but this is just uh the title i didn't and knew how to use the invert function so i add p x and p y in the marks uh but what p x and v y is doing it's pretty much the invert function if you can scroll a little bit up yeah there you go right nice but maybe there is some kind of invert function that i could use in the text i i think andrea i guess let's talk about this in one lock post right this is just just to have the title and i i got this from your cheat uh oh yeah cheap tricks for interaction yeah nice let me just provide a little bit of feedback on this so this step here creating marks as a derivative you know array of data this is where all of the transformation can happen that you need in the visualization including logic like putting together strings see doing it this way it actually puts a bunch of intelligence into the rendering logic meaning this this string of the tooltip is derived in the rendering logic rather than in the preprocessing step so here's one thing that you could do is just move this logic out of here and use something like d.title instead and then you could just say the title of each mark is and then you can get rid of these intermediate values p x and p y so it's it's a very small change but this is more in the spirit of like then uh here do do i have to put d dot x v yeah okay no yeah a good catch yeah i just overlooked that yep because x value and d is visible here so this should still be working yep it's still there nice but yeah great work great work adding that that's something that we had talked about during the last uh you know last week session and i never added it but i'm great i'm happy to see that uh it was added here yes this was just after the class the last class and then my my exercises it's in the end of the posts okay it's a little tricky though because just to just so you realize um whenever this runs it's going to append another title every time that's not a problem here because it only runs once but just something to be aware of and yeah in the future we'll dig into the patterns that you need to to make it work properly but yeah nice work very nice let's see oh this one's beautiful this is awesome this is um well let's read what it says daily new cases of covet in italy from andrea this is awesome awesome nice yes xaxis uses scale time excellent and there's some interactivity here let's check it out toggle path whoa it turns the path on and off that's super nice oh my gosh beautiful let's take a look at the code real quick i see that there's different sizes in use as well ah so when the when the path is toggled it just changes the display attribute on the path brilliant very nice very nice yeah so it parses the date a pretty generic way of parsing the numbers and let's check out the rendering r nice so the radius here changes along with x and y beautiful way of doing it but i have to say that uh with radius here let me just fork this and suggest a tweak with radius um it's it's a good practice to have it so that the the area of the circle corresponds with the data values so one filled in pixel would correspond with one you know um unit of of the data and this method here doesn't accomplish that because it uses a linear scale but the area is a function of the square root so we can change this to scale square root sqrt which we can also get from d3 like that and then it really the range really should start at zero and the domain really should go from zero to the max of the data and yeah max we need to import from d3 so yeah now now that the domain starts at zero and the range starts at zero and we're using a square root scale now the area of the circles is actually proportionate to the value you see as it goes down it's gets down to nothing which is what you'd expect and the higher values are are you know bigger circles and i think well actually what is the what is the radius value terrapia intensiva nice yeah i don't know what it means but this is beautiful work beautiful work let's see what else we've got it means intensive treatment ah intensive treatment yeah interesting so the number of cases yeah it's it's an interesting uh pattern here i'm not quite sure how to what to make of it but as the case numbers were going up it was not that number was not that high but later on that number was higher oh someone's joining hello all right we got someone new hello uh how do you say mex maximiliano you want to introduce yourself a little bit um hello kuran how are you good good how are you yes i'm i'm max you can call me max it's okay um i'm from chile an interest i haven't been able to to see the course uh like it's online last the same day so yeah i i managed to do it today so it's great to be nice welcome welcome i'm glad you could join us so yeah we got a full house today a bunch of people sri ram adil anita and felipe is here so yeah as i dig in feel free to interrupt me and ask questions to clarify as we go awesome thanks awesome so yeah this week there was just a lot of activity in this forum like a lot of back and forth and i'm really happy to see that uh oh here's here's something that adil made dinosaur d3 scatter plot wow ideally you want to just talk briefly about this one uh sure yeah this was um based on a data set from the natural history museum in london they have about 300 plus dinosaurs in that data set and i just wanted to try uh playing with it a bit using this and so i uh thought try plotting the length of the dinosaur uh on the x on the x axis with the weight of the dinosaur on the y axis and i then also stole the the tip from felipe and yourself about implementing these little uh tooltips um and yeah so it was just really uh just just uh getting familiar with the data set and um it's a it's a bit patchy and the the data so i had to do a bit of extra processing because not all of the dinosaurs had a weight um and so from 300 plus dinosaurs i could only get about 49 i think which had both length and weight and then i uh yeah just just uh just try to create a label um early on that combined some interesting uh bits about each dinosaur nice that's beautiful beautiful stuff the uh the one in the corner i thought might have been a typo uh far corner but it turns out it's actually uh um the biggest land animal that's ever been discovered wow that's incredible 70 000 kilograms argentinosaurus 35 meters 70 000 kilograms you got to be kidding me yeah i looked on wikipedia apparently 70 000 was kind of average for that dinosaur yeah not that it's just sort of average wow um one really small thing that i would suggest um so when you have numbers like 70 000 i don't think we've touched upon number formatters but it's a really quick change that i would like to just do right now just to show how it could be done so the idea is to oh it looks like you used it here um i think that was already built into your fork i think i see oh maybe the axis does it automatically format but if you so one like the first thing i noticed was in the tool tip 70 000 kg um ideally would have a comma after the 70 and we can add it pretty easily by importing format from d3 and then making something called uh i'll call it comma format and we can just call format with a comma and format accepts this you know very specific string that you can do all sorts of things with but a very simple version of it is just to specify to to add a comma separator and then in your code that generates the label we can just pass that through that function like so so whatever the v the y value is we format it with a comma and voila there it is 70 comma thousand it's very nice oh that's that's really nice yeah thank you yeah nice great work very fascinating data set and i think that's it if you can just go a little bit up uh previous to this one yeah this one um oh yeah sorry yeah just just it's a little bit different uh it's it's the same data set but i use colors oh wow the name of the the class but um my goal here was to have all the information that we had in the data set of the flowers uh here so i put also the a few miles over the color means that the specimen yep right the species very nice the species yep and the elliptical radius is the sepal but that's my question because if i change the the order of the data the petal and the sepal the radius becomes very small so it almost vanished so how can i like normalize the radios right yeah that's a good question i mean let me dig in a little bit it it depends on how you use the scales like which scales you use for the radius so oh you had a question how can i easily change shapes according to the data um yeah this this questions like because i didn't want to use ellipses in the beginning right i thought okay i can use different marks but then i said okay i don't know how to do this so i will just use ellipses and then i can use the the radio different radius different right right i mean it's um you it's it's creative to use an ellipse that has you know different width and height for the different values here but it may be a bit hard to read and so you know maybe maybe the best we could do is just show three variables i mean color is color color is a great choice for the species because it represents a you know a column that has three distinct values a quantity yeah qualitative uh categorical attribute but when it comes to the radius um i would say again it might make sense to use circles and then set the radius using a square root scale so i'm going to set r to be r of r value of d is the way i would set it up and then r again could be a square root scale and then the domain can go from 0 to the max of r value and then the range would go from 0 to max radius and i think there's a lot of things that we don't have defined i can pull in this and this from d3 and then our value okay you've got our x value in our y value it may be sort of too tricky to show both of those at the same time and so we can just pick one of these and oh let's use this as max radius i'll set it to be i don't know 15. that should work maybe i missed something oh yeah data the max over the data of the r value yeah and so because the the data values are like they don't even get close to zero they're in centimeters and so it works pretty well with um with a square root scale to set the radius like this and we can set the max radius to maybe 10 so we don't get so much overlap but now radius is showing the the variability in sepal length and it doesn't it doesn't vary that much actually but yeah this is how i would suggest to do it is to use the square root scale where the domain and range both start at zero yeah i i see but um if i if i have a kind of data that i won't like uh make a normalization of of the range of the data how how can i do it how do you mean well i'm not sure what you mean um i mean imagine that i have a range of data but i want to restrict it from zero to one and have the average um i'm not quite understanding so let's take for example this data set yeah if you if you see like a petal with it's it's has 0.2 if i if i use this it's too small so i want to make it from a range from let's say one two two uh the size of the the radius then it would be a linear scale right yeah i mean you could do that that's totally you know something doable so i'm just going to comment out this one and put this other one back where like you said we we could make it so that the lowest value corresponds with some like min radius and the max value corresponds with some max radius and we could define min radius to be like i don't know five and this would work it would make it so that you have like it would make it so that it's guaranteed that the smallest circle has a radius of 5 and the biggest circle has a radius of max radius which is 10. so this is how you would do that i think this is what you were asking about yes yes that's that's right for for this case it doesn't make sense but it's just something that i was thinking about yeah i mean technically it's possible and and you could use a sk a linear scale and do it like this however the main problem with doing it this way is that the area of the circle does not correspond to the data values which could be problematic um it's it's not easy to read this in a sense i said that it's not it's not like um i don't know what the word what the best word is like like it's it's almost like not really honestly yes misleading yeah exactly exactly it can be misleading uh because you know you could pick up a min radius of one and it would make some of the dots really tiny but it would you know it's it doesn't really express the true uh like variability within that particular value of the data and so you know this is an area of debate within the community of people who make visualizations some people are very lacks on how they use radius and so you know it could be a linear scale it could be a square root scale could be a log scale you know whatever it takes to make a pretty picture but i i my sort of philosophy is on the opposite end of the spectrum where like i firmly believe that if you use size to encode some value from the data then you should make it so that the area of the circle corresponds exactly with the values from the data so if the value in the data is zero it should be a zero size circle that you can't even see you know and uh but that's sort of an edge case i've seen people use one as the min value so that you could at least see something on the screen but besides that you know i i would pretty pretty firmly stick to that philosophy that if you do use radius then the best thing to do is to use a square root scale because the area of a circle varies with the square root of the radius um what's that uh what's that that formula yeah area is pi r squared so this is this is why it makes sense to use a square root scale and so the radius of a circle um is calculated with respect to that same formula so that's why if you if you want to make it so that the area of the circle corresponds with the values from the data then you have to use a square root scale and make sure that the domain and the range both start at zero and so the domain could go from zero to the max value oh whoops i'm editing why my mistake yeah so it would be this version here of setting up the scale oh whoops that has to be defined above so it would be this version here and you know sometimes it doesn't turn out the way you expect yeah in this case it doesn't doesn't mean anything right yes exactly exactly and so this is you know part of the process of making data visualizations is just trying different things and seeing what works you know spreading the value across the screen from left to right between the min and the max like you know the xaxis or the yaxis of a scatter plot that's hugely effective at looking at you know things that fall in in like a small range but there's a lot of variability within that small range but radius isn't is not good for that sort of thing you know the because these values i mean look they value they vary between like i don't know two and four or something and so it's not really that great of a variation so it doesn't really it doesn't really pop out when you use radius but it's worth a try for sure all right cool cool so um yeah great work everybody very nice all right let's dig into this um idea of a reusable chart we will build a reusable chart based on the scatter plot we made last time on the way i'm going to refactor the code into modules and then the whole point of this reusable chart thing is to strictly decouple the specific and the generic meaning the stuff that's specific to the data set and the visualization that we're making and then the generic stuff that you know implements reusable logic for a specific type of visualization and we're going to use this tried and true pattern from mike bostock in 2012 can you imagine towards reusable charts is what it's called and i'm going to make it dynamically update it's going to dynamically change x and y and i want to talk a little bit about why i'm doing this today from the structure of the course perspective i i want to go in this direction so that we have a very solid basis for starting on different visualization types so rather than go wide in the beginning like we only made one visualization type so far a scatter plot so rather than you know making a bar chart and a line chart from there what i want to do is make a reusable chart version of the scatter plot and then use that as a basis for future episodes where we branch out into all sorts of different visualization types that way by the end of the course we'll have like a library of reusable chart components that are sort of usable off the shelf and we'll be working within this this pattern which is very useful to know and it's one of the trickiest aspects of d3 so let's dig in i'm going to start by forking this scatter plot that we made last time and i'll call it reusable d3 scatter plot right now it's just um this index.html single file sort of thing before we do anything i want to change some stuff around so that it it reflects like the structure of a javascript project that you might see so i'll split out this the styles into a separate file oh someone is joining hello hello someone has joined us uh larry how are you you wanna hi nice you wanna introduce yourself a little bit uh yeah uh my name is uh larry rancho i'm from the philippines nice i work with uh with the university as a faculty and i also work as a developer for data visualization for a company in australia so yeah i've been using your resources since i started working with d3 thank you so much i really appreciate that oh fantastic fantastic well i'm happy you could join um i think this is the most people that have ever been on the live call and this is great so we'll see how it goes um all right thank you welcome welcome okay so the first thing i'm going to do is split out the css into a different file um just because i personally prefer to have a bunch of small welldefined files that that way you know the complexity can scale over time so i'll call it styles.css and i'll take this css and move it into that file and then get rid of that style tag and then we can use a link tag and i can never remember the syntax so i'm just going to google it um yeah the html link tag there we go link rel equals stylesheet which is i guess the type of thing it is and it points to styles.css there we go i'm also going to create a package.json and this is going to have inside of it dependencies d3 at a specific version which i'm going to find from on package i'm just trying to figure out what's the latest version of d3 okay it's 6.7.0 so that's what i'll put there that way um we can get rid of this script tag here and then i'm going to put all of this javascript into a separate file called index.js and the way that vishub is set up it automatically loads in that file and it also automatically loads in our dependencies which includes d3 this is how most modernday javascript build systems work so like it mirrors the experience of webpack or rollup locally so now we're at sort of a a comfortable starting point where we can start to refactor this stuff at this point i would like to introduce the concept of towards reusable charts this is a great great piece from mikebossdog the author of d3 from 2012 and it's one of those unique things that has actually stood the test of time so rather than trying to invent my own pattern which i did for the 2018 version of this course and rather than use a library that has components built in like react does which i used for last year's version of the course this time i want to use the pure d3 way of making socalled components once you make a component with this pattern you can easily wrap it with whatever other framework you're using like vue or react or angular or whatever but this is a way of making components that is just purely dependent on d3 and nothing else so here's how it works it's going to be a function so as i go through i'm going to implement these ideas so i'll make a new file called scatterplot dot js this will be our scatterplot component i'll start by saying export const scatter plot equals a function and it's going to be used in much the same way as a d3 axis this towards reusable charts pattern is actually used or a variant of it you know is used within d3 itself where you have a constructor for something and then you have these chainable methods that you can add onto it so let's keep reading in this towards reusable charts one way of configuring the thing would be to pass arguments but um you know he mike boss dog here goes through the various ways of of configuring something and the pros and cons of each you know it's cumbersome for the caller to remember for example the order of arguments so maybe make it a config object but that's also cumbersome for the caller because the calling code must then manage both the chart function and the configuration object over time so rather than do it like that we can use this method chaining pattern that looks something like this you create the instance of the chart and then you call for example dot width passing in the width that that then returns the instance of the chart and then you can call dot height to set the height and that state of width and height is stored inside of that instance of the chart so let's work toward this in our code um in this scatterblock component we can have a thing that i'm going to call my which is going to be the instance of the chart and this name pays homage to the original article which also uses my so in this chart constructor it returns a function called my this is going to be a function and this is what will be returned from this constructor so let's create some of these accessors or getter setters this here is a kind of verbose way of of doing it but let me just walk through what this means my is a function and in javascript functions can have properties so we can set my.width to be this function that accepts as input a value which will be the new width or not and if it's if it's invoked with no arguments that's what this is checking here arguments.length so if there are no arguments then the function acts as a getter it returns the width which is stored in this variable here otherwise it sets width to be the passed in value and crucially it returns my this this returning of my is what enables method chaining to happen and height is just the same pattern but this is kind of verbose and when i do this sort of thing i like to look at the source code of d3 axis as a reference because it has much the same pattern to it but the implementation is is pretty um pretty concise and this is part of d3 itself so i think it's a good reference to use it's a it's a much smaller way of implementing these getter setter functions and since we'll have a bunch of these i would prefer this one the way it works is you know it it uses underscore for the name of the thing that gets passed in and it says okay return if there is an argument set the value of the thing internally comma axis an axis in our case is going to be my and this is a weird little javascript expression that you can do you can actually have an expression that is just two things separated by a comma and it implicitly returns the second thing and so in this case axis gets returned to enable the method chaining but if there if there's no argument then it just returns uh offset this internal variable here so i'm just gonna copy this template and use it over here and adapt it to to our code here so instead of axis it's going to be my instead of offset i'm going to start with width and height because width and height does need to be configured so my dot width equals a function where if a value is specified it just sets that value to be width right here and it returns my otherwise it will just return with but width is not defined in this scope yet so i need to say let with like this and we can't use const because we reassign to width here so that's why this needs to be let and this is the general pattern of these chainable getter setter functions now i i realized this might have been a lot are there any questions so far yeah the the plus that came before the underscore um was that to ensure that it was a number because i think that worked that this came up in the previous lesson exactly yep that's exactly what it is so in in d3 axis i think it was the offset which is expected to be a number and so yeah if you pass in a string like 50 you know it gets to be that value but if you if you preface it with this unary plus operator it parses the string into a number and so that um we actually could add it there this is this is called um defensive programming where you sort of expect the worst case you know you expect people might abuse the api and pass in a string where they're really supposed to pass in a number so that's why the plus is there it's just to guarantee that before it gets to this variable inside that it's the right type of thing um so hey why not let's let's leave it there it'll make our api more robust so we could pass in a string if you you know if we accidentally had a string that's our width and everything would work out just fine yeah and the um the my after the comma that that is i don't think i've seen that before um yeah yeah this one threw me for a loop the first time i saw it too let me unpack it a little bit yeah i'm glad you're asking because it's a lot to process so in javascript there is this um this construct that's not very widely used which is just parentheses and stuff separated by commas and when you execute that it returns the last thing um and those things in the middle could potentially have side effects so let's say let x equals zero we can have something like x equals five comma as a a piece of javascript and like it's yeah it's cryptic it's kind of weird but to understand what it does it just you know it just executes this and it returns the last thing and so this is a miniature version of what's happening in the code here it says width equals this thing and so now if we inspect the value of x it it's actually five because it was assigned here and this you know in all likelihood this violates some kind of like you know if you were to use eslint this might not pass eslint because it's too it's cryptic um but this is what mike bostock uses in d3 axis so it's good enough for me that's sort of how i look at it and i think these these parentheses inside may have been added by prettier if i run prettier it adds those parentheses i guess just for clarity um but yeah that's what's going on here if you just have parentheses with commas it executes all of those things and it returns the last entry in the list yep that makes sense thank you yeah um and another another thing that may not be obvious is that we can't use the arrow function here because with with the arrow function arguments is not defined um check this out if we make an arrow function that just logs out arguments arguments is a special keyword in javascript if we execute f we get arguments is not defined that's one of those little changes that was introduced with the fat arrow function but instead if we say f equals function you know the long form where we write out function then we can access arguments and it gets undefined but if we pass in like one two three as the arguments that's what arguments resolves to the is the arguments that you pass into the function so um we could you know instead check like is the value defined but then that would like break in the case of zero you know which so as a general reusable pattern for these getter setter things um this is the safest way to check if there were any arguments passed in or not and that's why we use this keyword function so so that we get arguments defined inside of here all right so we can move on and and we could do the same thing for height we can set height and return height and define height up here and now we can begin to move our visualization logic into this component here the way it's going to look is in our main we're going to load in the data and then all this logic is going to be go inside of this scatter plot function which we're calling my right here so i'm just going to paste it it's not going to work and this is how we can invoke this component we can say well first of all we need to import it import scatter plot from dot slash scatter plot and now we can use it in much the same way as we use a d3 axis we can say scatter plot dot width is width which we have here as our you know window.inner width and same thing for dot height we can call dot height which invokes our setter and we can pass in the local variable here height and then we can call this with our svg element and that's another aspect of this towards reusable charts pattern is that it accepts as input a d3 selection and it's going to put stuff inside of that selection so um similarly to axes like d3 axis it expects a d3 selection of a group element and then it puts the axis stuff inside of there our scatter plot can do the same you know it could accept maybe a whole svg element or or an svg group element either way could work and this is how you would invoke it you know pass in the selection to the chart which is equivalent to saying selection dot call my chart and we got into this last time with the axes and so the way that i would love to see it is svg.call scatterplot width and height like this so this is the the overall pattern i'm just going to keep going until it works another point of contention with this pattern is how to deal with the data i think we should deal with the data as just another thing that we can set you know so let's set dot data we pass in the data and then in our scatter plot implementation we can have another one of these local variables called data and then we can have another one of these accessors for data and in this case we we must not have this little plus because uh it's expected to be an array not not a string that's going to be coerced into a number so i'm going to get rid of that it's just going to set data internally to whatever was passed in here and it's it's going to remain broken for a while so i'm just going to keep going like this adding the things that we need for example x value y value margin and radius these are all you know configurable things so let's go ahead and add add these as as configurable things on our plot the way it would look to invoke this stuff is that we could say dot x value and pass in this function dot y value and pass in this function dot margin and pass in this margin and then dot radius passing in 5 like that and then when we use prettier it all formats nicely and this is what it looks like to configure our scatter plot now we need to go and implement all of those as you know local variables with getter setters so we've got what was it x value y value margin radius and then i'm just going to copy the same template four times change data to x value which is going to be a function change data to y value which is also going to be a function change data to margin which will be an object and then change data to radius which will be a number so we can actually bring back that little plus to be defensive about how we implement this okay now we have getter setters for x value y value margin and radius when i see the the more verbose version of that function um the one that you showed before a the function evaluates the absence of argument when with an exclamation mark right in this more concise version how is the absence of length is being evaluated in this in this version oh i see what you're asking yeah yeah let me explain it's it's a um oh there's all our errors it's a behavior of javascript where so let's say let's um bool equals true bool is going to be some boolean value and so if we have something like bull question mark yes or no it evaluates to yes if bool is false it evaluates to no and here's the tricky bit in javascript there's this notion of truthy things are truthy or falsey you know when they're coerced to booleans strings for example numbers when you pass them in when you treat them like booleans they're they're coerced to be truthy or falsy and so the way that that plays out in the case of arguments.length arguments.length is going to be a number because arguments is an array and so if arguments.length is 0 then the value of 0 will be put into this ternary operator and it turns out that 0 is falsy in javascript so that's why it would evaluate to no but if the length of arguments is let's say 1 that evaluates to something that is truthy in javascript it's kind of true it's it's like true if it's treated as a boolean and so that would evaluate to yes so that's why arguments.length works in this case like it does great okay it makes sense thanks nice nice happy to hear it and this is so great i'm so glad that that you're asking these questions because sometimes i don't know what to stop and explain and what what not to you know so thanks for your question all right let's keep going here um looking at this file it seems like everything is right we're pulling in the data we're defining our svg um one thing that we're not doing yet is in our scatter plot this function here needs to take as input a selection i can call it svg but honestly i would rather not because it could be an svg it could be a group element and so i'm just going to replace svg with selection so i just replaced all instances of svg with selection and now it should work we might be missing some imports yeah that that's one thing that's outstanding um oh i never changed this around to use the es6 import syntax this is something i should have done as soon as i moved it to index.js so we can import all this stuff that we need from d3 and in scatter plot dot js we're going to need scale linear extent axis left and axis bottom but not csv and not select and in index.js i don't think we're going to need any of that other stuff so we could just use csv and select over there so let's see is it working um oh we get a nice error unexpected token okay there's an unexpected token somewhere in index.js line 46. it's missing the column in line 45. um in line 40 no no you're chaining no you cannot have that it almost feels like it has like a like an older version of my file ah scale yeah it was some some sort of glitch now it says scale linear is not defined okay fair enough scale linear we should be getting that from d3 that's odd let me try console.log scale linear to see if it is even like loading to that point it is it's there so now what what what it's working the total um total 20 magic yeah total twilight zone moment with errors that resolve themselves yeah like magic all right sweet we've done it it works this is amazing so yeah just just to quickly review everything index.js has all the logic that we had from earlier where it loads in the data it sets up the svg but now our main function is a lot more concise it just invokes our scatter plot and configures it with all this stuff and here's something that's kind of mindblowing you can take this expression and and we can skip that local variable we could just pass that straight into data like that that works too yeah to me that's a mindblowing thing because a weight it's like this asynchronous control flow and it it has to like wait until that's done before it invokes this whole thing but that's the magic of um async await right there and i kind of prefer it like this it's it's more uniform all the configuration happens right here awesome awesome um yeah and in our scatter plot we have a bunch of local variables in this closure um a closure is this the scope of the variables inside of this function so when you invoke the scatter plot constructor it creates this closure and that's where these variables live and we use let here not const because they can change over time and then we've got this my function that gets invoked with a selection and this is where it sets up all the scales and does all the you know transformations right here and it references these variables that are defined above and it resolves to the things that we passed in to these these getter setter functions and we just use them as setters not getters and yeah all the logic is the same as same as it was before for the scatter plot and it works so with this template and one would be able to change the data set and the and the name of the variable the new variables if you change the data set and it will update like automatically now exactly yes that's right and and the key thing is that nothing at all inside scatterplot.js will need to change nothing at all if you change the data set that's what i meant earlier by separating the specific from the generic like this is a totally generic scatter plot implementation if you were to change the data set the only file you would need to change is index.js you can change the csv url change how the rows are parsed and change the configuration of the plot and all that yeah this is like the whole point of this reusable pattern is that all of this configuration happens outside of that reusable component so yeah you can just tweak it right here if you want it to be um you know pedal width you could just change it right here and boom it updates if if i want you to have like the specie as a different marker as a classification marker how could i add this to this code that's a great question and let me just clarify what you mean by marker i think you might mean like a different shape like these yep yes that's right that's right yeah you know this would be um this would be a great thing to try to do as an exercise this week and and i can outline how to do it i don't think we have time today to actually do it but i can outline yeah but but should i use like a case switch uh inside and where in the logic this uh switch case uh how algorithm would be or should i use something completely different well let me walk through how how you would how you might do it um the switch case meaning the logic that determines which shape it is is that what you mean yes yes so d3 dot symbol does that um with symbol.type yeah yeah this would be actually a great thing to work through but what you would do is create an instance of d3 symbol and then set up an ordinal scale that maps the the three values for the species to these symbols you know maybe three particular symbols and yeah it's exposed as like symbol circle symbol cross symbol diamond so it would be something like you know create an ordinal scale and then set the range to be d3 symbol circle d3 symbol cross d3 symbol diamond and that scale you can pass in a value from the species column and it will give you back out one of these one of these symbol types and then in the rendering logic of the scatter plot instead of rendering circles these would be paths and then when you set the the d attribute of the path you would want to change the type of the symbol and then invoke the symbol and that's how you could make a scatter plot with different shapes i don't know i kind of want to just go ahead and do it right now what do you think should i yes do it do it do it right yeah let's do it let's do it why not i'm gonna keep this as it is because it's nice and clean but i'm gonna fork this and say reusable d3 scatter plot with cymbals oh i love this it's gonna be so much fun okay now we need to import uh these things oh actually symbols check it out symbols is an array containing the set of builtin symbol types so we could just use that okay so i'm going to import symbols from d3 and then i'm going to build out something very similar to x and y i'm going to call it um symbol i guess symbol value and then i'll set up another one of these accessors for symbol value it's going to be a function and then in index.js this is where we would want to say okay our symbol value is the species i think it's d dot species um let's take a look yes yes it is it is nice yeah species nice okay so this is how we would invoke it and configure it now let's implement the rendering so instead of circles these would be paths select all path and instead of cx and cy oh yeah we would still need to position these oh how would we do that you know what we would want to do is um probably use group l yeah okay okay it's getting a little tricky here but let's just get a bunch of different shapes to show up and then we can um we can worry about positioning them looking for the okay there's a constructor so let's import symbol from d3 and then we're gonna need a symbol scale i'm gonna call it symbol scale because symbol the word the the name symbol is already taken because it's imported and this will be an ordinal scale we need to import that as well from d3 and the range this is the key thing the range is going to be symbols and the domain you know we don't actually need to set the domain uh because it sort of fills in automatically but just for completeness sake we could say data.map symbol value and that will just get all of the different species values and that will contain duplicates but that's okay because when you pass an array with duplicates to scale ordinal dot domain it automatically you know deduplicates it so we can just say just to inspect how that ended up symbol scale.domain let's just console.log that it should just give us those three values oh there's some problem oh i forgot a comma there we go see so that's correct satoshi versus color virginica and then if we take a look at the range it's a bunch of these d3 symbol implementations which are actually objects that have a draw function but we don't really strictly need to know what that is okay now we need to create a symbol generator simple generator is new symbol using the constructor from d3 and let me see um size defaults to 64. that should be fine i mean we could we could use it to change the size but let's just use the default for now see how it turns out and this is the thing we can say symbol dot type so this is what we need to do we need to make these paths and we don't need cy cx or r but we need d which is this domain specific language for svg paths that's what the symbol generator will output so we can call symbol generator so this will be a function that takes as input d and then we can call simple generator of symbol value of d those these are different right the the string one and the the other one they don't mean the same thing right they are totally distinct and different yeah it's confusing that they have the same name um d is the attribute of an svg path which has a very specific meaning so if you look at the documentation for svg paths it expects a d attribute that is going to be a string that is a it's an expression in a domain specific language that defines svg paths okay so yeah so this d is the attribute d and this d is it's called it's just one of the rows okay not a column but a row in it's it's an element in the data array or rather the marks array and you know oh my gosh i i sort of forgot that we have this transformation step so this is actually where we can compute d which makes it even more confusing in a way because we d dot d um but this is where it makes sense to pass in yeah to do the transformation to the marks to for clarity i'm going to call it path path d because it's there's too many d's okay and this should work i think but looks like broken let's see what's going on cannot access symbol generator before initialization okay yeah that makes sense i have to move it to be before we compute the marks okay i think it's sort of working see that we have some stuff in the but it's in the corner that's the problem and they're pretty tiny they're pretty tiny so i kind of want to make it bigger but the the main problem is they're all in one place they're all in the corner and i wonder can we have a transform if you just uh set attribute x and y it does not work i don't believe x and y works on paths i mean we can try it that would be ideal if it did but it doesn't okay we may be able to specify a transform on the path so we can translate by d dot x and d dot y but i don't know if that's going to work oh sorry i forgot to make it a function of d oh well look at that it's sort of worked but but they're all circles they're all circles that's indicative of a problem yeah yeah i forgot to um i forgot to set the type so here's what we need to do this is not right we need to we need to call simple generator dot type and then invoke it this is what we need to do uh looks like there's some problem maybe that's not quite right why this empty parenthesis in the end yeah i think we need to invoke it or you know maybe i should consult the documentation assemble that type yeah but it seems that you're invoking two times there again see this is what i want to do i want to i want to create an instance of d3 symbol we'll call it simple generator and then for each mark i want to say symbol generator dot type is oh oh i forgot to pass it through the scale that's so silly so symbol scale of symbol value of d okay so symbol value of d will give us the species value we need to pass that through the scale symbol scale in order to get at the particular symbol and remember symbol scale it just maps the the symbol the species to the various symbols that we imported from d3 so we need to call simplegenerator.type to set the type and then these empty parentheses on the end are to invoke the symbol generator as a function to generate this path string so now we can see that it's actually giving us different types of shapes yeah it's kind of tricky business it is but i think what we need to do to move these around um oh wait a minute it should be missing the clothes like this that's what it needs to be there we go there we go so it's translating by x and y correctly now yeah this is what you were trying to do isn't it yes very cool amazing amazing great great yeah that only take like 10 minutes amazing okay now i can make a scatter plot kuhn's face yeah you totally could yeah yeah you could even put different people's faces yeah yeah nice wow pretty satisfying um one thing that's just not quite linked up yet i just want to wrap this up nicely radius is here but it's not being used so what i want to do is use it so that we can configure the size of the symbols but radius doesn't make sense we can use size instead and the default was 164. so let me say size is 50 and then in in our scatter plot i'm just going to do a search and replace across the whole thing replacing radius with how do you do a search and replace in views oh i'm using i'm using vim mode and then once you enter vim mode you can use the vim command for the search and replace which is this okay so the the percent means global search and replace um s means search i guess it's it's one of those sort of obscure vim things um it works with uh some other command line tools too in linux but yeah this is how you trigger it you you hit colon to enter this little space which is you know derived from vim the editor and then radius is the thing you find size is the thing it gets replaced with g means global means um it means to replace every instance on a line and so this is just sort of the the incantation to make it happen so once i run that we have size and once we have size defined here then what we can do is we can pass it into our simple generator dot size size like that and it it could we could make it vary for each mark but for now i'm just going to make it all the same size and just to confirm that it's working i'm going to change the size here to like 500 okay and it gets bigger and yeah size it's the behavior of size with d3 symbols can be a little counterintuitive because it actually was really well thought out so that the area of each of the symbols is the same i'm pretty sure um and and when you change the size you're actually changing the area so it's not a linear scale in at play here it's it's more like a square root scale internally so if i change it to like a thousand that means there's going to be a thousand black pixels for each shape but if i change it to a hundred that means there's going to be a hundred filled in black pixels for each shape and while i'm talking about symbols i would be remiss to not show this really nice piece um oh that's not the one hang on hang on mike bostock has this really nice thing that illustrates that they're all the same area it'll be worth the wait there it is yeah this is a really nice little piece by mike bostock that he developed um looks like in 2017 i think when he was working on building out d3 shape and so notice here how the radius of each of these circles is different but it says here each of these shapes has a configurable area here 2 500 square pixels and so this is the this is the like deep thought that that you get for free when you use d3 symbol it turns out that each of these shapes has exactly the same number of filled in pixels and that's what gets configured when you call dot size all right well that's how we do it that's how we make a scatter plot with symbols within the confines of this reusable chart pattern and this is just playing out so well i mean i would much prefer to do things this way to have a reusable chart pattern in place and then branch out to all sorts of different visualization types rather than you know get it basically working in one huge file and fork that a a bunch of times so yeah thanks thanks everyone for for you know sticking with me through this refactoring effort and i hope it was useful thanks quran it was really insightful all this class nice happy to hear it happy to hear it i'd like to leave you all with some exercise options fork and modify what we made and maybe add axis labels one of the things that it's missing is the labels the text labels on the axes and i think we have now enough knowledge of d3 to be able to do that another option would be you know fork this scatter plot and change the data set to get that experience of just changing the index file and leaving leaving the scatter plot implementation as it is as a generic thing or fork this and change the chart type i mean you would probably need to change the data set too in order to do that but that would be a great exercise if you could fork this and maybe change it to be a line chart component or an area chart or a bar chart uh we're going to be doing that in subsequent episodes but if you you know feel inspired by all means take stab at it now um and if if you can't get it done you know at least take a stab at it share your work and maybe maybe you could use that as a jumping off point for a future episode so all of this is in the forum the viz hub forum i made one for episode nine uh where did it go i may have lost it or something but i'm going to make one now for episode nine uh so you can post there welcome everyone to episode 10 of get it right in black and white dynamic charts so first i'd like to start with some introductions um we have some we have a new person today welcome maxine uh you want to introduce yourself briefly yeah so i'm maxine or max and i worked a bit on um viz hub with curran and that was really fun because i think it's a great product and now i'm a data visualization engineer for mural and in my free time i just try to learn as much as i can about d3 nice i love mural by the way i've started using it it's a really neat tool and ideal is here hey adil hi karen hi maxine all right so let's start by reviewing the submissions from last time we go reusable charts so here's one from felipe hilarious um i think it's it's like the data of how many viz hub users there are but with my face in there so nice work felipe um yeah very cool very cool i want to take a just quick look at the code it's still the same scatter plot like template with the you know the methods and everything and it's just been modified internally to show these svg paths pretty cool all right what else have we got something from ej dasbach this is pretty neat i was actually pretty impressed with this one it's a nice actual visualization of covet 19 deaths over time and uh yeah great work adding the title adding the labels for the axes vaccination at 30 that's like some additional information pretty cool and great job linking to the source too in the viz itself very cool very cool and this easily could be converted to a line chart just by modifying some of the internals i think a line chart might make more sense for this particular data although it's kind of cool with the dots because you can see the gaps yeah good stuff all right yeah there was some confusion about last week i had to cancel but um all right i think that's it that's all there is so all right great to see some participation yeah before i dig into stuff for today i'm just wondering are there any questions from last week's content adil or maxine uh that was unclear not from my end i thought it was pretty clear nice yeah it was it was really very clear um i think returning the method chaining in particular was quite um it was it was just yeah really eyeopening really oh great i'm glad to hear it yeah yeah that the pattern still blows my mind because it's just javascript essentially but you can make these components and you're not tied to any particular framework like react or view or anything i was wondering when um doing the core dot call and all the method chaining that follows whether there is a uh whether there's a convention uh at all or um a preferred i guess it's a personal approach but um when uh when when doing this uh svg.call scatter plot um then all the methods that uh follow um are they is it recommended to do them in any particular order for example to do the data manipulation first followed by the dom anything that touches the dom or is it um is that is i just just it's up to the uh personal preference um yeah that's a great question does the order matter is there any particular patterns no i would say no it's it's like lego blocks you know you can assemble these things in any way that you want and as long as their relationships are correct between like the inputs and the outputs and um the order of like the the dependencies uh is correct like first you need to set up the svg then you need to call it but beyond that um no it doesn't really matter it's totally personal preference you know which order you call these things um and even i've seen it quite often where you you construct the the element like right here instead of even having a variable and like that works too it's totally personal preference yeah stylistic yeah that makes sense thank you all right we've got another guest um um hello there you want to um here let me just pull up the introduction slide are you here yes i'm here eric dosbach here can you hear me yes i can hear you great to meet you yeah nice to meet you um finally got this down figuring out between um youtube and um google meetup so yeah yeah it's kind of a kind of a quirky setup but it works yep so just a little about myself uh data scientists outside philadelphia trying to upskill uh my data visualization so i uh filed the first nine and uh now uh looking forward to participating live amazing amazing welcome and i i think i just um presented your work but yep but i would like to welcome you to present it yourself here we go let me find it sure here it is yep yeah so a little bit yeah so thank you yeah so the um so appreciate the opportunity the uh part of what i do and so i work in healthcare and and part of what i do is visualizations of these sorts of dynamics and so forth and so i really enjoyed the notion that we had a reusable scatter plot and i think the assignment was to switch out to another data set one and then to start adding axes and so forth and you know i found that framework uh really useful from which to do it i think probably one of the most challenging things i found was just the date scale and figuring that out and just you know trying to get that to line up right and i still haven't figured out how to manipulate uh the months and years and so forth quite right but um because bizhub is so nice and interactive it allowed me to just keep trial and erroring to get it to this point which is really helpful for uh learning nice that's fantastic yeah well so yeah and i guess the other part of the assignment sorry i lost you there you there i lost your sound there eric are you still there yeah i'm still here yeah oh you were saying oh yeah i was just saying so i think his sound is down yeah i lost your sound um oh you muted yourself can you hear me now yes okay uh yeah so i was just saying that i guess the other aspect of this was trying to um figure out how to make things item potent oh well yeah that's what i was going to get into today that's what i plan to really touch on today and so um so i'm starting to go back to some of your work and react um ah yep yeah i mean i would like to address some of your questions around the the day formatting and stuff because it's actually quite simple what you can do to make adjustments to the formatting um so it's a little bit off topic but i'll spend like five minutes on it just to to move that forward because if because you were struggling with that so when you oh i gotta fork this to make some edits to have a little more control over the the dates and the formatting there so we've got a scale time here and one thing you can do is control the number of ticks by saying dot ticks and you pass in like five or something that gives you oh it's not loading what happened oh sorry not on the scale not on the scale on the axis yeah that's something that trips me up so when we when we create the axis oh you did that already it takes six so if we up it till like 16 we get more ticks and so if you want to change the formatting is that what you wanted to do change that formatting yeah i was trying to figure out so implicitly there was it dropped the years in and then um the months and so forth and i was trying to figure out how how to actually manipulate those sorts of things totally totally so you can use this thing called d3 time format and this old example on blocks.org from zen armstrong 2017 is a tried and true way of of figuring out how to format dates with d3 so the way you use it is uh now it's called time format camel case it used to be time dot format but the api is pretty much the same so you can pass in this weird looking string like you know percent y dash percent m and each of these little codes has a specific meaning like this is the full year this is the the month as zero one but let's see what kind of ticks might be appropriate maybe just the month right like uh yep i think i actually found this site too nice i was i was um not getting it somewhere in there i had the month uh aspect oh nice and time format is even there i see yeah nice nice and so when you call axis bottom you can just call dot format oh okay or maybe it's i think it's actually tick format yeah and then you can just pass in a time format of this string which i can't remember i have to look at the example dollar sign b for like jan feb like that yeah then i'll use prettier to format the code and now we get huh that did not seem to do the trick actually yeah then you have to i think manipulate the text to well that should work that should work let me see if i get any errors no hmm so if i search for d3 axis tick format i hope i get the um the name right yeah axis.tick format i should do the trick i wonder if it was set somewhere else as well i think you're right i i i know i said it somewhere else i'm trying to remember where yeah cause i think if you if you set it on the axis or the scale it might like take precedence or something oh wait a minute there's two oh there there's two axes on the bottom yeah i forgot to clean that out this is when i was going to item potent oh nice let me see so that might be just not visible and then let's try putting it on this other one let's see we need one more parent yep there we go yep there got it boom yeah so that's how it works very nice very nice thank you yeah my pleasure thanks for doing the assignment i'm really happy to see this sort of uh engagement and participation yeah appreciate it thanks all right we've got a bunch more people coming let's see what's going on here we've got um maximiliano hello i think you came last time and we've got ken penn hey ken welcome and we've got uh maribel welcome maribel would anyone like to introduce themselves am i muted oh there you go i can hear you now this is weird um yeah no i'm still i'm new to to um to d3 and um still learning a lot so i have questions i shall listen okay cool well feel free to interrupt me as i go and and ask the questions along the way thank you hey kuran and everyone yes i was here last week how are you everything's fine thanks good good so great to be here again welcome and i see ken joined us ken you want to introduce yourself one a little bit uh there was a bit of an echo there so i was kind of holding back uh ken pan um currently who run on everyone yes i was here yeah you gotta close the youtube sorry it's a little a little funky of a setup good good but if you close out the youtube uh window shouldn't work there we go uh yeah so uh ken pan um have been using v3 for a bunch of years um currently um unemployed and um just uh doing this to stay in practice and get tuned up on uh incorporating d3 with uh modern javascript nice well i'm glad you could join us ken um ken and i go way back from the d3 meetups in san francisco many fond memories of attending events there meeting people learning things so great you should provide a link to your uh d3 parade entry yesterday that was quite good oh yeah yeah that was fun yeah i hope to actually build something like that as part of this series as we get further along um but yeah yeah it was fun that was fun i i think it was very instructive too and it might be for um for other people where you showed all the the wrong steps broken made art that she had oh yeah persisting to the right kind of like you just helped with the dates just now i thought that you know learning to use it instead of uh just getting frustrated and quit is uh you know how to persist through that is really important i think nice for sure and that's why i'm having this whole thing um you know live with q and a so because i know people get stuck and i want to teach people how to go from stuck to unstuck because that's the key thing yeah all right we've got some other folks joining us um hello felipe how are you and we've also got matt oliver hello matt welcome howdy uh thanks for doing this queren i'm in texas and i'm uh in my day job i'm a product manager and i love building with d3 and um love learning new stuff so happy to be here and um haven't been able to make the last few but um whenever there's time and whenever i can i wanna i wanna participate so thanks again nice this is amazing wow welcome well this is a full house we've got so many people so let me just dig into this what i wanted to do today was to make our chart that we made last time dynamic meaning what i was thinking of doing is cycling through x and y columns we saw last time that if you change the code to change the function that accesses the data for x then the meaning of the x column changes to be that column and what i want to really touch upon today is like if you want to make such a change interactively without having to go and change the code how do you do that that gets into this concept of idempotent rendering where you have this function that you invoke namely the scatter plot and what you want is that the scatter plot knows how it's supposed to look it has all this configuration set up and what you want to have happen is when you call that function again for the second time or the third time or the fourth time it should just sort of whip the dom into shape and and be like all right dom like you need to now change to represent the new setup the new configuration and with d3 there's all these foot guns um things that you can use to shoot yourself in the foot like dot append which doesn't really work well if you invoke the function again and again because it's going to append more and more elements again and again which is not what we want and there's a couple telltale signs of when this is happening that i think i'll get into today and then if there's time after we get the idempotent rendering down if there's time i would like to dig into animated transitions but we may not we may or may not get that far we'll see all right so here is the reusable scatter plot from last time after last week's session i i had like a realization that like oh no it's not actually done because it's not idem potent which which sort of defeats the whole purpose of making it reusable and this is a word that you don't usually come across unless you're in like computer science so i just wanted to read the definition of the word um i think i think the wikipedia article does it justice idempotence is the property of certain operations in mathematics and computer science whereby they can be applied multiple times without changing the results beyond the initial application so the the key here is that the result that you get after invoking the function should be exactly the same regardless of the state of affairs before you invoke that function and so that let's let's apply this to our to our code here all right so first of all we need to have some change be happening and so i propose that instead of just calling the scatter plot one time like we're doing here we can call it multiple times in a loop of sorts so let's say every every second or every two seconds we change the value that gets returned from this x value accessor function and that would have the effect of you know changing it from let's say petal width to sepal with boom see that change that's the kind of that's the change that i want to see without rerunning the program so how would we do that there is a a construct in javascript called set interval and what set interval does is it accepts a function as the first argument and as the second argument it accepts a number of milliseconds so if i put a thousand here that means every second it's going to run this function whatever it may be so let's just you know console.log here to make sure that this the setup is working then i'll open the console and we can see it's printing out here again and again and again every second and those little numbers mean like that's the number of times that the same thing was printed out again and again and we see it's incrementing every second but if we change this to 100 it's going to increment every um tenth of a second so we'll see the number going a lot faster so what i want to do here is let's say every two seconds we're going to change the meaning of x but how do we do that and and this comes back to your question from earlier a deal of like does the order that you do this stuff matter well the order depends on the use case like the scenario where you need to invoke this right now we have to do a little bit of refactoring because there's a bunch of stuff happening in one call but now the task at hand is to tease out what needs to happen once at the beginning versus what needs to happen every time we change x for example we're calling await csv here which will fetch the data and we don't want to fetch the data again every time we we set it up and also this scatter plot is being invoked i mean the constructor of the scatter plot is being invoked within this svg call so we have no way of accessing the instance of that plot to change its configuration so i'm going to have to move this around a little bit what i'm going to do is pull this out into a variable i guess i'll call it plot equals and then we invoke the scatter plot now we have we sort of have a handle on this thing so we can change it after the fact now we can do svg call plot right here to initialize it and we can use the same construct inside of our set interval console.log plot like that so now it is invoking our plot function every two seconds and we're already starting to see some of those telltale signs that that the thing is not item potent namely notice how around these labels it's not quite smooth it's a little um pixelated or like harsh when you look at it i mean and what's happening is the antialiasing is getting messed up because what it is there actually is a bunch of layers of the axis again and again and again and we can see this if we inspect the dom we can see if we zoom out to the right level there are multiple copies of both the x and y axis being added and if we scroll down to the bottom we can see that every two seconds there's another copy of both axes being added so this is the problem that we have to set out to fix and this is a very common type of bug when you're working with d3 because the way d3 is structured like you can get something working when you invoke it once and that's pretty straightforward you can use the dot append construct however when you when you have a situation where you need the thing to change over time you have to actually do different stuff you need to make sure that you use the general update pattern of d3 which handles the enter the update and the exit of all of these dom nodes and the problem here is that the parent group for the axes is being just appended over and over so that's what we need to change so let me go back to our scatter plot although you know let me let me just finish this this thought first what we want to do is change the value of x and we're ready to do that so let's do that first let's change x and then let's go and make our our reusable component idempotent we can just say plot dot x value and instead of d dot petal width we're going to want to cycle through so we can say d at column and we can say column equals petal width to start and how do we cycle through the various columns i propose we have something called columns which is going to be an array and petal width will be one of the options another of the options is sepal width and then we can copy those options and add height or no length what was it let me figure out what that was actually from the data yeah it does length oh yeah length length it was indeed so we can change width to length now we've got these options to choose from for our columns and what we want to do is say column is columns at index let's say i and i is something that i would like to increment every two seconds but once it gets to the top we should it should like cycle back it should circle back so instead of using const i'm going to define this outside of set interval and use let i'll initialize i to 0 and say i plus plus and then console.log i let's see what this does so far it says one two three four five and this is where it's getting buggy because um once it gets beyond three it should go back to zero and the way that we can do this is i equals i plus one modulo columns dot length 1 and just for well let's see if it runs zero zero oh it's not working just for some context if you haven't seen the modulo operator four modulo two is zero but five modulo two is one a modular 2 is is a way that you can check if it's even or odd and so what we want to do is make i go from zero to like three and then go back to zero so you know what we could do actually is just we could simply say i plus plus let it increment and then let's console.log i modulo column stat length minus one you know it could have been a parenthesis issue let's try like this so we see one two zero one two zero but we have four options um maybe it's just a not off by one kind of a thing let's just modulo by columns.length i think this should give us the right thing now one two three zero all right so we just need to use this when we access from columns like this so we can just sort of um compress this like so and i kind of want it to start at zero so let me just increment i after we do this this stuff here all right now it should be behaving as we expect so this is a dynamic scatter plot um the circles are idempotent they're behaving correctly so what it's doing is it's cycling through each of these for x and notice that at a certain point we see a diagonal that's that's when x and y are the same column here's the problem now the axes are getting messed up see the xaxis it's just a bunch of copies now let's address that problem of multiple axes uh but at this point are there any questions about what i've done so far um i i i wanted to ask how this concept of item potent relates with the the update pattern in the tree because i i i don't know if it's related but but it's like the same principle i guess because the points are dynamically changing but i haven't seen this concept before when we see the update pattern the enter update exit pattern so i'm not sure if how they are related right right and by the way people don't really talk about it they don't use this term very often and the term idimpotent rendering i think was used back in the days of jquery when it became like a thing um so maybe that's why like it's not a commonly used term it's like a sort of a nerdy computer science term but i think it's the right term to apply here but the relationship between the concept of idempotent rendering and d3's general update pattern is it's the same thing d3's general update pattern makes the rendering item potent and so um let's let's take a look at our code for the circles what this does is it uses the new dot join api which does a bunch of stuff internally it creates an enter selection and an update selection and it merges them together and it returns the resulting selection and then we can set the circle the the attributes on the resulting thing so that is an idempotent rendering pattern let me show you a variant of this that is not idempotent if we call dot enter dot append circle and then we set the attributes on those circles what we're going to get is a bunch of overlapping circles oh no i'm that's not right that's not right because it is actually only so when it's when it says select all circle it's picking up the circles that it rendered last time but this is not idempotent because it's not updating it's not updating it's not working right so to make it item potent we use enter dot append circle um well we could use the dot merge thing check it out um circles dot merge um sorry this should be circles which is the update selection and then we merge it with the enter selection like this this should be the idepotent version of it see now it's updating properly and this is like super confusing it's sort of a deprecated api to use merge like this it's very low level it helps you out but what this is doing is exactly the same thing as this simplified api where you just call dot join and it and join also handles the exit case so if there were fewer circles oops i must have deleted something data we need yeah so so this this does item important rendering does that answer your question yes yes definitely that now i i get a how that concept like is part of the of the of all this structure yeah nice and so the problem is are our axes are not idempotent i mean the axis itself is coded in such a way that it does correctly do item potent rendering however we are appending a group element on the outside which is the part of this stuff that's not item potent it just appends a new group element on each render which is not right this is the special case of the general update pattern that deals with just a single element and so it's sort of a non it's not the most common form that you see usually we call data and we pass an array of things that actually represents data however if you want to use d3 selections for just a single element we need to just make up some data that has a single element so let's do it selection dot select all um we could try dot g oh we could try g here just to select all group elements however i could tell you right now this is not going to fly because we have multiple group elements one for each axis and we need to disambiguate between them so at this point before i go any further i'm going to i'm going to use a class to disambiguate these select alt dot i'll call it y axis y dash axis because this it's the y axis dot data and this is where we need to pass in an array that has a single element so i could just put the number one or whatever i'm going to use null because i've seen this around in in the d3 source code actually for i think d3 axis uses this so it's it's an array of data that doesn't really have data it's just null it's but the the thing is it's a single element so it doesn't really matter what that element is it just matters that it's an array that has a single element because when you use the dot join construct like i think i could say join g dot attr i have to give it the class of yaxis so that it picks up the one that was added previously this i believe should work and i think we could say g dot y axis just to make it really clear i think that's a valid selector means it means that the the tag name is g and the class is y axis so the yaxis actually looks good on the side see it's not getting that thick quality to it which indicates to me that it's just rendering once um so what happens is every time the function gets executed it's taking a look at what was there from the last time and just whipping it into shape to match what it should be this time and because we're not changing y it doesn't change uh which is the right thing so now let's apply the same pattern to x this is where we'll actually see it um we'll see it work more clearly because the axis won't be totally messed up so i'm just going to copy paste that whole pattern and then change yaxis to xaxis and let's see let's see if that does the trick yeah see that now it's correct yep the axis is not getting all messed up so just to run through what's happening again here we're using this dot join api of d3 which is the modern day you know general update pattern of d3 that handles enter update and exit and we're passing it a data set that just has a single thing a single element which is null but it could be anything doesn't it really doesn't matter what it is but just the fact that there's one of them is what matters because the the internals of dot join will take that data and say okay i just need to make a single group element so if there's already a group element there that matches this selection then i'm going to use it i'm going to use the old one that was there before i'm not going to make a new one and so that's the beauty of this the first time it runs it will create an a brand new a mint brand new group element but the second time the third time the fourth time it's just going to use the grip element that was there before and then it's going to call this axis function which itself implements idempotent rendering properly internally so that makes the whole thing item potent and and working correctly so this is it this is this is the the complete version of the reusable chart now you can use this you know swap out things in in real time and it'll work correctly any questions great i think it's great so so if i understand correctly the with the null like a array that you create it's like a a a unique id for the for the group and that way it recognizes as the same thing when it updates well it's not really an id it's not actually used at all the thing that's serving as an id to differentiate between the different groups is actually the class so let me show you what happens if we get rid of this class if we just say select all g and then select all g for both of these axes let's see what happens see it's only getting one of them the y axis is not showing up at all and so in terms of the concept of unique id to disambiguate between them the class is really what plays that role the data that array of null is just to signify that there's one thing that we want not two not zero but there's just one thing that's the significance of the of that right right right thank you and just to deconstruct why there's no um yaxis here when this code runs it builds up the yaxis first because select all g the first time there's no group element it'll create one and then after that runs the code that is for the xaxis says select all g boom it's going to select that group element that was used for the yaxis that's what happens that's what happens when you don't use classes it selects whatever group element is there on the page like as a child of the selection and so that's why um it's clobbering the yaxis and it's it's using the same group element and it's building it into the xaxis so let's bring back our our selection that uses class yeah so now it says select all elements that have the class y axis if it's the first time there's going to be none so it's going to make a new one give it the class but if it's the second time around it's going to find the one that that this code put there before and use it yeah okay so i'm going to leave this reusable scatter plot here as it is because now i feel like it's finished i'm going to fork this because the animated transitions do add quite a bit of complexity so i'll call it animated reusable d3 scatter plot all right in our scatter plot i'm thinking we can focus on the circles as the thing to add animation to and maybe we could potentially animate the axes as well d3 axes are implemented in such a way that you can animate them which is really cool but first let's get grounded in some documentation or examples so i'm going to search for d3 transitions yeah d3 transition here it is looking for some example code yeah so with transitions like there's a million and one ways you can invoke them um you could even just say dot transition actually let me do that first to see what happens because but i don't think it's the right behavior but just just as an experiment if we just put dot transition right here what happens okay it worked now they're animating see that so that's the simplest way of invoking d3 transitions we just add dot transition and it creates this thing called a d3 transition that kind of looks and feels like a d3 selection it so when you call dot transition it creates a new thing which is an instance of a transition and returns it and so these dot attrs they're being invoked on the transition not the original selection and you can also say dot duration like this and pass in a number of milliseconds like let's say two thousand now the transitions are slower two seconds and you can really see the stuff dance around pretty neat however this is sort of the the lazy approach that ends up in semibuggy stuff because watch this uh when this program runs notice how the circles sort of fly in from the corner zoom this is on to me this i mean it's maybe acceptable but like to me this is not right like this is this is kind of buggy you know so i think we need to do the more proper implementation of of um of transitions which we can get into now from the docs so the thing to do really is to create a transition object that you can use in multiple places because what what this does if you call dot transition it creates a new transition and if we wanted to say transition the axis too it would it would like create a new different transition that has like slightly different timing or something like that and so like if you want everything to be synchronized the best way to do it is to create an instance of d3.transition so that's what i'm going to do now i'll just create it right above our circles i'll use const instead of var and instead of d3 dot transition i will import transition from d3 at the top and i'll get rid of this stuff down here ease linear um oh yeah you can specify all sorts of easing functions which is like the the different way that they animate but i think we can just we can just use the defaults for now and i'll we'll keep the duration of two seconds so we can see it clearly now let me find some more examples so we can call dot transition on a selection and pass in the transition that we created so this is the same behavior as before but what i want to focus on now is when the the plot gets initialized for the first time i want to have like some nuanced animated transitions where here's what i want to have happen the circles should appear in their correct locations but they should grow from nothing to something so i would like to to animate the radius of it right i think that that feels to me like the proper way to start off a scatter plot that has animations is to you know do something sensible rather than like the default behavior which is they fly in from the upper left corner which is sort of nonsensical i mean it makes sense in a way technically but like i wouldn't want to wouldn't want to see that you know so for this we have to we have to use dot join in in a different way let me see if i can find i know there's a good example of this somewhere let me see if i can just find it i know it's probably here in observable here it is here it is yeah this is the canonical example by mike bostock author of d3 where it's the general update pattern with animated transitions and these animated transitions are totally um controlled like like the code controls exactly all the cases of of these animations and so when when things enter they're green they fall from the sky when they're exit they transition down they become red and transition down and when they update they're black here and they just move from where they were to where they are or where they should be this is the example i would like to follow so here is here's here's what it looks like to do this properly we call dot join and instead of just passing a string the selector we pass in three functions the first function is what to do on enter the second function is what to do on update meaning when there's something there from the last time around and we just need to update it and what to do on exit when something disappears exit we don't need to handle in our case because we don't have a case where things exit i mean that would be the case where like uh when we invoke the scatter plot we change the data so that there's one fewer uh entry so this case we might not touch upon but we want to touch upon these two for sure let me i'm just going to copy all this stuff because it serves as a decent template for reference uh kern just a question uh you went to uh you went to observable rather than the documentation right and uh is that is that the way to look stuff up now i mean go to observable first rather than the documentation well here's the thing like the documentation of d3 and observable are becoming quite um interconnected so for for example if we look at um d3 selection i often do start with the docs in the readme of the github stuff here but the thing is all of this stuff links into observable well notebooks okay yeah and so joining data for example see the selection.join notebook so this stuff in observable is essentially an extension of the d3 documentation okay i'm just planning on spending a lot of time in the documentation to learn how to do stuff in version six yep yeah the documentation is great but i don't think it contains a complete example i mean this is this is pretty close so this is a place we could start as well but i don't think it contains a full example with the animated transitions so for that we do need to go into observable but yeah my my my general approach is to use the docs as much as i can and then if there's something that i can't find in the docs then i'll click through the observable links and import it essentially port the stuff to vanilla javascript by copy pasting little chunks yep thank you yeah my pleasure thanks for the question here it is so yeah i mean if i had my druthers this code snippet should be in the readme but it's not because this deals with how transitions and selections intermingle and work together so instead of using this approach i'm going to delete what we had earlier for the dot join and then i'll paste all this crazy looking stuff but you know really what i want to do is i want to use this as a reference and then code it ourselves so i'll leave that it out current uh one practical question how what's the shortcut for multiple commenting out in bishop oh it's well if you're not in vim mode it's control slash control slash yeah and i've been meaning to add something like a list of keyboard shortcuts that would be useful wouldn't it right here in the editor yes it's it's it's on the todo list yeah but um yeah control slash comments the line multiple lines super useful thank you the general structure that we need here is a function that takes as input the enter selection and does something with it a function that takes as input the update selection and does something with it and lastly a function that takes as input the exit selection and does something with it enter what we're going to generally do is append something in this case we are appending a circle and on update is where we want to you know change the position and on exit is where we generally want to remove the stuff um i'm just going to keep it there as a good practice but we don't have like a test harness that tests that case yet but anyway what i think we should do on enter is initialize the circles to where they should be so that's where i'm going to take these lines move them up to here so we are pending a circle a brand new circle the first time it gets invoked and we're setting x and y and what we're left with is now circles that don't move around because we haven't addressed the update selection so let's do the same thing on update i'm just going to paste that logic there so we're setting cx and cy on update as well now we're seeing that the circles change like they should okay so now what i want to do is adopt the transitions the way that we can do this well let's think about first what we want to happen on the enter case when the circles get created what i want to do is transition them from being zero radius to having the radius that they're going to have for the rest of their lives and that is r set to radius here i'm going to move this logic over to here but what i really want to do is initialize r to be zero and that's what we can do here i'll just set r to be zero like this and i wanna i wanna have a transition to the next radius however there are some subtle things to consider here namely this function needs to return the enter selection that's just how this api works it expects the enter selection to be returned so that's why we can't just call dot transition like this because it's going to sort of mess things up internally but then the the last line should be the the radius right i cannot move the radius up and do the transition right or the transition also return the uh returns the enter selection yeah it can be a little confusing so i'm just going to comment out that for now and this is where we need to look to this pattern from from the example from observable it uses dot call and the reason why it uses dot call is that what gets returned from dot call is the enter selection and the enter selection needs to be returned from this function not the transition but this is how we can create a transition derived from the enter selection and then use it to actually do our animations and it takes as input the enter selection and it derives a transition from that and the existence of this this transition is just strictly inside of this callback it doesn't get returned from this this outer function what gets returned is the enter selection because dot call returns the selection that it was called on so this is why you need to use dot call to get at what the transition should do and in here is where we can say dot attr radius r and radius and all this stuff and i might have like a mismatched paren or something i'm missing comma there it is yeah so check this out if i run this i'm going to make a code change to trigger a run make it full screen so you can see this is the transition that we want yeah i'll run that again so you can see it starts out as little dots that don't really exist to they grow into their final form and actually just to make it super visible let me set the duration to like five seconds check this out they're gonna start at nothing get bigger and bigger and bigger and now they're big and if you want to make it smaller after shows then it's you're going to exit right yes okay yeah we could apply the same pattern on exit um yeah exit is um tricky i think i'll leave that to another day um sure because we don't really have a use case for it at the moment but yes you can control what happens on exit and in the example is good like make it turn brown and then have it transition to go down and then remove it and the trick with exit and transitions is that you need to call dot remove on the transition because what we want to do is have it wait for the transition to finish and then remove the dom element but anyway let's finish the desired update transition again this this should return the update selection so we need to use the same pattern of using dot call update.call update and then update.transition passing in the same transition object that we created earlier and this is where we want to set the cx and cy attributes so now when this runs it should slowly move there we go yeah so now we're having with this kind of a funny a funny effect that's going on because the transition is longer than the time that we're giving it to finish the transition is five seconds but we're changing stuff every two seconds so let me just align on those values two seconds okay this is correct all right and so let's i just want to put a little icing on the cake here um there is a magical thing that you can do with transitions i'm going to make it one second and then do this magical trick which is we can set a dot delay on the transition to be a function that takes as input one row and also the index and we can return the index times let's say 10 or 100 so you can see what the effect of this is oh you can't really see it i don't know if it actually worked what this should do is make it so that there's a sort of a staggering effect where not all the dots move at the same time i thought this would work gohan um i was doing a few tests another day and i noticed that sometimes the index indexer and the d gets swapped depends of oh really yes i'm not sure why that happened i can check later and let you know but try try to change the ind okay somehow i i i have my doubts but i'll try it yeah nope nope okay um yeah i don't know maybe maybe we need to call this not here but over here after we call dot transition what if we pass it in over there yeah now it's working this is very cool very cool although it's it's set way too high but if if i set it to like a hundred we can see well let's see what happens yeah they all kind of move in a staggered manner let me tweak things a little bit more i'm going to have just a slightly larger delay so instead of two seconds let's make it three seconds and then in the delay let's set this delay to i don't know 50 50 milliseconds to get the desired effect that's still too high let's say like 10 10 milliseconds we can get a really beautiful sort of eyepopping effect there it is that's the effect i was going for so the whole thing finishes between uh the intervals where it changes but it's this beautiful beautiful effect that i love with d3 transitions and setting the delay like this it's got this like voom like this this really almost like a choreographed effect to it it's really cool very cool nice thank you yeah this is fun so yeah i try to you know spice it up with client work like if you add this to work that you do for other people they're gonna just freak out and love it so it's nice icing on the cake that you can add all right and so lastly i think we can we can transition on the axes as well so let me get rid of this reference code and just to wrap this up i'm sort of winging it here but if i just say dot transition t before we call the axis all right let me do it on the x so we can see if it works let's see if that works yeah it works boom see that brilliant yeah the way the d3 access is implemented it does it handles transitions correctly which i just it's just fine so i find it so beautiful you can pass in transition and it updates the axis in an animated fashion brilliant all right i think our animation work is complete any uh any questions or thoughts about this um yeah it's actually it's another task the last class uh exercise was to put the title in the axis i did it but i'm not sure i did the right way so i would like to see how you do it sure um because in this case you have to update also the the title right exactly or is this the exercise for this class actually it is actually it is this is the perfect exercise okay and the timing is perfect we're getting to the end of the time here add axis labels that are idempotent yeah yes this is a very good exercise that i will leave you all to do and just as a as a little hint you're going to have to use that dot data and pass in an array of of no of one item null or whatever and um so instead of just selection dot append text it would be selection dot select all text dot y axis label you're gonna have to use a class to disambiguate between the two things just like we did with the axes and yeah essentially apply the same pattern that we did for the group element that contains our our axes for the text labels and i think this is a great exercise because it it it actually paves the way to a lot of other things like if you try to add labels to this you're going to quickly find that we don't have enough information we need to add another another um accessor to this component which is going to be the x label we're going to have to pass that in too because this passes in a function and from this function we can't tell what the name is of the column so we're going to have to add one additional thing to get it to work so that's why i think it's a good exercise yeah um current yeah i was just curious about the arguments that are passed to join and i noticed that there are a couple of lines that are duplicated namely the cx and cy and i uh i recall that you you've brought up merge in the past to help uh remove that duplication and i was just wondering whether there was something equivalent uh for inside the uh yeah before for inside the arguments um yeah i'm i'm thrilled that you brought this up because duplicated logic is is one of those things that i just hate i just hate to see it and so i would like to address it i'd say it's a great call to address that we've got duplicated logic for cx and cy and it's not so bad i mean it's only two lines that are pretty simple but still it's duplicated logic and you may find yourself with complex logic you know ten lines of complicated stuff that you copy paste between these two places which is not ideal and so the problem is this logic really needs to be executed at these two different places um in the past like if you if we don't have animated transitions you know like we did before i started adding this stuff it could just go once at the at the end because it when you put it here it acts on the merged enter and update selections but if you do it like that you lose the animated transitions like it's not it's not actually correct anymore so let me go back to the way it was is it possible to me like create a function an external function that updates cx and cy then i call this function in the enter and inside the update is that possible yes exactly you hit the nail on the head that's exactly what i was going to do cool and so let's do it i'll call it um what's it going to do it's going to be positioning the circles so i'm just going to call it position circles and this is going to take as input a selection that contains the circles so i'll just i'll call it circles we could call it anything but it'll take that as input and what it will do is just gonna have this side effect of calling dot httr on that selection and it could actually return circles but doesn't really need to um and then to invoke this doesn't need because uh later you will change the r attribute right so it should return the circle or not well it all depends on how we invoke it um if we use dot call then it does not matter what this function returns because dot call is going to return the selection of the circles anyway so it really doesn't matter what this function returns and this is how we can do it we can just say dot call position circles and then in the other place where we have the same logic we can put the same thing dot call position circles like that and it seems to work and on the creation step yeah it seems to work okay yep so yes indeed this is how you can do it this is how you can reduce the duplicated logic across these two places and i think this is the best way to do it because this this logic needs to be executed in both of these places it needs to be the circles need to be positioned before the radius transition happens and they also need to be positioned every time things update and so yeah refactoring it into a common function that's invoked in these two places i think is a good move yeah that's perfect thank you very much for for walking through that nice yeah my pleasure and i'm glad you caught that because um when i was planning for this episode that i had this in mind like oh yeah at the end i'm gonna refactor it but i totally forgot so thank you for reminding me also uh do you have a you i think you mentioned in a previous lesson request animation frame um yeah versus uh set into a interval do you have a preference for one over the other is is one more um does one have benefits of the other well they have different properties request animation frame is actually used internally by d3 transitions and when you invoke request animation frame and pass a callback that callback will be invoked as soon as the next render cycle happens and it depends on your system setup for example if your if your monitor is 60 frames a second which is most common or 30 frames a second which might happen if you have like a 4k monitor on a computer that's not very powerful and regardless of of your actual hardware request animation frame invokes that function on the next animation frame it's called an anime they call it an animation frame that means when the display updates so let's assume you have a like a standard setup where your refresh rate on your monitor is 60 frames a second that means and that's that's standard like when you move your mouse around on the screen if if you just sit there and up move your mouse around you're going to see that it's not a continuous thing like it actually just appears at different places really fast and every time it appears that's 1 60 of a second which is approximately 16 milliseconds and so the benefit of using request animation frame for things like animation is that it it synchronizes correctly with your display whereas if you use request if you use set interval for animation like if you if you were to use set interval and past 16 milliseconds it would give you it would call your function roughly every animation frame but it might call it twice between animation frames sometimes or it might call it once across two animation frames which would result in a slight almost undetectable visual glitch in the animation and so if you're if you're doing animations then request animation frame is the best thing to do hands down uh and and that's why d3 transitions use it internally for a time it wasn't supported by all browsers and so for a couple years there you had to you had to implement a fallback that used um set timeout or set yeah set timeout is the is the like a variant of set interval that just calls the function once um so i remember back in the day i had to do like detection like if request animation frame is there then use it otherwise use set timeout and pass 16 milliseconds or whatever 1000 divided by 60 is and so that would be an approximation however if you have other use cases that are not animation like what we have here um like where you you want to wait for one second or three seconds then set interval is the thing to use actually um yeah set interval is more appropriate when you have longer time scales that you're considering but if you're doing animation then request animation frame is is the thing to use yeah that makes total sense thank you nice my other question yeah um so go back to scatterplot.jf um and so uh where you or i guess the where did you have the abstraction out for position circles okay yeah there um the question i had in terms of and just sort of style and uh readability i really like the notion of putting position circles there it just reflects what's actually happening it from a uh sort of a coding style would someone do the same thing with the dot call enter that comes a little later right after it um it just seems at least to me a little strange but that's probably how javascript works and so forth but could you actually name that as a function that is you know uh more reflective of what's happening just like you did position circles does that make sense yeah um i'm gonna select some text do you mean this block here yeah yeah that dot call enter um or this inner one here yeah yeah that inner one yeah just could you name that uh create a function just like you did call position circles in a way that um it reflects what it's actually doing there in other words making the um uh radius bigger or transitioning yeah grow radius exactly for sure yeah i mean it's just a function okay so for sure i mean um you can you can do all sorts of refactorings like this and organize the code and i like doing things like this because in a way it's documentation like variable name is in a sense documentation for what it does exactly that's where i was going with this yeah um okay for sure and so i love you know when i can i like to structure code like almost like a book exactly where you learn about okay this grow radius what is that it's some cryptic code that sets the radius but it says grow so that therefore it must be like growing from zero to something and so for sure i would encourage doing this sort of uh slight refactoring to make the code more readable and clear yeah right and it's thank you you're welcome you're welcome but yeah it's totally a stylistic thing like i personally probably wouldn't do that just because it's setting the radius on the line before uh but how you know it's totally personal preference like this may be more readable for somebody coming at this code for the first time for sure so yeah up to you okay thanks that helps yeah my pleasure but what's going on that the the radios oh the radius just right it's in in the intersects just begin and yeah okay i got it it's just in there it's not when it moves okay see if we if we wanted to take this to the extreme we could say initialize radius and pair these together and so instead of saying right here attr zero we could say dot call initialize radius and that's what this would do right here and this actually implicitly returns it which we don't need to do so that's why i'm going to add these curly braces and actually same same with this we don't need to return it so this is like the final form if you were if you were to want to you know factor out things and name them this works as well so it's super clear now that like okay first we're going to position the circles then we're going to initialize the radius and if you read it you realize it's initialized to zero and then we're going to grow the radius from zero to something else using a transition so yeah yeah this code it's definitely more organized more readable in a certain sense but it's also more code so it's always a balance between how verbose and clear do you want to be versus how minimal and concise and arguably cryptic you want to be yeah there's tradeoffs for sure all right maybe i'll take one more if there is another and then we'll call it wrap it up for the day anyway well karen i have one that's uh on not on this chart but on a forced layout so i don't know if anybody has any other questions on this you know i'll be i'll be working on forced layout in the future so like my inclination is to is to hold off on that until we're dealing with it uh but i'm happy happy to feel the question about it actually it's it's mostly i see some places where um you the links are set up as an empty array and then how do you get that data to do that so that instead of me having to do source target for you know a thousand different data points i just do the auto magic javascript and it does it for me yeah there's some there's some magic stuff that happens with d3 force to be sure um i need the force to be with me on this yeah i get it yeah yeah well yeah when you and i think when you call for i don't remember exactly but when you pass data in there's some kind of magic initialization that happens um but i i will be doing forced layouts in in future episodes so maybe hold that idea how long i'm not sure i'm not sure i haven't planned out the full series but i think from here on out i'm debating to go deeper into this to add menus to this so you can interactively select so that's one direction to go another direction to go would be to do a bunch of things where we start from scratch and just implement different visualization techniques like a bar chart a line chart an area chart a pie chart from scratch with just enter and not this general update pattern stuff um so those are some of the things that i'm going to be doing in the future um any any preferences for for which direction to take it i i would say i would say uh menus are a really good idea if you're uh designing this for a user having them have the power of choice over what what shows on the screen is powerful exactly that's what i was thinking too so like now that we've got it to this point it's a cool technical demonstration but you know we're gonna have to add the axis labels and if you were to develop this for an actual use case of someone needing to visualize the data the logical next step would be to make it so that you can choose like you said which yes i will also appreciate that functionality you know yeah right on right on i like it sweet yeah i agree with ken and everyone yeah sweet yeah yeah let's do it so probably next week i'll add menus to this one and uh yeah that'll uncover some complexities along the way all right i think i'll wrap it up for today so thanks everyone for joining me so much thanks karen thank you thank you yeah this was a lot of fun this was a lot of fun with a lot of people here i love it so um yeah i hope you all can join next week as well and beyond so have a good weekend take care all right bye take care thanks bye bye welcome everyone to episode 11 of get it right in black and white charts with menus we've got a full house today we've got felipe adil nita and eric dasbach i think i'm saying that right is that right das bach great so yeah let's start by reviewing the submissions from last week this forum from last week all right so the exercise was add labels to this reusable scatter plot let's see what folks did wow this is pretty nice the labels are animated very cool nice work it's kind of surprising the arrow that's a good question let's check it out i guess it would be in here somewhere it's an actual character see that yeah yeah pretty neat there's actually a lot of um surprising characters that you can use i think it's from unicode but there's arrows there's little old dots emojis of course you could put emojis in here and it should work nice okay so the the axes the labels are animated as well with the same pattern very nice cool let's take a look at what some other folks did this is pretty cool so the animation pattern is it just disappears and then comes up from the bottom hello welcome perfect timing i'm not sure how to pronounce your name but uh but you just joined the call welcome i think this is the first time you're here you want to uh introduce yourself a bit uh kostav i'm not sure how to say your name but welcome kyle stuff you want to introduce yourself you're muted i'm not can't hear you welcome kathy hello i think this is the first time you're here you want to introduce yourself a little oh yes got it yeah i'm i'm experimenting with opening up the the live chat the live audio chat to everyone watching because um yeah i think there's a lot of value in people you know stopping me asking questions we can have a lively discussion all right glad you could join we have a full house today yeah no i i would suggest you close the youtube window it's a little tricky of a setup yeah because there's delayed audio coming from the youtube window and and there's the google meet window so if you're in the google me you have to close the youtube window sorry it's a little it's a little confusing oh good welcome kostov i'm so glad you could join us um i've i've seen your work recently and it's really great you want to introduce yourself a little bit excellent oh this one nice yeah this is really beautiful work yeah i've been i've been really happy to see see you working here and i'm thrilled you could join us today this is amazing this is amazing so yeah this is this is sort of a dream come true for me with this series i was hoping to collect sort of a core group of people who are following along intensely with this stuff and this is actually what happened so just thank you so much for for joining me on this journey this is amazing so i was just showing your work uh costume how do you say your name again i'm sorry kostov gostiv nice do you want to present this work a little bit see and and explain how you did it very nice right yep oh there it is oh that's actually pretty nice that's a pretty nice technique you're actually checking the value to see if it's a number or not nice work yeah so if folks if folks haven't seen this type of operator this is a really nice operator you can you can say type of something and that operator returns a string and it could be number like the string number or the string string or object or anything and this tells you what type of thing it is so this is checking the first row at the certain column what type of thing is it nice so it's filtering just by the numeric columns great work i see yeah continue has to be an expression on its own and so if you wanted to do that let me just show you real quick how you could do that so this is using the four in construct which is slightly different from four of uh but this is this is working fine so the thing is the ternary operator it creates an expression that has some return value and so you know if this value is true then it returns the first thing right after the question mark if it's false it returns the thing after the colon however continue continue needs to be its own separate statement so if you wanted to use continue you would need to do it like this you would need to use an if statement and an if block right here and and this use of the ternary operator is a bit confusing but because it has a side effect it's typically not recommended to to have a side effect meaning pushing a new thing onto the array uh inside of a ternary operator it's just a little bit confusing so this is how i would suggest to do it use an if and inside of that if block do this do the thing with the side effect so it's really clear that okay this is this deserves its own line it's doing something it has a side effect it's changing this array and then in the else block then you could use uh continue but yeah i was about to say like but you don't really need that because it's gonna just continue and do nothing anyway so nice nice yeah i'm glad i'm glad this came up yeah continue it's a control flow thing that you only need to use if you're inside of some like deeply nested thing and then you you know inside of some deeply like if you have four like three like i don't know two or three nested if statements and you come to some case where you need to continue that's where you would want to use um continue and i can't think of an example offhand but if it's just a case like this you don't actually need to use continue at all so this is another way of doing it yeah so with the for in construct this actually works because it's block scoped so this block here so const it declares this variable called col column and you could also use let here that would work too uh you could even use var if you're old school but const works yeah yeah my pleasure and um what this what this block of code is actually doing is it's filtering the columns to have only the numeric columns and so i can't help but just also suggest alternate way of doing it as well which is like this const numeric columns equals um there is no list comprehension but there are many useful methods on arrays that you can use and so this for in construct actually uses the keys of this object so you could say object dot keys of the first row this gives you an array of all of these columns and then you can say dot filter which is an array method and a lot of this stuff you could do in python with list comprehensions but there is no list comprehension in javascript it would be cool if there were but we can just use these constructs like filter and so we can pass in a function to filter and this function can just return this boolean you know if the type of the first row at this part particular column is number then return true otherwise it returns false and i'll just use prettier to format this code and this actually does the exact same thing as all of this it's just a more concise way of doing it understood yeah excellent excellent and i can see that like i can see that you're you're learning and trying new things and this is this is a very good way of um like this i can yeah it's great i could see your learning process which is amazing and so this is a good first working version and then you can simplify it with the addition of these different constructs like filter this hub does not do linting i tried to get it to work with linting but it was causing all sorts of instabilities it started crashing uh that's something on the road map for vishub it would be amazing to do linting and vis up that's something i really would like to see but unfortunately not right now but the closest thing we have is prettier this little p which which formats the code for you i find it super useful and along these go ahead sure it's an array of strings and it just for some example if we were to test against string it should return just species and it does yeah species is actually a something that uh sort of throws throws a wrench in the works of how our scatter plot works and this is uh this is going to be related to the exercise for today and we'll get more into it later but yeah this is an alternate way to do that filtering and let's see what time is it it's 11 21. let's just see a couple more exercise submissions here's another one from cost of um i don't know which one i clicked actually hold on this is the one i wanted to click data source dozen d3 scatter plot oh this is amazing the data source so good so good nice so this excellent yeah great work this this is awesome the data source data set by the way it's it's got a lot of history to it um i can go into it at another time but it's a great data set because it it has this picture of a dinosaur that you can see here and the point of it is that if you take all sorts of statistical summaries of this data set they're all like the same for all the different columns but if you visualize it you get totally different things like that data source and dots and the star and the point of it and the circle here and the point of this data set is to show that statistical summaries lose a lot of information and when you visualize the data you can see these patterns and information that you cannot see with just the statistical summaries very nice and here's another one with labels this one blew my mind when i saw it it actually does the animated general update pattern example within the label isn't that cool really a lot of attention to detail on this one it's i was happy to see this one it made me laugh i'm like oh my god this is this is so funny yeah so really nice work really nice work here by andrea nice oh here's one from eric dusbach nice you want to talk about this a little bit oh cool animation alright right nice well this is very nice this is very nice however however i do see some telltale signs that the labels are not adhering to the general update pattern see if you could see around the edges they're like very sharp and crisp that indicates to me that there's actually a bunch of labels on top of one another so let me just go in here and see what's happening with that and how we might fix it so the yaxis label looks fine actually this one is behaving correctly nice work with the data null oh nice oh nice that's great that's great i'm happy to see this like cross communication happening but here's where there's still a problem see with this one it's just appending a new group element every time for for axis bottom year but it's very close to what it needs to be i mean all you need to do here is selection dot select all a dot axis bottom year dot join g and now oh sorry sorry sorry i forgot the data null here now if you see the animation play out this 2020 is is looking correct it's not getting that crisp thing happening to it so yeah this is the pattern right here that you can apply to all the different text labels like this one united states and this other one here nice so yeah you're well on your way nice yeah my pleasure great work great work and while i'm in here i just kind of kind of want to see if we make this delay i times like 20 i kind of want to see it play out in its full slow beauty see this is this is really cool oh my gosh oh it's look what's happening here nice yeah that's what you got to do you just got to dial it in dial it in or alternatively you could make this a function of the um number of rows in the data that's actually something i wanted to do earlier but yeah it's it's gets a little detailed but yeah excellent work excellent work all right last one from andre take it out oh is it broken oh this is this is just a bug this is a bug invis up i don't know what this is coming from i've been meaning to investigate this i think just the data set was taken a long time to load that's working now nice very cool so it's just plugging in a different data set to that one with the with the transitions on the labels nice very nice work oh let's check it out oh you can only hear me oh my god seriously this is a disaster oh my gosh it's been just my audio coming through this whole time can one of you say something just to check the levels uh yeah i think so yeah it's a yeah sorry i i had my youtube close said something um yeah it's it's my problem on the obs config hold on just let me try to figure this one out all right can you can one of you say something testing nice there it is what is usually okay now it's coming through oh this is a disaster so all the audio so far was was lost from everybody else but now it's coming through sorry about that oh so sorry yeah you saw it before the class start but uh the question is in the uh it's in the meat uh chat oh the meat chat okay this is too much for me to monitor it's too many chats yeah that's why i said because it's too much places yeah i think you need to take break every half hour and check around yeah totally all right now let's get into today's episode so i'm gonna try to i'm gonna try to keep this to a half hour what we're going to try to do today is add menus to our animated scatter plot so that instead of just cycling through different columns it's going to be driven by the choice of the user you know what do i want to see right now and so you can click a menu and select which column to use for both x and y oops so i'm going to start from what we did last week this animated reusable scatter plot and i'll drop the link here in the chat if you'd like to follow along so i'll start by forking this one and i'll say um animated reusable d3 scatter plot or just i'll say scatter plot with menus or reusable how about animated animated scatter plot with menus okay so what i'd like to do here is add menus how do you add menus it turns out this is thing called the select tag in html and it looks something like this here's an example from w3schools this is the sort of basic builtin menu that you get from html and this is this is good for us we can use this so i'm going to copy this code as a reference example and i'm thinking we can use the same pattern that we used for our scatter plot for the menu so we're going to want to be able to say import menu from dot slash menu and we can use the same reusable chart pattern for this menu component so i'll create a new file called menu.js and in here i'm just going to paste this as a reference and comment it out and then i'm going to copy all of this scatterplot stuff paste it in here and change scatter plot to menu and and then just remove everything inside of here except the core skeleton of what we need and i'll keep one example of an accessor because we're going to want to have a bunch of these all right so this is the basic skeleton of what we want to do and then let's let's um invoke this from index.h index.js to get to a starting point for development i'm gonna get rid of this set interval stuff because it's going to be replaced by uh in the interaction of selection and we have this columns thing here which can drive the menus so we want to call dot call menu on something but we don't have that thing yet and i think what that thing should be is a div that we append to the body so maybe up here i'm going to make another block called menu container where we select the body and we can append a div a div is just a container element in html and maybe let's give it a class of menu container just so that we can style it with css and then we can use this to invoke our menu component so what this is i have a question yeah go ahead so this um h table elements uh it doesn't make sense to uh attach them to svg because they are basically html elements so they go to body element only correct yes um within the svg element you can only use certain certain tags that make sense within an svg like circle and line and all that stuff if you want to use a div inside of an svg there is actually a construct you can use to do this it's called foreign element svg foreign element but i don't use that very much because i find it confusing to have divs inside of your svg and it has some weird behavior so what i generally do is keep the svg graphics totally separate from the ui elements the regular old dom elements and so this is why i'm setting up a div giving it a class of menu container and then we can put stuff into there so we can instantiate our menu pass it into dot call and then inside of menu when it gets invoked the selection is this div it's the parent div so let's just try something selection.txt just as an example of something notice how it doesn't actually show up anywhere because i think it's showing up below the svg like beyond the boundary of the page so what we want to do is style it so that it appears at the top of this page so we've got this class menu dash container in our styles.css we can access that and i'm going to just position these menus on top of this svg to do that we can say position fixed top 0 and left zero this will put it at the top left corner so now we can see there it is foo at the top left corner i would like to ultimately center all of this stuff and i think i'll do that now just while i'm in the css to do that i like to use flexbox which you can set up with display flex and this is a whole thing that you know i could spend a bunch of time talking about but suffice it to say that when you use display flex it opens up this whole landscape of options for you which is extremely well documented in this thing called a complete guide to flexbox which has been a really great reference for me whenever using flexbox so what i want to do is center it so we can use justify content um i think space around is what i'd like to use so that we have one menu on one side and another menu on the other side so justify content space around it's still in the corner uh i think we need uh right zero as well which will make this div span the whole the whole space from left to right now we can see that little foo is in the middle here which is what we want all right we're going to actually want two menus one for x and one for y so let's scaffold that out now while we're here i will put these as children of menu containers so i'll call it maybe x menu container or how about i'll just call it x menu and we can do the same we can append a div give it a class of x menu container but you know i don't think we actually need different classes for this so i'll just append a div the simpler the better so we've got x menu and y menu and down here we can say xmenu.call and then ymenu dot call and see now we have two different labels one on the left and one on the right this is looking good this is what i wanted to ultimately ultimately end up as one menu on the left one menu on the right now that we have our positioning down let's develop this menu component using this this example code as a reference so i think the menu should be comprised of roughly this structure where there's a label and then there's a select element that has a bunch of options inside of it let's begin by creating this label we can say selection dot select all label dot data null i'm just gonna start by using this this item potent pattern from the beginning so we don't end up with any bugs later if we invoke it multiple times dot join label like this and the label is for this select and that has some implications for the ui like if you i think if you click on the label it gives focus to the select or something like this um i'm just using this as a as a template because i think it's all correct so let's begin by setting this four attribute i can say dot attr for and i'll use something called id which is something that should be configurable so let id equals nothing to start and we can we can set up an accessor for id like this oh what is where is label what do you mean where is label is this variable this is just an element here select all label yeah the idea is we're going to create this structure is inside the dom and so there's no variable called label it's just the tag name label and it's going to appear as some text next to the menu that says what the menu is about yeah but in this case you okay i got it you're selecting all the labels but there is none label right right now correct and then you will create but what what if we have a label in our in our page right if there's already a label there as a child of this selection then it will it will select that and use it instead of creating a new one this is what this this whole pattern is all about this idempotent rendering pattern the first time it's invoked it'll create a new label but subsequent times it's going to use the existing label and then change the change its attributes okay so we are using this fake data for now so what is the real label in our that iris data set well that's where we're gonna have to configure it so i'm beginning by by by setting up this id and in this dummy example the id would be cars so four equals cars here name equals cars and id equals cars over here but we have not set it up yet and what i'm doing is i'm working on i'm working on the the accessor so that we can set this up so i'm creating an accessor called id and over in index.js when we set up the menu for x we can we can call dot id and pass in the particular id i'll call it x dash menu for example and the key is that the id for the y menu needs to be different so now this will work because we just set up this accessor so we can call dot id pass in the id that invokes this function here which sets the variable called id to the value oh we need to get rid of this plus because that will that will parse the string to a number which we don't want here and then once that is set uh when it gets invoked it'll set for that id now we need to put the the text of the label which i think i'll call label or how about label text just so it's not confusing we want the text inside of this label to be label text so in our in our rendering code here we can say dot text which sets the inner text of the element to be label text and again we need to set up an accessor where we just change id to label text like this and then over in index.js we can call dot label text for these two different menus and pass in different things so for x it would be x colon i think is what i want it to be and then for y it would be y colon all right and then it shows up like that x is here and y is here excellent so far so good now let's begin working on this this the actual menu part of it which is sort of what all of this has been building up to the general update pattern here or yeah this item potent rendering pattern will be the same but instead of a label element it's going to be a select element and here we want to set name and id to be id which is very similar to this line here where we we're setting four on the label so i'm going to use that same pattern but instead of four it's going to be name and id like this now notice that we have sort of a stub of a menu that doesn't have anything in it so we're getting there now we need to populate these options question sure uh so when we're doing this select tag uh we are passing two attributes name and id and in the example as well they are both set to the same value so is this intentional or is this just specific to this particular example yeah this is intentional and to be honest i haven't dug too deep into each of those things i just sort of blindly copied it from the example that i found but here's another example of an html select element from mdn where they do the same thing where the label is for and that has to match up with the id but i see here that name is different and i do i do not actually fully understand the role of the name attribute on a select so let's see if we can find that name it's used to specify the name of the control i mean this is one of those things where i'm just going to sort of blindly follow the example what about id yeah i'm not really sure but the thing is when you when you click on when you click on the label it gives that menu focus that's why i think it's important that these match but apparently okay only the id needs to match and not the name so could it be like the id is its name is sort of like a class to apply say css styling or something like that could be could be but then i mean if you want to use css you may as well just give it a class and be sort of standard about it right i mean maybe it would work to just leave out the name honestly i'm not sure okay yeah but that four should match the id that's the main thing correct yeah four should match id um i think i think the id should be unique to the whole html document right yeah generally id needs to be unique in the whole document and to get to the bottom of this we can do some experiments like if i click on x see how the menu gets focus and i'm curious if i if i leave out both of these name and id and i click on that label it does not get focus so we know that one of these is important let me try just setting name and see what happens if i just set name and i click on it it does not get focus it does not get focused at all however if i leave out name and i just set id and then i click on the label it does get focus this is the behavior that i'm after this is why this is the whole reason why i'm setting this up so you know maybe i'll just be a little cowboy about it and leave out name because like i like to have this philosophy of like if i don't understand why it's there i'm not going to put it there you know if it doesn't do anything for me there's no need to put it so thanks for asking that question i have always wondered about this actually and now with this little experiment we got to the bottom of it so i'm just going to set id and be done with it yeah but id generally yeah it does need to be unique on the whole page that's why it's important that the id is different for x and y all right great let's continue let's add these options to our menu inside the select we want a bunch of options which is where we can continue this expression here so we're inside of the select net in here we can say dot select all option dot data options which we have not defined yet i'm going to define that dot join option and then each of these options needs to have a value attribute and also some text and the text inside the option element is what you see on the screen the value is more like an internal id that the code uses so let us let us assume that each element of this options array which we're going to define in a minute we'll have a couple things namely a value property which we can use here to set the value attribute like this and also a text attribute so i'm going to say dot text and here we can also pass in a function that takes as input one row and we can return text like that yeah this should be the complete code required to render our set of options now we just need to define options and options is something we want to define from the outside so i'm going to set up an accessor for options so we define the variable at the top i'll use this this template here to create a new accessor for options i'll just replace id with options everywhere here all right and then in index.js we need to pass in our options to both of these and columns is pretty close to options however it only has the actual columns it doesn't have the labels that we want to use i mean we could use the same for both but my preference would be to set up objects for each of these that have labels as well so value will be the original value here and then from here we can say text will be some string and for petal width that should be uppercase petal space width i'll just type these out these are the labels that we're going to see on the screen so they should be nice human readable stuff not this lowercase underscored limited thing which is kind of like uh nerdy you know it's not really not really presentable so petal length and sepal length all right these are actually our options so i'll just rename that variable to options which we can pass into the options accessor for both of these different menus all right now we have options in our menu look at that it worked amazing amazing all right now is the fun part where we get to wire it up and make it all work make it all happen this is where things get a little a little tricky what we want to do i want to be able to call dot on on this thing here which is generally how we add event listeners to things typically the first argument is the the name of the event on change and then the second argument is some callback where it accepts a value and it does something so for now i'll just say console.log value and later on we'll have that actually interact with the scatterplot to change to change x and y but for now let's just put it like this to see if it works and this is where it's kind of a challenging thing to to iterate on this pattern this reusable charts pattern to handle events luckily there are a couple d3 packages that do this one of them is d3 brush and i like to study the source code of d3 itself to see how to do some of this stuff you'll see that the implementation of d3 brush uses this other package for events called d3 dispatch which is what we can use as well this is this is part of d3 this is how you can set up components with event listeners so the way that brush does it is first it imports dispatch from d3 dispatch which we're gonna have to do as well so i'll just do that now import dispatch from in our case d3 um and let's see where it's used listeners equals dispatch passing in various types of events that could potentially happen let's do that as well i'll say const listeners equals dispatch we're only going to want one type of event which is change so i'm going to put that like that here this is the conduit by which we can emit events and we can event we can listen to these events externally and let's see where is listeners used ah to emit an event we need to use dot call but first we need to expose dot on to the external world and this is the pattern that d3 brush uses it calls listeners.on dot apply listeners and the arguments to this function and if that value is the same as listeners then it returns the the brush otherwise it returns the thing that was returned by those listeners now i'm going to be honest with you i have not fully dissected and grocked everything that's happening here i just know that it works and mike bostock the author of this module must have really thought this through so i'm gonna do something a little uncharacteristic and just copy paste this whole thing without fully understanding it and of course all we have to change brush to my and this effectively exposes the dot on method so that you can add an event listener to this menu so now our code should work it's going to add the event listener the next thing we need to do is actually emit that event from our event listener every time that the menu changes this is where we need to iterate our rendering logic to add an event listener to the select element itself which we can do with dot on change i'm pretty sure and this will take as input an event which is the dom event that that's provided to you from from the dom environment now let's console.log event here just to see if this is working at all i'll open up the console and then if i select something from this menu we get this event it worked alright i just know from experience that you can use event dot target and then unpack the value from this dot value is in here somewhere among all this stuff so event dot target dot value is how you extract the actual thing that you clicked on from this so now if i click on pedal width oops sepal width rather it's it prints out the name of the column simple underscore width like this and if i click uh sepal length it outputs sepal length this is the value that we want to dispatch to our outer event listeners and let me again refer to d3 dispatch there is a method here called um dot call this is the method that you need to use to dispatch events to tell all the event listeners like hey this event actually happened so what we need to do is call type and then the the context object which will resolve to dot this i'm not really a big fan of using this like we don't need to use this necessarily but the third argument is important it's the arguments that get passed so let's see how to how to actually set this up our instance of dispatch is called listeners here so in here we can say listeners.call the first argument will be the type which is the name of the event in our case it's going to be change the second argument is going to be the the context that resolves to this and i'm not i'm not a fan of using that so i'm just going to pass in null to say like this is not this is not a thing that we're doing it's not a thing that we're using but the third argument is important which is going to be event.target.value this will make it so that the na the column that you click on is passed to the outer event listener that we've defined in index.js now let's just say console.log in index.js to be sure this is where we are now let's see did it work if i click on this thing it worked boom so i clicked on it the event sort of got forwarded through this component to the outer index.html and now in index.html we get notified when we when we change this so this is this is the pattern that you can use to introduce events to your components and let me just give another overview of how this is working we import dispatch from d3 which gives us this event emitter construct from d3 we instantiate it once when we instantiate the menu it's an instance of dispatch that only has one type of event which i'm calling change we could call it anything but i'm calling it change because that's sort of a standard name for menus we're calling that listeners in here when we render our select element we're adding a change event listener to that element which is a it's a standard um thing that emits events from the dom when we get that event we are extracting the value that was clicked on and then we're using listeners.call to essentially forward that event through our d3 dispatch construct so what this is doing it's essentially emitting a change event and it's it's just passing in uh the value which is the the name of the column that was clicked on so you know we could just pass in the event but i my preference is to to eliminate all that complexity for the external listener so that all you need to do is is use the value that was passed in to this callback here right so i i realize this is a lot this was actually pretty difficult to figure out how to do but i think it's the right pattern i want to pause now and ask you know are there any questions so far yeah the the the null that you did there that's supposed to be this and that what what's that yeah we can dig into that because i it's it's a little sort of a mysterious thing i'll pass in foo here just to demonstrate what this is in our index.js if we use the old school function syntax not the fat arrow notation to define this function then we can say console.log this and i'll get rid of all that other stuff so we can just isolate that i think there's a typo in function oh whoops function now if i select something from that menu foo gets output to the console it's um it goes to like the history of javascript and objectoriented programming you know there's a bunch of patterns throughout history of javascript where people try to make it object oriented and use the keyword this extensively but i think like to me that's sort of a thing of the past like there's no need to use this at all and it's just it's essentially another way of passing another thing into this callback in addition to the value but i personally just don't see i just don't see the the usefulness in it but if if you wanted to do it if you wanted to use this then you could um but it is like uh we have like two combo boxes um does does it somehow chew i don't know identify which combo box are you using could be use it like this or not i mean one thing i could imagine is passing in my here so that it would resolve to the instance of our menu component in the external listener so you could say like i don't know so you could manipulate the menu or or something like that but like i said i don't really get it i don't really get the point of it it's just sort of an inherited thing from from patterns of the past that we've sort of moved away from in minor times um so that's why i don't really like to use it it's just a confusing thing um like in d3 a lot of the time this is referred is is the is the dom node but it just goes to show you in javascript the keyword this could resolve to literally anything it depends on how you invoke the function that's why i just find it confusing to use the keyword this when you're developing software but this is it this is how it's how it could be used you could pass something in as the second argument could be anything and then in the callback if you use the old school function notation then you can use the this keyword and it will resolve to whatever you pass in as the second argument here okay um i'm not familiar with this i'm familiar with that you would listen to an event using the on and natasha a function that will that will be operated on when that event is fired and i think i missed the point why we're doing all this while we're using the d3 dispatch oh we're using d3 dispatch so that we can essentially define our own set of events in this component so we can call dot on change and pass a callback which is sort of the ideal api that i would envision for for adding an event listener and it's it's a way of decoupling the dom like what we're doing when we actually render the thing from the component itself it means we can add this event listener to our menu component and then internally that menu component can choose to fire that event anytime inside so i mean we could we could fire this event any time it just so happens that we're listening to the change event on our select element and then essentially forwarding that event i see so for example suppose you're changing one of the selects but you want to change both of the axes you will be able to fire two events based on a selection and one of your selects if you need to well i mean if you wanted to do that then you could just change what the body of the listener does you could like set one axis and then set another you don't need necessarily two different events for that but let me revert this change because using this is confusing and i prefer the the arrow the fat arrow syntax for functions and then in our menu dot js we just pass null as the second argument so so yeah this is this is just generally the pattern that you you can use if you want to introduce events into your reusable components that you generate with this with this towards reusable charts pattern and the reason why we're using d3 dispatch is so that we can control the set of events it's a generalized pattern to be clear where you can you can set it up like this you can set up dot on like this and then you could add any sort of interaction like let's say for example you wanted to make it so that your scatter plot could listen to events when you click on the circles you could use the same pattern to accomplish that so the pattern can be the same it's just that the things that trigger those events could be different depending on whatever your component is i wanted to introduce this general pattern because it's useful in a number of different contexts whenever you want to add interaction to your to your components this just so happens to be a menu component where to know when to trigger the event we need to attach an event listener to the select dom element and then unpack it like this and then we pass it into our our change listeners like this all right now let's make it so that when we select something it actually changes the scatter plot this is the moment we've all been waiting for right we've got all this wiring set up that it you know it dispatches the event and everything this is the this is the moment of truth where we sort of connect these two things together let's look at this code that we had earlier it uses plot.x value to set the accessor and then it uses svg.callplot value in this case is actually the column so i'm going to rename it to column just because that makes more sense and then in this event listener we can say svg.call plot this will cause our scatter plot to rerender but just before we render that i'm going to call dot x value and set that x value accessor to be a brand new function that takes as input one of these rows and it returns d at column column being whatever column we just selected from the menu now if i select something it actually changes yeah this is the this is the moment where it all comes together and we can actually use a menu to select what is being displayed on the xaxis and it ends up pretty small and concise but we're getting the column from the event dispatcher and we're setting the x value accessor of our plot to be a function that accesses that particular column for x and then we're invoking our plot with svg.call and to complete this we can do the same for y but instead of saying x value we set the y value and this is it it's done we can set x and we can say y so now we can explore the data and one beautiful thing about the s the the select elements is you can actually use the arrow keys to quickly navigate between the different options so any questions does the event change on the select element files when you first render the page to make sure that you've got the first selections correct it does not that's actually a really good point when we set up our scatter plot it's defaulting to this x value is petal width and y value is sepal length but when we initialize the menus they're just getting i think the first the first option is what they're defaulting to so that's a good call out that when it loads it's actually not correct it says pedal width and it says pedal width for both x and y yep yep so that's a bug that's a bug ideally we would have something like uh initial option or what have you but just to fix the bug i'm going to initialize x value and y value both to be pedal width now at least it's it's correct and accurate when it loads but yeah good catch good catch there are a number of things we could do here to to like make it so that initially there is some some selection of the menus and the accessors that's initialized correctly but i think i'll i'll leave that as an exercise for the reader but actually here here's what i want to leave you with as an exercise for today handle species this is going to be kind of challenging the value here would be species and the text here would be species this would be the ideal situation where you could select species and it would work but right now it does not work because we're using linear scales we're using linear scales with with a thing that is is not numbers it's different strings and so if you wanted to visualize species you would need to use scale point instead and have the domain be data.map x value like this and so the challenge is set up x and y scales conditionally based on the type of attribute you've selected and and the overall goal here would be to make it so that if you select species for x the x scale would change to be a point scale not a linear scale and the axis should render correctly so that's the challenge for this week all right i think we'll wrap it up any other last questions just say thank you this is great my pleasure yeah this was um i was i was a little nervous going into this because i know it's a lot of stuff to digest um but thank you all for asking questions along the way when when things were not clear and uh it's yeah it's not clear to me what we should see if it's if i get this passive because i i can imagine like uh using different icons for different species oh if i if i get like the x's as a specie um especially i i don't get it because i would have like two species two or three something like this let me just show you real quick it should be scale point which will distribute those three values across x and then the domain would be data.map x value like this so it just gets all the unique values and now if i oh scale point we need to import that from d3 if it runs now and if i set x to species it looks like this this is what it should look like okay i got it um oh but yeah actually let's add a little bit of padding because it's all up against the edge there we can say dot padding of like 0.2 maybe and now if we select species it looks like this so this is what it should look like when you select species as x because we're using scale point all the time if we go back to one of these numeric columns it's using a point scale what it's doing is it's it's taking all the unique values that it sees and giving them a location along x which is totally not right it's totally incorrect a point scale should only be used if you have a bunch of discrete values for example three species not if you have quantities so what i envision could be the solution uh is like you have some ternary operator here like if x type is a categoric is if x type is categorical and you can create an accessor for x type then use scale point otherwise use scale linear so there's sort of a sketch of what the solution should be and i'll leave it to you to implement it and i might even implement it uh next episode if yeah the other way could be implemented is a third menu which is then a stratification variable which is says overall and then by the species i think then you would see subgroups for each of those xy plots oh yeah you mean like you'd you'd see like three scatter plots side by side you could do that or if someone wants to dive in and you'd have a menu which would be let's say z it says overall and then each of the species and so then you could select each of each species or overall so right now we're looking at overall yep um and so that would be another way that way you're not confounding that categorical variable with um the actual intent of the scatter plot true yeah good call you could do it a number of ways you could use color or you could fast it into like three different plots that have the different subsets highlighted or filtered to just show them yeah yeah totally there's a number of ways to do it yep good call and we'll be getting into those i hope to add color to the scatter plot in the future and also do all sorts of different like aggregations like you could you could do a box plot all sorts of options many things many things to do is there time for a very quick question on selections and join sure yeah thank you if you go back please to uh where you select for the label for example this one yes thank you there seems to be a pattern where you select all for a special uh uh value and then you join the same value is there a case where you would do it two different things or is it always the same you would select all for one thing and then you're showing for exact that same thing that's a great question this is the case where we're selecting on the tag name that appears here label and this string is a selector you could select by class as well if you want to but this case is simple they're the same because we know for sure that inside of any one of these given divs this is our parent that we're just going to have one label element if we know that there's only going to be one label element in here then then we can use the tag name in the select all however if there's going to be different instances of the same tag name as children of the same parent then we want to have something different which we have here in our scatter plot because we have one group element as a container for the yaxis and we have another group element as the container for the xaxis in this case then we need to somehow differentiate between the two and i think the best way to do that is with classes and this is the case where what we pass into select all will be different than what we pass into dot join what we pass into select all is a selector string that uses dot at the beginning to signify that it's going to look for an element that has that class attribute yaxis so if if there's no yaxis then it's going to create a new group element and the thing you need to pass into dot join is always going to be a tag name not a class you're not allowed to pass a class into dot join so this is a case where they could be different yeah and you need to do this like if you pass g into here and into here then this block is going to res it's going to find the group element that was left over for the yaxis and it's going to use it for the xaxis and you're going to get rid of your yaxis it's going to be a bug and so that this is the case where you need to differentiate between two things that are the same tag name namely a group element in for in this case with classes perfect thank you very much my pleasure welcome everyone to episode 11 of get it right in black and white quantitative and categorical we've got a full house today uh we've got kostov here adil is here eric is here anita and myself welcome everybody how are things going all right right great thank you all as well all is well um yeah the submissions for this week were quite cool um looking forward to step through them and maybe we can bring up some any questions that that have arisen through trying to do this exercise so here we go here's the forum submissions from last week um oh there was a typo in there make the menus work with species that was the goal so let's see what happened um let's see oh can you all see my screen actually i can't see your screen there we go sorry now you should be able to see it oh great yep all right so kostov uh had some had some great um discussion and i was so impressed uh that you were able to use the little snippet embed feature of this hub that's so cool so we can talk about the specific line numbers yeah this was really helpful to have the snippet in the chat as well thanks for the tip on how to do that nice yeah my pleasure i'm happy to see the feature being used it's a feature that's been there for a while we haven't really used it much but it's supe it comes in handy when we're you know asking questions about the code so the question was um you were trying to add the click event listener to the option element yeah see this is actually what i did too the first time i tried to get the menu working and i was also confused as to why it wasn't working but it turns out that what you need to do it turns out that what you need to do is actually add the event on the select element not the inner option elements and once you do that it seems to work but yes yeah did that work out for you custom yes yes that worked out so i was instead of use applying the listener on the options element and applying on the select element yup excellent so yeah i think event.target.value works um and this is a great leadin to some of the stuff we're going to do today but the followon question was okay now that i have you know the column name back from the menu how do you get the text of it like the the label text and it's a great question um there are a couple of different approaches but my preference is to keep uh sort of metadata about the columns in a data structure that you define yourself and this is also something i'd like to do in today's live coding this way you can associate the value the label and the type for each of the columns which lets you then distinguish okay species is categorical and you could do this by introspecting on the data like checking the type but i like to you know type it out explicitly so that we have this data structure and to be clear you can generate this data structure by looking at the first row of the data so it's a nice way to decouple those two different activities to have an intermediate data structure like this and then to answer the question you could look up the text by constructing a map which is a data structure that's essentially a dictionary looking up key value pairs so yeah um yeah this was really nice i really like the way you structured your metadata as a separate variable and looking into it has also found a subtle difference like when you said map i think previously we also used the map function which had a lowercase m right while this map this had this uppercase m for sure so this uppercase m map that's the dictionary and the lowercase one is like uh a functional functional programming construct is that right exactly that's exactly right and i can see how it's confusing because they have the same name but yeah map is a data structure built in from es6 from i think it's from the introduction of es6 so it's a fairly new data structure if i want to know about it i just typed up javascript map mdn which is the best place to look for documentation so this page here tells you all about uppercase m map what it does how to use it so it's it's different from regular objects in a number of ways but essentially it's the same and it has some nice methods on it hey felipe is here welcome felipe but yeah map you can create a new thing you can set keys and values for that thing and then you can check does it have a certain key all of this stuff is available on maps whereas javascript array map is a method on arrays which you can find out more about here it's it's indeed a functional programming construct where on an array there's a method called map you can pass in a function that takes as input one of the elements of the array and returns something and then you get a new array of just the returned values so yeah that's the distinction between lowercase m map and uppercase m map here and i think we'll we'll end up using this data structure in today's live coding as well great thanks this was really helpful nice so yeah here's the uh the submission oh i like the styling on the menus very nice and it works fantastic beautiful beautiful very nice work awesome let me just take a quick look how it's done nice see here's the trigger nice work so it says if x name is not species so for any others column except for species we use scale in here just like we did before but otherwise use a point scale and set the domain to data.map x value which isolates all the unique values and then point scale spreads them across the visible space so that's why this works nice job let's see what else do we have well assad also took a stab at this and went a little bit beyond as well this is quite impressive so we got sepal length petal width using linear scales species works using the point scale and nice job adding the padding see it's not all the way down to the bottom and then also added an option to use a square root scale this is amazing or a power scale what is this so yeah different types of scales in use here it's brilliant so if we want to see what the scale does we can say okay pedal width linear and then petal width square you can see it's a square root relationship if i remember my high school math is this a parabola or maybe not i don't know but yeah very nice work i have question about this one sure are there circles on top of like many circles in one place it looks like that yeah it looks like there is yep you could see this the edge on this one is is sort of soft i don't know if it comes through in the stream but the edge on this one is really rough which indicates that there's a bunch of circles in the exact same spot yeah and this makes sense because there may be a bunch of data points that share the same value what's the point of square skill ah great question i think here is just an experiment so there's not really any any point per se except to figure out how to do it however the the place where square root scales come in handy is defining the radius of circles based on data such that the area of the circle is equal to the quantity in the data yeah i think we'll get that we'll get to using it like that some in some future stream where we use size but that's i think the main use case for a square root scale yeah and then there's a log scale which is not here but that's useful when the data follows a power law distribution and i think we'll use we'll get into that again also in the future but yeah great work here from uh whale assad let's see how he did this just adding a type property to the various columns very nice band squale square power and then in the scatter plot hook into that value and he even made a separate function called get scale which is very nice very nice refactoring so if it's the code is very readable if it's linear then use scale linear if it's log then use log if it's square then use square root otherwise use power scales or band scales so yeah great work let's see what else yeah there was some interesting discussion using the options array approach works oh eric has one look at this eric's here with us right now let's see what is going on here oh my gosh they're blue that's awesome and it does filtering look at that oh this is brilliant brilliant so it filters by the species you know each particular species eric you want to talk a little bit about um your experience with this sure yeah i uh i guess misinterpreted the assignment so i was just wanting to look at all the data stratified by species this is awesome oh nice yep oh yeah flexbox can be um kind of tricky and the way i did it last time was sort of a shortcut in a way to just overlay them on the top but yeah when you need more complex layout you need different different tools css grid is an amazing tool to use nice that's awesome and i see that the colors change as well now that they're now they're all blue but if you go to one of these it's it's red nice nice yeah this is awesome um so yeah let's just take a look at how it was done options so we've got all setosa versus color and virginica which is this menu here and then that's passed in to the scatter plot and then here's where the filtering happens nice so this is yeah this is great it uses the dot filter method on arrays and if if species equals the z value of d which is passed in through these accessors then include it very cool very cool and i like how you split it out into functions with dot call that's a nice approach very nice yeah it is kind of crazy yeah that's the crazy thing about javascript um and one of the reasons why i love it because it's it's got elements of functional programming and it's got elements of objectoriented programming and you can make it yeah you just showed that map yep slower and uppercase and like what yep it's it's a great playground to be in there's tons of um tools in the toolbox so to speak yep yeah it's getting complicated yeah it is it is it's a journey it's a journey of learning new things using them and this functional and object oriented programming is kind of confusing really and you don't know where which one starts and which one is right yeah and the other thing that's also interesting is how i don't know if this is a style right yeah it does get confusing when a variable has the same name as a function or property has the same name as a function somewhere else yeah yeah it's totally a tradeoff picking variable names but um the one piece of feedback i would i would have for this in terms of like visualization design is that when you when you switch between setosa and versacolor the dots animate and that's a cool effect however it communicates to the viewer that each dot is like the same in a sense you know what i mean it's like when a dot when a dot moves across the screen it makes sense if it's the same exact the same iris flower as it was before like this kind of animation makes perfect sense because when the circle moves its identity remains unchanged it's the same flower that it was however when when this animation happens it's actually kind of misleading because the flower is a different flower that's represented by the same circle as it moves across the screen you know what i mean well i think it's just a matter of you know noticing that that's an issue and we can go in and fix it and here's how i'll fork this so i can play around and i don't think i ever even talked about this but because we didn't need it but there's a second argument that you can pass into dot data which is a function that defines the identity of the thing and d3's internals will use that to distinguish between um you know things that are the same and things that are different so here's here's what we can do we need some some kind of identity across the different iris flowers first actually before we do anything else so here's here's what i propose when we load in the data there is no column that is a unique identifier for each individual flower it's just not there but we can easily make one by saying d dot id equals uh you know the simplest way to do it is just to have an id counter so like id counter plus plus and oftentimes there is something in the data that is a unique id but since there's not here we can just use the index in the table as the id and so just to see what this does it gives us oh sorry d dot id i had a typo wait why is that not working somehow it's broken did i break it i didn't really do anything huh i don't know i'm having um what i like to call a twilight zone moment or i have no idea what's going on so i think i'm just going to delete this and try again i'm getting a little sidetracked here it is the original one is not loading now which is weird huh i don't know maybe there's some outage or oh there it comes there it is maybe the data was just taking forever to load or something i don't know let me try again i want to do this because it's a very useful thing to know okay now it's working it must have been like a data latency issue or network problem so id counter is zero d dot id is id counter plus plus console.log d just to see what we're dealing with here it should be integers see this one id 3133 id 134 the point is that it's unique to each of these different iris flowers so now that we have that um and also we might actually get past i as a second argument to parse rho i don't remember but if we do then we don't need to do the id counter oh we do check that out that's nice that's even easier we don't need to do the incrementing ourselves so d dot id equals i done we're just going to have integers as the ids now in the scatter plot when we do the data binding we can pass as a second argument a function that takes as input one row and returns d dot id and hopefully with that one single change it should actually solve the visualization design issue that we were talking about okay it sort of does there's there's one there's one that's not behaving correctly but it's getting close and this is this is more accurate in a sense more honest in terms of what's happening although there's well i mean i've seen this sort of thing so many times that like oh it's sort of muscle memory at this point i don't know why that one is misbehaving though i'm getting not a number from somewhere is it huh let's try console.log d dot id just to see what it is yeah so these are coming from our index.js there's not a number coming from some other console.log somewhere else but i think the ids are good maybe maybe they need to be strings or something so if we do empty string plus i they're going to be strings now maybe 0 is coming back falsey and that's causing problems no that doesn't do it the problem is that there's a little there's one of these red ones yeah good idea you know this is buggy too because now it they should animate they should animate smoothly yeah it sure does it looks like they're they're exiting and then entering again which is not supposed to happen good idea ah it does not yeah see we're doing this i think i know what's going on we are missing the id in this transformation here so good idea to look at this place we can just solve it by adding the id to the resulting objects and this makes sense i mean it decouples the the data transformation from the rendering which is good but it adds a place where we can forget something let's see if it works now it still exits all the time which is not what we would want oh there's something else marks overall oh there's different paths that it takes so let me add it there too now this is working as i would expect so when you do it like that the right thing happens now the right thing happens as well see okay great this gets to the bottom of it and i think this is like the you know correct quote in quotes correct design where if you change these columns it makes sense that because the identity of the dot correlates to that iris flower but then when you do the filtering they don't animate anymore they sort of disappear and then reappear and if you wanted to be complete about it you would um make it so that the exit mirrors the enter in terms of the animation so instead of animating in it would animate back to zero radius and then disappear that i think would be the ultimate best solution but this is this is pretty awesome as it stands so i think i'll leave that as an exercise for you eric if you want to take that out yeah yeah this this is great learning so thank you awesome awesome yeah my pleasure and the way to do it just a little teaser would be to um put put the transition on the exit okay and have something like grow radius but oh here's actually how you would do it dot transition t dot call shrink radius something like that oh cool yeah can i have a quick question here sure when you have things entering and exiting at the same time which runs first in terms of animation well they that's the elegance of using the same transition they run at the exact same time i see and what would you do if you want things to exit first and then enter again well you would have to invoke the entire code multiple times with different data that's the only way to trigger things that happen at different times or now that i think of it i mean you could add a delay to the whole thing so so that the transition is delayed by a fixed amount of time if you wanted to yes i see so if i want them to exit first i would add a delay to the enter so they would exit and that would that would be enough time for them to exit and then enter will will be involved oh i see what you're trying to do yeah yeah and it almost pains me not to do it right now because we're so close and we're discussing this let me just let me just do it real quick thank you so on exit we use exit.call so that we can use the transitions and then we can call shrink radius and then dot remove calling the dot remove on the transition will remove the dom elements only after the transition finishes which is something that only d3 does really well if you try to do transitions with other libraries like react it's such a pain to do this sort of thing but d3 does it very well now we just need to implement shrink radius which should be pretty easy just copy grow radius and make it transition r to zero like this let's see if it works it does but the delay is problematic the delay is like too much i don't think we need any delay at all as a matter of fact the delay is the fancy thing for moving x and y but for exiting and entering i don't think we need any delay at all hmm not sure what's happening here is shrink radius taking the enter selection as an input shrink radius is just taking well it's it's called enter here but the name doesn't matter oh wait a minute it's adding the transition here oh well if it's if it's adding the transition there we don't need to add the transition here as well and we don't even need this call so here's what we can do just exit dot call shrink radius easy peasy let's see if that works oh i think i think we're not making the radius um we're not growing the radius on update and shrink radius really should remove the elements as well let's see if that works yeah there we go that's how it should be yeah this is exactly what i was hoping for okay cool problem solved and it was a interesting journey to get there great so i think now what i'd like to do is you know present my take on how we would implement this just so that every all the pieces are very clear i was just noticing that the problem we were just working on is not fully done i'm not going to solve it now but just just to show you if you wait for the transition to finish before you change the menu everything works perfectly however if you change the menu twice before the transition ends or rather if you change it three times before the transition ends you can end up in a state like this that's not correct and i think what's happening here is that the exit transition is starting and then you change the selection which causes the filtering to change and everything to update but that exit transition is still going on and when it finishes it removes those dom elements and so to really solve this um eric if you wanted to take this on as a challenge because this started from your work if you really wanted to solve this the thing to do would be to cancel the exit transition whenever you render the data again which may be a little tricky to figure out but that would be the ultimate solution okay give it a go yeah give it a go see if you can uh make it happen because this is i'm glad we got to this point though because this this reveals some of the trickiest aspects of working with d3 and this would be a good solution a good uh a good little puzzle to solve to really solidify the knowledge of everything great thanks yeah so good luck good luck with that okay let's dig into today's live coding by handling species using scale point and manually adding metadata about the columns like type for example so column name and type that's what i'm thinking of as metadata before we dig in though i want to talk about these terms quantitative and categorical these are terms that i got from tamara munsner's book tamar munsner's textbook called visualization analysis and design which is a great book really great book highly recommend and it's used in a lot of classrooms you know people teaching about data visualization use this as the textbook i use it for example when i teach every fall and that book defines terminology that can be used across you know discussions of visualization design so on and so forth i mean there's a lot of different terms that have been used over the years and she sort of defines it like okay these are the terms i'm going to use so i'm going with her set of terms to define different types of attributes in the data and the term attribute that's another term that means column some people refer to them as columns i often refer to columns as columns because that's what they are to me but in a data table sense columns can also be called as attributes and attributes have types much like variables have types and the types of attributes that we're dealing with here when we come up against this problem of handling species in our drop down menu is categorical categorical attributes have different type things in them meaning not numbers they are not numbers they're strings or identifiers for for things that have identity so the identity of the values in a categorical column categorical attribute are different and in the case of this iris data set we've got a bunch of quantitative columns that are numbers that you see here on the left but then we've got one column that is special and needs to be treated differently than all of those other columns that are numbers namely species and the reason why it's fundamentally different is because it's not numbers it's strings it's a different species of a virus setosa is one species versus color is another and there's one more but the point is that there are strings they're different things they need to be mapped to the visual space in a fundamentally different way and so that's what we'll get into here any questions so far about this all right i think i'll move on okay so now we'll actually handle species and we're going to use scale point which is kind of like scale linear but it deals with categorical attributes you can give it different strings and it will it will spread the unique values across the space which is how we want to do it all right so let's dig in the place where i'm going to start from is animated scatter plot with menus this is what we created last week and just to give a quick recap of what we did we added these menus with these animated transitions so you can change x and y to be the various quantitative attributes of the iris data set but when you select species it just breaks it crashes and the way we did this is we introduced a menu component which is using the d3 reusable charts pattern but for a menu added event you know event infrastructure to that thing and then in index.js we add a a listener for the change event on these menus which will change the x value accessor of the scatter plot instance and rerender it with svg.col and in scatterplot whenever it gets rendered it redefines these these scales x and y scale and it's here in the definition of the scale that we're going to have to make some adjustments so to start i'm going to fork this one i'll call it scatter plot with menus that handles uh um let me come up with a nice title including species thank you that's perfect perfect thank you okay so what we want to have happen is that when you select species here in this menu and for y for example it should spread out across the y coordinates the different values but it doesn't do that right now let's see where we can jump in to solve this issue to me it makes sense just to start scratch that to me it makes the most sense to start here at the definition of these options for the menus and what this does here is it defines the entries of our menu essentially that's the id for the thing this is the text the label the display name that appears in the menu i think the the most sensible approach would be to introduce another property on these objects called type and the type of the species column i would say using tomorrow munzener's terminology is categorical and the type for all the others is quantitative so just for completeness sake i'm gonna fill all those out run prettier yeah unfortunately because it gets to be long i think that's okay it's explicit so now we know when we select a given option what type it is which is information that we need in order to change the type of the scale that we use so now that we've got this in hand we need to tell the scatter plot you know what type of column it's dealing with we could do that in a number of ways but i think this the most straightforward way would be to add another accessor you know at one of these getter setter functions on the plot called x type because we already have x value it's working perfectly fine we don't want to over complicate that um but i think we can add another one called x type and the invocation would be something like dot x type and then we need to figure out what the type is for the column so we have column which is you know the name of the column and we can use it to construct the accessor like this but we also need to use it to get the type somehow i'm not sure how and because i'm not sure how you know this is a perfect place to introduce a level of indirection i'm going to i'm going to call a function called get type just just one question i was trying to do this uh at home but i was not able what i tried uh uh first i rewrote the get data i put outside in a model and and then i try to get the json that's inside your your github together with the data there is in the site where i got the data there is a json there that has all these options already the type really yeah so the gist in here yes and i try to use the json uh but i'm not able to get the data out of the scope when i try to to put this in a in an array or in a dictionary uh i lose i lose the data inside the loop i have the data right when i get outside of the loop the they don't vanish so huh how could we use this so we don't have to hard code like uh the type string or the type number right from from this right and it's so funny i actually forgot that i put this here um let's see when did i make this this was like years ago that i put this up here and at that time as well i was thinking about metadata for columns because it makes sense to be able to manipulate the metadata along with the data set which is totally possible so i mean we can use the raw url here and we could potentially use d3.json to fetch this file and use it but uh for simplicity's sake i'm just gonna you know paste it into the code but because we have this data structure you know uh we could potentially do it like that and years ago i was thinking about like oh i'm going to develop a data publishing format where it's supposed to be a csv file and a little json file like this that describes each of the columns don't give up on that right [Laughter] it's not a bad idea i mean it would be super useful to be able to have like a standard that you could just plug in um so i'll keep that in mind but yeah the way to do it would be d3.json to fetch this file and then use promise.all to fetch the csv and the json at the same time and then run some code after both of them have loaded but no matter where this information comes from we're going to have to implement this function get type for the column oh just yes yep sure and so let me just put that right here get type is a function that takes as input the column and returns the type of the column now the name column might be confusing because conceptually a column is described by one of these objects but what this really is is the column value meaning like the name the name of the column so it's just a string it's it's not the entire object if it were that'd be simpler but it's just the string sepal length so you know honestly to make that more clear i'm going to call it column name or column value i like to think of it as column name that way column a keyword column attribute i don't know in a way i wanna i wanna i want this to be name like this but it's a refactoring that would mean we'd need to update the code elsewhere i don't know maybe i'll just leave it like the way it was but we just have to understand here here's what i'll do i'll add a comment say column is a string corresponding to the value property on metadata objects can i can i ask a question about the problem we're trying to solve here sure thank you so am i right to understand that we have an array of objects and we have a value a unique value for one of the properties of those objects somewhere in that array and we want to reach the other property of that same object within the array that's exactly right yeah we have this as in we have the string corresponding to the value properties in these objects that exist in this array and what we want to get is the type which is a strain that comes from a different property of those objects but we have a array of objects right correct and we we need to get the value of the object inside the array okay okay yeah we have to given the column name for example species this function should return the type namely categorical yeah and so one one way we could do this is you know iterate through each of these entries and then when it matches when the value matches will have access to the entire object and then we can just access the type of it and that would look something like options.find which is another method on arrays d.value equals column this would give us the object and then we could just access dot type that should work yeah cool yes and and that will enable us to get to jump from any property to any other property within the same object exactly in an array of objects correct perfect however the dot find method on arrays will check you know the way it works dot fine the way it works is it checks each and every one it says okay let's take a look at this one and it passes that object into this thing and then this function runs it returns true or false so it says is d dot value equal to column it checks the first one it says okay d dot value is battle width is that equal to column which is you know whatever column we selected if it is then it returns true and then array.find returns that one that matched but if it returns false array.fine goes on to the next one and it passes in the next one and says okay is that one the same no it's not the same go on to the next one check it again if if it is the same then the define method returns that object so if it matches species for example it would return this entire object from this expression here that's why we can say dot type we could we could just as easily say text to access the text so because it iterates through each and every one i generally don't like to do it this way because it's big o of n algorithm wise that means the algorithm takes n steps where n is the number of columns in this case it's it's not that bad there's only like five so it's not really it's not really an issue so this would work perfectly well but i kind of do want to show the way i would do it which is to create a lookup table using the map data structure but any questions so far i just had a quick question around this find method yes so if like it's not present in this current table lookup example but say we had multiple columns or multiple columns with the same name so species was appearing twice so what find like return both those objects or will it just return the first uh occurrence of the of the selection selected column or the column that we're trying to find that's correct it would just return the first one okay okay that's what fine does it just returns the first match that it encounters so if you did have species as the value for multiple of these which you wouldn't want to that would be a bug but if you did uh it would just return the first one and not the second one wait thanks is there a find all method um not the case here but uh just yeah this is what i would do i don't think there is but there is a filter which is essentially does the same thing yeah okay yeah exactly yeah so if you wanted to do that you would say options.filter and you wouldn't want to say that type because the result would be an array this would find all of the matches it would so filter is essentially find all that match perfect okay clear now i just want to before moving on to the implementation with map i just want to make sure that this is actually working change the filter for find oh thanks so to just check if it's working i'm going to say console.log get type of column this will let us just check if it's working and this is on the um the x menu so when i change x it works it says quantitative excellent yeah so if i if i use species it outputs categorical perfect so it works quantitative quantitative quantitative quantitative categorical if it's species so that part works that's great x dot type is not a function but yeah we'll deal with that later but first because we're on this topic and this is such a common thing to have to do i just want to say this is not how i would actually implement this how i would actually implement this is to create a map i'll call it um column two type is a new map data structure and this is built in to the browser you don't have to import any libraries or anything it's an es6 feature and map has a number of methods like set and get so column two type meaning the way i named it like that because it's a lookup table from column to type you know from column which you use as the keys to type which are going to be used as the values and so what we can do is loop through all of these options maybe something like options dot 4 each is a way to iterate through these and we could say for each of these options we can say we want to set the value and the key will be option.value and the value that the key maps to which is confusing because the value you know that we're using the word value here but the the value that the key maps to will be type option.type so how do we put these together this is where we can say column to type which is an instance of the map data structure dot set and set takes as input two arguments the key and the value okay i think this uh solves the problem that i was having when i imported from the from the website the json ah because when i tried to to set the uh what i did i create a external array like before the column to type and try to push the value inside this array but outside this scope when i try to get back the array it's empty inside the four each if i if i create a array outside and try to push the values inside this array when it's outside it's empty so i think this set may solve this yeah and it's important to connect the dots between the the data structures because what you need to implement this get type is a a dictionary essentially a map a key value mapping where you give it the key gives it gives you the value but if you're starting from an array you have to do something else like dot find which traverses each element of the array which you don't want and you can't you can't say like options at index column which is you know you could use an object as a map as well but um but yeah i think this does solve the problem and once we have built up this map we can access it uh but first just to really comprehend what's happening let me say console.log column to type so we can see what this map ended up looking like it's a map instance that has a bunch of entries and this is just how chrome presents it to you in the console it means the key is pedal width and the value is quantitative and this double arrow here means like it maps to you know if you give pedal width to the function dot get it will return quantitative and it'll do so efficiently it doesn't have to check each one internally it implements probably like a hash table kind of a lookup scheme where it's big o of one instead of big o of n in algorithmic terms it doesn't have to check all of those it just gives you back instantly the one you that you want so if we say column to type dot get column inside of get type this should work as well and to test it we can change the column and observe that yeah okay it still prints out the right thing quantitative and if i switch to species it outputs categorical okay this is working this is working however this is not the best way it's not the simplest way to do it the simplest way to do it is to take advantage of a way of calling the map constructor where you can actually pass in an array of arrays and each of those inner arrays has only two elements the key and the value that way of doing it is much more concise and all you know although it is a bit more cryptic and the way that we would do that is is we can pass in options.map again the functional programming construct that lets you give it a function that function accepts each element and the return values end up as a new array we can return an array that has just two elements option.value and option.type and this should work as well let me see if i got it right yeah seems to work just fine so just to review what i did there options.map maps over all the options and it returns an array that has the value and the type the first thing being the key of the map the second thing being the value in the map and this is just an alternative syntax for doing the exact same thing as this other thing does namely looping through all of the entries and calling.set and to simplify this even further we could use es6 destructuring to destructure value and type from the argument and then we don't have to say option dot and option dot so all of this is a roundabout way of you know exploring the ins and outs of constructing maps um but since it comes up so often i wanted to dig into this this level of detail because you know i think it's it's really important to fundamentally understand how to use maps in today's javascript world i see there are some questions let me see what is this and is it live yeah it is it's live why are you not using typescript well i'm not using typescript because typescript is a pain to use in my experience then you don't have to write comments yeah i know yeah it's just it's just a pain is this microsoft monaco no it's not it's a viz hub this thing that i made and you can use it too anyone can use it you can fork this stuff and get a link to it what are we doing here i love these questions these are great um it's a new visualization tool people can use yeah i mean this being vishub yeah i created about two years ago d3 has been around a while as larry points out thank you larry yeah d3 has been around a while but the apis have changed so that's why i'm doing this tutorial now to like use the most modern way of doing it okay thanks for those questions okay um now we can move on to the next phase namely implementing x type but before we do that i just want to make sure are there any questions so far about what we've done here so far please go ahead that song oh she just said it's so complicated yeah i know there's a lot of details there are a lot of details to remember but um and the first time you see stuff like this i realize it can be overwhelming that's why i wanted to like yeah this happens all the time first time i see something it's like wow i'm not understanding it and once i get into it it's like oh it wasn't that bad yeah and console.log is your friend i mean if you were on your own you can say console.log options.map value type and see what it is and and use use console.log to interrogate what you see here anything that's confusing to unpack it and understand what's what's happening in that intermediate stage see it's an array of arrays and i realized when i described it it's a bit abstract but when you console.log it and you see it you can understand oh it's an array of arrays with the keys and the values and also if you're on your own and find the stuff confusing it's good to consult mdn which is the de facto standard documentation for the builtin stuff in javascript such as map and it says right here it describes the map constructor creates a new map object and it says right here that you can pass an iterable into the constructor which is what we're doing and it just it documents that right here it says what is this iterable it's an array whose elements are key value pairs in the form of arrays so here's an example that maps numbers to strings so yeah if you if you're ever looking at this stuff on your own and feel oh my gosh this is so confusing use console.log and and and just do google searches for the data structures that we use like map because the documentation is great and also the same goes for d3 the d3 documentation is really good so if you see a d3 method that you don't know like just google it find the documentation um i do it all the time but it takes such a long time it does it does there are a number of um there are a lot of rabbit holes that you could go down and get distracted really time consuming and just takes a lot of time yeah i would say it's well worth it it's an investment in your future yeah i agree that's why you and you have every other week yeah i changed and that makes it difficult because for example i'm so behind i am supposed to catch up yeah i wish it was every other day well actually i was going to announce it at the end but since you brought it up i did change it to be every other week not every week so going forward is going to be every other week thank god i updated the meetup page why because yeah it's for me too it's a bit hectic to do this every week anyway are there any other questions i just wanted to ask what what would happen if you have two entries with the same keys so you'd be like while you were trying to iterate you're passing two keys two exact keys to in your map object that's a fantastic idea well if we if we go back to this other variant that i did here with this variant it's easy to understand what the answer to that question would be if you understand the semantics of dot set if you call dot set multiple times with the same key it will change the value and so in this case let's say we had two of these where species was the same what this algorithm would do is call dot set passing the key species and it would set the value to be this one here however the next time around you know in the for each when it gets evaluated with the last option it's going to call dot set again and so when it calls set the second time with the same key the way that maps work it's going to overwrite the first version of it and so we're going to end up with a map that only has one value for species and it's going to be the last one encountered in this array so that's a complete opposite of find in a way exactly it's the opposite of find yes yes that's a great insight the way find works is it checks each one and it returns the first match the way this works is it sets up entries in the map for each of these entry entries in the options array one at a time and if it does encounter the key multiple times it overwrites it so essentially it's putting the last occurrence of the match in the original array as the the value in the map that you get thank you yeah my pleasure and i'm not so certain what the behavior is when you use the constructor like this but it may well be the same yeah it may well take the last match although i'm not 100 sure so you know we can do we can actually test it out and this is the beautiful thing about coding too you can use the code to ask questions about the code for example um oh there's a breakage column to type is not defined i'm sorry forgot to uncomment uh sorry i'm just a little disoriented but yeah let's do this little experiment to figure out what the answer is all right so when we use this variant that uses for each goes through all of them i would expect it's going to give us the last one and if we select species it outputs categorical which is the last one see the first one was quantitative and we actually have the same key here multiple times now let's answer the other question of what if we use the map constructor like this is it the same so if i select species it outputs categorical so the answer is yes it is the same that takes the last one great question great question i love how it digs in a little deeper yeah thank you okay now let's go ahead and solve the next piece of this puzzle now that we know what the type should be when we select it we need to pass it into x type and you know while we're at it let's pass it into y type as well why type is get type of column oh there's some error there's a syntax error i don't know what that was about so i'm going to also call why type here okay it's fine nothing was there was no problem so now from the outer sort of view of things we're invoking it where we want to be invoking it we're setting y type when we change the y menu and we're setting x type when we change the x menu now the task at hand is to implement that method in our scatter plot so let's go into our scatter plot code in scatter plot dot js we've got a bunch of these getter setter accessors and let's just make a few more we've got x value and y value i'm just going to copy paste these and change value to type so x type is going to be x type change y value to y type and we're referring to the variable y type and x type those don't exist yet so let's make those at the top of the file like this now these are available to us when we render our scatter plot let's just make sure because this is where we're going to want to use those let's make sure it's available with console.log x type here so we get undefined initially which makes sense because we're only passing it in when we change the menu but when we do change the menu we get quantitative for these and if we type if we select species we get categorical which is exactly what we want okay this is great and i think what we can do is say if x type is categorical using this ternary syntax we create a linear scale otherwise now this is where we can use uh category exactly yeah yeah the good call so i got the order reversed it's going to be scale linear if it's not categorical but if it is categorical then it's going to use scale point just use prettier to format that and if it is a scale point we can set the domain to be data.map x value and what this what this does is it returns an array of all the different x values including duplicates so it's going to return like versa color versus color versus color setosa satosa setosa but then when you when you pass that array into dot domain the scale will internally figure out that there are duplicates and it will deduplicate it so the domain will only end up having three entries the unique values of the species column and then dot range um actually should be the same because we want it to span across the same space in pixels so this should work let's see if it does if i change x to species there's some breakage let's see what it is oh scale point is not defined yeah i forgot to import it we just need to import that from d3 along with this other stuff now it should work okay great check it out it works hooray we solve the problem yep everything's working the quantitative stuff is working and when we hit species it transitions to this which is the behavior of a point scale by the way it just takes the values that it sees in the order it receives them and identifies the unique ones and spreads those across the space across the screen it's exactly what we want and i must say i am impressed by the way that d3 axis handles the transition see how it fades d3 axis is brilliantly implemented because if it is given another a linear scale see how it animates the numbers it animates the ticks but if you pass into d3 axis with the transition a different type of scale it does this nice fade animation which is just brilliant brilliant but anyway there's a little bit of cleanup work to do here but um any questions so far yeah just um one question here is eric um just curious uh how hard would it be to actually um show um all the data that are in each of those categories as dot plots so in other words in other words some of those as you mentioned earlier are on top of each other but you would really have sort of a frequency is this what you mean by dot plot yep yep so so so what you're trying to show is uh almost the distribution across those categories so that you can see where the peaks are so that's hidden right now yep but it's a sort of a natural transition but um as i'm thinking about it just trying to get a sense from your expertise how deep one would have to go and actually do that not that we do it here but i'm just curious yeah it's a great question go ahead i i just want to suggest an idea for doing that and and let you see whether it works or not so we yes that's right to implement that what you described eric the first thing i would do is just look at it from from a bird's eye view and say like what should the architecture of this be should it be one visualization or should it be a parent visualization and a child visualization where the child is one of these reusable components like the scatter plot but for a single dot plot got it you know what i mean and then i would i would get it to work that's probably how i would do it i would get it to work for a single dot plot and like you said costa that requires a step of binning where you take these um well in this case you can just use the the different values that are present here i think it increments by 0.1 that's the resolution of the data so for each one of these unique values you would want to bin them and count how many occurrences there are for each of these unique values and that there's a feature in d3 called d3 bin i think or d3 histogram if you google search d3 histogram you can see this in action so that's a data processing step so first you need to do that binning so that for each of these numbers you know how many occurrences there are and then based on that after that binning happens you can visualize that as a dot plot got it and that would be one of these components and then what you're doing essentially is called small multiples dot plots where you would want to actually have three dot plots one for each species and so then you would need to change this scatter plot code completely so that for each of the values across the xaxis here it would iterate through those and for each one invoke that reusable dot plot instance so you'd have three instances of a reusable dot plot that's one way to do it okay that's was that that's sort of just curious how you'd approach it so um not that obviously we tackle it but it's it yeah so that's how you would do that but there's a uh if you step back a little there's another question what is the best visualization design to show this type of data and small multiples dot plots is one option but there are a number of different options there's actually one option that's very low hanging fruit for us that we could do right now and i love doing this because it's so simple on the circles we could set the fill opacity to 0.2 in the css um i don't think that actually worked maybe it's just opacity yeah there we go that worked so if we set the opacity on the circles and we subdivide them by species you can see it's doing it right there you see what i'm saying yeah yeah i love it so this is a simple modification we can do to make the visualization communicate the information of density like how many overlapping dots there are which is the same thing that would be communicated by the dot plots yep yes so this is a bird's eye view yep okay so the bird'seye view meaning what i meant by a bird'seye view is you step back and look at the design space of the visualization this is one other option there are so many other options i mean you could have small multiples box plots for example you could have small multiples histograms like bar style histograms you could have small multiples of violin plots so many different ways i mean once you get this data structure and you want to visualize it there are so many options but you can frame it as small multiples meaning you want to implement one instance of it and then just multiply it across the different values that's really cool nice yeah and r by the way ggplot in r does all this stuff okay it's brilliant the way it does it so yeah stuff to look into thank you yeah my pleasure all right let's finish this up here it's almost done but we've only done it for x and not y and this code itself can be cleaned up whenever i see duplicated logic like this dot range dot range copy pasted its exact same thing i asked myself how can we get rid of this duplicated logic in this case it's fairly simple because this expression if you put parentheses around it returns a scale it could be a point scale it could be a linear scale but it returns the scale and so we can essentially factor out the call to dot range so that it gets applied to the returned scale whatever type of scale it happens to be then i just run prettier on that and and this is what we get yeah i would prefer this just because it has less duplication so to be clear this set of parentheses creates the scale you know a different type of scale depending on whether x type is categorical or not it sets the domain but it does not set the range but whatever scale comes back from this expression we call dot range on that scale whatever it is so it's just a simpler way to do it now that we've got that we can just do the exact same thing for y i'm just going to copy paste it change x to y all over the place so instead of x value it's going to be y value but with the y scale we need to be careful about the range because it's different it's height minus margin dot bottom and margin top top so i'm going to take this definition of the range and use it here and get rid of our original y scale definition and this should do the trick for both x and y let's see if it does x species works y species works excellent and one last little thing that i don't like about this is that there's no padding it goes all the way up to the edge maybe it's just personal preference or stylistic but i like always to put a little padding and the way where we can put that is right here scale point.domain.padding that's a function on these scales i'll say 0.2 yeah so if we look at it now we get this nice padding it doesn't go all the way up to the edge which i just find kind of i don't know distasteful it has space to breathe the labels you can read all the labels now so virginica used to be off the screen and just as the final step i'm going to call dot padding in the case of y as well so now it works for both x and y and the the labels get cut off yeah let me just change the margin to address that problem because what i want to do is finish today with a complete product that works for all the cases that you select but where's my margin margin oh it's right here margin left let me set it to 150 pixels and see if that's enough for species okay that's a little too much maybe 120. all right there we have it any questions so one question i had was with those drop downs there um i couldn't find where one does this or if it's even possible to change the font and the size of those drop downs oh is that a css thing that's a great question you know the html select element and the options it's notoriously difficult to style with css so if you're working on a product where you need styled menus the best approach might to go might be to go seeking out some thirdparty library that implements a dropdown widget that you could style with css okay yeah explains the hunt yeah they're right it's it's a hunt yeah and like you just it's very difficult to style these the way you want um but again it's a whole other level of complexity to like evaluate the different libraries and pick one and figure out how to use it um however with this d3 reusable chart pattern you could implement a menu component just like this having the same api you know having the same methods and everything but internally it could use that thirdparty menu library that would be the approach that i would suggest okay thank you but that said i was actually surprised to see that in one of the submissions the menus were styled let me see if i can find which was that you cost up yes kostov how did you do this i think i normal css to do this see this is beautiful it has that custom font that's awesome yeah i just wanted to make the phone consistent with maxis menu so i just use this select uh html and apply this property here brilliant so you know there you go all right i was trying to figure that out yeah there you go so it looks like it looks like you had to style the select the label and option to get it to work yep so i think the labels were for these axis labels and the option and select work for the drop down right yep so there's your answer eric should work thank you and i was actually quite surprised to see this working because i've struggled in the past to try to do this but it looks like this works yeah i was just playing around with it i totally forgot that it worked for my case that's awesome and i wonder if it would behave correctly if you try more advanced css like setting the the background color or the you know the roundedness of the edges i think you might run into a wall beyond which you can't customize but worth exploring for sure right but yeah this is very nice and i i have to say it's really nice how these animate or how your labels animate really nice work all right well i think that's all for today i thank you so much yeah my pleasure thank you all thank you very much thank you yeah thank you very much and uh yeah like i said it's i changed it to every other week so just mark your calendars it's not going to be every week and i will leave you all with an exercise for this next two weeks i want you to find a compelling data set look around online for different data sets and uh yeah try to find a compelling public data set and just search around you know i would suggest coming up with some idea of like data that you want to see visualized that you've maybe seen in the past or thought about deeply like some sort of existential like question about society or i don't know climate change the keeling curve if you the killing curve would be a good one um but yeah find a compelling data set that interests you and the way to do it is just search for the topic see if you can find any visualizations that pertain to the topic track down their data source uh you know follow links until you can get to a downloadable data file like an excel file and then export it as csv or just try to find a csv or a json file load that up you know fork the scatter plot we made with the menus load in that data update the data parsing logic and i want you to actually explore the data using this scatter plot with menus because now that now that the scatter plot has the transparency uh we can see the density of things and now that we made it handle species it can handle any column that's categorical and i want you to write up the key insights that you discover in the readme of the viz so fork this modify the readme.md file to write up like bullet points of like this is cool this other thing is cool you know interesting insights that you find about the data not about the vids or the coding but i want you to like actually explore some data and uh yeah share your results in the forum i've made an entry for for today episode 12. here it is viz hub has been my passion project since 2018 and um i've rewritten it twice and i'm i'm embarking on rewriting it again okay because i went in the other day to try to redeploy and like upgrade the dependencies and it's like it was just so heavy feeling you know a code base that i've been working on for two years and so i really want to like do a deep dive and like make vidshop as good as it could possibly be and uh focus on things like you know hot reloading of the code is is what i've really been intrigued by and also having some state associated with the visuals so the if you want to tweak something you don't have to change the code but you'd have like a knob or a dial that you could just touch and tweak and see the feedback instantaneously so i was just very um inspired to start working on the next the next iteration of vishub so that's that's what i'm going to do but but this has been a really great experience this series because it's developed this little following which i think is it's amazing it's it's it's a golden little um group of folks and and i just want to say i really appreciate all of you who have participated it's been really fun and i've it's been really great to see you all learn and grow and do new things that you've never done before so thanks for that now thanks you for all of your being so kind to to share your knowledge you know it's my pleasure yeah and it's it's you know it's proved it sort of proved the one of the original vision goals of of this hub and my teaching to to reach a wider audience of folks who might not otherwise be able to learn this stuff you know may not have access to you know a university so and it worked it's it's working i mean i've i've seen people from all sorts of different countries um if i look at the google analytics of his hub it's not just the us it's global the audience is global particularly in like developing countries which which i'm so thrilled by i just that's so happy to see yeah i'm for example i'm from chile and you know last year i it was really a struggle or maybe 2019 it was really a struggle to find here uh a curse on d3 a like a leap course uh and well in the internet there's a lot of tutorials uh but but i you know the the ones that you produce are are the ones that really made me understand the tree and this one that was synchronous it was really also i i've learned a lot thanks to this oh great great i'm happy to hear that yeah yeah i remember being on and seeing someone from new zealand i think was on yep so we had new zealand india us exactly it folks from india i think kostov you're located in india right yeah yeah i'm from india quite a diverse set that we have here oh i'm curious where do you live in india uh so i live near delhi ah nice up north you know i lived um i lived outside of nagpur for four and a half years oh well i didn't know that and actually i developed visa when i was living in india i was riding my scooter my honda activa to my little rented office and uh coding this hub all day nice yeah i also like would be definitely interested in like you know seeing this grow and i found it really nice that feature that you just write your code and you automatically see the changes you don't have to press any button or build right right exactly activity yep and and that's that's one of the things that i love about this hub too but the way that it works right now is that every time you make a a change it tote it reruns the entire page and i want to move away from that i want to share with you all brett victor inventing on principle this talk was hugely hugely inspiring to me so in this case the the value because he's got this idea that yeah check this out he's got this we are not seeing the anything oh i'm sorry i have to share my screen in this in this system too i forgot to do that it's live on youtube but not in the google meet but now you should be able to see it okay yeah this is the thing i just want to play this because it really resonates with me spent working in the code working in a text editor blindly without an immediate connection to this thing which is what i'm actually trying to make so i feel this goes against this principle i have that creators need an immediate connection they're making so i try to come up with a coding environment that i thought might be more in line with this principle i have so what i have here is i've got this picture on the side and the code on this side and this this part draws the sky and this draws the mountains this draws the tree and when i make any change the code the picture changes immediately that's what i want to have so the code and the picture are always in sync who did this just change things in the code oh brett victor yeah i see things changing the picture but check this out he's about to do the craziest thing and now that we have this immediate connection between the code and the picture we can start thinking about ways of changing the code other than typing so for example this number here is the length of the branches if i want to control that number i just point my mouse to it hold down the control key and i can dial it up and down that's what i want oh wow i can see what it looks like for big bridges or small branches and i can kind of converge on what feels right to me artistically and this works really well with some of the stuff in the past it's amazing so this video by ve it's from 2012 this video by brett he's a visionary yes and what strikes me about this is it the way this environment this little environment that he custom built for just this one talk it it seems to not reload the entire page it just reruns the code in the page without having to reload the entire html and so i think you know this is the direction i want to take vishub i want to make it so that you can author your code and and updates to the code should take on the order of milliseconds to execute without having to re run rerun the entire html and then from there i want to add like the ability to extract different variables into like little widgets on the side like in the editor of this hub there should be a visual editor with colors and numbers and strings and as you change those it should update instantly so yeah i just wanted to share some some context for why i'm why i'm ending this this series right now so yeah that's it have you been in contact with him on how he's done that no okay i mean he's he's a towering figure i mean brett victor he's yeah so i don't know if he's the kind of person i could just get in touch with you know he's like this this like celebrity figure yeah you know i worked at apple for years and years i think he developed a lot of the the early ui for like the ipads and stuff but hey that's not a bad idea maybe i should just send them an email yeah do it worth a try i guess and yeah someone asked how to support viz hub yeah the best way to support it right now is just to sign up for the the paid plan which is four dollars a month there's current there are currently not that many customers and it's not making money it's not even paying for the servers but um and this is another direction i'm going to take it i want to add more features that people would be willing to pay for so if anybody has ideas i mean i have a lot of ideas like pay for storage pay for collaborator seats pay for white label embedding where you could embed a viz onto a website without the vis hub logo in it custom domains for visits i mean imagine if you could create something at visshub and create it set up a domain name to point to that and so this help could be your website hosting provider so i've got a lot of ideas if anybody else has more ideas let me know and i'd also i also want to make it the best tool out there for professors and teachers to use for teaching web any any courses to do with web technology so what's the best way to get to get in touch with you oh just just email me okay uh at gmail yeah current.kelliher gmail.com all right yep yeah and um i'm on twitter so you know after i end this series i'll still be active on twitter and i will definitely announce um so it's yeah curran what is it current keller on twitter this is where i'll announce um any new developments or activities um okay and i i am thinking of doing like a a beta program where where i invite people to test out the new version of vis hub that i'm developing and so if anybody would be interested in that let me know um i don't have any any onboarding form set up or anything like that you know but let me know i'd be happy to great yeah i'll keep you in mind all right so let's let's dig into this i i want to just wrap up the series by reviewing all the last uh the work that everyone's done for the last assignment and uh responding to whatever questions that come up i don't have any prepared material that i'm going to go through today so it's really just more of an informal discussion sort of a thing so let's see oh kostov is here with us um custom you want to walk us through what um what you've what you've done yeah sure so like i took a copy of the scatter plot templates template that we prepared last thing and plugged in a data set which comes from this tidy tuesday project which also runs on twitter so this is run by the r for data science online learning community and they release like new data sets every week and this was a data set that i hadn't explored before and just wanted to try out like explore it a bit further and thought like using d3 and the and all the things that you've learned over the past past weeks to create this wiz it shows the i think the median income median household income over time and varies by the different communities so as you can see that there's a significant difference between like whites and blacks and hispanics so this sort of brings out the income inequality which is still prevalent wow this is amazing and what where is this localized is it for the us or globally or yes so this is just in the u.s so it's the entire us yes yes wow i think the original data comes from the us census right oh great urban institute that's a great group great great work good stuff uh i i have a question for current about this beast yeah it's okay sure um is there a way because i really love the idea but but i think that maybe if the labels of the years are exactly a correspond exactly to the to the point it could be more easy to to read is there a way for the xaxis the scale xaxis come on process that or or do that let's take a look yeah i think that would be a very nice edition but before we dig into that i just want to say that this is exactly the kind of work that i was hoping for where it actually looks at a an issue in the world and i just want to take a second and i will i will get into that that question but i just want to take a second and think about what it means that white people in the u.s are earning it looks like on the order of you know 160 k up and down whereas black people in the u.s are earning on the order of less than 40 000 a year i mean that's profound that's that's a profound piece of information also yeah i was also surprised when i looked at sad to revisit the raw data just to confirm like i hadn't read it incorrectly or right like is that correct like oh my gosh that's what i was wondering there's such income inequality like this is the median what's the the metric yeah this this is the median median household earnings adjusted for inflation i think yeah it's adjusted for inflation what is shocking to me as well that that that this difference is not improving in time right it's not improving at all it's it's you know it seems to almost have been getting worse and if you if you if you inspect the median of the white group again you would see that they have increased in time right rising up compared to the other ethnic minorities and this big gap this big gap here must have been the 2008 um financial yeah financial crisis recession whatever they call it so that seems to have impacted everyone but it is it is shocking and like disturbing like why is it that white people earn so much more than black people i think that's that's ridiculous and just i you know thank you costa for selecting this particular data set and servicing this particular issue i think it's a very important thing to look at and can i say as well you brought last time you brought an important point that animation need to serve a purpose and it's nice seeing it's not it's not very nice but it's it's very telling seeing those points drop when you start yes i agree it's a very great use of animation yep and i would be curious to to do a similar analysis for different countries across the world and see if the gap is so high in other countries as well or if it's something that's unique to the us i don't know i haven't looked at the data but that would be an interesting analysis or maybe have this broken down in males and females as well right that would be another good analysis yes for sure for sure and then once you do that the possibilities of different ways of visualizing that increase dramatically because you can show multiple things at once and yeah that's one thing i wanted to get to with this course of like the variety of visualization types but we didn't we just essentially worked on scatter plots but i think that's okay because because you can build things that are interactive and scatter plots actually cover a huge range of data and so the first first thing you can do with any data set is make a scatter plot so yeah amazing word costume now um who asked that question about aligning i did great great let's dig into that because i agree i agree this this apparently uses the builtin axis of you know from d3 which is not the same as the data points and so makes you wonder you know for a given dot what year is that right and i agree that that's a that's a good that's a good issue that i want to see fixed i'm just scrolling through to see what is actually going on here's the xaxis so if we just comment out that oh i forgot the dot call line if we just comment that out it renders without the axis which is fine although i kind of like i kind of want to keep the visual elements of the axis um so i'm just thinking how could we do this we could do some other rendering logic where we we render these tick tick marks ourselves or we may be able to configure d3 axis with a set number of points i believe we can do that let me just consult the d3 documentation yeah i think so ticks so yeah the nature of the tix method is not just one format see this is the format that we're using like 10. and then oh put something in the chat oh which jet google me nice so i'll copy it from the chat and take a look this is i'm pasting from the chat c dot tx6 i still don't think this will do what we need because what i'm thinking is we may be able to pass an array of specific values into ticks that's what i'm trying to figure out see this this one here you it this passes in an array to ticks which leads me to believe that i think we can pass in an array of of dates so let's just try it instead of passing in ticks 10 what if i pass in an array that has just a single date where it's like uh the year 2000 does that show up no if i get rid of the formatter no do i huh i'm pretty sure there's a way to specify oh look here it is sorry to set the tick values explicitly use access dot take values yeah yeah yeah this is what we need this is what we need all right let's try that so i'll just undo to where it was before and then what if we say dot tick values and here we pass in a new date year 2000 boom that works see right it says 2000. and so now what we need to do to implement your idea is to just isolate the unique dates that appear in the data which should be relatively straightforward let me see what is the structure of the data well we already have x value which is perfect and i think this is the function that we need right here data.map a function that just returns all the x values all the dates or for that matter for that matter we can um um wait a minute wait a minute i was just thinking could we use x scale domain no we can't because that's the extent of it which we don't want so i'll just try this if i copy that down into the place where we put new date that does the trick awesome that was success that's impressive great beautiful yeah this is exactly what you were describing and i think it is a very nice improvement to the viz because now you know exactly what year each of these are and it's kind of surprising which years they selected i mean it doesn't seem to make any sense there's not really any pattern to it is there i mean i think it's every three years since 1999 every three years yeah yeah with one listen in 1988 interesting i wonder why they chose every three years well i guess that's the census every three years interesting oh i see there's a message in the chat from people's feelings you want to describe that oh yeah this is i was working on a similar thing i don't know if this is directly pertinent but just in case you wanted to look at it nice it's the same as the earlier approach you looked at what is the approach because it's a scatter plot and it references a cell this is from observable hq so tornado years is an array but this this i mean this will create an axis that just has the ticks that are defined by the like default tick generator setup so i don't think it actually addresses the issue that we were having oh sorry where because yeah we the issue that we wanted to do is is make it so that it's not just like every year or every 10 years or every five years but it's actually just the ticks from the years that are present in the data but yeah thank you thanks for that can you have as well default labels default labels how do you mean so i was i was experimenting with something and i felt completely um say for example you have a a categorical variable you want to you want to show but one way of showing that is assigning numerical values for those say zero and one and by and by adding jitter you allow the points not to position themselves over each other but then i got stuck with the actual label on the axis because then they display zeros and ones and and i want them to display back those categorical strings is this something invis hub that we could look at i've i failed completely to put it into his home oh it's not there okay it's not it's not i apologize it's just an idea in my head i see but you tried it you tried something i for for the exercise i wanted to represent data from the titanic and i wanted to show those uh say different deck levels but i want to show them as numerical values with a little bit of random jitter so the points don't position but i wanted to add the labels in and i kept turning in my head and i felt completely i didn't know where to to start from really reading that is basis of my question like a label over each point of the scatter plot uh like the current scatter plot we have but instead of saying 2005 you you you want to say say for example the financial collapse year you you may want to label that financial collapse instead of 2008. so i think what you're describing it's a lot like species right where you have discrete values and you want to map them to some x y like this yes so suppose in your data set those species were represented by three different numbers one two and three right but when you want to display the access label you want that they you want that access to display the actual species strings oh oh i see what you're saying well in that case you could do a data preprocessing step where before you pass the data into the visualization code you can just replace those numbers with the strings in the data but then i would lose that bit of jitter i would have on those values so they say i i i encountered the same challenge and you know um and i was able to i don't know if that's the correct approach but i was able to add jitter to a scale point even though it was a discrete variable um it it's it a current if you want to to show my example it's in in in the in the forum and i think it addressed i i believe it addresses this this issue oh great is it in here in this thread yes that's the one oh this one ah let's take a look very so if you put the the continent in the yaxis and the date inscribed in the xaxis there's a little bit of jitter big and that way it's not like a like in the in the setosa example in the in the flower example it's not like on the same exactly exact line this is brilliant exactly exactly so how did you do it uh look the the y scale i believe i i added some at random there at some point so it's not in it's not in the scale definition it could be in the is it in the y value accessor perhaps i don't know i i you know i i look for examples yeah it took me a time a while to figure out you know i uh i borrow it from somewhere so i don't remember exactly where i put it so it's not there it must be it must be in the rendering yes wow let me just search for a random there it is yeah it's right in the rendering logic see that makes it that makes perfect sense and that's how i would have done it as well yeah i see now i see yeah so right before you render it to the point add the jitter which is just a random number times 10. however math.random you have to understand it varies between 0 and 1. and so this code here will jitter the points only in one specific direction meaning it's it's gonna it's going to be the original x or greater so it's going to be some place between the original x and the original x plus 10. normally jitter would um would move it in both directions and the way that you can do that oh it's i have to fork this to edit it and another just another side point i want this hub to show the previous authors too because it looks like i made this but it's not my work so that's one thing i want to address but the way that you could do that is something like 5 so then it would it would be x plus or minus five randomly and in general that would be like if you could you could if you wanted a variable for jitter you could make it like that and say random times jitter minus jitter divided by two yeah jitter is an interesting technique just adding adding random variation and this one actually if you were to put a bunch of points and jitter them like this what you would see is a square not a circle because it varies them in x and y in a square i've seen other people do jitter with such that when you generate you would see a circle and so then what you want to do is compute a random angle and a random distance from that angle and do the jitter like that that sounds difficult it's it's not that bad i mean you just need some sine and cosine it's easier to just create a function for for this right yeah actually that's not a bad idea yeah because there's duplicated logic which is unfortunate so we can call this jitter magnitude and we can make a function it's just a number and then we just do the jittering of that number and so that way we can say d is jitter of d dot x and then jitter of d dot y that would be one way to do it um uh you're defining jitter for the jitter it's a recursive i whoops this one i forgot to change the name ah there we go yeah jitter is an interesting technique but there's another technique that i like which is the force layout and in certain cases the force layout could be better than the jitter and this comes back to this notion that you mentioned here it is yeah so in the original question it was like how do we how do we split up how do we split the points jitter is one option but with jitter there's still a high probability that they're going to overlap each other however if you use d3 force with the collision constraint um it has a similar effect to jitter but it guarantees that there's not going to be any overlap and this this could be a really nice option as well yes especially because my purpose was to like visualize each else that you were able to visualize each element each retouch element so i think that this solution is more proper to accomplish that goal yeah i think it's it's more accurate in a sense as well i'm trying to find a good example it gives a better sense where points cluster at specific places as opposed to jitter yes yes because for example in my in my in my case i i wanted to show how in europe there's a disproportionately amount of heritage elements and and you can't really see that in this version because because as as current says there's a lot of overplotting in in europe right yeah yes if you did the b swarm on this layout or maybe this one that would be a very that if yeah i would suggest to try that to try the force layout the force directed layout with the collision constraint for this exact view without the jitter that way you would see that like with this this really dense area here in europe it would actually spread up and down it would give you a a visual up and down spread so you could really see the the quantity like the density of the points much more clearly than in this view yeah that would be similar to sort of a quasi quasidot plot yes yes and and also almost reminiscent of um like a violin plot but yeah this is really nice work so i'm curious did you see any insights from the data in here that surprised you well that's the main insight that i put because i i read the that before the 90s there was a like a really disproportionate amount of a cultural and natural heritage sites in europe and there was less of a presence in latin america africa and other parts of the world but but you can't really see see that with these visualizations you know and it was surprising maybe it's because of this visualization doesn't show it but but i didn't really see that that a temp temporal trend with this visualization but but indeed europe has like them the most every touch size sites declare by unesco so that's the main insight you know i see i want to try i guess that other thing i thought that i really loved about this plot just from an artistic standpoint was that how it showed the world map oh yeah indirectly yes yes indeed in the readme section i i said that it's really a map but but i like i don't i haven't learned yet how to make it but but because i use latitude and longitude it really it's it resembles the the geographical points yep totally yeah i i can talk a little bit about about how to actually make it a map but first i kind of want to try tweaking some of the things that we have available to us to tweak to to show more clearly the things that you're describing one thing is if we pull the opacity way down that helps to show density in europe see that right yes definitely and then if we do it by continent and date i want to try making the radius more so instead of a radius of 5 let's say a radius of 20. oh see ah this is this is one thing where like the next version of this hub i want to be able to tweak the radius but have it remember which things i selected you know what i mean now maybe that's a little too big let's say 15 but then i want to bring down the opacity even more like .05 now we can see a little more clearly how dis disproportionate the density is in europe and if that's the thing you want to highlight it's it's currently confounded with the colors it's hard to tell based on the colors so just to tease out that one thing if i just make them all black oh whoops that should be date continent now you can see it more clearly see yes definitely right man i'm it's impressive how it gets almost completely black it's a heritage xray is there a way you could also filter on the counts and then switch up the color once it hits a threshold so that it pops so you could have it red yeah that's a great idea to do that you yeah and hey if you wanted to show that europe has more or less the message with this probably that that's that's the thing to do is to aggregate it by binning it by the years and then maybe applying some smoothing even and then you would have um an aggregated view where you could apply a threshold of say if it's more than 100 per year make it red or something so it really pops yeah that could totally work and to do the binning you could leverage d3 histogram i think it might have been renamed to d3 bin or is it banned no it's not banned it's ah it's bin this is the one so this this example is a normal distribution of like a thousand points oh sorry i lost it and then what it's doing is it's it's calculating the number of points that fall into each bin each bucket and in this case each bin is like 0.5 or 0.05 or here's 0.4 0.5 so 0.05 is the the width of the buckets but you could bin by the years and so yeah that's that's one thing i would suggest to try is binning by year and another thing that now that i'm looking at the visualization i i think that that it it doesn't reflect the message uh so clearly uh because it i mean the main message is that for example asia that's a continent with a a bigger population than europe has significantly lower heritage sites so their culture is not being like highlighted by unesco as much as europe and and because the population for example it's not being considered in this vist you don't really see that disproportionate a reality you know yes this is so maybe i i i should i should i should have done that data a transformation before to to highlight that disparity but those are the kind of things that i'm thinking now when when i hear about you guys yeah taking the population into account would be quite interesting as well why africa was doing much better in the 60s compared to later years that's a great question i don't know but that's a great question so 1980 there's a lot more heritage sites defined in the 80s and by the way this this number formatting is not right that's something we could fix see in the um see why type what is y type for the so i'm i'm looking at the problem of the number formatting and i'm thinking to myself those should actually be just represented as years without the comma right and this actually is i'm glad you did this because it highlights the fact that we need another type which is which is right i just put it quantitative like date as quantitative not as date exactly oh i'm so happy that that this happened yeah so now we can actually do that next step which is the the complete the completion of this generic scatter plot make it handle quantitative categorical and time or dates uh what is the type of that i'll just call it time and if it's time we need to have a time format which is how we parse it zan armstrong has this really great time formatting example so the specifier for the time parsing would be if it's just year it would be this one percent y and i'm pretty sure that's what it is in the data if it's showing up like that and so now let's actually do this work of making it work with time so let me get more space for the code so we're looking at just x if x type is categorical then do this otherwise this is where i want to introduce another another case where if x type is time then do their switch and case for javascript oh yeah we could do that we could do that yeah as we add more of these it's getting a little cumbersome to use this this ternary operator yeah that could work but i feel like this is pretty close i mean we're pretty close to having just one type it doesn't make sense to create another logic for this yeah but at this juncture i mean it's a good thought and and what i would do is get it working first with the minimal effort and then after we run prettier on that then we make the call like is this ugly enough to merit a refactoring where we use the case switch and then we would we could write it with the k switch and see how it looks and that might turn out to be more more code more complicated so yeah it's a good thought it's a good thought but let's try to get this to work so it would be exactly the same as scale linear except that it would be scale time which we need to import from d3 and now that i think about it we may not need to specify the time formatter if the data is already parsed into dates which i'm not sure if it is let's see where's the data loaded where is the data await oh parse row parser where's that here it is yeah yeah yeah so this is where we can say instead of just parsing the string into a number like this we can use time parse or yeah we need to come up with a parse date function that we can pass in that string and the way we can use um d3 time format or no i'm sorry time parse and then we can use that percent y to parse those into dates and we need to import time parse from d3 and let me just see if it's working by logging these out okay they appear to be dates that's good and yeah i think i implemented all the all the logic let's see if it works it does see that awesome this is great yeah this so now we have a truly generic scatter plot that can handle dates as well but we're not quite done yet because the code is kind of a mess i'm going to run prettier on it yeah i mean it's okay but it is a little cumbersome with with two levels of this um you were asking about the switch statement let me see what time it is oh it's noon yeah let's try the switch statement i always like to look at mdn for examples this is what the switch statement looks like in javascript so let me copy this and try it out okay so if we use a switch statement we're going to have to use let so i'll comment this out for now and let's just see how this plays out if we do use the switch statement let x and then we are switching on x type and if the case is categorical then we say x equals this one here and then if x type is time then we use this one here x equals that break we need to put these break statements otherwise it continues down to the next one and then finally if it's quantitative uh which we're not even explicitly stating here we're assuming that if it's not categorical and if it's not time it's going to be quantitative i think that's fine the yeah yeah we could so we can use the default here okay yeah and then to the last case is this one x equals scale linear and i'll try prettier on this this is what we get and let's see if it still works oh there's something we didn't we didn't assign it back to the xaxis we didn't assign the new x back to the i think we also need to assign that range which we did oh i missed the range i missed the range ah that's what it is good catch so yeah the way that this works is the return value from this expression is you know it's the value of x and then we say dot range so what we can do is just say x dot range like this okay that works yeah great and so now it's up to us to decide which version is more aesthetically pleasing yeah in this case maybe the if and else makes sense but maybe if we increase the number of of options then switch would be better i i guess i don't know yeah i like the case i i was wondering just from uh i don't know this style um works in javascript but could when type is passed in could that automatically call a function that would render uh that logic for the x assignment oh yeah i know in other line other languages where you just so so that you don't have anything there and that each of those would be a function of itself oh yeah i think i think it may be complicated by the fact we have different types of domains depending on those different scales and actually i like the idea of abstracting it out into a function that way we could call the same function for x and y and we can we don't need to put x and y in our in our stuff so we can just have it a function of type and data and value which is going to be the accessor and in this case we can just move this into the function and then instead of instead of x we can call it scale and then we can switch on type and then instead of x value we can use value all these places oh type is not a reserved word here i don't think it is no in javascript i don't believe i don't believe type is a reserved keyword okay and then we can return it at the end and then all we have to do is say x equals compute scale x type data and x value and that still seems to work and then once we've done that we can use it for for y as well so we actually get rid of a bunch of code which is great but the question remains when we implement that function should we use switch or this other thing i mean it doesn't really matter but this is the process that you that you go through and this is what i wanted to also convey in this in this course is like what is the process of writing code you have to make so many decisions evaluate things based on efficiency but also you know aesthetics and you could do the same thing with if else if you know you could go on and on trying different ways and i actually do that when i write code i spend time evaluating all possible ways of doing one thing and then getting them all to work and then looking at the code from a number of angles you know how easy is it to read if i give it to somebody else in the future how easy is it going to be be able to be understood by someone else and also how efficient is it does it create additional new objects that you don't need to does it need to be optimized anyway these are all considerations um yeah so in your switch scale is assigned once yet you still have to declare it as let because it's going to go past one of these cases only and it's going to be assigned once but we still have to declare it as lead not const i believe so yes if you have the um well actually let's do some experiments with that if we don't declare it there and we declare it here i'm not sure if that would work i'm not sure what the scoping rules are for for the switch statement but it says it gives us an error that says the identifier has been already declared in the same scope so this approach would not work i see and thank you if you if you use const here that's also not going to work oops that's also not going to work because oh well you need to assign a const uh when it's declared but here's here's another approach that could work if you don't define any variables you could just return them like this actually this this simplifies the code quite a bit then we don't need the breaks because when we return it's implicitly breaking out of the whole function however we need to pull out the setting of the range to be outside this function which is again duplicated logic down here we'd have to do it twice so that's sort of a dead end i would rather not do it like that ah so let's see is it still working there seems to be some problem oh i set the range or what happened sorry somehow it got messed up that's odd it was working a second ago is it because we missed the brakes again no the brakes are there is it because like the range takes this width thing like but for my skin you would need like yeah that's it oh good catch good catch so in that case maybe we do want to use the return approach and then set the range separately that's what it is that's exactly what it is so the range for the y scale is going to be well let me just see what it was in the one that i forked it from i accidentally assumed that the range would be the same across each but it's not that's the right range yeah that's right and then now we can just use return but let me keep this around as a reference so this is option three this is option two and i was just thinking to myself if we're going to use a return we may as well just use if statements which might be even more clear to read if type equals categorical then return this kind of a scale and since we return it we don't need to use elf we know if we don't need to use else we could just have another if so if it's time then we can return this one and then if it's nothing else then we can fall through to the default of the linear scale so this also works as an alternate way of doing it so yeah it's up to you it's a stylistic choice um i personally kind of like this just because it's only a couple lines one two three four five six however it could be cryptic for others to read if you hand it off to somebody else so maybe maybe this is the best choice or maybe this is good i don't know it's it it's a it's a very subjective choice but yeah this this has been fun really nice work and i like how how all of these i mean this visualization as well as the one that kostov worked on it highlights social inequality issues which i think is a very important topic area to address with data visualization in particular because it really makes clear things that are in the data they're clear in the data if you look at the data in the right way and so yeah i think this is a valid point like why is why are there so many world heritage sites in europe does your is europe really the like center of civilization or is it just you know is this unesco neglecting you know other countries out of some kind of i don't know racist underpinnings i don't have no idea i have no idea about it but but just to start investing these investigating these angles is uh it's great it's really interesting seeing how removing colors have brought this much clearer right because color itself has a brightness value to it it's called there's hue saturation and luminance in colors and luminance is the luminance means how how much between white and black it is but if you have hue um it confounds the the brightness i mean yes and i think it's full circle that this is get it right in black and white right and we and we turn the the visualizations into black and white exactly finally exactly yep yeah i'm happy it ended up in black and white turns out black and white is clear it's more clear and it's the same with 3d by the way if you see 3d pie charts 3d scatter plots it's it's the same kind of thing as adding color where you just make it like more flashy but it doesn't really add any value most of the time so yeah as a next step for this i would suggest trying to do the binning and the smoothing and i wanted to show you all this thing that i built fairly recently that that does exactly that it's a stream graph of d3 contributions over time and what it what i did is i took um d commits commit data from git from github um on all the various d3 packages and i i've been to them by i think weak and then i applied smoothing and i wanted to show you the effect of of changing the smoothing parameter see if there's no smoothing it looks something like this this is just the raw aggregated values per week and i think if you were to aggregate the data that you have per year you would get something kind of similar to this but with you know with a different layout and you can apply smoothing though to get a more broad picture of of generally when things increased or decreased it's a smoothed out view of it and for this particular analysis the smoothed out view was much more useful than the detailed view you can see clearly okay d3 was developed monolithically from 2011 to 2014 and then it was split into a bunch of packages and then some new packages were created after that the the other thing is it gave you an opportunity to annotate which she just couldn't exactly exactly there's no room for the labels in the version that's not smooth exactly yeah yeah and even if you hovered over you wouldn't get the insight yeah it's tricky to to hover over each and every one to try to figure out what it is yeah so i forgot what it was originally 15 maybe that's cool so yeah this this one was a lot of fun to make i had hoped to continue this series and get to making something like this but uh you know in the future i'll do it in the future all right well i think i'm gonna wrap up but um let me see yeah i'm gonna wrap up thank you all for joining me for this this ongoing saga of uh get it right in black and white with vishub as our as our tool and uh yeah i'll see you in the future sometime and yeah feel free to reach out to me um if you want to get involved with upcoming versions of his hub maybe be a beta tester and just and let me know if you have any feedback on viz hub in general or the way i'm doing the courses ways that things could be improved what you've gotten out of it what things that have been frustrating i i want to hear it all um all right so thank you all fantastic and he finally thank you so much yeah my pleasure thank you queen thank you i'll be in touch all right great and if you want to support me in the meantime sign up for this measly four dollars a month and it'll go a long way yep done all right thanks everyone thank you thank you ryan take care thank you bye bye bye