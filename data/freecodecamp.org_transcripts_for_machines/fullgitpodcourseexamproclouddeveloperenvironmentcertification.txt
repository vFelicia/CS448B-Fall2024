hey this is andrew brown your cloud instructor exam pro bringing you another complete study course and this time it's the exampro cloud developer environment certification made available to you here on freecodecamp so this course is designed to help you pass and achieve example issued certification and the way we're going to do that is by going through a lecture content doing follow alongs within our own account uh doing a practice exam so that we're preparing for the day of the exam and also utilizing cheat sheets so that you can cram some last minute information so that you're able to pass that exam and improve on your resume and on your linkedin you've got that cloud developer knowledge so you can get that cloud job or that promotion so i'm andrew brown i was previously the cto of multiple edtech companies with 15 years industry experience five years specializing in cloud i'm an awesome community hero and i've published many many free courses just like this one and if you ever want to buy me drink i love coconut water i want to take this moment to thank viewers like you because it's you that make these free courses possible and the best way you can support more free courses like this one is to buy the additional study material so that is the link there at the exp cd01 where you can get study notes flash cards quizlets downloadable lecture slides downloadable cheat sheets prax exams you can ask questions get learning support and it's all free to sign up yeah just to even get your prax exam cheat sheets so it requires no credit card there's no trial limit so there's no reason not to sign up um and if there are updates to this course look in the in the youtube comments to see when there is an update and this is where we would see things like corrections additions modifications to ensure that you're using the latest version of this course and if you want to keep up to date on upcoming courses the best way to find out is to follow me on twitter and share with me what you passed and what you'd like to see next so there you go let's get to it journey asking the most important question first which is what is the cloud developer environment certification so the cloud developer environment or cde is a practical cloud certification center round of the open source developer tool get pod and here we're going to learn about the benefits of cloud developer environments over traditional tools practical knowledge utilizing a cde for the purpose of application or cloud development teambased collaborative uh features for utilizing cds because that is the main benefit of cdes advanced cde techniques like custom containers prebuilds and more the course code for this course is exp cde 01 and the reason that is important to know is because that's how you know what version of the exam you're taking so you always want to make sure that you double check to make sure that you are using the latest course there and so exp is the certification authority in this case it is exam pro cde is the name identifier standing for cloud developer environment and one is the version of the exam we also like to call this exam the get pod essential certification or the git pod course because it's so focused on git pod but there's a reason why this uh that is and we'll explain here in a moment so who's the certification for well consider the cloud developer environment certification if you are new to programming or scripting because if you are working in the cloud you're going to have to have an environment to code and the best environment is in the cloud at least in my opinion here if you are a web application developer role or you're transitioning into a cloud developer role it's a very good idea to adopt cloud developer environments or if you're a director of engineering or staff engineer and you're looking to adopt cd cdes to optimize the jillian and productivity of your development team because that is the main benefit of adopting it is that you're going to get increased productivity so before we look at the roadmap we always do a roadmap to show you where should you go after the certification but i need to break this down into three types of certifications because this is an exam pro certification and so we have three types fundamental certifications that's where we have a cloud concept that is best taught with a large focus on cloud agnostic knowledge so example of that would be the cloud programming certification we have technology specific certifications like a cloud concept that is best taught by using a single technology in greater detail and in this case that is what the get pod certification is it's it's just that you know we want to teach cloud developer environments but it just makes sense to use a single tool for that then there are our rolebased certifications so this is where you have done a bunch of fundamental and technologyspecific certifications and then you are requiring to submit a project to earn that role so an example would be the exam pro's cloud developer certification so let's take a look at our roadmap and see where we can go with the git pod certification so the idea is we have that fundamental knowledge that technical specific knowledge and then the idea is that we're trying to show that proof of combined knowledge to earn that rolebased certification so this is all based for a cloud developer or modern application developer there's overlaps with other cloud rules like cloud engineers but let's take a look at the cloud developer specific path here so the idea is that you would start with the cloud developer environment because if you're going to be doing programming or development you're going to need an environment so it makes sense to know inside and out a cloud developer environment from there you would need to know a variety of different programming languages in the context of cloud programmings working with sdks apis cli things like that so that is the natural path after the cde from there we would look at application integration so leveraging uh a host of cloud services and integrating them into your uh traditional or your modern application and then cloud deployment because that seems to be something that is very important for cloud developers is having not just the ability to develop applications but to deploy and it's not just deploying applications but deploying uh integrated services as well from there it's really good to fundamentally understand virtualization which is not a topic that uh it kind of gets overlooked with the cloud developers so that's where application developers so that's why i think we include it here from there there is linux specific information there's windows specific information and for virtualization a natural path there is containers and then serverless so to me this is the scope of fundamental and tech specific knowledge that you should acquire to be a cloud developer and then once you have this knowledge you need to prove it some way and so that's where we have this idea behind having a cloud project to show all the knowledge and practice so you might be looking at saying wow that's a lot of certifications well the great thing though is that these certifications are smaller in scope and so instead of taking a big big exam like how aws azure or gcp has you do these are more focused so that you're having a bunch of smaller wins and you're getting better coverage um so you can think of it like a movie versus watching a high production long running or like a high production tv series it's just a different approach to um study okay so how long does it take to pass for the cloud developer environment so uh we have the beginner side and so here i say 24 hours the idea is that if you've never programmed before if you've never held a web developer role it's going to be on the greater side here 24 hours if you're experienced that means you have practical working experience with web apps you have held a web developer engineering role we're looking at 14 hours and so in between here this is where i say the average hour is 20 hours now this could be a lot faster if you just watch the videos on two times it's up to you right so like there is 14 hours of content it's mostly because of the the lecture or the lab content so there's a lot of handson but you know if you watch it uh on two times then you know you're done in seven hours if you're experienced so just understand that you know it looks like a lot of hours but it's not as bad as it looks um it's 50 lecture lab content 50 practice exams and then the recommendation here is to study one to two hours for 10 days okay what does it take to pass the exam well the idea is you're going to be watching lecture video memorizing key information you're going to be doing handson labs and there's a lot of it so follow along with your own account so you'll have to get a free gitpod account and any other things that go along with it and we make sure that we always make sure things are free for you so you can learn at the the lowest cost or at no cost and you'll have to do practice exams to simulate the real exam the great thing is on exam pro we have a full free practice exam for you no credit card required uh to get it so it's at exp cd01 and that's where you're going to go grab that in terms of the content of the actual exam it's broken up into five domains and each domain has its own way which determines how many questions in our domain that will show up so we'll take a look at the domains the first domain is cloud developer environment concepts which is seven percent uh get pod integrations which is five percent thirty uh uh domain three which is good pod configurations is 35 percent get pod workflows is 35 percent and 18 for get pot io enterprise get pod oss so you know when we engineered this course we didn't just make it for people that are going to apply uh um uh apply it for their work but just also for that executive level that needs to understand how to adopt it for their team so that's what this category here is for is understanding the ecosystem for adoption um and you know a lot of it comes down to just knowing how to work with it as a team and knowing how to configure your environment to be productive in real world use cases so where do you take the exam well the exam is taken online from the convenience of your own home and this and the exam is delivered via the teacher's seat anchor system so teacher seat anchor is an online secure exam system to deliver certification exams similar to pearson vue or psi online and ensures exam credibility via their ai assisted proctor so a proctor is a supervisor or person who monitors students during an examination so that way we make sure that you're not cheating uh and that you definitely have obtained the skills yourself there um to schedule exam uh what you'd have to do is actually sign up for example so you keep seeing this thing up here you do have to go there to do the exam but once you sign up you can go uh into the course and click on the schedule button and from there you can schedule your exam it'll have all the information there for the grading exam you have to score at least an 80 percent we say around 80 percent because this uses scaled scoring skilled scoring just means that we use a point system and so the idea is that you know tomorrow we decide to make it out of 2000 points it's still going to be based on the percentage of 80 percent so when you go for the exam make sure you're trying to aim for 85 percent on your practice exams to make sure that you are comfortable uh with the exam when you go sit it for the response types um first of all first off we have 55 questions so all questions are scored there are no unscored questions and there are no funny questions so you know uh it shouldn't be too difficult you can afford to get about 10 questions wrong there is no penalty for wrong questions and the format of the questions are going to be multiple choice and multiple answer the duration of the exam is 1.5 hours so you get about 1.5 minutes per question the exam time is 90 minutes the seat time is 120 minutes and somebody say the seat time we're referring to the amount of time you should allocate for the exam this includes time to review the instructions show online proctor to your workspace read and accept the nda complete the exam provide feedback at the end and this exam is going to be valid for 36 months so that's three years before recertification so hopefully that gives you an idea of what you are jumping into here again the exam is not intended to be difficult it's very practical if you follow the content here it will be pretty easy for you to do but yeah there you go hey this is andrew brown and we are looking at the question of what is cloud native and now this is not a as straightforward as you imagine because there are a few different definitions here so we're going to have to go through a few little iterations here to just kind of conceptually understand what it is but cloud native at least the way i describe it is an architectural approach that emphasizes application workloads that are portable modular and isolate between different cloud deployment models and cloud service providers so that is what my definition of it is but if you talk to cloud service providers and we say cloud service providers we're talking about aws azure gcp they describe it as a term meaning everything built on their platform so you know if you were not to use onpremise and only to ever use aws they would call that cloud native but i would actually better describe that as being cloud first so sometimes cloud native and cloud first mean the same thing depending on who you're talking to then there's some models out there that say that certain components go into cloud native so modern design automation micro services containers and a bunch of backing services and then other ones describe cloud native as being four principles so micro services containerization continuous delivery which you could say is automation and devops which could mean anything because devops has so much stuff involved but you can just see that there are a few different things there i'm hoping that we lean towards my definition because i feel like that is a more comfortable one there but if it does feel confusing don't worry about it it's not just clearly defined it's just kind of like serverless where it's hard to pin down but in the context of git pod and cloud developer environments cloud native means we'll be utilizing microservice architecture modern application architecture so think function as a service such as containers and kubernetes okay so hopefully that and when i say that it's just the fact that when you have cloud developer environments they're going to be better drivers or enablers for modern architectures okay hey this is andrew brown and we are taking a look at two very similar but also distinct roles or technical roles that strongly benefit from cloud developer environments or cdes and so that is a cloud developer or a modern application engineer and uh you know cds can be used by any kind of role that's working in the cloud but these two in particular uh strongly benefit because they're writing a lot more uh programming code okay and also interacting with cloud workloads but let's talk about how they are similar and also how they are different so for both these roles they take a cloud first approach meaning that generally they're starting um you know on a cloud service provider you know in the case of modern application engineer you can still be doing that on premise but generally uh speaking they're going to be focused on using a cloud service provider first in terms of like how the role is focused for a cloud developer they're focused on building out the product and the product features whereas a modern application engineer is architecture focused so they're more interested in how to make the underlying resources work and scale and things like that the cloud developer is specifically going to focus on application integration with cloud services so that's what makes it different from a regular developer is that interaction or the interconnections with other cloud services which enables you to basically build microservices and for a modern application engineer they're architecting cloud native workloads so that might be setting up like a kubernetes cluster writing infrastructure as code setting up automation and things like that uh and then you know just some other things like things that you would see that a cloud developer would do that a modern application engineer does would be things like deployment by knowing some infrastructure as a code not a priority for them but it's just something they definitely know whereas the modern application engineer has things like automation scaling and operations so just to reiterate here uh it's like if you're taking a cloudfirst approach to building web applications using cloudnative workloads or cloudbased tooling that sounds like a cloud developer and the focus is less about the architecture and life cycles and scaling and more about it being a productive developer using cloud and then on the other side of it we're looking at the modern application engineer it's about thinking about how to architect applications using serverless containers microservices there's a larger focus on the underlying architecture lifestyle life cycles and scaling not so much about building out the web application and it's less product focus so you know i just want you to know these two things because if you are entering cloud these are the titles you should be trying to cling on to if you really are invested as a programmer okay hey this is andrew brown and we are taking a look at code editors versus integrated development environments and the reason why is because git pod supports both and these usually look very similar but they are also dissimilar in a lot of ways and it's good to understand the tradeoffs of using one over the other so let's talk about a code editor so a code editor is for writing computer code and they will generally support many programming languages with things like syntax highlighting in recent years code editors will include a community marketplace for extensions that allows you to add a variety of features to customize your code editor for specific workflows so the thing is back in the day when we had code editors they were very simple and the only way you'd have like really rich functionality was via an ide because it had everything there for you but now things have changed and things are a lot more modular and flexible but notable creditors would be things like visual studio code sublime vim notepad plus plus textmate things like that then we look at integrated development environments so an ide is a suite of tightly integrated programming tools under a single unified gui so an ide are generally more powerful than code editors and are specialized for a specific language or framework or you could say they are very opinionated for a specific framework or workload so they will include things like a terminal code editor debugger compiler deployment file management and all sorts of tooling notable ids here would be jetbrains eclipse xcode android studio visual studio and in a lot of cases sometimes it's the only way you can really develop stuff it's really hard to develop mac os applications without xcode it's possible but a lot of times you know the technology is so well designed for that use case you end up using ides but i do need to note that modern code editors can be modified through a collection of extensions to work nearly the same as ide so that line is becoming a little bit blurred but let's just look at the uh overall comparison so code editors are multipurpose modular light portable and generally across platform when i say they're portable like them which is a code editor can be something that's used in the browser as a desktop app or even in the terminal but then you have things like ides uh these are special uh so in contrast they are specialized monolithic heavy designed to be used as mostly desktop apps because they need a full gui and may not be crossplatform but we say as a desktop app um you know that's starting to change because like jetbrains is now able to use jetbrains projector to run in the browser so you know these things are starting to meet in the middle but it's still good to know the difference between these terms but most people these days are using code editors okay hey this is andrew brown and we are taking a look at the seven benefits of cloud developer environments so i just want to know this isn't like an industry standard but these are the things that i thought that were the most important things to highlight about them so if you are talking to someone trying to understand why to adopt a cde into in terms of your company workflow these are the seven things you should be telling them the first is context so you can start a runtime system runtime system is just a developer environment on the context of your workload so pull requests uh maybe based around an issue a testing environment or a sandbox or q a then there's mobility so easily move to different workstations so whether you're on mac to windows to linux um all you need is a browser you can use multiple kinds of version control systems so maybe you're on github today tomorrow you might want to use gitlab or bitbucket things like that works with different kinds of editors so maybe you like visual studio code but you'd rather use jetbrains so you have the ability to move between them or you know maybe you are on a laptop a chromebook or even a tablet so you know there's a lot of mobility you get there then we talk about agility so quickly start up developer environments no time spent configuring your environment uh and so that's a pretty clear one it's just the fact that uh you've already put in the work for the configuration either other team member has or you have and the idea is that it's going to spin up and start that up right away then you have disposability or they're being disposable so always start from a clean point discard long live credentials at the end of a work session what's really important to understand here is just like or like a use case is the fact that a lot of times you'll install like uh libraries and if you're working with multiple projects you might install different libraries they break other libraries but here that's not a problem because everything is in the scope of that single project and you're disposing things at the end always then you have reproducibilities or or being reproducible so you can go back through your get history and launch the exact state of a developer environment with the required environment configuration because as you are changing your code you're also changing like the uh configuration to set up that environment and you'll have that history there in your commits then you have a progression or being progressive so with progressive versioning always start uh you always start with an environment with the latest stuff and that's poorly worded there but the idea that i'm trying to say there is like with git pod you can have prebuilds and so every change might discover breaking changes because it will run the code every single time and so as you encounter it you can address and then upgrade those to the latest version right so that's the idea of always staying on the latest then you have collaboration so we were talking about realtime collaboration here um so being able to share the state of a developer environment so hopefully you know that is pretty clear about those seven things context mobility agility disposability reproducibility being progressive or progressive versioning and being collaborative so there you go hey this is andrew brown and we are asking a very important question uh in this course which is what is get pod so gitpod is a company specializing in cloud developer environments via the gitpod open source software or the gitpod.o which is the platform so it can be a little bit confusing at first because it's like is it the product this is the company name or it's whatever but we'll just go through here to make sure it's crystal clear so get pod oss open source software which is located on github is a developer environment as code if you're wondering what i mean by that it's that it's an open source kubernetes application for ready to code developer environments that spin up fresh automated dev environments for each task in the cloud in seconds and enables you to describe your dev environment as code and instantly start remote cloud or cloud developer environments directly from your browser or your desktop id or even tablets if you want which i have yet to try but i'm sure it does work as long as you have a browser you can do it and so the idea is we have getpod.io and this i call it a developer environment as a service which is not something you need to really remember but it's basically a software as a service so it is a cloudbased fully managed offering of the open source software with a free and paid tier uh and so hopefully that is a distinction that it's a company that's an open source software it's also a cloud platform okay all right so i just wanted to get you some exposure to git pod so if you went to www.getpodio this is the main website um here so you can read all about it if you like but we do of course cover everything that is in here then there is the actual open source git pod uh and so this is where they have a variety of different repositories uh so you can start reading here and again we cover this within the course but they have a lot of repositories here and then there's the actual platform itself which is git pod io if we click into here there's no app it's just the naked domain uh here you can see i've been launching workspaces which we'll get into but you know again just to get you a little bit exposure uh to that gitpod ecosystem okay hey this is andrew brown and we are taking a look at getpod versus other providers i think it's important to know the options that are out there and maybe to understand why i chose to do a git pod course as opposed to making it an agnostic course um but let's go through it so the first is git pod code spaces formerly known as visual studio online if you try to find visual studio online anywhere you just can't find it it'll let me have like a marketing page but always link back to github code spaces so maybe both projects existed at one point maybe visual studio online was always github code spaces and was rebranded we really don't know but all there is is github code spaces so github code spaces is proprietary online code editor specifically for github so understand that it's proprietary not open source so um you know if you are locked in there you're not going to take that code editor into uh deployed on your own infrastructure so just understand that is one thing uh key differences you pay based on computing instant size so i believe that it's metered billing so uh i mean that's nice if that's how you like your compute to be like i use this many hours i pay for this many hours but you do have to choose or right size your instance so that uh could be good if like let's say you need something that's more powerful than git pod provides but git pod like has a really beefy instance and at a cost that like it's just really really cheap so you know even though you know metered billing and uh being able to choose your size sounds good uh you know this is one of those rare cases where i prefer get pod because i just don't have to think about it it's like totally serverless it doesn't currently have prebuilds right now so you can have longer wait times um i would imagine they would probably end up adding this at some point so uh you know even though i say there's not prebuilds right now uh you know it seems like github code spaces would add that and a very huge key difference is that it runs on a virtual machine so when you are launching um a git pod it's using docker right as a way of launching its containers and so um i mean like i'm finding containers to be a lot more flexible first i thought virtual machines would be better because maybe you need to install docker on a virtual machine or or images but you can run docker within docker so it doesn't matter um and it's just a lot easier to package like docker files for that kind of stuff so i kind of feel like git pod has the advantage there because it's using containers okay um and the use case here is only if you're using github so if you're using git lab or code commit or something else uh you know you're not gonna be using github code spaces so you have to understand that your workflow is gonna be very tied to github and this might cause friction for larger companies that like are using elazi and jira and they have everything in bitbucket which is very popular so you know just has to work fit your workflow github of course is the most popular version control system out there and then visual studio code is the most popular code editor so you know for most people it's going to meet their use cases but you know uh i i just i still lean towards get pod here uh then we have aws cloud nine so this is an online code editor service within aws um i liked it i liked it for years i still use it for a lot of use cases it runs on a virtual machine you can only choose very particular types of amis to run it on but i mean i guess it's no different with um git pods because git pod runs on debian ubuntu like a debian like instance and so i guess cloud9 technically has more flexibility of what the virtual machine is but when you're dealing with containers you can have whatever you kind of whatever you want i guess not because in git pod you can only run debian or ubuntu instances but um yeah i guess there's more flexibility here with cloud9 you pay for the online virtual machine cost it has a free tier um these case here is if you need a simple persistent developer environment with simple collaboration features you want to take advantage of builtin enable support within cloud nine for service development um it is easier to use than visual studio code so for beginners especially when you do aws stuff i'm showing them cloud nine but like if you're serious about your development you're probably gonna wanna use something like visual studio code and then that's where you're going to be using git pod or code spaces and things like that then we have the google cloud cloud shell editor this is an online coder part of the google cloud shell the key difference is it's free uh and it's free to up to a certain point there's no team collaboration features at least that i i saw and this is intended for experimentation or rapid prototyping with gcp services i wouldn't really consider it for application development in a team environment uh there's probably possible limitations on performance of the runtime environment i couldn't find details about it and it has limited hours per month i thought it was like free 100 hours i might say this somewhere else in the course saying like google cloud shell gives you unlimited hours but it's not true i found it was like limited to 50 hours a month but it's still really good um and it's running visual studio code alongside their shell so when you're in google it makes things a lot easier and so you know when i'm doing google cloud workload stuff i will be using that thing but when i want something that's persisted like a project i'm not going to be doing it in the cloud shell editor i'm going to be putting in a repository and launching up git pod but a really great way to learn google cloud because a lot of the uh the console you'll click through it'll say open in cloud shell and then open the editor so you will come across it but what i want to do is show you all these three editors uh for real just so you can see where they are if they interest you but hopefully that gives you an idea how they compare against skip pod right again gitpod runs on containers uh it's serverless billing right um you know things like that uh and it's it's using debian ubuntu okay hey this is andrew brown and i'm in my aws account here at the aws management console and i just want to quickly show you what cloud 9 looks like not so much that you need to go do this but just so that you can see what else is out there so what i'm going to do is go to the top here and type in cloud9 and we'll go over here and we'll give it a moment here i am in the root account so usually it doesn't like you creating um environments here which is totally fine i have a couple old uh ones here that refuse to delete but i'll create a new environment we'll just say cloud nine get pod test kind of weird writing get pod in there but i just want to show you that you choose the instance size or type so you can choose t2 micro small large other instance type and you can go pretty big here so that might be the advantage that cloud9 gives you is that you can go like super super big if you need to um and you know this is not the only kind of environment that aws has so like they also have in sage maker um because you can think of it as a code editor right like you have sage maker studio which will run a jupiter lab but that's really for ml we're talking just about like general cloud development here so that's the thing is like if you really do need to do like um you know ml stuff you probably shouldn't be using a cloud developer environment you should be using something like sagemaker studio or whatever the integrated cloud services that are used by the cloud service providers but anyway i'm going to just choose a t3 micro notice we have amazon list two amazon likes the old one which is not recommended to use anymore ubuntu um and so those are our options i think at one point you could just attach whatever any kind of machine you want but then it wouldn't be managed when shut down automatically notice we have a 30 minute um turn off after 30 minutes but you can change it here to whatever you like we'll go ahead and hit next we'll create that environment and we're going to wait for that to spin up because i just want to show you what it looks like it's generally really fast but i'll see you back here in a moment okay all right so after waiting a little while here it has finally launched uh usually it doesn't look like this i think there's just a slight little problem with the um editor or display it usually looks really nice here but it's just telling you here how to get started with um cloud9 so this is based off of i want to say like adam but maybe not i think it may be oh sorry the ace editor so we'd like up ace editor i think that's what it's based off of yeah so it was called ace and then uh ace turned it into cloud9 uh ide it's not really an id it's a cloud editor um and then cloud9 was acquired by aws and so aws integrated with a lot of their services so when you go over to lambda you're using cloud9 but it's a lot simpler like they don't really have extensions per se so you can like explore aws resources through here they have some source control which um i believe is kind of new i remember seeing this here before but it's very dead simple there are no extensions uh you know so like whatever you want it's like uh test.ruby we'll open that up here and just type in like um puts hello get pod okay we'll save that down below ls and i'll just run it here ruby test.rb so it's really darn simple collaboration is kind of nice i really like it um get pod at least at the time of shooting this um their features are not as transparent as they need to be um but i know that they're working hard to make that better um but like here you can like invite people you can see them you can see where their cursor is so that's kind of nice they have a debugger which is fine and there are like serverless integrations but you know nothing super complicated um but yeah if you want to shut it down we could just close the tab or i'll just go back out we'll go back to the dashboard here and i'll just close up this tab and i'll go ahead and delete that environment so nothing super complicated that is cloud9 now over to gcp so we'll go over here and theirs is up here in the active act or cloud shell here so if you click it uh generally you have to activate cloud shell so what it's going to do is spin up i think a virtual machine underneath so we just have to wait uh a while here and once we're there oh that was fast that was super super fast some like if it's the first time you ever did it it's really slow but like because i think they're like making the back like the storage for you but uh it's super fast but if you click here in the uh open editor it's gonna look just like um vs code because it is vs code right so here it is i don't know if there's any kind of limitations in terms of the stuff that you can install i actually never looked at that for extensions can you install extensions that's a good question so we have uh cloud code apis uh secrets manager kubernetes cluster so i don't see the ability to install extensions so it might be just uh what you see is what you get here i'm going to go ahead and just create myself a new file here so just say test.rb okay so nothing super complicated you know you know what uh visual studio code is but uh that's that one there if you want to close it we just hit the x there all right and we'll take a look at uh github code spaces all right i'm back and so i just want to show you github code spaces or at least attempt to do it um and so the thing with github code spaces is that if you've ever tried to find it like under the buttons here and you don't see displayed the reason why is that it's part of i believe the team's plan so you know if you are just a regular user and you're looking to utilize it that's not possible now could you just go ahead and create an organization and then be able to do it i guess we could go find out so what i'll do here is go over uh to my settings and we'll look for organizations and i'm going to create a new organization and notice here we can see some options so in the free here unlimited public private repositories 2000 automation minutes a month 500 megabytes issues and projects so i don't think that it's here um is it in here i'm just trying to see here so we have protected branches multiple reviewers code owners and that is the tricky part is just trying to find the functionality so what i'm going to do if we scroll down here we might be able to see it so code spaces ah okay so in the free tier it's not available and then the team plan that's where it's going to start at up to 32 cores starting at uh 18 cents per hour i'm very certain that i have a paid teams plan somewhere so i just need to go find it okay so what i'll do is i'll come back here in a moment and see if i can find it but just understand that you got to be paying and then you can pay additional to use uh get uh hub code spaces so i'll be back here in a moment okay all right so i'm in uh my other account here where i definitely have a team's organization but i don't think it's paid it used to be paid i think we moved off of it because they made a free tier and so now we don't have code spaces so uh you know i think it's just gonna be a bit too hard for me to show this and all it would really show is that once you launch it that you have this kind of editor and that you can choose the different size there um but uh you know hopefully that gives you an idea of like the friction it it it causes to get started with um code spaces but you know if you really want to know more you can just read up on it here okay but yeah there you go hey this is andrew brown and we were talking about contextbased developer workflows because this is something that you've probably already been doing but it's just cloud developer environments make it a lot easier to do so what is context in the scope of a developer workload well as a developer you need to quickly switch contacts based on the scope of the work you are currently performing and this could be things like reviewing pull requests developing features manually performing quality insurance so q a replicating a version of production hey this is andrew brown and we are taking a look at contextbased developer workflows if you've never heard of it it's okay you've actually probably been using it this entire time but this became a lot more important once we started using modern architecture so let's talk about what is the context in the scope of a developer workload well as a developer you need to quickly switch context based on the scope of the work you are currently performing this could be something like reviewing a pull request deploy or developing features manually performing quality insurance of q a replicating a version of production for debugging creating a temporary environment to test the hypothesis so the idea is the context is what do you need to do review code develop feature q a all sorts of options there and those environments all need to be specialized for that context so developers have always been using contextbased developer workflows though cloud developer environments cdes makes that much easier to do and specifically for microservice or modern architectures which have many more iso repositories this is a big struggle for a lot of people that are doing microservices is just managing all the repositories whether they have one big monolith or not but again cloud developer environments make it so much easier to jump into those projects so cloud developer environments become part of the workflow developers can quickly and safely switch contacts so i just kind of want to add an additional illustration about you know if you're using uh cloud developer environments first versus using local developer environments how that might change uh the responsibility or the accessibility of your code so here you know the old way we would do it is we would launch i'm going to get my pen tool out here we would launch a local developer environment we'd write our code and then we would create the repository locally and then push okay i know there's a spelling mistake there so just ignore that um but now you know with um cloud developer environments we create the empty repository first in github so it already is there then we launch our cloud developer environment and then we write code and from there we can actively commit our code and so the great thing about that is that when we take that approach like let's look at the old way if we were doing the old way some people will end up writing all this code and they just never push it to a repository remote repository they might have created a local repository but it's never made it online and so that means that there's a longer time before code can be collaborative or they have an opportunity where they might or an opportunity but there might be the misfortune that they lose that code and i can't tell you how many times that has happened or it's the weekend you want to pass that code off to somebody else but like oh it's on my machine i never pushed it but if you're using cloud developer environments it's already in a online repository that is the starting point and that is the kind of behavior change that you have when you use cloud developer environments so there's a higher chance of collaboration and less chance of loss of code and that just makes it again easier to do this contextbased developer workflows and one context would be like starting a new project but there you go hey this is andrew brown and we are taking a look at visual studio code also known as vs code which is a free source code editor made by microsoft for windows linux and mac os if you're confused why it says source code editor that's just the language that microsoft uses but you can just say code editor and visual studio code should not be confused with visual studio which came before vs code and vs studio is an ide an integrated developer environment that's for doing more lowlevel stuff but anyway visual studio code has 14 million developers out of 24 million developers worldwide who use vs code making it the most popular source code editor today and if you wanted to do the math on that that's 58 percent market share so at least half of all developers are using vs code and the reason we're talking about vs code is because that is the primary editor that you will see when you launch up a git pod workspace so vs code is very popular due to being free powerful works on all hardware lots of courses orgs schools use vs code because it's available for everybody so there you go hey this is andrew brown and we are looking at the concept of docker so docker is a set of platform as a service products that use os level virtualization to deliver software in packages called containers so the reason we're talking about uh docker is because that is what uh getpod is using to run their environments and you'll hear kubernetes as well but that's something that you don't necessarily have to touch but docker containers is something that you might encounter okay so docker was the earliest popularized open source container platform so when people think of containers they generally think of docker and we said it's platform as a service product so there's more than one thing just called docker so we have the docker cli so these are cli commands to download upload build run and debug containers we have a docker file so a configuration following how to provision a container docker compose this is a tool and configuration file when working with multiple containers and that's something you may encounter with some like quick start templates and things like that docker swarm an orchestration tool for managing deployed multicontainer architectures that is not something that you have to worry about um then you have docker hub a public online repository for containers published by the community for download so this is going to be a place where you source containers and we definitely source things from docker hub using git pod and then there's the concept of oci the open container initiative because i saw this term and it just pops up everywhere you're wondering like what is oci compliant what does that mean so open container initiative is an open governance structure for creating open industry standards around container formats and runtime so docker established the oci and it is now maintained by the linux foundation and so docker has been losing favor with developers due to the handling of introducing a paid open source model and alternatives like podman are growing but that doesn't mean don't use docker that just means like at scale you know some companies like larger companies are looking at alternatives but these alternatives are oci compliant right like pod men and things like that but i just wanted to point that out because you know docker can be a bit contentious in the open source space but it still is really good and solid and that is what git pod is using okay hey this is andrew brown and we are taking a look at version control systems also known as vcs so these systems are designed to track changes or revisions to your code and the most popular vcs is git so vcs can also refer to manage cloud services that host vcs so this is why this term is a bit confusing because really it means git but a lot of times we are talking about git providers and so get pod integrates with the following git providers the first is github so this is owned by microsoft it's the most popular vcs offering due to its ease of use and being around the longest github is primarily where open source projects are hosted and offer rich functionalities such as issue tracking automation pipelines and a host of other features before github everybody would put their stuff on sourceforge um but sourceforge was very slow i think it was svn based and it had a lot of ads and so when github came out it was extremely popular because you could put repos there for free and had really strong collaboration tools then came along git lab so this was an emerging competitor to github and at the time had unique features such as ci cd pipeline improved security measures i still think it's easier to get a lot of things set up in gitlab it takes care of that stuff for you but github has caught up with a lot of stuff like github actions and and things like that so they're pretty much on par now then there's also bitbucket this is owned by elazian and it was originally only used for mercurial so mercurial was a competitor to get but git became so popular that bitbucket added git and then mercurial became so uh unpopular not that it's bad but just wasn't as popular as get that they stopped supporting mercurial so bitbucket has tight integration with atlatian's industry standard agile project management software called jira and so if you ever end up working for a large organization they're very likely to be using jira and because they're using jira they're very likely to be using bitbucket because there's tight integrations between it it's just so much easier so those are um you know the git providers hey this is andrew brown and we are taking a look at version control system permissions and to understand that we need to know what oauth 2.0 is so walk 2.0 is an industry standard protocol for authorization and the idea here is oauth doesn't share password data but instead uses authorization tokens to prove an identity between consumers and service providers so oauth is about granting access to functionality as opposed to something like open id which is about providing who you are but the only thing i really want you to know is that it uses oauth and that's where these fine grain permissions are going to get set and that's how it works for uh get pod because you connect your uh your your version control system and then you you as the user are going to decide uh what you want to set there so within your get providers you can see they're connected so there is my username there are my permissions and if you expand it you'll see all the options there and it's going to vary based on the provider so the idea here is that for github we have user email read user public repo repo read org and workflow um so just understand that that's going to be slightly different for all the providers and the key thing to remember is the fact that get pod is not responsible for these permissions it's on the get provider and the user okay hey this is andrew brown and we are taking a look at the git pod editor support so get pod is designed to be a provider agnostic cloud developer environment and one way we see that is the fact that it supports integrations for a bunch of different git providers but another way that it's agnostic is by having support for more than one editor and so gitpod currently supports three types of editors so we have vs code browser so a editor within the browser and this is the default experience desktop vs code so opening a workspace in local vs code so a desktop application and jetbrain so a paid ide that extends the eclipse ide so if you ever use eclipse you kind of have an idea what jetbrains is there so what we'll do is investigate all these three types here but the key thing to remember is that kit pod supports uh multiple types of editors and i think they'll just keep on expanding that because that is their goal okay hey this is andrew brown and we are taking a look at jetbrains and before we can talk about that we need to know what is eclipse so eclipse is a free and open source id created by ibm originally intended for java through open source projects have expanded to a variety of languages so i think ibm authored it and it's been managed by an open source group now i remember using jetbrains back in like 2001 specifically for java so it's very interesting to see that it's been around for so long and it's still super powerful but then there came along jetbrains and jetbrains is a company specializing in creating paid id so it's proprietary or an extension of eclipse and so they just make the uh the eclipse experience way way way better so they use the same code base at least at one point they did but they have grant greatly expanded that feature set around specific programming languages just brains is easier more productive more convenient to use in eclipse just brains was formerly known as intellij and if intellij sounds familiar it's because it kind of sounds like intellisense which is this whole kind of auto completion thing so notice here as they're typing and there's this auto completion thing that was something i think that was invented by microsoft originally or at least they branded the idea of intellisense but this was a a big selling point where you'd be able to type and it would auto complete you could click through stuff now we're seeing that kind of everywhere like code editors have support for that through uh extensions but one at one point that was a big deal okay so jetbrains has a variety of ids specialized for different languages or frameworks so let's just go through the list we have phpstorm uh which is for php golang for uh go land for go the go language uh intellij idea or idea which is for java data grip which is for sql or databases in general pi chart for python ruby mine for ruby web storm for javascript c line for c and c plus plus writer for net and this isn't the full list i know they have something for developing ios applications and something for data science other things like that but the reason i'm listing these ones out for you is because these are all uh in the scope of what gitpod is trying to have support for now what's interesting is a thing called jetbrains projector and this is a tool that allows you to run jetbrains id within a browser i don't particularly know if getpod is using that and that's how you integrate with it because i just haven't uh given jetbrains with vs code a go but i just want to say gitpod allows you to integrate with jetbrains to use it as your gitpod workspace editor there's an asterisk there because at the time of right now it's in beta and some of these are coming soon so these are all on the roadmap and so i just want you to be knowing about this because probably in the future these will be available to you okay hey this is andrew brown and i was saying that there is uh support for get pod to use your desktop version of vs code so you can open git pod workspace in your local vs code if you open up either file or go to the get pod command palette you should see an option that says open a vs code there's also this option says open in vs code insiders and insiders is just the vs code unstable release version so it's like the latest version but you might not want to be using it unless you're like they'd like to have the latest features but you don't mind if there's bugs or things like that so some vs code extensions do not work in the browser so opening in local vs code may give you a better developer experience um and you know you know some people prefer desktop apps so that could be a reason there but i ran into an edge case with my cofounder where uh they use ubuntu and they could not use the vs code vim extension the browsers uh specifically on their linux laptop right so in this case they had to launch in local vs code and then they were able to use it so it was interesting to see that edge case but it seems like you know a lot of support on mac or windows so there that could just happen okay and also when i was using this on my windows machine where i'm using windows subsystem linux it actually prompted me to install a bunch of things like docker and kubernetes and things like that whereas on my mac it didn't ask for any of these things so it's possible that you have to have docker and salt which would make sense because um it is running containers so there would have to be some way for it to do it uh and one thing i noticed is that you cannot open a shared running workspace that has been shared with you so only the owner can open that workspace locally so that's just a thing there and i think i repeated a couple times in the course okay hey this is andrew brown and we are taking a look at the get pod browser extension and this provides a convenience button within the version control hosting provider and this button prepends the gitpod url prefix to the current url and this getpod browser extension is available for firefox chrome microsoft edge and brave and so it's important that you remember that because i will ask you on the exam which browsers it's for so just to kind of show you what that convenience button looks like in the different providers here is github and there is the button here is bitbucket and there is the button here is gitlab and there is the button so nothing super complicated here but it's a lot easier than having to remember to type in the gitpod url so it'll definitely save you some time okay hey this is andrew brown and we're taking a look at get pod browser bookmarklet so what is a browser bookmarklet well it is a browser bookmark but instead of pointing to a url it executes arbitrary javascript code and so the idea is that transform is a bookmark into kind of a smart bookmark so you'd have this javascript code which we'd get from the gitpod website you'd place it in the url box when you make your bookmark and then when you click that button it would work just like pressing that get pod button assuming you were on a particular page like a git lab or github page so the get pod browser bookmarklet when clicked will open in the current github gitlab bitbucket just what i just said there a moment ago and the reason for it is that it acts as an alternative to the browser extension for when the browser extension is not present for specific web browsers so i didn't test it but i assume that it's not for safari because safari is not a chromiumbased browser probably opera as well would be in that category there could be cases where you have computer workstations that does not uh allow the installation of browser extensions because you know some organizations they have a bunch of computers and every time you shut them down they always boot up a fresh image so you lose your extensions or they just they don't allow you to install extensions uh as a as a security measure so that you know people are installing malware in their browser or it could be that developers are extending the launch behavior for more intelligent action so you could probably take that javascript code and add some extra stuff in there maybe you want to um put in some environment variables and so that gives you a bit more flexibility over the get pod button but there you go hey this is andrew brown and what we're going to do here is look at git lab integration so what i'm going to do is create myself a new git lab account so in the top right corner we save get free trial i kind of swore these to have a free account here so i'm going to do is double check here and yes they do have one so i'm going to say free and here we have two options where we have gitlab sas or get lab self managed so sas is the one we want that's going to be just like when you utilize github so we'll go here and click sign up for free and i'm just going to fill in my name so we got andrew brown and we'll just say exam pro co andrew exam pro co and then we need a password so i'm going to generate out a password here paste that in and before we proceed here i'm just going to save this in my password manager to save myself some trouble so just give me a second here so gitlab.com exam pro co i'm going to put that password in there okay and hopefully it will take it i am definitely not a robot at least i don't think i am you notice there's a bunch of options down here but i'm going to just keep it simple by using email we're going to go ahead and hit register so now it wants me to confirm my email so i'm just going to open a new tab off screen here i'm going to make my way over to my email i'm going to try to do this as quick as i can here and so i have a confirmation email here from git lab okay so here it is and i'm going to go ahead and get uh click confirm your account and so here it is confirming my account and we will just expand that here and so here says your email address has been successfully confirmed please sign in and so what i'll do is grab my password here so i'm going to copy my password in here paste it on in sign in and it's going to ask me some information i'm just going to say continue cool you'll be using this for the time being it'll just be me okay because it looks like i guess there's some few different options here um i don't need to opt anything uh would you like to create a project join a project we'll just say create new project and i guess we need an organization name so this is really just for git pods i'm just going to say exam pro exam pro co and we're going to write git pod because i'm going to be doing a bunch of repos here and i figured we could do that the group and any public projects can be viewed without any authentication so we'll say create group because we'll make it public facing and so now we have an opportunity to create a project this is quite the lengthy setup but i'm going to make this public here and what we're going to say here is get pod hello world as an example here and i'm going to go ahead and create this and we'll just give it a moment to set up okay and so it's all set up so we'll say okay let's go and so now that is there the next thing i want to do here is connect uh to get pod so what i'm looking for here um is a button for the github project i mean i guess this is the project here so this is not necessarily repos so just give me a moment here and i'll think about what i need to do okay all right so i'm back and i was just kind of looking around at what there is to do here so what i want to go do is create a new repository and so we'll click that there and then from here we have an option over here repositories on the left hand side so um let's go over here and click on repository and so now i'm over here and you can see there's initial commit by a fellow here i assume he works at git pod so senior product uh a designer for growth at gitlab um there and so here we can see that repository it's been unusual that it's like a commit on the behalf of somebody else but that's totally fine but the great thing is we have our get pod button you will not have this unless you have that stuff installed i also noticed like web ide here never looked at that so i'm just kind of curious what's going to open up here i'm just curious because it's like you know there's git pods so i was wondering if git lab had their own offering so i can go here and it's pretty simplistic so it's not really like a full fullblown developer environment i was just really curious but what we'll do is go back over to our hello world project i'm just going to go back here because maybe there was two here so let me click into gitlab is that the one we were looking at yeah so that was the one that we saw here and then here is the public one that i made it's a little bit confusing again i don't use git lab on a daytoday basis so i'm just kind of learning uh just like you are here but i guess if we click the icon at the top we can start seeing the projects more clearly and so this is the one that i created that i care about this is new i don't know what this uh this is i guess this is created by default for you and so we'll go over to uh repository it's not really showing me a lot of information because usually like github will set something up for you so what i'm going to do is just add a new file so let's just say add a readme file okay and we'll just say hello world we'll go ahead and commit that and we'll just say commit and so now what i'm hoping is if we go back to our project here we'll get something that looks a little bit more normal okay yeah and so there we go so just we had to get that initial file on there and so now we have that opportunity to uh use git pod of course you'll need the browser extension for that installed if you don't we're going to just do it the oldfashioned way so i'm going to go up here in the top type in http colon slash get pod uh dot io forward slash pound okay and that will open up that environment for us notice that i don't have a get pod account here as of yet so what i'm going to do here is say continue with gitlab just because that's what we're using right now and here it's going to allow us to authorize so we're going to say authorize and we'll just give it a moment to check out that repository but essentially when we did that when we authorized that that should have created a new account for us and so here is um our project here which is all great and so essentially what you'd want to do is um kind of set up your environment so i really don't like the look of this it's kind of hard on my eyes so i'm going to go down to the bottom left corner we're going to go to color theme and i'm going to just switch to something that is dark so we'll say um actually i like monokai quite a bit so i'm going to go to that um like in terms of the editor or the coloring there and so we have this open um and if we just want to kind of set up a new file here i'm just going to go get pod yaml okay and we'll just set up something initially so we have tasks and i'm assuming that's how we do it just trying to do for memory so we have name we're going to say hello world okay and then from there we'll just hit space base and it's the command that we want and i'm just going to say echo actually we don't have to put double quotations there we'll say echo hello world and i don't think we need exclamations exclamations here i'm having a bit of trouble because i keep on thinking this is a vim keyboard so one thing i want to go do is go install um the vim the vim hotkey here so we'll go vim uh vimvs code it's this one that i want to install so we'll say install here okay and we'll go back and so now that works as normal as i would expect it to and so i believe that this is uh correct with the exception that we just should have a colon here and what i want to do is just go ahead and commit this so we'll go back here and i'll just say uh hello world commit okay and we will add that file and we will hit commit we'll sync those changes we'll say ok and so now if we go back to our original tab here and we just give this a refresh we should now see in our repository this new commit but what i want to find out is will this change uh take effect so you know we can just close this tab i just want to show you like if you have uh get pod gamble open and you're always trying to figure out how to make your way back um and by the way i might just bump up the font here i don't know if this is going to work let's just see if i can do that um here it's not really bumping so sorry everything's going to be really small what we can do is go down to the command palette here and if we want to get back to this repository quickly we can just go to open context and that's always going to bring us back here to the project or repository in git lab but what i'm really interested in is actually going over to getpodio because whether or not you notice you actually created an account so if we were to go over to the dashboard so it opens opens and up us up to the getpod.io and so now you can see we have a new account if i go over here and we go to settings you can see that for integrations i have git lab and this is where our permissions live so we go here and if we want to change these we can go ahead and just change those things but the goal is we're going to hook up github and bitbocket just so that we can see what they all look like but just to kind of complete what we're doing with this project here what i'm going to do is i'm just going to go ahead just close this tab here and close that out and i'm going to go back here and i'm just going to go and type this in again okay so let's say https colon four slash support slash getpod.io pound and from there it says invalid git pod yaml should be an object so clearly i've made a mistake so we'll say continue with the default configuration actually that's the first time i've made a mistake with a github configuration file and i think it's just because i created from scratch normally i go out and i find a reference but that's not what i did here so if this is a problem what i'm going to do is just cut that out and we're going to open up a new terminal and i'm just going to delete this file here okay and instead we're going to just do gp init to initialize a new file so i'm not exactly sure what i did wrong there i'm just going to paste that back in because it looks correct to me oh it's because i did that okay so that's what i really wanted to do but i'm just going to go ahead and do that we'll get rid of these ports and we'll just say okay let's fix this get pod yaml file okay we'll sync those changes we'll say okay all right and so from there what we can do is go back to our project so i click back on the git pod yaml down below open in the dashboard oops uh you know what i want to go to open in the context here and then we'll close our old tab and again we're just going to go and type it in here i will start using the get pod button here but i just kind of want to keep doing this so you kind of see what it is that we're typing so that you know it just becomes kind of muscle memory for you okay so what i'm expecting this time is for our command to work and if that's great what we'll do is proceed onto github and bitbucket and get that all connected into a single account okay so it's just loading up here and our echo works so this is all in good shape okay so uh this is good so i'm just gonna go back to our context i'm just going to close back out the old one and so that's pretty much it that we need to know for git lab again it's not super complicated but let's take a look at how we do it for github and bitbucketnext okay hey this is andrew brown and we are on bitbucket so we'll go ahead and create ourselves a new account here because it's good to learn all three providers because there's a high chance that you'll end up using one of each at some point so here it's suggested we want to add jira i'm good i'm just going to hit next and i probably already have a bitbucket account because i have jira not necessarily a separate bitbucket account here but we'll see what happens if we try to sign up so it says i already have an account which is totally fine i'm going to log in here it's not like a lot that you're missing here in terms of the setup process you know all these things are the same right you sign up they send a confirmation email here it's going to ask me for a a username so i'm going to say exam pro co and we'll see if it takes that and it does so we're all good here and we're going to come in here and see what we have so before you drop in a bit bucket tell us some stuff i want to skip this i don't care about any of that kind of stuff and let's see if i have any repositories in here and i have one for delithium.js as a to do again that's coming from jira but we don't actually have any repositories so let's go ahead and set up a new one here and so what we'll do is create a new project so the project name is going to be called getpodhello world and oh this again this maybe exam pro co get pod and then the repository will be uh get pod hello world and we can make it public or private it doesn't matter i'm gonna leave this one private in this case do we want to read me sounds great what do you want the main branch to be called we'll call it main include a git ignore file sure why not and we'll go ahead and create this repository so we are here and notice in the top right corner there is our get pod button and again i'm not going to click it for the time being i just want to keep doing this at the top here so that again it becomes muscle memory for you to know uh what to type just so it's uh there but uh what we can do is go to the top here and type in https colon forward slash forward slash get pod dot io forward slash pound and hit enter it says authorize with bitbucket.org so it already knows that we're logged in with our github account this is something to be careful with because you want to make sure they're all connected to the same account or you'll end up with multiple accounts which might be annoying so i'm going to say authorize with bitbucket.org here it's going to ask me a bunch of options i'm fine with all this we're going to say grant access okay and we'll give it a moment to start this environment so you can see that public repos private repos the process is very similar sometimes you just have to grant access to be able to do things and we'll just wait here for this environment to set up there we go and so here it is same experience everything's the same and i think i learned my lesson from last time and so when i opened up this terminal i'm just going to create a git pod file there and while i'm here what i'm going to do is i'm just going to bump up my font because it might be a little bit hard for you to see and so i'm just going to bump this up to like 22 okay while i'm here i'm going to change this to 2. okay and what we'll do is just go ahead and close that and so now i'll type in get gp init all right and so we'll get that down here this is still really small that's kind of bothering me so i'm going to go down below go to settings and i'm looking for terminal editor font size we have text editor font size terminal maybe there we go that's a lot better okay and so uh from here we can just do the same thing so i'll go ahead and delete this out we'll change this over to hello world and then down below this will be hello world here as well and as per usual go to the lefthand side here and i'm going to just go ahead and add that file and say uh add a knit uh git pod file and we will commit that to our repos repo save the changes and as it's going we'll go down below again clicking on this get pod button here and we'll open the context to see uh that commit there and so there it is there and again there's really no easy way to like like to completely terminate a workspace and reopen it you can stop a workspace so down below we have the command palette here but also in the top left corner you can go here and we have similar commands i'm probably going to keep going up here now because this is a lot shorter but if you stop it that's not sufficient enough because we want to terminate and start a new one in order to iterate on this gitpod yaml file so what i'll do is i'll go ahead and close this tab out and i'm going to go to the top here again type it in so it's http colon s colon colon get pod dot io colon colon forward slash forward slash what am i talking about and we'll hit enter here and so you know again it should just work as per usual so we'll just give it a moment there to spin up and just make sure that is working correctly and there it is so there you go that's working fine oh it says command not found so clearly i've made a mistake if i go back here um i think it's because i'm using single quotes instead of double quotes okay but that doesn't really matter per se but i'll go ahead and fix that so change quotes from single to double okay but what i want to do is go ahead and check um the dashboard here so we'll go there and from here i'm going to go to my settings and we'll take a look here again at integrations and we'll just see like there are clearly different um settings or permissions uh per one here okay so just understand that it's not one to one across them it's going to be really dependent on the get provider so yeah i guess that's two out of three and so the next video we'll go look at github okay all right so now we're on the github website to sign up for our last get provider that is currently supported uh with gitpod and so in the top right corner i'm going to go to sign in because i already have an account and i do have one with the android exam pro co but interestingly enough i never use this account because i have an older one but that is totally fine so what i'm going to do is just go ahead and grab the password for this and we're just going to go paste that in there whoops we'll try that one more time here okay i must have grabbed the wrong password that's totally fine we'll sign in oh it's not giving me anything today we'll try this one more time there we go okay so it was a bit tricky but i'm in there and you can see i already have a follower even though i don't know why they're following me but that's totally cool and apparently i have a very simple example over here python docs hello world so not a lot going on in this account which is totally fine so what i want to do is create myself a new repository and by the way if you're creating an account for the first time it'll probably ask you a bunch of extra things to ask you know so you know whatever whatever is going to be there that's fine and i guess my username is exam pro hyphen dev so that's probably what i called it when i first created this account and so we're just going to say git pod um hello world as per usual let's make this one private and we'll go ahead and add a git number file and we'll say readme file down below and it's private so i shouldn't have to choose a license but we can go here and just choose none oh it really wants me to choose one here oh for ignore okay so like ruby ah we'll just ignore it we don't need one that's fine we're not doing anything serious here and so now that we have it open again i know that button's there but we'll come to it soon enough so i'm just going to type in https forward slash forward slash get pod io forward slash pound enter and here it says something went wrong and it just means that you have yet to connect that account so we'll go ahead and say authorize probably not the best wording but that's just what it is and you'll notice that github has like the most robust um permissions out of all the three you can drop down here and have a lot of options so i'm going to say authorize get pod i o okay it's going to say repository not found it might be private so please authorize get pod access so again uh nope it's not a bug it's just you got to go ahead and hit grant access and so it says okay what kind of accesses do you want to give it we'll say authorize goodpodio and so what we'll do here is just open up the dashboards on the top left corner we're going to say open dashboard and we'll make our way over to settings i just want to show you again the integration so this is what it looks like for github this is what it looks like for bitbucket this is what it looks like for gitlab so you can just see it's slightly different for each one and same routine here i'm curious to see if it's preserved my font size and it totally did i think this is all happening with sync settings so down below see where it says settings sync is on so this is on by default and that's what's causing all these settings to remain available if we turned it off i think it'd probably end up resetting i feel no reason to turn off settings links to show that so we'll just leave it as is but what i'm going to do again is open up a new terminal so in the top left corner we're going to go terminal new terminal and we'll go ahead and type in get pod so gp and type in init i'll open up that new file there and we'll just go ahead and delete that out as per usual and we'll say hello world and it's interesting this has single quotes so it should have worked for the other one i'm surprised it didn't work and it was double quotes but we'll try with single quotes again we'll go back over here we'll add that file we'll say uh add a net getpod.yaml file okay and we will hit changes sync the changes we'll say okay open the context so here we'll say open context and so there is that getpodganimal file updated so that's pretty straightforward for integrations and so i think the next thing i would like to do is to show you how to install the bookmark extension and how to use the bookmarklet so i'm not going to close all this stuff i'll close this tab here we don't need that and from here i'm just going to go to my chrome extensions okay so we'll say chrome extensions and i'm just going to uninstall it so here i have git pod i'm just going to remove it okay and we'll go back here and so now we don't have that button whoops uh let's refresh that one more time yep so that button is gone and so i'll show you how to install the extension next okay hey this is andrew brown and welcome back to another follow along here and in this case what we're going to do is set up the browser extension so what i'm going to do is make a new tab here we're going to go get pod i o now you just type in browser extension and so from here we'll go to this page here it's under the documentation under here and so if we scroll on down we can see that we have support for chrome and firefox and we probably should try out another browser but we'll just do this for chrome for the time being and i'm just going to go ahead and add to chrome we'll say add extension okay and so already in the top here it seems like it's uh turned on up here and so if you want to know where that is we type in chrome forward slash sports extensions and here is where you can see it go to details i don't think there's anything interesting here but you can see there is some white listed stuff here sometimes extensions have additional options down below but uh nothing uh super exciting here so we'll just go ahead and close that and so now what we have is this nice button oh sorry i got a refresh wrong button sorry and so again we can hit the get pod button and so that's just going to save us the trouble of having to type in git pod io i don't know if you saw it but i'll close it again but watch here very close i'm going to click it and notice it has that extension in the front there so there's a workspace already running so that's fine we'll just say okay let's take that one we don't need to spin up another one and so um you know here's that environment notice it's saying bash hello world cannot be found and i'm not sure why we're getting that there must be something wrong here it has the single quotes oh because this is not name okay that's our problem so i kept on having that init there and it was actually trying to run it as a command so that makes sense we'll say fix init commit or fix uh name of task there and we'll commit that and so now i can just close that tab out and from there i can just hit the button again and that's a lot nicer because you know every time you type it in at the top it overrides that page where if you click that button opens in a new tab and that is a lot nicer oh and by the way i didn't want to open a running workspace i want to hit that button and create a new workspace okay because we want to see if that git pod yaml uh will work this time around so we'll give it a moment here and we can see there it is it's still saying that did not commit that file still says init okay we'll save that maybe i did not commit it fix name of task add that again we will save that we'll sync those changes we'll go ahead and close that tab we'll hit the button again and now we have two of those environments so you can only run so many environments in parallel and for the free tier which i believe that we are on we're going to hit that limit very soon if we keep doing that but again those environments will shut down after three minutes if you want them to shut down right away um you can go into your workspace and terminate them i don't think there's an option to terminate from here there's only the option to stop right which i think they should have a terminate button but um you know that might be something in the future and so here it's did is this not updating am i crazy did i did i not launch a new one so i'm going to go here and refresh this page it's still saying that okay what am i doing wrong here so we go here name save right we go over here on the right hand side we're going to add it i'm going to see what's been changed init to name right and we'll just say fixed name task and i want to commit i'm going to go back here refresh and there are no stage changes commit if this happens because usually there's a sync button i press it right away so i'm just going to do git status here get pushed maybe okay there we go so usually you hit that sync button i'm so used to clicking it so fast but just make sure that you push it and then we'll go back here give this a refresh okay i must have not been pressing that sync button if i go back to that video i never knew what that that prompt was i assumed it was like push or pull but if that doesn't work for you just do the push there and now i'm very confident if we open this up it's going to have the behavior that we want okay so we'll just give it a moment here and there we go okay so just be be uh be wary of that i'm just going to want to see if that actually prompts let me say hello world again we're going to add that and just say minor change and we'll save that yeah sync changes so you really have to press that so this action will pull and push and pull requests two bits from origin so say okay and so that's probably what i wasn't doing um but yeah so we saw it for chrome now let's go take a look at firefox i'll be back here in a second all right so i've opened up firefox which is a different kind of browser and what i'm going to do is go ahead and sign into my github here so what we'll do is just type in the username here is exam pro dev and then i'll just put the password in there we'll sign in and i do not need that saved there so we'll go into here and so notice we don't have that button so on the gitpod website we go to docs and on the lefthand side we are looking for configure or maybe it's getting started oh integration sorry and then under here we'll go to browser extension and from there we'll click firefox and we'll add that extension we'll say add and so now that extension is available so we'll say ok so let's go ahead and close that tab i'm not sure what happens if we click here so firefox prevented the site from opening a popup we'll say options and say allow popups for gitpodio and so it brings you to the login page which is nice but what i'm going to do is just close out these tabs here and our button now up here so we'll go ahead and hit click get pod and so we have the option so how do you want to log in we're going to say github and we'll just see what this looks like i'm not going to be doing everything in chrome but i just want to show you uh you know that experience okay so there we go so we have hello world which is uh very good same experience right it's not going to be anything different um you know it's just a different browser um and so you know i just want to point out that uh this will work in other ones as well so maybe we'll take a look at microsoft edge next okay all right so now i have microsoft edge installed this is the um i don't know if it's still the default browser but it's the browser made by microsoft and it's a chromium based browser so this extension work with anything like chrome microsoft edge braving it's chromiumbased and so what we'll do is go ahead and sign into our github account so we'll go here and we'll just type in exam prodev because we just want to see if the experience is slightly different and then from here we'll just type in get pod i o and from there we'll go to docs and we'll go to integrations and since we know that it's a chromium chromium browser i'm assuming that if we go here it should work so it says you can now add extensions from the the chrome web store to microsoft edge which sounds really great and so i go down below here and i'm just looking for a place to add i don't see a button here so allow extensions from other stores microsoft does not verify extensions installed from thirdparty stores to get um extensions verified go to microsoft edge addons so let's go check out the addons because this is the chrome store and i'm sure it will work from here but i'm just curious if it's in here because it seems like if this is the official way maybe we should go here and see there so let's say git pod dot io and so i don't see it in here and so if git pod if you're watching maybe you might want to get this in here and i'm assuming this is um extensions because i see grammarly in here okay but let's go ahead and just say allow extensions from other stores so it's permitted and so now we can say add to chrome we're technically not using chrome we're using microsoft edge and so now we have that button there notice that we actually get a button whereas in chrome we don't if we do that brings us just like how firefox does and so what i want to do here let's see if it's the same thing chrome uh extensions does that work ah it's edge extensions which is fine so here you can see it we turn on and off look at the details very similar but we'll go back over here and i want to go to get pod hello world and we'll click on get pod and we'll have to log in with github same story you know and sure we'll launch the existing workspace no reason to launch a new one this one will launch really fast because of it and it's the same experience so yeah i mean we could look at brave as well but i think the process is going to be the same brave is just another browser that we can utilize okay but uh there you go okay i decided to do brave just for fun and so here i have the brave browser open and we're gonna make our way over to github and just see what we can do here and see if the process is any different i'm sure it's the same it'll be super unexciting but let's do it anyway okay so we'll say exam pro dev we'll go ahead and paste that on in there and so from here we can go to our repository oh and we need the extension right so we'll type in git pod io and from here we'll go to whoops docs integrations browser extension and we will click chrome because it's a chrome based one i don't know if like brave has like brave addons like their own extension store maybe um we'll go to extensions here so maybe go to the web store here and it just goes to google chrome so that tells us that you know they don't have their own store like microsoft does here or addon place you know we'll just say add to brave we'll say add extension there it is looks the same we'll go ahead and see if that button exists there we'll refresh we'll hit get pod here we'll say github again we'll continue with the same workspace so it just runs a bit faster and there we go so we've launched it in chrome within firefox edge and brave i don't have safari on this computer but can we do safari on windows safari windows right i think there is one so if there is we'll give it a try but i mean we pretty much exhausted all the browsers here so you know if there's safari and i can install it here i'll in the next video will be seeing if we can install with safari okay okay i'm back and i was thinking about using safari but we can't install it on windows anymore and it'd be too hard to record on my uh my mac computer so what i'm going to do is just use opera instead and opera has been a browser for a very long time i'm not sure what they've been doing with it but i have a strong feeling that we will not be able to install the chrome the chromium extension on opera unless it actually is using chrome underneath but let's go find out so the first thing is let's just go to get pod io okay and we'll first see if it it we install that chrome extension and then we'll go log into our github as per usual so we'll go to docs we'll go to integrations and from here we'll go to extension and i think that it won't work here so we go to chrome oh is is opera is opera a chromium browser let's go ad extension see i didn't think it was based off of chrome well that messes up my whole example and git pod you're going to have to say that it works with wells and other chromium browsers so i guess they kind of got all those edge cases i was hoping to find one that's not chromiumbased and so now i really think that i really do have to try it on safari to find out if there is a use case there so i guess if we go over to our github now i'm so disappointed that that that that actually worked okay um but we'll just type in exam pro dev we'll put the password in there and we'll go see that there's a button yeah the button's there great so what browser browser that is not chromiumbased uh windows is there anything see i don't know anymore like what's pale moon best browsers that are not based on chromium pale moon web browser never heard of this really film is an open source browser 2021 let's give it a try so what i'll do is i'll just be back here in a moment and we'll take a look at pale moon okay because i just want to see a browser that's not chromium okay all right so unfortunately github does not work with palemoon and neither does gitpod and so unfortunately we can't use this cool new browser but we'll have to do is go back to opera and pretend that this extension never worked and that we have a reason to use the bookmarklet um and so what we'll do is just bookmark this here in the top right click here edit say launch and get pod and then we'll have to put that javascript here so we'll type in get pod bookmarklet all right and from here we have some javascript we'll go ahead and copy that make our way back here right click edit if it seems like i'm going fast it's because i've shot this video like four times and so i'm just hoping that it works smoothly this time around but so we have our button we'll go ahead and click the get pod it might prompt us if we need to authorize so just give it access if you do and as that launches i'm going to go ahead and copy this code so we can just take a look at it and so here we are i'm going to make a new file here but you can see that it worked no problem right um but i just kind of want to show you the javascript because it's really really simple like you know it's just looking or you get lab github get bucket and then open this thing and so if we wanted to extend this this is just javascript you can do whatever you want with it so if we want to do something fun like get pod and vars we can actually embed environment variables into our url so down below here we kind of have the syntax here for doing that okay and so i pretty much how that knows how that works so we would just type in something like my env equals production or maybe development that'd make more sense we'd have a four slash because that's how it works and we go ahead and save that and then we would go ahead and copy that just make sure that's saved i'm going to close that environment close this one we're going to right click edit and just paste in the new contents i'm going to make sure that that is there so i don't have to triple check and so we'll hit save and now if we launch get pod that environment variable should get passed along so it's just like a kind of cool way to modify it there's probably more interesting things that we could do so you could technically maybe write your own contexts if you wanted to but of course git pod only supports particular context so let's see if our environment variable shows up here so we'll just type in grep my env grep is just a way of searching okay and there it is we can type in echo and type in my env and there it is so there you go that is the bookmarklet for when you cannot install chrome extensions whether your browser does not support it or whether your admins have locked down your browser because it's a workstation or what have you but there you go hey this is andrew brown and we are taking a look at git pod configuration files and so this allows you to configure a workspace and so we say workspace we're saying configure a developer environment when at first launch so the gitpod configuration file is a yaml file that must be named period gitpodperiod.yaml so the period or dot that's in the front there tells linux that it's a hidden or secret file and that's not so important but what's important is that you remember to have that dot or period in the front and it needs to be present at the root of your git repository you can only have a single gitpod yaml file so you can't make a bunch of folders and then put a bunch in there thinking you're going to customize all those folders it's just a single one and so here's an example of a gitpod configuration file we're going to see a lot of different kinds throughout this course but this is a very simple one where it's installing dependencies using yarn for javascript it's opening up port 8000 and then it's going to allow us to view the website inline in the code editor so the following can be defined in the gitpod configuration file and so we're going to go look at a quick list of the configuration options and then we'll deep dive in upcoming videos on all these options so the first is checkout location so where gitpod checks out the project's code which will default to workspace git config so defining a workspace git configuration github dot pre builds configure the gitpod github app specifically for continuous prebuilt and you can do prebuilds with get lab and bitbucket it's just that github has some additional options here we have image so define custom docker image this defaults to git pod forward slash workspace full we have ports so define ports exposed for public access tasks so define a list of terminal windows to be open and associated scripts to be run when launching a new workspace vs code.extensions a specified list of vs code extensions to install when launching a new workspace workspace location so which path gitpod considers the project's workspace default directory and this will default to workspace i could really use a comma oops i could really use a comma right here but yeah those are the settings and we will look at them in greater detail okay hey this is andrew brown and we're looking at how do we actually initialize a get pod configuration file so to initialize a git pod configuration file there are two approaches the first is very simple create a dot get pod yaml file from scratch and just start filling it in that's the way i generally do it but they do have this convenience cli command called gp init and this will generate a sample.gitpod.yaml file so this is what it looks like i don't find this particularly useful but you know if you find this easier to do than rightclicking and creating a file it's up to you but i just wanted to know that both options were available but in either case you need to commit this dot gitpod.yaml to your codebase because um you know it's not going to stick around if you don't and we'll learn that as we look at the iterative workflow okay hey this is andrew brown and what we're going to do in this follow along is look at how to initialize a github configuration file of course we have done this in a previous follow along but let's just do it again for good measure to make sure that we know how to do it so i'm going to go ahead and create a new repository i'm going to say git pod and i'm going to call this uh init so this will be to initialize a get pod configuration file and then from here we can make it public or private doesn't matter i'm going to make it private and we'll go ahead and add a readme file and we'll create that repository so here is our repository and i have the chrome extension installed so i'll go ahead and hit the get pod button all right and so our workspace has started now so what i'm going to do is i'm going to open up terminals i'll go file up here the hamburger menu i always say file but it's actually hamburger menu terminal new terminal and we'll give it a moment here to load and so we'll just type in gp init and so the gpinit command is used for setting up an initial gitpod file and that's all there really is to it again you can of course just right click and create that file you want and the key thing to remember is that you need that period in front of the git pod there for it to work um but you know we can go ahead and just save this file and commit it just say commit initialize a git pod yaml file and that's all there really is to it okay so we'll just say okay and we'll go back here and just refresh here and we could launch this again just to see the results here but you know not much to here to see but just remember that's gp init so when you're developing your gitpod configuration file it is standard practice to keep terminating and launching new workspaces until you get your ideal configuration so let's kind of visualize what that workflow looks like so the idea is you're going to have this git pod yaml file you're going to either be creating it or modifying it and once you're happy with its current state you're going to go and commit that to your git repository once that is committed you're going to terminate the current workspace so that could just be uh telling it to delete or just closing out the tab and then you're going to launch a new workspace and you're going to observe the start task did it do what it was supposed to do we need to tweak it and if it is uh requires more tweaking we're going to go back and modify our git pod yaml file again and go through this entire process until we're happy with it and then we can just start using our developer environment as expected but what i really want you to know and this is what created a lot of confusion for me initially is that stopping and starting an existing workspace will not produce the desired results since the before and init commands for a star task will not be performed so uh there is an execution order there's three things it's um before init and command and so the only way to really make sure that your start tasks like to be able to debug them or or to develop on them is to always terminate and launch a new workspace okay hey this is andrew brown and in this follow along we're going to learn about how the iterative workflow works when you are trying to update your gitlab configuration file many times to get to the state that you want it to be in uh because there is some confusion between starting and stopping and terminating and i want to make that very clear so what we're going to do is create a new repository here we're going to call it get pod iterative workflow and i'm going to make it private for fun we're going to call it a readme file of course you can make it public but you know doesn't really matter i'm not going to launch gitpod right away i'm just going to go ahead and add a file just to save us a bit of time because you know there is the stopping and starting of those workspaces it takes time and i just want to set up one with uh tasks and we're going to just have a task for um each state so we're gonna we're gonna need it's before a knit and command and i'm just gonna do an echo in each of these ones okay so we'll do this init echo before all right so we have our three this should all be fine we'll go ahead and commit this file and now what i can do is start up this environment and i'll see you back here in a moment okay all right so after a short little wait there our environment has launched and notice that it's ran before a knit command so what is going to happen if we um stop this environment so over here we can do stop workspace and what we'll do is we'll see what runs here so just give it a second sometimes it takes a moment to kick in for it to stop so just wait and it looks like it's starting to do something there we go so it's going to stop sometimes when i stop it might say superficially like oh this workspace is gone so just don't worry about the getpod errors they're not always 100 accurate and they don't always happen but you know just have confidence of what you are doing so this is going to stop and once this is fully stopped um and that doesn't usually take that long we're going to start it up so i'll just wait here a moment so i can show you that i'll press the start button again so here we go and we'll go ahead and open this workspace again and i'll see you back here in a moment when the environment has started up again okay all right so after a short little wait here it has launched again and notice that it's running the before and command so if we go back into here we have before init command so anytime you launch a a regular workspace it's always going to run uh before a net command for the first time but any restarts it's always going to run before and command and you're going to get used to this because when we start looking at the execution order steps between prebuilds and without prebuilds you're going to start to see this pattern but what i want to do now is just to completely terminate the environment and so you know if you want to terminate you can stop this current one if you're worried about lots of parallel environments running but what i normally do is i just go ahead and close the tab and in three minutes that environment will shut down on its own um i don't know if gitpod really has an option for um terminating it terminate yeah i think you always have to stop at first so if i go here i can i can delete it okay so if i want to i can delete it here but again this is nothing i ever think about i just um close the tab and it goes away which is really nice but what we'll do is we'll launch a new environment so we'll just click the get pod button and see it thinks that this one's still running we're gonna ignore it hit the new workspace button okay and sometimes i forget what i'm doing and i might relaunch an existing workspace so you just have to be uh considerate and think about you know maybe i did this maybe i did that okay and so i'll see you back here when this is started okay all right welcome back so you can see in the case that we terminate it it runs before init command all right and so this again is really important because if you are trying to develop this and you're doing multiple iterations you really want to know that in it's not going to run every single time so you really always always always want to just close the tab and then launch a new workspace okay and so you know hopefully that's clear and saves you some trouble so there you go so the most important part to a git pod configuration file in my opinion are the start tasks because these define a list of terminal windows to be open and associate scripts to be run when launching a new workspace so here is an example of um and this is actually my marketing website uh of a kit pocket configuration file and so what's happening here is we have three tasks defined we have one called html so that's going to be running or building out html files we have this next one here for generating out javascript and css and then it's going to continuously watch uh for changes and then we have a task that will serve the website so we can view it and then down below here we're opening up port 3000 and then we're going to open it in the browser so when you have that and uh you start up your workspace you're going to see these three tabs and notice that the names match so we have html js for css and serve and over here you can see that it is a running http server over here so a start task has the following properties you have a name so the name that will appear within the terminal as we can see there the before command so a command that will run once at the launch of a new workspace the init command a command to run once at the launch of new workspace expects to terminate and i ran out of room here but this one expects to terminate as well but we will repeat that multiple times in this course then we have the command command which is confusing to say when you say that out loud but that's what it's called and that runs at the launch of a new or existing workspace and can be continuously running so an example of here we have that hp server it of course continuously runs and then the npn run watch that is something that continuously runs then you have env so this allows you to set environment variables scoped for the task and we have the open mode so how the terminal windows should be opened whether it's going to be tab after tab before split right split left okay hey this is andrew brown we are taking a look at execution or steps for tasks and so a task has three possible steps in its execution order uh and you could say steps so you could say command i'm going to call them steps because there is a um a step called command and then i'm going to be saying command command that gets confusing but we have before init and command and so let's just kind of talk about their application so for before you're applying light configuration of the environment before init or command step runs and that will make sense when we start seeing like how these run with prebuilds or no prebuilds then we have a knit so for heavy configuration environments so compiling resources installing packages and then commands so starting continuously running servers like a database or web server if that doesn't make sense don't worry because we're going to look at these in a few different ways and i was very hard to kind of describe what these three boxes are but you know i think we'll just go through that iterative process and we will understand uh gen absolutely before the end of this course what goes in before a knit and command so there is no guarantee of the order of the execution for start tasks and so when i say that i don't mean that like there's a guarantee that i'll go before a knit or command but when you have a collection of those like more than one task there's no guarantee of that okay so you can uh have terminals depend on the completion of other commands via the sync await and sync done and we will definitely look at that in the course here uh there is a guarantee of the execution order as uh for before a net command for a task so for the individual execution of this we just saw that will always be the same okay so the execution order varies uh in the case of when launching a new workspace without prebuilds and then when launching a new workspace with prebuilds and we will look at those right now okay hey this is andrew brown and what i want to do in this follow along is just to kind of look at a practical example of execution doorstep so you can kind of understand the context of when you put something in the before the init and the command and it's not like a perfect science and i think you just kind of have to figure your way through it and look at a lot of examples but i'm just trying to think of one where i know somebody is using um git pod in a more complex use case and one would be something like forum so i definitely know forum has a git pod gamble file i think i was saying to them earlier this week it was not working properly but they may have fixed it since then but we're not interested really whether or not it uh like the application works but more so the fact that how are they using it like those execution order steps so notice they have a docket.yaml file in a gitpoddocker file if you don't know what form is form is this platform that allows you to host your own um form essentially if you ever heard of like dev.t.o like this here this is what this is so the great thing is we can go ahead and hit our git pod button and we'll just wait for this to spin up and then once it's there we'll see if it actually is working as expected if it doesn't it's fine but what we're really interested in is expecting that git pod yaml file okay all right so after waiting a little while here the environment has spun up and so what we'll do is just take a look at what is going on there's a lot of things popping up asking me to do stuff and so here we can see that we have two tabs on the right hand side so we have form server bash open site gp so what we'll do is go on the left hand side here and take a look at the get pod yaml file as soon as i can find it here um and if i can't find it that way we can just hit control p i believe and just type in dot git pod yaml okay this is not specific to git pod but this is how vs code opens files anywhere so instead of me having to look through all these things i can just do that so that is the file that i'm interested in so we'll do is open it up and so here we can see that they are specifying a custom image which is totally fine it's not going to make this too confusing they have a lot of ports open so 3000 30 35 5432 that's for postgres i'm not sure what this is for this is for the the ruby on rails web server this is for redis just because i know these port numbers i just don't know what this one's for so we'll go here and we have some tasks and the first thing they have for this task is the form server and they have a before and a knit and command and so in there before what they've decided to do is start up the redis server uh then they are doing an await ports they're waiting for 5432 to happen and then they're doing sleep i'm not sure what the sleep is for okay and so that means that um until port is open then proceed forward which is fine and i'm not i'm not sure what a single ampersand means unless i just remove that by accident i don't think i did so that kind of interested in what that does um again assuming that you know i didn't just introduce that mistake which i don't think i did and then we have this git pod init sh so they're running initialization script so this could have a bunch of stuff in it let's just take a look there get pod init sh so here they are copying environment variable installing a couple gems running been set up and that's kind of nice where it's like okay maybe you have a lot that you want to run here so you just abstract it out into there and then here they run the bin startup command okay and then down below they have open site so it looks like they just do this to force uh get pod to open it up and this is kind of nice um i didn't know you could do this so i think when i did the follow along i had something a lot more complicated so i'm gonna have to go back and borrow that because that is definitely a lot easier all right so this one really just opens up the site and this one is doing this now what's interesting is that they started the redis server here because what they could have done is they could have just made a separate task here called redis server right and from here what they could have done is done this on the um like command step right and so that's what i would have done i would have said redis server and then if i had a ruby on rail server i would have done ruby on rails okay but that's not what they did so they decided to put in the before command and that's totally valid so that's just me trying to say like it's not a perfect science you have to decide if you want to put something in the before or if you want to make it a separate tab for me i prefer to break it all up into separate tabs and before is really designed for um you know like if you had to change ruby versions or things like that at least that's what i think it's for but just understand that you know it's gonna vary for that kind of stuff and so you know hopefully that gives you kind of an idea for execution or steps we're going to iterate on this quite a few times so we'll get it by the end of this course okay and by the way we are done here so we can just go ahead and close that tab i'm just going to go back to my homepage there and we are done so let's take a look at the execution order steps when launching a new workspace without prebuilds and what's important here is that all steps will run within the current workspace so we've got before init and command so let's talk about what we're going to use these commands for so before is great when we want to customize the terminal install global dependencies and we expect the commands to terminate so an example here for the before would be something like rvm or nvm so you're switching to the ruby ruby version that you want to use or the javascript version that you want to use so that's kind of an example there and so for net we are downloading and installing dependencies compiling source code running your test suite and again we expect our commands to terminate so examples here would be bundle stall yarn install rake db create so what's happening here is we are installing ruby dependencies javascript dependencies creating our database for a ruby on rails application possibly um and then we have our command so the idea here is you're going to start your continuous continuous running servers you're going to run your build scripts to build assets and this last command can be continuously running so here we are starting a rails server so hopefully that gives you an idea what's going on here but the reason why these ones have to terminate is because of prebuilds because these will get pushed onto prebuilds and you know you can't have something continuously running or the prebuild will never end but we'll talk about that in the next slide okay so now let's take a look at the execution order steps when we are launching a new workspace with prebuilds enabled so not all steps are executed in the new environment so on the lefthand side it's going to look a little bit different we're going to have our prebuild environment which is only going to run the before and init then we're going to have the new workspace that's going to run the before and command and so the idea behind having this prebuilt environment at where it's running the before knit commands it's going to create a snapshot that will be then used later on when we launch our new workspace environment to reduce our boot time so looking at our previous script there we would do the before here so changing our ruby version and then here we would install our dependencies create our database um and then down below in this new workspace this is when you start a new workspace with a prebuild it's going to run the before and command so just describing what we're doing with the new workspace here the developer saves time because they don't have to wait for the length of the inits compile independent libraries so that's just me redescribing what i just said here after talking about the reduced boot time so here we would do the before again and then we'd run our command so it's really important to think about the fact that these are isolate environments because as you develop your git pod configuration files you're going to have to realize that you know stuff is not going to carry over to the next uh workspace so if you do this rake db crate and it populates a bunch of data and you need that in your uh workspace it might not be there okay so or like if you cd into if you cd into a particular directory right um and you think that you're going to be seated in that directory when you're over here you might not be there so that's something that you'll have to play around with it's not too bad you start to get uh get the idea but i i had a script that i was using that was uh before prebuild and it worked fine and then when i moved to prebuild i had to take in consideration that these are isolate environments here and not everything carries over okay so there you go hey this is andrew brown and we are talking about gitpod configuration files and specifically how to write multiline tasks so if you want to perform a series of commands within a task step there are several options available of course you can do it as one line and the way you would do with one line is you'd have to use double ampersand i bet you could also probably use a a semicolon but double ampersand is probably going to be recommended if you're not familiar with double ampersand the idea is that if this command fails then it's not going to run the next command okay but if you wanted the next command to run i suppose you'd have to use a semicolon to denote the next line okay so if you want to do multiline what we can do is use this closing angle bracket and then followed by the next lines you're going to have to have double ampersand the reason why is that when you use this uh closing angle bracket it's going to take all these lines and it's going to remove all the new lines and treat it as a single line so it's pretty much like writing this but multiline okay and then we have this other one where we use a pipe and the pipe will add a new line so these will be sequentially um these will run sequentially in order and generally in this case you probably wouldn't use double ampersand because it's not going to play well with that new line and if you're wondering about this like angle bracket and pipe and you might think that it is actually get pod configuration file specific but it's actually just yaml's multiline syntax so if you investigate on how yaml multiline works that tells you what you can do here and there's actually more you can do um but you know i'm not going to show it to you here because it's just start we start again the weeds and it's not use cases that are useful but just understand that if you learn a bit more about yaml you'll learn uh how you'll have more flexibility with the git pod configuration file okay this is andrew brown and this follow along i want to show you about multiline strings uh within git pods so when you are creating tasks you can make your life a little bit easier so i'm going to do is go ahead and create a new repo here and we're going to call it git pod multiline and i will go ahead and make this a private repository and so from here we will go ahead and launch a new git pod and so i have this tab open here called yaml hyphen multiline info because i want you to understand that this multiline syntax is not specific to git pod but it is part of it is part of yaml which is the language we use and so here on the left hand side we have an example where it says replace new lines with spaces keep new lines so this is the difference between the closing angled bracket and using a pipe okay so you know when we have a pipe it says keep new lines so every new line that you use will stay there replace new lines with spaces meaning that it'll be treated as one block of text so let's go take a look and it looks like our environment is ready i'm going to go ahead and open up a new terminal as per usual and we're going to run the get pod knit command to initialize a new project so um there of course are a few ways we can do this so the first is the fact that we can just have and we're going to keep playing with echoes because echoes are easy but we could say like hello and then ampersand ampersand world so this is a linux thing the double ampersand and what it means is it says oh nice it actually shows up here so get puck config a shell came in oh you know what it's actually auto completing this but double ampersand is a way of um running more than one command at a time so it'll say okay i'm going to run this command and as long as it doesn't fail as long as it doesn't exit go run the next command okay so that would be that one there and there's also uh the case of um and you know what i'm going to do these all under commands because i just want to make sure this runs every single time what i'm going to do is put command here for this one i'm going to do another one here where we're going to try to do a semicolon so this uh this is something you can do in again this is not specific to git pod or yaml but like when you're writing bash scripts you just send a semicolon to say this is a the next command we want to run all right so we have this one where it should run both this one where it should run both and the next one should succeed and then here we will purposely introduce an error so maybe if i just do x like that which is not a real command it should fail and not run the second one all right and so this is multi um these are multiple examples let's do one with a script so maybe we can load a script so we'll just say um hello world okay so this might be another way that we could do uh mult multiline kind of scripting here so we'll just say hello world as a file we'll say sh for a bash script and then we'll do echo hello world i don't know that will print out to the screen but we'll see what happens there i'm sure it will still work and we'll just say sh we'll have to make that executable down below so i'm going to type in chamod u plus x hello world if you're wondering like what does that mean it means make this executable so that we can run it like that and so we have semicolon double ampersand double ampersand with a a purposeful error and then we also can do uh this way so that is the um angled bracket and so we are going to want to uh do hello here and then ampersand ampersand world because if we don't do that if we don't put the double ampersand when we're doing the double angle bracket what's going to happen is this is going to translate into this right and that would cause an error because it would think there's no you can't have a second and third argument think it's called echo and these are arguments to echo that wouldn't work so that's where we need a double ampersand whereas if we do this okay we can do that and this is going to be the equivalent of basically doing this up here where it's like this is a line and that is a line of execution so i think this is everything that should work i'm not sure what kind of problems we're going to run into but i'm going to just close out the rest here and we'll go ahead and commit this to our repository here and the great thing is because these are all commands uh we can start this over and maybe it might be smart to give these names so i'm just going to go here and say name this will say semi semicolon okay we'll go to the next one here and this one's going to be double ampersand we'll go to the next one here and we'll say double maybe just double amp because it's getting too long here double amp fail i wonder if we could just do this you know i don't see why i can't be named that that might just be easier okay and this would just be double ampersand and then we'll do semicolon here and then this one will be um bash script and you know i didn't do a shebang here i don't know if that's going to cause a problem i'm going to put a shebang in there just in case i'm going to say where is um sh or bash okay a shebang just means tell the script to run a particular way a shebang is the um is this thing so say run in the context of that so i'm just doing that just in case and so we will name it that and then here we will do this multiline so you can say multiline multicommand is what we're learning here and so these are all the variants that should be possible here and i'm hoping they all work the first time around here because that would be really nice but this is our file right so these are all the different kinds of cases you could do and so we'll go back over here and we're just going to go ahead and whoops add these two files so we'll add that and i want to stage that as well we'll just say commit multiline we'll go ahead and add that there all right and so now that's all committed and in order for this to execute we can terminate this environment or just stop and start it since we know how it works so we know command will run again so that's what i'm going to do i'm going to stop this environment and then we'll let that shut down and then we'll start it back up and hopefully they all just work first try i'm writing quite a bit so i'm not sure if i'm making any mistakes there okay so we're ready to go here it says i didn't uh commit a change maybe i didn't so if it doesn't run that's fine but i think that it will because the file is in there okay so looking here it looks like it didn't execute those so i guess the problem here is we're really going to just have to um make sure these are committed so let's say git push here okay and then we will stop it again see i'm surprised that i would have thought that it would have executed even if it wasn't committed if it was just lingering changes but we'll see here we'll open it again we'll see if that's the case all right and did it work so it didn't do anything new so i'm kind of surprised i'm just double checking to see i don't have any syntax mistakes so i'm really surprised that stopping start didn't work in this case maybe it's because none of these uh these are initialized so probably if we had completely terminated and started it again and maybe start and stop it would do it again so i think that's what i'm going to do i'm going to just um because the thing is is that when you stop and start it's it's redoing the state right so if those if those terminals don't exist it probably doesn't have anything to launch into i think that's just an edge case that um until now because i'm trying this now i didn't realize which is totally fine so we'll go ahead and close this tab we're going to just refresh here as a sanity check to make sure that stuff is in there we're going to go launch get pod again okay and this is the reason why it's not working unparsable get pod configuration yaml cannot be read block mapping entry a multiline key may not be an implicit key so the problem is the problem is i have invalid yaml so if that's the case i need to have a way of validating my yaml so maybe we'll say like validate yaml vs code maybe there's like a plugin so there's this um i kind of feel like this would already have it but let's go take a look and see if we can find it here like do we already have yaml installed because this is already installed see it's already installed and so i'm not sure there probably is like a validate right enable or disable this feature validate it seems like it should be validating it and i already forgot what the error was so let me just take a look here i wonder if it's just the indentation here okay i'm just going to carefully look at this here for this we don't really need the name well i probably have the names i don't know these are messing it up so sometimes using single sometimes using doubles i'm just going to do this here and so i think it was that indentation so what we'll do is we'll recommit this file here all right so fix get pod gamble file and that could have been the reason why it wasn't doing that but i still think that um those terminals aren't going to launch unless you um already have stuff open there so while that's going i'm just going to read here a little bit okay so here's validation detect whether the entire file valid is is is valid so like see here they have like hotkeys so that you know if you're making a mistake but like there's nothing there that was telling me that it was valid or not so yeah there's something going on there but uh oh maybe we'll just um we got to stop this workspace so what we'll do now this is saved we'll go back here we'll give this a refresh we'll make sure that our git pod yaml has been updated with the indentation we're going to launch this again we're going to see what error we get if we get any error at all so looks like we don't have any trouble this time so great so let's go take a look and see what our results are so the first one is our first task here where we're using the semicolon and it is saying here um hello world so we can use a semicolon works just as we expected it to then we have the double ampersand so again double ampersand means if this one fails the rest will not complete so that worked as well then we go here we'll notice that it failed on the first one and then it didn't continue on to the second one so that is really good that's what we expect and i guess like if we did the semicolon one i really didn't show that there i should have done this like fail and maybe we'll rerun it just so we can view that afterwards then we have the bash script so it's using the bash script that is over here so that is another way we could do it then we have the multiline this way so that was valid so that worked out fine and then we have uh this one here so i just want to show you that if you take these two out this is going to fail okay so i'll just write fail and maybe we can just add it in as an extra one whoops so what we could do is go here i just want to show you if you do this one this one will definitely fail okay if we take that out like that it should and we'll go back up to our semicolon one and this one should fail as well so we will give that a go one more time and um i'm going to terminate just just in case so we'll just say update gitpod yaml file with more examples of multiline i don't care if it's over the length it's fine for me we'll sync those changes very important to sync we'll give it a moment to sync great we're going to close it again and we'll just look at those edge cases there just one more time okay and so it's just launching up here all right so we have a few edge cases so let's go this one so this one said hello x command not found but notice that it executed world so it didn't stop on the first one so you go here look it stops on the first one but with a semicolon it won't so that's a consideration for you and then we did the multi bash one and it we have hello echo world so it didn't um it didn't crash but it treated like this was the entire string so you can kind of see you kind of got a wonky result so hopefully that shows you how multiline works and there's obviously a lot of uh options for you there and we'll just close that off and we're done multiline so let's talk about awaiting tasks within git pod configuration files so get tasks all executed in parallel so by default there is no guarantee of the order of execution of the overall tasks okay but there are a couple of ways we can force a guarantee of the execution order and the first way is when we want to wait for command and so get pod has a cli and they have two commands called sync await and sync done so here we have an example again it's a ruby on rails app um and so if we look through here let's just try to find where we see synco wait so we have this rails app that is starting up and then we have webpack and it says sync await for bundle okay so it's waiting for this command up here to finish because if bundle install is not done we should not run um this command here right and the same thing for redis and for sidekick until this command up here runs should it proceed but the way it knows that it's done is that you run this sync done over here okay so just erasing all that stuff because i know it gets kind of messy but the idea is the idea is going to stop and it's not going to proceed until this has been triggered okay and that goes for all the tasks and so that's a way that we can force the order of these tests now there's another way and this is where we want to wait for a port so this is where we use a weight port and it doesn't have like a a weight or like done port or thing like that but the idea is that let's say we have endtoend testing that we want to implement and we want to run those tests but it has to have a running server on port 3000 so the idea is that it's not going to run npm run tests until there's something running on that port and so when you start up npm run dev it's going to ask you hey do you want to open this port you're going to open that port it's going to see that it's running and then it's going to run your tests and so those are our two options there okay hey this is andrew brown and in this video we are going to take a look at um uh things where we can await for things okay so what we'll do is create a new a repository i'm going to call this one get pod await since we can await a port or wait a command and so down below we will go to private and we will choose your readme and we'll create this repository and we'll go ahead and launch this uh workspace we might pull up the documentation here so like a waiting command get pod here and so if we go over here i'm not sure if it'll show up under here because that's where these commands show up like a white port and things like that so here we have gp await port 3000 things like that so i'm not sure if they show an example here but we definitely saw one earlier when we were looking at form so if we just want to go back to form for a second which um had an example of a command i believe or maybe it was a port i don't think it had command a which is not a big deal um i have an example within the the course here so we can down below this has a gp await port so not necessarily the other one but let's go over here and so something we can do we'll just go and open up our terminal as per usual we're going to type in gpinet to initialize a new task so we don't make any mistakes here and so what i'm thinking here is let's do a weight command and what is it called a weight uh sync await and sync done that's what we want to do apparently they have a real world example so let's take a look here actually i want to do a ruby on rails application so here's an example where they have a ruby on rails application and they're kind of waiting for that those kind of steps i don't know if they have like a quick start for this um probably would have been good if there was like a get pod example here but uh what we'll do is we'll just kind of make up our own example from this all right so what we want to do and i think ruby's installed here if i type in ruby v it is great so with ruby you have a thing called gem files okay and that's just a way of doing uh versioning and gem files are done via bundler so bundle generate gem file i'm not sure what the command is i usually just write it by hand and copy out code but i wanted just this kind of information so that's all actually all i wanted for the file i thought maybe like a generation command allow and so here what we can do is install some gems uh very popular gem would be something like pry that's for like debugging we don't necessarily need to use it for anything it's just the fact that it's going to be here we're also going to need a now we don't need a docket ignore file it's totally fine so what i'm going to do is do a bundle install here oops bundle install and that's going to install our dependencies here then we're going to get a gem file so we can commit that to our repository but the idea is that i want something to wait on the gem file first so and i wish i kind of had an idea of some kind of gem that would have been useful for this case but actually you know what would be useful it would be sinatra so instead of doing pry i think we'll do sinatra sinatra sinatra is a micro framework for web applications for ruby sinatra it's a really great way of learning how to work with web servers ruby not the singer but the singer is fine too and we'll go here and so this is the most simplest example of a sinatra application so if we go over here and we paste in our sinatra application into a new file here so just say server.rb we'll just paste on that code and so we'll need to put sinatra in here instead we don't need the pry and there's some way to start it up on a different port i haven't done this in a while so i'm not sure um documentation i thought this would have been like different port different port port support sports how do we change the port okay sinatra ruby port change okay so down below here set port so you can't you just set the port like that note that this is another way to bind to socket so configuration is what we're looking for so here it is okay so here we can change the port and i'm going to set this port to stop pasting right now so we'll say set port 80 80. just going to double check to make sure that is correct the syntax there's a comma in between okay and so that is the port there and we have our gem installed which is great and so i'm gonna actually have to do a bundle install again because i actually got rid of pry we'll give that a moment there to install and so what i want to do with this um task here is i want to have one i mean like you wouldn't do this generally because you could do it all one command but i'm going to do one where i install the dependencies so we'll say bundle here and then this one will be like server run all right and so here what i'm going to do is init and i'm going to just say bundle install and then for this one down below instead of a net we're going to just do command and here we want to run sinatra so it has to run in the context of bundle exec because that's how it knows it's going to run that there and we'll do server.rb and so this one we want this to be open on port 8080 all right and that looks fine i think i might want it to also open as well so let's go over here we saw this in forum earlier which i thought was really cool i didn't know that you could use it this way so i kind of want to give that a go here and we'll just say command and so the idea here is i want this to open this on port 8080 um i'm just trying to think of there's anything else i need to do because this isn't going to this server is not going to go to that url so i might have to also do this which is i need like a forward slash here i'm not sure how would i how i would join that so i'm not sure let me see here i what if i could do this what's this do okay but can i do this i'm not sure if we can just do that like that so just to make our lives a little bit easier what i'm going to do is go over to the server here and just change it to frank says here because that'll just be a lot easier for our example and um so we have the port open it's in preview this one's going to launch it so just open it up open preview here and i'll just put this on the same line here we don't have any issues there and so i think this is what we want um but the problem is is that there's no guarantee that the bundle install is going to happen before the server runs and so let's just go even though i know this is going to break i want to go ahead and add all these files here okay just say like init file and i'm just going to double check to make sure that actually serves something this is going to serve text which is fine and so what we'll do is commit all that sync the changes and while we're waiting on that what we'll do is go ahead and close this tab here and we'll go ahead and relaunch and we'll see what happens all right so here we are and so let's just see what has happened here um so we go to bundle install it did the bundle install which worked out great and notice here it says bundle install to install is missing gems so could not find sinatra 2.10 stuff like that so it it's possible that this ran after this so this might have executed first because this is a very lightweight would take two seconds to run and this would take a little bit more time to install so i just wonder if we were to go back and execute this command would it work so it is working so that is where this sync awaits going to be very useful for us this didn't open up for us here unable to connect to the vs code server error in the request i think this is also because the port wasn't ready all right so what we're going to do here is we are going to go back to our gitpod file here and we're going to use this sync await thing so here um and we probably use port as well but um it's gp sync await so what we'll do is say gpsync await and for this we want this to wait for the bundle so i'll go here put this on a new line and we'll paste that in on there so that will just cause it to block and the way we decide that it is done is we would go up here to the init oh by the way we need to oops i have i put the caps key on by accident um but we will need to make this multiline and then we'll have sync done and we'll just say bundle or maybe like bundle this would be bundle to be specific we should say bundle install so it's just waiting for this to finish first before it does that and so this should kind of resolve our issue at least one of our issues so we'll go back here we'll add this here assuming i wrote this all right we don't know until we do it so add sync await and sync done and we'll go ahead and save that there we'll go back over here and um we will sync those changes we'll say okay what i will do here now that i've synced the changes we'll just go ahead and close that tab and reopen and see what happens there because we do have an init there so if we were to stop and start we wouldn't get exactly what we want all right so it's starting back up here so let's go see i actually all worked which is great if we go over here to bundle all that worked and then that executed and this happened to work okay but if we keep on running this there's probably a chance that this might not work because the port isn't ready so i was kind of hoping that this would fail and i think the only way we could make this fail probably is if we just put it in a sleep here so what i'll do and i think sleep is for every single second is i'm going to just write sleep and put 10 seconds okay and so that should sleep long enough that we should see this fail so we'll go back here we'll add it so sleep a while and i wanted to say like hey this port isn't ready what what are you doing you know so go back here and then from there we'll go back close that tab we'll open that up again and we'll give it a moment and we'll spin up here in a bit great so now that we are here um let's go take a look and see what's happened and it still worked so it's it it's still executing well actually down below here it says unable to connect to vs code server so i'm wondering if it's because we have um uh this option here right so it's opening because when the port became available it opened so i'm thinking i'm just going to go ahead and remove this let me take out the on open because this would notify by default so what if we put this to ignore say ignore here again i just want to see that this doesn't open and then we have this here and then if if we take if we put in the port await it will work properly so say uh one more time i mean clearly this is airing out so that's no good but it's still open and that just because git pod is is smart so we'll go there and we'll go ahead and close that we're gonna reopen our git pod here and uh so that errors out which is totally fine that's what we kind of expect to happen and now it's not opening up the preview so now i think we have our opportunity to uh put in the um that other command which is the port await so what i'm going to do is go grab this command here and we're going to go down below and we're going to expand our command here whoops and so my expectation is that it's not going to run this command until the port is ready see i don't know if we need like a double ampersand but i'm pretty sure this waits until the port is open so i'm going to say port 8080 here and what we'll do here is go back and we'll add this here we'll say update get pod yaml and we'll save that and we'll save those changes and um what we'll do is we'll go close this tab again and we'll launch it one more time great and so what we're going to see here is this is a waiting till the port is open remember this is sleeping right and look now it works so we made a great example where we're using both a weight port and a white sink so there you go so that's that's what you'd use with those things and uh we're all done here so we can go ahead and just close your tabs and that's it so to understand git pod ports we need to take a look at computer networking ports so ports and and that's the short way of saying just ports acts as a separate channel for communication protocol so you have more than one program using the same protocol and tcp the protocol we use for websites and web server has 65 535 ports and some ports are designated for specific types of communication and others are undesignated where we can use them for whatever we want so for designated uh ports ones we absolutely should know is port 80 so hcp 443 for https 22 for ssh and the way these are used is the port number is will follow an ip address or domain name separated by colon so here's an ip address and we have port 8080 and so we have the ip address here and the port number there in a web browser you can write the port number in the address but generally you won't see it for websites because it just shows up by default so if you're doing http colon slash it already knows that it's port 80 and if you're doing https colon slash it already knows that it's port 443 so that's why you don't see them there usually so there are many undesignated ports which can be used to view or serve web applications for the purpose of development uh and the popular development pro ports being 3000 3001 80 80 8000 8081 and so 3000 and 3001 is very popular to break ruby on rails why is there 3 000 ones just because like if you're using 3000 you need a second server you have that that's why you see it with 8081 or 8001 as well 80 80 8000 are very popular in the uh with javascript uh web servers but these are the ones you normally see and probably what you should use because there's a lot of synergies with a lot of technology that are already defaulting to these ones so when we're talking about ports in common language it's common to say things like i'm listening on port you know or i'm serving on port what have you right so just understand when you're saying listening or serve it's pretty much the same thing um and same thing with like opening port or exposing port means the same thing just so you understand uh you know those there okay so now that we know what computer networking ports are let's take a look at git pod ports so in order to view websites or web applications in a web browser running a workspace tcp ports need to be accessible and gitpod allows you to open ports so you can set ports in your dot git pod yaml file your git pod configuration file and so there we are opening up port 8080 in that example uh and so then once your workspace launches you can go to the remote explorer and you remember what the remote explorer is because i definitely will ask that as an exam question but once um the port is uh uh open then you can go over the remote explorer you can see that there's a port there so here we see port 3000 it's open it's private there's like a button to open in the browser or inline in the code editor but if you don't define ports ahead of time and that's totally fine if you don't if you start up a service on a new undefined port gitpod will prompt you if you want to open the port and so you just press the button and we'll open the port and even after that it'll probably ask if you want to launch it in the browser um but yeah that's all there really is to it gitpod cannot use ports that are lower than uh 1024 so common ports like port 80 443 ssh you cannot open those ports and really you shouldn't be because this is a developer environment and port 80 443 or for serving production websites or web servers and i just want to reiterate you don't have to define ports ahead of time you can open new ports on the fly okay so let's take a look at some of the configuration options when we are defining ports so we can do a port range so three thousand two eight nine nine is nine this example here of course we can have a single value as we saw in the previous video uh we have opening behavior so this is where we define on open it has four possible values so notify which is the default and when it says show the notification it's that notification that says hey how how do you want to handle this port do you want to uh open it in a preview do you want to expose the port like what do you want to do with it so we have the open preview option so open the preview on the right open browser so open in a browser tab or ignore so don't do anything then you have port visibility and so by default it's going to be set as private and so we have private which is the default this only allows users with workspace access to access the port the reason i highlighted that was actually for my own notes because i don't know exactly what that means but we'll find out in the follow along because i want to know like does it mean that only i can use it or if we like if we have a team and somebody's within my team only team members can access it so that's something we'll have to explore then there's public so allow any everyone with the port url to access the port so there's an example of visibility so there you go hey this is andrew brown and we are taking a look at port forwarding so what is port forwarding or also known as port mapping is an application of network address translation a nat that redirects a communication request from one address and port number combination to another and that's basically the wikipedia description but uh to simply put port forwarding sends traffic from one port to another essentially acting as a port alias so using the getpodcli command forward port you can send traffic from one port to another so here's an example of me uh forwarding the port at 8080 to 80 oh sorry i said forwarding 80 81 to 8080 okay and so some programs will start on a hardcore coded port and will not let you change the port so port forwarding is a way to work around this issue so that's the major advantage of port forwarding hey this is andrew brown and welcome to another follow along this time we're going to be looking at all about git pod ports of course we did cover a weight port but we might just cover it again in here just because we are going more thorough into the port section of the course so i'll go ahead and type in git pod ports i'm going to add a readme it can be private and what we'll do is go ahead and type in git pod ports here and just pull up the documentation just in case we need it so we can set ports within a range we can set a single port uh things like that and then we have a bunch of different kinds of um things that can happen like the modes that should happen so what we're going to do here is launch this new git pod okay and we'll just give it a moment here but you know just looking over the on open ports you have notify so show the notification by default open preview open in the preview on the right open browser so open in the browser tab ignore don't do anything so we'll explore because this is part of ports and so i guess we can cover all these options here for fun and so as always we'll go up to our hamburger menu we're going to go over to terminal new terminal and we'll go ahead and type in gpinit and from here we're going to need some kind of server so i'm going to go server.b and we're going to go grab sinatra again so we'll say sinatra ruby and from here i'm going to go grab this code right on the page that makes it really easy and we'll say allow and then we're going to need a gem file so just say gem file and i'm just going to say like a net gem file bundler because oh there is a bundle in it generates a gem file well let's let's do that because i'm getting tired of um uh looking up the first command here so we'll say um bundler init all right and so that's where we get that uh that front line that we wanted there okay and this is useful too to have the github thing here so but we'll just go here and say gem uh sinatra sinatra okay we'll do a bundle install whoops bundle install i like doing bi it's my shorthand for that and so now we have a very simple web server i'm going to modify this slightly because i want it to take in environment variables so i'm going to just go here and make a double quotation this is interpolation in ruby and so i can just do env square braces and we'll say message and we'll say says oops i'm able to say port so say frank says from port okay and so that way we'll be able to pass that along and kind of set that we also need to set our um port here so we'll say port colon and then we'll just do env for passing along a environment variable um we should probably make this a little bit more flexible just say app port because i don't know if there's like any underlying port so let's just do that just in case and from there we have a simple application and so that should work no problem and the way we can test that is by typing bundle exec actually before that we have to set our ports so we'll just say port 8080 and i will just put a space here or maybe double ampersand and we'll say uh ruby server and so that started up on port 8080 just double checking here to make sure that it's not just the default port here so that's starting up on port 8081 i don't think it's oh you know what it's because i'm not setting app port like this okay still not taking the right port so i'll take out the double ampersand and there we go so sometimes you got to play with it a little bit so that is how we're going to be doing that so go over to our git pod gamle file and we don't know which port we want to have open as of yet well actually we might want to set them all there um so what i'm going to do is i'm going to go up here and we're going to do a bunch of different ports because i want one for each of the types of things we can open here so we have notify open preview open browser ignore i'm going to go just grab these for here so we can save ourselves some time we'll drop those in there and from here we'll have port 8000 port 8001 port 8002 port 8003. and we'll have this on notify which is the defaults we'll have this one on preview open preview then we'll have this one on open browser and then we'll have this one on ignore okay so there we have all the the cases there and then up here we're just going to have our ports we'll say 8000 and our command we do need to initialize this stuff so what we'll do because we need to have a i think that's going to do bundle install so up here we'll just do bundle install and we'll do an init here and we did learn this um a moment ago where we had the bundle install and then we oops bundle install and then we had our gp sync await and we'll just say bundle install here because we these are all gonna have to wait for that stuff to be installed for them to work and we'll take out the command here and then we're gonna do our app port so we'll say app port equals a thousand bundle exec rubyserver.rb and from here we also want to wait so let's say gpsync done i guess this would actually be the weight just so that one would be the done so we go down up here or over there and so that's going to be on port 8000 this one's going to be on port 8001 this one's going to be on port 8002 and this one's going to be on port 8003 all right so we have a bunch of different uh ports there so that will give us a four and they all are going to launch in different ways so that looks pretty good hopefully i didn't make any mistakes because we did write quite a bit here um but that's okay so what we'll do is go over here and we'll commit all these files and they look like they're all committed so we'll say set up a bunch of servers and we'll commit that sync the changes we'll say okay and then from there what we can do is go ahead and we have a get get uh yeah there's a lock file there so that's great so we'll close that off and we'll go ahead and reopen that okay all right so there is should be a string uh so i really wish i knew how to validate the yaml beforehand so like i don't know what vs code extension i need there but like maybe there's like yaml validate i can see like in this linter here maybe i get this nice ad on the right hand side so i'll reopen that up and we'll just see if we can spot the problem let's say that's like my only frustration it's probably there is a tool involved and i just don't know you know so i say copy and then i'll paste this in here and we will then say go says it's valid yaml yaml so there's something that it doesn't like so we'll have to just closely look at this here so we have a net that looks fine we have the command here that looks fine so i'm not sure what it doesn't like so we'll do a sanity check and we'll just kind of simplify it so i'll just um go here and comment this out for the time being and same with here okay so oh you know you know what it is it's probably um this because it starts with a number so i'm just going to do this and maybe that will fix our problem because i think it's it's like equating as a number as opposed to a string and we probably just wrap it as a string whoops maybe not those but that's probably our problem so we will try this again it's good to know fixed names of tasks we'll sync those changes we'll say okay and from there what we'll do is close this tab we'll go back here we'll say get pod and so we'll wait here so frank is open up 48 000 so this looks like it's working correctly let's go ahead and close some of those tabs so here's a thousand here's a thousand one two three and so one is opened up in here um but like the other ones didn't open up so maybe you just can't have multiple ones it's like one or the other but like i would have thought that um if this was set here open browser it would just automatically open up a page maybe that's not the case but if we go over to the remote explorer here we just kind of hover over here it seems like we can open it in preview or this kind of stuff so i'm not really sure why that doesn't work as we think it does but it's not really a big deal and i don't even know if we ever saw that open as the browser uh like that before so anyway that kind of gives you an idea like this one probably prompted us and we didn't notice as we clicked through there just kind of showing you how you could set them all let's now go switch this to a range so instead of doing this we can say port 8003 and i'm just going to switch them all over to open browser i just want to see if they actually do open here and so this will allow us to do a port range okay so that should work no problem open up a port range we'll go ahead and commit that we'll sync those changes we'll say okay and by the way like i think down below here it actually shows you what ports are open so if you click this down below i know it's hard like look where my mouse goes all the way down here you can uh see the open ports but they're also going to be down here in the road explorer and you can make it public or private and things like that over here these are all private right now um so what i'm going to do here is just close this tab relaunch this and then we're going to see make sure the range ports works of course it's going to work malicious dude anyway just to make sure so there we go we have a bunch do those pores open which are good again browser didn't open so i don't know what the point of this is like if it doesn't open right away i don't understand but um or it could be you know what it probably is oh so it has been this entire time we just have to say always allow the popups and redirect okay and so now probably if we were to relaunch this they would all open up so that's what i'm going to do i'm just going to do this one more time i'm going to make a new workspace because we need to run the init again actually probably don't we probably could have done a start it would have worked because they're all commands but that's fine and so okay so basically because it changes the girl every time it keeps on blocking at a so i think like what you'd have to do is probably have like a wild star in here so let me just take a look okay so i think what we could do is we could probably go up here and say add and then do wild card and then do that should allow us to do wild card maybe like this there we go we'll hit add and now i'm going to do i'm going to do it one more time and i think we can just i'm going to just kill it even though i probably can stop stop it uh stop and start it again and i'm just going to say new workspace and so now they all open so that's probably a good thing that we did there for chrome and i guess i just never noticed that and that kind of makes sense now but anyway so that is port ranges um you know there's a few other things we probably can do let's just take a look here so we did that there's private and public i guess we never set that for the ports and so we could explore that as well i would probably have to go get another account set up here to show you um but maybe we can just will this down to two so i'm going to just take this down back to two and we can say private but i guess it'd be visibility visibility which would be private public and i'm just gonna get rid of that port there we'll see go back to port one and then this one will be private okay and so just looking at this here that should work no problem i'm gonna go ahead and commit that so public and private now we'll go ahead and save that we'll save those changes we'll say ok and from there we'll go ahead and close that and we will reopen the git pod and as that's going i'm going to have to open up another browser so i'm going to go get firefox here so just give a second for firefox to load okay not now nope just let me browse please and so i'm just going to go off screen and log into my github so i have more than one github account and i have more than one git pod here so that will just take me a moment you can see these ones opened here and i'm just going to sign in off screen here and i'll see you back here in a second okay all right okay so i have um firefox open here on another github get pod uh picopod account and so what i want to do is see what i can share so if our servers are running they are here they both are one is public and one is private and so the one that is public let's go see if we can bring it over here so i'm gonna go ahead and paste that on in here so port 8000 works fine and then we'll look at port 8001 and so i can't see port 8001 and so one thing that's interesting is that if you have private they suggest here that um only allow users with workspace access to access this port okay and so what does that mean does that mean if somebody is in the same project or does that mean if you're just sharing it with them so that's something we're going to have to find out so what i'm going to do in my gitpod is i can actually create projects here and so i can create a new project i don't list i don't think this will allow for collaboration so i might have to go to this one so my new project here and then from here i need to add a member so i'll go here and give them the invitation link which is on the other side here and then they're going to have to go accept that so i'm over here now and did i accept it i didn't see like a step to accept let's go back and refresh it didn't oh looks like in my firefox i'm in this account you know what i think it's because i'm logged in the same account so what i'm going to do is just log out here because my github is another account here and so what i'll have to do is just kind of like launch any kind of repository here this will take two seconds and i'm just accepting the authentication there okay and so now i'm going to try to invite myself again so copy that and we're just going to paste that there and so i i just instantly clicked it and i was added so there's no like do you want to be a member uh which i think maybe they need that but that's fine it's not a big deal and so we'll go back over here and so now if i just refresh here i want to find out um is this one do we saw this pod running yes we do so if we go back over here on this other screen here this is i think the private one the 8001 does that work no it does not and that's totally fine so what i want to do now is i just want to go ahead and create a new workspace or sorry project and we'll say um or did we already have a project here oh it's right here new project oh sorry this is a team i called it my new project i should have called this um my new team so i'm gonna go ahead and delete that team because that's just too confusing and we'll go here i'll say uh my team my i guess maybe these are unique names i didn't know that so my team exam proco okay there's no way that that name exists and so we'll go back over here i'm going to invite members and that kind of makes sense why they might have like the block lists which i didn't know about before and so now i'm a member of that again so we'll go here and we'll give this a refresh so i'm a member we'll go back over to projects we'll make a new project here i don't know why there's this e1777 but i want to choose any repository here the one i want actually it's not any repository i want this one here so let's go back over here and let's see why this isn't showing up search repositories we'll say git pod it's only showing oh you know i said on gitlab so we'll switch back and we'll say github and we'll authorize and we'll authorize all so now we can go and bring in the repo we want which is the ports repo and so if we go over to the workspaces here there are no workspaces so now what i want to do is just close this off and i want to launch this under here okay and if you do launch it from here i'm pretty sure it's going to open up in this workspace but just to be sure i'm going to go do it from here so yeah it is in the same workspace but i'm going to launch a new one anyway because i want to see again if i share it with this account that's a member can they see it all right so we'll go here and so 8001 is the one that is the private one and so we'll make a new tab here we're going to paste that on in there and so they still can't see it so just because you're a member doesn't necessarily mean you can see it so now what i'm thinking is that it has to do with like sharing your screen so what we'll do is we'll go over here and we'll go to the share and we'll say share and now we're going to copy that to our clipboard and we're going to go ahead and paste this on in here okay and so now i'm sharing so i have access over here i'm going to refresh see if i have access here i don't which is fine but what i will do is go to the left hand side here because these servers should be running remote explorer this one says it's private so i'm going to open this in the browser oh uh we'll say is preventing this to open we'll go to options here we'll say always allow whoops and so now it's showing up i don't know if there's like a difference between this one and that one if we go back over to the one here we open that in the browser we go back over here okay so there's a bit of like finickiness with this but you can see that you know if you are sharing you have access but just because they're a member of that workspace doesn't necessarily mean you can share that private one so that's just kind of one of those uh harder edge cases that i kind of want to show you so that you just know what's going on there so now that we've figured out how to do um a lot of stuff let's do port forwarding that'll be the last one here so imagine you have a project where you have a whoops that's saying this this doesn't exist oops go ahead here and go back here so imagine you have a project where you don't have control of the actual ip address and it's not showing me anything here i'm gonna have to relaunch this it's being funny okay and yes i want to just open the existing workspace here and so that's great and so um it could be a case i'm just going to stop the server here for a moment where you need to like we're not going to have this port so if we don't specify any port it's just going to start on port 8080 right so if i go bundle exec here and actually i think we should probably do this in our code i'm just going to make a third one here that's to a fixed port so i think it starts on 8080 so we'll go here and i'm just going to say default i'm not going to specify any port and then we'll go ahead and commit this and we'll see if we can use the port forwarding okay so sync those changes we'll say okay we'll wait a moment i'm going to close that tab we'll relaunch that i'm not sure why it's doing a prebuild because we don't have prebuilts turned on at least i don't remember turning them on but for fun we'll take a look here so if we go here to our project reports oh it is doing a prebuild okay so i guess as soon as we make a project it becomes a prebuilt i for some reason i thought like prebuilds you can turn it on and off and maybe you can but i don't see the option there so um the only problem with that is that if it does a bundle install no it should still work so that should be fine yep so it's doing the bundle install that's the prebuild and here down below you can say don't wait for prebuild i didn't know you could do that but we'll just give it a moment i'll just see you back here when this is done launching okay okay so i'm just like sitting here waiting for this to finish but i think the thing is that it's already done because it exited out of here so i think if i just close that off and we go over here we can see the prebuild is ready and so now if i go and try to launch a workspace it should work so we'll go ahead and we'll just say new workspace and because that prebuild is there it should load really really fast um but yeah i guess i was just waiting there for no reason i will just give it a moment there we go so that was pretty fast um and so i'm expecting uh this one to go to the default one so if we go to this tab here we're gonna notice that it's going to start on it's starting oh you know what because these are all waiting for the bundle install eh so none of them are going to finish okay so just to make our lives a bit easier because this section is not about teaching you about how to do prebuilds so what i'm going to do is i'm just going to go ahead and delete this project if it's possible so we'll go back up to the top here i'm just going to go ahead and remove that project okay and so that way that'll just make our lives a lot easier so if i just launch this it won't do prebuilt stuff and it will work as expected so we'll give it a moment there and so this one because it will do a bundle install here this should now work properly this task ran as a prebuild oh boy um so i guess the thing it's not a big deal i think the thing is that i just need to modify this file because now if i modify it i don't know if it will just like stop using prebuilds so what i'm going to do is just delete out these commands here and we'll go here and just say um remove weights because this will happen in the prebuild right so we'll say this assuming that it's going to do another prebuild even though i've deleted the project so there technically should be no prebuilt now and so i might have to recreate the project which is totally fine we'll just work our way through here and see what happens okay so we'll close that and i'm going to go back here and just do git pod because i don't know what it's going to do and so we have bundle install missing gem so now it's not doing prebuilds okay so in this case that's where we want to revert this file back to what it was so i'm going to go back and write it in because i don't want to go back and create the project so i'm going to say sync done bundle install sync await sync await sync await and so this server is going to start up over here and that's fine i just want to have one for the port forward so port forward there's not not going to be anything going on here i'm just going to say like command echo hello and what we'll do is go ahead and commit this file so we'll just commit that update and we'll sync those changes as per usual and we'll give it a moment then we'll just go ahead and close that reopen this and get pod i think we'll have an easier time all right so it's almost open here and this is not even with prebuilt it's pretty fast but again it's going to depend on your use case so um here we saw these two open because the ports already open they have the mode set up this server is running right so and this is running on port 8080 but imagine that you didn't want it on port 8080 you wanted on something and you know what to be honest a better example for this would have been port 80. so i'm just going to do this sorry i know i'll keep on modifying this but if this is an accessible port that doesn't make it a very good example let's just say open on port 80. and actually before that happens i'm just going to start it up manually to see what happens if it actually does permission denied so i'd have to go here and do like sudo um so we can't even start it on port 80. i think we'll just stick with what we have here so we'll go back and we'll just start it back up again okay and we'll just do port forwarding so if we wanted to open up on a different port so we'd just say gp port or a ford port want to forward port 8080 to 8999 maybe 88 and i think it's going the wrong way so um port 80 is already in use okay maybe we'll try that again it's just confusing because to me it looks like traffic coming from here should go there but i guess that makes sense because if traffic's incoming from port 888 send it to 8080. okay to me the direction just confused me but it's actually correct and i'm just confused so um if that port is open let's go over to remote explorer here so now we see port 888 and so if we open that up we can see that it is forwarding to port 8080 so there you go that's pretty much all we need to know about ports of course there was a lot here but i think it was just worth making sure that we were very thorough with our investigation here so we'll just close off all those tabs and we'll see in the next video okay hey this is andrew brown and we are taking a look at git pod custom docker images so git pod supports custom docker images so you can configure your workspace exactly to your needs and this is really important if uh you know there's security reasons like you need to really lock down what it is that's um within that container or you just have uh wildly different use cases like maybe you're doing uh web3 development or machine learning and you just can't find a quick start template so that's where you have to start making your own docker file so git pod supports uh debian ubuntu based docker images but it does not support alpine the reason it does not support alpine is that images do not include alpine images do not include lib gcc or lib stdc plus plus which breaks visual studio code if you don't know what alpine is it's just like really really really small image and that's why people or os and that's why people really like alpine but i always found them very hard to set up debian ubuntu a very very popular hopefully we'll see support for things like uh centos and things like that later but this is the ubuntu logo that's the debian logo and there's alpine crossed out if that kind of helps cement that information but you should remember that it does not support alpine there are two ways to specify i know it says specific but should say specify an image okay so you can reference an image from a container repository like docker hub if you can specify things outside of docker hub i have not tried but i assume that they all go to docker hub so here's an example where we have an image and we say node buster we know that's going to go to docker hub then you can reference a docker file contained within the repo and so what you do is name a file called gitpod.dockerfile i don't know if you could just call it dockerfile and then reference it there but this is what it's always called so it's probably best practice just to follow along there and then here we have a very simple um docker file that does basic basically does nothing but it's just an example of us configuring our own so for git pod images uh it's recommended to not specify a tag or use latest to make sure you're you automatically benefit from the security patches and fixes uh we release we really mean git pod so you see i kind of copy paste there from the documentation but what they're talking about when they're talking about tags is that when you have um like this image here you can do like colon latest or you can put a version number stuff like that they're just saying don't specify a version number or a type just don't specify anything or type colon latest okay hey this is andrew brown and we are looking at the get pod workspace base image so gitpod workspace base base is a docker image that has a bunch of common tooling installed and so you can find it here on docker hub or you can get find it on github so those are the two paths there and so this thing if you start digging into it it really relies on something called build pack or build pack uh depths and the reason i went digging was because i just wanted to know what was installed on it so this is a docker image for a collection of common build dependencies used for installing various modules it is similar to heroku's stack image which includes a large number of development headers packages needed by various things so npm install gem install pip install curl wget git and a whole lot more so what's the purpose of the workspace base well it extends from build pack uh depths with a bunch of additional tooling and so we have a lot of stuff like zip unzip htop uh jq which is great for working with json less locals nano sudo vim all sorts of useful things and so this is a really great base image but we're going to talk about the full image next because that is generally what we see a lot of people using okay all right so let's take a look at the get pod workspace full image so uh every workspace launches by default with a standard docker image called workspace full and so just like base there's one on uh docker hub and github so very similar and workspace full extends from workspace base but it's going to be adding some additional stuff so the gitpod workspace full image comes preinstalled with a variety of commonly used programming languages libraries and system packages but really talking about that coming from the base image but just to kind of list the languages here we got docker go java node.js c c plus plus python ruby russ php homebrew tail scale nginx and several more so when you're developing your own custom docker images you can either extend the workspace full or if you need something lighter the workspace base but we will obviously open these up uh these these images up to kind of look at their docker files and kind of figure out what they're doing okay hey this is andrew brown and in this follow along i'm going to show you how to set up a custom docker file if you notice i tried before it didn't work so this is going to be my maybe third attempt to do it so what we'll do is type in gitpod custom or gitpod custom docker file and from there we'll go down below choose private add a readme we'll go ahead and create that repository then once there we'll hit the get pod button so all we're going to really be doing is going through the basic custom docker file here just to go through the motions of it we can use hyphen base we can use hyphen full it's just going to be dependent on the use case so if you use get pod fold image your docker support built in your you get docker support built into your environment so full sounds pretty good to me so we'll need a file here called dot get pod uh docker file now does it have to be dot get pod you probably could specify dockerfile because it references it um via the file so i'd imagine you can name whatever you want but it's just good habit to follow what git pod has there so i'm going to type in gp init and from here we have a file i don't need any of that content we're going to have image and then i think it's like type or file okay so we can do file here and then from there we'll just do git pod docker file okay and so now the next thing we want to do and maybe we might want to put one task in there for fun tasks and we'll just say um command we'll just say echo hello world okay just something for fun and so in this docker file we're going to be now writing whatever format a dockerfile is so do from getpod forward slash workspace and again this could be base but we're going to do full because you get the full power docker that way and from there we can do run brew install fzf now what is f is that f i have no idea so i'm kind of curious myself so i'm just going to type that in command i just don't know what it is so this stands for fuzzy finder so f c f set f is a general purpose command line fuzzy finder it's an interactive unix filter for command line that can be used with any files so i mean that sounds really interesting um how it's used i don't know so i mean it might be just interesting to see if we can figure out how it works but um i think this is it so run brew install fzf if you see brew and you're thinking isn't that a mac thing well i think there's a debian or ubuntu like compatibility for having brew so um yeah i'm not really sure let's see ubuntu brew so homebrew on linux so i guess they have a linux distribution and so that's how we're able to do that normally i would be like doing yum or apk install app get installed for debian ubuntu but just to kind of clarify that i'm just double checking to make sure everything is okay there looks good to me so i'm going to go ahead and commit all this and say build custom docker image okay and hopefully all that is correct so we'll go ahead and commit that sync the changes we'll say okay and what we'll do is close that tab out we're going to double check to make sure those files are committed they look like they are good we'll hit get pot and hopefully we don't get any errors it's very easy to make errors at least for me because uh you know i'm just error prone but notice that it's building the workspace so there's a little bit more work it has to do that's building that image so this is where you might see prebuilds come into play where you know you want this to launch faster because you know docker files just take forever to build uh and i say forever but i mean they take a little bit of time right so just imagine if you always had this that really makes sense why prebuilds uh become so important but i'll see you back here when it's done okay all right so i think this is done i can't really tell because it says building image and says exit exit so i'm going to uh risk it i'm just going to close this tab and try it again so i'm going to go ahead and launch the git pod um yeah so it already has this one running so i'm just going to click into that so maybe i'll just jump into the environment so yeah it was ready uh just understand that sometimes that happens uh you know if if you feel like you're waiting too long just have the confidence to go okay i think i think it is working but for whatever reason the feedback loop is not working as expected so if this worked correctly we should have fzf installed so if i type f set f it does appear so that's great and let's just see how it works so i know i watched a short little video on it and i know that if you do this it's a fuzzy finder so you can apply it to anything you can pipe anything to it but like it's great for like going through and finding files this one is a little bit more complicated so it's not really showing me the one the simple one that i wanted to uh use here well let me see here just going to the top here um so ah like it's basically this so we copy this i'm not sure about the selected part but we go and we paste that in like allow and hit enter and i mean we can search our files so i guess it's only showing not or like invisible files so maybe i need to go find some files here um media is there stuff in there no just trying to find anything okay so here might be something that might work so i'll hit up but they're not files they're kind of folders eh okay so see i can start typing utm and so it's just a fuzzy finder an easier way to find things can be used for all sorts of things but that's how you build a docker file so just realize it is a bit slow but that's the whole idea behind prebuilds right now if we were to launch this again would it try to build every single time i think so let's go ahead and just see that and i don't care about seeing this complete i just want to see if it is going to build that every single time i believe it would right so we just give it a moment here it's pulling the container image if it doesn't that's great right that's what it looks like it's doing so it looks like if you build it once uh it's not gonna build it every single time you launch a workspace and then i guess my next question is is like i guess it would know anytime there's a file change i guess that you would have you'd have to commit it to the repository so that's how we would know so that's fine so let's say i make a single change here small change maybe just add another small change here i just want to see like will it still pull the image will it be smart enough or is it any time there's a change small change sync uh we'll go ahead and close that git pod give it a moment there and so i just want to see is it going to try to build the image it doesn't look like it so it's really seems like it's smart about that and then what we'll do once we launch it i'll just try to make a very minute change um i don't write docker files on a regular basis so i'm not even sure what we could install i mean maybe we could do wget even though it's already installed in that file okay yeah so i didn't rebuild it but what we'll do here is i'm going to do like run on a separate line i assume it must be smart enough to know run brew install wget again i don't care if this works like i don't care to see it all the way the end just the fact that it's going to start a build step so add wget which probably already is installed but we just need an extra line in there so we're just gonna do whatever okay good and we'll go back over here and we will hit the get pod button and so i'm assuming this time it will know yeah there we go okay so it is building the image so it is pretty smart there and i really like the fact they did it that way um if you're looking for those we've seen those works workspace full images before but we're like git pod workspace full docker hub might be something we want to search for so here this is where they're basically hosted you know so just understand like whatever you want you just take that name and that's what you're putting in the image if you're doing um if we're going back to here like let's say you already have an image hosted you just do that right you probably can put tags there as well but again it has to be a debian or ubuntu base so i'm not sure if it shows yeah here it is on github we've got images and we can go find the full one here and from here we can see the docker file and we can see this one's based off of the base so if you wanted to kind of like crawl through and that's what i was doing to kind of understand what's going on there you can go to the base and then open that one you can see this one's based on the build pack depth depth full call focal i'm not sure what that stands for we can go over here and then from here um like this sometimes i don't know where to find the baseball but there is some kind of like base soccer file here that would tell us where that comes from or be written up so i'm just kind of looking around for it i'm not super good with docker i've been using it for years but every single time it just takes a lot of work here there are a bunch of tags underneath so maybe the tag shows up here it does so we click into that one ah and here's the file and so you can see this one's based off full call scm here it's installing all the libraries and you can just keep crawling back until you find everything to see like what's installed so we go to this one here and then this one's based off the curl one like it's just a little a little loopy how this works we'll go to the curl one and uh so now you can see it's ubuntu uh focal right so then we can go from this one so you just see that you see that it's ubuntu right so we go into this so that i guess that stands for full focal great that is not easy to say so we go back and we go to docker hub again just if you've never done this before right and so from here we might type in a full call if it even shows up so then it's here this is the latest and so this is from scratch um and this is add this binary or this uh this thing so it looks like i don't really know this too well but it looks like what it's doing is it's saying okay take this um uh archive which might be in the same directory here yeah it is take this archive and utilize that as the installation for it right so that must be like the way like setting up um ubuntu like you know somebody was to like have a disk or uh a key or download the program i think it's executing the program so uh you know hopefully that kind of tells you how that stuff works but yeah that is how you do custom docker files okay hey this is andrew brown and we're taking a look at git pod quick start templates so quick start templates are git repositories that you can use to launch an example environment or fork to get started for a variety of different run times so here's the search you're going to notice a bunch of languages a bunch of frameworks like ruby on rails things like that and so once you click on one of these it's you can it will try to create a fork of course but you can just go straight to the um github repository and there you'll generally notice that it will have like a git pod yaml file and a docker file and you can open it up and see how they are doing it but it's pretty useful the quick start template generally contains a custom docker file that may extend the base or full so i tried to like go through a bunch of these and say okay what is the pattern here but it seems like some are workspace based some are full some are um get pod workspace there's like another one um or some are docker compose so they're i guess a little bit all over the place okay hey this is andrew brown and this follow along i want to explore the quick starts that comes with git pods so what we'll do is type in quick start templates here and what we'll do oops we gotta put in get pod here because there's all sorts of quick starts based on different cloud products but we go here we can see we have some popular templates we can search for a variety of things so if we want ruby on rails that is an example maybe if we wanted uh larvarelle that might be an example maybe if we wanted django do we have django in here not yet but if we don't have django maybe we have flask yeah there we go so maybe we have flask uh maybe we got next yes there we go and so it might be fun to just kind of launch these and see what they look like and we maybe there's even a wordpress in here there we are okay so we got all the major frameworks and you know i want to emphasize that this is languages and frameworks and all sorts of things well what we're going to do here is go ahead and launch these so each of these have a template so if i go here i can just say git pod um rails template and you know what we don't even need to actually i'm not going to clone those i'm just going to open these up in a new tab like this and then just click on it like that so that's the rails one now i have to go back here and find all of them again so we'll go here and we'll open up that like that okay so we got the wordpress that one then we'll look at the next gs one all i want to do is kind of just explore these and just see kind of like what is going on with them you know and we said flask okay click on through that and larvarelle and so the thing is is that we have quite a few repos here i think i have one two three four five so we're not going to be able to open these all up at once because we can only have four in parallel but uh we don't need to do that all at once so that's fine so i'm just going to close some of these i'm not closing them but i'm just going to launch them one at a time so let's do larval first that's quite a big one so this will be one that we launch we'll go ahead and close that tab and while that's going we'll go ahead and launch the next js1 we'll just do a couple at a time okay and i'm not really sure how many workspaces i have running maybe we'll just kind of like optimize our time here if we go over to our dashboard and we go to workspaces none are open there we have two running workspaces which is fine so i think we can just keep going here we'll do the flask one and then we'll do the wordpress wordpress one and then we'll just leave rails up on on the side there and so we're just gonna wait for all these environments to go green i'll see you back here in a minute okay all right so after a short little wait our four repositories are ready so we'll start on the left hand side with lar varell if you don't know what lavarelle is it's a php framework that's similar to ruby on rails um and so let's just see what they have done here to kind of provision this so it doesn't hurt to go through get pod yaml files to kind of learn something so here they're loading a custom image and probably all of these are going to be loading custom images and so we're opening up port 8000 for the large rail server and then it's also starting mysql so it's all here in one place for you and so down below i mean both the ports are open but in the init step you can see that they are creating a database example they're going to copy the env file over here into one there then they are updating the environment variables with some default configurations over in here so some settings that are probably mandatory that you need to update then they're doing a composer install an npm install a php artisan key generate could any of this go into the before i don't know this seems pretty much correct to me and then you have the command that's starting up the 8000 on um for the public directory so let's go open up the gitpod docker file and so here you can see that there's just the thing that says workspace mysql so if we wanted to understand what the contents of that is we'd have to go look up that one there so maybe we will in a bit here so just say workspace github if we can find it sometimes i find these easy to find sometimes they don't oops uh like that so like if we go to the get pod repo because it might or github github get pod repo there might be something interesting for us to see there maybe not but we'll try anyway so we'll say git pod here and we'll go to the repos here and we will search for workspace so these are workspace images see i don't know if they're all in here they probably are so we're going to mysql this is probably the file that is launching here because i'm just curious how what is it what is it doing and so it's extending the workspace full and then it's just installing mysql so a lot of these are going to be using probably workspace full underneath okay then we have next.js so in here we'll take a look at the uh the gitpod.yaml file here and so we have a single task it says npm install npm run dev so very very simple and it's not even using um a custom docker file because it just uses node and i guess everything we want is here so that's really simple and nice then we have flask running here so if we go over to this one um we have one that's starting a before task so it's setting or it's exporting a couple of flask options we're doing our pip install we're initializing our database we're running it and then they have that extension installed for python for that highlighting so that's nice and simple and then the last one here well we still have ruby on rails we might as well open that up while we're waiting um we got to go back to our limit here we've reached one so we'll go ahead and close uh this one here so we'll say stop and we'll stop this one and we'll stop this one i just don't want to touch the wordpress and so if we go over to the wordpress now we didn't see a website because this one's a little bit more complex in terms of its setup there is a port open i don't know if this will work because we probably have to pop in the database nope here it is we can create a wordpress and so if we go here on the left hand side and go into the git pod yaml this one's kind of a curious case because it's not using a docker file image it has a docker compose and so basically you're running multicontainers within a container and so we open up docker compose we can see here that it's starting up mysql then it's starting up uh wordpress and these have separate images so see this one is using the mysql image this one's using the wordpress latest and so you know you saw with the other example with larvarel it just ran it as a monolith within the container like like a virtual machine would and so you have both options here and both are valid this might be really useful if this is actually what you use to deploy so this would be more like one to one with your production environment so that is kind of interesting there um let's go back i guess we didn't relaunch this so we'll go here and we'll just launch a new ruby on rails file there and we'll give that a moment but you can kind of see that's kind of interesting like all these files are a little bit different you can learn a bit but the great thing is like you can just clone these or fork these repositories and kind of build off of them so it's a really great starting point for a lot of different kinds of projects so yeah we'll just wait here for the ruby on rails thing to start and we'll look at this last one and we'll just wrap it up here for quick starts okay all right so after a short little wait here we have ruby on rails my favorite uh framework that's why we made time for it but here you can see it's loading its own custom image file uh it has ports open on 3000 5432 means meaning it's running postgres here we have our initial bundle install yarn and saw rick db create and then running the server and then we have a nice extension here for ruby if we open up the docker file we see again it's workspace postgres so you can imagine it's going to probably be similar to the mysql one if we go over here we go down to postgres and we click into the docker file yeah it's the same story um it's gonna be extending workspace full so that's pretty straightforward there um and yeah we're pretty much done here so yeah that's all we want to do for quick start so i'll just close that stuff off and i'll see you in the next video okay so let's take a look here at docker compose which is a feature of docker but what's interesting is you can run it within git pod and so the reason why this is interesting is because you can run containers within containers or technically docker within docker if you've ever seen the movie inception with leonardo dicaprio where he goes uh deep into dreams a dream within a dream that's what we're doing here it's kind of crazy so let's talk about what docker compose is so it's a tool for running multicontainer applications on docker defined using the compose file format so we're not just running a single docker container running multiple containers at the same time so a compose file which is going to be named docker hyphen compose yaml which will sit at the root of your directory is used to define how one or more containers that need to be running and the communication between them to run our application and so within our gitpod configuration file we can run docker compose poll and up commands to get multiple containers running so there they are of course we don't see the docker compose yaml file here in the slide but we will see it in the follow along so it will make sense there okay so something i want you to consider is that you can build container images and virtual machine images within containers and so if you're looking for some open source tooling or things that might work uh within a gitpod workspace we have hashicorp packers so this is an open source tool to build golden images for virtual machines or docker or maybe build a which is an open source tool to build oci compliant images of course there are other tool tools out there so for instance there's dazzle which is made by get pod i don't know a lot about it i don't know if we're going to actually uh give it a try within the course but that's something that builds out container images with some advantage around layers okay all right so we're going to learn all about get pod environment variables so before we do we need to define what are environment variables commonly referred to by developers as and vars is a variable whose values is set outside of a program and it's composed of a key and pair so here's an example within bash this is generally how you do it so you'd write export to set the environment variable you have the key so very common to set it to be all uppercase it's just tradition so that's what we normally do equals followed by a string and if we want to print it we could do echo is one great way of doing that there and so environment variables can be set in four ways for your git pod workspace you have the git pod cli the gitpodio account settings environment variables the gitpod url and getpodconfiguration file per start task so we will jump into all those variants okay before we jump into the four different ways we can set environment variables let's talk about the defaults in prefix for uh get pod so the default environment variables are set by getpod automatically every time you launch a new workspace so there's a lot of them but two that really stand out are getpod workspace id so this is a universally unique idea uuid associated with the workspace and then the getpod workspace url the unique url for the workspace if you want to see them all we'll do this in the follow along you can use um the batch command env to print them all out and then you have a pipe followed by grep to say filter out the ones that start with get pod underscore because they're all going to start with git pod underscore and to talk about that prefix it's a reserve prefix so environment variables beginning with the git pod underscore are reserved for internal use by gitpod and are overwritten on every workspace startup so if you attempt to set something with your own like getpodandru uh it will get ignored or will not be accessible uh if you try to override one that's existing that's just not gonna happen okay so just be aware of that so one way we can set environment variables for git pod workspaces is within the gitpod yaml or the gitpod configuration file at a per task level so here is an example of a gitpod configuration file and here you can see we are doing env colon and then we're following up with a key and a pair and we can put as many as we want in there and so that's going to set for the next time the environment launches notice we have the dollar sign this is not get pod specific that is just how bash scripts work and so you can do that to access the value there okay and so the environment variables will be scoped only for that terminal so that task that spins up and other terminals will not have that environment variable set and i was i was very certain to test that out and we will look at that when we do it in the follow along okay so another way we can set environment variables for get pod is via the gitpod url so right after the hash or pound there we can just start specifying multiple ones there separated by a comma you probably don't want to be putting sensitive things in there because you know there's potential for those to be exposed like it was access keys and secrets but it's really nice to be able to do that so the environment variable set in the url will be available in all terminals within your workspace so like where you have per tassel scope for the um uh you know per task right whether you set it in the git pod yellow file this these are going to be everywhere okay all right so another way to set environment variables is setting them through account settings so if you go there you'll have account settings environment variables and this is ideal when you need to pass along variables that are sensitive so something could be sensitive it would be like interbus credentials so from there you can open up a new nvar and set its name its value and its scope and that's the thing that's interesting here is how scope works so in order to set environment variables for specific workspaces you need to set the scope and so if you wanted to show up for everything you could do what it says here which is provide a wild card for both uh wild card forward slash wildcard but let's look at some of the following patterns that we can set and it's going to be basically owner repo or an alternative way of saying oregon project but this is based on what is in github get lab bitbucket right so that's what you want to consider not to be confused and this did confuse me with um teams because you can have or teams and projects within um get pod and it's not based on that okay so for example we have exam pro for slash exam pro marketing it's going to make the end bar available to a repo called example marketing owned by exam pro right and actually mine on github is exam pro co with all capitals right which is like this over here i just wrote it lowercase for some reason over here then we have um and i'll just clear some of the drawings here but then we could say we could have a wild card on the end here so wild card repo so make nvars available to all repos owned by get pod i o um so maybe it's for across all repos and then you could have the wild card in the front as well and so this is really useful um it says for it says because i haven't used it yet for all forks right so you know it could be like get pot i o and then there's like andrew brown at forward slash form so that that stuff propagates there so the scope is case insensitive so when you enter the pattern it will be down case so see how i'm upper i'm entering this with title case here exam pro co um it will just down case it to exam pro co like all like all the letters uh down cased so you know you don't have to be too sensitive here when you're writing that stuff in it's just going to fix that for you okay hey this is andrew brown and this follow along we're going to look at all the options we have for environment variables because there's a lot of ways that we can set them so what i'm going to do is go ahead and create a new repository we'll call this one git pod env i'm going to go make that private as per usual and we'll go ahead and add a readme file and we're going to launch ourself a new environment so we'll go open up get pod here and while we're waiting i probably have some code already laying around from one of our previous repositories here so i think i'll go to the ports one here because we're going to probably just set up sinatra as per usual and that will be the means for which we pass a long port so we'll give that a moment to open and as that is going i'm going to go over to the getpodio website because what i want to show to you is under your settings over here this is where you're going to find environment variables now i probably would prefer if this was scoped at a per project level but i mean of course you can launch project like things that are not within a project so i guess it makes sense that it is global but you know maybe in the future they'll add it at a project um namespace there which is totally fine but this is where you're going to be able to set one place for environment variables another place will be in the url in the goodpod url the cli and i think there is a fourth option in the get podgaml file so what we'll do here is we'll just get set up and so as per usual i'll go to the hamburger menu and we will launch a new terminal and we'll wait a moment here type in gp init so that we have a get pod yaml file that we cannot mess up which is something that i have a bunch of trouble with but what we'll do is create a new file here called server.rb and we will go ahead and grab the same code so it is just this very simple code you've seen us grab it a few times from the sinatra website if you if you're looking for you just go to sinatra sinatra ruby right and here and i'm pretty much just grabbing that code okay so and then we're putting this port here with the app port again requiring sinatra we'll go ahead actually we'll type in bundle init to create our gem file for ruby and i'm just going to delete ah that can stay in there that's fine we'll just type in gem cinatra and then i'll do a bundle install so we install sinatra our very lightweight ruby web server there and so that is now installed and so i'm just thinking about this for a moment um because it's installed i'm just trying to think like what would be the best approach um so what i'm going to do is we'll do the get pod yaml file last because we can set environment variables in here but i think that's something that we can wait for but we will need to kind of set up this file so i'm going to do a bundle install and you see me do this as a separate task but i'm just going to make my life easy by just doing a bundle install here and then we'll do a bundle exec ruby server.rb okay and so there is no port number being set here so it's going to be whatever it is i'm just going to get rid of the ports because we'll just let it launch and then from there we'll just expose ports as we go but i'm just thinking here for a moment about what i would like to do let's do it from the url first so that's what i want to do i want to see if i can change the port number via the url so what we'll do is i'm just going to make sure this works okay just make sure that the server starts up it does no problem there so we'll go and do is uh commit these this uh these files here okay and i'm just going to say uh initial repo we'll go ahead and commit that save those changes we'll say okay so this should be everything that we need to get going so now i'm going to go ahead and just close that and so we're going to go back to example dev and we're going to look for that new repository that we just created env and so from here i mean we can click this link but i'm just going to right click and copy the link address just to save myself some trouble we're gonna go ahead here oops copy uh copy link address and again we'll paste it up in here and so what we'll do is set the environment variable up here so i'm gonna do app port equals um eight eight eight eight okay and we'll put a four slash in there and so that means that sinatra should start up on port eight eight eight eight because we are injecting environment variables that way so we'll see if that actually works assuming i wrote that correctly but i'm pretty sure i did it's not like that hard to do and we'll give it a moment here and it started up on port 888 so passing via the get get pod url wasn't too uh troublesome here and so another way that we can uh set environment variables i mean there's something with the the the get uh get uh pod cli here so here is control user defined persistent environment variables and i haven't really done much with this yet so let's see what it does i'm not sure we'll say help and we'll just go up here and see what it says so this command can print and modify the persistent environment variables associated with your user so to set the persistent environment variable to foo bar so we would just do that so we'll do gpe env and we'll just say app port equals 8765 and hit enter and so that just sets the port number so i'm assuming that's all it does okay so we would do echo here because here it's saying this if i go here is it just because i've already set one so maybe it's just because it's already been set so it can't be overwritten because it's interesting that it's it's doing this here so i'm gonna try this again one more time and it's doing eight eight eight eight eight so let's go take a read up on what that does we'll say get port or um get pod um cli and if we go here we'll look at env because it just might be that we can't overwrite it so uh with gpe and v you can set an api endpoint environment variable that is accessible for the project even if you stop the workspace and start a new one to delete or unset environment variable uh do that so i mean it just looks like it sets environment variable so but the thing is that we sent through the getpod url so it might never be able to unset it so what i'm gonna do just to rule that out i'm just gonna open up a new workspace here and we'll try to set it and then see if it actually prints out all right so it's just starting up here and it's starting on port 8765 which is interesting because i definitely um did not set it so maybe what it did when we did that is it actually set it up over here so i'm just curious if we give this a refresh oh so that's what that does okay so that's really curious all right so because i thought it was just going to be temporary like you just did it within the actual workspace but i guess what it actually does is set it up in your account settings and here you can see that it's setting it for the scope so we have at port 8765. i was going to show you this separately but i guess if we did it that way we don't have to do that there but just make note that you can do wild cards here so if you wanted this to be set for all projects so maybe you always do port 3000 and you're always using app port or something like that you could do that or if you wanted it for every single fork you could do that so i could update that it would still apply but that's interesting i did not know that um so i mean that's great now let's take a look at what we would do if we set it up in the git pod yemel and i don't know which one would override so like there's one set in here but would get pot yaml have more presidents i don't know so what we'll do is just type in env i'm going to go here and do app port and we'll do probably colon and here i would just say seven seven seven seven uh you gotta be kind of careful because sometimes these are reserved ports but i don't think so i just again i've never seen someone do that so maybe like four three two one might be a better idea and so what we'll do here is just save this and see what happens let's see if it actually overrides with this port or sorry this environment variable so uh commit env within getpod file okay and we will save that will sync those changes and what we'll do is just close this and we'll go ahead and relaunch that and then we'll see which takes over and we might even go to the extreme and also set in the get pod url and see what happens so here it's starting on port four three two one so even though we have set it um in here it looks like the git pod yaml is gonna have higher priority here so now what i wanna do is close it out and we're going to then set it in the url and see which one it takes i'm going to assume it's always going to be the good pod url configuration file first so or environment variable sorry so we'll copy this address up here i'm going to go ahead and paste it on in here and so what i want to do is just say app port equals four four four four four slash and so i want to see if it picks up this one again i'm going to assume it's going to be the 4321 because the github yaml should be uh high priority that's how i would code it and so it is four three two one okay so now i guess the next question is is what happens if i remove this and we do the url is it gonna pick up the one from the account settings or just going to pick up the one from here so just say remove env sync those changes we'll say okay and we'll go back here and we will just copy the link address again we will paste it on in there and here i'm going to say app port equals 444 forward slash this looks okay to me we'll hit enter we'll see what it picks up and it's eight seven six five so um unless i did it wrong but i don't think i did um it looks like that the priority is um git pod yaml then account settings and then the url is last in terms of priority okay so i mean that's pretty much all we really need to know about environment variables there are environment variables that are set for um i guess we could look at also the gitpod prefixes so if you type in env and you go grep gitpod you can see all the ones that are set by getpod there so if we just scroll up here for a second they have repo root so that's the root of the repository so that might be useful if you need to reference it an elix writer segment so i guess they're using segment which is a analytics tool the workspace id the interval which is whatever i assume it's how often it checks i guess that might be for the timeout because it says three zero zero zero and i know that it's like 30 minutes so maybe if we were to extend our time that would increase the context url so that's just where it was referenced to the instance id so i'm assuming it's the underlying container or something like that the url thea i think he has something to do with eclipse i'm not really sure context so we have a bunch of stuff here so you know nothing that you would really be trying to utilize but um you know there's a lot of stuff here you can see my email uh they get podcasts but um and you can't obviously override these so i'm not gonna go bother to show that but just so you know you cannot override those values um or set something with get pod underscore i i'm not sure let's actually go take a look and see if that's possible so what i'm going to do here i'm just going to make up one like underscore andrew and just confirm is if you're able to set it i like i would think that it's just if there's ones that they decide to set you can't set ones with those but i just want to see what happens so we'll copy this link and we'll just paste it up here i'm going to just say something like get pod andrew and i'm going to say equals brown and we'll do a forward slash it's my assumption that it will get set but it can get overrided and we'll give it a moment here and so we'll just kill the server and what i want to do here is just type in env get pod underscore andrew uh oops we gotta grab that okay so it seems like if you set something with get pot underscore it just gets wiped out won't even exist uh but yeah there you go that's environment variable so just close that stuff off and we might just want to delete that out there and we are good hey this is andrew brown and we are looking at the open mode configuration option when we are defining our start tasks so open mode allows you to configure how the terminal should open relative to the previous task so here's an example of me writing a git pod yaml file and i have a bunch of different tasks and they all have a variety of different open modes and so what you're looking for here and i know it's hard to see but it's this box over here so you're going to just see some interesting things where some are split and so when you click into this one it's showing all four of those and so hopefully i can show that better um in the follow along here but there are four different options we can set so we have tab after so opens in the same tab group right after the previous tab tab before so it opens in the same tab group left before the previous tab split right so splits and adds the terminal to the right and split left so splits then adds the terminal to the left okay hey this is andrew brown and we are taking a look at vs code extension so what is the vs code extension well it lets you install features themes programming languages uh support debuggers and other tools to your vs code editor to support your development workflow and so you know if i wanted to install something i'd open up the extensions panel or explorer and from there i could install something like vim that's something i really like for my keyboard there and so vs code extensions are added to a github workspace in three different ways so you have builtin extensions these are extensions installed by default by git pod the open vsx registry so this is a community marketplace for extensions user extension so these are extensions not in the open vsx registry or we're just saying like extensions that have been installed by the user okay and so vs code extensions are named dot v s i x um i assume it stands for visual studio integration extension i don't know if the i is for i could not find out but they are vsix and so it is essentially just an archived file so if you were to rename this to a dot zip you could actually open up the archive and view the source files so there you go so git pod comes preinstalled with many vs code extensions and you can view the preinstalled extensions by searching at sign builtin within the extensions panel here so just notice this icon here where it looks like four little blocks and one is broken off here if i type in at sign built in in the search at the top these are all the ones that are coming preinstalled and there's a lot as you can see here almost looks like about 80 that are installed if you count up the numbers there and so i just went through it and mostly what's interesting are the is the feature support that's installed because that's going to change the behavior and so here are ones that i thought were notable or interesting to show select git github get pod web grunt gulp image preview microsoft account merge conf conflict things like that but you know if you want to know what's being sold just take a look there you might learn something new and improve your uh workflow okay hey it's andrew brown and we're taking a look at the open vsx registry so it is a vendor neutral open source alternative to the visual studio marketplace and gitpod uses vs code extensions from the open vsx registry as opposed to the visual studio marketplace and so this is kind of a a screenshot of the home page of the openvsx registry which is at openhyphenvsx.org very simple you just search the name and you can find whatever you want the question is why are they using openvsx registry as opposed to the visual studio marketplace well this vsix files downloaded from the visual studio marketplace should not be installed in gitpod because microsoft prohibits the direct use of their marketplace by any nonmicrosoft software even though most extensions are actually open source and not developed or maintained by microsoft so this is kind of one of those weird things where you know microsoft is not being as open as they could be uh for their own selfinterest and so the openvsx registry is there to ensure that um you know organizations that are investing into cloud developer environments aren't going to run into licensing issues and also to make uh the market uh fair and competitive so that's kind of really interesting and i looked it up like where this was hosted and it's actually eclipse that is the one that is behind this and eclipse has been an open source id for forever and so it's really great that they are doing this for the community so when you search extensions uh within the gitpod vs code ui extensions panel it will search extensions in the openvsx registry so if you can find it on the openvsx website then you're going to find it in here as well and for ones that you cannot find in here or ones that you need to install directly that's where you're going to be installing them yourselves which we'll talk about soon enough okay so when you are exploring the extensions panel and you're quickly looking to install some extensions you can right click on this little cog here um right here and what it will do is it'll open up a context menu it's called a context menu because it's opening a menu within the context of what you clicked that's it's just a general uh programming term and so you'll have this option to say add to git pod yaml so if you click that that will just populate your document for you which will save you the trouble of populating that yourself um but uh you just have to remember you'll have to commit that uh code to your repository for it to persist okay all right so let's talk about user extensions so there are two ways to install extensions beyond the builtin extensions the first is for all users for a project so git pod configuration file extension vs code.extensions is where we are going to set that value which we'll see here in a moment or there's the second case where you're only installing for the current user and that's we're going to be using the vs code settings sync feature which we'll see in the next video so down below here is an example of a gitpod configuration file where we're setting vs code extensions and so we're installing ones that are from the openvsx registry by giving them their name and then down below we're specifying a url of a i assume it has to be publicfacing selfhosted vs code extension i think that this can also be a local file path because when you try to import a vs ix file um within the gitpod vs code interface it actually first looks locally so that would be interesting to uh find out but you know probably in practicality you're going to always have it uh online somewhere so anyway um for the extensions i just want to show you that if you were to open up the open vsx registry you can see the name there i know it's hard because it's orange but that kind of helps you understand what thing you are pulling in and putting into that file okay hey this is andrew brown and we are taking a look at a feature of vs code called settings sync so this is a feature to sync your configuration such as settings key bindings installed extensions across your machines so you are always working with your favorite setup and so with the desktop version of vs code the one you install locally not the one in the browser part of git pods you need to log in to a github or microsoft account to store the sync settings which is a json file so if you opened it for the first time it says sign in with microsoft sign in with github but with git pod when you turn on the settings syncs feature you're not going to be choosing an account to log in because you already are authenticated with something like github gitlab or a bitbucket but the settings data i believe will be stored on the gitpod servers and your configuration will persist across all your workspaces and when we say that we're talking about all the getpod workspaces not necessarily the ones on your local machine okay that's something else so you can set extensions within your dot git pod yaml file which we'll learn in this course however some extensions which are designed for developers personal preferences should not be set here and instead settings things should be used so a very good example here would be the vs code vim changes keyboard mode okay because this could greatly impact other developers so i use bim i really like vim and so i had applied this here and then one of our other developers said hey i don't like using vim i want to turn this off so it doesn't belong here and so that's the reason i'm bringing this up and also just to describe how setting syncs works a little bit different okay hey this is andrew brown and in this follow along we're going to take a look at vs code extensions or in the context of get pods so what i'm going to do is just make a new get pod and there's not really anything special we're going to do in this one it's going to be more focused around the extensions but we got to launch something so whoops did i just launch an existing environment i'm going to go ahead and just create a new repository so we can just play around in something new and so i'll just say git pod ext for extensions we'll make it private as per usual create the new repository and we'll give it a moment here and we'll go ahead and hit the get pod button so what i'm going to do is just go over to open vsx registry and we'll just take a look at what this is so you saw me talking about it and um it looks a lot cooler in dark mode but it's not flipping over to that right now so we're in light mode but this is a vendor neutral open source marketplace and basically there's the other one which is the vs code marketplace right and there's a problem because you know these marketplaces look really similar there's a problem in the sense that um microsoft has problematic licensing or rules around this thing and that's why this one exists so this isn't the problem this is more so the problem or at least what microsoft has done with this which is kind of unfortunate but um the great thing is that you know if you are somebody that is creating um vs code extensions you can just put them in both marketplaces but if you could just put them in here honestly um and so i believe this repository is managed by clips if i just try to find it here yeah so this service is operated by the eclipse foundation if you don't know clips they are kind of a big deal because they've been around for such a long time uh which is really nice here and so the source code for open vsx is managed by the openvsx team which is very cool as well and so they have this i don't think i've ever actually looked at this but let's just take a look here so yeah so there's that with uh eclipse okay but anyway so here are all of our um extensions but the great thing is is that if you are over here in the extensions panel here anything you search is already going to look here so if i look up something for ruby okay so we might have like this one here the reborn nix dot ruby and you go over to ruby over here and this one's not installed but i'm gonna go ahead and install it i wonder if it will pull up where it's from let me just see here marketplace so if we go click the marketplace yeah it takes us to openvsx this version of ruby extension was published by openvsx this user account is not verified from the publisher uh of this extension okay but anyway so here it is and so uh you get an idea of of what that is and so when you install these extensions gitpod is going to already have um they're going to have the sync turned on it's here in the wheel so the great thing is once you install something you like it's going to persist um to other things but if you're working on a ruby project you might want to just uh include that into your getpod.yaml file so what i would do is just create a i'd say get pod open in vs code and we would say whoops i actually want to do that i want to sorry open a new terminal and i'm just going to initialize a new file and within here we're going to do an extension i can't remember what it is so i'm just going to look it up so get pod extensions like the syntax for it and there it is so i'm just going to go ahead and grab that little part there we'll go ahead and paste it on in there allow and so we know that this extension is called this and it's already in the uh open vs code or the open registry there and so we can just do that i'm just going to double check to make sure that's the correct syntax notice you can also put that sign version on it if you want or you can specify a vsix file which maybe we'll try to do this one here but i guess to really test this we're going to need a secondary account where we don't have this already installed so what i'll do is um maybe i can make a snapshot for this because we haven't done any snapshots yet but anyway so i'll just create a new ruby file here we'll just say hello dot rb and we'll type in puts so hello world and we'll go ahead and just make sure that works not that it matters but we'll just run it for any reason okay so that works fine and so we kind of have this little basis of a thing using that extension so we'll go ahead and run or commit that so initial commit and then what i'm going to do here is i'm going to go ahead and create a snapshot so we'll say git pod share workspace snapshot now i could share this in real time but i figured it'd just be easier to take a snapshot and then would be our opportunity to give that a go and i have firefox still open here on the side here so i'll just share it with this account over here so down below it created the snapshot i'm going to copy that url i'm just going to paste it on it over here and see what happens notice that this person isn't technically in the same project or anything i could just share it with anybody and so here is that project um and we'll give it a moment here we'll have to look at snapshots in a little more detail when we get to that section but what i want to find out is is this extension installed here on this version here with firefox so now if i go over to ruby is it installed it is installed okay so this firefox uh uh one is my other uh my main um getpod account and i did not install this so you can tell that it came along there with the getpod.yaml file didn't like say hey we installed it other than the fact that we checked it but that is uh good to see i think it can be interesting if we can try to bring in a vsix file so that will be something we'll give it a go here so maybe what we could do um maybe there's like something a little bit more obscure that we could uh install just go back here i was trying to think of something that probably isn't installed like maybe this thing here okay don't know what it is but what i'll do yet another client cool but what i'll do is i'll go over to the extensions here and we'll just see if we have it installed yet just in case it's not good so what i want to do is see if i can download this and then reference it so we'll hit download and we're going to download that vsix file and i'm just curious because they say that you can rename these files right you can rename these files and from there if you rename them with zip you can open them up so that's what i'm going to do i'm just doing this off screen here by the way just because i have so many things here i'm just going to maybe expand that here there i'm just showing you the file i'm going to go here and rename this to zip okay we'll say yes and i'm just going to open it up and then here in winrar we can see the contents of this file and i'm kind of interested in its contents i might go ahead and actually download this into our git pod that's what i'm going to do so what i'm going to do is go back here and we're just going to copy the link address here and from here i'm just going to do curl maybe wget i prefer wget and we're just going to download that file within this here so if we go over here we can see the vsix file and so now uh what i can do is i can just copy this and then we're going to type it again and just change it over to zip and then i think i can just type unzip i always forget what it is but we'll try it and it did it just unzipped the contents there so we have this file here an xml file that describes something and then we have the manifest file so i guess it describes its manifest and then we open up the extension here is a bunch of stuff so it looks like you can set uh the icon here looks like it's just javascript though we opened up this package so there's like a readme about it i get i've never made a extension so i'm just kind of poking around here to see what there is so probably like this code is precompiled out so i can't imagine like the developer works this way so this is like a compiled uh version of their their source code so you probably wouldn't want to uh like um unravel this so it's not like it's showing all the details of it but you know just curious to kind of open that up but anyway now that we have the that there let's go see if we can actually specify now if you want to install this locally i'm pretty sure if we go to i saw it the other day here i thought it was up here in the top right corner people gotta go extensions ah here we go let's see consult install from vsix and so here we could specify a a path all right but i don't know if this would actually take this from a a local a local path here because they don't show that in the example over here see how it's a url so i think that we would have to um host that somewhere so to speak so what i'm going to do is i'm just going to go ahead and commit this all this stuff uh we'll just say git add all git commits hyphen m um ext code the only problem is repo is not public facing and if it's not public facing i'm not sure how it's going to pick up that extension so maybe what i should do and we can commit all this stuff i don't care what i'm going to do is just create a new repository here that's public facing get pod whoops get pod exe example and we'll make this one public but this time around i'm just going to upload a file so here we could say upload an existing file and so i'm just going to drag that file on in okay i'm just renaming it back to what it was so we'll go there and so now this file is uploaded in this repository in a public repository and so now what i want is just the raw version of this file so maybe we just yeah we grab this link here so we go copy link address and we go back over to here and get rid of this thing here get out of here it won't get out of the way i'm not sure how to get rid of context menus that are like that that's really annoying okay there we go it just closed on its own i didn't do anything so i'll paste that on in there and again i don't know this is going to work but i'm just going to try it anyway and so what we'll do is just update our commit here so try and install http yak okay and we'll save changes we'll say okay and i kind of lost where we are so i'm going to open up the context here and we'll close the old tab and we'll just hit get pod and we'll see if that actually installs while it's going let's go let's go take a look at what this actually is get another client quickly and easily send rest soap graphql or grpc request directly in your editor so i guess it's like kind of a little convenience thing yeah i've never heard of it sounds cool though um and so this has started back up and so what i want to know is is this installed so we go to our extensions and i think that it's installing this but we'll take a look here http yak and click that it is now installed so there you go that's uh that's kind of interesting there um another thing that we can look at is the builtin extension so if you type in at sign built in this is all the stuff that is um installed by default for you and so there's quite a bit quite a lot of interesting stuff here so you can just like scroll through and kind of see the information so you got features lots of themes and lots of supported programming languages but you know is what it is and everything's really snappy too with all the stuff installed so it's really great um but that's pretty much all i really wanted to show for extensions so we'll just close all this stuff and there we go hey this is andrew brown and we are taking a look at get pod workspaces which represents an ephemeral isolate runtime system running within a docker container on a kubernetes cluster so there's a lot going on there and so i just want to take an opportunity to describe in brief a lot of these terms so first of all what is a container this is a runtime environment that includes configuration for os so operating system memory disk and network access what is docker so this is an open source container containerization platform to package application or workloads into containers we have kubernetes so kubernetes is a open source container orchestration to coordinate and maintain many container images and then we have ephemeral which means lasting a short amount of time and then a runtime system a piece of software that provides the programmer a more convenient environment for running programs in our case the runtime system is intended for development in practicality you need to remember all these terms not so much just the fact that workspaces are ephemeral so they only last a short amount of time and they're for development and they use containers okay hey this is andrew brown and we're talking about the underlying git pod resource size because this is a question that my cofounder came to me and said what is the power under the hood for these workspaces and when i looked into it i discovered that gitpod does not allow you to choose the power of the underlying instance and that might sound like a negative but it's actually a very strong positive because they're abstracting away a decision for you so you can just focus on the business value and that is what we call a true serverless offering okay and so you could say gitpod is a serverless cloud developer environment so the underlying computing power is unknown but we generally know the limits of an individual workspace because if you go into the discourse the um the forms for git pod we've seen engineers at gitpod describe what limits there are and so the generally known limits is like v7v cpus 12 gigabytes of ram 30 gigabytes of disk and you can see there are some um explanations as to what that is but the idea is that you shouldn't really have to worry about it it's the idea is you just pay a fixed cost and whatever size you need is available to you um but you can always selfhost right so if you do need more direct control of the underlying computing layer i think that would be an option where you would have to selfhost but there's so much you can do with git pod and you don't have to worry about picking what virtual machine you need to launch it just works okay okay let's talk about workspace lifecycle or just features of a workspace so the first is workspace timeout so after a period of inactivity a workspace will be stopped the default timeout is 30 minutes timeouts can be extended to 60 or 180 minutes with the unleashed plan and there is a few caveats that we're missing there but that's okay we have a slide dedicated uh or video dedicated just to timeout okay then we have our ephemeral storage so this is storage that will be on a virtual disk available to the workspace when a workspace is stopped the data on the affir affair remote storage is persisted and saved so when a workspace is deleted or terminated the data on the storage is lost so only the data located in that for slash workspace is going to be persisted so anything out there when you stop it there's no guarantee that it's going to be there then we have garbage collection so git pod allows for a certain amount of stopped workspaces to remain for reuse and this is really useful if you ever have to go back a few versions there i don't know if it stops at 200 but i just know that we have a range selection of 50 to 200 so it's my assumption that there's nothing beyond 200 why you need more i don't know but i'm just stating that is there for you so gitpod will begin deleting workspaces beyond a certain number uh uh uh based off of days of nonuse so currently it's hardcoded for 14 days so if you have like 50 or 30 workspaces and you haven't touched them for 14 days they're gonna get permanently deleted and you won't be able to spin them back up and i mean generally the idea is that you don't really want to be leaving workspaces with code lying around for that long so i think that's okay okay so let's talk about the underlying life cycle and phases for a workspace to distinguish from light like when i said workspace lifecycle earlier i meant let's just say like features but that's what the documentation called it so now we're actually talking about the actual life cycle of a workspace here so when a workspace is created it will go through a fixed life cycle separated in phases these phases are currently not observable by the end user within getpodio however i would imagine that if you are doing selfhosted git pod open source version so on a managed kubernetes cluster this information would be somewhere available in the logs we might discover that as we do the selfhosted follow along to see what we can see there but it's still useful to go through these states so we understand what's happening under the hood so the first is unknown so indicates an issue within the system and that it cannot determine the actual phase of the workspace we have preparing so this is where it's building the docker image for the workspace pending the workspace does not yet consume resources in the cluster creating the workspace is currently being created initializing the phase in which the workspace is executing the appropriate workspace initializer running so the workspace is able to actively perform work either by serving a user through thea or as a headless workspace interrupted the container should be running but it is temporary and available it should it should selfresolve or running or just running or stopping sorry and so stopping that's when the workspace is currently shutting down then stopped uh the workspace ended regularly because it was shut down so again uh you know we might not see this until we do the selfhosted section here but i always think it's useful to kind of pull this information up up front here so we know what's going on hey this is andrew brown and we are taking a look at workspace instance types so within a workspace cluster several types of workspace exist the first is regular so when a user launches a workspace with the visible code energy ui this is considered a regular workspace or just as we call it a workspace other types of workspaces are headless because there is no code editor ui for the user to interact with the first being ghost so ghost workspaces are placeholders in the system they are used to scale up nodes ahead of time and are replaced by regular workspaces when needed they are a custom implementation of preemptable kubernetes pods then you have prebuilds and you will encounter this in the git pod i o and so prebuilds are triggered automatically or manually performing the before init execution order sets within a get pocket fiction file task so a prebuild will generate a snapshot and upload their log output for later consumption i haven't figured out where that log output is but it says that they do it and then builds i had to surmise are when a user manually takes a snapshot for sharing a workspace uh you know via a snapshot okay so there's that i think it's called snapshot but when you open up the getpod command palette there's like an option to do that there and again these are those headless workspaces okay hey this is andrew brown and we are looking at timeouts for getpod workspaces and there's five things i want you to know so when you stop an instance the workspace will shut down instantly deleting instance will delete the current state of the workspace stopping it will persist the data okay then when you close a browser tab the workspace will shut down in three minutes this is really great to know because i i never knew when i closed the browser tab what would happen there but it reached out and said don't worry andrew after three minutes it will shut down so that's nice to know uh then there's the case where you might leave a browser tab open so by default after 30 minutes it will turn off but if you need beyond 30 minutes what you can do is upgrade to the unleashed plan and that allows you to set a need new default of 60 minutes or you could just say one hour there and then there's a case where you can even have it even longer than that so maybe you need a timeout because you're doing like a long build so you can boost the time of the current workspace up to three hours when i say up to i think you just choose three hours uh and uh that's again with the unleashed plan so here's kind of an example where somebody has the default to 60 minutes and for whatever reason they need to extend it so they press that button and the idea behind boosting is it's useful when you have a computational task that is going to take a long period of time so you're going to be inactive maybe you need to leave for lunch and ensure it remains running so you're just like okay i'm going to press that button like maybe i'm going to meeting and i have and i just want to make sure my workspace doesn't shut down for whatever reason so it's not interrupted uh so you know those are the five cases that i want you to know okay hey this is andrew brown and what i want to show you here in get pod is a a feature of the unleashed plan or actually two features so what i'll do is make my way over to settings and go over to plans just to show you that i've temporarily upgraded here so we can show you timeout and three hour timeout boost now i don't think there's an option to choose from 30 minutes to one hour once you are on this plan it just is one hour timeout uh and it's not something you have to really worry about because you have unlimited hours at this time so it's not something you have to like try to conserve where you are trying to worry about this meter up here but let's showcase what the three hour timeout boost looks like so what i'll do is go back to my workspaces here you can do this with anything just launch whatever you can here so i'm just going to open something that i was recently working on so that was gke i'm not sure if this one was even successful i think i might have been making a video for it and it didn't work out which is totally fine but i'll just launch it anyway again doesn't matter which one you launch i just want to show you how do you do that timeout boost and i was saying like that timeout boost is really good if you have some long running tasks uh and you know that you're going out for lunch and you just want to make sure that that that thing keeps running so um i believe that it's down below here so i'm just looking for it if there is a boot so down below here see it says workout timeout 60 minutes click to extend and so you can do it here i'm not going to click it just yet but i just want to see if it shows up under the command pal so i clicked on the get pod logo in the bottom left corner it says extend work space timeout so what i'm going to do is click the one in the bottom right corner i know it's really hard to see but just know that i'm clicking it it says work timeout has been extended to three hours now would that be reflected anywhere i'm not sure so we'll just go to get podio we're gonna go look at this workspace and there's no reflection that we know that it's currently being extended so you just have to know if we go back here let me just see here what happens if i hover over it so it says 180 minutes click to extend can i extend it again i doubt it okay let's go over here again so yeah it just says 180 min so 180 minutes is is three hours so the thing is you would just assume that you would keep this tab open and if you saw the the little yellow icon you know that it's still there so let's see what happens if we close this okay and then we reopen it i just want to see if that yellow little icon still stays active so that you know that it's still there so we're opening it up again here and yeah it's yellow so if it's yellow that's how you're going to know that it's extended to three hours um so yeah there you go all right let's talk about the workspace directory so when you launch a workspace the contents of your git repository will be copied to a directory or folder called forward slash workspace so here you can see um i have a project called exam pro marketing it's my marketing website and so i've opened i've opened up this git pod and you can see that that folder has been cloned into that workspace directory so when a workspace is stopped the contents of only workspace is saved so when you start the workspace again it's going to have that content still there and even in the um the get pod i o it'll even tell you what changes are there like you have 132 files changed so you have some kind of indicator between different um stopped workspaces the difference there so here's an example of a git pod configuration file because we actually can change some of the defaults here so you can change what gitpod considers the workspace location and in some cases with legacy go link projects you might need to change the checkered location there's not really any reason to ever touch these options but it's just the fact that they are available to you i wouldn't even know outside of that golang project use case why you'd ever touch these things but they are here okay hey this is andrew brown and we're taking a look at context and get pod url so a context represents a state within your git source code and with a get pod url you can quickly load an environment for a context so here we have the git pod url it starts with this gitpodio forward slash pound and then it's followed by uh a url and that is what gitpod is going to try to figure out the context of when it launches our workspace so the first is repository con contacts and so this is just you provide a repository it's going to open it up for you to work in then you have branches or branch and commit contacts so this is really useful if you are doing feature branch uh workflows or that's how you do that kind of stuff or you just have any kind of branches that you have there when you have commit contexts that's when you are digging back in your old code maybe you are trying to revert code back to a previous state or there's a deep rooted issue and you're just trying to rule it out by going to a specific version uh there so here is a branch and here is a commitment message with its sha there that's the code on the end then you have issue context so feature development or bug fixing so this is where um you know like github has a project management tooling and you can say okay somebody opened up this feature this bug this whatever request and you can then open it in the context there then you have pull and merge request contacts so this would be for like code review before merging for deployment and so here we have a pull request and so get pod url support github get lab bitbuckets so if they have integration they're of course going to support the get pod url for that okay all right let's take a look here at share snapshot workspace so this will let you take a snapshot url of your current workspace at any time and share them with others so the way that would look like is you drop down file you go to get pod share workspace snapshot you can also also open it up in the command palette and from there it will start to create a snapshot and so i think this would show up as a build phase underneath in kubernetes we talk about those underlying phases somewhere in the course here and from there it's going to say okay it's generated you can go copy that url to your clipboard and that's what it looked like so notice it has the pound snapshot forward slash and then a big long uuid uh there and so that's pretty much the process not too complicated so anyone clicking on such a snapshot link will get a complete clone of your workspace including the state of the workspace and the vs code layout so workspaces created from snapshots are treated as restarts so you can configure them to launch differently than if you had created a fresh workspace from git unlike sharing running workspaces snapshots workspaces are full copies this means developers can do whatever they like with the content no access to your credentials or environment variables are shared and we will double check to make sure that is true um but yeah that's that's share snapshot workspace okay so the other way of sharing uh git pods is via the share running workspace which allows multiple developers to collaborate on a single workspace in real time and the flow here goes as follows turn on sharing for the current workspace copy the current link to the uh to the workspace share the current workspace with other developers so the idea is there'll be a share button down below you press it you turn it on you'll get this link and then you'll just share that with other developers so a shared running workspace cannot be opened in the desktop vs code unless you're the owner of the shared running workspace so if you are used to using the desktop vs code and somebody shares a workspace just understand that there are those limitations but i have to be very careful here to tell you that when you share a workspace you are literally giving access to someone else to act as you within your workspace they can access sensitive information such as access key secrets stored in the environment variables uh the commits in the workspace will show up as you instead of the guest developer they can share that link with other people and you wouldn't even know it uh it is not easy to tell who is currently editing in your current workspace so it's generally recommended to avoid or be very careful when sharing a running workspace and it's just that it's just the state of this this feature for the time being so getpod has made sharing available to you they're going to continue to develop this so that you have more visibility over time but just understand that there might be some limitations there so if this is the future just review this and see if it's still true because some of these might have been mitigated by the time you were watching this video but just in case uh be on the side of being wary okay hey this is andrew brown and we are taking a look at getpodcli so this allows you to perform a variety of utility commands useful for daytoday use in your gitpod workspace so getpodcli comes preinstalled in your workspace and is accessible via the terminal so let's take a look at the commands that we have available to us so notice that it always starts with gp okay so that is the name of the cli but we have help so help about any command and knit so create a git pod configuration for this project env controls user defined persistent environment variables url prints the url of this workspace open opens a file in git pod preview opens a url in the ides uh preview forward port so make a port available on 0.0.0.0 that is exposed to internet but you know i don't really understand what they're saying there because the way i've been using it is just to forward one port to another and we saw that in that section earlier when we're covering ports so maybe it has more than one purpose here we have a weight port so weights for a process to listen on a port sync a weight so awaits an event triggered using the sync done and then sync done notifies the corresponding sync await calls that this event has happened so a lot of these we've actually already encountered in the course so i'm not going to cover those again here but we will cover the ones that we have yet to explicitly talk about okay all right let's take a look at the get pod cli open command and this will open the target file in the code editor so the idea is you're gonna say gp open and then give the path to the file that you want to open and so here i'm just doing gp open gem file and then it opens the gem file there and so that's just a very convenient way of opening files okay all right let's take a quick look here at the gp url cli command which will return the gitpod workspace url so there i type in gpurl and then i get that there and i just wanted to show you that if you type in env and you do a grep getpod workspace url that's going to return uh the same value so i'm just showing you that it's a convenience for uh getting the getpod workspace url environment variable okay hey this is andrew brown and we are taking a look at the preview command for the getpodcli so gpreview command can be used to open a web url in line with the vs code editor so here you can see me using the gp preview command using some fancy bash scripting with it to open up the current uh machine and so you know you can see that it's completely in line within the code editor so you can use echo echoing out the gpurl and modify the url to include the port number and so originally when i was doing this and you can see this in the example here that i was doing this like weird sed thing uh because i didn't realize you could just do this down below so you could do gp preview and then do gp url 3000 i was doing like some weird stuff there but i found another repository that had a more convenience method so um once i discovered that i had to go back and reshoot this video so i just want you to know that that's the way you would do it this one down below the ones above here is totally acceptable as well but this is what you'll probably want to do and what i'll be showing uh in the in the follow alongs okay but there you go hey this is andrew brown and in this follow along i just want to cover some of the cli commands i haven't really been using that much like open url and preview just so that you know what to use them for so i'm going to go here and type in git pod cli and we're going to create ourselves a new private repository out of readme file and we're going to go ahead and get this going here and we are going to launch ourselves a new git pod here and we'll give it a moment and i really don't think if you go to the cli here and they really should add this in the documentation but i don't think that the preview at least i didn't see it had a very good example so it says gpurl8080 oh i guess they did and i just never noticed so that's okay i'm going to go back to the preview you're not going to notice it but i'm going to reshoot the cli preview to show this more condensed example but what we're going to do here is create ourselves a new folder called oops i want a folder not a file a new folder called public and in that folder we're going to create a new file called index dot html and within that we're going to say hello world and then from there we are going to go and open up our terminal and i'm just going to install hdb server globally okay and then we'll just say http server and leave it where it wants to be and say port 8080 and so it's going to ask us if we want to open that port i'm going to say make public and from there i didn't see it pop up but we'll go over to our remote explorer here lefthand side and just make sure that the website is working there it is so you know if we wanted to open up let's say we close this file here and we wanted to open that file from the cli i'm just going to type in clear here what we could do is type in gp open and then i could type in relative to where i am so public index html and it's going to open that up oh sorry it's gp not gh i'm thinking github it'll be that'll be the way we can open up files and that's for the convenient when you're trying to uh when you can locate things easily through here and you want to open them up in the top there and then we'll take a look at clear so i'm going to see if we have two bashes running we don't so i'm going to at this top one here can i rename this i can so we'll go here and just say like http server here and i'm just going to start up our server again so we'll say http server port 8080. and then down below here where we have our little playground i'm going to just type in gp open 8080. oops uh sorry i meant to say gp oops clear gp url 8080. and so notice what it did is that if you just type in url it's going to give you the plain jane url which is actually just the url up here if you put in 8080 it's going to add it over here and so then what you can do is take this url and you can paste it up into here which is great and so now we could use the gp preview which will open something over here so if i was to do something like and i don't think it will work in here but i'm going to just type in google.com okay for whatever reason it doesn't like things that are outside the scope of this project but just showing you an example of opening that window there what we could do is type in get gp preview and then do this so this is like a bash thing for encapsulating uh stuff and we just type in gpurl88 and so now we can open it up here and so that would be the convenience way of doing that so you know that's gp open gp url and gp preview if we just want to look at all them that are there i think we've pretty much used everything the other one we haven't used is stop um so i guess for fun we can just do it so we'll just do gp stop and that will that should stop this environment so we'll give it a moment see what happens is it stopping it doesn't look like it's stopping oh it did okay so there you go so that is all the cli stuff uh covered okay hey this is andrew brown and we're taking a look at the get pod palette command so the github palette commands is a series of commands you can use within vs code to perform git pod actions and so this is in the command palette within vs code but if you click the little orange button in the bottom left corner you'll get all the possible commands let's just quickly go through them to see if there's anything that you might like to use uh during your workflow and through the follow alongs you'll see me using some of these because they are useful okay so the first is stop workspace so stops does not terminate but stops the current workspace open settings so opens account settings for the current uh gitpod user open access control so it opens git pod integrations page open context it opens the context this is really good when you need to go back to the repository i use that one quite a bit open dashboard so opens the gitpodio platform default page so it's going to take you to projects documentation follow them on twitter which doesn't hurt to have that in there i suppose open community chat so that's going to be on discord open community forum that's going to be on discourse report an issue that just takes you to github issues upgrade subscription this isn't going to upgrade your plan if you click on it it's just going to take you to the plans page so you can choose a plan so don't be afraid to click on that extend workspace timeout so only works with specific plans share workspace snapshots so this is when you create a snapshot and it returns a snapshot link for sharing share running workspace so turns on sharing i don't i generally don't do it from the command pal there's like a little share button down below um open in vs code so open the workspace in your desktop uh version of vs code so the desktop vs code or insiders and that's just the beta version of vs code it's just another one okay so that is the command palette or palette commands for get pod okay hey this is andrew brown and in this following we're going to just take a quick look here at the gitpod palette commands so if you're not familiar with a command palette within visual studio code it's a way of executing a lot of easy scripts i suppose you could describe it as so the way you would access that is you go to the hamburger menu here in the top left corner and you go to i believe view you'll see command palette notice it says control shift p so i'm going to type that instead and if we type that we have a bunch of different commands here that we can enter in and this is really dependent on what extensions you have installed or just uh you know the defaults that come with it i don't use visual studio code a whole lot so i don't even know what the most common ones are but i do know that there are git pod ones if you type in git pod these are the ones here and notice that there are a few extra things here that i typed in that will not appear if we just go click on the other area so just notice that you might have some advantage there if you just type it in but we click off and you open that hamburger menu again there are some of them the most commonly used ones here uh down below but if you want all the command uh palette or or get pod uh palette commands if you click this orange button down below here it'll pop them up okay so you know just so you know how to get to those again if you click any of these and you've seen us do this a bunch of times within the course i go to open context it'll open up where this repository is things like that but i just wanted to make sure you understood uh what command palette was and how to access all the get pod command palettes okay hey this is andrew brown and we are taking a look at teams and projects within gitpod io so gitpod team allows you to invite people to collaborate on your project and so you can create multiple teams and and uh one thing i notice is that if you try to name your team uh something like marketing it won't be permitted because getpod is utilizing something called the big username blocklist so just understand that there might be some limitations around the naming you might have to be clever but probably you won't run to the issue i just choose to choose the name marketing i just happen to hit that block list within a project you can have members and sign them roles and so you have two uh types of roles member and role and then projects has the main advantages of allowing you to utilize prebuilds and i want to point out that you have a personal account and you can think of it as a team of one and so within your personal account you can create projects and that in turn will allow you to use prebuild so prebuild is not exclusively uh for just teams okay just understand it's specific to projects so let's take a closer look at um get pod uh roles so within a gitpod team a member can be signed either the owner or member role but the key difference between an owner and a member is that a member cannot manage team members or delete the team and so this is the full matrix here and while i'm just getting my pen tool out so we have manage team members delete delete team invite team members add projects remove projects add project view branches view prebuilds trigger prebuilds and so at this stage of the product you just have those two roles i would imagine in the future they'll probably open it up so you can choose exactly what you want but for the time being that is what we have and it works pretty well hey this is andrew brown and we are taking a look at prebuild so prebuilds is a continuous build server that will run every time you push code to repository so here is an example of a bunch of prebuilds that are happening for a workspace and so these are really convenient let's talk about what a prebuilt workspace is so prebuilds will execute the before internet commands within your kidpod.yaml files on a git commit and produce a snapshot and we saw that earlier in the course when we were looking at execution order steps where we have kind of a visualization there the snapshot can be launched uh which will save your development team time waiting for lengthy builds okay um the idea here is you can trigger prebuilds automatically so a prebuild will trigger on the default branch for pull requests and merges from the same repository i have yet to see options to allow you to kind of customize that i'm sure they'll do that in the future you can also trigger prebuilds manually so a prebuild can be manually triggered by adding the pound prebuild to a git pod url if that's one way you want to do it i also think that there's a tab in a project that lets you do it like configuration or the file itself but i don't think that would be a way that you generally do it if you wanted to do it you probably use the get part url uh prebuilts have a timeout of one hour of the combined time of the before init before failing so if you know if it takes too long it will just fail here you can see i have a failed example uh in that page there so they took too long for whatever reason get pod does not cache artifacts between prebuilt each prebuilt is a clean environment um what's interesting is that they do have something with dazzle which will actually cache layers and stuff like that so i think that you know this might be an option in the future that we might have that functionality but there you go that's prebuilds so with tailscale you can automatically and securely connect your gitpod workspace to other development resources whether in the cloud or onprem such as a production database behind your company's firewall so the idea here is that you have your laptop it's going to connect to um tail scale and through tail scale you'll have a secure connection to git pod when you're on the go so let's just define some of these terms like vpn so a virtual private network or vpn extends a private network across a public network and enables users to send and receive data across shared or public work networks as if computing devices were directly connected to the private network then the question is what is wireguard so it's a simple yet fast and modern vpn that utilizes stateoftheart cryptography and so then we have tail scale so tail scale is built on top of the uh the pointtopoint open source wire guard protocol which powers an encrypted mesh network or tail net gitpod has an official partnership with wireguard so if you need to have pointtopoint vpn access um then just so you have a secure connection this is what you can use okay this is andrew brown and this follow along we're going to learn all about projects and the features underneath it so probably cover prebuilds as well so what i've done is i have a one git pod account here and i have another one over here on the side i'll just pull it up here i had to do this one in firefox and in the course we might have set up a project before i'm just connecting here uh to my my gitpod account here so here is one i know they're both named andrew brown but they're on different emails here and so the idea is i want to create a project and then once i'm in a project we want to kind of explore the feature set that is there okay so uh from the chrome account here what i'm going to do is drop down the top here and go to new team we're going to name that so i'm going to name this uh my get pod team or maybe exam pro code team and i might have named that one previously in another video that's totally fine and so now that i have my team i need to start inviting people so we'll make our way over to members and from here you can see i have the exam pro co i'm gonna go ahead and invite one and grab this link and i'm gonna go over here to my other browser firefox we'll paste that in there and now i've been added so there's no prompt to say hey do you want to be in this group it's just if you uh click through the link you'll be added to it so we'll go back here and we'll just close and we'll give it a refresh okay give it a moment and so if i want to change them to a oh sorry a member i can i don't see why you'd want to switch yourself out from owner um i don't know what happened if you did that because if you had two members that could be disastrous but i don't even want to try because i just don't want that to get stuck um and so there's this option here remaining owner so i think maybe you're not allowed to at least remove one but again i'm not going to test that functionality there they have a filter here again owner remember there's only two roles there's not much going on there let's take a look at settings under here all we can do is delete the team i imagine the future will expand that and then we have workspaces so as we add projects here that will go there so let's go ahead and add our first new project and so uh here we have a um you actually have to select the context here so uh this is where you might select a different uh repository so up here it says get repository git lab so you can change this out to git lab or github i guess bitbucket is not an option here as of yet but i'm going to switch over to github and so now here are all of our repositories that we could collaborate on so here i might want to launch up hello world i might have like a hello world one in here so we'll select this one here and from there we can go ahead and create that new workspace all right and so here's student prebuilt so as soon as you use as soon as you use projects uh prebuilds are going to happen so i don't think there's an option to turn prebuilds off it's just like if it is a project it will always do prebuilds and in that case you might run into some scenarios there or some issues there um but we'll we'll address those maybe in this follow along here um but anyway so uh this project has launched which is really great uh and that is running but now if we go back to get pod so we'll open up our hamburger menu here and go back to our git pod dashboard and we go under the workspaces we can see oops notice here i'm not in um the right project so we go here go to project so there it is so we can see that we're on main it started a few seconds ago it has prebuilds and if we go to view all we can just kind of look at some of the options here so here a prebuild was successful and we go to configuration here and so we have some options here so configuration already exists in git run a prebuild or open the new workspace to add the controls so i suppose you can edit this and then run or prebuild i've never found any reason to do this um but i guess it could be a way of like forcing a prebuild for you to test things we'll go back to our branches here and apparently you can do things with branches as well um so i'm not exactly sure what we would do here but um i guess like we could just go ahead and create a branch and see what happens so we go get check out hyphen b um we'll call it development here because i'm just trying to think like how that would affect workflow maybe staging might be a better branch it will say get push and then we'll have to push upstream here which is totally fine we'll say allow and hit enter okay we'll make our way back over here and if we give it a refresh i'm going to see if that registers that other branch okay and so i guess from here this would be a great opportunity for you to launch a new workspace so this will do prebuilds always the main branch will always do it and so i guess here we can run it manually so i don't know i don't know if you push to a branch if it will actually trigger it i'm not sure if that prebuild is running i don't see it running let's just give it a refresh here i i don't feel like i clicked it so we'll go back here one more time we'll say run prebuild okay so i don't see anything happening here unless it's delayed or something but from the documentation remember you can only really do it for the main branch so maybe that functionality is just not there yet but we can launch a new workspace for that staging environment that or maybe there's nothing to prebuild because it is forked off that other one so maybe it's based off the the main prebuild so what we'll do is we'll just make some super my new change to the code here and then maybe that is what we need to trigger it so i'll go over here and we'll just say hello world and we'll just add an extra exclamation mark here and what i'll do is i will go back to um we'll commit that here so we'll add it and say minor commit because i'm really curious if the prebuild will trigger and uh we will go back here to uh this oops i guess we'll have to go back to the dashboard and then close that tab and so now what i want to know is it going to trigger that prebuild because i don't think it will on this branch here right so we go over here no prebranches or prebuilds what if i do run prebuild okay ah so now it's running so i think that was the case was the fact that i had forked it and or not forked it but i had created a branch but it was like there was no difference between the main ones so there was no reason for it to run a prebuilt now will it run and prebuild every single time i'm not sure so again we will go ahead and launch this new workspace and we'll just make a test see here if it automatically runs because maybe once you've done one prebuild it will just keep triggering but as far as i'm aware it shouldn't i think it would just be it wouldn't do that so go back here add another exclamation mark whoops or net sign that's totally fine too it doesn't really matter and we're going to go ahead and commit that into exclamation and we'll say okay and we'll give it a moment to sync we'll say okay just making sure it syncs because it's doing this funny thing here so i just don't have confidence that it's doing what it's supposed to be doing and while we're waiting on that i'm just going to open up the dashboard again here and i'm also going to open up the context because i just want to see did it push that change right so i go over here and we have uh we need to go to the staging branch right we are in staging no so i don't know it's acting kind of funny here so what i'm going to do is just launch it again and that's the nice thing when these environments are temporary you can just keep launching new ones so i'll just launch a new one we'll give it a moment here and so um if we go over to our uh our code here again i'm just going to try one more time to change this and we will go back here we will add this file we'll just say minor change and we'll commit this and we'll sync the changes again okay and that worked no problem this time so i'm not sure what the issue is before but that's okay and so just to confirm back in the staging here i'm just going to double check to make sure that change has been applied remember i haven't told it to manually run so that's what i'm really interested to find out here so we'll go back and open our dashboard and we are going to wait for that to load we'll click into that it says ready a few seconds ago i'm gonna go to prebuilds there's only two here so i think again like if you want to build these minor ones you're always going like the other branches you're gonna have to go here and trigger that though it's not saying there's anything new there's no available actions we'll go back over to prebuilds here it would probably help if i had a different name but that's four minutes ago so um yeah i'm not sure we'll give you a refresh here so a few minutes ago so for whatever reason i can't seem to trigger a new prebuild so but anyway i guess the thought is like really the the stuff you're going to be focusing around is the main branch okay um so i think that's pretty much it with projects not super complicated but i think i might want to just run through prebuilds a bit here and just look at a scenario where i ran into where i was confused and like there wasn't an issue but i just wasn't uh realizing that the prebuild was the part that was kind of difficult okay so i'll just make that a separate video we'll just pick up here in a second okay all right so what i'd like to do now is just to kind of show you some friction you might run into prebuilds because uh you need to kind of adjust your script to work in a prebuilt environment and it's not hard it's just thinking about prebuilds personally i would recommend if you can to always have a prebuilt environment or a projectbased environment so that when you engineer your git pod yaml file you don't have to rework it but let's see if we can run into that case so maybe a good example would be just to try to build out a very simple project that has sinatra and we've done that a few times so maybe we can just pull from our existing examples so what i'm going to do is just go to getpod.gitpod.com here and i'm just going to kind of look through some of my examples here um we'll go show more so we have google play drive init cli example website is this the one where we use uh sinatra no this looks a lot more complicated that's me forking the website so that's okay we'll just start from scratch it only takes like a couple seconds to do i just can't seem to remember because it's been a few days it looks it's for you it seems like i just i just recorded this but a few days since i made the sinatra one so what i'm going to do is create a a new repository here i'm just going to say prebuild sinatra sinatra prebuild example and i'm going to make this private and we're going to go ahead down below and add a readme file i'm going to create that repository we're going to give that a moment to get created we're going to go ahead and launch that git pod we're going to go to sinatra ruby just so that we can get a little bit of code here to work with and that's all we're going to really need so i'll go back here and give it a moment to load we're going to go ahead and make a new file i'm going to call this server.rb whoops server.rb uh rename we're going to go ahead and paste that on in there so we'll say allow and so we're requiring our sinatra we'll need a gem file as well actually i'm going to use bundler to do that so we'll go to new terminal and we'll say bundler init and that will give us a gem file to start off with i need sinatra so i'll copy the contents there down below we'll just type in jam sinatra so that's fine we'll do a bundle install to install sinatra and so once we have that there we're going to just take out the that part there so we don't have to worry about it and so now we need to create our gitpod file so we'll say gpinit that'll get us a starting script here port 3000 is okay for me i'm fine with that and so i need a few things here i'm just looking off screen to uh this code here to see what it is that we can do here so i don't have to forget um but we don't need a before command because we don't really need to change the ruby version uh rvm list so we are using ruby version 2.7.4 which is fine um but what we might want to do is to run something so it might do things like bundle install something we definitely want to do and for the command we're going to want to start this uh the servers up saying bundle exect ruby ruby um it was a port 3000 i can't remember how we set the sinatra ports build the docks here ports uh configuration settings ports port sports ports it's like set port like that eh so we'll just say whoops we'll go back to our code over here where's the code oh we're in hello world whoops so go back to this one up here and we'll go into our server file here and we'll just say set environment actually it's setport and that's where we do the 3000 right so what i'm trying to get at is that um let's say we want to actually set the we'll just say env and we'll just say app port here and as an example we might want to set the um in here the port number so we might go like export port app port 3000 and actually i don't even know what it starts on by default so that's not going to check first just case it starts on that port by default server.rb here so this starts on port 8080. so let's say we want it to be on this port it's going to look at like export environment variable as an example here i always forget how to do it so i just double check i always feel like there's like a dollar sign i'm missing so it's export name equals whatever okay so we'll go back over here and so this would set the app port there and so this app down below should pick it up right if i just do server.rb that should technically work port 3000 that's totally fine so what i'm going to do now is just restart this app and i'm going to just put that there so that doesn't error out but i'm going to commit these okay so attempt to or sorry just initial commit okay and then we'll just sync those changes we'll say okay we'll give it a moment i'll close up some of these other tabs here and so what i'm hoping for and we'll open up the context here what i'm hoping for here is that when i uh launch this git pod it's just going to work right it's going to do the bundle install it's going to export the environment variable of course we could just set the environment variable in the task but i'm trying to stage an example where when you move over to prebuild you have to kind of consider how that's going to change so give it a moment and it's opening the tab it's good it's starting on port 3000 and it works right so this part here whoops um this part here worked right so what i'm saying is like when we move this over to prebuilds this init step is going to run but the problem is is that it's not going to carry over the state over to this one so it might install but i my expectation is this export option won't be there or another thing it might be like cd into the directory so one thing that we might do that might be a better example would be to make whoops to make a subfolder here so we might make a new folder here and we'll call it um you know application or sorry project here and from here i might take these files here and just move them into yep let's say move it's okay we'll take the gem file here and move it into this project here okay and actually i might call it app instead so we'll say rename app and so instead of doing this you might say like cd app right so we're going to cd into it first and so let's see if that works because again i'm just trying to stage that example to show you what i'm talking about because i remember that's where i ran into seating where i thought i would be already seated in so if we see the init will it do in the command i believe it will so uh small changes here uh put things in a folder and we'll go ahead and commit that we'll say yes we will sync those changes we'll say okay and what we'll do here is we'll wait a moment and i'll go back over to this i'll close this tab out and we'll launch git pod again and that should cd into that directory and work and then we will go then make it a project and see how that changes with the prebuilds all right so we're waiting here a moment so it's working so it definitely seeded in and so i don't know if it shows sometimes it shows the script of what it ran so if you look at the script this is what it did it said cd app bundle install export and then it did the the next thing which was the command so it's treated like in one go in the same environment so now what we're going to do is we're going to go make our way over to get podio and i want to make this actually a project so i'm going to make a new project here and then i want to choose this project here when it when it gets a moment here and we're going to choose the um it's on git lab again so that's fine we'll just change that to github it really likes to default to that gitlab which is totally fine and this is called sinatra so we'll type in sinatra here we'll click here we'll select uh we'll create a new workspace and now it's going to do the prebuild and so my expectation is this is going to fail right because when it goes through there it's going to cd in the one thing and the other one's going to start not in the cd directory so give it a moment here all right and so notice it says could not locate gem file or bundle okay so if we scroll on up you can see um we are seeing that there's stuff that it ran the prebuilt services cd app bundle install export stuff this is stuff that happened in a separate environment right it didn't happen um i'm just trying to see if it shows it very clearly yeah so these are the prebuilt logs that it ran right but the thing is is that um that was in the prebuild environment we'll bring back up the slides here to make it more clear okay so here right it ran before and init so it did it went cd into the app directory and it set the environment variable and then when it became over here it's starting from scratch so it's not in that cd directory and i don't even know the environment variables there let's see if that persisted because that might be interesting so i'm just going to say env grep and we'll say app port okay and it looks like it is set because it's saying it right there uh let's just just say echo app port uh maybe dollar sign it goes to show like i've been doing links for years i can remember this stuff so it's not set so the environment variable got set in the prebuild environment and it's cd into that directory and that's where before becomes very useful because it's going to run twice right so this is where we would take our script and um the bundle install is totally fine there but we'll just go and we will add a before step right and we will just take the cd out of here and the app out of here okay and so the idea is that that's going to run both times in each environment right so this should technically fix our problem we'll go ahead and save this file and we'll just say fix prebuilds and we'll commit that we'll sync those changes we'll say okay we'll give it a moment great we'll close our tab and i'm going to open up uh getpod again and so you notice the prebuild's happening so it showed us a screen if our prebuilds had already occurred we wouldn't see it apparently you can stop waiting for prebuild which i would never do that but there could be a case where you have a very very long prebuilt you just want to get into the environment so we'll give it a moment and see if that fixes our issue apparently there's a way to trigger prebuilds from the url it's not something that i have found a requirement to do if you're really interested you could look it up but there's that while we're waiting there we might want to look at pin projects it's something i haven't done with gitpod yet so you can i guess not projects but workspaces so as far as i understand if you append a workspace it will remain there longer i believe so that is one advantage there is that if you have an environment that you want to stay you can just pin it okay and i don't think it will get deleted see unpinned workspaces that have been active for 14 days will automatically be deleted so if you have pain and environment and i don't know if you can pin multiple ones can i pin this one can i pin that one i have a feeling there's not like a pin limit so you could pin as much as you want i wouldn't probably recommend that but that might be something you need to do i haven't found a used to pinning so far here down below it says exit so i have a feeling that the prebuild is done sometimes it gets stuck on the screen so you can just close that out and go back over to your projects here and just launch it again okay if you ever see that it's not a big deal just because it's ready right so it's not perfect right like you just have to kind of like and there's no different than like using aws cloud service providers you just have to kind of be watching and aware and just being like okay i've waited too long let's see what we can do here and have confidence so we're waiting a while here for this to start up and um let's see what we have so it says here uh could not find sinatra gems so bundle saw to the install missing gems so it didn't work as we thought it would we are seeded into the correct directory we'll do grep um or we'll just maybe echo it so we'll say echo app env or app port so the port is set so that definitely fixed it why the install failed i don't know because it did run it up here as you can see and sinatra 2.1 is installed um let me do bundle install here you know it probably is it's my script so if you go over here because i changed it maybe into the cd directory because here it cds into it right but it would cd into that one as well so that shouldn't affect it let me just try running bundle exec here bundle exect ruby server.rb okay so that runs no problem there's nothing to change so i don't really trust what happened there so i'm just going to throw this environment away and launch a new one so we'll open up the context we'll close this out we're going to wait a moment here we're going to go ahead and launch a new one i'm just going to see we're going to make a new workspace there we're going to see if it works this time around because i'm not sure what it's complaining about but once you're used to using prebuilds and you have the environment working it's usually not a problem but sometimes there's a bit of friction moving from a nonproject to another one and that's why i say like if you start with a project it's a little bit less painful someone says this task ran as a workspace prebuild could not find sinatra um things like that so run bundle and salt to install the missing gems so i'm just going to scroll up here and just see what it ran so again there shouldn't be a problem so i'll go back over here allow yeah so it's acting like the gems aren't installed is the gem file there the gem file lock is there hmm this is what i'm trying to figure out like hmm i'm not sure i'll be back here in a second okay all right so i had a little bit of time to think about it and you know what i think is happening is that when you install ruby gems they're not installing within this workspace directory and since anything outside this workspace directory gets blown away i think that's the reason why i'm having this issue now if you're using node node installs in the current directory so here like if i wanted to fix this problem i would just have to look up like okay how do i install uh the gems in the current directory if i want those to be cached and in place so i think like for ruby workflows it doesn't take too long to install gems but i think in this case for like ruby you have two options you can install based on the vendor so like uh bundler install gems in current directory or something like that so i could do this right and that would probably solve my issue um or you know i could do you know something else but that means when i run the uh bundle install i think i'd probably have to specify um where those gems are but you know the simple solution here would just be saying okay every like to this and put this here right but it really depends like if the bundle install takes really really long time then maybe i would want to move my gems to a vendored like directory like doing the path so it's really going to be up to you and the the constraints of your language but i think that is the reason that is happening there so again not a big problem i move that there and we're okay but yeah i think we're all done here and uh you know hopefully you understand how prebuilds work okay hey this is andrew brown and we are taking a look at get pod pricing so for good pod they have four uh possible plans available to you so we have the basic uh which is free personal at nine dollars usd per month professional twenty five dollars usd per month and unleashed at thirty nine dollars just d per month of course always make sure you double check the prices because they may have changed but you know generally they should be this if you go look online um they don't have uh the option to pay annually at least i did not see through the checkout process there but if you do need annual maybe just contact their team again i don't see anything describing like an annual discount i know some organizations care about that kind of stuff that's why i mention it but goodpod is really uh nice and easy to reach out to so you know they probably can make those kind of accommodations for you but let's take a look at what changes in terms of the feature set for these plans so no matter what plan you're using you get unlimited private and public repositories which is really nice in terms of the amount of workspaces you can run in parallel uh it's four for free and personal i don't feel like i'd ever be running more than one workspace at a time but you know maybe you have more than one tab open and you're toggling between uh maybe different domains of a microservice app so that's totally possible so that's something to consider for professional you have eight parallel workspaces unless you have 16 parallel workspaces in terms of timeout it's by default 30 minutes between basic and professional and on unleash you extend it to one hour as the default right so every time it launches up it will do that um then the next thing is how many hours do we get per month of of runtime or consumption so for the basic you have 50 hours for personal it's a hundred hours a month uh and for professional it's unlimited hours and then just for the unleashed plan you have the option to do a three hour time boost so what they're saying here is that imagine you are just you're just about to go for lunch and you are running some kind of operation that you know is going to take a long time to run so you know you don't know it's going to finish but you have to let it run for a long time and so this is your opportunity to boost it so that your workspace doesn't time out after an hour and so that is the reason for that option and so that could be extremely useful okay so let's take a look at some of the other um uh plans they have that are outside these four here so there's the pro open source so this is a special plan for professional open source developers with unlimited hours on any public repository so you know this is just to help out people that are developing open source to help them reduce costs because it's a lot of work to give out uh open source stuff uh right so then there's a student plan so this is a a special plan for students so you provide an email with your domain of the institute educational institution so it'd probably have to be edu or what have you but the idea here is you get at least for nine dollars a month which is really nice then there's git pod for startups so this is eligible startups that can get unleashed plans for up to two years on git pods and there are some particular requirements so you do have to read into that but if you are startup that is a great opportunity for you there then there's get pod self hosted professional so these run get this runs the github platform on your own uh private networks or managed uh uh like manage kubernetes clusters within your own aws azure account what have you and this is at 35 dollars per month starting with the 11th user okay so let's talk about how you can monitor your hourly usage so as you use git pod you consume in a lot of amount of hours based on your plan and so if you go to the plans page it will show you this remaining hours things and so here you can see i have 78.5 hours for the remainder of the month and so this is the way you could keep track of your current usage is there any way within the getpod workspace i didn't find it um but if there is i'd love someone to tell me but this this is great too so just if you want to keep on top of that okay all right so this follow along what i want to show you is where you can track your current usage so here i'm on git pods to go to getpod.io it should generally bring you here to projects and so what we can do is make our way over up to here in the top right corner or i think this goes the same place as long as you're in your personal account but if you go to the top right corner and go to settings and if we go to the lefthand side to plans uh what we'll see is this kind of bar meter here so it says open source but this is actually the basic plan so there's a bit of inconsistency with the naming here i believe you know if we go to uh maybe here if we just open this in a new tab um it doesn't show here if we go here to this pricing tab so this says basic right and so it says 50 hours and just going over here notice it just says open source so for whatever reason there is just that minor inconsistency but understand that is the basic plan but if you notice here it says upgrade your plan to get more hours parallel workspaces those remaining hours 43.6 and so i've been using this quite a bit and it hasn't been running out which is really nice um is this present anywhere else no so i was looking through like the get pod interface or command pals and things like that to see if it would be displayed somewhere else it isn't uh anywhere else uh as of yet um i'm i could imagine that they might want to do that in the future but for the time being uh this is where you're gonna have to find it but honestly like again i'm just running this and never really noticed so if you are hitting this limit then you probably do want to upgrade because you're using it very seriously but there you go okay so git pod also offers team pricing so team pricing or a team plan is for organizations to pay on behalf of their team members to centralize billing to a single account so the idea is you say i need x amount of members uh for this type of plan and that will be for your teams and so you can also set the currency there's nothing else that is um available around team pricing it's just a way of centralizing your billing maybe in the future they'll add more particular things just for teams but for the time being this is what it is okay hey this is andrew brown and we're taking a look at selfhosted git pods so get pod oss or open source that's what the oss stands for allows organizations to selfhost their own gitpod platform on their own private networks so getpod is built on top of kubernetes and the short form of communities is k8 so and it has deployment instructions for a various amount of managed k8 services so to list a few we have google kubernetes engine so gke lightweight kubernetes so k3s elastic kubernetes service so eks azure kubernetes service aks rancher kubernetes service rks but i think that it's going to work on anything that has kubernetes so um you know if digitalocean has an offering or walter has an offering or you're running your own kubernetes cluster you know on a virtual machine i imagine that you could probably do it for selfhosted offers um what you're going to get are the public and private repos integrations will get lab github and bitbucket unlimited prebuilt shared workspaces snapshots admin dashboard so basically everything if there's something that's not in there i'm not sure what is not being listed but it seems like everything you can get podio selfhosted is offered in two tiers the open source so the first registered users are free and then professional exceeding 10 users you need to pay for professional plan so to upgrade to professional you need to obtain a license and one question i have and i have this question because this is the same thing with terraform cloud where they have something similar after you exceed a certain amount you are paying but the thing is do you pay for the first 10 users i don't know i could not definitively answer that question for you i'm going to lean on the side that yes when you are when you cross over to the 11th user you got to get your professional key you're going to be paying for 11 users which i think is fair because it's not like it's going to be super expensive and at that point you should be able to pay for them but i don't definitively know okay hey this is andrew brown and we are looking at get pods security so gitpod employs a variety of security controls and security best practices so let's take a look at this so the first is compliance if you're not familiar compliance it's basically compliance programs that are industry standard or best practices and you have like a thirdparty company that does a testament to say yes this company is meeting those requirements and then they get a certificate to prove it that they they are doing that stuff so one thing is get pod is sock to compliant and so this ensures your service providers securely manage your data to protect the interests of your organization and privacy of its clients so this is a really good thing to have it's also really expensive so you know that they're taking security very serious a lot of times you'll see the iso 2701 with this as well but you know this is good the other one they have is gdpr so the gdpr is guidelines for the collection and processing of personal information from individuals who live in the european union um so basically everybody is being gdpr no matter where they are in the world because it's the internet and anyone can be from uh from europe coming onto your website so this is pretty common so it's good to see that they just mentioned that there uh so we have environment isolation so get pod workspace or prebuilds run on a secured singleuse container separate user uh pid mount and network namespace for each gitpod workspace stress test namespace layering implementations by third party company kin volkswagen companies specializing in kubernetes so i think namespace layering is very important because it just it is virtual iso isolation between clients okay then there's the fact that git pod is open source so open source allows for a faster security feedback loop allows git pod partners customers or the community at large to identify disclose or contribute fixes to critical exploits we have authentication and authorization so gitpod uses version control systems single signon and you can apply granular or finegrain permissions based on the providers integration options so they're basically offloading that uh that concern over to get lab github bitbucket and you know those are very large companies so you know their practices are going to be very very good uh we have integra or sorry encryption so they have at rest encryption so all data including workspace backups and environment variables are using advanced encryption standards so aes256 and then we have uh in transit encryption so git pod uses transport layer security so tls so there you go hey this is andrew brown and we're talking about the security vulnerability disclosure policy so if you believe you have discovered a vulnerability privacy issue exposed data or other security issue relating to gitpod you can report it via the security vulnerability disclosure policy and you can read all about it here it's a big document if you want to have a fun time to read the policy outlines the steps for reporting to gitpod they pretty much say like hey if you do report it you can do it and you're not going to get in trouble because a lot of people are concerned that if they find a problem and they report it that they're going to get in trouble for doing that just because and so you know they kind of outline that and just also give you a lot of extra information there to report you need to email getpod providing as much detail as possible to security at getpod.io some companies will have a form and the language of this document suggests that they do have a form but it turns out it's just email so i imagine they might have a form of the future but it's you know email's fine too so there it is okay hey this is andrew brown and i'm just on the get pod website because i just wanted to show you here at i o forward slash security the kind of stuff that they have here so they just say like who is using get pod so you know it's safe how many uh developers companies are using so you understand the scale of it some of their principles uh that they are uh considering or they are implementing i should say uh so they're secure by design uh about their compliance the things that we already covered in the lecture content but the thing that i just wanted to show you here is the security vulnerability disclosure policy because there is a bit more there that just couldn't fit on the screen so there's a bunch of stuff here that you might want to read about the interesting part is like safe harbor a lot of people are concerned that you know if they report a problem that they might get in trouble for it but getpod saying uh you know if you find a vulnerability and you share with us don't worry you're not going to be uh getting in trouble for it uh and we just want to make sure that you understand that so that we encourage people to submit things as you can see here it is at security at getpodio if i click on this there wasn't a form before still no form it's just going to the same place here so maybe eventually they'll have a form but honestly all forms do just kind of give you some additional fields here you can just basically write whatever you want in there i guess they uh have thanks some contributors here like sneak and get lab and stuff like that but uh yeah that's pretty much all you really need to know for security okay hey this is andrew brown and we are taking a look at get pod support so get pod has a wide range of support options and so we're just going to quickly go through the list here so that you're aware of them nothing super exciting but just making sure you know what's there the first is documentation so technical documentation describing the various features of git pod we have a change log so historically release changes so it shows you features and bug fixes there's a community form which is just a discourse form uh with community and official support we have the discord server so this is a chat server to interact with community members and get pod employees in real time we have the get pod road roadmap so this is a github project which is basically a kanban board showing planned and upcoming features based on annual quarters there is a status page so this is an atlatian status page showing up time and service interruptions for the underlying infrastructure so like maybe the kday the kubernetes customers running goodpod workspaces and the gitpodio platform that's probably what it's for we have git pod or is our github issues so open tickets for bugs or feature requests directly on the open source project account settings so change email settings notification settings nothing super exciting there obviously you can change your plans so that's another option as well and then there's the sales support form so send an email to gitpod's sales team about selfhosting educational discounts reselling or other gitpod does not have a paid tier support or direct tollfree number for individuals however enterprises may inquire about additional levels of support after contacting sales because if you're a bigger company they're probably going to roll out the red carpet for you but they just don't say like explicitly hey this is the tier that we offer and things like that okay hey this is andrew brown and we are on the support page here ford slash support because i just wanted to show you some of the varieties of support that you can utilize so the first thing is we have a status page here so if we go ahead and open that up we're going to see it's kind of an uptime uh here they're using the atlatian status page so a pretty common one here to just kind of show you uh what's going on here so if you look at workspaces we see operational here's some part partial outage um and more of some part of the outage here you can see the duration here um says in the u.s region so clearly they're operating in multiple regions here i've never ever ever experienced any kind of problems uh working with uh getpod but it's really nice to see they have the status page here a workspace stuck stuck in stopping okay so you can see that there's some information so that's kind of interesting um you know if we go to contact support i don't know if this is just email so oh we have a form here so you can see report reviews billing educational discount verification supposed to get pod looks like some of the context changes a little bit here so you go ahead and fill that in and send that over um we have the change log we just go ahead and open that up so this is going to tell you what they've been adding to the product so here on october 14th we have introducing teams and projects so these are basically linking to blog posts just talking about what has been released down below you can see the fixes and improvements so it's not just features but it's also bug fixes there if you open that up you can see that it is all on github so again it is an open source project so that's really great there too um if you go to the community forum that is in discourse now i've yet to sign up for oh sorry this is discord um and i do actually have that this is over um i'm just gonna pull it up here in a moment so this is over here i'm not sure what i'm looking at here but um you know here is the get pod so i'm actually sitting in this here as well and talking as i work on this course i've been updating the uh build in the open here so they're very active and this is a great way in real time to connect with um get pod employees developer advocates uh and get help there or get directed to different kind of support options um the uh the form is really good too this is community form this is discourse oh i thought i clicked this does this go to the right place let me click that oh i think i found a bug i think i found a bug so in this case what i'm going to do is just take a screenshot here and i think someone just has a miss link here so we'll go down below and we'll go to support i'm just going to say here you know i think this is supposed to link to the discourse but it's going to the discord and that's a fair that's a fair issue there just because like discourse and discord are very similar so it wasn't me what happens if i go here no see that goes to the chat so that's going to the wrong place unless i got rid of the discourse get paw discourse let me try this again let me try this again discourse form oh okay so i think maybe they retired it which is totally fine um honestly it doesn't say here but honestly like i found that like i didn't really have a use case for the discourse i'd rather just be in the discord where is real time i'm not going to go back to my course and update that because i'd rather just leave this in here just to kind of show that that is uh a edge case there so i probably what's going to happen is they'll end up um just changing that wording here to discord and then that confusion will be gone but there was a discourse at one point uh and i was pulling some kind of information from it but um you know honestly again i prefer just to do everything on discord let's go take a look at the getpod roadmap so this is just a project here we go over here to the top notice get podio roadmap if you go here you can see all of their getpod repositories did not know you could put a readme there that's really nice but down below you can see all these here right and so if we go back and go to the getpod product roadmap you can kind of see what's being worked on at the current moment so we are in uh q4 and so we see introduced project level environment variables team pricing jet brains remote development support image layers faster workspace startups which honestly they're really fast to begin with but if they can make them faster that's great and future stuff so that's a great way to just kind of see what is coming down the road in terms of git pods so that is really nice as well we saw the status page if you want to report a bug it's going to probably take us to the github yeah that goes there so if we open that up i think it might just prepopulate some text for us yeah so it has some nice boxes for us um this is not the discussion these are just forms so that looks really good so we'll go back here and um we'll go all the way back and then you get your selfhosted thing or your account settings not so much to look at the account settings as we've seen this quite a few times in this course so really they're just like talking about like notifications like what do you want to turn off which there aren't a lot of options there or managing your plan right there's not really support within the get pod i o per se you always have to reach out to the discord and stuff like that click on help this just goes back to the support page but that gives you an idea of the level of support and honestly it's a lot it's really great so and i said this also you know in the in the lecture content but you know if you are an enterprise i would imagine you just reach out and you know if you're if you are large i'm sure you'll get a direct phone call with git pod and they probably would create some kind of custom um support plan for you uh but they don't you know they just don't say it here on the pricing okay so i just talked to them i said yeah if you're if you are an enterprise would you do some kind of deal and they're like yeah of course we would do something you know um but they just don't show it as a as like a lot of places we'll have like a fifth box they like contact us okay but there you go all right so i just want to show you the support in action so it's actually really great that uh this uh this happened because i can just show you like i just went here into the discord i opened a ticket it became a thread i went into here you can see pauline said check out the announcements over the announcements and i i assume that it was rolled into it and so we go over to our announcements here and you can see that uh you know they've said that they've um they've they've uh you know have archived the discourse and so now they want to make the discord the future home and again i think that is the right place for it so i'm really happy with it if you're looking for the old stuff because there is some stuff in there that is good but probably by the time you watch this video you might not be interested but they did go and archive all the old stuff here so it is still accessible it's just readonly on the wayback machine but yeah it was a great opportunity to see that in action so there you go hey this is andrew brown and we're taking a look at git pod open source so get pod open source is a combination of open source projects built by get pot and so you know when i was looking at the uh github repos i just noticed that there's more than just one and so there's one called uh worfd and this is a kubernetes native continuous integration system we have leeway this is a heavily caching uh build system for go yarn docker projects dazzle this is a experimental docker oci image builder its goal is to build independent layers where a change to one layer does not invalidate the one sitting above it and then there's open vs code server which is a fork of uh the vs code project there and so you know we don't really need to know much about these here um but this is the one that we really care about because this is pretty much what powers get pod i o okay that's what git pod io's it's it's a um a managed version of this and so we're going to give extra attention to that one okay hey this is andrew brown and i just want to poke around here on the get pods team or organizational page that is on github so that's at github.com forward slash get pod hyphen io and it just goes shows to show like how much stuff they're doing with open source so they have 159 repositories that you can see who in their organization is there if you want to reach out or just kind of learn more about git pod you can even sponsor them if you want because again it's open source projects so that is an option to you get pod does make money on their platform side but you know helping in either way can always help out uh there is projects i think this is like a new feature of github which i don't really understand as of yet so here's a project and they have a bunch of itemized items like a roadmap here don't fully understand it but that's kind of interesting there when we go into the repositories and there is a lot you can see all sorts of things i think the reason why there's so many is because all of their templates live here so we looked at the quick start template so just understand that's why it's so large but the main one here is get pod here at the top so we'll open that up and we'll take a look at the website here um and we'll just go and take a look so here's git pod so git pod automates the provision of ready to code developer environment so this is going to be for the actual platform right so i believe that when you want to selfhost this is the repository you're going to be using this is the same experience you get when you go to getpod.io so it will give you that gui and also this interface here this thing the underlying thing is based off um the open vs code server which we'll look at separate uh in another video because i actually want to show you how to run that on your own um but yeah this thing is here how you use this i don't know i guess we'll have to look that look at that if we do show the selfhosted git pod option i'm going over to the website basically anything that you see on the website in terms of the documentation you can absolutely contribute to so like let's say we go to get pod i o uh forward slash docs i believe and we go to some page like configure here um if you go and click edit and get pod this will launch this environment if you look up here you can see well it went too quick there but you can see it's loading up the website here so we'll just give it a moment okay and actually this might be a great opportunity for us to correct that uh discourse option right because uh they no longer have discourse which is totally fine and it's discord so maybe through here we can help with that language so we saw it on the support page and i'm just wondering how we could go find that so and you know i'm not that familiar with it but i'm good enough that i can kind of make my way around here so if i go to let's say contents there's probably a global way we can search so we'll go here and i'm going to go to find in files and we'll just type in discourse we found the discourse logo support ts so i feel like it is here okay and if i go over here oh look it's oh no it's not missing it's just me so this is community forum if you're looking for help with common requests connect with our community on discord okay and then so from here i'm going to just change that so use discord instead of discourse okay and then we're going to go ahead and commit that and we will sync those changes the thing is is that we can't push to main we'll need to have our own fork which is totally fine so i'm hoping it'll pro up prop up and say hey you need to have your own fork so is not accessible please grant necessary permission so let's say open access um so i guess we kind of have to make our own fork here i think that's what we're going to have to do so what i'm going to do here is go back and i'm just going to go and fork this uh here so where's my fork here we go fork but just kind of show you like how you can contribute to get pod which is kind of interesting so now we have the website ourselves and we're going to go ahead and just close these out and reopen this here now if you're watching this of course you don't have to do this um but just because i've would have already made the change but it doesn't hurt to go through this process to show you so again i'm going to go to the top left corner here we're going to go file um and we're going to say find in files or whoops edit find in files discourse we'll go to support here and there are a few here that still say discourse but we really want discord so we'll just switch that over to discord i'm going to go over here to the right hand side and did i save that file i did there we go so we'll just say change wording from discourse to discord and we'll save that and we will sync those changes and we'll say ok and before we open or like we submit our pull request we should probably open a ticket so here on the main one we'll go over to issues we'll open up a new tab and i'm just going to open a new ticket here and we're going to file a bug report i'm going to open up get pod io forward slash support here actually i want to keep that other tab open so just keep it there for a second and oh sorry we want to go to get pod io for slash support and i'm just going to take a screenshot here okay we'll go back over this ticket and um so i'll just paste that in there so we'll just say um gitpod is no longer using using um discourse so the wording here needs to be changed to discord all right um and sometimes they'll say like show the example so what we'll do is just go ahead and grab that link here paste that on in um it requires all the other ones here i don't like that they i mean this is not uh git pod but like they've kind of forced these parameters so say um github support page should say discord instead of discourse okay and then i'm just gonna grab flamingo emoji i'm gonna be like the worst person ever and just kind of like phone it in whole point of those boxes to make sure you do it right so we'll just say that we'll put in those anything else okay and we'll go ahead and submit that ticket because i just need an issue so when i submit it i can tie it to that right so now i have this pound 7113 and so what i'll do is go back to mine and so now it says uh you know your branch is up to date and i want to go to pull requests here um you know what i didn't make a fork that's what i should have done so if i go back over here we're going to stop this here i'm going to go get checkout hyphen b and we're going to say discourse old wording and then i'm just going to push it allow and this is a good habit to put the id name in there but i didn't do that which which is totally fine and so we'll see if it allows us to just push seems to be doing some kind of diagnostic i'm not exactly sure why not sure what that is for but what i'm going to do is go back and refresh here because i did this recently but it seems like there's been a few changes here and so i'm just not exactly familiar with it just yet so it looks like the branch was pushed if i go back here and give this a refresh the branch should show up um so say old and notice like that some people are putting the numbers in there so that's a good thing to do but we'll just say uh disc discourse old wording and so i want to uh merge this in so i think if i go back to the original git pod here and uh we make a pull requests let's say new poll request here and notice this is main and main so compare main and um i want to do it for mine so we'll say old uh compare cross forks we'll click there okay i could probably done it from here again it's just it's always a little bit confusing you just have to kind of be doing this on a regular basis if you're not doing open source on a regular basis it can get confusing so compare the base to here i think we want the one on the right hand side here so we'll say old um get pod or discourse oh i have to change this to my repository so oh and i'm in i'm in the wrong one i'm supposed to be in website okay so we'll go back here lots of mistakes on my part here but not a big deal because usually it'll it'll pop up sometimes and say hey do you want to make this pull request or something but we'll say a new pull request and it's not showing my old ones but what we'll do is compare across forks again and i'm going to say for that branch there discourse oh i'm not choosing my darn branch there we go okay let's just me creating so much trouble so i don't want to do it against maine because that's not proper you're always supposed to do it from a feature branch or whatever kind of branch you want to call so we'll call discourse here there it is and so now what i'll do is go ahead and create a pull request we have some text in here and so what i want to do is link the related issue so it fixes if we go back to did i open this in the right place oh i opened this to the wrong place oh sorry this is supposed to be open on the website okay all right that's embarrassing so now what i got to do i'm rolling my eyes if you can't see it but what i got to do is go back to the website here i can do the second take of this so this is the take you're going to get for this video but we'll go ahead and we'll open this issue again we'll say doc feedback okay this is a lot easier to work with here um so we'll type in https forward slash forward slash get pod i o four slash support i'm just gonna go grab that again so we'll say get pod i o forward slash supports okay and we'll just paste that on in there like that and we'll just say um uh gitpod no longer uses discord or sorry discourse so the text here needs to change from discourse to discord because that's where it does actually redirect to and uh change wording from discourse to discord we'll submit that and so there is our ticket now we have our issue so we'll go back to our pull request and we'll say this fixes that so we'll go over here they'll link to that um renaming discourse to discord on support page there are still other lingering cases but i was just showing this for the purpose of a video demonstration okay so we'll go ahead and create that pull request and so there i've contributed to the get pod open source um so you know hopefully that gives you kind of an idea of like the ecosystem here and why it's valuable because you don't have to wait on get pod you can start to take action or dig into things but uh yeah there you go hey this is andrew brown and we're taking a look at openvs code server so openvs code is a version of visual studio code that runs a server on remote machines allowing access through a modern web browser so git pod and github code spaces uses the same architecture at scale so open vs code server can be run on a linux machine so a virtual machine or on a docker as a container so here's an example if you wanted to start it on a virtual machine and here's an example of you wanting to start it on docker and actually uh when git pod first came out before they had the i o offering this is what i would use to try to launch uh my own um vs code on aws and it worked i just wasn't able to figure out how to make the space the the server turn off reliably where gitpodio has clearly solved that in a very intelligent way so just to clarify you have the vs code as open source you have open vs code server which is a fork that's built on top of the vs code open source code base then there's the open vs code which is used within git pod and other tools which that's where we get gitpod.io the gitpod platform okay hey this is andrew brown and we're taking a look at openvs code server and so this is a fork developed and maintained by getpodio so here you can see the original fork is vs code by microsoft and so this one was modified uh just to give you a bit more flexibility and the key thing is is that this is what gitpod is using so if you want to run your own uh openvs code server it's not too hard uh but you know if you really do just need an environment to work with your team strongly recommend just using the getpod platform itself but you know for whatever reason if you want to know how to do this i figure it doesn't hurt to show you how so there are two ways to run it via docker and linux linux is the easier way to get going so that's what i'm going to show you here today so i'm here in my aws account and i'm going to make my way over to ec2 and you can do this for anything whether it's azure or gcp or any platform as long as you can run a virtual machine but i'm just going to use aws because that's what i'm most comfortable with so i'm going to go ahead and launch a new instance here i'm going to choose an amazon linux 2 instance which is generally recommended i'm choosing a t3 micro here but any size will do these small sizes work uh pretty great here and uh the key thing that i need to do here is make sure that i have an i am role that has permissions to sessions manager i'm just going to open this up really quickly if you're not familiar with this stuff here i just want to show you if you go ahead and create a role all i'm doing here is typing in ssm whoops uh maybe uh sorry create a role here i thought i already clicked it and so you'd say for ec2 you go next and we would go ssm here and in here we would want to get access for um amazon ec2 role i think this one is old so you have to use this one instead which is not a big deal i think i'm using that anyway so you create a role with that permissions and that's what we are attaching here uh as our role that's gonna allow us to use sessions manager so we don't have to use um ssh keys or things like that but once you have that there we'll go over to our security groups we're going to have to open port 3000 i think that's what it runs on default actually i think it's port 8000 so we will open that up um and we'll go review and launch we'll say launch we will launch with no key pairs so proceed without a key pair because we do nee do not need one here and we'll give it a moment to launch so we'll go here and click on the instance itself and so it'll take a little bit time to launch they're not too long but what we're going to need to do is go get the latest uh downloads if you just open this up in a new tab under linux you scroll on down you'll notice we have arm 64 arm hf x64 x64 is for the i guess the intel chip and these are arm chips so uh since we launched a virtual machine that's uh on the x64 architecture that is what we're going to be using so here i'm just copying the link address because if you look at it it's a raw raw link directly to the tar atar is like a zip file or an archive but once this is running and usually we wait for the two status checks to pass but i'm just going to go ahead and connect because i think it will work we're just going to connect with sessions manager that's why we set up that i am role with ssm the simple systems manager access to sessions manager and so this is going to open up a black screen and from here i'm just going to type in sudo hyphen ec2 user just because oops sudo su hyphen ec2 user just because it always starts us off as a different kind of user and we want to be the ec2 user here what we can do is type in wget space and we'll go ahead and paste that link in and hit enter that's going to download that tar there i'm just going to type in clear just to clear my screen to make things easier i know the font's a little bit small so i'll try to bump it up here um and so if we just have to untar it so i always forget what to type here so let's go ahead and copy that and we'll paste that in there and we will follow up with openvs code server hit enter and that's going to expand the archive so we can go cd into that directory and now it's just as simple as running this period forward slash server sh so sh is a bash command or bash script and so if we do period it's equivalent of saying like sh like if you did it like this but uh it's more popular to run x cable like that so we'll hit enter and that's going to start on port 8000 and here it's going to give us a web uri so we want this part of the url whoops i didn't mean to click it through there hold on here it doesn't make it too easy to click but if we just a shrinker font there go back to our instance we want that public ip address i'm going to go ahead and grab that paste it on in here and then i just need the end so just go ahead and grab that and try to copy it it doesn't make it easy to copy so you might have to open your browser like this and we'll go back over here paste that on there and it should hopefully work fingers crossed um porta 8000 cannot be reached so just double check make sure that is correct looks okay to me we grab the public ip address so that should be fine oh i think we stopped the server by accident okay i'm just seeing if it changed yeah it did change i'm just gonna click that again okay so we just got to be really careful there because i guess it's very finicky still running okay good and i just need to delete out this part of it here yeah we know why it's forbidden that's totally fine okay and i think it's working we'll just give it a moment there we go so here's vs code it's or openvs code uh and so you know that's a way of selfhosting i mean the thing is is that you have a lot that you need to solve if you do this like how are you gonna persist uh your data so like you don't lose it or how do you back it up how do you make it intelligent so that it knows to turn off when you are not uh using it i guess there's a lot of things here you also notice that it's a little bit different from the one that uh um get pod uh uh gives you so like notice it doesn't say get pod on the bottom or have the command palettes and things like that so this is really just being able to run the um open vs code server okay like if you needed this kind of editor here um but anyway you know it is something you can do and it's part of the get pod project so i just wanted to make sure uh that i showed you there let's go ahead and shut down this ec2 instance so we'll go ahead and just terminate that instance there so let's say terminate and i'm pretty confident that it's terminating so i'm i'm confident that is going to be destroyed not worried about it so yeah there you go open vs code hey this is andrew brown your cloud instructor exam pro bringing you another complete study course and this time it's the xampp pro cloud developer environment certification made available to you here on freecodecamp so this course is designed to help you pass and achieve example issued certification and the way we're going to do that is by going through a lecture content doing follow alongs within our own account doing a practice exam so that we're preparing for the day of the exam and also utilizing cheat sheets so that you can cram some last minute information so that you're able to pass that exam and improve on your resume and on your linkedin you've got that cloud developer knowledge so you can get that cloud job or that promotion so i am andrew brown i was previously the cto of multiple edtech companies with 15 years industry experience five years specializing cloud i'm an awesome community hero and i've published many many free courses uh just like this one and if you ever want to buy me drink i love coconut water i want to take this moment to thank viewers like you because it's you that make these free courses possible and the best way you can support more free courses like this one is to buy the additional study material so that is the link there at the exp cd01 where you can get study notes flash cards quizlets downloadable lecture slides downloadable cheat sheets prax exams you can ask questions get learning support and it's all free to sign up yeah just to even get your prax exam cheat sheets so it requires no credit card there's no trial limit so there's no reason not to sign up and if there are updates to this course look in the in the youtube comments to see when there is an update and this is where we would see things like corrections additions modifications to ensure that you're using the latest version of this course and if you want to keep up to date on upcoming courses the best way to find out is to follow me on twitter and share with me what you passed and what you'd like to see next so there you go let's get to it journey asking the most important question first which is what is the cloud developer environment certification so the cloud developer environment or cde is a practical cloud certification center round of the open source developer tool get pod and here we're going to learn about the benefits of cloud developer environments over traditional tools practical knowledge utilizing a cde for the purpose of application or cloud development teambased collaborative features for utilizing cds because that is the main benefit of cdes advanced cde techniques like custom containers prebuilds and more the course code for this course is exp cde 01 and the reason that is important to know is because that's how you know what version of the exam you're taking so you always want to make sure that you double check to make sure that you are using the latest course there and so exp is the certification authority in this case it is exam pro cde is the name identifier standing for cloud developer environment and one is the version of the exam we also like to call this exam the get pod essential certification or the git pod course because it's so focused on git pod but there's a reason why this that is and we'll explain here in a moment so who's the certification for well consider the cloud developer environment certification if you are new to programming or scripting because if you are working in the cloud you're going to have to have an environment to code and the best environment is in the cloud at least in my opinion here if you are a web application developer role or you're transitioning into a cloud developer role it's a very good idea to adopt cloud developer environments or if you're a director of engineering or staff engineer and you're looking to adopt cd cdes to optimize the dealing and productivity of your development team because that is the main benefit of adopting it is that you're going to get increased productivity so before we look at the roadmap we always do a roadmap to show you where should you go after the certification but i need to break this down into three types of certifications because this is an exam pro certification and so we have three types fundamental certifications that's where we have a cloud concept that is best taught with a large focus on cloud agnostic knowledge so example of that would be the cloud programming certification we have technology specific certifications like a cloud concept that is best taught by using a single technology in greater detail and in this case that is what the get pod certification is it's it's just that you know we want to teach cloud developer environments but it just makes sense to use a single tool for that then there are our rolebased certifications so this is where you have done a bunch of fundamental and technologyspecific certifications and then you are requiring to submit a project to earn that role so example would be the exam pro's cloud developer certification so let's take a look at our roadmap and see where we can go with the gitpod certification so the idea is we have that fundamental knowledge that technical specific knowledge and then the idea is that we're trying to show that proof of combined knowledge to earn that rolebased certification so this is all based for a cloud developer or modern application developer there's overlaps with other cloud rules like cloud engineers but let's take a look at the cloud developer specific path here so the idea is that you would start with the cloud developer environment because if you're going to be doing programming or development you're going to need an environment so it makes sense to know inside and out a cloud developer environment from there you would need to know a variety of different programming languages in the context of cloud programmings working with sdks apis cli things like that so that is the natural path after the cde from there we would look at application integration so leveraging a host of cloud services and integrating them into your traditional or your modern application and then cloud deployment because that seems to be something that is very important uh for cloud developers is having not just the ability to develop applications but to deploy and it's not just deploying applications but deploying uh integrated services as well from there it's really good to fundamentally understand virtualization which is not a topic that uh it kind of gets overlooked with the cloud developers so that's where application developers so that's why i think we include it here from there there is linux specific information there's windows specific information and for virtualization a natural path there is containers and then serverless so to me this is the scope of fundamental and tech specific knowledge that you should acquire to be a cloud developer and then once you have this knowledge you need to prove it some way and so that's where we have this idea behind having a cloud project to show all the knowledge and practice so you might be looking at saying wow that's a lot of certifications well the great thing though is that these certifications are smaller in scope and so instead of taking a big big exam like how aws azure or gcp has you do these are more focused so that you're having a bunch of smaller wins and you're getting better coverage um so you can think of it like a movie versus watching a high production long running or like a high production tv series it's just a different approach to study okay so how long does it take to pass for the cloud developer environment so we have the beginner side and so here i say 24 hours um the idea is that if you've never programmed before if you've never held a web developer role it's going to be on the greater side here 24 hours if you're experienced that means you have practical working experience with web apps you have um held a web developer engineering role we're looking at 14 hours and so in between here this is where i say the average hours 20 hours now this could be a lot faster if you just watch the videos on two times it's up to you right so like there is 14 hours of content it's mostly because of the the lecture or the lab content so there's a lot of handson but you know if you watch it uh on two times then you know you're done in seven hours if you're experienced so just understand that you know it looks like a lot of hours but it's not as bad as it looks um it's fifty percent lecture lab content fifty percent practice exams and then the recommendation here is to study one to two hours for ten days okay what does it take to pass the exam well the idea is you're going to be watching lecture video memorizing key information you're going to be doing handson labs and there's a lot of it so follow along with your own account so you'll have to get a free gitpod account and any other things that go along with it and we make sure that we always make sure things are free for you so you can learn at the the lowest cost or at no cost and you'll have to do practice exams to simulate the real exam the great thing is on exam pro we have a full free practice exam for you no credit card required uh to get it so it's at exp cd01 and that's where you're going to go grab that in terms of the content of the actual exam it's broken up into five domains and each domain has its own weighting which determines how many questions in our domain that will show up so we'll take a look at the domains the first domain is cloud developer environment concepts which is seven percent uh get pod integrations which is five percent thirty uh uh domain three which is good pod configurations is 35 percent get pod workflows is 35 percent and 18 for git pod io enterprise get pod oss so you know when we engineered this course we didn't just make it for people that are going to apply uh um apply it for their work but just also for that executive level that needs to understand how to adopt it for their team so that's what this category here is for is understanding the ecosystem for adoption um and you know a lot of it comes down to just knowing how to work with it as a team and knowing how to configure your environment to be productive in real world use cases so uh where do you take the exam well the exam is taken online from the convenience of your own home and this and the exam is delivered via the teacher's seat anchor system so teachers see anchor is an online uh secure exam system to deliver certification exams similar to pearson vue or psi online and ensures exam credibility via their ai assisted proctor so a proctor is a supervisor or person who monitors students during an examination so that way we make sure that you're not cheating and that you definitely have obtained the skills yourself there to schedule exam what you'd have to do is actually sign up for example so you keep seeing this thing up here you do have to go there to do the exam but once you sign up you can go uh into the course and click on the schedule button and from there you can schedule your exam it'll have all the information there for the grading exam you have to score at least an 80 percent we say around 80 percent because this uses scaled scoring skilled scoring just means that we use a point system and so the idea is that you know tomorrow we decide to make it out of 2000 points it's still going to be based on the percentage of 80 percent so when you go for the exam make sure you're trying to aim for 85 percent on your practice exams to make sure that you are comfortable uh with the exam when you go sit it for the response types um first of all first off we have 55 questions so all questions are scored there are no unscored questions and there are no funny questions so you know it shouldn't be too difficult you can afford to get about 10 questions wrong there is no penalty for wrong questions and the format of the questions are going to be multiple choice and multiple answer the duration of the exam is 1.5 hours so you get about 1.5 minutes per question the exam time is 90 minutes the seat time is 120 minutes and somebody say the seat time we're referring to the amount of time you should allocate for the exam this includes time to review the instructions show online proctor to your workspace read and accept the nda complete the exam provide feedback at the end and this exam is going to be valid for 36 months so that's three years before recertification so hopefully that gives you an idea of what you are jumping into here again the exam is not intended to be difficult it's very practical if you follow the content here it'll be pretty easy for you to do but yeah there you go hey this is andrew brown and we are looking at the question of what is cloud native and now this is not a as straightforward as you'd imagine because there are a few different definitions here so we're going to have to go through a few little iterations here to just kind of conceptually understand what it is but cloud native at least the way i describe it is an architectural approach that emphasizes application workloads that are portable modular and isolate between different cloud deployment models and cloud service providers so that is what my definition of it is but if you talk to cloud service providers and we say cloud service providers we're talking about aws azure gcp uh they describe it as a term meaning everything built on their platform so you know if you were not to use onpremise and only to ever use aws they would call that cloud native but i would actually better describe that as being cloud first so sometimes cloud native and cloud first mean the same thing depending on who you're talking to then there's uh some models out there that say that certain components go into cloud native so modern design automation micro services containers and a bunch of backing services and then other ones describe cloud native as being four principles so micro services containerization continuous delivery which you could say is automation and devops which could mean anything because devops has so much stuff involved but you can just see that there are a few different things there i'm hoping that we lean towards my definition because i feel like that is a more comfortable one there but if it does feel confusing don't worry about it it's not just clearly defined it's just kind of like serverless where it's hard to pin down but in the context of get pod and cloud developer environments cloud native means uh we'll be utilizing microservice architecture modern application architecture so think function as a service such as containers and kubernetes okay so hopefully that and when i say that it's just the fact that when you have cloud developer environments they're going to be better drivers or enablers for modern architectures okay hey this is andrew brown and we are taking a look at two very similar but also distinct roles or technical roles that strongly benefit from cloud developer environments or cdes and so that is a cloud developer or a modern application engineer and you know cds can be used by any kind of role that's working in the cloud but these two in particular strongly benefit because they're writing a lot more uh programming code okay and also interacting with cloud workloads but let's talk about how they are similar and also how they are different so for both these roles they take a cloud first approach meaning that generally they're starting um you know on a cloud service provider you know in the case of modern application engineer you can still be doing that on premise but generally speaking they're going to be focused on using a cloud service provider first in terms of like how the role is focused for cloud developer they're focused on building out the product and the product features whereas a modern application engineer is architecture focused so they're more interested in how to make the underlying resources work in scale and things like that the cloud developer is specifically going to focus on application integration with cloud services so that's what makes it different from a regular developer is that interaction or the interconnections with other cloud services which enables you to basically build microservices and for a modern application um uh engineer they're architecting cloud native workloads so that might be setting up like a kubernetes cluster writing infrastructure as code setting up automation and things like that and then you know just some other things like things that you would see that a cloud developer would do that a modern application engineer does would be things like deployment by knowing some infrastructure as a code not a priority for them but it's just something they definitely know whereas the modern application engineer has things like automation scaling and operations so just to reiterate here uh it's like if you're taking a cloudfirst approach to building web applications using cloudnative workloads or cloudbased tooling that sounds like a cloud developer and the focus is less about the architecture and life cycles and scaling and more about a being a productive developer using cloud and then on the other side of it we're looking at the modern application engineer it's about thinking about how to architect applications using serverless containers microservices there's a larger focus on the underlying architecture lifestyle life cycles and scaling not so much about building out the web application and it's less product focus so you know i just want you to know these two things because if you are entering cloud these are the titles you should be trying to cling on to if you really are invested as a programmer okay hey this is andrew brown and we're taking a look at code editors versus integrated development environments and the reason why is because git pod supports both and these usually look very similar but they are also dissimilar in a lot of ways and it's good to understand um the tradeoffs of using one over the other so let's talk about a code editor so a code editor is for writing computer code and they will generally support many programming languages with things like syntax highlighting in recent years code editors will include a community marketplace for extensions that allows you to add a variety of features to customize your code editor for specific workflows so the thing is back in the day when we had code editors they were very simple and the only way you'd have like really rich functionality was via an ide because it had everything there for you but now things have changed and things are a lot more modular and flexible but notable creditors would be things like visual studio code sublime vim notepad plus plus textmate things like that then we look at integrated development environments so an ide is a suite of tightly integrated programming tools under a single unified gui so an ide are generally more powerful than code editors and are specialized for a specific language or framework or you could say they are very opinionated for a specific framework or workload so they will include things like a terminal code editor debugger compiler deployment file management and all sorts of tooling notable ids here would be jetbrains eclipse xcode android studio visual studio and in a lot of cases sometimes it's the only way you can really develop stuff it's really hard to develop mac os applications without xcode it's possible but a lot of times you know the the technology is so well designed for that use case you end up using ides but i do need to note that modern code editors can be modified through a collection of extensions to work nearly the same as ide so that line is becoming a little bit blurred but let's just look at the uh overall comparison so code editors are multipurpose modular light portable and generally crossplatform when i say they're portable like them which is a code editor can be something that's used in the browser as a desktop app or even in the terminal but then you have things like ides uh these are special uh so in contrast they are specialized monolithic heavy designed to be used as mostly desktop apps because they need a full gui and may not be crossplatform um but we say as a desktop app um you know that's starting to change because like jetbrains is now able to use jetbrains projector to run in the browser so you know these things are starting to meet in the middle but it's still good to know the difference between these terms but most people these days are using code editors okay hey this is andrew brown and we are taking a look at the seven benefits of cloud developer environments so i just want you know this isn't like an industry standard but these are the things that i thought that were the most important things to highlight about them so if you are talking to someone trying to understand why to adopt a cde into in terms of your company workflow these are the seven things you should be telling them the first is context so you can start a runtime system runtime system is just a developer environment on the context of your workload so pull requests uh maybe based around an issue a testing environment or sandbox or q a then there's mobility so easily move to different workstations so whether you're on mac to windows to linux all you need is a browser you can use multiple kinds of version control systems so maybe you're on github today tomorrow you might want to use gitlab or bitbucket things like that works with different kinds of editors so maybe you like visual studio code but you'd rather use jetbrains so you have the ability to move between them or you know maybe you are on a laptop a chromebook or even a tablet so you know there's a lot of mobility you get there then we talk about agility so quickly start up developer environments no time spent configuring your environment and so that's a pretty clear one it's just the fact that you've already put in the work for the configuration either other team member has or you have and the idea is that it's going to spin up and start that up right away then you have disposability or they're being disposable so always start from a clean point discard long live credentials at the end of a work session um what's really important to understand here is just like or like a use case is the fact that a lot of times you'll install like libraries if you're working with multiple projects you might install different libraries they break other libraries but here that's not a problem because everything is in the scope of that single project and you're disposing things at the end always then you have reproducibilities or or being reproducible so you can go back through your git history and launch the exact state of a developer environment with the required environment configuration because as you are changing your code you're also changing like the configuration to set up that environment and you'll have that history there in your commits then you have a progression or being progressive so with progressive versioning always start uh you always start with an environment with the latest stuff and that's poorly worded there but the idea that i'm trying to say there is like with git pod you can have prebuilds and so every change might discover breaking changes because it will run the code every single time and so as you encounter it you can address and then upgrade those to the latest version right so that's the idea of always staying on the latest then you have collaboration so we were talking about realtime collaboration here um so being able to share the state of a developer environment so hopefully you know that is pretty clear about those seven things context mobility agility disposability reproducibility being progressive or progressive versioning and being collaborative so there you go hey this is andrew brown and we are asking a very important question uh in this course which is what is gitpod so gitpod is a company specializing in cloud developer environments via the gitpod open source software or the gitpod.o which is the platform so it can be a little bit confusing at first because it's like is it the product this is the company name or it's whatever but we'll just go through here to make sure it's crystal clear so get pod oss open source software which is located on github is a developer environment as code and if you're wondering what i mean by that it's that it's an open source kubernetes application for ready to code developer environments that spin up fresh automated dev environments for each task in the cloud in seconds and enables you to describe your dev environment as code and instantly start remote cloud or cloud developer environments directly from your browser or your desktop id or even tablets if you want which i have yet to try but i'm sure it does work as long as you have a browser you can do it and so the idea is we have getpod.io and this i call it a developer environment as a service which is not something you need to really remember but it's basically a software as a service so it is a cloudbased fully managed offering of the open source software with a free and paid tier uh and so hopefully that is a distinction that it's a company that's an open source software it's also a cloud platform okay all right so i just wanted to get you some exposure to git pod so if you went to www.getpodio this is the main website here so you can read all about it if you like but we do of course cover everything that is in here then there is the actual open source git pod and so this is where they have a variety of different repositories so you can start reading here and again we cover this within the course but they have a lot of repositories here and then there's the actual platform itself which is getpodio if we click into here there's no app it's just the naked domain uh here you can see i've been launching workspaces which will get into but you know again just to get you a little bit exposure uh to that gitpod ecosystem okay hey this is andrew brown and we are taking a look at getpod versus other providers i think it's important to know the options that are out there and maybe to understand why i chose to do a gitpod course as opposed to making an agnostic course um but let's go through it so the first is gitpodcodespaces formerly known as visual studio online if you try to find visual studio online anywhere you just can't find it uh it'll let me have like a marketing page it'll always link back to github code spaces so maybe both projects existed at one point maybe visual studio online was always github code spaces and was rebranded we really don't know but all there is is github code spaces so github code spaces is proprietary online code editor specifically for github so understand that it's proprietary not open source so um you know if you are locked in there you're not going to take that code editor into deployed on your own infrastructure so just understand that is one thing uh key differences you pay based on computing instant size so i believe that it's metered billing so uh i mean that's nice if that's how you like your compute to be like i use this many hours i pay for this many hours but you do have to choose or right size your instance so that uh could be good if like let's say you need something that's more powerful than git pod provides but git pod like has a really beefy instance and at a cost that like it's just really really cheap so you know even though you know metered billing and uh being able to use your size sounds good uh you know this is one of those rare cases where i prefer get pod because i just don't have to think about it it's like totally serverless it doesn't currently have prebuilds right now so you can have longer wait times um i would imagine they would probably end up adding this at some point so uh you know even though i say there's not prebuilds right now uh you know it seems like github code spaces would add that and a very huge key difference is that it runs on a virtual machine so when you are launching um a git pod it's using docker right as a way of launching its containers and so um i mean like i'm finding containers to be a lot more flexible first i thought virtual machines would be better because maybe you need to install docker on a virtual machine or or images but you can run docker within docker so it doesn't matter um and it's just a lot easier to package like docker files for that kind of stuff so i kind of feel like git pod has the advantage there because it's using containers okay um and the use case here is only if you're using github so if you're using git lab or code commit or something else uh you know you're not gonna be using github code spaces so you have to understand that your workflow is going to be very tied to github and this might cause friction for larger companies that like are using elazi and jira and they have everything in bitbucket which is very popular so you know just has to work fit your workflow github of course is the most popular version control system out there and then visual studio code is the most popular code editor so you know for most people it's going to meet their use cases but you know uh i i just i still lean towards get pod here then we have aws cloud nine so this is an online code editor service within aws um i liked it i liked it for years i still use it for a lot of use cases it runs on a virtual machine you can only choose very particular types of amis to run it on but i mean i guess it's no different with um git pods because git pod runs on debian ubuntu like a debian like instance and so i guess cloud9 technically has more flexibility of what the virtual machine is but when you're dealing with containers you can have whatever you kind of whatever you want i guess not because in git pod you can only run debian or ubuntu instances but yeah i guess there's more flexibility here with cloud9 you pay for the online virtual machine cost it has a free tier um these case here is if you need a simple persistent developer environment with simple collaboration features you want to take advantage of builtin enable support within cloud 9 for service development um it is easier to use than visual studio code so for beginners especially when you do aws stuff i'm showing them cloud nine but like if you're serious about your development you're probably gonna wanna use something like visual studio code and then that's where you're going to be using git pod or code spaces and things like that then we have the google cloud cloud shell editor this is an online code editor part of the google cloud shell the key difference is it's free uh and it's free to up to a certain point there's no team collaboration features at least that i i saw and this is intended for experimentation or rapid prototyping with gcp services i wouldn't really consider it for application development in a team environment uh there's probably possible limitations on performance of the runtime environment i couldn't find details about it and it has limited hours per month i thought it was like free 100 hours i might say this somewhere else in the course saying like google cloud shell gives you unlimited hours but it's not true i found out it was like limited to 50 hours a month but it's still really good um and it's running visual studio code alongside their shell so when you're in google it makes things a lot easier and so you know when i'm doing uh google cloud workload stuff i will be using that thing but when i want something that's persisted like a project i'm not going to be doing it in the cloud shelter i'm going to be putting in a repository and launching up git pod but a really great way to learn google cloud because a lot of the um uh the console you'll click through it'll say open in cloud shell and then open the editor so you will come across it but what i want to do is show you all these three editors for real just so you can see where they are if they interest you but hopefully that gives you an idea how they compare against skip pod right again git pod runs on containers uh it's serverless billing right um you know things like that uh and it's it's using debian ubuntu okay hey this is andrew brown and i'm in my aws account here at the aws management console and i just want to quickly show you what cloud9 looks like not so much that you need to go do this but just so that you can see what else is out there so what i'm going to do is go to the top here and type in cloud9 and we'll go over here and we'll give it a moment here i am in the root account so usually it doesn't like you creating um environments here which is totally fine i have a couple old uh ones here that refuse to delete but i'll create an environment we'll just say cloud9 uh get pod test kind of weird writing get pod in there but i just want to show you that you choose the instance size or type so you can choose t2 micro small large other instance type and you can go pretty big here so that might be the advantage that cloud9 gives you is that you can go like super super big if you need to um and you know this is not the only kind of environment that aws has so like they also have in sage maker because you can think of it as a code editor right like you have sagemaker studio which will run a jupiter lab but that's really for ml we're talking just about like general cloud development here so that's the thing is like if you really do need to do like um you know uh ml stuff you probably shouldn't be using a cloud developer environment you should be using something like sagemaker studio or whatever the uh integrated um cloud services that are used by the cloud service providers but anyway i'm going to just choose a t3 micro notice we have amazon list two amazon links the old one which is not recommended to use anymore ubuntu um and so those are our options i think at one point you could just attach whatever any kind of uh machine you want but then it wouldn't be managed when shut down automatically notice we have a 30 minute um turn off after 30 minutes but you can change it here to whatever you like we'll go ahead and hit next we'll create that environment and we're going to wait for that to spin up because i just want to show you what it looks like um it's generally really fast but i'll see you back here in a moment okay all right so after waiting a little while here it has finally launched uh usually it doesn't look like this i think there's just a slight little problem with the editor or display it usually looks really nice here but it's just telling you here how to get started with um cloud9 so this is based off of i want to say like adam but maybe not i think it may be oh sorry the ace editor so we'd like up ace editor i think that's what it's based off of yeah so it was called ace and then uh ace turned it into cloud9 uh ide it's not really an id it's a cloud editor um and then cloud9 was acquired by aws and so aws integrated with a lot of their services so when you go over to lambda you're using cloud9 but it's a lot simpler like they don't really have extensions per se so you can like explore aws resources through here they have some uh source control which um i believe is kind of new i remember seeing this uh here before but it's very dead simple there are no extensions uh you know so like whatever you want it's like uh test.ruby we'll open that up here and just type in like um puts hello getpod okay we'll save that down below ls and i'll just run it here ruby test.rb so it's really darn simple collaboration is kind of nice i really like it um git pod at least at the time of shooting this their features are not as transparent as they need to be but i know that they're working hard to make that better but like here you can like invite people you can see them you can see where their cursor is so that's kind of nice um they have a debugger uh which is fine and there are like serverless integrations but you know nothing super complicated um but yeah if you want to shut it down we can just close the tab or i'll just go back out we'll go back to uh the dashboard here i'll just close up this tab and i'll go ahead and delete that environment so nothing super complicated that is cloud9 now over to gcp so we'll go over here and theirs is up here in the active act or cloud shell here so if you click it uh generally you have to activate cloud shell so what it's going to do is spin up i think a virtual machine underneath so we just have to wait uh a while here and once we're there oh that was fast that was super super fast some like if it's the first time you ever did it it's really slow but like because i think they're like making the back like the storage for you but it's super fast but if you click here the open editor it's going to look just like vs code because it is vs code right so here it is i don't know if there's any kind of limitations in terms of the stuff that you can install i actually never looked at that for extensions can you install extensions that's a good question so we have uh cloud code apis secrets manager kubernetes cluster so i don't see the ability to install extensions so it might be just what you see is what you get here i'm going to go ahead and just create myself a new file here so just say test.rb okay so nothing super complicated you know you know what visual studio code is but that's that one there if you want to close it we just hit the x there all right and we'll take a look at github code spaces all right i'm back and so i just want to show you github code spaces or at least attempt to do it and so the thing with github code spaces is that if you've ever tried to find it like under the buttons here and you don't see it displayed the reason why is that it's part of i believe the team's plan so you know if you are just a regular user and you're looking to utilize it that's not possible now could you just go ahead and create an organization and then be able to do it i guess we could go find out so what i'll do here is go over to my settings and we'll look for organizations and i'm going to create a new organization and notice here we can see some options so in the free here unlimited public private repositories 2 000 automation minutes a month 500 megabytes issues and projects um so i don't think that it's here um is it in here i'm just trying to see here so we have protected branches multiple reviewers code owners and that is the tricky part is just trying to find the functionality so what i'm going to do if we scroll down here we might be able to see it so code spaces ah okay so in the free tier it's not available and then the team plan that's where it's going to start at up to 32 cores starting at 18 cents per hour i'm very certain that i have a paid teams plan somewhere so i just need to go find it okay so what i'll do is i'll come back here in a moment and see if i can find it but just understand that you got to be paying and then you can pay additional to use get hub code spaces so i'll be back here in a moment okay all right so i'm in uh my other account here where i definitely have a teams organization but i don't think it's paid it used to be paid i think we moved off of it because they made a free tier and so now we don't have code spaces so uh you know i think it's just going to be a bit too hard for me to show this and all it would really show is that once you launch it that you have this kind of editor and that you can choose the different size there um but you know hopefully that gives you an idea of like the friction it it it causes to get started with um code spaces uh but you know if you really want to know more you can just read up on it here okay uh but yeah there you go hey this is andrew brown and we were talking about contextbased developer workflows because this is something that you've probably already been doing but it's just cloud developer environments make it a lot easier to do so what is context in the scope of a developer workload well as a developer you need to quickly switch contacts based on the scope of the work you are currently performing and this could be things like reviewing pull requests developing features manually performing quality insurance so q a replicating a version of production hey this is andrew brown and we are taking a look at contextbased developer workflows if you've never heard of it um it's okay you've actually probably been using it this entire time but this became a lot more important once we started using modern architecture so let's talk about what is the context in the scope of a developer workload well as a developer you need to quickly switch context based on the scope of the work you are currently performing this could be something like reviewing a pull request deploy or developing features manually performing quality insurance of q a replicating a version of production for debugging creating a temporary environment to test the hypothesis so the idea is the context is what do you need to do review code develop feature q a all sorts of options there and those environments all need to be specialized for that context so developers have always been using contextbased developer workflows though cloud developer environments cdes makes that much easier to do and specifically for microservice or modern architectures which have many more iso repositories this is a big struggle for a lot of people that are doing microservices as just managing all the repositories whether they have one big monolith or not but again cloud developer environments make it so much easier to jump into those projects so cloud developer environments become part of the workflow developers can quickly and safely switch contexts so i just kind of want to add an additional illustration about you know if you're using uh cloud developer environments first versus using local developer environments how that might change uh the responsibility or the accessibility of your code so here you know the old way we would do it is we would launch i'm gonna get my pen tool out here we would launch a local developer environment we'd write our code and then we would create the repository locally and then push okay i know there's a spelling mistake there so just ignore that but now you know with cloud developer environments we create the empty repository first in github so it already is there then we launch our cloud developer environment and then we write code and from there we can actively commit our code and so the great thing about that is that when we take that approach like let's look at the old way if we were doing the old way some people will end up writing all this code and they just never push it to a repository remote repository they might have created a local repository but it's never made it online and so that means that there's a longer time before code can be collaborative or they have an opportunity where they might or an opportunity but there might be the misfortune that they lose that code and i can i can't tell you how many times that has happened or it's the weekend you want to pass that code off to somebody else but like oh it's on a machine i never pushed it but if you're using cloud developer environments it's already in online repository that is the starting point and that is the kind of behavior change that you have when you use cloud developer environments so there's a higher chance of collaboration and less chance of loss of code and that just makes it again easier to do this contextbased developer workflows and one context would be like starting a new project but there you go hey this is andrew brown and we are taking a look at visual studio code also known as vs code which is a free source code editor made by microsoft for windows linux and mac os if you're confused why it says source code editor that's just the language that microsoft uses but you can just say code editor and visual studio code should not be confused with visual studio which came before vs code and vs studio is an ide an integrated developer environment that's for doing more lowlevel stuff but anyway visual studio code has 14 million developers out of 24 million developers worldwide who use vs code making it the most popular source code editor today and if you wanted to do the math on that that's 58 percent market share so at least half of all developers are using vs code and the reason we're talking about vs code is because that is the primary editor that you will see when you launch up a git pod workspace so vs code is very popular due to being free powerful works on all hardware lots of courses orgs schools use vs code because it's available for everybody so there you go hey this is andrew brown and we are looking at the concept of docker so docker is a set of platform as a service products that use os level virtualization to deliver software in packages called containers so the reason we're talking about uh docker is because that is what uh getpod is using to run their environments you'll hear kubernetes as well but that's something that you don't necessarily have to touch but docker containers is something that you might encounter okay so docker was the earliest popularized open source container platform so when people think of containers they generally think of docker and we said it's platform as a service product so there's more than one thing just called docker so we have the docker cli so these are cli commands to download upload build run and debug containers we have a docker file so a configuration following how to provision a container docker compose this is a tool and configuration file when working with multiple containers and that's something you may encounter uh with some like quick start templates and things like that docker swarm an orchestration tool for managing deployed multicontainer architectures that is not something that you have to worry about um then you have docker hub a public online repository for containers published by the community for download so this is going to be a place where you source containers and we definitely source things from docker hub using git pod and then there's the concept of oci the open container initiative because i saw this term and it just pops up everywhere you're wondering like what is oci compliant what does that mean so open container initiative is an open governance structure for creating open industry standards around container formats and runtime so docker established the oci and it is now maintained by the linux foundation and so docker has been losing favor with developers due to the handling of introducing a paid open source model and alternatives like podman are growing but that doesn't mean don't use docker that just means like at scale you know some companies like larger companies are looking at alternatives but these alternatives are oci compliant right like pod men and things like that but i just wanted to point that out because you know docker can be a bit contentious in the open source space but it still is really good and solid and that is what git pod is using okay hey this is andrew brown and we are taking a look at version control systems also known as vcs so these systems are designed to track changes or revisions to your code and the most popular vcs is git so vcs can also refer to managed cloud services that host vcs so this is why this term is a bit confusing because really it means git but a lot of times we are talking about get providers and so get pod integrates with the following git providers the first is github so this is owned by microsoft it's the most popular vcs offering due to its ease of use and being around the longest github is primarily where open source projects are hosted and offer rich functionalities such as issue tracking automation pipelines and a host of other features before github everybody would put their stuff on sourceforge but sourceforge was very slow i think it was svnbased and it had a lot of ads and so when github came out it was extremely popular because you could put repos there for free and had really strong collaboration tools then came along git lab so this was an emerging competitor to github and at the time had unique features such as ci cd pipeline improved security measures i still think it's easier to get a lot of things set up in gitlab it takes care of that stuff for you but github has caught up with a lot of stuff like github actions and and things like that so they're pretty much on par now then there's also bitbucket this is owned by elazian and it was originally only used for mercurial so mercurial was a competitor to get but git became so popular that bitbucket added git and then mercurial became so uh unpopular not that it's bad but just wasn't as popular as get that they uh stopped supporting mercurial so uh bitbucket has tight integration with atlatian's industry standard agile project management software called jira and so if you ever end up working for a large organization they're very likely to be using jira and because they're using jira they're very likely to be using bitbucket because there's tight integrations between it it's just so much easier so those are um you know the git providers hey this is andrew brown and we are taking a look at version control system permissions and to understand that we need to know what oauth 2.0 is so oauth 2.0 is an industry standard protocol for authorization and the idea here is oauth doesn't share password data but instead uses authorization tokens to prove an identity between consumers and service providers so oauth is about granting access to functionality as opposed to something like open id which is about providing who you are but the only thing i really want you to know is that it uses oauth and that's where these fine grain permissions are going to get set and that's how it works for uh get pod because you connect your uh your your version control system and then you you as the user are going to decide uh what you want to set there so within your get providers you can see they're connected so there's my username there are my permissions and if you expand it you'll see all the options there and it's going to vary based on the provider so the idea here is that for github we have user email read user public repo repo read org and workflow um so just understand that that's going to be slightly different for all the providers and the key thing to remember is the fact that uh get pod is not responsible for these permissions it's on the get provider and the user okay hey this is andrew brown and we are taking a look at the git pod editor support so get pod is designed to be a provider agnostic cloud developer environment and one way we see that is the fact that it supports integrations for a bunch of different git providers but another way that it's agnostic is by having support for more than one editor and so gitpod currently supports three types of editors so we have vs code browser so a editor within the browser and this is the default experience desktop vs code so opening a workspace in local vs code so a desktop application and jetbrain so a paid ide that extends uh the eclipse ide so if you ever use eclipse you kind of have an idea what jetbrains is there so what we'll do is investigate all these three types here but the key thing to remember is that gitpod supports uh multiple types of editors and i think they'll just keep on expanding that because that is their goal okay hey this is andrew brown and we are taking a look at jetbrains and before we can talk about that we need to know what is eclipse so eclipse is a free and open source id created by ibm originally intended for java through open source projects have expanded to a variety of languages so i think ibm authored it and it's been managed by an open source group now i remember using jetbrains back in like 2001 specifically for java so it's very interesting to see that it's been around for so long and it's still super powerful but then there came along jetbrains and jetbrains is a company specializing in creating paid id so it's proprietary or an extension of eclipse and so they just make the uh the eclipse experience way way way better so they use the same code base at least at one point they did um but they have grant greatly expanded that feature set around specific programming languages this brain is easier more productive more convenient to use in eclipse just brains was formerly known as intellij and if intellij sounds familiar it's because it kind of sounds like intellisense which is this whole kind of autocompletion thing so notice here as they're typing and there's this auto completion thing that was something i think that was invented by microsoft originally or at least they uh branded the idea of intellisense but this was a big selling point where you'd be able to type and it would auto complete you could click through stuff now we're seeing that kind of everywhere like code editors have support for that through extensions but one at one point that was a big deal okay so jetbrains has a variety of ids specialized for different languages or frameworks so let's just go through the list we have phpstorm which is for php lang for uh go land for go the go language uh intellij idea or idea which is for java data grip which is for sql or databases in general pycharm for python ruby mine for ruby webstorm for javascript c line for c and c plus plus writer for net and this isn't the full list i know they have something for developing ios applications and something for data science other things like that but the reason i'm listing these ones out for you is because these are all uh in the scope of what um git pod is trying to have support for now what's interesting is a thing called jetbrains projector and this is a tool that allows you to run jetbrains id within a browser i don't particularly know if gitpod is using that and that's how you integrate with it because i just haven't uh given jetbrains with vs code a go but i just want to say gitpod allows you to integrate with jetbrains to use it as your gitpod workspace editor there's an asterisk there because at the time of right now it's in beta and some of these are coming soon so these are all on the roadmap and so i just want you to be knowing about this because probably in the future these will be available to you okay hey this is andrew brown and i was saying that there is uh support for gitpod to use your desktop version of vs code so you can open git pod workspace in your local vs code if you open up either file or go to the get pod command palette you should see an option that says open a vs code there's also this option says open in vs code insiders and insiders is just the vs code unstable release version so it's like the latest version but you might not want to be using it unless you're like they'd like to have the latest features but you don't mind if there's bugs or things like that so some vs code extensions do not work in the browser so opening in local vs code may give you a better developer experience um and you know you know some people prefer desktop apps so that could be a reason there but i ran into an edge case with my cofounder where they use ubuntu and they could not use the vs code vim extension the browsers uh specifically on their linux laptop right so in this case they had to launch in local vs code and then they were able to use it so it was interesting to see that edge case but it seems like you know a lot's not the support on mac or windows so there that could just happen okay and also when i was using this on my windows machine where i'm using windows subsystem linux it actually prompted me to install a bunch of things like uh docker and kubernetes and things like that where is on my mac it didn't ask for any of these things so it's possible that you have to have docker and salt which would make sense because um it is running containers so there'd have to be some way for it to do it uh and one thing i noticed is that you cannot open a shared running workspace that has been shared with you so only the owner can open that workspace locally so that's just a thing there and i think i repeated a couple times in the course okay hey this is andrew brown and we are taking a look at the get pod browser extension and this provides a convenience button within the version control hosting provider and this button prepends the gitpod url prefix to the current url and this gitpod browser extension is available for firefox chrome microsoft edge and brave and so it's important that you remember that because i will ask you on the exam which browsers it's for so just to kind of show you what that convenience button looks like in the different providers here is github and there is the button here is bitbucket and there is the button here is git lab and there is the button so nothing super complicated here but it's a lot easier than having to remember to type in the git pod url so it'll definitely save you some time okay hey this is andrew brown and we're taking a look at git pod browser bookmarklet so what is a browser bookmarklet well it is a browser bookmark but instead of pointing to a url it executes arbitrary javascript code and so the idea is that transform is a bookmark into kind of a smart bookmark so you'd have this javascript code which we get from the gitpod website you'd place it in the url box when you make your bookmark and then when you click that button it would work just like pressing that gitpod button assuming you were on a particular page like a gitlab or github page so the get pod browser bookmarklet when clicked will open in the current github gitlab bitbucket just what i just said there a moment ago and the reason for it is that it acts as an alternative to the browser extension for when the browser extension is not present for specific web browsers so i didn't test it but i assume that it's not for safari because safari is not a chromiumbased browser probably opera as well would be in that category there could be cases where you have computer workstations that does not allow the installation of browser extensions because you know some organizations they have a bunch of computers and every time you shut them down they always boot up a fresh image so you lose your extensions or they just they don't allow you to install extensions uh as a as a security measure so that you know people are installing malware in their browser or it could be that developers are extending the launch behavior for more intelligent action so you could probably take that javascript code and add some extra stuff in there maybe you want to um put in some environment variables and so that gives you a bit more flexibility over the get pod button but there you go hey this is andrew brown and what we're going to do here is look at git lab integration so what i'm going to do is create myself a new gitlab account so in the top right corner we have get free trial i kind of swore they used to have a free account here so i'm going to do is double check here and yes they do have one so i'm going to say free and here we have two options where we have git lab sas or get lab self managed so sas is the one we want that's going to be just like when you utilize github so we'll go here and click sign up for free and i'm just going to fill in my name so we got andrew brown and we'll just say exam pro co exam pro co and then we need a password so i'm going to generate out a password uh here paste that in and before we proceed here i'm just going to save this to my password manager to save myself some trouble so just give me a second here so get lab.com exam pro co i'm gonna put that password in there okay and hopefully it will take it i am definitely not a robot at least i don't think i am you know there's a bunch of options down here but i'm going to just keep it simple by using email we're going to go ahead and hit register so now it wants me to confirm my email so i'm just going to open a new tab off screen here i'm going to make my way over to my email i'm going to try to do this as quick as i can here and so i have a confirmation email here from git lab okay so here it is and i'm going to go ahead and get click confirm your account and so here it's confirming my account and we will just expand that here and so here it says your email address has been successfully confirmed please sign in and so what i'll do is grab my password here so i'm going to copy my password in here paste it on in sign in and it's going to ask me some information i'm just going to say continue who will you be using this for the time being it'll just be me okay because it looks like i guess there's some few different options here i don't need to opt anything would you like to create a project join a project we'll just say create new project and i guess we need an organization name so this is really just for git pods i'm just going to say exam pro exam pro co and we're going to write git pod because i'm going to be doing a bunch of repos here and i figured we could do that the group and any public projects can be viewed without any authentication so we'll say create group because we'll make it public facing and so now we have an opportunity to create a project this is a quite the lengthy setup but i'm going to make this public here and what we're going to say here is uh gitpod hello world as an example here and i'm going to go ahead and create this and we'll just give it a moment to set up okay and so it's all set up so we'll say okay let's go so now that is there the next thing i want to do here is connect uh to gitpod so what i'm looking for here um is a button for the github project i mean i guess this is the project here so this is not necessarily repos so just give me a moment here and i'll think about what i need to do okay all right so i'm back and i was just kind of looking around at what there is to do here so what i want to go do is create a new repository and so we'll click that there and then from here we have an option over here repositories on the left hand side so um let's go here and click on repository and so now i'm over here and you can see there's initial commit um by a fellow here i assume he works at get pod so senior product uh a designer for growth at gitlab um there and so here we can see that repository it's been unusual that it's like a commit uh on the behalf of somebody else but that's totally fine uh but the great thing is we have our get pod button you will not have this unless you have that stuff installed i also noticed like web ide here never looked at that so i'm just kind of curious what's going to open up here i'm just curious because it's like you know there's git pods so i'm just wondering if git lab had their own offering um so i can go here and it's pretty simplistic so it's not really like a full fullblown developer environment i was just really curious but what we'll do is go back over to our hello world project i'm just gonna go back here because maybe there was two here so let me click into gitlab is that the one we were looking at yeah so that was the one that we saw here and then here is the public one that i made it's a little bit confusing again i don't use git lab on a daytoday basis so i'm just kind of learning uh just like you are here but i guess if we click the icon at the top we can start seeing the projects more clearly and so this is the one that i created that i care about this is new i don't know what this uh this is i guess this is created by default for you um and so we'll go over to uh repository it's not really showing me a lot of information because usually like github will set something up for you so what i'm going to do is just add a new file so let's just say add a readme file okay and we'll just say hello world we'll go ahead and commit that and we'll just say commit and so now what i'm hoping is if we go back to um our project here we'll get something that looks a little bit more normal okay yeah and so there we go so just we had to get that initial file in there and so now we have that opportunity to use git pod of course you'll need the browser extension for that installed if you don't we're going to just do it the oldfashioned way so i'm going to go up here in the top type in http colon slash get pod uh dot io for slash pound okay and that will open up that environment for us notice that i don't have a getpod account here as of yet so what i'm going to do here is say continue with gitlab just because that's what we're using right now and here it's going to allow us to authorize so we're going to say authorize and we'll just give it a moment to check out that repository but essentially when we did that when we authorized that that should have created a new account for us and so here is um our project here which is all great and so essentially what you'd want to do is kind of set up your environment so i really don't like the look of this it's kind of hard on my eyes so i'm going to go down to the bottom left corner we're going to go to color theme and i'm going to just switch to something that is dark so we'll say um actually i like monica quite a bit so i'm going to go to that like in terms of the editor or the coloring there and so we have this open and if we just want to kind of set up a new file here i'm just going to go getpod.yaml okay and we'll just set up something initially so we have tasks and i'm assuming that's how we do it just trying to do for memory so we have name we're going to say hello world okay and then from there we'll just hit space base and it's the command that we want and i'm just going to say echo actually we don't have to put double quotations there we'll say echo hello world and i don't think we need exclamations exclamations here i'm having a bit of trouble because i keep on thinking this is a vim keyboard so one thing i want to go do is go install the vim the vim hotkey here so we'll go vim uh vimvs code it's this one that i want to install so we'll say install here okay and we'll go back and so now that works as normal as i would expect it to and so i believe that this is uh correct with the exception that we just should have a colon here and what i want to do is just go ahead and commit this so we'll go back here and i'll just say uh hello world commit okay and we will add that file and we will hit commit we'll sync those changes we'll say ok and so now if we go back to our original tab here and we just give this a refresh we should now see in a repository this new commit but what i want to find out is will this change uh take effect so you know we can just close this tab i just want to show you like if you have uh get pod gamble open and you're always trying to figure out how to make your way back um and by the way i might just bump up the font here i don't know if this is gonna work let's just see if i can do that um here it's not really bumping so sorry everything's gonna be really small what we can do is go down to the command palette here and if we want to get back to this repository quickly we can just go to open context and that's always going to bring us back here to the project or repository in git lab but what i'm really interested in is actually going over to getpodio because whether or not you notice you actually created an account so if we were to go over to the dashboard this would open opens and up us up to the getpod.io and so now you can see we have a new account if i go over here and we go to settings you can see that for integrations i have git lab and this is where our permissions live so we go here and if we want to change these we can go ahead and just change those things but the goal is we're going to hook up github and bitbocket just so that we can see what they all look like but just to kind of complete what we're doing with this project here what i'm going to do is i'm just going to go ahead just close this tab here and close that out and i'm going to go back here and i'm just going to go and type this in again okay so let's say https colon forward slash sport slash gitpod.io pound and from there it says invalid git pod yaml should be an object so clearly i've made a mistake so we'll say continue with the default configuration actually that's the first time i've made a mistake with a github configuration file and i think it's just because i created from scratch normally i go out and i find a reference but that's not what i did here so if this is a problem what i'm going to do is just cut that out and we're going to open up a new terminal and i'm just going to delete this file here okay and instead we're going to just do a gp init to initialize a new file so i'm not exactly sure what i did wrong there i'm just going to paste that back in because it looks correct to me oh it's because i did that okay so that's what i really wanted to do but i'm just going to go ahead and do that we'll get rid of these ports and we'll just say okay let's fix this get pod the ammo file okay we'll sync those changes we'll say okay all right and so from there what we can do is go back to our project so i click back on the git pod yaml down below opened in the dashboard oops uh you know what i want to go to open in the context here and then we'll close our old tab and again we're just going to go and type it in here i will start using the get pod button here but i just kind of want to keep doing this so you kind of see what it is that we're typing so that you know it just becomes kind of muscle memory for you okay so what i'm expecting this time is for our command to work and if that's great what we'll do is proceed onto github and bitbucket and get that all connected into a single account okay so it's just loading up here and our echo works so this is all in good shape okay so uh this is good so i'm just going to go back to our context i'm just going to close back out the old one and so that's pretty much it that we need to know for git lab again it's not super complicated but let's take a look at how we do it for github and bitbucket next okay hey this is andrew brown and we are on bitbucket so we'll go ahead and create ourselves a new account here because it's good to learn all three providers um because there's a high chance that you'll end up using one of each at some point so here it suggested we want to add jira i'm good i'm just going to hit next and i probably already have a bitbucket account because i have jira not necessarily a separate bitbucket account here but we'll see what happens if we try to sign up so it says i already have an account which is totally fine i'm going to log in here it's not like a lot that you're missing here in terms of the setup process you know all these things are the same right you sign up they send a confirmation email here it's going to ask me for a um a username so i'm going to say exam pro co and we'll see if it takes that and it does so we're all good here and we're going to come in here and see what we have so before you drop in a bit bucket tell us some stuff i want to skip this i don't care about any of that kind of stuff and let's see if i have any repositories in here and i have one for the lithium js is a to do again that's coming from jira but we don't actually have any repositories so let's go ahead and set up a new one here and so what we'll do is create a new project so the project name is going to be called get pod hello world and oh this again this is maybe exam pro co get pod and then the repository will be uh get pod hello world and we can make it public or private it doesn't matter i'm going to leave this one private in this case do we want to read me sounds great what do you want the main branch to be called we'll call it main include a git ignore file sure why not and we'll go ahead and create this repository so we are here and notice in the top right corner there is our get pod button and again i'm not going to click it for the time being i just want to keep doing this at the top here so that again it becomes muscle memory for you to know what to type just so it's there but what we can do is go to the top here and type in https colon forward slash forward slash get pod dot io forward slash pound and hit enter it says authorize with bitbucket.org so it already knows that we're logged in with our github account this is something to be careful because you want to make sure they're all connected to the same account or you'll end up with multiple accounts which might be annoying so i'm going to say authorize with bitbucket.org here it's going to ask me a bunch of options i'm fine with all this we're going to say grant access okay and we'll give it a moment to start this environment so you can see that public repos private repos the process is very similar sometimes you just have to grant access to be able to do things and we'll just wait here for this environment to set up there we go and so here it is same experience everything's the same and i think i learned my lesson from last time and so when i opened up this terminal i'm just going to create a gitpod file there and while i'm here what i'm going to do is i'm just going to bump up my font because it might be a little bit hard for you to see and so i'm just going to bump this up to like 22. okay while i'm here i'm gonna change this to two okay and what we'll do is just go ahead and close that and so now i'll type in get gp init all right and so we'll get that down here this is still really small that's kind of bothering me so i'm going to go down below go to settings and um i'm looking for terminal editor font size we have text editor font size terminal maybe there we go that's a lot better okay and so uh from here we can just do the same thing so i'll go ahead and delete this out we'll change this over to um hello world and then down below this will be hello world here as well and as per usual go to the lefthand side here and i'm going to just go ahead and add that file and say uh add a knit uh get pod file and we will commit that to our repos repo save the changes and as it's going we'll go down below again clicking on this get pod button here and we'll open the context to see that commit there and so there it is there and again there's really no easy way to like like to completely terminate a workspace and reopen it you can stop a workspace so down below we have the command palette here but also in the top left corner you can go here and we have similar commands i'm probably going to keep going up here now because this is a lot shorter but if you stop it that's not sufficient enough because we want to terminate and start a new one in order to iterate on this git pod yaml file so what i'll do is i'll go ahead and close this tab out and i'm going to go to the top here again type it in so it's http colon s colon colon get pod dot io colon colon forward slash forward slash what am i talking about and we'll hit enter here and so you know again it should just work as per usual so we'll just give it a moment there to spin up and just make sure that is working correctly and there it is so there you go that's working fine oh it says command not found so clearly i've made a mistake if i go back here um i think it's because i'm using single quotes instead of double quotes okay but that doesn't really matter per se but i'll go ahead and fix that so change quotes from single to double okay but what i want to do is go ahead and check the dashboard here so we'll go there and from here i'm going to go to my settings and we'll take a look here again at integrations and we'll just see like there are clearly different um settings or permissions uh per one here okay so just understand that it's not one to one across them it's going to be really dependent on the get provider so yeah i guess that's uh two out of three and so the next video we'll go look at github okay all right so now we're on the github website to sign up for our last get provider that is currently supported uh with gitpod and so in the top right corner i'm going to go to sign in because i already have an account and i do have one with the android exam pro co but interestingly enough i never use this account because i have an older one but that is totally fine so what i'm going to do is just go ahead and grab the password for this and we're just going to go paste that in there whoops we'll try that one more time here okay i must have grabbed the wrong password that's totally fine we'll sign in oh it's not giving me anything today we'll try this one more time there we go okay so it was a bit tricky but i'm in there and you can see i already have a follower even though i don't know why they're following me but that's totally cool and apparently i have a very simple example over here python docs hello world so not a lot going on in this account which is totally fine so what i want to do is create myself a new repository and by the way if you're creating account for the first time it'll probably ask you a bunch of extra things to ask you know so you know whatever whatever is going to be there that's fine and i guess my username is exam pro hyphen dev so that's probably what i called it when i first created this account and so we're just going to say git pod um hello uh world as per usual let's make this one private um and we'll go ahead and add a git number file and we'll say readme file down below and it's private so i shouldn't have to choose a license but we can go here and just choose none oh it really wants me to choose one here oh for ignore okay so like ruby ah we'll just ignore it we don't need one that's fine we're not doing anything serious here and so now that we have it open again i know that button's there but we'll come to it soon enough so i'm just going to type in https forward slash forward slash get pod io forward slash pound enter and here it says something went wrong and it just means that you have yet to connect that account so we'll go ahead and say authorize probably not the best wording but that's just what it is and you'll notice that github has like the most robust permissions out of all the three you can drop down here and have a lot of options i'm going to say authorize get pod i o okay it's going to say repository not found it might be private so please authorize get pod access so again uh nope it's not a bug it's just you got to go ahead and hit grant access and so it says okay what kind of accesses do you want to give it we'll say authorized goodpodio and so what we'll do here is just open up the dashboards on the top left corner we're going to say open dashboard and we'll make our way over to settings i just want to show you again the integration so this is what it looks like for github this is what it looks like for um bitbucket this is what it looks like for gitlab so you can just see it's slightly different for each one um and same routine here what i'm curious to see if if it's preserved my font size and it totally did i think this is all happening with sync settings so down below see where it says settings sync is on so this is on by default and that's what's causing all these settings to remain available if we turned it off i think it'd probably end up resetting i feel no reason to turn off settings links to show that so we'll just leave it as is but what i'm going to do again is open up a new terminal so in the top left corner we're going to terminal new terminal and we'll go ahead and type in uh get pod so gp and type in init i'll open up that new file there and we'll just go ahead and delete that out as per usual and we'll say hello world and it's interesting this has single quotes so it should have worked for the other one i'm surprised it didn't work and it was double quotes but we'll try with single quotes again we'll go back over here we'll add that file we'll say uh add a net gitpod.yaml file okay and we will hit changes sync the changes we'll say okay open the context so here we'll say open context and so there is that gitpod gamma file updated so that's pretty straightforward for integrations um and so i think the next thing i would like to do is to show you how to install the bookmark extension and how to use the bookmarklet so i'm not going to close all this stuff i'll close this tab here we don't need that and from here i'm just going to go to my chrome extensions okay so we'll say chrome extensions and i'm just going to uninstall it so here i have git plot i'm just going to remove it okay and we'll go back here and so now we don't have that button whoops uh let's refresh that one more time yep so that button is gone and so i'll show you how to install the extension next okay hey this is andrew brown and welcome back to another follow along here and in this case what we're going to do is set up the browser extension so what i'm going to do is make a new tab here we're going to go get pod i o i'm going to type in browser extension and so from here we'll go to this page here it's under the documentation under here and so if we scroll on down we can see that we have support for chrome and firefox and we probably should try out another browser but we'll just do this for chrome for the time being and i'm just going to go ahead and add to chrome we'll say add extension okay and so already in the top here it seems like it's uh turned on up here and so if you want to know where that is we type in chrome forward slash sports extensions and here is where you can see it go to details i don't think there's anything interesting here but you can see there is some white listed stuff here sometimes extensions have additional options down below but nothing uh super exciting here so we'll just go ahead and close that and so now what we have is this nice button oh sorry i got a refresh wrong button sorry and so again uh we can hit the get pod button and so that's just going to save us the trouble of having to type in git pod i o i don't know if you saw it but i'll close it again but watch here very closely and click it and notice it not bash hello world available be found and i'm not sure why we're getting that there must be something wrong here it had the single quotes oh because this is not name okay that's our problem so i kept on having that init there and it was actually trying to run it as a command so that makes sense we'll say fix init commit or fix uh name of task there and we'll commit that and so now i can just close that tab out and from there i can just hit the button again and that's a lot nicer because you know every time you type it in at the top it overrides that page where if you click that button opens in a new tab and that is a lot nicer oh and by the way i didn't want to open a running workspace i want to hit that button and create a new workspace okay because we want to see if that git pod yaml uh will work this time around so we'll give it a moment here and we can see there it is it's still saying that do not commit that file still says init okay we'll save that maybe i did not commit it fix name of task add that again we will save that we will sync those changes we will go ahead and close that tab we'll hit the button again and now we have two of those environments so you can only run so many environments in parallel and for the free tier which i believe that we are on we're going to hit that limit very soon if we keep doing that but again those environments will shut down after three minutes if you want them to shut down right away um you can go into your workspace and terminate them i don't think there's an option to terminate from here there's only the option to stop right which i think they should have a terminate button but um you know that might be something in the future and so here it's did is this not updating am i crazy did i did i not launch a new one so i'm going to go here and refresh this page it's still saying that okay what am i doing wrong here so we go here name save right we go over here on the right hand side we're going to add it i'm going to see what's been changed init to name right and we'll just say fixed name task and i want to commit i'm going to go back here refresh and there are no stage changes commit if this happens because usually there's a sync button i press it right away so i'm just going to do git status here um get push maybe okay there we go so usually you hit that sync button i'm so used to clicking it so fast but just make sure that you push it and then we'll go back here give this a refresh okay i must have not been pressing that sync button if i go back to that video i never knew what that that prompt was i assumed it was like push or pull but if that doesn't work for you just do the push there and now i'm very confident if we open this up it's going to have the behavior that we want okay so we'll just give it a moment here and there we go okay so just be uh be wary of that i'm just going to want to see if that actually prompts let me say hello world again we're going to add that and just say miner change and we'll save that yeah sync changes so you really have to press that so this action will pull and uh push and pull requests two bits from origin so say okay and so that's probably what i wasn't doing um but yeah so we saw for chrome now let's go take a look at firefox i'll be back here in a second all right so i've opened up firefox which is a different kind of browser and what i'm going to do is go ahead and sign into my github here so what we'll do is just um type in the username here is exam pro dev and then i'll just put the password in there we'll sign in and i do not need that saved there so we'll go into here and so notice we don't have that button so on the gitpod website we go to docs and on the left hand side we are looking for configure or maybe it's getting started oh integration sorry and then under here we'll go to browser extension and from there we'll click firefox and we'll add that extension we'll say add and so now that extension is available so we'll say okay so let's go ahead and close that tab i'm not sure what happens if we click here so firefox prevented the site from opening a popup we'll say options and say allow popups for git pod podio and so it brings you to the login page which is nice but what i'm going to do is just close out these tabs here and our button now up here so we'll go ahead and hit click get pod and so we have the option so how do you want to log in we're going to say github and we'll just see what this looks like i'm not going to be doing everything in chrome but i just want to show you uh you know that experience okay so there we go so we have hello world which is uh very good same experience right it's not going to be anything different um you know it's just a different browser um and so you know i just want to point out that this will work in other ones as well so maybe we'll take a look at microsoft edge next okay all right so now i have microsoft edge installed this is the i don't know if it's still the default browser but it's the browser made by microsoft and it's a chromiumbased browser so this extension work with anything like chrome microsoft edge brave anything it's chromium based um and so what we'll do is go ahead and sign into our github account so we'll go here and we'll just type in example dev because we just want to see if the experience is slightly different and then from here we'll just type in get pod io and from there we'll go to docs and we'll go to integrations and since we know that it's a chromium chromium browser i'm assuming that if we go here it should work so it says you can now add extensions from the the chrome web store to microsoft edge which sounds really great and so i go down below here and i'm just looking for um a place to add i don't see a button here so allow extensions from other stores microsoft does not verify extensions install from third party stores to get um extensions verified go to microsoft edge addons so let's go check out the addons because this is the chrome store and i'm sure it will work from here but i'm just curious if it's in here because it seems like if this is the official way maybe we should go here and see there so let's say git pod dot io and so i don't see it in here and so if git pod if you're watching maybe you might want to get this in here and i'm assuming this is um extensions because i see grammarly in here okay but let's go ahead and just say allow extensions from other stores so it's permitted and so now we can say add to chrome we're technically not using chrome we're using microsoft edge and so now we have that button there notice that we actually get a button whereas in chrome we don't if we do that brings us just like how firefox does and so what i want to do here let's see if it's the same thing chrome uh extensions does that work ah it's edge extensions which is fine so here you can see it we turn on and off look at the details very similar but we'll go back over here and i want to go to get pod hello world and we'll click on git pod and we'll have to log in with github same story you know and sure we'll launch the existing workspace no reason to launch a new one this one will launch really fast because of it and it's the same experience so yeah i mean we could look at brave as well but i think the process is going to be the same brave is just another browser um that we can utilize okay but there you go okay i decided to do brave just for fun and so here i have the brave browser open and we're going to make our way over to github and just see what we can do here and see if the process is any different i'm sure it's the same it'll be super unexciting but let's do it anyway okay so we'll say exam pro dev we'll go ahead and paste that on in there and so from here we can go to our repository oh and we need the extension right so we'll type in git pod io and from here we'll go to whoops docs integrations browser extension and we will click chrome because it's a chrome based one i don't know if like brave has like brave addons like their own extension store maybe um we'll go to extensions here so maybe go to the web store here and it just goes to google chrome so that tells us that you know they don't have their own store like microsoft does here or addon place you know we'll just say add to brave we'll say add extension there it is looks the same we'll go ahead and see if that button exists there we'll refresh we'll hit get pod here we'll say github again we'll continue with the same workspace so it just runs a bit faster and there we go so we've launched it in chrome within firefox edge and brave um i don't have safari on this computer but can we do safari on windows safari windows right i think there is one so if there is we'll give it a try but i mean we pretty much exhausted all the browsers here so you know if there's safari and i can install it here i'll the next video will be seeing if we can install with safari okay okay i'm back and um i was thinking about using safari but we can't install it on windows anymore and it'd be too hard to record on my uh my mac computer so what i'm going to do is just use opera instead and opera has been a browser for a very long time i'm not sure what they've been doing with it but i have a strong feeling that we will not be able to install the chrome the chromium extension on opera unless it actually is using chrome underneath but let's go find out so the first thing is let's just go to get podio okay and we'll first see if it we install that chrome extension and then we'll go log into our github as per usual so we'll go to docs we'll go to integrations and from here we'll go to extension and i think that it won't work here so we go to chrome oh is is opera is opera a chromium browser let's go ad extension see i didn't think it was based off of chrome well that messes up my whole example and git pod you're going to have to say that it works with us and other chromium browsers so i guess they kind of got all those edge cases i was hoping to find one that's not chromium based and so now i really think that i really do have to try it on safari to find out if there is a use case there so i guess if we go over to our github now i'm so disappointed that that that that actually worked okay um but we'll just type in exam pro dev we'll put the password in there and we'll go see that there's a button yeah the button's there great so what browser browser that is not chromiumbased uh windows is there anything see i don't know anymore like what's pale moon best browsers that are not based on chromium pale moon web browser never heard of this really film is an open source browser 2021 let's give it a try so what i'll do is i'll just be back here in a moment and we'll take a look at pale moon okay because i just want to see a browser that's not chromium okay all right so unfortunately github does not work with pale moon and neither does git pod and so unfortunately we can't use this cool new browser but we'll have to do is go back to opera and pretend that this extension never worked and that we have a reason to use the bookmarklet um and so what we'll do is just bookmark this here in the top right click here edit say launch and get pod and then we'll have to put that javascript here so we'll type in git pod bookmarklet all right and from here we have some javascript we'll go ahead and copy that make our way back here right click edit if it seems like i'm going fast it's because i've shot this video like four times and so i'm just hoping that it works smoothly this time around but so we have our button we'll go ahead and click the get pod it might prompt us if we need to authorize so just give it access if you do and as that launches i'm going to go ahead and copy this code so we can just take a look at it and so here we are i'm going to make a new file here but you can see that it worked no problem right um but i just kind of want to show you the javascript because it's really really simple like you know it's just looking or you get lab github get bucket and then open this thing and so if we want to extend this this is just javascript you can do whatever you want with it so if we want to do something fun like get pod and vars we can actually embed environment variables into our url so down below here we kind of have the syntax here for doing that okay and so i pretty much how that knows how that works so we would just type in something like my env equals production or maybe development that make more sense we'd have a forward slash because that's how it works and we go ahead and save that and then we would go ahead and copy that just make sure that's saved i'm going to close that environment close this one we're going to right click edit and just paste in the new contents i'm going to make sure that that is there so i don't have to triple check and so we'll hit save and now if we launch gitpod that environment variable should get passed along so it's just like a kind of cool way to modify it there's probably more interesting things that we could do so you could technically maybe write your own contexts if you wanted to um but of course get pot only supports particular context so let's see if our environment variable shows up here so we'll just type in grep my env grep is just a way of searching okay and there it is we could type in echo and type in my env and there it is so there you go that is the bookmarklet for when you cannot install chrome extensions whether your browser does not support it or whether your admins have locked down your browser because it's a workstation or what have you but there you go hey this is andrew brown and we are taking a look at git pod configuration files and so this allows you to configure a workspace and so we say workspace we're saying configure a developer environment when it firsts launch so the gitpod configuration file is a yaml file that must be named period get pod period yaml so the period or dot that's in the front there tells linux that it's a hidden or secret file and that's not so important but what's important is that you remember to have that dot or period in the front and it needs to be present at the root of your git repository you can only have a single git pod yaml file so you can't make a bunch of folders and then uh put a bunch in there thinking you're going to customize all those folders it's just a single one and so here's an example of a gitpod configuration file we're going to see a lot of different kinds throughout this course but this is a very simple one where it's installing dependencies using yarn for javascript it's opening up port 8000 and then it's going to allow us to view the website inline in the code editor so the following can be defined in the gitpod configuration file and so we're going to go look at a quick list of the configuration options and then we'll deep dive in upcoming videos on all these options so the first is checkout location so where gitpod checks out the project's code which will default to workspace git config so defining a workspace git configuration github.prebuilds configure the gitpod github app specifically for continuous prebuilt and you can do prebuilds with gitlab and bitbucket it's just that github has some additional options here we have image so define custom docker image this defaults to gitpod forward slash workspace full we have ports so define ports exposed for public access tasks so define a list of terminal windows to be open and associated scripts to be run when launching a new workspace vs code.extensions a specified list of vs code extensions to install when launching a new workspace workspace location so which path gitpod considers the project's workspace default directory and this will default to workspace i could really use a comma oops i could really use a comma right here but yeah those are the settings and we will look at them in greater detail okay hey this is andrew brown and we're looking at how do we actually initialize a get pod configuration file so to initialize a git pod configuration file there are two approaches the first is very simple create a dot get pod yaml file from scratch and just start filling it in that's the way i generally do it but they do have this convenience um cli command called gpinit and this will generate a sample.gitpod.yaml file so this is what it looks like um i don't find this particularly useful but you know if you find this easier to do than right clicking and creating a file it's up to you but i just wanted to know that both options were available but in either case you need to commit this dot gitpod.yaml to your code base because um you know it's not going to stick around if you don't and we'll learn that as we look at the iterative workflow okay hey this is andrew brown and what we're going to do in this follow along is look at how to initialize a gitpod configuration file of course we have done this in a previous follow along but let's just do it again for good measure to make sure that we know how to do it so i'm going to go ahead and create a new repository i'm going to say git pod and i'm going to call this init so this will be to initialize a getpodconfiguration file and then from here we can make it public or private doesn't matter i'm going to make it um private and we'll go ahead and add a readme file and we'll create that repository so here is a repository and i have the chrome extension installed so i'll go ahead and hit the get pod button all right and so our workspace has started now so what i'm going to do is i'm going to open up terminal so i'll go file up here the hamburger menu i always say file but it's actually hamburger menu terminal new terminal and we'll give it a moment here to load and so we'll just type in gp init and so the gp init command is used for setting up an initial get pod file and that's all there really is to it again you can of course just right click and create that file you want and the key thing to remember is that you need that period in front of the uh get pod there for it to work um but you know we can go ahead and just save this file and commit it just say commit initialize a git pod yaml file and that's all there really is to it okay so just say okay and we'll go back here and just refresh here and we could launch this again just to see the results here but you know there's not much to here to see but just remember that's gp init so when you're developing your gitpod configuration file it is standard practice to keep terminating and launching new workspaces until you get your ideal configuration so let's kind of visualize what that workflow looks like so the idea is you're going to have this git pod yaml file you're going to either be creating it or modifying it and once you're happy with its current state you're going to go and commit that to your git repository once that is committed you're going to terminate the current workspace so that could just be uh telling it to uh delete or just closing out the tab and then you're going to launch a new workspace and you're going to observe the start task did it do what it was supposed to do we need to tweak it and if it is uh requires more tweaking we're gonna go back and modify our git pod yaml file again and go through this entire process until we're happy with it and then we can just start using our developer environment as expected but what i really want to know and this is what created a lot of confusion for me initially is that stopping and starting an existing workspace will not produce the desired results since the before and init commands for a star task will not be performed so there's an execution order there's three things it's um before init and command and so the only way to really make sure that your start tasks like to be able to debug them or or to develop on them is to always terminate and launch a new workspace okay hey this is andrew brown and in this follow along we're going to learn about how the iterative workflow works when you are trying to update your gitlab configuration file many times to get to the state that you want it to be in uh because there is some confusion between starting and stopping and terminating and i want to make that very clear so what we're going to do is create a new repository here we're going to call it get pod iterative workflow and i'm going to make it private for fun we're going to call it a readme file of course you can make it public but you know doesn't really matter i'm not going to launch gitpod right away i'm just going to go ahead and add a file just to save us a bit of time because you know there is the stopping and starting of those workspaces it takes time and i just want to set up one with uh tasks and we're going to just have a task for um each state so we're gonna we're gonna need it's before a knit and command and i'm just gonna do an echo in each of these ones okay so we'll do this init echo before all right so we have our three this should all be fine we'll go ahead and commit this file and now what i can do is start up this environment and i'll see you back here in a moment okay all right so after a short little wait there our environment has launched and notice that it's ran before a knit command so what is going to happen if we um stop this environment so over here we can do stop workspace and what we'll do is we'll see what runs here so just give it a second sometimes it takes a moment to kick in for uh it to stop so just wait and it looks like it's starting to do something there we go so it's going to stop sometimes when i stop it might say superficially like oh this workspace is gone so just don't worry about the getpod errors they're not always 100 percent accurate and they don't always happen but you know just have confidence of what you are doing so this is going to stop and once this is fully stopped um and that doesn't usually take that long we're going to start it up so i'll just wait here a moment so i can show you that i'll press the start button again so here we go and we'll go ahead and open this workspace again and i'll see you back in a moment when the environment has started up again okay all right so after a short little wait here it has launched again and notice that it's running the before and command so if we go back into here we have before init command so anytime you launch a a regular workspace it's always going to run uh before a net command for the first time but any restarts it's always going to run before and command and you're going to get used to this because when we start looking at the execution order steps between prebuilds and without prebuilds you're going to start to see this pattern but what i want to do now is just to completely terminate the environment and so you know if you want to terminate you can stop this current one if you're worried about lots of parallel environments running but what i normally do is i just go ahead and close the tab and in three minutes that environment will shut down on its own i don't know if gitpod really has an option for a terminating terminate i think you always have to stop at first so if i go here i can i can delete it okay so if i want to i can delete it here but again this is nothing i ever think about i just um close the tab and it goes away which is really nice but what we'll do is we'll launch a new environment so we'll just click the get pod button and see it thinks that this one's still running we're gonna ignore it hit the new workspace button okay and sometimes i forget what i'm doing and i might relaunch an existing workspace so you just have to be uh considerate and think about you know maybe i did this maybe i did that okay and so i'll see you back here when this is started okay all right welcome back so you can see in the case that we terminate it it runs before and it command all right and so this again is really important because if you are trying to develop this and you're doing multiple iterations you really want to know that in it's not going to run every single time so you really always always always want to just close the tab and then launch a new workspace okay and so you know hopefully that's clear and saves you some trouble so there you go so the most important part to a get pog configuration file in my opinion are the start tasks because these define a list of terminal windows to be open and associate scripts to be run when launching a new workspace so here is an example of and this is actually my marketing website uh of a git pocket configuration file and so what's happening here is we have three tasks defined we have one called html so that's going to be running or building out html files we have this next one here for generating out javascript and css and then it's going to continuously watch for changes and then we have a task that will serve the website so we can view it and then down below here we're opening up port 3000 and then we're going to open it in the browser so when you have that and uh you start up your workspace you're going to see these three tabs and notice that the names match so we have html js for css and serve and over here you can see that it is a running http server over here so a start task has the following properties you have a name so the name that will appear within the terminal as we can see there uh the before command so a command that will run once at the launch of a new workspace uh the init command a command to run once at the launch of new workspace expects to terminate and i ran out of room here but this one expects to terminate as well but we will repeat that multiple times in this course then we have the command command which is confusing to say when you say that out loud but that's what it's called and that runs at the launch of a new or existing workspace and can be continuously running so an example of here we have that hp server it of course continuously runs and then the npn run watch that is something that continuously runs then you have env so this allows you to set environment variables scoped for the task and we have the open mode so how the terminal window should be opened whether it's going to be tab after tab before split right split left okay hey this is andrew brown we are taking a look at executioner steps for tasks and so a task has three possible steps in its execution order uh and you could say steps so you could say command i'm going to call them steps because there is a a step called command and then i'm going to be saying command command that gets confusing but we have before init and command and so let's just kind of talk about their application so for before you're applying like configuration of the environment before init or command step runs and that will make sense when we start seeing like how these run with prebuilds or no prebuilds then we have a knit so for heavy configuration environments so compiling resources installing packages and then command so starting continuously running servers like a database or a web server if that doesn't make sense don't worry because we're going to look at these in a few different ways and i was very hard to kind of describe what these three boxes are but you know i think we'll just go through that iterative process and we will understand uh absolutely before the end of this course what goes in before a knit and command so there is no guarantee of the order of the execution uh for start tasks and so when i say that i don't mean that like there's a guarantee that it'll go before a knit or command but when you have a collection of those like more than one task there's no guarantee of that okay so you can have terminals depend on the completion of other commands via the sync await and sync done and we will definitely look at that in the course here uh there is a guarantee of the execution order as uh for before a net command for a task so for the individual execution of of this we just saw that will always be the same okay so the execution order varies in the case of when launching a new workspace without prebuilds and then when launching a new workspace with prebuilds and we will look at those right now okay hey this is andrew brown and what i want to do in this follow along is just to kind of look at a practical example of execution or steps so you can kind of understand the context of when you put something in the before the init and the command and it's not like a perfect science um and i think you just kind of have to figure your way through it and look at a lot of examples but i'm just trying to think of one where i know somebody is using um get pod in a more complex use case and one would be something like forum so i definitely know forum has a good pod gamble file i think i was saying to them earlier this week it was not working properly but they may have fixed it since then but we're not interested really whether or not it uh like the application works but more so the fact that how are they using it like those execution order steps so notice they have a docket.yaml file in a gitpoddocker file if you don't know what form is form is this platform that allows you to host your own um form essentially if you ever heard of like dev.t.o like this here um this is what this is so the great thing is we can go ahead and hit our git pod button and we'll just wait for this to spin up and then once it's there we'll see if it actually is working as expected if it doesn't it's fine but what we're really interested in is expecting that git pod yaml file okay all right so after waiting a little while here the environment has spun up and so what we'll do is just take a look at what is going on there's a lot of things popping up asking me to do stuff and so here we can see that we have two tabs on the right hand side so we have form server bash open site gp so what we'll do is go on the left hand side here and take a look at the get pod yaml file as soon as i can find it here um and if i can't find it that way we can just hit control p i believe and just type in dot get pod yaml okay this is not specific to git pod but this is just how vs code opens files anywhere so instead of me having to look through all these things i can just do that so that is the file that i'm interested in so we'll do is open it up and so here we can see that they are specifying a custom image which is totally fine it's not going to make this too confusing they have a lot of ports open so 3000 30 35 5432 that's for postgres i'm not sure what this is for this is for the ruby on rails web server this is for redis just because i know these port numbers i just don't know what this one's for so we'll go here and we have some tasks and the first thing they have for this task is the form server and they have a before and a knit and command and so in there before what they've decided to do is start up the redis server uh then they are doing an await port so they're waiting for 5432 to happen and then they're doing sleep i'm not sure what the sleep is for okay and so that means that um until port is open then proceed forward which is fine and i'm not i'm not sure what a single ampersand means unless i just remove that by accident i don't think i did so i'm kind of interested in what that does um again assuming that you know i didn't just introduce that mistake which i don't think i did and then we have this get pod init sh so they're running a initialization script so this could have a bunch of stuff in it let's just take a look there get pod init sh so here they are copying an environment variable installing a couple gems running been set up and that's kind of nice where it's like okay maybe you have a lot that you want to run here so you just abstract it out into there and then here they run the bin startup command okay and then down below they have open site so it looks like they just do this to force git pod to open it up and this is kind of nice i didn't know you could do this so i think when i did the follow along i had something a lot more complicated so i'm gonna have to go back and borrow that because that is definitely a lot easier all right so this one really just opens up the site and this one is doing this now what's interesting is that they started the redis server here because what they could have done is they could have just made a separate task here called redis server right and from here what they could have done is done this on the um like command step right and so that's what i would have done i would have said redis server and then if i had a ruby on rail server i would have done ruby on rails okay but that's not what they did so they decided to put in the before command and that's totally valid so that's just me trying to say like it's not a perfect science you have to decide if you want to put something in the before or if you want to make it a separate tab for me i prefer to break it all up into separate tabs and before is really designed for um you know like if you had to change ruby versions or things like that at least that's what i think it's for um but just understand that you know it's gonna vary for that kind of stuff and so you know hopefully that gives you kind of an idea for execution or steps we're gonna iterate on this quite a few times so uh we'll get it by the end of this course okay and by the way we are done here so we can just go ahead and close that tab i'm just gonna go back to my homepage there and we are done so let's take a look at the execution order steps when launching a new workspace without prebuilds and what's important here is that all steps will run within the current workspace so we've got before a knit and command so let's talk about what we're going to use these commands for so before is great when we want to customize the terminal install global dependencies and we expect the commands to terminate so an example here for the before would be something like rvm or nvm so you're switching to the ruby ruby version that you want to use or the javascript version that you want to use so that's kind of an example there and so for net we are downloading and installing dependencies compiling source code running your test suite and again we expect our commands to terminate so examples here would be bundle stall yarn install rake db create so what's happening here is we are installing ruby dependencies javascript dependencies creating our database for a ruby on rails application possibly and then we have our command so the idea here is you're going to start your continuous continuous running servers you're going to run your build scripts to build assets and this last command can be continuously running so here we are starting a rails server so hopefully that gives you an idea what's going on here but the reason why uh these ones have to terminate is because of prebuilds because these will get pushed onto prebuilds and you know you can't have something continuously running or the prebuild will never end but we'll talk about that in the next slide okay so now let's take a look at the execution order steps when we are launching a new workspace with prebuilds enabled so not all steps are executed in the new environment so on the left hand side it's going to look a little bit different we're going to have our prebuild environment which is only going to run the before and init then we're going to have the new workspace that's going to run the before and command and so the idea behind having this prebuilt environment at where it's running the before knit commands it's going to create a snapshot that will be then used later on when we launch our new workspace environment to reduce our boot time so looking at our previous script there we would do the before here so changing our ruby version and then here we would install our dependencies create our database and then down below in this new workspace this is when you start a new workspace with a prebuild it's going to run the before and command so just describing what we're doing with the new workspace here the developer saves time because they don't have to wait for the length of the inits compile independent libraries so that's just me redescribing what i just said here after talking about the reduced boot time so here we would do the before again and then we'd run our command so it's really important to think about the fact that these are isolate environments because as you develop your git pod configuration files you're going to have to realize that you know stuff is not going to carry over to the next workspace so if you do this rake db crate and it populates a bunch of data and you need that in your workspace it might not be there okay so or like if you cd into if you cd into a particular directory right um and you think that you're going to be seated in that directory when you're over here you might not be there so that's something that you'll have to play around with it's not too bad you start to get uh get the idea but i i had a script that i was using that was before prebuild and it worked fine and then when i moved to prebuild i had to take in consideration that these are isolate environments here and not everything carries over okay so there you go hey this is andrew brown and we are talking about git pod configuration files and specifically how to write multiline tasks so if you want to perform a series of commands within a task step there are several options available of course you can do it as one line and the way you would do it with one line is you'd have to use double ampersand i bet you could also probably use a a semicolon but double ampersand is probably going to be recommended if you're not familiar with double ampersand the idea is that if this command fails then it's not going to run the next command okay but if you wanted the next command to run i suppose you'd have to use a semicolon to denote the next line okay so if you want to do multiline what we can do is use this uh closing angle bracket and then followed by the next lines you're going to have to have double ampersand the reason why is that when you use this uh closing angle bracket it's going to take all these lines and it's going to remove all the new lines and treat it as a single line so it's pretty much like writing this but multiline okay and then we have this other one where we use a pipe and the pipe will add a new line so these will be sequentially um these will run sequentially in order and generally in this case you probably wouldn't use double ampersand because it's not going to play well with that new line and if you're wondering about this like angle bracket and pipe and you might think that it is actually get pod configuration file specific but it's actually just yaml's multiline syntax so if you investigate on how yaml multiline works that tells you what you can do here and there's actually more you can do um but you know i'm not going to show it to you here because it's just start we start to get in the weeds and it's not use cases that are useful but just understand that if you learn a bit more about yaml you'll learn uh how you'll have more flexibility with the git pod configuration file okay hey this is andrew brown and this follow along i want to show you about multiline strings within git pods so when you are creating tasks you can make your life a little bit easier so i'm going to do is go ahead and create a new repo here and we're going to call it get pod multiline and i will go ahead and make this a private repository and so from here we will go ahead and launch a new git pod and so i have this tab open here called yaml hyphen multiline info because i want you to understand that this multiline syntax is not specific to git pod but it is part of um it is part of yaml which is the language we use and so here on the left hand side we have an example where it says replace new lines with spaces keep new lines so this is the difference between the closing angled bracket and using a pipe okay so you know when we have a pipe it says keep new lines so every new line that you use will stay there replace new lines with spaces meaning that it'll be treated as one block of text so let's go take a look and it looks like our environment is ready i'm going to go ahead and open up a new terminal as per usual and we're going to run the git pod init command to initialize a new project so there of course are a few ways we can do this so the first is the fact that we can just have and we're going to keep playing with echoes because echoes are easy but we could say like hello and then ampersand ampersand world so this is a linux thing the double ampersand and what it means is it says oh nice it actually shows up here so get fig a shell came in oh you know what it's actually out of completing this but double ampersand is a way of um running more than one command at a time so they'll say okay i'm going to run this command and as long as it doesn't fail as long as it doesn't exit go run the next command okay so that would be that one there and there's also uh the case of um and you know what i'm going to do these all under commands because i just want to make sure this runs every single time what i'm going to do is put command here for this one i'm going to do another one here where we're going to try to do a semicolon so this uh this is something you can do in again this is not specific to git pod or yaml but like when you're writing bash scripts you can do semi semicolon to say this is a the next command we want to run all right so we have this one where it should run both this one where it should run both and the next one should succeed and then here we will purposely introduce an error so maybe if i just do uh x like that which is not a real command it should fail and not run the second one all right and so this is multi these are multiple examples let's do one with a script so maybe we can load a script so we'll just say um hello world okay so this might be another way that we could do mult multiline kind of scripting here so we'll just say hello world as a file we'll say sh for a bash script and then we'll do echo hello world i don't know that will print out to the screen but we'll see what happens there i'm sure it will still work and we'll just say sh we'll have to make that executable down below so i'm going to type in chamod u plus x hello world if you're wondering like what does that mean it means make this executable so that we can run it like that and so we have semicolon double ampersand double ampersand with a purposeful error and then we also can do uh this way so that is the angled bracket and so we are going to want to do hello here and then ampersand ampersand world because if we don't do that if we don't put the double ampersand when we're doing the double angle bracket what's going to happen is this is going to translate into this right and that would cause an error because it would think there's no you can't have a second and third argument think it's calling echo and these are arguments to echo that wouldn't work so that's where we need a double ampersand whereas if we do this okay we can do that and this is going to be the equivalent of basically doing this up here where it's like this is a line and that is a line of execution so i think this is everything that should work i'm not sure what kind of problems we're going to run into but i'm going to just close out the rest here and we'll go ahead and commit this to our repository here and the great thing is because these are all commands uh we can start these over and maybe it might be smart to give these names so i'm just going to go here and say name this will say semi semicolon okay we'll go to the next one here and this one's going to be double ampersand we'll go to the next one here and we'll say double maybe just double amp because it's getting too long here double amp fail i wonder if we could just do this you know i don't see why i can't be named that that might just be easier okay and this would just be double ampersand and then we'll do semicolon here and then this one will be bash script and you know i didn't do a shebang here i don't know if that's going to cause a problem i'm going to put a shebang in there just in case i'm going to say where is um sh or bash okay a shebang just means tell the script to run a particular way shebang is the is this thing so say run in the context of that so i'm just doing that just in case and so we will name it that and then here we will do this multiline so you can say multiline multicommand is what we're learning here and so these are all the variants that should be possible here and i'm hoping they all work the first time around here because that would be really nice but this is our file right so these are all the different kinds of cases you could do and so we'll go back over here and we're just going to go ahead and oops add these two files so we'll add that and i want to stage that as well we'll just say commit multiline we'll go ahead and add that there all right and so now that's all committed and in order for this to execute we can terminate this environment or just stop and start it since we know how it works so we know command will run again so that's what i'm going to do i'm going to stop this environment and then we'll let that shut down and then we'll start it back up and hopefully they all just work first try i'm writing quite a bit so i'm not sure if i'm making any mistakes there okay so we're ready to go here it says i didn't uh commit a change maybe i didn't so if it doesn't run that's fine but i think that it will because the file is in there okay so looking here it looks like it didn't execute those so i guess the problem here is we're really going to just have to um make sure these are committed so let's say git push here okay and then we will stop it again see i'm surprised that i would have thought that it would have executed um even if it wasn't committed if it was just lingering changes but we'll see here we'll open it again we'll see if that's the case all right and did it work so it didn't do anything new so i'm kind of surprised i'm just double checking to see i don't have any syntax mistakes so i'm really surprised that stopping start didn't work in this case maybe it's because none of these uh these are initialized so probably if we had completely terminated and started it again and maybe starting stop it would do it again so i think that's what i'm going to do i'm going to just um because the thing is that when you stop and start it's it's redoing the state right so if those if those terminals don't exist it probably doesn't have anything to launch into i think that's just an edge case that um until now because i'm trying this now i didn't realize which is totally fine so we'll go ahead and close this tab we're going to just refresh here as a sanity check to make sure that stuff is in there we're going to go launch get pod again okay and this is the reason why it's not working unparsable get pod configuration yaml cannot be read block mapping entry a multiline key may not be an implicit key so the problem is the problem is i have invalid yaml so if that's the case i need to have a way of validating my gamble so maybe we'll say like validate yaml vs code maybe there's like a plugin so there's this um i kind of feel like this would already have it but let's go take a look and see if we can find it here like do we already have yaml installed like is this already installed see it's already installed and so i'm not sure there probably is like a validate right enable or disable this feature validate it seems like it should be validating it and um i already forgot what the error was so let me just take a look here i wonder if it's just the indentation here okay i'm just going to carefully look at this here for this we don't really need the name well i probably have the names i don't know these are messing it up so sometimes i'm using single sometimes using doubles i'm just going to do this here and so i think it was that indentation so what we'll do is we'll recommit this file here all right so fix get pod yaml file and that could have been the reason why it wasn't doing that but i still think that um those terminals aren't going to launch unless you um already have stuff open there so while that's going i'm just going to read here a little bit okay so here's validation detect whether the entire file valid is is is valid so like see here they have like hotkeys so that you know if you're making a mistake but like there's nothing there that was telling me that it was valid or not so yeah there's something going on there but uh oh maybe we'll just um we got to stop this workspace so what we'll do now this is saved we'll go back here we'll give this a refresh we'll make sure that our git pod yaml has been updated with the indentation we're going to launch this again we're going to see what error we get if we get any error at all it looks like we don't have any trouble this time so great so let's go take a look and see what our results are so the first one is our first task here where we're using the semicolon and it is saying here um hello world so we can use the semicolon works just as we expected it to then we have the double ampersand so again double ampersand means if this one fails the rest will not complete so that worked as well then we go here we'll notice that it failed on the first one and then it didn't continue on to the second one so that is really good that's what we expect and i guess like if we did the semicolon one i really didn't show that there i should have done this like fail and maybe we'll rerun it just so we can view that afterwards then we have the bash script so it's using the bash script that is over here so that is another way we could do it then we have the multiline this way so that was valid so that worked out fine and then we have this one here so i just want to show you that if you take these two out this is going to fail okay so i'll just write fail and maybe we can just add it in as an extra one whoops so what we could do is go here i just want to show you if you do this one this one will definitely fail okay if we take that out like that it should and we'll go back up to our semicolon one and this one should fail as well so we will give that a go one more time and um i'm going to terminate just just in case so we'll just say update gitpod.yaml file with more examples of multiline i don't care if it's over the length it's fine for me we'll sync those changes very important to sync we'll give it a moment to sync great we're going to close it again and we'll just look at those edge cases there just one more time okay and so it's just launching up here all right so we have a few edge cases let's go this one so this one said hello x command not found but notice that it executed world so it didn't stop on the first one so you go here look it stops on the first one but with a semicolon it won't so that's a consideration for you and then we did the multi bash one and it we have hello echo world so it didn't um it didn't crash but it treated like this was the entire string so you can kind of see you kind of got a wonky result so hopefully that shows you how multiline works and there's obviously a lot of uh options for you there and we'll just close that off and we are done multiline so let's talk about awaiting tasks within git pod configuration file so get tasks all executed in parallel so by default there is no guarantee of the order of execution of the overall tasks okay but there are a couple of ways we can force a guarantee of the execution order and the first way is when we want to wait for command and so get pod has a cli and they have two commands called sync await and sync done so here we have an example again it's a ruby on rails app um and so if we look through here let's just try to find where we see synco weight so we have this rails app that is starting up and then we have webpack and it says sync await for bundle okay so it's waiting for this command up here to finish because if bundle install is not done we should not run um this command here right and the same thing for redis and for sidekick until this command up here runs should it proceed but the way it knows that it's done is that you run this um sync done over here okay so just erasing all that stuff because i know it gets kind of messy but the idea is the idea is gonna stop and it's not going to proceed until this has been triggered okay and that goes for all the tasks and so that's a way that we can force uh the order of these tests now there's another way and this is where we want to wait for a port so this is where we use a weight port and it doesn't have like a a weight or like done port or thing like that but the idea is that let's say we have endtoend testing that we want to implement and we want to run those tests but it has to have a running server on port 3000 so the idea is that it's not going to run mp on run tests until there's something running on that port and so when you start up npm run dev it's going to ask you hey do you want to open this port you're going to open that port it's going to see that it's running and then it's going to run your tests and so those are our two options there okay hey this is andrew brown and in this video we are going to take a look at um things where we can await for things okay so what we'll do is create a new a repository i'm going to call this one gitpod await since we can await a port or wait a command and so down below we will go to private and we will choose readme and we'll create this repository and we'll go ahead and launch this uh workspace we might pull up the documentation here so like a waiting command get pod here and so if we go over here i'm not sure if it'll show up under here because that's where these commands show up like a weight port and things like that so here we have gp await port 3000 things like that so i'm not sure if they showed an example here um but we definitely saw one earlier when we were looking at form so if we just want to go back to form for a second which had an example of a command i believe or maybe it was a port i don't think it had command a which is not a big deal i have an example within the course here so we can down below this has a gp await port so not necessarily the other one but let's go over here and so something we can do we'll just go and open up our terminal as per usual we're going to type in gpnet to initialize a new task so we don't make any mistakes here and so what i'm thinking here is let's do a weight command and what is it called a wait uh sync await and sync done that's what we want to do apparently they have a real world example so let's take a look here actually i want to do a ruby on rails application so here's an example where they have a ruby on rails application and they're kind of waiting for that those kind of steps i don't know if they have like a quick start for this um probably would have been good if there was like a get pod example here but what we'll do is we'll just kind of make up our own example from this all right so what we want to do and i think ruby's installed here if i type in ruby v it is great so with ruby you have a thing called gem files okay and that's just a way of doing uh versioning and gem files are done via bundler so bundle generate gem file i'm not sure what the command is i usually just write it by hand and copy out code but i wanted just this kind of information so that's all actually all i wanted for the file i thought maybe like a generation command allow and so here what we can do is install some gems uh very popular gem would be something like pry that's for like debugging uh and we don't necessarily need to use it for anything it's just the fact that it's going to be here we're also going to need a now we don't need a docket ignore file it's totally fine so what i'm going to do is do a bundle install here oops bundle install and that's going to install our dependencies here then we're going to get a gem file so we can commit that to our repository but the idea is that i want something to wait on the gem file first so and i wish i kind of had an idea of some kind of gem that would have been useful for this case but actually you know what would be useful it would be sinatra so instead of doing pry i think we'll do sinatra sinatra sinatra is a micro framework for um web applications for ruby sinatra it's a really great way of learning how to work with web servers ruby not the singer but the singer is fine too and we'll go here and so this is the most simplest example of a sinatra application so if we go over here and we paste in our sinatra application into a new file here so just say server.rb we'll just paste on that code and so we'll need to put sinatra in here instead we don't need the pry and there's some way to start it up on a different port i haven't done this in a while so i'm not sure um documentation i thought this would have been like different port different port port support sports how do we change the port okay sinatra ruby port change okay so down below here set port so you can't you just set the port like that note that this is another way to bind the socket so configuration is what we're looking for um so here it is okay so here we can change the port and i'm going to set this port to stop pasting right now so we'll say set port 80 80. just going to double check to make sure that is correct the syntax there's a comma in between okay okay and so that is the port there and we have our gem installed which is great and so i'm going to actually have to do a bundle install again because i actually got rid of pry i'll give that a moment there to install and so what i want to do with this task here is i want to have one i mean like you wouldn't do this generally because you could do it all one command but i'm gonna do one where i install the dependencies so we'll say bundle here and then this one will be like um server run all right and so here what i'm going to do is init and i'm going to just say bundle install and then for this one down below instead of a net we're going to just do command and here we want to run sinatra so it has to run in the context of bundle exec because that's how it knows it's going to run that there and we'll do server.rb and so this one we want this to be open on port 8080 all right and that looks fine i think i might want it to also open as well so let's go over here we saw this in forum earlier which i thought was really cool i didn't know that you could use it this way so i kind of want to give that a go here and we'll just say command and so the idea here is i want this to open this on port 8080 um i'm just trying to think if there's anything else i need to do because this isn't going to this server is not going to go to that url so i might have to also do this which is i need like a forward slash here i'm not sure how i would i would how i would join that so i'm not sure let me see here i wonder if i can do this what's this do okay but can i do this i'm not sure if we can just do that like that so just to make our lives a little bit easier what i'm going to do is go over to the server here and just change it to frank says here because that'll just be a lot easier for our example and so we have the port open it's in preview this one's going to launch it so just open it up open preview here and i'll just put this on the same line here we don't have any issues there and so i think this is what we want um but the problem is is that there's no guarantee that the bundle install is going to happen before the server runs and so let's just go even though i know this is going to break i want to go ahead and add all these files here okay and just say like init file and i'm just gonna double check to make sure that actually serves something this is gonna serve text which is fine and so what we'll do is commit all that sync the changes and while we're waiting on that what we'll do is go ahead and close this tab here and we'll go ahead and relaunch and we'll see what happens all right so here we are and so let's just see what has happened here um so we go to bundle install it did the bundle install which worked out great and notice here it says bundle install to install is missing gems so could not find sinatra 2.10 stuff like that so it's possible that this ran after this so this might have executed first because this is a very lightweight it would take two seconds to run and this would take a little bit more time to install so i just wonder if we were to go back and execute this command would it work so it is working so that is where this sync awaits going to be very useful for us this didn't open up for us here unable to connect to the vs code server error in the request i think this is also because the port wasn't ready all right so what we're going to do here is we are going to go back to our get pod file here and we're going to use this sync await thing so here um and we probably use port as well but um it's gp sync await so what we'll do is say gpsync await and for this we want this to wait for the bundle so i'll go here put this on a new line and we'll paste that in on there so that will just cause it to block and the way we decide that it is done is we would go up here to the init oh by the way we need to oops i have i put the caps key on by accident um but we will need to make this multiline and then we'll have sync done and we'll just say bundle or maybe like bundle this would be bundle to be specific we should say bundle install so it's just waiting for this to finish first before it does that and so this should kind of resolve our issue at least one of our issues so we'll go back here we'll add this here assuming i wrote this all right we don't know until we do it so add sync await and sync done and we'll go ahead and save that there we'll go back over here and um we will sync those changes we'll say okay and what i will do here now that i've synced the changes we'll just go ahead and close that tab and reopen and see what happens there because we do have an init there so if we were to stop and start we wouldn't get exactly what we want all right so it's starting back up here so let's go see it actually all worked which is great but we go over here to bundle saw that worked and then that executed and this happened to work okay but if we keep on running this there's probably a chance that this might not work because the port isn't ready so i was kind of hoping that this would fail um and i think the only way we could make this fail probably is if we just put it in a sleep here so what i'll do and i think sleep is for every single second is i'm going to just write sleep and put 10 seconds okay and so that should sleep long enough that we should see this fail so we'll go back here we'll add it so sleep a while i wanted to say like hey this port isn't ready what are you doing you know so go back here and then from there we'll go back close that tab we'll open that up again and we'll give it a moment and we'll spin up here in a bit great so now that we are here um let's go take a look and see what's happened and it still worked so it's it's still executing well actually down below here it says unable to connect to vs code server so i'm wondering if it's because we have um this option here right so it's opening because when the port became available it opened so i'm thinking i'm just going to go ahead and remove this let me take out the on open because this would notify by default so what if we put this to ignore say ignore here again i just want to see that this doesn't open and then we have this here and then if if we take if we put in the portaweight it will work properly so say uh one more time i mean clearly this is airing out so that's no good but it's still open and that just because git pod is smart so we'll go there and we'll go ahead and close that we're going to reopen our git pod here and so that errors out which is totally fine that's what we kind of expect to happen and now it's not opening up the preview so now i think we have our opportunity to put in the um that other command which is the port await so what i'm going to do is go grab this command here and we're going to go down below and we're going to expand our command here whoops and so my expectation is that it's not going to run this command until the port is ready see i don't know if we need like a double ampersand but i'm pretty sure this waits until the port is open so i'm going to say port 8080 here and what we'll do here is go back and we'll add this here and we'll say update gitpod yaml and we'll save that and we'll save those changes and um what we'll do is we'll go close this tab again and we'll launch it one more time great and so what we're going to see here is this is a waiting till the port is open remember this is sleeping right and look now it works so we made a great example where we're using both a weight port and a weight sink so there you go so that's that's what you'd use with those things and we're all done here so we can go ahead and just close your tabs and that's it so to understand git pod ports we need to take a look at computer networking ports so ports and and that's the short way of saying just ports acts as a separate channel for communication protocol so you have more than one program using the same protocol and tcp the protocol we use for websites and web server has 65 535 ports and some ports are designated for specific types of communication and others are undesignated where we can use them for whatever we want so for designated uh ports ones we absolutely should know is port 80 so hcp 443 for https 22 for ssh and the way these are used is the port number is uh will follow an ip address or domain name separated by colon so here's an ip address and we have port 8080 and so we have the ip address here and the port number there in a web browser you can write the port number in the address but generally you won't see it for websites because it just shows up by default so if you're doing http colon slash it already knows that it's port 80 and if you're doing https colon slash it already knows that it's port 443 so that's why you don't see them there usually so there are many undesignated ports which can be used to view or serve web applications for the purpose of development uh and the popular development proto uh ports being three thousand three thousand and one eighty eighty eight thousand eighty eighty one and so three thousand and three thousand and one is very popular to break ruby on rails why is there 3000 ones just because like if you're using 3000 you need a second server you have that that's why you see it with 8081 or 8001 as well 8080 8000 are very popular in the uh with javascript uh web servers but these are the ones you normally see and probably what you should use because there's a lot of synergies with a lot of technology that are already defaulting to these ones so when we're talking about ports in common language it's common to say things like i'm listening on port you know or i'm serving on port what have you right so just understand when you're saying listening or serve it's pretty much the same thing um and same thing with like opening port or exposing port means the same thing just so you understand uh you know those there okay so now that we know what computer networking ports are let's take a look at git pod ports so in order to view websites or web applications in a web browser running a workspace tcp ports need to be accessible and goodpod allows you to open ports so you can uh set ports in your dot get pod yaml file your gitpod configuration file so there we are opening up port 8080 in that example uh and so then once your workspace launches you can go to the remote explorer and you remember what the remote explorer is because i definitely will ask that as an exam question but once um the port is uh uh open then you can go over the remote explorer you can see that there's a port there so here we see port 3000 it's open it's private there's like a button to open in the browser or inline in the code editor um but if you don't define ports ahead of time and that's totally fine if you don't if you start up a service on a new undefined port gitpod will prompt you if you want to open the port and so you just press the button and we'll open the port and even after that it'll probably ask if you want to launch it in the browser um but yeah that's all there really is to it gitpod cannot use ports that are lower than uh 1.024 so common ports like port 80 443 ssh you cannot open those ports and really you shouldn't be because this is a developer environment and port 80 443 or for serving production websites or web servers and i just want to reiterate you don't have to define ports ahead of time you can open new ports on the fly okay so let's take a look at some of the configuration options when we are defining ports so we can do a port range so three thousand two eight nine nine is uh nine this example here of course we can have a single value as we saw in the previous video we have opening behavior so this is where we define on open and has four possible values so notify which is the default and when it says show the notification it's that notification that says hey how how do you want to handle this port do you want to open it in a preview do you want to expose the port like what do you want to do with it so we have the open preview option so open the preview on the right open browser so open in a browser tab or ignore so don't do anything then you have port visibility and so by default it's going to be set as private and so we have private which is the default this only allows users with workspace access to access the port the reason i highlighted that was actually for my own notes because i don't know exactly what that means but we'll find out in the follow along because i want to know like does it mean that only i can use it or if we like if we have a team and somebody's within my team only team members can access it so that's something we'll have to explore then there's public so allow any everyone with the port url to access the port so there's an example of visibility so there you go hey this is andrew brown and we are taking a look at port forwarding so what is port forwarding or also known as port mapping is an application of network address translation a nat that redirects a communication request from one address and port number combination to another and that's basically the wikipedia description but uh to simply put port forwarding sends traffic from one port to another essentially acting as a port alias so using the getpodcli command forward port you can send traffic from one port to another so here's an example of me uh forwarding the port at 80 80 to 80 oh sorry it says forwarding 80 81 to 8080 okay and so some programs will start on a hardcore coded port and will not let you change the port so port forwarding is a way to work around this issue so that's the major advantage of port forwarding hey this is andrew brown and welcome to another follow along this time we're going to be looking at all about git pod ports of course we did cover a weight port but we might just cover it again in here just because we are going more thorough into the port section of the core so i'll go ahead and type in git pod ports i'm going to add a readme it could be private and what we'll do is go ahead and type in git pod ports here and just pull up the documentation just in case we need it so we can set ports within a range we can set a single port things like that and then we have a bunch of different kinds of um things that can happen like the modes that should happen so what we're going to do here is launch this new get pod okay and we'll just give it a moment here but you know just looking over the on open ports you have notified so show the notification by default open preview open in the preview on the right open browser so open in the browser tab ignore don't do anything so we'll explore um because this is part of ports and so i guess we can cover all these options here for fun and so as always we'll go up to our hamburger menu we're going to go over to terminal new terminal and we'll go ahead and type in gp init and from here we're going to need some kind of server so i'm going to go server.rb then we're going to go grab sinatra again so we'll say sinatra ruby and from here um i'm going to go grab this code right on the page that makes it really easy and we'll say allow and then we're going to need a gem file so just say gem file and i'm just going to say like a knit gem file bundler because oh there is a bundle in it generates a gem file well let's let's do that because i'm getting tired of looking up the first command here so we'll say um bundler init all right and so that's where we get that uh that front line that we wanted there okay and this is useful too to have the github thing here so but we'll just go here and say gem uh sinatra sinatra okay we'll do a bundle install whoops bundle install i like doing bi it's my shorthand for that and so now we have a very simple web server i'm going to modify this slightly because i want it to take in environment variables so i'm going to just go here and make a double quotation this is interpolation in ruby and so i can just do env square braces and we'll say message and we'll say says oops i'm able to say port so say frank says from port okay and so that way we'll be able to pass that along and kind of set that we also need to set our port here so we'll say port colon and then we'll just do env for passing along a environment variable um we should probably make this a little bit more flexible just say app port because i don't know if there's like any underlying port so let's just do that just in case and from there we have a simple application and so that should work no problem and the way we can test that is by typing bundle exec actually before that we have to set our port so we'll just say port 8080 and i will just put a space here or maybe double ampersand and we'll say uh ruby server and so that started up on port 8080 just double checking here to make sure that it's not just the default port here so that's starting up on port 8081 i don't think it's oh you know what it's because i'm not setting app port like this okay still not taking the right port so i'll take out the double ampersand and there we go so sometimes you got to play with it a little bit so that is how we're going to be doing that so go over to our git pod gamle file and we don't know which port we want to have open as of yet well actually we might want to set them all there um so what i'm going to do is i'm going to go up here and we're going to do a bunch of different ports because i want one for each of the types of things we can open here so we have notify open preview open browser ignore i'm gonna go just grab these for here so we can save ourselves some time we'll drop those in there and from here we'll have port 8000 port 8001 port 8002 port 8003 and we'll have this on notify which is the defaults we'll have this one on preview open preview then we'll have this one on open browser and then we'll have this one on ignore okay so there we have all the the cases there and then up here we're just going to have our ports we'll say 8 000 and our command we do need to initialize this stuff so what we'll do because we need to have a i think that's going to do bundle install so up here we'll just do bundle install and we'll do an init here and we did learn this um a moment ago where we had the bundle install and then we oops bundle install and then we had our gp sync await and we'll just say bundle install here because we these are all going to have to wait for that stuff to be installed for them to work and we'll take out the command here and then we'll do our app port so we'll say app port equals 8000 bundle exec rubyserver.rb and from here we also want to wait so let's say gpsync done i guess this would actually be the wait so that one would be the done so we go down up here or over there and so that's going to be on port 8000 this one's going to be on port 8001 this one's going to be on port 8002 and this one's going to be on port 8003 all right so we have a bunch of different uh ports there so that'll give us a four and they all are going to launch in different ways so that looks pretty good hopefully i didn't make any mistakes because we did write quite a bit here um but i think that's okay so what we'll do is go over here and we'll commit all these files and they look like they're all committed so we'll say um set up a bunch of servers and we'll commit that sync the changes we'll say okay and then from there what we can do is go ahead and we have a get get uh yeah there's a lock file there so that's great so we'll close that off and we'll go ahead and reopen that okay all right so there is should be a string uh so i really wish i knew how to validate the yaml beforehand so like i don't know what vs code extension i need there but like maybe there's like yaml validate i can see like in this linter here maybe i get this nice ad on the righthand side so i'll reopen that up and we'll just see if we can spot the problem let's say that's like my only frustration it's probably there is a tool involved and i just don't know you know so i say copy and then i'll paste this in here and we will then say go says it's valid yaml yaml so there's something that it doesn't like so we'll have to just closely look at this here so we have a net that looks fine we have the command here that looks fine so i'm not sure what it doesn't like so we'll do a sanity check and we'll just kind of simplify it so i'll just um go here and comment this out for the time being and same with here okay so oh you know you know what it is it's probably um this because it starts with a number so i'm just going to do this and maybe that will fix our problem because i think it's it's like equating as a number as opposed to a string and we probably just wrap it as a string whoops maybe not those but that's probably our problem so we will try this again it's good to know fix names of tasks we'll sync those changes we'll say okay and from there what we'll do is close this tab we'll go back here we'll say get pod and so we'll wait here so frank is open up 4801 so this looks like it's working correctly let's go ahead and close some of those tabs so here's a thousand here's a thousand one two three and so one is opened up in here um but like the other ones didn't open up so maybe you just can't have multiple ones it's like one or the other but like i would have thought that um if this was set here open browser it would just automatically open up a page maybe that's not the case but if we go over to the remote explorer here we just kind of hover over here it seems like we can open it in preview or this kind of stuff so i'm not really sure why that doesn't work as we think it does but it's not really a big deal and i don't even know if we ever saw that open as the browser like that before so anyway that kind of gives you an idea like this one probably prompted us and we didn't notice as we clicked through there but just kind of showing you how you could set them all let's now go switch this to a range so instead of doing this we can say port 8003 and i'm just going to switch them all over to open browser i just want to see if they actually do open here and so this will allow us to do a port range okay so that should work no problem open up a port range we'll go ahead and commit that we'll sync those changes we'll say okay and by the way like i think down below here it actually shows you what ports are open so if you click this down below i know it's hard like look where my mouse goes all the way down here you can uh see the open ports but they're also going to be down here in the remote explorer and you can make it public or private and things like that over here these are all private right now um so what i'm going to do here is just close this tab relaunch this and then we're going to see make sure the range ports works of course it's going to work delicious dude anyway just to make sure and so there we go we have what went to those horse open which are good again browser didn't open so i don't know what the point of this is like if it doesn't open right away i don't understand but um or it could be you know what it probably is oh so it has been this entire time we just have to say always allow the popups and redirect okay and so now probably if we were to relaunch this they would all open up so that's what i'm going to do i'm just going to do this one more time i'm going to make a new workspace because we need to run the init again actually probably don't we probably could have done a start it would have worked because they're all commands but that's fine and so okay so basically because it changes the url every time it keeps on blocking at a so i think like what you'd have to do is probably have like a wild star in here so let me just take a look okay so i think what we could do is we could probably go up here and say add and then do wild card and then do that should allow us to do wild card maybe like this there we go we'll hit hit add and now i'm going to do i'm going to do it one more time and i think we can just i'm going to just kill it even though i probably can stop stop it uh stop and start it again um and i'm just going to say new workspace and so now they all open so that's probably a good thing that we did there for chrome and i guess i just never noticed that and that kind of makes sense now but anyway so that is port ranges um you know there's a few other things we probably can do let's just take a look here so we did that there's private and public i guess we never set that for the ports um and so we could explore that as well i would probably have to go get another account set up here to show you um but maybe we can just will this down to two so i'm gonna just take this down back to two and we can say um private but i guess it'd be visibility visibility which would be private public and i'm just going to get rid of that port there we'll see go back to port one and then this one will be private okay and so just looking at this here that should work no problem i'm going to go ahead and commit that so public and private now we'll go ahead and save that we'll save those changes we'll say okay and from there we'll go ahead and close that and we will reopen the git pod and as that's going i'm gonna have to open up another browser so i'm gonna go get firefox here so just give a second for firefox to load okay not now nope just let me browse please and so i'm just going to go off screen and log into my github so i have more than one github account and i have more than one git pod here so that will just take me a moment you can see these ones opened here and i'm just going to sign in off screen here and i'll see you back here in a second okay all right okay so i have um uh firefox open here on another github get pod uh picapod account and so what i want to do is see what i can share so if our servers are running they are here they both are one is public and one is private and so the one that is public let's go see if we can bring it over here so i'm gonna go ahead and paste that on in here so port 8000 works fine and then we'll look at port 8001 and so i can't see port 8001 and so one thing that's interesting is that if you have private they suggest here that um only allow users with workspace access to access this port okay and so what does that mean does that mean if somebody is in the same project or does that mean if you're just sharing it with them so that's something we're going to have to find out so what i'm going to do in my gitpod is i can actually create projects here and so i can create a new project i don't list i don't think this will allow for collaboration so i might have to go to this one so my new project here and then from here i need to add a member so i'll go here and give them the invitation link which is on the other side here and then they're going to have to go accept that so i'm over here now and did i accept it i didn't see like a step to accept let's go back here and refresh uh it didn't oh looks like in my firefox i'm in this account hmm you know what i think it's because i'm logged in the same account so what i'm going to do is just log out here because my github is another account here and so what i'll have to do is just kind of like launch any kind of repository here this will take two seconds and i'm just accepting the authentication there okay and so now i'm going to try to invite uh myself again so we'll copy that and we're just going to paste that there and so i i just instantly clicked it and i was added so there's no like do you want to be a member which i think maybe they need that but that's fine it's not a big deal and so we'll go back over here and so now if i just refresh here i want to find out is this one do we saw this pod running yes we do so if we go back over here in this other screen here this is i think the private one the 8001 does that work no it does not and that's totally fine so what i want to do now is i just want to go ahead and create a new workspace or sorry project and we'll say um or did we already have a project here oh it's right here new project oh sorry this is a team i called it my new project i should have called this um my new team so let me go ahead and delete that team because that's just too confusing and we'll go here i'll say uh my team my i guess maybe these are unique names i didn't know that so my team exam pro co okay there's no way that that name exists and so we'll go back over here i'm going to invite members and that kind of makes sense why they might have like the block lists which i didn't know about before um and so now i'm a member of that again so we'll go here and we'll give this a refresh so i'm a member we'll go back over to projects we'll make a new project here i don't know why there's this e1777 but i want to choose any repository here the one i want actually it's not any repository i want this one here so let's go back over here and let's see why this isn't showing up search repositories we'll say git pod it's only showing oh you know why it's set on gitlab so we'll switch back and we'll say github and we'll authorize and we'll authorize all so now we can go and bring in the reaper we want which is the ports repo and so if we go over to the workspaces here there are no workspaces so now what i want to do is just close this off and i want to launch this under here okay and if you do launch it from here i'm pretty sure it's going to open up in this workspace but just to be sure i'm going to go do it from here so yeah it is in the same workspace but i'm going to launch a new one anyway because i want to see again if i share it with this account that's a member can they see it all right so we'll go here and so 8001 is the one that is the private one and so we'll make a new tab here we're going to paste that on in there and so they still can't see it so just because you're a member doesn't necessarily mean you can see it so now what i'm thinking is that it has to do with like sharing your screen so what we'll do is we'll go over here and we'll go to the share and we'll say share and now we're going to copy that to our clipboard and we're going to go ahead and paste this on in here okay and so now i'm sharing so i have access over here i'm going to refresh see if i have access here i don't which is fine but what i will do is go to the lefthand side here because these servers should be running remote explorer this one says it's private so i'm going to open this in the browser oh uh we'll say is preventing this to open we'll go to options here we'll say always allow whoops and so now it's showing up i don't know if there's like a difference between this one and that one if we go back over to uh the one here we open that in the browser let me go back over here okay so there is a bit of like finickiness with this but you can see that you know if you are sharing you have access but just because they're a member of that workspace doesn't necessarily mean you can share that private one so that's just kind of one of those uh harder edge cases that i kind of want to show you um so that you just know what's going on there uh so now that we've figured out how to do um a lot of stuff let's do port forwarding that'll be the last one here so imagine you have a project where you have a whoops that's saying this this doesn't exist oops go ahead here and go back here so imagine you have a project where you don't have control of the actual ip address and it's not showing me anything here i'm gonna have to relaunch this it's being funny okay and yes i want to just open the existing workspace here and so that's great and so um it could be a case i'm just going to stop the server here for a moment where you need to like we're not going to have this port so if we don't specify any port it's just going to start on port 8080 right so if i go bundle exec here and actually i think we should probably do this in our code i'm just going to make a third one here that's to a fixed port so i think it starts on 8080. so we'll go here and i'm just going to say default i'm not going to specify any port and then we'll go ahead and commit this and we'll see if we can use the port forwarding okay so sync those changes we'll say okay we'll wait a moment i'm going to go close that tab we'll relaunch that i'm not sure why it's doing a prebuild because we don't have prebuilds turned on at least i don't remember turning them on but for fun we'll take a look here so if we go here to our project reports oh it is doing a prebuild okay so i guess as soon as we make a project it becomes a prebuilt i for some reason i thought like prebuild you can turn it on and off and maybe you can but i don't see the option there so um the only problem with that is that if it does a bundle install no it should still work so that should be fine yep so it's doing the bundle install that's the prebuild and here down below you can say don't wait for prebuild i didn't know you could do that but we'll just give it a moment i'll just see you back here when this is done launching okay okay so i'm just like sitting here waiting for this to finish but i think the thing is that it's already done because it exited out of here so i think if i just close that off and we go over here we can see the prebuild is ready and so now if i go and try to launch a workspace it should work so we'll go ahead and we'll just say new workspace and because that prebuild is there it should load really really fast but yeah i guess i was just waiting there for no reason and we'll just give it a moment and there we go so that was pretty fast um and so i'm expecting uh this one to go to the default one so if we go to this tab here we're going to notice that it's going to start on it's starting oh you know what because these are all waiting for the bundle install eh so none of them are going to finish okay so just to make our lives a bit easier because this section is not about teaching you about how to do prebuilds so what i'm going to do is i'm just going to go ahead and delete this project if it's possible so we'll go back up to the top here i'm just going to go ahead and remove that project okay and so that way that'll just make our lives a lot easier so if i just launch this it won't do prebuilt stuff and it will work as expected so we'll give it a moment there and so this one because it will do a bundle install here this should now work properly this task ran as a prebuild oh boy um so i guess the thing it's not a big deal i think the thing is that i just need to modify this file because now if i modify i don't know if it'll just like stop using prebuilds so what i'm going to do is just delete out these commands here and we'll go here and just say remove weights because this will happen in the prebuild right so we'll say this assuming that it's going to do another prebuild even though i've deleted the project so there technically should be no prebuilds now and so i might have to recreate the project which is totally fine we'll just work our way through here and see what happens okay so we'll close that and i'm going to go back here and just do git pod because i don't know what it's going to do and so we have bundle install missing gem so now it's not doing prebuilds okay so in this case that's where we want to revert this file back to what it was so i'm going to go back and write it in because i i don't want to go back and create the project so i'm going to say um sync done bundle install sync awaits sync a weight sync await and so this server is going to start up over here and that's fine i just want to have one for the port forward so port forward there's not not going to be anything going on here i'm just going to say like command echo hello and what we'll do is go ahead and commit this file so we'll just commit that update and we'll sync those changes as per usual and we'll give it a moment then we'll just go ahead and close that reopen this and get pod i think we'll have an easier time all right so it's almost open here now this is not even with prebuilt it's pretty fast but again it's going to really depend on your use case so um here we saw these two up because the ports already open they have the mode set up this server is running right so and this is running on port 8080 but imagine that you didn't want it on port 8080 you wanted on something and you know to be honest a better example for this would have been port 80. so i'm just going to do this sorry i know i'll keep on modifying this but if this is an accessible port that doesn't make it a very good example let's just say open on port 80. and actually before that happens i'm just going to start it up manually to see what happens if it actually does permission denied so i'd have to go here and do like sudo um so we can't even start it on port 80. i think we'll just stick with what we have here so we'll go back and we'll just start it back up again okay and we'll just do port forwarding so if we wanted to open up on a different ports we'd just say gp port or a ford port i want to forward port 8080 to 8 999 maybe 88 and i think it's going the wrong way so um port 80 is already in use okay maybe we'll try that again it's just confusing because to me it looks like traffic coming from here should go there but i guess that makes sense because if traffic's incoming from port 888 send it to 8080 okay to me the direction just confused me but it's actually correct and i'm just confused so um if that port is open let's go over to remote explorer here so now we see port 888 and so if we open that up we can see that it is forwarding to port 8080. so there you go that's pretty much all we need to know about ports of course there was a lot here but i think it was just worth making sure that we were very thorough with our investigation here so we'll just close off all those tabs and we'll see in the next video okay hey this is andrew brown and we are taking a look at git pod custom docker images so git pod supports custom docker images so you can configure your workspace exactly to your needs and this is really important if uh you know there's security reasons like you need to really lock down what it is that's um within that container or you just have uh wildly different use cases like maybe you're doing a web 3 development or machine learning and you just can't find a quick start template so that's where you have to start making your own docker file so git pod supports uh debian uh ubuntu based docker images but it does not support alpine the reason it does not support alpine is that images do not include alpine images do not include lib gcc or lib stdc plus plus which breaks visual studio code if you don't know what alpine is it's just like really really really small image and that's why people or os and that's why people really like alpine but i always found them very hard to set up debbie and ubuntu uh very very popular hopefully we'll see support for things like uh centos and things like that later but this is the ubuntu logo that's the debian logo and there's alpine crossed out if that kind of helps cement that information but you should remember that it does not support alpine there are two ways to specify i know it says specific but should say specify an image okay so you can reference an image from a container repository like docker hub if you can specify things outside of docker hub i have not tried but i assume that they all go to docker hub so here's an example where we have an image and we say node buster we know that's going to go to dockerhub then you can reference a dockerfile contained within the repo and so what you do is name a file called.gitpod.dockerfile i don't know if you could just call it dockerfile and then reference it there but this is what it's always called so it's probably best practice just to follow along there and then here we have a very simple um docker file that does basic basically does nothing but it's just an example of us configuring our own so for git pod images it's recommended to not specify a tag or use latest to make sure you're you automatically benefit from the security patches and fixes uh we release we release meaning git pod so you can see i kind of copy paste there from the documentation but what they're talking about when they're talking about tags is that when you have um like this image here you can do like colon latest or you can put a version number stuff like that they're just saying don't specify a version number or a type just don't specify anything or type colon latest okay hey this is andrew brown and we are looking at the get pod workspace base image so gitpod workspace base base is a docker image that has a bunch of common tooling installed and so you can find it here on docker hub or you can get find it on github so those are the two paths there and so this thing if you start digging into it it really relies on something called build pack or build pack uh depths and the reason i went digging was because i just wanted to know what was installed on it so this is a docker image for a collection of common build dependencies used for installing various modules it is similar to heroku's stack image which includes a large number of development headers packages needed by various things so npm install gem install pip install curl wget get and a whole lot more so what's the purpose of the workspace base well it extends from build pack depths with a bunch of additional tooling and so we have a lot of stuff like zip unzip htop uh jq which is great for working with json less locals nano pseudo vim all sorts of useful things and so this is a really great base image but we're going to talk about the full image next because that is generally what we see a lot of people using okay all right so let's take a look at the get pod workspace full image so every workspace launches by default with a standard docker image called workspace full and so just like base there's one on uh docker hub and github so very similar and workspace full extends from workspace base but it's going to be adding some additional stuff so the getpod workspace full image comes preinstalled with a variety of commonly used programming languages and libraries and system packages but really talking about that coming from the base image but just to kind of list the languages here we got docker go java node.js c c plus plus python ruby rust php homebrew tail scale nginx and several more so when you're developing your own custom docker images you can either extend the workspace full or if you need something lighter the workspace base but we will obviously open these up uh these these images up to kind of look at their docker files so kind of figure out what they're doing okay hey this is andrew brown and in this follow along i'm going to show you how to set up a custom docker file if you notice i tried before it didn't work so this is going to be my maybe third attempt to do it so what we'll do is type in git pod custom or get pod custom docker file and from there we'll go down below choose private add a readme we'll go ahead and create that repository then once there we'll hit the get pod button so all we're going to really be doing is going through the basic custom docker file here just to go through the motions of it we can use hyphen base we can use hyphen full it's just going to be dependent on the use case so if you use get pod fold image your docker support built in your you get docker support built into your environment so full sounds pretty good to me so we'll need a file here called dot get pod uh docker file now does it have to be dot get pod you probably could specify docker file because it references it um via the file so i would imagine you can name whatever you want but it's just good habit to follow what git pod has there so i'm going to type in gpinit and from here we have a file i don't need any of that content we're going to have image and then i think it's like type or file okay so we can do file here and then from there we'll just do git pod docker file okay and so now the next thing we want to do and maybe we might want to put one task in there for fun tasks and we'll just say um command we'll just say echo hello world okay just something for fun and so in this docker file we're going to be now writing whatever format a docker file is so do from get pod forward slash workspace and again this could be base but we're going to do full because you get the full power docker that way and from there we can do run brew install fzf now what is fzf i have no idea so i'm kind of curious myself so i'm just going to type that in command i just don't know what it is so this stands for fuzzy finder so f c f set f is a general purpose command line fuzzy finder it's an interactive unix filter for command line that can be used with any files so i mean that sounds really interesting um how it's used i don't know so i mean it might be just interesting to see if we can figure out how it works but um i think this is it so run brew install fzf if you see brew and you're thinking isn't that a mac thing well i think there's a debian ubuntu like compatibility for having brew so um yeah i'm not really sure let's see ubuntu brew so homebrew on linux so i guess they have a linux distribution and so that's how we're able to do that normally i would be like doing yum or apk install app getting solved for debbie and ubuntu but just to kind of clarify that i'm just double checking to make sure everything is okay there looks good to me so i'm going to go ahead and commit all this and say build custom docker image okay and hopefully all that is correct so we'll go ahead and commit that sync the changes we'll say okay and what we'll do is close that tab out we're going to double check to make sure those files are committed they look like they are good we'll hit get pot and hopefully we don't get any errors it's very easy to make errors at least for me because uh you know i'm just errorprone but notice that it's building the workspace so there's a little bit more work it has to do that's building that image so this is where you might see prebuilds come into play where you know you want this to launch faster because you know docker files just take forever to build uh and i say forever but i mean they take a little bit of time right so just imagine if you always had this that really makes sense why prebuilds uh become so important but i'll see you back here when it's done okay all right so i think this is done i can't really tell because it says building image and says exit exit so i'm going to uh risk it i'm just going to close this tab and try it again so i'm going to go ahead and launch the get pod um yeah so it already has this one running so i'm just going to click into that so maybe i'll just jump into the environment so yeah it was ready uh just understand that sometimes that happens you know if if you feel like you're waiting too long just have the confidence to go okay i think i think it is working but for whatever reason the feedback loop is not working as expected so if this worked correctly we should have fzf installed so if i type f set f uh it does appear so that's great and let's just see how it works so i know i watched a short little video on it and i know that if you do this it's a fuzzy finder so you can apply it to anything you can pipe anything to it but like it's great for like going through and finding files this one is a little bit more complicated so it's not really showing me the one the simple one that i wanted to use here well let me see here just going to the top here um so ah like it's basically this so we copy this i'm not sure about the selected part but we go and we paste that in like allow and hit enter and i mean we can search our files so i guess it's only showing not or like invisible files so maybe i need to go find some files here um media is there stuff in there no just trying to find anything okay so here might be something that might work so i'll hit up but they're not files they're kind of folders they okay so see i can start typing utm and so it's just a fuzzy finder an easier way to find things it can be used for all sorts of things but that's how you build a docker file so just realize it is a bit slow but that's the whole idea behind prebuilds right um now if we were to launch this again would it try to build every single time i think so let's go ahead and just see that and i don't care about seeing this complete i just want to see if it is going to build that every single time i believe it would right so we just give it a moment here it's pulling the container image if it doesn't that's great right that's what it looks like it's doing so it looks like if you build it once uh it's not gonna build it every single time you launch a workspace and then i guess my next question is is like i guess it would know anytime there's a file change i guess that you would have you'd have to commit it to the repository so that's how we would know so that's fine so let's say i make a single change here small change maybe just add another small change here i just want to see like will it still pull the image will it be smart enough or is it any time there's a change small change sync uh we'll go ahead and close that git pod give it a moment there and so i just want to see is it going to try to build the image it doesn't look like it so it's really seems like it's smart about that and then what we'll do once we launch it i'll just try to make a very minute change um i don't write docker files on a regular basis so i'm not even sure what we could install i mean maybe we could do wget even though it's already installed in that file okay yeah so it didn't rebuild it but what we'll do here is i'm going to do like run on a separate line i assume it must be smart enough to know run brew install wget again i don't care if this works like i don't i don't care to see it all the way the end just the fact that it's going to start a build step so add wget which probably already is installed but uh we just need an extra line in there so we're just going to do whatever okay good and we'll go back over here and we will hit the get pod button and so i'm assuming this time it will know yeah there we go okay so it is building the image so it is pretty smart there and i really like the fact that i did it that way um if you're looking for those we've seen those works workspace full images before but like get pod workspace full uh docker hub might be something we want to search for so here this is where they're basically hosted you know so just understand like whatever you want you just take that name and that's what you're putting in the image if you're doing um if we're going back to here like let's say you already have an image hosted you just do that right and you probably can put tags there as well but again it has to be a debian or ubuntu base so i'm not sure if it shows yeah here it is on github we've got images and we can go find the full one here and from here we can see the docker file and we can see this one's based off the base so if you wanted to kind of like crawl through and that's what i was doing to kind of understand what's going on there you can go to the base and then open that one you can see this one's based on the build pack depth depth full call uh focal i'm not sure what that stands for we can go over here and then from here um like this sometimes i don't know where to find the base file but there is some kind of like base soccer file here that would tell us where that comes from or be written up so i'm just kind of looking around for it i'm not super good with docker i've been using it for years but every single time it just takes a lot of work here there are a bunch of tags underneath so maybe the tag shows up here it does so we click into that one ah and here's the file and so you can see this one's based off full call sem here it's installing all the libraries and you can just keep crawling back until you find everything to see like what's installed so we go to this one here and then this one's based off the curl one like it's just a little a little loopy how this works we'll go to the curl one and uh so now you can see it's ubuntu uh focal right so then we can go from this one so you just see that you see that it's ubuntu right so we go into this so that i guess that stands for focal uh fossa great that is not easy to say so we go back and we go to docker hub again just if you've never done this before right and so from here we might type in a full call if it even shows up so then it's here this is the latest and so this is from scratch um and this is add this binary or this uh this thing so it looks like i don't really know this too well but it looks like what it's doing is it's saying okay take this um uh archive which might be in the same directory here yeah it is take this archive and utilize that as the installation for it right um so that must be like the way like setting up um ubuntu like you know somebody was to like have a disk or uh a key or download the program i think it's the executing the program so you know hopefully that kind of tells you how that stuff works but yeah that is how you do custom docker files okay hey this is andrew brown and we're taking a look at git pod quick start templates so quick start templates are git repositories that you can use to launch an example environment or fork to get started for a variety of different run times so here's the search and you're going to notice a bunch of languages a bunch of frameworks like ruby on rails larvarelle things like that and so once you click on one of these it's you can it will try to create a fork of course but you can just go straight to the um github repository and there you'll generally notice that it will have like a git pod yaml file and a docker file and you can open it up and see how they are doing it um but it's pretty useful the quick start template generally contains a custom docker file that may extend the base or full so i tried to like go through a bunch of these and say okay what is the pattern here but it seems like some are workspace based some are full some are uh get pod workspace there's like another one um or some are docker compose so there i guess a little bit all over the place okay hey this is andrew brown and this follow along i want to explore the quick starts that comes with git pods so what we'll do is type in quick start templates here and what we'll do oops we got to put in get pod here because there's all sorts of quick starts based on different cloud products but if we go here we can see we have some popular templates we can search for a variety of things so if we want ruby on rails that is an example maybe if we wanted uh larvarelle that might be an example maybe if we wanted django do we have django in here not yet but if we don't have django maybe we have flask yeah there we go so maybe we have flask uh maybe we've got next yes there we go and so it might be fun to just kind of launch these and see what they look like and maybe there's even a wordpress in here there we are okay so we got all the major frameworks and you know i want to emphasize that this is languages and frameworks and all sorts of things but what we're going to do here um is go ahead and launch these so each of these have a template so if i go here i can just say get pod um rails template and you know what we don't even need to actually i'm not going to clone those i'm just going to open these up in a new tab like this and then just click on it like that so that's the rails one now i have to go back here and find all of them again so we'll go here and we'll open up that like that okay so we got the wordpress that one then we'll look at the next gs one all i want to do is kind of just explore these and just see kind of like what is going on with them you know and we said flask okay click on through that and larva and so the thing is is that um we have quite a few repos here i think i have one two three four five so we're not going to be able to open these all up at once because we can only have four in parallel but we don't need to do that all at once so that's fine so i'm just going to close some of these but not close anything but i'm just going to launch them one at a time so let's do larvae first that's quite a big one so this will be one that we launch we'll go ahead and close that tab and while that's going we'll go ahead and launch the next js1 we'll just do a couple at a time okay and i'm not really sure how many workspaces i have running maybe we'll just kind of like optimize our time here if we go over to our dashboard and we go to workspaces none are open there we have two running workspaces which is fine so i think we can just keep going here we'll do the flask one and then we'll do the wordpress wordpress one and then we'll just leave rails up on on the side there and so we're just gonna wait for all these environments to go green i'll see you back here in a minute okay all right so after a short little wait our four repositories are ready so we'll start on the lefthand side with larvaral if you don't know what lavarelle is it's a php framework that's similar to ruby on rails um and so let's just see what they have done here to kind of provision this so it doesn't hurt to go through get pod yaml files to kind of learn something so here they're loading a custom image and probably all of these are going to be loading custom images and so we're opening up port 8000 for the lower rail server and then it's also starting mysql so it's all here in one place for you and so down below um i mean both the ports are open but in the init step you can see that they are creating a database example they're going to copy the env file over here into one there then there are updating the environment variables with some default configurations over in here so some settings that are probably mandatory that you need to update then they're doing a composer install an npm install a php artisan key generate could any of this go into the before i don't know this seems pretty much correct to me and then you have the command that's starting up the 8000 on um for the public directory so let's go open up the get pod docker file and so here you can see that there's just the thing that says workspace mysql so if we wanted to understand what the contents of that is we'd have to go look up that one there so maybe we will in a bit here so just say workspace github if we can find it sometimes i find these easy to find sometimes i don't whoops like that so like if we go to the get pod repo because it might our github github uh get pod repo there might be something interesting for us to see there maybe not but we'll try anyway so we'll say git pod here and we'll go to the repos here and we will search for workspace so these are workspace images see i don't know if they're all in here they probably are so we're going to mysql this is probably the file that is launching here so i'm just curious how what is it what is it doing so it's extending the workspace full and then it's just installing mysql so a lot of these are going to be using probably workspace full underneath okay then we have next.js so in here we'll take a look at the uh the dot get pod yaml file here and so we have a single task it says mpm install npm run dev so very very simple and it's not even using um a custom docker file because it just uses node and i guess everything we want is here so that's really simple and nice then we have flask running here so if we go over to this one um we have one that's starting a before task so it's setting or it's exporting a couple of flask options we're doing our pip install we're initializing our our database we're running it and then they have that extension installed for python for that highlighting so that's nice and simple and then the last one here well we still have ruby on rails we might as well open that up while we're waiting um we got to go back to our limit here we've reached one so we'll go ahead and close uh this one here so we'll say stop and we'll stop this one and we'll stop this one i just don't want to touch the wordpress and so if we go over to the wordpress now we didn't see a website because this one's a little bit more complex in terms of its setup there is a port open i don't know if this will work because we probably have to pop in the database nope here it is we can uh create a wordpress and so if we go here on the left hand side and go into the git pod yaml this one's kind of a curious case because it's not using a docker file image it has a docker compose and so basically you're running multicontainers within a container and so we open up docker compose we can see here that it's starting up mysql then it's starting up wordpress and these have separate images so see this one is using the mysql image this one's using the wordpress latest and so you know you saw with the other example with larvarelle it just ran it as a monolith within the container like like a virtual machine would and so you have both options here and both are valid this might be really useful if this is actually what you used to deploy so this would be more like onetoone with your production environment so that is kind of interesting there um let's go back i guess we didn't relaunch this so we'll go here and we'll just launch a new ruby on rails file there and we'll give that a moment but you can kind of see that's kind of interesting like all these files a little bit different you can learn a bit but the great thing is like you can just clone these or fork these repositories and kind of build off of them so it's a really great starting point for a lot of different kinds of projects so yeah we'll just wait here for the ruben rails thing to start and we'll look at this last one and we'll just wrap it up here for quick starts okay all right so after short little wait here we have ruby on rails my favorite framework that's why we made time for it but here you can see it's loading its own custom image file uh it has ports open on three thousand five four three two means meaning it's running postgres here we have our initial bundle install yarn and sol rick db create and then running the server and then we have a nice extension here for ruby if we open up the docker file we see again it's workspace postgres so you can imagine it's going to probably be similar to the mysql one if we go over here we go down to postgres and we click into the docker file yeah it's the same story um it's going to be extending workspace full so that's pretty straightforward there um and yeah we're pretty much done here so yeah that's all we want to do for quick start so i'll just close that stuff off and i'll see you in the next video okay so let's take a look here at docker compose which is a feature of docker uh but what's interesting is you can run it within git pod and so the reason why this is interesting is because you can run containers within containers or technically docker within docker if you've ever seen the movie inception with leonardo dicaprio where he goes uh deep into dreams a dream within a dream that's what we're doing here it's kind of crazy so let's talk about what docker compose is so it's a tool for running multicontainer applications on docker defined using the compose file format so we're not just running a single uh uh docker container running multiple containers at the same time so a compose file which is going to be named docker hyphen compose yaml which will sit at the root of your directory um is used to define how one or more containers that need to be running and the communication between them to run our application and so within our gitpod configuration file we can run docker compose poll and up uh commands to get multiple containers running so there they are of course we don't see the docker compose yaml file here in the slide but we will see it in the follow along so it will make sense there okay so something i want you to consider is that you can build container images and virtual machine images within containers and so if you're looking for some open source tooling or things that might work within a gitpod workspace we have hashicorp packers so this is an open source tool to build golden images for virtual machines or docker or maybe buildup which is an open source tool to build oci compliant images of course there are other tool tools out there so for instance there's dazzle which is made by get pod i don't know a lot about it i don't know if we're going to actually give it a try within the course but that's something that builds out container images with some advantage around layers okay all right so we're going to learn all about git pod environment variables so before we do we need to define what are environment variables commonly referred to by developers as and vars is a variable whose values is set outside of a program and it's composed of a key and pair so here's an example within bash this is generally how you do it so you'd write export to set the environment variable you have the key so very common to set it to be all uppercase um it's just tradition so that's what we normally do equals followed by string and if we want to print it we could do echo is one great way of doing that there and so environment variables can be set in four ways for your gitpod workspace you have the getpodcli the gitpodio account settings environment variables the gitpod url and getpodconfigurationfile per start task so we will jump into all those variants okay before we jump into the four different ways we can set environment variables let's talk about the defaults and prefix for gitpod so the default environment variables are set by getpod automatically every time you launch a new workspace so there's a lot of them but two that really stand out are get pod workspace id so this is a universally unique idea uuid associated with the workspace and then the getpod workspace url the unique url for the workspace if you want to see them all we'll do this in the follow along you can use the bash command env to print them all out and then you have a pipe followed by grep to say filter out the ones that start with get pod underscore because they're all going to start with get pod underscore and to talk about that prefix it's a reserve prefix so environment variables beginning with the git pod underscore are reserved for internal use by gitpod and are overridden on every workspace startup so if you attempt to set something with your own like getpodandru it will get ignored or will not be accessible if you try to override one that's existing this is just not going to happen okay so just be aware of that so one way we can set environment variables uh for gitpod workspaces is within the gitpod yaml or the gitpodconfiguration file at a per task level so here is an example of a github configuration file and here you can see we are doing env colon and then we're following up with a key and a pair and we can put as many as we want in there um and so that's going to set for the next time the environment launches notice we have the dollar sign this is not git pod specific that is just how bash scripts work and so you can do that to access the value there okay and so the environment variables will be scoped only for that terminal so that task that spins up and other terminals will not have that environment variable set and i was i was very certain to test that out and we will look at that when we do it in the follow along okay so another way we can set uh environment variables for get pod is via the gitpod url so right after the hash or pound there we can just start specifying multiple ones there separated by a comma you probably don't want to be putting sensitive things in there because you know there's potential for those to be exposed like it was access keys and secrets but it's really nice to be able to do that so the environment variable set in the url will be available in all terminals within your workspace so like where you have pertaster scope for the um uh you know per task right whether you set it in the git pod yellow file this these are going to be everywhere okay all right so another way to set environment variables is setting them through account settings and so if you go there you'll have account settings environment variables and this is ideal when you need to pass along variables that are sensitive so something could be sensitive would be like in a bus credentials so from there you can open up a new end bar and set its name its value and its scope and that's the thing that's interesting here is how scope works so in order to set environment variables for specific workspaces you need to set the scope and so if you wanted to show up for everything you could do what it says here which is provide a wild card for both uh wild card forward slash wildcard but let's look at some of the following patterns that we can set and it's going to be basically owner repo or an alternative way of saying oregon project but this is based on what is in github get lab bitbucket right so that's what you want to consider not to be confused and this did confuse me with um teams because you can have or teams and projects within um get pod and it's not based on that okay so for example we have exam pro forward slash example marketing it's going to make the nvr available to a repo called exam pro marketing owned by exam pro right and actually mine on um github is exam pro co with all capitals right which is like this over here i just wrote it lowercase for some reason over here then we have um and i'll just clear some of the drawings here but then we could say we could have a wild card on the end here so wild card repo so make nvars available to all repos owned by get pod i o um so maybe it's for across all repos and then you could have the wild card in the front as well and so this is really useful um it says for it says because i haven't used it yet for all forks right so you know it could be like git pod io and then there's like andrew brown at forward slash form so that that stuff propagates there so the scope is case insensitive so when you enter the pattern it will be down case so see how i'm up i'm entering this with title case here exam pro co um it will just down case it to exam pro co like all like all the letters uh down cased so you know you don't have to be too sensitive here when you're writing that stuff and it's just going to fix that for you okay hey this is andrew brown and this follow along we're going to look at all the options we have for environment variables because there's a lot of ways that we can set them so what i'm going to do is go ahead and create a new repository we'll call this one gitpod env i'm going to go make that private as per usual and we'll go ahead and add a readme file and we're going to launch ourself a new environment so we'll go open up get pod here and while we're waiting i probably have some code already laying around from one of our previous repositories here so i think i'll go to the ports one here because we're going to probably just set up sinatra as per usual and that will be the means for which we pass a long port so we'll give that a moment to open and as that is going i'm going to go over to the getpodio website because what i want to show to you is under your settings over here this is where you're going to find environment variables now i probably would prefer if this was scoped at a per project level but i mean of course you can launch project like things that are not within a project so i guess it makes sense that it is global but you know maybe in the future they'll add it at a project name space there which is totally fine but this is where you're going to be able to set one place for environment variables another place will be in the url in the goodpod url the cli and i think there is a fourth option in the getpodgaml file so what we'll do here is we'll just get set up and so as per usual i'll go to the hamburger menu and we will launch a new terminal and we'll wait a moment here type in gp init so that we have a git pod yaml file that we cannot mess up which is something that i have a bunch of trouble with but what we'll do is create a new file here called server.rb and we will go ahead and grab the same code so it is just this very simple code you've seen us grab it a few times from the sinatra website if you if you're looking for you just go to sinatra sinatra ruby right and here and i'm pretty much just grabbing that code okay so and then we're putting this port here with the app port again requiring sinatra we'll go ahead actually we'll type in bundle init to create our gem file for ruby and i'm just going to delete uh that can stay in there that's fine we'll just type in gem cinatra and then i'll do a bundle install so we install sinatra our very lightweight ruby web server there and so that is now installed and so i'm just thinking about this for a moment um because it's installed i'm just trying to think like what would be the best approach um so what i'm gonna do is we'll do the get pod yaml file last because we can set environment variables in here but i think that's something that we can wait for but we will need to kind of set up this file so i'm going to do a bundle install and you see me do this as a separate task but i'm just going to make my life easy by just doing a bundle install here and then we'll do a bundle exec ruby server.rb okay and so there is no port number being set here so it's going to be whatever it is i'm just going to get rid of the ports because we'll just let it launch and then from there we'll just expose ports as we go but i'm just thinking here for a moment about what i would like to do let's do it from the url first so that's what i want to do i want to see if i can change the port number via the url so what we'll do is i'm just going to make sure this works okay just make sure that the server starts up it does no problem there so we'll go and do is uh commit these this uh these files here okay and i'm just gonna say uh initial repo we'll go ahead and commit that save those changes we'll say okay so this should be everything that we need to get going so now i'm going to go ahead and just close that and so we're going to go back to example dev and we're going to look for that new repository that we just created env and so from here i mean we can click this link but i'm just going to right click and copy the link address just to save myself some trouble we're going to go ahead here whoops copy uh copy link address and again we'll paste it up in here and so what we'll do is set the environment variable up here so i'm gonna do app port equals um eight eight eight eight okay and we'll put a forward slash in there and so that means that sinatra should start up on port 888 because we are injecting environment variables that way so we'll see if that actually works assuming i wrote that correctly but i'm pretty sure i did it's not like that hard to do and we'll give it a moment here and it started up on port 888 so passing via the get get pod url wasn't too uh troublesome here and so another way that we can uh uh set environment variables i mean there's something with the the the get get uh pod cli here so here is control user defined persistent environment variables and i haven't really done much with this yet so let's see what it does i'm not sure we'll say help uh and we'll just go up here and see what it says so this command can print and modify the persistent environment variables associated with your user so to set the persistent environment variable to foo bar so we would just do that so we'll do gpe env and we'll just say app port equals 8765 and hit enter and so that just sets the port number so i'm assuming that's all it does okay so we would do echo here hmm because here it's saying this if we go here is it just because i've already set one so maybe it's just because it's already been set so it can't be overwritten because it's interesting that it's it's doing this here so i'm gonna try this again one more time and it's doing eight eight eight eight eight so let's go take a read up on what that does we'll say get port or get pod cli and if we go here we'll look at env because it just might be that we can't overwrite it so uh with gpe and v you can set an api endpoint environment variable that is accessible for the project even if you stop the workspace and start a new one to delete uh or unset environment variable uh do that so i mean it just looks like it sets environment variable so but the thing is that we sent through the getpod url so it might never be able to unset it so what i'm going to do just to rule that out i'm just going to open up a new workspace here and we'll try to set it and then see if it actually prints out all right so it's just starting up here and it's starting on port 8765 which is interesting because i definitely um did not set it so maybe what it did when we did that is it actually set it up over here so i'm just curious if we give us a refresh oh so that's what that does okay so that's really curious all right so because i thought it was just going to be temporary like you just did it within the actual workspace but i guess what it actually does is set it up in your account settings and here you can see that it's setting it for the scope so we have at app port 8765. i was going to show you this separately but i guess if we did it that way we don't have to do that there but just make note that you can do wild cards here so if you wanted this to be set for all projects so maybe you always do port 3000 and you're always using app or something like that you could do that or if you wanted it for every single fork you could do that so i could update that it would still apply but that's interesting i did not know that um so i mean that's great now let's take a look at what we would do if we set it up in the git pod yaml and i don't know which one would override so like there's one set in here but would get pot yaml have more presidents i don't know so what we'll do is just type in env i'm going to go here and do app port and we'll do it's probably colon and here i would just say 7777 you got to be kind of careful because sometimes these are reserved ports but i don't think so i just again i've never seen someone do that so maybe like four three two one might be a better idea and so what we'll do here is just save this and see what happens let's see if it actually overrides with this port or sorry this environment variable so commit env within getpod file okay and we will save that we'll sync those changes and what we'll do is just close this and we'll go ahead and relaunch that and then we'll see which takes over and we might even go to the extreme and also set in the get pod url and see what happens so here it's starting on port four three two one so even though we have set it um in here it looks like the git pod yaml is going to have higher priority here so now what i want to do is close it out and we're going to then set it in the url and see which one it takes i'm going to assume it's always going to be the getpod url configuration file first so or environment variable sorry so we'll copy this address up here i'm going to go ahead and paste it on in here and so what i want to do is just say app port equals four four four four four slash and so i wanna see if it picks up this one again i'm going to assume it's going to be the four 4321 because the get pot yaml should be high priority that's how i would code it and so it is four three two one okay so now i guess the next question is is what happens if i remove this and we do the url is it going to pick up the one from the account settings or it's going to pick up the one from here so we'll just say remove env sync those changes we'll say okay and we'll go back here and we will just copy the link address again we will paste it on in there and here i'm going to say app port equals four four four four forward slash this looks okay to me we'll hit enter we'll see what it picks up and it's eight seven six five so um unless i did it wrong but i don't think i did um it looks like that the priority is um git pod yaml then account settings and then the url is last in terms of priority okay so i mean that's pretty much all we really need to know about environment variables there are environment variables that are set for i guess we could look at also the git pod prefixes so if you type in env and you go grep um get pod you can see all the ones that are set by get pod there so if we just scroll up here for a second they have repo root so that's the root of the repository so that might be useful if you need to reference it an elix writer segment so i guess they're using segment which is a analytics tool the workspace id the interval which is whatever i assume it's how often it checks i guess that might be for the timeout because it says three zero zero zero and i know that it's like 30 minutes so maybe if we were to extend our time that would increase the context url so that's just where it was referenced to the instance id so i'm assuming it's the underlying container or something like that the url dia i think he has something to do with eclipse i'm not really sure context so we have a bunch of stuff here so you know nothing that you would really be trying to utilize but um you know there's a lot of stuff here you can see my email uh they get podcasts but um and you can't obviously override these so i'm not going to go bother to show that but just so you know you cannot override those values um or set something with get pod underscore i i'm not sure let's actually go take a look and see if that's possible so what i'm going to do here i'm just going to make up one like underscore andrew and just confirm is if you're able to set it i like i would think that it's just if there's ones that they decide to set you can't set ones with those but i just want to see what happens so we'll copy this link and we'll just paste it up here i'm going to just say something like get pod andrew and i'm going to say equals brown and it will do a forward slash it's my assumption that it will get set but it can get overwrited and we'll give it a moment here and so we'll just kill the server and what i want to do here is just type in env get pod underscore andrew uh oops we gotta grab that okay so it seems like if you set something with pod underscore it just gets wiped out won't even exist but yeah there you go that's environment variable so just close that stuff off and we might just want to delete that out there and we are good hey this is andrew brown and we are looking at the open mode uh configuration option when we are defining our start tasks so open mode allows you to configure how the terminal should open relative to the previous task so here's an example of me writing a git pod yaml file and i have a bunch of different tasks and they all have a variety of different open modes and so what you're looking for here and i know it's hard to see but it's this box over here so you're gonna just see some interesting things where uh some are split and so when you click into this one it's showing all four of those and so hopefully i can show that better um in the follow along here but there are four different options we can set so we have tab after so opens in the same tab group right after the previous tab tab before so it opens in the same tab group left before the previous tab split right so splits and adds the terminal to the right and split left so splits then adds the terminal to the left okay hey this is andrew brown and we are taking a look at vs code extension so what is a vs code extension well it lets you install features themes programming languages uh support debuggers and other tools to your vs code editor to support your development workflow and so you know if i wanted to install something i'd open up the extensions panel or explorer and from there i could install something like vim that's something i really like for my keyboard there and so vs code extensions are added to a git pod workspace in three different ways so you have builtin extensions these are extensions installed by default by get pod the open vsx registry so this is a community marketplace for extensions user extensions so these are extensions not in the open vsx registry or we're just saying like extensions that have been installed by the user okay and so vs code extensions are named dot v s i x um i assume it stands for visual studio integration extension i don't know if the eyes for i could not find out but they are vsix and so it is essentially just an archived file so if you were to rename this to a dot zip you could actually open up the archive and view the source files so there you go so gitpod comes preinstalled with many vs code extensions and you can view the preinstalled extensions by searching at sign builtin within the extensions panel here so just notice this icon here where it looks like uh four little blocks and one is broken off here if i type in at sign built in in the search at the top these are all the ones that are coming preinstalled and there's a lot as you can see here almost looks like about 80 that are installed if you count up the numbers there and so i just went through it and mostly what's interesting are the is the feature support that's installed because that's going to change the behavior and so here are ones that i thought were notable or interesting to show select git github get pod web grunt gulp image preview microsoft account merge conf conflict things like that but you know if you want to know what's being sold just take a look there you might learn something new and improve your workflow okay hey it's andrew brown and we're taking a look at the openvsx registry so it is a vendor neutral open source alternative to the visual studio marketplace and gitpod uses vs code extensions from the openvsx registry as opposed to the visual studio marketplace and so this is kind of a a screenshot of the home page of the openvsx registry which is at openhyphenvsx.org very simple you just search the name and you can find whatever you want the question is why are they using openvsx registry as opposed to the visual studio marketplace well vs vsix files downloaded from the visual studio marketplace should not be installed uh in gitpod because microsoft prohibits the direct use of their marketplace by any nonmicrosoft software even though most extensions are actually open source and not developed or maintained by microsoft so this is kind of one of those weird things where you know microsoft is not being as open as they could be for their own selfinterest and so the openvsx registry is there to ensure that you know organizations that are investing into cloud developer environments are going to run into licensing issues and also to make uh the market uh fair and competitive so that's kind of really interesting and i looked it up uh like where this was hosted and it's actually eclipse um that is the one that is behind this and eclipse has been an open source id for forever and so it's really great that they are doing this for the community so when you search extensions uh within the gitpod vs code ui extensions panel it will search extensions in the open vsx registry so if you can find it on the openvsx website then you're going to find it in here as well and for ones that you cannot find in here or ones that you need to install directly that's where you're going to be installing them yourselves which we'll talk about soon enough okay so when you are exploring the extensions panel and you're quickly looking to install some extensions you can right click on this little cog here um right here and what it will do is it'll open up a context menu it's called a context menu because it's opening a menu within the context of what you clicked that's it's just a general uh programming term and so you'll have this option to say add to git pod yaml so if you click that that will just populate your document for you which will save you the trouble of populating that yourself um but you just have to remember you'll have to commit that code to your repository for it to persist okay all right so let's talk about user extensions so there are two ways to install extensions beyond the builtin extensions the first is for all users for a project so git pod configuration file extension vs code.extensions is where we are going to set that value which we'll see here in a moment or there's the second case where you're only installing it for the current user and that's we're going to be using the vs code settings sync feature which we'll see in the next video so down below here is an example of a gitpod configuration file where we're setting vs code extensions and so we're installing ones that are from the openvsx registry by giving them their name and then down below we're specifying a url of a i assume it has to be publicfacing selfhosted vs code extension i think that this can also be a local file path because when you try to import a vi vs ix file um within the gitpod vs code interface it actually first looks locally so that would be interesting to find out but you know probably in practicality you're going to always have it online somewhere so anyway um for the extensions i just want to show you that if you were to open up the openvsx registry you can see the name there i know it's hard because it's orange but that kind of helps you understand what thing you are pulling in and putting into that file okay hey this is andrew brown and we are taking a look at a feature of vs code called settings sync so this is a feature to sync your configuration such as settings key bindings installed extensions across your machines so you are always working with your favorite setup and so with the desktop version of vs code the one you install locally not the one in the browser part of git pods you need to log in to a github or microsoft account to store the sync settings which is a json file so if you opened it for the first time it says sign in with microsoft sign in with github but with git pod when you turn on the settings things feature you're not going to be choosing an account to log in because you already are authenticated with something like github gitlab or a bitbucket but the settings data i believe will be stored on the gitpod servers and your configuration will persist across all your workspaces and when we say that we're talking about all the gitpod workspaces not necessarily the ones on your local machine okay that's something else so you can set uh extensions within your dot git pod yaml file which we'll learn in this course however some extensions which are designed for developers personal preferences should not be set here and instead settings things should be used so a very good example here would be the vs code vim changes keyboard mode okay because this could greatly impact other developers so i use them i really like vim and so i had applied this here and then one of our other developers said hey i don't like using vim i want to turn this off so it doesn't belong here and so that's the reason i'm bringing this up and also just to describe how setting syncs works a little bit different okay hey this is andrew brown and in this follow along we're going to take a look at um vs code extensions or in the context of git pods so what i'm going to do is just make a new get pod and there's not really anything special we're going to do in this one it's going to be more folks around the extensions but we got to launch something so whoops did i just launch an existing environment i'm going to go ahead and just create a new repository so we can just play around in something new and so i'll just say git pod ext for extensions we'll make it private as per usual create the new repository and we'll give it a moment here and we'll go ahead and hit the get pod button so what i'm going to do is just go over to open vsx registry and we'll just take a look at what this is so you saw me talking about it and um it looks a lot cooler in dark mode but it's not uh flipping over to that right now so we're in light mode but this is a vendor neutral open source marketplace and basically there's the other one which is the vs code marketplace right and there's a problem because you know these marketplaces look really similar there's a problem in the sense that microsoft has problematic licensing or rules around this thing and that's why this one exists so this isn't the problem this is more so the problem or at least what microsoft has done with this which is kind of unfortunate but the great thing is that you know if you are somebody that is creating um vs code extensions you can just put them in both marketplaces but if you could just put them in here honestly um and so i believe this repository is managed by clips if i just try to find it here yeah so this service is operated by the eclipse foundation if you don't know clips they are kind of a big deal because they've been around for such a long time uh which is really nice here and so the source code for open vsx is managed by the openvsx team which is very cool as well and so they have this i don't think i've ever actually looked at this but let's just take a look here so yeah so there's that with uh eclipse okay but anyway so here are all of our um but the great thing is is that if you are over here in the extensions panel here anything you search is already going to look here so if i look up something for ruby okay so we might have like this one here the reborn nix dot ruby and you go over to ruby over here and this one's not installed but i'm gonna go ahead and install it i wonder if it will pull up where it's from let me just see here marketplace so if we go click the marketplace yeah it takes us to openvsx this version of ruby extension was published by openvsx this user account is not verified from the publisher of this extension okay but anyway so here it is and so uh you get an idea of of what that is and so when you install these extensions gitpod is going to already have um they're going to have the sink turned on it's here in the wheel so the great thing is once you install something you like it's going to persist to other things but if you're working on a ruby project you might want to just include that into your getpod.yaml file so what i would do is just create a i'd say get pod open in vs code and we would say whoops i actually want to do that i want to sorry open a new terminal and i'm just going to initialize a new file and within here we're going to do an extension i can't remember what it is so i'm just going to look it up so get pod extensions like the syntax for it and there it is so i'm just going to go ahead and grab that little part there we'll go ahead and paste it on in there allow and so we know that this extension is called this and it's already in the open vs code or the open registry there and so we can just do that i'm just going to double check to make sure that's the correct syntax notice that you can also put that signed version on it if you want or you can specify a vsix file which maybe we'll try to do this one here but i guess to really test this we're going to need a secondary account where we don't have this already installed so what i'll do is um maybe i can make a snapshot for this because we haven't done any snapshots yet but anyway so i'll just create a new ruby file here we'll just say hello.rb and we'll type in puts so hello world and we'll go ahead and just make sure that works not that it matters but we'll just run it for any reason okay so that works fine and so we kind of have this little basis of a uh thing using that extension so we'll go ahead and run or commit that so initial commits and then what i'm going to do here is i'm going to go ahead and create a snapshot so we'll say git pod share workspace snapshot now i could share this in real time but i figured it'd just be easier to take a snapshot and then would be our opportunity to give that a go and i have firefox still open here on the side here so i'll just share it with this account over here so down below it created the snapshot i'm going to copy that url i'm just going to paste it on in over here and see what happens notice that this person isn't technically in the same project or anything i could just share it with anybody and so here is that project um and we'll give it a moment here we'll have to look at snapshots in a little more detail when we get to that section but what i want to find out is is this extension installed here on this version here with firefox so now if i go over to ruby is it installed it is installed okay so this firefox one is my other my main getpod account and i did not install this so you can tell that it came along there with the getpod.yaml file didn't like say hey we installed it other than the fact that we checked it but that is uh good to see i think it can be interesting if we can try to bring in a vsix file uh so that will be something we'll give it a go here so maybe what we could do um maybe there's like something a little bit more obscure that we could uh install just go back here i was trying to think of something that probably isn't installed like maybe this thing here okay don't know what it is but what i'll do yet another client cool but what i'll do is i'll go over to the extensions here and we'll just see if we have it installed yet just in case it's not good so what i want to do is see if i can download this and then reference it so we'll hit download and we're going to download that vsix file and i'm just curious because they say that you can rename these files right you can rename these files and from there if you rename them with zip you can open them up so that's what i'm going to do i'm just doing this off screen here by the way just because i have so many things here i'm just going to maybe expand that here there i'm just showing you the file i'm going to go here and rename this to zip okay we'll say yes and i'm just going to open it up and then here in winrar we can see the contents of this file and i'm kind of interested in its contents i might uh go ahead and actually download this into our git pod that's what i'm going to do so what i'm going to do is go back here and we're just going to copy the link address here and from here i'm just going to do curl maybe wget i prefer wget and we're just going to download that file within this here so if we go over here we can see the vsix file and so now uh what i can do is i can just copy this and then we're going to type it again and just change it over to zip and then i think i can just type unzip i always forget what it is but we'll try it and it did it just unzip the contents there so we have this file here an xml file that describes something and then we have the manifest file so i guess it describes its manifest and then we open up the extension here is a bunch of stuff so it looks like you can set uh the icon here it looks like it's just javascript though we opened up this package so there's like a readme about it i get i've never made a extension so i'm just kind of poking around here to see what there is so probably like this code is precompiled out so i can't imagine like the developer works this way so this is like a compiled uh version of their their source code so you probably wouldn't want to uh like um unravel this so it's not like it's showing all the details of it but you know just curious to kind of open that up but anyway now that we have the that there let's go see if we can actually specify now if you want to install this locally i'm pretty sure if we go to i saw it the other day here i thought it was up here in the top right corner people go extensions ah here we go so you can install from vsix and so here we could specify a a path all right but i don't know if this would actually take this from a a local a local path here because they don't show that in the example over here see how it's a url so i think that we would have to um host that somewhere so to speak so what i'm going to do is i'm just going to go ahead and commit this all this stuff we'll just say git add all get commit hyphen m ext code the only problem is repo is not public facing and if it's not public facing i'm not sure how it's going to pick up that extension so maybe what i should do and we can commit all this stuff i don't care what i'm going to do is just create a new repository here that's public facing get pod whoops getpod.exe example and we'll make this one public but this time around i'm just going to upload a file so here we could say upload an existing file and so i'm just going to drag that file on in okay i'm just renaming it back to what it was so we'll go there so now this file is uploaded in this repository in a public repository and so now what i want is just the raw version of this file so maybe we just yeah we grab this link here so we go copy link address and we go back over to here and get rid of this thing here get out of here it won't get out of the way i'm not sure how to get rid of context menus that are like that that's really annoying okay there we go it just closed on its own i didn't do anything so i'll paste that on in there and i again i don't know this is going to work but i'm just going to try it anyway and so what we'll do is just update our commit here so try and install http yak okay and we'll save changes we'll say okay and i kind of lost where we are so i'm going to open up the context here and we'll close the old tab and we'll just hit get pod and we'll see if that actually installs while it's going let's go let's go take a look at what this actually is get another client quickly and easily send rest soap graphql or grpc request directly in your editor so i guess it's like kind of a little convenience thing yeah i've never heard of it sounds cool though and so this has started back up and so what i want to know is is this installed so if we go to our extensions and i think that it's installing this but we'll take a look here http yak and click that it is now installed so there you go that's uh that's kind of interesting there um another thing that we can look at is the builtin extension so if you type in at sign built in this is all the stuff that is um installed by default for you and so there's quite a bit quite a lot of interesting stuff here so you can just like scroll through and kind of see the information so you got features lots of themes and lots of supported programming languages but you know is what it is and everything's really snappy too with all the stuff installed so it's really great um but that's pretty much all i really wanted to show for extensions so we'll just close all the stuff and there we go hey this is andrew brown and we are taking a look at git pod workspaces which represents an ephemeral isolate runtime system running within a docker container on a kubernetes cluster so there's a lot going on there and so i just want to take an opportunity to describe in brief a lot of these terms so first of all what is a container this is a runtime environment that includes configuration for os so operating system memory disk and network access what is docker so this is an open source container containerization platform to package application or workloads uh into containers we have kubernetes so kubernetes is a open source container orchestration to coordinate and maintain many container images and then we have ephemeral which means lasting a short amount of time and then a runtime system a piece of software that provides the programmer a more convenient environment for running programs in our case the run time system is intended for development in practicality you need to remember all these terms not so much just the fact that workspaces um are ephemeral so they only last a short amount of time and they're for development and they use containers okay hey this is andrew brown and we're talking about the underlying git pod resource size because this is a question that my cofounder came to me and said what is the power under the hood for these workspaces and when i looked into it i discovered that gitpod does not allow you to choose the power of the underlying instance and that might sound like a negative but it's actually a very strong positive because they're abstracting away a decision for you so you can just focus on the business value and that is what we call a true uh serverless offering okay and so um you could say gitpod is a serverless cloud developer environment so the underlying computing power is unknown but we generally know the limits of an individual workspace because if you go into the discourse the the forms for gitpod we've seen engineers at gitpod describe what limits there are and so the generally known limits is like v7vcpus 12 gigabytes of ram 30 gigabytes of disk and you can see there are some explanations as to what that is but the idea is that you shouldn't really have to worry about it it's the idea is you just pay a fixed cost and whatever size you need is available to you um but you can always selfhost right so if you do need more direct control of the underlying computing layer i think that would be an option where you would have to selfhost but there's so much you can do with git pod and you don't have to worry about uh picking what virtual machine you need to launch it just works okay okay let's talk about workspace lifecycle or just features of a workspace so the first is workspace timeout so after a period of inactivity a workspace will be stopped the default timeout is 30 minutes timeouts can be extended to 60 or 180 minutes with the unleashed plan and there is a few caveats that we're missing there but that's okay we have a slide dedicated uh or video dedicated just to timeout okay then we have our ephemeral storage so this is storage that will be on a virtual disk available to the workspace when a workspace is stopped the data on the affir affair removal storage is persisted and saved so when a workspace is deleted or terminated the data on the storage is lost so only the data located in that ford slash workspace is going to be persisted so anything out there when you stop it there's no guarantee that it's going to be there then we have garbage collection so get pot allows for a certain amount of stopped workspaces to remain for reuse and this is really useful if you ever have to go back a few versions there i don't know if it stops at 200 but i just know that we have a range selection of 50 to 200 so it's my assumption that there's nothing beyond 200 why you need more i don't know but um i'm just stating that number's there for you so get by will begin deleting workspaces beyond a certain number uh uh based off of days of nonuse so currently it's hardcoded for 14 days so if you have like 50 or 30 workspaces and you haven't touched them for 14 days they're going to get permanently deleted and you won't be able to spin them back up and i mean generally the idea is that you don't really want to be leaving workspaces with code lying around for that long so i think that's okay okay so let's talk about the underlying life cycle and phases for a workspace to distinguish from like when i said workspace lifecycle earlier i meant let's just say like features but that's what the documentation called it so now we're actually talking about the actual lifecycle of a workspace here so when a workspace is created it will go through a fixed life cycle separating phases these phases are currently not observable by the end user within gitpodio however i would imagine that if you are doing selfhosted gitpod uh open source version so on a managed kubernetes cluster this information would be somewhere available in the logs uh we might discover that as we do the selfhosted um follow along to see what we can see there but um it's still useful to go through these states so we understand what's happening under the hood so the first is unknown so indicates an issue within the system and that it cannot determine the actual phase of the workspace we have preparing so this is where it's building the docker image for the workspace pending the workspace does not yet consume resources in the cluster creating the workspace is currently being created initializing the phase in which the workspace is executing the appropriate workspace initializer running so the workspace is able to actively perform work either by serving a user through thea or as a headless workspace interrupted the container should be running but it is temporarily unavailable it should sir it should self resolve or running or just running or stopping sorry and so stopping that's when the workspace is currently shutting down then stopped the workspace ended regularly because it was shut down so again uh you know we might not see this until we do the selfhosted section here but i always think it's useful to kind of pull this information uh up up front here so we know what's going on hey this is andrew brown and we are taking a look at workspace instance types so within a workspace cluster several types of workspace exist the first is regular so when a user launches a workspace with the visible code energy ui this is considered a regular workspace or just as we call it a workspace other types of workspaces are headless because there is no code editor ui for the user to interact with the first being ghost so ghost workspaces are placeholders in the system they are used to scale up nodes ahead of time and are replaced by regular workspaces when needed they are a custom implementation of preemptable kubernetes pods then you have prebuilds and you will encounter this in the getpodio and so prebuilds are triggered automatically or manually performing the before init execution order sets within a git pod conversion file task so a prebuild will generate a snapshot and upload their log output for later consumption i haven't figured out where that log output is but it says that they do it and then builds i had to surmise are when a user manually takes a snapshot for sharing a workspace uh you know via a snapshot okay so there's that i think it's called snapshot but when you opened up the get pod command palette there's like an option to do that there and again these are those headless workspaces okay hey this is andrew brown and we are looking at timeouts for gitpod workspaces and there's five things i want you to know so when you stop an instance the workspace will shut down instantly deleting instance will delete the current state of the workspace stopping it will persist the data okay then when you close a browser tab the workspace will shut down in three minutes this is really great to know because i i never knew when i closed the browser tab what would happen there but it reached out and said don't worry andrew after three minutes it will shut down so that's nice to know then there's a case where you might leave a browser tab open so by default after 30 minutes it will turn off but if you need beyond 30 minutes what you can do is upgrade to the unleashed plan and that allows you to set a need new default of 60 minutes or you could just say one hour there um and then there's a case where you can even have it even longer than that so maybe you need a timeout because you're doing like a long build so you can boost the time of the current workspace up to three hours when i say up to i think you just choose three hours uh and uh that's again with the unleashed plan so here's kind of an example where somebody has the default of 60 minutes and for whatever reason they need to extend it so they press that button um and the the idea behind boosting is it's useful when you have a computational task that is going to take a long period of time so you're going to be inactive maybe you need to leave for lunch and ensure it remains running so you're just like okay i'm going to press that button like maybe i'm going to a meeting and i have and i just want to make sure my workspace doesn't shut down for whatever reason so it's not interrupted so you know those are the five cases that i want you to know okay hey this is andrew brown and what i want to show you here in get pod is a a feature of the unleashed plan or actually two features so what i'll do is make my way over to settings and go over to plans just to show you that i've temporarily upgraded here so we can show you timeout and three hour timeout boost now i don't think there's an option to choose from 30 minutes to one hour once you are on this plan it just is one hour timeout uh and it's not something you have to really worry about because you have unlimited hours at this time so it's not something you have to like try to conserve where you are trying to worry about this meter up here but let's showcase what the three hour timeout boost looks like so what i'll do is go back to my workspaces here you can do this with anything just launch whatever you can here so i'm just going to open something that i was recently working on so that was gke i'm not sure if this one was even successful i think i might have been making a video for it and it didn't work out which is totally fine but i'll just launch it anyway again doesn't matter which one you launch i just want to show you how do you do that timeout boost and i was saying like that timeout boost is really good if you have some long running tasks uh and you know that you're going out for lunch and you just want to make sure that that that thing keeps running so um i believe that it's down below here so i'm just looking for it if there is a boost so down below here see it says workout timeout 60 minutes click to extend and so you can do it here i'm not going to click it just yet but i just want to see if it shows up under the command pal so i clicked on the get pod logo in the bottom left corner it says extend work space timeout so what i'm going to do is click the one in the bottom right corner i know it's really hard to see but just know that i'm clicking it it says work timeout has been extended to three hours now would that be reflected anywhere i'm not sure so we'll just go to get podio we're going to go look at this workspace and there's no reflection that we know that it's currently being extended so you just have to know if we go back here let me just see here what happens if i hover over it so it says 180 minutes click to extend can i extend it again i doubt it okay let's go over here again so yeah it just says 180 min so 180 minutes is is three hours so the thing is you would just assume that you would keep this tab open and if you saw the the little yellow icon you know that it's still there so let's see what happens if we close this okay and then we reopen it i just want to see if that yellow little icon still stays active so that you know that it's still there so we're opening it up again here and yeah it's yellow so if it's yellow that's how you're going to know that it's extended to three hours um so yeah there you go all right let's talk about the workspace directory so when you launch a workspace the contents of your git repository will be copied to a directory or folder called forward slash workspace so here you can see i have a project called exam pro marketing it's my marketing website and so i've opened i've opened up this git pod and you can see that that folder has been cloned into that workspace directory so when a workspace is stopped the contents of only workspace is saved so when you start the workspace again it's going to have that content still there and even in the um the gitpod io it'll even tell you what changes are there like you have 132 files changed so you have some kind of indicator between different um stop workspaces the difference there so here's an example of a gitpod configuration file because we actually can change some of the defaults here so you can change what gitpod considers the workspace location and in some cases with legacy go length projects you might need to change the checkered location there's not really any reason to ever touch these options but it's just the fact that they are available to you i wouldn't even know outside of that golang project use case why you never touch these things but they are here okay hey this is andrew brown and we're taking a look at context and gitpod url so a context represents a state within your git source code and with a get pod url you can quickly load an environment for a context so here we have the git pod url it starts with this gitpodio forward slash pound and then it's followed by a url and that is what gitpod is going to try to figure out the context of when it launches our workspace so the first is repository con context and so this is just you provide a repository it's going to open it up for you to work in then you have branches or branch and commit contacts so this is really useful if you are doing feature branch workflows or that's how you do that kind of stuff or you just have any kind of branches that you have there when you have commit contexts that's when you are digging back in your old code maybe you are trying to revert code back to a previous state or there's a deep rooted issue and you're just trying to rule it out by going to a specific version uh there so here is a branch and here is a commit message with its shaw there that's the code on the end then you have issue context so feature development or bug fixing so this is where um you know like github has a project management tooling and you can say okay somebody opened up this feature this bug this whatever request and you can then open it in the context there then you have pull and merge request contacts so this would be for like code review before merging for deployment so here we have a pull request and so get pod url support github get lab bit buckets so if they have integration they're of course going to support the get pod url for that okay all right let's take a look here at share snapshot workspace so this will let you take a snapshot url of your current uh workspace at any time and share them with others so the way that would look like is you drop down file you go to get pod share workspace snapshot you can also open it up in the command palette and from there it will start to create a snapshot and so i think this would show up as a build phase underneath in kubernetes we talk about those underlying phases somewhere in the course here and from there it's going to say okay it's generated you can go copy that url to your clipboard and that's what it looked like so notice it has the pound snapshot forward slash and then a big long uuid uh there and so that's pretty much the process not too complicated so anyone clicking on such a snapshot link will get a complete clone of your workspace including the state of the workspace and the vs code layout so workspaces created from snapshots are treated as restarts so you can configure them to launch differently than if you had created a fresh workspace from git unlike sharing running workspaces snapshots workspaces are full copies this means developers can do whatever they like with the content no access to your credentials or environment variables are shared and we will double check to make sure that is true um but yeah that's that's share snapshot workspace okay so the other way of sharing git pods is via the share running workspace which allows multiple developers to collaborate on a single workspace in real time and the flow here goes as follows turn on sharing for the current workspace copy the current link to the uh to the workspace share the current workspace with other developers so the idea is it'll be a share button down below you press it you turn it on you'll get this link and then you'll just share that with other developers so a shared running workspace cannot be opened in the desktop vs code unless you're the owner of the shared running workspace so if you are used to using the desktop vs code and somebody shares a workspace just understand that there are those limitations but i have to be uh very careful here to tell you that when you share a workspace you are literally giving access to someone else to act as you within your workspace they can access sensitive information such as access key secrets stored in the environment variables the commits in the workspace will show up as you instead of the guest developer they can share that link with other people and you wouldn't even know it it is not easy to tell who is currently editing in your current workspace so it's generally recommended to avoid or be very careful when sharing a running workspace and it's just that it's just the state of this this feature for the time being so getpod has made sharing available to you they're going to continue to develop this so that you have more visibility over time but just understand that there might be some limitations there so if this is the future just review this and see if it's still true uh because some of these might have been mitigated by the time you were watching this video but just in case uh be on the side of being wary okay hey this is andrew brown and we are taking a look at getpodcli so this allows you to perform a variety of utility commands useful for daytoday use in your gitpod workspace so getpodcli comes preinstalled in your workspace and is accessible via the terminal so let's take a look at the commands that we have available to us so notice that it always starts with gp okay so that is the name of the cli but we have help so help about any command a net so create a git pod configuration for this project env controls user defined persistent environment variables url prints the url of this workspace open opens a file in git pod preview opens a url in the ides preview forward port so make a port available on 0.0.0.0 so it's exposed to internet um but you know i don't really understand what they're saying there because the way i've been using it is just to forward one port to another and we saw that in that section earlier when we were covering ports so maybe it has more than one purpose here we have a weight port so waits for a process to listen on a port sync a weight so weights an event triggered using the sync done and then sync done notifies the corresponding sync await calls that this event has happened so a lot of these we've actually already encountered in the course so i'm not going to cover those again here but we will cover the ones that we have yet to explicitly uh uh talk about okay all right let's take a look at the uh get pod cli open command and this will open the target file in the code editor so the idea is you're gonna say gp open and then give the path to the file that you want to open and so here i'm just doing gp open gem file and then it opens the gem file there uh and so that's just a a very convenient way of opening files okay all right let's take a quick look here at the gp url cli command which will turn the gitpod workspace url so there i type in gpurl and then i get that there and i just wanted to show you that if you type in env and you do a grep get pod workspace url that's going to return uh the same values so i'm just showing you that it's a convenience for uh getting the getpod workspace url environment variable okay hey this is andrew brown and we are taking a look at the preview command for the getpodcli so gpreview command can be used to open a web url in line with the vs code editor so here you can see me using the gp preview command using some fancy um uh bash scripting with it to open up the current uh machine and so you know you can see that it's completely in line within the code editor so you can use echo echoing out the gpurl and modify the url to include the port number and so originally when i was doing this and you can see this in the example here that i was doing this like weird sed thing because i didn't realize you could just do this down below so you could do gp preview and then do gp url 3000. i was doing like some weird stuff there but i found another repository that had a more convenience method so um once i discovered that i had to go back and reshoot this video so i just want you to know that that's the way you would do it this one down below the ones above here is totally acceptable as well but this is what you'll probably want to do and what i'll be showing uh in the in the follow alongs okay but there you go hey this is andrew brown and in this follow along i just want to cover some of the cli commands i haven't really been using that much like open url and preview just so that you know what to use them for so i'm going to go here and type in git pod cli and we're going to create ourselves a new private repository out of remy file and we're going to go ahead and get this going here um and we are going to launch ourselves a new git pod here and we'll give it a moment and i really don't think if you go to the cli here and they really should add this in the documentation um but i don't think that the preview at least i didn't see it had a very good example so it says gpurl8080 oh i guess they did and i just never noticed so that's okay i'm going to go back to the preview you're not going to notice it but i'm going to reshoot the cli preview to show this more condensed example but what we're going to do here is create ourselves a new folder called oops i want a folder not a file a new folder called public and in that folder we're going to create a new file called index dot html and within that we're going to say hello world and then from there we are going to go and open up our terminal and i'm just going to install http server globally okay and then we'll just say http server and leave it where it wants to be and say port 8080 and so it's going to ask us if we want to open that port i'm going to say make public and from there i didn't see it pop up but we'll go over to our remote explorer here lefthand side just make sure that the website is working there it is so you know if we wanted to open up let's say we close this file here and we wanted to open that file from the cli i'm just going to type in clear here what we could do is type in gp open and then i could type in relative to where i am so public index.html and it's going to open that up oh sorry it's gp not gh i'm thinking github it will be that'll be the way we can open up files and that's for the convenient when you're trying to uh when you can locate things easily through here and you want to open them up in the top there and then we'll take a look at um clear so i'm going to see if we have two bashes running we don't so i'm going to at this top one here can i rename this i can so we'll go here and just say like http server here and i'm just going to start up our server again so we'll say http server port 8080 and then down below here where we have our little playground i'm going to just type in gp open 8080. oops uh sorry i meant to say gp oops clear gp url 8080. and so notice what it did is that if you just type in url it's going to give you the plain jane url which is actually just the url up here if you put in 8080 it's going to add it over here and so then what you can do is take this url and you can paste it up into here which is great and so now we could use the gp preview um which will uh open something over here so if i was to do something like and i don't think it'll work in here but i'm gonna just type in google.com okay for whatever reason it doesn't like things that are outside the scope of this project but just showing you an example of opening that window there what we could do is type in get gp preview and then do this so this is like a bash thing for encapsulating uh stuff and we just type in gpurl8080 and so now we can open it up here and so that would be the convenience way of doing that so you know that's gp open gp url and gp preview if we just want to look at all them that are there i think we've pretty much used everything the other one we haven't used is stop um so i guess for fun we can just do it so we'll just do gp stop and that will that should stop this environment so we'll give it a moment see what happens is it stopping uh it doesn't look like it's stopping oh it did okay so there you go so that is all the cli stuff uh covered okay hey this is andrew brown and we're taking a look at the get pod palette commands so the gitpod palette commands is a series of commands you can use within vs code to perform gitpod actions and so this is in the command palette within vs code but if you click the little orange button in the bottom left corner you'll get all the possible commands so let's just quickly go through them to see if there's anything that you might like to use uh during your workflow and through the follow alongs you'll see me using some of these because they are useful okay so the first is stop workspace so stops does not terminate but stops the current workspace open settings so it opens account settings for the current gitpod user open access control so it opens gitpod integrations page open context it opens the context this is really good when you need to go back to the repository i use that one quite a bit open dashboard so it opens the gitpod io platform default page so it's going to take you to projects documentation follow them on twitter which doesn't hurt to have that in there i suppose open community chat so that's going to be on discord open community forum that's going to be on discourse report an issue that just takes you to github issues upgrade subscription this isn't going to upgrade your plan if you click on it it's just going to take you to the plans page so you can choose a plan so don't be afraid to click on that extend workspace timeout so only works with specific plans share workspace snapshots so this is when you create a snapshot and it returns a snapshot link for sharing share running workspace so turns on sharing i don't i generally don't do from the command panel there's like a little share button down below um open in vs code so open the workspace in your desktop version of vs code so the desktop vs code or insiders and that's just the beta version of vs code it's just another one okay so that is the command palette or palette commands for git pod okay hey this is andrew brown and in this follow along we're going to just take a quick look here at the get pod uh palette commands so if you're not familiar with uh command palette within visual studio code it's a way of executing a lot of uh easy scripts i suppose you could describe it as so the way you would access that is you go to the hamburger menu here in the top left corner and you go to i believe view you'll see command palette notice it says ctrl shift p so i'm going to type that instead and if we type that we have a bunch of different commands here that we can enter in and this is really dependent on what extensions you have installed or just uh you know the defaults that come with it i don't use visual studio code a whole lot so i don't even know what the most common ones are but i do know that there are git pod ones if you type in git pod these are the ones here and notice that there are a few extra things here that i typed in that will not appear if we just go click on the other area so just notice that you might have some advantage there if you just type it in but we click off and you open that hamburger menu again there are some of them the most commonly used ones here uh down below but if you want all the command uh palette or or git pod uh palette commands if you click this orange button down below here it'll pop them up okay so you know just so you know how to get to those again if you click any of these and you've seen us do this a bunch of times within the course i go to open context it'll open up where this repository is things like that but i just wanted to make sure you understood uh what command palette was and how to access all the get pod command palettes okay hey this is andrew brown and we are taking a look at teams and projects within gitpodio so getpod team allows you to invite people to collaborate on your project and so you can create multiple teams and and uh one thing i noticed is that if you try to name your team something like marketing it won't be permitted because getpod is utilizing something called the big username blocklist so just understand that there might be some limitations around the naming you might have to be clever but probably you won't run to the issue i just choose to choose the name marketing i just happen to hit that block list within a project you can have members and sign them roles and so you have two types of roles member and role and then projects has the main advantage of allowing you to utilize prebuilds and i want to point out that you have a personal account and you can think of it as a team of one and so within your personal account you can create projects and that in turn will allow you to use prebuild so prebuild is not exclusively for just teams okay just understand it's specific to projects so let's take a closer look at um get pod roles so within a gitpod team a member can be signed either the owner or member role but the key difference between an owner and a member is that a member cannot manage team members or delete the team and so this is the full matrix here and while i'm just getting my pen tool out so we have manage team members delete delete team invite team members add projects remove projects add project view branches view prebuilds trigger prebuilds and so at this stage of the product you just have those two roles i would imagine in the future they'll probably open it up so you can choose exactly what you want but for the time being that is what we have and it works pretty well hey this is andrew brown and we are taking a look at prebuild so prebuilds is a continuous build server that will run every time you push code to repository so here is an example of a bunch of prebuilds that are happening for a workspace and so these are really convenient let's talk about what a prebuilt workspace is so prebuilds will execute the before internet commands within your kidpod.yaml files on a git commit and produce a snapshot and we saw that earlier in the course when we were looking at execution order steps where we have kind of a visualization there the snapshot can be launched uh which will save your development team time waiting for lengthy builds okay um the idea here is you can trigger prebuilds automatically so a prebuild will trigger on the default branch for pull requests and merges from the same repository i have yet to see options to allow you to kind of customize that i'm sure they'll do that in the future you can also trigger prebuilds manually so a prebuilt can be manually triggered by adding the pound prebuild to a git pod url if that's one way you want to do it i also think that there's a tab in a project that lets you do it like configuration or the file itself but i don't think that would be a way that you generally do if you wanted to do it you probably use the get part url prebuilts have a timeout of one hour of the combined time of the before init before failing so if you know if it takes too long it will just fail here you can see i have a failed example uh in that page there so they took too long for whatever reason get pod does not cache artifacts between prebuilt each prebuilt is a clean environment what's interesting is that they do have something with dazzle which will actually cache layers and stuff like that so i think that you know this might be an option in the future that we might have that functionality but there you go that's prebuilds so with tail scale you can automatically and securely connect your git pod workspace to other development resources whether in the cloud or onprem such as a production database behind your company's firewall so the idea here is that you have your laptop it's going to connect to tail scale and through tail scale you'll have a secure connection to git pod when you're on the go so let's just define some of these terms like vpn so a virtual private network or vpn extends a private network across a public network and enables users to send and receive data across shared or public work networks as if computing devices were directly connected to the private network then the question is what is wireguard so it's a simple yet fast and modern vpn that utilizes stateoftheart uh cryptography and so then we have tail scale so tail scale is built on top of the uh the point to point open source wire guard protocol which powers an encrypted mesh network or tail net gitpod has an official partnership with wireguard so if you need to have pointtopoint vpn access um then just so you have a secure connection this is what you can use okay this is andrew brown and this follow along we're going to learn all about projects and the features underneath it so probably cover prebuilds as well so what i've done is i have a one git pod account here and i have another one over here on the side i'll just pull it up here i had to do this one in firefox and in the course we might have set up a project before i'm just connecting here uh to my my gitpod account here so here is one i know they're both named andrew brown but they're on different emails here and so the idea is i want to create a project and then once i'm in a project we want to kind of explore the feature set that is there okay so uh from the chrome account here what i'm going to do is drop down the top here and go to new team we're going to name that so i'm going to name this uh my um get pod team or maybe exam pro code team and i might have named that one previously in another video that's totally fine and so now that i have my team i need to start inviting people so we'll make our way over to members and from here you can see i have the exam pro co i'm gonna go ahead and invite one and grab this link and i'm gonna go over here to my other browser firefox we'll paste that in there and now i've been added so there's no prompt to say hey do you want to be in this group it's just if you uh click through the link you'll be added to it so we'll go back here and we'll just close and we'll give it a refresh okay give it a moment and so if i want to change them to a oh sorry a member i can i don't see why you'd want to switch yourself out from owner um i don't know what happened if you did that because if you had two members that could be disastrous but i don't even want to try because i just don't want that to get stuck um and so there's this option here remaining owner so i think maybe you're not allowed to at least remove one but again i'm not going to test that functionality there they have a filter here you can only remember there's only two roles there's not much going on there let's take a look at settings under here all we can do is delete the team i imagine the future will expand that and then we have workspaces um so as we add projects here that will go there so let's go ahead and add our first new project and so uh here we have a you actually have to select the context here so this is where you might select a different repository so up here it says git repository git lab so you can change this out to gitlab or github i guess bitbucket is not an option here as of yet but i'm going to switch over to github and so now here are all of our repositories that we could collaborate on so here i might want to launch up um hello world i might have like a hello world one in here so we'll select this one here and from there we can go ahead and create that new workspace all right and so here's student prebuilt so as soon as you use as soon as you use projects prebuilt are going to happen so i don't think there's an option to turn prebuilds off it's just like if it is a project it will always do prebuilds and in that case you might run into some uh scenarios there or some issues there but we'll we'll address those maybe in this fall along here but anyway so uh this project has launched which is really great uh and that is running but now if we go back to get pods so we'll open up our hamburger menu here and go back to our get pod dashboard and we go under the workspaces we can see oops notice here i'm not in um the right project so we go here go to project so there it is so we can see that we're on main it started a few seconds ago it has prebuilds and if we go to view all we can just kind of look at some of the options here so here a prebuild was successful and we go to configuration here and so we have some options here so configuration already exists in git run a prebuild or open the new workspace to edit the controls so i suppose you can edit this and then run or prebuild i've never found any reason to do this um but i guess it could be a way of like forcing a prebuild for you to test things we'll go back to our branches here and apparently you can do things with branches as well um so i'm not exactly sure what we would do here but um i guess like we could just go ahead and create a branch and see what happens so we go get check out hyphen b um we'll call it development here because i'm just trying to think like how that would affect workflow maybe staging might be a better branch i'll just say git push and then we'll have to push upstream here which is totally fine we'll say allow and hit enter okay we'll make our way back over here and if we give it a refresh i'm going to see if that registers that other branch okay and so i guess from here this would be a great opportunity for you to launch a new workspace so this will do prebuilds always the main branch will always do it and so i guess here we can run it manually so i don't know i don't know if you push to a branch if it will actually trigger it i'm not sure if that prebuild is running i don't see it running let's just give it a refresh here i i don't feel like i clicked it so we'll go back here one more time we'll say run prebuild okay so i don't see anything happening here um unless it's delayed or something but from the documentation remember you can only really do it for the main branch so maybe that functionality is just not there yet but we can launch a new workspace for that staging environment that or maybe there's nothing to prebuild because it is forked off that other one so maybe it's based off the the main prebuild so what we'll do is we'll just make some super minute change to the code here and then maybe that is what we need to trigger it so i'll go over here and we'll just say hello world and we'll just add an extra exclamation mark here and what i'll do is i will go back to um we'll commit that here so we'll add it and say minor commit because i'm really curious that the prebuild will trigger and uh we will go back here to uh this oops i guess we'll have to go back to the dashboard and then close that tab and so now what i want to know is it going to trigger that prebuilt because i don't think it will on this branch here right so we go over here no prebranches or prebuilds what if i do run prebuild okay ah so now it's running so i think that was the case was the fact that i had forked it and or not forked it but i had created a branch but it was like there was no difference between the main ones so there was no reason for it to run a prebuilt now will it run and prebuild every single time i'm not sure so again we will go ahead and launch this new workspace and we'll just make a test see here if it automatically runs because maybe once you've done one prebuild it will just keep triggering but as far as i'm aware it shouldn't i think it would just be it wouldn't do that so go back here add another exclamation mark whoops or net sign that's totally fine too it doesn't really matter we're going to go ahead and commit that into exclamation and we'll say okay and we'll give it a moment to sync we'll say okay just making sure it syncs because it's doing this funny thing here so i just don't have confidence that it's doing what it's supposed to be doing and while we're waiting on that i'm just going to open up the dashboard again here and i'm also going to open up the context because i just want to see did it push that change right so i go over here and we have uh we need to go to the staging branch right we are in staging no so i don't know it's acting kind of funny here so what i'm going to do is just launch it again and that's the nice thing when these environments are temporary you can just keep launching new ones so i'll just launch a new one we'll give it a moment here and so um if we go over to our our code here again i'm just going to try one more time to change this and we will go back here we will add this file we'll just say miner change and we'll commit this and we'll sync the changes again okay and that worked no problem this time so i'm not sure what the issue was before but that's okay and so just to confirm back in the staging here i'm just going to double check to make sure that change has been applied remember i haven't told it to manually run so that's what i'm really interested to find out here so we'll go back and open our dashboard and we are going to wait for that to load we'll click into that it says ready a few seconds ago i'm going to go to prebuilds there's only two here so i think again like if you want to build these minor ones you're always going like the other branches you're going to have to go here and uh trigger that though it's not saying there's anything new there's no available actions we'll go back over to prebuilds here it would probably help if i had a different name but that's four minutes ago so um yeah i'm not sure give you a refresh here so a few minutes ago so for whatever reason i can't seem to trigger a new prebuild so but anyway i guess the thought is like really the the stuff you're going to be focusing around is the main branch okay um so i think that's pretty much it with uh projects not super complicated but i think i might want to just run through prebuilds a bit here and just look at a scenario where i ran into where i was confused and like there wasn't an issue but i just wasn't uh realizing that the prebuild was the part that was kind of difficult okay so i'll just make that a separate video and we'll just pick up here in a second okay all right so what i'd like to do now is just to kind of show you some friction you might run into prebuilds because you need to kind of adjust your script to work in a prebuilt environment and it's not hard it's just thinking about prebuilds personally i would recommend if you can to always have a prebuilt environment or projectbased environment so that when you engineer your git pod yaml file you don't have to rework it but let's see if we can run into that case so maybe a good example would be just to try to build out a very simple project that has um sinatra and we've done that a few times so maybe we can just pull from our existing examples so what i'm going to do is just go to getpodgitpod.com here and i'm just going to kind of look through some of my examples here um we'll go show more so we have google play drive init cli example website is this the one where we use uh sinatra no this looks a lot more complicated that's me forking their website so that's okay we'll just start from scratch it only takes like a couple seconds to do i just can't seem to remember because it's been a few days it looks it's for you it seems like i just i just recorded it's been a few days since i've made the sinatra one so what i'm going to do is create a a new repository here i'm just going to say prebuild sinatra sinatra prebuild example and i'm going to make this private and we're going to go ahead down below and add a readme file i'm going to create that repository we're going to give that a moment to get created we're going to go ahead and launch that git pod we're going to go to sinatra ruby just so that we can get a little bit of code here to work with and that's all we're going to really need so i'll go back here and give it a moment to load we're going to go ahead and make a new file i'm going to call this server.rb whoops server.rb uh rename we're gonna go ahead and paste that on in there so we'll say allow and so we're requiring our sinatra we'll need a gem file as well actually i'm gonna use bundler to do that so we'll go to new terminal and we'll say bundler init and that will give us a gem file to start off with i need sinatra so i'll copy the contents there down below we'll just type in jam sinatra so that's fine we'll do a bundle install to install sinatra and so once we have that there um we're going to just take out the that part there so we don't have to worry about it and so now we need to create our gitpod file so we'll say gpnit they'll get us a starting script here port 3000 is okay for me i'm fine with that and so i need a few things here i'm just looking off screen to this code here to see what it is that we can do here so i don't have to forget but we don't need a before command because we don't really need to change the ruby version uh rvm list so we are using ruby version 2.7.4 which is fine um but what we might want to do is to run something so it might do things like bundle install something we definitely want to do and for the command we're going to want to start this uh the servers up saying bundle exect ruby ruby um it was a port 3000. i can't remember how we set the sinatra ports go the docs here ports uh configuration settings ports port sports ports it's like setport like that eh so let's just say um whoops we'll go back to our code over here where's the code oh we're in hello world whoops so go back to this one up here and we'll go into our server file here and we'll just say set environment actually it's set port and that's where we do the 3000 right so what i'm trying to get at is that um let's say we want to actually set the we'll just say env and we'll just say app port here and as an example we might want to set the um in here the port number so we might go like export port app port 3000 and actually i don't even know what it starts on by default so that's not going to check first just case it starts on that port by default server.rb here so this starts on port 8080 so let's say we wanted to be on this port it's going to look at like export um environment variable as an example here i always forget how to do it so i just double check i always feel like there's like a dollar sign i'm missing so it's export name equals whatever okay so we'll go back over here and so this would set the app port there and so this app down below should pick it up right if i just do server.rb that should technically work port 3000 that's totally fine so what i'm going to do now is just restart this app and just put that there so that doesn't error out but i'm going to commit these okay so attempt to or sorry just initial commit okay and then we'll just sync those changes we'll say okay we'll give it a moment i'll close up some of these other tabs here and so what i'm hoping for and we'll open up the context here what i'm hoping for here is that when i launch this get pot it's just going to work right it's going to do the bundle install it's going to export the environment variable of course we could just set the environment variable in the task but i'm trying to stage an example where when you move over to prebuild you have to kind of consider how that's going to change so we'll give it a moment and it's opening the tab it's good it's starting on port 3000 and it works right so this part here whoops um this part here worked right so what i'm saying is like when we move this over to prebuilds this init step is going to run but the problem is is that it's not going to carry over the state over to this one so it might install but i my expectation is this export option won't be there or another thing it might be like cd into the directory so one thing that we might do that might be a better example would be to make whoops to make a subfolder here so we might make a new folder here and we'll call it um you know application or sorry project here and from here i might take uh these files here and just move them into yep let's say move it's okay we'll take the gem file here and move it into this project here okay and actually i might call it app instead so we'll say rename app and so instead of doing this you might say like cd app right so we're going to cd into it first and so let's see if that works because again i'm just trying to stage that example to show you what i'm talking about because i remember that's where i ran into seeding where i thought i would be already seated in so if we cd in the nit will it do in the command i believe it will so uh small changes here put things in a folder and we'll go ahead and commit that we'll say yes we will sync those changes we'll say okay and what we'll do here is we'll wait a moment and i'll go back over to this i'll close this tab out and we'll launch git pod again and that should cd into that directory and work and then we will go then make it a project and see how that changes with the pre builds all right so we're waiting here a moment so it's working so it definitely seeded in and so i don't know if it shows sometimes it shows the script of what it ran so if you look at the script this is what it did it said cd app bundle install export and then it did the the next thing which was the command so it's treated like in one go in the same environment so now what we're going to do is we're going to go make our way over to get podio and i want to make this actually a project so i'm going to make a new project here and then i want to choose this project here when it when it gets a moment here and we're going to choose the um it's on git lab again so that's fine we'll just change that to github it really likes to default to that gitlab which is totally fine and this is called sinatra so we'll type in sinatra here we'll click here we'll select we'll create a new workspace and now it's going to do the prebuild and so my expectation is this is going to fail right because when it goes through there it's going to cd in the one thing and the other one's going to start not in the cd directory so give it a moment here all right and so notice it says could not locate gem file or bundle okay so if we scroll on up you can see um we are seeing that there's stuff that around the prebuilt so it says cd app bundle install export stuff this is stuff that happened in a separate environment right it didn't happen um i'm just trying to see if it shows it very clearly yeah so these are the prebuilt logs that it ran right but the thing is is that um that was in the prebuild environment we'll bring back up the slides here to make it more clear okay so here right it ran before and init so it did it went seeded into the app directory and it set the environment variable and then when it became over here it's starting from scratch so it's not in that cd directory and i don't even know the environment variables there let's see if that persisted because that might be interesting so i'm just going to say env grep and we'll say app port okay and it looks like it is set because it's saying it right there let's just say echo app port maybe dollar sign goes to show like i've been doing links for years i can remember this stuff so it's not set so the environment variable got set in the prebuild environment and it's seeding that directory and that's where before becomes very useful because it's going to run twice right so um this is where we would take our script and um the bundle install is totally fine there but we'll just go and we will add a before step right and we will just take the cd out of here and the app out of here okay and so the idea is that that's going to run both times in each environment right so this should technically fix our problem we'll go ahead and save this file and we'll just say fix prebuilds and we'll commit that we will sync those changes we'll say okay we'll give it a moment great we'll close our tab and i'm going to open up pod again and so you notice the prebuild's happening so it showed us the screen if our prebuilds had already occurred we wouldn't see it apparently you can stop waiting for prebuild which i would never do that but there could be a case where you have a very very long prebuilt you just want to get into the environment so we'll give it a moment and see if that fixes our issue apparently there's a way to trigger prebuilds from the url it's not something that i have found a requirement to do if you're really interested you could look it up um but there's that while we're waiting there we might want to look at pin projects it's something i haven't done with gitpod yet so you can i guess not projects but workspaces so as far as i understand if you have pinned a workspace it will remain there longer i believe so that is one advantage there is that if you have an environment that you want to stay you can just pin it okay and i don't think it will get deleted see unpinned workspaces that have been active for 14 days will automatically be deleted so if you have pin an environment and i don't know if you can pin multiple ones can i pin this one can i pin that one i have a feeling there's not like a pin limit so you could pin as much as you want i wouldn't probably recommend that but that might be something you need to do i haven't found a used to pinning so far here down below it says exit so i have a feeling that the prebuild is done sometimes it gets stuck on the screen so you can just close that out and go back over to your projects here and um just launch it again okay if you ever see that it's not a big deal just because it's ready right so it's not perfect right like you just have to kind of like and there's no different than like using aws cloud service providers you just have to kind of be watching and aware and just being like okay i've waited too long let's see what we can do here and have confidence so we're waiting a while here for this to start up and um let's see what we have so it says here uh could not find sinatra gems so bundle saw to the install missing gems so it didn't work as we thought it would we are cd into the correct directory we'll do grep um or we'll just maybe echo it so we'll say echo app env or app port so the port is set so that definitely fixed it why the install failed i don't know because it did run it up here as you can see and sinatra 2.1 is installed um let me do bundle install here you know it probably is it's my script so if you go over here because i changed it maybe into the cd directory because here it cd's into it right but it would see into that one as well so that shouldn't affect it let me just try running bundle exec here bundle exect rubyserver.rb okay so that runs no problem there's nothing to change so i don't really trust what happened there so i'm just going to throw this environment away and launch a new one so we'll open up the context we'll close this out we're going to wait a moment here we're going to go ahead and launch a new one i'm just gonna see we're gonna make a new workspace there and we're gonna just see if it works this time around because i'm not sure what it's complaining about but once you're used to using prebuilds and you have the environment working it's usually not a problem but sometimes there's a bit of friction moving from a nonproject to another one and that's why i say like if you start with a project it's a little bit less painful someone says this task ran as a workspace prebuild could not find sinatra um things like that so run bundle and salt to install the missing gems so i'm just going to scroll up here and just see what it ran so again there shouldn't be a problem so i'll go back over here allow yeah so it's acting like the gems aren't installed is the gem file there the gem file lock is there hmm this is what i'm trying to figure out like hmm i'm not sure i'll be back here in a second okay all right so i had a little bit of time to think about it and you know what i think is happening is that when you install ruby gems they're not installing within this workspace directory and since anything outside this workspace directory gets blown away i think that's the reason why i'm having this issue now if you're using node node installs in the current directory so here like if i wanted to fix this problem i would just have to look up like okay how do i install uh the gems in the current directory if i want those to be cached and in place so i think like for ruby workflows it doesn't take too long to install gems but i think in this case for like ruby you have two options you can install based on the vendor so like bundler install gems in current directory or something like that so i could do this right and that would probably solve my issue um or you know i could do you know something else but that means when i run the uh uh bundle of stall i think i'd probably have to specify um where those gems are but you know the simple solution here would just be saying okay every like to this and put this here right but it really depends like if the bundle install takes really really long time then maybe i would want to uh move my uh gems to a vendored like directory like doing the path so it's really going to be up to you and the the constraints of your language but i think that is the reason that is happening there so again not a big problem i move that there and we're okay but yeah i think we're all done here and uh you know hopefully you understand how uh prebuilds work okay hey this is andrew brown and we are taking a look at git pod pricing so for good pod they have four uh possible plans available to you so we have the basic uh which is free personal at nine dollars usd per month professional 25 usd per month and unleashed at 39 just deeper month of course uh always make sure you double check the prices because they may have changed um but you know generally they should be this if you go look online they don't have the option to pay annually at least they did not see through the checkout process there but if you do need annual maybe just contact their team again i don't see anything describing like an annual discount i know some organizations care about that kind of stuff that's why i mention it but good pod is really uh nice and easy to reach out to so you know they probably can make those kind of accommodations for you but let's take a look at what changes in terms of the feature set for these plans so no matter what plan you're using you get unlimited private and public repositories which is really nice in terms of the amount of workspaces you can run in parallel it's for for free and personal i don't feel like i'd ever be running more than one workspace at a time but you know maybe you have more than one tab open and you're toggling between uh maybe different domains of a microservice app so that's totally possible so that's something to consider for professional you have eight parallel workspaces unless you have 16 parallel workspaces in terms of timeout it's by default 30 minutes between basic and professional and on unleash you extend it to one hour as the default right so every time it launches up it will do that um then the next thing is how many hours do we get per month of of runtime or consumption so for the basic you have 50 hours for personal it's 100 hours a month uh and for professional it's unlimited hours and then just for the unleashed plan you have the option to do a three hour time boost so what they're saying here is that imagine you are just you're just about to go for lunch and you are running some kind of operation that you know is going to take a long time to run so you know you don't know it's going to finish but you have to let it run for a long time and so this is your opportunity to boost it so that your workspace doesn't time out after an hour and so that is the reason for that option and so that could be extremely useful okay so let's take a look at some of the other um plans they have that are outside these four here so there's the pro open source so this is a special plan for professional open source developers with unlimited hours on any public repository so you know this is just to help out people that are developing open source to help them reduce cost because it's a lot of work to give out open source stuff uh right so then there's a student plan so this is a a special plan for students so you provide an email uh with your uh domain of the institute educational institution so it probably have to be dot edu or what have you but the idea here is you get unleashed for nine dollars a month which is really nice then there's git pod for startups so this is eligible startups that can get unleashed plans for up to two years on git pods and there are some particular requirements so you do have to read into that but if you are a startup that is a great opportunity for you there then there's get pod self hosted professional so these run get this runs the github platform on your own uh private networks or managed uh uh like manage kubernetes clusters within your own aws azure account what have you and this is at 35 dollars per month starting with the 11th user okay so let's talk about how you can monitor your hourly usage so as you use gitpod you consume in a lot of amount of hours based on your plan and so if you go to the plans page it will show you this remaining hours things and so here you can see i have 78.5 hours for the remainder of the month and so this is the way you could keep track of your current usage is there any way within the gitpod workspace uh i didn't find it um but if there is i'd love someone to tell me but this this is great too so just if you want to keep on top of that okay all right so this follow along what i want to show you is where you can track uh your current usage so here i'm on git pods to go to getpod.io it should generally bring you here to projects and so what we can do is make our way over up to here in the top right corner or i think this goes the same place as long as you're in your personal account but if you go to the top right corner and go to settings and if we go to the left hand side to plans what we'll see is this kind of bar meter here so it says open source but this is actually the basic plan so there's a bit of inconsistency with the naming here i believe you know if we go to uh maybe here if we just open this in a new tab um it doesn't show it here if we go here to this pricing tab so this says basic right and so it says 50 hours and just going over here notice it just says open source so for whatever reason there is just that minor inconsistency but understand that is the basic plan but if you notice here it says upgrade your plan to get more hours parallel workspaces those remaining hours 43.6 and so i've been using this quite a bit and it hasn't been running out which is really nice um is this present anywhere else no so i was looking through like the get pod interface or command pals and things like that to see if it would be displayed somewhere else it isn't uh anywhere else uh as of yet um i'm i could imagine that they might want to do that in the future but for the time being uh this is where you're gonna have to find it but honestly like again i'm just running this and never really knows so if you are uh hitting this limit then you probably do want to upgrade because you're using it very seriously uh but there you go okay so gitpod also offers team pricing so team pricing uh or a team plan is for organizations to pay on behalf of their team members to centralize billing to a single account so the idea is you say i need x amount of members uh for uh this type of plan and that will be for your teams and so you can also set the currency there's nothing else that is um available around team pricing it's just a way of centralizing your billing maybe in the future they'll add more particular things just for teams but for the time being this is what it is okay hey this is andrew brown and we're taking a look at selfhosted git pods so git pod oss or open source that's what the oss stands for allows organizations to selfhost their own gitpod platform on their own private networks so getpod is built on top of kubernetes and the short form of communities is k8 so and it has deployment instructions for a various amount of managed k8 services so to list a few we have google kubernetes engine so gke lightweight kubernetes so k3s elastic kubernetes service so eks azure kubernetes service aks rancher kubernetes service rks but i think that it's going to work on anything that has kubernetes so you know if digitalocean has an offering or vaulter has an offering or you're running your own kubernetes cluster you know on a virtual machine i imagine that you could probably do it for selfhosted offers what you're going to get are the public and private repos integrations will get lab github and bitbucket unlimited prebuilt shared workspaces snapshots admin dashboard so basically everything if there's something that's not in there i'm not sure what is not being listed but it seems like everything you get in get pod i o selfhosted is offered in two tiers the open source so the first registered users are free and then professional exceeding 10 users you need to pay for professional plans so to upgrade to professional you need to obtain a license and one question i have and i have this question because this is the same thing with terraform cloud where they have something similar after you exceed a certain amount you are paying but the thing is do you pay for the first 10 users i don't know i could not definitively answer that question for you i'm going to lean on the side that yes when you are when you cross over to the 11th user you've got to get your professional key you're going to be paying for 11 users which i think is fair because it's not like it's going to be super expensive and at that point you should be able to pay for them but i don't definitively know okay hey this is andrew brown and we are looking at get pods security so gitpod employs a variety of security controls and security best practices so let's take a look at this so the first is compliance if you're not familiar compliance it's basically compliance programs that are industry standard or best practices and you have like a thirdparty company that does a testament to say yes this company is meeting those requirements and then they get a certificate to prove it that they they are doing that stuff so one thing is git pod is sock to compliant and so this ensures your service providers securely manage your data to protect the interests of your organization and privacy of its clients so this is a really good thing to have it's also really expensive so you know that they're taking security very serious a lot of times you'll see the iso 2701 with this as well but you know this is good the other one they have is gdpr so um the gdpr is guidelines for the collection and processing of personal information from individuals who live in the european union so basically everybody is being gdpr no matter where they are in the world because it's the internet and anyone can be from uh from europe coming onto your website so this is pretty common so it's good to see that they just mentioned that there so we have environment isolation so get pod workspace or prebuilds run on a secured single use container separate user pid mount and network namespace for each gitpod workspace stress test namespace layering implementations by third party company kin can volkswagen companies specializing in kubernetes so i think namespace layering is very important because it just it is virtual isos isolization between clients okay then there's the fact that gitpod is open source so open source allows for a faster security feedback loop allows gitpod partners customers or the community at large to identify disclose or contribute fixes to critical exploits we have authentication and authorization so getpod uses version control systems uh single signon and you can apply granular or finegrain permissions based on the providers integration options so they're basically offloading that that concern over to get lab github bitbucket and you know those are very large companies so you know their practices are going to be very very good uh we have integra or sorry uh encryption so they have at rest encryption so all data including workspace backups and environment variables are using advanced encryption standards so aes256 and then we have uh in transit encryption so gitpod uses transport layer security so tls so there you go hey this is andrew brown and we're talking about the security vulnerability disclosure policy so if you believe you have discovered a vulnerability privacy issue exposed data or other security issue relating to gitpod you can report it via the security vulnerability disclosure policy and you can read all about it here it's a big document if you want to have a fun time to read the policy outlines the steps for reporting to gitpod they pretty much say like hey if you do report it you can do it and you're not going to get in trouble because a lot of people are concerned that if they find a problem and they report it that they're going to get in trouble for doing that um just because and so you know they kind of outline that and just also give you a lot of extra information there to report you need to email gitpod providing as much detail as possible to security at getpod.io uh some companies will have a form and the language of this document suggests that they do have a form but it turns out it's just email so i imagine they might have a form of the future but it's you know email's fine too so there it is okay hey this is andrew brown and i'm just on the get pod website because i just wanted to show you here at i o forward slash security the kind of stuff that they have here so they just say like who is using get pod so you know it's safe how many uh developers companies are using so you understand the scale of it some of their principles uh that they are uh considering or they are implementing i should say uh so they're secure by design uh about their compliance the things that we already covered in uh the lecture content um but the thing that i just wanted to show you here is the security vulnerability disclosure policy because there is a bit more there that just couldn't fit on the screen so there's a bunch of stuff here that you might want to read about the interesting part is like safe harbor a lot of people are concerned that you know if they report a problem that they might get in trouble for it but getpod saying uh you know if you find a vulnerability and you share with us don't worry you're not going to be uh getting in trouble for it uh and we just want to make sure that you understand that so that we encourage people to submit things as you can see here it is at security at get pod io if i click on this there wasn't a form before still no form it's just going to the same place here so maybe eventually they'll have a form but honestly all forms do just kind of give you some additional fields here uh you can just basically write whatever you want in there i guess they have uh thanks some contributors here like sneak and get lab and stuff like that but yeah that's pretty much all you really need to know for security okay hey this is andrew brown and we are taking a look at get pod support so git pod has a wide range of support options and so we're just going to quickly go through the list here so that you're aware of them nothing super exciting but just making sure you know what's there the first is documentation so technical documentation describing the various features of git pod we have a change log so historically release changes so it shows you features and bug fixes there's a community form which is just a discourse form with community and official support we have the discord server so this is a chat server to interact with community members and get pod employees in real time we have the gitpod roadmap so this is a github project which is basically a kanban board showing planned and upcoming features based on annual quarters there's a status page so this is an atlatian status page showing up time and service interruptions for the underlying infrastructure so like maybe the kday uh the kubernetes customers running gitpod workspaces and the getpodio platform that's probably what it's for we have git pod or is our github issues so open tickets for bugs or feature requests directly on the open source project account settings so change email settings notification settings nothing super exciting there obviously you can change your plans so that's another option as well and then there's the sales support form so send an email to gitpod's sales team about selfhosting educational discounts reselling or other gitpod does not have a paid tier support or direct tollfree number for individuals however enterprises may inquire about additional levels of support after contacting sales because if you're a bigger company they're probably going to roll out the red carpet for you but they just don't say like explicitly hey this is the tier that we offer and things like that okay hey this is andrew brown and we are on the support page here ford slash support because i just wanted to show you some of the varieties of support that you can utilize so the first thing is we have a status page here so we go ahead and open that up we're going to see it's kind of an uptime uh here they're using the atlatian status page so a pretty common one here to just kind of show you what's going on here so if you look at workspaces we see operational here's some part partial outage and more of some partial outage here you can see the duration here um says in the u.s region so clearly they're operating in multiple regions here i've never ever ever experienced any kind of problems uh working with github but it's really nice to see they have this status page uh here a workspace stuck uh stuck in stopping okay so you can see that there's some information so that's kind of interesting um you know if you go to contact support i don't know if this is just email so oh we have a form here so you can see report reviews billing educational uh discount verification subhosted git pod it looks like some of the context changes a little bit here so you go ahead and fill that in and send that over um we have the change log we just go ahead and open that up so this is gonna just tell you what they've been uh adding to the product so here on october 14th we have introducing teams and projects so these are basically linking to blog posts just talking about what has been released down below you can see the fixes and improvements so it's not just features but it's also bug fixes there if you open that up you can see that it is all on github so again it is an open source project so that's really great there too if we go to the community forum that is in discourse um now i've yet to sign up for oh sorry this is discord um and i do actually have that this is over um i'm just gonna pull it up here in a moment so this is over here i'm not sure what i'm looking at here but um you know here is the get pod so i'm actually uh sitting in this here as well and talking as i work on this course i've been updating the uh build in the open here so they're very active and this is a great way in real time to connect with um get pod employees developer advocates and get help there or get directed to different kind of support options um the uh the form is really good too this is community forum this is discourse oh i thought i clicked this does this go to the right place let me click that oh i think i found a bug i think i found a bug so in this case what i'm going to do is just take a screenshot here and i think someone just has a missed link here so we'll go down below and we'll go to support i'm just gonna say here you know i think this is supposed to link to the discourse but it's going to the discord and that's a fair that's a fair uh issue there just because like discourse and discord are very similar so it wasn't me what happens if i go here no see that's goes the chat so that's going to the wrong place unless i got rid of the discourse get paw discourse let me try this again let me try this again discourse form oh okay so i think maybe they retired it which is totally fine um honestly it doesn't say here but honestly like i found that like i didn't really have a use case for the discourse i'd rather just be in the discord where is real time i'm not going to go back to my course and update that because i'd rather just leave this in here just to kind of show that that is a edge case there so i probably what's going to happen is it'll end up just changing that wording here to discord and then that confusion will be gone but there was a discourse at one point and i was pulling some kind of information from it but you know honestly again i prefer just to do everything on discord let's go take a look at the get pod road map so this is just a project here we go over here to the top notice this git pod io road map you go here you can see all of their getpod repositories did not know you could put a readme there that's really nice but down below you can see all these here right and so if we go back and go to the getpod product roadmap you can kind of see what's being worked on at the current moment so we are in uh q4 and so we see introduced project level environment variables team pricing jetbrains remote development support image layers faster workspace startups which honestly they're really fast to begin with but if they can make them faster that's great and future stuff so that's a great way to just kind of see what is coming down the road in terms of git pods so that is really nice as well we saw the status page if you want to report a bug it's going to probably take us to the github yeah that goes there so if we open that up i think it might just prepopulate some text for us yeah so it has some nice boxes for us um this is not the discussion these are just forms so that looks really good so we'll go back here and um we'll go all the way back and then you get to selfhosted thing or your account settings not so much to look at the account settings as we've seen this quite a few times in this course so really they're just like talking about like notifications like what do you want to turn off which there aren't a lot of options there or managing your plan right there's not really support within the get pod i o per se you always have to reach out to the discord and stuff like that click on help this just goes back to the support page but that gives you an idea of the level of support and honestly it's a lot it's really great so and i said this also you know in the in the lecture content but you know if you are an enterprise i would imagine you just reach out and you know if you're if you are large i'm sure you'll get a direct phone call with git pod and they probably would create some kind of custom support plan for you but they don't you know they just don't say it here on the pricing okay so i just talked to them i said yeah if you're if you are an enterprise would you do some kind of deal and they're like yeah of course we would do something you know um but they just don't show it as a as like a lot of places we'll have like a fifth box saying like contact us okay but there you go all right so i just want to show you the support in action so it was actually really great that uh this uh this happened because i can just show you like i just went here into the discord i opened a ticket it became a thread i went into here you can see pauline said check out the announcements over the announcements and i i assume that it was rolled into it and so we go over to our announcements here and you can see that uh you know they've said that they've um they've they've uh you know have archived the discourse and so now they want to make the discord the future home and again i think that is the right place for it so i'm really happy with it if you're looking for the old stuff because there is some stuff in there that is good but probably by the time you watch this video you might not be interested but they did go and archive all the old stuff here so it is still accessible it's just read only on the wayback machine uh but yeah it was a great opportunity to uh see that in action so there you go hey this is andrew brown and we're taking a look at git pod open source so get pod open source is a combination of open source projects built by get pod and so you know when i was looking at the uh github repos i just noticed that there's more than just one and so there's one called werft and this is a kubernetes native continuous integration system we have leeway this is a heavily caching build system for go yarn docker projects dazzle this is a experimental docker oci image builder its goal is to build independent layers where a change to one layer does not invalidate the one sitting above it and then there's open vs code server which is a fork of uh the vs code project there and so um you know we don't really need to know much about these here but this is the one that we really care about because this is pretty much what powers get pod i o okay that's what get pod io's it's it's a um a managed version of this and so we're gonna give extra attention to that one okay hey this is andrew brown and i just want to uh poke around here on the get pods um team or organizational page that is on github so that's at github.com forward slash get pod hyphen io and it just shows to show like how much stuff they're doing with open source so they have 159 repositories that you can see who in their organization is there if you want to reach out or just kind of learn more about get pod you can even sponsor them if you want because again it's open source projects so that is an option to you uh get pod does make uh money on their uh platform side but you know helping in either way can always help out uh there is projects i think this is like a new feature of github which i don't really understand as of yet so here's a project and they have a bunch of itemized items like a road map here don't fully understand it but that's kind of interesting there but we go into the repositories and there is a lot you can see all sorts of things i think the reason why there's so many is because all of their templates live here so we looked at the quick start template so just understand that's why it's so large but the main one here is get pod here at the top so we'll open that up and we'll take a look at the website here um and we'll just go and take a look so here's git pod so get pod automates the provision of ready to code developer environments so this is going to be for the actual platform right so i believe that when you want to uh self host this is the repository you're going to be using this is the same experience you get when you go to getpod.io so it will give you that gui and also this interface here this thing the underlying thing is based off um the open vs code server which we'll look at separate uh in another video because i actually want to show you how to run that on your own um but yeah this thing is here how you use this i don't know i guess we'll have to look that uh look at that if we do show the self hosted git pod option i'm going over to the website basically anything that you see on the website in terms of the documentation you can absolutely contribute to so like let's say we go to get pod i o uh forward slash docs i believe and we go to some page like configure here um if you go and click edit and get pod this will launch this environment if you look up here you can see oh it went too quick there but you can see it's loading up the website here so we'll just give it a moment okay and actually this might be a great opportunity for us to correct that discourse option right because they no longer have discourse which is totally fine and it's discord so maybe through here we can help with that language so we saw it on the support page and i'm just wondering how we could go find that so and you know i'm not that familiar with it but i'm good enough that i can kind of make my way around here so if i go to let's say contents there's probably a global way we can search so we'll go here and i'm going to go to find in files and we'll just type in discourse we found the discourse logo support ts so i feel like it is here okay and if i go over here oh look it's oh no it's not missing it's just me so this is community forum if you're looking for help with common requests connect with our community on discord okay and then so from here i'm going to just change that so use discord instead of discourse okay and then we're going to go ahead and commit that and we will sync those changes the thing is is that we can't push to main we'll need to have our own fork which is totally fine so i'm hoping it'll prop up and say hey you need to have your own fork so is not accessible please grant necessary permission so let's say open access um so i guess we kind of have to make our own fork here i think that's what we're gonna have to do so what i'm gonna do here is go back and i'm just gonna go and fork this uh here so where's my fork here we go fork but just kind of show you like how you can contribute to get pod which is kind of interesting so now we have the website ourselves and we are going to go ahead and just close these out and reopen this here now if you're watching this of course you don't have to do this just because i would have already made the change but it doesn't hurt to go through this process to show you so again i'm going to go to the top left corner here we're going to go file and we're going to say find in files or whoops edit find in files discourse we'll go to support here and there are a few here that still say discourse but we really want discord so we'll just switch that over to discord i'm going to go over here to the right hand side and did i save that file i did there we go so we'll just say change wording from discourse to discord and we'll save that and we will sync those changes and we'll say okay and before we open or like we submit our pull request we should probably open a ticket so here on the main one we'll go over to issues we'll open up a new tab and i'm just going to open a new ticket here and we're going to file a bug report i'm going to open up get pod io forward slash support here actually i want to keep that other tab open so just keep it there for a second and oh sorry we want to go to get pod io for slash support and i'm just going to take a screenshot here okay we'll go back over this ticket and um so i'll just paste that in there so we'll just say um gitpod is no longer using using um discourse so the wording here needs to be changed to discord all right um and sometimes i'll say like show the example so what we'll do is just go ahead and grab that link here paste that on in um it requires all the other ones here i don't like that they i mean this is not uh git pod but like they've kind of forced these parameters so say um git cloud support page should say discord instead of discourse okay and then i'm just gonna grab flamingo emoji i'm gonna be like the worst person ever and just kind of like phone it in the whole point of those boxes to make sure you do it right so we'll just say that we'll put in those anything else okay and we'll go ahead and submit that ticket because i just need an issue so when i submit it i can tie it to that right so now i have this uh pound seven one one three and so what i'll do is go back to mine and so now it says uh you know your branch is up to date and i want to go to pull requests here um you know what i didn't make a fork that's what i should have done so if i go back over here we're gonna just stop this here i'm gonna go get checkout hyphen b and we're gonna just say uh discourse old wording and then i'm just going to push it allow and uses a good habit to put the id name in there but i didn't do that which which is totally fine and so we'll see if it allows us to just push seems to be doing some kind of diagnostic i'm not exactly sure why not sure what that is for but what i'm going to do is go back and refresh here because i did this recently but it seems like there's been a few changes here and so i'm just not exactly familiar with it just yet so it looks like the branch was pushed if i go back here and give this a refresh the branch should show up um so say old and notice like that some people are putting the numbers in there so that's a good thing to do but we'll just say uh disc discourse old wording and so i want to uh merge this in so i think if i go back to the original git pod here and uh we make a pull requests let's say new pull request here and notice this is main and main so compare main and um i want to do it for mine so we'll say old uh compare cross forks we'll click there okay i could probably done it from here again it's just it's always a little bit confusing you just have to kind of be doing this on a regular basis if you're not doing open source a regular basis can get confusing so compare the base to here i think we want the one on the right hand side here so we'll say old um get pod or discourse oh i have to change this to my repository so oh and i'm in i'm in the wrong one i'm supposed to be in website okay so we'll go back here lots of mistakes on my part here but not a big deal because usually it'll it'll pop up sometimes and say hey do you want to make this pull request or something but we'll say new pull request and it's not showing my old ones but what we'll do is compare across forks again and i'm going to say for that branch there discourse oh i'm not choosing my darn branch there we go okay let's just me creating so much trouble so i don't want to do it against maine because that's not proper you're always supposed to do it from a feature branch or whatever kind of branch you want to call so we'll call discourse here there it is and so now what i'll do is go ahead and create a pull request we have some text in here and so what i want to do is link the related issue so it fixes if we go back to did i open this in the right place oh i opened this to the wrong place oh sorry this is supposed to be open on the website okay all right that's embarrassing so now what i got to do i'm rolling my eyes if you can't see it but what i got to do is go back to the website here i can do the second take of this so this is the take you're going to get for this video but we'll go ahead and we'll open this issue again we'll say um doc feedback okay this is a lot easier to work with here um so we'll type in https forward slash forward slash get pod io forward slash support i'm just gonna go grab that again so we'll say get pod i o four slash support okay and we'll just paste that on in there like that and we'll just say um uh gitpod no longer uses discord or sorry discourse so the text here needs to change from discourse to discord because that's where it does actually redirect to and uh change wording from discourse to discord we'll submit that and so there is our ticket now we have our issue so we'll go back to our pull request and we'll say this fixes that so we'll go over here they'll link to that renaming discourse to discord on support page there are still other lingering cases but i was just showing this for the purpose of a video demonstration okay so go ahead and create that pull request and so there i've contributed to the get pod open source um so you know hopefully that gives you kind of an idea of like the ecosystem here and why it's valuable because you don't have to wait on get pod you can start to take action or dig into things but uh yeah there you go hey this is andrew brown and we're taking a look at openvs code server so openvs code is a version of visual studio code that runs a server on remote machines allowing access through a modern web browser so git pod and github code spaces uses the same architecture at scale so open vs code server can be run on a linux machine so a virtual machine or on a docker as a container so here's an example if you wanted to start it on a virtual machine and here's an example of you wanting to start it on docker and actually uh when git pod first came out before they had the i o offering this is what i would use to try to launch my own vs code on aws and it worked i just wasn't able to figure out how to make the space the the server turn off reliably where getpodio has clearly solved that in a very intelligent way so just to clarify you have the vs code as open source you have open vs code server which is a fork that's built on top of the vs code open source code base then there's the open vs code which is used within git pod and other tools which that's where we get gitpod.io the gitpod platform okay hey this is andrew brown and we're taking a look at openvs code server and so this is a fork uh developed and maintained by gitpodio so here you can see the original fork is vs code by microsoft and so this one was modified uh just to give you a bit more flexibility and the key thing is that this is what gitpod is using so if you want to run your own uh openvs code server it's not too hard uh but you know if you really do just need an environment to work with your team strongly recommend just using the getpod platform itself but you know for whatever reason if you want to know how to do this i figure it doesn't hurt to show you how so there are two ways to run it via docker and linux linux is the easier way to get going so that's what i'm going to show you here today so i'm here in my aws account and i'm going to make my way over to ec2 and you can do this for anything whether it's azure or gcp or any platform as long as you can run a virtual machine but i'm just going to use a best because that's what i'm most comfortable with so i'm going to go ahead and launch a new instance here i'm going to choose an amazon linux 2 instance which is generally recommended i'm choosing a t3 micro here but any size will do these small sizes work pretty great here and the key thing that i need to do here is make sure that i have an i am role that has permissions to sessions manager i'm just going to open this up really quickly if you're not familiar with this stuff here i just want to show you if you go ahead and create a role all i'm doing here is typing in ssm whoops uh maybe uh sorry create a role here i thought i already clicked it and so you'd say for ec2 you go next and we would go ssm here and in here we would want to get access for um amazon ec2 roll i think this one is old so you have to use this one instead which is not a big deal i think i'm using that anyway so you create a role with that permissions and that's what we are attaching here uh as our role and that's gonna allow us to do sessions managers so we don't have to use um ssh keys or things like that but once you have that there we'll go over to our security groups we're gonna have to open port 3000 i think that's what it runs on default actually i think it's port 8000 so we will open that up um and we'll go review and launch we'll say launch we will launch with no key pairs so proceed without a key pair because we do nee do not need one here and we'll give it a moment to launch so we'll go here and click on the instance itself and so it'll take a little bit time to launch they're not too long but what we're going to need to do is go get the latest uh downloads if you just open this up in a new tab under linux you scroll on down you'll notice we have arm64 arm hf x64 or x64 is for the i guess the intel chip and these are arm chips so uh since we launched a virtual machine that's uh on the x64 architecture that is what we're going to be using so here i'm just copying the link address because if you look at it's a raw raw link directly to the tar atar is like a zip file or an archive but once this is running and usually we wait for the two status checks to pass but i'm just going to go ahead and connect because i think it will work we're just going to connect with sessions manager that's why we set up that i am role with um ssm the simple systems manager access to sessions manager and so this is going to open up a black screen and from here i'm just going to type in sudo hyphen ec2 uc2 user just because oops sudo su hyphen ec2 user just because it always starts us off as a different kind of user and we want to be the ec2 user here but what we can do is type in wget space and we'll go ahead and paste that link in and hit enter that's going to download that tar there i'm just going to type in clear just to clear my screen to make things easier i know the fonts a little bit small so i'll try to bump it up here um and so if we just have to untar it so i always forget what to type here so let's go ahead and copy that and we'll paste that in there and we will follow up with openvs code server hit enter and that's going to expand the archive so we can go cd into that directory and now it's just as simple as running this period forward slash server sh so sh is a bash command or bash script and so if we do period it's equivalent of saying like sh like if you did it like this but uh it's more popular to run an extra cable like that so we'll hit enter and that's going to start on port 8000 and here it's going to give us a web uri so we want this part of the url whoops i didn't mean to click it through there hold on here it doesn't make it too easy to click but if we just shrink our font there go back to our instance we want that public ip address i'm going to go ahead and grab that paste it on in here and then i just need the end so just go ahead and grab that and try to copy it it doesn't make it easy to copy so you might have to open your browser like this and we'll go back over here paste that on there and it should hopefully work fingers crossed um port 8000 cannot be reached so just double check make sure that is correct looks okay to me we grab the public ip address so that should be fine oh i think we stopped the server by accident okay i'm just seeing if it changed yeah it did change i'm just gonna click that again okay so we just got to be really careful there because i guess it's very finicky still running okay good and i just need to delete out this part of it here yeah we know why it's forbidden that's totally fine okay and i think it's working we'll just give it a moment there we go so here's vs code it's or openvs code uh and so you know that's a way of selfhosting i mean the thing is is that you have a lot that you need to solve if you do this like how are you going to persist uh your data so like you don't lose it or how do you back it up how do you make it intelligent so that it knows to turn off when you are not uh using it i guess there's a lot of things here you'll also notice that it's a little bit different from the one that uh um get pod uh uh gives you so like notice it doesn't say get pod on the bottom or have the command palettes and things like that so this is really just being able to run the um open vs code server okay like if you needed this kind of editor here um but anyway you know it is something you can do and it's part of the get pod project so i just wanted to make sure uh that i showed you there let's go ahead and shut down this ec2 instance so we'll go ahead and just terminate that instance there so let's say terminate and i'm pretty confident that it's terminating so i'm i'm confident that is going to be destroyed not worried about it so yeah there you go openvs code