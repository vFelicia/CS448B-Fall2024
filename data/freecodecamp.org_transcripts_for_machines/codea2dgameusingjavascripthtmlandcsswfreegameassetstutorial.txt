frank dvorak teaches this javascript game development crash course you will learn how to create a 2d game using javascript html css and object oriented programming and frank provides a lot of free sprites and game art assets so you can follow along frank is a popular teacher who creates super creative courses what a strange planet it's completely covered in a thick layer of smoke initial scans indicate there are no organic life forms present but i register a lot of movement coders hope you like making games let's make a 2d steampunk game completely from scratch with html css and javascript no frameworks and no libraries i will give you a lot of premium art assets for characters environments and props and you can do whatever you want with them you can use them in your projects and you can modify them i will show you how to create gameplay variety by giving different enemy types different mechanics that the player can interact with or has to deal with for example if you destroy a hive well a bunch of small drones will come after you let me show you how to give your games beautiful visuals and how to apply many special features i came up with specifically for this class let's go these creatures have very similar physiology to the earth's seahorses body shape like this can cut easily through the thick atmosphere of this planet they can move very fast seahorse hive is being attacked by something this one has been damaged i wonder if we can hug this creature's central computer to control it for a while it is surprisingly easy to override its circuits seems like these machines are not used to our technology i'm getting a lot of new data ok explorers we are getting a stream of data about multiple different species we will convert their source code into html css and javascript let's analyze it line by line and see how it works we have a lot to learn i will answer all your questions as we discover more about their movement special abilities and how they interact with their planet's environment let's look under the hood of this alien ecosystem the atmosphere is thick enough to allow heavy silicon based lifeforms to float but smoke is blocking most of the sunlight many creatures developed artificial lights and glowing appendages to see through the heavy clouds seahorse sentinel has a basic attack that's powerful against weak enemies but if it absorbs energy from one of the overcharged creatures it gets additional firepower for a short period of time and it instantly replenishes its ammo ammo also automatically recharges over time it seems we just need to help it to get through these aggressive swarms in time so it can join its hive if this is your first time discovering javascript you should try some beginner classes first today's coding will be beginner friendly but i expect some basic knowledge of javascript when you get more comfortable with objects arrays and for loops come join me in this class so after a simple basic setup inside index.html and style css we move into script.js all javascript logic for this game will be written here inside this file i create an event listener for load event notice that we call it on built in javascript window object which represents the browser's window load event fires when the whole page has been loaded including all dependent resources such as style sheets and images we need to do this because we will use a lot of graphics in this project and they can take some time to load if you're trying to draw an image with the javascript remember that you always have to wait for that image to be fully loaded before you run the javascript code that depends on that image i usually like to do html kind of a setup like this custom variable i call for example canvas will store the reference to canvas element i point it towards that element using getelementbyid i give it an id of canvas1 now i need socalled drawing context it is a builtin object that contains all methods and properties that allow us to draw and animate colors shapes and other graphics on html canvas to create it we need to call a special builtin getcontext method on a variable that holds a reference to canvas element so i say canvas dot get context and then i need to pass it identifier sometimes we call this argument a context type we can pass it 2d or webgl here webgl represents threedimensional rendering context today we will work with 2d now i access width property on canvas from line 3 and i set it to 500 pixels height will be 500 as well as you can see 500 pixels is wider than my current browser size for that reason i also like to declare max with property and i set it to 100 percent that way the element will scale down until it's fully visible in the available browser area i also declare max height in case the restricting factor is the height of browser window doing this will make sure we can always see the entire canvas element even when the browser window is too small i will zoom out a bit to adjust my workplace for this tutorial i set canvas width to a larger value and keep my browser window small canvas element will scale down to make sure it's fully visible to build our game today we will use object oriented programming which means we will wrap variables and functions in objects javascript is a prototypebased objectoriented language which means it doesn't have classes it has prototypes but we can use modern javascript syntax that introduced classes as socalled syntactical sugar simplified clean syntax that mimics classes from other programming languages still under the hood it's just working with prototypebased inheritance one of the four main principles of objectoriented programming is encapsulation encapsulation is the bundling of data and the methods that act on that data in objects access to that data can be restricted from outside the bundle in this project i will encapsulate our data into multiple classes each class will have its special purpose the challenge for beginners will be to keep track of how these classes communicate with each other i will explain everything step by step as we write the code to help you understand we need to declare our classes in a specific order class declarations are hoisted in javascript but they stay uninitialized when hosted that means while javascript will be able to find the reference for a class name we create it cannot use the class before it is defined in the code this means that i need to declare input handler class first because i will need to use it inside player class and so on input handle class will keep track of specified user inputs for example arrow keys projectile class will handle player lasers particle class will deal with falling screws and bolts that come from damaged enemies player class will control the main character it will animate player sprite sheet and so on enemy class will be the main blueprint handling many different enemy types layer class will handle individual background layers in our parallax seamlessly scrolling multilayered background and background class will pull all layer objects together to animate the entire game world ui class will draw score timer and other information that needs to be displayed for the user and the main game class will come last inside this game class all logic will come together this will be the brain of our project i hope this gives you a map of what we need to do to complete our game let's write javascript logic inside individual classes and connect them together i will explain everything step by step as we go along constructor is a special method on javascript class when i call this javascript class later using the new keyword constructor will create one new blank javascript object and it will assign its properties and values based on the blueprint inside player will need access to game weight and height and other properties that will be stored on the main game object so i will pass it the main game object as an argument like this i convert that game object into class property on player class like this i'm saying take this game object that was passed as an argument to the class constructor and turn it into class property called this dot game keep in mind that by doing this i'm not creating a copy of the main game object and placing it on player objects in javascript are so called reference data types which means that unlike primitive data types objects are dynamic in nature i'm just creating a reference that is pointing to the place in memory that stores the main game object so when the values and properties on the main game object get updated those changes will be immediately visible from this dot game reference inside this player class i made the size of player sprite sheet the same size as we will draw them in game it's a good practice i know that the width of a single frame in my sprite sheet is 120 pixels and height is 190. if you are a beginner it's best if you use the same sprites and images i'm using it will make the debugging easier in case you run into problems you can always check my code to find the problem all art assets i'm using are linked below you can download them from the project section starting horizontal x coordinate on the player will be 20 pixels and vertical y position is 100 player will also need an update method to move it around and draw a method that will draw graphics representing the player for now let's start by increasing vertical y position on the player by speed y i need to declare that property here it will be 0 at first so no vertical movement draw method will take context as an argument this will specify which canvas element we want to draw on in case our game has multiple layers with multiple canvas elements it's also a good practice to use context argument like this rather than pulling ctx variable from the outside directly into our objects at first i will just draw a simple black rectangle representing the player so built in canvas fill rectangle method and i want to draw the rectangle at player's current x and y position and it will have players with and height so we have our player object how do we include it inside game logic and draw it on canvas as i said the main game class from line 45 will be the brain of our entire project all the logic will somehow go through it again i will give it a constructor constructor will need width and height of canvas as arguments and inside we convert them into class properties this will make sure that the width and height of the game matches the size of canvas element constructor on javascript class is a special type of method that will run once when we instantiate the class using the new keyword it will create one new blank object and it will give it values and properties as defined inside the blueprint here i can take an advantage of the fact that all the code inside the constructor gets automatically executed like this and any code i put inside the constructor on game class will automatically run when i instantiate my game in a minute so when i instantiate game class i want it to automatically create an instance of player class and i want that instance to become class property on game class called this dot player so this.player is equal to new player like this the new keyword is a special command in javascript it will look for class with this name in this case player and it will run its constructor method to create one instance of it based on the blueprint inside so by calling new player online 49 javascript will find player class up here on line 17 and it will run all the code inside its constructor i can see that constructor method on player class needs game as an argument down here we are inside that game class so i pass it this keyword this keyword used inside this class refers to this entire game object our game will also need update and draw methods update method will take this.player property from line 49 which holds an instance of player object and it will call its update method we defined online 26. inside draw method we will render the player on canvas by calling draw method from line 29. i can see that it expects context as an argument so i pass it context like this and that value will be passed along here now i create an instance of this new game class we just wrote and i save it in a variable i call for example game it's equal to new game like this again new keyword will look for class with that name it will find it on line 45 and it will run its constructor method to create one new blank javascript object and assign it values and properties based on the blueprint here on line 46 i can see that game class constructor expects width and height as arguments so i pass it canvas width from line 5 and canvas height from line 6. so the new keyword triggers a class constructor as the constructor gets executed we hit this line which will automatically create an instance of player class from line 17. so this is how by creating the main game object we also automatically create player object and now it sits as a property on the game class on line 49 perfect we will also need animation loop that will run update and draw methods over and over 60 times per second updating positions and redrawing our game i create a custom function i call for example animate inside i take the instance of game class from line 59 and i call its associated update method we declared on line 51. i will also call draw method from line 54 like this i can see it expects context as an argument to specify which canvas element we are drawing on so i pass it ctx from line 4 this means that this ctx variable will be passed here and it will get passed along to draw method on player object here now the player knows where we want to draw it after we called update and draw we want to trigger the next animation frame so i call built in request animation frame request animation frame method sits on the window object but we can also call it just like this it tells the browser that we wish to perform an animation and it requests that the browser calls a specified function to update an animation before the next repaint so we need to pass it one argument and it will be the method we want to call before the repaint before browser window gets updated and redrawn on screen i pass it animate the name of its parent function to create an endless animation loop request animation frame has two special features it adjusts the user's screen refresh rate for most of us it will be 60 frames per second it also auto generates a timestamp argument and passes that as an argument to its callback function a little bit later i will show you how to use this feature to create periodic events in our project events that repeat in a certain interval i get an error because i misspelled the word constructor here i'm using vs code editor it highlights syntax in different colors which makes it easier to notice typos like this we have our main game logic and we are drawing this black rectangle representing our player it looks static but it's actually animating we can test that by giving players some value here in speed y property the reason the rectangle gets longer now is because we can see old paint we can see old black rectangles that were drawn in the previous animation loops i can fix that by deleting all canvas drawings between each animation frame between every animation loop i call built in clear rectangle method and i want to clear canvas from coordinates 0 0 to canvas with canvas height like this now you can see that because player speed y property is set to plus 1 the player moves by 1 pixel per frame in positive direction on vertical y axis if speed y is 1 player will move upwards if speed y is 0 the player will not move at all it's all because for every animation frame we are adding speed y property to player's vertical y coordinate here on line 27 we know that everything is working well it's good to test your code as you go step by step to discover potential problems i want the player to be controlled by keyboard when i press up arrow we set speed y to 1 and player will move up when i press down arrow we set speed wire to plus 1 and player will move down we will handle all player input up here inside input handler class constructor will take a game as an argument same as we did with the player i converted into this.gameclass property as we said before when we create an instance of a class all the code inside class constructor gets executed we can take advantage of that and i can even apply event listeners from here i simply choose apply event listener like this we will listen for key down event callback function on event listener has a special auto generated argument that contains all kinds of additional details about the event that just happened if i want more details about the keydown event i just need to pick a variable name and i pass it as an argument to the callback usually we use letter e or the word event but you can also type abc whatever you put here will become a custom variable name containing a special object with additional information about the keydown event that just happened i will save it in a variable i call e and i will console log it if you choose console.log e you will get the full event object with many properties i've done this before so i know i want a specific property called key so i console e dot key this will contain a string with the name of the key that was pressed let me show you i need to create an instance of input handle class so as we did with the player i want my input class to be instantiated automatically as i create my main game class so here inside the game class constructor i create a property i call for example this dot input i set it the new input handler and i know its constructor expects game as an argument so same as we did with the player i pass it this referring to this entire game class so now as i create game object down here it automatically creates player object on line 54 and input object on line 55. as we call the new keyword on line 55 javascript will jump to line 9 and it will run input handler class constructor which will among other things apply this key down event listener that's console login the current key that is pressed i open browser console i click on canvas element so it starts registering events and now when i press keys on my keyboard you can see we are console logging the key property inside key down event listener i say if e.k is arrow up take keys array on the game object we will create that array in a second and push that key into the array i create that array here on line 59 inside game class constructor its job will be to keep track of all keys that are currently active that are currently being pressed down i will console.log this.game.keys from here to check if arrow up key is being correctly added i get a console error that is saying that the variable name i'm calling keys from is undefined by the time this callback function is executed javascript forgot what this.game stands for which object it points towards we want javascript to remember that this code initially sits inside this object so that it can see and remember this.game property even when we call it later as we play our game if you are a beginner don't worry about fully understanding this yet all you need to know here is that if javascript forgets what this keyword stands for we need to bind that code to the surrounding codes context we can use built in javascript bind method or even simpler we can use es6 arrow function syntax here a special feature of arrow function is that this keyword inside arrow function always represents the object in which the arrow function is defined arrow function will never forget that it was originally defined inside constructor on input handler class and it will always see this reference for this.game from line 10. therefore it will be able to access this.game.keys and push keys inside now everything is working when i press up arrow key it gets added into this.game.keys and if i press it multiple times it keeps adding more and more so i create another event listener this time for keyup event when we release the key i want to remove it from the array i do that by checking if the array contains that key so built in index of array method the indexof method returns the first index at which a given element can be found in the array or it returns 1 if the element is not present so if this.game.key's index off is more than 1 meaning if key's array contains the key that is currently being released in this key up event take this.game.keys array and remove that element from the array using splice method the splice method changes the contents of an array by removing or replacing existing elements splice method needs at least two arguments the first argument is the index at which we want to start changing the array so it will be the index of that key we want to remove like this and the second argument is delete count an integer indicating the number of elements in the array we want to remove from that starting index so i call splice i want to remove elements starting from this index and i want to remove only one element at that index i put the same counter lock inside key up event you can see that it works well when i press up arrow it gets added when i release it it gets removed added removed nice the problem is when i hold up arrow key down for too long key down event will start firing over and over but key up event doesn't fire so we are not removing those keys we are adding multiple keys we are adding the same key over and over increasing the size of the array this can also be fixed easily i only want to add that key into this.keys array if it's not already present in there so additional condition here if this.game.keys index off the key that was just pressed is 1 now when i press and hold the key gets added only once when i release the button the key gets removed perfect on keydown event i check if key that was pressed is arrow up and at the same time i check if arrow up is not yet in the array only then i push arrow up into this dot keys array on key up event i check if the key that we are releasing is present in the array if it is i remove it using splice method we have the main logic now and adding more keys is easy just be careful about brackets here it's easy to miss something and get an error i wrap this part in another set of brackets and i check if key that is pressed is arrow up or arrow down like this now keys array on the main object can contain nothing and can be empty or it can contain up arrow key or arrow down key and it can even contain multiple keys at the same time in our case both arrow up and arrow down so now keys property on the main game object is an array that always keeps track of presses and releases of up and down arrow keys i store this array on the main game object on line 67 so the information of what keys are currently pressed is available all over our code base it's also available inside our player class because player has this dot game property here on line 35 pointing towards the main game object i can simply check if this.game.keys includes a specific key and i can change player behavior from here i check if this.game.keys includes arrow up notice that before i use index of method to check if element can be found in the array i can also alternatively use built in javascript includes method to do the same thing the includes method determines whether an array includes a certain value among its entries returning true or false as appropriate if this line returns true we want player to move up so we set speed y from line 40 to 1 else if keys array includes arrow down we set speed y to plus 1. i save changes and click canvas and now i can move player up and down by pressing up and down arrow keys the only problem is that player will never stop moving we need to add one more small condition so else meaning this.game.keys array doesn't include arrow up or arrow down we set speed y to zero instead of hard coding minus one and plus one here maybe player speed is dynamic and player can speed up during a power up for that purpose it's better to save max speed in a variable like this so we have current player speed on line 40 and maximum player speed on line 41. let's try 2 pixels per frame and i replace hardcoded values with variables on lines 44 and 45. if we press arrow up speed y is minus max speed if we press arrow down speed y is plus max speed like this now we can change player movement speed if we need to by changing max speed value on line 41 and this is one of the techniques i like to use to handle keyboard inputs in my games if you have any questions or any suggestions how to improve this code let me know by leaving a comment player will be shooting lasers at enemies we will create them by using a class i call projectile constructor will need three arguments the main game object so that this class has access to game properties when it needs them and starting x and y coordinates those need to be dynamic passed as arguments from here because starting coordinates of each projectile will depend on player's current position as usual i convert the arguments past to class constructor into class properties width will be 10 pixels height will be 3 pixels speed will be 3 pixels per frame update method will also increase horizontal x coordinate from line 30 by speed from line 34. i will also need marked for deletion property which will be initially set to false and if horizontal x coordinate of this projectile object is more than width of the game meaning it has moved across the game area this object can be deleted i will actually set it to 80 of the game area so projectiles will be coming from player here to somewhere around here because i don't want enemies to be hit and destroyed off screen let's say that the lasers have limited range so if horizontal coordinate of the projectile is more than 80 of width of the main game area said they're marked for deletion property from line 35 to true this will flag that projectile as ready to be deleted and removed from the game we will remove them in a moment before we do that we will also have a simple draw method that will take context as an argument and i call built in fill rectangle method that will represent the projectile i want to draw that rectangle at coordinates this dot x this dot y and i pass it this dot with this dot height from lines 32 and 33 we will use images and animations for everything soon but first let's set fill style to yellow and draw yellow rectangles for our lasers i will also have to define fill style here on the player a device that yellow color will apply on it as well i can set it to green or black like this so we have our projectile class ready how do we add them into our game one way to do it is by creating a special custom asset on player class player will have two different attack modes so i will call the basic one shoot top in this mode the lasers will be coming out from the mouth of our mechanical seahorse when shoot top method is triggered i take this dot projectiles array i will create in a minute and i will push new projectile inside using the class we just defined on line 27. i created this dot projectiles array on player class this will hold all currently active projectile objects up here i can see that class constructor expects game x and y as arguments so i pass it this.game from line 51 and the current player coordinates so this.x from 954 and dot y from line 55 i want player to shoot when we press a key so i go up to input handler class and here i will make it very simple i go inside key down event and i say else if key is space bar so just space like this you can also use enter or any other key if you want when we press space bar use distort game reference from line 10 and navigate to its player property and from there call shoot top method we just defined since i'm holding all projectiles here on line 60 on player class i will handle projectiles here inside update method i take this dot projectiles array and for each element in that array i call update method we defined on line 39 inside that method i have this check if the projectile moves across the screen we set its marked for deletion property to true i want to remove those elements from projectiles array i will do it using javascript filter method like this the filter method creates a new array with all elements that pass the test implemented by the provided function so here i'm taking projectiles array i call filter on it and the test is that i want all elements to have marked for deletion properties set to false so exclamation mark here this will filter out and remove all elements with marked for deletion properties set to true and since we just said that filter creates a new array we want to override the original array with the new one that was filtered here with this line of code in place every time we set marked for deletion property to true on any projectile object it will get removed from projectiles array i will check if it works by console log in this dot projectiles from inside shoot top method i will also call for each on all projectiles from inside draw method and i trigger draw method from line 43 on each one i remember that i need to pass it context so i pass it along the value from here like this i save changes and run my code and i can see we have an error on line 45 i go up to line 45 and i forgot to call fill rectangle from context so javascript doesn't know what to do with it i fix it like this now i click on canvas and i can move up and down using keyboard arrow keys and i can shoot using spacebar in browser console i can see that projectile objects are being correctly added and removed from projectiles array perfect let's remove these two console logs to clean up our code now the console is cleaner and it's easier to see how projectile array adds and removes objects nice right now we can shoot without limits i want the player to have limited ammo that slowly recharges over time it will also get completely refilled when we collect a special power up fish down here i say if this.game.amo which we will create in a minute is more than zero only then create new projectile object i go down here to line 104 and i create this new ammo property initially we will start with 20 ammo for example every time we create a new projectile we decrease that value by 1. now i can do it 20 times and then it stops even if i keep pressing spacebar we run out of ammo here on line 80 i can change which coordinates the projectiles start from in relation to the current player position we will match it even better when we apply player sprite sheet a bit later to make sure it comes out from the mouth of our steampunk seahorse we will get back to this i can offset it here or i can also do it inside projectile class itself when we use all 20 projectiles we completely run out of ammo i want it to slowly recharge over time to do that i want to run a periodic event in our code base and i want to be able to measure time in milliseconds and say for example every 500 milliseconds every half second automatically recharge one ammo to do that is easy if you know this technique with timestamps and delta time let me quickly explain how it works here on line 116 i create a variable i call for example last time its job will be to store a value of timestamp from the previous animation loop so that we can compare it against the value of timestamp from this animation loop this difference will give us delta time the difference in milliseconds between the timestamp from this loop and the timestamp from the previous loop like this where does this timestamp value come from request animationframe method has a special feature it automatically passes a timestamp as an argument to the function it calls in our case animate i can use it simply by giving it a variable name here you can call it whatever you want as long as you keep referring to that value using the same variable name i will call it timestamp spelled like this and i will use it to calculate delta time here on line 119 after we used last time to calculate delta time for this animation loop we reassign last time to the timestamp from the current loop so that it can be used to calculate delta time in the next loop so request animation frame auto generates a timestamp value which is a number in milliseconds since this loop started we access it here in animate assign it a variable name for example timestamp like this we calculate the delta time which is the difference in milliseconds between the timestamp from this animation loop and the timestamp from the previous animation loop and then we set last time to timestamp from this loop so that it can be used to calculate delta time in the next loop don't worry if this is a bit complicated to understand at first it's a very common technique and it will become more intuitive as you use it in multiple projects i can control delta time to check if it's working my delta time is around 16.6 milliseconds thousand milliseconds one second divided by 16.6 is around 60 so i can see that my game is animating at 60 frames per second let me know if you get the same value or something else if you had an old computer delta time value might be higher because it takes your computer more milliseconds to render animation frame if you have high refresh gaming screen delta time value could be lower for you i wonder if we have any coders here who use that type of screen remember to remove your console locks when you don't need them especially this one that runs 60 times per second it could affect the performance of our game if i just leave it here so we calculated delta time we know how many milliseconds it takes for a computer to render one animation frame to run one animation loop i will pass it to update method here and we can use that value to run periodic events in our game or to measure game time the advantage of this technique is that it doesn't matter if you have strong super computer or a very old slow one delta time measures actual milliseconds in real time so periodic events will happen roughly at the same time on slow and fast machines regardless of their ability to animate our game slow or fast to trigger periodic events in our game i need two helper variables one will be timer that will go between zero and some kind of predefined limit each time it reaches that limit it will trigger some kind of event and it will reset back to 0 to count again for the next loop the second helper variable will be that limit that interval value that timer needs to reach so i want to replenish some ammo every half second 500 milliseconds i will also introduce some hard limit i want the ammo to automatically replenish only up to this value not endlessly so starting ammo will be 20 maximum ammo will be 50 for example inside update method on game class i will use ammo timer and ammo interval helper variables and also delta time to trigger this periodic event that replenishes ammo every 500 milliseconds i say if ammo timer from line 107 is more than ammo interval so 500 milliseconds inside i will also check if ammo is less than max ammo like this only then i will increase ammo by 1. then i reset ammo timer back to 0 so that it can count again else keep increasing ammo timer by delta time i am calculating delta time on line 128 and i'm passing it to update method on game class online 131 i make sure update method expects that value here on line 110 and that delta time value will get passed along here our ammo is already recharging but it's not easy to check and see i can console these values but it would be nice to have some visual representation of our available projectiles as part of our game screen i have user interface class here online 95. i will use it to draw messages and game statuses that player needs to be aware of this class will be very simple a constructor will take a game as an argument so we convert it to a class property as usual we will define font size and font family we will need it later to draw some score and game timers i will also define color and i set it to white for example it doesn't need update method it just needs a draw method it will expect context as an argument and here i will draw a small bar for each available projectile i create for loop it will run as many times depending on the amount of ammo we currently have i will set fill style to this.color this should actually be outside the for loop like this for each available projectile i will draw a small rectangle so fill a rectangle method add coordinates 2050 width 3 pixels and height 20 pixels let's draw what we have so far and then we can finish it once we can see what we are doing same as we did with player and input handler classes i create an instance of user interface class here on line 116 inside game class constructor it expects game as an argument so i pass it this keyword now i use this dot ui property and i call its associated draw method we defined on line 102 and i pass it context nice right now we are drawing all 20 available projectiles on top of each other here to make them align next to each other i just multiply them by the index from the for loop like this 20 pixels spacing is too much how about a spacing of 5 pixels plus 20 pixels left margin like this that's better now we can see how our ammo is slowly recharging i can change the color here on line 100 i can test it and it's working really well it will keep recharging until it reaches max ammo value of 50 and then it should stop yes we will apply better visuals to our game in a moment i just want to have a complete functional game skeleton first we are missing one last important element in our main game loop enemies and some enemies will also work as power ups in this game we will have multiple enemy types in our game with different visuals and behaviors let's take it step by step to make sure we understand how everything works and how the player projectiles enemies and powerups interact with each other enemy class will just contain the main blueprint the properties and methods shared between all enemy types we will then extend this class into multiple small subclasses each enemy type will have a separate child class that inherits from this main enemy parent class all enemies will need access to the main game object so i do this as usual all enemies will also have the same starting horizontal xcoordinate they will go from right to left starting just behind the right edge of game area so this.game.width horizontal speed of each enemy will be a random number between 0.5 and 2 pixels because i want them to move in minus direction to the left on horizontal xaxis marked for deletion will be set to false initially update method will adjust horizontal x coordinate by the amount of speed x value for each animation frame moving enemies from right to left i check if enemy moved completely off screen all the way behind the left edge of game area so if x coordinate of the enemy plus its width is less than 0 we will set its marked for deletion property to true draw method will take context as an argument at first i will just draw red rectangles representing enemies so fill style right and fill rectangle at enemies x and y coordinates and its width and height like this we will have multiple enemy types let's start with the basic simple anime angular fish i call that class for example angular 1 and it extends enemy class from line 86 in this scenario we have a parent anime class also called a super class and we have child angular class also called a sub class this is a good example of the second principle of object oriented programming called inheritance angler is a child of parent enemy class and it has access to its methods such as this update and draw as well as these properties if i call a property or a method on angle class and javascript can't find it on angular it will automatically travel to the parent enemy class and it will look for it there inheritance is used to reduce code repetition instead of redeclaring the same methods and properties on each class i can just declare them once on parent class and all child classes will inherit them automatically we can also do other things here using a special super keyword i will show you as we write the code angle class will have its own constructor because some properties will be specific only to angular fish enemies in our game if i don't declare constructor on angular class at all it will automatically use constructor from anime class from line 87. in this case i want the code from parent class constructor online 87 to run and i want to add some additional properties here if i just declare constructor on angular it will completely override parent class constructor and this code would be ignored so i have to use a special syntax to kind of merge them i want first this code to run and i want to add a little bit of it here i do it by calling super which refers to super class parent class constructor this line of code will make sure that the constructor on the parent gets executed now i can add some more properties that will be specific only for angular remember that if you want to combine constructors like this you have to call super first before you use this keyword doing it the other way around will give you an error i have specific sprite sheets ready for our project so i know that width of a single frame in our angular sprite sheet is 228 pixels and height is 169 pixels i want vertical y position to start from here and go 90 from the top because we will have some ground graphics in our game environment layer these are flying fish machines they need to be above ground rectangles and images on canvas are drawn from the top left corner so i want the starting vertical position on each enemy to be between 0 here and 90 of game height here but i need to offset it by the actual height of the enemy otherwise they will be drawn too low down here that's why i define x coordinate on the parent enemy class on line 89 but i had to wait declaring vertical y coordinate until i had height of that specific enemy type it will all work together well now you'll see inside update method on the main game class i will cycle through all enemies and for each enemy object inside enemies array i will call their update method i also need to define this.enemies array here it will hold all currently active anime objects i will again use filter method to filter out all anime objects that have marked for deletion properties set to true the same thing we did with projectiles and i will cycle through all enemy objects here call their draw method and pass it context so we have anime class we are updating drawing and removing old ones we need to figure out how to add new enemies into our game i will have a special method on the game class called add anime every time this method is called it will push one new anime object inside this dot enemies array notice that i'm not calling the parent anime class i'm calling the child angular 1 class here on line 103 i can see it expects game as an argument so i pass it this keyword because we are inside that game class now i want to call add enemy in a specific interval we will use the same technique we used to periodically recharge ammo and it will be much easier because we are already calculating delta time i will need two helper variables enemy timer that will count between zero and enemy interval i want to add new enemy into our game every one second every thousand milliseconds same as we did with recharging projectiles i say if this.enemy timer which starts from 0 is more than anime interval let's go up here and also declare gameover property and initially set it to false back here on 962 i say and at the same time this dot game over is false because i don't want to be adding new enemies when the game ended and we call at enemy method from here we will also reset enemy timer back to zero so that it can count again else meaning enemy timer is less than enemy interval we will keep increasing enemy timer by delta time which is already being passed to update method here nice we are adding big red enemies to our game i go up to 105 and i make the width and also height smaller just for now before we start animating sprites i will make the entire game wider when we get to later stages for now we are just building the main logic loop we have player that can move and shoot projectiles we have recharging ammo and there are swarms of enemies coming at us nice work if you are following along as usual i want to check if enemies are being correctly added and removed from the array so i consoled this.enemies array here i want to make sure that filter method on line 161 does its job and we don't have endlessly growing array it works well enemies that moved off screen to the left are being removed perfect it's time to add some interactions i need to check if enemies collide with player and also if projectiles collide with enemies to save ourselves code repetition i will create a reusable collision detection method on the main game object i call for example check collisions this method will take two arguments two objects i will call them rectangle one and rectangle two and it will return true if they collide and false if they don't it will be a reusable function so we can use it later and pass it player and enemy as rectangle 1 and 2 and we can also pass it anime and projectile to check if they collide let me show you exactly how to do that right now when checking if two rectangles collide we compare their x y width and height in a specific way so all objects we are comparing need to have x y width and height properties for this to work i will return a statement in brackets like this so if the code in brackets evaluates true or false it will immediately be returned by this function quick and easy to check if two rectangles collide we need to run four checks we need to check if a horizontal x position of rectangle one is less than horizontal position of rectangle two plus its width if this side is to the left of this side i will comment out line 196 just for a moment so the movement doesn't distract us at the same time we need to check if horizontal position of rectangle 1 plus the width of rectangle 1 is more than horizontal position of rectangle 2 if this side is to the right of this side if both of these statements are true we know they're in the same space on horizontal xaxis but it still doesn't mean they collide they can be far away vertically because of that we need two more checks we need to check if vertical position of rectangle one is less than vertical position of rectangle two plus the height of rectangle two if this side is above this side and finally we check if the height of rectangle 1 plus its y position is more than vertical y position of rectangle 2 if this side is below this side if all 4 of these checks are true this entire statement will evaluate to true and check collision function will return true if at least one of these is false the entire statement will be false and we know these two rectangles don't collide we stay inside the main game class and go to its update method in this for each call we cycle through every object inside enemiesarray from 941 and we call their update method as we go through that array one enemy object at the time we will check collision between player object from 937 and that particular enemy rectangle i do this by calling our custom check collision method we just wrote and i pass it player as rectangle one and enemy as rectangle two if this message returns true we know we are colliding and i will set marked for deletion on that animator true i go down to line 200 and i uncomment request animation frame again so that we can test it i can see that whenever player collides with an enemy that enemy gets deleted perfect we have some interactions in the same for each method i will also check each anime against all currently active projectiles they are stored inside this.player.projectiles and i call for each on that array as well like this for each enemy inside enemies array we check against every single projectile in projectiles array i say if this.check collision between projectile from this iteration of this for each and enemy from this iteration from this for each if check collision is true decrease enemy life by one at the same time set marked for deletion on that projectile that collided to true so it gets deleted then i check if enemy lives are less or equal to zero and if they are set marked for deletion on that enemy to true as well and lastly i will increase score by plus one actually i want each enemy to give different amount of score points when defeated so we will increase game score by score property on that enemy now i used three properties that don't exist yet i go up to parent enemy class and i declare them here i set lives to 5 and score that this enemy rewards will be equal to the number of its lives like this i will also draw that number on top of each anime for debugging purposes by calling fill text here i pass it distort lives from line 92 and x and y coordinates of that enemy it's very small so i will set fill style to black and font property will be set to 20 pixels helvetica for now i need to define score on the main game class here on line 154 and i will also define winning score let's set it to 10 points for now so it's easy to test every time we increase score here we check if the current score is more than winning score and if it is game over from line 153 is true i go up to line 130 inside draw method on ui class in this area i will write code to display the current score to the user i call build in fill text method again and i pass it the text i want to draw so this.game.score and i want to draw it at coordinates 2040. i set font property to this.font size from line 126 plus pixels space plus this.font family from line 127. i put a string that says score colon space here plus we will concatenate this.game.score let's see if everything works all seems to be fine except for the text colors jumping around i will move this fill style declaration up here and i set this dot color to white i can also do other adjustments to the text for example shadows if i want the shadows to apply only to the text and not all the shapes on canvas i will put it between built in save and restore canvas methods save method of canvas 2d api saves the entire state of canvas at that point in time that includes settings like stroke style fill style line width global alpha all shadow settings we will use in a minute as well as other things like clipping region or the current transformation matrix so whatever we do with scale translate and rotate canvas methods then we can change the state of canvas however we want and we call restore canvas restore method restores the most recently saved canvas state if there is no saved state this method does nothing so save and restore only work when used together i will start applying canvas shadows if i did that outside save and restore shadows would get applied to everything including player and enemies but in our case these shadows will only affect shapes and text we draw in this area between this save and this restore shadow offset x defines the distance that shadow will be offset horizontally it can be positive or negative depending on if you want the shadow to be to the left or to the right from the source element shadow offset y defines vertical distance of the shadow i set shadow color to black i could also set shadow blur but i don't need it at this time so by wrapping code in save and restore i make sure that canvas shadows and this fill style property affect only this drawing code and not other shapes and graphics we are drawing on the same canvas element this is a pretty solid code base you can use this as a base boilerplate for many different games maybe some of you want to make a copy of this project at this state and save it in a different folder so you can experiment with it later and use it as a starting point of a different game project win and lose condition in our game will depend on how many score points can the player get in a specific time window we are going to handle those game over messages here before we call restore so if game over property on the main game object is true we set text align to center we are going to display message 1 in larger letters and under that there will be message 2 and smaller font what these two messages say will depend on how many score points we managed to get in a specified game time i check if game score is more than winning score message 1 will say you win and message two will say well done so that's our winning message else we display the losing message so message one is you lost message two is try again next time now we actually need to draw these messages on canvas so font for the first message will be 50 pixels space plus font family then i call fill text and we draw message 1 in the center of the screen so x coordinate will be game with times 0.5 vertical y coordinate will be game height times 0.5 i copy these two lines of code and i change some things to draw message to in smaller letters 25 pixels here and message 2 here i try to play the game and win nice we get a winning message i need to create some space between the lines so first message will be minus 40 pixels vertically and the second message plus 40 pixels vertically let's see yeah this is fine for now we need a time limit for our game on the main game object i create two helper variables i call them for example game time which will start at 0 milliseconds and time limit for testing purposes time limit will be 5000 milliseconds 5 seconds after 5 seconds the game will end and depending on how many score points we managed to get we will display winning or losing message in update method i say if game over is false take game time from line 181 and increase it by delta time delta time is the difference in milliseconds between timestamp from this animation loop and the timestamp from the previous loop so it's the amount of milliseconds between frames by adding delta time to game time every time we draw a new frame we are keeping track of how many milliseconds passed since the game started game time variable is simply just accumulating milliseconds since the game started if game time is more than time limit from line 182 so when the game has been running for 5000 milliseconds we set game over to true the final game will run longer i just use 5 seconds time limit here so it's easy to test up inside ui class we want to draw game timer on screen let's do it in this area on line 143 i call fill text and the text will say timer colon plus this dot game.time add coordinates 20 100. actually the variable we just created was called game time like this and i need to add space here nice so we can see game timer i want to format that value so it looks a bit cleaner i create a temporary helper variable called formatted time i want to move the decimal point to show seconds so this.game.gametime times 0.001 that works i also want to display only one digit after the decimal point so i use built in two fixed method and i pass it one two fixed method formats a number using fixed point notation we can use it to define the number of digits we want to appear after the decimal point perfect we have game time functionality i'm getting a buck when i get a losing message and then i defeat a couple of remaining enemies and that message switches to the winning message i want to make sure that after game over message appears we are no longer able to gain more score points down here inside update method on game class i only want to increase score if game over is false i get an error it's supposed to be this.gameover like this this will fix the bug we have the base game we have player enemies and projectiles we have recharging ammo score timer and win and lose condition you can save this code in a separate folder and use it as a base skeleton for many different games if you want from this point i will start adding graphics and features that will be specific to our steampunk alien game this will be the fun part let's go we will be using large detailed images and graphics today i will put all of them here inside index html and because all the code in script.js is inside event listener for load event javascript will only run after all our images have been fully loaded this will prevent errors i will separate art assets in this project into three different categories characters which will include player and enemies props which will include things like mechanical parts that fall from enemies when we damage them and game environment let's start by creating the game world first img element with an id of layer 1 and source will point towards that png file you can download all project images in the description i will put all my images into a project folder i call assets our game world will be made out of four separate layers for parallax scrolling effect layer one two three and four like this i don't really want to draw these images on the web page like this i only want to draw them on canvas with the javascript so inside style css i set all of them to display none in script js on line 116 we have a custom class i called layer its job will be to set up each individual layer object constructor will expect three arguments coming from the outside game image and speed modifier i convert those arguments into class properties like this the width of the images we are using is 1768 pixels and the height is 500 pixels horizontal x coordinate will start at zero and y will also be zero we will need update method to move the background layers from right to left as the game scrolls if horizontal x coordinate is less or equal to minus width from line 121 meaning the background image has moved across the screen and is now fully hidden behind the left edge of canvas we set x back to zero so that it can scroll again else decrease x by game speed times speed modifier each layer object will have different speed modifier to create parallax but all will depend on the main game speed variable so that all four layers can be controlled from one place gamespeed variable doesn't exist yet so i created on the main game class here initially i set it to 1. layer class will also need a draw method it will take context as an argument i call built in draw image method this method needs at least three arguments image we want to draw so this dot image from line 119 and where on canvas we want to draw it so i want to draw it at this dot x this dot y from lines 123 and 124 so we have our layer class which will handle individual background layers we will also need background class that will put all four layer objects together to create the game world constructor will take the main game object as an argument i convert it into a class property like this here we will grab all four images for each layer with javascript so this.image1 will be by document.getelementbyid and i pass it layer one the id i gave it in index html this.layer1 property will be an object that holds an instance of layer class from line 116 so new layer like this on line 117 i can see that layer class constructor expects game image and speed modifier arguments so i pass it this dot game from line 137 this look image 1 from 938 and speed modifier will be one for now update method will move all the layer objects and draw method will draw all of them we will hold all layer objects inside this dot layer's property it will be an array let's start with just layer one inside update method i take these dot layers and i call for each method for each layer object call their associated update method we declared on line 126 draw method will expect context as an argument to specify which canvas we want to draw on inside we will do the same thing call for each on layers array and for each layer object trigger its draw method and pass it that context value because we know that the draw method on line 130 expects that argument so background will handle all layers to create the game world layer class will handle logic for each individual background layer object separately now to animate the background i just need to create an instance of background class inside game class constructor same as we did before with player and input handler classes background class expects game as an argument so i pass it this keyword because i am inside that game class right now inside blade method on game class i take this new background property and i call its update method inside the draw method on game class i call draw method on the background object and i pass it context along here notice that i am drawing background first then the player this will make sure that the background is behind the player and doesn't cover it i'm getting an error i go back to my background class and i want to put this layer 1 object into the array so i have to use this keyword nice we are animating layer 1 of our background i can change scrolling speed by changing the value i pass as a speed modifier if i pass it 5 the game speed is 1 because i'm multiplying game speed times speed modifier 1 times 5 is 5 so background will scroll at the speed of 5 pixels per frame i will bring all other layers into the project i bring their images first then for each one i create an instance of layer class and i put all of them inside this dot layers array okay now we see all four layers i give each layer a different speed modifier these values are passed as speed modifier and they will be multiplied by the current game speed you can control scrolling speed of each layer individually like this for now i will set speed modifier to 1 on all 4 layers you can see that because of line 128 as soon as the layer images slide completely off screen they reset back to x position of 0 so that they can slide again we are getting this gap to get a seamless scrolling background effect we can use a simple trick we can place a second identical image next to the first one so at the point where the first image doesn't fill the entire game area the second image comes in to fill the gap the second image will never be fully visible it will be filling in just for that short period of time before the first image can reset to its starting position again reset to the original position happens in one frame so it's not visible by naked eye it will create an illusion that we have one endless seamless background how do i apply that in code i simply draw a second identical image but i need to make sure it is next to the first one the second image will start where the first image ends so its horizontal x position will be this dot x plus this dot width like this and that's it we have endless parallax background implemented in our game i can change its scrolling speed by adjusting speed property on the main game object or i can change speed modifier values i pass as arguments when i create individual layer objects i'm getting a small stutter when the background image is reset back to position 0. i fix that by removing this else statement here now the reset should be smooth and not noticeable i can also use small values as speed modifiers i want the back layer to scroll very slowly if i use speed modifier 0.2 and base game speed is 1 that layer will scroll by 0.2 pixels per frame because we are multiplying game speed by speed modifier i will try 0.2 0.4 1 because layer 3 is this ground image so that it should scroll the same speed as the rest of the main game objects and layer 4 are these items in the foreground so i will make them scroll at 1.5 base game speed the issue we have right now is that layer 4 these foreground objects should be in front of the player but right now they are behind because in the main animation loop i'm drawing all four background layers before i draw the player there are multiple ways to solve this i'll use the simplest possible solution i will draw only layer 1 2 and 3 here as part of the background class and remove layer 4 to draw it separately later because i removed layer 4 from the array i need to call its update method first from inside update method on the main game class here on line 226 i'm calling background.update which updates layers 1 2 and 3 and i will also call update on layer 4 like this inside draw method we are redrawing all elements that make up our game for every animation frame first we draw the background which now contains only layer 1 2 and 3. then we draw the player on top of that then we draw ui then enemies and on top of everything we will draw background layer 4 to make it appear in front of all other game objects the thing to understand is that since we are drawing everything on the same canvas element what is drawn first will be drawn behind the thing that is drawn after background will be behind the player time to draw the player we start by bringing player image into the project here in index html i created this seahorse sprite sheet that you can download and use we will have basic swimming animation and we will have power up animation row because when the player collects a special overcharged fish it will absorb its energy the player's eyes and chest will light up and player will shoot two lasers instead of one in script.js i go to line 59 inside player class constructor and i bring the image into the project using getelementbyid same as we did with background images in style css i give player image display none we are bringing the image into javascript project here on line 59. inside the draw method currently we are drawing a black rectangle representing the player to draw the sprite sheet i will use built in canvas draw image method i pass it the image i want to draw so this dot image from line 59 and x and y coordinates where i want to draw it i want to draw it at player's current x and y position from lines 54 and 55. you can see we are drawing the entire sprite sheet with all its frames and rows draw image method can accept three arguments like this we can also give it five arguments by adding width and height in case of a sprite sheet like this it will just squeeze all frames into an area of one frame we don't really want that what we need is the longest version of draw image method that expects nine arguments and it gives us the most control over the image we want to draw on canvas those nine arguments are image we want to draw source x source y source width and source height of the area we want to crop out from the source image and destination x destination y destination with and destination height to specify where we want to draw that cropped out piece of image on destination canvas we will need some helper variables as well frame x will cycle through the sprite sheet horizontally frame y will determine row of the sprite sheet in this case row 0 or row 1. i need to crop out just one frame from the source sprite sheet image so source x will be frame x times width of a single frame which in our case is the width of player because i like to size my images to the same size we will draw them in game when frame x is 0 we display this frame when frame x is 1 1 times width of 120 pixels is 120 so we will draw this frame frame x 2 will be 2 x 120 so 240 pixels this frame and so on it will work the same with frame y vertically frame y times height of the player which is identical to the height of the sprite sheet frame source width is width of a single frame source height is height of a single frame now we are cropping out just one frame perfect i will animate the sprite sheet by cycling between frames horizontally from 0 to max frame in the case of player sprite sheet max frame is 37 we count from 0. i will handle sprite animation logic down here it's simple if frame x from line 56 is less than max frame from line 58 increase frame x by 1. else reset frame x back to zero if you prepare your sprite sheets well in graphics editor the way i prepared the sea horse for you you only need very little code to get the animation if i set frame y to 1 we will see the second row in the sprite sheet we will use that for power up state for now i set it back to 0. at this point i no longer need the black rectangle that represents the player but it is still useful to keep track of that area because it will be player's hitbox used for collision detection i replace fill rectangle with stroke rectangle i remove this fill style declaration stroke style will be black by default unless we set it to a different color i want to have a debug mode in my game when i press letter d the game will show hitboxes and maybe other things like enemy hit points player hitbox is this black rectangle we are outlining so i only want to draw that if game.debug is true i need to create that property so down here inside game class constructor i say this.debug is true the last thing i need is to create a switch that will allow the user to toggle debug mode on and off by pressing letter d to create a toggle with javascript is simple i go up inside our input handler class and inside key down event listener i create an else if statement and i check if the key that was pressed is letter d if it is i set the new debug property we just created on the game object to its opposite value so if it's true i set it to false if it's false i set it to true now when i play my game i can toggle debug mode on and off by pressing the letter d at this point debug mode only shows and hides player hitbox but we will attach more functionality to it a bit later nice we are making a lot of progress let's add more characters to the game the base game loop will have three enemy types i created multiple animations for each enemy type to give our game more variety and i will show you how easy it is to swap between them you can download all our datasets in the project files in the section below i made these characters spreadsheets for you so feel free to keep them for your personal projects you can modify them and do whatever you want with them you can credit me if you use it for your personal projects but only if you want also if you want the base photoshop files or separate pieces in png format for all these characters so that you can animate them and turn them into spreadsheets yourself let me know the best free software to create custom sprite animations is dragonbones if you want more advanced features there is also a paid software called spine you don't need any of that because i'm already giving you complete ready to use sprite sheets this is just for those of you who want to learn more and create custom animations or different animations than the ones i created for you so i'm bringing three new images into the project angular 1 will be the most basic anglerfish anime type the sprite sheet has multiple different animations for the same character model and we will use all of them in a minute the second character is a different type of angler fish with more gears and chimney these are steampunk machines that come to life i gave them a lot of mechanical parts these two anglerfish enemies will be just a simple basic enemy type that comes at the player trying to eat it they are not very resistant and they are easy to deal with using our seahorse sentinel lasers the only advantage they have is that they can come in big numbers sometimes to deal with that we have to be smart and use our slowly recharging ammo wisely we can use the third enemy type to help us i call this third enemy type luckyface because it will be an enemy but also a power up at the same time it will have two different models different skins that we will use randomly when we create a new one and the way we use this enemy type to make gameplay more interesting is that the player can do two things when this enemy appears we can shoot it for a lot of score points or we can collide with it to collect it as a power up it doesn't have many life so players also have to be careful not to destroy it accidentally before they can collect it and activate the power up the story is that this is an overcharged fish and when the sentinel sea horse collides with it it absorbs its light and power to activate its ultimate offensive mode for a short period of time it will all be represented by graphics to make it clear to the user what's happening so here is the parent anime class and here we have a child angle 1 class that extends it and inherits from it i will add this.image property and i point it towards the sprite sheet we just included in index.html like this we have three different animations that loop and when we create a new angular fish we will assign it one of these three randomly by setting this dot frame y property to a random number between zero or one or two so mass at random times three wrapped in math floor like this right now we have these small red rectangles representing each anglerfish enemy same as i did with player i replace fill rectangle with stroke rectangle and i remove this fill style declaration and also this one the draw enemy sprite sheet same as we did with player sprite sheet i use builtin canvas draw image method i pass it image i want to draw so this dot image from line 124 if i just pass it x and y coordinates it will draw the entire big sprite sheet with all frames and all rows i declare frame x that will help us to navigate in the spreadsheet horizontally frame y will navigate vertically max frame will be the maximum horizontal frame which is 37 for this particular sprite sheet i only want to draw enemy hitboxes when debug mode is active so this line will run only if this.game.debug is true i want to draw them at the original full size so i remove this temporary size modifier we created earlier if i pass a draw image method additional width and height we will squeeze all frames into an area of one frame so i will add four more to define an area i want to crop out same as we did with the player so source x source y source with and source height so image i want to draw four arguments for the area i want to crop out from the source image and four arguments for where to place that cropped out image on destination canvas source x will handle horizontal cycling through the sprite sheet and it will be frame x from line 106 times width from line 124. we keep width property on a subclass because it will be different for each enemy type source y will be frame y from 107 times height from line 125. source width will be this.wave source height is this.height i'm giving you sprite sheets that are already sized exactly as they will be drawn in the game so we don't have to do any scaling with code here it's simpler and it's more performance efficient to do it this way the sprite animation itself will be simply going between frame x0 and max frame over and over we will handle it here inside update method if frame x from 106 is less than max frame from line 108 increase frame x by one else reset frame x back to zero and we are animating our first enemy type the final game will be wider i just keep the game area smaller so that i can show you everything on one screen in style css i hide images with id angle 1 angle 2 and lucky i can set the game width to 700 pixels so that the large enemies fit better you can see that each enemy fish has been randomly assigned one of the three possible animations i prepared for you it gives our game a nice variety a needs to account for game scrolling speed when calculating anime positions so down here inside update method on enemy class i say this dot x plus equals this dot speed x minus this.game.speed this way we can have dynamic events that change game speed and enemies will always be correctly positioned in relation to our scrolling game world let's add the second type of angularfish i created for you i copy this child class that extends the parent enemy class and i call it angular 2. width of a single frame is 213 pixels and height is 165 pixels for this anime model i created two different animations so frame y can be row 0 or row 1. so now we have two different anime types i want to have a simple functionality where i say something like when you create a new enemy in the game in 50 of cases make that enemy angular 1 otherwise make it angular 2. we will handle that logic inside add nme method we will do it by rolling dice once every time we create a new enemy so helper variable i call randomize is math.random math at random declared like this will generate a random number between 0 and 1. if that random number is less than 0.5 create angular 1 enemy type else create angular 2. up here on line 249 i increase game limit to 15 seconds so we have some more time to test everything before game over is triggered immediately i can see the new angular 2 enemy type and i can see we are playing both animations perfect giving graphics like this for your game will go a long way to help you create unique stories and adventures for your players if you are interested how to take drawings of static characters and turn them into animated sprite sheets with free dragon bone software like i did with this seahorse and angular for this class let me know and i might make a course on that on enemy class i have this dot lives and this dot score properties i want each enemy to have different values here so i cut it here and i paste it on each enemy type individually angular 1 will have 2 lives and when we defeat it we will get 2 score points angle 2 will have 3 lives and it will give 3 score points quick test to see if everything works i can see enemy lives and it gives the correct amount of score points don't worry about the color of the numbers right now we will fix that later let's create a third enemy type i copy this code block and i will call this subclass luckyfish for example width will be 99 pixels and height 95. this fish will have three lives and if destroyed it will award 15 score points i will give it a property i call type and i will set it to lucky we will use this to check which enemy type player collided with down on line 314 inside add anime method i add another else if statement like this if random number is less than 0.3 we create angular 1 else if it's less than 0.6 we create angular 2. when the random value is between 0.6 and 1 we create luckyfish using the new class we just wrote there's something strange happening with the animation i go up to luckyfish class to see what's wrong i can see that on line 153 i need to point this dot image property to the correct sprite sheet and we are animating our special luckyfish powerup there are two models because the sprite sheet has two rows and we are randomizing vertical coordinate with frame y here on line 154 when the player collides with one of these special overcharged fish it enters a powerup mode let's write that code now we start by declaring this.powerup property on the player up here on line 65. initially i set it to false powerup will last for a while and then the player will go back to the normal state so we will need another timer we can use delta time for it we will have two helper variables called powerup timer and powerup limit powerup timer will be count in milliseconds when it reaches power up limit of 10 000 milliseconds 10 seconds powerup state will end we will handle that logic here in update method on player class i say if this dot power up from line 65 is true we enter this code block inside we check if powerup timer is more than powerup limit and if it is we set powerup timer back to 0 and power up to false we will also set player sprite sheet to frame y 0 so normal default animation else meaning power up is true and power up timer is not yet higher than power up limit the player is in power up mode and powerup timer is counted in milliseconds by adding delta time we calculated delta time before inside the main animation loop is the difference in milliseconds between timestamp from previous and the current loop we need to make sure update method expects delta time as an argument on line 69 and we pass it to this method inside update method on the main game class here on line 286 so we are counting timer and frame y is on the second row so value is one we come from zero that will give us a special animation with light coming from chest and eyes and also tail will animate differently because while in this state we will shoot two lasers one from the nose and one from the tail at the same time two lasers for the price of one ammo at the same time we will be recharging ammo by 0.1 per frame and this will be on top of the regular recharging speed so ammo will be recharging very fast while in power up mode so when powerup is set to true we enter this code block powerup timer is increasing by delta time counting how many milliseconds we are in powerup mode frame y is animating special overcharged animation and ammo is recharging fast as soon as power up timer increases over the value in power up limit which will happen after 10 seconds 10 000 milliseconds we set power up timer back to 0 we set power up to false and we set animation rule back to normal regular floating animation inside update method on game class in this area where we check for collision between player and enemies we check if type property on that enemy is set to lucky if it is we call a special method on the player object called enter powerup we will write it in a minute else if we collided with another anime that is not luckyfish we decrease score by 1 as a penalty to the player this will encourage player to collide with power up fish and avoid regular enemies to get maximum possible score i go up to player class here on line 111 i create that method so enter power up its job will be to set everything up when player enters power up state i could have used state design pattern but we don't have that many player states so we can do it simply like this when we enter power up we set power powerup timer back to zero in case we collided with powerupfish while we are already in powerup state this will make sure the time resets and we get full 10 seconds from that second collision we set powerup property on player object to true we will also recharge the ammo to its maximum possible value i test it i collide with our special overcharged fish and player gets overcharged we are in powerup mode and ammo is instantly refilled and it's recharging very fast perfect after 10 seconds power up ends ammo stops recharging because we are well over max ammo value and player sprite sheet switched to the basic floating animation great so when we are in powerup mode our sentinel seahorse will shoot defensive lasers from mouth and tail at the same time it's overflowing with energy and it can shoot extra free projectiles from tail every time it shoots one from the mouth we can handle that functionality with javascript very easily by declaring additional method i call should bottom in shoot top we handle shooting from the mouth and shoot bottom we will handle logic for tail lasers so inside i check if ammo is more than zero and we just push new projectile into projectiles array i adjust its horizontal and vertical starting position because i want it to be coming out from the tail i will call this method from inside shoot top like this while we are running the code in shoot top we check if we are in power up mode and if we are we execute shoot bottom method as well to add that extra free projectile i tested lasers are just coming out from sears's mouth in basic floating state if we collect the power up fish we enter power up mode and both should stop and shoot bottom methods are running we are shooting two projectiles but it costs only one ammo getting overcharged makes the player very powerful maybe we need some bigger bulkier enemies so we get more challenge i made two types of mechanical whales for player to defeat probably you will need these power apps to do so i want the projectiles to come from behind the player we are drawing projectiles inside a draw method on player class if i want them to be drawn behind i need to make sure we draw projectiles first and the player second like this i want to make it even more visually clear when powerup mode is active for example i can make this ammo display up here different color while in powerup we draw all these ui elements in our custom ui class on line 243 before i draw all these small rectangles representing ammo i check if power up property on player class is true if it is i set fill style to a different color i want that color to be similar to the glow effect we have on our sprite sheets so maybe this it works the problem is that it also recolors the timer text because we define fill style here we draw ammo and then we draw the timer i can keep drawing ammo at the same coordinates in our game and i can move this entire code block further down that way this white fill style will apply to timer and the other color will apply only to ammo like this instead of drawing a rectangle representing a laser projectile we can also use an image i bring it into the project here in props section in index html you can download it in the video description or you can use your own image i give it an id of projectile i bring it into the project here on line 38 inside projectile class constructor this dot image equals to document.getelementbyid and i use the id i just gave it so right now we are drawing yellow rectangles representing our projectiles i delete that and instead i will use draw image method this time it's simple because the image is already the right size i just give it three arguments the image i want to draw and x and y coordinates where to draw it on canvas nice we are drawing images these projectiles can also be animated either using a special sprite sheet or all different kinds of particle effects we will use sprite sheet to animate projectiles in a bonus section of this course let's add a web font to make the text look better adding a font to a canvas game is very simple i go to google phones and i search for bangers i like this comic book style when you have your font you click select your style here you can select multiple different fonts like this if you want then we go up here to view selected families if you choose more than one this code will be adjusted to contain all of them as part of a single declaration all we need to do to bring the font to our project is to copy these link tags and paste them up here in index html ideally above the main css style sheet to make sure the fonts are available from there as the code gets executed line by line from top to bottom i go back to google phone's website and here it also gives us a readymade css font family declaration i copy it and i put it inside our style css file here on canvas element now my font is available so i go to script js inside ui class i set this custom font family property we wrote before to bangers and now all the texts drawn by ui class so score timer and game over messages will use the new font let's adjust the winning text to something less boring i want to keep the victorian steampunk explorer theme going for this game so winning message will say most wonders in big letters and with an exclamation mark secondary smaller message will say well done explorer for the losing message let's use another old phrase i will say blazes with an exclamation mark it's a word for when something goes wrong in old english secondary small message will say get my repair kit and try again for example you can come up with your own messages here if you want now i have my messages in a new font so i can adjust the sizing and spacing i want the main message one to be much bigger i try 150 pixels well that's way too big we could also adjust the text size to match the width of canvas but let's keep it simple for now and set it to 100 pixels hm i think i will go with 70 pixels i want the messages to be closer together so instead of 40 pixels offset i tried 20 for both of them i'm happy with the spacing and font size for now i can see that we still have the projectile image visible in the top left corner of the browser window so install css i set it to display none we can also see the spacing of the losing message now looks good i would also like the little numbers above each enemy that represent their lives to be only visible when debug mode is active to do that i go up to enemy class and inside draw method i only want to call that fill text method if debug mode is active if debug property on the main game object is true let's test it yes i can only see hitboxes and enemy lives when in debug mode perfect i want to make sure that player cannot leave the screen right now if you press up or down arrow for long enough player will move completely off screen inside update method on player class we will handle vertical boundaries let's start with the bottom boundary if this dot y vertical position of the player is more than the height of the game minus the height of the player meaning that the bottom edge of the player is touching the bottom edge of the game area make sure we cannot move past this point like this i actually want the player to disappear halfway so that it can avoid very big dangerous enemies we will add soon i will do that by multiplying player height times 0.5 here and here now we can move half the sea horse's body outside the screen and then we hit the boundary we just defined i will do the same thing for the top boundary else if player's current vertical y coordinate is less than minus player height times 0.5 meaning that the top half of the seahorse is off screen make sure it cannot move any further up like this i test it top boundary works bottom boundary works perfect up on line 48 we have a particle class i will use it to create broken parts falling from enemies every time we hit them and for a big spray of spare parts when we completely destroy an enemy we will also make those parts bounce from the floor for a specific number of times before they fall off screen particle class constructor will need a reference to the main game object start in horizontal x coordinate and start in vertical y coordinate i convert those arguments into class properties as usual we will use a sprite sheet with nine images in a grid each particle object will randomly choose one of these images so that we have some variety this dot image is documented to the getelementbyid and id will be gears in index.html i bring it into the project here in the props section id is gears and file name is gears.png you can download it in the project section as usual install css i hide it by giving it display none here we are referencing that image with javascript i will need some helper variables to navigate around the sprite sheet each particle object each spare part flying from the enemy will have a random image assigned from these nine available options frame x will be a random number between 0 and 2 so column 0 or 1 or 2. frame y will be the same so row 0 or 1 or 2. combination of frame x and frame y value for each particle object will point to a specific image in the grid for example frame x2 frame y1 will be here sprite size will be the size of individual frame in this case frames are squares 50 x 50 pixels i want each particle to have a different size when drawn on canvas so we will create size modifier and we will set it to be a random number between 0.5 and 1. i will set it to one number after decimal point to reduce artifacts so particle size will be sprite size multiplied by size modifier to make sure every particle is a different random size when drawn on canvas i want particles to fall in both directions horizontally from the enemy so speed x will be a random number between 3 and plus 3. if it's minus it will move to the left if it's plus value it will move to the right on the positive direction on horizontal xaxis speed y vertical speed will be a random number between 0 and 15 so particles will always start moving upwards on the negative direction on the vertical yaxis before they start being pulled down towards the ground by gravity i set gravity to 0.5 let's see what kind of curved movement we get we can adjust it later marked for deletion will initially be false i want the corks wheels and spare parts to rotate as they fall so i will have an angle property storing rotation angle for each particle separately starting at 0 and the speed of that rotation will also be randomized in this dot va property velocity of angle rotation speed will be random value between minus 0.1 and plus 0.1 radians per animation frame in update method we will increase the rotation angle by va speed y will increase by gravity which will give it a nice curve let's say the particle will start moving upwards because starting speed y is 15 as we increase speed y by gravity from line 61 that 15 value goes closer to zero at that point when it reaches zero it will stop moving and it will be at its peak height as speed y further increases by gravity value into positive numbers it increases by 0.5 per animation frame that particle will start falling down faster and faster until it disappears below the bottom edge of canvas this dot x minus equals speed x to move particles horizontally this dot y plus equals speed y to actually apply that speed y value affected by gravity to the vertical coordinate of each particle if the particle fell off screen vertically so its y coordinate is more than game height plus size of the particle or if the game scrolled past the particle so its x position is less than zero minus particle size set its marked variation property to true draw method will take context as an argument we call draw image method pass it the image we want to draw and x y width and height where to draw it on canvas since the particle image is a grid of frames it's a sprite sheet we only want to crop out one individual frame for each particle object i will also need to specify cropping position so source x source y source width and source height source x is this dot frame x from 954 times this dot sprite size from line 56 source y is frame y times sprite size source width and source height will be this dot sprite size like this we want to crop out a frame 50 times 50 pixels from the source sprite sheet then we multiply that by size modifier and we draw it at that scaled size we will need an array that holds all active particle objects i will create it here as this.particles property on the main game object for each particle in that array we call their update method like this using es6 arrow function syntax to keep the code cleaner after that i call builtin filter method on that array and i replace that original array with a different one that contains only particles that have marked for deletion property set to false all the particles with marked for deletion properties set to true will be removed inside the draw method again we call for each on each particle object we call its draw method and we pass it context as an argument as it expects up here on line 73 we have our particle class ready we just need to find a good place in our code to add these particles i go down to update method on game class and here where we check for collisions between projectiles and enemies i create a for loop this for loop will run 10 times and each time it runs it takes this dot particles array and it will push new particle object inside i know that particle class constructor expects a reference to the main game object as the first argument so i pass it this because right now in our code we are inside that game object each particle also needs starting x and y coordinates so i pass it x and y of the enemy that just collided with the projectile i don't want the particles to come from the top left corner of each enemy i want them to come from the middle so i add enemy width times 0.5 horizontally and enemy height times 0.5 vertically i copy this for loop i actually want 10 particle spare parts to fall from the enemy when it collides with the player and gets destroyed down here i remove the for loop and just push one particle i test it nice we have a splash of spare parts coming out of anime when they are destroyed by colliding with the player player in this game is indestructible we will make that clear by giving it a special animated shield later in the bonus section i copy this code that adds just one particle and i actually want to put it here so that every time projectile collides with enemy one particle follows out nice so now every time enemy gets hit by a projectile one particle spare part falls if enemy is destroyed by colliding with the player 10 particles come out in all directions i want the particles to bounce off the floor for a specific number of times before they fall off screen to make this effect even more intense i go up to our particle class and here on line 65 i create a helper variable i call it bounced and initially i set it to false i also want to define a margin from the bottom end of canvas from which point the particles will bounce so i call it for example bottom bound boundary like this and i set it to 100 pixels if particle reaches this point i want it to bounce so i will switch its speed y value to its opposite if vertical position of the particle is more than game height minus bottom bound boundary so somewhere around this point and at the same time if this dot bounce from line 65 is false set bounced to true so that it doesn't bounce again after this and set speed y to its opposite value by multiplying it times 0.5 so particles fall in it reaches this point and its current speed is for example plus 5. we switch it to minus 2.5 making it bounce moving upwards again still line 70 keeps applying gravity so eventually we reach zero and go into positive numbers making the particle curve towards the ground again and eventually fall off screen it bounces once sets bounced to true so this if statement check will fail for the second bounce and particle will just fall off screen maybe i don't want particles to all bounce from the same vertical point on the ground how about they bounce from a range between this and this point roughly to match our ground level image so bottom bounds boundary will be a random value between 60 and 160 pixels from the bottom edge of canvas area what about if we want to specify how many times each spare part bounces from the ground rather than having them bounce just once line 65 i set the initial bounced property to zero in this check on line 74 i check if bounced is less than two and each time we bounce i increase bounced by 1 here on line 75. now each particle bounces twice before it falls off screen down here where we create particles i copy this for loop that creates 10 particles we create one particle when anime collides with the projectile i paste that for loop here to create 10 particles when enemy is destroyed by a projectile so particles will come out of enemies after three different events when enemy collides with the player and is destroyed we get 10 particles when projectile collides with an enemy we get one particle when enemy is destroyed by projectile we get 10 particles so we know how to create particles when certain events happen in our game we know how to bounce them off floor and we know how to control how many times they bounce we also have this angle property that is increasing by va on line 69. if you've never done rotation on canvas this part might be a little bit challenging but i will try to explain each particle has a different angle value that's increasing by va value that's also randomized for each particle object it means that at any point each particle is at a different rotation their angles have different values to make sure that rotation angle only affects one specific particle and doesn't spill out and affect other objects we draw on canvas i will wrap the entire drawing code between save and restore save method takes note of the current canvas state when we call restore later that restore will look for its associated save method and it will reset all canvas settings back to that point in time anything done between save and restore will just affect the code the drawing code in between after we call restore everything will be reset to its original state to rotate something on canvas we first have to move rotation center point the point that is normally considered coordinates 0 0 on canvas so the top left corner we have to translate that point over the object we are rotating so translate to the current x and y position of the particle calling translate like this moved rotation center point from top left corner to this dot x this dot y coordinates of this particle then we call built in rotate method that takes angle value in radians i pass it the angle property that is increasing for every animation frame by va here on line 69. not sure if you can see but particles are currently making very large circles around their x and y coordinates it is because we are going to another distance of x and y from these coordinates because of the fact that we translated point zero zero and rotation center point to these coordinates for all intents and purposes this dot x and this dot y between the save and restore in this area of our code is considered point zero zero on canvas and then i'm drawing this particle at this dot x this dot y from that translated point further and i'm rotating it making it go in larger circles around that center point i fix it by changing x and y to zero here because position of that particle is already defined on line 81 in translate call now the particles are rotating from their top left corner so i shift them a little bit by half of their width and half of their height to rotate around the center point of each particle i have other classes about rotation for now let's just move on if you don't fully understand some things about rotation don't worry it will become more clear as you use these techniques more often in the future we are getting a lot of particles now if you are on a very old computer you can reduce the amounts of particles to get better performance i don't have any performance issues on my computer let me know if it runs smoothly for you or if you had to decrease the number of particles to get a good frame rate the particles don't move correctly in relation to the ground artwork i need to go here and include the game's scrolling speed in the horizontal position calculation so this actually has to be plus yes now it works awesome time for a small cleanup first of all i want the debug mode to be disabled by default we can still press letter d on keyboard to toggle it on and off but when the game first loads i want player and enemy hitboxes and enemy lives to be hidden by default we have a bug in our game when the player collides with any enemy type it goes into a power up mode that would make the game too easy we only want the player to enter power up when it collides with power up fish and later in the bonus section there will be another way to enter power up for skilled and fast players who can shoot fast and big moonfish before it comes too close to make sure the power up works correctly i just need to fix this comparison operator on line 357 like this now our sentinel sea horse only enters power up if it collides with lucky fish another bug is when we enter power up player's ammo gets automatically assigned to max ammo this is meant to refill the ammo but if the player saved up and has current ammo higher than maximum ammo entering power up will actually reduce the total amount of ammo they have i fix it here on line 159 inside enter power up method on the player class we only refill ammo to max ammo if the current ammo is less than max ammo like this that works i'm using vs code editor when i press ctrl f i can look for all console logs i want to delete them let's keep our code and console clean particle spare parts falling from the enemies are not bouncing from the correct area i want the bounce area range to match the ground artwork a bit closer here on line 66 inside particle class constructor i set bottom bounds boundary to a range between 60 and 140 pixels i want to change the order in which we draw our game elements because we are drawing everything on a single canvas element the order in which we call draw methods will determine what is behind and what's on top i go down here inside the main draw method on game class and i want to draw the background first then ui elements so score ammo timer and game over messages then we draw player projectiles particles and enemies on top of that you can play with the draw order here if you want if you want ui to be on top of everything for example just draw it last i think it looks better like this because it's a bit 3d or 2 and a half d when it's slotted between the game world and game characters like this we can do many other things to make the ui feel like a part of the game world i have lots of ideas maybe in the next class i'll show you more game text can be floating moving changing colors it's easy to do it if you follow my other coding tutorials and you understand canvas animation well we have a power up mode so the game currently is very easy when we are in power up enemies have no chance let's add a massive enemy type that when defeated splits into five smaller enemies that should give the player some challenge hope you like teeth and tentacles it will also introduce some tactical decisions into the game maybe sometimes it's better to avoid the enemy altogether if we are low on ammo when we know we can't deal with the little enemies that come out of it when we destroy the big one i copy luckyfish class that extends the main parent enemy class and i rename that copy hive whale this is a massive mechanical whale that serves the enemy swarm as a hive vessel containing a lot of aggressive and fast drones width is 400 pixels and height is 227 pixels this dot image will be looking for an id of hive whale i need to go to index.html to bring that spreadsheet into the project you can download it in the project files section i made just one animation row for this anime type it's a lot of work animating all these tentacles and creating this sprite sheet and also it's already a big image file image with an id of hive whale and source is assets slash hive whale png in style css i give that image display none frame y will be zero because this sprite sheet only has one animation row it will have 15 lives it can take a lot of damage when defeated it will give player 15 score points type is hive like this and it will move very slow so here i will override the default speed x property from the parent enemy class and i set it to a random number between minus 0.2 and minus 1.4 pixels per frame i want the enemies to be spread a bit more down not all the way to the bottom of the game area but maybe 95 percent of the game height i do it by replacing this vertical position calculation on angular 1 angular 2 luckyfish and hive whale with 0.95 position where enemies can spawn in the game can be anywhere between 0 and 95 percent of game height we need this extra space there are some large enemies incoming we add hive whale into the project down here inside add enemy method on the main game class i copy this line and i say if randomize is between 0.6 and 0.8 add new hive whale enemy type and here they come i can enable debug mode by pressing letter d to see its massive hitbox and its current lives we need to hit the whale with 15 projectiles to destroy it but that's not all when destroyed 5 smaller fast and aggressive drones come out of it and they will go straight for our sentinel seahorse character let's create that enemy type drones are small fast and aggressive creatures they live inside hive wells where they collect resources and feed on whatever the hive will swallows let's make sure that sentinel seahorse is not their next meal i copy this code block and i will name it drone this enemy type is different they are ambush predators and they always hide inside the hive whale ready to jump out and attack their prey they will not be coming at player from the right side of the screen like the other enemy types do we will only see them when we destroy a hive whale for that reason when we create a new drone using this class we need to pass a game object as usual but also we need to pass it the current x and y position it will be the current position of the hive while we just destroyed i convert x and y into class properties as we always do image will be looking for an element with an id of a drone i bring it into the project here in index html id is a drone source is assets drone png i created two different animation rows each one will be moving differently so we get some variety frame y will be a random number either row 0 or row 1. each drone will have 3 lives and will award player with 3 score points if destroyed i will give it type drone i'm not sure if i will use this type property for something but might as well declare it we might need it later this enemy can move very fast if it wants to it will have a random speed range from a minus 0.5 to minus 4.7 pixels per frame the way i want this to work is when we destroy hive whale with projectiles it will spawn 5 drones in star css i give the drone image display none if the hive whale gets destroyed by colliding with the player there will be no drones because the drones would spawn too close to the player and there will be no time to try and aim and target them properly it would not be a good gameplay experience having enemies spawn so close to the player if projectile collides with an enemy and if lives of that enemy are less or equal to zero that enemy is destroyed we check if the enemy that was just destroyed has type property set to hive if it is a hive whale we take enemies array and push one new drone enemy object inside if you remember drone class expects game and x and y position were to appear in the game world i want it to appear under the destroyed hive whale so i pass it x and y of that destroyed enemy let's test it i destroy a hive whale and we have one drone coming out of it nice let's put this code into a for loop that runs five times to create five drones we have five drones but they all appear on top of each other in the top left corner of the hive whale that's not ideal let's spread them around a bit starting position of the drone will be horizontal exposition of the hive whale that was just destroyed plus a random number between zero and the width of the hive whale enemy starting vertical position of each drone will be vertical y position of the hive well plus a random number between zero and height of the hive whale like this maybe just height times 0.5 nice now the drones are more spread out some move very fast some move slower this is good we get too many particles i don't want each drone to burst into 10 particles when destroyed what if we make the number of particles spare parts that fall from enemies when destroyed to be equal to the score that enemy gives i also make the same change here on line 383 when enemies get destroyed by colliding with the player now hive whale should burst into 15 particles because when defeated it gives 15 score points each drone will turn into three spare parts that way we won't get a massive flood of 50 cogs and wheels when we destroy 5 drones i want the game to feel good when we score some points and destroy an enemy i want that enemy to really pop so not only we will turn it into spare parts that bounce around we will also play a dust or fire explosion from a sprite sheet i have two special sprite sheets for this purpose you can take them and use them in your other projects as well if you want many games need dust and fire effects like this all art assets for this episode were custom made by me or artists i hired so there is no copyright you can use them however you want enjoy we will have the parent explosion class and we will extend it into two child classes dust explosion and fire explosion parent explosion class will contain methods and properties shared for all explosion types it will expect game x and y as arguments because i want the animation to play over the enemy that was just destroyed so that x and y position will be passed from the outside each time we create a new explosion object both fire and smoke explosion will be single row sprite sheets i could also have placed them into a single image we will cover compact sprite sheet animation in later class not today i will cycle through them from left to right from frame x0 to max frame sprite height is the height of a single animation frame in the sprite sheet and it will be the same for both explosion types i made both sprite sheets the same height of 200 pixels so that property can be on the parent class it's a property shared between all explosion types sprite with the width of a single animation frame in the sprite sheet will be different for each type because of that it will sit on each subclass separately we will define that in a minute the sprite sheets have only 8 frames so they will animate very fast i want us to be able to control fps frames per second on this animation and i want that fps to be independent of animation speed of the rest of the game we will do that using delta time again and we will need 2 helper variables timer that will count from 0 adding delta time over and over until it reaches interval value when we reach it we will serve the next animation frame in the sprite sheet interval will be 1000 milliseconds 1 second divided by 15 so the animation will run at 15 fps i can also put frames per second in a separate property if i want to we can control fps by adjusting that property instead marked for deletion will be initially set to false as usual we will need update method and it will expect delta time value as an argument we calculate delta time in the main animation loop draw method will expect context as an argument to specify which canvas element we want to draw on update method will simply animate the sprite sheet by increasing frame x property from line 302 draw method will draw currently active animation frame cropped out from the sprite sheet let's start by just giving it image we want to draw and x and y coordinates where to draw it so this is the parent explosion class it contains properties and methods shared between all explosion types we will have two child classes smoke explosion and fire explosion i say class smoke explosion extends explosion that extends keyword creates a relationship between these two classes and it sets up prototypebased inheritance behind the scenes for us smoke explosion subclass now has access to properties and methods that sit on explosion super class we will also have fire explosion subclass constructor will expect game and x and y coordinates in index html i bring the sprite sheets into the project here in the props section ids will be smoke explosion and fire explosion install css we give both of them display none i point the subclass towards that image using getelementbyid i'm placing this.image property on the subclass because that image is specific only for this subclass parent superclass contains only properties and methods that are shared between all subclasses sprite width the width of a single frame will be 200 pixels both sprite sheets have 8 frames so max frame will be 8. rectangles on canvas are drawn from the top left corner i want the explosion animation rectangle to be coming from the exact center of the anime rectangle i can do it like this i'm going to give it width and height property and i set it to be equal to sprite with and sprite height i take x and y properties from the parent class and i place them on the child class once we have a width property here i offset x position by half of its width moving its center point to the middle of the image horizontally i will also move the vertical y position into the middle of the image vertically like this down here inside game class constructor i create an array that will hold all currently active explosion objects inside update method same as we do for particles i will call for each and for each explosion object in explosions array i call its update method we will also use filter method to remove all explosion objects that have marked for deletion properties set to true inside the draw method i call for each on each explosion object again and i draw them passing it context notice i draw explosions after i draw enemies so they will be drawn on top of enemies the order in which we call draw methods here matters we will have two different explosion types so same as we did with adding different types of enemies to the game on the main game class i define a custom method i call add explosion we will have a variable that will randomize a number between 0 and 1 like this if that random number is less than 1 for now take this explosions array and push new smoke explosion inside i pass it game so this keyword it will also need a position so we will take it from the anime we just collided with we will add a reference pointing to that entire enemy object here as an argument x and y of this explosion will be x and y properties from that enemy object that is passed here let's try to add it into the game and see what we've got so far up here on line 419 we check if player collided with an enemy that enemy will be destroyed and we want to animate an explosion at that position so i will call this dot at explosion like this i pass it the enemy player just collided with and destroyed as an argument i also want the explosion animation to play when we destroy enemy with projectiles so here we check if projectile collided with an enemy if that enemy's lives are less or equal to zero it will be destroyed and we animate a splash of spare parts we set marked for deletion on that animator true and we will add explosion here as well like this i test it and we are getting no explosion animations i don't see any console errors let's debug it by console login explosions array from inside add explosions method every time we add one we consolidate the entire array i can see that add explosion method runs and creates the console log for us but the array remains empty let's see what i did wrong probably i made a typo somewhere oh i see this if statement never runs because there is no this.randomized property easy fix we need to refer to this temporary helper variable like this now i'm getting a console error which is better because this error will guide us to where the problem is the error says we must call constructor in derived class before accessing this now i know the problem is inside smoke explosion class constructor this is a socalled derived class when i create a new smoke explosion object i want the parent class constructor to run first creating properties and values shared for all child classes and then i want to add this little bit of code that's specific only for smoke explosion class to do that i have to call the parent class constructor using a special super keyword i know that parent class constructor expects game x and y so i pass these arguments along it's a good lesson for me to remember on a child class we must always call super class constructor before using this keyword otherwise we will get a reference error now when i create a new smoke explosion we create one new blank object this constructor will run first creating these properties and then these properties will be added on top of that smoke explosion will also have access to update and draw methods because of the inheritance that was set up behind the scenes by the special extents keyword we used we fixed all the bugs and typos when i test it i can see that everything works and we are adding smoke explosion into the explosions array and we are drawing the entire sprite sheet at that position perfect let's clean it up and make it into a proper sprite animation now this dust cloud is a sprite sheet we are drawing it using builtin draw image method on line 312. as we already did multiple times in this class we know that to animate a sprite sheet we need to crop out individual frames and swap through them one by one we do it by passing draw image method nine arguments image we want to draw source x source y source width and source height to specify area we want to crop out we want to crop out one sprite sheet frame at a time and destination x destination y destination with and destination height to tell javascript where we want to draw that cropped out image on destination canvas we already have the values for destination we just need to specify the crop area source x will be frame x from line 300 times sprite width from line 320. source y will always be 0 because this sprite sheet has only one row of frames width of the cropped area will be sprite width height will be sprite height so now because frame x times sprite width determines horizontal cropping coordinate as we increase frame x inside update method the frames will cycle and animate now it works but the animation is coming from the top left corner of each enemy and it plays very fast also we are not removing all the explosion objects that already animated and we have an ever increasing array i will check if frame x is more than max frame and if it is i know that entire animation played at that point it's safe to set marked for deletion property to true and that explosion object will be removed by filter method we already defined earlier in the browser console i can see that the old explosion objects are being correctly removed nice i want the animation to run at 15 frames per second i do it by creating a periodic event again timer will be counting from 0 to the value of milliseconds defined in interval whenever it reaches that value it will trigger next frame in the sprite sheet and resets back to 0 so that it can count again so if this dot timer from line 303 is more than this slot interval from line 304 increase frame x by one else keep increasing timer by delta time accumulating milliseconds until it reaches the interval this will serve only the first frame is because after timer reaches interval it needs to be reset back to zero so that it can count again for the next animation frame it still doesn't work i can see that update method expects delta time as an argument to be used to increase timer value online 313. i have a feeling i'm not passing it that value when i call it i go down to line 422 and i pass update method on explosion object delta time now we are animating the explosions at 15 frames per second structuring your code like this will allow you to set different fps for different objects in your game in this case we did it because player and enemy sprite sheets are optimized for high frame rate but explosion animation has only 8 frames so it looks better if we stagger the animation speed if you want to turn this into a mobile game you would have to do this for all objects player and enemies you would have to delete some frames and stagger their animation because current mobile phones will struggle to surf sprite sheets with so many frames we are using for our characters if you want lower frame rate spreadsheets for these characters let me know i can easily make them for you the explosions are animated in the top left corner of each enemy i want them to be in the middle so i adjust the initial x coordinate we pass it by half of enemy wave and the vertical coordinate will be adjusted by a half of enemy height like this this looks good i'm noticing that we are not showing the first animation frame of our smoke explosion sprite sheet it's because we first call the update method that increases frame x by 1 and then we draw it i can fix it by calling draw first and then i call update like this now we can see the first sprite frame as well and it stays long enough so we can actually notice it nice let's delete this console log we don't need it anymore i can change the animation speed of dust clouds by changing the value here in fps property when i set it to a very low value like 5 frames per second it becomes obvious that they are not being correctly placed within the game world they are static but they should be scrolling along with the game world for the positioning to look right i fix it by accounting for the current game speed in their horizontal coordinate calculation like this now they scroll with the game world and it looks as it should i think a good fps for the sprite sheet is around 30 frames per second yes i'm happy with this for now let's create a fire explosion this time it will be very simple i copy all the code inside the constructor into the other child class image will have id of fire explosion like this i actually decided to refactor the fire sprite sheet and now both smoke and fire sprite sheets have frames 200 times 200 pixels in that case i can remove sprite with on child class and i can place it on the parent explosion class because now it's shared for both explosion types in that case i can actually take all these properties and add them on the parent class as well i remove them here since they will be automatically inherited nice that's cleaner so only the images are specific for each class all other properties and methods will be shared and inherited from the parent class down here inside add explosion method i say if randomize is less than 0.5 create smoke explosion else careful about the brackets and syntax here else create fire explosion nice work now sometimes we get a fire effect sometimes we get a smoke effect inside game class constructor i adjust time limit to 30 seconds winning score will be 100 so the player needs to get at least 100 score points in 30 seconds to see the winning message i set ammo interval to 350 milliseconds so that ammo recharges a bit faster and i set enemy interval to 2 seconds let's test it we have a bug i got a winning message and there were some leftover enemies and colliding with them reduced my score below 100 and losing message was displayed instead i need to make sure that after the winning or losing message appears colliding with enemies doesn't affect the score i do it here online 437 only decrease score when we collide with an enemy if game over is false let's tune the game into a more playable and challenging state i make heath whale less likely to appear in our game and luckyfish more likely like this i give hive whale 20 lives luckyfish will have five lives angler two will have six lives angular one will have five lives for example i said game with 2000 pixels this will make the game easier as we can see enemies coming sooner and we can plan and manage our moves and ammo better i try to play to get a better idea of how much score i can get in 30 seconds okay the game ended because we reached winning score 100 in 25.1 seconds let's set winning score to 80. i can strategize now i can see there is a lucky fish come in that will replenish my ammo so i will use as much as my ammo as possible before i get the refill now i get a refill and i can go crazy with my lasers i will be careful not to hit the lucky fish coming at the bottom so that i can collect it and make my power up state longer okay it took 24 seconds to get the score over 80. game has a time limit of 30 000 milliseconds 30 seconds if the game runs for that amount of time it will end we need to get enough score points in that time period this is just my choice you don't have to do this but i want the game to always run for 30 seconds i don't want it to end as soon as we get over the winning score so i will comment out line 456 game will only end when time limit is over 30 seconds and based on how much score we managed to get we will see a winning or losing message there is an element of luck in the game we designed because it is very dependent on which type of enemy spawns if we get just lucky fish and hive wales we will get a lot of score points fast if we get only anglers it will be very hard to win the game i gave you all the tools and techniques you need to understand you can now adjust the game time enemy health and winning score yourself to make the game as easy or as difficult as you want it to be the game runs well on my gaming pc but if you have a chromebook or some very old laptop you might be experiencing performance issues i focused this class mostly on handling graphics and animation there is a whole other set of optimizations we can do to make this run even on the oldest machines but that's beyond the scope of this class notable optimizations would be for example to draw on multiple canvas elements and only clear parts of canvas that actually update it object pooling technique would also have a massive positive effect on the performance it means that we create a pool of particle and projectile objects and we just reuse them over and over rather than creating new ones and discarding them after one use for this project the quick changes you can make to improve performance would be to increase enemy interval property to make enemies spawn slower if your computer is not keeping up you can also remove all shadow properties inside ui class canvas shadows are still not well supported and optimized in some browsers especially in firefox we can reduce the number of particle spare parts that fall from enemies when damaged and we can also make sure they only bounce off the floor once or that they don't bounce at all if you are still getting performance issues you can also merge all background layers into one image and just animate that one layer that will increase performance massively same goes for our sprite sheets i gave you sprite sheets with 37 animation frames which looks really good and smooth in motion but if you struggle to get 60 fps reducing the number of frames and have each animation to be just around 15 frames let's say and staggering animation speed with delta time like we did with animated explosions would make the performance better as well i will probably release a version of sprite sheets with lower frame rate for each character so you don't have to do it manually yourself bonus extended lesson where i add more enemy types animated projectiles shield and simple sound design is linked in the video description but feel free to play with the code and add your own features with the techniques we learned today let me know if you finish this project by typing i did it in the comments if you want more vanilla javascript game dev come and build this game with me i will show you how to use state design pattern for more complex player controls and movement and how to split our code into individual modules click like please i'll see you there