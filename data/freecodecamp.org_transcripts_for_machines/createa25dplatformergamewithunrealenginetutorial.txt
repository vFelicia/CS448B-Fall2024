what is up welcome back to another unreal engine course and this time we have a really cool let's just see the game that you're going to create so if i hit the play button we have a nice ball we have a nice glowy effect we can move the ball left and right we can jump with the ball so this laser over here is going to kill us pay attention at the top left corner for our energy bam is being drained as you can see we can interact with these cubes so i can you know like push it or drag it towards me like this and i can jump from one wall to another like spiderman over here and of course you're going to learn how to do all of this we do need to drag this other cube so that we can prevent these other lasers from killing us and there you go now we can jump on the elevator click on the e button to interact and when we jump off the elevator it goes down and no now we cannot reach the top what we can do well we can jump and interact with this cube there you go so we can do that as well bam there you go and we can jump over here and voila we reach the top of course this project you will have assignments in it that's the beauty of it so i will give you assignments to finish the game and you can add new features because this serves like a template that you can use to build upon so you can add new features and that way you can learn and so on and so forth now even though this looks like a some simple game believe me you're gonna learn a lot of cool things because a lot of interesting things went into creating this project so again just go through it you will have assignments to finish it because i will show you how you can rearrange these rocks to create other levels to add new features more obstacles so on and so forth again while while my channel is still not dying and i'm not asking for help just you know share the video like it subscribe and comment below it helps the algorithm so this channel can grow so yeah we're all a community over here so be part of a community like share it so i mean other people can benefit and you help me as well so it's a winwin situation anyways thank you uh i guess thank you for watching this video and uh stay out of jail i guess man because you know you cannot watch this video if you if you're in jail take care and enjoy the rest of the tutorial so now that we saw the game that we're going to create let us actually create the game so over here i have the unreal engine project browser you know what it is so we're going to click here on the games and then click on next over here we want a blank project from here click on next blueprint is fine we don't need the starter content so you can either do it with or without but you know essentially we don't need it everything over here can be as is now over here as you already know is where you're going to store the project so make sure that you well set that to your desired location and over here is the name of your project so we are going to call it plat for mer there you go and i'm going to click on create the project and voila we are going to wait probably a gazillion years and i think i think that i will need to cut out the video so uh yeah see you when this finishes and finally we are here it didn't take that long but i still had to cut it out because you will probably be mad to be like and i'm not gonna go further into that just kidding but anyways the next step for us is to click here on the content right click that is and show in explorer there you go so this is where we are going to put the assets and the assets are right here so these are the assets you can download them link will be below this video so just you know scroll down below the video and you will see a link where you can download the assets and what you're going to do is copy all of these so copy all of the assets everything that you see in this asset folder and over here again right click here on the content show in explorer and it will open this bad boy for you right click and paste the assets so when you paste the assets we are good to go now when we go here in the maps and click on the example map voila this is our map now again these are all you see as you can see separate items that you can put together in order to create the level and what i'm also going to do is here inside of the outliner so world outliner which is on the right i am going to right click over here and create a folder and it's going to be level parts or how everyone going to call them and i'm going to select all these rocks and i am going to put them inside of the level parts folder just so that we can organize them a little bit and we don't have you know everything clustered inside of this inside of the world outliner anyways what's good about this is that you can always you know you can move these things around to create new levels yada yada yada it serves like a template and stuff like that so you know for the assignments that i will give you later on to create new levels you can do that on your own so basically that's that anyways the next step for us is to go and create our ball player so let's go over here in the blueprints which is currently empty i'm going to right click and we are going to create a blueprint class and this class is going to inherit from the character now as you can see here characters are pawns that have a match blah blah blah blah click on that and this is going to be bp underscore player ball so player underscore ball or you can put that everything you can put that all together it's up to you you know it's not important and i don't care you know i don't care what you do okay it's your life you can do whatever you want but anyways just kidding what you need to do or what we are going to do now is that we are going to add a mesh and all the good stuff now first things first we are going to attach or add a static or actually yeah a static mesh component so let's go over here click on add component to filter for static mesh component here it is this is the bad boy as you can see this is the skeletal mesh we don't want that we want this one static mesh component now for the static mesh click here as you can see where it says the static mesh click there and filter for the ball so click ball and sm ball here it is so click on that one and there you go this is our ball it's you know very funny now over here for the elements we are going to search for the ball element so click here ball filter for the ball and there you go it looks like a golf ball you know it looks like a golf ball so we're going to say it's a golf ball anyways what we are also going to do is we are going to scale it so over here in the transform for the scale click on the lock icon and we are going to say 1.5 for the scale to rescale the ball so it gets a little bit you know larger also for our capsule component what we are going to do over here is the half height and the radius are going to be 75 for the half height radius is going to be also 75 so as you can see now the whole ball is covered in the radius of the capsule component make sure that you compile and save that what i am also going to do is i'm going to attach a spring arm so click here on add component and filter for the spring arm now if you don't know what is a spring guard basically it's a holder for the camera so you can think of a spring arm as a holder for the camera what we are going to do for the spring arm is over here for the rotation on the z axis we are going to say negative 90. there you go and we are also going to set the target arm length so this over here in the camera it's currently at 300 we're going to set it at 1536 so 1536 which is going to make that a little bit further away from the ball there you go when it comes to the target offset for the zaxis we are going to set that at 300 there you go and basically as you can see it's right over here like in a diagonal way with an angle it's looking at that ball so basically that's that do collision test over here we don't need this so if true do a collision test using probe channel prop size you you know we don't need this we don't need this so compile and save that and the next step for us is selecting the spring arm and attaching the camera so click on the camera and there you go so now we have the camera on it when it comes to the camera we are basically not going to touch anything we don't need to touch anything because we have everything set up within the within the spring arm now make sure that you compile and save that if i were to go over here in the example map and hit on play button and over here just one second we do have because uh i prepared this project and some of the things that we do need to delete what we need to do is go here while you're in the example map level click on the you see over here where it says blueprints click on the drop down list and click here open level blueprint when you click on that just delete these two notes so just delete these two compile and save that this is later on for creating the ui for the game so when we have our ui we will have this over here or or somewhere else it's not important but that is for the ui if i hit the play button now everything is cool but you see this over here we don't have our ball we don't have anything so what we need to do is go back here in the content browser inside of the blueprints and right click and create a blueprint class and from here from all classes in the search we are going to filter for game mode and we want this one game mode so make sure that you select the game mode click on select and it's going to be bp underscore plot former underscore game mode so this is our platformer game mode we only need it for one reason and that is to go inside of the project settings and click here maps and modes and over here at the top where it says default game mode we're not going to set the game mode base instead we're going to say the platformer game mode the one that we have just created which now enables us to edit the default pawn class which is actually the player so from the default pawn class we are going to select the bp player ball which means now when we go here in our example map let me just close the example matt blueprint over here as you can see i have already prepared from this level this is the player start or where the player is going to be spawn when we run our game so if i hit play now there you go we have the ball and this is because we created the gamemode base and we attached it over here and we set the player ball to be the default pawn class and now when we you know run the game it is being spawned moving forward let us go back inside of our player ball and what we are going to do first is create the variables that we need so the first variable is going to be our ball material instance like this now i am going to just declare all of these then i'm going to set the types and whatnot next we have the move direction next we are going to have over here flat velocity and what did i type over here so it's flat velocity there you go click on the plus and again here we have the current speed moving forward we have the rotation amount so rotation amount moving forward we have the ball rotation rate moving forward we have the power we have the energy so energy and is dead he is dead and last but not least we are going to have the hud reference so click here compile and save and what we are going to do well first things first we are going to set the ball material instance click on you can either click here so you can either click here on this little icon the red one because currently all of these variables are booleans and you can either click there where i'm currently pointing with this arrow or you can click on here variable type which is in the details tab on the right side and from there you can click here on the search and you're going to search for material and you want a dynamic material instance let me just find it over here actually is it dynamic or just material let me just see over here so it's dynamic material yeah here it is material instance dynamic this is what we want and you're going to click on this object reference this is what we need so material instance dynamic move direction is going to be a vector so click on the button to choose a variable type and move direction is going to be a vector flat velocity is also going to be a vector so click on the button to change the type of the variable the current speed is going to be a float so click on the button and select float the rotation amount same is going to be a float so click on there the ball rotation rate is also going to be a float but for the ball rotation rate we are going to set the default value so the default value for the ball rotation rate is going to be 0.75 and you can set the value over here where i have just drawn now moving forward we are going to have our power and energy both of these are going to be floats so float here energy is also a float make sure that you compile and save that then over here the value for these both are going to be 100 so 100 for the energy 100 for the power is that is going to be a boolean and we're going to leave it as is here for the energy and power make them publicly available and also for our also for our puzzle mode so we have one more variable which is going to be our puzzle mode and i am going to move it over here and put it right directly below the material instance so let me just change the order even though the order doesn't matter but hey so here i'm going to say puzzle mode there we go click on the button over here and we are going to set this to be a boolean compile and save this bad boy and also the puzzle mode just set it over here to be a public one now this is for the variables that we are going to use moving forward what we are going to do we are going to first create our event so i can remove this from here we will need this later on but over here right click and for the node we are going to search for a custom event custom event is the one that we created it's not already defined we are going to define it right now so i'm going to call this bad boy enable disable input and this is going to allow us to either enable and disable the input now one thing when you click on this over here you can have these inputs which are basically parameters so i can click on over here for the plus button and add a new parameter and over here the parameter is going to be a boolean and the name is going to be enable so there you go and now we have a boolean parameter over here so what's going to happen here is that we are going to go in a branch and the branch is an if else statement and the condition that we are going to test is this enable so enable is a condition that we are going to test it's either true or false if it's true we're going to enable the input but before that we are going to get the player controller because the player controller is the one who can enable and disable the input so over here i can say enable input like this and right click over here i can say disable input now this is going to enable and disable the input on the player controller which means it will disable the input on our ball there you go so if it's true we are going to enable the input and i'm going to click on this and i'm going to position it like this and if it's false we are going to disable the input because the parameter is enabled if enable is true then we're going to enable the input if it's false we are going to disable the input pretty straightforward here i'm going to create a comment section i'm going to call this bad boy enable backslash disable input and if you didn't see how i created a comment section basically what you need to do is just you know hover or or select with your mouse like this by dragging your left mouse select all the nodes that you want to group in a comment then right click and go over here create comment from section and of course you can select this comment you can delete it and it can go away so if i select it now and hit delete it will be deleted and go away over here everything is straightforward i don't think there is no extra explanation for this or if there is just you know let me know in the comment below the video anyways moving forward we want another we want another custom event so let's go over here and right click and we are going to filter for custom event and we are going to add here a custom event and we are going to call this one change ball material instance so the name of this bad boy is going to be just double click it over here again okay here it is change ball material instance there you go now this actually excuse me it's change ball material color not instance color so change ball material color now this bad boy has two parameters click on him and inputs click plus two times the first one is going to be the param name so here we're going to say param name and the type over here is actually going to be the name so name is going to be the parameter and over here we are going to have a value float so here we are going to say value and there you go so compile and save that again as you can see we have two parameters one is the name and other is the value what we are going to do is we are going to get the ball material instance so we are going to get it which is the one over here that we have as you can see here is the bad boy what we are going to do now we are going to drag from here a node and we are going to say set scalar param value basically this is going to change the value of the parameter so over here we're going to plug this in so this goes over here next we're going to plug in the parameter name over here and the value will be plugged over here and after that we are going to get the ball mesh so here we have the static mesh and i need to change the name to the ball mesh i mean it's not important but you know for our references it is better to know so this is a ball mesh and we are going to say over here set material there you go not this so from here set material and we want this one so set material there you go plug this in over here this goes over here and last but not least we want the material which is the ball material instance so here get the ball material instance and plug it in and there you go compile and save that now what i'm going to do is select this and again right click and create a comment from section is going to be change ball material color and make sure that you compile and save this what is this essentially what is this going to do well basically if i go over here and select the ball material and you see here we have the ball material if i click on it this is that material and let me just open it so over here is the material now i'm not going to go into this because this is a separate topic on its own you know dragging these materials creating them with the nodes and whatnot but over here you have some parameters like power like is active and so on and so forth that control certain aspects of that material as you can see we then have the divide then put it in the lerp and the multiply and basically as i said this is a separate topic on its own i will probably create a separate video just talking about how to create materials how to do this and that with them but essentially what you need to know for this tutorial is that these parameters like power is active and so on and so forth they control the colors of this material so over here now when we call this change ball material color the parameter value is going to be one of these parameters such as power such as is active so we're going to put that in the name over here and the value is going to be well basically value one two three it doesn't matter you know but the value of the number now what we need to do in order for to make this work is go over here in the begin play and i'm going to move a little bit up over here the first thing that we need to do is we need to get the material of the uh or from the ball so here from the event begin play we're going to drag a note that we're going to call set ball material instance oh actually excuse me first we need to create that so let me just get the ball mesh first get the ball mesh and from here get the material so get the ball mesh first and then get the ball material from the mesh and from the mesh we are going to create dynamic material instance there you go and we are going to plug this in over here actually let me just do it like this create dynamic material instance there you go and the target is going to be capsule mesh ball mesh let me just take a look at this what is this over here so it's not giving me the target is primitive component kismet library let me just go over here create dynamic material we want the one from the well all of these are from kismet no we want the first one create dynamic material instance this is the one that we want so yeah you can get confused sometimes with these because as you can see create dynamic material instance you see we have you know a couple of these functions so we want the first one create dynamic material instance and we want to plug in the parent over here and it goes right there so the next part and we can move this closer because i'm going to create a comment from this the next part is to set the ball material instance there you go and we want to set it to this return value that we have over here see returns value material instance dynamic object reference so we can set that to this over here now i'm going to select these and i'm going to right click and create a comment section and what's going to happen here first i'm going to say first set the material instance the material instance there you go and we can move this from here so you can move the begin play a little bit outside it's not important but you know just you know just so so something like this there you go maybe a little bit up because later on we are going to plug things here in the tick event so we got the material instance what is the next step the next step over here is to first enable disable impulse so we are going to say enable this able input and over here we have the parameter we're going to leave it false as you can see or know already if it's false we're going to disable the input so we're not going to allow the character to move so disable the input after that we're going to say change ball material color the parameter name that you are going to pass is going to be is active and notice here is active capital i capital a the value over here or the name that we pass over here as a parameter needs to match up with the name over here as you can see this is the name of that is active so is active you can click on it and you can copy the name and you can then go back over here and paste it just to be sure like that the value is going to be zero so we're going to leave the value at zero and now we are going to delay so we're going to call delay over here and we are going to delay for 0.5 seconds so half a second we are going to delay and after that copy this and paste it and again we're going to call it change material color for is active but this time we are going to set the value to be equal to one and compile and save this let me just go back compile and save that there you go i don't know if i didn't test it like this but let me just try it out to see if this will work yeah you see so yeah there you go as you can see of course we are going to change another color so we're going to change another color but for that we also need to create a timeline so don't worry about that we will do that in a moment but as you can see already we are changing the color so first things first and let me just stop this first things first we are sending the value to zero waiting half a second and then setting the value back to one as you can see now how the color goes as you can see to the red color so this is essentially what a small effect not important for the game but it gives a little bit crispy effect to the game like you know it makes it look a little bit better going back inside of the player ball blueprint next we need to create a timeline so in order to create a timeline we simply right click and simply type timeline like this and here it is at the bottom add timeline and we're going to call it ball activation timeline and what is a timeline basically well first we're going to drag a node over here to play and a timeline allows as you can see over here timeline node allows values to be keyframed over time how does that work we'll double click on the timeline over here and as you can see we have values so you have a float value you have a vector value you have a color track you have an event track we are going to click on the float track and for the float track you can you know give it a name whichever name you want i don't know value simply type value it's not important or float track or whatever we also are going to set the length over here to one so we're going to have a one length and you can right click so let me just compile and save that so you can right click and you can click add keyframe and you can click on this keyframe and for the time over here we're going to set it at zero and value is zero right click and add another keyframe and the value for this keyframe is going to be one one so basically the time so when you click on it the time is going to be one the value is going to be one this basically means it will go or this float will go from zero to one in the time of one this is basically what we what is a timeline so the value of this float will go from zero to one in length is one second basically so this is what we are doing over here so if we go back over here in this time graph from the update and what does this update in the timeline basically the time it will take for that float to go from the specified value which is zero to the goal value which is one so while that is happening this update will be called and when that happens from here we're going to say change ball material color there you go so change ball material color now the material color is going to be from here i'm going to take the power so get the power and we're going to lerp so i'm going to right click and i'm going to say lerp and we want the lerp to be from a float so not vector so power let me just see over here lerp here it is this is the one that we want and i'm going to break it from here let me just move this a little bit over here so that it is more readable so what's going to happen over here this is going to lerp from a which is 0 to the power value of the power is 100 if you remember over here if you select the power we set the default value to be 100 alpha over here is the time so the time it will take to go from 0 to 100 and basically that time is going to be the value over here from the timeline and we're going to set the return value over here we're going to plug it in and the parameter value is going to be the power so the power compile and save if we go over here we will see that we have a power parameter which is controlling the colors next when we finished so over here when we finish we are going to call enable disable input so over here when we finished we're going to call this enable is going to be checked so now we will be able to basically we will be able to move so compile and save that again what is happening so over here everything that we we did explain so let me just select all of this create a comment group and over here for the comments so double click it we are going to say change the color of the wall there you go so compile and save this bad boy so again from here we are getting the material instance we explained this from here we're disabling the input we explained that custom event that we have created change the ball material color we have it over here so it will change the ball material instance the color name over here and the parameter name over here actually and it will set the default value then it will set that material to the ball meshes material so over here we are changing the material color for is active to zero waiting half a second then setting the material color for the is active parameter to one then calling a timeline that will create a value this float value that will go from 0 to 1 in the time interval that we have already explained and then we are going to use that in the lerp function and lerp will slowly go from this value to this value over here in this time interval so it will go from 0 to power which is 100 in the alpha time and then we are going to set that value for the power parameter when everything finishes we are going to enable the input so compile and save that and if we go back over here in our editor and if i hit play pay attention now you see how the colors have changed so again stop and then click pause bam it goes from no color to red color to green color now of course you can change or you can play with the parameter values to extend the length so that you can clearly or more clearly see if you don't see the changes of the color for some reason so you can also extend the value of the time it takes to do that but you know i'm leaving up that i'm living up to you for you to experiment and yada yada yada basically so yeah let's move forward the next thing that we are going to do is create the ball movement and before we start to code that or blueprint that we need to go here in our project settings and for the input over here we need to create our axis mappings and action mapping so click on the plus button over here so this one is going to be our first action mapping and we're going to have a second one and click on the plus button over here for the axis mappings so first things first over here for our action one we're going to have jump and for the jump we are going to filter here in the search bar for the space bar so space bar when we press on our keyboard we're going to jump the next one over here i'm going to call action and action is going to be executed when we press the e button on our keyboard so let me just find it over here there you go so we press the e button on our keyboard and we will be able to move the elevator upwards as we saw in the preview of this game and we will be also able to move those boxes as well to so that they can come closer to us and so on and so forth this will happen when we press the e button now over here for our axes we are going to say move right this is going to be the name of the axis and now over here not pressing this plus button but pressing this plus button to add another input so basically click here and the first one is going to be keyboard or key code a and the next one is going to be key code d for the key code a we are also going to add here minus and there you go so this basically means when we press the a or the d key we will trigger this move right axis mappings now what is this a and d basically moving left and right minus 1 is for a because negative side left side basically is the negative side that's why we add here negative 1. so now we can go in our ball player blueprint and right here below this change ball material color we are going to create another custom event so right click over here custom event and this one is going to be movement update or movement however you want to call it it's not that important but it's important that you know what it is so over here we're going to go in a branch which is an if else statement and basically it will be true or false and the condition over here is going to be our puzzle mode so i'm going to plug it in over here and if it's true we are going to move our ball in one way if it's false we're going to move it another way so first over here i'm going to right click and we are going to say set move direction like this and what's going to happen over here from the true i'm going to drag it and i'm going to click on this line for the note two times and i can add another input over here so that i can you know as you can see i can visually set it or make it more clear clearer to read clearer now is a word anyways now over here we are going to say get move right and from the move right we are going to make a vector so i'm going to say make vector and that vector is going to go inside of the x axis and i'm going to plug it in over here and this is basically we can move this a little bit up just to make it a little bit more clear to read and let me just move it a little bit down like this so that it doesn't come close to this and doesn't obscure it yada yada anyways the next thing if it's false i'm going to right click and from here again we're going to say set move direction like this and the false one will go inside over here and i'm going to double click it again and move it down like this and move this like this over here so if it's false we are going to calculate it like this we are first going to get and actually i can move it up here because we are going to calculate it over here we are going to say get actor forward vector like this so we are going to get the actor's forward vector and we're also going to get the move right get move right and we are going to multiply these two so we're going to say from here multiply by float so we're going to multiply this vector by this float and from there we are going to normalize this vector so normalize and from there we are going to plug in this vector over here and if i hover over it will say for the normalize if you don't know what it is gets a normalized unit copy of the vector ensuring it is safe to do so based on the length the return zero vector if vector length is too small to safely normalize basically what will normalize what normalize will do it will stabilize the vector so to say it will stabilize it and it will make the movement a little bit smoother that's the best how i can explain it in understandable terms so after that what we are going to do let me just move this a little bit here move this a little bit here like this i mean it's readable so everything is readable next what we are going to do is from here we are going to say add movement input and from there i'm going to plug this in like this over here so go from here there you go i'm going to double click this to create to create a new line over here and plug this one here as well so there we go so now both of these are connected to this one and lastly this one leads to over here which means basically both of these are leading the execution order to the add movement input now the last thing that we need to do is get the move direction so we need to get it and we need to normalize it so normalize and now that we have normalized the move direction we can plug it in over here and there you go so compile and save that basically again what we are doing based on the puzzle mode if it's true get the move right make a vector out of it over here which is basically going to create a vector with the value for the x that we have over here which is either 1 or negative one because over here you see we have minus one or one and all other values are going to be zero and then we're going to set that to the move direction over here if it's false then we're going to get the actor forward vector then get the move right multiply these two and from there normalize the vector and plug it into the move direction and over here then we are going to add that move direction normalized to the add movement input which is going to move our ball or character and i'm going to right click on this create a comment from section and this one is going to be movement update there you go and you can compile and save this now the last thing that we need to do in order to make this work to run it let me just move these comments or these sections over here and probably move this a little bit up over here because now over here in the tick event is where we are going to call the movement update there you go because the tick event is called every frame basically it's like update in unity so compile and save that and it will call every frame this event or you can think of it as a function as well and it will execute all the code that we have just explained so now we can go back over here in our example map and if i hit the play button and now you'll see that the ball is moving of course we cannot jump and the ball is not rotating so the next step will be to create that but the ball as you can see can move left and it can move right as well and we're moving left by pressing a key and moving right by pressing d key in the case of because this is a 2.5 d platformer we are moving forward and backwards backwards by pressing a forward by pressing d you get the point yada yada if something is not clear make sure to ask in the comment below so i can explain this before you proceed to create other things that we are going to do right now moving forward the next step is to go back in our player ball and now that we are moving let us rotate the ball and we're going to do that right below the movement update so i'm going to right click over here and create another custom event and over here i'm going to rename this one to rotate ball or something like that just so that you know that this is used for rotating the balls and also you can think of these custom events something similar like a function i already mentioned that because you can basically create them like this you can call them over here of course we can as you can see over here we have this place a new node but basically this can allow us to have a delegate on this event but i'm not going to go into that right now we will do that in another video anyways what we are going to do from the rotate ball first thing from here i'm going to drag a node and i'm going to set the flat velocity and what we are going to set in the flat velocity well first over here i'm going to say get the velocity so velocity and we are going to get that from here target is the actor then we are going to break this vector into pieces so that we can have separate x y and z and from there we are going to make a vector so from here i'm going to say make vector which will create a new vector that will allow us to plug in x y and z so we're going to plug in the x we're going to plug in the y we're not going to plug in the z because we're not moving so we're not moving the ball like this we're moving it forward and backwards so we're not going to plug in the z and we are going to plug this bad boy over here so this is let me just move these a little bit and this one over here so so that we have you know like a better visual representation of the node because these nodes can get a little bit tricky if you have too much of these they can get messy and so on and so forth same as like spaghetti code you can have spaghetti notes so you need to be careful about that anyways moving forward from here we are going to set the current speed and for the current speed we are going to set the length of this vector so length and from here we are going to say vector length here it is so select the vector length and plug it i almost said pug it plug it in over here as you can see the vector length is basically this think of it as a vector vector is like a x y and z so x y and z the length of the vector is we will use the length of this line length of this line and length of this line so it will you know like form a single line out of these three so that is the length of the vector so let me just compile and save this so now that we have the current speed we are going to go in a branch so from here create a branch which we already know is an if else statement and we are going to test the current speed so we are going to get it and we are going to test if the current speed is not equal to so it's not equal to you notice i'm using the exclamation mark and over here it will make it not equal to when we're testing it if it's not equal to zero basically meaning that we are actually moving so if it's not equal to zero that means we are moving and if that is the case so if it's true if it's false we're not going to do anything but if it's true then we are going to set the rotation amount and the rotation amount is going to be calculated like this first we're going to get the flat velocity so get flat velocity that we set over here so this is our flat velocity then from the flat velocity we are going to get the vector length so it's length and i have issue spelling length apparently so get the vector length from the flat velocity and after that we are going to divide that by a float so over here divided by a float and what is that float well the float is going to be the ball rotation rate so ball rotation rate so get the ball rotation right we know that we set the ball rotation right over here to be 75.75 excuse me so there you go now we are also going to get the pi so simply type pi and i believe it's in the kismet library let me just find it over here not pin debug sometimes it's hard to find things that you need so collision not collision where is it here it is get pi here it is so returns the value of pi and for the pi we are going to multiply that so multiply with the float and the float is going to be the ball rotation rate and from there we are going to plug this into over here now the next step that we are going to do is from here we are going to go and multiply this so multiply with a float and the float that we are going to multiply is going to be get world delta seconds and we're going to plug this in bad boy over here and moving from there we are going to add that so add a float and not like here break the link but here add the float and over here get the rotation amount plug it in over here and plug this in over here now of course we are not done we have still too many things to do i mean too many things just a couple of things but going back over here now this is one of the things that i want to talk about now to be completely honest going into detail how this works and what this is i have no idea but you know if you search online how to rotate uh character how to rotate upon how to calculations to do that you will find many different solutions and you just plug in sometimes i just plug in the solution and it works this is just to show you that you know you don't have to know everything i don't know behind the scenes how this calculation work this is some i'm not gonna say complex math but if you are into math a little bit more you'll probably understand this how or why we are using or how we are using the vector length of the flat velocity dividing that by the p multiplied with the ball rotation rate and then multiplying that with the world delta seconds this is everything to smooth things out we can basically rotate the ball by just using get world delta seconds multiplying that with the ball rotation rate and it will work you will probably be able to rotate the bulb just by using that so multiplying the get world delta seconds with the ball rotation rate and adding that to the rotation amount and that will turn out just fine but these extra calculations are just to smooth things out but as i said like the math that goes behind this i don't know completely so just to be honest so we are going to leave it like here if somebody knows he will explain in more depth but this is just to show you that you don't need to know every single thing and every single aspect about game development in order for you to be a game developer so you can you know just find some solutions online if they work for you they work great then you can just proceed you know further in your game so what we are going to do next is we are going to take the ball mesh and from the ball mesh we're going to say set world rotation like this and move this a little bit here and plug this in over here so what's going to happen here or the rotation that we are going to use is we are going to get the flat velocity get flat velocity and from it we are going to make a rotation from its x so basically from the x axis of the flat velocity and sometimes i don't know why it's a low but anyways so we are going to get from the flat velocity or create a rotation from its xaxis and from there we are going to get the right vector because we are rotating forward so we are rotating in this direction and in this direction so that's why we're getting the right vector and from there we are going to create a rotator from axes and angle so we are going to create you see creates a rotation from on this and this is probably uh miss or how's it called misspelling or mistype or type or whatever create a rotation from this axis and supply the angle in degrees so the axis is the right vector from the x rotation from the flat velocity and the angle is going to be the rotation amount so get the rotation amount and we are going to plug this into over here compile and save that now let me just take all of this right click create a comment to rotate the ball like this compile and save and we can go over here and call it rotate ball so that we don't forget to do that well we will need to call it here in the tick in order to test it out if we don't do that then it will not work but going back over here how we are getting the flat velocity is pretty pretty clear we're getting the velocity as you can see returns the velocity in centimeters unreal unit seconds blah blah blah basically what is velocity there is velocity is speed over time so the speed over time is how much the velocity is so depending on the speed over the time that's the velocity and we're getting the velocity breaking the vector of the velocity getting the x and the y and plugging that into flat velocity this is pretty clear how we're getting that we're getting from the flat velocities vector length the current speed and then from there if the speed is not equal to null because if the if we are not moving the length of this flat velocity will be zero and then we will not go inside of this branch and we will not rotate the ball but if we are moving then the vector length will be greater than zero so from there we did this all of this here as i already said but probably i didn't test it out but i'm pretty sure that you can just rotate the ball by using get world delta seconds multiplying that with the ball rotation rate and adding that to the rotation amount you can try it out and then from here we are getting again from the flat velocity we are getting the creating a rotation from its xaxis and getting the right vector from there and creating a rotator or a rotation from that angle and that axis and plugging that into our rotation set world rotation for the ball which means that we can basically go now over here and i can hit the play button and you will see now that if we move you see how the ball is rotating and notice how the ball is rotating only you see when we go left it is rotating backwards if we go forward it is rotating forward so that is why we are using that get right vector this right over here get right vector that's why we are using that because we are rotating here in this direction and here in this direction we are not rotating up or down or like this and like this so again if i run it you will see now pay attention the ball is rotating moving forward now we are going to create the jump for our ball because well we cannot progress in our level without it so over here right below the rotate ball i am going to right click and we are going to get the jump which is the input action here it is input action jump now what we are going to do is when we press it so over here i'm going to go in a branch and what i'm going to test here in this condition is if we are falling and we're going to get that from the character movement so here is the character movement component over here at the top it can detect if we are falling or not which is the beauty so from here we can say is falling let me just get it here it is and i can plug it in over here so if we are not falling so if that is false we are going to say jump simple as that so there you go compile and save that so again the character movement component has some builtin features it can jump as you can see over here target is character it can jump on its own it can also detect if we are falling down from the sky or basically falling down from the air so we can use that from the character movement if we are falling so if that is false then we can jump and we can test this out right away we can go back over here we can hit the play button we can move as you can see now i can jump pay attention you see bam bam we can jump but well as you can see as you can see the ball is not jumping that high what we need to do is select the character movement and change some things over here such as the gravity scale for example we are going to set that to 3.5 we are also going to set over here max tap height we are going to leave that so walkable floor angle we can leave that to set at 45 just to a random number maximum walk speed i'm going to set that to 800 instead of 600. i'm also going to check this checkbox can walk off ledges when crouching which basically means that we can walk off ledges also over here ball or jump z velocity over here it's at 420 i'm going to set that to 1 800 and over here air control we're going to set that to 1. so if you hover over when falling amount of ladder movement control available to the character zero no control one full control at max speed so basically we're giving full control to the character of the ball when he is falling also over here at the bottom for the maximum custom movement speed i'm going to set that to 800 basically all these things are selfexplanatory so maximum movement speed custom movement speed basically how maximally the speed can be by which we are moving over here for the air control we are already explaining that jumps the velocity initial velocity so basically on the z when we jump how high that velocity is can walk off ledges when crouching we already explained that so on and so forth yada yada yada we don't have to explain all of that because as i said they're selfexplanatory so now we can go back over here in our game and hit the play button and when we jump now the ball is jumping higher as you can see and everything seems perfectly fine and it is except when we get over here to this edge we cannot bounce off of it and we saw that when we jump on the edge or on the ledge over here that we are able to jump from another ledge to another ledge as you saw in the preview from here to here to here to here so on and so forth but we cannot do that how can we actually do that well for that we need to create something called a line trace by channel so we need to go back over here and from the true meaning if we are falling which means we are already in the air we have jumped so if that is true we are going to say line trace by trace by channel there you go and i'm going to move this a little bit over here because we have some calculations to do the line trace by channel would will trace a line from the start till the end that it will give us a hit if we hit something so from where to where we are going to trace that line first things first we are going to get the actor forward vector so over here right click get actor for word vector there you go and i think i need to move this a little bit further over here because we will have some calculations over here so what we are going to do now is from the actor forward vector we need to do some calculations over here we're going to multiply him so multiply him with a float and what float is that going to be well first let me just set this like this over here now i am going to get the capsule component so getting the capsule component and from the capsule component i'm going to get the scaled scaled sphere radius or get scaled capsule excuse me scaled capsule radius why did i say sphere because this is a capsule this will return the capsule radius scaled by the component scale so basically the scale of the radius or capsule radius is 75 we are going to scale it by the radius and the radius is basically one so that is what we are component scale which is basically the scale of the component which is one so after that we are going to say from here plus float and we are going to add to it 10. so the value of 10. and this is the value that we are going to plug in over here to multiply with the vector with the actor forward vector because now let me just move these a little bit down here i can get the so i can say get actor location and what we need to do is from here we need to subtract so we need to say minus vector and we are subtracting it from here and the line trace can go over here and this is the start of our line trace there you go now where is going to be the end of our line trace well from here again i'm going to multiply this with a float but again let me just click on it over here something like this can do i'm going to move this bad boy over here again we need to get the capsule component here you go and get skilled capsule radius again some of it over here and again we're going to add to it 10. so plug this in over here i'm basically just copying and pasting this you can select it you can control c command c on mac and ctrl v command v on mac and after that we are going to and i think i can move these down just so that they are a little bit better to read so like this yeah this can work so then we are going to plug this in over here but this time we are as you can see we are multiplying everything but this time over here we are going to get the actor location so copy and paste the actor location and here we are subtracting but now we are adding so plus vector and plug this in over here there you go and this one goes over here for the end trace there you go so this is the beginning and the end of our trace and what this will do is create that trace line for the so compile and save that this will create the trace line from the ball so if the ball is here and since i added 10 over here it's basically going to create a trace line like this so this is the trace line that is going to be created from here to here and it is going to detect anything that we touch within that trace line so what's gonna happen after that is that we are going to go in a branch and we are going to detect if we have touched something so here return value it's going to be plugged in the condition which means basically if we did touch something because you see here does a collision trace along the given line and returns the first blocking hit encountered so if we have a return value if we have a return value true if there was a hit false otherwise that means true we have a hit after that from this true we are going to go over here and we are going to launch the character so launch the character now what this will do is as you can see set appending launch velocity on the character this velocity will be processed on the next character movement component thick and we'll set it the falling and and we'll set it to the following states so yeah basically what this means it will propel the character simple as that but as you can see the explanations here can be complicated but this will just propel the character now what we are going to do is from our out over here what we are going to do is we are going to break the hit results this hit result as you can see this will be that game object or that actor whatever that we hit with this line trace and what we are going to do with it is over here i'm going to right click and i'm going to say get actor location i'm going to right click over here on the return value and click on split structure so that we can have x y and z separately and i'm going to take the x and i'm going to subtract from it so i'm going to say minus float and the float that i'm going to minus it from is going to be from this location right click and split the pin structure and we are going to take the x and plug it in over here the last thing that we need to do is take this and create a sine out of it so the sine value as you can see returns minus 1 if a is greater than 0 0 if a is 0 and plus 1 if a is greater than 0. i will show you what this will do and from here i am going to multiply that with the float so multiply it with the float and basically this is the amount by which we are going to propel the character so let's say 800 and we are going to plug it in for the launch velocity or actually excuse me delete it promote to variable or actually split the pin structure so this goes in the launch velocity for the x the z launch velocity is going to be 1000 and 400 and we're going to override all the axes overriding all the axis basically means that we will use this new velocity for it simple as that so just use the new velocity and there you go so compile and save that now one thing that we can also do is use this debug draw debug type and we can say this persistent and compile and save that just so that we can see the line trace that's being drawn so did you see it here it is this is the line trace that is being drawn so again there you go you see this is what we are doing there you go we are drawing these lines and as you can see as i said they're something like this so this is the line where we are drawing it why is this important because now when we go over here we will be able to touch these and we can bounce off of them you see you see now how we can bounce off of these but before that we will not we were not able to do that now the reason why we are able to do that because as you said this right here now makes it is a bit is a little bit clearer because you saw the line that is being drawn so the line is being drawn from this calculation and this is an arbitrary number that i added so it's not like you always add 10 and it will be perfect now you can experiment this you can add 15 20 30 40 50 a gazillion but you get the point and we need to you know go back from here this is the start and this is the end so that's why i subtract it over here and add it over here because the end needs to be greater and the start needs to be smaller so that you can start from here and go up to here for example now we can remove this we don't need to draw it again and this right here we explain what it is this is pretty clear we got from the hit the details from the hit the object that we hit we got its location x we are subtracting the location x from our own actor and the location x from the actor that we hit now what is this sign well basically this sign will stabilize our character i don't know how to explain it better except by showing you so i am going to break the link over here and i'm going to plug this in over here just so you can see what's going to happen if we don't have this sign and let's go over here and now you're going to see what's going to happen if we don't have this sign to stabilize our character in the air when i say character i mean the ball but it can be any other character now notice now when i jump bam you see i've jumped off that cliff or the edge of the cliff where i was and it can happen the same thing can happen over here you see actually i cannot jump on that so let's try it again over here again when i jump you saw before we test it out it worked perfectly we will we were able to bounce off of this but now you see this so that's why we're using this sign to practically stabilize our character in the air so compile and save that this will stabilize it in the air how that mat works behind the scenes i have no idea don't even try to ask me but this as you can see will stabilize the character and if i go back again you will notice so anytime you need some stabilization especially in the air you can use that sign to convert that float into a more stabilized value because now as you can see pay attention it only allows it to go to minus one and one as you can see if i hover over let returns minus one if a is greater than x if a is less than zero excuse me zero if a is zero and plus one if a is greater than zero so it will stabilize it will allow it to be between minus one and one and that's why our jump now is working and we can bounce off that rock or however you want to call it when we come close to it because otherwise you saw what happened we we got propelled like a gazillion years in time but yeah this is for our jump the last step that we can do is you know i can actually now select all of this and we can move it a little bit back so something like this and we can select it right click create a comment player jump we can call it like this compile and save that so yeah play it's actually player not pl error drum it's player jump there you go compile and save that and we don't have to call this with the tick event because you know we just need to press the function press the button that is connected to this function in order for us to jump but yeah anyways this is how we can utilize the jump in order to you know jump smoothly with our ball okay the next step is to go back in our player ball blueprint and right here below create another custom event so this one is going to be so custom event and this one is going to be power damaged there you go just come closer to this bad boy now what is this going to do well basically we're going to have power when we pull together the cube that we have in our game that we saw in the preview so when we pull it we have power that will be drained when we do that now this power is going to have an input which is a parameter and it's going to be a float and that one is going to be damaged like this there we go so compile and save that what we are going to do is from here we are simply going to set the power so set power but to which value are we going to set it to well the value is going to be we are going to take over here the damage and we are going to multiply that so multiply the damage and what am i typing over here so multiply the damage with the get world so right click get world delta seconds there you go and plug this bad boy in over here so we are going to get the world delta seconds multiply the damage with that and we are going to get the power the current value of the power and we know if we select the power over here the default value is 100. so from here we're going to say minus float and we're going to subtract this value so we're going to subtract the damage that we pass as a parameter over here multiplied with the get world delta seconds now also what we are going to do is we are going to clamp this value so clamp the float and the value is going to be this is the value that we want to clamp and the value is going to be from minimum to maximum which is 100 like this and that is what is going to be set to the power now what is clamp well clamp basically if you hover over returns the value clamp between a and b inclusive and that's enough explanation for you to get confused but basically clamp means it will make sure that this value over here will not go below this value and it will not go above this value so this is what we are doing so it will not go below this and not above this and next we are putting that into the power the next step from here is to and let me see what we have over here so next we have the change change ball material color and over here the material color is going to be changed by using the power plugging in the power over here and the parameter value is going to be power so make sure that it's capital p and if you're not sure you can go back in the material itself and take or get that value the name of it that is next we are going to go inside of a branch so branch there you go which is an if else statement and the condition for the branch is going to be taking the power over here we are going to test if the power is less than or equal to if the power is less than or equal to one actually zero excuse me not 100 so if the power is less than or equal to zero that means we don't have any more power we have died so from here if that is true we are going to say set is dead check the checkbox to make it true and from there we are going to change ball material color and the material name or parameter name is going to be is on and the value is going to be zero which is going to you know make it look like we have died it is going to turn off the ball and last but not least we are going to enable this able input and make sure that this checkbox is not checked so compile and save that so let me just right click create a comment section and this is power damage now again i don't think that there is a lot of things that we need to explain over here because this is everything is basic just subtracting and multiplying and so on and so forth basic things this is to smooth the value out so multiplying the damage with the world delta seconds to smooth the value out because if we pass here the damage to be i don't know five it will subtract pretty quickly if we subtract it directly from the power especially if it happens multiple times you know in in a second for example but when we use get world delta seconds it will make a little bit slower so it will smooth things out and here we are changing the material color we saw that in the beginning we explained all that so i don't think there is a need to do it again but if it's if something is not clear make sure to ask in the comment below and last but not least we have another custom event and we will test these two out shortly we will come back to these two don't worry about that because we cannot test them right now and this one custom event energy damage this is the name of it as i said we cannot test that these two functions right now or events power damage and energy damage because we will need to have the ball actually we need to have the cube and we will have the lasers but before that we are going to have the ui to display that to the user everything will come shortly don't worry about that and i will revisit this again to explain it so over here again we're going to have an input which is the damage parameter and what's going to happen is from here we are going to set the energy here is our energy node and the value we are going to set it to we are going to multiply with a float and click here to add another pin because we're going to have three inputs over here the first one is going to be get world delta seconds as you can see over here plug this in over here and for the third one we're simply going to say one and then we can move this over here get the energy and the default value of the energy by the way is 100 as you can see over here and now that we have the energy we are going to subtract from it so minus float and now that we have that we are going to plug this in over here and clamp the value which is last thing that we need to do clamp the float and we are going to clamp this value between 0 and 100 same thing as what we did with r with the power above so going back over here plugging it in over here and there you go compile and save that now what's specific here for this energy i'm just going to create a comment over here and energy damage over here i'm going to say positive values are equal damage and negative values are equal to heal so when we pass a pas a positive number in the damage over here then what we are going to do is we are going to basically we are going to deal damage when we pass the negative value we are going to heal that and your assignment is to comment below how does that actually work so make sure that you for example pass here 10 and then 10 and see how that works you can use print and so on and so forth but i want you to figure and dig deeper into that and see how that works now we do need to take this energy damage and what did i do and we need to go over here inside of our tick event and from here we need to call energy damage and what's going to happen over here the damage value is going to be negative 25 because as i said the negative value over here as you can see positive values equal damage negative values equals heal compile and save that but as i said make sure that you dig in experiment use the print function or print however you want to call it to print out the values over here of the energy you can do that by creating another node and so on and so forth but i don't want to give you any more tips because i want you to investigate that and for you to actually see it now unfortunately as i said we are not able to test this out right away we still need to create the lasers we need to create the cube and we need to create the ui and when we do that we will come back to revisit these lines of nodes or code to explain them again what is happening so let us now create our game hud so we're going to right click over here in the blueprints and we are going to go under user interface and we're going to create a widget blueprint and we are going to call this bad boy bp underscore underscore not plus game hud there we go and double click this to open it over here and voila this is what we need now of course we're still not finished what we want is a progress bar so we want one progress bar we want another progress bar and we want a text there we go and is it a rich text block or a simple text actually a simple text not a rich text block so we can delete this and we just want the text okay so the progress bar first one over here is going to be the power bar the second one over here is going to be the energy bar and the text over here is going to be our interact text so i'm going to just leave it like this for now but what we are going to do well first things first the anchor for this power bar which is basically a slider is going to stay at the top left corner now the position x is going to be 24 the position y 24 the width and the height so size x 2 5 6 size y 2 4 there you go so this is how it looks like pay attention look a very nice slider yada yada now what we are also going to do is for the style click on the drop down list and we have the under style we have the background image and we have this tint color now the tint color for this one is going to be red so let me just click on it over here and linear hex color yeah here it is red so there you go this is going to be the tint color for r for the power bars this is the power bar yeah power bar excuse me so i forgot and for this one so going down over here the appearance fill color and opacity click on that one and over here we're going to have the green one now just one second i i did this quickly so this is over here the hex linear color that you need to type 0dff00f this is for the green one you can pause it to type it out and for the red one is over here let me just go and show you it's ff000ff but you know you don't have to do it exactly like i'm doing but if you want to follow along everything there you go also over here for the percent as you can see we can move it left and right so zero over here is well zero and when we are moving it to the one so this is how we are going to leave it so that is how it is going to look like this is for the power bar now going back to the energy bar so let's select the energy bar we are also going to leave the anchor at the top left corner and over here we're going to set the position x to 24 the position y is going to be 56 the size x 1 2 8 and the size y 24 there you go now for this bad boy we're also going to change the color so let's go over here under style click on this one and for the hex linear paste in over here zero zero zero a zero c f f or simply pause the video and copy and paste it and click on ok now for the color which is the regular color over here we're going to leave it as is so now if you go over here you see now this is what we have so when you move the percent there you go compile and save this bad boy last but not least for the text block what we are going to do is we are going to set the anchor at the top center so this is where the anchor is going to be as you can see over here the position x for our bad boy over here is going to be negative 1 2 8 so negative 128 40 for the position y the size for the x is going to be 256 to 256 and the size x excuse me 256 the size y is 40. there you go we're going to align the text in the middle and simply over here we're going to say e like in quotes in single quote single quote e single quote to interact there you go so this is what we have compile and save that now again this is not something that you know you need to follow strictly what i did you can experiment with these you can even create a better slider than these that i have created so be my guest and experiment this is what i want you to do that's how you learn the best now what we need to do in order for this and let me just close this bottle material yes close it yeah i don't care what we need to do in order to spawn this bad boy inside of our game is go over here in our game mode and previously in the beginning of the level if you remember when we deleted here from our level blueprint and we said over here open level blueprint we deleted from here two notes well these two notes were actually spawning the ui inside of the game so these two nodes were spawning the ui in the game and we can do it either here we can also do it over here in the game mode it's not important so in the game mode in the event graph over here we can delete a tick event and in the begin play we can do something like create widget like this so create the widget and the widget that we want to create is bp game hut and after that add to viewport and who are we adding to viewport well the returning value which we are going to put over here and there you go so simply compile and save this bad boy so again over here just create ui widget and from the class we can select the one that we have created over here which is our bp game hud there you go and from there we simply need to add it to viewport to make it visible and who are we adding to the viewport the returning value that's been created from this class over here so if we were to go now in our example man hit the play button there we go we have our ui at the top left corner we have the power bar we have the energy bar and in the middle we see that we have e to interact now of course this e to interact will not be visible right away from the beginning instead when we come close to the interactable game objects or actors but in order to do that we of course need to do a couple of other things so the first thing that we need to do is go back over here inside of our game hud and we can close the game mode and next you have the designer and the graph over here if you take a look at the top right corner so we are currently in the designer where we can you know design this but when we go in the graph this is where the nodes are being constructed so what we need to do is we can delete this preconstruct and in the construct the first thing that we are going to do is get a player reference over here i'm going to click the plus button and what i'm going to do is i'm going to say player player ref there you go and this is going to be our player character so or ball how did i name the player bp player ball so object reference from him also over here let me go back in the designer and select the text over here e to interact and when you select it over here at the top you have this is variable is variable so click on that and compile and save that the reason is because we also want to make that text block a variable and you can rename it to interact text or something like that can i click it over here actually we need to rename it over here text block 25 interact text there you go so compile and save that and when you go back over here there you go we have the interact text now what we need to do is we need to take the player reference and set it so how can we set it well first things first we need to get the player pawn player pawn and from the player pawn we are going to go over here cast to bp player ball and who are we casting we are casting the player pawn if that is successful if it works then we are going to set the returning value as a reference to the player character that we have just over here created after that inside of our player character blueprint we need to go over here and at the bottom you see over here we have the hud reference well now we need to change this type variable from boolean to game hud bp gamehud and go over here object reference compile and save that and there you go so now also make sure that it is a public variable so that we can now access it over here because now what we are going to do is from our player reference so take the player player reference and from here we are going to say set hud so set hud reference and this is going to go over here so the execution order goes over here and who are we going to set well we're going to set this game hud blueprint and for that we're going to type self and over here get a reference to self and plug it in over here now what the hell is this self self basically means it refers to itself so it is referring to this game hud blueprint now over here we need to do one more thing which is call another function that we still didn't create so let's go quickly create them over here li right below the tick event and in the tick event we will do another thing so over here we have custom event and we're going to have two custom events i'm going to copy and paste this one so i'm going to select this custom event and come on can you just why isn't this working for some reason i cannot rename it i don't know why there you go so show show interaction text there you go another custom event right click custom event hide interaction text there you go now what we're going to do is simply get the text or interact text there you go from here we're simply going to say set visibility and plug this in over here so plug it in over here the visibility if it's show we're going to make it visible copy and paste it if it's not we are going to set it to hidden there you go so compile and save that and what we need to do at the top over here after we set a reference to the ui hut in the player blueprint from here we're going to hide the interaction text which means now let me just compile and save that and if we go back over here in our example map hit the play button you see we don't have the interaction text previously it was here if you remember a moment ago it was there but now we don't have it because well now we are hiding it so we are doing that with these two events now what's going to happen here inside of our tick in the tick we're going to take the player and we're going to test if he is valid so is valid but we want this one with a question mark not the one with the f mark but the one with the question mark and this goes over here so if the player character is valid which means we have a player he is not dead we are going to take the power bar from here get the power bar and we're going to say set percent and this goes over here and the percent that we are going to set for the power bar is going to be from our player so we are going to get the player and from the player we are going to get the power and after that so we have the player we have the power then we are going to divide that by float and that division is going to be by 100 and then plug it in over here why by 100 so compile save that if we go back over here if you take the power bar pay attention now so over here where is the here is the percent as you can see it goes the value goes from zero up to one so if the power value is 100 we need to divide that by 100 in order to get the number between zero and one because if it's 90 the power drops to 90 if we divide that by 100 that means 0.9 so on and so forth you get the point and we're going to do the exact same thing for the energy bar so going over here first we're going to take the energy bar get it set percent exactly the same thing we're doing but this time for the energy bar so plug this in over here this goes over here and now getting the player reference getting the energy so get energy there you go and the energy also needs to be divided by a float and that division is going to happen with 100 again for the same reason plug this in over here and make sure that you compile and save that now this is in the tick event for the ui hud which means we don't have to do anything else the tick is being updated on its own and basically it will also update this when the player's energy and power updates of course if we go back over here we test this out nothing will happen because we don't have the lasers who are subtracting energy from us we don't have the cube that we need to move that are going to subtract our power so on and so forth so the next step is to start creating them moving forward the next thing that we want to create is our laser so over here in the blueprints we are going to right click and create a blueprint class and it is going to inherit from the actor and this is going to be bp underscore laser and inside of the laser first we are going to set the laser so select the default scene root and from here add a component which is going to be a particle system component there you go so this is going to be our particle system let me just go back over here where our objects are and why for some reason is this not slowing down and when i say this i mean the movement of my the movement of the mouse and stuff like that so yeah anyways for the particle system over here where it says particles over here for the template click on the drop down list and we want the electricity arc this one this is the one that we want now this one or actually the p electricity arc let me just find over here arc like this here it is the p underscore electricity arc not directly electricity arc so this is the one that we want so compile and save that and basically yeah we don't have to change anything else we can leave it as is and there you go now if we go back here inside of our example map and what i'm going to do is let me just go over here in the world outliner i want to create a new folder and that folder is going to be lasers who is going to hold our lasers and i'm going to put this first laser over here and i'm going to put it under this one so under the folder and the position for the laser is going to be 730 for the x for the y is zero and for the z 821 there you go voila so this is where our laser is going to be now if we were to run the game of course nothing is going to happen we are just going to come here close we are going to see the laser like this but the laser needs to fire like this over here not like this so in order to fix that we do need to go back over here in our laser actor and come inside of the event graph and using we don't need the begin overlap we don't need beginplay we need the tick event from here and for the laser what we need to do here we need to create two variables first one is going to be trace max max length and we also need laser direction so laser direction laser direction is going to be a vector which is going to determine the direction of the laser and the trace max length is going to be a float so compile and save that because now for the trace maximum length we need to set the value for it so the value the default value is going to be 100 000 so 100 000 is going to be for the maximum length and what we need to do over here in the tick event we are going to create a line trace by channel same as what we did with our ball that was enabling us to jump but this time we are doing this with the laser so that we can detect the player and actually deal damage with or to the player so over here i am going to get the actor location and this is the location of the current actor which is our laser what do i need with the location well over here we need to get the laser direction and we also need to get this trace max length and we need to add or actually first multiply these two so first over here the laser direction multiplied by float and the float is going to be trace max length that is going to be multiplied with and then we are going to add two vectors so the actor location vector plus vector this is what you want adding to the product of these two so now when they are added this is going to be our end trace channel and the start trace channel is going to be the actor's position directly or the actors location so as you can see and we already know how the line trace by channel works we saw that with the ball but again as i am you know just briefly explaining it so the start is from the actor's location and the end is from the laser direction multiplied with the truss trace maximum length plus to the actors location which means it's going to be way over here and it's gonna you know shoot that line and what's gonna happen from here is that we are going to go in a branch and we know that a branch is an if else statement the condition is going to be the return value meaning if we hit something it is going to well be returned now also what we are going to do is if we if the hit value is true we are going to set the from the particle system over here we are going to set the beam source set beam source point here it is and the beam source point is basically from where the being is going to start so if it's true we are going to put it over here now the new source point is actually going to be the actor location so we can copy and paste this bad boy over here and i can move this over here and i can plug this in over here so the new source point is going to be the actor location or the location of the current or the whole actor holding holding this particle emitter now also what we want to do is from here from our out hit we want to break this so break the hit point and this can be a little bit over here and over here just for readability purposes so to say next what we also need to set is we have the beam source point we also need to set the beam target point so from here we are going to say but first we need to get the particle system so copy and paste the particle system and from here we are going to say set beam so set beam target point so the source is where the beam is starting but the target is where the beam is going to hit so like his last destination the last destination is going to be the location of the hit that we well got from the line trains channel so that is going to be the new target point next what we want to do is from here from the other actor or the hit actor from here we want to cast to the bp player ball try to cast it so we are going to say cast to bp player ball like this so we are trying to do that and we need to get from here the hit actor and plug him in over here and let me just double click this bad boy so that we can do it like this as you can see we are taking the hit actor the hit actor is basically what we hit or touched with the line trace channel if that is castable or if we can cast him into a bp player ball that means we hit the ball and if we hit the ball what we need to do is we need to get from the ball the power damage so from here we're going to say power damage as you can see which is our function and the damage is going to be 50 and i can compile and save that there we go and if i go over here in our player ball and this is our energy damage this is the power damage so we're going to take the damage multiply it with the world get world delta seconds then subtract from the power then set the value over here and then use the change ball material color yadda yadda yadda you get the point but what's even prettier is that we can go here in our game hud and over here in the tick event we are using the power to set the percent and we can see all that visually being represented now so before we go back again and briefly explain what is going on over here even though i don't think there is a need but i will go briefly like in a minute or in a second explaining everything what is what is happening but if i go back over here and hit the play button notice now the power so pay attention at the top left corner and let me just take a look at oh yeah silly stupid stupid teacher me you see what i forgot over here i mean you don't but over here the laser direction compile and save that the laser direction for the x next needs to be negative one or otherwise this will not work because we're using over here the laser direction so as you can see multiplying with the trace max length if the if the laser direction is zero zero zero on three axes if we multiply that with any number it's gonna be zero so it's not gonna work also another thing that we need to do is go in the player ball and select his capsule component and over here for the collision we need to change this collision from the pawn to custom and over here we need to have the collision enabled to query in physics and we can also block all over here it's not important but what's important is that we have this query and physics so collision enabled basically and if we don't have this then we will not collide and i can just demonstrate that quickly so if we have a pawn over here like it was a moment ago if i hit the play button and go now to test this out it will basically not work there you go nothing is working and voila but if we go back and select the capsule component set this to custom and put it to collision enabled and we can block everything it's not important compile and save that so if we back or go back now and hit the play button so now when i come over here pay attention at the top left corner notice now how the laser is well destroying me and also you will notice how the laser when he touches me when he touches the ball and pay attention i cannot move now i'm dead when he touches the ball he's like cut out he goes only to the ball so the laser goes from here for example if he touches the ball over here he goes only to here he doesn't go above the ball as you can well see and if i go back over here and the reason why it cuts out on the ball is because of this beam target point is set to the break hit result or the hit result that we have from here and its location so there you go and if we have the player we are getting his power damage and what we are doing we are calling it by using damage 50 and we saw what's happening so we saw the top left corner and this over here we saw it how it's being calculated so on and so forth yada yada i've already explained that so basically yeah if something is not clear by any chance i believe we explain everything over here and in the ball we already explained what is happening something is not clear just make sure to ask and i will you know help you out but before we you know like proceed on other parts we are also going to copy and paste this laser because we are going to have another one so this laser is going to be at the position x 4 7 6 seven nine for the position y zero and for the position z is two six one one there you go so this one is going to be over here as you can see now we are going to copy and paste this one as well because we are going to have the third one and the position x for the third one is going to be seven six eight zero and zero zero for the or zero for the y and for the z it's going to be 2 4 4 8. there you go so compile or actually say the current then if i hit the play button let me just eject myself and if i go over here there you go so pay attention now we have these two lasers over here and of course we will need our cubes in order to you know overcome them which well will be the next thing that we are going to create so inside of the blueprint folder we are going to right click and create a blueprint class which is going to inherit from the actor and this is going to be bp underscore enter in interactive hopefully i can spell there you go interactive block double click the bad boy what we need to do first things first select the interactive block here over here at the top click on add component and filter for the physics physics constraint there you go and drag the physics constraint to be the root object now what the hell is a physics constraint if you hover over this is effectively a joint that allows you to connect two rigid bodies together basically it will allow us to pull the cube easier with the ball simple as that so what we are going to do first here the component name for our physics constraint we're going to say here collision for one now also what i'm going to do is over here for the linear limits i am going to set everything to be free so linear limits means we can linearly indicate the linear constraint applied along the xaxis basically if we can move our constraint on the linear xaxis linear y so on and so forth over here for the swing one motion we are going to have it locked and over here it's free for the swing two motion twist motion will also be free and i think that's all there is to it that's all there is to it that we need to do so compile and save that next select the physics constraint and filter for our static mesh component so filter over here static mesh there it is and i'm simply going to call it mesh which is going to contain our cube so you can click here where it says over here to add that mesh and filter for the cube rounded so this is the one that we want the cube around it there you go now what i'm also going to do is over here for the cube we need to check this simulate physics checkbox and for the mass in kg over here from 100 we're going to set it to 3000 linear damping we're going to set that to 2 and then you can hover over and see what it is drag force added to reduce linear movement so you a lot of these things well basically all of these things are selfexplanatory so you can you know just hover over and see what they are over here for the collision we are going to check this simulation generates hit events and over here for the collision presets we are going to leave that to physics actor but over here for the physics material we are going to select the slide physics material and what the hell is this well if you double click on it and if you go inside this is basically a physics material that will allow the cube to slide when we start dragging it smoother you see the friction is zero meaning it will not have any friction when we move it as you can see over here override friction combined restitution so on and so forth but basically when you play with these settings depending on the friction mostly because the friction is when the actor is being dragged over another actor so how they touch each other will there will there be friction or not when it's zero well it's not zero there is no friction which means this one will slide think of it like if you have a game for example where you want to create ice or an ice terrain well you will use zero for friction because ice is slippery there you go so now we have our mesh next what we need to do is select the mesh and for the mesh i am also going to add so before we do anything i'm over here on the z axis i'm going to set it to negative 2 7 8 there you go and also what i'm going to do is on the box extent or actually this is for the trigger detection excuse me this this will be for the trigger that we are going to add to the mesh so excuse me for that so first select the mesh and filter for the box collision so there you go this is where i made a mistake so the box collision or we are going to rename it to detection trigger there you go so this is my mistake and now what we are going to do with this bad boy is now we are going to on the z axis to say negative 2 7 8 to set the value a little bit down as you can see what i'm also going to do is here for the box extent x is going to be 1000 so 1000 y is going to be 130 and z is going to be 300 there you go which is going to well look like this so it looks like this and compile and save this bad boy now last but not least we're also going to select the mesh and attach a particle particle particle so here it is particle system and i'm going to click on this bad boy this is going to be our beam there you go and i'm it's not important to capitalize the b but yeah i'm going to capitalize it so over here for the template now we are going to select the electricity arc so electricity arc not the one like we did if i type arc over here not p underscore electricity arc just electricity arc so select that one and what i'm going to do for the beam is i am going to rotate him 90 degrees on the zaxis and basically that is that so we can compile and save that now if i were to go and put this block so if i go back over here let me just right click and create a new folder and this one is going to be interactive elements so interactive elements folder where we are going to put our interactive elements if i go into the blueprints and put the interactive block and i'm going to put it over here interactive elements and if i position the first one is going to be at 2806 zero for the y and for the z one one two five there you go we are also going to rescale it so over here click on the lock icon for the scale and over here the scale is going to be 1.5 there you go so compile that or save the current if i hit the play button we can come close to it and we can jump on it and all of that stuff so that is totally fine but you know nothing is happening because we need to be able to drag it towards us in order to move it over here so that we can then jump from here to here to here to here to here so you get the point so let's go back in the bp interactive block and here in the event grab the first thing we're going to create a couple of variables so click here we're going to have one variable two three and four variables the first one is going to be the player reference so player ref so reference to the player which is going to be a type of rbp player ball so ball and there you go object reference the second one is going to be the move direction so move direction and this is as you can assume a vector so we're going to have a vector next we're actually going to have one extra variable so the next one is going to be can be pushed and the third one is going fourth one that is going to be can detect player and last but not least we're going to have the ui hud reference so ui hud now these two are going to be booleans as you can assume but the ui hud is going to be the game hud so hud bp game hud object reference compile and save that now above are first i'm going to delete all of this and above the begin play we are going to create a custom event so over here we're going to say custom event and we're going to call this one lock all rotations and this will not allow the rotations or it will not allow the game object the actor to rotate so what's going to happen from here is we're going to get the physics constraints and from there we're going to drag a node and we're going to say set angular swing one limit and we are going to continue the execution flow from there and motion type is not going to be free but it's going to be locked because we are not going to be allowed to move from here we are going to have our physics constraint that we are going to say set angular limit or swing limit 2 and this goes over here but i am going to do something like this and like this so that it is more readable so over here for the angular swing 2 limit it's also going to be locked and last but not least we are also going to move from here we're going to say set angular twist twist limit here it is plug it in over here but i'm also going to double click on this to create another line or dot on this node line so locked there you go so this is going to be our lock all rotations which is basically not going to allow our node or actually our actor to rotate and i'm going to call this one lock all so lock all rotations there we go compile and save that inside of our begin play we are going to first delay so we are going to say delay over here for one second so we are going to delay for one second and the reason why we need to delay is because next we are going to get the player pawn so we are going to right click over here and get the player pawn and from here i'm going to cast you bp player ball or ball player however however we called it so plug this in over here and next from it we are going to set the player ref so here it is our player reference so plug this in and next we are going to set the ui hud over here now the hud is going to be set from the player hud so come on over here actually we're going to get it get the hud reference and then we are going to set it over here now the this is exactly the reason why we're delaying you can test it out on your own i'm not going to do that over here because i already tested it so you can do that on your own but i'm going to explain why we are delaying over here because inside of our let me just take a look at over here was it in the player i think it's not in the player but it's actually in the bp over here inside of the hud itself so when we go in the event construct over here we are getting the player and setting ourself to the reference inside of the player variable hud reference and this hud if you remember is being created in the game mode in the begin play and over here in the interactive block in the begin play we're getting the reference to the player to get the reference to the hud so by delaying here one second we are allowing all of this to be already performed so we wait one second before we do all of this over here which means the ui hud will be created then the ui hud will get a reference to the player and it will add self to the reference of the hud reference inside of the player so that we can actually get it from here but you can test it out try to use it without this delay and we'll see that you will not have a reference to it because it will not get a chance to be created before we try to get access to it over here so next from here we are going to lock all rotations all rotations and now that we have locked all rotations next we are going to get the beam which is our particle system we are going to simply deactivate it because we don't want it to work before we actually start interacting with it now we can select all of this over here the begin play and i can create a comment i can say something like initialize the cube so like this compile and save that so moving forward next select the detection trigger so make sure that you select it this is really important so first select the detection trigger and from there right click and then here in the search type on component begin overlap there you go and we want this one on component begin overlap in parentheses detection trigger so what's going to happen over here inside of the uncomponent begin overlap is that we are going to try and cast so cast to bp player ball and we are going to cast the other actor meaning basically the actor that we have interacted with if that is true so we have collided with the actor our ball actor that is then we are going to go from here and first get right click and get the player controller and from the player controller we are going to enable the input and over here i'm going to plug this in and not in the target over here but the player controller there you go the target itself but the player controller is the one who is going to you see pushes this actor on the stack and input being handled by the player controller next we are going to get our ui hud and from there we are going to show interaction text so from here like this we are going to plug it in show the interaction text compile and save that now i can copy all of this and we can select the detection trigger again because now we need to do the same thing but the opposite so right click over here and we're going to say on component end overlap and it's going to be the same thing as i said so we are going to try and cast to the bp player ball the other actor if it's true but here we're not going to enable the input instead we're going to disable input here it is disable the input and plug in the player controller over here because well now we don't want to interact and also over here from the ui hud we don't want to show but hide the text so hide the interaction text and we're going to plug this in over here there you go so i can move this something like this over here and by the way i am going to select these and i am going to comment them and group them in a comment and i'm going to say here triggers or you know overlap our however we want to call triggers for detecting collision with player compile and save that now we can test this out if i go back here in the example map hit the play button when i come close to our cube we know that it has a large collider so if i come close you see e to interact if i move away it goes away so this is what we just just did a moment ago again if we come close e to interact because if you go over here you see this is that trigger this is the box when we come close to it or inside of it we will see this because this is what we did over here this is that line of code now of course this will not allow it this is not enough for it to actually allow us to move the cube towards the ball so we need to program that as well so let's go back inside of our platformer or actually interactive block and right here below our on component begin overlap we are going to get our tick event back so what's going to happen from the tick event well this is where the magic is going to happen this is where we're going to pull our cube towards the ball so first we are going to go from eventing to a gate now what is a gate well a gate basically as you can see allows for opening and closing a gate to control the execution flow so basically when we open this gate we enter this gate but we need to open it to be able to execute what's after the gate so we need to open it and when we close it so nothing is going to happen so basically this is how we control the execution flow and in order to open the gate we need to get our action so which is our input so input action action here it is there you go input action action which is basically this one over here or input action interact you can also call it interact like this and let me just go back and see will this change will this change will this change so right click over here we can say interact and there you go so input action interact this is much better than input action action so when we press the button and we know that that button is e so when we press the button we are going to take the beam and we are first going to activate it so make sure that the beam is activated so over here plug in the execution and from there for after we activated the being then we are going to go and open the gate now also when we release the button we are going to deactivate the beam so when we release the button we are going to deactivate the beam and we are going to go inside of the close gate which means when we open it so when we press the button we open it and then it will work when we release the button we close it and nothing will happen after this exit so also one thing that we're going to do is over here create a custom event and this custom event is going to be close interaction gate and it's simply going to go over here to deactivate the beam so deactivate the beam and then from there go and close the gate so in these two cases when we release the interact button which is the e button we will close the beam or deactivate it and close the gate and also when we call this custom event close interaction gate we will deactivate the being and close the gate only when we press the button we will open the gate so what's going to happen when we open the gate well first we are going to test if our player is valid so get the player reference and from here we are going to test is valid with a question mark and why we're testing that meaning do we have the player inside of our game so if we don't have the player so if we don't have if it's not that valid we don't have it we're going to say close interaction gate because we don't have the player so what is the point of doing anything because you know if we don't have the player we cannot interact so close the interaction gate and also take the ui hut so from here take the ui hud and from here hide the inter action text so this also goes over here plug it in compile and save that this is if the player is not valid meaning we destroyed him if he is valid we are going to go in a sequence so sequence and a sequence is basically an execution order if i hover over you she executes a series of pins in order first this one will be executed then this one and we if you have more you see if you have more you can you know execute them in order but they are executed in the order zero is going to be first one then one then two then three then yada yada yada so first what we are going to do is go over here and we are going to get the player reference so first we need to get the player reference and from here we are going to call the energy damage and this goes over here like this so i'm going to move it a little bit up something like this there you go move it a little bit over here now the damage to the energy is going to be 50. if you remember in our player if i double click it you will see the energy damage the positive values are equal damage negative values are equal to heal because over here if we have a positive number it is going to be let's say 50 multiplied with the world delta seconds multiplied with one and then we are going to subtract that from the energy you see we're subtracting that from the energy so we're saying the positive value minus the energy and then we're clamping that value between 0 and 100 but if we have a negative value and i told you this is your assignment to figure out how it works so let's go back over here so here we are dealing damage or actually subtracting from the energy of the player next we are getting the beam so over here and for the beam we are going to say set beam source point and the source point is going to be in this case the player reference we are going to get the actor location which is the location of our player so the source point for the beam is going to be the player's location but now the end point or the target point so over here for the beam i'm going to say set beam target point basically where the beam starts and where the beam ends so over here the end is going to be from the mesh itself and we are going to get the world location like this and we're going to plug it in over here so something like this there you go compile and save that so this is what's gonna happen first and i think we need to do this so like this and like this to move all of this a little bit down for obvious reasons to make it more readable so in this execution this sequence first we are going to do all of this and this is selfexplanatory i don't think that we need to go into more detail what this is then what we are going to do is we are going to go into compare float and over here you will see if i hover over compare one float to another and indicate if it's greater less than or the same now i'm going to double click over here so that i can create it like this so who are we going to compare well we're going to get the player reference and from the player reference i'm going to get the energy and the energy is going to be the input or the one that is going to be compared and we are going to compare it with 0.5 so depending on if it's greater less than or equal to we are going to do certain things first things first if it's equal to or less than 0.5 we are going to close the interact or interaction gate so we are going to close the gate and we are going to take the ui hud and from here we are going to hide the interaction text because if the energy gets to the value which is equal to 0.5 or lower than and i'm going to click this here as well and i'm going to move this over here and plug this in over here so basically these two go so these two execution pins go inside of this one which go over here because again if the value of the energy comes to the value of 0.5 or less than 0.5 then we are not going to continue to drag or pull that cube towards us because we don't have any more energy to do that however if it's greater than 0.5 then what we are going to do is we are going to get the mesh for the mesh we are going to add force and this goes over here but don't worry we still need to do a few calculations it's not simply like this because we need to add a force that will pull it together and that force is going to be we're going to get the player reference and we're also going to get the mesh and from the player reference we are going to get the actor location so get the location from our character and we can move this a little bit down just like that and this one over here for the mesh we're going to get the world world location there you go and we are going to subtract them from one another so we're going to say minus vector so vector minus vector here you go and we need to move this a little bit further here so that we can have more space maybe move these a little bit backwards now for this pin i'm going to right click and split the pin structure because i want to get x y and z separately because now i want to make a vector so make vector and i want to plug x and i want to plug y so plug them in and next from here we are going to normalize this so normalize and after that we're also going to get the mesh over here from the mesh we are going to get the mass and from the mass we are going to multiply it with a float and the float value is going to be 1000 and last but not least we still need to move this a little bit over here because now we need to multiply this with a float plug this in over here and plug this in over here compile and save that so now we can create a comment section from it tick to pull the cube to the ball there you go and compile and save that and for some reason i you know i like to write these capitals lowercase big case anyways it's not important let's go and revise this before we test it out again so that i can make sure that everything is clear so when we call the tick event we're going to enter the gate the gate will open only when we press the interact button and with it we will activate the beam which is the particle effect if we release the button we will deactivate the beam and we will close the gate and also when we call the close interaction gate custom event we will deactivate the being and close the gate when the gate is closed this exit and everything what's after it will not execute so everything will not execute if the gate is closed because the gate allows us to control the workflow if the gate is open then everything over here will execute moving forward when we execute what's after the gate we're first testing if the player is valid or do we have the player in the game if we don't close the interaction gate and hide the interaction text if we do have the player he is valid first subtract the energy from the player because he's using the energy to pull the ball or the the cube and use the beam to set the source point and the target point so that actually it will look like this this is our cube this is our ball so the beam will be between them so it will be on the cube and it will be on the ball after that we are going to compare the float for the energy if it's greater than 0.5 we are going to first if it's equal to or less than 0.5 close the interaction gate hide the interaction text because we don't have enough energy to pull the cube if it's greater than 0.5 then we are going to use the player reference and his location and the mesh location we are going to subtract from the player location the location of the mesh we are going to create a vector using the x and the y from that calculation we are going to normalize that vector and we are going to get the mass and multiply it by 1000 now of course these are arbitrary values like this 1000 and so on and so forth you can test it out you can like use 3 000 you can use a gazillion but you know i've tested it out with 1000 and it works well so using that multiplying the mass with the mesh and then multiplying these two together adding that force will make it move slower why am i using these ejectors but anyways this is or this is this calculation for adding the force so now if i go back over here if i hit the play button if i come close to the cube we will see the interact if i go away we don't see if i press e now nothing is happening if i come close where it says interact if i press e bam you see it is coming closer you see bam it is coming closer there you go now one thing that we do have that is not working is the following so over here i believe i've missed something over here yeah new auto so target is actor component this is not auto activate it's actually activate not auto activate so this goes over here and this goes over here and this reset goes there compile and save that so it's not auto activate excuse me for this one so not auto activate it's activate for the being and also make sure this reset you see whether the activation should happen even if it should affect returns false so basically just reset the beam where it was so activate will turn on the beam so let's try it out now and for some reason i you know selected the auto activate i didn't even notice that so now if i move it you see there you go so if i come close now over here and i'm moving this cube now i can do this so here there you go and i can go over here but now we cannot pass these without the other cube actually we can but we will die yeah so we need other cubes inside so let me just quickly add those other cubes so we are going to have interactive block to you so let me just this interactive block one copy and paste it the interactive block 2 is going to be at 7 zero nine for the x y is zero z is three thousand zero eight one there you go so it's gonna put it over here as you can see and yeah we're going to leave it like that so maybe just over here there we go and copy and paste it because we are going to have a third one as well and this one is going to be at x 13139 minus 160 for the y and for the z 4701 which is going to put him over here because when he when we go up we will need to drag this bad boy down in order to be able to jump up and finish the level so if i hit the play button now and if i go over here with the ball and i jump over here and i come close over here come on let's move this bad boys come on over here there we go so now what we need to do is pull this bad boy over here so the lasers don't touch us there you go and over here we will have the elevator that's going to pull us up and when we go up then we will be able to interact with the other cube so there you go come on can i actually pull it no i cannot there you go and now the lasers cannot do anything to us but yeah there you go so anything if something is not clear before we proceed please ask in the comment below because the next step is to actually click create the elevator and wrap up our game so let us right click over here blueprint class actor so inherits from the actor and it's going to be bp underscore elevator le the tour actually is it spelled like this it's like this i have issues spelling so don't judge me anyways going back over here selecting the elevator top root component we are going to filter for the mesh so actually static mesh here it is not instant smash what the hell is this static mesh here it is and we're going to call it our elevator mesh ala the elevator mesh i'm going to make this the default root component now over here for the static mesh we're going to filter for the elevator sm elevator why am i spreading elevator with lefe it's lefa so there you go this is our elevator now over here for the element or the material for it is going to be the stone material stone material here it is stone mat and this is going to be our elevator compile and save that now we are going to select it and we are going to attach a box so over here box collision there you go so this box collision i'm going to simply call it trigger and we are going to resize it of course now we are going to set the z position to 215 and the extent over here the box extent 400 for the x 400 for the y and the z can be 100 so there you go this is our box collision and it will detect when well the player comes close on it simple as that now going here in the event graph i'm going to delete everything over here and i'm going to add a couple of variables we're going to need one two three four five six variables then i add six and we will add them on the go so over here the first one is going to be our ui hud ref so reference to the ui hud the next one click on it is going to be speed of platform the next one is going to be up limit the next one is going to be the down limit the next one is going to be is moving and last but not least the last one is going to be move up so the ui hut is our game hud which is simple we did this already numerous of times speed of platform it's going to be a float next our up limit is also going to be a float our down limit is also going to be a float and is moving and move up are going to be booleans now by default the speed of platform i don't know we can set it at 3 by default so we can compile and save that up limit we are not going to touch that or we can but we will see later don't worry about that so basically you can set it at three thousand six three thousand four hundred and sixty five this is the up limit and the down limit you can set at 2485 we will see what this is now make sure that speed up limit and down limit are public variables because we will want to edit them well we will want to edit them on inside of our level directly so anyways let's bring back the begin play what is this so event begin play here it is so in the begin play we are going to delay the same reason why we are delaying over here in the interactive box interactive block at the top so the same reason why we're delaying over here the execution we're delaying two seconds and what we are going to do after that is that we are going to cast you bp player ball now who am i casting of course the player pawn so get player pawn and plug this bad boy in over here after that what i need is to get the reference from the ui hud and the ui hud is inside of the player so we're going to say get hud here it is and plug it in over here so now we have the reference to the ui hud we got that from the player now what we are going to do now select the trigger so make sure the trigger is selected and right click and we are going to filter for on component begin overlap same thing we are going to right click and filter for on component and overlap so on component actually we didn't select the trigger so select it right click on component and overlap there you go so when we when the overlap begins when we detect collision we first want to cast so cast two bp player ball so casting to the ball the other actor because we need to detect if we are colliding with the ball if the ball is on the elevator then what we are going to do is we are going to get the player controller get player controller there you go and from here we are going to enable the input here it is enable the input and plug this in over here and from there we are also going to get our hud reference and we are going to show the interaction text show the interaction text this is when the player comes on when it's on the elevator over here when the overlap ends however we are going to again cast to bp player ball and we are casting the other actor we do need the player controller again so copy and paste him over here and from here we are going to disable the input and plug in the player controller now we are also going to get the ui hud copy and paste and this time we are going to hide the interaction text so hide it but we are also going to do one more thing and that is over here we are going to say is moving and we're going to plug this in or we're going to say that we're going to check the check box so indicating that we are moving and over here we're going to say move up is false and we will see in a second why we are doing it like that so this is when we collide with the player again this is all safe explanatory all of this here i don't have to explain all of this here when we you know simply check if we collide with the player this enable the input and show the text that we need to interact when we when the player goes away from the elevator then if that is true disable the input hide the text and is moving is true and move up is false which means we are going to move down but over here i'm going to right click and i'm going to say action interact so when we press the interact button what's going to happen well when we press it we're going to go inside of a branch and the condition for that branch is going to be our is moving and we're going to plug it in over here if is moving is false so meaning we're not moving we're going to say set move up to be true so if we're not moving move up is true and over here set is moving to be equal to true there you go so only if is moving is not true meaning we are not moving currently so we are not moving then we are going to move up and is moving is true which means now inside of our tick so going back in the event thick i mean we can test this out now i mean test it we can uh we can show we can just display it how it looks like because we cannot test it we cannot move up and down so i can put the elevator over here and i'm going to put it in the interactive elements and the elevator's position x is going to be 10 60. the y position is going to be negative 190 the z position is going to be two four eight five there you go which means here it is there is the elevator and i can quickly just test it out so we can go over here we will wait a few moments for me to test it out but i mean it is going to work so interact there you go come on moving this cube over here we we there you go jumpy jumpy jumpy come on move this bad boy over here there you go okay so now we are on the elevator if we jump on him there we go e to interact nothing is going to happen if we interact right now because if we press e i mean we pressed e and and is moving is now true and move up is true but we're not doing anything which means we need to do it over here so we need to go inside of our tick inside of the elevator and what's going to happen over here we are going to go in a branch and that branch is going to be controlled by is moving so going over here if is moving if that is true we are going to go inside of another branch and for that branch we're gonna use move up so get the move up and what's gonna happen over here well let's go first if it's true if we should move up we are gonna go inside of a branch and what i need to do is move this a little bit down so that we can see it more clearly so we're gonna go in the branch and the condition for this branch is going to be i'm going to double click it and like this so the condition for this branch as i said is going to be we're going to get the actor location so get actor location and we're going to split the pin structure and what i'm going to do is i am going to make a vector make vector and the value x and the value y are going to go here but the value z we are going to add to it plus float and the flow that we are going to add and let me just remove this this goes over here like this the value that i'm going to add to the z value is going to be the speed of the platform so i'm going to plug in the speed of the platform what we need to do to test this out is take the speed or this calculation over here the z value plus the speed of the platform and we need to compare if that is greater than or equal to so if it's greater greater than or equal to up limit so we have our up limit and i'm going to plug it in over here and that goes inside of this branch why are we using the up limit because we are going upwards so if move up it's true we are not going to allow our z position to be above the up limit so if it's greater than or equal to the up limit so if that is true then we're going to say set is moving to be equal to false and over here we're going to say set actor location not world offset set actor location here it is this goes over here is moving is now false and over here if this is false this goes directly over here but let me just do it like this so that we can clearly see it what is happening something like this and from here this goes over here of course for the z this needs to go over here so this is what we are essentially doing now what is this what the hell is this don't cry man do not cry because i'm gonna show you what it is in the tick event if we are moving if it's true then we are going to test if we should move up so we are moving but are we moving up or down if move up is true then we are going to get the current location of the player and create a vector out of it x and the y are going to stay the same but for the z axis because we're moving it up and we're going to use the z axis for that so we are going to add to the z axis the speed of platform if that new value is greater or equal to the up limit if that is true stop moving if it's false then go here into the set actor location and set the new location by using the new z position that we gained from adding to the current value of z the speed of the platform this is what we are doing and as you can assume if it's false if move up is false that means we're going to do the opposite so we are going to go here in another branch but we are going to do the opposite instead of going up we are going to go down so we are going to right click and i am going to get the actor location i am going to split the pin structure and this can go over here and i'm also going to make a vector so right click make vector and again x and y are going to stay the same the z axis over here so i'm going to move this over here the value of the z i'm going to subtract from it a float and the value that i'm going to subtract is going to be the speed of platform now if this value is less than or equal to because now we're going downwards so if this value is less than or equal to the down limit and this goes over here bam and i can move this probably over here like this the down limit and it's pretty clear so we're testing if the current value of over here is less than or equal to the down limit now if that is true again set is moving to false and after that set actor location and the location is going to be set by the returning value over here i'm also going to plug this in over here and if it's false again so if it's false this still goes over here click it like this click it like this there you go so voila this is what we are doing compile and save that so using the tick event and based on if we are moving up or down we are going to move the elevator let us test that out so if i hit the play button and if i go back over here and interact with this of course we don't have to do it right now so come on over here there you go bam bam bam bam bam there you go jumpy jumpy jumpy come on bad boy fall down there you go so now pay attention if i come to the elevator if i hit the e button you see he is going up as soon as i remove away from him the elevator goes down now how the elevator knows that it should go up to the point over here if i select the elevator it goes up to the point three six four and it goes down to two four eight five if you pay attention the down limit is the current z position of the elevator you see the down limit over here that i'm pointing with the arrow is the current position of the z if we move up it will go up to the value three four six five so basically what i did is i you know moved elevator like this and saw up to where i want to move the elevator and then i set the maximum position or the up limit and the down limit this is how i calculated the up limit and down limit that's why i said over here we can leave it to be zero by default or we can leave it or we can then you know you can we can set the value because i knew the value because i already prepared the project but we can set them at zero and when you position the elevator in the game and from there you can then use that use the values of the position to actually to actually set that so again if it's not clear if something is not clear when it comes to this over here just let me know in the comment below so that i can explain it so let's test the game out one more time so when i hit the play button we have the ball we can move if we fall down over here we are losing health as you can see we can interact with the cube so i can just move it like this come on qbqb there you go and jump jump jump jump like a spiderman go over here if i fall down we know what's gonna happen but let's move the cube and not fall down and actually move the cube like this over here towards us so yeah and now the laser cannot do anything for us so let's go over here interact with the elevator and we can go up now how can we interact with this cube well of course we need to jump and move it like this there you go so interact like this jump and move it and now we can jump over here on top and there we go now basically as i said and you see over here we have e to interact from the cube so the collider of the cube is this large so it can catch us but anyways you can fix that that's not important also over here on the top you can add a flag or whatever you want to do you can the ending of the game is up to you so you can add a flag like level finished as you already saw and i showed you that in the beginning you can move these cubes to these rocks actually to create a different level so this serves like a template that you can build upon you can add expanded and so on and so forth so the ending of this game is up to you you can practice add new features and probably share that in the comment below with us as we can see anyways thank you for watching till the end of this tutorial it was very nice it was very entertaining raining it hopefully it was nice for you to watch it uh i don't know i mean until next video if you like this video make sure that you like share comment subscribe so that you know that will help the algorithm and other people will see it uh yeah if you like what you see i have plenty more of this in my ultimate game development academy link will be in the description below until then again thank you for watching i will see you guys in the next video