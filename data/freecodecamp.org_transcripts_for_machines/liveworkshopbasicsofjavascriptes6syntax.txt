but alright and we are live let's see hello free code camp world I don't think there's many of you guys in the comments yet but uh hello we'll give it we'll give you guys a few minutes to get here and then we're gonna get started get under way just to say it some of you guys may not know but um the I'm actually presenting this workshop in front of a classroom of students part of night club we won't work the Computer Science Society so sometimes I'll be talking it out that way and that'll be to the students in the room with me and sometimes I'll be facing the camera and talking to you guys so give you a few more minutes to get in get in here and yeah we'll get underway who in a free code camp has ever used JavaScript before there we go I see if I see a few people saying they have awesome cool so to answer a question just got this will only be covering some es6 the goal of today's workshop is going to be a introduction to variables and data types in JavaScript and then we're gonna work into using some of the fun es6 syntax to really show off some of the cool things you can do with javascript and the JavaScript language and then from there we'll talk a little bit about some next steps some implementation so cool I see a lot of you guys are in here now we're gonna get underway so if everyone can navigate over to code pen dot IO it's the site you see on my screen here we use this last time in our react talk and it's really great website I highly recommend using this for all like learning and even just you're building something it's really fun it updates live for you and it's on what you can check out other people's fun projects as well so to start off we're gonna create a new pen and this time we're gonna do nothing to the config we're gonna write strictly JavaScript and then down in the bottom left corner you should see the console button I want everyone to press the console button for me this is gonna be where a lot of the stuff that's gonna happen is gonna show up so we'll make that nice and big and I'm gonna turn over it here get my notes up and we're gonna get started so I hope many of you at least have a somewhat of an idea about what um you know what JavaScript and what coding in general is you know we deal with data we have data in data out we want to do stuff with that data and the way we do that is by very most basic concept we declare that that data exists so in JavaScript the way we do that it's contrary to Java or C is in JavaScript we're gonna use the VAR keyword that stands for variable then we're gonna give it a name so we're gonna say literally name equals and then unlike most languages where you should be declaring a datatype like a string or an integer or a double we could just put whatever we want to put into this variable here and in this instance we're gonna use a string so you can either use a single character or you can use double quotes and then just type your name I'm gonna take mine another aspect to javascript is semicolons a lot of people are like are semicolons necessary in JavaScript they are not I use them because I write Java a lot as well and it's just really easy for me to when I'm reading my code if I can see a semicolon I know that's the end of a line so you'll see me using that but if you're uncomfortable or you don't feel like typing that extra character you don't have to at all so we're gonna declare a few more variables here I'm gonna say age and then we're gonna go ahead and I'm gonna do something fun we're gonna say favorite bands and my favorite bands I recently got a real friends sweater in the mail it's a lot of really excited to get that then we're gonna add another one it's called movements these bands are really small and then one final one and you guys can fill yours with whatever you want you don't even have to put bands in there you can put your favorite ice cream flavor your favorite cookie type your favorite pizza anything at all and if you notice we have three different data types here you have a string represented in the name you have the age which is an integer and in Java there is no difference between declaring integers and declaring doubles so if we were to say fraction we can go ahead and we can say 2.5 and that would be essentially the same thing as writing a double or a float in Java and then we have a list so what's kind of cool in JavaScript is that lists are a native datatype their collection just like they are in Java or Python or C and in this collection in this list I'm using strings but what's unique to javascript is that you can actually put any type of data you want inside a list with other data types so I can actually go ahead and put in a number here and that is valid it's not very useful but it's very it's it's valid and this will run just fine we're gonna remove that because we're not going to do anything with it next we're gonna go over and what an object is so an object in JavaScript is similar to like a class in Java but a lot more lot basic there are classes in JavaScript but we're not gonna go over those because you could spend a whole hour teaching just classes in JavaScript but an object is declared just the same way as these previous data types were so I'm gonna say me because I'm the data I have above describes Who I am and then we're gonna use curly braces so we're going to form this kind of code block and then we're gonna say name or we're gonna use string name and this is a property then we're gonna use a colon and then the data that that the variable name then we do another one age the agent and then we're gonna say favorite bands put the favorite bands in here and then we're gonna use one more and we're gonna do favorite pizza and if you notice I haven't declared a favorite pizza the variable yet but that's okay because I'm going to go ahead and put the string that describes my favorite pizza right here and I'm just gonna say buffalo chicken you can agree or disagree with me on that one awesome so this is the basics to describing variables in JavaScript so you know there's there's really not a whole lot to it you know you have your list you have an object you have doubles you have integers you have strings and if you are wondering how to like access this data all you do is you know declare in our new line we're gonna use a statement called the console dot log statement and console dot log is gonna let us print something to the console which is this big grey box to the right is so this is since we're just gonna print out the name my name real quick and if you notice it pops up on the side immediately code pen live updates as you type so sometimes the console will get filled and I'm just gonna clear it using the Clear button so you'll see me do that throughout the throughout the talk and we can go ahead and we can change what's in here change it to age you know 18 will appear on the screen and then you can even plug in an array and it'll print out the raw array string with its um with what it's contained with and then let's uh now you're probably wondering great we're storing all this data and the object especially we have this kind of all the data is mashed into one little object how can we access the data in that object we have a couple different methods we can go ahead and we say the object and then we can put a square bracket and then we can put the string of the property name inside that square bracket like name you notice here it is right here here's and then on a new I'm gonna create a new line so you guys can keep that one there for reference we're gonna go ahead and we're gonna write me dot favorite pizza if you notice down here at the bottom of the screen buffalo chicken who was added to the console so here are two different ways to access very access data types on a javascript object so how's it going over in the free code camp side you guys have any questions yet let's say you do a little bit of scroll uh yeah sorry some people are asking if a list is an array and yes it is I'm a array list collection those are all very synonymous words and someone else asked let and yes we should be using light and that's what I was gonna get to next is that there's these two magical words in JavaScript that are used for variable declaration called the Const and the let so we've been using the ver keyword here and you'll and what we can do with there Lavar is you can actually reassign that if you're not if you're using unchecked mode so there's way you can make JavaScript evaluate in something called strict mode and in which case what I'm about to do won't is not allowed but in all intensive purposes what I am going to do is valid in JavaScript you say var read Eclair the name and I'm gonna say my last name and then all of a sudden if I was to go ahead and console dot log my name at the bottom you'll notice at the very bottom of the screen here the new variable declaration for name comes up but let's declare a let variable let operates in much the same way as var where you say let and then the variable the variable name we're gonna go for simple a and you assign it a value 1 and this access is the same way as a variable well you can add it to objects but what's special about let is that it's it's block scoped and what that means is if you were to use this if you're familiar with Java where your wine you have a loop you have a for loop we're gonna have like you know in Java you would use like in I well in JavaScript you would want to use let I equals 0 I is less than you know arbitrary number 5 I plus plus and then we want to you know do something in here I'm not gonna actually do anything you know you can do something in that code block that I variable that you've declared in that for loop is accessible inside here you could call I from inside this for loop but then when you go outside of the for loop that I variable is no longer declared and that has to do with the scope of the variable I don't it's kind of confusing it's also kind of very it's more first in tactical purposes that difference between var and let but just know that that's kind of where it comes from but the third way of declaring datatypes using the Const keyword is the most is the most useful one this is like declaring a final value in Java where when you declare a variable as a constant it cannot change so let's go ahead and let's declare a new one constant and B and we're going to give it you know two very simple and we're gonna print it out to the screen at the bottom you should see two comes up it does and now let's reassigned to so say B equals three and then we're gonna say console dot log and as long as this doesn't fail me now it should not get reassigned and if it does I believe it is crashed because if you notice nothing has reappeared underneath this two and that is because this is invalid if code pen doesn't show errors inside of the console but I can what I'm telling you right now is that this is invalid Rheda Clara a constant is not gonna work in any other sort of if you were to run this in a browser console or if you were to run this through nodejs or some compiler like babel it will throw an error at you and say invalid you can tree declare a constant and it's really again this is a the value of having these different ways of declaring variables is more for program structure so program structure in a sense where if we're writing a very complex there's a lot of developers working on it and we declared variable like the database URL and we don't want that URL to change we would declare it as a constant that way other developers that are using our code will know that that database URL is never gonna change and they can rely on that value never changing because it's declared as a constant now if variable was declared as a let or var then there would be some sort of you know obfuscation where it could get changed where some aspect of the code could change that value probably in some iterator function or the sort and then it would be unreliable to write more code based on that potentially changing data type cool so that's pretty much all I have for the variable declaration and now we're gonna move into some of the fun es6 stuff that we can use with these variables before we dive straight into that though we're gonna go over one concept that's called functions or methods in Java you declare a method by writing the function keyword then the variable then the method name you pass it its parameters inside the parentheses and then you add some squiggly brackets and then inside there you can do whatever you want with the parameters but at the end you should return something in our case we're gonna return a plus B and if we go below here and we call some there we're gonna use a console dot log so we can actually see it and we say sum of one comma two we should see in our console three so magic right I couldn't believe it myself when I first wrote a function in JavaScript it was that easy so yeah that's basic basic function syntax it's very you know very simple but let's uh let's make this a little bit more complicated let's um I'm gonna show you guys a sneak peek into an array method called map so we're first gonna declare a constant we're gonna say scream it it's gonna be our it's gonna be the name of our new array and that array is gonna be the favorite bands dot map so in JavaScript and in the es6 package it sent a ton of new really useful arraignment array methods that let you iterate over the contents of an array without having to use encapsulating for loop so with what that means is you know you pass it this method and then we can create a function and we're gonna say you know like we're just gonna call the function just X because it's simple and then we're gonna or actually we don't need to call it anything that's my mistake just function and then parenthesis and then we're gonna pass it the band parameter use the squiggly brackets and then we will return the band dot to uppercase and what this will do is this map function will loop over the entirety of the favorite bands array and return each value fully upper case inside a new array assigned to the screamin variable so we can go down here and if you and you do console dot log and you put in scream it it should on the side you should see all of the bands in full upper case letters sweet so this is very simple we're using function notation but I want you to kind of like look back at this we got a lot going on here for a pretty simple task you know we have this really long function word that's eight it's eight bits of data right there one byte of data is going for just the keyword function inside our map inside our map method and that function keyword is almost as long as our variable name itself so can we reduce that we can with something called arrow functions arrow functions is something again new to es6 the syntax is gonna look really weird but if you've come from a Java background and you've ever used a lambda expression before it's gonna look similar to that so we're gonna go ahead and run describe a new very well we're call this one constant whisper whisper it we're gonna go again over the favorite bands all right we're gonna map and this time instead of writing the function keyword we're just gonna write parenthesis just like that and we're gonna put the band parameter right in there and then we're going to use equal sign greater than sign looks like an arrow doesn't it hence why it's called an arrow function and then you're gonna use smoothly brackets just like we did in the previous function and we're gonna return the band to lowercase now this method when we print out the result to our to the console we should see the bands all lowercase and if you notice we've decreased the amount of characters we've used in our function and that's not all that this lets us do arrow functions also have a really really fun syntax we can play around with we can actually rewrite this function that we just wrote even more even even simpler so I'm gonna quickly I'm gonna go ahead and I'm gonna come I'm gonna comment that out if you're on a Windows you can do control forward slash while highlighting text and it will comment the whole block on Mac you're gonna use command forward slash so then let's read Eclair the whisper it alright we're gonna say favorite bands again we're gonna do dot map and this time we're not gonna write parentheses we're going to write band just the word band arrow function and then we're gonna write band again and then the two lowercase method look at that one line and we got the same behavior that we did with three lines of code what this is doing what this arrow function syntax is doing is with a single oh that is pretty small I'm sorry guys let me make that a little bit bigger for you with that with this single parameter datatype here what that's letting us do is with we can exclude the parentheses dropping the parentheses means that this error function is going to receive one argument one parameter that parameter is band then the return statement this return statement is going to do one thing and one thing only it's going to return whatever comes after that arrow function that that arrow that arrow key right here so in this instance we're just lower casing the entire string but in a but in another example when I use arrow functions and these array methods in react in the react library I'm writing these complex rendering algorithms that feed in bits of data from a database and then you surrender like 50 different nodes that have very similar structure very similar component structure but change just something as simple as the text and with react all I do is I write an arrow function just like this I loop over my database like the data for my database and I just passed it whatever's changing to my arrow function and my arrow function is just gonna return a piece of react component back to the the application and then all of a sudden I have 50 50 nodes generated from one line of code and that's really the magic that goes into using arrow functions and these array methods in ESX cool so let's let's go ahead and go over to another aspect of es6 called default parameters and then once we finish that I'm going to take a quick sip of water and we're gonna do a little bit of questions just to make sure you guys are all caught up so before I declared a function called some this time I'm gonna call a function diff and we're gonna do x and y let's spruce it up we're gonna return the difference of x and y and we're gonna man here I'm gonna do console dot log difference of three notice anything wrong go forth exactly I need a yvalue I've only passed one parameter or argument to my DIF function but it's expecting two as a result JavaScript doesn't throw any errors all its gonna do is return n a n which stands for not a number and this is and this is expected this is what JavaScript does it tries to assume that you meant to do this but let's say we did it we never want to receive not a number from our function in fact I will always want to see a number even if that number is wrong I still want to see a number there so we can do is we can go inside our function declaration and we can next to the parameter put an equal sign and then whatever the default value is I'm gonna see the default value is zero now if you notice on the right the three the the n a n was changed to three because three minus zero is three and then if we go ahead and let's see what happens if we pass no arguments the diff function it goes back to returning nine a number and then that a number is because the X is not defined again we're not passing anything in for the x value now but we can go ahead and we can declare something as a default for the X let's use zero again and now if you notice even when we call the diff function and there's nothing passed to it we're still gonna get a number that will keep our application running this is really useful for when you have some sort of useful default data I love to go back to react in react you have all these components I'll have textual user interface components you never want to return some nasty error to your users so instead if you could set a default like for example a string a basic string that's gonna be a lot more better for your user experience than it would be just to you know throw an error and have the whole application crash because you forgot to send a a parameter so cool so I'm gonna take us a quick minute if you guys have any questions I'd be happy to take them at this time no I will check the the free code camp chat real quick let's see okay so someone asked should one start by learning JavaScript syntax and then es6 or right away learn es6 syntax so you should definitely learn JavaScript first because even though es6 is javascript when you're writing code that good that's gonna be used on every browser it may not always run the es6 syntax not yet at least so it's best that you learn the basics and all the very generic JavaScript syntax first and then move on to you know sprucing it up with some es6 plus a lot of the es6 things that i'm gonna show you today are quite simple but there's just as much complicated things that come with es6 that even i'm still trying to you know wrap my head around and really fully utilize in my applications all right let's see um another one is the rule for that syntax that you can only do a single statement otherwise you need to use parentheses great question martin yes in the above arrow function the one where we lower case the band if we wanted to write multiple lines here we would have to use either those squiggly lines and a return block or we can wrap this in parenthesis and in those parentheses act as kind of like a mock code block and that code block lets it will return everything inside of the parenthesis so let me fix this up a little bit so what this just did is now we can go ahead and do is now we can actually write multiple lines but we're gonna return everything inside it so this gets a little weird and if kind of again this kind of this is this is in there mainly for react when you're returning a JSX component which is HTML so you know how HTML could have multiple things within it and that nested structure requires multiple lines so in that instance you would use these parentheses to return just JSX component but that multiple line JSX component in our example we're only using one line of code so we're only returning one line of code great so we're gonna move on to another really fun operator called the spread operator and this is gonna replace array concatenation so let's go ahead and let's define another array I'm gonna call this array more bands I like music so I'm gonna go ahead and add a few more in here so here's one and here's another and now I want to make one list that contains my more bands and my favorite bands so let's go ahead and write let all bands equal favorite bands dot concat more bands and if we print that out to the screen we should see an array containing both the three bands that I listed at the beginning of this talk and the two bands I just added to it expected and this uses a you know a traditional JavaScript function called concatenate and it works just like any you know just its concatenation take everything from one thing and you know and everything from another object and you smush it all together but let's say we had a third array let's say even more bands okay and in this one I'm gonna write ACDC oh that's not ac/dc and Green Day we're gonna go ahead and we're gonna concatenate that one now we can go ahead and we can probably we can chain it so we can do concat even more bands and that just kind of looks nasty or we could have you know we could have wrote all bands dot can cat even more bands on the line below it and reassign delete that and then it should yeah so then we can concatenate and then see how even though we read this line we would have to reassign the all bands variable to this new concatenation and look we want to concatenate all three of these lists but right now we're using a the concat statement over and over again and we're read eclair in variables and it's getting messy there's a lot of text let's simplify this let's first of all I'm gonna delete everything here oh please don't go back I'm going to leave everything here and I'm declare a newer write a blank are right inside that array and do three dots so and then after those three dots we're gonna write the name of our array that we want to concatenate favorite bands on the right you should see the three bands pop up sweet then next and do comma three dots again and then more bands if you look over to the right the other array shows up thank you I bet you can imagine what we're gonna do next three dots even more bands and now with some nice whitespace tidying by the way javascript is a non white space dependent code language so you can do whatever the whatever you want with the white space between things javascript doesn't care because it interprets based on keywords not based on white space so with a nice little syntax right like this we can keep listing all of our arrays over and over and over again and in a real world example let's say we had a database with a bunch of different lists of things I don't know shopping carts and we wanted to make a grand shopping cart instead of trying to concatenate every single small array into one big one and returning out to the user we could build this nicely this nice structure here with the spread operator and spread out all the contents into another another array this is also useful for function declaration back up here we had parameters right actually if we had a array of things let's say again a shopping cart we had an array of we had a shopping cart full of items and we had a function that would I don't know make a really like a pretty print function it would print out all the contents in your shopping cart and we wanted to pass every item in that shopping cart to the function as its own parameter not as one big list but that's own parameter we could actually go into the argument defining area of a function and use the same syntax where we spread out all the properties within an array into some other structure like a parameters list or an arguments list or another array and another example react handles state props and state that's if you guys are interested in what I'm talking about there is a video I did two weeks ago around this time about react to JavaScript and we did talk about props and state and maintaining that and let's say we're updating our state but we want to hold on to all the previous state we could actually go ahead and let's say we had some object here right we had like Const state equals something and we're gonna say like list and that list is gonna have the values 1 comma 2 in it I'm gonna I'm gonna quickly change this to let because we're gonna re assign this and then we want to update this state with something new so we're gonna stay state equals and we're gonna say the list but then we want to concatenate to that list so instead of writing like list dot can cat and then you know putting our thing in here we could actually go ahead and we do just put another array right like this the spread operator on the previous list or actually have to use state dot list and then comma our new valuables our new our new variables 3 4 and then all of a sudden if we console dot log this state you'll see we have an object with the list one two three four and if we did that if we did the same console dot log statement let me put it here you see we only have one into so you'll notice this spread syntax is really useful for keeping your code clean and keeping it concise and you know letting things maintain itself without the unnecessary need for methods and large chains of of methods so we can delete we can leave that and now we're gonna go into we have two more things to go over today let me check some questions let's see here um free code camp what do you prefer jQuery or react or view I am a react developer not only I've been learning it for about three years now and I have started to contribute to the open source the open source project as well so I like to focus on react even though I am familiar with jQuery let's see all right cool so let's move on to the last two subjects in today's workshop template literals an object property shorthand so we're gonna start with honestly my favorite feature of es6 and it's called template literals it's another way of removing the unnecessary need to concatenate strings so let's start off by declaring the old way we used to concatenate strings Const s equals and we're gonna build a sentence here but say my name is space plus the name variable which we declared all the way back at the top of this function and we're gonna put a period in here because you know we're writing an essay you know we gotta make sure we have proper proper proper sentence structure you know console dot log put s on the right you should see my name is arrow would name is Ethan but that's my last name cool and that's not too bad but what if we want to make a more complex sentence let's say s2 we're gonna say my name is or actually know what to do my name is Ethan plus sorry plus my last name comma and I am my age years old in the console dot log that to the screen you'll see we get the sentence that we want you know my name is Ethan Arrowwood and I'm 18 years old but that was a lot of typing and it's really gross you know what if we want to change the part of the sentence we got to make sure we don't mess up you know the spacing around the words and that you know the name and age variable doesn't get changed so we're gonna use template strings so we're gonna first gonna call a new variable constant t and now there's a little symbol at the top left of your keyboard next to the one and it's a little like it's a little tick mark it's the main it there's also if you hold shift it would be the grave key and it's gonna look like this and this is template strings inside here we're gonna go ahead and we're gonna write the same sentence that we did before we're gonna say my name is and then instead of doing plus my the variable name we're gonna write dollar sign squiggly bracket it'll automatically add another one to the end of it and inside that just put the name variable put your semicolon and then console dot log the T sentence and if you notice we get the same effect as the the sentence structure wrote above and this time the word is embedded directly in here and if you wanted to add more text to the sentence you can without any more concatenation just comma and my fake age is age but I actually am 18 so let's change that let's have some fun with this I want to square my age in JavaScript you weight a square numbers you use two you use the multiplication sign the shift eight and now and you do that twice and you give it a number and if you notice to the right it doubles the age variable right in line in that and what this does what this template letter what these little code blocks are doing is it's letting you embed basically in embed JavaScript inside your sent inside your strings so that again when you're building these beautiful user interfaces you wanna do something like camelcase a piece of text or you want to scream something in uppercase the whole thing but it's not stored as such you can embed that process right into the rendering string and it will do it right there clientside reducing the load on a potential server or anything you know prior to rendering text to the screen and this and it doesn't you know this isn't what this is there there's so much more you can do with this you can you know do another we can do another sentence and we can say my favorite band is you'll get the same template strings in here and we can say we have the all bands array and we can access the first index of that array using square notation zero and then console dot log the second sent the second template shrink to the screen and all of a sudden my favorite band is real friends very true statement and we wrote that all in one line we didn't have to pull off that variable in any sort of the new declaration we just embed it directly in the string without the need of plus signs or any sort of string concatenation methods cool so there any questions on template strings no I will give a quick check to the chat and we'll see alright someone's asking what are the prerequisites for the react framework like how much of JavaScript etc one should need to learn before starting react framework I can elaborate a little bit more on this at the end but the short answer is get down you know the basics and then start you know be comfortable writing some just clientside there you know work through the basic free code camp frontend projects and once you finish those frontend projects and just native JavaScript you were more than ready to dive right into react and what's phenomenal is that the react community has tons of documentation and a lot of tutorials so it's going to be really easy for you to get started in the react framework when you when you're ready and does it have to be single quotes yes yes mine this tick mark is not the same as a a normal quotation mark which is what was kind of the st. which is on the same key as the double quotation mark this is the key all the way up next to the one button so it's that it's a tick notice how they're slightly different and that's what is template strings they use those special tick marks you cannot embed this the dollar signs squiggly bracket inside any other string cool all right we got one more topic to go here and then we are gonna wrap up so let's talk about object property shorthand so like I said at the beginning of this workshop a lot of the things that es6 gives us is syntax that lets us simplify how we write code it makes our lives as developers easier so let's declare some variables say Const lecture you wanna say algorithms and then we're gonna say Const capacity equals 20 students or say Const professor because I don't want to give out anyone names I'm gonna say professor arrow would you know someday and then we're gonna say Conte and then we're going to go ahead and we're in declare a classroom in this classroom object traditionally what we wrote to be very beginning we wouldn't have to you know use a string lecture and then we'd have to put the lecture variable here and then we'd go to the next line and write capacity and so on and so forth and that would get to excuse me that would get tedious what we can do instead so we can actually go ahead and delete everything aside from the word lecture don't even don't even wrap it in strings just the word lecture same for capacity and same for professor if we come down here and we print the classroom object you'll notice that all of our variables all of our data that we predefined is input directly into our object and it can be used the same way as any other object is you can reference it you can pull it out you could save things to it and this is just a nice really useful way to to declare objects in a very simple format however let's say you wanted to call you know what say you wanted to be a little bit more strict with your object definition you wanted to call the professor you know property the full string so you know you want to add the rest of the word professor now this is not gonna render anything on the console here because this is actually breaking this is code this is going undefined there is no variable type called professor so in this instance we would still need to use the you know assignment operator colon and then the variable professor or prof PRF and then it happens again so this is just and then what this lets you do is that as your object grows you add more properties let's say building and we say you know Wentworth we can go ahead and we can just you know add that property straight to our object and it just appears and it imports whatever string or any data you pass to it and this is not discriminant to just strings and integers you can actually go ahead and in the instance there are multiple buildings you could you know pass in an array of like of buildings here and you would get a list and it would work the same way so this is just an example and then what this leads to and you're like why is this really that useful well it's it has to do with it's it's all it all goes back to react for me at least where you have these long complex rendering algorithms with a lot of JSX and for those that don't know JSX is HTML written in javascript and you want to embed things you want to pass properties and tons of data to these HTML blocks but you don't want to like write out these super long pieces of code that are impossible to read so instead you will pass it just a basic object with the property that has the same name as the value or data that it's representing and that just keeps cleaner code for you know easier readability and ease or usability down the down the road as a special treat I do have one last thing I just forgot to put it in the description of the livestream and the description for the email blast and this is destructuring I use this a lot in the react workshop two weeks ago and this lets us pull things off of objects so let's quickly create a new object will keep this one simple just a we're gonna say a B C B C D F or whatever C D F and then we go down here and we're gonna say I want to read the values from this object but I don't want to have to declare you know I want have to be like Const a equals X dot a and then you know Const B equals X dot B this is this is valid this is very this is the way you should use what you could do it but there's a different way if your variable name is the same as the property name in the object you can actually simplify this to Const squiggly brackets a comma B equals x then we delete the code above that and then we can go ahead and let's use our template strings you know let's print out the a variable and the B variable and if everything is correct we should see the string on the right unless I did something wrong well so I save hmm well that was supposed to work but it's not so I guess if anyone can tell me what's wrong otherwise that is something I'm not familiar with well I guess that's okay there are ways to diiie structure and I have you I did use them in the react talk it's not working right now and that's my mistake but at this moment I'd like to open the floor to any questions from you guys that's pretty much all I have for you than anyone in the YouTube chat if you guys have any questions I'd love to answer that as well anyone in the room no all right let's see the chat let's see what we got here um how do you put an apostrophe inside a template string good question you can use um you know you can just use an escape character if you had a Const t3 and you had the asterisks and you said like I don't know like Ethan Ethan's like Ethan's item then you could input that character into the string directly like that using a backspace character yes jo W in the chat brings up a good point ES 6 needs transpiling um code pen lets you run ESX directly google chrome lets you run ESX directly and they believe firefox now let's your nes 6 directly and I'm not sure about Internet X I'm the internet explorer for example does not the old not Microsoft edge but Internet Explorer which some people still do use on old operating systems does not let you run es6 code so what you need to do is you need to use something like which we used in the react talk and we transpile it back down to you know yes you know javascript native code so we can actually go to the babel compiler and we can actually you know put some code into it they have their live thing here though their rep Apple though this is from the last one so you see that a little bit of JavaScript here here's an a so here's an example of working destructuring notice how we're pulling the club the club variable off the props object and the props object is being passed to the greeting function so and then also look here's another error function so you can see here in react code me using a lot of the features that I told you guys today and I even have a default parameter inside my destructuring so a lot of this stuff really is combined together but what I wanted to show you is that we can go see we can go consti equals and we can use a actually a let's do this constant equals 1 and then consti 2 equals template string i have 1 or tea cookies and then on the right you should see that in native javascript you're going to have you know variable t equals 1 and then variable t 2 equals I have plus T plus cookies so this is you know what I'm showing you guys you're simplifying the way you need to write code what's up in different blocks yeah so as long so a constant is blocks go everything is you know topdown scoped so if you declare a constant up here unlike the global and then you created a code block and this is actually syntactically valid I didn't know that for a while but this is actually syntactically valid you create a code block on the page and you were to reference the you know console dot log T that's valid or yes you know it'll do it and if you wanted to read a Claire that variable T inside here technically you could but you really shouldn't the reason like I actually I'm sorry this is not allowed if you have the let keyword this would be allowed but why don't you see on the screen right here is not valid this will run an error because the T the constant T on the outside of our block scope is feeding itself into thus the local block scope but if you do the reverse and you had like constant T declared in here and you know I'm just gonna delete this top and we had our local block here and then we had another constant T out here then this doesn't work either in your like but why not it's because JavaScript when it reads a whole file all the constants get lifted to the top of the file and then fed back down so then what you just lets you do if I remember correctly is you're actually able to go ahead and you know write a console dot log statement and you can log a variable before it was the client before it was defined and that's technically valid it's really bad coding but technically it's allowed let's look at some more questions in here alright um cool so yeah I don't think we have anything left in the chat someone quickly asked why do we use bable bable is just a transpiler it lets you take es6 code and put it into native JavaScript use what you would need to use if you're going to deploy your application across multiple browsers but if you're running something inside no js' console or you're writing something inside code pen or you're running something inside of a Google Chrome console you don't need to use Babel because it es6 is valid syntax but with that that is all I have for today guys thank you so much on the free code camp and for joining me I hope you guys had a lot of fun you guys can watch the video you can also reach out to me at my Twitter I'll post that in the chat at any time I'd be happy to take your questions there and you can also find me on github at ethan Arrowwood and again you guys can reach out to me on github or twitter I'd be happy to teach you some things about opensource talk to you about react or talked about JavaScript so I hope everyone the free code camp end has a wonderful day and yeah thank you for tuning in and thank all you guys for being here in person that was incredible thank you very much oh sweet