hello and welcome to mongodb quickstart with python mongodb is one of the most popular and exciting database technologies around python is one of the most popular and fastest growing language there is and these two technologies work great together and that's exactly what this course is about so we're going to quickly get started with mongodb write some code against it and build some realistic applications so the goal with this class is to teach you mongodb we assume you know a little bit of python but you'll of course pick some things up along the way if you don't know it already and really we want to get you going quick hence the name quick start so let's get started by talking about what we're going to cover in this course we're going to focus on three main things we're going to start with why do you care about nosql and document databases how do document databases make working with schemas easier modeling data easier as well as add performance and flexibility to our applications we're going to talk about modeling specifically because this is one of the things that is pretty challenging about document databases if you come from a relational database world you probably know about third normal form this is a way to carefully and sort of structured way to plan out how you model your data in document databases you don't really have that there's a lot more sort of flexibility in how you design things this is great for you once you understand it and you're really good at it but it's challenging to know how to model things when you get started because there's so much flexibility and it's kind of openended feels a little more like art than science in some sense so we're going to focus specifically on techniques and tradeoffs and some guidelines i've come up with to help you be successful modeling your data with document databases such as mongodb and then we're going to start writing code for real we're going to use a odm object document mapper think of like sql alchemy but for document databases called engine and we're going to use that to create some classes to model our data and map those classes to and from mongodb and use that as the foundation of our application speaking of applications what are we going to build in this class well we're going to build an airbnb clone but for snakes okay so we're going to build snake bnb and this allows you when you're traveling with your snake your pet snake you don't want it to have to live out in the car or something like that you want to get it a cage that it can live in a proper snake cage or it'll be happy so they'll be owners of cages who can put their cages up for rent and snake owners pet owners who want to travel with their pets and have their pet have a place to stay so we're going to create this sort of silly airbnb knock off clone but we're going to model many of the operations you would see in real airbnb on our application here so it's going to be pretty rich in terms of data as far as tools go well of course we're going to talk about mongodb right that's the database we're using but you're also going to learn some other things that are pretty awesome in the course we're going to talk about engine this is the primary library we're going to use to talk to mongodb it's built upon another one that's very popular that is sort of the lowest level official way to talk to mongodb called pymongo so you might see a little bit of both of those actually in the course we're going to use what i think is the best tool for accessing mongodb something that used to be called robomongo but now it's called robo3t because it was acquired by a company called 3t so this is part command line part gui way to interact with mongodb and it's beautiful and free open source it's great also we're going to use pycharm for our python code you don't have to use pycharm for this course but you'll see me using it and i think you'll see a lot of benefits as we go speaking of me who am i anyway who is this voice that you're listening to hi my name is michael kennedy you can find me on twitter at m kennedy and what makes me qualified to teach this course well first of all i host the most popular python podcast called talk python to me and i've interviewed many many people including some of the folks from mongodb the company as well as authors who've written about mongodb design patterns and things like that so i've had a lot of experience working with people in python and magady b i've created the talk python training company and written many python courses and mongodb courses there as well and also i'm part of the mogadib masters program so this is a group of about 35 external community members who give advice back to mongodb and i've been part of this for many years worked closely with the folks inside mongodb over the years so this is what you have in store for you lots of awesome mongodb and python i hope you're excited let's get right to it let's begin by looking at why you might choose mongodb over other nosql databases other document databases or even other relational databases i'm sure you've heard of mongodb that's why you're taking this course but how popular is it relative to other databases is it really the right choice well let's look at some data from 2017. if you compare mongodb against other nosql databases cassandra couchdb ravendb things like that you will find one of these databases is unlike the others look at that that's incredible how much more popular mongodb is over these and it's not just the popularity that it's 5 10 times maybe 50 times more popular than ravendb that's great that's very important but also the trend right these others are either flat or turning downwards and this is besides a little blip here based on probably like the end of the year um numbers or something like that at the end of the data this is a really big deal right this is incredible how much growth that is here and it's still going up so mongodb is really really popular in terms of a database that people are using and that's great because that means it's well tested when we get to the section a little bit later we'll look at some of the users of mongodb but it's really important that there are some heavy workloads put onto these databases that you're going to depend upon and if it can take what those people are doing surely it can take what you have to throw at it as well now mongodb is also loved if you look at stack overflow at their 2017 developer survey and you look at the most loved databases these are databases that the developers are using currently and how they feel about it you see mongodb ranks right near the top so definitely 55 percent of the people who are using mongodb love it compared to say like sqlite or cassandra so this is pretty good but what's even more interesting is that it's the most wanted database so these are technologies that you're not currently able to work with but you would like to so there are tons of people that want to work with mongodb but for whatever reason they've got some legacy system built on you know mysql or whatever they don't get the chance to so all these pieces of data tell you mongodb is a really good technology to have in your tool belt and it's easy to get a hold of right mongodb is open source and it's free you can just go to github.com mongodb and clone it and it's right there so you can see it has 11 000 stars 3000 forex in this screenshot i took here it was updated two hours ago it's under very very active development so it's a live and vibrant project finally if you actually want to get mongodb don't go to github github is cool it's great you have the source but don't go there what you really want to do is you want to go to mongodb.com download center or just go to mongodb.com and click download it'll take you here and you download it here you get it as a binary so if you're on mac i recommend you use homebrew to install it but you can also download a tarball if you're on windows get the msi and on linux you can actually install it with aptitude or some package manager like that in this course we're not going to go in the details of setting up mongodb just follow the instructions in the full mongodb course we have we walk through all the steps but we just want to get started this is the quick start so let's keep moving let's look at one of these records stored in mongodb to see how document databases work here we have a json record this is actually from one of my courses the python jump start by building 10 apps and this is how i represent it in the database we've got standard columnar type things so we have an id we have a title a course id duration in seconds these types of things now first of all you might be wondering wait a minute json database json database is that really efficient well probably not what mongodb actually stores is a binary representation so like a binary tokenized version of this record but they call it bson because it's like binary json but we're humans we don't read binary we read text so we're looking at the textual representation so this is not exactly how it gets stored but this is pretty close so we have these regular column type pieces of information id and title and so on we also have this other thing these lectures now these lectures are in this chapter represented by this record from this course and notice the bracket in javascript which basically this is means that is a array and the array contains a bunch of subobjects so this is really interesting instead of just having a chapter table and a lecture table and doing a join or something like that a foreign key relationship we're actually putting the lectures inside the same record so this is pretty interesting when you look at it like this you can imagine that this is like a precomputed join if i do a query for the lecture say given id 1001 and i get this record back it already has the lectures i don't have to make another round trip to the database to get them i don't have to do a join against several tables in that original query it's literally a primary key query against an indexed primary key and is insanely fast and yet it already comes back with all this extra information so this is really cool if i get the chapter i have the lectures great but you might be wondering well really what if i need to ask the question in reverse like fundamentally if i need to get at lecture 10106 will i be able to query mongodb quickly and efficiently to get that lecture and it turns out the answer is yes and that's why document databases are awesome it's not just like some nested blob stored in the original record you can as part of the query language and part of indexes traverse these hierarchies in very very rich and powerful ways so we don't lose very much query capability just by putting the lectures in this one record so this is really neat and this is sort of the foundational most important takeaway from document databases we store them as these flexible json type of objects and we can nest additional things like lists of numbers or even subdocuments as we have in this case now before we move on let's take a moment and look at who uses mongodb now programming languages and databases and technologies aren't necessarily popularity contests just because something's popular it doesn't necessarily mean that it's great you know evidence php for example or vb or something like this technologies are popular and some of them are great and sometimes great technologies are popular so there are some important things that come along with being popular and used in by big important companies and that means these things are durable and tested and they've really been through the ringer so mongodb has been used by some really big customers and some really interesting use cases and i know some of the biggest ones are actually not on this page even they're not listed here so i'm taking a quick tour of a couple of customers who are using mongodb and we'll look at how they're using it okay so the first one that i want to look at let's scroll down here and see some names that you might know some cool stuff here let's check out royal bank of scotland so banks are supposed to be conservative right things like this they probably wouldn't use weird nosql document databases they're going to stick to their traditional oracle or sql server or whatever well if we look at royal bank of scotland they're using mongodb to support a global enterprise data service underpinning several core trading systems if you're bank the core trading system's pretty much the center of the universe right so the fact that they're driving that with and that's high performance and it's doing that for them that's really awesome let's check out expedia so expedia they have their app built on mongodb and they're supporting millions of customers shopping for flights hotels cars things like that that's pretty awesome let's check out another one down here ea so video games right this is the world's bestselling sports game franchise and they rely on mongodb to scale to millions of players that is really awesome one more before we move on so these guys down here a little farther at sail through sail through is a company that does like outbound mail and analytics and things like that so they are a marketing company very much doing tons of email type of stuff like i said and they have over 40 terabytes of data in 120 physical mostly physical nodes right so 120 servers all working running mongodb in some giant cluster which is a pretty awesome use case and of course you have things like shutterfly running on mongodb squarespace on and on there's a ton of cool uh use cases down here but i think you've got the idea are you ready to model some real applications in mongodb using documents it's time to get our hands dirty and really start building something so in this chapter we're going to go through our snakebnb application come up with the entities the classes and tables or collections as they're called a mongodb and model them out so we're going to first look at how this modeling and document databases compares to traditional third normal form modeling in relational databases i'm going to use a pretty simple example but i think you'll get the idea and you'll see it much more in action when we build the real app so let's take this simple bookstore model here we have books they have a bunch of properties we have people who publish those books named publishers they have a name when they were founded and you can navigate this foreign key relationship from publisher over to the publisher id on the book now we also have a user and a user might rate a book so we have users and we have ratings and we have a foreign key relationship between them and they know from rating over to book we have a onetomany relationship there right a book can have many ratings so we have a couple of foreign key relationships going on this place now let me tell you in a real application there'd be many more little tables with extra information like this like ratings about books and so on and like let's say reviews for example things like that maybe even related items that we precomputed from some sort of machine learning but we want to store that in the database so imagine this model here having like 15 tables with relationships across all the various pieces back and forth right so i just want to keep it simple if it's on the screen you're not going to go crazy with it so how would we model this in mongodb how will we model this using documents well you would see that it's somewhat simpler the more craziness that we had on the relational model the sort of more contrast you will see here so we still have our publisher and they have their id and when they are founded we have our user the same columns or pieces of information there as well same as book but now our ratings we've decided you know when we get a book most of the time we actually want to know the rating we want to say like this is a 3.4 star book or it has 72 ratings even in a list we want to show that stuff so we're pretty sure we want to have these ratings always with the books so why put them in a separate table let's embed them now we still have some relationships like we had in the relational model for example we have our publisher id on books and that links over to publisher now this is what in mongodb i refer to as a soft foreign key constraint if there is a relationship between books and publisher it's the publisher id set to the id of the publisher but the database itself doesn't enforce this right so you need to be a little more careful in your app and we'll see how we do that when we get to the code but as i was saying about ratings these we're not going to put in a separate collection in fact we're going to store those inside of our books so we can embed these objects and arrays of either straight values like numbers or strings or actual sub documents like our ratings here so whenever one two three and so on is actually part of the record of the book so when we get the book record back we already have the ratings things like that so again we can think of this ratings being embedded within books as a precomputed join there's a slight bit of overhead if you actually wanted the book without the ratings and you're just going to get them back and ignore them most of the time anyway if that was the case but if most of the time you do want the radiance this is a huge speed up and like i said imagine there were 15 tables before and five of them could be collapsed into the books they have a fiveway join going down to a single primary key query that'd be amazing as we discussed modeling with documents and document databases is a little bit more art there's a little bit more flexibility and kind of just gut feel of how you should do it but let me give you some guidelines that will give you a clear set of considerations as you work on your data models you'll see that the primary question for working with document databases is to embed or not to embed that is when there's relationship between two things in your application should one of those be a sub document should be contained within the same record as the thing it is related to or should they be two separate collections what mongodb calls tables collections because they're not tabular right should those be two separate collections that just relate to each other so we're going to try to answer this question i'll try to provide you some guidelines for answering this question so the first one is is the embedded data wanted 80 of the time when you have the the outer or other related object okay so let's go back to our example we just worked with we had a book and the book had radiance so to make this concrete the question here is do we care about having information about the ratings most of the time when we're working with books so if our website like lists books and that listing has the number of ratings and the average rating and things like that listed as part of the listing you pull up a book maybe the ratings and the reviews are shown right there most of the time we have the book we have the ratings evolved somehow then we would want to embed the ratings within the book right that's what we did in our data model we said yes actually we do want the ratings most of the time now let's look at this in reverse how often do you want the embedded data without the containing document so in the same example how often is it the case that you would like the ratings without the book so what use cases for maybe like where would that show up in our app so like maybe you as a user go to your profile page on the bookstore and there you can see all the books you've rated right and the the details about the rating you don't actually care about necessarily the books you just want these are the ratings that i've given to things and here's my comments and so on i don't actually want most of the details or maybe any of the details about the book itself so if you're in that sort of situation a lot of the time you might want to put that into a separate collection and not embed it you can still do it you can still do this query and it will come back very quickly there's ways to work with it but you'll see that you have to do a query against the database and then a little bit of filtering on the application side so it's not prohibitive it's not that you can't get the containing document with the contained document without its container but it's a little bit more clumsy all right so if this is something you frequently want to do then maybe consider not embedding it now is the embedded document a bounded set so let's look at ratings how many ratings might a book have 10 ratings 100 ratings a thousand ratings is that number going to just grow grow the number of ratings that we have if this was like page views and details about the browser or ip address and date and time of a page being viewed i would not make a good candidate for embedding that like say for views of a book because that could just grow and grow and grow as the popular your site grows and it could make the document so large that when you retrieve it from the database actually the network traffic and the disk traffic would be a problem i don't really see that happening with ratings i mean even on amazon like super popular books have hundreds not millions of ratings so this is probably okay but if it's an unbounded set you do not want to embed it and is that bound small right like maybe millions of views still being recorded within sign of a book would be a really bad idea and the reason is these documents are limited to 16 megabytes so no single record in mongodb can be larger than 16 megabytes and this is not a limitation of mongodb this is them trying to protect you from yourself you do not want to go and just say query by say isbn and try to pull back a book and actually read 100 megabytes off a disk and over the network that would destroy the performance of your database so having these very very large records is a problem so they actually set an upper bound on how large that can be and that limit is right now currently at the time of the recording 16 megabytes but you shouldn't think of 16 megabytes as like well if it's 10 megabytes everything's fine we're still got a long ways to go no you should try to keep these you know in the kilobytes tens 20s hundreds of kilobytes not megabytes because that's going to really hurt your database performance unless some situation it just makes a ton of sense to have these very large documents so having small bounded sets means that your documents won't grow into huge huge monolithic things that are hard to work with also how varied are your queries so one of the things that you do with document databases is you try to structure the documents to answer the most common questions in the most wellstructured way right so if you're always going to say i would like to on my pages show a book and it's related ratings you would absolutely put the ratings inside the book because that means you just do a query against a book and you already have that like kind of prejoined data but if it's sort of a data warehouse and you're asking all kinds of questions from all different sorts of applications then trying to understand well what is the right way to build my document so it matches the queries i typically do or the ones that i need to be really quick and fast that becomes hard because there's all these different queries and they have like you know one the way you model for one is actually the opposite of the way you model for the other right so depending how focused your application is or how many applications are using the database you'll have a different answer to this question so the more specific your queries are the more likely you are to embed things and structure them exactly to match those queries related to that is are you working with an integration database or an application database we'll get to that next so wait what is an integration database so if you were just working on your own personal website or some small project you don't have an integration database but if you work at a big enterprise a big corporation where there's many internal systems you may be working with an integration database and honestly that's not a great fit for nosql databases in general but it also makes designing documents for them more difficult so in large corporations we have many applications that share the same data one way that we have built applications to share data is to just share the same database so we might have a bunch of different applications and they're all going to talk to the same database so they all have the same concept of a user they all have the same concept of an order things like that and this means the concept of the user is as complicated as it can get maybe the application in the top left could have a real simple user the one in the top right actually needs something else the bottom one is something else still and so you've kind of got a model across all these applications and that makes it super tricky also in nosql databases and document databases the relationships are enforced in the application so that means that all of these have to agree on what the constraints are what the relationships are and that can actually cause data integrity issues so there's a lot of reasons that integration database isn't a great idea for relational databases in fact it's not a great idea at all but it has been used and because there's different applications with different query patterns it makes designing your documents more difficult so instead what do we do we build application databases maybe we have a bunch of different applications just like before but they all have their own data store and they all talk to their own databases of course they need to exchange data like before so maybe we do some sort of microservice thing where they talk to a service bus or they just talk to each other things like that and that means each individual green database and interaction with its own application is super super focused and limited and here in these cases mongodb document databases make a lot more sense and it's easier to design the documents because the range of queries is extremely focused so you can target those particular questions against a small set of queries the guidelines we just talked about so this is the kind of model you want to have if you're doing data exchange within your organization and you're working with a document database i don't know about you but i feel like we've talked about coding and talked about mongodb in theory enough and it's time to write some code and use mongodb so that brings us to getting started with our demo application so throughout the rest of the course we're going to spend a significant amount of time focusing on this and remember we're building snakebnb this wonderful experience where snake owners and their pets can shear other snake cages when they're traveling so they feel totally comfortable on every vacation you need to take your snake on course it's just a knock off of airbnb type thing and in this video we're going to see how to get it from github and how to get it up and running in python and pycharm so we'll start out over here on github.com mike c kennedy slash mongodb quick start dash course and you can see that we've got a couple of things here we've got some data this is empty right now but i'm going to fill it up with stuff as we go through the class so you'll be able to recreate the database there'll be instructions in there on how to restore that and then if you go over to source this is the most interesting part we're going to be working in this area here but i've made a snapshot of starter code snakeb this is exactly a snapshot of what we're starting from okay but i'm going to be working in here because i want to have it build up right also trying to do make some branches or other save points really obvious when we get to the various videos right now there's no other branches but we'll get to those okay let's go and check this out so we'll go copy what we need and we'll say git clone this nice and quick and let's go work with it so over here we have our source code and we have our snakebnb and we have our starter code snakebnb so these are the the two projects here and what i want to do is i'm going to put this into pycharm on mac os you can just drag and drop this onto pie chart and load the project from that folder however if you do this on windows or on linux i think you have to go to pycharm and say file open directory however before i do let's go into this folder really quick and create a virtual environment so you may be familiar with python and virtual environments and so on but if you're not let me give you the quick overview of what's what's going on here if we look here we're going to have apparently a misspelled requirements file which we're going to take care of in a second but notice in this requirements file these are the external libraries pymongo and engine for mongodb and some other random stuff for working with color output on the console as well as parsing date times entered from the user so we need these libraries and we don't want to install them and manage them basically as a machine wide thing we would install them into our virtual environment so let's go over here first rename requirements and we're going to go and actually create the virtual environment and then we'll install we can install stuff into it so here we are again in the source folder so we'll say python3 dash m v env so run the virtual environment module into dot env this naming convention.mv something that pycharm understands will automatically detect and start using we're going to pass the copies flag that's only required on mac os i believe but anyway we'll go with that now if we do an lsah you can see this hidden.emv but we don't need to do anything else with it pycharm should take it from here so we can go and grab this folder on mac os memory file open directory on the other os's and drop it here so let's go ahead and tell pycharm about git the very first time pipedrop will index the python environment we gave it and then it should be up and running okay so let's look down here in the terminal you should see the dot env you can ask questions like which python and it shows you it's the one that we created in windows it's where python not which python if we go over here we have our requirements and so on now the other thing we need to do is we need to right click and say set this as like the relative path so in this file when i import some other file it looks relative to that so you can say right click here and say mark directory as sources root or just be in this folder when you run it in python basically you're working directly okay so we're almost ready to run things the last thing we need to do is install these requirements so we can say pip install dash r the requirements file and that will install those libraries for us so when we run the application it has everything it needs so if we try to run it now it'll crash and say it can't find colorama or something like that now this application is empty it doesn't do anything other than ask for a couple of prompts there's no data access for mongodb anything in here but let's go ahead and just get it to run so we can right click on program and right click and say run program it runs and you can see if i make it bigger here we have our snakebnb and i put a little snake there for you guys and it asks you a question are you a guest or a host are you looking for a cage or do you want to offer up your cage so let's go with guest and it lets you do things like create an account add your snake so on so i could say i'd like to log in so do you know that's not implemented yet in fact that's what we're going to be doing next is implementing all of these features in the database creating an account logging in booking a cage viewing cages things like that right so all the actions you might do in a typical airbnb situation so that's it for now we have this up and running let's do one more thing because of the output this i find this looks a little better if we just run it separate outside of pycharm so we can say copy the path here and we're still in this folder with the dot environment so we need to activate it if we're going to run it over here so we would say a dot space dot env spin slash activate on windows you don't need the first thought and it's not been it's script script or scripts i can't remember i think it's scripts either way our prompt should change and now we can run this here's our snake again okay so we're all set up and ready to run our code it's time to write some code against mongodb and connect to mongodb and we're going to do that with an odm and object document mapper if this term is new to you think of object relational mapper like sql alchemy but for document databases instead so let's compare first this odm style of programming against the most basic lowest level way to program or interact with mongodb from python called pi so every programming language that you can talk to mongodb from there's many of them 20 30 i don't know something like that many many languages can talk to mongodb and they each have what's called a driver and this is typically provided by mongodb the company itself so pymongo is no different it's this low level foundational way to talk to mongodb and you do this in the native query syntax of mongodb this javascript json style of interacting with the database now it's important to know that if you're working with mongodb in terms of running and managing it but from writing code we're going to focus on something higher level and odm so we can take structured classes and map those to and from the database so let's see how it would work if we just use pymonga so we've got our app here and we have the pi package we're going to work with and we have mongodb the database so we write direct queries in this raw mongodb api so you have to know the api really carefully you have to map those back to your classes basically what you do is you pass dictionaries to pymongo it uses those as part of the query and then you get the dictionaries back it's pretty unstructured but it's very low level and fast with an odm similarly we've got our app and we've got pi and mongodb but we also have another layer the layer that we directly interact with called the odm object document mapper and there's a bunch of different kinds there's engine there's ming there's kit there's alchemy mini and there's more than that actually there's a ton of them just so happens we're going to use engine one of the more popular and well polished ones i think so in this model we don't query in terms of raw dictionaries against pymongo we just talk to the classes defined by the odm and our queries are based on those types on those classes that itself will translate to the mongodb api sometimes in real basic ways sometimes really advanced ways and it will actually leverage some of the advanced operators the dollar operators if you're familiar with them for mongodb like dollar set dollar add to set things like this so really really cool that it leverages the advanced operators not just you know save this document read this document type programming i think the odm model is a much better way to write your application you'll see there's not much structure in a schemaless database so having a little bit of extra structure defined by these classes that are part of this odm model really adds a lot of safety to your application in my opinion the odm we're going to use for this course is engine and you can find its home page and details about it documentation and so on at mongoengine.org so engine is open source like many things you'll find in python as we said it depends upon pi you saw us install it earlier we just did pip install engine and that installed pymongo along with it we did that through the requirements file but you can do that directly if you prefer you can find engine on github you can see that it's quite popular almost 2 000 stars this is much more popular than the other mongodb odms as far as i can tell look into other ones this is definitely the most popular or at least among the most popular of them and it's very actively under development i just took the screenshot right now before i started recording here to give you the latest version you can see that it's been updated in the last 24 hours some other stuff under the actual code has been updated in the last 21 hours so very active this is important for an open source project you're going to depend upon so i think you know judging by that engine is the best choice and the api is excellent we're going to start working with it next the first thing we need to do to start working with engine is tell engine how to speak to mongodb let's go back to our snakebnb app we've been working on and we're going to go in here to this data section and we're going to create a new file new python file called setup so in here we're going to write a simple method that we can call from other places and as you'll see in the slides that we look at later for real applications that use proper connections encryption accounts things like that this can be a little more complicated but it's going to start out pretty simple so we'll say global init and in here we just want to call one function so we're going to have to have engine here so we'll import engine and we just say mongoengine dot register connection and the first thing that we pass is an alias so i'll be real explicit say alias equals core now what is this alias thing about we can have multiple connections to even multiple databases or even multiple database servers registered here so we could have like a core data and say analytics for just analytics that goes to a separate database that maybe has tons more data because it's like page views and actions and so on but we might keep that separate so we can back it up on a separate schedule something like that and then we need to set the name of the database and we'll set that to snake bnb do a quick format here and it's all good to go like i said this gets more interesting in real connections but we're going to need to call this to talk to mongodb so let's go over to your little program and you saw up here at the top there was this to do set up engine global values and that was basically what we were doing there so we need to come over here and say we need to go to data dot setup as we'll just call a setup and this should be pretty simple manga setup dot global init now we just need to make sure we call this once in our application and we need to do this before we actually interact with anything else so let's go and apply these settings over to our entities as well so we'll look at snakes first now this model is going to be mapped into one or more of those databases well one among many potential databases so the way that we can tell it how to work engine will use a property we can add to it we can say meta equals and we give it a dictionary and we can say db underscore alias and we'll say core here okay while we're at it let's say collection is snakes so even though we called it capital s snake the thing in the database where these records these documents are stored will be called snakes plural lowercase and here we can tell it this goes into the core database unlike maybe the analytics one or something like right we're only going to have one in here but for our example you want to have this here so in case you want to add more later right i'll go ahead and add the rest of these to owners and cages but not bookings because bookings is going to be nested inside here all right so we don't need to tell that how it gets stored because it's stored alongside cage which will say cages and no surprise owners all right so those are our three top level entities that map to our three top level collections in mongodb now we've registered the connection by using our setup global which we just call registered connection like i said this can get way more complicated in reality and then we just go and we set this meta to use the core connection as well as naming the actual table or collection it's going to go to let's take a moment and look at this concept of registering connections we're going to need to work with moggle edge and so of course import engine and we need to set the alias and the name of the database so it should say engine.register connection give it the alias give it the name we need to call this before we start interacting with our classes and other types before we try to do any queries or save any data this has to be all set up so this is what we wrote in our application and this works fine when you're talking to the local mongodb running no encryption no accounts default port running on the local machine same machine as this code now if you're doing this in production there's more to it all right you need to set the username and password which you have to set up in mongodb there's none by default so you've got to set that up with the right permissions probably it's a different server on an alternative port so set the host in the port you would like to create a some sort of admin account which is associated with that username and password so you say look you authenticate an admin use this mechanism and finally if you're going to do connections across you know somewhere outside your data center you pretty much should just turn this on is you need to turn on ssl and configure the server for ssl and then you pass that additional data in addition to the alias and the db now there's a lot going on here and deployment and running mongodb in production is not as simple maybe as it could be certainly it's something you need to be very careful about like no authentication no encryption right don't run your code that way it's fine to do it for development but don't do it for production in my full mongodb course i actually go in to spend an hour go and create a linux server and set it up in a cluster of the database and the web servers and those kind of things and really make this work perfectly and safely but in this course we're not going to go into it i just want to leave you with you need to set this up you can look at the mongodb.org site as well or mongodb.com site and go through the documentation on some of the steps or just take my other course if you're really going to go and use this in production so far we've modeled our data with python classes but there was no real engine entity stuff they wouldn't actually be saved or processed by engine just happens to be we kind of sketched them out in python class style so we're going to change that now we're going to go make our standard plain old python classes proper engine entities snake is pretty simple so let's start there so in order to work with engine over here i'm going to have to import now you might want to do from engine import some things but i like to be real explicit like these things are coming from engine even in my production code so this is how i'm going to do it and we're going to set the register date to a particular type of descriptor that comes from engine and at sort of the type level this tells engine what type of data and constraints and requirements go onto this field however at runtime it's going to act like say a date time or whatever it is in this case the date time and species would be string and so on so we'll come over and say engine dot date time field and we'll just go like this so this will tell engine to map that to the database as a date time field over here we'll say engine dot string field and over here the length let's say this is in meters and that's probably decent enough floats right so this will be a float field the name again a string field whether it's venomous or not that's true or false um i guess it could be a number like level of venomous i don't know but we're going to call this a boolean field and that's that so our snake is all ready to map into mongodb mongodb doesn't have things like required fields or default values or anything like that but engine does so let's change this to make it a little simpler to create a snake so for example registered date is almost always just whenever you inserted it right so what we can do is we can come over here and set a default function that will execute any time engine inserts a new snake so we're going to start with date time so the function that we want to call is the now function which gives us a full year month day hour minute second representation of time so we'll come down here's a daytime.datetime.now and be very careful not to put the parentheses you're passing the function not the value of now that would be like when the program started so that can be a little tricky over here for species let's say that you have to save the species so we can say this is going to be required is true in fact the length is required the name is required whether it's venomous is required we could have things like um minimum values have to be like 0.001 or you know things like this right so you can't have like a negative length there's a lot of cool constraints that we can do with our types here so this snake is now ready to be used in our database let's look at the next one let's work on the cage next so again import engine we'll use that in a few places this is exactly the same here so set the default and then the name is just going to be a string and so on so i'll just sketch these out for you so these seem like reasonable types here and let's go ahead and set the required properties for things that we require so most of these will be required and whether or not we allow dangerous snakes if you don't set that let's say no by default you're not going to have a dangerous snake okay so these are just like the snake before this however gets more interesting so we're going to come down here and we're going to set this to be a engine dot embedded document so we could have just a single thing like a booking or a like say embed the snake in the owner or something like that but we want to have a list of embedded documents and what we need to pass in here is the actual type that is contained in there so we're going to import data.bookings.booking one other thing that i also realized i forgot to do in the previous ones we'll go back and fix that is we need to tell mongoengine that this is a toplevel document so we need to make this have a base cloud of type document we'll do that for snakes as well now let's go to the booking we were just working with that so this one recall is is the type that's embedded within of the cage it's embedded in the cage that means it's not a document right that would be a top level thing this is an embedded document right so this can be contained within other documents but it itself cannot be top level so let's go ahead and set these as well now when we're talking about ids and mongodb the default is something called an object id like a uuid or good or something and so when we're talking about a reference typically it's one of these it doesn't have to be what it typically is there we go so we've got our two references as object ids we've got our booking date which does not have to be required and it doesn't have a default value this is when it was booked which happens after the booking slot was made available and but at the time of creation of the slot of booking right with like putting up for booking you have to say the check in and checkout date and again the reviews these are not getting set until after i set this to zero so we can say like you know require it to be one to five if they actually rate the thing and then you can sort of exclude the ones that are zero the final one is owner and it's very very similar i'll just sketch that out for you okay so we've got our flat pieces here our register date name and email and now we're gonna have a list of ids so we'll come in here and say mongoengine.list field for both of them so this will let us store the object ids that refer to the snakes and the object ids that refer to the cages last thing to do is make the base class the document here all right so what have we done we've set all the fields to their respective types out of engine as descriptors we've set either default or required values and we've set the metadata which talks about which database connection to use and what to call the collection when it goes into the database and we've done that for our three top level items here the one that is different that stands out is the booking which is embedded within the cage and this is an embedded document but otherwise everything goes pretty much the same let's review the core concepts around creating engine entities we started out by creating what i called basic classes these are classes that could just as easily been mapped to a relational database because they just have flat fields or columns if you want to think of them that way and none of the nested or particular capabilities of document databases so the one that matched that was the snake and the snake we make sure that it derives from mongoengine.document and then we specify the fields by passing along or creating these engine descriptors so we said there's a registered date and that's a engine.datetimefield the length that was a float that was the length of the snake in meters the name of the snake is a string species as an a as a string as well and whether or not it's venomous that's a boolean true or false so you can see we can map out the types for this basic snake class really easily here of course our snake should have default values constraints like required fields and things like that so here we've taken that same snake class and we've added a default value for the registered date we said just call the function datetime.datetime.now anytime you insert a new snake so it's going to automatically tag that new entity or that new document with the date in which it was inserted now remember be super careful did not call the function now but pass the function now okay we also set the length to a float we said that's a required float you have to specify the length or you know engine will give you an error so you can't insert this thing that field is required it's interesting that that's not a feature of mongodb that's a feature of engine so by using engine instead of say pymongo we get these additional features same for the default and name species and venomous also these are all required so we can do this here now again this is still one of these sort of basic classes with just our constraints and defaults let's look at the cage the cage is more takes better advantage of the document database so we have the name the price the square meters required standard stuff there we also have the bookings these are either the times in which a cage could be booked or an active booking where snake has registered to be there on a certain time we modeled that through the booking class and we said this cage is going to embed the bookings into it so to do that we use the engine embedded document list field so a list of embedded documents and the argument we pass is the type of embedded document so it's a booking that we're putting into this list all right now how does this look if we populate this cage and we add a couple of bookings and we call save well it looks like this it has the standard fields right like a auto generated underscore id the date that was registered this is set as the default value in the full class we have the name the price the square meters and so on so that's all standard stuff and we've seen that before but the bookings part check that out so we have bookings and it's a list right square brackets technically an array in javascript right and the items in this list are those bookings so we have a checkin date checkout date and the ratings so we've have added two bookings in here now we didn't fill out the they're not booked so we don't have a guest snake and an owner id and they haven't already taken them so they haven't rated it or given a review so some of the pieces are not saved into the database to save space nonetheless here we have our embedded bookings inside of our document and we did that through the embedded document list field we have our models our classes in place we have engine registered and told to connect to the default values for all the local stuff for mongodb running locally i already have mongodb started up and running check out the documentation on how to get that working on your operating system like i said at the beginning and it's time to create an account log in basically start implementing all these actions and now we'll really get to start programming with the entities we've designed in engine so let's begin by going down here to create account in program host so we're going to be able to use this for actually both the host and the guest right so you can see there's a couple things we have to do and then we're going to create the account so let's work on this get name and email first we'll say name equals and we'll just use simple input stuff what is your name something like this and we'll do email email we should of course have them you know give us a password and things like that but this is not a real website we're not really actually logging in it's just sort of a user creation type thing so we're going to create the account now i could go write the engine code to talk to and do the inserts here but you'll see that we can do much much better if we isolate all of these behaviors within a central location that we can use throughout our application in these nosql databases these document databases there's not much structure in the database so we already have some structure added by having our classes our engine types that we work with but we can also do a little bit better by having like a centralized data access piece so that's what we're going to work with here let's go create something called a data service and we'll just put a bunch of functions that we need to work with here so let's go back and let's import this and i'm going to import it in like a little short way so we'll say import services dot data service as svc okay we're just going to use the functions out of that module by calling it that so we come back down here so to say not implemented let's say this say svc.create an account and we're going to pass the name and the email what we're going to get back is an account so we want to actually store that in in the statefulness of our application again in a web app this would be with cookies and we get it back from the database every time but we have this state thing which has an active account so what we're going to do is we're going to come over here and we're going to say state dot active account equals this so we're going to get back an account from here now pie chart says whoa there's something going on here there's no account there's no method called create account function but if i hit alt enter then it'll say you want to create one of course we want to create one so name let's even give this a little bit of typing type hints here say it's going to return an owner okay so that's all well and good now we need to use this so now we get to programming with engine how do we create one of these owners well how would you do it if it was a regular class you would say this and you would set some properties like name equals name owner email is that and now we want to put in the database so we do that by calling using uh what's called the active record design pattern we'll just call save right on this now we want to return owner now the important point here is when we call save all the default values are set when we call save the primary key the underscore id is automatically generated here it's just dot id at engine but in the database level underscore id that's automatically set so this thing is up and running we should have everything working well here so let's go ahead and try to run this and see if everything's hanging together let me run it over like this so here's our snake b and b we're going to go and say we're a host notice at the prompt here this little yellow thing there's no name so we'll go and create an account with my name my name is michael and my email is michael talk python.fm boom logged in you can see now the prompt has my logged in name the next thing we've got to do let's just go from top to bottom let's go and log in however there is a problem what if i say i want to create an account i say my name is michael two and i say it's michael at talk python.fm if i hit enter there's just two of those that's bad so what we want to do is we want to do a little check over here so this is great we got this working and let's go ahead and annotate the type here as well let's say this is an owner that's going to let us when we interact with it later say things like this and get you know all the intellisense and whatnot snake ids and whatever okay now before we do this we want to verify that the account doesn't exist so we'll say old account so let's say find an account by email and again this doesn't exist so we'll create this function over here this will let us see how to query all right so to insert we create one of these and we call save to do the query we're going to do like this we'll say owner equals we work with the type and we say objects now there's a couple of things we could do we could say filter kind of lose autocomplete here but that's fine we could say filter and we could say email equals email okay so we would match one of the fields there all right and we would not put that of course and this is going to return a query and we want just one of them so we'll say first now it turns out when you have just one filter statement you can actually condense it down like this so we'll go ahead and write that and we'll just say return owner okay so there's our find account by email and we'll check if old account it'll be none if it's not found so if there's an old account we'll print i wrote a few functions error message success message with some coloration we'll say error account with email already exists and let's make this a cool python36f string like so of course we want to bail we don't want to actually create it here we could maybe do something like that print let's do the success created new account with id and let's say state.activeaccount.id like so great let's just run this one more time so we're going to come in as a host we'll create an account let's call this um call it sarah so sarah wants to come in maybe she's going to be able to like she's going to be a guest but right we're going to use this host path to do it for a second there so sarah talk python.fm great we've created a new account now let's just test this thing again so we'll say i want to create an account again sarah doesn't actually matter let's say susie and it's sarah talk python.fm this should no longer work it should go and query the database and find this and no no no error an account email sarah talk python already exists perfect i think the create account is done so we saved some data and it looked like it went into the database right when we successfully saved it we saw an id was generated we tried to log in with the same or creating account the same email we got an error new node that already exists so it's definitely working but let's look at the data with my favorite tool for working with mongodb robo 3d it used to be called robomongo robo3t so here it is and you can see just by virtue of calling save that actually connected to the database created this particular connected to the server created this database and the various collections we only called save on owners so we only have owners so far never mind the fact that we've created the other types we haven't saved anything there so it doesn't exist and we can come down here and we can say view documents and we actually have the two documents here remember we created two accounts and we can view them this way and there you go we have michael and my email sarah and her email the registered dates and times and we no longer we we don't yet have a snake or a cage because well we haven't implemented the ability to do that but we're going to have snake id and cage ids in here as we create these snakes and cages this is a really great way to work with the data if you go back to this mode you can even edit it and make changes in here if you really wanted to all right so definitely recommend installing this it works on all the platforms it's free and it's awesome we're able to create our account so let's now add the ability to log in once we exit the application so we're over here in the log into account and the program hosts this is super easy we just have to get the email from the user like this so we'll say something to the fact of the login asking what their email is and let's go ahead and do a strip and a dot lower on this and in fact let's always store that so i'll go back up to our create account and do that here so strip takes all the white space in case there's like a space or something on the end and lower of course makes it lower case so then we just need to see if the account exists well we actually already wrote that so let's say this say the account is the service not find account by guesting email and then we'll say we add a little error handling say if not account say error message so nothing there and if it worked all we have to do is save it and maybe say you've logged in yay so let's say state dot active account is account and then we'll do a success message logged in successfully and then our little prompt will change straight away so that should be good let's try this come over here to the host let's try to log in and remember there's no real passwords we're just sort of playing around with accounts here so michael at talk python.fm boom logged in successfully awesome and you can see the prompt changed let's try to log in again i'll try to just use jeff j.com nope could not find email with jeff j.com looks like login is working next thing we need to do as the host is to be able to register our cage so then people can view it and maybe book it that'd be great right so let's go over here and work with that now the cage has to be associated with an owner through this soft forum key relationship in mongodb so we're going to require an account and that's going to look like just an error message so like something like this so we'll just say if there's no account you must log in first to register a cage all right so now we know we have the account we're going to use that as part of it and let's go ahead and figure out how many square meters this is going to be so we'll say meters equals something like this now you might want to just directly convert that into a float but i found as i was interacting with this application like i'd accidentally like go to register a cage and i meant to list them you want some kind of way to cancel out so let's just suppose if they don't enter anything they just hit enter it kind of short circuits everything so we'll say if not something like this so if they don't enter anything we'll just bail out so otherwise we'll just say float of meter so convert it from a string to a float we're not doing error handling on this right you guys should probably add that but we're going to just do this and we have to ask a bunch of other questions is it carpeted does it have toys things like that and let me just copy that over because there's no point in seeing you that's typed in it's just user input stuff right and then we want to go down and we want to actually register the cage again we want to do this at our data layer not here in our application code so we'll say svc register cage and again that doesn't exist but it's going to in a second so we are going to pass the account we'll pass the active account here we'll pass the name of the cage we'll pass whether or not it allows dangerous just all of these items whether or not it has toys whether it's carpeted and the meters okay so we're going to go and call this function which obviously doesn't exist yet but by john will write it for us thank you by charm so here we can say this is an owner here's the name and string and so on there we go and let's say this is going to return a cage which we have to import at the top again thank you pyjar so this is very very similar to the create account we're just going to create a cage and save it so we set all the properties and we'll call cage.save and that's going to store it in the database now we want to remember if we look over at our owners it has cage ids to manage the relationship so the order in which we do this is super important now we need to be a little bit careful with this account here we want to make sure that we're getting the latest account from the database so we'll do something like this we'll say account equals find account by email this activeaccount.email see that make sure that we don't have any stale data i'm going to go account dot cage ids this is a list so we can append to the cage dot id now it's super important the order here we must call save so that this is an actual generated value it's just none beforehand so we want to make sure that's generated in the database and then we can return the cage so that little warning up there goes away because we are returning the cage the other thing that we need to do is this has changed the account but we haven't pushed those changes back to the database all right so our register cage seems like it's working let's go over here and let's do one more thing this active account needs to have that data adjusted as well so let's go over here to state and has a reload account that's not written yet let's do that so this is super easy to do all we have to do is go to the database and pull it back so we have this active account global variable and we can come over here and say import the service and here we just say find account by email activeaccount.email all right that's all we got to do to reload it so this will make sure that when we work with our state.active account it's the fresh one that just got its data changed down here let's do one more thing before we carry on let's go ahead and uh implement register cage here and let's spell suppress correctly let's be at the ability to list our cages so that we can test that this actually worked let's also do a success message registered new cage with id make that an f string actually cage.id so we gotta store that up here excellent so now we've got our cage and we'll see that come out but let's go ahead and we're gonna require an account again which is the same info up here and all we've got to do is get the cages so let's write something like this we'll say cages equals service not find cages for user all right go to write that function there we go creates an account let's not call it active account we'll just say account and that is an owner and it returns a cage actually not a cage what does it return it returns a list of cages so we got to go to the typing module here typing and do a cage okay perfect so what we're going to do is we already have the owner and because of our refresh account stuff it should be fresh so we'll have cage ids and we sh we should have this account dot cage ids right there we can use so now how do we query for this particular thing we're going to do something we haven't seen yet so we're going to come to the cage and again we're going to go to this objects i'm going to do the query but instead of saying remember before we had email equals and that did the query against mongodb for testing equality we have something different we need to do we want to go to the id of the cage and we don't want to just say well it's equal to it's not going to be equal to the list right we can't say not cage ids because one is like an object id and one is a list of object ids so we have to use a special operator and mongodb has all these socalled dollar operators dollar set dollar in dollar not dollar or these types of things and the way we work with those in engine is we use a double underscore to say we're applying this to the id but then there's this other thing that we're doing i'm going to say in so this query right here maybe a little cleanup this query says go to the cage and find all the cages whose id is in this list of ids right and now we'll have cages equals this is a query but we want to execute the query and sort of snapshot it for our app so we'll and we'll return cages and that should make our half our app totally happy that little warning went away okay great so we've written this function and we've used the in operator the double underscore to access it here's our cages we just need to print them out 4c in cages and let's make these f strings and we'll come here and we'll say c dot what do we want here we want name let's also print out something like this you have however many length of cages you have and then we'll print those off okay let's try to test these two things that we've written for host we first want to register a cage actually let's try to lister cages ah log in um michael at talkbython.fm and let's list our cages you have zero cages great so let's register a cage now we're logged in at a lettuce it's 2.2 square meters yes it's carpeted yes it has toys no has no venomous this will be bully's cage ah it looks like we haven't set the price hmm we've forgotten something haven't we okay so good thing we tested that here say price and this will be how much are you charging all right let's go add price here price okay so price okay that was kind of annoying that that crashed but it's also cool why is that cool because hey we said the cage must have a price and it didn't if that was regular mongodb that would have just let that happen but because it was engine did not all right let's do this again plus my cages oops list my cages we have no cages let's register arcade do this again how much are we charging and charging 29 tonight this is one fancy cage folks boom we've registered a new cage now let's list your cages oh we have one cages well maybe a plurality thing there but bully's cage is that let's register one more cage this is a huge cage it's carpeted it has all the toys and this one's even for venomous snakes this would be the large boa cage who knows and this is 30 39 now if we look at our cages we have two cages beautiful so it looks like our registering and our listing cages is working great let's add a bookable time to one of our existing cages we were able to register cages and list them now let's make them available for snakes to stay in so we're going to work on this update availability method here we've got our requirement that you have to have an account because they're your cages whose cages you're going to manage right things like that and we're going to just print out the list cages i've changed that slightly so it has a number i'll show you really quick i'm using enumerate and an index so it says 1 2 3 instead of star star star because we want to ask like hey what cage do you want to work with so we're going to add that here and just for the sake of time i'm just going to paste that so it's going to say what cage do you want either you can cancel or it's going to parse that into an integer and then we're going to work with a particular cage so let's go down here and say selected cage oh of course we need the cages let's say cages equals we'll just use our service again get the cages for state.active account and we'll down here get in here and say cages of cage number minus one because we're showing them one two three we've got to convert that back to zero based okay once we've got our cage set we need to get the dates we've selected this cage we'll say the name that you're gonna work with and then we're gonna say enter a date year month day that you'd like to start this available time slot on and for how many days right so i want to start a particular date and make that available for five days now we're using this thing called parser and that comes from date util so python dash date utils module name it's in the requirements already parser is a really sweet way to parse date times it has many many different formats it understands so we're going to use that instead of the builtin date time parsing now once we have this we just need to go and use our service and write another data access method so we'll say add available date and what are we going to pass we have to have the account let's say active account there of the selected cage that we're going to add it to we have to have the start date and the days and let's go ahead and say state.reload account because this might change the account and then we want to just have a little success message like hey good job and f string this okay so now we're down to just pure data access and the interesting part right let's go have pycharm add that function and we'll have a few things here so this is going to be an owner cage date time and it end and it's gonna return nothing okay this looks great so remember what we're adding here is actually a booking and bookings are not top level items but we'll go and create one to get started and we'll say booking is a booking like so and we just got to set the properties this one we've got to do a tiny bit of math here so we'll say start date plus time delta now we want to change the cage and the way it's working probably it's fine to just change the cage and call save but i want to make sure that we absolutely are working with what's in the database so i'll say cage equals actually we can just look it up here i think i'm not sure if we need it again so we'll just say cage dot objects id equals kj id dot first okay then we're going to go over here select cage that was let's change that here again remember the bookings are not top level items they live inside of the cages so here we're going to append the booking here and we call save on the cage not on the booking object right because it doesn't live its own it lives inside the cages here we could return the cage i suppose if we want you know because here's kind of the updated cage we could even tell consumers that that happens i guess we don't need our active account here do we so we can go ahead and drop that and let's just do a quick clean up here get rid of this we're not doing that nothing changes there okay great it looks like we can probably add some time let's go and try to test this out here we're gonna be host we need to log in let's see our cages okay so we've got these two let's update the cage availability the large boa constrictor one is available so that's gonna be number two great we've selected it it's gonna be 2018 slash 01.01 brand new year cage is available and let's say that's for five days great a date was added let's add one more cool now if we list our cages you can see our low large bow constrictor cage now has two available bookings it has this time for five days and that time for 10 days and neither of them are booked because no guests have come along and actually booked it but it's available and now they can go and ask hey what cages are available for my snake and when they ask this boa cage this large broke age should come up maybe we'll make a little side money why our boa constrictor is not using it so before we finish the host side where you actually can see your bookings and things like that that turns out to be one of the most complex types of queries we're doing in this entire application i want to make sure that you can book some stuff so you can see it so the data comes out when we write it that'll make a lot more sense so let's take a moment and focus on the guest side of the things let people come in log in create an account register their snakes and so on so if we go up to the top to our little switch action thing here notice that i'm using the create and login from host there's no reason to write that code twice we'll just use that one now the thing i want to focus on for a moment is adding a snake and viewing your snake now this is super super similar to what we already did so let's go ahead and just talk through this real quick instead of write it from scratch so just like before we have to have an account we ask a few basic questions like what is your snake's name let them cancel by hitting nothing in the first one get the information about the snake and then we call the function add snake and you know you can see this is very very similar so we're going to get the owner get the owner back and maybe it makes more sense because we've been writing the others like this to go like this we're going to create the snake and save it but remember the relationship between snake and owners is managed by the snake ids inside of the owner so we're going to go get a fresh copy of the owner from the database update that and save it then we'll give back the snake that we just created also we call a quick reload account to make sure the snake ids for some reason if they get reused real quick are in the active inmemory account so that's all it means to create a snake just like creating a cage was so everything is exactly the same there and then to view your snakes we just write the function get me the snakes for the user and then we loop over them that again is very much like the cages we get the owner in this case just to be sure that we have the fresh set of ids there and then we do the id in owner.snakeids and we can call the all function and then convert it to a list i suppose we could probably skip this but either way this is all good so this gives us our snakes and we're going to list it out let's go and just run that to make sure this is all working here this time we're going to be a guest and let's go ahead and log in and this time i want to log in as sarah so sarah is going to be my guest and michael is going to be the person with the cages we'll log in so we're logged in as sarah and let's say i'd like to view my snakes hmm you have zero snakes okay let's add a snake so i have slither and slither is 1.2 meters long this is a large gardener and no those are not venomous so we've created slither and let's add one more snake this is going to be bully and bully is 0.5.4 meters let's say this is a bull snake a no now if we save your snakes there's your two snakes okay so our guest side of registering a snake so that we can book it into a cage and viewing it that kind of stuff is all finished so we have cages we have available dates and gauges and we have snakes time to book a snake into a cage and one of those available dates this turns out to be one of the more complicated things we're going to do in this application and there's a lot of like input and juggling stuff so i'm going to paste a few things here just about asking questions about the dates and stuff and then we're going to go and write the database queries from scratch so let's start here we're going to start by making sure you have an account and then we're going to get all the snakes and make sure you have a snake because having an account is not enough you also have to have a snake you can put into there we're going to ask some questions about when do you want to do this we're going to use python date util to parse that so just like before we're going to do a little error handling to make sure like you're not trying to book some sort of reverse thing like i check in before i check out all right check out before i check in something like this right okay so then the next thing we need to do is find out the available cages and this is where it gets interesting so we're going to write a function called get available cages we're going to take the check in the checkout and the snake oh we also need to figure out which snake you want so first of all let's do a you know enumerate list out your snakes and we'll say snake one the snake two is that and he'll pick the snake okay so take our snakes pick that got our k our time and then we're going to go to the database and find a particular cage that we can work with now that's not all there is to it so this is just going to get us the cages that could be booked and then we have to ask that's this little section right here then we have to let the user pick a cage and we'll find the underlying booking behind it so let's write this function so this is going to be a date time date time and a snake you of course don't have to put the type hints but i find like at the data access layer it's really helpful maybe through you can see it through the rest of the application i'm not doing this but at the data access layer i find it really helpful to say like these are the things that go in these are things that go out this is like how we're working with the database okay so here's where we get down to business we're going to come in here let me move this up for you so we need to do a couple of things we need to find all the cages that have bookings that are not booked between this time and that time all right and we need the snake information because we not all cages allow poisonous snakes and they don't all necessarily fit if i have a 20foot snake i can't put it into a twofoot cage so let's just do a little quick um rule of thumb to say if your snake is four times longer or more than the cage then the snake can't go into it right stinks can curl up but they can only curl up so much so we'll say something like the minimum size of the cage we're gonna get is snake dot length over four okay so this this is going to be part of our query the date's gonna be part of the query and the whether or not it's venomous or not we're gonna do a few interesting things here this is definitely one of the more complicated queries so i'm going to the cage and we'll say objects and when you have these complex queries i find it's nice to spread this across multiple lines so i'll say dot filter i have multiple filters and these are effectively ands so i'll say square meters now i'd like to say let's say equals min size or greater right just like we saw with the dollar operators about in there's one for greater than or equal and we can say the square meters are greater than or equal to this minimum size but that's not the only thing that we need we also need to go and do another pretty wild thing we want to go to the bookings now remember just refresh over here we have a cage the cage has a bookings field we go to the definition for bookings bookings have a check in date and a check out date we want to work with that how do we do that in engine we come over here and we can traverse that hierarchy with underscores as well so we can say bookings dot checkin date and we want to have the checkin date before or equal to the checkin that was passed right so the time you can check in has to proceed the time this person is checking in then we'll do something similar for check out okay so this is part of the query now if the snake is poisonous we also want to say that they allow poisonous snakes so we'll say this we'll say if snake dot is venomous we need to augment this query so we can do that because it hasn't executed yet it's like the potential to be executed so we can say query equals query dot filter and what does the thing allow dangerous snakes that's what we want to work with equals true because nondangerous ones can stay in cages that will either allow or not allow dangerous snakes but if it's venomous we have to have this additional criteria and maybe we want to have some kind of order by like we'd like to show them the cheaper ones so let's go like this we'll say cages equals and we'll finalize the query like this we'll say query order by now you don't do this sort of default this named parameter type thing for this i want to order by price and default is ascending so cheapest ones first and maybe you want to see the biggest ones first as well so we'll say square meters like this so we're going to say first order by price lowest to highest and then show us if like the price is the same show us the largest ones at that price level down to the smallest ones excellent so this is pretty much working it turns out it looks like it's going to completely work but it turns out that there's a challenge we're going to run into and in pymongo this is straightforward to solve although i have to use a lot of operators these dollar operators to make it work but i haven't found a good way in engine and so i still find on balance that work with engine even for this query is better but here's the problem what this query is asking you're probably thinking it looks right you know it takes a moment to realize the challenge we're hitting here what this query says is go to the cage and find me the cage with the square meters at least minimum size that's totally fine that works perfectly and it says show me where there's a booking greater than checkout and there's a booking um oops this should be greater than that was almost an error so where there's a checkout date passed equal to or past where i'm willing to check out for my snake the problem is if i have let's say 20 bookings in this cage right i probably want to check one more thing but i can just check it down more we're going to have to do one more bit at the bottom but the problem is what if there's two bookings one that starts way in the past but the checkout is like one day later and then there's another one where the checkout date is way in the future but you can only check in when the day before and these are not the same bookings right there's a booking where the checkin date is before the checkin and there's a booking where the checkout date is after the checkout but those are not the same you need to say there's an individual booking not like some set of bookings where one matches one clause and the other matches the other so the way you do that in is you say dollar element match i think it's lmatch my element match is the description of the thing so you can say both it must have both of these but i don't see how to do that in engine it seems like it should be possible but uh it certainly is possible for equality but for the these operators plus element match didn't seem to work for me anyway if you figure out feel free to use element match i didn't so i've got to add one more line here and i'm just going to copy that over real quick and we'll talk about it so what we're going to do is we're going to say let's go and actually these are the cages we care about i'm going to iterate over the query which executes it here and remember the cage each cage contains the number of bookings for each booking i want to check that both the checkin is before and the checkin is after and that the snake id is none so it's not already booked during that time so if it's both available and the check in checkout date matches then we can make that part of our final cage there our final cage list okay so and it says it returns this but actually what it returns is a list of cage here we go okay so that's what we got to do if i could get element match to work with greater than less than in engine this would not be necessary you could just straight up run that query but anyway it's not a huge deal remember this set is already filtered down to where significantly right where the check in and checkouts do match it just happens to be maybe one more thing is missing there okay so we're getting the available dates so let's come back to our guests here we've got our available cages now we just have to like show them to the user and let them pick it all right so let's just take some prewritten code for this there are certain number of cages available and we're going to enumerate over them and don't need the average rating right now do like this so we're just going to print out the name the square meters whether it's carpeted and whether or not it has toys we don't want that to be true false let's put that yes or no like more friendly right and if there's no cages sorry there's no cages but if there are we'll ask you which one and we'll pick that out you know zero based of course and finally the final thing to do is going to be book a cage and then actually we'll just give out this nice little error mess this nice little success message saying hey you booked it for this time so last thing to do with this book in a cage is to actually book it so let's go over here apply term write it one more time here and now what we're going to do is we're going to loop over that cage's booking so the way it works is they've selected a cage they haven't selected individual booking so we just have to go one more time over the bookings and go uh let's find a booking within this cage which we know exists because it's in the list and let's assign it to the snake so we'll do something like this we'll come down here and we'll start out by this little booking to nothing just in case for some odd reason we don't find one i'm going to go through and again do this similar test as we did right there right we've got to find the available booking within the cage we know it exists but we got to find it then down here we're going to just set a few things say the booking dot guest and get a little uh intel telesense auto completion if you want set the guest owner id i guess we've probably got to pass the account as well we'll say countdown id say booking dot set the booked date it was booked right now regardless of when the booking was and we also need to set the snake there we go and then we got to go back and save it but remember don't call save there we call cage.save okay excellent now i think it just believes that's a misspelling but i'm going to say it's not all right so that should let us book a cage that was a tough one right so pretty interesting query we're using the operators greater than less than we're traversing the hierarchy and uh like i said we're sort of effectively in memory applying this element match match works in engine but i couldn't get it to work with both element match and the operators so anyway this will be fine come down here and given a cage we'll pull out the booking we probably could structure it slightly differently so we could skip this step and somehow capture the booking directly but this is fine it works plenty fast for what we're doing set the hey you booked it values of the booking and call save all right i think it's time for us to test our our bokeh booker cage and i noticed i almost forgot to add this here state.activeaccount when i added it below so let's go and run this we'll come in here and we'll be whoops be a guest and let's go and log in and let's see our snakes we have these two snakes neither of them are venomous let's book a cage i'm going to start by booking this now how do i know that date because over here we have two available bookings for the large boa cage and these times one to six in january so we'll go to let's say two to four should be fine got this four and it says which snake remember we it matters the size of the cage and snake as well as whether it's venomous so we'll pick slither and hey look the one cage is here let's say all right let's book it we've successfully booked the large boa all right now we haven't written view your bookings but we do have that i believe we might have that for the other one go over here as a host and we log in as michael i think we might not have implemented this as well but we can list our cages yes there we go we can see that we have two cages bully's cage and large boa and look at that one somebody has booked this one this slot for the large bow cage yes so it looks like that worked successfully just like we expected all right we're down to the very last thing we're going to do as a guest which is to view our bookings we were able to book a cage but as a guest we couldn't see he you know can't say what are your upcoming stays for your snakes and things like that so again just for the sake of time let me go over here and put some prewritten code and we'll go write the data access layer so require an account and we're going to call get bookings for user and this is going to return a set of bookings and just to remind you what that looks like the bookings are going to have the date possible reviews the snake id is going to be really important so what we want to do is we want to say give us the snake given a snake id and a super simple way for us to do that is to actually just generate a dictionary using a dictionary comprehension so this little expression here is going to create a dictionary where the key is the id and the value is the snake for all the snakes belonging to us whoever the logged in user is then when we get the bookings and we'll this is the part we're going to write and then we're going to loop over here and we're going to print out hey the snake i'm going to use the dictionary lookup to get the name here i'm going to print the cage name and need an import date time there i'm gonna create a date time and do a little bit of math here on the checkout so we're gonna turn this back into days you're checking in on this day for five days something like that okay so that's what our view bookings ui that's pretty much a stretch right with our app but that's kind of a this is kind of the ui code if you will but we've got to write this get bookings for user this is going to be a bson.object id and what we're going to get back is a list of booking i believe now notice one other thing before we write this code over here we're saying b dot cage dot name now cages have bookings but bookings don't have cages there's not a super nice way to create that reverse association in engine so what we're going to do is part of what we're going to do in this function is we're going to set up that relationship and let's call this user id or account id something like that okay so the first thing we need to do is find the owner so call this account equals let's pass in an email instead something like that and before i forget passing the email there okay great so we'll have our account and we've already verified that they're logged in so we can just assume that that happens so we can say booked cages and so we can find all the cages that have been booked by this person so we can say cage not objects and now we'll do a few other interesting things we haven't seen yet say filter and here we'll say bookings double underscore and then we're looking for what let's see the guest owner id let's go to our booking that matches the owner that equals to account dot id we don't actually care about all the details about the cage and you could skip this little part right here but just as as a means of efficiency we can come over here and say only we haven't talked about this yet so what we can do is say we only want to get back two pieces of information not potentially tons of information in this document we want the bookings and we want the name so when we say cage.name above that means something right so let's create the bookings and we'll do this with a list comprehension so we'll say bookings is this i'm going to write in one way and then i have to make a change to this reverse association with the cage so i can say booking or booking in the book cages but remember there are other bookings that are unrelated to us here right it could be two different snakes staying the same cage different days we need a little test all right so this is going to be the bookings that are assigned to us within the cages for which we have booked right so show me all the cages where we've booked at least one of the bookings then we're going to strip out the unrelated ones so you might think that we're kind of done and we're very very close to done but we're not done so if we run this you should see this is going to crash because of that line right there now oh i almost messed this up so this is actually for cage in the book cages and each cage contains a booking so we've got to do a double loop here booking in cage.bookings so what we're going to do is going to take this hierarchical list of cages which inside nested inside them contain a bunch of bookings and we're going to flatten that list with a double loop go through each cage go through each booking and just turn that into a list and across all those bookings across all the cages only show the ones which we some point have booked okay so this is close but if we try to run it this reverse lookup of the cage here is not going to work so let's see we can try to run that real quick save go as a guest log in and sarah now if we try to view your bookings see no cage so let's do a one more little trick we can do a transformation at this level right this is like the select part of the list comprehension now this has to be an expression and i don't think we can do this with a lambda expression because it it doesn't allow us to make modifications so we've got to define this little local function so i'll say map cage to booking given a cage in a booking it's gonna be the silliest thing you've seen booking.cage equals cage well and then we're going to return cage sorry booking so why do we need that we need that so we come down here and we add this function it's going to take a booking and it's going to put that same booking right back into the list but the booking will be changed in that it's going to have a cage associated with it okay so i know that's not super obvious but that's what we need to make that one line work oh wow i made a quick error here uh those i had booking cage here and cage booking there so cage booking gate okay okay looks like it's ready let's try again all right let's view our bookings it works we have one booking our snake slither is booked in the large boa on this days for five days so let's add one more booking just to make sure this is working so book a cage all right so let's try to book that other available booking uh this time i'm gonna put bully in there and i guess we're gonna book that one great if we view our bookings again we now have our snakes booked into the different sections at the different times let's just try one more time now that those bookings should have been used up to see what happens so let's try to book one more cage say we'll start on that date let's check out on that date and we'll use this one sorry no cages both the available slots have already been booked just so happens to be to our snakes awesome it looks like the guest side of things is 100 working we just have one function left to write for viewing the bookings as a host what bookings available booking dates in your cages have been booked and we'll be done with this application so this require account stuff paste that that's the same nothing special there now we want to get the cages for the current user well guess what we've already written that find cages for user state dot active account that's cool so that was already done at some point along the way and then what we need to do is we want to get the bookings and we want actually a flat list of these are all available slots that people have booked across all the cages all right so what we're going to do is something called bookings like this a list comprehension and we're going to use sort of a dual comprehension to flatten it so i'm going to put something here one and two things i'll say what those are for in a minute so we want to say 4c in cages and then for each cage we're going to say for b in c dot bookings now we don't want all of them right there's already a way to see that kind of stuff but what we want is the ones that have been booked we know they're booked if the booked time or the book date was set so say if b dot book date is not none what do we want to get back here we want to get the cage and the booking so we're going to get a flat list of all the bookings and along with it we're going to carry along it's it's book it's cage that it came from so that's pretty straightforward and then that's this part getting them as a flat list and then the last thing to do is just print them out and that's a lot of typing for not a lot of value so let's paste that over we'll import date time and we're going to as we loop over them we're going to unpack that tuple so the cb here gets unpacked into the cb right there and we'll say for this cage it was booked on this date um by so and so all right it looks like this is going to work i have a lot of faith in it let's give it a try we'll come over here we're going to be a host we're going to log in as me and are you ready moment of truth view your bookings no there's no duration in days ah so where did this duration days go so this is the booking let's look at the booking real quick here it has a check in and check out date let's add this duration in days now if we add it as an actual thing that engine saves that won't be so great because it's going to have duplicate data check in checkout and days like they could get out of sync so what we're going to do is we're going to add a property so we have a property called duration in days ah so close days is that the same yes duration and days so down here we just need to use the time delta to figure out what that is so we'll say dt equals self not check out date minus self.check in date and we'll return dt.days all right let's try to run this again oh double double ats come on too much help here there we go all right come in as a host vlog is me oh ready view your bookings beautiful and you can see our property is working just right there so five days and ten days now remember when we actually check we said we're going to book it we could book it for a subset of time we just don't store the data for how long the user said versus how long the time slot was so they kind of get that whole slot and that slot is worth five days and ten days in duration but given the data that we're keeping this is working totally well so i think we've done everything we can create an account log in we can list our cages we can register a cage which we already did we can update the availability which is how we got these slots we can view our bookings which we just wrote and we could even get little help and go back to the main menu and we could check out the guest just one more time around again create login same thing um it says book a cage that's reserve a cage for your snake we saw that we can add snakes oh i gotta log in as sarah she's the one with snakes she has those snakes there she can view her bookings from the perspective of her snake not from the available slots things like that right she only sees her bookings not all the bookings across everything and we go back to the main menu or because we're done we can say goodbye to snakebnb now that we've built our app let's review some of the core concepts we saw along the way if we want to insert an object we just create a standard python object style we just say owner equals owner call the initializer we could either pass the values as keyword arguments or we could say owner.name equals name owner.email equals email and at this moment there is no id associated with this object but then we just call owner.save and now the object id or whatever the primary key is we can set functions to be called when that happens for that generation whatever that's going to be we've got it set after you call save so now you can start working with it as if it came from the database we also might want to insert a bunch of things it turns out if you have a hundred thousand items to insert and you create one save let's create one called save create one called save it's a lot of database back and forth and it's very slow so what you would rather do is create a list of them so here we have a bunch of snakes we want to save we create a bunch of them put them in this list and then you call snake.objects.insert and you give it the list and that's much quicker if you want to do a bulk insert type thing we saw that querying the database is pretty straightforward the way it works is we start with the collection the type that represents the collection we want to work with and then we say dot filter so here we're saying filter and we want to do a match where the email equals the value of the email variable and you could have more than one thing in here you can have more than one filter statement and those basically combine as an and now this would return a potentially a bunch of owners but we don't want a bunch of owners we want the one that we know matches this email so we can say dot first and it'll give us the one or at least the first item to match if there's no no match we get none back we don't get a crash or anything like that when we're querying against just plain straight fields in our object that's pretty straightforward we said email equals the value that we're looking for but if we're looking deep inside of a hierarchy can get a little more let's say not obvious so we're combining two really interesting things here we're going to the cage we're going to search within the bookings embedded document list right bookings was a list and it contains a bunch of these booking objects so the first thing that we're doing is using double underscore say bookings guest snake id so we're looking at the value guest snake id of the booking items within that list and we're also applying the in operator so the double underscore in means the collection on the right we're doing an in test for the various booking snake id so we use the double underscore to separate and navigate the levels and sub documents as well as to apply the particular dollar operators and then what i consider best practice is to fully execute the query before you leave this function if we just return to book cages it kind of still is not yet executed it hasn't quite talked to the database and so i want the database to be done and over with by the time we leave this method so wrapping it in a list will execute all that stuff and pull it back for super large amounts of data there might be reasons you don't do this but for most of them i would do something like this now sometimes you don't want a quality in your matches you want some kind of operator like greater than or less than or in or things like that so here you can see we're going to the cage and we're finding all the cages where the square meter is at least the minimum size so just like with sub documents we use the double underscore and the operator name gte here to actually do this query right there's a bunch of dollar operators you can find them in the mongodb documentation and you apply all of them in this way now the other thing that we're looking at here that we didn't do in our app is count so if we want to know how many cages there were we could say do the query dot count and it'll just do a count in the database rather than pull all the objects back where you do a length of it or something like that the most straightforward way to make changes to a document or to a record is to go get it from the database change the class and call save so in this example we're going to go get the owner out of the database make sure that's all good right don't have errors we're going to create a snake we're going to do work with the snake and then we want to append the snake id onto the owner's snake id collection so on line 11 we say owner.snakeids.append and we give it this new id that was gotten from the snake on line nine when we called save and we save the owner and that's that all right so we get the document we make a change to it in the case of line 11 here and then we just call save and that pushes it back this works but that transfers the entire document out of the database over to our app serial deserializes it processes it and then reverses that back to the database that can be slow but that can also have concurrency issues if two people run this exact same method at almost exactly the same time with the same email address there's a chance that one save is going to overwrite the snake ids of the other right both of them read the owner one makes a change one makes a change one saves the other saves you only have one snake not two so there are challenges with this but if you're pretty confident that that's not an issue you're going to run into this is a really nice and easy way to do it well mongodb and engine let us work with these documents make changes and push them back in there might be a better way so if we know that we want to just change some small part of the document in a very controlled way we might want to use some of the atomic operators so here let's suppose that there's a number of stays field which is an integer in the cage so we just keep track of how many times people have stayed at it now there probably are better ways to get this but let's suppose that is a number and we want to increment it so instead of pulling the cage back and doing a plus equals one sort of thing and saving it we can literally go to and say increment this number the value of number of stays by one and that could be negative that could be 10 but i have 1 here so you write the query dot update 1 and then pass the little operator so that's really great now how about this putting the snake id on the owner well we can do that too so over here we're adding a snake we generate the snake we call save that's standard that's an insert but then this line where we have the number of updated we have owner objects emails email and instead of saying you know get it back make the change append it to the snake ids and call save we're doing something with an operator so we're seeing update 1 and we're using the push operator that's dollar push and we're going to push it onto the snake ids collection another thing we might do which probably makes even more sense would be add to set that's another related operator that will say add this id to this set or this list if and only if it doesn't already exist so you won't get duplicates right so we're pushing the snake id on there that way we never pull the owner back these are atomic they're perfectly fine in concurrent situations things like that so this time we have to check that we updated it in a different way but you know the same effect as we saw before so engine supports these inplace updates array operations and set operations so like increment as well as push and these are both better for concurrent safety think of them as basically transactional and they're better in pure performance so they're not always as simple to work with but they are better if you can use them there it is the finish line you have made it congratulations i hope you've learned a lot throughout this course we really have covered a majority of what you need to program against mongodb so you've done it you've crossed the line now you know enough to start building applications based on mongodb so the big question is what are you going to build now i hope you go out and build something amazing please share it with me when you do i want to take this moment to remind you to get the source code come over to github.com mike c kennedy slash mongodb quick start dash course and star and fork this so you're sure to have a copy so one thing i do want to take you through really quick two things one i covered in the beginning is there is the starter code which is here this is exactly what we started from and here is what we have finished with you can see right there 15 minutes ago i wrote final code but i also wanted to make sure there were save points along the way so if we go back here and check out the branches you'll see there's all these different branches so these are all different save points that you can grab so if i go here for example you can see final registered and list cages guests can now book a snake into a cage and things like so these are different points in the course that you can go back and forward to so be sure to make use of the branches and things like that if that can help you you've learned a bunch of stuff to program mongodb using engine but there's actually a lot of other things that you need to take into consideration when you're doing mongodb in production for real applications so i want to encourage you to check out my paid course mongodb for python developers and just some of the things we're covering you've seen a little bit of it but there's actually a lot more so this is over seven hours of professional grade mongodb and python programming not just engine but the core pymongo the javascript api and so on so let's see a little bit of what's covered so we talk at in depth about how to set up your machine whether it's windows mac or linux the tools that we're going to use how to get them installed why the theory behind of nosql y nosql why document databases mongodb's native shell and native query syntax so when we run these operations these queries filter statements and so on in engine how does that map down to the database this is important because when you're running mongodb and production you need to be able to use the tools and the query language to talk to it manage it right and that is in this native query api how to model data with documents we did talk about this we go into more depth in this course mongodb from pi this is the foundation of engine and basically the python's equivalent of the native query syntax engine that's we covered a lot of that in this course so this is pretty similar high performance techniques so performance around document design performance around indexes and using profiling to discover where you need those so that's covered in this course and super super important is how to properly deploy mongodb in production on the internet so it doesn't get hacked and you don't lose data or anything like that so if you want to check out this course here's a tremendously long url that you very likely don't want to type so type this bit dot lee slash manga course and that'll take you right there you can check it out i encourage you to take this course if you like what you saw on this course here's seven more hours going even more in depth so with that i want to say thank you thank you so much for taking my course i really hope you learned a lot and you enjoyed it please connect with me on twitter at m kennedy or various other places you find me on the internet thanks and see you later