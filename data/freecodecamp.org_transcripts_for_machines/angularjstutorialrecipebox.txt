hello everybody and welcome to another video today i'm going to show you how to do this recipe box with angularjs using a coat pen and free coat camp the things that you can do is to edit and delete a recipe and of course add one you can find the user stories in free code cup and the code will be available in the description box i will leave a link both to my codepen and my github account for this project i also inspired from another one that i found on github that i would also share in the description box and these are the user stories that our project is doing so i have already set up my codepen account i'm using scss and i'm using a mix with bootstrap and materialize then in javascript i'm also using bootstrap aguilar.js of course and jquery for the accordion part all right save and close and um i think that we're ready to start this beautiful recipe box i'm going to start with the html so first of all you'll need an ng app and i will name mine recipe box the ngap directive tells angularjs that this is the root element on the angular application all angular applications must have a root element and then of course you need the ng controller which in this case is usb box controller the control directive defines the controller so then we are going to continue with the class name container and inside there we will build everything else we're going to have a class row and we will part this row in two parts one call x as eight and another one will be four in the first part we will see all the all the recipes and we will have the functions of edit and delete and in the right panel we will have the add function so inside the row i'm going to start typing all the left part you'll need a ul class collapsible and data collapse collapsible accordion later in the javascript we will use we will write the functionality for these parts and of course you will need an mg repeat and your bead will repeat every time i have a new recipe so you'll need recipe in recipe list and i will use filter track by index filter formats a subset of items from an array or attitude directives like ngrepeat by using the pipe character followed by a filter and then expression is written inside double braces so in this case i'm going to have a recipe title and the class is going to be collapsible heater and then recipe ingredients where the class will be collapsible body and once again i would like to mention that if you can't see very clear everything in my code i will leave a link in the description box so you can find everything there alright now i need the ng click i'm going to write here two functions the first one will be edit recipe dollar index and this will be our edit button all the functionality will be written in the javascript part and then again another one click which will be the delete trace key and the name of course will be delete and i think the two arrows is done with the left part and now we are going to continue with the right part we will have a column of four and inside there i will start writing all the classes first i'm going to have a class card and inside these i'm going to have the cards content here i'm using the materialize classes so you'll see later that i won't read a lot of css code i'm going to have a new recipe and then for ng submit addressing the addresses is also going to be a javascript function that you will write later div class input field and i'm actually going to do this two times because i'm going to have two fields one will be for the name and another one will be for the ingredients so you will need input type equals text ngmodel new recipe and placeholder name and you should do the same for the ingredients now remember that the ng model is very important and you will also use it in javascript you don't have to use placeholder or maybe even type but of course you need to use the ng model the ng model directive binds the value of html controls like input selector text area to application data you can bind the value of an input field to a variable created in angular now for the css i'm going to have a body and inside there box sizing and this image will be our background i will also leave this image in the description box and i'm going to add some properties most of them will be center and actually the css is quite simple so you will need a background size cover mean height 100 vh display flex justify content center align items center text align once again center and phone formally you can use whichever you like i sometimes use aria sometimes riding or fedora but you can use whatever you like and after that i'm gonna have it before and after the property box sizing and then it will be inherit so every property from the html is going to be inherited great okay now let's continue with the container and i'm going to add a background color i've already found the background color that i like and i'm going to be use um i'm going to use rgba and the a controls the opacity so i don't want to be a standard color but i want to have some opacity so we'll be using 130 138 117 and 0.4 now i'm just have a recipe button with a button top 20 pixel and a card with background black water radius 50 color white font size 1.2 and inside there i'm going to have a button color block and that's it but uh yes let's write for the javascript the accordion and then we're going to continue a little bit with css because i think that i forgot to write something and my image is looking quite weird now the accordion part is very very simple and here is where we are using the jquery so you'll have document ready function and inside there collapsible dot collapsible and that's it all right let me find yes that's it you should be it should be bh because it stands for a vertical heights now everything looks nice let's continue with the javascript part and you will be able to see all the functionality so i'm going to start writing var up angular dot module so angularjs modules defined applications whereas controllers control the application our controller is recipebox controller and then we have function scope when you make a controller in angularjs you pass the scope object as an argument when adding properties to the scope object in the controller the view i mean the html gets access to these properties in the view you do not use the prefix scope but you just refer to property name in double braces i'm going to start creating the initial recipe list from the localhost scope dot saved equals local storage dot get item and then we have the recipe box and now if a local storage has a value for my key grab that if not create a new local storage item and that's how local storage works so you should have scope.jsp list equals local storage don't get item mse christ writes books different unknown and then inside here we are going to create a json object json format an object to adjacent string so json.first scope dot saved and you can write your own object for me it will be a pizza with ham and cheese and let's create another one hmm okay it will be a cake yes i like cakes and the ingredients well i don't know all the ingredients but let's say it just accents milk all right i think that i have a mistake here uh of course here oh my god that's so wrong let me fix that and of course it's the quotations it should be like this all right okay that was super wrong now everything everything works fine and i think that we are able to continue with our next functionality just copy and paste uh the local storage so this could probably be in a function on its own with how many times it's called but it's just one line so i didn't bother and i just copy and paste it now we want to allow the user to add a recipe so i'm going to use function and i will name it add recipe the same name i used in the html code so i have function open brackets and then i have an if statement so i have if scope dot new recipe different than no and scope dot new ingredients is different than norm then scope to address list push title uh scope new recipe and ingredients scoping ingredients and in that way you need to give both a title and ingredients so if you try to give only title or all ingredients then you won't have a new recipe and then i'm going to continue with the local storage and then i'm going to add a sculpted new recipe equals snow and the same thing goes for ingredients and i added these two lines because um if you don't add them then every time you're going to add something you're going to have the previous value so with the with the null everything looks empty i'm going to continue with that delete so we're going to allow a user to delete your recipe i'm going to write another function with the name delete recipe and again the name is from the html code so inside there we want to show confirm learn box alert box and when user confirms it cuts the recipe out of the array and then updates the local storage so i'm going to have an if statement and confirm this recipe is going to be deleted scope.jsp list splice index 1 and with the splice and the scope response we delete an action so let's continue with the edit which will be our last function scope.edit recipe equals function index so let's say that we grab the recipe by the index for the array and then display the recipe's ingredients in a prompt that allows the user to change ingredients if they hit cancel it returns a new response so we will check for that also we have a variable name ingredients equal scope to trace list index dot ingredients and another variable named result with the prompt edit the ingredients and if result is different than no then scope.js list index dot ingredients equals result and the local storage once again so now i think that we are ready let me check if everything is correct okay let's test it we can edit we can add all right uh we can add something okay we can see it very clear let's add another thing again my examples are notes great but i think that you can see the point so that's it guys thank you very very much for watching if you have any question or any comments please leave it in the box below and thank you for watching you