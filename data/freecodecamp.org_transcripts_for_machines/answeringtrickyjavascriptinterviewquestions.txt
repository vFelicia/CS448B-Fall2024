uh so my talk is fizz buzzkill um and we'll talk about that in a second but this is uh related to the concept of questions you might get in an interview um i am russell anderson um i am a husband and a father i live here in nashville in inglewood i'm a christian i'm also a terrible golfer though it's probably my favorite hobby it keeps me humble very humble and i'm real real russ on twitter i work for a company called simply agree it's a startup here in town and we are workflow software for attorneys specifically transactional attorneys at this point um i am a frontend developer and um i think that you can all glean from this weekend that that that is a like multitude of tasks and tools i've been doing it fulltime about five years and i have no sort of outside computer knowledge computer science schooling or anything i'm completely selftaught but really i'm mostly colleague top i've kind of leaned on um a lot of really nice really good people at the jobs that i've been fortunate to have to kind of teach me what i know and i've mostly worked like in everywhere that i've worked i've i've used javascript but it's always been in the context of a framework or library back in the day that was jquery and backbone it's been angular it's been react but it's always been in this context the irony of the picture that i chose here is that if if the apocalypse were to happen i would be not be able to use any of these actual tools i would want to build software and be completely useless um but the inspiration for this talk is uh there's a designer that i follow named brad frost and um he wrote a post last year actually called why i'm not a javascript developer and he basically took a list of frontend interview questions specific to javascript that is on the html5 boilerplate github and he sort of took every question and wrote kind of a smart ass remark to it so for instance he said uh why is it called a ternary expression what does the word ternary indicate ternary means it involves three things and strings them all on one line so it's harder to read and then he said create a loop so this is the the fizz buzz question create a loop that iterates up to 100 while outputting fizz at multiples of three buzz at multiples of five and fizz buzz at multiples of three and five so this is a actual kind of standard coding question uh and his response was that sounds hard and for some strange reason i'm suddenly jonesing for dr pepper and so it was funny i read it and i was like oh yeah that's that's funny but it was like it was funny but then i thought i i don't know that i could answer those questions like i use javascript every day um and i build software with it but i these seem kind of basic and i don't know the answer to them so and i figured that i'm probably not alone in that like you can actually uh build a lot of awesome stuff with the tools that you use and not completely understand the tools themselves so i took i thought a good talk idea was to to take some of these questions and just try and answer them and answer them like succinctly as if i would have to be in an interview um and maybe give some real world application to them but before i jump into the questions themselves um i kind of want to address the point of like our interview questions are they are they a good idea i i think that this is definitely something and if you're a junior developer and you're going to be um you're going to be going to a lot of interviews and you're going to probably doing a lot of code tests and things like that or if you're a hiring manager looking at it from the other way you should know that a lot of times putting people on the spot with things like this is uh essentially creating a adversarial relationship with the person that you're interviewing and that really may not not be what you want to do you might want to be in a position where you want a person to feel comfortable with your company with your team so i'm not necessarily a proponent of asking a bunch of arbitrary code questions in interviews but i figured it doesn't hurt to uh know the answers so let's get started um we'll start with this one is kind of a softball and i guess i'll preface this by saying uh if you're senior dev in here you're probably this is old old turf for you but hopefully maybe there's some new uh things that you hadn't ever known exactly how it worked i learned something this morning just from researching this um and if you are a junior or beginner hopefully this will sort of answer a couple questions for you but this one is uh pretty basic but it was one that i couldn't succinctly answer explain event delegation event delegation is javascript as it relates to the dom it basically means that if you attach an event listener to a dom element that listener is not only firing on that dom element it's actually firing on every children in that so for instance if you have a navigation and so you've got an unordered list and you've got list items and then you've got anchor tags inside that navigation what you have if you add an event listener to the ul in essence you're actually adding event listeners to all of the children as well so it's something to and this happens through a process called event bubbling so it's sort of the inverse of the idea of delegating down bubbling is when it comes back up um so events on an element will bubble up to all of their parents so when you click on that a you're actually clicking on the li and you're clicking on the ul and you're clicking on the body ultimately um so that that's the concept of event bubbling so how it actually works out in practice uh ways that i found it useful are for instance if you have a live edits to a form that you want to track and you've got a form with a group of inputs in here i may have to come over here to scroll yeah but you've got all different types of inputs and you want to maybe test when they blur out of one of these inputs or they key up or something like that well you could go through and you could target each one of these individually you could grab all of them by a specific tag and then you could um do this the special loop over them in order to add an event listener to every single one so that would totally work and then you'd have one function that would um you would probably have to create a different case for what type of thing it is in there but you uh can bind to it but you can also just simply bind to the parent so just grab the form itself and everything inside of it that can change that can fire a change event is going to fire a change event uh and so your form would run and then in here you might have some sort of switch based on the name of that element or something like that and this kind of demonstrates for us this wasn't part of the the questions but it's sort of a bonus tidbit you'll notice that when i'm listening to um kind of a more universal event on looking for child elements that would trigger it i want to use event target not event current target and so that's a bonus little tidbit that the difference between uh target and e and current target whenever on an event listener is that target is the actual thing that was clicked whereas current target is what you attach the event listener to so if you've ever wondered what that uh is i had to answer that question like just last week so um so that's that's a little bit about the dom moving on next question uh explain why the following doesn't work as an iffy well in order to answer that i actually didn't know what an iffy was so what is an iffy um if he stands for immediately invoked function expression uh so if you actually ran this code the way that it looks right now you would get a syntax error in your browser and what you would want to do is basically it's the idea of an immediately invoked function expression is basically i write this function and i run it i just want to write it and then run it immediately but you can't do it this way and the reason why is has to do with kind of another related question is the difference between writing a function as a statement or as a definition and writing it as an expression so in javascript anytime we um there are sort of you have statements and you have expressions expressions result in a value and that's the concept of an expression so if you um like assign a variable and try to attach a value to it that will be read and interpreted as an expression and it will create a value this creates more of sort of like a reference but it's not an actual value so you can't just run it in fact if you sort of try to run this code immediately this is how javascript is reading it and it's like this doesn't make any sense to me you wrote this thing and then later on you're trying to call a function that you doesn't have a name this this is weird so instead you need to um but there are a lot of benefits and i'll get into the benefits of the second of of writing it this way how can i write it that way and get it to run immediately well you can make that function at an expression simply by putting parentheses around it so now that this is in parentheses javascript is going to interpret whatever is inside that parentheses to be an expression not to be a statement and then it can run immediately so this is called an immediately invoked function expression so i guess that begs the question like why uh why would i actually need to use this um well in a lot of situations and this is probably if you're working within a framework or something like that you may not need to like you may never end up in this situation but the next time that somebody asks you to build like them a simple web page then this is going to be relevant again you do it in order to control variable scope so if you wrote this function that function is not going to be available the variables inside that are not going to be available outside of that function and actually the guy who's josh mock is speaking right after me he wrote sort of the best blog post that i found on this concept and of like why you might want to control that scope and it used to be i think for software developers it used to be more of an issue because we were writing a lot of things with jquery and there were a million jquery plugins that could be in our application and they all had very dumb and plain naming conventions and i was like i want to use dumb and plain naming conventions in my application so um so this is how you do it and it kind of relates to another question on this list is that why in general is it a good idea to leave the global scope out of a website and not touch it and it's because you can't predict the future uh so 27 years ago robert zemeckis predicted that the cubs would win the world series in 2015 and boy was he wrong he was a year off what an idiot um but seriously like you don't know um especially if you're building that that web page for your friend like what they're going to want to put pull in what kind of libraries um and you want to control your variable names so you never have collision within your scope it also allows you to maintain independence and it makes it easier to write your own code you call things whatever you want because it's selfcontained so um that's a little bit about scope kind of adding on to that concept is uh this word which is probably my favorite javascript word which is hoisting explain hoisting and before i wrote this talk i actually had no idea like what this was i had observed it but i had never quite understood it it means that all variables that are declared using var so this was um kind of a specific problem i'll get into how it's been addressed a little bit but all variables using var are declared at the top of any given function scope whether you really know it or not whether you sort of like it enough or not and this actually includes the functions that are written as statements hold on where were they um so the top example this would include those as well those are hoisted so um this is kind of an example of what you might see but this is i used to try and do this all the time i would say okay i've got a variable and under this condition i want that variable to be this and in this other condition i want the variable to be this and um i would just i'd just be like well i haven't like created this variable anymore i'll create it here and then and here i'll create it and then maybe i have another case where i don't need to create the variable yay i've saved memory or something thought without myself in my head but if you use a linter or something like this you would probably probably notice that this chokes this does not like you to write it like this it would say something like action is already defined on line six um because this is in in reality what is happening behind the scenes that you don't even know about but javascript is taking that var and it is creating var action up here at the top and then what it's seeing here is that you're trying to uh declare this variable that's already been declared not only are you assigning it a value again but you're declaring it again and it's like this is what are you doing this is what javascript is actually doing to your code if you write functions uh as statements like this those functions are actually all being hoisted to the top the entire function this is sort of why and i had never really understood this but sometimes i would write a function and i would try and call it and it would say that it was undefined but then i would move it in another place in the code and it would work but then other functions didn't seem to work that way well it all boils down to whether you write them as statements or assign them to variables so so yeah leonard's will kind of market you about this because it's sort of not clean code and it's um but it actually works in the browser browser has ha no problem with it um but it means what hoisting means is that technically this works you can have your whole if statement you can assign value to it assign a different value and then declare it further on down in the code and this is totally fine for javascript and actually in the browser um so this is this is pretty absurd this is one of the reasons why like people say that they hate javascript and whatever and we have a bad reputation whatever um so in walk uh this has kind of been addressed with es6 and the the idea of of constant and let so constant and let are ways of assigning variables that are not hoisted they are actually even more than scoped within the function that you're in they're scoped within the block that you're in so if you're just in this um in this if statement you can have variables that are scoped within there that the outside part of the function will have no knowledge of um i would say that that this makes more sense like the more that i develop of wanting to control this kind of initially i was like everything can know about everything i don't care but this is really good for um kind of performance and things like that to scope things as closely to where you want to use it as possible and it sort of gives you more control and again like i mean your colleagues might not like you but if you want to use like var x equals this and var y equals that you can and you can use it all over um there's a really good arc um article about it by um the german dr axel rauschmeyer about this variables and scoping in es6 i would highly recommend checking it out so i guess the question is sort of after knowing these things what do we do with the knowledge of hoisting like does it actually change the way that we write our code uh and i'm really i'm not gonna touch this one this is like i think that this has been pretty well argued ever since constant and let came out of like which ones you should use but i do see a value in and declaring things as closely to where you're going to use them and i think part of my original intention here is what i learned about hoisting was hoisting constant and let give you block scoped variables and hoisting was basically trying to fake that the whole time so constant and let are basically solving the problem that's existed in javascript of we want to do this uh and we can't um so we use hoisting to sort of fake it so i'll probably be writing constant and let mostly but um so speaking of i i've used the word declare a lot um there's another question of like the what is the difference between a variable that is null undefined or undeclared um so we'll start with undeclared it is not simply a shortlived show on fox anybody ever see undeclared yeah um if you like freaks and geeks you might check out undeclared it's not as good but it's you know uh so undeclared is basically um when you try and use a variable that um that you've never sort of used before you've never written out var foo equals or const foo equals but you try and use it in some kind of manner um so that's a pretty simple concept of what is undeclared it's just you you forgot something somewhere or you ripped out some code in my case you ripped out some of your coworkers code and now it's not working so that's undeclared undefined is it's a little bit different undefined means that you've declared it but it doesn't have a value it has not been assigned a value so these are all up here at the top are all kind of examples of ways that you might get undefined so if you just declare a variable don't assign a value if you have an empty object or you try and grab something on an object and it's not there you'll see undefined same goes for like the index of an array if nothing is there or if you run a function and the function doesn't return anything um so that which is totally fine to do undefined is not it's not always undeclared is sort of something's gone wrong but undefined you could get for all kinds of reasons and it's not necessarily an indicator that something has gone wrong the cool thing is with constant is that you can only use constant whoa look at that sorry um you k you are forced with constant to assign a value to it whenever you declare it so that may change actually the way that you want to use things because in a lot of situations um i don't want to do that i want to create a variable and then have it change depending on situations so um but that that is kind of nice because you'll never sort of have the problem of a constant being undefined and then you have oh yeah i've got this whole list of important information oh it's also falsely which kind of plays into that it's not necessarily a an indicator of that something's wrong you can definitely use it if in some kind of logic condition if you're looking for falsies null is a little bit different and like it's kind of nuanced but null is a value it's just not a value you know null is actually the interpreted as having a value that value is null it's a nothing value it's a way of sort of creating a placeholder assignment um for something that would have maybe other values you see this all the time especially like if you're dealing with an api you um you might have something on an object that's that's returned from your api you might see the key there and the key's value is null and that's that's completely right and if you ever have a situation where you need to sort of zero out of value null is a great tool in order to do that because because the idea of zero as a number well that's actually a value or zero as a string well that's certainly a value so you can use null instead um yeah look through my notes here so finally what the question is if you um how do you go about checking for any of these states um well the first one is kind of easy undeclared will usually find you i say usually but it doesn't always find you because if you're trying to assign a value to a variable that hasn't been declared javascript will totally let you do that and it will go ahead and attach that value to the global scope which is really bad so essentially all that stuff that i talked about about not touching the global scope javascript will let you just do that if you leave off the the word var so be careful use a linter um that's what i would advise for there um and this is another one of the reasons why people hate javascript about whatever haters um now if you want to check for undefined this also kind of sucks um because if you check you can use type of it's really handy to check for like if it's a number or if it's a string or whatever um if you try and do use type of it will return undefined as a string which is like frustrating because all of a sudden we're dealing with like this information that is in a different type than what it actually is so you can't use type of this inequality checks because you've got this word undefined as a string undeclared variables will also return undefined if you try and type of them uh now i'm beginning to see why people hate javascript uh and if you um so the preferred method would be to use a triple equals to check if something is undefined um and not not not in a string by the way even though that doesn't make any sense because yeah anyway um so because if you look for undefined as a string and check it against undefined even though this is what the console spits out uh it will um fail so yes check for undefined with triple equals and the reserved word undefined with null type of null actually returns an object it will say that you have an object this is a bug in javascript this is a literal bug in javascript that they are not fixing because they have higher priorities and by they i mean me because it's a community like it's all falls on our all of our shoulders so but you can also use the triple equals with the reserved word null in order to check for null um and then finally like this triple equals thing is just it's always a great question but what is the difference between double equals and triple equals um and so here's an example foo is undefined bar is null and foo double equals bar is true yeah that makes sense um essentially the the what you have when you use double equals is a check for equality and javascript sees null and undefined as both sort of having no value and and says that those are equal even though they are not the same type of thing so triple equals is always going to check for equality and type and if anybody here has like done any sort of like recent learning i'm gonna everybody loves audience participation right how many people have been told always use triple equals no matter what you've been lied to been lied to people um the reason people tell you that is because they don't think you're smart enough to understand it and use it correctly but you can absolutely use this correctly and if if you know what you're doing and you want to use the double equals go ahead and use it and put a little comma above it for the rest of your developers to like not go in and change your pr or or be mad at you because you know what you're doing so um so that's pretty much it i'm gonna i'm gonna skip the event loop because it really deserves its own talk uh i just had it in there because i thought that um yeah never mind i knew i was not gonna have time for that but just in case um so anyway you guys since you're at this talk you were hired um hopefully you get a boss just as fun as kimmy schmidt's boss wherever you go to work um and there are a ton more of these up on html5 boilerplate i it was a fun exercise for me to just go through these and be like which of these can i not answer quickly and i cannot answer well um but i just want to sort of say at the end of this talk i i've been doing this for about five years and um now sort of like the senior guy on my team and everything else uh but it doesn't really it doesn't really account for a whole lot necessarily that you can answer these questions like super well my encouragement to anybody at this conference who's sort of like me feeling really overwhelmed and really like i just don't know how i'm going to actually apply this to my application coming the next day i just really encourage you to just keep moving forward building whatever it is that you're building just build good software i think a lot of times as developers we focus on the tools that we're using the best way to use those tools the most efficient way which i totally get and totally love to do but we lose sort of focus on like that we're here we're getting paid to deliver badass software and if we just focus on that then the tools we use in the decisions and the learning is going to come alongside that and happen as well we don't have to like learn all this stuff first and have all these perfect answers or even really know the perfect terminology for what it is that we're doing in order to make awesome software and i am a pretty good example of that because i won't say that i can make software without knowing whatever it is that i'm doing so um anyway that's uh that's the talk the slides are up uh on my website um if you want to have them and then i've got two minutes so i will take questions am i what my brotherinlaw is a pilot and i thought that um i mean that's admittedly a very douchey picture so i apologize but like the other one that i had was was me inside the head of a dinosaur that was my original picture and um yeah anyway i would love to be a pilot because i thought it was i thought it was awesome but uh other questions yeah now that you've talked about the questions when you are interviewing somebody because this is something you know the past few years balancing the importance of those types of interview questions versus you know other things such as is this person gonna fit for the team right you know you can answer all those questions every single question on that list that you put up on yeah i mean i think that that is like that's a really key piece is um understanding that the questions themselves are sort of arbitrary sometimes when you're trying to test and i understand the the desire to use them in order to kind of vet people and um but i think that maybe better questions to ask would be like how do you handle a situation where you've you've said that you would meet a sprint deadline and you realize that you're not going to meet that deadline what do you what do you do in that situation or what do you do when your designer comes to you and you've already had something scoped out and you are already two weeks into a sprint developing something and your designer wants more changes how do you handle that situation like kind of more i think what you can probably dig deep if you come up with sort of clever questions about how a person actually works is hopefully they're going to use the technical stuff in their answer and that's going to give you the vetting that you need so that would be my hope um i think that the thing about interview questions like that is that yeah i mean it's creating this adversarial situation i just did one recently like a last month and it was with my first initial interview was with two people that were on the dev team not with a hiring manager so i kind of immediately knew oh they're weeding me out here and then they had me do a code test and i was like oh man i got this no problem like if they put me up to a cotest it'll be no problem and i was like panicky i was like i ah you know um and that's really just not how it doesn't really mimic actual work behavior you'd never be in a situation that you would be up under the gun like that so it's not necessarily a good indicator but um yeah ryan was mentioning like a code um a code challenge that a prospective employer gave that was was a homework assignment and it was basically they gave you json and they gave you either an api endpoint or a blob of json and they were like just just make a ui out of this like that could be something really cool as long as it doesn't sort of take so much of the person's time that it wouldn't be worth it for them but which yeah i think that some of these questions hold a lot of value not in a fifth test uh scenario or context but in a debugging scenario where knowing what hoisting is right yeah that's a great point i'm all for bashing technical interviews right whether you get the answer right or wrong it doesn't really matter what matters is how did you get to that and if you did get it wrong did you just not know you know what to do period or you know is it just something that could have tripped up anybody and you handled the situation well totally um i think i'm officially out of time but i'd love to continue this conversation with anyone after the session so thanks everybody