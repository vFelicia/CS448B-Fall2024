hello here we are yay i have to say i'm so embarrassed that you all saw my dirty desktop over there i usually make a folder called desktop and put everything in it before i give a talk and show off my desktop but oh well didn't get a chance to do that today um yeah the algorithms of css i'm really excited to give this talk at jsla i think this is especially a talk that's great for javascript developers or people who are um you know maybe more on the side of javascript than css to hear um but uh like ryan said i did this talk at css comp eu in berlin um last month in june and it was very exciting really fun to be in berlin and so i'm giving this talk a version number so 1.5.2 is this version so there's some new stuff in here anyways um nice whiteboard so hello my name is laura shank and i've been in la for like a year and a half it's okay i'm from the east coast we'll see um this is my property on twitter rs126 very exciting and i am a frontend and wordpress developer scratch that out for design engineer because i just got a job i've been freelancing for a while and i got a job and the title is design engineer and i'm like okay like the front of developer works too but design engineer that sounds really cool job titles are weird um okay so my a little about my background so css has really been um kind of the language that i would relate to most for most of my development career um i started coding like eight years ago or so in college um i was an art major and i started learning to build wordpress sites as a way to make money and that kind of turned into a career that i really love but css and html in particular are these really accessible languages that you get really uh immediate results from like visual results so anybody with a visual background probably takes to them really quickly but there's this kind of weird bias in the industry where it's like oh it's not real programming like not real coding so i was like oh this is bizarre uh but it's not but it kind of is so i kind of went on this journey to learn computer science mainly because i got a pretty major whiteboarding interview and i was like oh god i have to learn to write algorithms now wow this is like sort of relevant to my daytoday work so i wanted to bridge this gap between css and computer science because as i started learning more computer science i was like this is so cool and fun and like css is kind of boring now because i don't have these uh programming challenges in the same way when i write css as i did when i was working on these algorithms algorithms and computer science studies and so throughout this process of connecting computer science and css css went from like oh god i'm writing instructions this is so boring to like whoa like css is unbelievable it is unbelievable what css does it's so cool that we don't have to do all of that and so i hope to in this talk um impart a little bit of that enthusiasm and encourage everybody to kind of peek under the hood a little bit and see what css is really doing okay so i started out my research with this question is css a programming language followed up with a fire emoji because that's definitely a hot topic or definitely elicits a lot of like like gut responses from people like yes no um so i asked this question on twitter and got a variety of responses so we have 42 yes it's a programming language 50 no and 8 i'm not sure this was really interesting because the yeses were like yes absolutely like yes css is a programming language and the nodes were like no i don't i don't i don't list it in my list of languages or like no i don't really see it as a programming language kind of more opinion based and i was like okay let's stop like what what's going on here why is there this weird discrepancy like such a polar discrepancy and so i was like what is a programming language it turns out a programming language the many definitions i've read and i did a good bit of research about this it's a language of instructions for a computer it's kind of paraphrasing wikipedia and others but there are a few really pointed good blog posts about what a programming language is and how we define a programming language in the world of computer science it's important for that definition to be really broad because programming is really a language of instructions for computer and how the how those instructions are formatted can vary greatly so that uh kind of brings us to programming paradigms how many of you out here are familiar with programming paradigms okay a few people yeah so these two words in particular should probably be familiarish but a programming paradigm is in general a category or a model for how programming how a programming language works or how a program is written so they're kind of big picture categories or paradigms so not necessarily super specific um so imperative is kind of a very big one and then declarative and that's those are like the two umbrella um the umbrella paradigm so you can kind of dig in between uh dig into each of those more either way so imperative is how so when we have an imperative programming language we're telling a computer how to do something and a declarative language tells a computer what to do and the main difference there is the presence of control flow in an imperative language and no control flow in a declarative language so what control flow means is you're kind of controlling the execution of statements the execution order of statements so in an imperative language a programs read top to bottom and you might be jumping all around in order to execute the execution order of statements and in a declarative language that execution and those logic that logic is more baked into individual commands so you might just say like do this and it's doing a whole bunch of things but you're really just giving it that one instruction so what kind of languages fall into these categories imperative languages are what we usually think of so javascript ruby c plus plus python et cetera and declarative languages are often domain specific um sql is a domain specific declarative language for databases html okay is the domain specific declarative programming language and of course our beloved css falls under this category all right there we go yeah i was like oh my god yes i did it like it proved it like okay it's so instructions for a computer like okay got it um obviously they're very like writing python and writing css are very different but i think they can be um there's a lot of interesting things that come from looking them at them under the same lens so css further is turing complete css plus html turing complete refers to the ability to simulate a turing machine which is the ability to compute a problem of a certain complexity and css and html can do that together css has math there's a calc function it has functions and variables and so it's like what's going on why isn't it a programming language so i would ask like why not um yeah there's a lot of differences and it is this domain specific language and domain specific languages in general are a really different topic um but why not the web is declarative in a lot of ways so we have a lot of power in um telling a computer what to do instead of how to do it like a lot of apis are written in declarative fashion so css is a domainspecific declarative programming language 100 okay it's a little bit of a mouthful and it's like well i got it i you got to include that declarative domain specific part otherwise it sounds weird um css developers program the layout of web pages uh more like boxes though so if we like dig into it it's like oh programmers of boxes like i like that um but then if you think about how a browser really works and it's like they kind of all become images after a while so give that a 100 and with that in mind um we're going to do browser internals in less than five minutes this is a new part of the talk i'm going to try to zip through it because it's important to have this background and this mental model for how a browser works how many how many people have um taken the time to really look into the inner workings of a browser okay a few people good yeah this like really changed the way i did everything it's kind of funny like you can write web write code and build websites and not necessarily understand how a browser works that's how like abstracted our tools are from what they actually work with from the domain so to speak so okay here's me on the computer obviously and there's a server obviously and when i use a computer i'm like okay server like typing in the browser give me data and server's like okay here is data great okay bye we're done um yeah so some words client server um http request and that response from a server is given in bytes and those are bytes of html css and javascript code um so if we go inside the browser we take those bytes and those bytes are parsed into tokens and so the if you kind of picture all these bytes which stand for certain letters and then the parser looks and grabs looks for certain combinations of characters and then assigns meaning to those characters in the form of tokens and as it's going through those tokens it's saying like oh is this html is this css is this javascript and it turns those into trees so we have the dom beloved dom and there's also css om which is the tree representation of styles and that information is then taken and turned into a different tree which is the render tree or the style rule tree and this rule tree is essentially a list of instructions for laying out a browser web page i am totally skipping javascript fyi in this description of a browser um algorithms of css come on so the that render tree is kind of a blueprint of instructions for laying out a web page and laying out all these boxes and the layout process in a browser if you've ever heard of reflow that refers to triggering this layout process it's like a recursive process for laying out all of these boxes based on the instructions in the render tree then all those boxes are painted and so they become images so it's kind of like a bunch of little images laid out on top of each other and then there's the composite step where there's a certain set of css properties that are applied after paint and everything is kind of composited into one big image which is then rendered onto the browser or rather rendered onto your computer so rendering yay so css is a domain specific language to program like this rendering process that's kind of how i like to look at it okay switching gears slightly two algorithms yay i like drawing these little monsters there's a couple of them in here okay so algorithms another definition a welldefined computational procedure that takes input and produces output has anybody read well if you've read it in its entirety that's amazing but thomas coreman has this introduction to algorithms book that's kind of the canonical textbook assigned in intro computer science classes but i recommend looking it up um it's a little dense but it's definitely a comprehensive overview of algorithms so if we take a that definition and put that in a little framework we've got inputs and we've got outputs input sorting sorting's a great use for algorithms so we've got an unsorted list output is going to be a sorted list what happens in the middle well let's hear who can name a sorting algorithm merge sort oh whoops bubble sorts first what was that one lazy sort oh that sounds like my kind of sorting algorithm select i'm not actually lazy everyone but selection sort bubble sort merge sort quick sort okay yeah these are all solutions to the sorting problem cool let's look at an implementation of bubble sort cool wow bubble sort in all its glory it's not so if for anybody who's not familiar bubble sort's kind of known as like a really slow sorting algorithm um but it's a good intro intro to algorithms kind of thing so this is imperative javascript it's imperative code so the computer is going to read this program and kind of jump around between statements there's a for loop so it's going to jump back up to execute certain code um look at heart because like we like javascript of course so if this was declarative code if i wanted to do declarative bubble sort all of this would be hidden somewhere and i would just say like bubble sort basically okay um let's look at another framework wow you think that's funny huh bubble sort so good okay let's have another algorithm input uh a tall stack of boxes ah see where this is going output a row of boxes what's in the middle display flex perhaps float to left gasp floats still have their place my friends um okay let's take a look at the implementation of display flex groundbreaking display wow that's a declarative css that's so cool i love it okay what so what's happening under the hood here like what is display flex i'll show you a very tiny piece of display flex in a moment um so this is the difference between kind of declarative code and imperative code declarative was what you see on the top and there's this whole like huge backing of imperative code underneath so for css that declarative part is the browser or rather uh the tip of the iceberg um and then underneath we have c plus plus or rust code so this is the source code of a browser and i spent a really long time looking through browser source code it's really fun actually especially after i had this all this kind of algorithms background knowledge i was like this is really addicting to take what i know really well css and map it to the browser and what's under the hood okay so this is a little bit of rust code from the source of servo which is the browser engine in firefox quantum um you can read this if you want to flex wrap maybe is my comment i'm not sure if this is actually flex rap but this is a little tiny snippet of the probably thousands of lines that make up what flexbox does and we don't have to write this that's pretty awesome imperative rust love it firefox okay so what like so okay yeah i know i knew there was some kind of browser code that was happening under the hood of css obviously so this is when like when i learned this and started thinking about this as i was reading css this is when css went from like oh god instruction's boring to like whoa what is this doing like there's so much computer science all over css and when you start to think about it it's like oh this is incredible i love it okay let's take a look at another algorithm does anybody know what this one might be the cascade who loves the cascade okay a couple people cool who strongly dislikes the cascade less people cool i like it i feel like the cascade gets a lot of flack because it can be a real gotcha for people starting to learn css and it's something very unique to the domain of css so let's look at the cascade as an algorithm because that's what it is an algorithm that combines property values from different sources so that's from mozilla developer network this is also the first thing that comes up when you google algorithms and css maybe my talk will come up now but this is really um a little background too because we're going to use some terms here in css the different components like kind of the grammar so to speak of css as a language um it's very specific name so selector is what you use what you're selecting in order to style so that could be your class or it could even be like a suitable element um a general selector and then we have property and value and those together are called a declaration and then the whole thing is called a rule or a rule set so i think it's important to use these terms really intentionally and that's what everything's referred to as in the source of a browser and in spec so it helps a lot to use those terms algorithm of the cascade value okay input we have our array of values that are collected from various areas output it's a sort essentially a sorted array of those values or not not an array per se but a sorted list of those values so the cascade takes these um values from different areas so if you have a paragraph that has a style from the browser and then a style from various areas it's going to combine them and then we have some steps in there and the steps are sorting by importance and origin specificity and the order specified cool you get a winner um not going to go on too much about that because you can read the spec and that's like going through algorithm step by step it's not that exciting so i was like okay i want to look at this in the browser like cascade magic this is what i expected to find i was like function cascade magic and guess what i found functioning cascade i was like wow so this is probably not the actual like the real cascade it's in there's many definitions of the cascade throughout the source code but i was like this is a fun slide cool um so where do where do you see this if you want to kind of peek under the hood and take a look into a browser searchfox.org has the source code of firefox um and then chromium.org cs chromium.org it's the open source uh rendering engine called blink which is a fork of webkit and that is written in c plus plus which i found a little more difficult to look around and it's also a much older code base so my process here was to kind of go back and forth between the spec of something and then see if i can find that implementation in the source code which is pretty cool and let's take a look at the cascade in the browser so in inspector and i'll go through this quickly so i'm sure we've probably used the inspector before our devtools so here are some declarations and some rule sets and we can see this one value is kind of the winning value so that's the one that's not crossed out links are a good example of this because a lot of times there's several styles that are applying to a link then we can also hit computed here so the computed tab will show us a little different view that's based on all the properties so rather than showing you the rule sets you can look at the computed view to see different property properties and values and that'll show us everything that is sorted here so this is kind of that other side of the spectrum that's sorted list in the output and also notice um this rgb value so the value that was defined in the style sheet was a hex code and this is showing us a computed value of rgb so one other step in rendering is that all of these values that we write a lot of the values in css that we write are for our purpose so like percentages or viewport units those are for us to read and the browser has to ultimately turn everything into pixels in rgb which is kind of interesting um we can also look at this browser styles checkbox here and that will kind of show us that indeed every property does have a value so it's kind of an interesting concept so you can always like reset properties back to their original values um okay so i wanna have a little story here of writing css this was a beautiful mockup that i got from an agency i was working with a little bit ago so it's like the mobile moc this is not this is a drawing of the mock obviously hopefully that was obvious but there's like there's this beautiful ocean on top and i was like okay cool like yeah we can split this up into two images it's like highres ocean thing and then the bottom one will be a a little transparent png but it'll be a png so it's a little smaller i was like okay this sounds great so i started writing it started writing the code coding up layout and i was like oh my god these are completely different aspect ratios so like oops so over here it's like oh they're totally different like this oh it's not working i'm having to do some weird annoying positioning stuff so i started writing css with a hammer which is what kind of the default is you're like keep trying things you're like oh my god just work like keep trying stuff over and over and over again and eventually it'll work right um time via probably you'll probably figure it out eventually and then the next person that has to read it it's gonna be like what is going on so that's i mean we do this with more languages than just css for sure but i would say no i was like no i'm not gonna write css with a hammer right now i'm doing all this research about algorithms and like css as a programming language why don't i like break down this problem into like an algorithm why not so i thought about this framework and i was like what are my inputs are these couple images in a device and outputs are my programmed images my programmed boxes sitting together perfectly so i was like okay what would that look like how do you write an algorithm i was like well i'm studying this damn whiteboarding interview and there's like a defined process for how to write algorithms in a whiteboarding interview so first you plan out your algorithm then you come up with a brute force solution and then you walk through it and then you optimize your solution so i was like what would this look like if i was applying this process to css so i started by planning it out so think about how i want these boxes to respond at each device size and it's so important to like bacon responsive design um from the getgo like as soon as you start writing css be resizing your browser all the time um and then you know map it out a little bit so the more i've started thinking about css like this the more i like use pen and paper and map out some values i'm thinking about it algorithmically a bit more and i would write some uh pseudo code pseudo code css sure and this eventually can kind of become my styles and i change it a bunch but then brute force solution aka spaghetti yeah that's fine like we're allowed to write bad code that's okay so am i brute force css um smelly css what are some qualities of brute force css part of a system no definitely not magic numbers absolutely do i have a bunch of hardcoded pixel values for sure to do comments everywhere also absolutely does it work maybe a little bit cool like it's just your time to look play around figure out what you're looking for try to get to work um and my walkthrough step so it's like resizing the browser all the time i'm sure a lot of us do this and it's like i'm not sure if users do that but i do so it's gotta work um and then optimization so our optimize step which also includes refactoring so kind of over and over and over again wow you like that over there laughing okay so we take our smelly css and transform it into a beautiful flower of course that's how code optimization works right um what are some qualities of optimized css part of a system yes so um how many of you work within a design system or some kind of component architecture okay that's a good number of hands um i personally when i've done this i find it so hard to write to like write new css with that architecture in mind so my strategy now is kind of like write the crap css get it working and then be like okay how can i incorporate this into my system um what change do i need to add a new component or new whatever but get it working first then think about all this stuff does it use algorithms so does it use algorithms like flexbox grid css grid has a ton of amazing algorithms um intentional cascade so the cascade can be some pretty incredible like baked in declarative logic and especially in terms of browser support so try to embrace that to do comments probably some of them still but get rid of a lot of them okay and i'll do this slide just to kind of show some of my favorite optimized css things so custom properties plus the var function i would love to do another talk about that game changer with css custom properties amazing um per component grid layouts css grid if you haven't spent you know an hour something go to css grid garden and do the exercises it's amazing so fun um calc math is great uh flexbox yay transforms and positioning transforms are incredibly performant properties to animate they're great viewport height width um aspect ratios less media queries yay hearts for everything okay yellow light i want to show some couple algorithms here as we're finishing out this is the algorithm for my wonderful ocean so i'm not sure everybody can see this this may or may not have a pointer oh yay okay so setting some custom properties at the top so like setting up some values some pretty cool css grid stuff going on this property is going to be adjusted in a media query that is not present on the slide um etc so very intentional code that kind of took a while to finetune um this is some centering code here so the oldest trick in the book for centering is kind of center and then do use a transform to go up fifty percent um which is what this push value would be um another photoshop i'm gonna these slides will be posted later uh magic maybe okay and then my favorite algorithm fizzbuzz in css no problem absolutely okay cool so back to the kind of higher level thinking here of what we can do with algorithms in css and like algorithmic thinking about css um i think this can really help to smooth out that design uh design to development workflow and can be a conversation starter between designers so if we have our wonderful designer and developer here of course unfortunately this process is not all puppies and kittens but we can pretend it is here talk about algorithms together yay or maybe you have a designer slash developer you can talk about algorithms with yourself kind of help help smooth smooth things out a little bit it can be a nice conversation piece so inputs um inputs are your design so are your designs mockups sure is it on a napkin maybe that's cool that's an input um is it a little mockup of a component also an input and the output is going to be your rendered code so responsible and responsive on all device sizes and what's the algorithm in there so design systems and component libraries like absolutely at a high level the combination of different components can be thought of as algorithms um your css so any css you write yes okay yeah this guy might be my favorite it's cute okay conclusion um let's try this i don't know maybe not write css with a hammer as much but i found when i started thinking about css as like as programming i was like okay i'm gonna approach these problems with the white board a little more like spend ten minutes and like draw out the widths and heights of things and see if you can kind of come up with a more thought out solution rather than that uh spur of the moment like just banging out instructions um and also look at the biggest takeaway of this whole process is like the code we write and supplies across the board especially in the javascript land of frameworks like the code rewrite is oftentimes kind of the tip of the iceberg and our uh kind of mission as developers i think is to fill in like the bottom part with what we're learning so kind of figure out learn inch by inch what makes our code work um i also had this idea for a cool uh really annoying app called the mindful css bell so it can go off like every 30 minutes and be like read the spec like do you actually know what this is doing read the spec this is cool doesn't that sound like a great app that definitely is up for javascript too any programming language um so at the end of the day did i bridge this gap between css and computer science well kind of figured out it's more like a big grassy area of little pools so they're all part of one thing so css c plus plus html javascript computer science is a very broad spectrum that this is all part of i also want to just mention this talk uh quickly by someone named felian who did a talk called what is programming anyway and she talks about her journey as a computer scientist she was researching domain specific languages and like what is programming and there's this notion of like that's not real programming and that's a a weird thing in the tech community to have someone who's like really excited about something to be turned away by their community um so i think that's just something to keep in mind and like maybe um like math and engineering aren't the only metaphors in ways we can talk about what we do so she in this talk talks about how programming is writing and reads is writing as a metaphor for writing programs which i think is really beautiful and she also draws her slides and i was like what so other people do this this is great so above all like why not so i don't know like css it's great another little monster and thank you all so much you