cling code clean code is code that's readable reusable and refactorable and i'm going to be talking about how to write clean code in javascript specifically this is about functions this is part one of my clean code functions the first thing to consider when writing functions is the function arguments ideally there should be two or fewer arguments so instead of having this function with one two three four arguments we're going to pull the arguments into an object we're going to put and then we're just going to call the menu with just the one argument the next thing is that functions should do only one thing you can see in this function is function email clients it's sending the clients in and for each client it's a setting um the client record equals database.lookup client and then if client record is active it's going to email client so it's actually doing two things it's checking if the client is active and then it's emailing the client so a better way would be to change this into two functions so now we have the function email client and it's going to only email the client it's going to filter it by its client active and that's going to call this other function is client active where this is going to look up the client and it's going to return if it's active so now instead of doing two things each there's two functions that each do one thing next up is that function name should say what they do so look at this function function add the date we're passing in a date and we're gonna pass in a month so why are we passing in the month what what exactly are we adding if you if you call this add to date date one it's not exactly clear what's happening so we're going to change this to add month to date and then we're going to put the month first but the date second and so we're going to add the first month to the date and now it's more obvious that we're adding the month to date instead of just add today add month to date so it's more clear what the function is doing the next thing is that function should only be one level of abstraction this kind of goes along with functions should only do one thing so let me put in a function here and when you do split up functions it leads to reusable and easier testing so let's look at this function we've got parts better json alternative and now this is a pretty long function code we're passing the code we have the red regexes we have statements equals code.split splitting at the space and we have tokens empty array then for each regex we're going to call this function for um each of the statements we have the cons ast empty array tokens for each token uh s dot par s dot for each node and we're going to actually just try to break this up into a few different things we're going to try to separate this into a few sep a few different things we're going to separate this token section from from the ast section and let me just paste that in there and then we can talk about it okay so here's here's the original and here's um where it's broken up a little more where so we're going to end with the parts better json alternatives now that's the the same as um what the original function was called but now instead of doing all these things in one function we're pushing out some of the things so const tokens equals tokenize code const ast equals lexir tokens and then that for each node and we're going to parse each one so first we're just going to um get the tokens tokens tokenize so if you go up and tokenize so we're gonna we're gonna take this this is basically just the the first um step of some of the things up there and then we're going to take the do the get the a return the ast down here so we're just breaking that up a little bit to make it more readable and also so it's only one lit later of abstraction for each function so let's go to this next one remove duplicate code duplicate code is bad because there's that means there's more than one place to change something if you need to change some logic so if you only have code in one spot then you only have to change it in one spot if something needs to be changed so here's an example of two functions functions show developer list developers developer for each developer con's expected salary equals developer.calculated expected salary cons experience equals developer.experience.cons github link equals developer.github link but if you look down here um function show manager list managers managers. for each manager contact expected salary equals management calculate expected salary contact experience equals managed get experience accounts portfolio so the only thing different between these two functions is one is called developer one is called manager and the developer has a github link and the manager has a portfolio and then the data up here equals it has the github link and the data down here is the portfolio but the expected salary and experience are the same the expected salary and experience are the same so it's almost exactly the same this is a perfect example of something that you should be able to break down so you don't have the duplicate duplicate code so what we're going to do is we're going to completely remove this second function i want to update this first one so it's it can apply to both developers and managers so we're going to change this just show list instead of passing a developer we're going to pass in an employee and change this all at one time i just did um command d after changing my settings so it used um sublime text key mappings now the github link is things that's going to be different so github link is still considered kind of a portfolio for for developers so we're going to call that portfolio but here's where we're going to make it a little different we're going to do the employ.github blank but then down here if we find out as a manager then we're going to get mba projects and since we're going to be possibly changing this we're going to instead of const we're going to put let here because let allows you to change and const does not and if there is no in github link up here this is just going to be either null so then you can actually get the mba projects down here now for the const data we're just going to change this to portfolio and now we've just combined those two functions into one function last up is don't use flags as function parameters flags tell your user that the function does more than one thing functions should just do one thing so you can split your functions if they're following different code paths based on a boolean for example if you have this function create file we have the name and temp if temp um function fs.create and you're going to create this else fs.create name so it's based on what this boolean is or what this flag is instead of doing like this we can take off this temp here and just if we need to create the file we can do that and we're not going to have an else we're just going to have another function so so if you need to create the temp file then you just call a different function there instead of just one function that you use a boolean or a flag to figure out what you're going to do just create two functions and you just call a different function depending on what you want to do well that's it for part one of functions if you check the description you can see a link to what inspired this video don't forget to subscribe and remember use your code for good