improve your Python and Pie game skills by building the classic pong game but with some new features Rohan created this course and it's a great project for beginners you will learn how Pi game can be leveraged to create engaging games with Unique Mechanics let's get started welcome to the Spy game ponkos this is where we modify the traditional pong game by adding in multiple new features such as increasing the movement speed at times all the way up to cloning the objects to confuse the opponent I am a content creator at snds we make videos about machine learning data science and some general programming videos in Python and pygame like this now I do want to mention that this course is for those who have intermediate knowledge of code so if you're able to understand the looping structures such as a y Loop and the for Loop and if you can understand the conditional statements such as the if alif and else then you should be good to watch this video but with that said if you're a complete beginner then you can still watch this video and see what you can write out of it now I will be using visual studio code as my code editor also make sure to install the pi game audio onto your computer I'm not going to go onto that because there's just kind of tutorials out there on how to install the buy game module so I'm just going to presume that you already have it installed now with all that said let's get into the video let's take a quick minute to tell you what Wayne will be covering in this course we will start with going by building the metrics of the original on game where we first create a window and then draw the required objects that is the ball and the paddles and then we will Define the movements for these and then the collisions such as the ball colliding with boundaries or the ball colliding with the paddles after this we will be building our first kind of new element which I'm going to name this as creative angles you will get to know about this in detail when you get to that part of the video then we will be creating two comprehensive brand new elements which I'm going to refer to as Gadget pair 1 and Gadget pair two the first pair will comprise of the smashed element which will smash the ball back onto the opponent and the Flash element which will teleport the paddle up or down to a specific distance and the second pair will comprise of the ball cloning and the paddle cloning which as the name suggests or creates a throne of the respective and then finally we will be adding in the scoreboard on the window followed by the end screen or the winning screen all right let's start with importing Pi game first import buy game and then I'm just going to go ahead and type pie game dot init you will have to initialize the module first before you do anything and now I will Define the width and the height of our window actually a thousand pixels comma 600 pixels and I will Define this inside the initial section and then to create a blank window which I'm going to call as WN you will need to type in pi game Dot display dot set underscore mode and inside this you will have to kind of given a single element which contains the dimensions so I will Define another Tuple inside this and then type in the width command height like that so what this does is it creates a blank IDM window with a width has thousand pixels and the height has 600 pixels so when you talk about the pi game window in particular let's say that this is a dummy window for our pygen window the initial position is always going to be here so this position will be called as 0 comma zero but then as we progress towards the right the xaxis is going to increase and then when you progress towards the downside the yaxis is going to increase so this position will be the maximum in terms of the y coordinate so when you go towards the right this is going to be thousand comma zero because this is the maximum point of the xaxis and as you go down this will be zero comma 600 and then as you move towards the right this is going to be the maximum point that is 1000 comma 600. this is really useful when we want to define the positions of the objects that we want to draw on the screen and also the scoreboard on the top and left hand side and on the top right hand side as well now what I will do is create a main game Loop this is where all of our animations the visual effects and the Motion Graphics will be happening and they will be happening constantly to the updated latest statements so to do this I will Define a while loop and rather than keeping this as true like this I will Define a variable known as one and then make this true and give it over here so that if at some point we want to break out of the game or just toaster but no we can just simply make one as false so inside this main game Loop what I will be doing first is I will type in for I in High game dot event dot get so the way I like to explain this statement is whatever you do inside a pi game window let's say you're trying to press the quit button to exit the window Pi game will identify this Spy game will know that you have pressed the quit button but then it won't know what to do after that so what it does is let's say if the user has pressed the quit button then iGame will store this in pygame.event and what we're doing here is getting all of those events one by one and storing Sni like for example not only the quit button let's say the user is trying to press the up Arrow key to move the paddle up or the down arrow key to move the pedal down all of them all of the events are stored in eigen events and we're getting them one by one and storing it in I so that we can check for a particular event and take specific actions accordingly like for example when the user press the quit button then we will have to instruct the code to just close the window and break out of the loop or another example is just let's say if the user presses the up Arrow key then we have to make sure that we instruct the code to just move the paddle up when the up Arrow key is pressed I will check in for the quit type so if I DOT type is equal to equal to Pi game not quit this will check for if the user has pressed the quit button and it will return true if they have pressed the quit button and if this returns true then we can simply make run as false now before running this program let me just create another section and call this main Loop now let's run our code and see here you see a blank buy game and now it says High game window and then when you try to close the window it closes nice also there is one more thing that I want to mention is that you see here that it says eigen window you can just change this to whatever you want by just typing in pi game dot display dot set underscore caption and inside this you can type in whatever you want I will type in wrong but that's it like that now when you run this code you see there is pong but better over here nice now let's get started with drawing the objects and to draw anything inside the pi game window it will generally use the statement known as High game dots draw and then the shape that you want to draw in our case first we will draw the ball which will be Circle and inside this first you will have to mention where are you going to draw the circle which will be the window and then you will have to mention the color which will be blue for my case and then you will have to mention the dimensions or the positions of where you want to draw the ball which we will Define later I'm just going to call it ball X and well why and then we will also have to mention the radius so we will have to Define all of this so what I will do is create a color section in fact let me just do this right around here colors and first Define the blue color which will be in the RGB format which is going to be 0 comma 0 comma two five like that now I will Define another section for the ball and this will contain first radius which will be 15 pixels and then the balls x coordinate which will be the entire width by 2 minus the radius and similarly for the height right by two minus the radius like that the reason why I'm doing this is actually when you type in width by 2 the ball's radius or the center of the ball is just going to be placed towards the right rather than the center of the screen so when you type in y radius what you see is the ball will be placed at the exact center like we wanted to and similarly for the height as well so this way we keep the ball at the exact center which is what we want to achieve now when you run this code you should be able to see a ball and we don't so why do you think this is happening well because this statement is given to the buy game window but then it is not being executed because this is not updated to the latest statements so to do this what I will do is to type in iGame Dot display dot update so this way the game is updated the latest statements and it is being visually available as well so now when you run this code you will be able to see the ball nice and then similarly for the paddles we will type in pi game dot draw Dot backed and inside this we will have to mention where do we want to draw this rectangle which will be the window and then the color which will be red and then rather than just giving in the dimensions like we did for the circle we will have to type in a statement as Pi game Dot rect and then we will have to mention the position in terms of the x coordinate and then the what coordinate followed by the paddle's width and the battle side so for the positions we will have to do it two times one for the left and one for the right the battles X and then left hand side battles white coordinate and Then followed by the battle width which will be same for both Commander pedals height I will copy the statement and then paste it over here and then change this to right like that now we will have to Define each and every single thing so let's do this first I'm just going to define a section for the paddles which will ever call as paddles dimensions and inside this first let me just Define the paddle's width and the height which will be the same for both paddle bit manifold height I will call this 320 and 120. and then in terms of the y coordinate both the battles are just going to be same so first I will Define titles y coordinate left paddles why which will be equal to right spell why which will be the entire height weight so minus the battle height 2. like that and that thought for the paddles x coordinate but the left will be and I will also Define simultaneously white as well for the left hand side it's just going to be 100 minus the paddles width by two and then but for the white will be the entire width minus this same so I'm just going to copy this and then put this inside parenthesis like this and I will also have to define the red color which will be in the RGB format once again so 255 comma zero comma zero like that now we should be able to see two paddles on the screen along with the ball we do nice okay let's get started with the movements and as I did before I'm just going to start with the ball and the way I'm going to go with this is by creating a variable known as false velocity in terms of the exponent as well as for the y coordinate like that and then keep them to be one pixel comma one pixel so what I'm going to do here is add this velocity constantly to the original position of the ball so that the position continuously changes because we're going to put that inside the main gate Loop and to dehumanize this will appear as still the ball is moving so hopefully that makes sense when you look at the color when you look at the output it will make much more sense so let me just create the movement section and before that it will put this one into objects what's this one and also I have made this so that you can read the entire code like this rather than having them like this I will keep them like yeah so what I will do now is just add in the velocity to the original balls position so balls X will be um velocity X similarly dot by the Y as well now we haven't defined the bounces or the collisions itself but then I want to see if the ball is making some sort of a movement on the screen so let's just run a currency okay so first we see that the ball is moving but then it's leaving trails rather than just moving its original position so this can be simply corrected with a single line of code which I will explain in a second but first let me just type out whatever I want to whenever Phil enable and then the black color you find the black it's big zero or flat zero of green and zero of blue like that all right so here we add the initial positions of the object and we have also written down the statements that be used to update the positions of the ball so we expect the ball to kind of move like this because we're updating the positions and this updated position is used by the pygen draw statement so that it draws onto the screen in the new positions well it's mostly true in this case but it's mostly correct but there's just one catch here that is each time the new position is updated and each time pygen.raw statement draws on the window the new positions it doesn't erase the already existing position so what happens is this we see that the ball is being drawn onto the screen on top of the already existing wall position so is it a humanized this appearances so the ball is leading Trails so the way we correct this is by using the window.fill statement what this does is each time after we start the loop or end the loop we just fill the window with the black color and then draw the positions once again so that the already existing positions are preraced and the ball's new position is being drawn onto the screen and this appears as so the ball is moving to the human eyes so let's have a look at that what you see around here is the already existing position is being erased in the new position is being drawn each and every single time the loop is running now when we run this code we should not be seeing the ball leaving trails and yeah if the ball moves and it goes up the screen so what I'm going to do next is Define the bounces as to that if the ball hits the top boundary or the bottom boundary then we have to make sure that the ball is bouncing and then moving so just recall that the top boundary right here y position over here is going to be zero and then over here it is going to be 600. so first let me just reduce the velocity a little bit to make it 0.7 and then 0.7 over here and now let's define a section named balls movement controls like that and then inside this I will use conditions to check if the ball is trying to go off the screen from the top side or the bottom side so if the balls like one is less than error equal to zero plus the radius because we're checking if the ball's end point is trying to touch the top boundary rather than the center so that's why we add in the radius like this and then similarly for the y coordinate in terms of the height so if volts white coordinate is greater than or equal to the entire height of the window this time minus the radius because again we're checking it for the end point rather than the enter if any of these conditions is true then we just basically reverse the direction of the fall in terms of the y coordinate alone like this so This Way the balls white coordinate Direction it's just changed but the magnitude stays the same so when you run this code we see that the ball bounces and it goes off the screen which is actually what we want so what I'm going to do next is to check if the ball is going offset the screen on the right hand side or the left hand side and if it does then we will have to reset the game and this time layer 2 will get the serve so this time we will have to manipulate using the xaxis so let's just stack for if the balls x coordinate is greater than or equal to the entire width minus the radius again similar reasons then we will have to retrieve the initial positions I will copy this and then paste it here and just change the world's velocity the reverse Direction and do the same for y as well like that so this time if the ball tries to go off of the screen then it resets to the center and then this time layer 2 will get the serve and if the similar thing happens to the lefthand side player which is if voltex is lesser than or equal to zero which is the initial position plus the radius then again we will have to retrieve the initial position as well as that would initial velocity as well so I'm just going to copy this and paste it here now when you run this code we see that the ball is going to bounce and go off the screen similar thing happens here and then this goes on forever nice now let's start to make the paddles move based on the user's given input so first let me just Define the part of velocity right pedal below and then left parallel which will be zero as of now and then first I will check for the user's inputs so lfi DOT type is equal to High game dot key down this signifies to check if any of the keys on the keyboard is being pressed and it will return true based on that if it does then we will have to check what key is it so we will type in I dot key will be highgram dot k underscore up this is kind of a notation to signify you to check if the up Arrow key is being pressed and if it is then white battle velocity has to go up so we will make it to be negative 0.9 so this way we're subtracting the y coordinate position from the paddle so that it goes up like this and then we will do that similarly for the down arrow key as well High game okay underscore down again kind of a notation to signify the down arrow key is being pressed or not and if it is then right paddle velocity will be 0.9 this time we are increasing the y coordinate so that the paddle goes down similarly we will do that for the left hand side as well if I dot key equal to equal to and I will use the wasd controls because that is kind of standard annotation for the left hand side to Pi gan node K underscore W to check if the battle is trying to go up and if it is then left battle velocity will be negative 0.9 and then similarly we will check if idle key yes buy game dot k underscore a actually s works then we can make left hand side velocity to be 0.9 like that now I will add this to the movements y less equal to right pedal velocity and then similarly left file y Plus left battle velocity now when actually there's one more thing that I had to do to check if normal keys are being pressed we can check rather than using alif we will use if I DOT type is equal to equal to High Gain or key up which checks if normal further keys are being pressed or the already pressed key has been taken off if that's the case then we can make Auto velocity to be zero again velocity will be zero and then we will do that or a y coordinate so lefthand side battle as well now when you run this code you should be able to move both the paddles with the proper control so it moves nice and then this as well excellent now before getting to collisions I just want to make sure that the paddle doesn't go off the screen like this so to do this let's just create a section known as paddles movement controls and over here what I will do is first I will check if the paddle is trying to go beyond the boundaries so first let's type in for the left hand side adult if it's greater than or equal to the entire height minus the paddle height then we just keep it there equal to the entire height minus the battle height and similarly if it tries to go beyond the boundaries in terms of the y coordinate at the top side if left hand side paddle y is less than or equal to zero let me just keep it there that's battle y will be zero now we will do this for the right hand side by just copy pasting this Ctrl Z paste this here and then change this to right now let's run our currency and we see that the paddle is not going off the screen which is exactly what we wanted to happen over here as well nice now let's get to the collisions so the idea here is just very simple if the ball's position is somewhere within the range of the paddle's position in terms of the x coordinate and in terms of the y coordinate then we just have to make sure that the ball's Direction reverses only in the terms of the x coordinate again here we are in the initial positions and the first thing that I want to show you is whenever you type in left battle X or white battle X whenever you want the first initial positions of the battle it is always going to be on the top left hand side which is indicated by the small yellow circle when you actually want to access the initial position to the right paddle you just type in right paddle X and here as well the small yellow circle is indicating that so what we want is the Collision to happen on this face of the paddle that is on the right hand side face of the lefthand side paddle so what we have to do is also adding the paddle bit so that the position is now on to the phase where we want whereas when you get to White's battle we don't actually need to do that let me just show you here we see that the collisions has to happen on the left phase of this battle so we don't need to add in the paddle width whereas we do then the cursor is going to move towards the right hand side which is not actually what we want first I just want to cut this and paste it above movements paste it here and then Define collisions over here now let's just start by checking if the ball's X position is within the range of the battle's X position this shouldn't be greater than or equal to left battle X but then it should be less than or equal to the left battle X Plus the actual paddle of it like that then we will also have to make sure that the ball's y position is also on the range of the paddles y so let's add a y should be less than or equal to balls y which should be less than or equal to plus the battle type I did not and what we will do is first we will keep the ball at The Retreat phase or the edge of the paddle itself and then reverse the direction so balls X will be left battle X Mr battle whipped and then we reverse the direction in turn to the x button into equal to negative one we will do that for the right hand side battle as well but before that let me just run our code and see if the Collision is actually working for the left hand side it does nice so we just have to do that for the right hand side battle as well we will do that I'll just copy this and paste it here then change this to right first and then we won't need this anymore because we're just keeping it at the left face of the right hand side battle so we just keep it as it is and then reverse the direction now when you run our code and see we see that both the paddles are making collisions properly and we have Reflections nice so this is creative angles so so far we've kept the Velocity in terms of x to be equal to Velocity Y and we would always end up with the direction like this each and every single time the game resets and this is indicated by this green line so the ball would make a movement Direction like this and then it resets to the center now this time let's say I'm going to add in another statement let's say I'm going to keep velocity in terms of x to be in two times the velocity Y and then we would get an angle like this so the ball would move in this direction now again I will add in another statement and this time I will keep velocity y to mean two times velocity X and we will end up with an angle like this which is again indicated by this green line now the ball would make the movement like this and what I'm going to do is also do this for the top side as well so that in total we get six angles and then provide the machine the choice to choose first the ball should move on the top side or should it move on the bottom side and then change the respective angle of the three choices that is provided so let's take a look at the code implementation okay so now we will have to import random import condom and then I will create two new variables one for the direction at which the ball should move we will randomize that with zero and one zero signifying top and one is going to signify a button we will do that for the angle as well I will have three different angles zero will stand for y being 2 times of X and one where X and Y are the same and two where X is two times of Y now we will scroll down all the way to where we reset the game so right around here after retrieving the initial positions of the ball we will now have to randomize where the ball will move either the top side or the bottom side so first let's create a variable inside this and use the random Choice option to get a random choice of the direction and similarly we will do that for angle as well random.choice of angle like that now I will first check for the direction if Direction equal to zero that means that the ball will have to move top side so we have to keep the Velocity in terms of y coordinate to be negative but first I will also check for the angle if angle equals a zero then that means Y is going to be 2 times of x so ball velocity y current of all velocity X will be negative 1.4 comma 0.7 followed by if angle equal to one then we can have both of them to be same well velocity X will be negative 0.7 comma 0.7 like that and if the angle is equal to 2 then ball velocity y comma ball velocity X will be of the software negative 0.7 comma 1.4 like that now I will copy this and do that for the downward direction as well where Direction equals one I will paste it right around here I'm going to make direction to be one and then take off all of the negative signs like that and now since we randomized the direction in terms of top side or bottom side we won't need this a more whereas we will have to have ball velocity X cleaned it off and for the right hand side if the ball goes out of bounds from the left hand side so the ball has to move towards the right hand side so we can just copy this once again right round from here all the way down here Ctrl Z then I will paste it here and we don't need to have in this statement because we want the bulbs directly to move towards the right hand side rather than changing the direction towards the left so now when we run our code we should get three different creative angles each time the ball is reset so we run our currency let me see the first angle we see the second one and we see the third really nice I just want to show you the prompts of how the new element that we're trying to add into the game should look like it says active which means that it has to be manually activated by the user and it says once activated the next condition of the ball onto the paddle should reflect the ball back at 3.5 times the original speed as a surprise to the opponent this means that this is kind of a smash element and this has to be activated manually by the user this will be the logic that we will be implementing for the gadget so let's say that this is a given position and as soon as the pole comes to the bottom boundary we just use the statement to reflect the Bolt's Direction and it moves up so what happens here is the ball approaches towards the battle and as soon as it comes in contact with the paddle we other than just multiplying it with negative one we multiply it with negative 3.5 this way this negative sign ensures that the ball is reflected back but then this 3.5 ensures that the ball is moving very fast and it's a price the openness so that will be the logic that we will be working on for this gadget let's see how it works so for the gadgets first I will move outside the main game Loop and create a section for the gadgets like that also make sure to have some space here and over here what we can do is first I will create the activation variable to check if the gadget is being activated or not so left underscore Gadget will be equal to right underscore Gadget which by default is turned off if the gadget is turned on then this will become one for the respectives now I will create a variable for the maximum amount of gadgets so that will be left Gadget remaining which will be equal to the right Gadget remaining which will be 5 or my case you can have how much ever maximum Gadget as you wish now we will have to trigger the activation as an if a button is pressed then we will have to make sure that the gadget is being activated so to do this first it will go to I dot key faction over here first I will do for the arrows area if I dot key equals or equal to Pi game dot right that is the right arrow key and we will also have to make sure that the gadget remaining is greater than zero right the adjective remaining should be greater than zero then we can have the right Gadget to be activated equal to one like that and I will move down or the left hand side paddle if I dot key is equal to High game dot KD that is a right arrow for the asdw keys then and also I have to make sure that enough scattered remaining is greater than one left yard remaining is greater than zero then we can make the left schedule to be one that is the activated case equals one like that now I will scroll down and create a new section right around here Gadgets in action so we will first Define what the gadgets have to do it's just the same thing if the ball is within the range of the battle then rather than just reversing the direction alone we will reverse the direction in 3.5 times the original speed so I will copy this and first check if left Gadget is activated or not if left Gadget is equal to one then I will paste this and then rather than having this as negative one I will have this to be negative 3.5 and now I will make the left Gadget to be zero and also left Gadget remaining minus equals one because we have to negate one each time our Gadget is being used so now we will do that for the right hand side Gadget as well if right Gadget and just scroll down a little bit equal to one and then we can copy this and paste it right around here like that and have this to be negative 3.5 followed by right Gadget making it to be zero once again and we're doing this to make sure that once the reflection has happened once the bowl has been returned in 3.5 times the original speed the gadget is no longer effective they will have to activate it once again to make the same movement once again so rights Gadget remaining will again be negative equals one we will have to negate one so that the number of remaining gadgets is reduced each and every time they use the gadgets so now let's run our code and see if the gadget is working this is the original reflection speed now I've activated the gadget and it does really nice also the prompt says that as a slight indication to the opponent once the gadget is activated there should be a small circle inside the battle so to do this it's just very very simple we will go down to the objects section and over here let me just do this and check if left Gadget is first activated or not left Gadget equals one then we will have to draw something else I N Dot Raw but Circle and window white color we haven't defined white we will do that and then we will have to keep the ball within the rectangle that we created so we will do that by typing in left battle X plus 10 and similarly in terms of Y as well left Arrow y plus 10 like that followed by the radius it's just radius is going to be let's say four it has to be a small circle and we will do that for the right hand side paddle as well if right Gadget is activated that means it should be one then Pi game dot draw in fact let's just copy this control Z paste it here and then change this to be right battle X and over here as well like that now we had to define the white colors I'm just going to go into the colors section and over here I will Define for white white will be 255 comma two five five comma two five five we will now run our currency if a slight indication circle is being drawn onto the paddle if the gadget is activated and we do we do for the right hand side battle now I'll do this for the left hand side as well yep it does work and once the Collision happens it goes off nice so the prompt for the flash Gadget says that active which again means that has to be manually activated by the user and it says immediately after activation the pattern should teleport itself towards the ball's current position in terms of the y coordinate the logic for the flash element is just very very simple let's take this for example the ball is approaching downwards as well as the battle but in some case if the battle is unable to reach the ball and if the gadget if the splash Gadget is being activated then we simply use this statement that is we just change the battle's y coordinate to Bear the balls while coordinate is and the battle teleports itself to the balls but what in it like this so let's take a look at the code implementation and see if this works now for the second Gadget we will check for the input from the user first Right Round Here if I dot key equal to highgame dot left this time okay left the left Arrow key and also make sure that right Gadget remaining is greater than zero then we make white Gadget 72. which signifies for the second Gadget we will do that over here as well if idle key equal to highgame dot a okay and let's go a like that and we will also have to make sure that the left Gadget remaining is greater than zero Omega bar then left Gadget will be two in this case now we will go down to the gadgets and action section and over here we will check if left Gadget two then we just make the left battle y that is the position of the paddle in terms of the y coordinate to be the ball's y coordinate itself like that and now we will have to make the left Gadget to be zero and also subtract a number from the number of gadgets remaining we will do that for the right hand side paddle as well if right we won't use Alice Alice right Gadget equal to two then make white paddle y to be equal to the both y coordinate like that make right Gadget to be zero and also subtract a number from the number of gadgets remaining like that let's run a code and see if the other Gadget is working as well when we press the left Arrow key and it does really nice we will do that for the left hand side paddle as well and it works beautifully now when you look at the prompt for the cloning Gadget you see that it's active and once activated the next Collision of the ball onto the paddle should clunk the ball to confuse the opponent one being original and the other one being duplicate this is going to be the logic that we will be putting into this gadget so if we take a look back we have defined the reflection physics for the ball we have also defined the condition physics for the wall and we've also made sure that the movements are working properly so what I'm going to do is just draw another Circle for the entire game and then put this on top of the ball such that it's just hidden behind it and I'm going to put each and every single metric the reflection the collisions and the movements exactly to be the same as for the original ball so that when the gadget is actually put into action let's say that the ball is moving in this direction so both the circles it's just simultaneously going to move in this direction and right as it approaches the paddle let's say in this direction it just does this both goes in different direction in terms of the y coordinate this is just by changing the dummy balls Direction in terms of the y coordinate and then they both Go in different directions one is going to be original and the other one is going to be duplicate meaning that the meaning that if the original ball comes in contact with the other paddle then the reflections happen normally whereas if the player 2 is confused and goes for the zombie ball then it will do nothing and then the game resets giving player one the point that's the whole point having this gadget let's take a look at the code implementation of how this works so we will have to make changes to all of the sections that is on your screen and we will start with from the balls section I'm just going to copy this and then paste it here this is called the creation of the dummy ball X so I'm just going to have namibal access the prefix dummy all X we'll do that over here as well and over here as well nice now we will need to scroll down all the way to balls movement controls and over here the logic is just going to be the same just going to copy the first if condition and then paste it just change the variable name to dummy over here as well and then we will reverse the direction or the meatball velocity like that and then inside this first we will have to retrieve the positions for the dummy ball as well so I'm just going to copy this and paste this here change the variable names to dummy and over here as well and then right inside the if condition I will actually copy this one as well and then paste it chase the names like that and change their names to dummy ball velocity we will do that over here as well similarity equal to this one so after completing all of those you will also have to remember that we have to change the direction in terms of the dummy ball as well so I'm just going to paste this and change the name to dummy like that and now we will have to do the same thing over here as well let's retrieve the positions by copying it and paste it here and then change the names dummy and then get inside the if condition to change the ball velocities we will do that over here as well copy this next we will have to get to the paddles collisions and inside the latest if that is the condition is just going to be the same rather than just changing the direction of the normal ball we're also going to change the direction of the dummy ball as well with the same condition so we're not going to declare that for the dummy ball I'm just going to change the direction directly if the original ball is in the contact of the paddles then this wall the dummy ball also should reverse the direction that's the logic we will have we will also have to do that over here but before that I will also retrieve the positions to keep that at the edge of the pedals hey stairs and then make this to becoming ball like that we will have to do it we will also have to do it over here as well now before getting to the gadgets and action section all that we have defined so far inside the gadgets section is for the gadget pair one we will also have to do this for the second Gadget but before that we will have to ask the user on which gadgets should they start with so what I'm going to do is before doing anything with pi game I will first declare the gadget Band by default is going to be one and then I will ask for the input of the user input enter your choice enter your choice will get a parent and then what we will do is actually first let me just convert this to ins then what we will do is we will first check for the condition if CH equal to one and we keep Gadget pair to V1 that is CH equal to two then we will keep Gadget out E2 now that's decided we will in fact scroll down to get it in action section and inside this what we will do is first copy all of this right around here and press down because what we will do is first check for the gadget Banner if yeah equal to one then we will execute all of the commands that inside this and if Gadget pad equal to two then you will have to then we will have to start with the cloning section that is ball cloning and paddle cloning so what we will do is as defined earlier we're just going to change the dummy balls Direction when the gadget is actually activated so what we will do is go to the left battles collisions and we will copy this and paste it here now rather than just changing the direction in terms of the x coordinate what we will do is we will also change the direction in terms of the y coordinate so that one ball will move towards the bottom side or the swap side and the other ball will move to the exact opposite intensity y coordinate so when we type in dummy ball velocity y and then multiply that into equal to minus one I forgot to mention one thing the let Gadget should be one then we will execute this condition so we'll put this in tab and then we will make lift Gadget to be zero and then Gadget remaining left Gadget remaining negative equal to one maybe we'll Simon Says stated that for the right hand side Gadget as well um tab if right Gadget equals one we will copy from the right Gadget right paddle collisions paste it here and what we will do is again change the dummy Bolt's Direction in terms of the white coordinate as well instead of equal to minus one and then make right Gadget to make a zero and then also make a white Gadget remaining negative equals one and we will get to movements and also add this for the normal as well tell me about X Plus equal to dummy ball velocity X followed by that mean for y plus two dummy ball velocity y you will also have to draw the circle so what we will do is I will copy this and then paste it over here maybe actually I will paste it over here dummy World section paste it here change this to dummy ball X change the name over here as well change this to like this we also come down to Gadgets in action section also make sure that the dummy ball is reflected back at 3.5 times the original speed as well because even though this comes under the gadget bar one we have to make sure that both the circles are making simultaneous movement so what I will do is just keep the dummy ball velocity X maybe negative 3.5 like that now we'll do this for the right Gadget as well get a statement and then keep this to me dummy like that and now let's run our currency so first we will have to enter our Gadget pair Choice I'm just going to keep this too because we're testing let me press enter we see originally that the ball is going in the same direction and then we're not seeing the second ball but then when you activate the gadget like this you see two walls like that very nice we will check that for the other side Gadget as well if I can hit yeah it's working very good and so here is the prompt of the final Gadget it again has to be manually activated by the user and it says immediately after activation the paddle should clone itself both being original and thus providing more area control logic is again just drawing the second paddle and on top of the original paddle and then make movements normally and simultaneously and whenever the gadget is activated we separate them by let's say 200 pixels by just adding into 100 pixels and then it provides us that battle cloning effect so let's take a look at the code implementation of how this works as well again we will have to make changes to the necessary sections and we will start with the pedals Dimensions by creating the Second Battle and this time I'm going to have a prefix of second rather than having this to be dummy because this time the pedal is actually not being dummy like the ball so first I will copy this and paste it here and then add the prefix second and right round here as well like that and it will also create velocities for the second paddle what I will do is copy paste this and have second over here now we will get to the input section and over here we will have to check if the barrel key is being pressed and if it is then not only we should move the original pedal we will also have to move the Second Battle as well which is on top of the original battle Second Battle well geek40 0.9 negative zero nine like that you will do that over here as well second right velocity be closer 0.9 if the down arrow key is being pressed we will do that over here as well now we should get to paddles movement which is right round here and we just simply copy paste this this is just making sure that the paddle doesn't go off the screen either by the top side or the bottom side we will have to do that for the Second Battle as well so I'm just going to paste this and add the prefix second next we will have to get to paddles collisions and over here we can't just simply copy paste the conditions like this let me explain why so the reason why we can't just copy paste the collisions for the second paddle is because let's say if the ball is approaching towards the paddle and remember that there is two paddles one in bulb of the other so if we Define collisions for them both at the same time then there is going to be two collisions happening at the first Collision the ball will change the direction this way but since there is another arrow on top of this the direction is again going to change and anyways the ball is just going to go off the screen which is not actually what we want and the way we correct this is by first checking if the positions of these two paddles are not equal let's say if they are separated like this that is if the gadget is in action then if the ball is approaching towards top atlest the primary paddle then Collision would happen normally and then if we Define for the secondary paddle as well then again a collision is going to happen normally so that's the logic that we have to work on let's look at how that works and hence we will have to first Define a condition to check if the Second Battle velocity actually in Second Battle X or the Second Battle Y is equal to the original paddle which is the left paddle Y and if it is then we should only Define collisions while one of these I'm just going to keep the original pedal like that and we will have to do that if you check if they both are not equal not a closer left paddle y then we will first have to Define for this so we'll copy this and then paste it here and then it will also paste it once again because we will have to also do that for the Second Battle as well displays it here and then add the prefix second so now if the ball comes in contact with either of the paddles then it gets simply reflected back which is actually what we want now we will do that for the right hand side paddle as well let's check if the coordinates are the same if second white adult y equals it like out of Y then we can just have this as it is I'm going to stab and copy this get tritrons here and check if they both are not equal rights battle away second right out of Y not equal to white throttle why let me just paste it come over here and paste it once again now we can add the prefix second and then you get to the gadgets and accent section and scroll down to second pair and check if the left Gadget is equal to two that is the second Gadget if it is being activated so if actually others less Gadget equal to two then we keep the second left battle y to be left battle why Plus 200. now this will lead to the paddles learning itself to the human eye and then we can just simply make left Gadget to be zero and also subtracts one from the gadgets remaining left guys remaining minus equal to one we will do that for the right hand side as well and this right Gadget equal to two and then we just make the second right paddle y to me write about a y let's do 100. like that and make white Gadget to be zero also subtract one from the right Gadget remaining like that now we will get to the movements as well and over here we will Define for the Second Battle seconds left paddle apply plus equal to second left parallel well followed by a second right battle y plus equals a seconds right I don't know like that you will have to draw that over here so I will create another section battle and I will copy all the battles this and paste it over here and then just change this to the prefix seconds also I forgot to mention one thing when you get to the input section that is here we also have to make sure that when no key is being pressed then the second velocity is that is the second part of velocity should also be zero zero or by second right spiral velocity v0 as well now let's run on code and see if the second paddle is appearing on the screen when we activate the gadget so first let's type in two and we see that now we have only one paddle but when you press the left Arrow key or the a key then the left the second Gadget will be activated and if second Gadget is activated then we shouldn't see the paddle cloning like that we do nice so right around here when you activate the gadget like this and if the game resets originally we just want the game to reset with the paddles as well but that is not happening in this case because we haven't defined it to we will have to make sure that once the game resets the paddles also reset to its original position so the way we did it is by going to the volts movement control section over here once the game resets every time what we do is add in two lines over here that is the second left battle y will be let's battle y that is a resetting back to the original position we will do that for the right hand side paddle as well second right about y will be White's battle y like that and then we will do that for the second if as well that is if the ball goes at the screen on the left hand side then again second rights battle why will we write about why and we will do that for the left hand side battle second that's about a y equal to left paddle y now we should have everything according to our needs let's draw a currency type in two over here we'll activate my Gadget right round now click here as well trying to miss actually I can't miss and yeah over here we see that once the game resets the battle also reset which is actually what we want I will show it to you right here as well yep we get it all right all that is left down is just the scoreboard and the end screen so in order to calculate the score first we'll get to the initial section and then I will create two new variables layer one come on actually both will start off at zero so player two will also be equal to zero player one will be referring to the left hand side player and player 2 will be referring to the right hand side layer and we scroll down all the way to boss movement controls and over here we see that the ball is going off the screen by right hand side so we're here player one will get a point plus equal to one because since the ball is going off of the screen from the right hand side the left hand side player will get the point now if you scroll down to the other if condition over here ball goes up the screen from left hand side so player two will get a point this time okay so that's equal to one so that's how you calculate score now how do we write this on the window so I will scroll all the way down and over here before getting to the object section right around here after movements I will create a new section in the scoreboard so first we will need to get a font through which we have to write on the window we want to leave Pi game dot system font the font Dot sys font like that and then for Simplicity I will just use calibery and then we also have to mention the size which again for Simplicity I will be keeping that as two I will be keeping that as 32. now I will create another variable score and then I will type in font dot render this is just basically instructing the program to use the font that we just imported and and generate the text that I'm just going to type in which will be player one then do this plus SDR I'm just going to make the string of player one true and while we also have to mention the color I will just keep white authenticity now we have everything ready we just have to write this onto our window how do we do this we just type in window.blit we mentioned what we had to write in which is the score and then you also have to mention the positions so in terms of the x coordinate I will first keep this to be 25 and in y as well I'm just going to keep this 25. now I will just copy this and then paste this once again over here and then now change this to player 2. over here as well and then change the x coordinate to around about say 825 and keep yaxis as it is now we will quickly run a currency get the power to be two and yes it works we see player one scores one and play two score is one as well nice now we will also have to do that to mention the number of gadgets remaining so what I will do is first let's just name this to be score one and score two and what I will do is I will create another new variable Gadget left one and similarly actually just kept change it over here as well it's here well it can be font start render let's type in gadget left a space Plus can make the Str and Lefty as it remaining true followed by the color which I will add this as white like that and we will type in made out of Blitz Gadget left one the positions this time will be 25 comma 65 we are just off placing it a little bit in terms of the y coordinate I will just copy this and paste it here maintenance to be Gadget left two and then make this right Gadget remaining and this to be 825 so now let's just run a code and see if gadgets is being shown let's type in two and we see the number of gadgets left this Phi and the scoreboard is also ticking nice okay so all that is left out now is the end screen so let's scroll all the way down and create the section over here and inside this first we will create the winning font which is just the same thing but then I will keep the size to be 100 and then now I will check if either of the players are greater than three points this is the winning cap this is the winning limit you can have the you can have whatever number you want but in just for Simplicity to show you that the end screen element is actually working I'm just going to keep it at three so that the end screen will be so that the game will end faster greater than or equal to three and what we do first is fill the window by using the window.fill statement with the black color and then we will type in the end screen variable to be font dot render actually winning a font dot render and then say player one one keep the anteriorist to be true and then mention the color I will keep this to be white which we already find and then blip this onto our window window.blit end screen mention the coordinates I'm just going to keep it to be 200 in terms of X and so 15 in terms of Y let's say and see if this is working I will also do this for the play itself as well just copy this paste it right around here then change this to player two that now let's run that code and see if it's working enter the guided choice to be one go over here right as player 2 gets three points it displays that player to one again really nice and here it is the modified Bongo now if you made it up to this point of the video then I just want to say thank you for sticking with me now I again do recommend to check our Channel now there's just tons more in there so that's it byebye hope you see that