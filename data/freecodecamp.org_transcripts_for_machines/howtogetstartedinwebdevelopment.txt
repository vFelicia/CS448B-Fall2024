all right like kimberly said my name is susan simkins and i want to talk to you today about getting started into web development specifically with how you can start to find your first job in frontend web development so i want to start off by talking about who i am just so you know where my experience is where i come from because depending on who you talk to everyone works in a different environment on different teams they look for different things different experience so what you hear from people is going to be a little bit different depending on their specialties i do mainly frontend development and i've also done quite a bit of ux work specifically consulting for redesigning websites i've been in the field for about seven years since 2012 and currently i'm a web designer three is my official title at oracle it's basically a senior web designer entry levels one then kind of like mid levels two and seniors three it's a very corporate title but mainly i do frontend development i help kind of consult on redesigns i help set coding standards for the team help recommend what we need to look for in new hires and things like that and previously i've been a senior ux developer at big wing it was a marketing digital agency that's part of the oklahoman so it was typical agency type work is very fast paced a lot of small to mediumsized websites i did a lot of ux consulting for them information architecture user research things like that and because we had a very small web team i also did the frontend development and worked with we did mainly wordpress themes so working with wordpress developers to they did the back end i did the front end so making sure the themes were set up right the templates were set up right things like that before that i was a friend developer at ithemes if you're not familiar with them they do wordpress plugin development so i helped with that and then also did wordpress training so teaching people how to get started and using wordpress as a con content management system mainly from a a user perspective and less of a developer perspective so business owners who wanted to get in and learn how to use wordpress to manage their site and my first kind of fulltime job that wasn't freelance was is a web design instructor for a company called pluralsight they acquired a company i worked in called digital tutors and they did 3d design and animation training their kind of tagline was we teach people how to make movies and games and i was brought on as their first hire to kind of help them get into web design tutorials it was all front end teaching people how to transition from being more of a designer to getting into coding so learning html css where they need to get started and things of that nature and then before that i did freelance web design and development for a couple years mainly just small sites whatever i could find creating a custom design and turning that into wordpress themes so one of the biggest questions i get from people is what do i need to get a job and there are really three different things you need to get a first job in any career and that would especially web development or coding you need the technical skills you need the soft skills to be able to work on a team unless you're going to be working by yourself i can't really think of a job where you don't at least need to work with a client or something like that even if you're in freelance and you're not working on a team then you're still going to need those soft skills and then also every job you're going to find unfortunately or not unfortunately because they want experience a lot of them kind of have unrealistic expectations for experience because how can you get experience before you get a first job so we'll talk about that as well so obviously with the technical skills one of the biggest questions people have is what should i learn and this is a really hard one because there are so many different types of development jobs out there there are so many libraries or so many frameworks lots of different languages so anything you can do frontend you can do backend you could be a fullstack developer you could do devops you could focus on ux development like i did for a while which is a lot of in terms of coding a lot of prototyping and using those to create user tests ui development even whether you work on applications or websites the type of development and the skills you need are going to be much different so i'd encourage you to find what you like try out different things and try to focus on just one or two areas because it's so easy to get overwhelmed when you're getting started there's so much out there to learn that it can feel like it's impossible to really get the skills you need to start a job so from my perspective which is front end web development i really recommend that you start with kind of the basics learn the basics of html and css you might hear the buzzword html5 they call it a version of html5 or html even though it's not a version it's just referring to you know the newer tags although they're not really that new anymore i think of like the semantic elements i want someone who knows how to use html elements correctly like a lot of times you'll see code that's very div intensive but there's a lot of benefits from using more semantic elements like the header the footer the section tag a side figure i mean any that you can think of and they have automatic accessibility benefits when you build websites that way so looking for kind of knowledge into that maybe a framework like bootstrap or foundation just to show that you can dive in and learn one of those i don't have a preference for either and in fact i'm not a fan of frameworks like this in general but so many teams will encourage people to use them because it speeds up development a lot but unfortunately they're extremely bloated but it is good to have knowledge of how to use them because many jobs want people to be familiar with frameworks then for css a lot of the kind of basic theory like do you understand the cascade can you explain inheritance do you understand how specificity works can you explain different types of selectors and which ones might override others can you explain how or why not you might use certain selectors in your code be able to talk about maintainability organization is huge a lot of people really struggle with how to organize css because it's pretty openended there's so many different ways to do it also um being familiar with a preprocessor like sas i think is great being able to talk about how you set up your sas files how you organize them your folder structure javascript a lot of my teams we haven't been super heavy on javascript they've been a lot of you know more or less basic websites so if you know the basic theory of javascript can you explain concepts like hoisting for example are you familiar with a framework it could be as simple as using jquery and being able to show some work with that content management systems wordpress is obviously my preferred content management system because i used to focus on wordpress theme development and it runs over 27 of the web i love that it's open source and it has the best documentation hands down of any content management system out there i would bet i haven't seen one that's better so having those skills especially if you're going to work in like an agency environment like i did or my current job i work with a lot of marketers so all of them have to work with a content management system on a daily basis so you have to understand it not only from a development perspective but oftentimes it falls to you to kind of be a troubleshooter and to explain to them how to use the interface of being able to walk people through that version control i've worked with a lot of different types of version control i prefer command line but i think the most important part is that you know how to use something i've worked with teams where they only use like a gui and that's fine as long as you understand the concepts behind it you know how to back up your code preferably if you know how to work with multiple people accessing a repository at the same time that's great because especially when you run into conflicts it can be really tricky to figure that out and then also to kind of have a basic idea of how you work in a team environment a lot of jobs i've started at have been a new position and so they didn't have a workflow in place so if you don't have a process that would help you be efficient and have a good end product before at least a rough idea of how you might accomplish that then that's really helpful because unfortunately a lot of the times you find out that those processes are just not always in place and it's up to you to create them and one other great thing to do is to look at other people's team processes and get an idea of their environment and some really good things that they recommend that you can learn this is an example one of my former coworkers talked about all the time 10 up is a wordpress development company and their engineering best practices they thoroughly document their philosophy what types of things they look for they link to examples and so going through here and finding things that you're unfamiliar with and they talk about why it's good to know them that can be a really good way of kind of identifying any areas that you need to brush up on or that you're more interested in and things like that so soft skills that one's really hard to learn you can really only learn through experiences and practicing but it's really important to be able to communicate to that that to someone in an interview so as you're working on projects especially if you're working with other people in their code if you can write down examples or try to remember times when you ran into a problem and how you communicated to overcome those problems anything that shows that you like to collaborate with people and a desire to keep learning and growing so you guys already doing great you're coming to meetups like this and meeting people and networking and so yeah being able to talk about how you're active in the community those are really good ways to show a lot of these soft skills so how do you learn the skills that you need education obviously is one of the easiest ways most people i've ever worked with have been selftaught as developers so it's totally fine if you're teaching yourself or don't really have a degree in it as long as you can demonstrate that you have the experience and the skills that you need for a job so there's formal training i don't have any experience firsthand with university programs but from what i have heard it can be hard for them to stay up to date since technology changes so rapidly tech and vocational school i went to francis tuttle's web design and development program for two years fulltime i started as web development i did that for a year and then i did web design for a year after that and i can't recommend that more highly if you have the time to put into it i mean there are online programs and there are in person programs and fulltime it's like a 40hour week job and i know not everyone can do that but i think that the amount of experience and stuff you learn in a program like that is fantastic and it's very inexpensive compared to attending something like a university and then you meet other people who are in the program so it's a great way to network i got my first three clients when i was doing freelance work through the instructor there because people would come and contact the school they can't afford to pay an agency but they're looking for a student and they still want to pay you but and it's not going to be like a whole lot but you get the experience and then still making money more money than you would like a parttime job or something like that so that's good online education there's a lot of free places that you can go learn youtube has all kinds of tutorials of varying quality code academy learn by doing i think that's a great way to get in and really learn code obviously the more you do the better you get at it khan academy is good then there are paid subscriptions video tutorials i'm a little bit biased here because i worked for pluralsight and i'm still doing training here and there for them on the side so i think that's good but i also don't really learn well through video training even though i create it which is kind of ironic but like you know there's so many different types of education that can suit your learning style that and you know for all kinds of cost levels such a great field that pretty much anyone can find a way if as long as they have the drive and the desire to um to learn the skills and then obviously through the community attending meetups watching talks going to conferences anything you can do to kind of see what other people are talking about it's a great way to identify what types of things that you need to or want to learn more about so how do you get the experience which is one of the hardest things because everyone wants to see it seems like three to five years of experience when they put out a job posting and in junior developers what we look for is rather than three to five years of experience i mean that's completely unrealistic to ask someone before they even have their first position so i think if you can get any kind of real world experience that's what we look for having a couple examples of live websites like when i got my first job i think i had three live websites up and i got those through the school like i talked about through the community meeting people if you don't find anything that way you could always ask friends and family i mean it seems like everyone has an idea for a website or an app so just volunteering even if you have to to get that experience ask them to pay for like the hosting and the domain and then you have those real examples to show for a portfolio so showing those work examples you could do through a portfolio one great way is to have a personal website and then you could talk about how you designed and built your own website as well so they have another example of work linkedin has spots where you can upload examples of your work there and then you could link to live examples if you don't have time to build a personal website and then also live code samples are a great way to show your actual code so hosting code in a repository like github or whatever if you are more into like interaction design or frontend design then codepen is a great way to show your work and then it's really important in addition to just having code samples to be able to talk about the process and how you got to the end product when we conduct interviews that's something that really stands out is that not that they can just show the work but they can really talk about how they got to the end product what they did to um to plan to research to come up with the idea if that was a part of it what kind of development planning did you do what kind of tools did you use why did you use those tools those types of things just being able to talk about those can show a lot about your work and you as a person so actually finding a job most people i know have found jobs through personal connections which can be kind of intimidating when you're getting started in a new field maybe you don't have a lot of personal connections but coming to stuff like this going to user groups meeting people is a really really great way just to find fine connections even through previous jobs you may have had you never know even if you started in a different field or different career maybe there's a job opening on a web team somewhere and you know somewhere in a different department they can often introduce you to someone who can help you kind of get a foot in the door and then there's always recruiters and there's a lot of mixed opinions on recruiters but there are good ones that exist i've worked with some really great ones just kind of watch out for some red flags like if they don't listen to you if they're often sending you jobs that have nothing to do with what your focus is like i get a lot of jobs for oracle database development which is not at all what i do is frontend developer i think they just see oracle in my profile and then to see me send it to me anyway based on the keywords or dot net jobs i don't i don't know.net at all so pay attention to the ones that do try to send you jobs that match what you're looking for and then also be firm with what you want one time i worked with a recruiter and he told me to straight off he was like we're not going to get the salary you're asking for and i was like well can we just submit it and i'll interview and if it's not a fit it's not a fit and tried to argue me out of it and i was like just do it anyway if you don't want to work with me that's fine i'll keep on looking somewhere else and we went in there and then i got the job offer i wanted to so they don't always they aren't always exact experts on what the requirements and possibilities of a position are because it wasn't like it was an unreasonable request it was like perfectly within the market value for that position they just yeah ask questions and make sure that you're getting what you deserve out of it and they're not trying to take too much of a cut out of what you deserve for your skills and another good thing about recruiters is it's really great for interview practice so if interviews make you really nervous even if something might not be an ideal job for you obviously you don't want to waste someone's time but if there are ones that you might be interested in getting in there and just getting the experience talking to people in interviews see how different companies conduct interviews can be really great so if you do find a perfect job that comes along if you have that experience and you can be comfortable and confident in an interview then that'll go a long way and job postings all over the place obviously there's a big places like linkedin glassdoor indeed that make it really easy to fill out a application and put your resume up on the internet i actually found my first job in a newspaper posting in the oklahoman so don't you know you can find a job anywhere even in places that you might not expect and job descriptions when you're looking for postings often they're written by someone in hr or someone who doesn't have any experience with the team or the daytoday responsibilities of a job so you might find all kinds of things that have nothing to do with what the actual position is so if you can get on the phone and talk to someone or someone on the team oftentimes something that may not initially seem like you have the skills for would be a good fit for you could often be a really good job that was just kind of botched by someone trying to do their best to write a description of a job that they that they don't understand in interviews as i mentioned um it's really good to get real practice just get out there and see what it's like also when i was first interviewing i would research typical interview questions for a position and then ask my friends and family to walk me through a mock interview which sounds silly but it made me feel a lot better about whether someone was going to try to trip me up with something that i thought through a lot of common questions before and kind of had a starting place that i could talk about and adjust to any additional questions they had or the environment or the type of company and be prepared to talk about your work go through your past examples think about the type of project anyone you worked with the type of tools be able to talk about your process and explain that when you're in an actual interview make sure you ask the interviewers lots of questions especially try to find out things like what's the actual job like it can be very hard to identify that based on the job posting or even based on like initial interactions with people a lot of times i'll get in a job and it's completely different from the impression i was given from the initial interview so ask about a typical project what the deadlines are if you can walk around the office and get a feel for the team or the office environment especially if you're there later in the day you can get a feel for maybe whether there's a good worklife balance or maybe people are overworked based on how they interact with you how they look i did one interview that i turned down because they i got there at 2 p.m and i was interviewing until 7 00 pm including an impromptu dinner so i had a good idea that maybe they weren't going to be super respectful of worklife balance which is really important to me so being able to figure that out ahead of time is great and also company culture are there people do they seem happy are they talking or is everyone at their desk kind of silent um do they look miserable all types of things can give you some some cues as to what the environment is like interviews also also have a couple typical stages usually or at least where i've been a part of interviews there's a either a phone interview or an inperson interview it's basically a screening to kind of see does this person have the basic skills they say they have is this someone we could see being a good fit for the position and then follow that with a more detailed technical interview so asking specific technical questions about about projects about technologies theory things like that and then if there is a final interview or maybe this is combined with prior interviews questions about are they a culture fit would they be able to work with the team well do they are they able to collaborate collaborate collaborate is their communication good kind of getting those seeing if they have those skills because at the end of the day if someone has the technical skills if you're not going to be able to work with them for various reasons then they might not be a good fit for the job and then after interviewing kind of deciding whether a job is a good fit for you is really important sometimes you can be eager to accept a job just because it's exciting to have a job offer but they obviously jobs can be bad so make sure you research the company and the team um get try to get in a good idea of the company's values the team values what type of team they are also even though a team might be great they might not be a good fit for how you work as an individual i worked in an open office environment and my team was fantastic but i just found it really hard to focus because there are 150 people walking around the office every day and i've i'm like a squirrel person so i just accidentally like even though i don't want to just like watch people as they're walking across the floor because i just get distracted so for me having a little bit more of a quiet office is a lot better for my productivity watch out and see if they have high turnover obviously there's probably a reason that people are leaving if they're leaving ask them questions about worklife balance if that's important to you some companies don't really respect that especially watch out if they want to give you a company phone or something i mean everyone has a laptop these days but used to that could be kind of a sign that they want you to be able to work at any time brand new positions can be kind of hard often if it's your first or especially if it's your first job in a field because when there's a brand new position a lot of the times they don't have a concrete idea of what your job responsibilities are going to be and so that can be extra stressful in a first job trying to figure out what this job should be and also trying to get your feet off the ground and get used to a new career field so yeah a necessary stress there sometimes but it could also be a great opportunity if you are willing to deal with that stress you get to really have a lot of role in shaping a position and the workflow and kind of the processes for a company which can be really cool and then outdated technology if there are several years behind that can be really frustrating if they're not keeping up to date because then you as a person you have to learn older technology and then that can kind of hurt your marketability or your ability to find and grow into new positions because you're not able to kind of learn and stay up to date on the job as much as you would be if someone was using newer technologies and then a work environment i kind of touched on already open offices at least for me some people love them because they can get up and talk and collaborate if they're on a team where they have to have a lot of interaction and discussions that can be really good but i get really distracted as mentioned working from home in my current job i work from home probably three to four days a week and go in for like three four half days and then the rest go home for some people it you can get kind of cagey get cabin fever if you're home all the time but i like not having a commute and if i want to wear my pajamas i try not to but i can if i just feel like being comfortable for the day and then yeah getting a feel for the office culture like i've had some jobs where i'm still friends with people i worked with six years ago we have our own slack group and we're great friends and it's awesome we do game night so we have a d d group and a book club and that's so much fun and then i've worked with other office cultures where i only know a couple people and people come and go a lot so you don't really get to know anyone that well which is fine just kind of deciding what you need to get out of an office culture and making sure that your needs are met in that way and that's all i have so does anyone have any questions i think i saw yours first maybe um that is a great question i think that comes down to code samples so oh sorry um so the question was when you're using a online learning platform like codeacademy how can you demonstrate the proficiency and the skills that you learn from a coding platform like that and i know some of them i'm not sure i can't remember i haven't used codecademy in several years but some of them do provide completion certificates so that's something that you could list on your resume if you're working on a project if i remember correctly codeacademy has a lot of little mini projects that you could do to build up your skills you can put that on github and you obviously want to label your sources where you got it from we could say i completed these code academy exercises and talk about the skills you use and then they can come in and view your code from the project so i think that's a good way to do it for me oh yes sorry what does a typical eight hour work day look like for me um i am not a morning person and my boss knows that we talked about it before i accepted the job and so i start around 9 30 every day and i usually start by checking my email i work mostly with events marketing team and they have a lot of urgent last minute requests when they're updating events and things and so i make sure there there's nothing urgent that's coming in that i need to take care of immediately and if there is i will even i'll have coffee and go straight in there and start pushing updates if not then i'll go into the office and work until one or two pm because i like i get stir crazy if i'm home all the time but i am really productive in my home office because i spent some time trying to make it comfy and in the type of environment that makes me productive so i have like a standup desk and then a normal desk so if i need to stand up i can stand up if i want to sit down i can sit down so i finish out the afternoon there so my days typically from 9 30 to 5 30 every tuesday we have a coding team coding call and most of the team is in the philippines so they're on a 13hour time difference so we have our call from 6 pm to 7 pm on tuesdays and yeah i can't really think of anything else in terms of projects okay yeah for sure that's important mostly we work with a product called light cms it was net fusion element net fusion i think was the company that developed it which was acquired by netsuite which was acquired by oracle and so there are a lot of legacy websites built on light cms so being familiar with wordpress and other content management systems i had to learn how to use light cms and build websites in that which is kind of a challenge because there wasn't a lot of technical documentation for developers there's more for users those kind of dig in and try to figure it out so i help with a lot of conference websites so they're not huge websites they're probably like five to ten pages just doing the front end for that i help kind of set coding standards for the team in manila so recently i've been doing some recommendations for changes to projects how they could set up projects use for example gulp to automate tasks instead of doing things manually how to organize and optimize their css based on common engineering best practices and we're migrating a website over onto oracle's content management system while it's in the middle of a redesign which is a lot to do at once so i'm on a lot of calls with their marketing team kind of figuring out the content strategy and any revisions that are made to the design and building templates for the new system uh the question was what books do i recommend for learning web design or web development okay um this is going to be a shameless plug it's not out yet but i'm writing a textbook that's teaching people how to get into html and css and frontend development so hopefully that'll be good when it comes out be by bloomsbury interactive publishing their publisher in the uk i really like o'reilly books they can be kind of dry but they explain the technical side of things really well i like a lot of their javascript book javascript the good parts is one i remember really liking it javascript patterns is really good they're just general javascript book that's like this big it's huge but if you have a specific question about something like it's such an exhaustive resource to get an overview and kind of get a good explanation of specific things i'm trying to think i can't remember what it's called but there's this company that makes a lot of frontend development books and they have they're kind of silly they have a lot of cartoons um in them so it's kind of they try to make it humorous but it makes it a little bit more interesting to read a textbook i'll have to sit and think about what they're called but maybe if you google like funny web design book it might pop up yeah and then for design my favorite design books have been focused mainly on ux research and i just completely blanked on the company name but they run a really big ux consultancy group and a book apart a book apart has a lot of different good titles i don't know if you're familiar with them but they run an event apart and what's the website yeah jeffrey zeldman helped started that website and they a lot of wellknown people will write just kind of a oneoff book on their specialties they have a really good one on web typography which is you know there's it's deceptively simple but there's really a lot there with web typography inside it setting type for the web that was one of my favorite books for sure i can't remember his first name but it's by something brown yeah and then online it's kind of written in a textbook type format but hack design is a really great free course i don't know if you still can but used to be able to sign up through email and then they would send you a lesson a week in your inbox and they have a lot of different authors and it's more like hack design how to learn design from more of a technical background but yeah they have a ton of different design topics and then also coding for designers so if you're more of a visual learner anything that's aimed at teaching like a designer how to code is good because they try to make it yeah more more visual yes um all areas that's a great question okay so the question was um since web technologies are changing every year so rapidly where do i see html css javascript going in three to five years is that right or just in the future for i mean this is a hard question because um i don't i think it's kind of a maturity point to where we aren't going to see anything super crazy changing i think hopefully css for example will start getting better and better like adding native support for for variables and for more functional programming type logic that makes it really easy or easier to write and maintain css in a way that's maintainable and kind of follows best coding practices hopefully html will continue to go in more of a direction for um like they did with html5 or the tags they added in the last version like more native support for semantic elements i think that's important for accessibility is having a lot of those builtin a lot of ability to create more of a rich expressive web it works better with seo the more a algorithm or something like google can understand the context of your content based on the markup you're using the better and smarter it can be at using it in different contexts i okay so the question was um how much coding experience did i have before i got my first job or my first project first project okay um so my first project real world project was a nonprofit in edmond called shepherds of love they reached out to francis tuttle and wanted a student to help them with their website i had been in the program i think maybe eight months at that point and i had i knew a little bit about wordpress i had built a couple you know project websites in class i would say i had like a decent understanding of html and css didn't really know any javascript knew like a teeny tiny bit of php maybe and i thought i knew a lot more than i actually knew so i took on this project agreed to develop a wordpress site and i had to learn so much for my first project i was woefully unprepared but i think that's a really good great way to learn is to take on something real and then you find out exactly what you need to know to build that project so as long as you give yourself time to learn i mean i think it's hard to find unless you're doing the same thing over and over again every project your hat you have you're going to have to learn a new type of technology or a new skill or what's changed since the last time you used a technology so i would say as long as you have some of the basics down it's never too early to take on a first project and and to yeah just to tackle it because that's the best way to learn is [Laughter] yeah that's another great question so the question was um how do you know what's a the right salary to ask for how do you price yourself when you're looking for a job and i think one of the first things to do is do some research i think salary.com or something like that it's run by hr people and they post salary ranges for different positions so look at first of all the type of job titles that you might be looking at and then also what type of skills that you'd be using in that position because oftentimes job titles can vary so much between different companies sometimes it might be called something but it's a better match to another job and then they'll have a low end for that job in your area and a high end and kind of a median and i would shoot for somewhere in the median if it's your first job you don't want to undervalue yourself especially when you accept a new position because any future raises or bonuses a lot of the times are based on your base salary so if you're already getting underpaid from the start then you're hurting your growth potential for the future because your you know your incline will be much slower if your base starting salary is lower so obviously you don't want to ask too much and have them take you off the table so um asking like yeah salary such a sensitive people are sensitive thing for people to talk about it can be hard to ask people what they're making but if you know someone who's comfortable talking about what they make in the field then you can kind of get a baseline for what's realistic in the area and then also looking at the type of company so if you're trying to get a job at a startup generally they don't have as much revenue or ability to pay you so it might be on the lower end of that scale if it's at a bigger company generally times they'll want to be competitive so it would be towards the median or maybe even the high end of the scale so yeah and never agree to a salary before you have an interview a lot of people try to pin you down and give try to get you to give a range before you even get in the door and that can kind of shoot yourself in the foot especially if the responsibilities are going to be much higher than you initially thought when you started interviewing then they already have you pegged a range that may not be a good compensation for the type of work you would be doing so yeah research glassdoor is another really good place to research and see what people the actual company get paid at least if you can't find it for your specific position then looking at market pay for other positions in the company and what they're paying compared to that you can kind of get an idea of what they're willing to pay for and then always counter offer would be my other piece of advice a lot of people are scared especially in a first job to make a counter offer and just accept their first salary but you know people they expect you to bargain so the worst thing that can happen is that they tell you no and that's the easiest way to get a higher salary from the start is make a counteroffer maybe provide some justification for why you think you deserve that higher number you could say this is more in line with the market pay for my position and based on the skills that i have i think this is fair compensation for what you're looking for and then just see what they come back um the question was can i recommend any javascript libraries like node angular or react i would say anymore i'm not the best person to ask that because most of what i do isn't on the javascript side i if i have to do anything in recent projects it's mostly jquery so i think it highly depends on what you want to do if you want to get into web apps then certainly learning something like angular react would be great if you're looking more at websites jquery is super common so know your use case for it and then decide where to focus after that there's no reason to learn all of the frameworks just kind of decide what you need to to get the job you want um that's a great question um so the question was what do i like about or what got me interested in web design and development and what is it about the daytoday job that make me happy um so i actually got started in web development because i graduated from oklahoma state university in 2011 with a degree in political science with an idea that i was going to go to law school and i started studying for the lsat and then thinking about whether i actually wanted to be a lawyer and i disliked history classes and studying law but i don't think i actually wanted to be a lawyer so after i graduated it's like well crap what do i do now and my brother is a web developer and so he kept on telling me that my type of people are in web development and i'm still not quite sure what that means but he uh he encouraged me to like give it a shot he's like you like computers and you like design so maybe this could be like a really good interaction of the two and my sisterinlaw had also graduated with a degree in journalism and she was kind of looking for something to try until she figured out longterm what she wanted to do so she found francis tuttle's program and enrolled in it and i was like well why not why don't i enroll in francis tuttle too and at the very least i'll have my sisterinlaw there as a friend and so i joined the program with her and she actually ended up getting a job at an agency after six months and left the program and i stayed in a little bit longer and ended up finishing the program because i was scared to get a job but yeah i just i found that um yeah i was always interested in computer science but i thought it wouldn't be interesting enough for some reason but i think i just didn't have a real understanding of what you could do with it and what it actually was and so the more i got into web development and especially design i'm in all my jobs i've done a good amount of development combined with the design so i like that it has kind of that nerdy technical aspect of i love researching things so i'm always getting to research technologies and to learn i really enjoy coding so i get to code every day and there's not many jobs that i can think of that i can design something and use a creative side um and then combine that with something that's highly technical as well so it kind of plays into two things i really really enjoy i love the flexibility of being in web development i've met a lot of really great people so i think meeting fun people and then just really enjoying the daytoday work keep me happy in my job okay so the question was would i take a languagebased class like c plus um or java or do i just nix it and learn it myself um i think that depends a lot on the class itself because a lot of them are kind of out to date at universities um most people i've heard have taken a coding class in college they only have like one lab a week and so i think having so little handson learning combined with so much theory learning like if you want to learn the theory behind it then that could probably be a really great fit but if you want to get more of the handson learning how to code then i would maybe go a different route because yeah it's really hard to learn something if you're i mean unless you want to put in a lot of time outside of class then maybe that would be a good balance of learning the theory and being able to learn the actual coding side as well but from my personal opinion i think for formal education something like a vocational school for languages is one of the best ways to learn because it was um it was the theory side but it was also we coded for like six hours a day so um i think that's the best way to learn is to learn by doing sure that's a great question um when so recently i've been on noncoding or web development podcasts because that's kind of my way to relax and shut it off but when i do listen to web podcasts i like the next web jen meyer i think is who creates that and then i can't uh i can't remember what it's called but it has chris coyer and a developer from austin they had a podcast show that is really really funny and so if you want to listen to something i recommend that one very highly because it's entertaining um but yeah in terms of podcasts i mostly use those for more like entertainment type and less learning i do like newsletters for keeping up to date because anything that creates less work for me and being more efficient is great so someone else does all the hard work and tries to find things that people are talking about and send it directly to your email so you can kind of scan through and see what are people talking about kind of the trends between the the different newsletters and decide what do i need to spend my time learning to keep up to date see what's happening so i think that's a great way for sure okay so the question was are coding camps uh coding boot camps considered worthwhile and what was the second part of the question and are they competitive um are the skills competitive i can't speak a lot about boot camps but from what i've seen it does seem like a lot of them give a good variety of skills that are in demand for the workplace i mean at the end of the day they're businesses so if they can't get their participants jobs then they're not going to stay in business so from what i've seen it does seem like they stay pretty up to date and from what i've heard from other people a lot of what they get out of boot camps is they want to have a certain success rate of people placed in jobs so it can be a great opportunity to maybe have a job opportunity that you might not other have through the connections that you can make but like with anything there's going to be varying quality levels in what you get so but what i i would say though that i think most of what they teach you could teach yourself through online resources for probably much much cheaper but it depends on your learning style and some people aren't they struggle with selfdirection and kind of deciding what to focus on so if you want someone to kind of do all that for you in an easy to follow formula then then sure i think a bootcamp would be good to start learning okay last questions okay so the question is um how do you get a freelance job when it seems like html css and javascript aren't enough in your perspective to get a freelance job um i would say um yeah it depends on obviously where the um the source is coming from so um if you're contracting with a company who already has a development team they would probably be a lot stricter on what they want because they want someone who can um who can work in kind of their team environment and up to their team standards from an external basis a client this might sound horrible but someone who's less tech savvy is not going to really know whether or not you're up to date with javascript for example or how good your coding skills are so it's not to say that you should screw them over and do a bad job but there's more of an opportunity to take on something and learn while you're doing it so as long as you follow through on your promises and you're ending up with a good quality product then there's nothing wrong with um with learning while on the job as long as you're not misrepresenting anything to the client or trying to be dishonest so maybe try try freelance jobs in a different environment so rather than at a company or an agency look for individuals or smaller businesses or something like that okay