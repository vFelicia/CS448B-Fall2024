this full stack web development course is designed to equip you with the skills to create a robust scalable Task Manager application from scratch the course integrates the dynamic duo of nextjs and react on the front end with Prisma as the omm for efficient database management using mongodb you'll gain a deep understanding of setting up your development environment designing apis managing databases and deploying a fully functional web application that efficiently handles real world tasks Wilson from the code dealer developed this course hello everyone in to this's video we're going to be creating a todo list application that has sign up and sign in so here is the profile of the user that is currently signed in uh we can click the user and then we're going to be able to sign out or manage the account also we are going to implement a top loader here so when I navigate to the important tasks you're going to see there going to be a loader here okay and when I go to completed you're going to see the tasks that are completed and you also going to see the load as I navigate to other pages okay and uh so this is the main page we can uh create a new task I'm going to say hello world and then I'm just going to say hello world okay world and uh here I'm just going to set a random date and then uh we can toggle if the task is completed or it's important so I'm just going to make this important and complet it it's not going to be completed so when I click create task you're going to see there it is the newly created task is going to be at the top hello world we can togg or completed so when I click complete as you can see we have we have a toast that shows us the task has been updated we can you know update the task as well as as many times as you want uh we can also delete any of these tasks when I delete it's going to show us the task has been deleted all right and uh so when I go to the do it now page you're going to see the hello world is going to be there but when I click incomplete it's it's no longer here so it's completed as you can see now the Hello World Is Now Inc completed okay and uh this uh project is also uh responsive we can click I mean we can also add the task from this pattern here as well okay so to show you the project responsive I'm going to make the screen smaller so I am going to select for iPhone 12 Pro as you can see it looks even good on iPhone we can create task we can you know show the sidebar and hide the sidebar uh here's how it looks okay it's uh really responsive as you can see the sideb is going to be hidden on smaller screens okay we have multiple ways to create the tasks so we have a task and this button here so this pattern is always is always going to be at the top so when I make the screen even smaller as you can see it's always going to be at the top so when you scroll all the way down here you can still click and add a new task you can open and close the sidebar okay so that's it for the demonstration for this project so I just want to show you why I was away I was on holiday and the other thing I was also building my website so it's still under development so I'll just show you a quick demonstration so here's the homepage all right and uh we can toggle the light and dark mode okay and uh we have the courses page so it's loading and uh here's the only video I have at the moment because I'm still testing so you can you know kind of uh sign up for the if you want to see the video uh some resources so if you want to see more you have to sign in lessons you can click of these lessons you can watch it on YouTube you can view the source code and we can go to the blogs so this data is just random so I was just testing how it would look and style this page and this is how it's going to look like okay I'm still making the content for this website so maybe next year I should have a lot of content to put here uh let's say we want to um we want to watch this video so when I click it's going to take us to the signin page and then let's sign in so if by the way if you want to send me an email about anything just you know my email already um just go to the uh to the about section on YouTube you can see my email or you can see it when I send in there was my email there so now uh we can go to courses and I can click this video and uh oops we're going to be able to watch this video okay and uh there's going to be the description here we can also change the theme to a light theme we can open the sidebar here oh I need to fix this button here on on the light theme so it doesn't show nicely here so I'm just going to change this color here uh we can now now go back to the homepage we can go to the resources we can see resources we can filter uh these resources also the lessons we can filter if we have a lot of lessons uh I didn't put the filtering system on the blog section but I'm still developing this website uh I'll will let you know if there's more stuff that have that have been added but uh if you want to check it out just uh visit the Cod dealer.com and you can check it out for yourself okay so yeah uh I'll see you in the video all right so I'm going to start by creating a new project so go to the terminal make sure you're in the folder which you want your project to be in I'm going to run MPX and then create and then next app and then we're going to be using the latest version I'm just going to name this app my tasks you can name this whatever you want so you're going to be asked if you want to use uh typescript you can select yes one no it's up to you I'm going to be doing yes and then T1 CSS yes we're not going to be entirely using T1 CSS but we might want to use some utility classes from Tailwind so I'm just going to do yes and then no for the source directory and then yes for the up rter and then it's going to create the project for you just wait it's going to take a few seconds depending on how quick your internet is okay uh it should be done by now okay so once it's done you can CD into that folder or you can manually open the folder like this and then select that folder and then select now we're in the folder let's go to the terminal so in the terminal we can run mpm runev uh this should be in Local Host 3000 so this is the final project okay so um it should be Local Host 3000 okay it's taking time to compile I'm going to close this okay so let's go in the app directory in the page we're going to collapse the main first off let's see if it's working there it is there's the stter page I'm going to collapse the main and remove this okay and then there's an empty main let's go to the global CSS in the global I'm just going to get rid of everything except the Tailwind utilities okay so now it's empty so um let's see what can we start with let's start with uh the global okay so uh in here here I'm just going to set a background color and a font size and a color a def color of white in the body okay so body like this actually I think I will return back some Styles here uh I'll leave the root as it is and the media I'll just get rid of stuff in the body and then why do I have Auto completion okay here I'm going to do background color so this is the 188 188 okay black color and then the default color is going to be white okay so this is our nice background I'm going to give it a height of 100 VH okay that's for the body so let's start with the sidebar and then we do the main content so for the sidebar I'm going to create some components components components for styling it's up to you you can use SAS or you can use start components but I'm way I'm very used to start components npm it's up to you what what you use so uh styled components components okay so what we need to do now is just work on the sidebar okay so for the sidebar um let's create a oops a new folder in here it's going to be sidebar and then we're going to create another component it's going to be button okay so let's start with the sidebar let's say sa a sidebar here sidebar. TSX so this is going to be a client component so make sure you do use client at the top we're using next 13 use client okay so we should have a sidebar so uh we want to uh render the sidebar okay so where can we show this sidebar uh let's create a new folder let's name it um providers you can create it outside of this app directory that's fine but what is better to create in the app directory okay so let's go to the layout lay out in here above the children we're going to render the side Side Bar sidebar okay so we should have a sidebar right here okay sidebar so uh we need to display Flex the sideb and the main content so I'm just going to go to the page I'm just going to say main oops content wrong spelling content okay so there sideb content so we're want to display Flex so this is the sidebar and the content so to do that to display Flex we need to go to the layout so the sidebar and the children so we're going to put this in a wrapper okay so the rapper is going to be in the providers I'm just going to name it global Styles provider dot so the global sty provider you can it's a TSX file okay Global oops style provider. TSX like that so this is going to be use client as well it's a client component okay we're going to create a boiler PL like this uh we're going to create an interface interface let's name it props okay so it's going to be children in here it's going to be the react node so it's going to be our app which is going to be the children so here children and this is should be a fragment so make sure you destructure here children from props okay so we we're going to wrap our entire application with uh Global provider so if we go to the layout here we need to wrap this with the global style provider like that and then take this and WRA the children as well okay so whatever Styles we put in the global are going to be reflected in the entire application so here I'm going to say con global you can name it Global Styles oops Styles equal to styled and then dot div like that oops start div uh shift for some reason my escapee button is not working okay I'm using a gaming keyboard so it doesn't have this tempor R so I have to hold shift out and escape to do this so it wasn't working okay so you take this and put it here okay so make sure you import St from style components like this if you're using components okay so to see if this is working we can do background and then let's set to Red so as you can see now the background is set to Red that means it's working so uh in here what I'm going to do uh I'm just going to give it a padding padding padding top and bottom I'm just going to set that to 2.5 RAM and then I'm going to do display Flex display flex and then Gap I'm going to set the the Gap to 2.5 Ram as well and then I'm going to set the height to 100% let's save okay so there it is so now we just need to go back to the sidebar here we're going to do con sidebar sidebar styled we're going to style this sidebar equal to styled so for the sidebar uh this should be well I think this uh na okay we can do st. na style. na like that oops okay styn so make sure you import style from style components like that oops import styled from style components uh copy this and replace this wrapping div okay so uh what we're going to do now we need some variables for our colors so just in case we want to change this to light dark mode whatever color you want to change so what I'm going to do I'm going to introduce some variables okay so what I'm going to do for that I'm going to uh provide you with the file which has variables so some of these variables we're not using them so these are the variables I'm using for code dealer.com so this is my website I'm using so these variables here so I was a bit lazy to kind of so here we have light and dark mode okay so so these variables you're going to see here are the variables that are used here okay so now I am this website is still under development by the way so it might be a bit slow to your teste so we have lessons we have resources and stuff all right so what I'm going to do is I'm just going to take those variables which I used in the project I'm going to create a new folder not not inside components but inside app I'm just going to name this context context I'm just going to put a copy a file here called themes so these are just variables for the colors we're not going to be using a lot of these variables okay so we're just going to be using a few okay so the ones we're not using you can remove them later on okay so here is just uh an object so we have a default this should be like a dark mode that's the default and then we have a light mode you can add as many themes as you want so this this just an array of objects that has color variables in there okay so we have name color whatever okay so now uh what we're going to do we're going to be creating a global context provider I'm just going to say Global I'm just going to you can name it Global context provider or just Global provider that's entirely up to you okay provider. JS okay so now in here it's going to be client component going to be a client so in the global uh we're going to create um context for the updating and the actual context okay so here we have importing the create context and use State okay uh we also need use context so we're going to be creating export con Global should be Global context is go to create context and then export cons global global update context just in case we want to update this context and then we're going to do export con Global provider uh the children we're going to wrap it's going to be our entire application so we're going to wrap with the global provider and then here we're just going to uh return okay I'm just going to get rid of this Global State uh okay so we have the update okay so we have the context provider uh the value here is not going to be the global State we're going to pass some Val values here later on so the first one we need is theme which is going to be the variables of our colors so that's the theme that's why I'm using theme but we haven't created the theme state yet so we need to create a state for the theme okay so I'm going to say con it's going to be selected theme so the selected Theme by default it's going to be zero one because arrays are zero um zero index based so if you remember our colors is an array of objects so zero is the first object and the variables within there so that's the first theme zero if you have another theme it's going to be one the second one is going to be one and so on okay so um so we have the selected theme set to zero and then I'm going to do con theme equal to themes we need to import themes and then select the theme so by default the theme is going to be the first so the themes this an uh an array themes it's an array and then the selection is going to be zero that's the the index here in the state and then we are putting that to the state which is selected theme which is zero if we shift that to one if we update the state it's going to be one it's going to be the next theme okay so we are sending that value here so for us to be able to use these values uh we need to go to the uh providers providers uh we need to create another one called context provider because the page the layout this is a server component provider so we cannot use the client client we can use uh the client like um States like use effect or use use state in here the component must have uh use client at the top for us to be able to use that okay so TSX context provider. TSX use client react functional component and Export we're going to do interface props oops interface props so here we're going to do children it's going to be react node and then here be the children so we need to do Global provider Global Pro provider and make sure you import Global provider and then wrap the children like that get rid of the div okay so like that so now we should be able to have access to the state but we haven't wrapped our entire application yet with this context provider so go to the layout and we need to wrap this with the context provider okay so uh I'm going to do context provider like that and then wrap perfect so how do we know if it's working well if you remember in the global provider we sending theme as a value so we need to get this value the theme okay so let's see what the theme this theme is so here when we have over it shows you what it has so let's go to the sidebar so for us to get theme um we need a way for us to get oops to get this theme okay so for us to get that theme we need to create two more functions okay not we need one function to get the theme but we need one function to update and one to get whatever values here we are sending okay and for the update updating as well so for us we need to export for us to be able to use the context export const we're going to be use Global state okay and then it's going to return um use context okay so it's a function returning use context and then we're going to be using the global context okay so now we're good to use the the values we are sending here but just in case we want to update we need to do the same thing for the global update and then we're going to be using the global update context okay so for us to be able to access these values we need to get them from from use Global State okay so what we need to do go back to the sidebar we can say con let's dist structure we need to get the theme okay equal to use global global uh use Global State I hate this auto completion is issu okay glob state it should be coming from let's do at app and then slash context Global provider okay so now let's C this uh uh what issue do we have here theme okay so let's go back the theme we're sending theme Here State let's go back to the sidebar and let's click this okay this is rather weird um okay I'm just trying to see why uh the theme is not working and find okay let's uh try this uh go back to sidebar let's do context context let's see what we have context okay so it's undefined so we must have done something wrong so let's go to the provider okay so yeah this is oops context provider it should it should be Global provider provider like that the one coming from the context not Glo I didn't notice I was using Global style provider okay so this should be Global provider like that so if we go back to the sidebar if I save uh say Global okay go back so here I'm just going to set as an empty object for now okay so now if I go back to the sidebar as you can see now we have an object which is the a property of theme at the moment but we are going to destructure this we are only want to get the theme and then let's see this in the console as you can see now we have those variables for the colors okay by the way I'm using uh I'm using it I'm using um an extension called console ninja so I don't need to go to the browser to check the console I can check I can see it from here without going in the browser okay so now let's uh Begin The Styling so for us to be able to access this uh the theme Styles not the Styles I mean the variables in the Styles so we're going to pass this as is a prop in here going to name it theme and then we pass the theme we're going to be able to access it here so uh what I'm going to do I'm going to start by giving it a width okay a width and a height so for the width for the width I am going to do props okay so I'm the props that we have so we have um props uh we oop we're going to do props do theme do sidebar width okay so this is the we have a variable called cyber WID okay uh let's check it out let's inspect the sidebar to see if it has the width okay as you can see now it has the width nice that's pretty good so uh Side by with uh what we're going to do now I'm going to give it a position of relative position relative and I am going to give it a background color background it's going to be prop props do theme uh so the color I'm going to give it is going to be color bg2 color bg2 okay so Props and then the prop we want is called theme and then the variable is color pg2 and then I'm going to give it a border so the border is going to be two P two pixels solid and then the color is going to be border color border color uh color number two I believe border color two that's the variable name and then I'm going to give it a border radius of one ram like that so there it is okay so um seems like inspect inspect okay so we want to display Flex these items so the nav and the main okay we want to display Flex that so now uh we need to go back to the global STS provider so that's where we need to do uh the display Flex okay actually we have a display Flex here Global Styles uh uh let me see why it would be working inspect H Global star provider uh let's go back to the layout okay so it's I don't know why it's not working okay uh open This Global Styles I have no idea why it's it's not working but it should uh have a flex let me inspect this so okay so like this it should yeah it should have a flex which is weird I don't know why it's not working okay let's leave it for now okay actually let's try to restart this project let's see why it's not working as intended okay so let's refresh okay I think I might know why this is an issue so let's go to the context provider uh what I'm going to do is I'm going to do a use effect okay so um going to go here I'm going to create a state I'm going to say is ready set is ready so here I am going to do react to use effect so I'm only going to display when the page okay so when the page is is uh you know fully loaded so I'm going to set a set timeout set time out uh after 200 milliseconds after 200 milliseconds and then I'm going to set is ready to True okay um if is not ready I'm just going to return now and then I'm going to save okay nice so now there it is for some reason there's a weird uh thing going on with the Border I don't know why let me inspect n oh it's border right it should be border if we go to the sidebar it should be just border not border right okay so now we have the border for the sidebar um let's just focus on the sidebar content uh I think I'll close everything for now if we need it we can open it later okay so for the sidebar I am going to start with let's start with the profile let's do profile so we have profile and then we have profile overlay overlay I'm going to explain where this T later and then we have an image so so make sure you import image from next image and then the width I'm going to set that to 70 and then height I will also set it to 70 okay so for the source I am going to just put an image in the public folder it's called Avatar one you can put whatever image you want so this is temporary uh when we connect with our click authentication we're going to be using that image so here I am just going to do Avatar Avatar 1.png I think it should show now it should okay there it is uh because this public folder is already been saved so we don't need to import like that we can just do it like this we don't don't need to include the public folder okay so we have the image uh let's make sure this image is in a container image all right so after that we are going to have an H1 and then we're going to name this um uh oops let's do a span actually span where is the calculator okay I'm just going to put a fake name so we have the name and the image okay after that uh we are going to do some na items we're going to do Ur n items feel free to use uh tail in CSS by the way feel free um I'm also going to create a new folder I'm just going to name it UTS inside the app UTS um I'm just going to add a file in here in the U it's called menu so here it's just uh the menu so we have the ID title icon and Link so uh we the first item here it's an array of objects the first item is going to be the homepage the second one is going to be the input important the third one is going to be the completed and then the fourth one is going to be do it now so the icon we need to import these icons so it's importing from icons so what I'm going to do is I'm going to paste another file here it's icons so some of these icons we're not going to be using them so we I'm going to delete this later on I'm just pasting the icons in here they're coming from font awesome what we need to do is get the font awesome CDN CDN uh what you can do F awesome CDN where's the CDN okay so copy this copy the link tag so uh what you can do is you can use react icons or you can use Font awesome it's up to you so go back to the layout here we're just going to do head and then I'll just p in the link of the CDN okay so change this to like this and then save so hopefully we should have some icons oops we're not looping the menu yet so what we need to do is Loop this map this okay so we go to the sidebar we that's where we're going to do the magic of mapping through so here we need to do menu we need to import that so we need to import menu at SL app then you toose and then menu like that so I think this a default export okay so like that so now we just need to map through this do map item okay so now we need to return let's just return a div but we're not returning a div we're going to return An Li okay so here we're going to return an all you can give it a class name of nav item if you want and then in here we're going to do item do icon and then we're going to import a link from next link and then it's going to be item. link not path we're going to go to the link and then here it's going to be icon item. title I believe like that so there it is nice pretty good so um what we need to do is when I click uh this lii I want to push to the link okay I'm going to say con handle and a click and a click okay so here I'm going to do router do push I'm going to say link I'm going to push to the link I'm going to say Link in here going be a string be router so we need to import router con router equal to use router from next navigation and then save handle click okay copy this function uh here on the AL we do on click oops let's do a class name first actually so for the class name I'm going to give it a na item so let's do a template literal oops uh templ Lal and then let's do na item okay after that we are going to do on click on click let's do a cic function and then here item. link so when you click it's going to Route the item. link perfect so I'm going to also uh get the path name okay so the path name name so when I click completed it's going to go to completed so I want to get the path name okay so to get the path name I'm going to say con path name equal to use path name the path name hook coming from next navigation okay like that so um I want to make sure this give this green active here so the the pathum that's active is going to have this green green color here on the side okay so when I click this it's going to be the active one when I click this it will be the active one and so forth okay so uh path name here I'm going to do like this I'm going to say path name if path name equal to path name equal to link okay it's instead of doing item. link I'm just going to do this Con uh link you go to item. link okay like that instead of so I can just do link here so if it it's equal to link the pth name goal to link I'm going to set that to active otherwise not an empty string okay so if it's like this to this link it's going to be active if I'm on this link it's going to be active Okay and the other one is going to be an empty string perfect so instead of item. Link here I'm just going to do Link Link let's make it shorter all right so I don't think okay so uh we just need to add the sign out button it's not functional but actually we're going to add it later we need to create a button component which we don't have yet so now let's style this let's go down to the Styles let's start with the items so this I'm going to put up here I'm going to do display Flex uh let's do Flex direction to column justy content space between like that all right so I'm just going to say button I'm just going to put in empty button there okay so it's not just to put a placeholder all right so I'm going to give it a color so the color here I'm going to do color I going to do color gray three gray number three and then I'm going to Target the profile so for the profile I'm going to say margin top and bottom actually not top and bottom everywhere 1.5 RAM and then I am going to do position relative and then I'm going to do a padding one ram top and bottom and then 0.8 left and right and then I'm going to do order radius I'm going to do one r with a radius and then I am going to do cursor I'm going to set that to pointer and then font weight I'm going to set that to 500 and then I'm going to give it a color so for the color I'm going to give it a color gray zero or you can give it a color white okay I think gr zero does the job fine okay I am going to do display flex and then align items align items to Center all right so now I'm going to save this all right so let me inspect so we have the profile overlay uh use a button okay so now we need to do the profile overlay okay so I after the here I'm going to do do profile overlay overlay I'm going to do position absolute position absolute I'm going to do top zero left zero and then with 100% height 100% I'm going to do a backdrop filter I'm going to do blur I'm going to give it a a blur oops BL I'm going to set that to 10 pixels and then I'm going to give it a z index and a background and the transition and the Border radius like that and then finally I'll give it an opacity of 0.2 and a border of two pixels so there it is so it's not that bright but it's there that's it's like the overlay okay so when we have a it's going to be more bright okay nice so after that I am going to Target the H1 within within the profile I'm going to give it a font size of 1.2 Ram like that uh I think I'll do display Flex Flex Direction column like that okay I think I think that does it uh reduce I think the line it is way way too much let me check here actually we're using different fonts so I'm going to change the font I leave it as is actually line height I'm going to do 0.04 oops uh 0 seven let's do two 1 0.9 I don't know just find what you like I say I don't know ah okay I'll leave it like that okay so I am going to Target the image and then I'm going to Target the H1 I'm going to set position relative and give them Z index of one okay so for the image I'm going Target the image again I'm going to say Flex shrink I'm going to do zero I'm going to set display inline block overflow to Hidden and I'm going to give it a transition of 0 5 seconds is like that nice all right so I'm still going to give it WID and height of 100% of um 70 pixels and the actual image with width and height it's already been set okay so nice it's looking pretty good so we just need to work on the H have effect okay so from let me collapse this profile overlay collapse so we have the image okay so I'm just collapsing this so I can see where I'm going with the Styles okay so what I'm going to do after the image I'm going to collapse I'm going to Target the direct H1 uh within the uh where are we still in the profile yep so I am going to clamp the font size okay so I'm just going to clamp the font size so depending on the screen size it's going to be smaller and smaller and smaller and smaller and smaller okay so I'm going to give it the margin left as well of one ram and line height of 100% like that okay I think I'll reduce this to 0.8 0.8 but in the original I'm using I'm using one ram so it's to you like that so that's good so now we need to do on H when we have this profile it should be end H so when we have the profile what time is it when we have the profile I want the profile overlay profile overlay I am going to give it opacity of one opacity one and then the Border I'm going to set it to border two pix two pixels and then a color of Border color too like that so when we have her as you can see now nice and the image remember we are we have set the parent of the image the Overflow to Hidden so the scale I'm going to do 1.1 when you have as you can see so the Overflow of the parent of the image is set to Hidden so the image is not going to overflow the container okay nice nice uh effect so now now we have that so we just need to style the items here so I'm going to be collapsing the profile for now and then we have enough items n items okay so for the na items um I'm going to give it a padding padding uh I'm just going to set it to 0 2.6 RAM and one ram top and bottom point 6 and then actually this should be enough item the Ali the list item like this all right uh I'm going to set the padding left to 2.1 2.1 Ram like that okay so you you can set this in one line if you want so top like this right like this bottom like this and then left 2.1 like that we save the line okay so I'm going to do a margin margin um I'm going to do 0.3 Ram and zero I'm going to do display grid display grid okay so the grid is going to be the icon and the text okay so grid template columns so the icon I wanted to occupy space of 40 pixels and then one5 for the text like that okay so what we also need to do is we're going to set the C to pointer cursor pointer uh we also need to set the position to relative all right position set to relative so um what we need to do now is do an after an after oops after so when it's active actually the after think is this when we have her you know it comes like this that's the after I think this is the before s element the green thingy okay so now um I'm going to set position absolute I'm going to oops position absolute I'm going to set the content with zero top left zero uh height 100% And Z index one and then I'll give it a bit of a transition okay like that so the width is zero when we have a the width is going to be 100% okay it's going to transition to 100% okay so that's that so uh we need to do the before Su element as well okay so some of the stars are quite as similar here but uh let's I'm just going to give it a different color so it's going to be color green dark so this one green dark so it should be okay so that's the before I'm going to give it a border top radius top left radius and and Border top um and Border bottom left radius 5 pixels like that so when we have that's where the that's when the magic is going to happen okay so um I think I'm just going to tag the anchor tag I'm just going to say the font weight to 500 uh okay so when we have this item when we have I am going to set the width of the after to 100% okay as you can see now it's uh looking pretty good it doesn't look it doesn't appear to be nicely centered we're going to fix this okay so after the hover I I think before the hover here instead of keep I'm not I'm not going to keep nesting here so after the anchor tag I'm just going to Target the I tag I'm going to display flex and center and give it a different color like that all right perfect so um now what we need to do again is I an here I think I'll just I give it a transition and the Z index okay like that so um after this I am going to Target the active n item I just TG the active so we have active so for the active I am going to set the background color to active nav link like that so that's the active and then I'm going to Target the it tag so the color I'm going to say that to color icons two like that okay so it looks looking pretty good all right so we haven't created the pages yet so and then the a tag so I'll just do like this and a tag okay so icons to like that perfect so uh the other thing that's left is the before Su element so I am going to do do active do active before like that and then the width is going to be 0.3.3 Ram like that so there it is okay so we have that I think um just targ the button just going to give it a margin I'm going to say 1.5 R all right so for some reason I feel like uh it's not nicely centered is it let me inspect this it's not like nicely sent it as I like it to active Okay align items Center it's not aligned okay it also depends with the font you're using so line height okay line height L ping top 0.6 the bottom should be 0 six as well 0.6 okay so yeah uh let's get rid of uh Lite in here let's set that to zero all right I mean uh let me inspect again line height oops not the active but the anle tag n item a line height zero align items Center uh align items to Center so the items should be centered but we need to fix so top 0.6 let's do 0 7 and bottom 0.7 as well like that so it should look pretty good okay you can increase this padding actually so bottom let's let me make it a bit bigger eight so this one should be nine nine like that so you can kind of I use your eyes to kind of see the balance all right so the reason why it's different because there's a button here so if there's more space here for the button it's going to look identical okay so that's pretty much it for the sidebar now we just need to uh build these pages that we want so we're going to have important important so it's going to be a page to TSX okay use client react functional component and Export this should be important I'm going to copy this so with important uh we need another page called completed so in next it this is how we do Pages as long as you put a folder in the app directory and have a page. TSX or page as inside it will be recognized as a page and the name of the folder will be the actual route of that page so we have the completed so this will be the route completed okay and then if as long as you have page TS TSX in here we are good to go and then this should be completed completed and then we have let me check what route is this oh I've disabled the routing so it should be incomplete incomplete incomplete like that and then we should have a page do TSX and then paste it and then we're going to have incomplete like that so when we go back we should be able to route to these Pages nice okay so the active you can put the color to white if you don't like this color the current one or you can put it to Green it's up to you what you decide to use all right so let's start with um the content we're not going to do the content we're just going to do this background here for that let's go to the layout so in the layout uh first of I'm just going to close everything layout okay so in the layout what we need to do um I'm going to set this with to 100% all right um I'm going to put a div here so the width I'm just going to say width I'm going to do class I'm going say width full so this utility coming from T and CSS so it basically means width 100% so the width is% right now like this with four okay so uh we need to kind of uh give it a background so here we're going to Target so the main that's what the background is okay I just copy this color here let me check again okay so the Overflow Alo okay so for this one uh we need to create a component which is called tasks okay so the tasks are going to have this background here okay so on each page we're going to render the tasks so we are going to go to components and we're going to create tasks tasks and then in there we're going to create tasks to TSX and then react functional component export and then in the H page we're going to render the tasks okay like that so the Tas tasks it's going to be dynamic later on so here we have the tasks uh we are going to say con oops not in here here but in the tasks H tasks styled equal to styled make sure you import style components and make sure this is a client component use client I'm going to copy the task style and I'm going to replace here and then I'm going to save all right so now we should have tasks here what we need to do is sty this so to start this I'm going to give it a width of 100% uh we need to get the theme which is our variables theme from equal to use Global state is This Global State yeah and then let's pass this as a prop so we can have access to it down here and I'm going to set the background background color to props and then it's going to be color bg2 and then I'm going to set a border two pixels border color number two and then I'm going to give it a border radius one ram and then a pading a pading of pading of two RAM and then I'm going to set overflow y overflow y to Auto you're going to see why we're setting to Automatic Auto and then I'm going to get rid of the scroll bar so I'm going to say this 0.5 frame the width okay so now there is our tasks tasks tasks okay so now now let me see height you can say that to let me set this with full wait a minute wait I to say the height all this should be here right anyways um task task task task task okay so by the way the height should it should just be full already I don't know why uh inspect ah I think I know why so if we go to page we just need to return the tasks like that so the tasks we can wrap it instead of a div we can make it a main like that all right so now we have the Tas tasks uh what we need now I'm just thinking what's next okay so now yeah what we need to do is do we can do authentication authentication so to the authentication uh we need to use click so I'm going to open a new terminal here so let's install click so let's see what click is Click so click uh it's a way for us to do authentication so to install click we need to copy this that's the first step and then we install clck so the next step is setting Environ environment variables okay so we need to create EnV do Loco in the root here do e NV local like that for some reason sometimes it gives me an error while I'm trying to install something I don't know I think it's a internet problem now it's working okay so now we have click uh we have to create um environment local and then the next step would be to create a provider it should be called clck provider or o provider you can name it whatever you want I'm just going to say o provider provider. TSX okay um so the next step is import and click like this and uh we need to wrap up with the click provider which is going to have like a click O Okay so uh let's start with actually to make it easier we don't need to uh create a separate file for this we can just do use this directly uh get rid of oops get rid of this let's go to the layout like that and then we just need to wrap our entire application with the CL provider okay so even the HTML should be wrapped all right I'm going to copy this and I'm also going to delete this terminal like that so we've wrapped with clck provider okay so now it's working uh let me see I don't know what's the issue uh if there's an issue I think we might also want to restart this project because we did not restart it npm runev all right and also I think the next step would be actually we need to create a middleware so we need here to create a file here called middleware TS like that so that's the next step and then let's just copy this this for pro uh Rod protection okay so let's save this save let's go back so now it's not going to work because we don't have a secret key in the in local so let's go to docs for click and then click dashboard make sure you create an account uh I have already an exist some projects already existing so create a new application add application I'm going to say my tasks like this uh you can click as many providers as you want I think the limited you have is three providers if you're using a free free tier in this case I am going to be using Google and email that's it I'm not going to use anything else so you can show more you can click whatever providers you want to use for signing in I'm going to create the application and then I'm going to copy the P the public key and the secret so I'm going to change this to don't use this and I'm going to P paste here for the secret key um let me check the name is should have okay so yeah it's already there so now we have the secret so it should it should send us to the login page okay so now when I refresh we're in the login page we're not going to be able to access to access the root page of our application so what we need to do now now we need so if we go to the middle you can see all the routes are protected so what we can do is we can set a a public uh public middle so public not public middle public route uh routes so if you want the homepage to be public you can set it to be public okay but in this case I want the hom page not to be public so this is fine I'm just going to get rid of these comments uh I'll get rid of the comments so the home page is protected okay so what I'm going to do I'm going to have a sign up page and a sign in so I want this to be in a signin page so what I'm going to do is I'm going to create those pages so I am going to create a signin signin page page. TSX oops react functional component and Export use client this should be sign in signin page oops I'm going to copy this I am going to create a new page it should be sign up sign up I am going to say page to TSX and then I'm going to say sign up page okay so the sign in um what I'm going to do I'm going to go to EnV local EnV loc you can put random stuff here it's fine uh EnV local I'm going to say next next Public public I'm going to do click and then sign in sign in url so the sign in url for this one is going to be what did you name it it's going to be sign in okay so it's going to be slash signin sign in like this that's going to be the sign in Euro so instead it's not it's not going to be using this random page it's going to have our own URL sign in url and then uh next public CL sign in Euro and then we have sign out sign up so this should shouldn't be sign out it should be sign up sign up so this should be sign up uh is this sign up yep sign up and then we have after sign up after sign in uh let's go to the homepage or you can just do slash like this and then we can do after sign out we can do to we can after sign out um oh after sign in and after sign up we can go to URL like that okay and then redirect public no no no I don't think we have a sign out do we after sign out I think we have a sign out so we're going to do login or sign in sign in sign in like that okay so let's save this so I'm going to go to Local Host 3000 so it should be sign in okay signing page sign in why is it showing the okay sign in page but it's not showing the form uh I don't know why it's not showing the form here the sign in sign in so uh I'm going going to go to layout I don't want to show this side bar uh do not want to show the sidebar okay so I'm going to do a condition I only want to show this sidebar when there's a user signed in okay so what I'm going to do I am going to get the user ID from out so this is a server component so we're able we're able to do this like con user ID equal to out out from uh click okay so we need to import out from click okay so like this oh like that so us ID so if we have user ID that's when we want to show the sidebar okay so the sidebar is not there for some reason uh did not see the form okay let's go to in local let's just check if the names are correct send in url uh make sure these URLs are correct this the environment uh environment environment variables are correct so I'm just double checking to see if they are correct URL okay let's save this let's refresh okay sign in page it's weird I don't know why it's not showing so for the secret uh get rid of this and then just put something random here like that so now let's try to refresh this restart the project since we've updated the EnV local okay so I'm going to go back to the Local Host 3,000 uh I don't know what's going on here okay okay I think I think I know why uh let's go back to the page so we have the sign in we need to import the component I forgot to do that so here we need to do sign in sign in from clck like this import the component the sign in component and save so we should have a sign in component here there it is okay uh we are going to be styling this later so leave this da for now because we're going to be using this for styling so we have the sign in uh when I do sign up we don't have this component we need this component as well so if we go sign up oops we need sign sign up like that save so we can switch between sign in and sign up sign in and sign up okay so now we need to sign up go sign up continue with Google and then I'm going to use my my email so if you have any questions you can email me for some reason my connection is really slow today so that's why it's taking forever to do anything that requires internet uh Let me refresh so slow okay so I just realized I had copied the wrong key so it was set to the code dealer so just change it to whatever application you're using in this case if you have only one application you don't need to change anything it should be probably be working by now so in this case I'm just going to change it to the correct application and then I'm just going to copy the correct key so as you can see the key is changing okay so I'll copy the correct one and then I'll just replace here and then just go to the sign up page I've already signed up uh with my Google account I'm just going to refresh this uh it should be able to work in a minute okay so I've already going to sign up and sign up with my Google account so you should be able to log to sign up don't go to sign in go to sign up to create an account first and then you're going to be able to log in like this okay after that you're going to be able to log in after you created your account so now here's the main page homepage so we need to start by creating uh we need to be able to create this tasks okay so to do that we are going to start with inst I'm just going to stop the project uh we're going to install a few things so we're going to run npm I at Prisma SL client I I'm pretty sure we've installed this in the beginning I can't remember but it's fine we can reinstall it and then we're going to also install um I think Prisma only Prisma with the client okay like that uh let's do at latest like that and then let's hit install so hopefully it should take only a few seconds okay that's that's that's it so if we go to the Prisma Prisma in it so we need to in initialize uh our data source which our database so we're going to be using Prisma and mongodb so the data is going to go to mongodb so we need to run Prisma in it uh okay we need the one that include a data source okay so copy this uh there should be init uh it's not here init it's taking ages to load data source anyways like this so you copy this Prisma in it initialize we're going to initialize the data source we're going to say that to mongodb not SQL and then just WR mongodb DB and it's going to generate it's going to generate a EnV file as well as a Prisma folder so in the Envy there's going to be the database URL don't change the url name what we're going to do is just going to mongodb mongodb so when you go to mongodb uh this is the wrong side mongodb okay it's taking AES load okay so go to sign in sign in sign in uh with your account and then go to database click connect copy the node URL copy that if you copy just paste it here and then put your password okay put your actual password and then after here you put your database name instead of my DB just put the name my tasks like this my tasks and then uh just put your url here and then it should work but now uh what I'm I'm going to do I'm just going to put my own URL off of this screen because it's my personal URL I I would want to change the password again after this so um I just pasted mine okay so I've pasted mine all right now so we have the in view file with the database URL so after we've initi initialized uh the data source to mongod DV uh the next Source uh the next step is to generate but only after we create a model so here we're going to create a model uh let's name it uh what should we name our model let's name it task task you can name it tasks whatever you want let's name it task okay or post so uh I think I just name it task and then we are going to have an ID it's going to be string string and then we're going to map this like that and then we have the title description and then we have date the date is also going to be a string okay okay so we have uh ID title date description and then we're going to have is completed it's going to be a Boolean false by default and then we're going to have is important so it's going to be also a bulling and default is going to be false as well okay and then we're going to have created it dat time and then updated it and then we're going to have the user ID which is going to be the ID of the currently signed in user okay uh it's going to be a string as well all right so that's it for this one we just need to run npx npx uh Prisma and then we're going to do generate like that okay nice so now let's go to MPX Prisma for Studio let's see what we have I'm going to close this okay so we have the task task model as you can see now we have all of the fields we don't have anything yet okay so we need to start by creating an API folder uh let's name it a it should be in the app it should be API and then we are going to have task H tasks we're going to create a route. TS in there all right so we're going to have a few functions in here so we're going to export U export async so the function we're going to have in here is going to be post let's start by post post first and then we're going to do request it's a request object not request but request like that and then I'm going to have a try catch and then here we're going to have CG we're just going to say error creating task like that and then we're going to return and new next response like that uh I don't know why I have let me check to see why okay so we should have an error in here oops error so for the error I'm just going to say error creating task all right and then I'm going to have a status okay next response all right so now uh we're going to see uh why we're getting the error it should be next response. Json actually next response. Json so let's save it all right so instead uh uh error creating task yep now uh we need to duplicate this so we are going to get error getting tasks getting tasks uh after get we need to put we can make some updates error updating updating task task and then we're finally going to have a delete error deleting deleting task all right so now creating updating okay so now we have the methods that we want so we have the post get put delete okay so let's start by creating some tasks okay so uh the only way we can create is if we logged in so I'm going to D structure we're going to get the user ID user ID from out that is coming from CL like that that's how we get the user ID so if we don't have the user ID if not user ID it's going to be unauthorized okay so we're just going to return we're going to return a next respon response so this it should be Json like that it should be unauthorized okay if so we're going to get uh the title we're going to title this description date okay so we have the date uh we have completed completed and we have important important title description date completed important okay and then we're going to do a wait we're going to do request tojson like that okay so uh let's do some validations you can do these validations one by one but I'm just going to do them in a single block so I'm going to do if if no title description or date I'm just going to say missing by the way it's remembering what I'm uh what I've done in the original project so missing required Fields okay like that so after that uh we need to do if if title do length is less than three length is less than three uh we're going to do title must be at Le three characters long okay and then finally we are going to create the task we're going to say task equal to await so for us to be able to create we are going to be using uh Prisma for us to put the the date in the database okay so what we need to do is we need to create a folder in the app let's name it U oh I've already created the folder okay so let's go to U we're going to create a new file it should be connect so this is what we're going to be using to connect to the database okay TS like that so we're going to import Prisma client so I'll show you the documentation input pleas client so here is how we do it so to set a new client so we're going to import Prisma client and then we're going to say let Prisma and then we're going to say that to Prisma client okay so uh now what we need to do is we're going to check if if process do EnV do node EnV equal to production we're going to say Prisma new client like this we're going to initialize a new new client else else we're going to say if not Global Prisma and then we're going to also initialize a new client we're going to set the global to the Prisma I'm going to set the pisma to the global okay now uh we have an issue uh let's see if it's not working we're going to fix it later by the way we're going to export default Prisma uh Let's ignore this the type checking here uh we can ignore here here you know so we shouldn't have warnings anymore so now we are going to import in the in the in the root we're going to import Prisma so const task equal to await Prisma it's remembering what I was doing in the original project await Prisma so we need to import the Prisma from Ms task. create so make sure it's Auto completing here when when I do uh Prisma when I imported Prisma when I do dots it should show task okay or whatever name you you give into your model okay so make sure you're importing here from import Prisma from mws if you export it as default you should import it like this or as a modu you can inut like this okay uh let's go ahead and create a new task okay so to create a new task we have everything that we need uh here we just have to do data so the data we're going to put in the title the description I'll get rid of the user okay uh I'll save so it should be uh completed important so what did we name those properties oh the code is is completed we say that completed and then we have is important we said that to important and then finally we have the user ID where we don't need to do like this user ID because they have the same name so we can just leave it like this like user ID so the user ID is coming from whatever current currently logged in user from the cler okay so we have that so now we just need to return and next response tojson the status doesn't matter here okay uh we can just do like this task like that okay so we have a way a method to create this task the task so now we need to put this to the test so we need to create some components for us to be able to to create this we need to create a front end component so for us I'm just going to uh go back to the app I'm just going to put a form for us to be able to create okay so um just thinking uh what component did I use okay so I'm just trying to think what component I've used H I'm just trying to think okay okay okay okay okay so I'm just going to create a new component I'm just going to say model models like that I might be able to create a dynamic model but I just okay I'll just create it in here create content content create content. TSX uh create content yep it should be use client a client component use client it's a functional component we're going to export and we're going to go to the page the main page instead of returning only the tasks I am going to return a fragment okay a react frag doent and then here I'm going to tasks T actually no we are going to go inside the tasks in here I am going to say create content like that so I'm going to render the component that we just created so I'm just going to stop the Prisma client from running um Prisma Studio not client so we're going to run mpm runev mpm run Dev so let's wait for it to load so while we're waiting I was thinking to do the inputs in the global state but I'll just do it here to make it easier for you and quicker than doing in the global state in the context so I'm just going to do con title just to make it easier set title so make sure you import use state from react so we have use State okay um use title and then we need the description we need the date we need the completed con completed completed and then we need the important important okay so all right I'm just doing this state in an easy way in an easy way to understand okay and uh we have the we have the state for all of our inputs okay so now we have the the tasks that's still showing I think we need to refresh the page right uh oh it's on 3,1 because the original project is running on 3,000 uh why is it asking me to sign in continue with Google all right so now I am in the application so so it says create content here so we need some inputs uh for us okay so we are going to create some inputs we are going to be making this as a form I guess let's make it a form okay and we're going to have I'm not sure if we can put H1 in the form uh create a task and then we are going to have input control input control it's a div and then we're going to have a label label it's going to go to the title and then it's going to be title that's the label and then we're going to have an input input and then this input is going to have a bunch of things so we're going to have a value the value ID let's set it to title and then it's going to give a value the title which is the state value and then type it's going to be text and then name it's going to be title and then on change uh change I am going to do a handle change handle change I don't have this function yet but the name of the uh the event it's going to be the title okay so handle change we're going to change the title we haven't set the handle change yet and I'm just going to do a placeholder placeholder uh I'm just going to paste in a generic quick Place holder in here all right so now we we have that type we don't need to type it's already here okay so now we have the input input control we just need to duplicate this a few more times uh duplicate so we going to have description for the other one okay so I'm just going to paste in so the description is going to be a text area so description it's going to be a text area instead of an input okay and then put the rows to four I'm just pasting it to speed this up and then we don't have this handle change function yet so make sure the name matches the state okay the state and we are also going to have a date so the the value is going to be date on change it's going to be handle change of the date both we set it to a string the type is going to be a date as well and finally uh we are going to have we're going to have an input control get rid of this and then completed we're going to set that to a string okay so here it's a Boolean completed for so we're going to set that to a string and then we're going to send that as a string okay completed so make sure the name uh it matches here okay so the name and the handle change matches and the state matches as well and the ID match make sure this three things match okay so this is a check box by the way we're going to be triggering true and false okay and finally we have the 14 we have the one for so instead of completed so this one should be important important like that okay so the only thing that's me missing is going to be the submit button okay dot submit ptn okay we're going to do button type submit next time type submit okay and then we're going to just say submit it doesn't matter if I'm using a span okay so now let's refresh this hand change is not there we don't have this function yet so let's go ahead and create the handle change function okay so I'm going to do const handle change so the handle change we're going to be it's going to be a little bit little bit Dynamic so name String and then we're going to also take the event I'm I'm just going to do a change event like that or you can do any okay uh this is be a bit messy I'll just do any okay so uh now uh we're going to run a switch okay so the first one is going to be we're going to switch switch name okay so based on the name we're going to you know dynamically do the input so we're going to do case title we're going to set the title to e. target. value and then we're going to break and then case description we're going to set description okay we're going to handle the change for the description we're going to get the it. target. value whatever we're typing in the input we're setting that to the description okay and uh we have date same thing for completed all right and same thing for important and default we're just going to break okay so what we're doing the name the name which is the the name we set here so the input is a name so the name is going to be this one okay so the name of the input is date so name if the name is date so name is date and also name make sure it matches here okay and then if the name is date we're going to get the input for the date if it's completed we're going to set completed like that so now we should be able to have handle change working but seem to be not working currently uh let's refresh uh nothing okay so the handle change doesn't seem to be working at the moment uh let's see why and a change okay so yeah we are using all of our state values all right let me try to let's try to see so okay so for some reason it's not showing in oh because the color is white okay it's working but uh the color is white okay so yeah it's working don't worry it's just the color is white set to white but it's working so what we need to do is a way to submit this so we we have a post method if you remember so for us to handle the requests we need to we're going to be using xos so we're going to do npm I xos all right so now we need to do con we're going to handle submit okay so for the handle submit we're going to do e do prevent default like that okay um this should be a form okay and on submit we should handle submit okay so when we submit we're going to run that function all right so now let's save so what we're going to do uh we're going to take the state values all of those values we're going to do const task all of the state values we're going to put them in an object and then we're going to send them title description date completed important okay so it's it's an object and then we're going to send that object we're going to do a try catch uh we're going to say cons r equal to await await exos post uh we need to make sure this is an async async okay it's going to be a API tasks okay uh make sure it should be API SL tasks or whatever name you've named yours tasks okay uh I'm going to say if uh response do data do error if we have an error we are going to do a toast we need to install react H toast react hot toast uh this one okay documentation uh copy this install go to the terminal we install react hot toast so we have toast we're going to do toast oops toast do error so make sure you import the toast okay here import toast from react hold toast okay we we're not going to be able to see anything yet because we need to kind of wrap our application with the toast provider okay uh what we can do uh let's go to the documentation we just need to import toaster like this and and we can go to the context we can edit in the context actually context provider uh we can like this and then we can do a toast uh here toaster like that so it should be able to work if you have any errors so uh let's go to the application create so now we can do an error here toast do error we can do something when wrong like that and then we have to conso the error okay so after this we are going to do uh if actually I will just do a success for now and we're going to do some conditions later okay so now we should be able to create a task let's see if we have any errors at all we're going to find out so I think let's try it I'm just going to put random data date I'm just going to put something random like that I'm going to submit okay it says task created successfully I don't know how I'm not sure about I'm not so sure about that but let's console the task if we create if we create something um let's CG task I'm just going to put some random data here submit again okay seems like we're creating a task and the user ID is being added as well so yeah we are we are indeed creating the tasks we're creating the task uh what we need to do now is fetch and display the task tasks so fing the tasks uh it's not that it's not that difficult to do okay so we just uh do a get request and then do and then display the task so we're going to mainly do that in our context and then we're going to display our tasks okay so I think for now I'll take a break and then I'm going to continue okay so now let's work on retrieving our tasks so now we can create the task tasks so we need to to retrieve the tasks go to the rout and we're going to go to the get get function here so we just going to do the standard we're going to get the user ID user ID coming from us and then here we're just going to check if we don't have the user ID we're going to retrieve the tasks uh linked to this specific user who signed in okay so we're going to say con tasks equal to tasks a wait Prisma do tasks task. find manyu so this is the task model so we need to find manyu where the user ID matches the current currently logged in user okay so we're just going to say where user ID okay so we're just going to get the logged in user okay so let's by the way let's run I'm just going to stop this go to the terminal let's run uh Prisma Studio to see if we have our data in the Prisma studio so I'm going to refresh okay as you can see our data that we created is there okay so now we just want to retrieve that data so here we can return uh these tasks okay so we're going to return next next response and then the tasks okay so we need to do a get uh on this endpoint here on the tasks endpoint so we're going to do that in the context because we want to access the data anywhere that we want to so I'm going to go to the where's the context context context yeah so let's go to the global I think we can do it in the global okay and um I'm going to create a few functions let's start with uh getting all of the tasks I'm going to say const all tasks tasks it's going to be an async function Okay so all tasks I'm going to also have a loading State here I'm going to say con is loading is loading okay so here I'm going to do a try catch and then I'm going to set loading to True here and then I'm going to say con uh result equal to await await exos but we're going to do do a get method so make sure you import exio we're going to do a get method so/ API and then tasks so let's make sure exos is imported like this okay and um so the result uh what we're going to do is we're going to create uh a state for the tasks okay uh we could have used um we could have used a different way to handle this data okay we could have used a use reducer or something okay and then we're going to say const uh let's do tasks tasks okay so it's going to be an empty array or in initial um here we're just going to put the data in the array so first off let's see what we have CG response to data let's run a use effect here so react react. use effect uh use effect like that and then on initial render we are going to run the O task function okay so we should be able to see something in the console uh I'm going to inspect okay and there it is so we have an array we're getting the items or you can you know if you're using console ninja you're going to be able to see this in here okay so we're getting the data uh we putting that data into this array um so now we just we're just going to update the state with the actual data okay and then we're just going to set the loading to false uh let's console this error and then we're going to do toast toast something went wrong like that an error all right so now um actually we don't need this now uh we are going to send this data in here not select the theme but in this case we want to send the tasks in here so we're going to have access to the tasks in here since it's in the context so now let's go to the uh tasks okay here so we have this create here I'm just going to get rid of this we're going to create a model for that okay so here we are going to start with the title so we're going to create an interface interface uh we're going to have a title title is going to be a string and then we're going to have tasks tasks I'm just going to do any for now okay so now uh we are going to display and H1 here and then it's going to be the title it's going to be the title No Time title because we didn't destructure here we need to destructure the properties and then we're going to display the title here okay so now we've displayed the title I'm just going to create a div I'm going to name this tasks tasks and then give it another class called grid as well okay like that and then we are going to get the tasks uh we're getting the theme Here we need to get the tasks as well like that uh why do we have an issue oh wait is it tasks so wait we need to give this a different name um we don't need to get it from here actually we're going to pass it somewhere else uh wherever we're entering this task component okay so here I am going to map the tasks tasks and then I'm going to return a task okay so in this case we're returning a div but I'm going to create I'm going to create a new component called task item task ask item. TSX it's going to be a client component use client react functional function uh we are going to go back here instead of returning a task div like this we're going to return a task task item okay so for this one I'm going to do task. ID like this okay so also here we can do I think we can do this and then we just spreading all of those properties okay we're just going to go to the task item uh we're going to do an interface okay interface uh task should be let me check well it's an object okay so here we're going to get these properties okay say it does not exist on type task task task uh let me double check task item task okay I don't know why it says that let me PR to any for now uh let's see uh in the task item we're going to show display this data so we have an H1 which is going to have a title and then P description and then we're going to have a date a date okay so this this statee is not going to be formatted uh tasks it's undefined because we did not pass the tasks in here so what we need to do is we're going to do con tasks tasks equal to use Global State and then we are going to pass the tasks in here all right uh is it Global state or Global context can't remember yes Global state so what's the issue okay so this should be a client component use client use client all right so the error should disappear now so now as you can see we have the task but we're going to format this date in a different way not like this okay so we do have the tasks uh let's go back to the task item task item um the date I'm going to give it a class of date class name date so let's see why we have an issue here uh okay I'm just going to leave it it any I'm I'm quite new to sub script so I don't know why it's complaining okay so now after the date we're going to go on the footer I'm just going to name this task footer task footer I'm going to have a button in here button and then it should have a class class name of completed completed and uh is should have te text of completed completed all right and what else so this should be is completed okay instead of doing this I'll just get the individual properties from here title string description date this should be is completed is completed okay uh we also need to get the ID which is going to be a string all right uh okay I'll get rid of this okay so I'm going to do a conditional here so I'm going to check if it's completed or not completed okay so it's a conditional Rend of this button here I'm going to cut this I'm going to say is completed okay if it's completed I will do this button else it's going to be incomplete uh be incomplete incom incomplete not incompleted so incomplete so we have completed and incomplete incomplete not incompleted incomplete like that okay so if it's completed it will show this otherwise it will show this okay um after the after that we are going to do a few more buttons so we are going to have uh Let's do let's do edit edit uh and then for the edit we're going to have an icon code edit make sure you import this icon from 's icons okay so we have edit edit so this should be a button instead of a div button edit and then we're going to have a delete uh but button delete and then we're going to have a delete icon delete I think it's called trash so we import the trash icon and then we save so we should have those icons okay uh for some reason the text is not showing let's refresh this I don't know why it's still not showing so description okay seems like we have an error somewhere so here I'm going to pass those properties uh pass those properties like that and then I'm going to save okay so now those properties are showing great great so now it's only a matter of styling let's start with um let's let's give it a title shall we so for for the title I'm just thinking what what title we should give this let's name it all tasks okay all tasks and then let's let's go ahead and style this all right so for the styling we are going to start with let's start with the H1 H1 I'm going to give it a font size uh wait oh I could have SW we had done the before element before the green thingy I think I've removed those tiles by by accident but any I'm just going to paste those tiles so here we're just going to uh copy this and then we've done we have done this H1 before by the way I've accidentally accidentally removed these tiles I think and then position to relative and then after is this green thing here I think I removed by accident okay and uh next tasks so next what we want um tasks uh okay tasks we need to do a grid okay but after after these tasks I am going to do a create task create task okay and then we're going to have a plus plus icon make sure you import the icon and then we're going to do add new task add new task like that so this should be a button like that and uh there it is add new task okay so what we're going to do now let's do the Styles uh let's start with so here we're just going to do a create task Styles we're going to do the other ones in the global so create task okay so the create task is going to be let me go to Local Host 3000 uh continue with Google so the so the task going to be this box here okay that's going to be for creating a new task so to create task I'm just going to give it a dis play flex and Center everything and then I am going to give the Gap Gap it should be something like 0.5 Ram oops 0.5 RAM and also I'm going to give it a height height I am going to set that to 16 Ram okay and the color and font weight and a border radius and also a border of three pixels all right so it should be something like uh like this okay uh I don't know yeah okay so sometimes it's taking a while to retrieve the user so this is the box like this okay so let's uh we've done the styles for that I'm just going to give it a h effect and H on H I'm going to set to gray five and the color to gray zero like that so let's see when we have like that but we need to give it a transition let's give it an ease transition 0.3 seconds should have like a nice transition all right so there it is we have a nice transition uh what we're going to do now is we're going to style the grid okay so the grid we're just going to put it in the global provider so Global Styles style provider I'm going to do dot grid so here I'm going to say display grid okay so I want the grid to be responsive I'm going to say grid template columns I'm going to do repeat and then I'm going to do Auto auto fail fail and then min max the minimum width is going to be 300 pixels and then it's going to automatically you know resize okay and I'm going to give it a gap gap of 1.5 Ram like that you can give it whatever Gap you want that's entirely up to you all right and uh yeah that's it for the grid uh we need to see what we also need to starty go back to the tasks uh we need to style the tasks tasks okay um let's start with uh tasks so let's let me check this one should have it's loading the tasks okay so the task item is what we need to style okay I need to give it this style here so uh we need to go to the task item and give it you know the Styles so task item con task item styled so make sure you import start components like that and then you are going to replace this I'm going to give it a padding a background color of color icons number two like that and then uh we are also going to give it a box Shadow a box Shadow like that and uh there's is okay so border set to border color two but color two seems to be wrong okay let me check to see why the Border color to is not working uh for now let's just do the styles height 16 RAM and then we're going to display flex and give it a gap okay so there's an a gap here okay so now we need let me check to see why what a color to I'm just trying to see if I this in my variables border color to okay it seems like I do have border color to but let me inspect see why it's not working okay so the background okay because we did not include we did not include the theme the theme prop okay so we don't have access to the colors const we're going to do theme I'm going to use Global State and then I'm going to pass it as a prop Here theme and let's save we should be able to see what we have okay uh the other thing that we need to do now I am going to let's go to all tasks let's give it margin top margin now let's do two R top and bottom and then zero left and right let's increase this to four wait tasks styled task styled okay so what we need to give this is should be the tasks so we need to select the class tasks like that uh in this case we're going to put it back to two okay or 2.53 I don't know that's entirely up to you okay so now uh we just need to give it a bit of spacing this one should go at the bottom here so what I'm going to do uh for the I think I will uh create I'm just trying to think how I could put it at the bottom task item okay H display let me inspect this it should have imine zero Auto somewhere okay so the date it is margin top to Auto okay so task item date date margin top to Auto so it's going to have leave spacing for you know in between here okay as you can see now we have the spacing okay so that's what we're looking for so we need to format this state like this instead of like this okay um so for us we're going to create a new utility utility function to format the date I'm going to say format date tojs Okay so we're just going to use this to format the date to whatever date that we want okay uh like what I showed you so that's how we have to format the date so I'm going to say export second we're just going to export default format date okay and then we're going to pass in the date we're going to format here okay uh for us to make this easy we're going to be using moment npm I moment so moment is a package that can be used to format dates okay so here we're just going to return moment and then we're just going to pass in the date we're going to format so we're going to do day month and year like this so that's how we're going to format the date and then we're just going to export default here export default for my date so uh let's go back to task item where we have the date here we just need to import format date format date and then we just pass in the date not as an object so we just need to import that uh it should be format date and it's exported as default okay so we should have the date formatted uh okay so here's the date it's formatted to our liking all right so now we just need to style these other stuff here so let's go back to the task item and style the rest of the items there so uh let's start with the H1 okay so we have the date let's do H1 H1 I'm going to give it a font size of 1.5 R and a font weight of 600 you can give it the color you want and then I'm going to select task footer here I'm just going to do display flex and Center align items to Center and give it a gap of 1.2 RAM and then I'm going to Target the button in there I'm just going to give it a border none and outline of none and set the curer to pointer and I am going to Target the icon icon I'm going to give it color gray too and the font size of 1.4 all right so let's refresh it's taking ages to load my internet connection is really slow okay so now we just need to display to set the edit actually to give it a margin uh left of Auto okay do edit margin left to Auto like that um so I'm going to Target the incomplete do completed and is it incomplete do incomplete incomplete I'm going to say display inline block and give the padding a back color and the Border radius okay so the other thing that I want to give it is going to be different colors okay so by default said to danger but want to change the completed to Green completed it should have color green back green dark like that okay so there's our tasks so we have in it's wrong spelling for incomplete so it should be incomplete incomplete like that and we need to also what do we need here okay I'm just trying to see okay we haven't added the sign up button yet we're going to add that later on okay so we have a caser to pointer so when I click here we want to toggle a model okay so first off I'm going to change this font to make to match whatever font I'm using here okay so the font I'm using there uh let me double check what the name of the font I'm using so it's called n nunito Nito I don't know how to pronounce it so here we are going to import it instead of enter it's just n like that and then Nito Nito okay so we have sub subsets it should be Latin as it is um we need the font weights so we're going to do weight so I'm just going to do all the way to 800 all the way up to 800 I don't know if it is 900 so let's leave it up to 800 like that make sure you put a comma and then subsets should be Latin yeah and then here instead of iner it should be Nito so that's going to be the font size not the font size I mean the font family okay so now as you can see it's using the correct font family so what we need to do now is um let's start with the sign out button sign up button so it's in the sidebar okay so sidebar I'm just going to close everything make sure it's clean components it's going to be in the Side Bar okay so here in button it should be a sign out button we're going to create a component for the button okay so button I'm going to do button. TSX it's a client component use client react functional component and Export so this button is going to have a lot of properties okay let's start with an icon icon is going to be optional it's going to be react. node react node and then we're going to have name name it's going to be also optional it's going to be string and then background background it's going to be optional I'm just going to paste in the rest of the the properties but so we have the selector and then we have the padding optional border radius optional font weight optional font size optional so everything here these are the properties that we so we have the double click okay we don't want the double click actually uh we are not going to use a blob are we so we don't want this blob here we don't want that the Border okay uh we don't want this property or this okay so I think these are the properties that we want here we don't this uh select a property as well okay so now I think we have the basic so the type we going have submit type of button or reset okay so here we're going to get the properties the structure why is it not Auto autoc completing okay uh we got the properties so now we are just going to utilize those properties first off I'm going to get the theme con theme Global State like that and then we're going to pass the theme Here theme equal to theme okay and uh let's do Style what is the issue here what's the issue I don't know what the issue is about and then we just set those properties to the Styles okay uh all right so now we just set those properties padding and then we're just setting to the padding so we can do a default padding here as well okay this a default padding if we don't set one a border radius we can give it a default border radius if we don't set one okay but uh I don't think I need a border radius by default actually we can have one so the font weight let's set it 500 by default font size uh we can leave it as it is border like that I think that would do it why do I have an issue here because there's no comma okay so we have default properties so here we're just going to get rid of this and then we are going to put in the if we have the icon only if we have the icon we're going to display the icon and then we're going to have name name span actually I was thinking to do a blob let me see if I did no I didn't do it here so this it's not necessary I'll save okay so what we need to do now uh let's do con button styled like that and then I'm going to copy like this uh make sure we import styled like that and then we save so we should uh wait where are we supposed to render the button again okay so in the sidebar here we are going to render the button okay so I'm trying to think uh because we're going to be importing a button as well from we're going to import it from um clar okay so I'm trying to think how I'm going to display but I'll just do this um sign out sign out and then it's going to have a position of relative okay and then I'm going to do button in here the component we created button like that and then we just need to pass those properties that we created so I'm just going to paste in those properties so we have the sign out the name uh select a button login I'm going to get rid of the selector and then we have the padding border radius font weight font size and then I'm going to pass in the icon prop icon equal to I'm going to do log out icon and then on click we don't have the sign out yet I'm going to save uh let's refresh we should have a button so there it is there's the sign out button okay so uh we are going to sty that all right I'm just trying to think okay M 1.5 R okay so okay we need to give it margin 1.5 frame so M margin bottom 1.5 FR how many is this yep mb6 so it should have mb6 for margin bottom 1.5 r like that mb6 okay so now we just need to go ahead and start this button okay uh I think we need to give it a left as well so we have um so we have a padding for this one so padding but imine so it should be everywhere so M6 then around it should be around so it should be M6 okay so now we just need to go and start this pattern so we go down here yeah let's start with the let's give a display Flex let's start with the position position relative we could we could use some St um some tail in CSS by the way position relative and then I'm going to give display flex and align Center and then I'm going to give it a color overflow of hidden actually we don't need the Overflow because we're not going to do some effects I was planning to do some half effects on the button uh there it is it's looking pretty good so far and then I'm going to Target the icon I'm going to give it margin right of one ram and then I'm going to give it a color of white or you can give it gray zero to I think I'll give it color gray zero to make it not that bright let's do gray three let's see what we have uh seems to be not working okay so the theme prop is included here I'm going to inspect to see why the color we 900 okay for some reason the color is not showing okay color gray three Oh wrong wrong spelling okay I think I'll also do the text uh did I do color here click okay so for the click we're going to do on click we're going to say that to click type uh we need to set the type to type okay uh we didn't do the color so let's do the color in here instead so color uh instead of color white let's do gray color gray to I think okay and uh when we have her we're going to let's do a transition transition let's do ease let's do in and out actually and then when we have a we're going to set that to gray zero uh man connection is like really weird for me all right as well as uh the icon so we want the icon to also change color okay so now we should try to we also need to do this transition in the icon itself uh let's do sign out sign out clck uh oh the sign out is here okay okay okay okay user button so in the user button that's where the sign out is so if I click here uh in the original here so the sign out is here so this one okay I can make it trigger this one okay we don't have a sign out method I'm not sure if we have one I think we do have one so we need to to import the sign out so sign out we need to import sign out from use click hook use click hook make sure you import the use click hook and then we need to do router con router equal to use router from next notification and then we're just going to push okay after we sign out uh one click on click here we are just going to go to the sidebar here click so the sign out we've imported in the wrong wrong component it should be in here it seems like we have route already use CL okay so now is it it just click okay so it's a cic function we have sign out like that but it's going to take in a cbic function okay router. push we just going to go sign in sign in like this so let's see if this works uh let's go ahead and sign out click okay so now we've signed out we can continue with Google and then it's going to lead us back to the homepage okay so now we can sign out uh what we need to do now we need to be able to you know toggle so when I click this create task we want to be able to toggle that okay so I think I'll take a break for now and then I'll be back on the next video when we are going to be working on the toggling of the model I'll see you in the next one okay welcome back so now I think uh let's start by implementing a loading bar at the top here so let me show you what I mean so if I go to my website if I click one of these links as you can see there's a top loader here a bar we're going to be using a package called react top loader so it's called react actually it's called next top loader like that so copy this command let's open a new terminal uh let's install Okay so that's what we need to do so let's go to the layout by the way so currently it only works with links okay so make sure whatever you're using to route with is a link um let's go to the layout so let's import the top loader next loader like this import next loader from nextjs top loader let's go above the context in the body here we're just going to say next top loader like that and then we're just going to put a few properties so the properties the first one I'm just going to give it a height I'm just going to say that to two pixels uh the next thing that we want is going to be color color let's say that to Red for status red um the other thing that we need is an using functionality so we're going to be using a cubic cuic Basia I don't know how to pronounce this is it Bia or Basia I don't know how to pronounce it beier I don't know I think it's French uh but now we're going to go and put some properties uh this one should be zero okay and this one should be one you can kind of generate this there's a generator for this properties it's called cubic B here if you go here you can kind of generate you know these properties and then you can copy whatever properties you want you can simulate see what it looks like so now let's see if it's working so now as you can see when I click the link it's working okay but I'm just going to change this color here uh I am going to go to the themes and I'll I'll copy the green dark I'll just copy the hex value and then I I'll paste uh I guess it didn't work I'll copy this green and paste so we should have a nice green color by the way if you want to get rid of this loading spinner here you can so you can just say spinner short spinner you can just turn that to false okay and then you have to refresh the page okay so now we have that uh the loading uh let's move to the next chapter so uh let me see okay uh for now we want to fetch this data when we have the user so sometimes there might be an issue so let's go to the context so if we have the user I'm going to say if user and and then we're going to fetch this the tasks so let's just get the user oh like this so con user like this Con to user and then use user coming from uh clck next next JS okay then we're going to fet the data when we have the user okay but nothing happens it doesn't update so once we have the user we want to reender this so we're just going to rerender based on the user like that so refresh okay perfect so now it works all right so now we need to do loading let's do CSS loaders Spinners okay I think I I'll just take any of this Spinners I'll take this all right uh copy and go to the global I'll just paste those tiles in and then uh we just need to create a span with a class of loader so let's go to the context provider context provider here we're just going to return a div and then let's put a span class name loader like that okay so if you see a loading here so here uh let's do a class name let's give with width four and height four and then we're going to do Flex item Center and then justify Center okay so it's basically Flex centering it here okay for the color uh you can give it that green color if you want to um if you go to the themes uh oops we need to go to the themes I think I'll give it this grade in color here can't remember which gradient it is so oh it's oh it's a border we cannot do a gradient on a border uh let's primary green green let's take the light one to see how it looks like all right so now let's refresh this oh I think we need did I copy the wrong one color green light I don't know why the green light looks white okay so okay so I think this will do um when it's loading we also want to do it for this one we're just going to do that later but for now I think what we need to do is delete the task and edit so let's start by delete here I'm just going to create a dynamic route okay so to delete we're going to delete based on ID okay and then inside the ID we're going to create route. TS and then export it's going to be async and then it's going to be function delete delete uh let's just copy a boiler plate here delete okay so we're going to do response should be a request actually no response request all right so we're going to do a try catch try catch like that that and then we're going to do a cogg and return we're just going to return next response we need to import next response like that all right so for us to delete we need the user ID and we also need to get the ID from uh from the params okay so uh what we're going to do in here we're going to get the params params and then we're going to get the ID like that params and then we're going to distract and get the ID okay so we are going to say const user ID so make sure we import the all the out and then we're going to get D structure the ID from params okay like that so uh we just going to check if we don't have the ID and then we're not going to be authorized to delete anything okay so we're going to delete a task B on the ID so we're going to say cons task equal to uh we need to import the Prisma from the connect from the U from the U here connect find unique so this is actually not find unique so do task dot uh should be delete delete where the user ID okay where ID is equals to whatever ID ID we are sending through the from the uh client okay so we're going to delete whatever ID matches this one what id was sending from the client so I'm going to show you what it looks like uh we're going to get rid of these console logs by the way later on so this is just for debugging to see how things are working and then we're just going to return so uh now what we need to do is we need to we need to um send the ID okay from the client so let's work on the delete so for the delete uh let's go to the global I'm want to say const uh delete task equal to async async so it's going to take in the ID okay going taking the ID so here we're going to do try catch try catch and then we are going to say CG error and then we are going to uh do toast toast. error something went wrong okay so we're going to do con response equal to exos ex. delete and then tasks and then ID okay so the ID we're going to pass in here we're going to delete that item all right and then uh we are going to say toast do success task deleted when we delete the task so after that I am I'm just going to refresh all tasks okay after we delete we're going to get the update refresh the tasks so we have to send the function here delete T by the way we need to also send is loading because we need to do the loading state so uh let's go to all tasks uh the component all tasks all tasks okay all tasks or tasks okay so for loading GED okay let's get the loading here is loading is loading let's create a component for it loading actually doesn't matter uh we just need add that class name okay so if if is not loading not loading so if it's not loading we are going to uh uh do this else like that okay so okay so it should have loading there as you can see loading okay but for this loading uh is loading let me say let con is loading equal to True okay so I'm just going to get rid of this for now is loading equal to true so it should be loading here let's tell this plus tasks loader okay so span uh I can't remember the name it should be loader like that so it should spin here uh we need to Center this let's do can I think withd four uh Flex item Center justify Center okay uh height all right I think we can put it the center here I think it makes sense or you can do it individually I don't know it's up to you I think I'll just do one loader like this okay and and uh I think that's it I'll just put the proper I put here like that and then get rid of this okay and we should have like a loader for a split second here you can put like a skeleton loader as so it's up to you okay nice so you can get rid of the main loader if you want to but uh that's up to you now uh now that we have the loader let's work on the delete so we need to go to the task item task item and then we need to do a me function for delete okay so for that we are going to delete one click we're going to run a quic function okay so for delete now we're just going to get the delete task is that what we've named it yep delete task like that and then we just need to pass in the ID of the task that we want to delete all right and uh uh delete task and then we pass in the ID which we already have here okay so hopefully when I click this it should delete nothing happened seems okay it did delete but there's an issue fetching the data okay uh let's create create content let's create more items shall we submit okay submit submit submit submit submit submit okay so we should have a lot of items Let me refresh okay so there it is I'll get rid of this create so let me try to delete this oops delete delete delete Okay so it's working but I don't want this blinking effect let me see if there's a way around it let's try to let's get rid of the loader actually let's just leave the main one okay let's get rid of this loader okay so it should work like this but it's taking a bit of time there's a delay when you delete so it's up to you if you want to you can put a loader yeah there's a delay uh we need to fix that we'll fix that uh in the coming section okay so yeah we can delete now we can delete so we need to work on the editing which is the put method we did for some reason I need to click twice to delete so let me double check the function task item onclick why do I need to click twice so click nothing happens click again something happens okay I don't know why I need to click twice um but I'm going to fix that later on yeah we we have an error as well here so we'll fix it later now let's just work on the editing so when I click complete I want to toggle incomplete as well okay and uh I think I'll do that in the next video okay so I just realized when we were deleting we had to click twice for us to delete the item um I was missing and await because I using async so it doesn't give you a warning unfortunately so we have to make sure we do await like that that's why we're getting record does not exist because we click twice okay so now let's save so now let's click now it's deleting we don't need to click twice anymore and also the pop up uh the toast is not showing okay uh we had a wrong input may I had the wrong input not you but I had the wrong one so it should be just react hot toast like this then save so when I click it should be able to show the toast okay so the next step uh I think let me go to the all tasks I'm just going to Cog all of the tasks responds to data let's inspect to see what we have I'm going to refresh okay so we have four items uh all of them should be completed I guess okay so we need to get we need to create some items which are not completed okay but these some of these that are completed it doesn't show it's completed I think we might have made an error somewhere so let's go to task item uh it's completed so it's completed it should show this completed button so I don't know where we have made an error let's go to tasks oh yeah here so it should be task is completed is completed like this so it should be green now okay so now this is the completed task we need to show the uncom the incomplete tasks so first off let's just create more content which is not completed not complete completed one some random date uh let's just submit random submit submit submit okay so now we should have decent amount of data to work with uh let's refresh or we're going to refresh by the way when we are we're going to refresh when we are uh creating a task when we when we're creating a model so we're not doing that yet so now we need to display uh the completed the todo and the important tasks so what we need to do is create those pages we have those pages already but we just need to display the data okay so for that uh let's start with the completed so this is easy by the way to do the completed tasks so for completed uh we are just going to do a filter con uh completed tasks equal to we're going to say tasks do filter and then we are going to get a task and then we're going to return task that is completed is completed okay so the tasks that are completed uh that have been completed task do completed equal to True okay so this should be completed tasks completed tasks okay when the complet equal to true and then uh we should have an array containing completed tasks okay uh there it is four we have four items here so this is the array it is completed tasks which is equal to true so I'm just going to pass that into our stage complet the tasks I'll get rid of the console as well as this console here I'll get rid of it so we have the completed page where is the complete incomplete okay so this is the page for the completed it's going to be easy so we just need to say const we are going to get completed tasks okay from the State Global context and then here we are just going to return the tasks component tasks and then we just pass uh the tasks okay like this the title we setting that to completed tasks and then the tasks is the completed tasks so when I visit the page completed hopefully we should be able to see completed task like this okay so now we have the completed tasks we have all tasks completed and now we need to do the important so we're doing the same thing as well for the important we're just basically filtering the task to get the important okay so con important important tasks uh we're going to filter and then we're going to return where important is set to True okay so and also uh so we have import completed important we also want incomplete tasks okay so con incomplete incomplete tasks uh we just going to return uh it's completed equal to false okay so I'm just going to send those values here important and incomplete tasks tasks okay so important just go to the important page we're just going to do the same drill here so con we are going to get uh this is the important important tasks from the global State all right so we are going to get the component the task component and then we just put important task like this so we should be able to have the page now so if go to important uh it seems like there's an issue with the important let's go to the global so is important equal to True uh let me c this let me console log to see what's the important is showing important tasks uh let's go to the console and see the result so important tasks we do have an array here for the important uh what's the property though okay so is important okay is important is important okay we do have the items I do not know why we have an issue okay so now it seems to be showing now all tasks important completed okay don't worry about this one we need to give a key so we are okay so which component do I not have a key on let's go to the tasks so we have a key here I don't know uh let me find map map to see where I didn't put a key okay here we didn't put a key so we need to make sure we put a key here key we can just put anything anything that is unique so let's put item title or ID if we do have one we do have an ID so we put the key hopefully that error should go away uh I do not know why it's still there okay it's gone now so now we can navigate to this pages so the only page that is left is the incomplete page uh let me go to the global I'm going to copy the incomplete incomplete we are just going to do the same thing destructuring from the global State context and uh we are going to render the tasks tasks component and then this is what we have save so we should this should be yep incomplete important okay so this is completed the important tasks all the tasks do it now all right so I think one of the issue actually we're going to fix that issue later on the item that I click I create first I want it to be at the bottom the latest item I wanted to be at the beginning so we need to do some sorting of the items we're going do that when we uh create our model uh but I think that's pretty much it for the pages so now we need to sort out this button here when we click okay so we want to be able to show the user button okay so uh we're going to do a bit of a hack let me close everything here uh sidebar so we're just going to go for the sidebar we're going to do a bit of a hack to do this sidebar styled okay so so we have the profile overlay I want to add a user button after this image do user I'm going to say BTN okay so this user button I am going to import user button user button from clier all right so it should be imported by now so yeah use a button and let's see so when I click we're going to be able to see your account and you can sign out you can change your AV okay so uh what are we going to do for the user button we are going to set position to Absolute absolute and then Z index I'm going set that to 20 z20 and then top I'm going set that to Z zero and then width I want to say that to four 100% And then height height I'm going to say that to four as well all right uh so when I inspect you should be able to see this pattern here okay so we need to style this pattern more in the Styles so because we're going to do more more Styles okay so now let's uh scroll down for and then we have to find somewhere to style it all right so I'm just thinking um the image I'm just looking at the reference how I did the image okay so let me inspect here so the class name okay so yeah the one that we want we need to select this CL CL root box okay so in the profile uh I am going to select C to let's make it sure it's us a button like this just to encapsulate this in the user button now let's take it out of the profile and and put it separately like this so to make it cleaner so use a button and then we target the root box and then we're going to set the width 100% height 100% so it should be covering uh root box okay so as you can see it's covering the entire width and height all right so and then I'm going to Target the user button box oops copy this class name CL user button box don't copy the Lo locked class copy the ones which are not locked uh and then we go down then we're going to give width and height 100% as well okay and then I'm going to Target the button trigger button trigger and then I'm going to set the width 100% height and then opacity I'm going to set that to zero okay opacity to zero so as you can see it's not there anymore but when I click it shows okay when I click it shows the profile all right it nicely so it's like invisible but when I click it shows it shows the information about the profile okay you can manage this account you can sign out you can delete the account it's up to you okay so the it's invisible as you can see now but we want to get rid of uh I'm not sure if there's an outline but we can get rid of the outline if there is one but I don't see it so if you see it you can just get rid of the outline on active however but I don't see the outline now uh what I want to do I want to do the image okay to make it Dynamic so what I'm going to do now uh image I'm going to get the image from the user from the user object so we're going to con const user go to use user use user object and then we're going to get the user all right so what we're going to do is we're going to destructure for some let's see what the user object is again so I think we've done this before but let's see let's go console so there's the object the user here there it is uh it has some properties uh that we want so we can destructure this here so this is the user so it has the properties that we want so we want the name we want first name and last name and also the image URL okay so let's get those properties so we're going to say cons uh first name last name equal to user like that all right and uh uh what we can do like that and we also need the image URL image URL like that we need that property and it's going to be an empty string if we don't have it and uh yeah we just need to put those properties so instead of doing this uh we're just going to put the image URL like that okay so uh there's an issue here we need to set uh in the config where's the config next config next config okay so in in the next config we need to set where our images are coming from we need to put the link so next config images the domain so we want to set the domains for our images domains we're going to do Local Host and then we are going to do uh output clck this one okay and then uh I'm going to save all right so let's refresh this okay I think we need to refresh this restart the project okay so restart the project mpm randev and uh you just need to reload uh actually uh you should uh okay so it should be working now it's on 3,000 now it's no longer on 3,001 it's taking a while to compile but okay let's do something else while it's compiling uh the other thing that we want is the name so the name as you can see the name is still not the correct name that we want so for that we're going that's why we've extracted your first and last name of the user okay so here I'm going to get rid of this I am going to do first name first name and last name okay uh first name and last name actually it's going to be there first name last name like that and then uh seems like we've been signed out okay let's continue with Google because we are on a new New Port uh inv valid source prop okay so host name this one copy this go to the next config and put this in the domain and let's save all right so now so we have first and last name uh we need to capitalize this so class name capitalize so this will be coming from T and CSS by the way so capitalize so we want the first character of the first name to be capitalized and then the first character of last name to be also capitalized so now let's refresh this it's taking this time to compare all right so now the image is there now okay so that's the that's what we're looking for but but what I'm going to do I am going to change this image you can change you can do manage account and then you can you know change the image if you want to so here and do upload image you can drag the file so what I'm going to do I'm just going to open my public folder and then I'm going to drag that Avatar continue and then now we should have the image we can click and then we can sign out from here we can manage the account we can also sign out from here so the only thing that is left now is to click here and create a new task or we can also add a button here to create a new task up here you're going to see how we can do that later on but for now that's pretty much it we just need to uh work on creating a task okay so now let's start by updating this completed okay so what we're going to do let's open up this route so we had a put method there it is so here we are going to update only one uh one field so uh we let's get the ID the ID of the send in user from out and and the other thing that we want is the property that we want to change so in this case it's going to be the is completed it's going to be the only property that we're going to be changing we also need the ID of the item we're changing the property okay and then we're just going to await uh request to adjacent like that so now uh let's just check if we don't have the user and then we're going to return unauthorized like that and the other thing that we want is uh this should be in the try is the wrong place in the try like that and after that uh let's create a task that we want to update await Prisma task. update and then uh here we just update that task okay so in here we just going to say where ID that's the task we're going to update and then it's completed it's completed uh we just setting that to this property here okay so it's completed property we set it to that property like that okay uh or we can just do this like this okay because it's the same name all right so uh we are updating an item with this ID we're updating the is completed property with whatever property that is that we're sending from the front end all right and then now we're just going to return now we don't need the console by the way we just return the response okay so let's save and uh that's our method for updating so I'm that's pretty much it uh why do I have a delete here okay get rid of this okay so here we have uh put get and post so here we have the delete in the ID we could have done the the editing in this here but it's fine we can do here so now what we need to do is send whatever so when we click here we want to update this item here so let's go to task item so in the task item that's where we want to you know do the function for that okay so actually let's do it in the global global provider and then we do the function and then we get it through through our state so wait a minute so all tasks I'm going to collapse this collapse and then here I'm going to say const update task so here we're going to to send in the ID as well as the property of the task that we want to update in the in this case I'll just do an object here so I'll just do task so this task will be just an object which contains the ID and it also contains the property that Properties or property that we want to change and then we're going to do try catch and then we're going to do const rest equal to await and then it's going to be AOS put but this is the wrong endp point so we're just going to go into tasks API SL tasks and then task okay so now uh let's do a success we need to also call refresh the data here and also let's do a toast not root but toast toast do success task updated like this and then we re fetch the data and then here we are just going to C the error and show an error something went wrong when updating the task okay and uh that's it for update so now we just need to send in the data from so we need to send in the data from the task item so when we click the task item we just need to send in that data all right so uh task item okay so here we are we are doing on click and then we're going to do a cc function okay so now we do have a cc function so we also want to change the status um of this clicked okay so here when we updating what properties do do we want to update so we're sending in object and then in the back end we are getting that property all right so in this case we're going to do const task it's going to be an object so what we mainly need for in this object is the task ID as well as the is completed okay so here I'm going to do ID and then is completed okay and then we are going to set it to not whatever the opposite of whatever it was okay and then we're going to call the update uh update update task like this but we need to get that from here up Date Update task like this and then let's save so hopefully we are going to be able to update the task so let's try to click this we have an error so update task is not a function update task okay so it depends what button we click so we click the completed so this is completed uh uh it's okay so let's copy this and also put it here and the incomplete okay so the incomplete is basically the same thing here so let's save and let's click this okay we still have an issue update task is not a function so let's go back update task okay so let's C here update and also make sure the spelling is correct when you're importing and make sure you save also the file as okay update that was the wrong spelling up task so click okay as you can see it's changing now okay so it's working as expected so now what we want is to create a task so for that we are going to create a model so in This Global uh I'm going to create a model you can if you want to make this model Dynamic you can sort of con I want to do open model so you can put a key here to check to see what what key it is okay so I'm going to say const model model and then set model like that and then we have a key so we can put a key like if the model is equal to this key and then you know we can open that model and stuffff depending on what model okay so if if if like this right we can be like if model if model equal to whatever key and then you know we can do open the model okay uh in this case I'm just going to have this property without a key so set model equal to true and then close model equal to false so this is going to affect all of the models but you can add a key here if you don't want to affect all of the models we have but we're not going to have multiple models so that's why I'm doing it here it's fine and then we're going to have model open close Okay so uh this is the state of the model so currently it's false initially when you click we're going to set it to true when you click this function here and then false when you close the model so now remember with have the model uh in the models oops we have the models so this create we want to kind of show this when we uh click when we click this button here in the tasks so if you go to tasks so there should be create task okay so we want to go to tasks and then we have create tasks here we're going to do onclick and then we're just going to do open model like that and then make sure you get it from the State Global State and then save okay so when you click it's going to open the model okay so now uh let's style this model uh I'm going to close the rout we just need to style the model for now okay so actually I'll create the model the actual model first model TSX it's a functional component use client it's a client component not functional it's going to be a functional functional export here should be model okay so we have a functional component here so what we need to do now in this model is just we need like an overlay so I'm going to say dot model overlay like that all right and then when we click this overlay on click we're going to close we're going to close the model so here we need to get that uh con we need close model like this from Global State all right and um we need to get rid of the consoles by the way now we have this we need to put the content the content of the model so the model is going to be dynamic okay so we're going to create an interface here interface props and then content should be content should be react. node like that and uh we destructure here and then we have the content okay so whenever we render the model we're going to put the content here so uh let's try to render this model so let's go to tasks and then here we're going to to render the model so if model equal to true so we're saying model equal to true and then we're going to render the model uh model so this the spelling is incorrect uh but the comp the content that we want is the create content okay so hopefully when I click this as you can see now it's showing the content the content for creating okay but we cannot close this as well because we have installed this now let me rename this model it should be model all right so that should do it uh yes okay so now uh let's uh start by styling uh what should we start with let's start with the model itself so model con model styled equal to style. div so make sure you import styled from startled components you copy this place model style like that so now what we need to do I'm just going to set position fixed because it's going to be always at the top position fixed and then uh top zero left zero with um I'm going to give it 100% height I'm going to give it 100 VH and then a z index and then I'm going to to do display flex and then I'm going to Center everything justify content and align items to Center okay so it's going to be at the center like that uh we have an issue because uh tasks models model where is the issue with the input okay now it's working so there it is okay so now we need to style we need to style uh the model overlay model overlay okay so for the overlay I'm just going to give it a a dark background color and a position of absolute width and height to 100% okay like that so refresh okay so when I click it opens the overlay but this the content we want it to be uh on top okay so we need to give it uh we need to give it a z index that is higher okay so I'm going to select model content OKAY model content and then I'm going to give it a padding Z index and the with you can set this to Max width Max WID and then withth you set to 100% like that and I when I click nothing happens yet but because we don't have this class here okay so what I'm going to do I'll copy this oops copy and then I'll do like that content and then you we paste so when I click there it is okay nice uh let's keep going with the Styles uh let's go to the um to the task wait tasks okay to the create content actually let's St this so in the create content we want to style that so we should have const create content styled so this should be a form it's a form so make sure you import styled from start components copy replace place so now we're just going to style this uh let's start with the background so let's get the theme okay so Hand submit we need the theme con theme equal to use Pro State and then we pass that as a prop see here is a prop okay and then we're going to have access to that in the Styles all right now let's start with the H1 I'm going to front size I'm going to clamp okay uh one ram I think I'll do one ram the maximum is going to be one 1.6 and then I'll do actually let's do one 1.2 like that all right and uh F weight I'm going to set that to 600 600 and then I am going to give this a box Shadow a background color and the Border radius okay so let's refresh so we do have a box here ER okay so uh now what we want is to targ the input control input input control I'm just going to set position to relative and the font weight then I'm going to tag the input uh text area text area I'm going to give width of 100% and give no border border of none and then I'm going to say resize To None to none and I'm going to give it a background color and the color like that so let's see so there it is but we haven't actually set the background color for this whole thing but let's keep going uh actually what I would do I'll copy this let's go to the global CSS uh text area button let's said border border To None outline To None like that I think this will do it okay so yeah we don't have any more outlines and both orders anymore okay so now let's continue with the Styles uh okay so now I am going to Target the label okay so so we have the label we should probably start with a label uh for the label I'm going to give it margin bottom and a font size we're just going to clamp that and then I'll Tar this pan within and then I'm going to give it a color of gray number three okay so let's save all right so looks pretty good so the thing that we want to do for now is Set uh we need to set the background color okay so I'm just just wondering like uh where we could uh set the background color but I think we should set it uh in the model content which which uh model content what is the model content model we need to import theme theme okay so make sure we import theme from Global State like that and then we pass it as a prop so we shouldn't have that issue uh let's inspect to see why it's not why it's not showing the background color Okay so oops get rid of the mobile view model content okay so model content doesn't show the background model content okay so we haven't actually set the background so let's give a border radius order radius to one ram and then we're going to give it a background color to color bg2 like that okay uh okay so the shadow is on the input itself but we need to give the bring the shadow here okay so what we can do is is go to the uh create content create content box Shadow and remove this uh actually copy this and go to the content by the way if you want you can remove this content all together the oops where's the model oh there it is so you can move this model content you can put this these styles on the form directly if you want to all right uh yeah I'll do this and there it is uh now we just need to give this uh border radiuses and stuff so let's go to the input control tasks uh we should be create content so input control we need to uh style more okay so um let's see let's see what we need to do first so first off we need to give it uh border radius uh and let's see what color Okay input water radius for radius let's do one ram it should work oh what I said here I think one R is too much let's do 0.5 okay let's see how it looks so it looks all right 0.5 looks okay uh you can you know put whatever you want here uh the other thing I think that I might want to do is reduce this margin bottom I think I'll well I put it to 08 okay so it should be yeah a bit lower I think we have good spacing uh the other thing that we need to style is the button okay but first off uh let me check what styles I used for that button so if you remember this button component here so we need to render the button component component button component type submit okay and then uh we need to give this an icon this should be a soft closing okay and then we have the name should be create task and then we're going to have icon the icon so the icon we're using here let's do plus and make sure you import this plus icon okay and I'm just going to paste in the rest of the properties okay so we have padding but radius font weight font size like that so when I click uh the button is set to Green but it is a lot of padding and also I want to give it a color uh color what did I so we have the pattern is too big that's to 0.8 and then two Ram okay uh I think let's do Flex FX end end can't remember the property I think jusy end okay so I want it to be here at the right here okay uh the color I don't think we have a prop for this one so let's go to the button and do a color okay let's add the color color here and then we're going to do color all right so wait col let let's do gray Zero by default let's see color color color let's check it out I'm the console okay so I'm not really fond of this color let's try color background let's do color green should be light okay I'll get rid of this prop color wait a minute let me check the green light uh let's go to the themes light here green light there's something wrong with this variable here but let's try this purple color I should copy the variable name c primary let's see what that looks like okay I think this is but it doesn't match our theme though okay uh we let me check this one for a minute we want something that is close to our theme so let me look for a button I'll inspect here I'll copy this color here by the way this website is not yet responsive uh okay so I'll copy this color here I like it all right I think this is reasonable and the icon so we need to Target the submit button submit BTN select that uh collapse and then we go and sty that separately okay and then I'm going to take the button submit button BTN button and then I'm going to I'm going to given icon I color okay I think I think that works well when I have her and have uh let's try to set the background color green dark we need to overwrite that with the important uh why is it not working so let's see why inspect it should be just background not background color all right so hopefully it should work okay we need to too important still not working background RGB color primary dark okay we didn't have that variable so that's why we had an issue and the color should be color white color white I don't know if it's showing was the colors are quite similar okay this is now white okay I think this would do uh let's do transition this should be .3 okay so now let's uh refresh okay so now we can have a I don't know about this white color though you you can try to find whatever color that you want all right and I think the are other things that we need to do is to do this date okay we need to start this you know date icon okay so let's inspect here okay so we need to give this a class this the radio buttons we need to give them a class okay so completed I'm going to give them a class of Toler completed as well as uh this one oh this one is a class of Toler as well so down here I'm going to Target those I want to do display flex and Al items to Center okay and uh there it is I'm just going to do justify content just content now let's do space between okay uh wait not the label I want to do the to completed okay uh Flex black shrink we need to shrink Flex shrink Z zero actually it's grow Flex Pro should be zero right and this one should be Flex one FX one margin bottom there's an issue with margin bottom uh margin Ram here okay and uh yeah there it is I think it's too big Toler label Flex we're going to do Flex one like that so we want this label to fill the entire width okay and this one uh Flex grow zero some reason oh I think give it a width nothing happens let's try this nothing happens okay so we need to remove the width here label and it should be in input in the Toler and then we need to remove remove the width with uh let's set it to initial like that okay so now we if we click this one it should tole and then we just need to set the cursor to pointer okay so we able to to go some reason the cursor pointer is not working but fear not let's go we need to keep going we need to style the date okay so for the date I'm just thinking we need to go to the global CSS so in the global CSS I'm going to Target the input input and then type equal to date I'm going to style the indicator okay so type web kit calendar indicator pick indicator and then filter I'm just going to invert the color the color is black so I'm going to invert it to one which is going to set it white okay it's going to be the opposite of that so we're going to do font size I'm going to make it bigger I'm going to do 1.5 frame and I'm am going to set the cursor to pointer so it should be a bit bigger now so when I click we can select the date okay we can toggle so we also need to uh do checkbox as well input uh we need to do checkbox type equal to checkbox okay uh I don't I'm not sure if this is how we start with the checkbox okay so let me CSS check box okay so we should let's see how we can start this checkbox it's the better one okay container okay I get it so this one is going to take us a while so we have to do a lot of positioning and stuff uh you can do this on your own spare time I don't have time to create a custom checkbox okay so we just going to use the default one but I think I'll do this off camera and then I'll just push the changes on the final version that I'm going to upload on GitHub but now we just need to now we are able to add code add stuff hello okay so now we can toggle completed so when I create task should create but it's not refreshing so we need to manually refresh the page for us to see that okay so I'm going to delete so we need to refresh the data every time that we create a new task and as well as we might need to close actually I think you might want to close this right when you create a new task or you want to keep it open it's up to you but but me I'm just going to close it so it's up to you what you want to you can do what you want so create content so we have the submit button submit what function are we calling here okay so for us we need to go into the submit and submit so somewhere here we need to get all tasks tasks or tasks okay so here we are going to do this all tasks we can do this first or we can do this after okay so we are just calling all tasks and you might want to close the model if you want when the task is successful you can close the model okay and I'm just going to say close model like that and make sure sure you get close model uh here close model I'm I'm also going to do one more final one final check here so I'll take this I'm going to say if not data if not response do data do error that's when I want to do this okay so I'm going to save uh test data hello and then I'll put a date put a date to it and then I'm going to to it make important and then I'm going to say completed and then create task okay but the close model did not work um let's see why okay so our tasks is not a function or tasks tasks okay because we're not sending that through okay we need to send all tasks like this so now I think we should be able to do it hello to just add something random and create new task there it is so it's working so we can delete this so next we just need to work on making sure the new task is at the top okay so this is going to be the final part so we're going to look at uh media queries and also I want the newly created data to be at the at the top okay so when we create something it's going at the bottom so I'm just going to add something random and then when I create it's you know down here so we want the newly created one to be at the top so what we're going to do we're going to be uh sorting the data based on the created date okay so we're just going to check uh what date uh it was created okay so what I'm going to do let's go to the global I'm going to close everything here let's open the global context only so uh let's go to all tasks okay so for all tasks uh let's uh sort the data before we put the data in the state okay so what we're going to do uh let's CG response. data we need to get rid of the consoles actually I'm always forget so if we go in the console now we need to refresh this uh so there's a created at date here so we need to sort okay so uh let's say sorted so we're going to return a new array equal to not response we can do yeah response. data response do data and then we're going to sort so it's going to take uh two values so A and B okay so to sort these we just need to subtract A and B okay okay so we're going to return so we're going to return new date okay so it's going to be new and then it's going to be date and then because the date it's in a it's in this format we want to convert it to the proper format that we want so new date and then we're going to say B do created at created at created at like this okay and then Dot get time get time like this subtract a to created it to get time okay so let's let's see CG a b okay actually let's uh console log remove this sorted sorted uh let's refresh so we should be able to see sorted here okay so the newly created array will be at the beginning okay uh and I'm going to put the sorted data as our tasks okay in the state so the data and the state going to be sorted based on the created Created at date okay so the newly created will be at the top okay so if you want to get the opposite effect you don't need to do anything but if you want to get the opposite effect using the sort you can just do a minus B okay like this okay so sometimes I always get confused with this one as well sometimes I start with a minus B and then I realize I need to switch it around so B minus a like that so the newly created data now and let's delete some of these so the newly created data hello world and then I just add something random I'll mark this as important and then I'm going to create uh there it is yellow world so when I go to important you're going to see it it's at the top as well and then completed same thing do it now okay so here we we're getting the ones which are not completed so if you mark it is complete it's change the uh the status it will be in the completed okay and then uh all of the task will be showing here so now what we need to do uh we need to do the media queries okay so for the media queries uh I'm going to inspect so at uh small size which is let's say 750 750 pixels at 750 pixels I am going to reduce this padding to one ram okay so one ram I think I should do the same for this one in between okay okay let me check how that would look like uh Gap Gap uh let's do one ram okay yeah so Gap one ram I think that makes sense so at 750 we are going to uh let's see what component we need to do this one so the parent of sidebar so let's go to layout actually I think it's the global star provider so we have the children in here okay grid uh Gap okay padding here so at media screen we're going to do end Max width so for our Max width it's going to be the small screen and media screen it should be inside like this okay I need to put my phone on silent okay so max width like this uh padding I'm going to set that to one ram and GAP one ram okay so now as you can see now we set to one ram like that and uh the other thing that we want maybe you can add a transition maybe transition let's see how that looks like okay so there's a bit of a transition so it doesn't snap okay so now what we need to do uh I am going to position fix this nav okay so copy the nav copy this Styles and go to the nav sidebar so I'm going to look for the sidebar there it is okay so I'm going to paste the media I'm going to say position fixed all right so there it is I'm going to give it a height should be 100% like that uh minus actually let's do c minus one ram for the you know that padding like that uh it should be two Ram I think yep like that and let's give it a z index Z index uh 100 or 10 okay so then it will be at the top now so we want it to be translated off screen but let's add a button here first okay uh let's Name It We need to name it dot Togo nav okay so toona let's make it a button actually you can make it a div if you want uh I think I can't remember what I've can't remember the icon name so I need to go to the YouTu and check B edit can't remember what I've named the icon I think it's bars we have like three bars that's that's a that's not a good name okay so there there it is uh I'm going to copy this class I copy I just put it here above the media query position absolute absolute position absolute right we're going to set it to Manus through RAM and then top let's set it to 10 Ram actually let's do five RAM and then let's give it a padding of let's do one R for now and then border top radius top right radius let's do one ram and Border bottom right rise let's do one R and uh we need to give it we need to give it a background color it should be color pg2 I believe this should be the pting should be 0.5 actually no the Border radius 0.5 Ram 0.5 Ram uh okay we probably want to animate okay so font awesome I don't know why I was looking at this picture Wednesday oh one of my friends was looking for a costume for Halloween so I was looking to see uh the character she was looking for uh font awesome font awesome oops okay so we need to look for the home um actually menu that's the one we want oh it's called bars actually uh let's do bit all right I'll copy this with the animation and let's go to the icons and replace class name okay and we need Arrow so it should be let's click free Arrow left where's the left Arrow there it is and and let's make the animation it should be yep same uh let's edit here so by the way you can do the icons any way that you prefer but I prefer this way Arrow left class name and then uh let's go so we need to conditionally uh render so let's go to the global State we need to create a new state to see if the sidebar is collapsed or not so I'm going to say con collapsed okay and I'm going to send the collapse yeah collapsed okay so I'm going to check if it's collapsed uh where would sidebar sidebar okay so we need to get the collapsed here collapsed okay so collapsed okay so here so collap so if it's collapsed we are going to show the bars or if it's not collapsed we going to show left Arrow so make sure you Arrow left so make sure you import like this okay from the icons perfect so we should have the animated Arrow here because it's not collapsed Okay so I think uh I might want to increase the pading that border radius to one and border right border right for the top and Border bottom like that okay so let's uh reposition this right minus 3 RAM let 2 minus 30 pixels all right so I think minus 73 pixels is good right 73 pixels and uh this one should be padding top and bottom let's do 6 RAM and one R like that uh doesn't look good it's 2.88 doesn't look good either let's do on both sides and then we' need to uh adjust this okay I think this will do so 66 pixels and top let's do two Ram okay uh 1.8 so you kind of find the balance of what you like okay so now when I click I want to collapse okay so uh uh let's go to the global I'm going to say con collapse menu like that all right so collapse menu we're just going to we did set the collapse me to the opposite of what the state is so by default it's false so when you click it's going to go true or false depending on this state okay so now uh let's just go and run this function here collapse menu is going to be true when we click so let's get the collapse menu uh on click we want to run the collaps menu okay so now let's see if it's changing the icon okay as you can see the icon is changing based on the collapse okay and we'd want to make it go away so uh let's put the collapse collaps as a prop equal to collapsed all right so we're getting an issue here because we're using typescript so we need to say theme I going to set it to any let's not worry about them let's just set the collapse to bullan because this t t script that's why we're getting that warning so we set it to Boolean so we want to check if it's collapsed so collapsed uh I'm going to say transform transform okay and we're going to to translate X okay but actually we need to check first uh props do collapsed do collapsed and then we're going to set it to minus 100 if collapse is equal to True uh we're going to translate x 100% else 0 to the normal position and then I'm going to do a transition so the transition I'm going to use is going to be a cubic cubic Bia again or basier I don't know how to pronounce it so the one we used it's in the layout so if you go to the layout if you remember here I want to use this animation here I'm going to do a transition transition like this all right so let's see when I click okay so there it is it's going away uh I think it should be let's inspect I want it to be off screen uh let's do now so it's minus 100 okay so I want to leave space like this I think yeah like this so it should be out of the screen so it should beus 107 % okay minus 107 I think I'm going to also increase the padding ping top and bottom left and right I'll just do one9 Ram like that okay looks quite pretty good uh we just need to rwe this why does it uhing all right so I think minus 69 works fine 69 all right so the nav we can collapse it okay I think that's the effect we're looking for so let's see how it looks on mobile so let's do iPhone 12 so what we can do also is we can reduce the font size I'm looking for Iphone 12 Pro okay so this phone size if it's too big for you we can reduce it so all right you can also Center this around so yeah uh it looks pretty good on smaller screens you can reduce this picture size as well uh okay so I think oh I forgot to do something something so uh collapsed is set to True okay so I need to check something I want the collapse to only do on mobile okay so what I'm going to do I'm going to do media query media query sidebar I'll copy this a cut it should be at the top here position fixed I'm going to cut this uh Tok enough I'm going to say display to none all right so I don't want this and then here display display to block it should be the toona that I want to set the display to block like that and then we save so they should be okay it's still not showing to enough display none oh we need to put the media query oh wait we are in the media so the screen size to off weird Okay so the media query doesn't show there let's do important let's see okay there it is okay so it's collapsed all right so like that all right so now I can collapse this when I make the screen bigger okay so when you're going down like this and then just going to hide all right perfect so the media queries is pretty much done I think the only thing that we can work on is the font size you can copy this media screen size here we can go body uh Global uh at media like that because we're not we canot nest what can reduce the whole thing to 15 pixels I think okay or you can do font size I think 50% let's see how this looks I think it's too small all right you can work around this font size here depending on what component and you want to change the font size on all right I think I'll just keep the font size that we have even for smaller screens I think it's it's fine it's fine to me so it depends what you want okay so now um the only thing that that we have I'm going to sign out let's start these Pages here so uh we're just going to do that in line so sign up we're going to do it in line so we're going to say class name Flex item Center justify Center so we want to Center this so we are in sign up so let's see sign up okay so we want to give the height to four Ed full okay so it should be centered here there it is and we want to do the same thing for sign sign in and we should just Center this so it's just basically display Flex align Center we height for to 100% And align items and justify content Center okay and uh that's it we can disable these uh components by the way you can start this however you want if you want to so for example if you want to remove this you can just inspect this and look for a class so this is the class Name by the way you cannot select the locked class so make sure you always select the one which is not locked you copy that and then you style that based on the class that that is not locked so if I want to disable this I can just select the class and then say display To None or whatever you can start this whatever you want okay so I think that's pretty much it let me try to log in back again so sign in so because I'm already have an account I'll go to the signin page and then we're going to continue with Google and voila uh we are in the application now so if you want to make any more tweaks you can do what you want if you want to uh make a request you can send me an email I'm sure you've seen my email already this is my email you can send me an email you can request any video or if you want to see anything in the future you can let me know in the comment section and yeah don't don't forget to like comment and subscribe I'll see you on the next one