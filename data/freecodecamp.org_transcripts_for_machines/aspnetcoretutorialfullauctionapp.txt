learn how to build a complete fullstack project in asp.net core asp.net core is a high performance open Source framework for building modern cloudbased Internet connected applications such as web apps iot apps and Mobile backends using.net in this course Alan omary will teach you how to build an auction web application hi there everyone welcome back to another YouTube series in this series we are going to create a complete application in asp.net core we're are going to build an auctions application where every user can create a listing and the user who bits the highest amount will win in the moment that the listings owner decides to close the bidding each user will have the option to see its own listings and the listings he has bid it for by simply going to the corresponding Link in the navigation menu many different features will be implemented in this project such as adding comments in the listings Details page pagination uploading image files in a project making changes to the pages depending on the user currently logged in and many more in this first section we're going to create the project and we're going to add the models needed for our application we will then connect our project to the database and this way we will have the fundamental set up to continue to build our project so firstly we need to create a new project and we need to find here a template for an MVC application just type your MVC and just click on this one go next uh we can name our project here I name it just options go to the next page and here we need to make the authentication type to individual accounts so that we have these users already enabled in our uh project when it loads this way we have the users functionality already uh being taken care of okay so the first thing we want to do is go to models and start adding classes or models to uh for our models needed for the project let me just name the first model first model is going to be the main one which is the listing so for each listing that our application will have and I'm going to give it an public in ID property and then for each listing we're going to need a title to be a string and of course uh we need the description for each listing uh we're going to need a double property for the price of the listing that we will put there here we need a string property for image path so basically when an image will be uploaded for a listing it will be stored inside the folder in our project and for for us to call the image of a specific listing we will use then the path where the image is stored but you will see it later on how this all works then we're going to need the E Sal of bull property because this way we will specify if listing is already sold or not and we will not display the sold listings in the first page and also some other functionalities will depend end of if a listing is solved or not then we're going to connect we need to connect each listing to the uh user and we'll need an identity user ID which is the property of types chain firstly and we need here to specify the object we will connect the leaks thing to the model which is identity user and we'll name it user so we'll make them nullable and we need to specify here the foreign key for the user which will be this identity user ID so this identity user we're already installed when we made the individual accounts to uh when we created a project basically each listing will be created by specific user so that's why uh we need this two properties here and on top we're going to make this as required so basically what this does is whenever a user is deleted for example uh we won't be able to see the listing anymore because that's uh how it would make sense so if a user is not anymore in my application we won't see the listings as well the listings will be deleted from database and in the end we're going to need to connect the listings so one listing will have multiple bits made to it and we will create this uh this model now a bit later and also each uh each listing will help multiple comments to it and we'll create the comments model also uh next and this is the way we store them when we uh write this type of models when they are one to many relationship models so let me create the next model that we need the b. CS model first I'm going need an in ID property and then a double property for the price let just copy this because each bid has also need to be connected to a user who made the bid and if the user is no longer there the bid will be created deled so if the user is deleted the bid will be deleted and we will also need to connect each bit to a listing so first we need a listing ID property and then a listing property just calling it listing and I would need to make both of them as notable and here we specify the forign key which is listing ID let me just create the next model that we need which is going to be the comment. Cs the comment model okay so as usual we need an in ID property I in string property for the content of the comment and I'm just going to copy this again this identity user ID and the user the identity user property so just like by on the bits I'm actually going to copy this from the bid model because just like with bids we connect the comment with the user and with the listing so they have to be connected to to user and the listing and just copy that down and that now what we're going to need to do is go to the context which was already created by default when we created a project and we need to specify the DB set inst instances for each model that we created so dbet listing which I name listings and we're going to do the same thing for all the three models that we created so D set bid nameing it bids and the Deb set for the comment and I name it comments so now uh when we go to app settings. Json we have a a default database connection there but we're going to need need to create a new database actually and go here and create new database let me just open SQL Server management Studio to get this uh server name okay let me just copy this I'm just going to paste it here and give a name to the database like auctions data or something and if we click here on Prop properties here we have a connection string in this properties window which I'm just going to copy and put it here in the app settings. Json file just pasting it there I'm just going to add another another thing here so I set the encryption to false because we don't have a password set to access the database basically and here we have created our database and we have stored the address in app settings. Json now if we go to program.cs here we see that the service is already add uh is already added here so the service for the uh for the context and which also connects it the context to the connection string as you can see this here and yes what we need to do is just go to package manager console and add the migrations for the models that we created okay so just add migration and here I'm just giving a name to the migration okay I think we've done a mistake in app settings. Json so in app settings. Json I think we have we're missing a comma or something there okay so uh we didn't close this bracket here this was the problem so I'm just going to need to add the migration again and it is successful and just going to update the database now in the section we will create our index next page we will firstly create a controller and then we'll create a service to get the data from the database lastly we will also handle the front end part by designing the index view page so uh firstly let's just go to the controllers folder and add a controller with views here so that we will have some base methods uh let me just select here the model of listing the context and we'll just create it so that we have some uh boilerplate methods for the crowd operations we won't use them exactly uh actually we will create a service to get the data from the database but just so that we have some code in the beginning that's why we're doing it so okay so here we have our controller with the methods and in this video we will handle the index method so for first let me just go to the data folder and add a folder for the services just name it services and inside here first we need a we'll create a service an interface here so I'm going to add the new item an interface and I'm naming it I listings service because we will get data for the listings and here first we will just create first select a signature method that we will then Implement in the services class so uh the return timee will be of I quable of listing and I'm naming the method get all so this will Implement then in the new file that we'll create that I'm going to be okay so I need to import here the modeles directory then I'm just going to add a class and then we name a listing service where we will implement this method signature that we wrote there so I'm just naming it listings service click add and here we'll implement the interface that we created the IL listing service and if we click here uh to show the areas we can click here on Implement interface so that this method is implemented somehow so so firstly let me just uh modify the get all method let let's just try the get all method and I copied it from the controller what we had there and just it's just as simple as this we're just taking listings from the context and we will include there the users so that we will see the user and for the context we will come here and copy this what this what is here in the controller and just paste it down on top we just need to rename the Constructor here to listing service so we'll get the information from database in this service and the method is okay and now here where we had taken the context here we will Import in the controller the service that we just created so I listing service and then we'll name this like underline listing service and then modify it here in the con in the Constructor as well okay and what we can do now in the index method here we will take the method that we created in the service so here just write underline listings service. get all which is the name of the method that we have in this service and that is basically how we'll get the data for the listings in our index page I'm going to need to uh comment all these other methods below because they are using the context and uh we now we are just using the service in this controller so it would have a lot of Errors if we let them as they are so I'm just commenting out everything except for the index method which so that we can test it how it looks like now when we go to program that CS we need to add the service that we created here so in the services here the stri Builder that services that add scope to as a scope service and here we'll have to write the name of the interface that we created and the name of the service itself okay let just go to the listings folder in the views folder and here at the index. CSH HTML I will just basically just change the header here to an H2 header and right here active listings to see all the listings that are active in our application and I guess I'm just going to remove this table presentation here here okay so I'm just going to delete all of this and I'm making a forge Loop here to Loop through all of the listings that we have so for each V listing in the model that is the listings model okay I guess I need to make it as an I quable here because that's how the data was when we wrote the method before and here I'm going to have a div container div of class container to represent all of the objects all of the things in this page I'm just giving it styling as well the background color I just saw it before for so I'm just typing here the rgba code so I was just testing it a little bit before and I found the color and this is the code for the color so I'm setting the margin on top to be 50 pixels and the margin on the bottom to be also 50 pixels I'm giving it a padding of like 20 pixels and I'm giving it to the Border a radius so it's like a corner shaped and giving it the Border it is to 10 pixels okay so inside we need other div I'm giving it the class for all which is a bootstrap class and inside of it will'll uh have another d with a class of column so that we specify this way we specify how many objects are in a row so we make the class of column and then if the screen is small the div will take six out of 12 imaginary boxes of space and if the screen is large the div will take a bit less space it will take five out of 12 imaginary boxes of space this is just to make the page responsive across different devices and here in the we write for the images of the listings here I'm just making this sign here we will store the images in a folder that we will create later that will be in the root W ww root folder you'll create the images folder there and then we will take the listing that image path which will be the the address of the image where the image is stored and for each image we'll handle styling here so the maximum width I'm setting it to be something like 400 pixels and the maximum height just is basically the same 400 pixels okay so I'm copying this to have have another div here this D will be a bit larger that's how we specify the seven there and here we have a H5 head inside of it we'll have an anchor tag which will redirect us to The Details page specify the route ID to be equal to the models ID okay I'm setting the color here the color making it to be black and inside the anchor here will I put the listing the title so the title of the listing and just below we're going to need another div inside of it we just store the description of the listing uh okay so firstly here we need to specify the listing price which is how much is bided or needs to be bided for the listing and I'm making this two string uh method here of n two so there there are two numbers behind the after the comma so when the number is 50 it will be displayed like 50 comma and just below there we'll just write here who listed the listing so the owner so to say so listing. user do email but it's the same just like the username I think in our case because the user's name we store this an email actually so yeah okay so here I'm going to make an if clause and in case there are there's nothing in the model so the model is empty there are no listings in our database I'm just going to display it here so that there are no active listings so that's what basically we have to to see first we want to load that application now because we haven't stored anything in the database okay I think everything is okay we have stored the service and program.cs here we can just specify the default controller to be the listings controller so the around the application it will appear the index of the lising controller would be the first method to be called the first link do we call and we're just running the project now okay we are um I think in the if we go to the controller to the listens controller here we uh return the view as list the application context that to list is seeing that's why we can't write here I quable what I did but we just leave it as it like list iable so I don't know why I changed that actually now uh yeah when on the application this is what appears the uh we see here that we have no active listings so this is our index page but when we store objects there will see we'll see the listings when we'll start listings there we'll see the listings in this section we will handle our create page we will see how we can create the listings and during this we will see how we can upload and store files in our project such as image files okay so let me just go to the listings controller and uncomment here this get create method I'm just going to remove this part here because we don't need it and I'm also going to need to uncomment this post create method as well but we'll modify it a lot there so when we create the listings we're going to need to get an image file from the user and we will store it inside the folder that we will create inside the project for this reason we're going to need a helper model that is similar to the listings model but it does store the images inside an iform file property then we'll take the data from this model and create a listing model with it but instead of the iform file we will store in the database the address of the file in the image file string property that the listings model has so let us just create this model firstly I'm just naming it listing view model just as a practice and then me go to the listing model from here I'm going to copy almost everything I want to change the image Path property later and I'm not going to use this bits and Commons because I don't need them when the user inputs the data and here I'm changing this property to I form file which accepts files including images now name it uh like image just image we need to import the data annotations here for the require re ired uh data annotation okay so I'm going to go to this www root folder and here inside I'm going to add an images file which will be the address where the images will be stored when user stores it when a user creates a listing so if we go to the create uh. CS HTML here we're going to need to modify a few things to create the listing so I'm just changing the header to create listing I'm making it an H2 header and on top I'm going to import a few things so that we can get the uh user that is currently loged in in the application so firstly just add using Microsoft asp.net identity I'm also going to need to inject here the user manager in the view page so it takes an identity user and I'll name it like user manager with a small U okay so here uh we're going to need to write encryption type in the form and here we select multiart form data which will be able to accept the file the image that we will uh input there here in the price when we take the price in the label we can just write as starting bit here in the image path we're going to rename it to image because now it is it is a listing view model not a listing model which had uh which has an image property changing it here as well but we need to on top we need to make it say listing view model not listing model here in the input for the image I need to specify also that it accepts image so this line here we needed to write there and about the styling of it can do something so I'm just setting the width of 30% of normal form changing the image here also right now for the eold property we don't need to input anything here but we need to make it that the default value for the is sold property to be false so uh listing is not solved and this we can modify if we go to the listing model and to listing view model as well so here we need to make it equal to false so when it is a listing is created it is by default is not solved so we'll need to modify it in the listing view model as well so here we need to don't need to take any input for that okay so here now we need to take the currently logged in user uh so just put here an input tag it will be of type hidden so yeah it's not shown in the view page here in the sp4 tag we need to specify identity user ID and we need to select the value to it so it will have the value of the currently logged in user so how we get the currently logged in user we use user manager do get user ID of the user that is logged in so that's the syntax how you write it here in the view pages let me just around this here around the project here to see specifically the create view page how it looks like there seems to be an error let me just find it okay so I would suggest the problem is the create post method because we haven't fixed it and it has a context in it but we take the information from the controller we take the information from the service so I think that's a problem then just go to the controller yes so here I the area so I'm just going to comment this out for a minute and try to around the pro project again and just go and to see the create view page see how this looks okay I'm just going uncomment this now so that we can handled what so we saw how the form looked how the create page looked but we'll see we'll handle here how the input will be handled so here we'll take a listing view model just name it listing so we're just making an if close here to check if the listing that image is not null so here we'll see we'll store it in this images folder so firstly to we need the variable to specify the upload directory which is going to be can get it by writing path. combine you'll need to access this address of the www root directory which can be done using uh web hosting environment service which will will have to include actually in the Constructor of this controller so we'll combine this path with the images folder so for this to work we need to import it here in the Constructor firstly we need the we need the private trade only variable for it it's going to be I web host environment I'll name it just like web host environment and this will get us the address of this directory that we want where the images are stored just need to specifi it here inside the Constructor as well and back to the create method here we need to specify here the we need the variable for the file file name how we can get this is by writing listing that image that that name that file name sorry this will get the name of the file when we upload it and the file path will be path. combine this upload directory together with the file name so now we need to right here using v file stream right new file stream we will create the new file stream class here and inside we will specify file path and file mode. create which will basically basically create a file for us so this file stream initializes a file stream class here is the path of the image where the file stream file will be created and here we specify that we want to create a file in this file mode that creat as we can read it here so what is left for us do is here right listing that image that copy to file stream and after we have created and stored the file inside a project we will create a listing object which will be what will be stored inside our database so we'll have this uh we'll create a the new listing the title of it will be the title which was the listing view model the title so we'll take it from The View model the same thing we we do for the description as well price equals listing the price so so this listing was actually the listing view model that we took from the form the identity user ID will be listing that identity user ID and the image path will be this file path that we have here above so this is how the object is created until this point and here what left has to do is to return to return a direct to action to index page so we'll return the user to the index page until the form when the form is submitted afterwards but right now we need to add to have uh to create a function in our service so that we can add this listing to our database so we need a a method that doesn't return anything which is an a single we method and I will name it add and it takes a listing object let me just go now to the listing service and here it would appear an error above and we need to click cck Implement one moment yes here going implement the interface yeah I'm going to need to write a sync and we need to add this listing in context that in the database by I think contacts. listings. add listing and we just need to save the changes to the database so underline context. save changes async and the method doesn't return anything here we need to call this method from the service that we just wrote so wait underlines listing service do add and we'll add there this listing object and we have an error up there because we haven't specified what happens when the listing that image is null so let me just return the user to the same page where the user is so to the create page together with the listing a listing object okay let me just turn the application now so we can test it we actually go to go to program. CS firstly because when we need to register user uh here the service right here we need to specify require confirmed account to false so that when we register a user uh it won doesn't need to uh verify the account so it will be just created instantly let we usually do it for our purpose okay let me just uh register a user here I've run out of names for users just Jeff gmail.com we need the password for it let's go the listings that create I think I have a watch in my files starting we to I don't know 35 and choose the file here okay choose this here here this is think man's shirt was there so I'm just changing this description here okay so here here you see the listing was created we see how the design will be when we create a listing in the index page so we see the title the description the bit and the person who made the listing so what I also need to show you is if we go to our images folder here here we can see that when we created the listing the image was uploaded in our folder here so basically yeah when a user inputed the file there we created and store the file inside this images directory and then of course a new listing was created with the image path uh property so with the address where the property where the F the image file is saved and here in the index view page we see that we take in the image the source is images uh at listing. image path so this is how it is written from the database the address of the image this section will be about the details page for each listing which is the place where most of the functionalities of the application are actually written so we will specify how a listing is displayed when we click on it and we will also write some pieces of logic about the display when specific users see the listing so firstly we need to uncomment the details method here in our in our controller let me comment the text here and I'm going to actually remove a few pieces that we don't need okay so all we need to do here is to make this uh method here that accesses the database we'll need to make a method in the service so here we we'll write the signature firstly which will be an a synchronous method it will return a listing and we usually name it uh get by ID and it will take an in ID as a parameter so let me just go now to the listing service and implement this what we wrote in the interface I'm just going need to write the async keyword basically the logic here will be the same as what we have here so I'm just copying this firstly and I'm just spacing it here here I'm going also add here we I will also include the comments and after that I will also include the bits when we take a listing from the context and after including bids I'm actually going to need for later use to then include the users of that bit which I make with this then include method here and of course after this I'm just going to need to return this listing variable here that's all we need to do in our case here we just now need to remove this here and use the method that we just created just so listing service. get by ID and it takes the ID above so just as a reminder we use we do this methods in the service so that we don't access the database from our directly from our controller that's the reason why we write these services and then we import them in the controllers we've talked about it uh even before but just as a quick reminder now let me just go to The Details page where I'm basically just going to remove all of this and here's a part where you play with the display of stuff so here we'll just import the Microsoft identity to be able to access the users here I'm going to inject to the view page the user manager which takes an identity user I'll name it just user manager I'm just going to remove that here in the beginning we need I'm going to make an if close here so if the user that identity that is authenticated so this basically just says that if the user is authenticated is logged in we'll make some uh specifications in the display and here what I'm basically doing is just okay if the model is sold so if model that sold is true we will uh display a title in the listing so uh depending from the status of the listing so who is the winner or if the winner if the user is the winner will displate as you are the winner so first we need to Loop through each bid in model. bits so here basically if the bid. price is equal to the model. price so for the user who if the bid that price is equal to model that price then the user has had the highest bid and here we specify if the bid. user ID is equal to the logged in user the current log user which we get with this user manager. get user ID basically what this is what this does we will have a header here that says congratulations you are the winner so for this to be displayed the user has to be logged in the the listing has to be uh sold and also the users bid has to have the highest price from all the bits and if not else if here we will specify we will see if the logged in user is actually the person who made the listing so if user man so if the currently logged in user is the model that I user. ID so if the user has created the listing itself it will tell the user who the name of the person who won the biding and if none of this is uh is correct or is for the case then we will just display to a random user who opens the the listing and if the listing is closed he he will see just that the bidding is closed so he won't see who won it or if he is not the winner he won't see uh any additional information so we won't see who want it or of course he won't see that he wanton it so um until now we just made this functionality to display a title in the listing on top of the listing depending on who want it or if the building is closed now we just going to need to uh play around with the display of the page of the listing so I'm having a header here and I'm putting the text Line to Center to center it and here we have the title of the model of the listing yeah I would to need the container div div class container I'm giving the styling I'm giving a background color which is just a color I was I saw before I was I just Mark the values I'm just writing it here for the color that I wanted so I'll give this div a bit of margins on top like 50 pixels and basically the same margin on the bottom as well just some paddings and I will make I'll in put some border radius there to be so the borders will have like corners on the edges so inside this div class container we're going to need to copy some things from the index page CU some parts here uh will be like the same have some same structure so I copied that part from the index view page and I'm pasing it here but I need to adjust it a bit so here I'll make the width to 100% of the width of the image and the height to 60 view height which is the yeah 60% of the screen basically and here we don't take it from listing. image path but from model. image path okay that listing title we don't need there because we have it on the top here I'm just going to write that model the description and this I will actually delete and here I will will specify some conditions to how the foll the following will be display so if the user is authenticated will make it possible for him to put a bid there to bid something but if not then not so here I will make a form ASP action which we haven't created this method yet in the controller but I will just write it here we'll create later the method will be a post method and here where the bid will be displayed we'll make an input there so the type of it will be number so it takes only numbers the minimum the minimum value of it will be the model. price so you cannot bid on lower than the model. price and this step equals one just means that there's like an option there too so with the errors to increase it with one or to decrease it with one the price and the name equals price we need this so we can so when the for when the form will be submitted and in the placeholder we actually just store the model. price that two string and here specify n to which just basically will write the number with two numbers after the comma so with two places after the the comma okay we just needed one single input tag there so together with the first input when a bid will be submitted it should take because the bid objects take a user takes a listing so that's why we we right here this input of type hidden with the name of identity user ID and the class of form control so this will take the currently logged in user that submits the bid and the value that it takes will be H will be will take it from the user manager. get user ID of the currently logged in user so yeah I forgot this slash there and just it's basically the same thing for to get the listing ID as well so it will be hidden for the name here will specify actually the name of the property which is listing ID so that we need when we when the form will be submitted and here the value of it will be just like at model. ID here in the end we just need an inut of type submit just class of form control uh no sorry class of button and button uh primary to be like a a blue button we only needed an one single input tag there as well and this was it for the ad bit form and Below there we can submit we can display the number of bits submitted in a paragraph and how we'll take it is we will take we'll write here model that bits that count which is the method that takes the number of bits that our module has I'm just Mak here this just like a line to separate it from the next thing and here we will specify so if the from we'll take the currently logged in user and if the user is actually the person who the person who created the bid he will be only he will be able to see the name of the people who have submitted bids so if user manager. get user ID equals to the model. user. ID he will be able to see will list here all of the names of the people who submitted a bit and how much they submitted so only the owner or the creator of the listing will be able to see this for each so we'll take for each bit in modular bits so we write here an unordered list of just specify The Styling here to list style Type To None not to have all of this default list stylings here we'll take bit. user that username so the username of the user who have submit has submitted a bid and we right here bid it and the price the amount of the bid so at bid. price that two string PR this is and to so it will be formatted a with the Press yeah so that was it firstly for this part so if the user is actually not logged in now he won't be able to submit anything so here I just need a div and here I will just make an import which will set it to disabled so you cannot import anything there and yeah won't do it inside the fors because uh it won't take anything the input I'm just copying this here so here in the input of type submit we make it disabled so you cannot click on the button on this submit button so also right here if the user is not plugged in he will be able to see also the number of bits submitted for that listing and here down below for to be able to see by all we'll just write the name of the person who sub who listed the thisis thing so mod model. user. username then just copy this here we need to use it again so I just sced that part of code from above so I will just uh so this functionality will be just for the owner of the listing the person who listed it it will have an will make it so the person who listed the listing would be able to have this anchor link here to be able to close the bidding which is the method that will create later this close speeding method and it will take from in the aspr out ID the model. ID just naming it close beding and we actually want to make it so this person can only close the building once the model that is sold equals to false so if a person actually closes the bidding the model will be is that is sold will be true so he cannot the idea is that he cannot close the biding even after the mod the biding was already closed and that after the model was sold so after the listing was sold he cannot close the bidding then because it doesn't make sense here I'm just going to write another of these lines to separate the sections and here we're going to handle the comments actually so if the user is authenticated so if a user is logged in uh he will be able to add a comment to the listing so just making it just we need the container D here and the form which will direct us to an method that we'll also create later to add comments and name get add comment method will be post and I'm going to have an uh H6 header you can add a commment actually we can we will store the commment so the input will be a text area actually so it's a bit bigger and giving it a class of form control for The Styling and this area label with text with text area and the name of this text area will be put it to Contex content so that we can connect it to the when we'll create later the comment as an object and in a styling we'll put the width to 40% and the vertical align to top so it will be placed on top on the upper part here we also need some input of type hidden to have the user that made the comment and also to have the listing which we can copy from here because so that we can create a comment as an object we need these two inut these two properties so to say because a comment is also always Associated to user to listing and that's how we can add a comment just making the styling of this button to so the display of it just making it an inline block and there's some margins to it so in this else condition here else close will just specify how it would look like when the user is not authenticated that and the user cannot add the comment so I'm just copying this here just REM moving the form and this hidden inputs we won't need actually and just will make the input here to disabled so we cannot click it just the same as we did when we added the bid the only thing left now is here just to display a way to display a list of all the comments so this was the form above how to add a when we add the comment now we just need to display the comments just a line there to separate this and I'm just having another container div Just For The Styling or a bit of margins by default and here I just need a header to that say comments and we need the forge Loop to Loop all of the comments for that are made in a listing so V comment in model. comments and here in a div which yeah we can make some styling to it as well just will give it a border will make the Border visible so it will be one pixel thick solid and light gray as a color we'll set the margins to 10 pixels and some padding as well 10 pixel should be enough and we'll just make the Border radius we'll give it a border radius so on the edges it will be like rounded give a width of 40% and yes you can play around with the CSS styling actually yeah just what I was thinking how to do it and inside here in a paragraph inside paragraph tags we can input the comment. content and we can just make it so that we also see who post the comment like the username so add comment. user not usern name and I guess this was it this was this should be it if we don't have any errors so now if we click on the title here it should link us to The Details page and this is how how it looks like so yeah we can submit something there but it won't work because we haven't made the add uh bit or add comment method yet but this is how they would look like which looks good to me that's how they are displayed so here's the comment section and here are the main information about the listing just now no bits are submitted if we going try to log out to see how uh someone who is not logged in sees this just go to listing Index this details one and this is how so this submit button is now not clickable and this comment button is not clickable but the other things the persons that are not Lo the people that are not logged in can see uh clearly can see okay in this section we will handle the CSS of our application and the structure of it we will handle the navigation menu and the way it will be displayed and we are also going to be adding some complimentary features such as pagination and the search bar after all these modifications our auctions application will look much cooler visually and more user friendly so let's just start working so firstly we need to go to site. CSS file to make some modification to the CSS of the application so here we have some already some styling to it by default and I'm just going to be adding some extra some padding in the body uh of the padding will be of 10 pixels and I'm also going to specify here the background color which the one I'm choosing has uh the following codes now I'm just I'm also going to add some stylings to the navigation to the item with the navigation class the background color of it I'm just choosing it to be something similar to the background color but Al but of course to be a bit different and I'm also going to give some border to the navigation and it will be a one pixel solid and and the color of it will be black and now to the items that have the nav link class I'm just making it I'm giving them a color of black and I'm also going to make some styling here so that when we hover over them they will turn the text of these items will turn to white just something to make them visually a bit better so color to white just going around the application to see how many of the changes are saved okay so we see that the background has changed the color we see actually this this items in the navigation are not changing okay so let me just go to the layout. Cs CSH HTML file and here I'm going to we're going to change the items that are in our navigation so first we need to uh remove these classes that are in this navigation class so the color that there already was would conflict with the color that we inputed ourselves okay so now we see that the color of for the navigation is changed okay I'm going to remove this button that that was there we don't need something like that so this icon thing that is by default now I'm also going to change this items in the navigation so for the first one I'll change the controller and the name will be active listings because this will redirect us to the listings controller and to the index method I'm going to also remove this uh class here that specifies the color of this navigation items because that would conflict with our own CSS for it okay so we removed that icon what was there in the beginning okay so what we're going to do now is that some item in a navigation will make them to be visible only when the user is logged in so here I'm writing at if user that identity does uh is authenticated then this menus that will be here will only be displayed when the user will be logged in so let me just copy that first one and here I'm just going to change the method here to make them to to redirect them to the create method and here I'm going to make the title to create listings so only a user that is logged in can access this method this menu item I'm just copying it again I'm putting like three menus three navigation items here and the second one here will redirect us to the m listings uh method and the third one to the my bits method which we will make in the upcoming tutorials but basically this will redirect us to a list of the users listings and the my bids uh method will redirect them to a list of uh to the listings which they have ped for we'll specify how this methods work later but just to have them there uh visually that's why we are doing them now in this navigation item we will actually input the search bar which will make it to be right in the middle of our navigation menu and for it actually I'm going to need the library from the font aom this a page that allows us to have some pretty cool icons inside our projects so this was the page but we need to go to the library and we need to copy the link tag here and input it in the header so that now we can use the cool icons that this Library offers and for it firstly here we're going to use it here because we're going to input a search icon and this will also of course the search input we're going to need to have a form here so that whatever is inputed in the in this sech and this sech input will be redirected to the listings controller and to the index method specifying the method here to get because that's how we do it in a when we make the search functionality when we search for items when filter items here I need an input tag so I'm giving some styling to it just making the width of it to 80% the remaining 20% will be covered by the surge button slash icon I'm going to float this to the left and here I'm giving it a radius to the Border top left on the top left border and in the bottom left border I'm giving it a radius as well so it will be like around it began color I'm setting it to white smoke okay I've mispelled it the float there I've actually made a specific video on how to make this exactly this exact search bar which I'm going to be linking down in the description and here I'm going to specify the type that it accepts will be on the text and the name I'm giving it the name like search string and the class I leave it as form control so down below we're going to need we need a button to submit what to be able to submit the data and I'm giving it a styling of the width I'm saying it to 20% the float I'm going to float it to the left and the Border will be set to none we won't have any borders I'm making the background to transparent and the height of the button will be 40 pixels and of course we need to specify here the type of the button to be submit here we're going to write what will be displayed in the button and here comes our icons from f, library I'm giving it a class of fa and Fa search which is basically just a search icon we're actually going to input icons in each of these navigation items because they will look very much very much better visually so to to the active listings I'm going to give it an icon of fa fa solid and Fa house you can see this on the font aome uh website the codes for many different icons but I've so them before and I'm just imp putting them here now to save some time so to the create list thing navigation item I'm giving it the class of fa fa solid and Fa plus so it's going to be this plus sign the my listings I'm going to change it the class to fa newspaper here and in the last one in the my bits navigation item the class will be fa fa solid and Fa Sac dollar so we're just turning the application to see how it looks until now visually of course need to be loged in to see more things but we can see this search bar here which looks pretty cool in my opinion and the active listings with the sideon when we hover over the navigation items they should be white as we specified in side. CSS but okay we had to write do Nev link to specify that this is a class and if we refresh now we can see that if we hover over this navigation item it will turn to White if we can log in we would be able to see the other navigation items so let how they seem that's how they look when we hover over them and until now we only have active only the first two navigation items and we have to implement the functionality for the search bar as well which we haven't down I'm actually going to open up a project as I said I will link down below how we can add the search functionality in our project but I will just take the code from my for project here and I'll will explain you what I'm going to do be doing so this was my for application firstly I will actually copy the code for the pagination functionality because we are going to implement them both and for both of them we need to modify the index method and I'm going to link down in the description below the video where I explain ping ation more in detail basically we need to add a class paginated list class in our root directory okay I'm naming a class here generated list. Cs and I'll input there everything that I copied from my Forum project this is okay I'm just going to change the name space here to the name of the project and this you could find in the Microsoft documentation as well this exact paginated list class but let me just go back to the controller here and we're going to need to modify the index method as well let me see here in our previous project okay so this is the structure we take a number we take a number for the paginated list and this is how the view will be returned and we need a page size there a page size variable there let me just copy the first two firstly so basically yeah we have a page size how many items we want to be in a page and then we return this pated list class with the items from our context in the parameter we need an page number in parameter to know in which uh in which page we are and we also need this search string parameter if in case the user inputs something in the search bar so we'll take the items from this application DB context variable in this application DB context variable we are setting the page size to three of course we're taking the page number and the search string form the parameter and here we actually make an if close in case the search string is not null so if an user has inputed something in the search string so here in the application DB context variable we are searching with thisare function we're searching for the items where the title contains this search string basically that's what it does and here we need to return a view here and here below we need to make the change it to listing there and in application. DB context here we need to specify that we want listings that are not sold we could do this later St listings where do is sold is equal to false so in the first page will only appear those listings that aren't where the bidding is not closed and we could do it later but I'm doing it right now since we are handling the index method one more time and I'm just covering what we have here and the exact same thing will be returned in case the user inputs something in the search bar but the difference will be that uh the listings will contain the title that was uted in the search bar if we seen in our previous project we also need this on top of the page we need to use paginated list and here we need this variables and this HTML Elements which which basically are just this buttons on on the bottom of the page that we can go from one page to another so from the first page to the second page and so on and I'm just in putting them here in our index. CSH HTML file and on top of it I'm making the model so we are importing a page list model we are using a pated list model and if we're on the application now we should see all of our changes okay we can see here let it just load we can see here this uh pagination implemented but we only have one page and we can see that the search bar is functional if we type their shirt our listing will appear but we only have one listing so we can do much uh experiments with that in this section we will Implement how to add bids and how to close the bidding in our application we will write the methods in the controller for both of these functionalities and we will also going to need to create a bits service so let me just firstly go to our Details page to see where we have added the form to add the bidding and let me just find it so here we have this form where uh the user can input a bit but this add bit method we haven't written anywhere yet so we need to implement that in our uh in our listings controller so I'm just writing it right here somewhere so this will be an http post method so as usual public async it will be an asynchronous weight method public async task it takes it returns an action result and I'm naming it we'll name it ad bid and what will write here inside side we will bind here the what we will take from our form so we write here the ID that we take from the form the price of the bid the listing ID and the identity user ID and in the and we here need to specify also that we are we are taking a bit object from the form so firstly we need to check if the model state is valid and if that is the case here will will basically store that bit in our data based but to do that we will actually we don't we we'll actually need to create a service to get the bids so a service like service bits. add and then we'll add the bit but now we need to actually create this service because it doesn't exist and let me just go to this Services folder here and firstly add a new item to add an ibits service interface press enter and here we need to write the method signature uh this will be an a sing weight method it's doesn't return anything the name is ADD and it takes a bit in the parameters now we need to go to the services folder and add the bits service so like new class bids service and this will implement the ibit service interface here we implement the interface there and we'll need to access the cont context which I'm copying it from the I list from the listing service so just this Constructor and this variable that where we store the context just going to need to rename the Constructor here so this way we will we just take the cont the a variable with the context and this here in the in our ad method we just need to write underline context bits. add we will add the bid to our context and we just need here to await to write away then then to save the changes to our database with this save changes async method so this method doesn't return anything so it's good now and in our listings controller we need to have a variable here for the bits service just like that a PR only I bit service and I'll give a name for the variable just like I've done there above bits service and we also are going to need to write this to write this service in the Constructor as well there and here so now we have access to the service that we created in the controller let me just go to the program that says here and add the service that we just created We'll add it as a scop service and here we specify the name of the interface we always need to do this each time we create a service to go to program. Cs and now back to the add bid method in our controller here the name of our service actually we made it to be bits service and now here we are going to need to take the list thing and here now we are going to need to have a variable where we will store the listing where the bid was made so underline listing service. get by ID bit. listing ID so we'll just we just need the listing where this beding was made so now we can take the listing that price and set it to the bid. price so to the new bid that was made to that listing that's why we needed the listing variable and we need to save this changes to the database and we actually need this to do this by this context. save changes say sync but since we manipulate data in the context we just need to create another method there just like a save changes method it doesn't take anything it doesn't return anything let me implement this in the I listings in the listing service I'm just making it async and here we just just need to write wait save underl context that save changes ASN so now we can use this method in the controller so that the change of the price of the listing will be changed in the dat database as well so here we just write await listing service. save changes and now we can just turn View and return the user to The Details page and we can input here the listing so it takes The Details page will be for that listing the details method takes a listing so yeah we need an listing object there when we return the view and that was it for the ad bid method we now can also write the close bidding method so public Asing task the3 action result the name of it will let it as it was close bidding and it takes an in ID parameter if we go to The Details page let me see where we have it here so yeah we have a anchor tank here to be able to close close the bidding which can only be done by the person who posted the listing and here we need to take the listing where the that has the ID that we take here in the parameter and we will set that listings uh so the isol property of that listing we are going to need to set to true so that means that the listing is sold now we can just use this save changes method to save the changes to the database and we can return the users to The Details page of that listing okay so let me just refresh it here okay there seems to be an error okay I was having an error because here when I declared this service in the program. Cs I declared the interface twice so if I run the application now we can go now and try these functionalities that we implemented we actually is good to uh register another users so that one makes the Bings and the other one can close them just a name and a password there if we click on this listing here they can just try to add the bid and submit it and as you can see now the new price for the bid uh for the bid the new price that can be bided is $37 now so the add bid method meod worked fine worked very well if we log in with the other user now we see here that the owner can see who made the bidding and how much he made so we see there and if we we close the biding now so if the owner tries to close the buildings the winner will appear on top there as we can see here what we WR on top of the details page the name of the winner will appear on the owner's page but if the user has won the bidding it will appear the line of congratulations you are the winner so this should appear on the other accounts page so on Sean's account he if he opens the bidding if he opens the listing he should see only that he should see that he is the winner so if we try to log in with the Shan account okay we won't see anything here because we changed the index page so that it shows only the active listing so the listing is not active anymore because now it is sold so let me just comment this out here that shows in our index page only active listings I uncommented the wrong line there we should uncomment the line where the user hasn't inputed something in the search bar so this here and actually when we'll Implement later on the my listings and my bits method the user will be able to see his own bits and his own listings in a separate tab so we don't have to change it here so this procedure that we're doing here won't be necessary then okay the so now if the user opens it he sees that he won you are the winner so Shan on the bidding in this section we will handle the functionality of adding comments to the listings we will firstly create the add comment method in our controller and we will create the comment service in order to interact with a database so let me just firstly go to our project and I'm going to open up the details page uh here I'm going to I'm trying just find the form where we add the comments so here's our form where the users can input the comments and we have to create this add comment method in our controller so if we go to the listings controller just somewhere here I'm going to write here the method as an HTTP post method and here the usual public async t TK it returns an action result and the name of it is ADD comment of course here then we are going to bind what we take from the form to this method so I'm going to write inside here the ID that we take for from the form the content of the comment the listing ID and the identity user ID and here we specify that we are taking a comment object from the form here we then make the check if the model state is valid and if that's correct we will need to store the comment in the database for that we need to await to write the await keyword and here we need a method to be able to add the commment to our database but for this reason we're going to need to create a comment service because we haven't created any yet so here in the services folder firstly I'm going to need to add an interface which I'm going to name I comments service here we going to have to specify the signature method for our add method so task add and it takes a comment in the parameter doesn't return anything now to the services folder we add a class which we are going to name comment service here on top we first need to implement our interface that we just wrote and here on the errors we need we can click on Implement interface but on top of the page let me just go to the listing service and copy just what we do usually here we need to uh get this variable and the Constructor in order to get access to the context and I'm just going to modify here the name of the Constructor to have the name of our service and in the add method I'm writing there async keyword and here we can just write underline context. comments. add the comment and then we just need to save these changes to the database and this method doesn't have the need to return anything let me just go back to the controller now and we need to write here a variable that takes this service so I commment service and I'm naming it underline commments service we need to store the service to declare it also here in the Constructor just like we've done with the previous services that we've created so in program.cs as usual we need to declare the service we're making it as ADD as scoped service and inside here we write the name of the interface SP and the name of the service now we just need to go back to the controller and continue with our add comments method so here we' added the comment and we here need a variable to store the listing from where we are taking the comment so wait listing service. get by ID and this takes the comment. listing ID so we're taking from the database the listing where the comment was made this is comments. listing ID comment listing ID and now we can return The View with this ex of we can return the view of the details page for this exact listing so what's left for us to do is we can run the application and and check this functionality if I click on this listing can try and edit the comment and add the comment here like did I win I don't know we could ask about the listing actually and here we see the comment and the user who posted the comment and actually try here with the owner's account of that listing which was Jeff and I can return a comment to the user who asked and see how it appears so yes you did submit and we see that Jeff replied to that comment in the section we will see how we can display the specific listings that the user has made we will only need to create the method in our controller and this can be accessed by the user from the navigation menu so let me just open up our controller and we can make this method just below the index method because they have a similar structure and I'm copying this firstly and pasting it just right below that I will change the name to my listings and I'm actually not going to make the search functional I'm not going to need the search functionality for this method so I'm going to delete this part and this lines here as well but we're going to have we're going to use the pagination here uh the only difference that's going to be is that when we return the view we will return the index View and also let me just uncommon this part here because we in the index method we need to show only the method only the listings that are not sold and in our listings method we will show every listing that the using that the user has made including the sold ones so here we can write this dotware method where we will specify that we want to display only listings where the user ID where or where the user is equal to the currently logged in user so l. identity user ID equals user do find first value and inside the brackets where I claim types do name identifier with this line here only what it does is just takes the ID of the currently logged in user this is how we get the idea of the currently logged in user in the controller and this is all we're going to need for this method now if we run the application and we click on the my listings from okay firstly when we run the application we won't see this listing anymore because it is sold the listing is sold as we did in the previous video when we close the bidding okay I'm just running it one more time so we won't be able to see any listings in the first page but when we go to my listings we will see all of the listings that this user has made before in this section we will see how we can display the specific listings that the user has bided for we will need to create a method in the controller as well as a service to get the bits from the database then we will create a New View page which the user can access from the navigation menu so let me just go back to the project and here under my listings method I'm going to copy them and I'm going to right here my bits method this they have a similar structure but also they are different which we will see here so the first thing that I'm going to do here we will get the data from the bit service and not from the listing service because we'll get a list of bids and we haven't created this method yet so if I go here to the ibit service interface I'm going to need to create this get all method which will return an i variable of bits and it will have the name of get all and if I go to the then to the bits service let me just Implement that method here that the interface and let me just remove it here and inside this variable I'm going to get the data from the context so we'll use this link query to get the data from the context so from a in underline Contex context. bits we will include in the context a few things so firstly for the bits we will need to include the listing because we will then Show the listings and if we add then include we can take the users of that listing and there we select it select a and we will just need to return this variable that's just how we let just all for the get all method and here as we we have written it here we have taken the data here in the method from the service the difference here is that when we will return a page unated list of bits and we'll take the bits that a user has created and here in the when we return the view we will return the view for the my bits which we will create now The View page for my BDS so we are just adding a view here just an empty view which I'm going to need to have to name the same as the name of the method so my bits and for this I'm actually going to copy the index page but but I'm going to make a few modifications to it so I'm just going to copy the whole index page and I'm pasting it here we have here a list of bids and here in the for Loop I'm changing it to bit we'll take the bits and we'll get the same information that we get in the index page but we will access them by writing here at bid listing. image path for example and for all of the others so here we will take the listing ID by writing at bid. listing. ID and this way we'll take the title of the listing that the user has bided for so at bid. listing. Title Here we right at bid. listing the description so by using the bid we will access the listings that the user has bid it for here as well we'll access the user the listings user by the bids I'm I'm just changing this paragraph here to no bits made or just no bits Rel leave the HTML for the pagination as it is and if I run the application now okay if I go to my bits as I remember it's correct we can see we actually bid it for this so and we are actually the winnner so we can see this listing by accessing the bits you can just go to the my bits view page here I'm just going to change the the title here to just my bits and this way we can see that we access our bits by in this page so we have come to the end of the section and this was also the last functionality that we needed to add to complete our auctions application we have come to the end of this YouTube series we created a complete application in asp.net core and learned how to build the useful auctions application we did play around with different functionalities like adding bits adding comments closing the bidding creating listings Etc we also tried different things in the front end in order to display specific data depending on the user that was logged in and we worked on implementing various features to the same project or to the same page in case you have a based knowledge and know how things pretty much work in any language or framework it is important to try and build projects with a degree of complexity you will learn a lot just by putting all that you know together and by solving new things that come up during the way that's why I would recommend you to try and add new features to this auctions application or change the way things are displayed in certain places then you would actually realize how much you really known and how much you understand how the entire application works I was thank you very much for watching and I would really appreciate it if you subscribe to the channel and like the video in case you enjoyed the whole series thank you and I will see you in the next one