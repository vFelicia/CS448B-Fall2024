hey coders i'm cody seibert and welcome to another tutorial where i'm going to show you how to build a calculator app using vue.js so to start off let's just go ahead and show you what we're building so i'm just going to load up the mac calculator which has a kind of a grid i guess this is like a four by five grid that has buttons you have different operands and operators and of course you have a display section up here so that's what we're going to try to emulate and i don't know if it's going to work 100 as this app does but we're going to try to get close so moving on i'm kind of going to skip the setup i basically use vcli to set up this project here and what we're going to do is just kind of modify what's already there to build out our calculator app so to start off let's go into the app.view file let's just go ahead and clean some of this up so that we only display our calculator so i'm going to get rid of this image and i'm also going to get rid of this hello world but instead of just deleting it i'm just going to go ahead and rename it to calculator and then anywhere i'm importing it just change that the calculator so i'll save that that's going to crash because obviously we haven't created the calculator component so if i go back to my components folder i'm just going to rename hello world to calculator open that up and just go ahead and gut basically everything we have so we can start fresh and just to verify that this is working i'll leave a little hello world message in here and save that go ahead and gut the styles gut the source save that and we are good to go at this point we don't need to touch any of the other files that i that i'm aware of so let's go ahead and talk about what we need to do we go back and look at that calculator it has a kind of a grid structure so i'm thinking about using css grid to kind of replicate that so let's go up here let's remove that and let's just call this calculator then inside our styles i'm going to define a new calculator class which we can use css grid so i'm going to say grid template columns i'm going to say there's going to be four columns and i'm going to repeat them with equal width right so this is a way to do like percentages so each one has the same equal percentage of each other and then for the rows this will kind of make sense in a second when we visualize it for the rows i'm just going to give it a grid auto rows and that's going to put some spacing automatically between all of our rows so each one should at least be 50 in height i'm going to save this what this is going to do is basically any child element of our calculator component is going to be put into a 4 by infinity grid so to show that i'll just say span hello paste that a couple times in fact i think it might need that he divs let's see in fact i think i forgot to say display is grid okay so definitely don't forget that line 19 display grid that tells the component that it needs to be a grid css grid so if you notice here as i keep pasting new components we're getting a four column by infinity amount of rows grid so that's kind of a step in the right direction and what do we need for our calculator well first of all we needed a display i'm going to say class display and i'll just type in some random number here and what we need to do is we need to make this display span the entire top four columns so if we go down at the bottom of the style and say display we can specify how many columns that display should take up so i can say grid column i want to start at column one and i want it to end after column four so if i save this that displays will take up the entire first row and kind of demonstrate that a little bit better i'm going to say make it red just so we can visualize right and then let's just go ahead and make the font a little bit larger for all these so i'm going to say font size of 40 pixels just to make it a little bit easier to read so at this point we can start implementing the rest so let's look and see what we need we need a row that has ac plus minus percent and a divide icon so here i'll just get rid of this and i'll say clear i'll do plus minus uh i think it was percent and then we have a divide let's paste in here so if i say that we kind of have our first row ready to go and now for the second row seven eight nine times i'll do the same thing seven eight nine and then i'll just put an x for times so say that let's just go ahead and continue four five six minus four five six minus and then we're gonna need four more three sorry there's gonna be one two three i believe one two three plus and finally we have a zero dot and equals so i'll just do that zero dot equals so one thing we'll notice is that the zero i forgot to add a plus so let me just do that but we need the zero to take up two columns right so how do we do that before we use that grid hyphen column class so what we can do here is just say sorry on the zero i'm going to say class 0 and then down in the style i'm going to say 0 is a grid column of one comma or one slash three which will give it two columns in this and now since all of these are kind of like buttons let's just go ahead and give it a class button for all these obviously i could just give them buttons just to keep it simple though i'm just going to give it class equals button go ahead and fix that zero go down here and i'll make a new button style so bpn background color it's equal to i know ee for now order one pixel solid all right so we're making a little bit of progress so going back to the calculator notice that this whole row here or column i mean has kind of like an orange text for the or orange color in the background so what i'm going to do here is to find a new class called operator i'll give it a background color orange and then a text color of white and then for any of my operators so that includes divide i'm going to give it a class operator times minus plus and equals i'll save that and now we have the correct coloring for these operators let's just go back one more time and look to see if we're missing anything yeah so at this point it seems pretty good i mean we could probably spend hours just messing around with the styles to make sure it looks good so now that we have a decent layout going and of course let's just get rid of this red make that something else all right so it looks a little bit better border i'm still being kind of nitpicky here the border's a little there we go of course if you don't want the the columns to be so large what you could do is just set a width to our calculator so i'll give it a width like 400 pixels and then a margin zero auto to make it centered here okay so our calculator is looking a little bit more like this calculator here i'm not going to spend too much time making it look exactly as is like i don't need to text to line this right or whatnot but anyway the next fun steps is we need to declare the logic and the bindings to our different buttons and display the first thing i see here is we could probably abstract this into a view data property here so let's go to our view component and declare a data function which returns something that has a display or a current set equal to an empty string and then up here i'm going to just interpolate that here and say current so it's going to render whatever the current data value is so for instance if i say one two three that's going to render out one two three or if i type hello world that's gonna type out the string but for now we're gonna keep that blank and then we're just gonna fall back on a zero if it's not defined and then we can kind of just go through these buttons and one by one add whatever functionality we need to it so to start off let's just do a click callback on the clear button and we're going to call a function called clear and to define functions on your view component and notice that this is a view component all you need to do is add a methods attribute and then define the method that you want so i'm going to say clear as a method and what's going to do it's going to reset current back to the empty string here so if we were to have something typed in there and we clicked on the c notice that it goes back to zero so moving right along let's go ahead and try to implement the next method which is sign so again i'm just going to add a click listener to this and call a sign method and then i'm going to go and implement that sign method here so what do we want to do when the user clicks plus or minus basically we just want to append a minus in front of here if it doesn't already exist or if it does exist we just go ahead and remove it so one way to do that is we could just say this dot current is equal to this.current.care this is going to be a ternary operator where we just check if the first character is equal to a minus then we're going to return that string without that first character otherwise we're going to return that string with a minus sign appended to it so now if we were to go and type in notice that this just goes and that's probably something we should try to fix but um if we assume that we actually have a number here like one two three four oops put on the wrong thing so one two three four if i save that notice that the plus or minus is now adding to it now oh cool so we might have to come back and just change that up a little bit i think for now we can move along to the percentage so let me add a new called new one called sorry let me add a new click callback called percent and down here to the methods same idea we're just going to add a callback function and what we're going to do here is basically just divide whatever number it is by a hundred so this current is equal to the string of ours float this dot current divided by 100. all right so just take the current string value make it a float divide it by 100 and then cast it back to a string here so to kind of show that let's just make current equal to like 600 and then if i click on that percentage notice that it becomes six i click it again it should become zero point or zero point zero six okay so that is working fine awesome um at this point you should kind of see how easy it is to like write out your functionality your calculator has a particular state and we're modifying the state as we click the different methods here all right so let's move along to the different numbers at this point i think we'll leave the operators um for once we have the numbers implemented so the implement the numbers basically we need to think what do we need to do every time we click on one of these we just need to append to the end of this string right so that should be pretty straightforward let's make a method called append and that's going to take a number as an argument and what we're going to do is we're going to say this dot current is equal to this dot current plus number and in fact i don't like doing plus here because we're kind of doing string concatenation so i'm going to do this dot current concatenated with number so it's more explicit that we're just joining two strings together so now we can actually use this method we just created if we go up to here and for any time we have a number i'm just going to go ahead and use that click callback i'm going to say at click is equal to append and then for each one let's just go ahead and put in the string that we want to append so seven eight nine four five six one two all right save that and i forgot to do zero so let me just go and add zero here let's see so does this work seems like it so let's just go ahead and add everything one two three four five six seven eight nine add a zero works fine um not sure if that's proper but we won't worry about that right now all right so moving along last thing we have for the operands is this dot so let's just do another click call back and call it dot so it's going to call a function called dot and let's of course make sure we define a function down here called dot what we're going to do is very similar to append but we only want to append the dot if it doesn't already exist so i'm going to say this dot current if sorry if this dot current dot index of the dot is not equal to negative 1 then we don't need to append it in fact i'm just going to say make sure that the dot doesn't exist and if it doesn't exist we can just say this dot append and then append the dot and that's basically just going to call this method here with the period so let me save this type in some numbers type in a dot click some more numbers try dotting again and notice that it doesn't append it anymore all right we're making some really good progress now to the more difficult part of building a calculator app which is the operators so for each of these operators we want to call a different kind of click callback so for this one i'm going to say divide for times i'm just going to say times i'll say minus and then for this one i'll say add so for those four operators let's go ahead and declare those four methods so divide times minus and then we have plus or i think we call it add let me check what do we call it yeah we call it add so what we might want to do is when the user clicks on one of those four operators we want to kind of set inside of our internal component state what our operator is going to be when we click the equal button so up here i'm going to make a new data called operator and i'll set it to null for now and basically whenever we click one of these we're just going to define the operator as a new callback function so for each of these it's going to take a a and b and it's going to return some type of math that is happening between those two so in this case divide will be this and then for the other ones we're simply just going to change what the operator is doing so this one will be a times b this one will be a minus b and this one will be a plus b so i'll save that and as we click these things our operator is going to change depending on the last thing that we clicked the last step is how do we actually use these right basically we can't use it until we click the equal button so let's go over here and add a click call back to equal and make another function and this will all make sense when we tie it together in just a second so basically when the user types in a number like 200 we click add we know that the operator is going to be set to the add operator and then when we type a new number we need to kind of keep track of that previous and current number so notice if i were to type a number now it's just appending to the current so some additional logic we need to do is i'm going to say make another one called previous which is set to null and then i also want to add a boolean called operator clicked which is going to be false so anytime we click one of these operators we just basically want to do operator clicked is equal to true and then we want to set the previous equal to the current and i could probably abstract this into a helper function since it's very very similar logic between all these so let's kind of do that i'm going to say set previous as a function which is going to just run those two commands and i'm going to call set previous after all these right so it's not set previous all right so let's try that now so if we click on 200 we click plus we click 200 again notice that that is not working just yet and that is because we forgot to clear out the current right so basically after we've clicked operator clicked we need to check to see if we've clicked an operator when we call that a pin method so over here what i can do is just say if this dot operator clicked is true we need to say this dot current is equal to an empty string and then this operator clicked is equal to false to kind of set it back to that empty state and of course we can just continuously append to the current after we set it equal to empty string let's try this again we need to say one plus two and notice that previous is one and current is set to two here now the last step is when we click equal we want to run that operator against the previous and the current so what i can say is this dot current is equal to this.operator this dot current and this dot previous basically take the current value and run the operator against the previous value this is not going to work because this is a string and this is a string so what we need to do first is parse that to a float and then make sure we cast it to a string here so let's try that out and see what happens in fact we probably want to reset previous um after we've done that so i'm gonna set that back to null here all right so let's try out some of this stuff so i'll do like 1 plus 2 equals 3 plus 5 should equal 8 eight should equal zero times five should equal zero plus ten times five is fifty divided by four is point zero eight times one gives us that negate it add eight get back to zero um let's say 90 let me clear it and go to 90 percent times 100 should be or sorry it should be 90. um negate that and add 10 to get negative 80. so our calculator is pretty much working i think there's like a bug or two like for instance if you do if you're at zero you do plus or minus that's kind of like a little bug and then also like i think normal calculators as you keep pressing the operators it's gonna like run your equal but i'm not gonna dive into kind of fixing those i just wanted to kind of show you a really quick overview building out a calculator app using vue.js and honestly it didn't take any time at all it's pretty straightforward if you want to try to fix those bugs feel free to do so on my git repo and post a pull request but for now i think this is a a good ending point for this tutorial so if you have any questions or comments or concerns feel free to leave some in the comment section below and if you have any recommendations of future little like mini projects that i could try to build um again leave me a comment or send me a tweet on twitter well so that about wraps it up thanks for watching and happy coding