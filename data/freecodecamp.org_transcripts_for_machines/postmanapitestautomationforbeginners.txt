apis have become the backbone of software development making API testing an essential skill for developers and testers in this course Valentine despo will teach you how to use Postman to write and automate API tests from the fundamentals of API testing to the intricacies of automating these tests using Postman this course covers it all you will learn about variables scripts debugging JavaScript Basics Json format assertions regular expressions and more plus the course provides valuable insights into integrating Postman tests in CI CD and the fundamentals of collaboration within a postman workspace so let's start learning hello African campers and welcome to this course introducing you to API testing and automation with Postman my name is Valentine I'm a software developer with a passion for sharing my love for technology in a fun and easily digestible way in this course we will dive into why automated API tests are so important and how Postman can help with that my goal is to help those already familiar with creating requests in Postman explore the thrilling world of test automation with an emphasis on writing tests and automating test executions while this course is for beginners it is not for absolute beginners in terms of apis you will get most value out of this course if you already know what an API is and know how to use Postman to create requests if you are a total API rookie fear not free code Camp has at least two other courses to help you get your feet wet now let's turn our attention back to this video which wouldn't have been possible without the support of Postman the sponsor of this course for which I am very thankful throughout the course we will work with an existing Postman collection write tests and automate their execution with various tools by scheduling runs directly from Postman or by employing a thirdparty CI CD tool such as GitHub actions in other words we'll be focusing on test automation if you Ace all the assignments from this course you will be able to claim a postman badge that certifies you have completed this course and are a true Pro in test automation want more details check the video description for a link to the course notes there you will find essential resources and troubleshooting tips for when things go Haywire I will also be posting any updates or Corrections there after all this is a fastpaced industry where change is the only constant so if something is not working make sure to check the course notes first this actionpacked course will surely keep you busy for a few days at least as always on free code Camp please help us create awesome content by liking and subscribing and hey if you're enjoying this course do me a solid and drop a comment below I'll do my best to answer if you learned something from this course I invite you to check out and subscribe to my YouTube channel Link in the video description below which is packed with content about Postman devops software development and testing also don't be shy connect with me on social media I would love to hear from you don't forget the sponsor of this course Osman their channel is chock full of valuable videos definitely worth a subscription so be sure to show them some love as well lastly a huge thank you in advance to those who will support free code Camp by clicking that thanks button and making a small donation I hope you're excited to learn more about automated API testing in Postman and with that being said let's get started welcome to the world of API test automation where we're about to embark on an Epic Quest full of surprises challenges and most importantly fun I want you to think about this course as a multilevel game where we'll conquer each stage together and level up our Postman testing skills to be a pro at this you need to go through four levels which will take us from manual testing all the way to automation we are at level 1 where we will use our trusty Postman collection for some manual testing we will also need to get up to speed with some JavaScript Concepts but don't worry I'll try to make this as easy as possible the first thing I need you to do is to open Postman for this I'm going to use postman on the web so it's essentially Postman in your browser if you go to postman.com and log in you should see something similar to this one so in this case I'm logged in inside my Postman account and I can manage here workspaces and Collections and you can see here that I'm logged in because I'm getting this nice icon here the first thing that I like to do when using Postman is to change to a darker theme so from settings I'm gonna select here themes and I'm going to select the Dark theme okay this is just a personal preference you don't have to do it but I'm going to use this throughout the course now once you have Postman open and you have logged in into your account we can now jump straight into the API open the course notes from the video description so in the video description you will find their link click on that link and you will be taken to a page that looks like this one located notes for this lecture and then you will find a link that takes you to a workspace this is the workspace that we will use throughout the course so it's important that you know where to locate this link to the workspace inside the course nodes what we have inside this workspace is the collection or an API as well as various assignments that you will need to do throughout the course this is the postman collection for an API named Valentino Artisan coffee house I love coffee so why not create an API for a fictitious coffee place this API helps browse a list of products view details and place an order for coffee of course in order to work with this API all we have to do is expand this collection here and we'll see here various endpoints that we can use for example we could use this request to get a status of the API as you can notice here everything is grayed out and we cannot make any changes to this to make changes to any of the collections in this workspace we need to make a copy in Postman we call this a form so essentially in order to work with this collection we need to Fork it now before we Fork this collection it is best to create a separate workspace that we will use throughout this course so from the workspaces here you will have here the possibility of creating a new workspace I'm going to name my workspace free code camp API test automation with Postman and I'm going to go ahead and make this a public workspace let's go ahead and hit that create workspace button so we need to switch back to the workspace and to do so we're gonna need to access that link that we have used previously so we need the link that we have used previously so that we go to this original workspace with all these Postman collections next what we'll do we'll go to this collection which holds the API and from the Ellipsis I'm going to click on it and we're gonna get here this menu and the option that we're gonna select is create a fork and when we select creative work there are still a few steps that we need to take first of all we're gonna be asked how we want to label this work and by default Postman will give us a suggestion and we can just go with that suggestion it does not matter so much at this point the next thing which is maybe a bit more important is where we are going to create this copy this work of the collection and we have previously created a new workspace so we're gonna select that workspace so instead of my workspace I'm going to click on it and I'm going to select here free code Camp API test automation with Postman next you will be asked if you wish to watch this collection watching a collection means getting notifications each time A change is made in the parent collection so if you don't want to be bothered with emails every time I change something about this collection it is best to uncheck this let's go ahead and click for collection now we have our own copy of this collection so for example if we expand it here and go here inside the status folder we can click on get API status and we'll be able to see here that send is enabled this is essentially a regular postmap collection where we can start making changes as we need it is totally independent of the previous workspace we have seen it's just a copy of the collection we made from that workspace so let's go ahead and simply click on the send button to see if this API is working so what you will see here is the message Api is up and running if you don't see this message if you see at this point some errors no need to freak out just refer back to the course notes and follow some of the troubleshooting ideas that I will list there but if you're seeing this message and we're also getting here a status 200 okay you are on the right track a postman workspace is essentially a central point where collaboration occurs within a team we will use Postman workspaces to see Run results write comments and generally collaborate when working on apis before we continue exploring Postman let's first understand what API testing is API testing is a type of software testing that checks the functionality reliability performance and security of an API in simple terms we test API to make sure it works as it should API testing is like quality control in a car factory a car must go through various inspections and tests before it is considered ready for the road we really don't want to release a car that has no brakes ouch API testing focuses on examining the API from the Viewpoint of an external user the consumer of the API to ensure it behaves as expected the main goal of API testing is to find issues and defects in the API ideally before it is released and made available to user in this course we will focus on functional testing in functional testing we will examine if the API works as it should from a functional perspective and we're gonna look at individual API endpoints and ensure that they respond correctly to various HTTP requests other types of testing such as performance tests and security tests are outside the scope of this course before we can automate the testing of the API we first need to do a manual test we cannot automate something if we don't know how to do it manually in this lecture we'll go through all the endpoints of this API and check if they work as expected the idea of this API is pretty simple we have essentially a list of products that the coffee shop has available and we can submit an order for one or more products we're gonna begin here with a status endpoint because the status endpoint tells us if the API is available tells us if the API is up and running so if this endpoint isn't working properly testing the rest of the endpoints doesn't make a lot of sense and when we're doing this test what we want to do is first of all send a request see if something comes back in the first place and then when something comes back we're gonna take a look here at the status we typically expect status 200 okay and second of all we also want to take a look in the response body to see what's inside there so obviously this is coming from the API it's telling the API is up and running so this is already a good sign it tells us we have reached the API and this is a response from the API itself the next step is to take a look at the products that are available so I'm going to explain here the products folder I'm going to click on get all products you can also go ahead and close this previous tab as we don't need it anymore I'm going to click here on send so what we're gonna get here is something a bit more complex in terms of the response we're gonna still see status 200 okay and we're gonna get this relatively large response body that you see here so we can scroll through it and we're gonna see here a lot of products coffees and so on now there are a few things I want you to notice first of all we are getting here 33 results in total so this is some information about all the products are available and these results are paginated meaning they are not displayed all at once which means that if we want to go through all the products like the pages in the book we need to turn the pages so in order to facilitate that we also have some information we know what is the current page and we know how many pages are in total so for example if we want to go to the second page we need to use a query param so we'll see here the parents are already available the parents tab is already selected and one of the query patterns that we need to set is the page so if we enable this query param you can tell us the page that we want to fetch the default initially is one but we already have page one so let's go ahead and change this to 2. so now we're going to check if we have page two so we are now getting other products in the list and we can go on so on and so forth through all the pages apart from this what I want you to notice is that each product also has a category so there are a few categories for example let's say we are only interested in pastry so what we can do is copy the value pastry from here gonna disable the page initially but this time enable the param category I'm gonna paste here pastry and what we're gonna get back are only the products that are from the pastry category we're gonna see here the information has updated there are several results there's only one page in total and we're getting this page so if we go and scroll through this we're gonna see that all the products that appear here are from pastry right so this is how we can get a list of products but let's say for example we want some additional details about this croissant so in that case we have a separate endpoint and that is the get single product endpoint and what happens with this list is that a product can have a lot of information and we don't really want to display all that information at once for that we're gonna use the get single product so that we get information about a single product now I want you to notice a few things here so we have the base URL and then we have forward slash products and then we're using this annotation which denotes a path variable it's essentially something that's part of the path is the address where we can reach that particular product so let's say for example we have here this croissant and we want to get some additional information so I'm going to go ahead and copy the ID of this product I'm gonna go to get single product and paste this ID here let's go ahead and click on send and of course what we expect here is yeah the name is the same the ID is the same we're still in the category pastry but addition we're gonna get information like a product description which wasn't available before or in this additional text it's going to tell us it contains gluten and milk all right so now we have tested these two endpoints we have tested that we can get all the products and this endpoint also has some parameters that we can toggle on and off and play with them it seems everything to be working fine so we can just leave it as it is and then we can move forward now in order to move forward and place an order there are a few things that we need but let's go ahead and open the orders and this time to create an order we're gonna use a post request now what's important to know about a post request is that the post request typically has a request body something that we didn't have before so far we were like give me information about all the products give you information about a single product so it's like get get get get me that information but now I'm saying no no I want to place an order so for that we're using a post record and essentially in the body we're saying what we want to order so let's take a look at the body that is already here you'll notice that there's some information that's already entered here now what's interesting here is that we need a customer name so for example you know when you're ordering coffee somewhere you're gonna ask what's your name so that I know to call you when your coffee is ready so we need some customer name and what we have here is a random Postman variable a random Postman variable will generate in this case a full name with every request and it's not something hardcoded like for example if we're right here Jamie doe that would be a value that is hardcoded this is something that changes with every request and we're gonna take a look at that a bit later but just in case you're wondering this is the Syntax for one of this Postman random variables and apart from this what we have here are the products that we want to order so when we want to place an order we need to specify the products and we need to say which is the idea of the product and what is the desired quantity all right so let's go ahead and submit this order and see how it works come and click here on send and what we're gonna get back here is 403 Forbidden and apart from this we're gonna get also this error invalid API key now this is a bit interesting because this is not necessarily what we have expected we wanted to place an order but it does not look like this order has been successfully received on the other side and similar to this we also have other endpoints for example if you want to check what are all our orders that we have again 403 Forbidden invalid API key now the question is how does the API know who we are and how can an API then show us all the orders that we have we need a way to authenticate ourselves and this is a bit the topic of the upcoming lecture but in conclusion we went through some of the requests in this collection we have inspected the status code to determine if the call was successful and we also looked inside the response body to see the data that is there to see if that data actually makes sense this is a very basic form of testing we have manually tested if the API Works which as I said earlier is a very important step towards automation so how can we get this request work we need an API key which we don't have and without it we cannot send an order well in order to get that API key we need to register ourselves with the API now in order to do that we're going to go here to the clients folder and we're going to register a new client now in the context of apis when we're talking about clients or API clients we're referred to entities that are using the API a client in this context is not the same as a customer so for example for this coffee place API we wouldn't have the customers actually register themselves with the API we only need their name in order to process an order but what we would like to register as a client is for example a terminal where an employee types in this information in a more General context your Postman tool and your usage against this API is also a client when you are using Postman to connect to this API Postman is a client it's an API client that connects to it so we now we need to register ourselves with this API now again this is a post request because we're creating some data whenever you're creating some data we're also sending this data typically here in the body what we have here for the registration is an email we only need an email to register also now again here to test various scenarios we have a random email that's being inserted here so this is absolutely the same as writing something like jamie.do at example.com but Postman changes this all the time with a different value not so relevant at this point because we just want to register our status with this API so let's go ahead and click the send button and what we're getting back this time is 200 okay and what we'll see here is a token now token is sort of like a temporary password that's being used by apis and if you're working with apis we're going to come across tokens a lot but what's important about these tokens is that this is a secret this is something that only we should know and we want to make sure that we handle this Secret in a very careful way in Postman what we don't want to do is we don't want to put the secret inside the request we want to store it somewhere else where it is a bit more safer a bit more protected remember we have created here a public workspace if we put here a secret somewhere in our request well somebody else can just simply grab that secret and impersonate us this is something that we don't really want to do now let's go ahead and copy this value and what we're gonna do with it is we're gonna store it inside our collection as a postman collection variable I'm gonna hover here over the collection until this Ellipsis shows up I'm going to click on it and select here edit and this will open up information about the collection itself now what we can do next is to go here to the variables tab and what we'll see here is origin entry API key well apparently we need to enter here an API key and this API key will be used by the collection so obviously enter a valid API key is not an expected value so what we're gonna do is we're gonna go here under current value we're gonna paste the value that we have received when we have registered ourselves with the API and next I'm gonna click here it is super important that you understand the difference between the initial value and the current value because our workspace is public somebody else can see this information but from the outside the only information that is visible is here the initial value in the initial value our secret API key is not being exposed however when we are running a request with Postman only the current value is being used not the initial value so this token that we have here can be stored even in a public collection and can be used by US when working with Postman and sending requests at others from the outside cannot see this information so in a nutshell it is always a good practice to store any secrets that you have in Postman variables and to make them part as the current value unless you want to share them with others so now we have store this value so let's take a look at create a new order why didn't this request work well actually it has a bit of authentication here and the token that we have provided previously is not valid so let's try this request once again to see if it works now so now what we have here is actually status 201 created indicates this order has been created we're saying okay great let's take a look at the response by this to see what we have inside there and we'll have here the order ID this is our client ID so this is some internal idea that the API has assigned to us we know when this order has been created and we also know the customer name and you're probably wondering well where this Amy came from well this is the random full name that at the time of the execution postman has simply generated this random name we submit this request once again we're going to get a different and then in the lower part we also have the products that we have ordered still you're probably a bit confused where does this come from how does this work well typically authentication is being sent either as a query param so if you look here at the params you're gonna see no there are no query parents okay so if it's not a query param typically it is something in a header we can take a look here at the headers and again we're going to be uh no I don't see anything oh well let's take a look again you see here we have 10 hidden headers right so let's click on this to expose this hidden headers that we have here let's take a look if there's anything that we oh yeah look at this x dash API Dash key so this looks maybe like our API keyer that year so how did our PostNet variable transform in this header here that's a bit weird right and you know how can we change this you know if you're trying to make some changes so it doesn't work okay so this is a bit of the magic of Postman trying to make things a bit easier for you to manage but you know if you're encountering this for the first time it can be totally confusing actually this has been configured using an off helper the name implies it's something that's designed to help you a bit and this is typically configured under authorization if you go here under authorization what we're gonna see here is well the type is inherited off from P it's actually says parent so it's just a bit smaller on my screen so it means do whatever the parent does in terms of authorization it's like oh which parent do you mean well as you can see this request is inside a folder which is called orders so we need to look inside the orders because that's the parent all right so we're now inside orders and what you see here have authorization this is the tab where we're active and what we have here in the list is API key because yes we have an API key and in this case the API key has a key name which we saw in the headers also has a value which this is how we reference the postman variables with curly braces and then this is added as a header and we actually saw the header the advantage of configuring this on a folder level is that all the other requests that we have can use this without us having to manually go through every request so let me show you for example if we go here to get all orders we expect here to see the order that we have just submitted so what do we see that is 200 okay looks good and here is our Amy ordering something from the API ordering something from the coffee place perfect so as you have seen nothing has changed just by placing a postman variable in the right spot and correctly configuring this request in terms of authorization can get things to work again now we still have one endpoint and that is get order by ID so you can simply go ahead and we already have here an ID let's go ahead and see if this works no we're getting back 404 not found well typically first founder font can mean two things either this order really doesn't exist or actually not our order so if you're looking here in the list of the orders that we have well we have a different order ID so how about we use that one and replace the value here let's click Send again and yes we're gonna see here the entire order that we have submitted including the products that were ordered which were previously not visible so in a nutshell this is how we wanna handle secrets in postman by using variables and also using this auth helpers which make our life a bit easier and also reduce the chances that we make any mistakes we need to be able to write scripts in Postman to automate the testing of this API API tests are written using Scripts and automated testing is a way to check if the API works correctly by letting Postman run some tests instead of running all these requests by hand and checking the status code and checking the body and so on this approach has many benefits most importantly it is faster and more accurate because a computer can run the same tests over and over without making mistakes computers are great at this humans tend to get bored and start making mistakes writing tests also helps document how the API should behave or how it used to behave in the past at least now leaving all the benefits behind let's actually start writing some scripts but where can we do that well let's expand here the status folder and get into the API status request in Postman there are two places where we can write scripts the first one is the prequest script and the second one is inside the test now what does prerequest script mean okay it is a script well prerequest means that this script is executed before the request is being sent and we're gonna get a bit into that why this is important and which are the use case but just keep this in mind you can write them before the request is executed and inside the test you can write some scripts that are executed after the request has been sent and a response has been retrieved so how does this look like well if we click inside the prequest script we're gonna have here this editor where you can start writing some code the same goes here for the tests pretty much the same editor so this is where we can write these tests inside this editor here in order to write the test here we need to use a programming language called JavaScript Postman only supports JavaScript and it is not possible to use any other programming language to write this Scripts however JavaScript is relatively easy to learn and also in the upcoming lectures we're gonna go a bit into JavaScript so if you've never written JavaScript before it's absolutely fine I'm gonna take you through this step by step no worries some people confuse JavaScript with Java another programming language but trust me they are super different and they don't have anything in common apart from this let's say unfortunate naming similarity but anyway just keep in mind JavaScript and Java definitely do different things all right so how do we write some code well let's go ahead for example and start with what we're doing a lot of programming language we start writing like a hello world thing so how do we do that well we can start typing here something like console.log you'll notice as I start typing you're gonna get this suggestion so if you hit enter it's gonna auto complete with the first option that you see in the list that is console I'm gonna write here Dot and there another suggestion pops up and I can even go and select what do I want to use here so if you start typing log you're gonna get only one suggestion and if I hit enter once again this suggestion will be completed this is just a quicker way on how you can type this and make sure that you're making fewer mistakes alright so console log is something that allows us to print a message so I'm gonna go ahead here and between parentheses and single or double quotes I'm going to write something like hello from the test okay so this is the message that we want to send out and at the end we're gonna terminate this instruction with a semicolon in order to actually execute this code we need to click on the send button so that we run the request this code is always associated with the requested sound so either we decide to run this code after we have executed the request or in the freequest script before we have executed the request in this case it is in the test so it's gonna be after the request has been sent and the response has been retrieved let's go ahead send this and we're not going to see anything however what's important here is that we are not noticing any errors if there were any errors we'd see them here in test results so for example let's replace log with a capital l o g just to make fun of this so console.log I'm gonna send this and we're gonna get here an error now this can be super scary when you when you encountering this so in JavaScript It's always important how you write things though things are always case sensitive with apis with programming you want to make sure that you write things exactly as they are so in this case we're going to get an error but if we write the everything correctly we're not going to see anything and this is because things are going to be printed to the postman console which is the topic of the upcoming lesson if you are writing script in Postman there is a postman tool you absolutely need to know and use and that is the postman console let me show you how to use the postman console to debug your scripts understand your requests and many many other things so in order to open the postman console we'll have to go here on the lower left corner and you'll see here console so if you click here on console this additional window will open up you already see here a lot of requests now first of all we don't need everything that is already here so we're gonna go ahead and click on this clear button now let's go ahead and submit this request once again where we have this console log script so what we'll see here in the postman console are two things first of all we'll have here the request where we're requesting some information and we can expand this and we're gonna see here request headers and other information from the response the response body so there's a lot of information about the request that has been sent what's important to know is that everything that appears in a console is in a chronological order so it appears as it happens now we have this script console log and because we have written the script we are getting this message in the console hello from the test because this is inside a test we are getting this message after this request has been sent let's say for example that we want to display a message before the request is being sent so I'm going to copy console.log I'm gonna go here to the prequest script and I'm going to paste the exact same code but this time I'm gonna write here hello from the prequest script hit again the send button and what we'll see here is that append it to what we already had in a console we now have Hello from the prequest script because this is being executed before the request then the request is being sent and only then hello from tests appears here in the logs let me show you a neat thing about this the thing is when we're working with the postman console and we're sending a few requests this entire log here will get really crowded with a lot of messages so instead of manually clicking on this clear button over and over again we can do a different thing so here in the prerequest I'm gonna write here console dot clear and I'm also make sure that I'm going to add here the parenthesis so what this will do is we'll clear the console with every request so let me show you what I mean I'm going to click here again on send you're gonna see here console was cleared the request is being sent and then the code that is in the test will be executed and we'll see this here we're gonna work with the post Bank console a lot so it's important to get familiar with it write this code understand where it appears understand in which order this code is being executed if you're no longer be in the console you can simply close it from here and if you need it again simply click on it again and it will appear here in this lecture we're gonna write our first API test in Postman and actually we're going to get a bit of help from Postman but just want to get to the taste of what is an API test so that we don't talk so much about API testing and actually start writing some so I'm here inside the get API status request I've opened up the test Tab and we already have here this console log message and we can continue writing here code but what kind of code are we going to write here well let's say that we want to assert we want to check we want to test if for this request we're getting a status 200 okay meaning the API is answering back and saying hey the status is okay everything is good you can use this API and we don't want to do this manually we don't want to look at the status code we want to forget that there's a status quo we don't know anything about it when I write a script and want to let postmen do this for us how can we do that well in that case what we can do here in Postman is that we can open here a panel so it's a bit hidden here on the right hand side it's not already expanded you'll have to click on this you will get here a list of Snippets these are useful scripts that you can use if you don't see the Snippets don't worry about it I will also include the exact same code that I'm using in the course notes for this lecture now if you can see the Snippets all you have to do is scroll a bit through the Snippets until you find here something that says status code code is 200. okay now before you click on that I want you to go here in the code editor hit enter to time so that we are here on line 3 now now you can simply go over status code code is 200 and click on it and by Magic this code will be generated okay now this code is written in JavaScript but it also contains like a language that is easy to understand so we have a test name which says status code is 200. that's pretty easy to understand and then we have here something that says pm.response to have status 200. this is essentially the assertion that we're making we're checking if the status is 200. so let's run this code again by submitting the request and see the difference now because we now have this test we are seeing here on the lower part of Postman test results we can click on this and what you will see here we're gonna see that we have different tabs for all passed skipped and filled essentially is going to tell us all the tests that we have here for this request and we have only one test status is 200 it says here pass right it's even integrated here in green one from one test half passed so this is the difference the difference between us manually checking if a status is 200 or writing some code and then checking here at the end has everything back we only have one test so obviously the difference is not so major right you can easily tell if it's 200 or not but let's say for example what if we had here five tests or six tests right Postman can do this in an instant and tell us if all the tasks that we have written pass or not now again what we have here is Javascript and now in the beginning uh it may look a bit weird right so the thing is we will look into better understanding JavaScript so that we can rewrite this kind of tests on our own but I just want to show you how easy it is to write your first test there's one important thing that I want you to take from this even if we have used Postman to quickly generate this code and we don't exactly understand what it's doing it's important that we ensure that this code is working so how do you ensure that this code is working well by generating a status code that's not 200. so in this case what we can do here is we can write here status 2 for example which is an endpoint that doesn't exist so when I'm sending this request once again against status 2 gonna get back here 404 not found and if I'm looking here at the test status I'm going to see Zero from one fail so this indicates that postman has executed this code which has a test it has checked is the status 200 no it's not 100 then bam alert it's not 200 it's reporting this information here so that we can easily see it we are starting to automate this and you're gonna get a taste of it real soon so we have created this code here by simply clicking one button I already don't fully understand what exactly is going on here how does this code work and how we can write maybe more advanced tests so to be able to understand this code which is written in JavaScript and even write more advanced code we need to learn a few JavaScript basics in the upcoming lessons we will cover some of the most important Concepts in JavaScript that are relevant for writing API tests in Postman we will cover JavaScript variables and their scope data types including object and arrays functions and many other things you should know now keep in mind that this is not a full JavaScript course and always check the course notes for additional resources and learning however with what you will learn in the upcoming lessons you should have just enough information to get started writing code in Postman and understanding such code if you see some one of the fundamental building blocks of any programming language including JavaScript is the concept of variables in this lecture we will learn about the JavaScript variables their declaration types and how to use them in our code variables are like containers that store data for us so that we can use them to store and manipulate information in our script you can think of a variable like a jar in a jar you can put something and then put a label on it so that you know what's inside so for example if you want to store a name like Jamie that's the data all we have to do is put JB in a jar and put a label on that jar which is like first name or simply name so let's do exactly that in Postman first of all I'm here inside the test script so I'm going to go ahead and remove everything that is inside here and in the prequest script I'm going to keep here console clear because that's going to be useful apart from this because we're gonna be focusing on scripts I'm going to change a bit to the interface of Postman first of all I'm going to collapse this panel here so there's an option here right at the bottom hide sidebar this will give us a bit more space and additionally there's a different way on how we can organize everything in Postman and one of this is this side by side pane so we have this two pane view which we can click on it it will move here a few things to the side so we'll see here the test results and everything but this is something that we actually don't need so we're gonna move this all together and we can also collapse this script so this gives us a bit more space to write this code and in addition to this you can open up here the console so that we have here the editor and the console in Clear View perfect so let's go ahead by actually defining a variable which is called Jamie so I'm going to use the keyword let which is used to define a new variable so you're gonna write here let and then we have to provide the variable name which is like on the jar the label so we can see here name and then I'm going to use the equal sign and between quotes I'm going to put here the name Jamie when we're working with strings like names or any text or something like that it is always important to put this between codes that this is when we have a string you can use single quotes or double quotes as you prefer now if we simply run this code nothing will happen so it's important to remember that if you want to check what's inside the name variable then we'll have to use here console log and what we're gonna do here we're gonna pass name between the parentheses we're gonna write name in this case it is important that you don't put quotes so let me show you we're gonna click here on send and what we're going to get back is Jamie so what is happening here is by not using name between quotes we are actually referencing the variable name and then by referencing the variable name we're essentially we're trying to log this variable well what's the value of this variable well it's Jamie okay let's write that so this is why Jamie appears here in the console it's important to remember that this code that we are executing here in Postman doesn't store anything anywhere this jar with a label name will be destroyed after the execution of the code so it's available while we run this code here but once the execution has stopped this variable no longer exists so for example here I'm gonna simply comment this code out so I'm gonna write here forward slash forward slash it essentially ensures that this code is not being executed it's commented out and if I run this request once again we're gonna get back here reference error which is a JavaScript error telling us name is not defined you are trying to log here a variable called name but name hasn't been defined anywhere so this is why this code is failing this is just a demonstrate that this variable only exists during the execution of the code all right so now these are the absolute basics in terms of defining a variable and using a variable so how about we next Define two numbers so let's say I want to define a number which is called a I'm gonna write here a equals 20. and I'm going to find another number called B which equals 30. as you can tell 20 and 30 are not between quotes but if we're trying to put here in console log a you're going to get 20. there are no errors this is because 20 is a number we can even by comma separating A and B we can even log A and B together we're going to get here 20 30. we can see two values at the same time sometimes we want to create variables that are the result of some operation for example we may want to Define here a variable which is called sum and wanted to hold the result of adding A and B so we can write here A plus b so what we're going to do here we are going to initialize a new variable which is called sum but here we're gonna have this mathematical operation which adds A and B so let's take a look here at the value of sum we can add that to the list as well you're going to see here that if we're adding 20 and 30 the sum will be 50. the advantage of using these variables is that we can change one of the variables we don't need to change anything about that code and then the sum variable will be updated accordingly so we have here A and B and some referenced in multiple places but we only need to update them once sometimes we also need to join strings together say for example we have here a variable which is called first name and just as well we have another variable which is called last name so these are two strings now let's say that for this person we actually need the full name so we're going to Define here a new variable which gonna call full name and in this case full name will be pretty similar to the way we have added two numbers and you may be surprised by this but we can use here first name plus last name so let's see what's happening there I'm Gonna Change here the console log so that we can log this variable we're going to see here in the console Jamie Doe now of course this is less than ideal because there's no space between Jamie and dough but just as well as we have added here first name and last name we can also directly write a string here so we can write here after the plus sign in between quotes we have here quotes and then we're gonna add another plus sign so we are combining first name with an empty string and with a last name now in this empty string all I have to do is press the space bar and we're going to create a white space so if we're running this code again what JavaScript will do is you cannot take the first name variable take its value then combine it with white space you'll notice here between Jamie and though there's a white space now and then add do so now we have defined a new variable with a combination of two variables and also something that we added in between how we write these variables in JavaScript is super important for example you notice here that first is written in lowercase but n here in name is with a capital N if we replace this and have everything in lowercase and try running this once again we're going to get an error and sometimes this can be so confusing for beginners it's like what do you mean first name is not defined I've just defined it here it's right here I can't even find it right so if something like that happens always need to trace back to what you have written and quite often you're looking at the screen and looking at what I'm doing and it's like no it's the exact same code as you and mine is not working now the reality is that if the code would have been the same it should have worked the same but even just one letter A Difference can cause the code to have such an error right so when you're in the beginning it's always a good idea to Simply copy paste things instead of writing them on your own because some mistakes are a bit hard to spot and especially if you're not working with these errors and you don't understand exactly what they mean can be a bit hard so always if something isn't working make sure that you really have everything as you see here on the screen no first name in lowercase and first name with the first letter of each World capitalized except for the first word is called camel case camel case is a widely used naming convention in JavaScript for naming things as it makes things easier to read it enhances readability so now we are getting pretty comfortable with this variables and as the name implies a variable can change its value and using a variable is super useful because we can change the value as needed we can change its values during the execution of the script or you can change it later on we can reference a value in multiple places without asking it to hard code it right so instead of having here full name once again written like Jamie space though you can simply reference over this all these variables now the opposite of a variable is a constant and once we Define a constant we cannot change its value so just so that you understand what I mean by changing a value so for example we have here first name and for some reason we decide yeah first name doesn't have the right value that we wanted to have so we want to make a correction to it so I'm going to write here John instead of Jamie right this is possible you notice here I'm not using the let keyword anymore I'm writing this code once again and then I'm gonna see here we have John Doe right so we can change this value when we Define it once but because we have used let we can change this now let's take a look at the following example I'm going to replace here for example first name and instead of let I'm gonna use cons I'm gonna say you cannot change this first name right and initially the code Works absolutely the same no different but when we're trying to enable this line of code which changes the first name this time we're going to get an error here it's like whoa whoa what are you doing it's like you have defined first name as a constant you cannot change a constant and this thing failed so this is just JavaScript telling you you told me to take care of this variable and to keep it sealed there in the jar and not allow any changes to it and now you want to change it no no no no this is not possible okay so this is why we have this constant now sometimes it does make sense to use a constant or other times you don't need a constant so in this case you know it really depends maybe it's not the greatest example but let's say how about you if you have here something like year of birth right so let's say I have here const we're going to Define here here of birth and we're gonna say here is 1995 or 94 whatever well it kind of makes sense if we're storing information about the person the ear of birth is Something That We're Not Gonna Change right so maybe we're gonna change the last name for some reason maybe we can change other information like an email or address phone number but year of birth you know that that is a constant but it doesn't change right the same we can store like how many seconds are in an hour right this is also something like a constant doesn't change so whenever we have data where from a logical perspective it doesn't make sense to Define this as a variable then we should use a constant when we are working with variables in JavaScript there's an important thing you need to know about and that is the variable scope scope is just a fancy name for like where is a variable available for example we already know that this variable name that I've defined here is only available during the execution of this script the same goes for the prequest script if we Define here a variable this is going to be available only in the prequest script we cannot reference it in the test script or something like that and also if we run this request and Define a variable and we run the request again and try to reference the same variable that's not going to work because that variable will be gone by that but still within the same script so inside the test here we can still have a scope so in JavaScript we can Define another scope so like essentially another area where we can Define variables and this is inside a code block so right now I have defined this variable name Jamie and I'm using here console log on name and I'm seeing here the variable being displayed in the console perfect now what we can do here is put this inside a code block so I'm going to start here code block with a curly bracket and I'm going to end it with a curly bracket as well so this is a code Block in JavaScript it is not very useful in this concept but I just wanted to illustrate what it means for code to be defined inside a code block so if we try here for example adding another console log statement we're just gonna get here Jamie Jamie perfect but let's see what will happen if we Define the name Jamie here well we're gonna get the Jamie Jamie but what if we change Jaime to Jake let's try it once again and we're gonna get here Jake and Jamie so what exactly is going on here and why can we redefine this variable if we already defined it right we know this here we have the let keyword two times what's going on well these are a bit the rules of this code block so what this code block allows us to do is to Define our own variables in the code block so in this case we have here what is called the global scope we have a variable name and we are here in the global scope then we have a code block and then we're back in the global scope so console log will not be able to see what's happening here inside this code block and we'll essentially say okay you're trying to log a variable name I know here variable name I'm going to try and print this out so the name will be Jamie it appears here and here inside the code block we have declared a new variable which is called name it is just a coincidence that it has the exact same label exact same name as the previous variable but we can just use it here inside the scope we can make changes to it and so on so this is why we can see here a variable called jig and we're going to be able to access it here now let's take a look at what happens if we remove the first Declaration of the variable so we only have the code block now if this is the case all we're going to get here is a reference error gonna see here name is not defined and this is because we are trying here to access name from the global scope and in the global scope this variable hasn't been defined now there are a few things that we can do let's say for example well we only want to Define it in the global scope perfect in that case what we could do here is we're gonna write here latiname and if we remove here the lat what will actually happen is that when we're initializing here name we check we're not defining a new variable but we're using one from the global scope so let's see if this works we're going to get here Jake Jake so what has happened here we've defined here variable but we haven't set the value then inside the code block we have set a value to Jake we have printed it and then because this variable is defined in the global space we can also access this here now I can totally understand that this can be a bit confusing but you can think about this code blocks like a oneway mirror in an interrogation room you see in the movies the cops in the room can see outside but the suspect cannot see in the room so this is a bit hard to understand but if there is one takeaway I want you to get from this lecture is that whenever you're noticing here a code block pay close attention to variables and understand where they have been defined and I'm going to point this out also later in the course but this is something that tricks a lot of people and they don't understand where exactly is a variable defined why do I get a variable undefined error and similar things like that so we're gonna start working with this but in this lesson I just wanted to introduce you to this concept so that you can start getting familiar with it and notice when this is the case so in a nutshell in a scope we can Define some variables and nobody from outside will be able to see what's going on inside that code block Gonna Keep it like private like what's happening in the code block is only what is behind the oneway mirror but what is happening here in the global spaces is something that is public knowledge for everyone so we can read it in the global space but if we need access from the code block we can also see what's going on there in JavaScript there are a variety of data types that are needed to represent information this lesson aims to provide a basic understanding of the JavaScript data types you are most likely to encounter when writing scripts in Postman these are strings numbers booleans objects and arrays by understanding the usage of these data types you will be better equipped to use them when writing script so far we have interacted with two data types we have worked here with strings for example in this case we're initializing a variable called name with the string Jake and also number and you'll notice here that numbers are not between quotes if you're not sure about the data type of a particular value JavaScript is there to help you so let me show you for example we can use console.log an inside console.log we can use the keyword type of written together and this will give us the type of whatever we provide after this so for example if you're trying to get the type of name let's go ahead and see that we're gonna see here we're getting string just as well instead of referencing a variable we couldn't simply write here something like Jamie and we're gonna get back a string we can write here 29 and we're gonna get back also a string well the thing is 29 is between quotes so anything that is between quotes even if it is a number it would still be a string from a JavaScript perspective so not to make it a string to make it a number we'll have to remove the quotes run this once again and we're gonna see this is a number okay perfect so we are kind of like understanding a bit how things work if a number has decimals we can write them after the dot so for example we can have here 29.65 and this will still be a valid number sometimes we need to represent the state of something like on or off like a switch that can only be on or off well we could theoretically use a string for that and say on off but JavaScript has a data type called Boolean a Boolean value can only be true or false so let me show you for example let's say here that we are going to create a new variable and let's initialize it with is adult and we're gonna set the value of true if you want to check the data type of is addled all we have to do is use our console log statement here and run this and what you're gonna get back here is Boolean super important true and false to be a Boolean doesn't need any codes just like with a number if we put anything between quotes it will become a string another data type that is maybe a bit hidden and sometimes confusing is undefined so this is something that can confuse a lot of people so let's do for example the following we're going to Define here a variable is active and we're not going to initialize it with any value so what value does it have let's try it out gonna go here inside this statement and change type of angle reference here is active and what we're getting back here is undefined so undefined is its own data type and simply represents something that isn't defined we don't know it is not a string it's not a number it's not anything else it's simply undefined we have created a new jar but we haven't put anything inside there so this is the representation of undefined but it's important to understand this concept of undefined because we're going to encounter it a lot as you later see now in this case we have a lot of properties here that kind of belonged to the same person right so we have a variable name we have a variable age we also have a variable is adult but it's obvious that this data actually belongs to a person now in this case if we want to make things more clear that hey all these variables grouped together actually belong to a person we can use another data type which is called an object so let me show you how that works and it's quite easy so what we're going to do here is we're going to define a new variable to hold this object I'm going to call the variable person and in order to Define an object all we have to do here is use this braces don't have one brace in the beginning and one brace at the end I'm here between the braces I'm gonna hit one time enter and add a semicolon at the end all right so now we have here an object but this object doesn't have any properties so what we're gonna do here is going to move these variables that we have here I'm going to put them inside here now you'll notice as soon as we do this everything will turn in right because this is not valid code now what we're gonna do first of all is remove all the let definitions in the beginning we don't need that anymore now after this what we're going to do is we're going to replace the equal sign with a semicolon and we're going to also remove the space before the equal sign and last but not least we're gonna replace this semicolon with a comma except for the last semicolon which will simply remove this looks very similar to Json but it is not Json it's super important to understand the distinction between a JavaScript object and a representation of a JavaScript object in Json while there are some similarities this is not Json it is simply a JavaScript object you don't have to trust me that this is a JavaScript object let's go ahead and take a look at the type of this thing to see what it is I'm gonna get back here object all right so what can we do with this object well for example we can simply use here console log and we can log the contents of this object so that we know what's inside this object maybe we don't know so we'll be able to see here that we expand this that we have here multiple properties name age is adult and so on now quite often we don't need the entire object at once maybe we only need the name for whatever reason we're going to print a message like hello then the person name right so in that case to only access one property we're gonna use what is known as a DOT notation so after person we're going to write here Dot and you'll see here already there is a bit of autocompletion that kicks in this is because this object has been defined here right inside the window so let's select from the list name and if we run this code once again we're going to see here that the name is Jake perfect so this is how we can access a property now let's say for example for some reason when we have created this object we didn't have some information we want to add some information later on how can we do that well we can simply use here person and we can specify a new property let's say for example we want to add a property which is called email so you can write person.email and we're gonna initialize here this property with a new value so I'm going to write here something like check at example.com so if we log the entire object with console log what we're gonna see here in the list of all the properties is also the property email and just as well if we need to access it we can use the dot notation let's say for example that we want to have here email with the dash between E and M the written like this now as soon as we write something like this you'll notice here something turns into red and here at the end there's also this indication that there's something wrong with the code so what's wrong with this code well essentially when we use here and minus sign JavaScript will think that we're trying to access here person.e minus a variable which is called mail and we're gonna try to initialize this to a variable doesn't make a lot of sense right now in this case if we're trying to do something like this we need to use a separate notation there is a special notation whenever we have some characters that let's say are a bit special and break our syntax that we have here in JavaScript and for that we're going to remove this Dot and between square brackets I'm going to put here email so the idea here is that in order to make this a string we also need to put it between codes because otherwise JavaScript will still think that e is a variable and male is another variable and it's going to try to subtract them so even if the code now looks valid you know if we're trying to run this but we're going to get back here is that e is not defined right so that's also not good so let's put everything between quotes and now what do we see we have here this property email exactly as we wanted it and it has right now the value that we need the same thing goes when we're trying to access this property so if you want to go here and write person Dot you'll notice here in the list email doesn't appear so if you're gonna write here email like this well this is not going to give an error itself but again this is going to be like a math operation where JavaScript will think we're gonna get a property E from person and subtract mail so we're gonna get this time the error that mail is not defined you're probably wondering why is person that he defined well that's not defined but that's not gonna throw an error so let me show you whenever we're writing a property on an object that doesn't exist like person.e it's a property that doesn't exist this object does not have this property what we're gonna get back is our old friend undefined for JavaScript not gonna say oh my God this is an error you cannot continue just gonna say this is a property that is not defined maybe you forgot to Define it or something but it is undefined doesn't show an error this is sometimes a bit confusing because you maybe you are writing here a property like is adult let's say is adult and you forgot to put a capital A there you're looking at this and say oh it's why doesn't this property work it's right here in the object it should work I've written it exactly the same oh well almost exactly the same well that's a problem if you're not writing things exactly as they are inside the object you're gonna get this undefined okay we're jumping into too many things at once but let's go back to how do we get to this property so we know that this notation with that doesn't work so we'll have to use this other notation with square brackets again when we're setting a property or when we're trying to retrieve a property that has some special characters that break our code then we have to use this square bracket notation we're not going to use it a lot but you'll have to remember it because from time to time we're gonna need it so this is essentially more or less what we need to know about objects here let's move this property to the object itself so in this case we're still going to use this notation so we have to put this between quotes single or double doesn't matter and we can put the value here then we have everything in one place so this is our person it looks much better at other times we may need a collection or a list of things things that are you know kind of like similar to one another and for that we can use an array an array is a data structure that can store a collection of elements each identified by an index okay sounds a bit confusing let me share an example so let's say for example we want to store here a list of hobbies currently find here a new variable which is called hobbies and this time to initialize this array we're going to open up a square bracket and we're going to close one now at this point we have here an empty array so let me use here the postman console and we're going to write here Hobbies so we can take a look at this thing so we're gonna see here this is an empty array some people think that this is some error or something like that no it begins and ends and there's nothing inside okay so let's add something inside so that we can make this a bit useful so let's say what do we have for hobbies num not a lot of people do it nowadays but let's say reading that would be one hobby right so if we run this once again we'll see here one so we have one element here and this is a reading perfect and what else we have maybe traveling and gardening and cooking now you can understand how these are related to one another right so they're all Hobbies so it kind of like makes sense to put them in a list otherwise would have something like hobby one hobby two hobby three and so on and we don't know in advance like how many hobbies we have maybe you have none maybe we have 10 maybe we have only two so this array structure allows us to be a bit flexible with how we store this information let's take a look again what we have here we're gonna see here okay we have four Hobbies perfect let's say for example we only interested in the second hobby how can we do that well in order to access only one element of the array we'll use again this square bracket notation and this time we're going to specify the index so it means the number of the element in the array so each item is identified by an index so we're gonna write here this is the first element this is the second element so we're gonna write here two and let's see what we're getting back and we're getting back gardening this is kind of confusing right so let's remove this and go back to square one to understand what's going on here now indeed we have four elements here in the array but if we expand this array what we're gonna see here is the index actually now remember that in computer science we always count from zero a race in JavaScript are zero indexed meaning that the first element is at index 0. the second element is at index one and so on so if you want to get the second element we actually have to write there one because you'll see here traveling has index 1. no problem a small hiccup so we're trying to get a second element we're providing index one and we're gonna get to this array now again we have the situation that we have a person which is an object and we have this array separately which is again a bit confusing but we also have the possibility of actually putting Hobbies inside object so all we need to do is Define here property so I'm gonna add here a comma so that we can add something new to this object column and now we're gonna simply paste here the array so let's take a look again at the person and now we have here a more complex data structure we have an object that also contains an array so let's take a look at this one we have here we have name age adult and we have hobbies we can still explore these hobbies and take a look at them now how can we get to let's say the third hobby right so we cannot write here Hobbies anymore because Hobbies is no longer a variable we have to go through person we have person dot Hobbies and if we're trying to get the third hobby then we'll have to specify index two so this is how we can still access this information from the array but using the object which contains now this array now there's one last thing about the race so if you're trying to do here like type off person.hobbies we should get back array right when we're getting object that's again confusing right why are we getting objects is it because this array is now inside an object no it has absolutely nothing to do with it actually this is because arrays are objects they are more specialized form of object however we kind of like tend to work with them separately and consider them like separate things from objects because they have like this particularities that we need to learn about and when we're interacting with them they're super important but at a technical level in JavaScript there are also objects this is why when we're trying to get the type of an array we're gonna get back object in this lesson we'll be exploring JavaScript functions which is a fundamental Concept in programming a function is essentially a block of code designed to perform a specific task which can be called whenever needed this allows us to organize and reuse our code efficiently so let's go ahead and Define a simple function to define a function we need to write the function keyword followed by the name of the function for example let's say we want to create a function that greets us right so we're going to give the name grid to this function and then to make it a function we're going to add here this parenthesis and after this we're gonna start here actually a code block which we have learned about a bit previously and we're gonna get to it a bit later so this is the code block this is where we can write some code and this will be encapsulated so essentially these are like gates to ensure that whatever happens in this function is isolated from the rest of the things so for example we can write here something like console log and display a message like hello from Postman okay so let's put this back here where it belongs near the function I just want to point out that this is actually a code block perfect so now we have this inside function our function name is grid or let's run this again and if we're taking a look at the console nothing like nothing where is this console log statement what has happened with it well here's the thing just because we have defined a function doesn't mean that that function is being executed immediately right so initially nothing happens if we decide that we want to call a function and reuse some functionality that we have in that function we need to invoke it or call it so I wanted to call that function what we need to do is to specify the name of the function which in our case is grid and not only that we also need the parentheses at the end this is what actually calls the function and we can also add a semicolon there so let's go ahead and run this code and then we will see here hello from Postman so with this code here we are referencing this function here named grid and with a parenthesis we are executing that function without a parenthesis this would still be valid JavaScript code but we wouldn't be calling the function so we'll see here there's no output that's being generated now our function is kind of like silly it doesn't really do a lot let's make it useful let's make it greet us how can we provide some information from the outside and make this useful well in order to do that a function can also think inputs in the form of arguments which are values passed to the function when it is called so essentially when recalling this function we can say something like we want to provide our name so let's say I want to provide here Val and I want to say here something like hello from Postman well do I want this name to be printed there in the console now in order to do that we also need to change something about our function so here in the definition between this parenthesis we're going to Define here a parameter so we're going to call this parameter name and then in the console log we can also reference that so we can say here hello from Postman comma space and then with the plus sign we can use your name so let's go ahead and run this once again and we're gonna see here hello from Postman file just as well we can greet multiple people for example we can greet Jake we can greet Jamie and anyone else would like to greet so let's go ahead and run this so we have reused the same function but by providing a different argument we have also changed a bit what the function does of course this is a super simple example but you kind of understand the idea now I wanted to talk a bit about name here like what's name like what's name is it a variable is it where has this been defined or how does it work if you try for example inside here to get something like console.log name it's not gonna work you're gonna get an error name is not defined but if you're trying it inside here obviously this is gonna work name here is like a variable and this is why it's important to remember the discussion that we had about code blocks this is a code block and this function what it does is essentially saying here this is a variable called name and we're going to initialize it with whatever value is being provided here I'm gonna say here like name equals Val right now of course this is not actually happening in terms of the syntax that was being used but it's almost the same thing so for every time we are passing a different argument here this value will change but it almost works the same as when defining a variable but this is the work that JavaScript does for us by using this syntax by the way we have defined this function so it happens automatically but the idea is name here is only available inside a function it's not available anywhere else okay so now we have this useful function that's cool but sometimes you know we have let's say for example we have developed a super secret algorithm that adds two numbers right so let's put that in a function I'm going to give it a name add and this amazing function will add to numbers like like let's call them A and B right this will be parameters that we will have here in the function because you know to add to numbers we need to know those two numbers so this is how we can take input essentially when we're starting this function so what are we doing with these two numbers let's define a new variable I'm going to call it sum and we can add a plus b all right so then we can use console.log and we can print out some and you already know the drill in order to call this we'll have to provide here two numbers let's add one and two and I'm gonna write and what I'm gonna see here is three in the console perfect okay this kind of works but let's see if there's anything else we could do here so for example let's define two variables let's call them number one and gonna provide here one number don't need a space here actually this will be number two with a different value so let's say we want to display here a nice message like using console log the result of adding and we're gonna specify here number one with gonna add the next number number two is and let's say we want to call this function at here so that we can display everything in the message I'm going to use here the plus sign again we can reference variables as well so what we're gonna do we're gonna add number one and number two perfect we still have here syntax error so we need to make sure that when we're combining Different Strings that we are using the plus sign so the result of adding number one with number two is we're gonna call this function so we can call the function even from within console log so let's run this once again and what we're going to get here is something interesting right so we have here 58 and this is coming from here we have console log so the function works it adds these two numbers and displays them but then when we're trying to use it here it says the result of adding 24 with 34 is undefined again this annoying undefined thing which is driving us crazy why is this happening why is the function adding the numbers but when we're trying to use it it disappears here's the thing just because we use console log in a function it does not mean that the function returns a value console log is just useful for debugging your code we're understanding what the code is doing but in this situation we actually want this function to give us back sum just because we have used console log it doesn't give us some because we can use 10 console log statements right so it wouldn't make sense to just randomly pick one of them or just take the last one and send that over what we need to do is to add a return statement so a return statement is used to specify the value that the function should return after it is done whatever the function is supposed to do in this case because we haven't specified a return value well you guessed it by default a function will return undefined because we haven't redefined what we want to return so if you haven't defined what one return we're gonna get back undefined so in order to not return undefined we're going to use here the return keyword I'm gonna say but what do you want to return how about returning some so when we're running this once again we are keeping here our console log statement which is useful for debugging and understand what the function is doing but then we also get here the value which is being displayed through the console log statement so this is why it is important to have this return statement in functions just because you have added cancel log does that mean that the function actually Returns what you see in the console we can also Define a function inside an object so let me show you how this works we have here an object with some properties and let's say we want to add this function to the object so that we do something in relation to the object so in order to do that things are relatively simple we're going to copy the code that I have here I'm going to go here inside the object and I'm going to Simply paste the code obviously this syntax is not correct but we are actually not so far off there are a few things we need to change now you can notice here that object always has something like a property and then a value now we need to keep the same structures we're going to start here with a property which is grid the name of the function and add it here and then with column this is definitely going to replace here any any equal sign or something like that we're going to say okay we have here grid and grid is a function that takes name as an argument and does something with it so if we're trying to access this function all we have to do is right here person dot greet and in order to call it we need to use parenthesis and grid also takes an argument so we're going to write here Jamie now let's see how this works I'm gonna see here hello from Postman Jamie let's add here another space so that it looks well and we're gonna get this to work when a function is defined inside an object we call it a method while they look similar they're not really the same functions can be defined and called independently without being associated with any particular object on the other hand a method is a function that belongs to an object and is designed to perform specific tasks that is related to that object so for example let's say we wanna also display the first name right so we are getting some argument from the outside but how about accessing some information that is inside here we can write here maybe a special message like my name is and then we're going to take the first name so hello from Postman Jamie and then we're gonna continue the message dot we're ending the first sentence my name is space and then with the plus sign we'll wait to use here first name let's paste it inside here I'm gonna get this to run and we're gonna get here an error first name is not defined okay that's a bit of a problem we could use here person.verse name because obviously first name is a variable it doesn't exist so in order to get this to work then we're gonna use here person DOT first name but let's run it once again and we're gonna see here my name is Jake now this has a minor disadvantage if we for some reason decide to rename this in person too from the outside we know that hey this is person two so we're gonna use person to that grid but here on the inside maybe we forget to change that so again we're going to get an error here person is undefined that's a bit unfortunate and exactly for this reason if we're trying to reference an internal property of the object we can use a special keyword and this keyword is this we can replace person or person two or any other person with this so if we run this once again we're going to see here my name is Jake if we're changing this back to person it's still gonna work so it is an ideal situation to use this if we're trying to access some internal data in a method that we have defined here now methods and functions they indeed look similar and they kind of like work similarly but it's important to understand what is a method and what is a function even if they are kind of similar for example when we're using here console doesn't log right oh well console is an object we can write here something like type of console let's see what's cancel console is an object which means that console.log is then a function and we're going to see here it's a function but because it is like technically in JavaScript it is a function but because it belongs to an object we're still going to call it a method right so we don't have this data type which is called method and function but we refer to an object that has a function we're going to call that a method and when that function is Standalone we're going to call it a function anyway console.log when recalling log here this is actually the method log on the object console so now you understand exactly what console log is this is something that's provided by Postman and it has been defined somewhere else we can just simply use it so this is an ideal example for what it means to reuse something we don't really know or care exactly how this information is being displayed here why everything is on a new line why everything is nicely formatted this is something that it's a concern of this method it's being put together in this method so that we can conveniently use it whenever we need it callback functions are an essential Concept in JavaScript programming allowing us to write more efficient and flexible code Postman uses callback functions and it is important to understand what they are so let's begin with a few basics the first concept I want you to get familiar with is that we can store a function in a variable so what we're gonna do here is I'm gonna Define here a variable let's call it say hello and I'm going to initialize it with a function so we can simply write here function and what is our function this will be our function code and we can have here a simple console.log statement which says hello super simple so which means in this case that where what's the name of this function this function doesn't have a name anymore it's just stored in a variable this is called in JavaScript an anonymous function when a function doesn't have a name it is anonymous it doesn't have a name so in this case if you want to actually run this function if you want to run the code that's in this function the only way to do that is by using the variable where this is stored so we're gonna use here say hello this is the variable and remember in order to invoke the function we need to use parenthesis we're going to add here this parenthesis and this is what makes the call to the function so let's run this and we're gonna get here back hello okay so we can store functions in a variable good big deal why do we need this well we're starting to get there the next concept I want you to get familiar with is that functions can also be passed as arguments to another function okay so how does that work let's say we have this regular function which is called and do something right so this is a regular function and as you know a function can take here some argument so we can provide some inputs that we want to give to the function now we in the past we have provided like two numbers A and B which we have added or we have provided a name so that we can say hello Jamie but we can also provide here a function we're going to write here thumb function because we don't know which function this will be and here inside the code we now have this function and we can decide to run it so let's write here a statement like console log before running the function and we're gonna have another console log statement after running the function and here in between we have here thumb function which is a reference to some function that we're going to get and we want to call that function so in order to call that function we're going to use here you guessed it parenthesis so now we are calling a function that we are retrieving here as a parameter so how can we do this well the next step would be to call do something right because at this point do something isn't being called anywhere and we can reference say hello so we are passing say hello as an argument to this function which is called do something do something we retrieve it here will run console log then it will invoke some function and it doesn't matter if the name is not to say hello this is being passed here as a value it will call here this function that we have here so let's run it and see if it works as intended so what we see here is that we have before running the function this is the first statement then we have hello which is coming from here and then we are after running the function okay you're probably thinking oh Jesus that's a really complicated way of calling this function I mean why in the world would you need something like this and again we're getting there and I do appreciate your patience with this it's super important that you get this so let's take it step by step so to recap we can put a function in a variable we can pass a function to another function and invoke that function here maybe there's some condition here on upon which we decide to invoke that function it doesn't really matter but these are like the first ideas that we need to get familiar with now what if we don't want to Define this variable say hello right in the past when we use something like saying hello we have just written there as a string for example Jamie why can we not write the function directly here inside this function call well actually instead of using here say hello we can simply copy the contents of this variable I'm going to remove this all together and I'm going to paste it here looks a bit crazy but let's see if it still works so it works absolutely the same before running the function then we are running the function and then after running the function so now again we have this Anonymous function which we only need maybe one time and we have passed it here when calling this do something function and what I want you to get is that this function this code is not being called here this console log statement is not called here at line 8. it's actually being called here if we for some reason decide to comment this and we're trying it once again I'm gonna see here the hello statement has disappeared so this is what is running our function this syntax is a bit confusing in the beginning this is why I try to take you step by step so that you understand the syntax the way we write these things in the end if we write here a function if you write here a string jig if we provide one number or even multiple numbers it's the same idea we are calling a function which is called do something and we are providing one argument so the argument starts here and ends here and then we're closing the function call well the function call is this one let me remove it once this is how we're calling the function and here between this parenthesis we are passing one argument just as well we could be passing two arguments or multiple arguments same idea again you're wondering why is this useful when I'm gonna need something like this and it's obviously not easier to read than before well let me explain a bit why we went through this effort of trying to understand this callback function the reason is that Postman uses them so here in Postman if we're trying to write a test and I'm going to expand here the Snippets once again I'm gonna go here to the status 200 test and add it here again now what you're noticing here is maybe maybe something familiar right so what do we have here well we have PM DOT test well PM this looks like an object and test looks like a method right it's starting to accept some arguments so what are the arguments that this is accepting well let me make it easier for you to understand so we're going to Define here a variable which we're gonna call name of the test and the name of this test will be this one so this is the name of the test and let's define another variable which we're gonna call Maybe assertions and this will be a function and we can reference it here this is what a postman test consists of it uses the PM object and then the test method which has two arguments it takes the name of the test and a callback function containing assertions so assertions in this case is a function what is sometimes difficult for beginners to understand is this syntax because it's not clear well where does the method call start and where does it end right so this is why I try to break this down into smaller steps so that you can understand where is the name of the function this is the name of the function right so I'm gonna put it back together again so name of the test this is the name of the test we're providing it directly without using a variable much easier and much faster to write and then as a callback function we're going to provide here the assertions that we're going to use and we're doing it like this this is how we end up with this particular syntax when we are writing Postman tests now I hope that learning about this callback functions hasn't been a waste of your time because now you understand what is a postman test and how it is composed and which are the arguments that we need to pass in order to construct the test of course we'll go further into this test but this is why we have learned about this if you're not familiar with Json this lesson will provide a quick introduction to it if you already know what Json is feel free to skip ahead so what is Json and why do we need it when working with most apis to send and retrieve data we need to use the Json format so essentially we use Json to send requests from one machine to the other in this case Postman is running on our machine and we need to send a message to the API server for example to order a cappuccino right and then in order to essentially place this order for example we cannot simply say like we would say to a human yes I would like a cup of cappuccino or something like that we need to format our message in a way that the computer can understand it let's take a look at an example so that you can better understand what Json is so the Json format is pretty straightforward Json has a simple key value format it is like saying first name equals Jamie so we are assigning to first name the value Jamie but instead of using an equal sign we actually use a column and we put both the key and the value between double quotes and then we're still not ready but we're going to surround everything with curly braces this essentially creates an object with one property if we need to add an additional property then all we need to do is create a new line and separate those two lines with a comma you can notice that in this case 22 is not between quotes 22 is a number and it doesn't require any quotes otherwise it will become a string the same goes for booleans booleans true or false also don't need quotes the beauty of Json is that it is both readable by humans as well as by computers you can read Json without essentially knowing a lot about the Json format itself a confusing part about Json is when you encounter square brackets square brackets allow you to specify a list in this case we have a list of hobbies and you will notice that there are multiple values between those square brackets inside the square brackets we Define a list of things can be any type of values like a string a number a Boolean or anything else even object so let's do a quick recap first of all we can see that we have keys and values first name age is married and hobbies are all keys Jamie 22 Falls and then the list of hobbies like Netflix and mountain biking they are values Jaime is a string because it is between double quotes when we want to add another property to this object we must add that comma otherwise our Json will become invalid and the other party will not be able to understand this message so commas at the end of the line except for the last line are super important 22 in this case is a number false is a Boolean and Netflix and mountain biking are an array notice the square brackets and individual values separated by a comma finally you will see that the object is enclosed by curly braces one at the beginning and one at the end so in a nutshell this is the Json format in this lesson we will dive into the world of Json and understand how to parse Json in Postman and how to use console log to read a specific value from the API response we are done now with learning the JavaScript Basics so let's transform our Postman interface back to original state so first of all we can enable this single pane view by clicking here on the bottom single pane View this will put again the response here in the lower part and initially we can simply go ahead and close the console apart from this we can also enable the list of collections that we have by enabling here the sidebar and we should be back where we started let's go ahead and close the get API status request and expand the products folder and go to the get single product what we have inside here is a product ID so if we go ahead and try to retrieve this we're gonna get a single product perfect now let's say we want to work with some information that we're getting back from the API how can we do this well what we see here is Json this is the representation of a JavaScript object Json stands for JavaScript object notation it looks pretty similar to how we have defined an object in JavaScript but there's still a few differences now the thing is we cannot work with what we have here if this is like a pretty view that Postman offers us but actually the data that we're getting back is this one this here what you see here is simply a string and we cannot do anything with it we cannot read a property we cannot access any information or something like that so for that reason we need to transform this string that we see here into an object that we can use now this transformation from a string into a JavaScript object is called parsing and we need to do this promo Postman script now the question is where can we parse this should we use the request script or should we use the test well the thing is this information is only available after we have sent the request and after we have retrieved a response from the API this is the response from the API and this information is only available here in the test in the prequest script that's a bit too early so we need to go here inside the test and do something with this now I'm going to enable here the pretty view again so that we can get this a nice view of the information that we're trying to work with now in Postman in order to interact with this there are already some predefined methods that we can use so we're going to use the PM object and on the PM object we have here actually another object which is called the response so you see it's available here on the list I'm going to select here response and there is a method which is called Json so when we are calling this method Json it actually gets the response body and transforms it in a JavaScript object so this is what this method is supposed to do this method will return a value it's not going to print to the console or something like that so if you want to use this for later on what we actually need to do is to store it in a postman variable so I'm going to go ahead and Define a postman variable which we can call response or response body as you prefer I'm gonna go ahead and write here const response but this is actually storing the response body just keep that in mind all right so now we have the response so we can go ahead and use console.log and take a look at this response to see what we have here let's open the postman console run this request once again and what we're gonna get here is this object which has different properties so for example if we're trying to maybe get the property ID all I have to write is response.id now what you need to pay attention here is that we no longer have this Auto completion in this case Postman doesn't have the information what kind of an object we have parsed here what kind of a data structure we have whatever properties are available and so on so for this when you're typing the code you're not going to get the auto completion for this reason it's always super important that you pay attention to what you're typing so number right here response.id I'm going to get here the ID but if I'm writing your idea with a capital i I'm gonna get back undefined so for that reason what I always recommend especially when you're getting started simply copy paste the information if you're trying to get here the property is available just write response that is available and copy that from the body so you see here true though is available is true and it's the exact same value from here if you are trying to get for example the product description you need to remember that this is a bit trickier right so right here something like response dot product minus description this again will fail I'm gonna get essentially an error saying that description is not defined the response that project will be undefined and the description variable is also not defined so in order to do that we'll have to use the other notation that we have learned about it in the past and put this as a string between these quotes and then use this square bracket notation so this will help us get the information that we are looking for so in a nutshell this is how we can parse Json into a JavaScript object and when we have a JavaScript object everything that we know about JavaScript objects still applies the way we work with this object the way we read properties the way we change things and so on previously we have seen how convenient it is to set a postman variable and then have a bunch of requests magically work just because we have set the right value this is the power of using Postman variables as you have seen where we have tested our collection there are a few things that we still need to copy around so for example we went here as all products and we have found a product and then what we need to do is copy a value and then set it in the upcoming request well while there's still a bit of work to do this we can use Postman variables and later on we're gonna even improve this process so let me show you what I mean by that so in this case we have here this value product ID so let's say we want to order this product but first we want to check if this product exists so we're going to send this request and checked oh okay this is the product that exists and it's actually a product that is available great and then we need to copy the same value and go into the orders create a new order and then put that value here for example now let's say for some reason we decide we no longer want to order this product we want to order a different product then again would have to search for a product check that a product exists and that is this may be the right product that we want to order and also update to create a new order request we can slightly optimize this process by using Postman variables so what I'm gonna do here in the get single product request I'm going to replace this hardcoded value here and I'm gonna set a postman variable so you can see here if I select this text I'm gonna get this context menu here set as variable now if you don't see this that's absolutely fine you can simply go ahead and manually create that variable I'm going to show you in a second how to do that as well but if you see this simply click on set as variable and what we're going to do here we're gonna set as a new variable and all we have to do is provide a variable name and I are going to be very creative here I'm gonna just write product ID and in terms of the scope I'm gonna select the collection scope so essentially we're gonna save this as a collection variable so let's go ahead click here set variable and now this is a variable of V hover over this we're going to see its value if you didn't see this context menu which allows you to add a variable from here no problem we can hover over the collection name until this Ellipsis shows up click on edit and from the variables tab you will be able here to Simply go ahead and add a variable manually from here of course later on if you want to change this variable that we have created earlier you can simply change its value from here remember if you want this value to take effect in Postman you always need to change the current value because this is the one that's being used by Postman all right so we have it now in a single place here so what to do next well we wanted to reference it here when we're creating a new order so all we have to do is remove this value and then I'm going to write here two braces and all I have to do is start typing product ID you're going to see here appearing in the list of suggestions and let's go ahead and submit this request so what we're getting back here are the products that we have ordered and you'll see here this is the product that we have then referenced through this Postman collection variable so this saves us a bit of time in terms of ensuring that a product that we have retrieved earlier is also available and we can manage all this through a postman variable so let's take a look at an example where we're going to change this to something else let's copy this other ID that we have here and I'm gonna go inside the collection and simply change the variable here so this time when we're getting a single product we're not going to make any changes to the request just submit it you will see here this ID has changed and just as well in the create new order we're going to submit this again and we're gonna see here this ID has changed as well we can do also something similar here with get all orders so from the list of all the orders available we can simply take a look and getting an existing order ID in this case we're gonna have to hard code one of these values so let's copy one of these I'm gonna go back in the collection and I'm going to Define here another variable which I'm going to call order ID and I'm going to Simply paste the value here make sure to save the collection otherwise the variable will not be saved and then when I'm trying to get an order by ID instead of having this hardcoded value can I simply go ahead and select here from the list of variables that are available order ID by hover over it I'm gonna see what is the current value that will be used for this request we can go ahead and submit this request and then we're gonna see we're getting back status 200 okay we're gonna get information about this to order maybe it doesn't seem so useful at this point but understanding that you can use post my variables to store this kind of data that are coming from one request and use it in other requests as well is super important and we're going to work towards eliminating this manual process of copy pasting data in this lesson we're gonna take a look at how we can set Postman variables directly from a script just as a recap we have learned about Postman variables and we have learned about JavaScript variables JavaScript variables are not the same as postband variables while essentially a variable is a way to store something they work a bit differently JavaScript variables are scoped only to the script where they are defined and no variables are persisted meaning we set a variable in a script and then if we remove it we're not going to be able to retrieve it once again well this is why we also have Postman variables Postman variables allow us to store some information between requests and even later on if we need so so for example we can store settings and persisting data on the long term such as the base URL or the API key that we have previously generated or any other details that we need so we have this information as Postman collection variables but both my variables are also useful for passing data between requests so sometimes we retrieve some information in one request but we also need it in another request for example here with the orders we're creating a new order but maybe you also want to get the same order later on and check if that order has been properly created that order ID is something that changes all the time so yes we can use a postman variable but we'll have to constantly change this so let's take a look at a way on how we can improve this process the concept I want you to get familiar with is that we can set Postman variables from scripts so I'm gonna go ahead and run this request once again so let's say we have this value here which is the ID of the order we have just created so we can go here inside the test and here inside the test we can write something like PM Dot collection variables dot set and we can either update or create a variable if it doesn't exist in our case if we're looking here at the get an order by ID request we're gonna see here we already have here this variable order ID so let's try and update that I'm going to use here the name of the variable which is order ID and then we can also set here a value so we're going to take this value that we have here in the body let's run this you will see here this is something with fb8t and so on we open this other request and we are hovering over order ID we'll see here that the current value has been updated so we have updated this variable from a script now okay the problem with this approach is that we now have another ID here so if you're always trying to get the latest ID and then get an order by that ID this approach is still not super useful now in that case there's still something else we can do we are gonna go ahead and actually read this information from here because we now know how to write some scripts and we can level up our automation game essentially by employing this nice trick so what we'll do next is we're going to Define a variable which we're going to call response and we're going to store inside the result of parsing the response body so for that we're going to use pm.response dot Json we're going to call it as a method so now response holds this information and whenever we're trying to do something it's always a good idea just use console.log and what we're trying to do we have here response let's open the postman console and we can see here okay we have access to the response so it looks good what are we trying to get we're trying to get this ID so let's right here response.id can we see this information here in the postman console yes we can here it is this is the latest ID and you can see it's the same as we see in the response body all right perfect we're making amazing progress how can we update the postman variable with this information that is in the body well all we have to do is remove this hardcoded value that we have here and use response.id so let's see again we are parsing the response body we're updating a postman variable called order ID let's run this so now we have this value I'm going to copy it just to cross reference it and now let's run this request you can see that the postman variable has been updated let's click on send and we can search here the body I'm going to click on this one paste the value that we have copied we're able to see that is the exact same ID so what has happened here is that we no longer need to copy paste data from the create and order request to the get an order by ID if we're trying to retrieve the latest order so we can just run this once go to the next request and write as well this is the power of being able to know how to write a script and know how to use Postman variables to store information between the request we will conclude this unit with an easy assignment if you have been following along you already did most of the work now all you need to do is to go back to the original workspace from where you have forked the collection inside here you'll see this list of assignments that you need to complete by the end of the course completing all these assignments is necessary for you to get the postman badge that certifies you have taken this course and have done the work let's begin with the first assignment in order to complete the first assignment what you need to do is work this collection so all you have to do is hover over this until this Ellipsis shows up and from the menu select create a fork make sure to Fork this collection in the same workspace where you have also forked The Collection containing the API each assignment contains instruction so if you're not sure all you have to do is click on the collection and what you will see here is the documentation just in case the documentation doesn't show up you can also access it from here since this is your first assignment I will guide you through the steps you need to take so we already did a first step and that is to Fork The Collection now the next step is to actually read the instructions that we have here so there are multiple tasks that you need to complete and these are things that we already did in this unit in a nutshell you need to put here inside the API request folder some of the requests that we have worked on on the original collection so what you need to do for example for the first task is to take the get API status request to duplicate it here and then to Simply drag it into the API request folder inside here we want to make sure that we remove copy so in the end the name of the request should be exactly the same as here now you will do the same with all the requests as instructed by the documentation so there are three requests that you need to add to get API status the get single product and also get all orders once you have done so you can jump to the next folder and this is where you can check your solution this folder contains a request as well as instructions on how you can verify your work essentially it is a way for you to check that you did everything accordingly this request also contains documentation which are essentially stepbystep instructions on what you need to do but let me give you a hand essentially this request here will try to fetch your collection and we'll do some tests on it to make sure that you have written the code and did all the tasks that were required so let's go ahead and run this request and see what is happening now in this case we're going to get an authentication error because we actually need an API key to be able to use this API just as well we also need here the collection ID this is an internal ID that the collection has so let's start with that one how can we get the internal collection ID well all we have to do here is click on the assignment and what you will see here is this I button here if you click on it you will get additional information about this collection including the collection ID so all you have to do is copy this collection ID edit the collection and go to the variables you will see here that there are already two variables that have no value so for the collection ID I'll have to paste here the current value the next thing that we need is still the API key so if we try this request once again it will still not work so what you will need to do is click here on our profile picture and select settings and this will take us to our Postman account next from the menu we're going to select API keys and we're going to generate a new API key let's name this API key Postman I'll go ahead and copy this API key and go back to the workspace and the collection select the collection assignment 1 go to the variables and in the current value paste this API key and save it let's expand the assignment once again and go to the verify your work request kind of go ahead and send this so what we're getting back now is a status 200 okay and if you take a look here at the test results you will also see that some of the tests you will see here an indication if the tasks that you've done are complete or not now ideally you will start with this once you're getting a status 200 okay because this indicates this request is working in the sense that it can fetch your Postman collection It's always important that when you're making changes that you're saving them otherwise the test that you see here will continue to fail so this is just a quick introduction on how you can approach this assignment and this is also valid for the upcoming assignments as well your job is to ensure that everything here will get a pass sign and you do that by closely following the instructions given here in the tasks always check that you are naming the request exactly as indicated and that you follow all the instructions I wish you good luck with this one and if you're encountering any issues please use the postman Community forum for posting about the problem you're encountering and add there as many details as possible so that we can help you out welcome to the second level in our API test automation Quest where we Flex our brain muscles and craft some tests that will put our API to the ultimate challenge aren't you tired of clicking through your Postman collection and squinting at each response to see if everything is working as expected so far we have inspected the status code and response body to determine if our API calls were successful a very basic form of testing we have manually tested if the API Works doing it once is fun but doing it multiple times not so much well my friends buckle up because in this unit we're going to automate all this tedious work we'll be diving into writing API tests using Postman with Postman we can write a tiny bit of code that automatically checks if all the criteria with deem relevant have been fulfilled will be checking status codes response headers and response bodies we'll even dive into Json schemas we're doing all this work now so that later we can kick back and relax while Postman does the heavy lifting for us so no more manual checks or copy pasting data between requests it is time to level up your API game and embrace the power of automation so without further Ado let's jump in and start writing some tests in this lecture we will discuss the structure of a test in Postman so what do I mean by the structure of a test let's open up the status endpoint and start writing here test now a test in Postman needs to start with pm.test and this method has two arguments we need to specify the name of the test we're gonna call it like example for a moment and we also need to specify a callback function so we can write here function and this will be our callback function I'm gonna hit here the enter key so that we have a bit more space and this is the basic structure of this test now at this point this test doesn't do anything this is like an empty shell so we can go ahead and click on send this test will show up here in the test results you will see here the name example but it doesn't do anything in order to make this a test that will fail if needed we need to write assertions and we're gonna write these assertions exactly here in this callback function this is why we need this entire structure so how do we write assertions well insertion is essentially something that we expect so with an assertion we are gonna assert something so for example let's write PM dot expect and we're gonna expect for example one to eql which comes from equal 1. so in this case we're practically saying we expect 1 to equal one of course this is a very simple expectation and all the data that we have is our coded but let's take a look and understand how this works so in this case the test passes because 1 does equal one however just as well we could have here the expectation that 2 equals 1. or three now in this case this test will fail so the first test with the status code will pass but then our second test that we have will fail we're gonna get you this assertion error it's going to tell us hey look 3 doesn't equal one and it's gonna fail a test in Postman can contain one or multiple assertions as soon as one of these assertion fields the entire test is considered fail once Postman detects a failure it will stop the test and not execute the upcoming exertions if there are multiple of them in this assertion we also have a bit of a structure what we expect here this is what you will typically get from the response so this is something that we don't know this is why we need to make an expectation about it and on the second part here to equal this is the part that we know for example maybe we expect a product to be available and then would say something in regards to the product to be true because available will be a Boolean the point of this initial lesson is to get you familiar with the structure of having a test and having assertions inside that test there's also something that you need to pay attention for example if you write something like PM that expect one to equal one with a triple equal sign this test will appear as it passes however if you write here 1 equals three this test will also pass what you see here is actually an incomplete and incorrect way of writing an assertion so to write an assertion in Postman you have to use PM that expect and you're specifying here something then you need to specify the expectation the value that you think this initial part will equal just writing something like this is totally incomplete and will give the impression that everything is working fine when actually it isn't so pay attention to how you're writing this test and make sure that you are following the structure that I've mentioned earlier and this is using pm.expect having something here then to equal something else let's turn our attention back to this test and in particular to this assertion as you can notice this assertion is not using PM that expect it's using something else well in Postman there are a few expectations that we can write a bit differently but probably most of the time like 95 of the time we're gonna use PM that expect still I wanted to show you a different way on how we can write the exact same expectation but using PM that expect now in order to use PM that expect which looks like this PM not expect we need here somehow the status code we don't know from where we can get at and then we need to write something like to equal when we expect it to equal 200 right so this would be in a nutshell the expectation the missing part is this one here now what we could do here is use console.log and use pm.response because this is where the response is being stored in Postman so let's take a look at what is happening here but our test will fail because we have written here essentially undefined to equal 200 and this will not work but we have also logged here PM that response so let's see what this thing is well as you can see here in essence pm.response is an object that has some properties so we have here a property status and we have here a property code well we could use property code so let's write here PM that response dot code run this once again and we're going to see here the value 200. so what we want to do next is we want to make a assertion with this one we're gonna copy pm.response.code this is what is coming from the response this is essentially what we don't know and then we're saying well we're expecting the code to equal to 100. let's go ahead and run it it's working perfectly if you're writing here status 2 so we're changing the URL to something that doesn't exist this assertion will still fail so this is just an alternative way of writing the same assertion but this time using PM that expect welcome to the second assignment of this course your job is to write a status code test for Every request that we have in this collection having at least a status code test is the most basic thing that we can do when we're doing API testing so whenever we're testing an endpoint the status code test is the first test that we're gonna write so this is why when we're starting API testing we should ensure that every request has documented status code test which indicates what is the expected status code for that particular endpoint from the original workspace I have Linked In the course notes you need to Fork The Collection named assignment 2 and follow the instructions from there before we start doing something with the response body it is best not to assume we get Json Bank sometimes the API might misbehave and return something unexpected like HTML let me show you I'm gonna go ahead and expand the products folder and take a look at the get single product where we already inside the test have some code where we're parsing the response body and then we're trying to log property now typically if we're getting back Json this works without any issues however let's make a change to this instead of products here I'm going to write here products too and I'm going to go ahead and submit this request now what we're getting back here is a status 404 not found and apart from this we're getting back here HTML this is essentially what's being used to display web pages and this API is not perfect and in some situations does return back HTML without knowing that we're not really interested in HTML still we need to be prepared for such situations apart from this what I want you to notice is that here the test results appear in red now even though we haven't written any tests we're gonna get this nasty error here telling us there was an error evaluating the test script and there's some problems here when we're writing code in Postman it is best to encapsulate this in a test if an error occurs in a test it's not going to propagate outside of the test though essentially that callback function provides some protection around the code that we're writing let me show you what I mean so we're gonna write here a test where we want to assert that the response body is Json so I'm going to write pm.test and then right here response body is Json so this is the first argument then I'm gonna write the Callback function and inside the Callback function let's move our test so I know that currently this code is not properly working now let's send this once again and this time what we're gonna get back is a test result and we're gonna get the information that this test here which doesn't contain any assertions but the code that is inside this test has actually failed and we're getting here a Json error and it is practically the same error but what's important here to notice is that this code doesn't prevent other code that we have inside our test from running so any errors that appear will be limited to this callback function still this is not a way of actually testing if the response body is Json so in order to test if the response body is Json we actually need to write an assertion and this is again one of these special assertions that don't use PM that expect in this case we're going to write pm.response to B Json super easy to read and also super easy to write let's run this once again and see what is happening and in this case now the test is still failing this is expected but we're gonna get here this assertion error it's gonna tell us expected response body to be a valid Json but God error unexpected token at something okay and if this assertion here fails this code here is no longer being executed so when we're working with Json and we expect to get back Json from an API it is not a bad idea to start with a test where we are checking that the response body is Json the resource button is not Json you shouldn't worry with further assertions because we're gonna get some unexpected errors just testing if the status is 200 or checking that we're getting back Json is not enough to really verify that an endpoint is working as expected sometimes we want to wish if a property from the response has an expected value so how can we do that let's take a look at the response once again and in this case I'm just grabbing a product here it doesn't really matter which product it is but I'm having here Bagel so I would like to check that this property name is actually bagel let's go ahead and write a test pm.test and the name of the test will be productivism and I'm gonna also add here the Callback function perfect so in order to write these assertions first of all we need access to the response body and as you have seen here we already passed the response once so theoretically we would be able to use it here as well we can use pm.expect I'm gonna write here response and from the response what are we trying to get we're trying to get here the property name I'm gonna write here 2 equal and we're going to hard code the value bail if you're using a different product make sure to specify a different value let's go ahead and run this and surprisingly this test is failing and we're getting here this reference error response is not defined but response is defined how come it doesn't work here well this is where understanding the JavaScript Basics are super important remember those code blocks well when we are here inside the function we are essentially inside the code block so whatever we Define here is not going to be available somewhere else still if we put this outside that's going to cause other problems because we're gonna try to parse the response without knowing if it is actually a valid Json so what we could do in this case is simply Define here response outside we're gonna remove here const and this time I'm going to use let response because we're changing its value we cannot Define it with const so we have here let outside in the global scope which means we have access in our callback functions to this so then we can use response.name let's give it another try and we're going to see here response body is Json product is beagle this is passing without any issues just as well we can take a look at another property for example let's say we want to check the price so we're just going to go ahead and simply copy paste the same expectation that we had before and you notice me I'm using here copy paste always use copy paste when you're working with properties from the response body because this ensures you're not making any mistakes so response at price well what is the price it's going to be 195. so let's put that price here and run this once again and again this test is failing why is it failing because 195 does not deeply equal 195 and this can be a bit of a confusing error how do you mean well 195 in the body doesn't have any quotes which means is a number here 195 is between quotes which means it is a string when we're comparing things in JavaScript a string will never equal a number even if the value is the same so in order to get this to work all we have to do is remove this quote and then our restoration will work just as well okay continue also with other assertions for example we could check if this is available so you'll notice here I'm grouping multiple assertions under the same test so maybe later on we can decide to change the name of the test but we're just trying to understand how these assertions are actually working so let's go ahead and start here that this property is available is actually true so again true is a Boolean so we don't need any quotes we can put it like this so the test will continue to pass or an alternative way to write this is to still use PM that expect instead of writing to equal we can write to B true different syntax Works absolutely the same if you would think that this is for some reason false we can write this false but of course in this case the test is failing it's a good idea to test our assertions to make sure that they're actually work the way we expect them to work now there's still one thing that I would like to test here and that is we have here this Postman collection variable with the product ID and we manage this somewhere so we can change this later on so how can we ensure that the product that we have requested by specifying this product ID is also the one that we're getting here in the body now of course we can check all these properties name and so on but maybe testing out the ID would be a good idea as well so let's write here pm.expect what are respecting we're expecting response dot ID to equal and what is the name of the variable let's go ahead and copy paste this and put it inside here okay maybe we need some quotes no problem let's put this between quotes no errors I'm gonna give it a try and the test is failing what is happening in this case why is this working here when we're sending the request but when we're putting this inside our test is not working anymore well what's important to remember is that this syntax only works in the request Builder essentially you can use this Syntax for variables when we're working with params with path variables with authorization headers in the body anywhere else apart from the script we cannot use this syntax in the script it's simply a string Postman is not going to replace it so if we're trying to get the product ID in a programmatic way essentially from a script we need to use something similar to The Way We have set a variable from the script we can use pm.colection variables because this is a collection variable and this time we're going to use get we're going to specify okay what are we trying to get trying to get a product ID let's give it a chance now there's something even more interesting you can see now we're getting the value right but we're getting this problem that we've seen before when we're comparing a number with a string if you're looking here inside a collection at the variables you'll notice that you know there are no quotes here and the question is why doesn't this work well the thing where we're manually managing information here most of the time behind the scenes Postman will save this as a string and then when we are making comparisons here then we're gonna get a string and we're gonna compare string with a number and that's not gonna work if we want to rescue the situation and we are pretty sure that we have a string there we can use a function which is called parse int so with parse end it's gonna try to transform that string into a number into an integer then we can run this and our assertion is working because now we're comparing a number with another number now let's go ahead and change this product to some other product you will see here we are using the product ID so what we need to do is to figure out another valid product ID say for example let's disable the category that we have enabled and let's simply go with the cappuccino so we have here this ID for a cappuccino I'm gonna go inside the collection and edit the variables I'm Gonna Change here the product ID to a different value I'm going to go ahead and save it and let's get a single product so now we expect to get back cappuccino if we're taking a look at the body yes we have a cappuccino and yeah the response body looks absolutely fine now if you're taking a look at the test results they are not so fine well okay it says here product is a bagel and we have here some tests that verify some parameters well the thing is the response itself is still fine it still looks like a valid response it just isn't a bagel now we can debate if this is a good test or a bad test but this for our situation here this test is overly specific if there's any change in the data for example maybe the price is changing or the product name is slightly changing then our test will fail so the only Dynamic part that we have here inside our test are the product ID and of course it's always a good idea to assume that a product that we're trying to work with is available but the name and the price they are problematic there are situations like this one where it makes little sense to hard code values in tests do we really care if the product is called a bagel or a cappuccino or how much it costs and in most cases reality is we don't we just want to check if the product that we have received is a valid product so instead of asserting if a property has a specific value we can change our assertion to check the data type of that property so let me give an example we know that the response body has a property called name so let's check if there is a property code name there instead of just checking it has a specific value so to do that we can write here another expectation so I'm gonna remove here bagel and the expectation that I'm gonna write is PM that expect and the expectation goes against the response because this is the object that contains the product and we can write here to have property and the property is name and for a second I'm also then remove this price from here so now we are just checking if the response has a property called name and the test is passing we can check also if it has property called Product name and if we run this the test will fail because there is no property product name in the response body we can check that easily so there's only a property called name now we don't only care that we have a property called name but we also care if this name property is actually a string so we can write another expectation but this time on the property we can see PM not expect and we have response dot name and we can say here 2B oh and then as a string we're going to write here strings we're going to have here string between quotes so we're checking if the response body has a property called name and we're checking that this property is a string and it is a string we can also check if it is a number and this is not a number it is actually a string so we're gonna get this assertion error so let's switch it back to string in a similar fashion we can also go about the price so instead of checking a specific price we can simply go ahead and D here if the responsive price to be a number and the price indeed is a number so the test is passing and now from a logical sense we typically expect our price to be higher than zero right so no price can be zero or we can't have any negative prices this is just the business logic that we have we are trying to make a profit so we're not going to sell something where we have to give mine to the customer right so it's a valid expectation to say whatever price we have it must be at least one cent so it needs to be greater than zero so we can write here another expectation with PM that expect against the response price 2 B and we have here greater than always follow the auto completion to be faster and more accurate I'm gonna write here the price to be greater than zero the test is passing now this product costs three dollars so let's change it for example to let's say four here to be greater than four and it's not going to be greater than 4 because 3 is not above 4. so we have also tested that the assertion that we have written makes sense from this perspective now of course we have grouped here a lot of assertions around this test but we can just also split them for example we can write a test that only deals with price to ensure that it has a valid price we can write a test that just ensures that a property is as expected and so on so we're not going too much into how we organize this test and how we name things but we're just trying to understand how we can write these assertions better and now the advantage of this approach is that we can change the product and the test will still work only if something changes about the structure of the data will we have issues now you notice here that this syntax is relatively easy to read right so maybe you don't know exactly how to write everything but once something is written you can just look at it and say oh response to have property name that's understandable response that name to be a string that's also understandable well what makes these assertions work so well and be so easily readable is a thirdparty library that is being used by Postman so this easy to read syntax is made possible by a JavaScript assertion Library named chai JS and you can find out more about chijs at chijs.com and I also linked this documentation in the course notes so what you will find here are many many other options that you can use now you'll notice here that the documentation uses expect to equal so the only thing that you need to get something like this working in post is to Simply add here PM don't expect and it will work in Postman so let me show you an example here just to understand we can copy this assertion here take it inside Postman if you paste it as it is we're gonna get an error telling us that expect is not defined so all you have to do is add pm.expect getting familiar with the chai assertion library is a very powerful way of writing more sophisticated Postman tests and this is a very powerful assertion Library so do spend some time and go over the examples that are being listed here I'm sure you will find something useful let's take a look for a second at the create an order request inside this request we have a few interesting things when one of these things is here this variable which is a postman generated random variable it's not a variable that we are setting however how can we guarantee that the data that we're sending has actually been received by the API exactly as we intended well let's go ahead and see how we can write a test for this particular use case we're going to begin with a few Basics and we're gonna borrow from one of the previous requests that we have and this comes from the products endpoint for what we already have here is this part with response body is Json so this is something that's super useful we want to make sure that the response body is Json so we're parsing the response body and storing this in a variable and of course once the response body is Json maybe we also want to set this Postman variable here but that's not the scope of it let's go ahead and write a new test that verifies the customer name so let's name the test simply customer name and we're going to have here our callback function and we can start writing some assertions so how do we write an assertion well we can go ahead and use pm.expect and what do we have here well we have the response and on the response we have the property customer name that we can use perfect so far so good and then we write 2 equal and then what do we put inside here well we could try something like this right so we could go ahead and put this as a string inside here and see what is happening and what is happening is that we're gonna get a test that is failing so this syntax doesn't work inside here it works inside the body but doesn't work inside here still there is a way to resolve Postman variables like this one inside Scripts the syntax is a bit tricky but I'm going to show you anyway so what we need to use is pm.variables dot replace in it's a bit tricky but hang on for a second so we're going to replace in and here we can essentially specify a string pretty similar to what we have here so if you're unsure about the outcome of this we can simply wrap everything in a console.log statement and take a look in the postman console to see what is happening let's clear everything here and run this so what you will see here being logged is the result of us writing this line of code so this is a way how we can still use this syntax with braces without using pm.collection variables.get or something and when we're working with this random Postman variables there is any way no other alternative to reaching one of these values all right so you can see here that we are now getting this random Postman variable and it changes all the time so we can simply go ahead and use this in our code so we're gonna stay here pm.variables replace in and we have our expectation right about here let's run it once again and our test is still failing and the reason for that is whenever Postman invokes this call when we say we want to use here random full name or random something else a new value is generated with every call so Postman generates one value here in the body and in the test it's going to generate a different value so this is why our test is still failing we haven't made a lot of progress have we well not so fast I have a different idea I'm going to go ahead and copy this from here and I'm gonna go here in the prequest script so here in the prequest script what we could do is to set another Postman collection variable we can use here pm.collection variables.set and we could call this customer name and the value would be you know whatever comes back from here and then in the body we can replace this random variable here with a collection variable which currently doesn't exist but it will exist in a second and also in the test we can use BMW collection variables dot get and we're getting the customer name so we're letting Postman generate this once set it in a postman collection variable by using it in the body and we're using it in assertion let's give it a try to see if it works and what do you see this is how we can take advantage of random Postman variables and Postman collection variables to pass data between the prequest to request the tests and so on let's continue thinking about what kind of tests we could write against this particular endpoint so we know that we have the right customer name and of course there's also other details that we could check but one interesting one would be this ID this ID is the order ID and it does follow some rules for example this order ID can only be composed of uppercase letters and numbers and it has a fixed size of nine characters so how can we write a test for something like this well let's go ahead and copy the skeleton for a test and we can write here something like order ID format so we're testing the format of the order ID how can we do that well we can again use PM that expect a response dot ID and then what we could do here is to write a regular expression now regular expression is a way how you can Define in a programmatic way the kind of structure that you expect from data in this case we can write a regular expression that says this ID can only contain numbers and letters and those letters need to be in uppercase and the size of this thing needs to be nine characters we're not going to go into how we can write regular Expressions because that's a topic on its own but we're going to take a look at a simple example at how to do this in Postman so what we're going to use here is to match so to match allows us to write a regular expression and we're gonna write it here and I want you to pay attention this is not a string here what we're writing inside match so a regular expression goes more or less like this we are starting it here then we're adding here this carrot sign and then what we'll have here between brackets we're gonna say something like this must contain letters from A to Z and from n numbers from 0 to 9. and we expect to see this exactly nine times and this is the end of the regular expression you'll see here I have no errors if you're having trouble finding any of these characters on your keyboard don't worry I've added this expression to the course notes as well so that you can easily copy paste it if needed so let's take a look and see if this is working as expected I'm gonna go ahead and click on send and you'll see the test is passing now the thing is I know that this API has a bug and from time to time in the ID it will include a character that is not a letter from A to Z or a number from 0 to 9. so it's just a matter of time until you're running this test and you're noticing all of the sudden this test failing because you will find there a character that shouldn't be there oh there it is look have you spotted it you'll see initially the test has passed but after a while we are getting this Dash here and this is not something that we expect according to how this ID should work so this is why it's a good thing to have a test here that will fail and warn us if all of the sudden something changes about the behavior of this API it is now time for the third assignment and for you to get some HandsOn practice we have gone through various ways of testing the API endpoints and writing various tests and assertions now I want you to go inside the orders endpoint and take a look at this get an order by ID request in this case you're getting here back information about this order and I want you to use everything that you have learned so far to write some tests make sure that you go to the original workspace and work the collection named assignment 3. let's continue exploring ways on how we can test this endpoint so I'm here at the create a new order endpoint and we are checking out the response buddies Json we are checking the customer name and we're also checking that the order ID has the right format but there's still also other information here how can we do that well in order to test the response structure we could again go property by property check if the property exists check if the property has a particular type check maybe other things about those properties with relatively simple responses that is relatively okay but once our responses get a bit longer or are a bit more complex this approach is no longer so valid a solution to this is to use a Json schema and to validate the response that we're getting against the schema okay let's back it up for a second what is adjacent schema adjacent schema is essentially a way to describe the structures and rules of our responses when our responses are in Json we can use a Json schema adjacent schema is also written in Json and essentially helps us understand if the Json that we're having here actually follows the expected format and it is a bit easier to catch errors in that way so let me show you what I mean by that we're going to start with a very very simple test so I'm gonna use here the test skeleton that we already have and just one line below I'm gonna write here schema is valid and what you will need here is a Json schema so we're gonna Define here a new constant call it schema and what we have here is the assertions or resolution will be pm.response and this is going to be one of those special assertions so we're going to stay here PM that response to have Json schema and we're going to reference here the schema so we can simply run it and see if we're getting anything back okay we're getting again the test field the failed test because of the ID which is sometimes inconsistent but we're gonna get here schema is valid okay so we haven't done a lot in terms of this schema it's just an empty schema but just by default it kind of like passes the test okay fair enough let's go ahead and actually talk about the body that we have here about the structure that we have inside here so first of all we're gonna say look we have here an object this is an object which has properties so we're gonna write here type and the type is gonna be object okay fair enough then we can again check is it still working perfect no problem let's say if we say type is array does it fail okay it fails it says here expecting data to satisfy schema but found following errors data should be an array our data is not an array it's an object okay so this is a simple way to make sure that we are on track let's continue with properties so inside properties which is again an object we can start defining the kind of properties we have in our body so for example ID client ID created and so on they're all properties and we can stay for these properties for example ID is a string client ID is a string any other information is also a string so this should be pretty straightforward but I'm gonna go ahead and right here we have the property ID and again as an object we're gonna write here type and the type will be string okay so we're gonna repeat this a couple of times so I'm just gonna copy this code block here make sure to add a comma and do this for maybe three or four times let me make it a bit larger so that you can see it so we have here ID the next one on the list is client ID after this we have created after created we have customer name and actually we need another one but this one is no longer an ID this is actually an array so we'll see here products so we can write here products column and also as an object type will be array very well let's go ahead and run this and it seems to be working fine now how do we know if this schema that we have written here is any good well we could essentially go ahead and maybe again play around with stuff and see string let's change this to a number see if it fails and it does fail okay fair enough seems to be working but this is a very rudimentary way of testing if our schema works we need to find a better way when we are writing tests in Postman it is our duty to ensure that this test will actually fail if needed if we have tests that never fail when they should then we got a problem because then our tests will not be so useful and we have wasted a lot of time writing tests that never fail now when we're working with Json schema The Experience shows that writing a schema that doesn't do what we expect to do is much much higher than any other assertions we have written before so when you're writing a Json schema or when we're working with Json schema we need to be extra careful that what our tests do is actually what we think that the test should do now testing if the Json schema works as expected actually requires us to make some changes to the response body well this is easier said than done because this is the response that is coming from the API we cannot easily make changes to it well luckily we have a builtin Postman tool that we can use to our advantage and this is a postman mock servers now Postman Max servers allows us to create fake API endpoints so in this context the word Mark simply means to imitate or simulate something it refers to creating a fake version of the actual API let me put this in plain terms a mock server will pretend to be the real API provide us with some responses to our requests but it will not actually process anything so for example if were to create a mock endpoint for this create an order endpoint that mock endpoint will not save the order will not do any validation or things like that no the advantage of using a mock server is that it allows us to actually test our test and to ensure that they work as expected without actually changing the real API which in most situations we cannot do anyway so we are going to use this particular use case for mock servers to modify the response body so that we can test our schema now in order to create our mock the first thing that we need to do is go to the create a new order request and click here on save as example and what this will do is it's going to save this response body as an example and this example will be used by the mock this is the first step that we need to do and then the second step is by going over the collection and hovering over it until this Ellipsis shows up and from the context menu we're gonna select Mark collection what we need to specify here is the mock server name so for example we can call it Valentinos coffee API mock We're Gonna Save the mock URL as a new environment variable and all you need to do next is to click on create mock server so the mock server has been created we can close this tab here and if we go here over the environment we'll see here that we have a new environment this is Valentino's coffee API mock this is the environment that stores information about this mock server and we have there the address we can go over these environment and we'll have here this variable URL we're going to change this to base URL so that it is the same variable we're using in our request we'll notice here we have base URL and here it should be also base URL when we don't have an environment selected we're gonna use the URL that is configured inside the collection however when we select an environment this base URL variable will be overridden and now we are actually calling using the exact same request without making any changes to the request itself we're now calling the mock API so you can notice here I'm running this once twice three times and getting the exact same information back nothing changes about it now if we're looking at the test results we're gonna see that a few things fail obviously our mock API doesn't behave like a real API so for example where we checking the customer name if it is a specific name that test is going to fail we also have this problem with the order ID so this is something that we can change here from the response itself so if we're going over this example EG here this is an example this is what's being used by the mock server see here we remove this and click on Save we can check if our test isn't passing no it's not passing because it's not long enough so let's add here a new character and this schema seems to be valid so the only problem is the customer name so let's go back how can we make sure that this schema is actually a good schema that it is working as we expect what could go wrong with this response for example what if we don't have the property client ID anymore how can we stimulate this we go back to this where we have this essentially temporary response which you wouldn't modify and I'm going to remove here the client ID all together from the response let's say some developer has removed it from the response and we no longer have it will any test say anything about this and we can run this again and if we're looking here at the schema the schema is valid that's weird How about if a developer would add here a new property for example new property new prop I'm gonna call it hello just for fun adding a new property to the response body this should definitely raise the alarm nope doesn't schema is still valid so now by using mock servers we can play around with the response that the server sends us or doesn't send us and we can then figure out what can we change about this to see if the schema will fail if needed if one of the situations should occur if we then have a valid test for that case well it seems that we don't have a valid test for that case and the problem with this is that our schema is valid is a good schema but it does have some problem and one of these problems is that it doesn't say that these properties are required so yes we have defined them in the schema if they are there they're going to be checked to be a string or an array or anything else but if they're missing that's not a problem if we add new properties that are not mentioned here that's not a problem so for this use case this is a problem and this is something that we can easily Overlook by looking at this schema and thinking yeah seems to be working fine when actually it is not so what we need to do next here is to specify another property and this property will be the required property so the required property allows us to specify essentially an array of values that are required so for example ID is required or do we have else client ID it's also required created is required everything that we have here in the response body is actually required we need to specify this here so that when we're doing the schema validation we're also checking that none of these properties are missing so we now saving this let's take a look here in the response we are still missing this particular property client ID so let's see if now something is failing and yes now we're getting an error and it's telling us data should have required property client ID but it doesn't so now we have tested that this particular feature is working as expected okay so let's reenable here the client ID let's save this I'm gonna check here again that everything is working fine schema is valid perfect let's add here at the end another property I'm gonna call it new again an additional property that appeared all of the sudden in our responses and we don't know about it keema is valid how can we change this Behavior well by default any additional properties inside the Json data that are not specified in the schema are allowed and will not cause the validation to fail while this is useful in some situations in our particular use case it's not what we want ideally when new data is added to an API New Field something changes you want to be alerted about this because we might want to check that we may want to write a test about it and we don't want to be surprised that something new appeared all of the sudden so if we don't want any surprises then we need to specify this explicitly in our Json schema that we don't allow additional properties again this is another setting that we're gonna add here so just on the steam level as type properties required we're gonna write here additional properties and we're going to set additional properties to false we don't allow additional properties and now luckily our Json schema is failing and is telling us data should not have additional properties it does have additional properties here so let's go ahead and remove this from our mock server and now our schema is again valid if we need to check back in with the real API all we have to do here is disable the environment and then we're gonna start interacting again with the API but using mock servers is a very powerful way of working with a schema defining it and making sure that it works as expected writing Json schemas is no easy task and so far we have just scratched the surface however I want it to go a bit deeper and show you a more advanced example of how we can really ensure that this response body looks pretty much the way we expect it to look like there's still a few flaws here for example we haven't done anything about these properties ID and client identity they can be anything in terms of created we haven't checked for a specific format and also in terms of the products we just said there must be an array but we haven't really looked into like the data structure that these products need to have here so there's still a bit of work to be done now there are a few things that I wanted to point out first of all we can have here a string but just as well we can add here another property which is called pattern and this pattern allows us to write here a regular expression now this time we're going to write it here between quotes and in this case we already have Here regular expression that we can employ so we're gonna simply go ahead and copy it from here and put it here inside a pattern now apart from this because it is already between quotes you can go ahead and remove this at the beginning and at the end the forward slashes and we can go ahead and save this but not before we remove this other test which we no longer need so let's see if this is working properly seems not to be working properly let's see why oh actually is a good example because now we have a character that we shouldn't have so we already made the test with this one let's run it once again and now the schema is working so obviously just better luck the first request went into one of these edge cases where the ID is not what it should be perfect so we have done this here with a pattern in a pretty similar way we can do it also for the client ID but I want you to take a look here at created so created here is a date so what we could do here is write for example a format and we can say the format needs to be date time so this is a date time format let's go ahead and run it seems to be working fine let's switch back to the mock endpoint just to make sure that in case we're having here something else that it does so I'm just going to remove the last part of this daytime format and make it a bit shorter let's see if this causes any issues and it is going to cause an issue because it's gonna stay here does not match the format date time so luckily again using mock servers can help us identify if there are any issues at this point let's switch back to the real API and take a look at another thing and these are the products we mentioned earlier that we have here an array but we want to go a bit deeper so we have here an array but this is an array of objects and we can actually go a level deeper and say look this is an array of objects and every object in this array must have the property ID and must have the property quantity so let's see how we can do this as well essentially when we're having an array we can then specify items and items will be then an object where we can write additional things now the thing about this is that we're going back to how we Define an object so this is super interesting because you can write here type and the type will be object and we can write properties and we can start writing the kind of properties that we have so for example we have here an ID property and this is type integer and just as well we have here a quantity property go ahead and copy it from here and this is of type also integer let's go ahead and see if this works we're getting here an error Let's Take a Look Ah probably again the problem with the ID no worries we're gonna write once again so the schema seems to be working fine however you need to remember this is an object so we also need to add here required and we're gonna see here that ID is required and quantity is required so if any of these are missing you want to get notified if you also want to allow or disallow additional properties that's a different discussion but let's give it a try with this one schema is valid gonna switch back here to the mark endpoint and let's change a few things so I'm gonna make here ID all in uppercase just to give it a try Gonna Save this gonna select the mock environment and let's try this again to see if this error is being picked up and it is being picked up and it says here should have required property ID now we just briefly went over this to exemplify how we can reduce some of the tests that we have written previously and integrate everything in a schema and still get a pretty decent level of testing instead of having to write all these manual tests where we go property by property and so on now as we have seen by writing this Json schema is not really straightforward so I must warn you that the Json schemas are a topic on their own and we are just scratching the surface here learning to write Json schemas is not easy there are two pitfalls I must warn you about first of all and I see this all the time don't use websites which generator schema for you from a given response most of the time the schema that you're getting is simply not good second of all you're not gonna understand that schema so it's going to be very hard for you to determine what is inside that schema what is actually being tested and so on and so forth whatever approach you're taking always test if the schema will fail if needed I've seen so many times complex schemas being written that simply don't do what they're supposed to do and we get this false sense of security because we have this complex schema which is having all this regular expressions and is checking arrays and objects and everything and then when something changes about the response the schema says no okay everything is fine don't worry about it now if your project is programmatically generating a Json schema based on its code and given annotation that is fine you don't need to write that schema from scratch you can use it however this is not a real placement for understanding what the schema contains and how to test it so my advice is if you're just getting started with Json schemas is to learn about Json schemas step by step and to write them on your own a good resource for learning about Json schemas is Json Dash schema.org a link in the course notes the website is a bit hard to navigate but if you spend a bit of time and take a look at the documentation that is available you will soon get the hang of it and you will see how powerful Json schemas are alright so you have learned so much about Json schemas and now it's time for an assessment you want to really check how you would apply and create a Json schema for the get single product endpoint we currently have all these things here but I want you to write a Json schema based on what you have learned from the previous lectures go ahead to the original workspace and Fork the assignment number four inside your workspace and follow the instructions there apart from the status code in the response body a response also has headers and we already know how to test the status code and we know how to work with response body and make assertions there but what if there is a header that we would like to test while headers tend to be very technical you may find yourself in a situation that you want to make an assertion against a header to make sure that it has an expected value for example what if we want to check here if this x powered by header has the value expressed so let's write the test for the headers I'm just gonna copy here the structure of the test that we don't have to write it from scratch and I'm just gonna write here headers now before we actually make an assertion let's make sure that we can actually get to these headers and for that we're going to use pm.response because the headers are in the response dot headers we'll see here we have the auto completion four headers and in order to get a specific header we're gonna use dot get and as a string we need to pass the name of the header so it is best if we go here in the headers select the name of the header we want to use and paste it here this will ensure that we don't make any mistakes apart from this let's wrap this up in a postman console to make sure that we are getting the right value right so we're going to open up the console clear it and let's send this request so what you will see here in a console is the value Express and this is the value that we need okay so it seems that we have everything that we need so we can go ahead and write our expectation which would be a typical expectation that we're going to write with PM that expect so what are we expecting well we're expecting that this value that we're grabbing from this header to equal Express let's go ahead and see if it works and we have here a new test headers seems to be passing without any issues and this is anyway a test structure that we have used in the past so we know that it is working so this is how easy it is to test the header in Postman can you imagine testing 100 endpoints in just a few seconds with Postman you can do exactly that and I'm here to show you how you can unlock this super power welcome to the third level of our API automation testing challenge we now have a postman collection with some requests and each request has the associated test so we can go through the collection request by request and all we need to do is check if the test passed still this is a manual process and it is really Time to Say Goodbye to clicking around in this unit we'll explore postman's powerful automation tools that will turn you into an API testing Rockstar we are entering the most exciting part of this course where all the effort we have been putting into writing this test pays off so let's Dive In before we jump into automating things we need to make sure that the request as it is right now is working without any issues so what we need to do is to go through every request standard request and check here the test results so we need to do this for every request in this collection because if we have some issues at this point then it doesn't make sense to automate it so we need to check that all the test results are passing now once we have done that this is when we can talk about the Automation and the first tool I wanted to show you is the postman collection Runner so the postman collection Runner is a tool that allows us to run this entire collection with just a single click of a button so just remember all the work that you did for this just a few requests here if you have maybe 20 30 100 requests that you need to send that's a lot of work so we can replace all that with just the click of a button so let me show you how it works and it's super super easy all you have to do is go over our collection until this Ellipsis shows up and from the menu we're gonna select run collection this will open up a new tab and this is the postman collection run so let me briefly explain what we're seeing here on the left hand side here we see a list of all our requests now the way requests are executed in Postman is by the order that we have in the collection so essentially post model will go folder by folder and grab all the requests that are inside there and we'll display them here of course sometimes maybe this is not the way we want to have this but that's not the problem we can easily drag and drop requests anywhere else so we can move requests around if we're not happy with a particular execution order apart from this there can be situations where we say for example register a new client we have already executed that request manually so we don't really want to automate that we can disable that all right so this is the order in which this request will be executed the postman collection Runner will execute this request from top to bottom so it will start with get API status get all products and so on and so forth in this order now on the right hand side we need to choose how we want to run our collection and the first option that is already selected is run manually this is what we want to do apart from this there are also some other settings but they are not relevant at this point so all you need to do is click on this big orange run button and start automating this collection run with just a single click now look at this magic as Postman goes through all this requests that we have and in a matter of essentially second the entire collection has been executed and now we have the results we know what has happened so what has happened we have here all the tests and we see here past 11. so 11 tests have passed none have failed now of course we can find ourselves in a situation where maybe one of the tests is failing of course we know that this API has an issue and if we run this a couple of times one of these schema validations will fail because the idea of the order doesn't match the given pattern if that is the case what we will see here is we have how many have passed and we'll see here failed now generally we're not interested in how many have passed but we're interested in why something has failed so we'll get you information about okay create a new order has failed and we're getting here the reason why this has failed now if you're trying to debug this a bit deeper we'll notice here that the response is not available it says your response body is not available and this is a bit of a bummer because without the response body we can't really understand what has happened but we're also given here information that hey you can change this in the Run configuration right so let's go back to the Run configuration and what has happened this time is that postman has set this flag for us persist responses in a session so by default for performance reasons Postman doesn't save the response body doesn't allow you to take a look at it and see what has happened but if we enable this one it is very powerful because it will allow us to take a look at the response and understand what has happened now there's another setting that I want to show you and this one is the iteration this bug that we're experiencing only occurs from time to time so either we can manually click maybe three four five six times through that run button until the error occurs or we can see from the beginning look just run this 10 times for example and I will take a look and see which of these times didn't work and I can investigate that in particular so let's go ahead and click that run button once again and you can see here Postman is doing the heavy lifting for us everything is in place imagine just the work that would have to do to run this request so many times and inspect all the tests and see if everything is working well okay so in this situation we have executed this so many times nothing has failed so let's try it again and what you will see here is that some of our runs have failed so this is another opportunity to go ahead and investigate what has happened and we're gonna see it is the create new order request that is constantly failing so that's a good thing that there's nothing else that is failing but let's this time take a look and see what is wrong with this now we'll actually have access to the response and we'll see oh look at this character this is not what we expect according to the schema this is why this test is failing so in a nutshell this is how we can use the postman collection Runner to run our collection with a click of a button and then if something fails we can dive into the results and understand what is the reason for the failure using the postman collection Runner is the first step that we need to take just to verify that we can actually automate our collection run so this is going to be probably the first thing that we want to do just to manually run the collection a couple of times to make sure that everything is working fine but this is still a semiautomatic step because we need to open a collection we need to go inside it we need to open the postman collection Runner we need to click that button we need to inspect the results and everything now there is also the possibility in Postman of scheduling a run so essentially when scheduling a run we are no longer executing the postman collection on our personal computer we're not using Postman at all instead the execution takes place on the postman cloud so there's no need to keep a postman open or even our computer can be turned off during this process so this is essentially a fully automated collection run in order to schedule a run all you have to do is hover over the collection click on the Ellipsis and from the context menu we're gonna select run collection by default we have here run manually but just as well we can select the option schedule runs so when we are scheduling a run we are taking our collection and running it in the postman cloud in this case we can also decide which is the order in which we want to execute this request or if there are any requests that we would like to disable like registering a new client apart from this on the lower part there are also a few things that we need to configure we should give this schedule a name for example if you wanna run this once per week or once per day we can decide this here just going to give it a name weekly API test and then we can select the Run frequency and this can be like every hour every week every day and so on in this case we are on the week timer so we can decide we want to run it every day or we want to run it every weekday because if it fails on a Sunday and nobody is going to be in the office to take a look at the results or maybe we can decide just to run this once per week let's say that we want to run it every weekday and we're gonna decide when do we want to run it probably early in the morning would be a good choice apart from this we can also get email notifications and you can also add other people there is also some advanced settings that you may want to look into but they're not relevant for what we're trying to do right now let's go ahead and click on schedule run so in this case we're going to get information about when is this run scheduled scheduling is a good way to keep an eye on an already deployed API to see if it is still working as expected in other words we are monitoring the API if there are any issues this will be reported and will get a notification running this at regular intervals also allows us to understand the time frame when a problem occurred if one occurs now of course we have the option of waiting until this collection will be automatically executed just to make sure that you know everything is working fine in theory before we wait for the first run we can manually click on run now but if we don't do this Postman will do this for us from the cloud so when we're clicking here on a run now this is not the same as manually running the collection on our own computer now we are using the postman Cloud to run this collection now instantly we're gonna get some information here we're gonna get information that this is unhealthy so there's some problems with this API and apart from this we're gonna see here how many tests have failed and what is going on and why these tests have failed now we can notice here a few things for example get API status seems to be working fine getting all products get single products everything works well until we start working with requests that have authentication we're gonna get here the status 403 Forbidden now this can be a bit confusing because we have executed this collection locally and it worked without any issues so why is this failing now well the thing is the following you need to remember that inside our collection we have stored a secret so if we go inside the collection and edit it and jump to the variables we're gonna see here that we have some secrets we have this API key now the current value this is what we have here on our computer however when we're sharing this collection and in this case we're also sharing our collection with the postman cloud Postman from the cloud only has access to this information and as you can notice here we don't have a valid API key now we can change our workflow in a way that this information is available so that we generate an API key when we're running this flow or what's a bit quicker in our situation we can simply go ahead and take this from the current value and put it here in the initial value now you need to be very careful with this because remember this workspace is public anything that is in the initial value is public for this particular collection this API key is Not So problematic but you may find yourself in a different setting and in that case exposing this API key as an initial value may not be such a good idea but typically when you're trying to run a collection and you're having authentication issues when using a schedule run but the exact same run is working without any problems when you're using the manual run install Postman probably 99 of the cases this is related to postman variables so remember the postman cloud is only using this initial value doesn't have access to the current value so this is just a small hack to ensure that this is not working properly so let's go ahead over the collection and we can open here the tab runs and we can see here that we have scheduled runs so this is our schedule here and we can click on view to go back to the previous View that we had so all we have to do now is Click again on run wait a few seconds and we'll see now that our API is healthy meaning everything that we have inside our collection is working as expected well the requests are working as expected all the tests are working as expected there are no script errors or anything like that of course we can also go into the details and see the test results and see which tests have been executed and the fact that they have passed but this is less relevant also have access to the console log and see if there's any details here that might interest us but apart from this there's nothing else that we need to do here so typically we are going here when something doesn't work anymore when we get an alert that our API has issues now this tool can be very valuable for verifying that your public API operates as intended particularly in relation to configuration updates or recent deployments so it's just a good idea if you're having a public API to schedule one of these runs and let it run at a regular interval so that you get information about this if something goes wrong you will be notified now preproduction environments are usually not publicly accessible which somehow restricts the usage of this feature professional and Enterprise plans provide access to a static IP address that can be configured as a firewall exception but that's a separate conversation on its own now once you have understood how this scheduled runs work it is also best once you don't need them anymore to simply delete them so all you have to do is again go here inside the collection go to the runs tab and then all you have to do is hover over the scheduled run that you have click on the Ellipsis and either pause it or delete it all together so in a nutshell scheduling a run essentially creates a monitor which runs at a predefined interval and keeps an eye on your API and ensure that it's still working properly in this lecture I will introduce you to the postman CLI a tool that runs a postman collection using the command line we'll learn its Basics setup and how to use it for a more efficient API testing process in order to get started with a postman CLI again we're gonna hover over the collection until this Ellipsis shows up and select run collection from the options available here this time we're gonna select here automate runs via CLI once we do this we're gonna get instructions on how to use Postman CLI to run this collection but first of all we need to install so let's go ahead and download Postman CLI to install Postman CLI we need to follow a few steps I'm going to demonstrate this process in Windows because most of you are using Windows but it works in a similar way for Mac OS and Linux first of all you need to open a terminal window if you never did this before that's absolutely fine simply search for a program called Powershell if you are on a Mac you need to search for a program called terminal and if you're on a Linux you're probably done with installing this by now anyway let's go back to Windows you will see this window where you can type in commands let me make this a bit bigger for you now if we're going back to the documentation we'll see here that we have installation instructions for Windows Mac and Linux so for every operating system there is a different command so for Windows all you have to do is copy this command if you have a newer Mac you probably have the newer CPU for Mac so you may want to use this first command if your Mac is a bit older you use this one and for Linux you have this command at the end so I'm going to copy this one for Windows and we'll have to paste it in the terminal window that we have open you can use your keyboard shortcuts or simply click on the window bar and use the context menu to paste after this the command will show up and you need to press the enter key to execute the command the installation should only take a few minutes to ensure that the installation has been successful we need to type in the following command Postman space minus V and this will print out the current Postman version now when you're seeing this process and all these weird commands you're probably like are you sure is this a good idea I mean why do we need this can we go back to this nice Postman interface that we had before and I can totally understand a command line interface tool CLI tool is invaluable for streamlining the testing process as it allows for automation easy integration with continuous integration and continuous deployment pipelines and overall a faster execution apart from this we can also run a postman collection on our own infrastructure without using the posting cloud let me put this plainly if we want to let the computer run our Postman collection without our human intervention we need to use a CLI tool if we wish to run Postman tests in a CI CD server like Jenkins GitHub actions or gitlab we need to use a CLI tool we cannot use the graphical interface from Postman so let's jump back into Postman and try to run our collection using the postman CLI now if we're looking here on the lower part we're gonna get here instructions about some commands we need to run and they're essentially to command one of them is Postman login and the other one is a command that will actually run the collection now let's just copy the last command that you see here jumping into the terminal I'm gonna paste it and what we're gonna get here is an error it's going to tell us that no authorization data was found and that we need to use the postman login command now whenever you're getting errors when using these tli tools it's important not to just panic because there is an error but just take a bit the time to read line by line understand what has happened you have executed a command and then the tool is telling you no authorization data was found and sometimes these tools teacher to be helpful in telling you hey you need to use Postman login so obviously we have missed something here we first need to run the First Command which is Postman login okay how do we run this let's copy this command here and we're going to paste it again and again we're gonna get an error now when we're trying to log in with an API key in this case we actually need to provide that API key and the graphical interface here is trying to help us you like you don't have an API key let's how about you add one here so we're going to click here on ADD API key and we can either use an existing key that we have or we can simply click here on generate key we can call this key Postman CLI so that we know what we have created it and click on generate okay no spaces are allowed let's put this together and now we have a key and we can click here on insert key so this key then will be part of this command here so all we need to do then is to copy this entire command go back here and paste it so the First Command will log us in and the second command will execute the postman collection so let's see how this will go so we're gonna see here a few issues but first of all we have been logged in successfully and then we can actually see our API here but then we're getting some errors here now the first error is a type error and we're going to take a look at the logs to understand what is going on and the second one is coming here from the orders and this is probably the schema that has failed in the past so that's nothing to worry about so the first error is actually complaining that in the get API status request we have this console clear function so it's telling us this is not a function so obviously Postman CLI doesn't know about console.clear or doesn't make sense to have a console got clear in this context so we need to figure out a way around that and the second assertion error is that schema is valid but apart from this this is how we can run a collection using Postman CLI and we can take a look here and see all the requests that have been executed we'll have here essentially a report at the end so we know how many requests have failed how many requests are still working and so on let's jump back into Postman and try to fix this console.clearprom so what we can do here in the status request get API status and in a prequest script you see here we have console.clear so what we could do here is we could add an if statement so if console.clear without actually calling it and we're going to move the statement inside here we can quickly verify if the console is still being cleared let's send this request so we see console was cleared we have saved this request and then if we need to run this once again all we need is the second command because postman has logged us in so when we're trying to run any other commands here we don't need to log in once again because we are already logged in so all we need to do is use this command Postman collection run and this thing that we see here this is actually the internal ID of the collection this is how Postman identifies our collection and now we have apparently got rid of that issue with console.clear and we still have this problem with the schema is valid now apart from this we're also getting information that this execution has been uploaded to the postman cloud so what does that mean well it means that we can see this detail inside Postman let me show you go back to postman and click on our collection we're gonna see here the Run step and what we'll be able to see here are test runs and we have here the source so we have here the source being Postman CLI or Runner which means the manual run that we have used and we can also dig here into the results and see what is going on for example we're gonna click here on this icon to view the report and we can take a look and see what exactly has failed and hopefully what is the reason for this and of course if you need to troubleshoot this we can go back to either running the request manually in Postman or using the manual collection Runner to run this collection from the beginning to see if whatever error we have encountered is still occurring now as you can see the response body is also not available so this is something that we need to change in the Run configuration but for Postman cli's this is not something that we can do at this moment so this is why we need to run this manually to see if we can replicate that specific issue when you're using the postman CLI to run a postman collection that actually a lot of things that you can configure that are not visible here directly in post now to understand how you can use Postman CLI like like a pro it is important to spend a bit of time and go over the postman CLI documentation and its command options essentially whenever we're running a command like Postman collection run we can also specify some additional options that change the behavior of this command now there are a lot of options here and I highly recommend going over them and seeing if you may want to use them sometime in the future at least to note that they are available and that this is possible however there is something that I wanted to show you just to give you an idea on how we can use this let's say that in our collection run we only want to run a specific folder and for this we can use this option minus I and specify the folder name let me show you how it works all I have to do is go back to postman and let's just copy again only the command that runs the entire collection in Postman CLI I'm going to go ahead and paste this and after this I'm going to add here space then minus I and then between quotes I'm going to put here a name of the folder that I want to execute for the sake of this let's just say I want to execute status so only the requests that are inside status I want to execute them I'm going to write inside here status let's go ahead and run this and what you will see this time is that only one request has been executed because now with this additional option we have configured the way this collection run functions so only one request has been executed and this is sometimes very powerful because we can decide to run only a couple of folders so for example if you need to run only three folders from a collection then you can just use minus I the name of a folder and then after this also the other folders Let me Give an example let's say one run status and then there's another folder that way we want to use products I'm gonna write here product as well and you will see here that only status and products as folders have been executed again it's super important that you go over the documentation and understand what these options do and how you can use them welcome to the last level of our API automation testing game in this unit we'll be tackling the integration of Postman tests in cicd in the upcoming lessons my goal is to help you understand why this is important and how to do it integrating Postman API tests in a cicd pipeline is essential because it automates the testing process ensuring that apis are continuously validated and function as expected during development and deployment let me put this in simpler terms where basically firing ourselves from the testing department and letting computers take over while we still keep a watchful eye to make sure nothing goes Haywire we will kick things off by discussing the fundamentals of cicd and the importance it holds in our testing process next we'll embark on a stepbystep journey to run Postman tests using GitHub action one of the leading cicd tools out there if you are using a different CI CD Solution that's also fine I will provide you with some guidance on how to get started with other tools as well apart from this we will talk about Postman workspaces reports and effective collaboration techniques within your team if you have been following Along on this Grand Adventure give yourself a hearty pad on the back this is the fun part so grab your gear and let's Dive In let's talk about cicd for a second the ICD stands for continuous integration and continuous deployment it is a practice used in software development to make the process faster and more reliable with continuous integration every time a developer changes the software those changes are tested automatically this helps catch any problems early in the process once the CI pipeline is done we start the CD pipeline where we typically deploy the software to a test environment which allows us to do further tests if all tests pass the changes are automatically deployed to the production environment and go live this practice allows for improvements that can be made quickly without having to wait for a big update this process helps teams work together more efficiently and it makes easier to keep the software running smoothly now what does this have to do with Postman tests and automation well the thing is if we're working on an API using CI CD it makes absolute sense and we also want to integrate our Postman API test in the CI CD pipeline there are at least two steps in the process where it makes sense to run Postman tests after deploying the API to a preproduction environment such as a test environment and after deploying to the production environment using the postman CLI allows us to run a postman collection and the associated tests in our continuous deployment pipeline without us manually triggering a run let's talk for a second about the ICD providers using a CI CD tool allows us to automate the process of integrating code changes testing and deploying applications making our lives easier now it is important to understand that there isn't a single best tool for CI CD the best tool for you will depend on your specific needs your team's familiarity with the tool and the specific requirements of your project your organization may already use a tool so you could be forced to use whatever option is available anyway some popular solutions for cicd include Jenkins gitlab Circle CI and GitHub actions among others in the upcoming lesson I'm going to show you how to use Postman CLI to run a collection in GitHub actions now I want to make it clear that this isn't intended as an introduction to GitHub action we're focusing here on how to use Postman CLI within the context of GitHub actions if you are not familiar with GitHub actions that is absolutely fine I will take you through the process step by step now you might be using a different CI CD tool and that's perfectly fine the beauty of Postman CLI is that once you understand how to use it integrating it in any cicd server is relatively straightforward the principles we'll cover here can be applied to other cicd tools as well before we start you will need to sign up for a free GitHub account if you don't already have one GitHub actions is a feature of GitHub so you need to have an account to be able to use it signing up is relatively easy and quick and it will give you access to a wide range of tools and resources Beyond just GitHub actions so let's go ahead and run bothman API test with GitHub actions for that we're gonna need a GitHub repository so let's go ahead and create a new repository I'm gonna name the repository my API project and also want to make sure that this repository is public let's go ahead and click on create Repository in order to configure a pipeline with GitHub actions we need to go here from the project page to actions and we're going to set up a workflow ourselves essentially a workflow is something that we want to execute with the help of GitHub action I'm going to call this workflow Postman and here we will have to put in the configuration that is needed to run our Postman collection using Postman CLI now luckily we don't have to write everything from scratch but we have postpon on our site to help us with this process so what I'm going to do next is I'm going to jump here inside Postman hover over the collection and select a run collection from the option then gonna go to automate runs via CLI and what you will notice here on the lower part of the screen is run in CI CD a little bit hidden and I wouldn't be surprised if you missed this before so let's go ahead and click on configure command because with this tool here we'll be able to configure our pipeline in just a few seconds so first of all we want to make sure that we have the right collection here and then from the list of cicd providers we're gonna select GitHub action and what we'll see here is the command that we need to execute so let's go ahead and copy this command I'm gonna jump back to GitHub actions and here in this window I'm gonna paste this now this is a git repository so we need to commit these changes and we can just go with the defaults here and click on Commit so now our project contains a folder which is dot GitHub forward slash workflows and inside here we have our configuration file and this should run our Postman collection if you want to see what exactly is happening we can click here on view runs or you can simply go here to actions now if we take a look at one of these workflow runs here we're able to see if they were successful or not so in essence we have here a job which is called automated API test we can go on it and we'll see it is red so it's already not looking good but when something doesn't work it is important to understand what has happened so you'll see here there are various steps that are happening I don't know setting up the job running something and then this is the part that is interesting for us it is installing Postman CLI because it is not installed so you'll see here okay Postman CLI has been installed this work without any issues and it is trying to log into Postman CLI and it's going to tell us hey there's some argument missing here so again we haven't specified the API key and what we definitely don't want to do is to put that API key inside our code so we're not going to put any keys in our configuration so how can we handle this well if we're looking back at the configuration we're going to see here that there is something that is referencing an API key so let's open up here postman.yamu and what you're going to see here is something with secrets that Postman underscore API underscore key every CI CD system out there will allow you to store some secrets so let's go ahead and do exactly that I'm going to copy here Postman underscore API underscore key and go to settings for this project and then under security here you should see secrets and variables we're gonna select from the list actions and this allows us to define a new repository Secret so let's go ahead and click on new repository stick wrap we're gonna give it this name that we have just copied from the pipeline then from Postman we need a secret key so from here from Postman we can see here again the option of generating an API key and this time we're gonna write here GitHub action and this is very helpful because then we know that this API key is associated with GitHub actions so you can simply go ahead and copy this entire thing and paste it here and then click on ADD Secret now I'm showing this openly because I'm going to revoke these secrets later on just in case you're wondering but I want you to understand exactly how this process works and how these secrets look like it's also important that you name them exactly as you see and that you don't add any spaces or any other characters new line and things like that to them otherwise they tend not work so well let's go back to actions here and we can take a look at one of these runs that has failed here and we can simply click on this button rerun jobs this will essentially restart this job so now the job has started and we can even click on it to see what is it doing and we can see the installation part is done it has logged in into the postman CLI so we have that information there and then now we're running some API tests and we can see here what is going on with API tests and we have the exact same report that we see when we're running Postman CLI locally but this time it is running in the cloud now whenever something goes wrong with this you need to determine is this because there was an issue executing the postman collection so essentially a postman test has failed or is it a problem with a script that we have written in any case it is important to have the patience to go over the logs and understand what has happened if there are some errors it's important to understand if there are any hints or any information here in this log so don't get scared that you see some failures here that's absolutely normal actually you want to make sure that whatever we're doing here actually fails if they need to fail just as running Postman CLI locally when we're running Postman CLI with the help of a cicd provider like GitHub actions the results of this execution will be published to postman so you can go back inside Postman and if we close the steps and click on the collection name itself we'll see here runs and this time we're going to see again information about the one that just happened there are also additional information here so you can see here this is the second build this is being linked actually to GitHub action so we can click on it and see more details about this what has happened why something has failed but just as well we can also visualize the results that we have from within Postman I hope you have managed to follow along because now it's time for another assignment it is super important that you understand how to use Postman CLI and if you manage to run the API test with the help of GitHub actions then essentially your job is done if you haven't done that please go to the previous lecture and tried it once again because for this assignment you will need your GitHub repository and you need to submit your guitar repository in order to be able to complete this final assignment anyway go to the original Postman workspace work the assignment number five and follow all the details that you will find inside there if you are not using GitHub actions that is also absolutely fine you can run Postman CLI in virtually any CI CD system out there however for the most popular ones Postman makes your life a bit easier so when you're going here over your collection and selecting a run collection then automating via CLI and then under run on cicd you click on configure command what you will see here are different cicd providers that you can use so you have bit pocket pipelines Circle CI gitlab Jenkins Azure pipelines Travis CI and probably many others in the near future apart from this you can also go and select the operating system where this provider is running so if there are any particularities if you know that this is running for example on Windows then you can also select the operating system there and what you will be given here is the configuration that you can use to get started with this and this of course changes depending on the provider but for most situations this is just enough to get started just enough to see that these tests are executing in your cicd pipeline and then you can make improvements based upon this but in a nutshell what you need to do is you need to ensure that Postman CLI is installed you need to make sure that you are all dedicated and that you don't expose your API credentials anywhere in the pipeline configuration and then you need to run the postman collection run command specifying the ID of your collection and after this the results of this execution will be displayed in your CI CD system and will also be ingested into Postman so that you can see the reports from the collection itself Postman is all about collaboration most of the time when you're using Postman you want to collaborate with other people in your team for that you need a team and you need to use team workspace so not to create a team workspace all you have to do is go here to workspaces and click on create workspace next if it's not already selected you need to select your team let's call this workspace my API my account doesn't have a team so a team will be created as well so let's go ahead and go directly to the workspace and let's see what we can do here team workspaces allow you to collaborate on a collection you can create Forks essentially which are a copy of a collection when you're working on a collection and making changes of course you can also collaborate with others and comment and have conversations with others within your team to understand why some changes are made or why maybe something isn't working as expected and you're also able to track everything that is going on within your collection knowing exactly who has made which changes and most importantly why when you're working with many many apis it's also super helpful to be able to search around and to find what you're looking for okay so let's go ahead and see exactly how we can benefit from this team workspaces and especially how we can benefit from working Collections and merging changes into them so let's go ahead and switch back to our Dark theme and I'm going to make this a bit bigger for you so that you can properly see we're gonna go ahead and create a new collection and I'm going to call this collection Postman Echo but let's imagine that we want to collaborate on this collection but we don't want to make changes directly to the collection in that case what we can do is hover over the collection until this menu pops up and then we can select create Fork so then we're creating a fork of this particular collection but receiving it in the same workspace so this will be my Fork we can give it any other label for example we can call it new request because let's say we want to work on a new request we're gonna Fork this collection we're gonna have an exact copy of this collection and in this new collection we can go ahead and add a request and let's say for example we want to add a request to the following endpoints so we're going to use Postman Dash echo.com forward slash get this will be a very simple request against this API which is provided by Postman and we're gonna get here some information back not so relevant just gonna go ahead and save this and close this so our original collection doesn't have any request now we have added a request here just want to test it a bit to make sure it works then we'll say okay now we want to integrate these changes back into the previous collection because we know that everything will be done here adding The Collection maybe writing some tests and other script everything works as expected what we can do is we're gonna go over our fork and from the context menu we can do two things we can create a pull request which essentially is a request for merging these changes back into original collection or simply merging the changes now of course this depends on the permissions that you have sometimes you can merge changes but sometimes you can only create a pull request so let's go ahead and do that so it's a pull request we have to provide here some information like why are we making these changes to the collection so for example you can say that a title is added request and we can provide here a description like we have added another request which is necessary for whatever project we're working on we can also add here reviewers from our team and then we can go ahead and create that pull request so we can see here a few things so we'll be able to see exactly what has been added so we'll see it's a new request it is with the method get and this is the URL where this request is going so here you will be given an overview of everything that has changed in that collection and it's important to notice here that we are having this particular source with a label that we have specified and we want to integrate these changes in the original collection so this is the original collection this is the one that we have for now depending on how things are configured we may or may not have the permission to merge in this case we do have the permission to merge so this merge pattern appears here so we're gonna go ahead and click on it and here there are various options that we can consider essentially once we merge these changes we don't need the copy that we have made the one with the label so in this case I'm going to select the merge changes and delete Source but you can just go ahead and click on merge changes and manually delete it later on if you feel more comfortable so let's go ahead and click on merge so the pull request has been merged so the changes that we have proposed are now inside this collection in a nutshell this is a very simple workflow that you and your team can use when working on a postman collection in a collaborative way and you want to keep track of which changes are being made and most importantly why we are coming towards the end of the course and it is time for you to claim your Postman badge for completing this course and doing all those assignments now go to the original workspace and Fork The Collection named claim your badge inside there you'll find detailed instructions on what you need to do in order to claim that badge I hope you have been able to follow along and do all the assignments if you need any help or you got stuck please refer to the course notes for every individual assignment congratulations you reached the grand finale of this API test automation course with Postman give yourself a pat on the back or even a round of applause yes because you have earned it my friend I hope you had as much fun learning as I did teaching sure it was a bit of work but who says we can't enjoy a little brain workout right API testing and automation with Postman can be a bit of a maze but I aimed to guide you through this as smooth as possible of course some things just couldn't fit into the course but don't worry the course notes for this lesson have got you covered with both free and paid resources to help you continue your Postman Journey just like you Postman and apis are constantly growing and evolving so make sure to keep up to date in this everchanging world of API testing it was a pleasure having you throughout this course and I can't wait to see many of you proudly wearing that Postman badge on social media and when you do so don't forget to tag me it will make my day if you enjoyed this course I'll be thrilled if you could check out my YouTube channel for more amazing content and smash that subscribe button your support will keep me fired up to create more content like this one and while you're at it please show some love to the sponsor of this course Postman with that I just want to say a massive thank you for joining me in this adventure and I hope to see you again in the next one until then Happy testing with Postman