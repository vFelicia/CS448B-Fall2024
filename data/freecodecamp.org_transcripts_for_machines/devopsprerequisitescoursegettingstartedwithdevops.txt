hello and welcome to the devops prerequisite course the one course that you must go through before starting your devops or cloud journey my name is mumshad manambat and i will be your instructor for this course students who are absolute beginners and are totally new to it or the cloud and devops world require some additional help in starting their journey for example they often run into issues with setting up a basic lab environment using virtualbox or issues with configuring the right kind of networking in virtualbox or trouble with working with the linux cli or text editors like vi editor and sometimes it's trouble with getting a web server to communicate with a database server or at other times it's working with data formats like json or ammo so we have identified a gap and we believe that this is because they are missing some of the basic prerequisites as a devops or cloud engineer it is important to have these basics cleared and that's why we built this course to bridge that gap this course helps you get your basics right so the rest of the journey is smooth now you might be wondering whether you have the background or the experience to get started and i want to assure you that this course is really for anyone who wants to start their devops or cloud journey even if you're from a noniit background or you don't have a computer science degree or if you're a college student who has no work experience and wants to start your devops or cloud journey this course is also for those who happen to have some experience such as developers who wants to learn a little bit about operations in order to move to a devops role so no coding or programming knowledge required so how does it work with visual learning we simplify complex concepts using illustrations and animations and we have demos where we show you how to put these into practice we have handson labs that open up right in your browser where we have preconfigured environments for you to practice with our labs are fun and interactive and hassle free you don't need to do anything to get them to work they just work right in your browser you'll learn by exploring real environments and solving puzzles and you'll troubleshoot and fix broken environments and we will always verify your work and will give you feedback on what went wrong at any time you feel stuck we have a community where you can get help so let's get started and i will see you in the next video so let's take a closer look at the objectives of this course remember that this is a devops and cloud prerequisites course so this is the course that comes before you start an actual devops course and since we cover a lot of concepts we will cover just enough of each topic so you have a fair idea about that topic as well as get some handson experience in the first section we start with the basics of linux where you go through and understand basic commands in the linux cli you learn how to work with the vi editor as it's important to be comfortable with at least one text editor in linux you'll use this when you work with files in linux such as configuration files we then look at how to install software and dependencies in linux and then we will see what are services and how to configure them at times you may want to set up your own personal lab environment an environment where your changes are saved and an environment where you can develop your own custom solutions and this section will help you create your own lab as well as troubleshoot and maintain it which is something that most students struggle with especially the networking part in virtualbox and we have some neat lectures and demos that explain those another area that students usually struggle is with networking in linux how are interfaces and ip addresses configured why can't i get a vm to reach the internet or multiple vms to ping each other how do i configure routing what is dns and how do i configure the right dns settings and how do i troubleshoot dns related issues and we cover these along with labs in this section we also look at some of the commonly used data structure languages like json and yaml automation tools like ansible use yaml to develop playbooks and docker and kubernetes use it for building definition files so we have a lot of fun challenges that will help you practice this well let's get started when you're ready in this section we'll go through some of the basics of linux command line if you're already a linux maestro then feel free to skip this section or simply go through the labs and try to complete the challenges and make sure you're comfortable with all of them while designing this course we used stack overflows insights along with the data from surveys we conducted from our student base and which you might have seen in our other courses to identify the most commonly used and most demanding technologies that we will cover in this course that way we can make this course relevant to most of you so you'll see me referring to these often and i hope learning the most loved and wanted technologies will motivate you as per stack overflows insights the most common and the most loved platform used for development work happens to be linux if you're from a windows background i'd highly recommend learning some linux basics as most devops tools have a requirement for linux as part of this course we cover basics of linux os such as how to work with the command line interface how to work with text editors like vi editor we discuss package management and services etc there are different flavors of linux such as ubuntu red hat enterprise linux santos etc we conducted a survey of our students and a good percentage of them requested their preferred os to be centos followed by ubuntu and red hat enterprise linux centos is a free community edition of red hat enterprise linux so learning centos also helps you cover the basics of rhel learning centos will also help you prepare for linux certifications like linux essentials or linux foundation's certified systems administrator certification now since you also cover basics of red hat enterprise linux it also helps you prepare for any red hat exams and that's why we decided that centos is going to be the os of our choice for this course so let us begin our linux crash course in this section you're going to work with linux systems in our lab this is so you get very familiar with the linux cli and some basic commands before you actually deploy a linux system by yourself the next section is about deploying a linux system on your linux laptop using tools like virtualbox when you do that the cli and commands you learn in this section will be handy so i recommend not deploying your own linux system for now instead just rely on our labs and get some good handson practice and then in the next section deploy your own vms so we will start assuming a linux system has already been provisioned let's start with shell linux systems have both cli and gui interfaces when you work with linux especially in it you work with the cli and you must get really comfortable with it because most servers that you work with in your work environment won't really have a graphical user interface so we will just focus on the command line the text based command line interface that helps you run commands to interact with the operating system is called the linux shell if you have ever worked on a linux system before you might have noticed that sometimes the cli interface behaves differently as in sometimes you press the backspace button to delete a command and it doesn't work or when you press the tab button to autocomplete it doesn't autocomplete and that's because there are different kinds of shells such as the bourne shell the sea shell z shell born again shell which is known as bash and each of these shells behave differently the older shell which is the born shell or simply known as shell had limitations in the way we interact with it the newer bash shell supports many advanced features such as arithmetic operations conditionals arrays etc you can see which shell you are on by printing the environment variable named shell using the echo dollar shell command the echo command helps you print on the screen and the dollar symbol helps you specify an environment variable let's now get introduced to some basic linux commands we will first look at the commands and you will then work on labs where you will use these commands echo as we just discussed is the command used to print a line of text the word you enter after the echo command will be printed on your screen as simple as that the echo command is usually used when you want to print out an environment variable as we just saw we will discuss about environment variables later the echo command is also used in scripts where you want to print out information onto screen the ls command is used to list all the contents of a directory here we see that we have two files file.txt and file2.conf and a directory named my underscore dir1 the cd command stands for change directory and it is used to navigate to new directories in the system for example to get into the my underscore dar1 directory run the command cd followed by the directory name the pwd command or the present working directory command is used to print the directory you are currently in the mkdir or the make directory command is used to create a new directory in this example we have created a new directory called new underscore directory to run multiple commands one after the other separate them by a semicolon in this case it first changes into the new directory then makes a directory by the name www and then prints the current working directory now even though it's a single execution remember there are three separate commands and executed one after the other at times you might want to create a directory tree for example we want to create a directory slash tmp slash asia india bangalore one way to do that is to run the make directory command three times specifying one directory each time for example first we create the first directory and then we create the india directory in inside asia and then we create the bank load directory inside india a better way to do that would be to run a single command using the p option like this this way it creates the entire directory tree in one shot and does not complain if a particular directory is not available to remove a directory and all of its contents run the rm minus r command and specify the directory name to copy one directory to another location use the cp command but with the dash r option this copies the directory and all of its contents from one location to another let's see some commands to work with files to create a new file run the touch command and provide the file name this creates a new file but with no contents to add some contents to the file use the cad command and the redirection symbol which looks like a forward arrow followed by the file name once this command is issued the prompt will wait for your user input you would be able to add lines of text hit the return key to type in into a new line of text and press the ctrl d combination to exit out of this prompt and save the data to the file to view the contents of a file run the cat command followed by the file name this time without the redirection symbol these are some basic commands to work with files in the cli for editing contents of a file you may need a text editor like vi or vim we also take a look at the basics of vi editor later in this course now while working with devops tools you'll often come across situations where you will have to modify configuration files on linux and these editors will come handy then but to get through this lecture and the the following labs you don't really need a text editor so let's continue to copy a file use the cp command and specify the source file path and name and the target path and name to move a file which is similar to cutting and pasting a file to a different location use the mv command specify the old name and the new path and the file name if the file is moved to the same path but with a different name then it's essentially like renaming the file and that is how you rename a file in linux there's no separate command for that run the rm command to remove or delete a file so that's about it for this section head over to the labs and practice working with these basic linux commands let me quickly introduce you to the handson labs in this course the lab interface is divided into two sections here you have a terminal which is a live terminal to a linux host and here you have a quiz portal it takes a few minutes for the labs to load so just give it some time if you need more space for your lab click on this button here to hide the curriculum window that way you can get a more space for your lab so we'll just wait for it to load okay so the lab is loaded and i'm on the linux terminal here and this is my quiz portal in the quiz portal i have various tasks that i am expected to complete the tasks are of two kinds first we have exploratory questions which are these where we ask you to explore the environment and select the right answers from these options let me walk you through a few of these questions in this case this is a multiple choice question so here you have a question and here you have some options so you're supposed to select the right option in case you are not sure how to find the answer to that question we have some hints so clicking on this will tell you exactly what you need to do it'll give you the command that you need to run or a hint to find the right solution we also have a timer so these labs are available for an hour each time so you can access these labs as many times as you want but each time there's a time limit exits in an hour and this lab session also has a number of questions and you can see the question numbers here currently we are on the first question and this lab has a total of 10 questions you can also skip through questions in case you go through five questions and then for some reason you have to stop or for some reason the lab terminates in that case you can restart the lab and then you can skip through the questions so let's start with let me show you a few examples in this case we have the question is how many directories and files are present in the home thor test directory so we go to that particular directory here okay and then we list the contents and we see that there are three directories and then three files okay so the correct answer is three directories and three files and that's correct next the question is which text file is not present under the home thor directory so we know that there is files one two and four so 3 is not is the correct answer but let's say you pick the wrong answer and then it's going to tell you that it's wrong so you must select the correct answer and the next question is to create it's now this is a task so this is the second type of question which is not a multiple choice question so here you have to perform the task that you're asked to do and if you don't do it and it's going to check your work and it's going to tell you that the task is not completed so in this case we have to create a file under the home thor directory so we use the touch command and we create the file you can always refer to the the course material the pdf to get the correct answer or you can refer to the hint so here i create an empty file using the touch command when i check it's successful okay so these are very basic labs and as and when you go through the course the difficulty uh will increase and you'll have more and more complex tasks and challenges to complete now for some reason uh if you'd like to open a new terminal here there are some options so if you click on the plus button and click on open new terminal then you can get a new terminal window so here i have the old terminal and here i have the new one and if you uh at some point in time we will be hosting web servers and if you'd like to access the url of the server then you'll have to click these links and that way it'll open up a new browser and it will forward your request to the host what you're accessing is a terminal to a remote server um i hope you enjoy your learning let us now look at some more linux commands that will help you get through this course we will start with user accounts to know which user you are run the who am i command in this case it says you are user matthew the id command gives you more information about the user such as the user's id which happens to be 1001 and the group id and the groups that the user is part of to switch from one user to another you may use the su command su stands for switch user to switch to user say aperna run the su command followed by the user's name you will then be prompted for the user's password if you're accessing one system from another system using say ssh and you want to log into the other system using a different user than your current user specify the username before the host name followed by an ad symbol when it comes to performing tasks not all users can do all tasks in linux matthew is a regular user and so his access on the system is restricted every linux system has a super user known as the root user the root user has no restrictions on the system and can perform any task which is why in most production environments or enterprise environments access to the root user is restricted and you will almost never log into the systems as a root user now as a normal user what if you wish to perform actions that can only be performed by a root user such as installing and configuring software and services on the system or viewing certain paths such as the root directory a root user can make that possible for a regular user by granting them sudo privileges by making an entry into the etsy sudoers file so the user is still a regular user but with root privileges when a regular user is granted sudo privilege they can now elevate their permission level and perform tasks that they otherwise couldn't by simply prefixing a command with the keyword sudo they'll be asked for their password and on entering the password the command is executed when you look through the labs in the rest of this course you'll work in an environment where you will not have root access instead you will be a regular user with sudo privileges so while making changes to the system you must remember to use the sudo prefix if not you will get permission denied errors so whenever you hit permission denied errors remember that it could be because you haven't used the sudo prefix we will be discussing about a lot of commands through the rest of this course and for the sake of brevity we won't be specifying the sudo prefix each time on all our slides so it is assumed that you will use this prefix while working in the labs let us now look at some commands that will help us download files from the internet at times you will have to download files from the internet such as rpm packages or binary files or images and you can use use the call command and provide the url of the file to download the file add the dash capital o option to save the result to a file otherwise it'll just print the file on screen another tool that can be used to download files is the wget command again specify the full url and with the dash capital o options specify the name of the file that you want it to store locally as at times you may be on a linux system and may not know what operating system you are on to know the current os inspect the release files under the etsy directory the release files may be named differently based on the operating system so use a wild card like this to see more details about the os view these files by running the cat command and you can see that in this case it's centos version 7. let's now talk about package managers in linux package managers help you install various software on the linux system and when you go through devops and cloud courses you will install various software such as web servers database servers and devops tools or dependent softwares and most of these are installed using package managers centos uses an rpm based package manager just like red hat enterprise linux or fedora rpm stands for red hat package manager a software is packaged into a bundle with the extension.rpm to install the package use the rpm command and the dash i option for install and specify the package name to uninstall a package use the e option and to query the database and get details about an installed package use the dash queue option so rpm requires you to point it to the exact location where the rpm package is available you then install that package on the system it does not care about any dependencies that this package may have for example say you were installing another software like ansible and it requires python and other other dependent software so simply installing ansible with the rpm command would not take care of installing python and other dependent libraries if they are all not already installed and that's why you need a solution that can make these easy for you a single command that can query the package find its location and install all dependencies as well as the package itself that's where package managers like yum come into play yum is a high level package manager that uses rpm underneath running a simple yum install ansible command installs ansible and all of its dependent packages searches software repositories that act as warehouses containing hundreds and thousands of rpm package files these repositories can be local that is installed on your laptop for example or on a remote location either a secure server in your enterprise or available publicly in the internet under the hoods yum still makes use of the rpm package manager so when you try to install a package using yum yum searches these repositories finds the required packages and dependencies and installs all of them in the right order so what is this remote repository and how are packages stored there like how does yum find where a particular package is located the information about the repository in a configuration file at path slash etsy m.repos.d directory every operating system comes bundled with its own set of repositories from which you can install a lot of commonly used software and tools so you might not need to edit the list of repositories but at times the default set of repositories may not have the software you need or may not have the latest version of software that you need to install so in that case you will need to configure additional repositories so that yum can find those packages instructions to configure additional repositories are usually made available along with the software itself and we'll see an example of that so to see the list of repositories available on a system run the yum repo list command and here we see that there are a set of centos repositories such as the base and extra repository as well as mongodb and mysql ones so listing the files under the etsym.repost.d directory shows the files where these repositories are configured and if you look inside one of these files you will see the url of the location where all packages are stored now if you visit this url you can see the rpm files that yum will eventually download and install on your local system with the rpm utility so that's kind of how yum finds a package in this case since we are relying on an existing yum repo on centos it takes us to an older version of ansible which happens to be version 2.4 although the latest version as of this recording is 2.9 so as i just mentioned the instructions to configure the repo to install the latest version of ansible is available in the ansible documentation page itself so you can configure a new repo using the yum install command itself and running this command adds a new repository to your system which points to the latest version of ansible to see a list of installed or available packages run the yum list command and followed by the package name if you want to search for its particular package it provides the package name and version and if it's an installed package or just an available package to remove an installed package run the yum remove command followed by the package name and to list all available versions of a package run the yum list command but this time with the show duplicates option so here we see two versions of packages for ansible and we can see that each of these are from two separate repositories one is from the extras repository and the other is from the epel repository to install a specific version of a package run the yum install command with the package name followed by a hyphen and the version of the package let's now talk about services in linux once you install a software on servers especially those that run in the background such as web servers or database servers you would need to make sure that those servers or services are running and that they stay running even after the servers are rebooted so services in linux help you configure software to run in the background and make sure that they run all the time automatically when servers are rebooted as well as they follow the right order of startup when any software that runs as a service in the background is installed such as a web server or database server or devops tools like docker they are automatically configured as a service on the system to start that service you run the service start command and providing the service name which happens to be in this case httpd the newer method to start a service is to use the system cuddle command and run the system cuddle start command and provide the service name so in this case system cuddle or system ctl start httpd systemcuddle is the command used to manage services on a systemd managed server both the commands the service command and the system cuddle command serve the same purpose the service command uses the system cuddle utility underneath so we will just focus on using the system cuddle command for the remainder of this lecture to stop a running service run the system cuddle stop command followed by the service name to check the status of a service run the system cuddle status command to configure a service to start automatically when the system boots up run the system cuddle enable command and to disable the service at boot up run the system cuddle disable command once services are configured it is so convenient for administrators to start stop or enable the services you don't have to go looking for the executables to start these services so how do you configure a program or software as a service say for example you have a simple python program and it could be a simple web server that's developed in python and the code is available at opt code myapp.py you can run this server with the python interpreter once it's running if you call the local host for port 5000 you see it return hello world which happens to be the response of the web server now i want to configure this as a service you know so you want your program to run as a service so that when you run the system cuddle start command it starts and when you run the system cuddle stop command it stops and similarly you want to configure your application to automatically start when the system boots up and you know even automatically restart in case the application crashes how do you do that as we just saw the system called command line utility is used to manage the systemd services so we must configure our program as a systemd service so how do we do that a systemd service is configured using a systemd unit file these files may be located at etsy systemd system path so let's create a unit file at etsy system the system path the file must be named with the name that you eventually want the service to be known as in this case we'll name it my app and with an extension dot service define a section called service using the square brackets inside the file and provide a directive named execstart under it this is where you specify the command that you will be using to run your application so the same command that we run here we're going to put it over here and that's it that's enough to configure your application as a service run the system cuddle daemon reload command to let systemd know that there is a new service configured and then run the system cuddle start command and provide the name of the service in this case my underscore app let's check the status of the new service using the system calls status command it lists that the service is in an active and running state you can now test by performing a call operation on port 5000 of localhost to stop the application run the system cuddle stop command okay so we have configured our application to run as a service and we are now able to start and stop it as required so how do we configure it to automatically run when the system boots up we configure that in the unit file and the unit configuration file has many other options and the service section is only one of the many sections another section is the install section so in this section we basically need to configure this service to run after a particular service that runs at boot up so one way to specify that is using the wanted by directive we can configure this service to run after the multiuser target run level is started once this is done you can configure the service to start during boot up using the system cuddle enable command you can also provide additional metadata information about the service such as description that would allow others to understand what this service is about now for that add a new section in the file called unit and use the description directive if your application has other dependencies such as commands or scripts that are to be run before starting the application or after starting the application then add the exec start pre and exec start post directives and specify the scripts or commands to be run if you'd like the application to automatically restart in case it crashes specify the restart directive and set its value to always so let's take an example of a real software say docker right well we're not going to talk about docker itself we have you know multiple courses on docker where we talk a lot about docker in this context docker is just an example of a software so and it's the same with any software so you don't really need to know anything about docker to understand this lecture so once docker is installed docker daemon runs as a background process that listens for docker commands when docker is installed an executable named docker d is made available on the system add path slash user slash bin slash docker d this is configured as a service using the system unit file at path lib system the system docker dot service now this file has three sections um the unit service and install section as we just learned and you can see the description as well as some of the other details such as a link to documentation etc and the service section has the command that is run to start the docker daemon which is specified under the exact start section in this section we will learn more about consolebased text editors in linux earlier in this course we saw the usage of the cat command to write and redirect data into a file while this works well and has its uses it is a very basic form and offers no additional features and is not feasible when dealing with adding or manipulating large amount of texts or for writing code in the devops and cloud world you'll be working with a number of linux servers and most of the time you'll be accessing them remotely using terminal tools and you'll be modifying content in a number of files configuration files mostly so getting the basics of vi editor comes in really handy in such cases there are a number of text editors available in linux such as vi vim nano etc and in this course we will look at vi editor which happens to be the most popular one vi editor comes installed by default with most operating systems run the vi command and specify the file name to open it the terminal opens the file and you're now inside the vi editor vi editor has two modes of operation the command mode and the insert mode when you open a file in vi editor you are by default in the command mode in this mode you can issue commands to the editor such as to copy and paste lines or delete a line or a word or to navigate between lines etc but you cannot write contents to the file to write contents to the file you must switch to the insert mode to switch to the insert mode type lowercase i once you are in insert mode you may modify the file contents as you would normally to switch back from insert mode to the command mode press the escape key let's see what operations are available in the command mode you may move around through the editor using the arrow keys or the keys k j h l on your keyboard k to go up h to left j to down and l to the right to delete a character press x typing dd deletes the entire line to copy a line type yy and to paste it type in p to scroll the page up or down press the control plus u or d buttons typing in colon takes you to the prompt where you can type in commands to save the changes made to the file and write the file to disk use the colon w command you can optionally specify a file name as well to discard any unsaved changes made to the file and quit whim type in colon queue command to save changes and quit type in colon wq command so how do you find stuff for example i want to find the word off in this file for this type in the command slash off when you do that all occurrences of the word off is highlighted and the cursor is positioned at that location to move your cursor to the rest of the occurrences press the n key and you can continue to press the n key to move the cursor to all future occurrences well that's it for the basics of vi editor for now in this section we will talk about setting up a lab for beginning your studies on devops and cloud technologies at code cloud we have embedded labs for our courses and we provide you a readily available environment to work on but at times you may want to set up your own personal learning environment an environment where your changes are persistent and an environment where you can develop your own custom solutions and this section will help you create your own lab as well as troubleshoot and maintain it which is something that most students struggle with we will discuss the different options available to set up a lab environment such as laptops or cloud we will discuss using virtualbox as a solution to set up labs on your laptop we will discuss how to deploy multiple vms in a virtualbox environment we will discuss networking in virtualbox which is one of the topics that a lot of our students have trouble with such as getting the vms to talk to each other accessing the internet from the from the vms ssh into to the vms etc we will also discuss how to take snapshots to save the state of vms and restore those snapshots we will then discuss how to automate the deployment of vms using vagrant a vagrant is a really neat tool that can help you set up a local lab environment very easily and it is i highly recommend you to learn that and finally we will also look at some options available on the cloud to set up your own lab environment you have two options one is your laptop either office or home the second is on the cloud a private cloud within your organization or a public cloud provider like google aws or azure there are many cloud providers that offer free tier where you can create vms and use them for free we will talk about some of those later for now let's start with a lab setup on a home laptop or desktop environment this could also be an office laptop i personally prefer a home laptop as i can do anything with it as i want i don't need to take approvals or race requests to open up firewalls or get permission to install software on it i want to be independent and do whatever i want to do so you need such an environment to play around with and to break and and then fix it back together and basically do anything that you want to do with it so what is a home lab environment and what are the kind of things that you will be needing it for while going through devops cloud or it automation courses you will often come across a set of tools that you will need to work with tools such as git for source code management build tools like jenkins for running builds programming language frameworks like java python or node.js their dependent libraries and packages web servers like apache web server nginx tomcat servers or databases like mysql mongodb etc or containerization tools like docker or kubernetes and automation tools like ansible chef or puppet um as well as cloud management tools like you know cloud sdks or cloud command line tools and even different operating systems even such as ubuntu centos fedora etc now you can install all of these directly on your laptop and play around with them but at some point it's going to start impacting the performance of your laptop and you might run into compatibility related issues different applications may have a requirement for different versions of these softwares and then you'll try to uninstall and reinstall them and soon you'll see yourself in an installation and clean up loop trying to get it all working and soon uh you'll end up reimaging your laptop and losing all your configurations and all of the personalization that you did to your laptop so one way to combat that is to do everything that you need to do within a virtual machine on your laptop so this way if things go south you can simply delete your virtual machine and provision a new one or take a backup of your virtual machine and restore state from backup we will discuss how to do that later in this section this also allows you to try different things in different virtual machines and have different operating systems on different virtual machines irrespective of what os you are on say you are on a mac or windows you can have one vm with ubuntu another with centos you can run windows or linux on mac or a windows server on linux or a linux on windows or mac etc and you can have as many systems as you want as long as you have sufficient hardware resources now of course uh all of all of these tools that are listed here some of them definitely need to be on your laptop such as git or you know the a few other popular tools that you would use on a daytoday basis for development purposes but what i'm referring to here are more of the tools like programming language frameworks or build tools or web servers or databases etc so what is a software that can help you create these virtual machines these virtual machines into which you can you know that those which we can play around with or install applications on it's called as a virtualization software or hypervisors now you might have heard about vmware esx servers or windows hyperv servers that can create virtual machines these are known as type 1 hypervisors they are installed directly on bare metal such as a laptop or server and then the vms are created on that now these are used in enterprises and production environments where you need to create and manage large number of virtual machines and as such these hypervisors have high resource requirements they also need to be installed and configured directly on the laptop and they are expensive as well a lot of people do use this for home labs especially if they have systems with high resources but that's not what we want here for our purpose there are other solutions available that better suit our needs and are easy to manage and those are type 2 hypervisors there are hypervisors that runs on an existing operating system examples are oracle virtualbox and vmware workstation these allow you to easily get started with virtual machines on your laptops without having to install any other operating system or reimage your laptop so going forward when we say host operating system we are referring to the main os on our laptop and when we talk about guest operating systems we're referring to the vms that are created on the hypervisors which are on the operating system and so these are our topic of interest oracle virtualbox and vmware workstation both of these are very easy to get started with just download and install and off you go but which uh one among the two oracle virtualbox is a free and open source tool it can be installed and used to create virtual machines on windows linux or mac exactly the same way it supports backup and recovery with snapshots and clone features it lets you run multiple vms together and also helps you create separate networks within your laptop for different groups of vms vmware workstation is on the other hand is not a free software it can only be installed on windows or linux and not mac and it supports advanced features like snapshots and clones there is a free version of vmware workstation known as vmware player that's available for windows and linux and vmware fusion which is available for mac however these do not have many features that vmware workstation or virtualbox supports such as running multiple vms at the same time or taking snapshots or performing you know advanced networking configurations so if you ask me considering the cost benefits and the features oracle virtualbox is my choice for a home lab environment so oracle virtualbox is supported on windows linux mac or solaris platforms visit this link to go to the downloads page and download the package for your operating system and this link gives you the list of supported operating system versions with respect to resource requirements oracle virtualbox can be installed on a system with an x86 hardware with memory as small as 5 12 mb and only consumes around 30 mb of disk space for itself however since virtual machines require resources it's a good idea to have additional resources on your host system a lot more actually so a dual core or quad core processor and a memory of at least 4 gb and disk space of at least 100 gb or more will help you set up one or two small vms and you can be really smart in managing resources by allocating vms with only sufficient resources that that it requires and using lightweight os images instead of the fullblown os images so once it's installed open up the virtualbox tool by starting the executable it should be available in your application section or in your program section on windows to create a new virtual machine hit the new button at the top then give your vm a name and specify the location where you want the files of the vm to be created the vm itself and the disks of the vm are stored as a file on the host operating system set the type of the os to linux and since the vm that i intend to create is a centos machine i choose red hat 64 bit as my os version because centos is a community fork of red hat enterprise linux so they're kind of the same except that red hat enterprise linux has a lot more advanced packages and and builtin features but at the core they are the same so from the list of uh options available now you have linux and debian fedora you don't see centos but instead of that you can just select red hat and then you have others like open suse ubuntu etc the next step is assigning memory resources this may differ between different oss if your os is lightweight you may assign a smaller amount of memory 1gb is usually good and next we select the hard disk okay here's where you can create and attach a new disk to the vm now a new disk means it's blank and does not have anything on it it doesn't even have an operating system on it now creating a new vm is like buying a new pc or a laptop without an operating system you decide what cpu memory and disk configurations are needed and then you buy the laptop and get the disks attach the disk to the machine and then the disk is a blank disk and there is no operating system on it so you need to install an operating system using an oscd so just like how you would install an os on a laptop you would need to install an os on a virtual machine created like this now that's one approach but there's a better way and what if the disk you attach already has an os on it a preconfigured prebuilt os that way when the vm is created we attach the disk which has the os on it and then when it boots it's ready to go you don't have to manually install the os so how do we create those disks and where do we get such disks from well it so happens that a large collection of such preconfigured disks or images as it is called are available on the internet and one such website is osboxes.org they have a list of images for all kinds of operating systems like ubuntu debian centos fedora etc once an image is downloaded use that as an existing virtual hard disk file while creating the vm and that's it and the vm is now created now all you need to do is start the vm by rightclicking and selecting the normal start option from the menu in the next lecture we will see the different ways of connecting to the vm and working with it and that's one area a lot of people have problems with um like how do you ssh into the vm how do i access a service hosted on the vm etc and that's what we will cover in the next lecture in this demo we're going to see how to set up a lab environment okay so in my case i have a windows system so i will be setting up a lab environment on my windows system it doesn't really matter what operating system you're on you could follow the same instructions to set up a lab environment on linux or your mac operating systems so in our case we're going to install virtualbox so go to virtualbox.org and in the website you will have find a link to download the virtualbox software in the download page you will find these links to download virtualbox for specific operating systems uh in my case mine is windows i'm going to click on windows and i'm going to download the software once downloaded run the executable and follow the instructions in the installation wizard to complete installation in my case i've already installed it so i'm just going to cancel that after you install open up the oracle vm virtualbox interface and it will look something like this now the next step is to deploy virtual machines in order to do that you can either create a machine attach a cd drive of an operating system and follow the instructions to install the operating system as we are familiar with however there's also an another easy way there are preinstalled preconfigured operating system images available on the internet we could use those to easily deploy as many virtual machines as we need for this if you go to the website osboxes.org you will find a lot of preinstalled preconfigured images of various operating systems go to this site and select the vm images virtualbox images link at the top then you will be you'll find a list of various different operating systems from this we will select send os and then it will take us to the centos page here you can see information on downloading the centos image in our case we're downloading the virtualbox image for centos 7 and we're downloading the 64bit version so remember to download that particular version we will then it is downloaded as a 7z file which is a compressed file so you need a software to uncompress it like guitar or winzip in my case i'm using the 7zip software to extract the contents of the file into a folder wait for it to finish the extraction process once finished if you go into the folder you will see that there is a folder called 64bit and inside that folder you you'll find a file with the extension.vdi that stands for virtual disk and that is what we will use to create our virtual machine we're now ready to create a new virtual machine so we go back into the oracle vm virtualbox interface click on new and we fill in the name and operating system now i will name the virtual machine that i'm creating as centos template because as we discussed our goal is to create a template and then use that template to create as many virtual machines as i need so i'm going to name it as centos template i will now select the type as linux and the version since it does not have sent os listed i could simply select other now as you can see under the versions there are 32bit as well as 64bit options in our case we downloaded the centos 64bit version so we must select a 64bit option now in case you do not see the 64bit options in this list that is most probably because you do not have the virtualization technology enabled on your laptop to enable virtualization technology on your laptop it is usually under the bios settings if you simply google enable virtualization in bios followed by your laptop model you will see a set of results it's usually it usually looks something like this under the bios under the advanced bios features you'll have something called as virtualization technology and you must ensure that it is set to enable state so once you do that restart your laptop and you will find the 64bit option and click next in the next here we select a memory size by default it's set to 512 mb and let's change that to around 2gb so we'll set it to 2 gigs in the next step we select the hard disk that we downloaded so in this case the default selection is create a virtual hard disk now but that is not what we want we already have a prebuilt image of a hard disk uh downloaded so we're going to specify that select the use an existing virtual hard disk file option and click on browse and browse to the file that we downloaded and extracted which is the centos 7 file with the vdi extension click on ok and that creates the file now before powering on the template we will go into settings and make a few more changes go to system and we'll increase the cpu to around two and we go to network section and we will set the adapter one to bridge network this way my virtual machine gets an ip address as well as it can connect to the internet to download and install packages as required i will now go ahead and power on the system okay i'm now at the login prompt um select the default user which is the o which is os boxes now the password to find out the password for any images downloaded from osboxes.org go to the info section and then you'll see that the username is os boxes and the password is osboxes.org so i'm going to use that password os boxes.org i'll click on sign in to log into the centos system in this demo we're going to see how to set up a lab environment so in our case we're going to install virtualbox so go to virtualbox.org and in the website you will have find a link to download the virtualbox software in the download page you will find these links to download virtualbox for specific operating systems and i'm going to download the software once downloaded run the executable and follow the instructions in the installation wizard to complete installation after you install open up the oracle vm virtualbox interface and it will look something like this now the next step is to deploy virtual machines in order to do that you can either create a machine attach a cd drive of an operating system and follow the instructions to install the operating system as we are familiar with however there's also an another easy way there are preinstalled preconfigured operating system images available on the internet we could use those to easily deploy as many virtual machines as we need for this if you go to the website os osboxes.org you will find a lot of preinstalled preconfigured images of various operating systems go to this site and select the vm images virtualbox images link at the top then you will be you will find a list of various different operating systems from this we will select send os and then it will take us to the send os page here you can see information on downloading the centos image in our case we are downloading the virtualbox image for centos 7 and we're downloading the 64bit version so remember to download that particular version it is downloaded as a 7z file which is a compressed file so you need a software to uncompress it wait for it to finish the extraction process once finished if you go into the folder you will see that there is a folder called 64bit and inside that folder you'll find a file with the extension.vdi that stands for virtual disk and that is what we will use to create a virtual machine we're now ready to create a new virtual machine so we go back into the oracle vm virtualbox interface click on new and we fill in the name and operating system i will now select the type as linux and click next in the next here we select a memory size in the next step we select the hard disk that we downloaded so in this case the default selection is create a virtual hard disk now but that is not what we want we already have a prebuilt image of a hard disk downloaded so we're going to specify that select the use an existing virtual hard disk file option and click on browse and browse to the file that we downloaded and extracted which is the centos 7 file with the vdi extension click on ok and that creates the file now before powering on the template we will go into settings and make a few more changes go to system and we'll increase the cpu to around two i will now go ahead and power on the system in this lecture we will look at how to connect to the vm we created in the previous video now some of the most frequently asked questions about setting up a local lab environment revolves around connectivity how do we connect to the vm and how do we ssh into it why can't i access the you know something that's hosted on the vm such as the web browser and we'll find answers for these in this video so on our laptop um which we will call as the host system we have deployed oracle virtualbox and created a vm having a centos image which happens to be the same the guest system i'm using mac but it works the same for windows or linux now when a vm is installed and ready you can start the vm either in a normal mode or a headless mode now a normal mode gives you a console to the vm you can see the ui of the vm as you would see a linux laptop boot up it's like looking at the monitor of a machine if the image we downloaded came with a linux gui as well then we can see the gui on the screen and work with the vm like working with any other you know gui the gui is okay to explore and maybe you know play around with initially but when you get into real devops and cloud and automation tasks it would be better to have cli access so i personally never use the gui because it's in fact a bit painful to work with you know switching between your system and the vm ui and since it's a vm the gui and console may be a bit slow you can't easily copy and paste stuff from your host to the guest or you know copy files back and forth you can but it's just not that easy now eventually you need a terminal to work with a linux system that is to run commands for you know installing packages working with services etc so instead of using the terminal inside the gui it is a lot more convenient to use a terminal on your host laptop in the normal mode when the console is closed the vm must be shut down or suspended it pops up this message where it gives you these three options the first one says save the machine state which is suspend and then send or the other options are send a shutdown signal or power off the machine the other option shown here is the headless start so if that is selected the vm still starts but the console window won't be opened the vm can only be accessed remotely using ssh or remote desktop tools for windows the third option is where it can be started in a normal mode but closing the console won't require you to suspend or shut down the vm instead you have you now have a new option that says continue to run in the background so that just selecting that option simply closes the console alone and it continues to keep the the vm running in the background depending on what os has been used on the guest system we have different ways of connecting to it for example say we had a windows system to remotely connect to the windows system without using the console you could use the some kind of remote desktop clients such as the one provided by microsoft now if the guest has a linux operating system as it is in case of centos we can connect to it remotely through ssh using ssh clients like the terminal app in in linux or mac and tools like putty in windows although the vms are within our laptop think of them as separate machines connected to the same network so whatever you need for one system to connect to another system you would need that here for this to work you must have these vms configured with ip addresses and the relevant services must be configured and running on windows you need the remote desktop service to be running and on linux you need the ssh service to be running so make sure ssh server is installed and is in a running state if so you can ssh into the vm from the host system using the terminal on the host and the ip address of the remote vm but how do you configure ssh service and ip addresses on the vm if you can't connect to it on the first place for that you could use the console to perform initial configuration it's a common practice to use the console to perform initial configurations and then once ssh is enabled switch over to the terminal for all future interactions so if you run into issues connecting to a vm check to make sure that the vm has an ip address set and that you are using the right ip address and that ssh service on the remote vm is running so here's a quick example on how to check or set ip addresses in a centos machine run the ip address show command and it lists all interfaces and ip addresses assigned to them the first interface is the loopback interface with the ip127.0.0.1 and the second interface is 0 which is the interface used for connectivity and it has ip addresses 192.168.1.10 now if the ip address was not set you can set the ip using the ip address add command and specify the ip address followed by the subnet mask and the device you want to set the ip on which happens to be each 0 in this case now with different operating systems the device names as well as commands may differ so refer to the operating system documentations and find out the right relevant way to set ip address and here's a quick tip on checking the ssh service the ssh service comes by default with centos image to check if the daemon is running run the service sshd status command if it's not running run the service sshd start command to start it well that's it for now we will now head over to a demo and see this in action and in the upcoming lectures we will discuss more about networking in virtualbox okay i'm now at the login prompt um select the default user which is the o which is os boxes now the password to find out the password for any images downloaded from osboxes.org go to the info section and then you'll see that the username is os boxes and the password is osboxes.org so i'm going to use that password os boxes.org i'll click on sign in to log into the centos system i'll open up a terminal and type in ifconfig the ifconfig command tells me the ip address currently assigned to the virtual machine as you can see it is 192.168.1.112. now i will open up a ssh terminal to ssh into that virtual machine in my case i'm using a terminal software called as moba exter i like to use this this is a free software that is available you could use any ssh terminal software you could simply use putty as well so create a new ssh session and specify the ip address which is 192.168.1.112 and the username is os boxes click on ok now we'll specify the password which is os boxes.org and i'm logged in so there are different ways to connect to a linux vm on virtualbox depending on how you set up your networking i used uh two different approaches while deploying the vms in windows and mac so i kind of had two demos there windows and mac you don't have to go through them it's kind of the same demo the only difference between the two is that on one i set up a bridge networking and on the other i didn't okay so the one on the left as you see here is the setting on mac and on the one on the right is the setting on windows on the windows deployment i added a bridge adapter and on the mac os um i didn't i just configured the default nat option for the networking adapter now if you had configured the bridge adapter as in windows the vm becomes part of the external network and it gets an ip address assigned to it you can simply ssh to it as you would ssh to another system in your network in case of nat as in the mac setup it doesn't connect to the external network and so does not get an ip address on the external network that we can use to ssh to so we will use port forwarding as we discussed in the previous lecture i also want to point out that this doesn't have anything to do with windows or mac both these network configurations can be configured on either os and it works the same i just chose two different options just to show you the difference between the two okay so let's proceed with the connectivity on mac once the system is powered on if the console looks too small you can go to the view menu and scale visibility to 300 percent there is a welcome screen and wizard within the console so just go through that and close them from the applications menu select terminal we'll now check the ip address of the system so we type in ip address show command to see the ip addresses as you can see it gets an ip address of 10.0.2.15. now this is a private internal ip assigned by the nat router for this vm so this ip is not reachable from anywhere else neither the host or nor any other vms created on this network so don't try to you know ping this ip or ssh this ip from the host you'll not be able to do that if you had multiple vms you will see that all vms configured with nat are isolated and they all get the same ip address assigned and they cannot reach each other however with network address translation they can reach the external world so you should have internet connectivity if your host has internet connectivity you can verify that by trying to ping an external website like this okay so that looks good so how do you remotely connect to this system like if you want to ssh into this vm to perform you know to carry out operations to run commands how do you do that so first verify that the ssh service is running for this run the service sshd status command we see the status is active now our goal is to ssh into this vm from a terminal on our host since it doesn't have an ip address that we can ssh to we will set up port forwarding go to the settings menu of this vm and under the network section select port forwarding add a new rule we will forward a port on our local host to a port on the vm the ssh service listens on port 22 on the vm but we also have an ssh service on our host that uses port 22. so we cannot uh forward 22 on our host to the vm so we will configure another port say port 2222 on the host to forward to port 22 on the vm so we add a rule for that and we name it ssh port now i could try to ssh to my local host ip or a loopback ip address which is 127.0.0.1 and specify port 2222 and if you'd like to log in as root user specify the username before the ip address and enter the password osboxes.org and you're in well we've now connected to our vm and we can now run any commands we'll inspect the release files under the etsy directory using the cad command to verify the version of os um and as we can see that it's centos 7 so we've connected to the right system okay so that's it for this demo in this lecture we will look at the various networking options available within virtualbox some of the common issues that our students face with respect to virtualbox is around networking a lot of our students struggle with understanding the different kinds of networks such as nat bridge and host only and what they mean and what type of network to be used when also how do multiple vms connect with each other and how to troubleshoot issues where you can't reach the internet and that's what we will discuss in this video so before getting into networking in virtualbox let us first revise some of the basic networking concepts now computer systems like our laptops or servers have different kinds of interfaces or adapters that are used for connectivity such as wired ethernet interfaces to connect to a lan network through a hub or a switch using a cable and wireless interfaces to connect to the network through wifi now irrespective of how they connect to a network once they do they get an ip address assigned either manually or dynamically if there is a dhcp server in the environment an ip address is assigned to an interface in this case we have a laptop that's connected using an ethernet cable to a switch in our home once the connection is established our laptop gets an ip address when you run the ip address show command you see the interface enp0s3 and it has the ip address 192.168.1.5 now say you have another adapter a wifi adapter and you attach that to the same network but this time through a wifi then that interface gets another ip address assigned to it and can be seen in the output of the same command the same laptop now has two separate ip addresses on the same network if any other host were to try to reach our laptop they may do so using any of these ip addresses so what i'm trying to say is every system every computer system has different interfaces and it can have multiple such interfaces and adapters to connect to different networks so it could be the same network which is which is as it is in this case but it could be to connect to different networks some interfaces have internet connectivity depending on what network they're connected to and the others do not once a virtual machine is provisioned in virtualbox if you go to the settings of that vm and in the network tab you will see different networking options to start with there are four adapters this means that you can configure your vm to have up to four network connections now how you configure those and what do you connect these adapters to is up to you by default only the first adapter is enabled and it is attached to nat as you can see there are multiple options available here nat bridge adapter host only adapter being some of them and we will see what these options are next so let's start with a simple example say we have a physical system like our laptop or a pc and it's connected to the network with the address 192.168.1.0 so you set an ip for your pc to 192.168.1.10 and we have virtualbox on it say for example a on virtualbox we have provisioned multiple virtual machines so there are four virtual machines provisioned now how do these vms talk to each other how do they reach systems outside of your pc now as of now these virtual machines are simply created they don't have any network or any ip address assigned to them so if you log into any of these vms through their console and try to ping one another it would fail and it wouldn't be you wouldn't even know what the ip address is to do a ping in the first place so we create a private network within our pc it's called as a host only network and has an address 192.168.5.0 so we attach the virtual interfaces of the vms to this network now i'll explain how we do that in a bit but let me first cover the concepts so once you attach the interfaces or the virtual interfaces of the vms to this network they all get an ip address in the 192.168.5 series in that range so one system gets 192 168 5.2 another one gets fighter 3 fighter 4 and 5.5 our pc is a part of the network so a virtual interface is created on our pc and connected to the same network and it gets an ip192 so all the vms and pc itself are now part of a virtual private host only network the reason it's called host only is because the connectivity is contained within this host all the vms can reach each other but they cannot reach the outside world nor can anyone outside this host reach these virtual machines they're all on a private internal host only network so how do you create this host only network and how do you attach vms to this to create this host only network on virtualbox on mac go to file and then host network manager you will have a similar option available for windows and linux as well so just find out where that is once you go into the host network manager inside the host network manager create a new network by clicking on the create button this creates an internal virtual network in our laptop and creates an interface by the name vboxnet0 and assigns our laptop the first ip address on this interface if you run the ifconfig command you see the two ip addresses assigned to my laptop the 192 168 1.10 on the ethernet adapter and 192.168.5.1 on the vbox net zero adapter so that's the network the first network created by virtualbox and you can create multiple such host only networks within virtualbox so now that we have created the network to attach a vm to this network go to the settings page of a vm and under network select the adapter and select attach to host only adapter and select the new network that we created so do that on each vm and since this host only network also has dhcp enabled the vms get an ip assigned automatically okay so that was one scenario let's look at another option so say we have another physical machine in the network so just building off of that previous example where we have on one side we have our host only network and the vms inside it but we also have another host that's attached to this particular network and it has an ip 192 168 1.11 the pc has some kind of service running on it such as let's say a database instance for example and our vms on the first pc would like to access this particular database now in the current setup with the host only network the vms are not going to be able to do that is because they are on a host only network and they cannot really reach outside of that host so for this we introduce a nat network so instead of creating a host only network we create a nat network the net network is similar to the host only network where as in we create a private network within the physical system and we attach all the vms to it and they all get an ip address but this time these vms can access the outside world the vms can now access the database using its ip address now for every packet that is sent from the vm to the database the nat engine which sits on the on our host is going to replace the source ip with its own ip address so that when the database receives a request it's going to think that it's all coming from the first pc it is unaware of the vms that are present on the first pc so it processes the request and sends back the data to the first pc the net engine on receiving the response intercepts the packet and changes the address back to the original vm's ip and forwards it back to the vm so that's what's called address translation and that's why network address translation when a request is sent the net the from address is actually translated to the host's address and then the request goes and then when the response is received the the to address is changed back to the original address of the vm that in fact sent the request so with this setup the vms within can access the outside world but remember the outside world is still unaware of the vms that exist within the system so no systems from the outside world can access the vms inside so how do you do that to create a nat network go to the virtualbox preferences page and select network and there you will find nat networks click the plus button and create a new nat network once created to attach a vm to this net network go to the vm settings and under network attach the adapter to nat network now note that it is different from nat so nat and net network are different and then select the name of the net network and that's all so what is nat and net network what is the difference between nat and network and nat nat is the default setting of a vm on virtualbox it works similar to nat network as in the vms can reach the external world and you know uses net and network address translation so that when requests go out they go out with the address of the host and when responses are received the address is replaced by the virtual net router within that vm however you don't have that internal network here so as such the vms are not able to reach each other so each vm is isolated they cannot talk to each other but they can talk to external systems through the host so each in this case each vm kind of gets its own nat router whereas in the earlier case there was a nat network and there was a single net router that that works for all vms in this case there's more isolation between the vms within the host so that was about nat now let's look at another scenario where an external host requires access to the internal vms so we've been talking about internal vms trying to access external services but now let's see what happens if we want uh external services or external vms to access internal vms services or services running on these internal vms so say for example there's a web application running on one of these vms and there are other systems that are on our network such as you know laptops and these laptops want to access the web server that's running inside one of these vms so let's look at another kind of network known as a bridge network the bridge network acts as an extension of the lan network so you don't really have to create a bridge network like how we created the host only network or the net network before the bridge network is always there so you just have to connect to it so once the vms connect to this network this time they get an ip address in the same ip range as that of the external lan network so they're assigned ips in the range 192 168 one dot series and it is as though they are all part of the same external network any device on the network can see them as just another virtual machine on the network so even though they're within the the the first host they're in fact it is as if they are all part of the same network because the host also gets an ip address um in the range 192 168 1.10 and the vms within the host also get an ap address in the same range 1.12 1.13 so it's as if they're all part of the same network but in fact these vms are inside this host so since they're all part of the same network through the bridge network these laptops can access any services that are that are run on these vms so that's about um bridge network okay so we've talked about the three kinds of network host only nat and bridge let's now talk about internet connectivity in each of these cases in case of a nat setup whether it's a nat network or just nat we learned that internal vms can reach external network through network address translation so vms configured with a nat interface can reach internet as long as the host vm has internet connectivity you don't really need amp to do anything else the bridged option as we know is an extension of the external network so it makes the vm as another host on the network so just like all hosts on a network the vm should be able to reach the internet um easily so there's nothing uh really required over there too however in case of a host only network the vms are on an internal private network all vms attached to that internal network can see each other but they can't connect to any systems outside of the host machine the host machine is connected to two networks the internal host only network where the vms are there and the external network that has internet connectivity and that has connectivity the rest of the network so now we can enable the host machine to forward traffic from the internal network to the external network now for this you must enable ip forwarding on the host vm so this is by default disabled on our laptops most laptops have that that functionality so enabling the ip forwarding feature essentially makes our laptop a router so a router that can route traffic one from one network to another now if you think about it you don't really have to do that if all you need is to establish internet connectivity for the vms there are other ways to do that such as by adding an additional adapter to these vms because as we learned earlier that there are each of these has four adapters so you can configure a second adapter and attach it to nat and that way through those adapters those vms will have internet connectivity so that's just another additional option yeah so this is here's what i was talking about so earlier we said that there of each vm can have four adapters so you can configure the second adapter to be attached to nat so now uh when you run into connectivity issues you know where to look at and you know that you should be looking at the number of interfaces that are configured on the vm look at what type of network they're attached to check if those interfaces have ip addresses assigned and you should be able to get a fair idea why you aren't able to reach the internet now before i let you go one more thing that's worth mentioning is about port forwarding so a lecture about virtualbox networking is incomplete without discussing about port forwarding so let's look at what that is let's look at a simple scenario where we have a single vm configured with nat the the default option port forwarding allows us to map a port on the host to a port on the guest for example port 80 on the host could be mapped to port 80 on the guest so that any traffic that comes in on port 80 on the host is forwarded to port 80 on the guest now maybe the guest is running a web server and it's since it's a nat setup as we discussed before external hosts can't reach the vm so configuring a port forward can help the web server receive requests from external hosts even though it's in a setup because the port forwarding forwards traffic from the port on the host to the port on the guest now it need not be the same port either you can map port 8080 to port 5000 on the vm earlier we discussed that to ssh into the vm we assign an ip address and then use that ip address to ssh from the host to the guest another way to do that is if you don't know the ip address of the vm and you can map port 22 of the guest which is the port used to establish ssh connection to another port say 2 2 2 2 on the host then you can simply ssh to the loopback ip address of the host and port 2222 and that will in fact forward those requests to port 22 on the vm and you should be able to ssh into that so this way you can have multiple vms and multiple different services running on them and you can map those services to ports on the host now this is done under the vm network settings and by going into the port forwarding options here you can see the different rules to map host port to guest port as well as specify the protocols that are used let us now look at deploying multiple vms on virtualbox and configuring networking between them we will also look at some cloning and snapshot functionalities one way to create multiple vms is to simply clone an existing vm so if you plan to create multiple vms then it's good to plan ahead so that you could first create a template vm and then just create multiple clones from it to create a clone for an existing vm rightclick the vm and select the clone option note that for this option to appear the vm must be powered off then give the new vm a name i'll name it vm2 and then select the type of clone so there are two types of clones a full clone and a linked clone a full clone creates a full copy of the disk used by the existing vm consuming equal amount of new space a linked clone uses the disk of the existing vm and only consume space for the changes made in the new vm the only concern is when you plan to move a vm from one system to another in case of the linked clone you'll have to copy the disk of the original vm as well or in case you decide to delete the original vm you run into issues as the linked clone has a dependency on it so if you don't plan to copy your vms then linked clone is a good option as it consumes less space on your on your laptop okay so i'll just select the linked clone and continue with it and create the vm so we now have two vms before turning them on let us make some changes so we want the two vms to be able to reach each other so they both must be part of the same network as per the current setting they are configured with nat and so they are isolated from each other we also want the vms to be able to reach the internet as we plan to install software on them so we will leave adapter one with nat that's for the internet and we will configure a second adapter to connect to a host network for that we must first create the host network so go to file and select host network manager a windows systems should also have this option once it's open create a new network i already have a network in this case and i'll add a new network it's named vboxnet1 and as you can see it has an ip address range 192.168.57.1 if you'd like the vms to get an ip address assigned to them automatically then check this box and then click close then go to the vms network settings and set the second adapter to connect to host only network and choose the newly created network do that for both vms also note that if your system is low on resources feel free to reduce the cpu and memory on these vms as necessary then power on the vms and wait for them to boot up once they are up log in using the osboxes.org user account i had created a user account named matthew on one system that's why you see that there you can also see that on the other system and that's because when we cloned it all the settings get cloned as well now once logged in open up the terminal and inspect the ip addresses here you can see the new interface that was created to connect to the new host only network it's named enp0s8 the ip address that got assigned automatically is 192.168.57.3 let us now check on the second system the second system gets ip192.168.57.4 and remember we said that our host is also part of the network so our host also gets an ip address of 192.168.57.1 on the network now they all can reach each other through these ip addresses we can now ssh to these vms using these ip addresses we don't really need that port forwarding rule we configured in the previous demo anymore so ssh and use the root password and i will use another terminal to ssh to the other vm we will also test internet connectivity since we have the first adapter configured for nat we have internet connectivity through that and we see that successful now just to test and show you the difference we'll change the first adapter to use the other host network we had instead of the nat configuration now when we check the ip address we see that it now has another ip on the first interface which earlier was configured with nat and if we try to reach internet now it is not possible so remember that depending on your requirements you must set up your networking configurations if you simply want the vm to have internet connectivity then set it to nat each vm is isolated if you'd like multiple vms to talk to each other and have internet connectivity choose nat network if you want multiple vms to reach each other but no internet connectivity choose host network in this case your host will also be part of the same network and can reach the vms without any port forwarding if you'd like the benefits of multiple networking options then you can have both of these on a single vm as we did in this demo so have one adapter configured to host network and the other adapter with nat now none of these options really make your vms visible to the external network so your vms are essentially hidden if you like all of these and also have your vms visible on the external network then choose the bridged option let's now look at the snapshot feature with the snapshot feature you can create a snapshot or backup of your vm's state at a particular point in time and then restore to that backup at a later point in time let's just pick the first vm for this demo say we have an application or a file created in a directory for example we create a directory slash opt app and under that we create a file named example.txt with the contents and example file so that's the current good state let us now take a snapshot so click on this option on the vm and under that select snapshots there should be a similar option for that on other platforms as well you know in windows and linux so try to find that out here you can see the current state click on the take button to create a snapshot we will name it the good state and provide a description you can now see a good state snapshot created here now we are going to simulate a failure we will echo some junk data to the file to simulate some kind of a corruption okay now that we have messed up our system and lost the original contents of the file how do we restore it go to the snapshots window and right click the snapshot named good state and select the restore option now the restore option is grayed out because the vm is still up so let's first shut it down now the restored option is available click on it to restore state to the snapshot once restored start the vm we again connect to it and if you go to the opt app path you see the example.txt file and if you look into its contents you see that it has the right contents great so this functionality is especially useful when you are testing different software and functionalities on vms for example before making a major change to your vm such as upgrading the version of software or packages you could take a snapshot of the working state to get back to in the future you can also clone a new vm from the snapshot say you made a lot of changes and something went wrong and you're not sure what that is and if you'd like to create a new vm from the previous snapshot that's possible too so right click the good snapshot and choose clone and then follow the same process we followed earlier to create a new vm from that clone let us now get introduced to the basics of vagrant in the previous videos and demos we looked at how to deploy a vm on virtualbox we followed this process of first downloading the image from the osboxes.org website and then we created a new vm we then configured networking such as you know creating host networks and then we went into the settings of each vm and configured the interfaces to use those correct networking settings and then we also configured port forwarding and finally you know booted up the vm we then repeated these tasks for every vm that we wish to create vagrant helps us automate all of these tasks and do all of these with a single vagrant up command that way you don't have to go searching for images of operating systems or download them or create networks or configure port forwarding manually vagrant does all of that automatically so vagrant is especially useful when you have complex systems involving multiple vms and if you plan to deploy and manage the entire setup together to get started visit vagrant.com and click on the download option and then download and install the appropriate version for your os once installed run the vagrant init command and specify the name of the box you'd like to deploy i'd like to deploy a centos 7 box so what is a box a box is a vagrant term and refers to a packaged format of a vagrant environment it contains an os image as well as scripts required to configure the environment you can find a list of all publicly available vagrant boxes at vagrant cloud by visiting app.vagrantup.com boxes search and find the box of your choice running the vagrant init command initializes the vagrant box in the current directory and creates a vagrant file the vagrant file has instructions on customizing your box we will look at that in a bit to start the vagrant box run the vagrant up command and when this is done vagrant downloads the image required to create the vm it then creates the vm gives it a random name and configures any settings such as port forwarding or anything like that and waits for it to be ready running the vagrant command without any options lists all available commands you can see the vagrant box command used to manage installation and removal of boxes we just saw the init and up command that initializes a box and brings up the vm you may use the suspend command to suspend a vm the resume command to resume a vm and the halt command to stop the vm the destroy command to stop and delete the vm and the status command to get the status of a vm if the vagrant file is changed use the reload command to reload the vm you can also take and restore snapshots using the vagrant snapshot command you could ssh into the vm by simply running the vagrant ssh command vagrant will identify the port configured for port forwarding and use that to ssh vagrant also sets up ssh key based authentication so it uses that as well let's take a look at the vagrant file a vagrant file starts with a configuration block within the vagrant configuration block the image used by the box is specified in this case it happens to be centos 7. this is all there is configured in the default vagrant file if you would like to customize this vm this is where you would do it and then you can share this file with others and the vm will boot up the same way in exactly the same way with the same configurations for everyone for example you could configure port forwarding here and say port 8080 on the host will be forwarded to port 80 on the guest or you could configure a directory to sync between the host and the vm that way you can easily move files from your host machine to the vm if you'd like to configure the cpu and memory settings on the vm then you could do that within the provider virtualbox block like this you can also configure a simple shell script to run at boot up using the shell provision block like this so when you run the vagrant up command now background provisions avm following the specifications given in this vagrant file and also runs the shell script given here you may also include multiple vms in this this approach can help you automate the deployment of complex environments on your laptops such as small clusters of popular systems there are boxes that have automated clusters such as kubernetes clusters which has multiple vms virtualbox is just one provider among the many supported by vagrant you can also use vagrant in a vmware environment such as vmware workstation or vmware fusion or in a microsoft hyperv environment as well so i'd highly recommend you to check out vagrant and get comfortable with it and this will help you easily create and deploy virtual machine or local lab environments as well as save all the work that you did you know your configurations in a vagrant file that way in the future you can just if you'd like to deploy the same kind of lab environment all you need to do is run a background up command and then you can share that vagrant file your custom file with others in the community and help others benefit from that as well let's take a quick demo of vagrant to download and install vagrant go to vagrant vagrantup.com then go to the downloads page and select the right version for your os i'm on mac so i'm going to select mac os and this works the same on all operating systems so you can follow the same instructions that i'm following in this demo once the executable is downloaded install it on your system once installed the command vagrant should be available on your system let us now open up a terminal and create a directory for vagrant where we will store all our vagrant configurations we then cd into that directory and we are now ready to deploy a vm using vagrant now remember you must have the virtual machine provider which in this case is virtualbox already installed on the system so i already have that it could also be vmware workstation or fusion as well so whatever it is that you plan to use remember it must exist on the system before you actually try to bring up a vm using vagrant now if it's anything other than virtualbox then when you run the vagrant up command you must also specify that provider using the provider option now we need to find vagrant boxes to deploy searching for vagrant boxes in google will land you on the vagrant cloud page and here you can search for various boxes for different operating systems and solutions i'll go with centos 7 select that in that centos 7 page we see a template for the vagrant file we could copy this and create a vagrant file by ourself manually or if we want vagrant to create that file for us go to the new tab and copy the command the command is a vagrant init and followed by the name centos 7 all this command does is create a vagrant file with the image set to centos 7. if you see the contents of the vagrant file we see that it is really just a template with all the options commented out any line that begins with a hash is commented out the only line set is the line with the box name running the vagrant up command now downloads the image and then creates a virtualbox vm with it if you open virtualbox you can see the vm being created it takes a while for it to boot up so give it some time and once it's booted up we see the machine booted and the ready message okay now when you run this vagrant up command and if you were using an environment other than virtual box then this is where you must also specify the provider using the provider option we can now ssh into the vm using the vagrant ssh command so even if you are on a windows environment you don't really need another ssh terminal tool or putty or anything this command just works it also takes care of authenticating you into the vm using ssh keys we are now in and we can test the version by viewing the etsy release files check the status of the vm using the vagrant status command we see it's in a running state to shut down run the vagrant halt command we now see the status is powered off let's now go into the vagrant file and make some changes if you go all the way to the bottom we see the vms resource settings like memory and configuration it's currently commented out if you look at the settings of the vm we see that it has 512 mb of ram and one vcpu local resources can increase boot time for the vm so we'll increase the resources for the vm from the vagrant file so let's uncomment the memory specification as well as the starting and ending of that block now we will leave the memory to 1gb to provide cpu configuration use the vb.cpu's property and we set it to two vcpus we can also rename the vm here not sure if you notice but the vm has a random name assigned to it and all of these settings can be found in the vagrant documentation page we save that file and every time you modify the vagrant file for the changes to take effect you must run the vagrant reload command we wait for it to boot up and we can see that the vm name is already updated to the name we specified go into settings and we see the memory and cpu are set correctly as well at times when you boot up vms using the vagrant up command you might see an error like this it's a timeout error what's happening here is that vagrant starts the vm and waits for it to boot up completely however the vm took more time to boot than vagrant expected this could be because the vm is configured with very few resources and it takes a long time for the vm to load the vm may end up booting properly eventually and then you should be able to access the vm as you would normally but in case you are not sure and you think it's stuck power off the vm using the vagrant halt command and then go to the vagrant file and you can increase the timeout by adding a property config.vm.boot.timeout like this reloading the vagrant file restarts the vm and the next time vagrant waits longer before throwing an error message well that's a quick introduction to vagrant and i hope it will help you set up labs quickly if you'd like to learn more about vagrant please let us know and we can probably create a separate course just for vagrant because there are so many things that you can do with vagrant you can configure multiple vms you can configure scripts as we saw in the lecture so it's a very neat tool to really set up a custom lab environment and then save that configuration so that you can share it with others in this video we get introduced to dns in linux for the absolute beginners we will discuss the basic concepts and view some commands that will help us explore dns configuration on hosts specifically linux hosts at the end of this section you will go through a practice test where you're given a set of challenges related to dns and are asked to solve them on a live practical handson lab environment right in your browser we have two computers a and b both part of the same network and they've been assigned with ip addresses 192 168 1.10 and 1.11 you're able to ping one computer from the other using the other computer's ip address you know that system b has database services on them so instead of having to remember the ip address of the system b you decide to give it a name db going forward you would like to ping system b using the name db instead of its ip address if you try to ping db now you would see that host a is unaware of a host named db so how do you fix that basically you want to tell system a that system b at ip address 192.168.1.11 has a name db you want to tell system a that when i say db i mean the ip 182 168 1.11 you can do that by adding an entry into the hc hosts file on system a mention the ip address and the name you want your host to see system b as we told system a that the ip at 192.168.1.11 is a host named db pings to db now gets sent to the correct ip and are successful now there is an important point to note here we told system a that the ip at 192.168.1.11 is a host named db host a takes that for granted whatever we put in the etsy host file is the source of truth for host a but that need not be the truth host a does not check to make sure if system b's actual name is db for instance running a host name command on system b reveals that it is named host 2 but host a doesn't care it goes by what's in the hosts file you can even full system a to believing that system b is google just add an entry into the host file with an ip mapping to www.google.com then ping google and you will get a response from system b so we have two names pointing to the same system one as db and another as google and we can use either names to reach system b you can have as many names as you want for as many servers as you want in the etsy hosts file every time we reference another host by its name from host a through a pin command or ssh command or through any of the applications or tools within this system it looks into its etsy hosts file to find out the ip address of that host translating hostname to ip address this way is known as name resolution within a small network of few systems you can easily get away with the entries in the sc hosts file on each system i specify which are the other systems in the environment and that's how it was done in the past until the environment grew and these files got filled with too many entries and managing these became too hard if one of the servers ip changed you would need to modify the entries in all of these hosts and that's where we decided to move all these entries into a single server who will manage it centrally we call that our dns server and then we point all hosts to look up that server if they need to resolve a host name to an ip address instead of its own etsy host files so how do we do that how do we point our host to a dns server our dns server has the ip1921 every host has a dns resolution configuration file at etsyresolve.conf you add an entry into it specifying the address of the dns server we say name server and point it to 182.168.1.100 and that should be it once this is configured on all of your host every time a host comes up across a hostname that it does not know about it looks lit up from the dns server if the ip of any of the host was to change simply update the dns server and all hosts should resolve the new ip address going forward you no longer need any entries in the etsy hosts file in any of the hosts but that does not mean you can't have entries in hosts file you still can for example say you were to provision a test server for your own needs you don't think others would need to resolve the server by its name so it need not be added to the dns server in that case you can add an entry into your host's hc host file to resolve this server you can now resolve the server however no other system will be able to do that so a system is able to use host name to ip mapping from the etsy host file locally as well as from a remote dns server what if you have an entry in both places one in your etsy hosts file and another in dns i have an entry in my local file set to 192.168.1.115 and someone added an entry for the same host to 192.168.1.116 on the dns server in that case the host first looks in the local hc host file and then looks at the name server so if it finds the entry in the local etsy hosts file it uses that if not it looks for that host in the dns server but that order can be changed the order is defined by an entry in the file at c ns switch.conf the line with the host's entry as you can see the order is first files and then followed by dns files refers to etsy host file and dns refers to the dns server so for every host name the host first looks into the etsy hosts file and if it cannot find it there it then looks at the dns server this order can be modified by editing this entry in the file as per this order our host would resolve the test server to 192.168.1.115 what if we try to ping a server that is not in either list for example i try and ping www.facebook.com i don't have facebook.com in my etsy host file and i don't have it in my dns server either so in that case it will fail you can add another entry into your resolve.conf file to point to a name server that knows facebook for example 8.8.8.8 is a common wellknown public name server available on the internet hosted by google that knows about all websites on the internet you can have multiple name servers like this configured on your host but then you will have to configure that on all your hosts in their network you already have a name server within your network configured on all the hosts so in that case you can configure the dns server itself to forward any unknown host names to the public name server on the internet you should now be able to ping external sites such as facebook.com until now we've been just trying to read systems with their names like web db nfs etc but we just tried to ping facebook at www.facebook.com what is this name with your www.com at the end it's called a domain name and it is how ips translate to names that we can remember on the public internet just like how we did for our hosts now the reason they are in this format separated by dots is to group like things together the last portion of the domain name the.coms.nets.edu.org etc are the toplevel domains they represent the intent of thewebsite.com for commercial or general purpose dot net4network.edu for educational organizations and dot org for nonprofit organizations let's look at one in particular in google's case the dot is the root that's where everything starts dot com is a top level domain google is the domain name assigned to google and www is a sub domain the sub domains help in further grouping things together under google for example google's map service is available at maps.google.com so maps is a subdomain google's storage service is available at drive.google.com mobile apps are available at apps.google.com google's email service are available at mail.google.com you can further divide each of these into as many subdomains based on your needs so you begin to see a tree structure forming when you try to reach any of these domain names say apps.google.com from within your organization your request first hits your organization's internal dns server it doesn't know who apps or google is so it forwards your request to the internet on the internet the ip address of the server serving apps.google.com may be resolved with the help of multiple dns servers a root dns server looks at your request and points you to a dns serverserving.coms a.com dns server looks at your request and forwards you to google and google's dns server provides you the ip of the server serving the app's applications in order to speed up all future results your organization's dns server may choose to cache this ip for a period of time typically few seconds up to few minutes that way it doesn't have to go through the whole process again each time so that was out in the public what about your organization your organization can have a similar structure too for example your organization could be called as mycompany.com and have multiple subdomains for each purpose the www for external facing website mail.mycompany.com for accessing your organization's mail drive for accessing storage paid or company.com for accessing the payroll application hr for accessing hr application etc all of these are configured in your organization's internal dns server the reason we discussed all of these is to understand another entry in the etsy resolve.com file remember this is the file where we configured the dns server to be used for our host with that we were able to resolve servers in your organization with just their names like web we have now introduced more standard domain names like web.mycompany.com or db.mycompany.com etc now when you ping web you can no longer get a response of course this is because we are trying to ping web but there is no record for by the name web on my dns server instead it is web.mycompany.com so you have to use web.mycompany.com now i can understand if someone outside our company wants to access our web server he would have to use web.mycompany.com but within our company your own company you want to simply address the web server by its first name web just like how you address other members in your family simply by their first names which is not the case when someone outside your family addresses them using their full names so what do you do to configure web to resolve my web.mycompany.com you want to say when i say web i mean web.mycompany.com for that you make an entry into your host's etsyresult.com file called search and specify the domain name you want to append next time you try to ping web you will see it actually tries web.mycompany.com now your host is intelligent enough to exclude the search domain if you specified a domain in your query like this you may also provide additional search domains like this so it would mean when i say web i mean web.mycompany.com or web.prod.mycompany.com so your host would try searching all of these domain names when you look for a hostname finally a word about record types so how are the records stored in the dns server we know that it stores ip to host names that's known as a records storing ipv6 to host names is known as quad a records mapping one name to another name is called cname records for example you may have multiple aliases for the same application like a food delivery service may also be reached at eat or hungry that's where a cname record is used name to name mapping there are many more but that's all we're going to look at for now now ping may not always be the right tool to test dns resolution there are a few other tools as well such as ns lookup you can use ns lookup to query a host name from a dns server but remember nslookup does not consider the entries in the local etsy hosts file so if you add an entry into the local sc host file for your web application and if you try to do an ns lookup for that web application it is not going to find it the entry for your web application has to be present in your dns server ns lookup only queries the dns server the same goes with dig dig is another useful tool to test dns name resolution it returns more details in a similar form as is stored on the server in the upcoming practice exercises section you will practice viewing configuring and troubleshooting dns in a lab environment on actual systems through some fun and challenging exercises in this series of lectures we get our networking basics right we look at basic networking concepts like switching routing gateways etc we then understand dns we look at how to configure dns settings on a linux system so let's get started so what is a network we have two computers a and b laptops desktops vms on the cloud wherever how does system a reach b we connect them to a switch and the switch creates a network containing the two systems to connect them to a switch we need an interface on each host physical or virtual depending on the host to see the interfaces for the host we use the iplink command in this case we look at the interface named e0 that we will be using to connect to the switch let's assume it's a network with the address 192.168.1.0 we then assign the systems with ip addresses on the same network for this we use the command ipaddr once the links are up and the ip addresses are assigned the computers can now communicate with each other through the switch the switch can only enable communication within a network which means it can receive packets from a host on the network and deliver it to other systems within the same network say we have another network containing systems cnd at address 192.168.2.0 the systems have ip address 192.168.2.10 and 2.11 respectively how does a system in one network reach a system in the other how does system be with the ip192.168.1.11 reach system c with the ip 2.10 on the other network that's where a router comes in a router helps connect two networks together it is an intelligent device so think of it as another server with many network ports since it connects to the two separate networks it gets two ips assigned one on each network in the first network we assign it an ip address 182 182.168.1.1 and in the second we assign it an ip 2.1 now we have a router connected to the two networks that can enable communication between them when system b tries to send a packet to system c how does it know where the router is on the network to send the packet through the router is just another device on the network there could be many other such devices that's where we configure the systems with a gateway or a route if the network was a room the gateway is a door to the outside world to the other networks or to the internet the systems need to know where that door is to go through that to see the existing routing configuration on a system run the route command it displays the kernel's routing table and within that as you can see there are no routing configurations as of now so in this condition your system b will not be able to reach system c it can only reach other systems within the same network in the range 192.168.1.0 to configure a gateway on system b to reach the systems on network 2.0 run the ip route add command and specify that you can reach the 192.168.2.0 network through the door or gateway at 192.168.1.1 running the route command again shows that we have a route added to reach the 182 168 2.0 series network through the router now remember this has to be configured on all the systems for example if the system c is to send a packet to system b then you need to add a route on system c's routing table to access the network at 1.0 through the router configured with the ip address 2.1 now suppose these systems need access to the internet say they need access to google at 172.217.194.0 network on the internet so you connect the router to the internet and then add a new route in your routing table to route all traffic to the network 172.217.194 through your router there are so many different sites on different networks on the internet instead of adding a routing table entry for the same router's ip address for each of those networks you can simply say for any network that you don't know a route 2 use this router as the default gateway this way any request to any network outside of your existing network goes to this particular router so in a simple setup like this all you need is a single routing table entry with the default gateway set to the router's ip address remember instead of the word default you could also say 0.000 it means any ip destination both of these lines mean the same thing a 0.000 entry in the gateway field indicates that you don't need a gateway for example in this case for system c to access any devices in the 2.0 192.168.2.0 it doesn't need a gateway because it is in its own network but say you have multiple routers in your network one for the internet another for the internal private network then you will need to have two separate entries for each network one entry for the internal private network and another entry with the default gateway for all other networks including public networks so if you're having issues reaching internet from your systems this routing table and the default gateway configuration is a good place to start let us now look at how we can set up a linux host as a router let's start with a simple setup i have three hosts a b and c a and b are connected to a network 192.168.1 and bnc to another on 192.168.2 so host b is connected to both the networks using two interfaces each zero and et1 a has ip1821681.5 c has 182 168 2.5 and b has an ip on both the networks 1.6 and 2.6 how do we get a to talk to c so basically if i try to ping 2.5 from a it would say network is unreachable and by now we know why that is host a has no idea how to reach a network at 192.168.2 we need to tell host a that the door or gateway to network 2 is through host b and we do that by adding a routing table entry we add a route to access network 192.168.2 while the gateway 192.168.1.6 if the packets were to get through to host c host c will have to send back responses to host a when host c tries to reach host a at 192.168.1 network it would face the same issue so we need to let host c know that it can reach host a through host b which is acting as a router so we add a similar entry into host's routing table this time we say to reach network 192.168.1.0 talk to host b at 192.168.2.6 when we try to ping now we no longer get the network unreachable error message that means our routing entries are right but we still don't get any response back by default in linux packets are not forwarded from one interface to the next for example packets received on each zero on host b are not forwarded to elsewhere through each one this is this way for security reasons for example if you had e0 connected to your private network and it's one to a public network we don't want anyone from the public network to easily send messages to the private network unless you explicitly allow that but in this case since we know that both are private networks and it is safe to enable communication between them we can allow host b to forward packets from one network to the other whether a host can forward packets between interfaces is governed by a setting in this system at file proc says net ipv4 ip underscore forward by default the value in this file is set to 0 meaning no forward set this to 1 and you should see the pings go through now remember simply setting this value does not persist the changes across reboots for that you must modify the same value in the etsy syscontrol.conf file so let's take away some key commands from this lecture this will be handy in the upcoming lectures iplink is to list and modify interfaces on the host ipaddr command is to see the ip addresses assigned to those interfaces ipaddr add command is used to set ip addresses on the interfaces now remember changes made using these commands are only valid till i restart if you want to persist these changes you must set them in the etsy network interfaces file ip route or simply the route command is used to view the routing table and ip route add command is used to add entries into the routing table and finally remember the command to check if ip forwarding is enabled on a host if you are working with a host configured as a router in this lecture we will talk about ip addresses and ports from a web applications perspective so one of the common issues that we've seen students especially beginners struggle with while working with web applications are related to connectivity so what ip addresses do we use and what are port numbers and what port numbers to use what is the difference between localhost 127.0.0.1 and the ip addresses of the server or why does it matter and why can't i access the web server from another system if there's a web server and database server then why is one not able to reach the other so things like these are are some of the common questions that we get all the time so now through this lecture i'd like to clarify all of this and going forward whenever you run into any similar issues you should be able to follow these steps and troubleshoot and fix issues easily so let's take a step back and understand a little bit about the basics of networks and ips so computer systems like our laptops or servers have different kinds of interfaces or adapters for connectivity such as wired ethernet interfaces to connect to a lan network through a hub or a switch using a cable and the wireless interfaces to connect to the network through wifi so irrespective of how they connect to a network once they do they get an ip address assigned an ip address is assigned to an interface in this case we have a laptop that's connected using an ethernet cable 2s switch in our home once the connection is established our laptop gets an ip address assigned to it on the network when you run the ip address show command you see the interface enp0s3 has the ip address 10.0.2.15. now say you have another adapter a wifi adapter and you attach that to the same network but this time through a wifi then that interface gets another ip address assigned to it and can be seen in the output of the same command the same laptop now has two separate ip addresses on the same network so if any other host in the network were to try to reach our laptop they may do so using the any of these ip addresses each of these network interface cards are divided into multiple logical components known as ports now you can have up to 65 535 ports on each ip address each port is a communication endpoint programs can listen on these ports for requests so when you run a web server it listens for requests on these interfaces on one of these ports for instance a python flask web server listens on port 5000 by default now you can change that by specifying the port number as a parameter inside the run call like this we have now configured the application to listen on port 8000 but on what ip address and we have two ip addresses configured on our host the port on which of these interfaces or ip addresses is the application going to listen on you can also specify the ip address on which the server should listen on using the host option like this the application now listens on ip 10.0.2.15 on port 8000 so anyone trying to access my application on this ip address and port will be able to view my server however they won't be able to access the server on the other interface on ip 10.0.2.16. so what if i want my application to be available through both these ips then instead of specifying the ip address of a single interface you must specify 0.0.0.0 in that case the server will listen on all available interfaces we now have our application available on all interfaces and anyone can access it what if we are not ready yet to make it available to the external world for example we are only developing our application and don't want anyone else to access it except for maybe ourselves from within our laptop in that case remove the host specification in the application run call but when we do that it does not listen on any interface so then how do we test it by ourselves if it's not available on any interface what i p do we use in a browser to access our application when no option is specified the server listens on ip127.0.0.1 by default this is known as the loopback address apart from the two interfaces we talked about earlier every host has a builtin virtual interface known as the loopback address the information about this interface is also visible under the output of the ip address show command its name is hello and the ip assigned is 127.0.0.1 every host has this loopback interface built into it and all of them have the same ip address set on it 127.000 when you refer to the ip127.0.0.1 it is like referring to yourself it's like saying i me or myself anything you send to ip127.0 is sent to the same host nothing sent to this address leaves the host system so from within your host if you wish to test your application you can simply open up a browser and type in 127.0.0.1 followed by the port at which the server is listening to access the web server now instead of typing in the ip address you can also say localhost because localhost is the standard network name associated with the loopback ip address and that also means that you cannot access this web server from any other host other than this host the 127. ip address is an ip address used to refer to this host from only within this host every other host has their own internal loopback interface with the same ip address of 127.0.0.1 and if you try to access the web server using this loopback ip address from the second host you won't be able to connect to the first host it look for a web server on its own host which does not exist so the request fails so remember that this particular ip address or the host name localhost refer to the local host itself and it can only be reached from within that host well that's it for now head over to the labs and practice working with ip addresses and ports and i will see you in the next lab hello and welcome to this lecture in this lecture we take a look at what yaml files are if you are familiar with yaml already feel free to skip this section and head over to the next section if you have not worked with yaml in the past i would highly recommend going through this because the rest of the course depends entirely on yaml if you have worked with other data structure formats like xml or json you should be able to easily pick it up don't worry if you haven't worked on any of these you should still be able to easily pick it up going through the coding exercises that accompany this course a yaml file is used to represent data in this case configuration data here is a quick comparison of a sample data in three different formats the one on the left is xml where we display a list of servers and their information the same data is represented in json format in the middle and finally in yaml format to the right take a minute to compare the three formats let's take a close look at yaml if you take the data in its simplest form such as key value pair this is how you would define it in yaml key and value separated by a colon the keys are fruit vegetable liquid and meat and the values are apple carrot water and chicken remember you must have a space followed by a colon differentiating the key and the value let's take a look at how an array is represented we would like to list some fruits and vegetables we would say fruits followed by a colon on the next line enter each item with a dash in the front the dash indicates that it's an element of an array how about a dictionary a dictionary is a set of properties grouped together under an item here we try to represent nutrition information of two fruits the calories fat and carbs are different for each fruit notice the blank space before each item you must have equal number of blank spaces before the properties of a single item so they are all aligned together let's take a closer look at spaces in yaml here we have a dictionary representing the nutrition information of banana the total amount of calories fat and carbs are shown notice the number of spaces before each property that indicates these key value pairs fall within banana but what if we had extra spaces for fat and carbs then they will fall under calories and thus become properties of calories which doesn't make any sense this will result in a syntax error which will tell you that mapping values are not allowed here because calories already have a value set which is 105 you can either set a direct value or a hash map you cannot have both so the number of spaces before each property is key in yaml you must ensure they are in the right form to represent your data correctly let's take it to another level you can have lists containing dictionaries containing less in this case i have a list of fruits and the elements of the list are banana and grape but each of these elements are further dictionaries containing nutrition information a lot of students new to yaml have reached out to me asking when to use a dictionary or a list so let me explain this a little bit better first of all it is important to understand that all of what we discussed so far such as xml json or yaml are used to represent data it could be data about an organization and all of its employees and their personal details or it could be data about a school and all of its students and their grades or it could be data about an automobile manufacturing company and all of its cars and its details it could be anything let's take an example of a car a car is a single object and it has properties such as color model transition and price to store different information or properties of a single object we use a dictionary in this simple dictionary i have properties of the card defined in a key value format this need not be as simple as this for example in case we need to split the model further into model name and make ear you could then represent this as a dictionary within another dictionary in this case the single value of model is now replaced by a small dictionary with two properties name and ear so this is a dictionary within another dictionary let's say we would like to store the name of six cars the names are formed by the color and the model of the car to store this we would use a list or an array as it is multiple items of the same type of object since we are only storing the names we have a symbol list of strings what if we would like to store all information about each car everything that we listed before such as the color model transition and price we will then modify the array from a list of strings to a list of dictionaries so we expand each item in the array and replace the name with the dictionary we built earlier this way we are able to represent all information about multiple cars in a single yaml file using a list of dictionaries so that's the difference between dictionary list and list of dictionaries i hope you understood the difference between the three and when to use each of these before we head over to exercises let's take a look at some key notes dictionary is an unordered collection whereas lists are ordered collection so what does that mean the two dictionaries that you see here have the same properties for banana however you can see that the order of properties fat and carbs do not match in the first dictionary fat is defined before carbs and in the second dictionary carbs comes first followed by fat but that doesn't really matter the properties can be defined in any order but the two dictionaries will still be the same as long as the values of each property match this is not the same for lists or arrays arrays are ordered collection so the order of items matter the two lists shown are not the same because apple and banana are at different positions this is something to keep in mind while working with data structures also remember any line beginning with a hash is automatically ignored and considered as a comment we are now ready to head over to the coding exercises and have fun playing with yaml files well you have reached the end of the devops prerequisites course congratulations you now have enough knowledge to get started with any of the devops and cloud courses out there you'll now be comfortable working with linux systems basic applications basic networking yaml and other configuration files so what's the next step you have now completed the devops prerequisites course in the get your basics rights section the other course available in this section is the linux basics course linux plays a key role in the devops and cloud world so it's always helpful to get real good handson experience working with linux systems our linux basics course is a good start and it's an engaging and fun course developed in a story format and with lots of handson labs as you did in this course to start your journey with containers and the cloud native world get started with the docker for the absolute beginners course it's a course that will help you get a good understanding of the importance of containers and the role of docker in the cloud native computing world this course will pave way to the kubernetes for beginners course knowledge about container native technology like docker is a prerequisite for learning kubernetes kubernetes is one of the most trending technology in it industry as of today and it's a very indemand skill once you complete the beginner's course you can target the kubernetes certifications like cka and ckad our courses have labs and multiple mock exams that will help you clear certification easily kubernetes is a prerequisite for red hat open shift after completing the ckad course where you'll learn how to configure and deploy applications on kubernetes you can then proceed to the red hat open shift course in the automation category start with the most popular automation tool ansible our ansible for the absolute beginners course is targeted for those who have zero experience in automation or scripting with this course you will be able to implement automation solutions without any experience in coding no coding or programming experience required in fact none of these courses require any kind of coding or programming experience whatever you have learned in this devops prerequisites course is sufficient to go through any of these courses you may choose to learn other systems like puppet and chef as well the ansible for the absolute beginners course will also help you prepare for the ansible certification exam and we plan to have a lot more courses added to this path in the future so check out this page whenever you get time we also have the code cloud engineer program that will help you get more handson experience this is a simulated job environment that you can enroll for free and start while getting tasks assigned to you for more details check out engineer.codcloud.com well that's it for now thank you so much for joining me in this course and i hope to see you in our next courses