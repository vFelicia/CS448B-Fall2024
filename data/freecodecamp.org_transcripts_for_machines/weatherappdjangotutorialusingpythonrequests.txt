hey everyone it's anthony from pretty brittany here in today's video i'm going to make what you see on the screen here come alive so basically this app is going to allow you to see the current weather in various cities that you add to the database using this little form up here so i'll be creating this app in django and this is the template that i'm going to be modifying to be dynamic through jenga so before i get started i just want to let you know that i have a free course on my website django database essentials where you can learn how to use various parts of the model system in django you can check that out after you watch this video on my website at prettyprinter.com and if you don't remember that address you can click on the link in the description below so i'll have all the code for this video in the description below as well including this starting file and one other thing you should know is we're going to use the open weather map api so you'll have to sign up for that if you want to work along with me so i have an environment set up already and i have django installed so what i'll do is i'll start a project so django let's see where's my oh django admin start project and i'll call this the weather not the most creative name but that's what i have so i'll change into that directory and then i'll start by creating an app as well so python manage.pi start app and i'll call the app weather because whoops that's not what i want it so start app weather and i'll just delete the directory where i messed up okay so the app is going to be called weather because this app's only going to do one thing which is get the weather so the first thing i'll do is i will open up the files so i'll drag this into vs code and what i'll do here is i will add the app to the project so settings and i'll go over to install apps and add weather just like that and i'll be keeping all of the other settings as the default and then what i'll do is i'll create a super user well i need to migrate first so python manage.pi migrate and then python manage.pi create super user anthony will be the username prettyprinted.com it's the email i'll enter a password okay so i have my super user so what i'll do is i'll start up the app just to make sure everything is working correctly so i'll run the server go to the page and go to the admin dashboard and make sure i can log in so username anthony and then password is going to be password11 with a capital p login okay so everything there is fine so the next thing i want to do is i want to get that template into the project so what i'm going to do is i'm going to cut this and then paste it inside of the app i need to create a directory called templates and then inside of that directory i'll call create a directory called weather which matches the name of the app and here i'll paste the weather template in there so now i'll be able to look at it here and we see that's exactly what i want so the next thing i want to do is i want to actually view this page when i go to the index so for right now when i go to the index i get the congratulations page telling me that django has been or the project has installed correctly so what i'll do is i will first update the urls here i'll add another path for the index so i won't put anything in there because i don't want an additional endpoint and then i'll use include which i have to import from django.urls so include and then i'm going to include weather.urls which is a file that i'm going to create in just a second here so actually i'll use this as a base and then inside of my weather app i'll create urls.pi and then i'll paste that there and remove the things that aren't necessary okay so now i'm going to import all my views so from period import views and i'm going to create a view called index in a moment it doesn't actually exist yet but it will in just a second so views.index now i'll go to that views file and create that index view so it takes in request of course and then i'm going to return that template so i need to pass requests to render and i also need to pass the name of the template so in this case the name is weather slash weather.html so that should be enough so if i go back here and is my app running it failed because i saved before i created that urls file so let's try that again and now i can see the template being rendered through my app instead of just as a plain html file so now what i want to do is i want to make this kind of come alive so to do that i'm going to call the api and let me drag in the url for this so looking at the documentation here is an example of the call so basically it's their url data slash the version then i'm looking for the weather and then the query takes in the name of a city so this example has london or you can pass in the country as well so london comma uk and also i want to use fahrenheit as the units but you can use kelvin which is the default or you can use celsius if you choose to do so but i'll be using fahrenheit for this tutorial so here inside of the index i'll just put a url here as url so this is just the api url so once you sign up for open weather open weather map you'll get an api key so you just pass that app id into your url and you'll be able to access their api if you don't pass on the api key then you won't be able to access it here you see i have units as imperial meaning i will get fahrenheit as the temperature and then the queue here is actually a placeholder because that is the city that i'm going to query for so i'm going to just set the city variable equal to las vegas for now that's where i live and later i'll make it pull from the database but just to test things out i'll set the city to be equal to las vegas and now what i need to do is i need to install requests so i can actually send a request to this url so i'm going to run pip in install and then request that should only take a moment and here i'll import it so import requests and while that runs i'll just type in requests get url formats pass in the city and then i'll assign this to be r r short for response and what i'll do is i'll print out r dot text meaning the output of that response so if i run my server again and if i go to my index again it should run but i get an error tells me that the request does not have an attribute called gets and that's because i didn't use the s on the end that should be request not request so let me run that again and it works so if i go to my console i see the data here that i'm looking for so i just printed it out that's why we can see it here so the next thing i want to do is i want to pass this data to the template well i want to pass the relevant data because a lot of this data i won't be using but there is some data that is pretty important so basically looking at this i need the name of the city i need the temperature in fahrenheit i need a description of the weather and i need the icon so the icon the temperature and the description come from the api and then the city of course comes from my app so i will create a dictionary that represents all of that information i'll call this city weather it's going to be a dictionary and for my request i'm going to call jason on this so it converts the result of the request into a json object or i should say it will interpret the responses a json object and convert it into a combination of python dictionaries and python lists so json objects can be easily represented by dictionaries and lists in python so that's what dot json is doing so there are four things that i said i want i want the city i want the temperature i want the description of the weather there and finally i want the icon so the icon is actually something that's hosted on their site so as long as you supply the right icon code then you will get the correct icon so these shouldn't be strings i'll remove that and since i have this r here that is what i want i'll take away that print statement so r is now a python dictionary and the city is actually coming from the city variable the temperature is going to come from r and then it's going to be main i believe so let me look here i'm looking for main yeah and then inside of main i'm looking for temp so main and then temp and then for the description this is a list i believe so weather and then it's going to be a list with one item in it so if i go to weather where is weather here we go so list with one item we see here the description in clear sky so whether first item in the list and then description and that will give me the description of the current weather and then i want the icon which is going to be pretty much the same thing except for instead of description i'm going to have the word icon so now let me just print this out to make sure everything looks okay and refresh the page and my app doesn't want to restart correctly so let me try that again and run this and we see the description has updated to broken clouds the temperature is 88.38 the city is las vegas and the icon is 0 4 d so now let's pass all of that information over to the template so i'll remove the print statement i'll create a contacts variable and i'll just call this city weather and then i'll pass in the actual dictionary there and then i'll pass context to the template open up the template and then i need to replace the things that need to be updated so in this particular case this is going to be see a city weather dot city so this is just using everything i created in that dictionary say the weather so city weather dot temperature city underscore weather dots description and then finally the icon here i have the url so basically you modify this part in the url to use the icon code so city weather dot icon there we go so now if i refresh the page this should be a little different because it is not 29 degrees there are no thunderstorms right now and it's not raining so if i refresh this we see now we have the picture of the sun which means clear sky usually we get the actual temperature 89.56 and then we have clear sky as the description and of course the city is the same because i'm using a different city if i change this all i need to change is one thing so instead of las vegas is this as a city if i said london and then i ran it it should give me the weather for london so i get london is the word here it's 47.39 degrees fahrenheit in london it's hazy and then it has this picture of what i assume to be haze i've never seen that kind of picture before for weather but then again we've never had haze in las vegas as a description as far as i can remember so you can see that just by changing the name of the city everything else works because you know you're calling the api with that new city and then it's just simply supplying that return data in this dictionary and passing it to the template so this is nice but this only works for one city at a time if i want to display multiple cities then i need a way to one represent multiple cities and two kind of loop over all those cities and perform a request for each one to get the weather for each city so to do that i'm going to create a table in the database and that table is going to be very simple so let's go to models and we'll call this city and the whole point of this table is to allow me to store a bunch of city names in the table so it's going to have a single useful column so name and then it's going to be a char field and we'll give the max length as 25 and then i'll define a stir method on it and we'll just return self.name and then finally i need to define a meta class and this is just so the plural of city will be cities with i e s instead of s so it's just a little visual thing when you're using the admin dashboard so that's just verbose underscore name underscore plural just like that and then i want this to be cities because by default it's cities like that but i want it to be correct so i'll make the cities like that so now what i need to do is i need to make migrations and then i'm going to migrate okay and now what i want to do is i want to add this to the admin dashboard so admins dot site register and then the name of the model which i'll import from models just like that and i'm going to run the server so i can look at the admin dashboard so python manage pi run server and then i'll go to the admin dashboard and i see cities here so what i'll do now is i'll add a few cities los angeles tokyo and one more let's say melbourne if i can spell it correctly there we go okay so three cities and now what i want to do is i want to actually query for those cities so if i go back to the home page what i expect to see is the weather for each of those three cities that i have so to do that i need to first query the database for all the cities that i have so inside of views here what i'll do is i'll just add the query here so cities is going to be equal to city objects all and of course i need to import city from models so from models import city and with the cities now what i'm going to do is i'm going to loop over it and do something for each city so for four city in cities i'm going to do something and that's something is actually the same thing that i'm doing here so i'll just indent everything so it goes inside of the loop and what i want to do is i want to get the weather for each city and append it to a list so i'll call this list weather data and here at the bottom i'm going to append this city weather dictionary that i create for each city just like that so what it's doing is it's going to loop over all the cities that i have in the database and for each one it's going to query the api the data that gets returned is going to be put into this dictionary called city weather and that city weather dictionary is going to be appended to my weather data list and then it starts over and it kind of starts from scratch with the next city and it's going to append that city to the list so if i have three cities in the database then this list that i have will end up being a list of three elements so once i have that uh let me try printing this out so print weather data so this won't work correctly the first time but you see it's just one city melbourne but if i look at the prints i see three things inside of the list and i see a minor problem here it says the city is actually an object instead of the name of the city so that's an easy change if i go here instead of city is going to be city dot name because i don't want to pass the object i want to pass the name inside of the object that represents each city just a minor difference there the object is something that you work with in python the name is something that you're actually displaying to the user so now instead of passing city weather i'm going to pass weather data to the template and then i'll go into my template again and when i'm looping over something like this i want to find out where the html repeats because i want to have that html be inside of my loop so in this case it's the box that i need to create multiple times so each city gets its own box so for city in weather data and you know just for consistency purposes so i don't have to change anything here i use the same variable so for city weather in weather data and then i need to find the end of this box which is right here in four and now if i run this it should work correctly so now we see i have the three cities that i'm interested in i can't verify the weather in any of those cities because i'm not there but you see that is different for each one so in la it's 75 degrees tokyo 65 degrees in melbourne it is 70. and you see they all have clear skies which is nice it's good that there's nice weather all around the world right now so the last major thing that i want to do is i want to allow the user to actually type in a city here and add it that way i don't have to go into the admin dashboard and add the cities myself so what i'm going to do is i'm going to go into my app and create a new file called forms dot pi and inside of forms i'm going to say from django.forms import i want to import model form because my form is basically the same as the model so i'm only concerned with the name of the city so i don't need to create a custom form i can just create a form based off that model and then i know i need to import text input because i need to do something with it and then i'm going to say from models import city and i'll go ahead and create the form so class is going to be city form it's going to be a model form and then i need to define the meta class so i can assign the model to be city and then the fields that i'm interested in are only name so just one field and then i'll use text input in a second when i show you what goes wrong so now what i want to do is i'll go back to views and now i have to start thinking of the two cases that i'll have when i'm doing this i'm going to have a case where they are just viewing the page and i'm going to have a case where they are saving a new city to the database so they're actually hitting the submit button so in the case where they hit the submit button what i want to do is i want to save whatever they enter into the database and then return the same screen with basically the same information so to do that all i need to do is think about you know where to place this logically so really the main case that i'm concerned with is when it's a post request everything else is going to be the same after i save the data so method or request.method post and then i'm going to do something here and i can take away this city by the way because i'm no longer using that directly so i'll input or import from forms import city form and what i want to do is i'm going to instantiate this form so form equals city form and i'm putting this under the if request.method equals post because i want this form to be blank even after they submit it so if i set this to be in its own block where you know it's a git request then anytime they submit a city it will leave that city in the form when the page reloads and that's not something i want i want the form to kind of restart every time they submit so that's why i'm doing that here it may be a little confusing when i explain it but if you actually tried it in the code you'll discover what i mean by this you'll see that it doesn't reset the city so this is what it looks like when i pass the form so a form is form and then in the template i'll find the form that i have so basically it's just one single input and this a should be a button so let me update that and it's going to be type submit so type submit just like that and then i'm going to pass in the input from django forms so form dot name so let's take a look at that and i get the input under my original one but it doesn't look like my original one because it's missing the class input and the placeholder as well so that's why i use the text widget here so i'll define widgets here and by doing this i'll get access to the widget for the name so it's going to be a text input and really all i want to do is add a couple of attributes so one is the class so the class is input and then one is the placeholder the placeholder is going to be let me copy uh city name just like that so i'll paste that there and then i'll refresh take a look at it and we see it now matches the style of the original input so i'll remove the original input because i won't be using that one so let me just take that one away and now i should be able to submit my form and it tells me that crs csrf verification failed so what i need to do is i need to add the crs c r s f token just like that and then when i try this again and i'm missing something really obvious let me think about it for just a second should have the token there oh i misspelled it it's hard pronouncing acronyms like that okay so yeah it's csrf not crsf minor mistake okay so we see uh the weather is changing a little bit in these cities i'm guessing clouds are just moving over the cities that's why you see now there's broken clouds and over class scouts in those cities and if i submit the form nothing happens but if i want to see that data let's see views i'm going to print requests.post so now i'll just type in some gibberish hit add city and now i see that gibberish here that i typed in so now the last thing i want to do to get that working is i can use the functionality that model form gives me so first i need to instantiate the form using the request data so city form and then request requests.posts and then form.save will both validate it and save it to the database at the same time so form.save so now this should be it so if i add another city in here i'll use my original city las vegas then what i expect to happen is after i click this button the page will refresh and i will see four cities in here with las vegas being one of the four so add city and that's exactly what i see i see las vegas has been added to the end of the list if i add one more city toronto we see toronto is now there so that's all i wanted to do in this app of course there's so much more you can do you can make it to where you can delete cities if you want you can add in more weather information or anything that you can think of for this app there are so many different ways that you can modify it and like i said i'll include the code for this in the description below as well so you can try it out yourself