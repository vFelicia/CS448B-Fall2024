hi everybody and welcome to the first tutorial in a series that will guide you through building your own 8ball pool game using javascript and html5 so before we begin i would like to take some time to give a credit to a book that i read that inspired me of making this game this book is called building javascript games for phones tablets and desktop and it is written by aryan aegis i'm sorry if i'm pronouncing the name wrong anyway it is a really great book and many of the topics that i'm going to talk about during these tutorials are taken from here and if you would like to get a deeper understanding and knowledge about those topics i really recommend you to read this book you can have a look at my code by getting to my github page and find this repository that contains all the code for this project you can even go down here and you'll find a working demo that you can enter and play and experience the game all by yourselves all right so let's move on so the first thing we will do is to create a new folder for this project and maybe we should give it a significant name something like classic full game now i will open my preferred text editor which is in my case visual studio code and drag the newly created folder into it let's now create a new file and the first file i'm about to create is the html file let's give it a name index.html now there are many neat ways to create the structure of an html document with visual studio code you can just write html and choose this option and you'll see that the structure is already built for you but i'm going to delete all that since i promised to show you how to build the game from scratch so i'm gonna write everything myself let's start with the html tag and inside of that i will create a head tag and a title and let's give it the same title as the folder name classic pool game um let's create a body tag and here we will create the canvas element which will have an id of screen and uh with that will change in the future since the canvas is going to be adaptable to the screen size but as of right now i'm going to keep it 2000 height will be 800 for now and that's it the html document is pretty much complete for this game after we've created the canvas element on our html file let's now create a javascript object that will let us interact with this canvas in order to do so we will need to create a javascript file let's call this file canvas dot js in this file i'm going to define a function constructor and let's call this function constructor canvas um to d the object that eventually will be created using this function constructor will have two data members the first one will be this dot canvas which will be the canvas itself and i'm going to fetch that from the html using document dot get element by id and here i'm going to send the id that i gave to the canvas before screen as you can see it is the same id as the canvas on the html file so the second member is the canvas context and the canvas context is an object that has certain functionalities that will make our lives much easier interacting with the canvas so in order to get the canvas context we'll need to approach the canvas element and ask for the context get context here i'm going to send 2d since the game is going to be twodimensional let's think about the functionality we would like a canvas 2d object to have as of right now i can think of two things i would like to clear the canvas using this object and i would like to draw an image on the canvas using this object in order to define this behavior we will need to use methods i will define the methods on the prototype of canvas 2d let's do it right now so canvas 2d dot prototype dot clear equals a function and here i'm going to use uh the clear rect function of the canvas context let's write canvas context dot clear rect and it will need to get a an x value and a y value a width and height so the x will be zero since i want to clear all of the canvas and the y is zero and the width will be the kind of width dot width and the height is going to be the canvas height canvas dot height all right so let's move on to the draw image method i'm going to define it here canvas 2d dot prototype drill image and that will be equals function that will get an image and a position and it will use the canvas context to draw that image on the given position so i will need to approach the canvas context and ask it nicely to draw the image for us um i will send the image that i got and position dot x and position dot y so the next step is to see that everything that we've done so far is actually working as expected in order to do so i will go to the index.html file and add a reference to the script that we just wrote so script src and that will be equals canvas.js and that's it the second thing that we'll need is an image to check the draw image method and i already dragged the assets folder into the new folder that we've created for this project in order to find the assets folder you can go to my github page i will leave a link down in the description below and you can download the assets all right now that we are ready let's create a new object using the function constructor that we built before so let's call this object canvas and it will be equals a new canvas to the object now in order to test the draw image method i'm going to create a new image so let's call it image and just to make it clear i will comment here that it is just for testing okay so here the image will be equals a new image and here i will need to define the source for this image the path of the image image.src and that will be equals and i know the path but if you want if you want to make sure you can just open the assets folder and see where this image is so um i will write it down it's dot slash assets slash sprites slash spr background dot png all right there is an issue that we need to consider here since it's going to take a while for the image to load but the script is going to be rendered immediately so we cannot just write something like canvas dot draw image and just send the image and the position that we want because that just won't work if i open the index.html file you see that nothing is displayed on screen even though we have no errors so only for testing and to see that everything that we've done so far is working i will set a timeout down here below and inside of the callback function i will paste this code and set the timeout for one second and let's see if now that that is working yes okay so now you can see that the background image is displayed on screen let's check the clear method that we wrote before so i will just write canvas dot clear and let's refresh the page and you see now that the canvas is empty so let's go back to our code and delete this line because i prefer to see something displayed on screen before we finish the first part and let's see that everything works yeah great as you can see the background image was drawn on the canvas but there's only a minor issue you can see that the image is a little bit cropped down here so in order to fix that i will change the dimensions of the canvas to match the dimensions of the background image so the width should be 1500 and the height should be 825 now as i refresh the page you can see that the image is no longer cropped so let's go back to our code and delete all those lines we used for testing let's save and now create a new javascript file that will call assets dot js here eventually i'm going to declare functions that will help me deal with loading the assets for the game but first i'm going to create a new object and let's call this object sprites and it will be equal and empty object let's create another variable that we'll call assets still loading and let's set it to zero let's declare a new function and let's call this function load assets and this function is going to take as an argument a callback function so once it finishes to load all the assets it's going to activate this callback function here i want to write something like sprites.back equals load sprite and i want to pass the file name which is located on the sprites folder in my case that will be spr underscore background dot png in order for that to work i will need to declare another function here and i will call this function load sprite and this function will take as an argument file name and the first thing it's going to do is to increase the number of assets that are still loading then i will create an image for this sprite sprite image equals new image object and i'm going to define the source of this image to be the path of the sprites folder which is assets slash sprites slash plus the file name now i'm going to use the unload property of the image object and i'm going to define that once the image is done loading i want to decrease the number of assets that are still loading now i will return i will return the image we can use the load sprite function that we just wrote to load all the sprites of the game but for now i will load just one more so sprites dot stick equals load sprite and i will send the file name of the stick image so that will be um spr stick dot png and we cannot activate the callback function yet because we cannot know for sure that all the images are downloading um in order to validate that we'll need to create another function and i will call this function assets loading loop and this function will get as an argument the same callback function that we received on the load assets function inside this function i'm going to do something if assets are still loading and else i'm going to do something else so if the assets are still loading i want to enter the loop again so i'll use the request animation frame method of the window object in order to send the assets loading loop as a callback function and i'm going to bind this and the argument that i got which is the callback else i want to activate the callback function so i will just call callback finally we'll need to call the assets loading loop from within the load assets function so let's just copy that and paste it here and let's just send the callback function that we got as an argument and that's it well for now that's pretty much what we need in assets.js we're going to use all the code that we wrote here very soon let me organize my code a bit before we move on so i just delete some of the spaces here and add more spaces here and here and maybe there all right so we are done now let's create the most important object on our project and for that i'm going to create a new file and call this file game.js and here i'm going to define a function constructor and call this function constructor game the game object will contain three methods let's write them down so the first one is game dot prototype dot init so here we will initialize the game the second one will be game dot prototype dot start so you can imagine that here we will start the game and the third one is game dot prototype dot main loop and in this function pretty much everything is going to happen before i write anything inside those methods i want to create another object and this object will be called the game world let's create another function constructor and call this function constructor game world the game world will be an object that will contain all the physical objects of the game and in each frame of animation it will be responsible to update them and to draw them on the canvas in order for him to do that we'll need to define some methods so the first method will be the update method and the second method should be the draw method now i'll go back to the game.js file and here on the init method i'm going to create a new member for the game object and i'm going to call this member game world and this game world will be the new game world object that we created now down here i'm going to create a new object that will be of the type game so i'm going to call this object pool game and it will be equal a new game object let's now deal with the start method of the game object so here the first thing i want to do is to call the init function and then i want to call the main loop and on the main loop the first thing we want to do is to clear the canvas and for that we can use the canvas object with that we created in the previous video so just write canvas dot clear after that we want to update the game world so we can just use pull game in order to approach the game world and then to call the update function and then we want to draw the game world so we can go to pool game dot game world dot go and then we'll use the request animation frame method of the window object the same method that we used before to call the same loop so let's just write request animation frame and we can call pull game dot main loop now i'll go back to the gameword.js file and here on the drill method i'm going to use the canvas object in order to draw an image and the image will be the background image so sprites dot background and the position will be x will be zero and y will be zero the next step is to open the index.html file and to add references to all of the script files that we wrote so i won't waste your time i will just paste that here and another thing that we'll need to do is to write a small script and in the script um i'm going to call the load assets function that we wrote and as an as a callback i'm going to pass pull game dot start so when it finishes loading all the assets it's going to call this function this method on the pull game object that will start the game let's try and open the index.html file on our browser and let's see if we get something well no let's check for errors and yeah this dot init is not a function add game dot start oh okay so this is a common issue in javascript what happened here is that we passed a function to another object to activate and in this process the this reference changed so now that this reference is no longer the pull game it is the window object because load assets is a function that sits in the window object um in order to fix that we need to go to the game.js file and here instead of calling this dot init we'll call pull game dot init and pull game dot main loop let's go back to our browser and refresh and now you can see that the background image is displayed on screen to make it interesting let's add another object to our game i'll go back to our code and here i will create a new file and i'll call this file stick dot js and another function constructor so function stick and the stick object will have fun for now a position so this dot position equals um x will be 0 and y will be 400 the stick object will also have an update method and a draw method let's write them down so stick dot prototype dot update equals a function and stick dot prototype dot draw equals function and inside the draw function i want to call the canvas object and to draw an image and the image that i'm going to draw is the sprite of the stick that we loaded before so sprites dot stick i want to draw it on the current position of the stick so let's use this dot position inside the update method i just want to write some stab code in purpose of testing so let's just leave a comment here and i will mention that it is just for testing and i'm going to increase in every frame of animation the x value of the position of the stick by one so this dot position dot x plus plus now in our game world let's add a member and this member will be the stick and it will be a new stick object and inside the update function i'm going to call this dot stick dot update and after i will draw the background image i want to call this dot stick dot joe the final step for now is to open the index.html file and to add a reference to the stick.js file that we wrote so script src and here i'm going to write stick.js and save it i will open the index.html file on my browser and now you can really see the main loop in action so let's delete those lines of code that we use for testing let's save and now create a new javascript file that will call vector2.js here i will define a new function constructor that its purpose is to help us deal with arithmetic operations between vectors let's call this function constructor vector 2 and it will get two arguments so the first one will be an x and a y a vector2 object will have two members that goes by the same names as those arguments so let's write them down this dot x and it will be equal if type of the x argument is different from undefined it will be equal the value of the x argument else it will be a zero and let's do the same for the y so this dot y if type of y is not undefined that will be equal a y the y argument and else that will be a zero let's save and that will do for now in the future we'll add more functionality to the vector2 definition let's now create a new folder and call this folder input and inside this folder i'm going to create a new file that i'll call button state dot js the button state object will be a simple object that will indicate whether a certain button is pressed or down so let's create a new function constructor new function constructor and call this function constructor button state and let's initialize this dot down to be false and this dot pressed to be false now i will create another file inside this folder and this file will go by the name of mouse.js here obviously we will handle our mouse input and for that i will need a mouse handler so let's define a mouse handler object and the mouse handler will contain three button states one for every button on our mouse and a position that will be of type vector 2 the type that we created before so let's write it down this dot left equals new button state this dot middle equals new button state and this dot right equals new button state object now the position this dot position will be initialized to a new vector 2 object and now i will define that once there is a mouse movement so on mouse move we'll call a function that we'll write just in one second so i will call this function handle mouse move and document on mouse down i will call another function handle mouse down and finally document on mouse up i will call handle mouse up let's save all right so now let's create a new object of the type mouse handler that we just defined so i will call this object mouse let mouse be equal a new mouse handler and now i will implement the functions that we wrote here so handle mouse move i will just create a new function and i will call it handle mouse move and by default it's going to get an event so let's fetch let's fetch from the event the mouse position so we can get the mouse x value by going to the page x property inside the event object so let y be equal the event dot page y and now we can set the mouse dot position to be a new vector new vector 2 and send the arguments x and y let's save okay so let's move on to the next function handle mousedown and this function is also going to get an event as an argument and before i write anything inside this function i want to call the handlemouse move function and send the same event so i will get the current position of the mouse then let me paste a little bit of code here and then i will explain exactly what is going on inside this code if a certain button on our mouse is down we would like to set the down property of the corresponded button state to be true we also want to check if the button was down before that because if not we want to set the pressed property of the same button state to be true and also the event object as an attribute that is called which that indicates uh which button on our mouse is currently down and uh if the witch attribute is 1 that means that the left button on our mouse is down if it is 2 that means that the middle button on our mouse is down and if it is 3 that means that the right button on our mouse is down so that's exactly what you see here in the code i would just fix those underscores here so let's move on to the next function and i will just paste that here and as you can see it is very similar uh we just check uh the attribute on the event to see which button was released and we set the down property of the corresponded button state to be false just one final thing that we need here is an option to reset the mouse input so i will define another function or actually method on the prototype of mouse handler and i will call this function this method reset that will be equals a function and here i want to set this dot left dot pressed to be false this dot middle dot pressed to be false and this dot right not pressed to be false on our html file i want to add references to all of the script files that we wrote so i will just paste that here and another thing that i want to do is to reset the mouse input in every iteration of the main loop so here after i draw the game world i want to call mouse dot reset the last thing i want to do just to test that everything that we've done so far is working i want to set the position of the stick to be equal the mouse position and i want to do something if mouse dot left is pressed so pressed so if that happens i want to log a message so console.log and i will just um write pressed left okay and i will mention that it is just for testing as we always do so now when i open the index.html file on my browser you could see that the stick object is tracking the movement of the mouse and if i inspect that you'll see that every time i click the left button on my mouse you'll see a new message here in the console so of course that's not the kind of behavior we want in our game but that's an important step because now we know how to handle the mouse input there is something that bothers me about this implementation because even though the stick and the mouse share the same position you can see that the mouse is all the way to the left and it's not on the center of the stick the reason that happens is because when we draw the stick using the canvas context we give it a position and the canvas context treats this position as the top left corner of the image so in order to fix that we'll need to introduce a new vector that we'll call the origin of the object in the canvas.js file we'll change the implementation of the draw image method we'll add another argument that we'll call origin before we do anything else here let's just validate that the position that we got to this function is not null or undefined so if it is we should set it to be a new vector to object and that will mean that its x and y values will be zeros let's do the same for the origin so if not origin origin will be a new vector2 object and now we can use the canvas context save method in order to save the current state of the context then we can make changes in it and then we can restore it to the same state so this dot canvas context dot save and now we can translate the context to a different position so this dot canvas context dot translate position dot x and position dot y now in the draw image method of the canvas context we don't need to send the position anymore we can just delete that and instead send the origin that means where we want to draw our top left corner so minus dot x and minus origin dot y and that's of course relative to the position that we are in right now and now we can restore the canvas context to the last saved state so now let's go back to the stick.js file and let me fix this position to be a new vector2 object and let's set it randomly to be 400 by 400 and let's add a new property this dot origin and set it to be a new vector and for now we'll set it to be 500 by 10. and now in the draw method of the stick object i can just add this origin and let's see what happens so let's refresh the browser and now you can see that the pointer is on the middle of the stick on the assets.js file let's load another sprite and let's call the sprite white bowl and obviously that will be the sprite of the white ball and the image is located on spr underscore white ball dot png now i will create a new file that go by the name of ball.js and here i'm going to define a new constant that i'll call ball origin and i'm going to set it to be a new vector of 25 by 25 now i will define a new function constructor that i will call bo and it will get as an argument a position and i will set uh this dot position to be the position that we got as an argument and let's write two functions for the ball object so ball dot prototype dot update equals new function and ball dot ball dot prototype dot draw equals a function and here i'm going to call the canvas and to draw an image and just for now i'm going to draw the white balls image even though not all the balls in the game are going to be white but it is just for now and the position will be this dot position and the origin will be the ball's origin constant so let's go to the index.html file and add a reference to the script file that we just wrote so here i will write script src and bo.js now let's go to the game world and add a new member and let's call this member white ball and it will be equal a new ball object with a new position on the update method i want to update our new member so this dot white ball dot update and inside the drill method i want to draw the white ball so this dot white ball dot draw back in the browser let's refresh and we can see that the white ball is drawn on the canvas back in our code let's go to the stick.js file and i will change the function constructor of the stick to get a position from outside so this dot position will be equal the position argument that we got and also i'm going to define a new constant that i'm going to call stick origin and it will be equal a new vector 2 of 970 by 11. now on the drill function i don't need to send this dot origin anymore i will send the stick origin and i'm going to delete the this dot origin member now i'll go to the game world and here i'm going to set the position of the stick to be the same as the position of the white ball and back in stick.js i will comment out all this code that we wrote for testing back in our browser let's refresh and now you can see the positions of the white ball and the stick don't worry in few moments you will realize why we did all that okay so there's another aspect that i want to add to the game and it is the rotation of the stick and i found this really good article online that explains exactly what i'm going to do in the code um so i'm going to leave a link down below to this article and also explain it briefly so let's say that here instead of a cat we have a stick and this is the position of the mouse so we want to rotate the stick so it will point towards the mouse how are we going to do that we need to find this angle for that so in order to find this angle we need to find the opposite and the adjacent and in order to find the opposite we can subtract the stick y position from the mouse y position and in order to find the adjacent we can subtract the stick x position from the mouse x position so um we know that tangents of this angle is opposite divided by adjacent so we can just apply the arctangent function on both sides and then we can find this angle back in stick.js let's delete those lines of code that we use for testing and let's add a new property that we'll call this dot rotation and initially it will be 0. now let's add a new method to the stick object and let's call this method update rotation and that will be equal a function now we need to calculate the opposite so let opposite b mouse dot position dot y minus this dot position dot y and the adjacent b mouse dot position dot x minus this dot position dot x and now we can use the arc tangent function inside the meth class so math 8 and 2 and we can send the opposite and the adjacent and we'll get the angle to this dot rotation and inside the update method i'm going to call this dot update rotation finally we'll open the canvas.js file and update the draw image method so it will get also a rotation and let's give it a default value of zero and here after we save the canvas context state we can rotate the canvas context so this.canvascontext.rotate and here i'm going to send the rotation and inside stick.js i'm going to send this dot rotation to the draw image method let's save and now go back to our browser and refresh and now you can see that the stick is rotating so it points towards the position of my mouse okay so let me give you a little challenge if you code alongside with me you already have all the tools to implement the next step here you'll see that when i press the left button on my mouse the stick is being pulled away from the white ball and once i release it it shoots the ball towards the position of the mouse so let me demonstrate okay great so give it a shot here in vector2.js instead of validating that x and y are not undefined we can just use some default parameters so let's change that and x will be 0 by default and y will be 0 as well and let's add another method to the vector2 class so vector2.prototype.copy and that will be equal a new function and here i will return a new vector2 with the same properties as this vector so this dot x and this dot y in stick.js i will bring back this dot origin and i will set it to be a copy of the stick origin constant so stick origin dot copy and in the drill method i will send this dot origin in stack instead of the stick origin all right i'll zoom in because it's a bit difficult to see the code this way all right that's much better now i will add another property that i will call this dot power and i will set it initially to be 0 and i will create another method for the stick class that i'll call increase power and it will be equal a function and here i'm going to increase the power but by let's say 100 and the origin this dot origin i will increase it by five no actually this dot origin.x so now in the update method i'm going to define that once the left button on the mouse is down i want to increase the power so this dot increase power and let's go to the browser and see the effect that it makes okay let's refresh and now when i click the left button on my mouse you can see that that the stick is being pulled away from the white bowl here in the function constructor of the stick i'm going to send another argument that i will call on shoot and this argument will be actually a function so let's set this dot on shoot to be on shoot and here in the update method if the left button is not down anymore and this dot power is greater than zero i want to call this dot shoot not not on shoot no i want to call a function that i will define right here a method actually so stick dot prototype dot shoot equal a function and inside this function i'm going to call this dot on shoot and i'm going to send this dot power and this dot rotation now let's open the ball.js file and here i'm going to add another another method to the bull class so ball.prototype.shoot and that will be equal function that will get power and rotation and just for now let's log a message to the console so console.log shoot and in the game world uh when we create a stick object let's send as an argument this function that we created just now this dot white ball dot shoot back in stick.js after we activate the onshoot function let's set this dot power to be zero back in the browser now you'll see that every time i release the left button on my mouse a new message is logged into the console back in stick.js i'm going to set another constant that i will call the stick shot origin and it will be a new vector of 950 by 11. and now in the shoot function i'm going to set this dot origin to be a copy of the shot origin now back in the browser let's refresh and now you'll see that every time i release the left button on my mouse it seems like the stick is moving forward uh towards the ball all right so in the shoot method of the ball object we would like to find the velocity that the ball should have and we get two parameters the first one is the power and the second one is the rotation so in this drawing let's assume that this is the center of the ball and here is the position of my mouse so we know that this angle is the same as the rotation that was sent into this method okay so if we'll assume that the distance between this point and this point is 1 we know for sure that the velocity should be a new vector 2 that its x value will be cosine of this angle and its y value will be sine of the same angle here in the game world i'm just going to bind this shoot function that we sent as an argument uh to this dot white ball just to make sure that we won't lose the reference to uh the white ball and here in the in ball.js i'm going to add a new property that i will call this dot velocity and it will be a new vector to object and inside the shoot method i'm going to set this dot velocity to be a new vector to that its x value will be math dot cosine of the rotation and its y value should be math dot sine of the rotation now inside the update method i want to add the velocity to the position of the ball so i'm going to write this dot position dot add to and to send this dot velocity and of course that now i need to implement the add to method inside the vector2 class so here i will write vector2 dot prototype dot add two and it will get another vector as an argument and here i'm going to set uh this dot x to be this dot x plus vector vector.x so this dot y plus equal vector dot y and i need to fix that so that will be equal a function and now back in the browser when i shoot the ball you'll see that it goes slowly towards the position of the pointer so now in the shoot method we can use the power that we got as an argument and we can multiply the velocity by this power and in the game world i'm going to introduce a new constant that i will call delta and i will set it to be 1 divided by 100 and this will represent how much i want to update on each iteration so it's a fraction that will send to the update method of the ball so it will only update um a fraction of the velocity so this dot velocity dot mult and we'll send the delta and of course that now we need to implement the mode method on the vector2 class so vector2 dot prototype dot mold and it will be a function that we get as an argument a scalar and will return new vector 2 of this dot x multiplied by the scalar and this dot y multiplied by the same scalar now back in ball.js we can use the same method in order to simulate friction so we can use we can set this dot velocity to be um to be this dot velocity dot multiplied by zero point and now let's test the results on our browser so let me refresh and let's shoot the ball and that looks um quite nice so that's it for this video thank you very much for watching it and stay tuned for more goodbye