most of you are probably aware that on freecodcamp.org we have a comprehensive and interactive curriculum to help you learn full stack web development well we're constantly adding new certifications and our new web3 curriculum is ready for you to try it's still in development but we now have five integrated projects ready for you to complete in this video you will watch free code camp team members sean and tom complete the projects so get ready to learn more about web3 and see if you can follow along with sean and tom as they work through the projects welcome free code camp this is the web 3 curriculum tom and i are running through the integrated projects that we have ready and in front of us we have the article that shows you how to run the free code camp uh web3 curriculum in your local vs code setup it walks you through what projects are available as well as how you can run the course once more projects are ready you will be able to sign up for updates and just listen to your emails because once we start releasing you'll get updates on those so to get started we can head to our terminal and we just need to get clone the repo which is in github at free code camp web three curriculum yeah it mentions in the instructions there um kind of specifically what to do i think so there's a few prerequisites obviously uh vs code and then uh docker is the main one i guess because this all runs in docker so you have to install those two things for sure and then once you get those few prerequisites installed in the article then you can i guess just clone the repo and run it or something like that we'll share we'll share a link to the instructions to get it set up in the description there so and once we make sure that we have docker running we can add vs code open up command palette and say remote containers rebuild and reopen in container now this usually does take a while but what i like to do is either go make myself something to drink or just watch the terminal as it builds okay is that it ready yeah i think um this is what i typically see when it's ready is that the last thing it installs that last extension there okay awesome so now we can use the free code camp extension to run the course first we'll prep the course and you can see what it's doing if you head into the terminal labeled free code cam run course but you really don't need to worry about what's in there so let us again you are introduced with the landing page which describes the course there will be a link to frequently asked questions just in case you get stuck or are confused with how to start as you can see there are quite a few projects that we have coming soon here currently the projects that are ready are what we are calling the integrated projects the integrated projects are like certification projects on the free codecam forward slash learn platform in that you don't learn anything through the course you are prepared through practice projects you get taught the content that you need in order to complete the integrated project so the integration project just has a bunch of user stories that you are expected to complete in order to go through this all right i got this loaded up and what i'm going to try and do is go through this first available project it's called build a video game marketplace blockchain um so you click on it and you come to the instructions here and then it gives you the files there okay so i guess we're gonna create a blockchain for video game marketplace uh where we can buy and sell items and we're gonna work within this folder so i'm gonna just go in there to start and um okay it says json files will store information about your blockchain um there are functions in blockchain helpers for reading and writing to them you'll need to look at those to see what arguments they need and what they do they're already included in the files where you need them um the items you can buy or sell are in items.json so we've got this items.js and i can buy some stuff there many of the files are finished for you you only need to add code in this handful of files and run terminal commands and finish all the user stories and pass the tests okay so your blockchain will be stored in blockchain.json you can initialize by running node init blockchain um okay there's there's just a bunch of users here that'll explain to you what to do um no generate wallets so we can create some wallets yeah mining blocks hashes oh geez there's a lot of stuff here um so these these this blockchain.json is going to hold our blockchain and then we already looked at items um transactions is going to hold transactions and wallets is going to hold wallets and then there's kind of examples here of what they're going to end up looking like blockchain has some things there and etc okay um let's just see if we can't pass one of these tests or something oh look at that that looks good um actually whatever i'll just leave it um first one let's see you can initialize running node in it blockchain should replace everything in blockchain.json with an array that has one object the genesis block it should have a hash property of zero okay i think this one's not too difficult so we've got two helper functions here right blockchain right transactions um should replace everything right block chain and that's this block equals to so obviously the genesis block is the first block in the blockchain which you often have to hard code because you'll find it doesn't have a previous hash so you can't really generate a hash for it yeah so i have a hash of zero and a previous hash of null and then the blockchain we're going to save that but uh blockchain should look like this and i think running that should do that okay we could run it and see what it looks like let me see what does my blockchain look like node blockchain there it is let's see there must be a test that goes along with it um running all right we got the first one to pass should replace everything so same thing replace transactions.json with an empty array um currently it's empty but uh if i go here right transaction so right transactions just like that yeah these helper functions they just kind of write to the file i guess and get things from the files the json if we wanted to see what those helper functions looked like just in case maybe the name doesn't describe them fully where do we see that this is all on this blockchain helpers file um there's a bunch of get and write blockchain um it's pretty much just well there's quite a few here i guess getting balances and stuff um but yeah you um should say here do not change code in this file so you don't need to change anything um and it may mention some things about some of them elsewhere maybe in the instructions okay what do we got next running nodegeneratewallet with the username should add a user as a key in waltz.json with a public key and a private key properties the value should be a public private keypair and hex format is the font so let's see what this one looks like we have no wallets and generate wallet okay so we're going to get a command argument from the command line um new wallet name so public and private i know there's instructions on how to do this um generate a key pair okay so let's go const key pair equals vc.gen key pair um ec is already here for us and then get some information from the keys there's the user story on this one to watch out for those type of did i have a typo yeah um should be able to create a wallet well let's see what the examples look like here we go wallet name public private there we go that helps okay so mouse public equals um get hex follow key from key pair okay i think that's right on private equals air that get private hex and then get wallets so we don't want to completely replace um the wallets we want to add to it so i think house wallets equals get wallets um so i guess we can probably just skip some validation and do wallets dot new wallet name so what validation would you do i would make sure there's not a name already in the wallet right this is the only thing here and typically wallets aren't stored like this this is just for this project so you can see it and have access to all the public and private keys um okay so while it's in a wallet name so we've got um public key and private key public key equals public well it's dot new while named up private key equals private um are those keywords public and private so i'm getting underlines private is a reserve word okay and then we should just do right wallets and then if i say that open my walls names yeah node so this is all in the instructions when i have it somewhat memorized um but yeah you can create a wallet with this it says so we're going to try that generate wallet me there's not set i was wondering if you needed to make that um dynamic yeah okay so equals what's that new name i'll just do this this work public key equals pub i'm not used to this keyboard i think just remember new wallet name is not the name of the key you want oh is that my problem yeah obviously thank you um that should work i think no more errors did or you must be straying her buffer now what invalid argument well when you're writing wallets you don't seem to be doing anything with the wallet you just created oh gosh okay well it's equal get wallets wallets your wallet's name well it's worthwhile uh okay well it's thank you you gotta look maybe i should have put more information there okay i think it worked it worked ha awesome i think the fun thing about these projects is you get to you know try out what you're making as many times as you want yeah you're cutting out a little but yeah i got you okay so we got one more thing done hopefully running the wallets creating wallet works and it has key pairs when you generate a wallet it should add a transaction at the end of the transactions array it should have a buyer address property of null and um buyer just property of null and seller address that is the public key of the new wallet okay so let's look at this ad transaction i assume go back to generate wallet get transactions write transactions okay so we'll just we wrote that const transactions let's get transactions and then i guess const new transaction equals something then transactions dot push transaction transactions dot right transactions right um transactions right transactions and then this transaction it should add a transaction at the end of the transactions or the transaction buyer address of null okay seller public key of the new wallet my price of 40. so public key i'll just go like that price 40. i suppose the i don't know um but let's see what happens there okay that didn't work either now now the old one's broken um new transaction equals that transactions you need to watch out for what you actually named some of your variables why don't you just tell me what the answer is you see something don't you seller address pub there is that what you were looking at yeah okay so now when i look at my wallets um wallets we got two wallets and transactions we've got nothing in there so i'm gonna just like that one i don't have a trackpad where's my trackpad um well okay let's look third wallet test okay we got a test wallet added that and now we have a transaction all right um running line my block should add an object to the end of the blockchain.json array with the correct hash previous hash nonce and transaction properties oh boy so this one sounds a little trickier um after you run should be an empty array hmm so i guess we're going to need a const new block type thing hash previous hash transactions and something like that we'll see equals so we've got helper functions let's use those get blocked blockchain last block block chain so you want to get the last block so we can get the previous hash so the blockchain is going to have this and we're going to want to get this hash so we can put it on the next block and it'll be the previous hash value of the next block so last block equal blockchain blockchain dot length oh this one blockchain blockchain dot like that sounds right um just comment this out once also that log last block let's make sure that's working there it is okay so it's working nice yeah i wonder if you don't need to worry about mutating blockchain you just pop it off the end i mean in this now you probably don't want to do that right you would need to put it back when you go back to write the block chain uh yes because you can't you can't remove a block okay previous equal last block dot hash so we got one thing down i think um not i think we're gonna have to look at the rest of the things for that now okay so hash and nots those are gonna be tricky transactions let's after you run it should be an empty right okay we can add that one quick const actually we should just be able to write transactions like that think so assuming everything gets mined correctly we can make that an empty array um i want to go up to these user sources i think there's some information generate a wallet okay so it looks like we kind of got a large portion of the top done um okay the hash should be creating using child56 okay concatenating the nonce the previous the hash of the previous block okay so yes we need to do some sort of loop here i guess let hash equals this well and then i know there's something in here about it having to start with some zeros there we go the hash and yeah what knots equals let's just start with zero so while hash starts with zero zero um create new hash hash equals shot 256. and then i think how to work with keys shout out to right there there it is can i copy that there we go okay content to hash it says up here um the hash okay concatenating the knots nonce plus previous block last block dot hash plus a stringified version of whatever is in transactions.json oh geez look at this they copied i could have just copied this whole thing just need to read um transactions there's some dots there i don't have transactions oh i think i do no i don't it's transactions okay so and then we want to probably do nonce plus plus we'll start okay yeah so it's gonna keep going until it starts with two zeros nonsense be one two three four five um uh okay apparently that should be the hash of the last one okay that looks right um yeah do you have everything for your new block now um now it's hash transactions is that just a jason i think so yeah yeah that looks right let's see if it works so the transactions are supposed to go empty and we're supposed to get a new block i guess node mine block um we did not get a new block because i did not write it but i did delete the transactions um new block equals this uh blockchain equal get blockchain blockchain dot push new clock and right blockchain blockchain here we go now we don't have any transactions but um you know what i'm just going to generate another wallet quick test two now we have a transaction and yet another wallet okay let's see if that worked note mine block all right no more transactions and we have a block three hundred dollars um and then i guess i can come run these tests and see what is passing for me uh running note mind blocks hash previous hash nonce did i do something wrong what have we got here previous hash zero that looks correct hash that looks correct knots looks correct oh boy something is missing transactions i'm wondering now if you go back to your your little algorithm for calculating the hash because i remember coming across this a lot while doing um learning about the cryptography of blockchains looking at the nonce that you're calculating the hash with and then the final nonce that you're ending up with oh geez let's just we'll just do it first it's probably what's the right way to do it tell me the right way to do it okay let's see what happened i'm just gonna get my cat still then okay um something isn't working while not we know the internet has an obsession with cats so this is archie did you pass that test no i wonder what the test is doing should add an object well i mean the one thing i can think is you're not if the hash the nonce needs to be zero you're never actually testing that what's that say if the nonce is ever zero you're never calculating the hash based on that because you're always starting with one kind of a probability of thing that that's probably not going to happen but with the nonce it'll go it just goes until it finds one if zero but you know the checking zero well that's fine because if zero works it'll just go to one and check one and then it'll go to two or three whatever until it finds one that works and then you can use that one uh i don't know i know what i'm gonna try though i'm hey ans hash wait did it pass running node my blocks down object and transaction property transactions transactions hmm do you need to add a transaction anyway i don't know i feel like that one should have passed well if you go to the console is it saying anything there you go now you're thinking uh i don't think we've even seen the console yet um yeah okay running on mine block let's see what it says here the hash of the new block should be able to be recreated with these things expected zero zero six maybe you're right what's the to equal zero d so what one so my hash has two zeros i can't get back very easily i need my touch trackpad um so it's expecting only one zero no it's just saying it's supposed to be able to be recreated dot hash that should have been correct json.stringify transactions hmm i'm gonna check where you are doing the dot two string okay so what's transactions.json online oh there it is yeah oh stupid transactions not transactions not json did it say that and i should have copied and pasted not say that in the instructions it did say that there's a bug no well kind of a bug it's a bug uh okay let's try it again let's see if that works console running node mine block there it is we got another one thank you for that help um okay so do you mind writing that down you want to take a note of that oh what are you doing yeah we'll take a note of that um okay running node by item so we need to buy and sell items uh i'm already know about so we're going to run this command by item with one of our wallet private keys and the item we want to buy and we need to add a transaction for it with the correct buy or just sell address price unboxing so this is the test text there must be more information up here so but i know we're going to need cons let's call it new transaction what's this and we're probably gonna need transactions equals get transactions you know it's always satisfying when uh you come across a problem like we just had and then you start to think that maybe you have an issue with your tests and then find out that your test is working okay transaction when you buy an item yada yada so the buyer address should be the matching public key for the private key entered so it looks like we're going to get a private key and we need to find public key from that because pub probably is probably the keyword and russ isn't it yeah it is um so i have some poor variable name choices maybe um so get key pair from private uh equal different key public keys because we got we should have key from probably get key pair from private so that'll give us a key pair so that'll actually be key pair and then we need i think we need to get hex public key from key pair that should work right here so um i'm just going to console that shouldn't do anything save that um so i should be able to run node i item and enter a private key so if i grab this private key and run it oh come on why can't i paste copy paste i should get a log with the public key that is the public key that matches that works okay so we have a public key um okay we need to run that so okay fire press public key seller address null price should be the purchase price of the item bought item bot equals that so get item price what does that do get out of price item items so it looks like it returns the price i think you can just do get right here right in the object item price item bot um signature should use the buyer's key pair to sign oh geez signature equals buyer's key pair keep hair dot sign here we go what kind of content do we need by concatenation buyer address price in item bot and these helper functions are really just making a lot better aren't they yeah uh i lost it price item bot okay price plus item bot okay so we should have a signature and we need to add it probably down here we don't want that why would i do that i think thank god for linting it'd be terrible okay so supposed to add an object to the transactions transactions dot push new transaction right transactions transactions save it and we will i'm going to open up this transactions and see if i can do this again node by item and we'll try an icon but i wanted to see this notebook oh something's out of order buyer address equals public key buyer address um so i should be able to just do public key there bank price is not defined get item price um price okay yeah it item price item bought yeah that wasn't very smart there was it let's try it again yeah i think i spent 10 or 15 minutes yesterday on a bug that was caused by a trailing comma in json yeah so at least your error messages are telling you you know exactly what's wrong mine was telling me unexpected token now well didn't it give you like a red line around it and it's just really small and you can find it didn't get a red line around it no i think i was editing in nano so oh yeah no anything okay so i think this one should be working we bought an item and it was there so mind block no buy item buyer seller signatures well let's see what happened with this transaction buyer seller price signature buyer seller price item we're missing an item i wonder what the console would have told you we'll check it out here in a second yeah i'm always interested if it's assertions are specific enough seven i mean i don't know this one might be a little i really need my trackpad for this oh i have to scroll down here i guess that's not bad i just go scroll down a little further um expected 2 to equal 3. that's not all that helpful are you asserting the length of the object's properties yeah i guess probably huh yeah um and then somewhere in there i suppose i checked the rest of it yeah that's not or maybe i should check something anyway um i think it'll work now and since i'm just all right i'm still failing let me see if i buy an item again what now what icons we got item higher chests to read read my own stuff still nothing itembot signature let's run it one more time what i notice your transactions aren't um clearing oh you're not running mind block that's why yeah seller address i don't see any typos signature hmm let's see if that console's changed because it's adding an item it's going to say the same thing isn't it that's not helpful um buyer address buy item enterprise so the price is correct signature i wonder if that's off public key fire address that's the same thing that shouldn't matter signature let's see what that signature is supposed to be you buy an item signature sign concatenation of the buyer address price and item bot in that order in hex format we've got to keep here keep here that sign i mean the signature's here so um cellular address it's supposed to be null right seller address should be no price should be the purchase price 10. i wonder if that's supposed to be a string no let me see this example transactions yeah it all looks correct hmm transactions we're pushing it get address balance is there a caveat in there that i'm supposed to make sure they have a enough funds well it sounds like it's saying you're still not pushing the correct number of objects that is what it's saying but you know what i think it might be yeah something to do with the balance the test is checking if it's got enough balance or something so i'm gonna go i'm gonna start over i'm gonna reinitialize my blockchain and because the account i'm using is this one that i created that doesn't have any funds and add the funds until those other that there were uh it's like a i guess a reward transaction for creating a wallet node generate wallet just put me in there see now i'm going to have transaction with the funds i created those other wallets before those transactions were in there so i don't know why that would that why would that have anything to do with it i don't know i'm gonna run these tests again see if it still came back yeah there it is i'm gonna look at my solution see if there's anything well i can't think of anything transactions price buyer keeper key from private signature it looks the same for the most part very similar copy it over still nothing oh i didn't save the file i wonder if i wasn't saving the file i need to turn on autosave there it passed so now we don't even know if we're i'm going to undo this and see if it's working undo save and then run it no no it's not passing i wonder what i'm missing on this one fire is just cilantro's keep hair all right um we have to do the cell item thing still so we'll give it another try over there i'm just gonna use my solution for now because it's passing um i feel like it didn't have anything to do with the balance but maybe i'll dig into the test later and see if i wonder when you sign it the concatenation it matters the order doesn't it did you have the order correct i did i double checked it public key price item bought buy your address public key yeah okay wow do you have to do the check for the the balance in order to pass that one it doesn't say anything about it should not add a transaction if the address it does not have a maybe it's right there i didn't look at the second one get this one run the test okay these both fail yeah maybe i'll just try transaction equal that transaction number so let's try it once yeah get address balance um cons balance equals get address balance public key if um balance than or equal to price we'll add the transact uh push transaction and write the transactions let's try that once and see maybe that was it there it is wow you want me to take a note of that um i mean there might be a reason that's happening perhaps yeah sure take a note um yeah i don't like that but maybe i'll put that user story first that's probably what i would do um okay running the cell item so what else did we get we've got a cell item i should have at least three wallets in my wallet so jason so that's what i was gonna do here me you i three wallets i should be able to pass that one um three loss okay and then at the end here we got a oh they are valid nice at the end we gotta add a bunch of blocks and transactions okay sell item let's try this all item one let's keep keep moving keep me on keep me on task sean yeah well you're almost there i'm almost there um so we need to sell item address private key and item so the the command will have the private key and an item and we gotta add another transaction with the buyer address so let me go to my buy item once i just do a little this is going to be a bad idea but i'm going to copy this over here a new transaction transactions i'm just i'm just all over the map with my code too just hacking away okay let's move some of these up to the top um well i don't think we need a price on this one but okay so the buyer address is going to be null this time seller address should be public key i believe quick buyer just seller just price and item sold price item sold and then i believe we actually don't add a signature to this one because we're selling an item back to the game or maybe we do i don't know oh it does say signature yes so we do need i don't know what i was talking about um there's something you don't need a signature for though i thought i don't remember oh it was the reward transactions um okay so i'm gonna scroll up to the sell item thing here so we're supposed to add that buyer address should be null seller just be the matching public key for the private key hundreds so we've got a seller private key that comes in and we have to keep here there and then their public key okay so we got the public key um price should be five less than the purchase price of the item so we have item sold price equals get item price i should just be able to go minus five there um signature should use seller key pair to catenate seller address price and item sold um so public key should still work price items sold there we go um you shouldn't need uh shouldn't need anything here i'm wondering if there's supposed to be something that makes sure they have the item before they can sell it but i don't see anything written well you might need to check your actual user stories no maybe i only kind of skimmed over them seller address yeah i don't see i'm selling i'm not okay so we do if um what is it get address items um i should be able to address cons items equals get address items on the key i think so i'm gonna cancel log items here and nothing should be happening because i'm not writing any files so what i want to do is get an item to somebody somehow transactions we don't have any items yet so node buy item and i want to see if when you buy an item you should be able to buy an item by running by private key item okay private key let's do a different item this time a spray i think it worked actions there it is okay so now we have a spray we can sell let's just add another one we have two um and it says that the transaction pool is included uh the items are so this should be included so if i go node sell item um that private key get in there get item price item bot minus five yeah maybe i can't do that um oh it's because i didn't put in an item no oh is it can i not do that either what is it you see something you need to tell me it's not item bought item sold all right all right although i'm not inputting an item here okay so there we go we've got my items here they are that worked everything worked so i need to say if uh not items items item sold greater than zero or actually you know what let's just do if items i am sold greater than one so if you have at least one you can then do something transactions dot push come on new transaction transaction start right now you keep wanting to do that oh it's just it feels natural okay yeah there i think that'll work let's see what happens if i sell one of these sprays console like my items but that was before it actually changed transactions yeah there it is and i can i think there's the helper function here i thought items gift items oh yeah there's a little you can run that to gift items let's run that ones gift items i think it should work now it sends an item to every wallet around item yep free item to every wallet okay that's a funny drop um i wanted to check the balance or get address info there we go node get uh address info and i think if i just do the name there we go so we can we have some info there it has a balance of 20 and a few items there we go that's kind of nice um and let's see if the selling test passed across our fingers here no no big fail so i don't what dude let me know it's cell item actually i'm just gonna node mine block should clear out the transactions and then sell item okay so now i just have none i thought it was working before i must not have that item what address is that um okay node you're also saying if it's greater than one hey note items that item sold if it's greater than or equal to one there we go thank you there it is um and yet it did not pass but i guess that was probably the problem so let's try it again there it is it passed all right there's off by one errors um and now we just need to add a bunch of transactions and stuff like that so node node mine block just pop these open i'm going to pop these open here so we can see what's going on blockchain if you got a blockchain here what looks like about three blocks no i hit them and we need wallets so i think if i grab a key hotkeys don't work excuse me free action work there it is so this person is buying a spray two sprays that one didn't work because we don't have enough money sure we'll just mine it this person node by item paste uh i'll do icon just make three transactions to buy some icons we'll just mine another block node gift items node gift items block yeah you can see it it keeps adding to this array blockchain and transactions so it's kind of neat um and i wonder how many more we need let's see if i have any passing i don't think that's enough though i just add a bunch of addresses two addresses minor block we're gonna we're gonna do this mode cell item that's uh icon both line block generate wallet this is what you want this is what you want um sean right now we have our own wallets 40 coins each um node mine block let's see how far we got ten blocks no gift items mine black does not tell you in the console how close you are no okay that's gotta be enough there we go nice oh one project down okay let's move on to the next project um yeah we finished this one and the next one is uh build a fundraising smart contract so it's going to be kind of similar and that's got a bunch of json files and stuff where you put your blockchain in there um okay let's see what it says here it says i need to create and deploy a smart contract that raises funds for my startup the goal is to raise 150 tokens before the seventh block is mined you have some boilerplate code and files um i should not need to change any of the boilerplate code the fundraising contract folder is the only place i need to write code so i have this folder which is going to be my contract and the rest of this stuff is not stuff i need to change anyway okay the initial state it's the an object my contract will store js files in that folder um will be run by the contract on transaction will run when a transaction is sent to the address of my contract and the on new block will run when a new block is mined and then it says that the files or the functions on the contract can only run if the status of the contract is open so yeah this is my contract state object and i presume there's going to be some sort of status open or maybe that automatically gets added okay the only two helper functions your contract files can use are add transaction and update contract state they're already added in your contract files okay so we've got an on new block file that will run when new block is added and this on transaction will run when a transaction is set to the contract address and then these other files is just showing all the things you can use in any other file you're gonna need to add here i know we're going to need to add a couple i think uh it says there's a number of variables that we passed your contract files uh ones available are already defined there and those two files uh yeah so it says there then we can use those variables um and here's the command to deploy your contract it says it will create a contract address and put the contract itself in the smart contracts json thing and then it will get added to the blockchain the next time i mine a block after it's deployed you can run the contract files with this command um yeah and there's some notes here says mining a block creates a reward transaction with a random address from wall such as okay these are stories bonus hints there's a lot of hints so there's gonna be a lot of like okay hence do this first i'm gonna do this first because it says do this first there's a there's an example contract for you to okay do this first it will help you understand how contrast there's an example contract for you to play with to see what it can do keep your eye on your json files and run these commands um so we've got like transactions smart contracts maybe blockchain we want to i'm in the wrong folder from before so i better make sure i switch build a run this initialize blockchain okay we got a block node deploy contract example contract because that's the name of the folder here and then a private key from the wallets private key let's go with this one um okay so we should have a message i guess your contract has been deployed at the address it will be added to the blockchain on the next block as well cool nice so there it is and it has my like functions from the example contract folder and the state of the contract i guess so node block i'll do that now it moved over there it's blocked in a transaction a private key from all its transaction okay so so do you want to explain what's in that functions object it's the code from these files these javascript files so you're just taking the code as a string and sticking it all on one line yeah yeah it works it's uh i mean it's it's pretty similar to how i mean not maybe not that part of it is but it's kind of similar to real smart contracts and that the code goes on to the blockchain and that's i guess more the purpose of of kind of some of this is to get the concepts across i don't know i think it's nice i think it definitely helps for debugging all right um let's try and do a little more here node add private key from wallets um so the contract is now like a different address and this person this wallet created it so you could still use that wallet to send things to the contract now um probably from almost example contract address and i'm pretty sure nobody has any coins or maybe they do i don't know so i have to use zero for the amount then some thing hopefully to the there you go so i sent xero to the contract address and it says someone set a transaction it is running it's on transaction file here's what the transaction looks like and if you look at the example contract this one it has all that information you get a transaction that came in and just a couple logs okay so it ran that file and then you can also run contract example contract to just get favorite number okay node run contract temple contract address should be that it before it i spell that right no you're missing the you in favorite huh okay look at this we got running this file favorite number is 10 and then we can set it is your your favorite number actually 10 no i don't have a favorite number example contract no it's actually 11 that's why we're going to change it to 11. favorite number yeah i'm kind of missing uh like you usually you need a private key you know to update state right to the blockchain i guess we don't in this one which is fine but i ran that and now it should be there it is and if you were to look through some of these blockchain files you'd see all that kind of happening like i guess there's the transaction okay this the smart contract transactions basically transactions go in their own file um let's see what happens when i mine a block yeah and then everything from both these files gets moved over to the blockchain yeah let's try to get a random reward on a new block his mind and he yeah so smart contracts kind of have their own area here um but i guess typically on real blockchains they're just regular transactions but yeah who are you nothing okay let's okay let's try and get this going fundraising contract so the initial state should have a status set to open and a description to smart contract your contract should have a get description file uh so we're gonna we these are the new files we need to make new file get description dot js and update description so it doesn't make those two updates and console.log i don't know if i can copy that maybe that's a good thing i'm just mumbling to myself here what's going on over there sean i'm just watching you seeing how the master does it creating smart contracts yep um keep your eyes open for those tables i'm good at that yeah i think that's why mostly here um so get description console.log here's the description of the fun contract and then description here probably contract state dot description so the contract state will be the object here yeah but we need to actually deploy the contract for any of this to work i don't think i need any of that i think we just need this one okay updates the description um updates the description so update contract state um i wonder if i should look in here i think i wonder if it's explained in here what that function needs remember you can just go to the you can hover over the function definition and then control click all command click not convinced you can in these ones but maybe what do you do command clicked there who do i press um i'm not sure what it is on mac if it but don't mind it's control and then i click on it and it takes me to the definition although no you have dynamic imports so it might not do that so update contracts did and why update contract state address state there we go okay contract address contract address and then comma we need a new thing something from there args go with zero for now i don't think i need i think you could just console log it couldn't you yeah we'll throw that in there anyway doesn't need any of that or that a contract address no it needs the whole state object so it would be contract state contract contract state dot description equals um args zero maybe i'm gonna go with that but i don't know we'll see what it says let's make sure we save the file um and then let's attempt to deploy it i think maybe sure so i'm going to follow the commands from deploying the example contract here we're going to reinitialize deploy prising contract and then a private key based there we have it so let's just align that to the block chain and then we should be able to run these functions node run contract it's description.js the description that worked and then date description new description network yeah look at that arc zero working nice well let's see if the test passed i guess huh look at all these we got past already wow how many left to do not too many nine ten oh this one's past two this one's past two your fundraising contract should be deployed in mine's election all right okay so running the commands to play your contract and sending it the 150 tokens created transactions so our contract needs to raise 150 tokens before the seventh block is mined and if it does we need to create a transaction that sends all the funds donated from the contract to the address of the creator and then also set the status to closed and if we do not raise the 150 before seven blocks we need to send the transactions back to the people that sent them to us okay so you have to keep that all in state now use sent what so initial state i guess um maybe donated transactions and then maybe an array and a um raised maybe like a number status description i think that might be enough so you definitely need to keep track of all the transactions that come in so we can send them back and i think that'll work i don't know if we need to keep track of the raised or not you could just look through the transactions i suppose so that sounds like an optimization thing that you may or may not want to do yeah okay so this on new transaction comes when our contract gets a donation so we're going to need to if we get a transaction what do we need to do put it in the state also add two raised or something add the funds to raise i'll just keep track of it for the heck of it i don't know i need it um and then we need to check if we have the 150 send all funds to contract creator something like that maybe um yeah i'd go with that okay so contract state so a transaction comes in let me console.log transaction fill that in there what does a transaction look like when it comes in yeah probably an amount and the address would be the contract address and the from address would be um whoever sends it so this is tricky update contract state contract address new state um the state has a transactions object so you know what i'm just gonna go we have this contract state here so i'm just gonna contract state transactions not push this work no transaction what's that transaction that came in and then we could also do contract say dot is plus equal transaction dot amount maybe i'm not sure you can plus equals on a property you can't thanks um contract state.raise um equals wait yeah you can can't you contract it dot raised plus equals so you can try yeah i don't see why not maybe i don't know um where am i at here okay so we've got a few things happening update contract state add to raised and then should i attempt to do this right now or should i there are helper functions for running contract earning contract playing contract wallet um i thought there's one for getting just the whole state i'm gonna do i'm just gonna do this once throw another one in there why not it stayed console.log contacts we're gonna do that let's just see what happens i should be able to deploy this and we'll see a transaction we'll do that update the state and then we'll be able to check it with that other file okay so um go back reinitialize and then redeploy and find the block and what we want to do is send a transaction to it so if i look at transactions there's one there i suppose i could send zero to it let's mine another block so now somebody has 50. this person public key that's their public key though wallets zero four one two so here's their private key to be able to go add a transaction from this person this is probably all in the instructions it's just i kind of have it memorized um helpers maybe down here add transaction i guess okay we already went through that um so we take the private key and then the to address which would be the contract address very large address i made sure to make them as big as i could yeah that always seemed like it when i looked at these no i did the opposite actually but okay so we have problems um is my transaction though the transaction came in yeah undefined 15 new state well that is the problem contract address contract state all right let's try it again initialize deploy unlock let's do that twice we have a transaction node add transaction um private key private key very key here we got this person0416 um contract address and 50. i think it worked okay so what files have changed this one right here transaction showed up from that person to the contract address this is we just sent this to the contract and it did some things there with signatures um and then the contract ran this file here yeah so we got this log of the transaction that came in and then if we say get state now it should all be updated node run contract east getstate.js it is smart status open transactions nice okay awesome so now we need to do like if if contract contract state dot raise greater than or equal to 150 um send all phones to creator just like i put right there um so we need to add transaction creator address so i suppose that would be their public key of the creator and private key well wouldn't you first send if wouldn't you first put all the transactions into the blockchain that the contract has stayed for and then send a transaction from the contract to the owner say that again so your contract state has a bunch of transactions in it you need to mine those so that the contract address has those funds and then you need to from the contract address send a transaction to the owner well i'm just storing the transaction information in the contract state the actual transactions are also going into the transaction they're already going through right cool right so they're already going on to the blockchain okay i just need the information so that if my contract does not succeed i can send all this stuff back and i probably probably only need like the from address and the amount from each transaction that would be enough to send it back so i'm gonna i'm gonna do that i think on transaction you know what i'm not gonna do that all right um so what was i looking at here this private key i presume is that the private key of the contract itself maybe that's kind of hacky but you can yeah you need to you need to sign it from the contract no yeah and so i wanted to find this function and see what it looks like add transaction somewhere you know what there's this thing you can find right in here somewhere private key to address amount add transaction private key to address creator address amount contract state dot raise that sounds right so you're definitely sending everything through even if it's over the goal yeah yeah isn't that how real fundraisers work you can raise you know you set a goal of something ten thousand but you can also raise much more like a lot of future pretty sure that's awful have you ever watched shark tank no maybe not i have and that's what they say on shark tank we raised twenty thousand on a goal of ten thousand that's what i say um well i mean if you have let's say you raise 140 from previous transactions and then somebody wants to donate another 100 to get to 240. where would that other money go who would get it well i don't know i'm used to things like kickstarter where you have a goal of 10 000 but then some of these you know some kickstarters they have a goal of 10 000 and they get a million i'm pretty sure that they don't get to use the million all right it doesn't matter that's how this one works okay yeah um so i think this file might be done and i don't even know i'm just gonna click this run test let's see what happens maybe that one will pass running and send it there it is so if the 150 tokens get sent yeah it worked nice oh but i also need to so add a transaction i guess i need to update contract state dot status equals close maybe i think that's what i'm supposed to do and update contract state just copy um would just move that line to the bottom of the file all right yeah that's good girl yep is it supposed to be a capital c here no they're closed um what did these users say no it does not look like it okay i guess we'll run the test then i'm gonna have to go through that process of deploying there it is now we need yeah now we need to do this other one on new block this is whatever block it's mined we need to if block length greater than 7 or something send all transactions back to donors i guess yeah something like that okay in my mind you should count the block number from when the contract is deployed and then seven after that you definitely should that sounds better obviously it could be tough to do things with time or something which is what you really would probably want to do yeah yeah that would have been that would have been better why don't you tell me that sooner all right this is this is how it is though for now and yeah that's a bonus to hear if i was going to go through this they can at the end switch up their their contract so that it finds out the block that it was deployed and then the logic is seven after it's deployed block now i like that um so we're gonna have contract state.transactions uh for each maybe what the heck is that maybe some sort of loop to go over all these transactions um a transaction and it was the we got the private key so this is from the contract to tx dot from address i think and to mix that amount that looks right i think so so yeah if blockchain length which comes in running the commands to deploy your contract and mine seven blocks so i think there's a note in here about something when this is actually run it says in immediately after the block is mined yeah is that what it says yeah so it should be greater than or equal to seven i think um okay is that it i can't be it we need to also if block change do update you know screw this copy this contract state let's just do if watching length not greater than seven and contracts not already closed uh not equal to closed it's kind of sketchy condition there should work yeah not good enough for me um so if it's not closed update to contracts dude contract state.status equals closed and i'm around the test i might be missing something but it looks pretty good there it is wow all right apparently my functions are working yeah now we need to kind of start over and deploy it and actually send it enough transactions i think like it says the current state the status closed and a description oh it says description your contract should have had at least 150 tokens sent to it and it should have added a transaction sending all the tokens back to the creator or to the greater whatever so we have to kind of do that i'm just going to start over initialize deploy i'm just going to mine how many do i need 150 so like six blocks so i can have tokens descend just flooding the market here block chained up jason all those wait what where are my transactions oh they're there they're here i just didn't scroll down so now i should be able to go we deployed it um node add transaction from wallets private key to um oh geez copy paste it's like the slowest copying and pasting you'll ever see paste okay so from somebody to the contract let's see it a person doesn't have any money figures from this person no there okay that should work transaction to the contract so i think if i just do it again do you have three no no you're out of money all right well that should be enough for this oh that's only two actually 100 it's supposed to be 150. that first one was one of these well now you've mined too many blocks haven't you no it says your blockchain should have at least six blocks oh maybe i have because at some point it's gonna oh no at some point it's gonna send the money back oh yeah crap you're right um just delete the last json yeah that that could potentially work a little hack but node add transaction ah i know that transaction we're gonna go like this did it work did i get did it happen and cine logs um ours 150 i think yeah i wonder if i need to mine the block i don't think so maybe i maybe i mined too many blocks already and you were right let me know to run might be in here contract wallets i think i use the public address i'll paste it in there let's say get state.js closed now i blew it all right we're gonna start over yet again yay specialize maybe you don't mind six blocks just minding three oh i'm pranking we have zero blocks now we have one block two blocks three blocks we do four so that we have enough coins on the blockchain it should be there's our first block you could also just manually edit one of the um wallets to have 100 or 200. no you can't there's a test that checks that your blockchain's valid i could change the function that yes um it's node add transaction from private key i realized yeah my hotkeys are working to the contract and 50. okay you're out of money um we'll try you that should be it transacted there it is the 150 wow now if i run the test is that it no you don't have six blocks oh your contract should have had at least 100 seconds and should have added a transaction sending all the contracts i wonder oh boy none of that looks good maybe i just need to mine it yeah before you reach this xbox be sure to edit the description that's true huh thanks okay so what have i got here i don't even know i'm not gonna worry about it let's let's do this node run contract contract address i think he's the public key um update description dot js smart contract to raise funds for my startup oh fine one more block press their fingers you cannot update the state of a contract that is not open what oh whoever created this is just evil i guess i wanted you to go through all of this i gotta do it again unbelievable okay i guess it's some good practice so we deployed our contract i'm gonna node my block imagine how much easier this would have been if your addresses were a reasonable length or if my hotkeys were even working my hotkeys are i can't paste into the terminal i don't know why with ctrl v or whatever i don't know so we have my contract so the first thing we're going to do run contract contract address update description dot js smart contract raise funds for i start up i'm going to just run the tests and see if make sure it's passing before something crazy happens in the current state oh well yeah that's that's pretty rough there now let me tell you the problem because someone's going to come along they're going to forget the period at the end of that description and they're going to mine all of their blocks and they're going to fail that last test all part of it yeah okay so if you check the console though you can probably see whether it's failing because of the description or because the status property is closed yeah you might be able to so you get that contract address paste 50 money i can't address info so i mean i could be doing that but i'm just copying probably the same same time to do both so you have all the money or i forgot to mine a block or something oh i definitely mind blocks who has the money what's going on here we've got a blockchain 50 50 50. somebody's got money it's it's probably the yeah that worked i know name of address count your property is not divine saying get water to dress is returning undefined all right you want to make a note of that one too yeah oh no never mind i just had a typo it's a capital m okay okay so here is the public address and the balance for me did i not do it right private key i'll copy it i swear i did this already transactions i don't see any node get address info i don't see any 150 transactions yet so or whatever coins so let's do this one paste there should be it a little anticlimactic but no to get it's gonna try and run the account i'm gonna do it node run run contract copy paste get state touches the transactions are all still there close smart contract good thing i didn't have a period missing or something let's find let's find out maybe there's typo come on fingers crossed oh it's still failing this should all be that those two should be working a smart contract to raise funds for my startup get to the console sure yeah this is not going to be helpful like expected thank you did you mind the block maybe not yeah maybe i need to do that let's try it this one say actual open expected closed all right let's try it maybe i just needed to mine it come on it was whew wow well we got another one so nice work all right um the next project is this peertopeer network so let's just try and check it out um that's so when i click on it it starts me down here yeah it's because it's a single page app so the scroll location is staying the same okay so yeah it's pretty minor but i guess what we're gonna try and do here is build a peertopeer network sort of what gave that away that was the title right it's distributed so we're gonna be working in this folder um we have some boilerplates we don't need to change any of that an old one folder right here represents a node on the network the files in it will be cloned and used to run all the other nodes in the network you only need to change the index.js file um so we're going to use websockets and websocket servers to create a website server in here and it's going to listen for incoming connections and it's going to connect to all the other nodes on the network uh so once we think we have this file finished what we're going to do is run this clone node thing to copy it and then run a bunch of different nodes i guess and so we have to have at least three nodes and we need to create a websocket server and so basically all the servers are gonna connect to each other we have these like known peers which are kind of like entry points to the network and then once one of the sockets connects to one of those entry points it will handshake with the server and the server will send it the list of all of its connected addresses so and then from there it will connect to every other node on the network so we're basically simulating a creating a flood sub network um protocol sure um yeah uh i don't know to be honest that's i'm gonna i'm gonna go with it sure um so we're gonna have to have some server listening um when it starts it should attempt to open soccer so it should attempt to connect to known peers uh when i saw your connection when a connection to server is established okay so we're going to try and connect to these and if we find a connection we need to send it a string object that says this type and shake data ray so it looks like we have the address of the server here um data should be an array of addresses that your server is connected to including the server's owners so data connected addresses that's what we need um my yes connected addresses something like that when a server receives the above message it should attempt to open socket connections so when i connect to a server i send it this and when my server receives this so something like server dot on and shake connect yeah do all data um you should keep track of all the addresses the server is connected to you can use that when a socket disconnects you should remove it so i guess that would be possibly like socket dot on clothes i think move from rey something like you should keep track of the servers you are attempting to make make connections do not try to make more than one connection to the same server okay and then after you connect remove it there's some issue i remember adding that there's some issue that was causing an infinite loop of servers connecting to each other yeah uh server should never attempt to create a connection to its own address you should clone your node one folder at least two times all of your nodes should have the exact same code with the exception of the env file um you should have at least real three nodes running use those ports all of your nodes should have an open socket connection to all other nodes um there's a bonus there hints adding console logs can really help websocket servers okay here this looks promising copy i can't even copy from there can i yes i can server port so make this server and the part is going to be my port and then server.on connection so to create a server listening on the given port i wonder so that's listening already server.on connection log connection three seed that socket that on message runs when i suck it sends a message to your server nest it within the connection function you want to make a note of this i'm missing closing parentheses right here so we have a string that comes in that's console.log message received and i'll just go plus data string i think that'll be this for sure so and how to work with sockets so here's like your server and then you kind of want a second thing which is opening a socket connection to the server from the server yeah so you want to act as a server a websocket server and as a websocket client pretty much um uh let's run the test i got one nice um okay when a node opens the socket connection so the first thing we want to do is try to connect i know i need a connect function so i need like this function connect address that's what i'm going to do and the first thing we want to do is up here anyway um we need to attempt to open a connection to all those addresses so something like known appears that each here connect here council log something to connect to here address save it and we'll just see if anything happens so i have to go actually into this node one folder and then i can run that okay and something is running you're attempting to connect and it is still running it is not stopping running but successfully made a for each call loop um so if we want some catches here if address not equal to my address so we don't want to try and connect to our own address and and we're not something to connect to it and not attempting clues address i think that should work so we can actually test that i'll leave that console log in there and this first node has a port of 4001 i think yeah that's my own address so we'll not attempt to connect that to only attempt to connect to that one all right so attempt attempting to connect addresses dot push we are now attempting to connect to an address yeah when i went through this i remember i wanted to use sets just because i think it works quite well when you have elements that you don't want to repeat and that you want to easily remove so that's just a did it work did it work or not yeah no it works it's just you need to remember when you're passing it through the api to i think sets have a two array method or else you just have to say array from and then pass the set in yeah yeah okay so when a socket connection to a server is established send a message to the so i think we want to move this handshake message and trying to connect and then once we do connect we want to send this um you go to these helper syntax server sockets so think we do yeah that looks right so all in here we're going to try to connect to this address on open on close on air runs when any connection is served has been established so that sounds promising so i should in here want to send this message suck it dots and that some data wanted to be i just go i can't go like that is it jason that stringify or is it something to string i think string of fireworks here yeah it's jason yeah that's what i do whenever i'm working with websockets um i think i'm missing another one of these maybe i'll just give myself a little more formatting there and i don't know why i'm getting four spaces that is no good but i can handle it for now okay so let's uh let's throw that's a log connection open so you know what else we need to do a attempting to connect to addresses splice or something and then find press one that won't work with it no i think you need to do the attempting to connect addresses dot find index yeah it's the index something um so can i do something to connect addresses dot index of i think that'll work let's see how many off for one errors there are so and then we want to go to connected addresses dot push i think address so we have now connected action open and then suck it dot on clothes it on here i'm probably just i'll just throw some console out i'll pull that log they're connecting to run through that there tempting i'm gonna remove it from this um and then on close we should just addresses from there it's going well i think although it may all crash and burn on me but we'll see i'm trying to think all of the things that fire the error event that's emitting area event for sockets because what happens if you splice and index of returns negative one so right now you're treating it as if on error only happens when there hasn't when on open hasn't happened now um here i don't know what splice does if attempting to connect dot index of returns negative one because it might start from the the back of the array and then just remove some random last element drawn here um i'm gonna bring this tab over i think you're on to something so if i splice a negative one one this turns into this so it removed june for some reason the last yeah so i think yeah i would i would take that attempting to connect address out and make sure that it's not negative one yeah i like that just if if uh index greater than or equal to zero like that and probably i feel like i wonder if i should do the same thing here i think it would always be in here if it's closing we're gonna leave it watch it crash yeah so we start up we try to connect to the known peers none of them will be running right now so nothing's gonna happen yeah and then message received so the message that we receive should be this message handshake yeah um and then well do you want to i i think you also have to parse that message into yeah if you wanted to um but you want to just create a bunch of nodes and test it out see what happens yeah because they should try to connect to each other shouldn't they um yeah they should send some messages around yeah okay so there's some helper functions to run to clone it i'm in the node 1 folder so i actually have to back out here and then i go known clone node i might do it twice so we have three so now we have three and look over here and split this up and then now i gotta go into each folder cd node 2 arc cd node 3 and run the thing we've got problems i know attempting to connect a dress dresses um so you gotta go back you can't just copy the code over to the different notes which is probably the way to go but you can also use this uh node delete nodes which will delete the things there you go node clone on tv node two i would have tried running the first one before cleaning them again but it's syntax error what's here cannot find name attempting to connect attempting to connect addresses attempting to connect addresses that's a typo in the boilerplate code attempt i think i'll edit that that is a problem attempting it's everywhere oh no attempting attempt attempt ding okay we'll save it run okay we awesome nice catch um we are attempting to connect to 4003 we got an error because i have to let my captain i'm not running all right note index oh it did it connected attempting to connect to so this one tried to connect to both this is 4002. air connecting to 4003 that one's not running connection to 4003 open connection open connection to open okay so we had a connection opened 4001 and then we received a message on 4001. um received a message here and it's got both addresses and so um i guess const data equals json.parse data um not quite whoops dated too not quite date a string oh there we go okay i don't like this anyway because the field is data um we'll go message and then um message that oh what the heck was that but again i have a typo just that data got for each address connect let me see how many times you'll do this okay like is that all i need that might be enough all right well let's try it so they should connect to each other i'm gonna reclose this one um delete my nodes clone them again node index will run this one so it's running why does it print closed there at the end connection closed connection closed um so there it is your um air connecting so first it goes to error and then it goes to close for some reason well i suppose that makes sense because it connects or does it connect well attempts to connect right it doesn't actually connect until it gets a response i presume yeah i don't know why it would close if it hasn't opened no i don't know oh well number two um node index so now we are in a loop oh no that's fun up somebody help crash it trash it okay we're alive um that's quite funny so if address not equal my address and not attempting to connect addresses that includes address socket.on close on air let me see what it says over here um you should add what the heck happened i can't even see my terminals to find out um so i had a server listening i started up the first one and then i started up the first one tried to connect but it didn't make any connections because there's nothing else to connect to the second one opened and connected to the first one and sent the first one this message its own address yes just its own address and so then the first one tried to connect to the second one which should assuming you want to not do the connect if it's already connected so yes you need another yeah yes i do that is the problem perfect that's teamwork right there yeah don't think there's anything wrong with that if connected it and okay i'm doing this with my eyes closed okay if address not equal to my address and if not then just if not connected it's okay all right let's try it again um okay we've got several nodes and run that one okay that looks good cd node two index okay okay i think that's good so this one got a message with the two addresses and then it attempted to make a connection there and it opened one all right let's see what happens here um cd three okay oh that'll break oh we've got a whole bunch running four nodes running all connected to each other and i think that should pass well no infinite loops is a good sign crossing my fingers i see a lot of x's message do i need to do more here on close on error send data that really looks good go ahead well i'm just thinking so the server it's only connecting when it receives a message does the so you have on open you're sending something don't you want to send from the server the connected addresses not from the client this kind of is the whole thing is the server you can call it a client and now that makes sense for typical websocket stuff well that that it the um so when you say new websocket that that's a websocket client yeah when you say new web socket server that's a websocket server so i'm thinking when the server receives a connection they should send the server should send here are all my connected addresses you might be right didn't read any of this hardly um oh i did read through it pretty good if sorry so when you connect to a server you should send it a message with these but the server doesn't need to because what you're basically doing right now is if you start up node 5 then it's not connected to anything but it's whoever first it makes a handshake with it's saying here are my connected addresses as opposed to connecting and the server saying here's everything i'm connected to so note 5 would send it it would start up it would connect to this first one and send it its own address and the first one would receive it and then attempt to connect back to it and then when the first one connects back to five it would then send all the connected addresses where five would then then attempt to connect to two three and four maybe that's not the right way to go but what is there anything in the console that's giving reason for the failures i'm doubtful this is not so that says it's crashing that's throwing um the tests pretty much just try to make connections to all the different things and see what the handshakes come back is yeah it's not reaching the assertions which is why it's just an empty object do you think i'm i mean it seems like it seemed like it was working they were all connected to each other so it seemed like that they should have passed and that it was working as it should have been right or no maybe i'm missing something um we'll start start node four up again let me close everything oh there we go so node one um not quite over cd node one node index node two started attempted to connect to one and three error on three and one worked yep and then the message received is i am connected to one and two oh yeah okay so it's it's my address and connected addresses yeah yeah that should be right yeah um i think that that makes sense cd node three let's see what this one said it gets a little busy here yeah um attempting to connect to one one open and then it sent me all these yep attempting to connect to two and the first one received these two which seems right yeah attempting to connect to two and it did open and then it received so 2 sent it back this then stopped because it was already connected to all those message type handshake data i see something i see something in there i see something oh yeah yeah yeah yeah okay so i'm gonna this time i'm going to copy code me okay i think that looked great tess i think it's patina thing would show up in the console though nice we got it if i run the test again there they go well how long did we spend on a typo about the average time you usually spend on a typo awesome that's three down so moving on to the fourth project which is building a web through client side package for your dapp and in this project we're going to be building a clientside package that's in the form of a class that can be used to interact with a web3 provider which would basically be your network for a blockchain we can see the files we have here the class is in this index.js file that we need to build out we can see an example of a provider here which is basically just a rest api consisting of some routes that you would interact with in rpc calls and so we should first cd into the build a web 3 client side package 3. and we have the boilerplate in the index.js file and we can see an example of the way that this api that we're building out is going to be used in this example client where we are importing the class and we can see some methods on this api such as set client address init smart contract and we can see that basically the api just uses this to interact with uh the smart contracts that we'll be building out where we can call the methods that might exist with a smart contract and there's an example idl that we pass into initsmart contract that we can find here and this is very basic ideal which is basically a schema of your smart contract it tells you in these instructions it's basically the methods of the smart contract we have a setclick method and a getcontract account method the args expected for the setclick method is one argument that is of type string and there are no arguments to the get contract account method the user stories that we will be completing let's just go for it so we know that we will be we need a method that is set client address and that takes in an address and doesn't return anything and what this method does is it sets the class address property to the given address so that's the start address to give an address which means that we need to construct our class with some address that i'll set for null okay we'll call that one down the next method is call and it accepts an rpc call object and it returns a promise so we know that this is asynchronous and what this does is makes a post to the call smart contracts route on the ahref of the provider property so this class will have a provider property that will be equal to something and we will want to make a fetch to this route which what we can do is the provider href and it is to the call in fact and then we want this to be first method which means we will have a body and the body of the post should be the rpc call object literal and the address property of the web3 class so we need a body here and let's just create a body that is the rpc call and the address of the class i remember when going through this that i struggled with the the url there that when you make that call smart contract it doesn't need the forward right slash so we do have a link down here to the url api of its basic javascript api that also exists in node and if you play around with it a bit you you'll kind of figure out that calling atriff it always appends to the end of the string the forward slash i i suppose the smarter thing to do here would be to um i know i know you would use the path api to the path module and the join method and you would join these two paths together um problem my head i can't think of how to do that with the url api but i'm sure there is a way so now we need to the call should return the result property of the response or throw an error if the response contains an error property so what we need to do is get out the response which is s and if response dot error into throw this will just throw a new error that is that error otherwise we want to return response dot result so that should be that method done and now we need an init smart contract method so we can see this also would there be a way to desire to interrupt there'd be a way to just to make sure it's working other than just like running the tests that's a good question um so it would be a bit difficult uh you would need to get the provider up and running so what you can do is create a new terminal just you don't need to create a new terminal you can start the provider by saying node node provider dot js leave and we can see here what warp does is it starts the provider it deploys the smart contract with just a test smart contract that is located in this package file and then it starts listening on port 301 so i suppose we would need to set the provider here and we could manually do that with new url http localhost v01 so from then we could actually just write some tests ourselves so if we wanted to uh let's just do something simple so we could set the client address here and we could just make a thumb and then we could console.log e web3 dot address i think if we did that we can open ourselves a new terminal here and we could run this in node and it should work so except it is a module but we'll see what happens node there it is so we have tested that creating the class works it has starts with an address of null and the provider is this url object and then we change the client address from null to tom and we can see we printed out there if we wanted to do a test on the call we could and yeah say web3.call and we would need to pass in an rpc call uh what that would require is well we could look at it from the provider's perspective the call method in this case makes supposed to call smart contract so he has cool smart contract it gets from the body an id method args and address so if we wanted to we could just add in an id 0 args would be let's leave it as an empty array method we'll probably just get this wrong and we can say test what else do we need address so the address would be the web3 dot address you can pretend that that works and this is an async method so let's just get the response out of that and console.log e response and we run our script again and we get an error which is very fun where is this error in json.pass so actually while we're debugging debugging debugging console.log the response here and we'll check why that is happening this is the response it looks like it's just the old average um http response and so why is json.parts not working probably because we need to use the weight res.json method and let's not console.log that okay so we get a response from the server here which is smart contract with id undefined not found why is it saying id undefined not found that is a very good question because we have defined it as zero but clearly that just doesn't exist and we can see here also in the provider it's it's logging out those errors um so let's clear that for now and we will come back to it that is a bit more involved than i would hope it to be you can see it it basically if you get an idea of what going what's going on in the background you need to provide a running and then you can just run the script using node and it all works and fetch works in the fetch api works in node version i think it's 17 and above so 18 is officially released so that is what the docker image is running on i feel like that would help it would have helped me when i was playing with this is kind of a way to to test it more and see if it's working or not other than just kind of writing the code and hoping now that that is a good point it's probably something we can add on to this in future prs uh to make it more userfriendly and just a bit more a bit clearer obviously i think once you've gone through the practice projects and you've learned a bit of content and you understand rpc calls better as well as you know having built out your own provider it makes a lot of sense what is happening here where the fetches are going and what's being returned but until then we can definitely try and make it better so if this in its smart contract what we need to do here is we need to take in the idl which is your um your smart contract signature and we need to basically turn that into callable methods so we can start by we know we want to return the smart contracts methods and that means we want an object and we will want to here's an example if we have an idl with these instructions where we have these different methods defined by the handles get favorite number and set favorite number you can see that after we initialize the smart contract it returns a smart contract object that has these properties the set favorite number method and sorry the get favorite number method and the set figure number method so what we will want to do is for each instruction of the idl loop over that and add the handle to the smart contract so we want to put in the instruction dot handle we need to set that equal to a function because that's what the instructions are they're just functions and in some of the cases the functions will be asynchronous they don't have to be but they can be so we just add the async method there and we know that there are some args that this will accept but we don't know how many we've defined it as a function now what we need to do is the callable method should return a promise okay so that's set here in async and it resolves the result of the core method somewhere in here we are calling the start call and we are returning it so let's not call except we are waiting that because call is is and from here we need to construct the rpc call so just as we did down here when we passed in the obviously call to the core method we are wanting to construct this out of where am i yep we want an rpc call we need an id which actually is inside before loop and even more so we need it to be inside the function and we get from the instruction it's actually from the idle itself it has a property id passing the id of the smart contract so that the giver provider or um in our case more likely validator will be running the actual code of the smart contract needs to be able to find the smart contract on the blockchain so we pass in the id and what else did we need we needed args and a method so the method we know is the instruction handle and the aux is the argus that passed into the parameter of the function and did we need anything else so the address is done by the call property itself we actually didn't even need to include that um it's not it's overwritten anyway see when we wrote this out the body added the address for us so it's just the rpc call here and we can pass the rpc call into this one now what we need to do at the end of in a smart contract is return this object that we have just recreated created okay are you happy with that though i think so okay well we are moving on to create this get balance method if if you ran the test would it would it pass those or is there we can try and run the tests definitely it's always a good idea uh run the test as often as you can and hope things don't break so we're on the tests and we are failing absolutely everything there are a lot of tests yes actually if you're wanting more information you can probably read the test text yourself we can look at why it's failing and it seems that something is erroring out in our code i think one of our issues that i definitely know of is when we are creating our web3 class um yeah we need to actually pass in and i'm pretty sure i had it written here somewhere yes remember it it's a initializer or something yes you get the address from that the provider address from that i never know where it is um i wonder if it's in the castle so in here we need the provider address and we just replaced this hard coding that we did for our testing better and the wonder if changing that will allow us to pass any of these tests isn't it is it provider that hr for url or something or is it just provider well the constructor just accepts a string okay and we turn that into our url ourself okay and we're still failing all of those so i think one of the better things we can do is finish out the api here just so we don't get any crashes and we will be defining a transfer method that takes in an object and let's just say from to amount so this is all to transfer from one address to another address a certain amount and if we do that see what running the tests does nothing we can look into what is actually happening by reading the server output so web 3 is not defined which means we are not exporting this well we need to make sure let's just comment about our tests for now okay there we go so our tests were messing up the output there i'm not exactly sure why but we we will leave it like that so we are actually passing first five here we're exporting our class we are so your web3 class should have a provider property that is an instance of url constructed from the initializer argument that's what we've just done here in the constructor and we have the say client address defined correctly there is an asynchronous method with the handle call we have done that and call makes a post to this route so what we are not doing is post call smart contract should have a body including the json stringified version of the rpc object literal so we are not stringifying our body it's always something to remember okay and let's keep going so we need a content type header set to application json so that would be in the headers and we need never remember if this actually needs to be capitalized in a certain way so we'll just try it out and we are sending through json it looks like the it's capitalized in the text and the instructions so if you read your instructions correctly then you will probably have a better time passing the test thank you tom so the request should have a body including the json stringified version of address we are doing that yes he has address the core method should return a promise yes we are doing that if the response contains error throw yes oh we are passing that excellent we're passing all of these and then down here we are failing one of the internal tests where it's actually testing out the api so if we go to 17 in the console we can probably see why and these used to be in numerical order but for some reason they are no longer and it seems that it's just crashing there so let's run the tests and see if we're passing any more yes we are almost there and now we need to actually to find out the get balance api so we need to make a post this is more of the same that we did in the call so i'm actually just going to copy paste this we are matt this is fine so instead of a fetch to call smart contract we are making a fetch to get balance and the get balance request should have a body including the stringified version of address so there's no obc call here there is just address and we can see back in the function definition that address is optional so we need to fall back to well if the argument isn't passed in here then we need to fall back to the classes address and we also need content type here excellent we've done that balance method should return a promise that resolves with the result i think we are doing that resolves with the result yes and if it contains an error throw that error we are doing that okay let's see if we're passing those tests okay and we are so now we need to just do transfer and i think that is again more of the same except now instead of address we need the from to an amount in the body and we need to json stringify this so if we change body to just from to an amount we didn't need to destructure it here but that's fine we'll leave it and instead of get balance we are changing this too okay let's run with this and i wonder if that's it no what are we failing if the response body contains an error property transfer throws an error with the value of the error property are we not doing that looks like it well then let's go to the console and see what expected missing required fields to equal missing required fields from no that's you're not destructuring correctly or something there in that body i think body equals from 21 oh that looks right so in this case we're saying from is undefined but it's expected from to be null expected from to be null so actually i wonder what we want from to be is our address so you know what we should probably actually read the user stories i wonder if it says the body should be jason's string of my body okay you are doing that i suspect we need to actually say from and this needs to be either from yeah or this dot address and that something's just wrong there but yeah that might work yeah we might need to make that actually clear in the tests and things there we go okay so we passed all of those that was quite involved but got there in the end and yeah okay on to the final integrated project and this one is build a smart contract in rust so for this project we need to create and deploy a smart contract using rust that keeps track of how many users have clicked a button very fun and our boilerplate starts us with a rust library consisting of unit tests and integration tests that we are expected to pass so let's get that up here nice so we can see where we need to edit our code and these are the unit tests the integration tests are in the tests directory we can see those here if we ever need to actually look at those so boilerplate already contains the necessary crates to complete the user stories but we need to import them into the code and you will be required to define structs and functions matching those used in the tests and we should only need to work in this lib.rs file so actually let's just cd into that directory cd into bold a yeah what are we smart american rust and we might as well just run cargo test lub to get this all going that seems to working well and here are the user stories not too many some useful resources about wasm and rust in general and some tips okay so let's get started our smart contract uses wesenpac to compile the rust code to javascript for node.js um we already have wesempac installed so that is fine and we'll need to build our smart contract data using it the smart contract exports an initialize function that returns this funny result so we will need to export using the public keyword to make the function public and it is a function and we want to initialize it and this function takes no arguments and it returns this new result public function initialize with an s okay so we are returning that result and what we can do for now is just say okay something and i think you see here in the user story it's this function returns a context wrapped in a js value whatever that means um this will probably help us wrap a value image s value using the from survey implementation on js valley but for now i will just continue with the api and build out ob functions so we also need to export a setclick method that accepts a js value with the context type okay so we need some sort of context type in there but it's a js value it's not context because it is coming from the javascript interface and we are returning again the results and what does this so this function also accepts a string as the second argument so we need to remember that and which is the address of the user who clicked the button so and strings across rust and javascript are relatively similar in that they're just strings so we need and i keep forgetting the fn keyword get contract account it returns it accepts a js value with context type so we can just context this value and return anything okay and this function returns an account wrapped in a js value again something that we may not know what means so let's just add some use to this i enjoy doing that because we can run the tests probably from here what is this this is just like a little rust filler function that stops it stops it from crashing or something pretty much exactly that yeah so normally if you have a um a linter going with this as well then it prevents the linter from saying hey you have unused stuff and hey you know you say you're returning this but you're not actually returning anything so i find the to do macro quite useful um but i remember that i actually need to import resin bind in and we can use the prelude to get all of that fun stuff that we've used our js value in jsera and yeah let's run the tests with this and just see if we pass any of the integration tests but it looks like we erroring out because of this so when in doubt to do i guess so so we are still not compiling because we need to actually define the account and context structs which we have definitions for over here so your library should export a struct named account so let's just do that yeah so struct account and it has the following fields total clicks and that is a u64 as well as clickers which is a vector of strings and these will these strings will be the addresses of the clickers other than that we need context and that has a base account field which is an account easy and i think we need to make these public vector that's just an array or what a vector it's yes it's it's a list but it's it it's pretty much an array but more specifically it's dynamically allocated so you don't have to know the the size of it beforehand sounds good okay let's see if that makes the compiler happy enough no it does not why ah okay so we need to do some more imports in order for us to what's the word crossover between the javascript and the rust or in this case wasm interface we actually need to serialize and deserialize the structures that we have so we are going to import d serialize and serialize and then from there we need to annotate our functions that we implement the we derive the traits for them so we can use the attribute and derive serialize and be serialized for both of these okay i wonder if that is enough one day we will pass these tests okay it looks like i actually need to spell correctly okay so we we are passing something so it's useful to know we have here some unused variables and we are passing all seven unit tests excellent so let's move on to just do the integration tests and that is wesmpac test firefox headless and you can run this in the browser but it just outputs the exact same information that goes in the terminal here so you might as well run it headless and while that's going we can see what else we need to do here so at some point we need to deploy the package using node node deploy.js so using the script and we need to pass in the path to our package directory and we should run node node smart contract passing in a contract id set click and clicker name to add at least three clickers to the contract okay we'll get to that later right now it looks like we just have a bunch of wasm errors probably because we are not annotating our functions that we're exporting as something for asm2 and maybe now we can actually get somewhere with these tests although we're technically still not returning anything so where's them will complain we can for some more of these user stories so this function returns a context wrapped in ajs value so we need to create a context here is our context so what we can do is just say let context equal context and this has a base account which value is account and we need to start this with some same numbers i would assume so we can do little clicks zero no one has clicked initially or when we initialize the contract node will have clicked and for clickers we will do an empty vector that looks about right except we now need to wrap that in a js value so we go back down here to the tips we can see this value has the from survey implementation and we can pass in a context with our context um and we want a result out of this so we just need to say okay i'll i don't have a letter for this but i remember that from certainly expects a reference to the context so we just need to little hamburgers handy is that like a is it like a return then it says okay it's the return so in rust we have implicit and explicit returns and basically if you leave out the semicolon then it's an implicit return this is standard uh basically if there's no ambiguation as to where you're returning in your in this case your functions then you implicitly return but if there is ambiguation maybe you have some other if something then you'd it's better to explicitly say hey i could actually return from location but okay you're just wrapping something into a result so it's it's just a type here we're saying that our type returns and in this case this case we're returning okay if for some reason this initialize uh some had some other logic and infinite going as we expected so in this case then we could instead of wrapping it in okay we would wrap it in error and you know we might want to do this but in this case because the function is so simple there's not actually anything going on in here that wouldn't fail during compile time there's no reason to have an error variant of the result so let's move on to something slightly more complex the set click function are we doing with this we are well i suppose we need to find out by um fulfilling the user stories in the integration tests there we go so if i go we know we want to return the context so let's just do the same thing as above let's do that over and we're not doing anything here but at least this will compile and in here we need to return the account you can see that the get contract account function it returns an account wrapped in the js value now the account is inside the context so we actually need to access the base account field and we can say let account or in this case yup netaccount equal to we'd actually first need to get the context out so i think we define context and say that this is of type context and then we can use context dot day so into sur day is derived implemented full context on a js value because we have explicitly derived it as part of the i always forget if it's serialization or deserialization when you're moving this way um but anyway and we are just using this operator to propagate the error out into a result if interstellar day fails to derive it ah sorry to deterioraze it and then we need the account so let account equal to context dot base account and we want to wrap that js value from survey and pass a reference to the account let's see if that allows the tests to run no and it's because from surday returns a result so we need to unwrap that and we can just okay so unwrapping all of these from survey calls that's not how you underwrite we can see if that tests to run no because we have something that requires sized context serialize is not implemented for js value we are not trying to where are we over here this is an interesting error um i think one of the things we need to do is in order to get the account out we are actually just taking a reference and that might be all we need here okay that wasn't it okay where's the error line 30 okay okay so we've said this and no so we need to let context equal text equal to context so they that's what it wanted maybe okay so it's running tests we passed four nice we passed another eight and then we failed some so let's look at this we are it's a lot of output here but we can see that other than the warnings we passed the four tests result to do with the initialize function so the initialized integration tests we're passing those he said click we are passing all of those which is surprising oh no we are failing this one so it needs to push clicker and increment total clicks so what we need to do is we need the account out of this account equal to you want to mutate this because we need to increment the clickers context dot you want base account and then we need the account dot total clicks it equals one that's plus equals one and we need to push accounts dot clickers push the address so that should be all we need there and now let's see if we pass any more tests with that you can't borrow this as mutable because we didn't declare it as mutable that's why we did that there it is shouldn't need that okay some more tests passing initialize past all of those tests set click we increment it and we push it okay so what are we fading nothing is that all we needed well let's find out by running the test here okay so we passed the unit tests there passed initialized integration tests set click integration tests get contract account integration tests but we have not yet deployed our smart contract so let's do that by running node node deploy.js and the path to our package directory okay so we need a package directory how do we do that we need to build it first so we need wax and pack and we have any more information about that build your smart contract with node.js as the target so we need to wasn't back build and to pass in node.js as the target and click return this doesn't crash okay something's happened it says that your wasm package is ready to publish at this location so if we just double check yes the package is there what we then need to do is just run that node node deploy face and the path to the package is uh just it's just packaged i think okay we hit that and we get a bunch of errors maybe we need to point it to the file we can drop directly oh yes oh a smart contract in rust dot yes okay that's done something um let's what would the wasm file be the contract so the fun thing about bull building the package like this using wasm using ryzen pack is that because we are interfacing with the javascript api uh you can see with the js value here we need more information than just the wasm we need to do a whole bunch of memory allocation and stuff and that's done in javascript so that when we import the package it's we can import it as javascript and the javascript code then uses whatever wasm webassembly um module in order to import the instance here and then reexport it you can do this manually but as you can see there's actually quite a lot of stuff that you still need so and that's only because we're interfacing with the javascript okay if we weren't then we could just run and use the dot wasm as your yield average by byte code um so we've deployed that if we run the test we pass that it's deployed and you should add at least three different clickers to your contract state so this we need to run this command to add at least three clicks to the contract so let's do that node node smart contract.js the contract id we can see here that the smart contract deployed with id0 so let's add zero and we want to set clicks so we pass in the name of the function which is cyclic and the clicker name let's add tom and i think what we can do is we can view our blockchain in node data blockchain so we have here clickers dom nice we can add another clicker let's add myself that done that's mind another block and the clickers are now turtle clicks two and clickers tom and then let's add a mud another block so that should be it yes excellent