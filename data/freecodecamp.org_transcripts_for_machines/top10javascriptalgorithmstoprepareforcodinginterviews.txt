this course will prepare you for elite code style coding challenges you'll learn 10 important JavaScript algorithms interview questions to help you Ace your coding interviews mkar from coding monkey created this course he'll help you build a strong foundation in JavaScript algorithms and Tackle leak code problems with confidence hi welcome back to coding money in about 2 hours we'll work on top 10 JavaScript algorithms for beginners that will help you prepare for lead code problems these coding problems are for absolute beginners and these are meant to help you get better at coding and at the same time uh prepare you for your coding interview at Big tech companies like Google where the starting salary is $191,000 I have a bonus for you at the end of the video make sure you don't miss that so let's get started we'll be reversing a string and also an integer this is a very common coding interview question one way or the other you'll be required to reverse a string or integer as part of your coding interview challenge so let's get started all right so we got two coding challenges in this video we need to reverse a string and then later we'll reverse an integer we'll do the uh string first because once you know how to reverse the string you can easily reverse an integer all you would have to do is convert the uh integer into the string do the reversal and then convert back to the integer you'll have uh the solution uh so we are given a string we need to return a new string with the reverse order of the characters here are some of the examples uh pause the video right here and give it a try all right thank you for trying to solve this problem if you are not able to come up with a solution uh no worries at all I'll give you one possible solution to this problem I'll start off by creating a variable called reversed I'll set it to empty strings I'll do something with this uh variable and then uh return it at the end so what do you think I should be doing to this variable in order to uh reverse a string like coding money um so obviously uh you would have to Loop through each character of the string one by one and add each character to this reversed um variable but the next characters that you would insert you would insert before that so we will be doing something like this one by one to each character as you can see we'll have something like this at the end so to do that we need a loop and I'm sure you're all familiar with the for Loop so we'll do let I equals to zero I less than Str str. length I ++ and all we have to do is set reversed equal to St Str DOI the current character plus add to the previous ones reversed reversed and at the end we're just going to re uh return the reverse let me run the code to see if it works so here I'm going to call the function coding money as you can see it is revers vers the string for us so this is a solution but as you can see for this uh traditional for Loop there are many moving pieces like you need to set a variable here you know you need to check for the condition and you need to set the incrementer here so there's uh there are many areas that things can go wrong so my suggestion would be to use the uh newer um JavaScript syntax you can do the same thing as let car of Str Str and all you have to do replace this with the car and if I save it and I try to run this again you see it does the same thing but this is much cleaner there's even an easier way uh to solve this problem the reason I gave you this solution uh because sometimes the interviewer might uh prevent you from using that builtin function people who have used JavaScript for some time they already know that there's a builtin reverse function why not use that sometimes the interviewer might not allow you to use that so I give you this solution in case that happens to you so let me copy this solution uh let me copy the whole function and save it here for your future reference uh by the way I've created a GitHub repository where I'll be posting a lot more coding um challenges um I'll post the link in the description so be sure to check that out and follow it because I'll be posting lead code problems and a lot of other coding interview challenges uh let me show you the mdn documentation for the build Buon reverse method as you can see uh this method is uh used on arrays we can only use this on arrays um however we are working with strings now so we need to find a way to convert the string into an array uh to do the reversal and then convert back the array into a string so let's do that okay let's create a variable called um uh Str to array so the way we convert a string to an array is by using uh method called split uh so if we don't pass anything it's going to uh split each character in the string into uh an element in an array so once uh we have that we can just call the reverse method on Str Str St R2 array we can call the reverse function this will reverse uh the array but we need uh to return uh a string so for that case Str str2 array we need to join it how do we join it the same way that we use the split we just join back the elements in the array into a string so if I wrun run this as you can see we'll get the same output we can even minimize uh this syntax this code we can write all of this in one line uh because of something called chaining in JavaScript so we can change chain the whole thing in one line so how can we do that so let me remove all of it and return so so I'll get the input string I'll call split onto it to convert it into an array then I can call reverse and then I can join it back and this is the reverse string and if I save it run it we get the same output so with this new knowledge that you have of a string reversal you can easily reverse integers uh so this should be very easy I highly recommend you pause the video right here and give it a try thank you for trying to solve this problem I hope you were able to find a solution I'm sure uh if you did try this uh problem you came across the edge case where you have a negative number as the input and you would have to return an negative reversed uh number so we're going to take care of that now there are many ways to solving this problem I'm going to give you one possible solution so I'm going to create a variable called reversed so um you already know how to convert a string uh so we need to convert the integer into a string and to do that we can use in. to string method and then pretty much do the same thing we did for the string split it into uh an array uh now run the reverse on the array why we're uh converting it into array because the reverse method only works on the arrays and then we will join it back join if I return this and I let me run this function um 15 as you can see we're reversing it and we returning a string this is not an integer we need to return an integer and also we need to uh for example if I run it with 15 uh you will see that the sign will come after the number uh this is not correct so we need to uh first of all convert at the string into an integer and the way we're going to do that is by using pars int okay and and then we need to multiply this with uh a a positive one if uh if it is uh a positive number and if it is a negative number we need to convert this into for example a 1 so uh we already have a function for that it's matt. sign and we need to provide the input string n so whatever the sign for this uh input is we're going to use that over here uh so I'm going to pass the input string over here and now if I run the code you should get uh the correct uh negative uh integer in the Reversed order we're given a string we need to return true if the string is a palindrome or false if it is not P what is a palindrome palindromes are strings that form the same word if it is reversed for example kayak if you reverse this word you'll get the same word so uh we need to return true in that case similarly Madam if you reverse it you'll get the same thing however for coding money if you reverse it you'll get something like this and this is not equal to this therefore we need to return false so we already know how to reverse a string um if you do not know how to do that you can watch the last video I uh would like you uh to solve this problem pause the video right here and then come back uh we will work on one possible solution all right I hope you were able to find the solution for this problem if if you didn't uh don't worry we'll uh work on it right now uh so first of all we need to uh find the reverse of the given uh input string so uh we'll create a variable called reversed and we'll reverse the uh input string Str Str um um we'll call the split function on it why because we we need to convert it into an array why because we uh need uh to run reverse function on it and this uh function only works on the arrays and once it's reversed we can join it uh like that uh turn it back into a string so now we have under reversed um of the input string and we need to check for it now so if the input string is equal to reversed then we need to return uh true um otherwise if it fails then we need to return false at the end let's run this function to check uh run the function to see if it works so I'm going to say pend Drome uh I run it with kayak first uh let me save it and then I'll run yeah so uh it's working fine I'm getting the desired result which is true let me try with uh coding money we should get false in this case as you can see uh this is working fine and it's a very easy um problem um and the videos that the future videos will build upon the knowledge from the previous videos so expect that the next videos to get U more difficult so we can um we can write all of this in one line line we can do the comparison right here we can get rid of this and do the comparison right here like this and this will still work let me run it see it's working fine uh I'm I'm going to give you an assignment homework uh you can come up with a solution um there's another technique called the two pointers technique if you want to learn about that do some research uh find out what it does and try to solve this problem with the twopointer technique or there's another uh JavaScript builtin method called every you can use that to solve this uh so when you do it just paste your result in the comment section and you'll get a thumbs up from me today we're going to work on a very common uh coding interview question uh given a string return the character that is most commonly used in the string uh example uh if you're given a a string like a b c c c d then we will return the character C because C is the most commonly used character in this string and as you can see in this uh second example you see one is repeated the most and this string therefore will return the character one uh not the number one so um once you um learn how to solve this problem using the technique that I'm going to give you in this video you'll be able to solve variety of other common string questions uh for example what is the most common characters in a string does a string a have the same characters as string B anagram questions does the given string have any repeated characters in it these are some examples of the uh problems that you would be able to solve uh by using the method that I'm going to teach you in this video but first I would like you to give this problem a try I'll be right here pause the video all right welcome back I hope you were able to find a solution um if not uh doesn't matter we'll work on it right now um just by looking at this problem um we uh know that we need some kind of a data structure to keep uh the count of uh each character in a given string so we would need a character map let me give you an example something like this A1 um B one and see not sure how many like about seven and D1 just um something like this we need something uh like this okay so to come up um with something like this we already have a data structure in JavaScript called um you know object JavaScript objects are like this um we can also use another data structure called Maps which is um something new um but um we'll use an object um in this um case so um but how to uh do this how how can we uh of course we would have to Loop over through each character like one by one in a given string and try to count it and then store the values in this object okay so let's get started uh of course we would need an object so we will create an object called character map car map and we'll set it to an empty object okay and now we need to Loop over the string we we need to Loop over uh each uh character in a string and um and add the value to the character map um so to Loop over a string or an array we use we can use the same syntax um for for uh let car of s Str uh Str Str is the input so we need to see uh we need to see if there's already a value in the character map if there is then we need to increment the value if for example if there's no entry for a we need to create an a new entry for a and set it to equal one I mean the first time we set the value we will set it to one and then um uh if we come across the same character we need to increment the value so to do that we we'll check the character map for that value if there's the if we have the character uh in the character map then we will we'll increment it by one if you don't have it then we'll we'll set the value as one okay like for example how how would this uh how this Loop would work um it's very easy so we're going to Loop over each string and so so for example when we are at a we'll see that if there is uh a in the character map no there is not so we'll set a equal to one all right then it goes to B uh do we have B in the character map no we don't have it so we'll set b equal to one so the else part will run um so when it comes to C do we have C in the character map no so we'll set it to one and then again it will come to C do we have C in the character map yes we we have so increment by one so it will become two and it will again come to C C do we have C yes we have so we will increment by one so it will be three it will keep on doing this and un unless until we have the character map with uh um with the count of each character in in our input string so we will have that right just um to be sure let me return it uh to say that our character map is working so let me save this um let me run this okay we need to call the function so let me call this one I need to save it and run it as you can see we have created uh our character map with the count of each character um in the input string so we have something like this as I was showing you in the example before now this this is object right we need to Loop through uh the object uh to find um which one uh is uh the most commonly used uh character in the string so I'll I'll show you two ways of uh looping the objects one way is uh old uh way of uh looping through an object um and I'll give you a newer way of looping through object which is much easier um so let me uh first of all give you um uh the older syntax and the way that we Loop through the object is by converting it into an array and how we can convert an object into an array is by using something called object. entries and passing uh the object in our case it is character map so to Loop over then we we we have uh it will return an array with the keys and value just like in our character map these are the keys and these are the values that we created earlier so um we need to use a for Loop to Loop through this array now so for that we say for const uh destructure it so I'll destructure and get the key and value from this array so of object. entries like this and then yeah so this is how we're going to Loop to through uh you know an object by convert converting it into a c let me show you H how it looks like so let me uh uh let me console like this so we get we get key and value so let me save this and run it see so we get the the key and the value this is uh this is the output from this loop as you can see so we get the keys and values okay all right so now what do we need to do we need to find which one is the maximum like we need to find uh you know uh give an instruction to the computer to find uh C like the the we can see like we humans we can see that this one is the most commonly used character but we need to tell the computer to find this one so to do that we need to um check each one we need to check each one of these to see which one is the maximum and to keep account for that one we need to create another variable called Max and uh set it to zero and also to get the character uh the max character we we we'll need to create another um variable and set this to uh an empty string so now now we'll just uh check for a condition like we'll see we'll say if if value oops if value is greater than Max so we'll see like the first one if is this greater than Max which is zero yes then we'll set this Max to the value and um and Max jar to the key right so this will Loop uh loop through each one like this will uh first of all it goes takes a see is this greater than uh zero yes then it updates the value for Max and Max CH to a it comes to B is this greater than uh one because it's been changed to one yes it is no it is not then it skips that it comes to C it see it sees that whether the value which is um seven greater than one yes then set the value to seven Max to seven and uh set max Char to the key which is uh what C and return what we need to return the max score let me save this and run it all right so we are getting the correct output from uh our code this is a working code but now we're going to try to uh optimize it a bit and I'll show you I said I'll show you a newer way uh an easier way to Loop through the objects all right so we can use uh a similar syntax that we used to Loop through the string we can use this uh syntax to Loop through arrays as well uh so we can use something like this for the objects as well so how uh can we do that there just a small little change so we can say let let key of um car map as you can see this is exactly same syntax but we can't use uh let key of uh uh object which is a car map we cannot use that for the objects the change that we need to bring is we need to change off with n uh so this is a bit uh opposite of each other so when you want to Loop through the arrays and strings you will um write off um and O starts like object starts with o so that's not what you're going to use for uh objects you will use n uh for the objects so now um here uh to check the value we need to say jart map key okay for the value this is how we're going to write it and so for the key we just write key over here uh let me save the code run it again okay we are having a problem here uh as you can see uh it's case sensitive so we need to be careful with naming um with um our code so let's run it again see we're getting the same output but this one is much nicer cleaner code and um you know you need you just need to remember very few things to um you know be able to Loop through the objects uh however the earlier example had like you need to do remember object do entries and then you need to remember to pass the object into that um method so this one is much easier this this is my personal opinion also we can refactor this code to make it much uh smaller um so we can convert the same code in just one line of code so here we can say if character map okay and if there is a character map then we will add one to it or if it does not exist exist then we'll what we will do is we'll just uh uh you know use one so let's see okay let me save it and run the code as you can see this looks much uh uh you know cleaner and short as you can see we just convert the F uh you know statement into one line of code uh you can do this like even uh if it is too much to do like plus one you can do something like Plus+ character map or one so if you save it and you see our code is working fine let's run the other test case should get one yes it's working just fine we are given an array and a chunk size divide the array into many subarrays where each sub array is of length size for example if you're given an array with elements of 1 2 3 4 then we need to divide this array into chunks of length two for example the output should be an array containing sub arrays of length two here are some other test cases and examples for better understanding of this problem I would suggest you to pause the video here give this problem a try all right thank you for trying to solve this problem uh we're going to work on one possible way of solving this uh coding challenge um the first thing uh that I do when I get a coding problem is that uh I use the divide in conquer technique where I get the problem and divide it into smaller problems so the first problem that I'm uh looking at is to be able to figure out how to get the first two ele elements from this array how to get the chunk of an array right so let me run uh the function uh and run this first test case over here so what I would like to do is to get the first two elements from this array and the way that we can do that uh is by using a builin array function called slice let me open up the mdn documentation it says the slice method returns a shallow copy of a portion of an array into a new array object selected from the start to the end end not included where start and end represent the index items in that array the original array is not modified so let's uh let's use this to get the first two elements so the way that we can do that is array do slice the arrays are um zero indexed which means the first element is zero then it is one 2 and three like this so to be able to get uh the first two we'll provide the first index which is zero and then um the second index is two so in this case we we have this two so this is great we can use the size here so uh let me return this and see what we get in the output yeah so we get the first two elements from the array so now we solved the small problem that will C and hand handy in solving the bigger problem right so now we know that we need to return an array right so we would uh need to create an empty um array here uh let let's call it result so and at the end we will return this result okay um we'll return this result but first we need to get the chunks from array and um push it in this array right so um so how we can do that we can do it like this result. push and we can put uh we can uh push uh this uh chunk inside of this array the empty array that we have created however this will only push uh the first two elements let me save this and if I run it you will see we only get the first chunk however we're not getting these other two so we need to repeat this and we need to a variable to keep track of the index right so Let's uh use a variable called index and set it uh to zero so instead of this zero we will use this variable okay and we need to repeat this code this line of code uh for all the elements of the array as long as there are elements in the array we need to keep on repeating this so for that we will use a loop uh so when you want to repeat a statement or code uh that's when you would use Loop so I'll use a while loop while index is less than the array. link as long as there are elements in our array we want to keep on executing this line of code right but this will run forever this will be an infinite Loop because we're not doing anything to make this uh stop right um and uh this will keep on running forever we will we need to increment the index we need to increment the index we need to make sure that when uh the index is greater than the array. length then it should uh exit the loop so how can we do that we will increment the index with size right and so this will start from zero to and the next time I would like to add a index with the size so that the next time it will get from two it will uh start from two to uh four right here but since in this example we don't have the uh fifth element which is going to be index of four we don't don't have that so it will um not this uh function will not take uh the slice function will not take the end as we read in the documentation so in that case we will have three and four so let's save this and run the code as you can see now we're getting the correct output so let me try to run it with this uh example and see if it is going to work for this yeah so we're getting the correct uh uh result and um that's the solution for this coding problem that's only one possible solution there are many ways of solving this problem if your solution is different than this then it's not a problem as long as you're getting the desired output we need to write a function that accepts a string the function should capitalize the first letter of each word in the string then return the capitalized string here are some examples I want you to open the five tile case. JS exercise file and uh give this problem a try pause the video right here thank you for trying to solve this problem um every time I get a coding uh problem uh what I do is use the divide and concrete technique to divide the problem into very small uh problems so that it easier to find a solution so here the first thing that I think we need to figure out is uh to change uh the case for the strength to make it an uppercase so let me return um Str Str uh to upper case this is the function that we will call on the string to change the case so now you can see it's all capital letters right however we would need uh only the first letter of each word to be a capital not the whole sentence right so um what we need to do is to um to uh break this string to split this string into an array uh with each words and how can we do that so let me say const let me create a variable uh words and I will call uh split function on the string and I'll provide a space so what I will do is I will um split this string based on the spaces so this will uh become like something like this now that we have all the words what we can do is create um um create another variable called result right and set that into an empty array and we will capitalize each word and push it into this array and at the end we will just return this result okay and to do that we need to Loop over uh the words so we need to Loop over the string right with uh each word so uh we can use a for Loop for word of words so now we have access to each word and we want to push that result. push we want to push that word into this result array and so what do we want to do we want to get the first letter of the word and how can we do that like this so so for each word like the first time it uh Loops over you'll get this word so you'll get this word so the first letter that you can get it by you know like doing like this okay so this is the first word but we need the rest of this uh characters uh to be added to this word so how can we do that so we need to add that uh if you watched the last video you know how to use the slice function so what we will do is we will call A Slice on the word and we'll start from the first position all right as you can as you know that uh strings and arrays are zero index so so this would be 0 1 2 three so we got the first letter however we want to to add the rest of the letters so we'll start from the position one so it will take all of this and add it here right so once we um capitalize each word you will go the loop will go through each word each word like this one by one and capitalize the first letter and add the rest of the uh characters to the word and so we will have all the words in the array so let me save this and uh run the code you will see that okay so it's not been capitalized because we haven't called it to uppercase uh uppercase function on onto the first letter so let's do that and run the code again now as you you can see each word in this array is capitalized uh but this is inside of an array so we need to join join uh the elements in the array into the string based on the space right so I'll save this and run this again this is the correct output and this is how we capitalize the um sentence um and if you don't like creating a new array and adding it uh adding each word into that array and uh returning the result we can even uh minimize all of this work by using um uh map method um so we can call map on this words so uh we can get rid of all of this we can call the map function and we'll get access to each word right and the same way we will get access to um the word we'll get the first letter we'll change this to uppercase We'll add rest of uh whoops call the word we call Slice on on the word and add rest of the characters of the word and then we'll join with the space and return the result uh let's run it see this is another solution so you got two solution for this problem we no longer need this variable so we can remove this check to see if two provided strings are anagrams of each other one string is an anagram of another if it uses the same characters in the same quantity only consider characters not spaces or punctuation consider capital letters to be the same as lower case here are some examples if you provided two strings one coding money and the other money coding it should return true because it uses the same characters and the quantity of each character is the same therefore it returns true same is true for this other example rail safety and fairy tales are anagrams of each other because they use the same characters in the same quantity uh of characters are uh present in both of these uh strings we will not consider exclamation marks or um special characters or spaces um so uh this is the challenge for today uh pause the video and give this problem a try also if you want to follow along check out the GitHub repository at this URL all right so I'll give you two possible solutions to this coding problem um the first solution consists of three steps and the first step will build a character map for string a then we'll build a character map for string B and this in the third step we'll compare both of these character maps to see if they're equal to each other um if they're not we'll return false so let's start by building the character map for string a to do that we need an empty object let's create that let's call this car map a and set that to an empty object and also we need to remove uh space in uh punctuations uh exclamation marks and things like that so I'll do that now string a. to lower case and to remove the uh the punctuations in spaces we would we'll use a regular expression make sure to use uh backs slash capital W this will match um all the uh special characters um the space and punctuations um this is a a character set brackets represent the character set and this capital D represent anything that is not a word which is different than the small uh W if you use a small W it will match all uh the words that is in a character uh it will not match the punctuations so we'll use capital d to replace that okay so uh to show you um uh let's return uh this string a let me return it uh save this to see the output of um our clean uh string so as you can see um this is the string a it has space and exclamation marks uh but after this line of code it removed the exclamation mark in spaces and this is the output that we get all right so let's uh create uh now uh um the character map so um we'll use a for Loop so for let car of uh string a and uh so we'll say car map a. car let's see car map a if this character already exists if it exists then increment it by one if or if if it does not exist then I use one okay so this will create uh the character map for string a let me return it to see the output of what we get here so return C R map a save and run so you see we're getting the character map for string a uh so as you can see it's counting each characters for example we have one R 2 a 1 I one L so on so we created the character map um for string a we need to do the same thing the same exactly same steps uh there's a principle in uh software development uh do not repeat yourself so if I write the same code over here it's repeating myself writing the same code again and again so um at this point it is uh a good idea to create an hel uh method another function to uh um to create the character map so I'll call this new function function all call it character car map I'll call it car map um and it will have St strr and I'll just um what I'll do I'll copy this code I'll paste it here right so return car map uh so uh let's do something remove these things so that uh we can reuse use it with anything so I'm just going to uh change this to S strr because this is the variable that we're using here Str and then Str Str okay remove the a from here and so I'm going to save this uh what I'm going to do is here for correct map a I'm going to use Cor map and provide string a to this one string a and let me return this map a to to make sure it's working fine so yeah so this is working fine and the now the the best part is that we can reuse this to build a character map for string B so uh I can copy the the statement and paste it right here uh we I'll rename the variable call it B and here I'm just going to change string a to string B because this is what we're using as the parameter and now so we we have uh the character map uh we build the character map for both the uh string a and string B now we need to compare uh compare both of them first of all let's compare the length of uh um both the characters uh so to do that as you can see in an object we have keys and values as you can see R is the key and uh one is the value a is the key two is the value right um to um get the keys to get all the keys we can use um object. keys and we can provide U the string like that so let me return this return object. keys so that you see what would be the output now so if I return this uh object. Keys oh sorry I have to provide the car character map uh car map a so let me save it so so you see uh these are the keys it it returns all the keys uh for me from the uh object the character map of of string a so what I can do is I can uh compare both of them by using an F statement I can say object. keys provide car map a u uh and to find the length because this uh object. Keys convert uh into an array and then you get get uh the keys in an array so on the array we can use Link to to check the link and compare that with uh object. Keys car map B uh do length so if the length of these two um um keys do not match then then we'll return false right so if our uh character map a does not have the same uh Keys uh as the character map B then obviously we know that this is uh going to be false this is not going to be an anagram now we need to Loop uh both of these character Maps so we can Loop over over any of them we can either choose a or b it doesn't matter so I'll use um character map a so I'll say let key uh n uh car map a uh now you see that we're using n you see let key n uh when we working with objects and we want to Loop through the objects we use n and if it is an array then in that case we'll use off so now now we're using let key in character map a and then I'll use comparison I'll do if um car map a key is not equal to car map b key if the key in character map a is not equal to the key of the character map B uh for example if we have for example one R in character map a and we have two R in the character map a b and if they are not equal to each other then in in that case we know that this is not an anagram therefore we will return false right so if this check passes and this check passes and we can't find anything that is not equal to each other then it and it means that it is an anagram and both of the characters in character map A and B are equal uh so this means that we have an anagram so in that case um we will return true so let's save this and let's run the code to see if it is working or not as you can see this is not working uh why this should return true um why it is not working so it is returning false we have to find what is the reason so oh here this is a big mistake that I'm doing I am checking that if they're equal I should check if they're not equal so this should be like like this they should not be equal to this in in that case we would return false all right so let's uh save this and run the code it should give you the the correct output this time let's um try with another example so let me try with this all right let me save it this should return true the last test case let's try with this one copy paste save it okay and now it should return false this is uh working this is the first solution to the problem let's work on the the easier and and very intuitive uh solution to this problem all right let's work on the second solution I said I'll give you two solutions and the second solution is uh uh is much easier I'll show you one small little trick it will make it a piece of cake so let me copy this uh one for your future reference I'll copy the solution as well for you and I'll copy it I'll paste it here I'll comment it out okay and now let me get rid of this so now I'll just get rid of all of it right so now what we will do is we'll sort a string a and string B once it is sorted then we'll get the it will make it much easier right so let's do that uh so let's uh sort string a string a uh but you uh know that the S function is only possible on array it cannot be done in um on the string directly so we need to convert uh the string into an array but before doing doing that we need to uh change this to lowercase lower case and also we'll um do the regular expression the same regular expression uh that we did to get rid of the space and punctuations all right so once uh we got rid of that I will call split function split function on it and then once uh I have changed this to uh an array I can call the sort uh method and once it is sorted I will join it back like this so let me return this to see what we get let me save this return as you can see uh this is High there right so this is string a uh so we can do the same thing for string B so let's uh create another function to do this uh to make it easier because we know about the software development principle do not repeat yourself we do we will not repeat ourselves therefore we'll create a function uh I will call this function clean um Str Str and I'll provide this string uh as the parameter so what I'll do is I'll just uh cut this from here I'll paste it here return sorry return and instead of Str string we need to use the same uh input parameter name or the same thing like this okay so now we can do the same like we can return uh clean St Str provide a string a and compare this to clean Str Str string B so now when we do this uh we'll just compare this will this is a conditional uh statement um if it is true it will return true if it is false it will return false so let's also try with another example this one uh copy paste save run it we are getting the correct output uh this is uh the second solution as I as I promised to give you we need to write a function that returns number of vowels used in a string what's a vowel uh vs are the characters a e i o u here are some examples uh so we need to count the vowels um i e e so there are three vowels we need to return three and second example how are you we have five wows so we need to count the vowels uh in a given string uh pause the video give this problem a try all right so I'll give you two solutions to this problem uh I'll give you one solution with the regular Expressions that is the easiest and um a lot of interviewers might not like you to use the um uh the regular Expressions they may not allow you to do that so I'm going to give you another uh solution uh just in case so with the regular expression is very easy um so we have builtin function called match which we can call on string which is the provider string so we can call match and then we will provide a regular expression so what regular expression we will provide here we'll um use a character set of a e i o u right and then we need to provide two flags G and I why we providing G because uh by default if you do not have G over here it will stop at the first match that it finds for example if it finds a so it will only uh return the the first match when we have G it will not stop at the first match it will go for uh forward and it will find any character that matches uh the um letters in this character set and the I is for case insensitivity so it will become insensitive to the case even if it is a capital letter it will still work so so um this one the match uh method returns um null if uh there are no matches if uh there are any match it will return an array with all the matches so uh therefore what we'll do is create a uh variable called matches and uh and store the result of the matches inside this uh matches variable and we'll return matches if there are matches we will return the length we don't want to return the match because as you can see in the examples we just need to return the count of those vowels so we'll just use a length because on arrays we can run we have a property uh called length and it will return uh the length of that array and if there are no matches we can return zero so in that case uh uh I'll save this and I run it as you can see for coding money uh the in the example we have this is returning the correct result so this was the first solution with the regular expression all right let's work on the second solution to this problem uh so the idea is we'll create an array with all the vowels inside it so um then we will check the strength against uh the values in the array uh to see if we can find a match if there's a match we will use the counter variable to increment and then at the end we'll return that counter variable so uh let's try to do that so let's create um an array called uh um um vowel check and so what I'm going to do let's try to copy from here so I'm just going to copy the vowels and this array so now we have all the vowels uh right uh oops sorry I try to use the camel case uh okay so now I also need a variable called count and I'm going to set that to zero uh and then I'm going to uh run a loop for uh let um car of s strr okay I'm going to have a logic inside of this Loop and at the the end I'll return the count what I'll do inside of this loop I will check to see if the characters in The String is a vowel if it is a vowel I'm going to increment the count variable if it is not a Val it not do anything and so at the end we'll just return the count okay uh so the loop goes uh each character one by one like this right so in this example we have coding money it um the first uh iteration it will check for C then uh o d i n g so um I'll say um uh so the arrays have a builtin helper um function called includes um that's also available on this strength but in our case it's better to use an an array it's more structured and organized so we can say um if vowel check do includes okay if the vowel check includes the character from the string so if it includes character so in the first iteration C if is C inside of this array if it is uh um uh uh if it is not then it will just um skip uh this line if and the second iteration it will come to O So it will uh check to see if o is inside of the vowel check if it is then we will increment the count variable so at the end we will return the count so let me run it and the example we should get the four so let's see as you can see we're getting the correct result this is another solution to this problem uh one more thing before you go uh you can just add uh two lower over here uh to make sure even if the provided string has uh capital letters or small letters it will still match our JavaScript training algorithms for beginners would not be complete without the classic fizzbuzz challenge you need to write a program that console logs the numbers from one to n but for the multiples of three print Fizz instead of the number and for the multiples of five print Buzz for the numbers which are multiples of both three and five print fiz Buzz here's an example uh I would like you to try this problem and pause the video right here thank you for trying to solve this problem I hope you were able to find a solution if you did not this doesn't matter we'll work on it together the whole trick to solving this problem is using the module operator if you haven't use that before we'll use it right away okay of course we need a loop right so we'll start from one I let let I equal to 1 because it's given in the directions and the condition that we need to satisfies I less than or equal to n and then I ++ okay so the first thing that we would need to do is to check for if the number is a multiple of five and three if it is uh so how to check if a number is a multiple of uh three we use the module operator so we can say I uh the module operator is the person sign um if I is um if I modu 3 equals to uh zero it means that if the um if I is divisible by three completely and it does not have any remainders then it means this number is a multiple of three okay and so I also need to check if I is um um a multiple of five if if I is divisible by five and it does not have any remainders then in that case we need to write phase Buzz right else if if I is um multiple of three and if I is divisible by three and it does not have any remainder after the division then it it means that this is also we use the module operator every time if you need to do like for example every third time or every second time in in a repetition uh so that's how like I'll show you uh now in the example okay so in that case if it is um multiple of three we need to print phase so console. line pH else if I is multiple of five we need to write Buzz console. L else console. L the number I okay let me save this and run the code as you can see I provided the number five here to the function and as you can see that I have the number one two and then it says phiz and then I have four and then it says Buzz okay let me try with a bigger number like 20 okay let me save it and run the code as you can see so like I said if a number is a m multiple of three then it means then it means that it will repeat every third time you see this is the third you know every third time we have fiz every fifth time we have buzz and every time that the number is divisible by three and five and there is no remainer to to that number like for example 15 we write fiz buuz okay that's the solution to the classic fbus challenge we need to write a function that accepts a positive number n the function should console log a step shape with n levels using the pound character make sure the step has spaces on the right hand side here are some examples the uh function accepts and number and if we provided with number two this should be the output okay so give this problem a try and uh pause the video right here all right thank you for trying to solve this problem if you were able to find a solution that's great if not it doesn't matter we will work on this problem together I think first uh we need to focus on printing something like this uh it would be easier for us to print something like this and then we will worry about the spaces later let's do this one and then we'll take it from there uh as you might have already guessed we need a loop so I'll write the for loop I uh equals to 1 I less than or equal to n i++ okay so one thing um I've noticed the beginners are confused about whether they should start from one or zero if they want to start from zero then I'll make sure that the condition is I less than n but if they want to start from one then the condition has to be I less than or equal to n so that's important to note uh for now I'm just going to console log the pound sign I'm going to save it and uh run it as you can see we get the three pounds uh but we need nine uh pound symbols three on each line okay so um to do that uh we would need to use a nested loop I noticed that the beginner developers find working with the um uh nested Loops uh difficult they struggle with it I'm going to give you way uh to make it easier if you visualize uh what you want to do in terms of uh a table containing rows in columns it makes it a lot easier uh so let's uh try to do that uh I'm going to rename my variable I'll change it to row and then I will create nested Loop and I'll make this a column so the nested Loop the outer loop will be responsible for the row and the enter Loop will be responsible for creating all the columns in that row so if you think about it this way then it would be much easier to work with the nested Loops from now on okay so let's console log here just to show you what you get as the output as you can see you're we're getting 8 pound symbols in the output uh but we would we need only uh three pounds on each line so it's it's going to be a 3X3 uh pound symbols um and we need that in the output okay so how to do that okay uh so I want to create all the columns I mean I will I want to create an empty variable called line I will set it to empty string and what I'm going to do I'm going to append app bend the pound symbol to this line so after it completes it adds the pound symbol for all of the columns for that row I want to um console log. line okay let me save this and run as you can see we're getting the desired output right all right so the best way to visualize the code that I've written here so far uh by debugging it so let me run the debugger I have set a breakpoint on the first Loop let me uh let me watch for some variables let me watch for row and call and line okay and let's run this okay so the outer loop starts at one and then we initialize the variable line to empty uh string and then it uh executes the enter Loop it starts the enter loop at uh one column one and then it appens the uh the pound symbol to the line variable uh then it will increment uh the column to two and then uh it will append another pound as you can see and then it increments to column three and since we're provided with a number n you see n is3 so now we know that the uh inner loop will break H and so the row will increment now we will working on the second row and then again we initialize the line to an empty strength and then the enter Loop will run three times to a pent three pound to the line and then we'll uh console log the second line now we're working with the third line in the loop and um and it initialize the line and then we're appending the pound sign to to the line and then once row is equal to four um it um the condition becomes false so it U you know exits the loop so this is uh the code when you have trouble understanding a code it's always a good idea to debug it okay so now we we have we know what this is doing now we need to take care of the spaces on the right side um we need to do what let's let me illustrate that what we need to do here so we need to remove replace the for the first line we need to have two spaces on the second line we need to have one space now we need to work on getting an output like this um it will be easier for me to explain this uh on the Blackboard uh so let's get on the Blackboard all right so whenever we're working with the nested Loops it's always best to visualize it in terms of a table in rows in columns it makes it much easier to work with the problem so let's see on which columns do we have the pound symbol right we need to figure that out we have a here column one row one we have it column one uh row two um as you can see this is 1 is equal to one um column one one is less than two let's see here uh column uh two um row two we know that 2 is equal to two right and let's see this one this column three row three we can see that 3 is equal to 3 um just by looking at this we know that all the columns that have the pound symbol satisfy this condition column is either less or equal to the row all right since we figured out the condition Logic the code is easy uh so here we'll say f column is less than or equal to row then append this line append pound to the line else append space let's save it and run the code as you can see we're getting the res desired output this is the solution to the problem let's try with another number like let's try with six oops as you can see we're getting the correct uh string pattern we need to write a function that accepts a positive number n the function should console log a paramed shape with n levels using the pound character make sure the paramid has spaces on both the left and the right hand side here are some of the examples as you as you can see that it has spaces on the right and left hand side of the pound symbol whenever there's needed okay so I would like you to give this problem a try pause the video right here as you might have probably guessed we need a loop right we as you can see if the number that's provided is three we need three rows right so we need to um uh write a loop um like I mentioned in the video uh before this one uh that whenever you're working with the nested Loops is best to visualize them in the form of a table consisting of rows and columns it makes the problem so much easy uh so let me write uh the for Loop let row equals to zero um row less than n um row Plus+ that's easy right so we need three rows and for each line you see this is one line uh I'm calling each row a line right so I'm going to need an empty string so I'm going to uh um create a variable called line and I'm going to set it to um an empty string now we need uh to Loop over the columns let column equal to zero and uh column uh less than okay so we need to figure out the number of columns because it's uh as you can see for if the number is three we need five columns so uh let's hop on to the black board real quick okay so what do we need to figure out is the number of columns because number of rows is clear for if n is equal to two we have two rows if n is equal to three we have three rows right the number of columns if it is 2 N one does this satisfy the number of columns so if the number is three uh two multiply 3 is 6 1 is equal to 5 so this satisfy the number of columns so now we can easily write our Inner Loop and we can write it like um let me select the same color for let column equals to zero column is less than 2 N 1 column Plus+ right so now we need to figure out which columns do we need to put the pound symbol in right so if you look at it uh we know that the midal column always has the pound symbol so let's figure out the formula to find the metal column so if we have five columns and we divide it divide that by two we get 2.5 and if we round down this number we get two right and you can see that the two column has all of it has the pound symbol okay we have a method called math. floor and and to get the number of columns we already know that it is 2 n1 and we divide that by two we get uh the mid point we figured out the midpoint now we know that there's a few of the pound sign on the right side of the midpoint and there are a few of the pound sign on the left side of the midpoint so if you see this uh carefully and You observe it you will figure out that uh all the columns that have the pound symbol satisfy this condition and the condition is column is either greater than or equal to Mid minus row and Callum column is less than or equal to Med Plus okay so now that we have figured that out it is so much easy to write the code so let's uh hop on the visual study code and write the code for this one all right so as I've explained to you on the Blackboard we now know the number of uh columns that is two n min1 and then we get a column Plus+ all right and we also know the condition um to use uh for uh you know determining which column should have the pound symbol and that is if right if uh column is greater than or equal to uh mid uh midpoint minus row and column is less than midpoint uh less than or equal to midpoint plus row all right so we need to uh we don't have a variable mid uh we need to create that here I'm going to use the mad. floor and 2 N 1 / 2 all right okay and now uh if um this condition is set satisfied we know that we need to append the pound symbol if not we need to append space okay and right after this enter Loop ends uh we need to console log uh the line let me save this and run it cannot mix big in in other types use explicit conversion so I'm getting an error let's see what error is this I know what the problem is we need to multiply 2 multiply by n minus one and that's the same thing we need to do over here we need to multiply this uh like like this 2 multip by n minus one right so let me save this and run this again as you can see I'm getting the correct output this time um and let me try with another let's try with nine let me save it and run it as you can see we're getting a bigger paramet this time time and this codee is working perfectly I've had dreams that weren't just dreams today we need to write a function that accepts an integer n and returns that n byn spiral metric here are some examples if you're provided with an input number three we need to return a twodimensional array with the values uh in the same order as one 1 2 3 4 5 6 7 8 9 I'd like you to give this problem a try and pause the video right here this is not an easy problem I would say this is a medium to a hard problem uh if you were not able to find a solution to this problem that is very normal I was struggling with this problem the first time I tried uh but once you get the trick uh problems like this become so much easy um okay so as you can see we uh need to define a few variables like start row end row start column end column and we would need a counter variable and um also we would need to take care of the for side uh the top row we would need one Loop for the top row uh another loop for the right column the another loop for the bottom row and another loop for the left column once we so we we we would need at least four loops and once we take care of the outer uh you know the four sides outer sides uh we would need to put the four Loops inside a while loop to take care of all the inner uh four sides of the Matrix right so our first Loop would go from start column to end column and this would take care of the top R right and once we do this we would increment the start row by one so it will move down here um and then we would need another loop that would go from start row to end row and that would take care of the uh right side at the right column all right and once we do this we decrement the end column so we decrement the end column it will come over here and then we need another loop that would go from end column to start column and it would take care of the bottom uh row and once the bottom row is complete we would decrement the end row so it will come over here here and then we would uh finally run a loop from end row to start row that would take care of the left side uh the left column of uh The Matrix and then once we write this these four Loops we need to put them inside the Y Loop and the Y Loop would take care of the inner four sides so once you know this the coding becom so much easy so let's start coding I'll start off by creating a variable called result I'll set that to empty array and we need to return an uh multidimensional array so uh to create create that we need to run a for Loop for I equal to0 I less than n i++ result. push empty array return result let me run this code to say yes we are getting four empty arrays inside of this array because the number that is provided as the input is four okay so we need to have four rows in The Matrix we uh but these are empty we need to fill them with values and once we're done at the end we will return the result okay and so we need to take care of the four sides top right bottom left top right bottom left okay um to create this top row we need to run a loop uh from uh but first we need to create some uh variables the variables that we need to Define or counter I'll set that to one start row I'll set that to zero and row N minus1 start call equals to Zer and call is n minus one okay so for the top row we need to start for let I equals to start call I less than or equal to end call i++ make sure you have semic colums here and result okay so the first value that you'll provide will be for the row and the second values are going to be for the column okay since uh the the values for the columns are going to be dynamic and it will be coming from I but we know that the top row is start row so I'll do start row equal to the counter and then I will increment the counter like this let me save this and run it okay as you can see the top row is done so we need to increment the start row okay like it comes here okay let's do this the same thing for the right side this time it will be start row because it's going to be vertical comes from the top uh to the bottom row so it will be uh start row uh end row I ++ this time the value for the row will be dynamic but we know that the column that needs the values changed are going to be the end column we're going to be adding the values to the end column so and at the end once this end column is done we will uh decrement the end column so it's going to be end call minus minus I'll save it I'll run it as you can see the top row and the right column is done let's take care of the bottom row so for the bottom row let me copy this one so for the bottom row as you know that we will start from the end row uh end column and I is greater than or equal to greater than or equal to the start column and we need to decrement the value of I the values of the column is going to be dynamic but we know that since it's going to be the bottom row so it is going to be the end row and once that is done uh we will decrement the end row like that okay let me run this to see it's working fine so the top right side and the bottom uh row is done so we need to take care of the left side so for this one for this one we knew that it's going to go from end row end row it's uh start row uh we know that the values for the rows is going to be dynamic but the values for uh the column is going to be start call and once that is done we will increment the start column like this so let's run this one okay so the four sides are done one 2 3 4 5 6 7 8 9 10 11 12 right so we need to put these four Loops inside of a while loop to take care of all the inner uh four sides of the Matrix so let me copy the four Loops that we wrote over here I'm going to cut it and here I'm going to write a while loop while start row is less than or equal to end row and start column is less than or equal to end column while this condition is true you know execute this code within the body of the Y Loop which are the four Loops it will keep on looping until it reaches the end of the row and end of the column so let me save this and run the code as you can see we are getting the desired output and it's going into the right direction 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 let's try with another number like six and run the code we are getting the bigger Matrix with the correct values now you're ready to start my lead code video series you should find link somewhere on the screen to the playlist