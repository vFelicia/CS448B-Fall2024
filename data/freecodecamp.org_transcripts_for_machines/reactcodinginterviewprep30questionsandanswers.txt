do you have a react interview coming up do you just want to test your react skills this course is for you in this course nishant singh from cybernetico will teach you how to answer the most common react interview questions and if you know any other common react questions leave them in the comments to help other learners hello i am nishant and welcome to my video on which you will learn about react important concepts and interview questions provided by free code camp here we learned mostly about all the important concepts in react that are widely used in production and in development and also which are asked in an interview so let's get started now to use the map and filter we will display all the data from the api coming to this here from which api we will display all the data in this ui at the place of this one card which is returning my name and username fine so initially we are getting the data in the response in the console let me show you what i mean open the console let me have this let me show you this we are getting all this data here so first step is first step to do this here is to create a variable and in react variables are simply called states so i mean we call them states because they can change the property so let me create a state or variable called users which is a variable name and to set the data we will have this set users function and in this use state we will have to use an array because all the data is in an array see followed by objects so let me store them here save this and let me just now use the map so to use the map function we will just we can just use first the array name which is called users users dot map then it takes a parameter called user and from this parameter we have to return the html wait something is yes now fine which is called we have to turn some html called div or anything you want yes so see here we have the data like id name username email address all the data so this name username email they are called keys so to show the keys sorry so the values which are this lingaram bread all the data we have to use the value so to through the value we will just use user dot name but let me copy this card inner and paste it here then in the p tag i will just say user dot name and here we will just we will say user dot username username let me see the correct key this is small username find save and see all the data is now being displayed here from this api so this name is called the key and the lien graham and bit is called the value now because the object exists in key value pairs all right so that's how map works now let me give you another example of what we can do with map let me create a function here say map data data it's done it's a function then let's just multiply the id with two because it's a number so how to do that we will just first use the users first let me create one more array called let's say mapped array so in this array so i mean this this map if you are mapping any array it will return a new array not the previous one because it's transformed so let's say we want to multiply the users by two i mean the user id so we can do this user then we can say user dot id multiplied by two now in this area of mapped array all the ids will be multiplied by 2 so we will get 2 then 2 into 4 then 6 and 4 into it and so on let me console.log this mapped array let me create a function to trigger this so i need a function to but a button yes you see c map array so just assign the function to this button using on click event now if we click click this button it will run so let me remove this two first i think we don't need any other thing just this but let me leave it let me add the button outside here for your difference let me add it here fine if we click this button all the mapped array will be shown in the console all the items multiplied by two let me get it to bottom how to add it yes here click mapped array cmap ready and see on the line number 20 online number 14 we are seeing all the mapped array multiplied memory ids multiplied by 2 like 2 4 6 8 and all so so that's how map works now let me show you how filter works so first of all let's say okay wait let me remove this save this let's say we want to see only those name whose name was first let's start from a so how do we do that we will filter the data from this users array so we will say let filtered data equals to use state and then we will add an empty array no wait what i'm doing it's wrong i am lost today yes so you will do users dot filter to filter data and same like the map it takes an user parameter then we will have to return something like this we will say return user dot wait sorry sorry user whatever user dot name equal to leanne graham so let me just control this now to check if we're right or not open the console click see mapped array we have an array here of only one item because the condition is we are only filling the name of the user which has the name of leon graham if we make an a here it will fetch all the data of the names starting from a now starting from not from a we will fetch all the data which has the username of a i think we will get an empty array c because none of the items have none of the names have a name name of a just a to check if all the items include a letter a we can do this return user return user.name to lower case includes our a this now let's try refresh into lowercase okay we don't need this point now let's try see mapped array we are selling an empty because none of the i okay i think none of the items have a big a all of them are having a small a yes so make it a small a then we will see all the items with a in them which have which are having seven items we have seven items so this and this and this so that's how it works we can also do other properties like this so we can say user dot id if it is less than five we will see only them so if the user not id is less than five so we will see one to four let me check now see mapped array and we are having only four data one two three and four if you want to see the fifth data from one to five we will have to make condition like this if returned user id is less than or equal to five now let's check c we now get all the data okay so this map and filter can work together also so let's say we filtered the data with all the items less than five all the ids less than five i mean less than equal to five so let's map them now in an array so how to do that we can simply set this set users then filter data let me remove the data from here okay leave it leave it we have certain data here first then we're filtering it if the user id is less than five or equal to five then let's check we having one two three four five ten items if we click the button this will be changed to five one two three four five or lean gram this this this and this click the mapped array and see the error has now been filtered to only five items if we make it more than or equal to five let's see what happens we will see last five items like from mr miss dennis screw list see mapped array okay yes we are seeing six items we have to remove equal to now let's try again see we are saying the last five items here okay so that's done okay now let me give you a simple example very simple example we will combine these two first i mean we will combine map and filter together so we will say let sorry const let's say numbers and set numbers let me have the numbers from 1 to 10 1 2 3 4 5 6 7 37 8 9 and let me also add 10 let me add them fine so here let me just comment it first here and then we will do it here so first let me console or let me just map these numbers here so to map the numbers we can simply do the thing like we did previously but this time we don't have the objects we have this just an array of 10 numbers so how do we show that so we can say this number dot map we will return the number and we can simply say diff dot give a number but we have a problem we need one small bracket also and all the numbers are here let me add the class name of card here save and this one card enter here we have all the numbers one to ten let me comment out this card this card and make this as numbers from one to ten so we have one to ten numbers in this array here of numbers now let me transform this array using map so first we will create an uh let variable which will be called square root point then i will simply map the numbers to get this square root square it's not square root sorry fine so numbers dot map we will use map function just like before and it will take a number param so this number is all the numbers like 1 2 3 to 10 like 1 to 10 it will take a number param which is 1 to 10 and it will multiply each number 1 to 10 as we want let's say in this function we having a square then it will return number into number that is mainly my that mainly becomes the square root we can console.log this number here sorry now number square let's check the console now we have an area of fire i think i need to refresh the page no not refresh we have to click this button click it and we have the square of all the items inside like 1 4 9 16 and all fine that's done so here we can have two cases so in this console we are seeing all the numbers from 1 to 800 which are square of all the items so let's say we want the filter first let's say we want to filter or make the square root of one of those number which are less than five so how do we do that so let me remove and show you from the start it will select let's num let number less than 5 equal so i will say number let me turn off this github copilot disable for java globally fine you can say number or numbers what is it yes it's numbers dot filter first we have filter them first it will take up when i am called number i mean all the numbers just like before then we will return this we will return all the numbers we want which are less than or equal to 5 it will return all the number numbers number this number we want here it will return all the numbers less than 5 then if this function closes the filter function here we can say map then we want to store all the data in an array in this slit numbers array so we can say let's say mapped or filtered numbers say filtered fill third third yes spelling is now correct then again it will return us something it will return us all the data which is wait i am doing it wrong like this it will return something so they can say return what do we need to return the filtered fine now let me store this number less than five in the set numbers array set numbers we are having yes less than we have to set this here now yes like it now we are seeing all the numbers from one to five but now if we click the button it will first fill all the numbers less than five or equal to five then it will make a square root also yes we need this filtered into filtered to get the square root save let's try click the mapped array same amd button see we are seeing all the items less than or equal to five so we are saying five six not not more than less than yes sorry less than five we want refresh the page the mapped array now we're seeing all the numbers which are less than 5 and the square roots so we have 1 so it's 1 we have 2 so it's 4 3 9 4 16 525 fine so that's how we do it how map and filter works together so we have filter and then map now let's see to reverse the conditions of functions i mean so first we will do this so first we will list all the items all the square roots and then we will map or then we will filter them so let's say remove the filter here first here we will save all the square squares of all the numbers click the button and all the numbers have now been square squared so 1 is 1 2 is 4 3 9 16 and so on but now we want to see all the numbers which are less than 50 so we will get till 49 so we can do this so number less than 5 here we will add filter then we will say it will take a it will take a parameter called let's say number again then it will return something like uh wait like this return you can say number less than five or maybe equal to fine save now click the button okay not five 50. sorry 50 yes now you will see all the numbers squared and then fill that on the condition that if it is less than 50 we will show it here see mapped array okay we only see two which are less than 50. wait something is wrong here refresh page see mapped array now it's fine we are seeing all the numbers less than 50 after mapping so on the previous case we were filtering before and mapping after that but in this case we are mapping it first and then we're filtering so that's how map and filter works together in both cases so that's all now i hope you learned how map and filter works in javascript and react here i have a simple example with a count variable let count equal to zero one function to increment it one h one tag and return to display the count value and one button to increment the count when we click it so let's try this example click the button see every time you click the button increment the count the value is getting increased by 1 1 2 three four and five but our page is not getting updated this zero is still zero that is because when this count changes in this function it's not rendering our component this app.js component to solve this we have stated react so to create a state in the functional component we will have react hooks we have react hooks so our hook is called uninstead we have to import it first like this import use state from react so we have to create a state first so const arrow brackets sorry uh what is it array brackets so array we will have the value variable name which is count and one function to change it when we want to change so we will have to use set count you can use anything you want at the place of set count then followed by as you use state in this small bracket we will add the type of the state so it's a number because it's zero one two three so we'll use zero like this let me remove this count fine so that's done so if we save the file this count will be 0 because now the count is coming from here if we change it to 1 they should this will be one see so let's make it zero now to change it we have to do this we don't need to use we don't have to use this so to change it we will just use set count and in the set count we will increase the value of count like this or let me modify this existing existing one so remove this stream of this count equal to countless one we will simply set the value let's say the count is getting incremented by one then we will save the value in the set count now let's try let's increment the count see now it's getting incremented properly like this fine so that's how we use states in react you can create any type of state you want like this is a number then we can have a string let's say name let's say set name equals to use state let me use the so this is our num name i mean it's a string so we'll use quotes fine then we can have other states like boolean let's say is visible and set it we will have set is which set is visible the new state so it's a boolean so let's say we want to make it false initially then we have to use false here fine let me give an example here of this boolean state let's say we have a button or this button we want to see this button only when the state sits the state is true so we'll use curly brackets so is visible if it is true i am using the ternary operator so if it is true then this first and small bracket will run or anything inside it it will return this this button but else if it is not okay let me just make it some h1 tag here and i will say visible and if it is not true we will say not visible save so now let's change it remove this or just after this we can have set it set is visible we will reverse the value using this thing so you can say not equal to is visible so let's say if it is false so if we click the button or this function will run it will be reverse false which is true then it's getting stored inside the set set is visible let's try we have not visible click the button to run the function see now it's visible click it again this would be invisible or not visible see that's how it works to use set name we can also use set name so let's say we want to set the name to nishant let me print it out here as well in h1 so see initially it's nothing so we have not seen anything here click the button given the count or let me change the name of this button you can have change states much proper click now see the name is now here fine we can have array states as well and object sheets so we can say const let's say array and set array use state to use array state we will have to use this because this denotes an array we can have multiple objects inside array or multiple items like this or if we want objects we have to use this so let me create or just do this an object first let's say name which would be equal to nishant let's say age 26 let me create one more object in this array to make this an array object array object sorry object in an array yes that's called any object so here we have to use name as something else like uday and make 25 or 26 fine so it's an added state see we can also have an object state here we can say const object and that object impulse to use state let's say an object if you want to make it empty it will be empty like this but if you want to add some value initially we can add some things like name and h properties like this so this is the numeric state this is the string state boolean state array state and object state so that's how state works and react i mean mostly in functional component let's now change to class components so use the class components let me let me just remove all this and make rcc class component to make the class component state let me just remove this as well fine we have to use something called constructor first constructor i think that's right inside this we have to use super keyword then we need the state to create the state we have to use this keyword this dot state equals to let's say a name so name could be empty state or we can have default state like nissans fine so that's how we create in the last component let me print the state here so to print the state we will have to use this dot state dot name but let me wrap it in h1 tag h1 save see the name is here okay let me add class name of fine this should be in center it's not let me okay need to import android css import app not css like this now it's in the center so if you want multiple states we have to use name then we can use let's say age we can have 0 initially or null also but we don't use i don't prefer to use null so to add the age state we can use age it's zero fine similarly in use state we have this state let's say we have an array of something let's say an array and just a colon and the array we can have one two three four five six like this so to view this we can just say this dot array dot map body this dot state dot error dot map desktop state dot array dot map to get the values from this array see so we have to use one property so if you want to see how map works you can see my previous video in the same playlist so we can say item so this map okay i will not explain this to you but basically this map will increment or it map this map will what is it called iterate over every item and do something so let's say we want to return something like this return let's say item multiplied by 2 save see the all the data is now here i mean all the array items so one is multiplied by two then four then like this so that's an added state let me remove this all right so let me show you how to change the state so we can never vary a function say change okay here we don't use const keyword sorry we just use change state it's been so long since i used class component fine chain state let me add a button button let's make it as change date on click this dot change status see let's change the status to age of 0 to something we will have to use this dot set state and inside we will use a curly bracket the state name so let's say h we want to change and let's increment the edge to something so we can say this dot state dot is it by 2 so now this state will be multiplied by 2 but let's make it 1 because 0 to the 2 is will be 0 this is how we change straighten class components now click the button this will be changed to 2 c now it will be changed to 4 then 8 16 so on to change the name state we can use this or we can also use in this as well so we have here we are setting state of the age let's change the name so we can say name will be this dot set state wait what was it this or just let's make it something like uday now click the button say change state it's there and this is changing as well so we have to use state like this change state like this so this is how set state works in class components setting states so that's done so we too we saw two examples in class component and in functional component so what are props props are simply states like this name that can be passed to other component so let me create one component here called child or children chilled okay just child.js fine let's make it functional component so we have a child component here so let me call this component in our main name.js so we can say import child from one step back child now let me render it here this so see okay let me make this an h1 tag first h1 to make it bigger saves so we have this child here fine so this is a child component that we're rendering which is printing this h1 of child here but let's say we want to print the state of name here of nishant so how do we do that we cannot create a state here because it will not work we have to we will have two states and it will be useless so to use this state in this style component we will have to pass it so to pass it we have to use prop so we will have to use the prop name which is called simply name and then the value the state will be inside this curly bracket and this is the name or this is a value that we will use in the shell component to render this state so i will show you what i mean so let's say we are passing name here to call the name we will just use name and in this h1 remove this child and just say name here see it's called nishan now so this name that is here it's the first name so if we change it to let's say value of prop if we save this we will not see anything here because this name has not been this this name doesn't exist so we'll replace this see now it's rendering fine so the first value is this name that we are printing here and second is the value itself that we are getting it from here suppose now if we change the name to something so let me create a button say change name so on the button we will have one click event and then we will simply do this that name do something let's say that save now if we click click the button here change name this name nishant should be changed to udec because proper dynamic so let's check this change name see it's now there so props are mainly used to transfer data between parent component to child component so from parent to child we can also transfer function controls as well let me show you what i mean so let's say we have function called change name so this function will not run in this parent component it will run in child component so what will be what it will do it will simply change the name in this function set name this will be so we will pass the function as well like this save so here we are passing the value and the function this is the function and it's the value so similarly like this we have to receive it here change name function so to trigger it we can simply use button and on click first let me add change name label here on the button so on the button we will use only event just like previously we did in the ch in the parent component app.js then we will pass the function name that we are passing from here save now let me refresh to go back to nishant now this button is in the parent child component now click it and the name will be changed successfully so that's how prop works in react using functions one more thing that is to props is let's say we want to pass a value from here to the parent component let's say you want to pass something like hello this is nishant now this button will be clicked and it will pass the value this string to this function so we don't need this right now let me remove this and we can simply so see we are passing the value here in the change name so this function should accept a parameter so let's say some value so if we console the value in we will see it in the console value or else if we want to set it here it will be also work like that it will also work like that save but let me change it to something else like nishant fine now click the button see it's nishant and open the console now we will have the let me change it again we have the nissan one again because we are passing the name of nishant from child to parent that's a hack for props let me explain it again what is props so props is nothing but sample variables like states which will pass from parent component to child component like this value we can also pass functions that like this function and we can call the function using a button or anything we want like this here third thing we can also pass our or some value from child component to parent component via this function like a name or something so here we are passing this function change name so change name is bidding passed here using procs it's coming here and on click of this button we are passing some value so this value will go to here in this value and it will print in the console so it's like a hack so that's how props works in react so here we have a simple example of this if statement if the age is 20 smaller than 26 we'll print this then else if if both conditions are true we'll print this or if none is true we'll print the else so we should see these two because these conditions are true open the console and let's check okay see we are reading it two times but don't worry about that that's the word that the problem of this user vector in the react rating version we cannot solve this in this video because it's not in our scope of this current video topic so let's convert in inside into this inline condition expression it goes like this we have to check for h then first is if age is more than 26 we will print console what is happening console. let's print you in this course you are now old see we are printing this then we have else if where we are checking these two statements so we can press enter or second line you can write in the same line but i am showing you for the clarity to show you the full code properly so here we are checking these two statements so let's check so then comes else if then again we have to check using question mark so again if this is true we will have to print something so we can say let me first add a fragment here then we can say console.log so first console is this if this is true let me add okay let me copy and paste it here simply okay just let me copy it manually here in quotes then we have one more console.log the second console nishant is my name save so see we are opening question mark here and this closing here so again after that we have to use the colon just like this colon before then we have to check for else so we will do the same thing we will use a small bracket then a fragment so for multiple form printing multiple lines we'll have to use this but if you have single line you can simply use directly like this then we have to print these two statements nishant is not my name let me copy it simply and paste it here nishanth is not my name and i am less than 26 years old um okay here what's happening what's happening now it's fine let me comment out this dave so let's check using the condition aj is 26 fine name is nishant so it goes into this block it will check the age so it's under six so this one is not true this one is false so let's light false here then it goes inside the second block else if this one it will check name is nishant yes it's nishant age is this 26 yes it's 26. here we are using ampersand 2 ampersands it means it will check for both conditions both conditions so it will check for both it means it though both should be true so this will print this thing now open the console to check so this makes this as true so write it true here and then it will not glow inside this block so we can write it as false so open the console let's save this and check we refresh the page once we are getting this i am 26 years old and nishant is my name so this is getting fulfilled let's change the condition here obviously change the values so we can say let's say let's make this as let's make this name as uday fine and let's make the edge as something else or let's leave it at 26. so let's save and check what we get so start from the start meaning edge is more than a six no it's false still it's false second block it goes in it goes in it will check this name is nishant no it's not nishan it's uday and the age is 26 this one is true but we are using and here so i said previously that if either of them is false it will not go inside this block the both should be true for this so again this should be this will be false then it goes inside here and will it will print this as true so now let's check so this one is false false third one will be true see we are getting this i am less than 26 years old and nishant is not my name so it's fine now let's see how to use or so this is condition this is checking for both conditions but what if you make it or so it will check either of them so if nishant is named and it is under six of either one of them as true is true it will print second one save refresh the page it will say it's printing this let's make it as true so it's true and this one is again false fine refresh once more i will explain it's not more than 26 so it's false then it will come here name is nishant not it's not nishant it's there but the age is 26 so it will print this and it will not go inside this block so it will print second one so let's make the edge to be something like more than 26 let's make a 28 then it will print this one you are now old save refresh so you have see we will get this message called even now world so now this first head band is getting fulfilled so it's true now then it will not go inside this else if or else block so both will be false see so that's how ternary operator or inline conditional expression works let's say we had a third condition or third statement let's say something is varied or something else then if you want to check it here you have to add it in this false block like this so let's say is married something if it is true we will have to print true or else we have to print or print what is whatever it is we have which is false i think i get a you get what i mean fine that's how ternary operator or inline conditional expression works and react we can also use in html or jsx also here so let's check whatsapp condition so just copy all these things and add it here in curly bracket paste it but instead of console.log we will print it in our h1 tag so we can say h1 let's check or let's add this here remove console.log and leave the command then in second one we can print or remove this and we can print h1 wait sorry we didn't have to remove this h1 let's print this and for second one let's print this remove these things fine and the for the third one wait a sec we had two html tags okay and for the third one we have to print this so what can we do we have to print this fine so paste it here save and see the problem here is this age and name it's only inside the use effect hook scope but not coming here so let me move it outside also or just cut or copy and paste it here and then it will work c so ad78 and name is there so it will go inside this block it will print this as true because yes the age is more than 26 28 26 828 let me reduce it to 286 then let's see what it prints it will print this so let me make it an end so it's printing i am okay where it's my name should be here fine we are printing same thing twice see now this is true so it's printing these two so this becomes true and this becomes false outside the user factor not inside there is effect hook so let me change the condition to something else let's make it as what is it the third condition is nissan okay let's make it an ampersand it will not follow because name is not mishan and this will now check for both conditions name and age save you will see this i am less than 26 years old we are printing this and nishant is not my name so this now becomes false and this now becomes true because the values have been changed here so that's how inline conditional expressions or trinity operator works in react so what is even handling first so event handling or functional handling is a method to call functions an event in react using some input or buttons on our using our actions so we can say cons let's create a function first let's say add nums we have a function that basically will add two numbers so let me create a button it will say add numbers save this button is there fine fine so we want to do something like we have to add two numbers let's say console.log let's add 2 n2 as 4 it will be 4. so let's say if this mercedes this was simple html and javascript we have done something like this so on click we have to open codes so downloads we have to call add nums and this bracket but this is not simple html and javascript it's jsx and react so this function will not add numbers let me show you what we have see this property is invalid we have to use this method so add once again so it will not work so instead of on click small on click we have to use this so let me remove this and let's use capital camel case on click opening and closing curly brackets then add the functions here which is add nums nothing else just this see now if you click the button we will see fold on the console see it's for now so that's how this works let me give you one more example using an input element let me create one input here input let's make the placeholder to be wait what i am doing this placeholder should be adds something save we have this input here now let's say we want a function to run every time we type something in the input so we can create a function to say const get input then we have to bind this function to this input if we are using html we will use on change event like this but not here this is not html we have jsx so we will use camel case on change and then we will simply pass get input here all the data that we type will be propagated here in this function get input so let me get the event from here so we can console dot log our event dot target just let's make first event first the event that we are passing you type something let's say one two three four see we are getting all the data from this event like all the data so we want the target so let's say event dot target dot value the value of the target for this input so let's type something like one two three four five then we will get this input here similarly we have other things like if we just add even target we will see something like this so let me add a name property here name of let's say input so we have three things placeholder on change and the name pro for this input fine so if we type something like one two three we will get the whole input here but we want the value so for the name so the value is you have seen how to get the value to get the name of this input we will say in event.target.name like this and if we type this input will be propagated here see this input so that's how event handling works in react so one more thing let's me let let me show you what do we want to pass some values to this add nums function dynamically from the button we will use this it will be a function here we will call a function then add num function then we have to pass some property or some data let's say we want to pass two para parameters 2 and 2 then this will come here let's say num1 and num2 we are using comma to differentiate between them here also so this is one number eight second number let's make it three here so num1 and num2 then we can simply pass it in the console num1 plus num2 to get the input so let's add numbers and it's 5 see that's how we do it in react how to handle events so a highway 2 array is there of numbers and details number contains numbers from 1 to 10 and you see this detail contains the name and age of 4 people in an object so first let me map the numbers array and if you want to see how map works you have to see my previous videos in the same playlist so we will have numbers dot map let's say number it will return a list tag li and here you will have to print all the numbers so this map will go over each and every item and it will print the number like this but see if you open the console what will what let's see what we see we will see this error message that each child in the list should contain a key prop should have a key prop unique property so in this case all the items are unique from one to ten so to add keys here to re remove this error i will do key and then add the number here so now this key will take the number which is 1 to 10 so it will be unique and this message will not be here anymore so refresh the page see it is not here anymore so see this is the first scenario let me enter the second scenario where all the items or all the elements should be should be not unique should be same so in that case what can we do so let me map this details first and we have a detail we will have a detail here let me remove the key from here and this number and num add detail and place the number see refresh the page we will see this error that objects in objects are not valid as react child so we have to render it using keys okay fine the problem is we have to use the name first also that's this error name so this name is also key this name has a key let me add one more list here but we have to wrap them in a fragment because two jsx elements cannot exist without the parent so add it here add one more list tag this should be not name and age now we will see all the edges here let me comment this temporarily see we have all the names and ages open the console and i will see the same error for the keys refresh the page see we are saying this each child in a list should have a unique key prop but we don't have anything that's unique here let's say we have a name but name can be same for two people we have a age and this could be same as same as well so let me demonstrate this to you let me add a property one more property with the same name and h of challenge then we will try to add a key using the age let's see what we get so first make this a div and copy and paste here then let's add the key prop and the key should be the age so detail dot age see we will see that warning encountered two children with same key 29 k should be unique so that the components maintain their identity and all so we are getting this error so in this case we have two options first we can add one ids here so id let's say one then here should we add ids 2 and then 3 then 4 and then there at the last we'll have 5 then we can print the key as simply detail.id detail.id now this error won't be here see it's not here anymore second scenario is that if we don't have the ids let me revert it back or leave it let's say we don't have the ids let me comment this alt alt alt alt let me move it alt alt alt alt shift alt alt again alt alt alt alt alt shift aerospace back remove all the ids now see let's say we don't have the ids in this current scenario therefore we can use an index property here so this map also returns one index that we can use as the key which will be unique throughout the array see not the error has been disappeared but this index thing is a last resort kind of thing so if we don't have the id only then we have to use index or else add the ids here in the array or in the object or in the api so that's how keys works in react and how to fix them so mainly the keys are called the name and age and in this case all the items are called keys fine so that's all about keys in react here i for input fields from name to it name age hobbies and date and one empty error function first let's get data from the form inputs this is the first step so we will use an event called on change event that will run when the input field value changes or we type anything in the input field keep that in mind so we will use this get input function in the on change event this will pass an event argument here in the function then we can simply console this thing this event so open the console let me type my name in the name field called nishant see we are getting all this data here all the data most of which we don't need so to fix this or to like yes fix this we can only send the data we need directly so let's say event we can send let's say you want the value that we type lot which is target dot value value we can do this here let me make the event to value and here as well now we will only get the data that we're typing the text so we can add nishanth here and we will get that so let me repeat this all over the first step is done i mean the first lesson for forms now what can we do is let me so let i be added the unchanged event here let me also add the name property so each of the input fields will have a name so let's say this will be a name this should be the age this should be age sorry not age let's say name this should be hobbies and they should be uh date so all of these now have a name as you can see fine let me also pass the name this will be event dot target dot name like this so let me pass them all over so this name is also important i will show you why see now we have the name basically we are passing to values here okay we are passing to values like value and the name so we have to receive two values so name if we console the name here let's say what we get refresh the page we can say name as nishant and if we type even if you're typing in the name field this field we will get the corresponding name if it is age we will get the age age we are getting and same for hobbies and data let me make okay fine now let me show you the types of the input fields we will can have the type prop and we can add text for the alphabeticals like nishant or like if we want text here simply numbers and text i mean numbers and alphabets for the age which could they should only be a number so we can add the type as type as equal to number like this for the hobbies so now this is a number and refresh the page see we cannot type alphabets here we can only type a number like this fine so for third one we can also add the text as same as the name because there should be a text as well but for the first one we can add the date type so we have so many types like input date color so let me show you let me add or let me just make this type as input this now will be a file upload thing type is okay not input file file yes this should be a file upload thing so revert it back and let me remove this why so we have four fields and all of them have the type and the name with the on change events so now let me console the value so console.log the name and value small value i mean value open the console or let me do it like this to make sure we have name colon and the value wrap it in a very like thing then it will not work okay okay okay let me wrap it in an object like this then this should be an area like this like this so we will have the name paired with the value like uh key value pairs so this name will be the key that we will store and the valuable the value that we will have so refresh me add my name nishant and see the name is the key and this nishant is the value c fine now let me store them in an array sorry not an array let me store them in a object so if you want to show all the values or store the values in a state you can create multiple states for us we will have four states for name age hobbies and date but i will show you how to do it using only one state an object state you can because for example if you create four states then you have to assign all the four state and set state in all the on change events which will be lengthy so let me introduce you to a new method so we can say const let me create a state an object state so let's say obj data and set obj data in campbell case so you state this will be an object just like this so we will we will keep storing all the data in an object yes wait what happened okay yes we'll keep storing all the object properties in the set object in the object data state so we have to store this in an variable first so let's say let data equal to just copy this whole thing cut and paste remove this now this data will contain our data like this so for example if we console the data here clg console.log data let's see what we get refresh let me add the name called nishant we are reading the name and the value like well sorry we are getting the key name and the value nishant here like number eight if we type the age 26 we will get the age only like this we are not getting the name anymore because it has been overridden by the age so we have to store this data in this set in this object data state so we can do small bracket then curly bracket then we will have to merge them so for example let's say we are storing this data here using using spread operator like this now we can console data the data outside like this now let's see what we get it refresh the page so let me explain once more what i am doing here we are merging the data using key value pairs in the data variable let data then we are storing the data as object in the set object set in the object statistic i mean then we are consoling it here let me add my name called nishanth so it's here c so it's getting stored in the object data state successfully if we add the age the previous data will be overwritten like this we don't see the name anymore but we have a name in the input as well so to solve this we will have to add the data and then merge with the previous data so name will be the previous data so we'll merge it using like this triple dots then object data we will merge the both objects so the previous data now is called nishant and the new data is called this let me start from the beginning let me add the new data which is nishant and it's here in the console and the state of object data over the data now let's say we want to add the age now this nishant is now the previous data and the age is now the new data let me add the age 26 and see they have been both merged together the previous data and the new data now this both properties like agent name they are the old data previous data and if you write the hobbies this will be the new data so we can say let's say hobbies is creating videos like this so now this is the old data like this is the old state now and if we add the date here this will be the new state so all these three fields are in the world state and this one will be the new state let me choose some date here 20. now we have the data as well and all these four are now in the old data which is object data so that's how it works that how we can minimize the code so what can we do now so see let's try to submit the form or let me yes so we can they we can create a function called const submit so we can use the submit function in two ways let's say i want to sum in data and show in in the console or send the data to an api so we can say console.log this object data we have a button here that can run the function on click event using one click event so we can say on click submit button submit function now let me try from the start write the name nissan age 26 hobbies let's say recording videos and the date from today's date click submit the data will be here in the console line number 13 here another method is not using this submit on not using this only given we can use onsubmit on a form tag here so wrap online puts in a form tag like this this will also work so make the button inside as well so now all of these inputs will be inside this form or what we can do we can add the form outside the div because the design is breaking so let's check so let's check if it is working or not yes it's working so now in the form we have to use on submit one event on submit and let me assign submit function here but still now it will not work because this button has to be a submit type so type should be submit so if you open the console now let me type the name age hobbies and the date now click submit and see if you submit it's coming here but instantly it's getting disappeared so here what we have to do is we have to do a thing so let's say we have to send the okay so we have to do this so this should contain an event param or e then you can do event dot prevent diff prevent default to prevent the default function here so now click or just add the name the age hobbies and the date now click submit it's here now it's not getting refreshed automatically if we just comment this and now click submit the form will be refreshed see that we don't want fine all right so we can add one more button here that can be used to reset the form let me also show you that it is set and the button type will be reset if you click the button of reset the whole form will be reset add the name the age hobbies and some date now click submit it's here now let me click the reset button see all the data has now been reset so that was how to use react forms or forms in react so for example let's say we have three fields here name age years of experience these three are simple but let's say we had like 10 or 11 inputs in that case if we want to get data how to do that we have to create let's say we had 10 inputs then we had to create 10 different states for 10 inputs for one for each input for example for name we have one state for age we have one state for this we have one state and so on but here we will show i will show how to do it using only one state and one function that's very simple first of all we will create a function called get input or let me make it get input value like this like this like this fine now let's add the name properties here that's very important so this input of name will be have a name of name this input we have this input of age will have the name of h and this one as years of experience we can say yoe like this so it's done all the three have names now let me assign the get input values function using on change event on these inputs like this or if you want you can also do directly call the whole function like this one change now this in this this this this this on change event let's say we type something in the here like nishant this will send some data to the well do the function here we can mark it as event let's mark it as data for your convenience and for mine fine if we console.log this data we will get all the information about the first form field if we type in the name so let me show you bring this down console let me add my name called nishant so we will have all these things here bubbles cancelable blah blah blah blah blah blah fine it's done but we need two things here so we need this a data dot target dot value so we need only the value first i will show more later but soon we have the name nishant because we're typing nishant here if we type page we will see the age from the second field years of experience let's say 2 it will show up here here here fine but as i did here we also need the name to get the value name or input name we can just make in turn into target name now if you type the name in the first field you will not get the value we will get the name this name if we type age we will get this age just like that so we have the name and the value we also have the id i think so let's try id refresh the page so let's say we add the name of nishant it's empty um so i think idn name works the same so let's say if we add the id of name let's see now what we get so let's add the name nishant and the ids name here so this id and name props works the same so we will use name here fine then what can we do um okay so we are getting the data but let's restructure this data and we will have to we have to extract the name and value from this data so we will do this let we will create two variables this is called structure in javascript we will create the name and value from this data like this and it's done now if we console the name we will get the name refresh and the name nishant okay we are getting undefined hmm okay data.target we need to do here yes because data is not sufficient now i'll get the name here so at the name nishant and we are writing the name here successfully let me draw value let me try value nishan and the name is here nishant we have to structure them properly now what we will have to do is we have to create a variable called let let's say input we have to mark these two inputs as key value pairs like this open curly brackets then in this array we'll have the name as the key and the value as the value so this is the key and value just like in an object we have key value pairs we have this here if we clg or console log this input let's see what we get so at the name nishant we are reading the name as key value players here if we add the h we will get the age like this fine now let's create a state just like we discussed one single state not three states for three different fields so we will have to import the use state hook first use state hook like this let me create a state here let's say cons data okay let's say inputs and set inputs equals to use state let me make this edge and what can we make this as object like this or we do we need an object or do we need an array um what we have to do here is we have to set it inside let's do with object it will work then we will set this set input then we will set this input in this input state like this but we will have to use like this this input is a object and they will we will merge it with the previous object so we'll merge the inputs with the input state like this now we have a dynamic field here dynamic input fields and we don't need to create 10 states because we have done it with only one so if we console.log the input state so initially it's empty because our three fields are now empty so let me add the age sorry we let me add the name then the age then the years of experience and now we are getting all of them in one single state so we can show them using this input state let's say you want to send data to an api we can simply send this input we don't have to send name as name ages age and years of experience as years of experience so that's how it works dynamic inputs in react so mainly we have three ways first way is called external styling the way we are using it right now and the commonly used way see we have this css file that's getting imported into app.js then we have a class name in this div of app and we are rendering the style here using app cue app class name let me demonstrate it from the beginning we can make an h1 that will say hello world like this we will have h1 here one h1 so let me make two more adjustments or let me just change the text here this should be external tile link copy this add it two more times this should be internal inter null this should be in line so these are the three types of styling external internal and inline in react so this external is clear i think we can simply add a class name of let's say external external copy the class add it here and then we can say we can say let's say color of red the color of the first h1 will change which is external styling right so the cache is we have to import our app.css file here so if we comment to this the starlight will not work because this yes and index.css sorry i've got cs file they are not linked together so this was the one type of styling external now let me talk about internal styling where we will write the styling in our app itself the js file we can create a const we will say styles equal to an object inside we can simply say this let me make the class name of internal then a colon then again opening object brackets let's say the color should be red here fine then here in the internal styling we can say style keyword we will use this we will use the styles const dot internal we need to target the color of red which is inside internal save and see second one is now red let me make it to blue to make it clear see it's now blue so this was internal styling third one is called inline where we write styles or the style fine and we write directly the styles inside for example let's say color we can say green save and it's now green like this we can have if you want to add multiple styling here let's say we have to change the background color of this third h1 we can say background color has black black let me type black and it's now black like this you must be asking why do you use the internal and inline stylings i will show you let me create a button first here button that will say toggle theme suppose we are making a app or maybe let's say we just we're just adding a function to change the theme of the page like from dark to white and to white to dark so we have to we have a button here of toggle theme let me create a function const toggle theme this will be an arrow function this button for a function will be on this button so on click this function will run when we click the button of toggle theme fine we also need one state so let me create it which will be toggled on the button click it will be called uh let's say theme and set theme you can choose any name you want equals to use state this will be a false value first false value okay use state is not defined we have to use react dot used so it will be a boolean state and on the button click this function this state name will revert so the state value will revert i mean so for example if it is false it will be true and vice versa now we will use this theme to change the styling of the page as per the theme so for example let me remove this or what can we do yes in the style we will do theme but first let me create one more internal css styling dark here it will be background color as not black white and color will be black color will be black we need one more light here it will be different background color will be black and color will be white opposite to dark same styles but it's not okay fine so let me remove this internal styling so i will implement the dark and light theme like this so if the theme is true okay let me okay if the theme is false initially we will show the light theme and how to shoot the light theme we can say style or styles dot light light l i g ht or else we can so we can show i mean styles dot dark fine it's done now on click of the button the theme will change it will toggle click the button okay it's only working in the second h1 we have to make it outside the h1 i mean in the main app here so just add it here refresh the page so initially it's him not light fine so if it is false wait a second it is false initially fine so it's if it is false i will show this or this click the button toggle theme so now it's true wait a second i think we have to remove this let me check because this doesn't make any sense it falls so we are showing if it is true we can show this or this wait a second okay background color okay we did something wrong here they should be light and they should be dark we did opposite now initially it's black because this theme is false the value is false so we are showing this else one and if you want to know how this question mark works please see my video about inline conditional operators or ternary operator refresh the page once now toggle theme okay let me do this just remove these things first so we are having removing we remembered that and this one as well so h1s are now all white refresh see it's white now the h1 and the background is black if we click toggle theme it will revert the h1 is now black and the whole screen is now white so in that case we use the internal styling or inline so for inline we can do this as well so let's say in this same style we can do this remove all these things if theme is true then question mark then we can say um this add this fine but wait a second we have to do it like this so if the theme what is the theme this theme if it is true we can create one more curly bracket and we can write our styles inside it that will say like color if it is true it means so if it is false let me bring the color to black text color and background color as white and outside this style curly bracket we will add one more for white and black so this color will be white and the background color will be black save and now it will work let me remove this here and just get the style from here and add it in this main div now let's try toggle theme so it's now white see toggle them again it's now black so this is how it works in both scenarios for inline and internal so let me add it here get the things and i will push the code for you to read fine save it and that's all for now also remember don't forget to add the advert css import here or else it will not work what is the control component in there for example let's say we have two inputs and we are handling the data inside our component in the same component but in uncontrolled components we handle the data from the dom we get the data from the dom using a reference value so let me show you now how to do it first for uncontrolled components for example let's say we have to input name an h like this localhost okay we have name image like this let's say we want to add reference to the both we will create a name variable called name equal to then we will use we'll create a reference for the name we will use react dot create ref like this then we can say for age we can say let age equals to react dot create ref create ref so this will create the reference for name and age fine now i will assign this references to the inputs using the ref keyword ref equals to here will be the name and in second one here will be the age sorry age yes now let me now show you to console now let's console the log name console.log name dot current dot value and here console.log name dot current dot age let's try to see what we get we should get an error because we don't have any data inside them if we check in the inspect element we will something like this cannot treat properties of null reading value so if we remove them wait okay i think let's just add niman age first age this should work now yes now refresh the page we will get empty current values here so we can say name dot current that will be null so it doesn't matter i'm just gonna type my name here in the nishanth see we are not getting anything if we type some edge still nothing we are not getting the console up because our state is not getting refreshed sorry our component is not getting refreshed and then we cannot see the name image to do that we can simply create a function if you want to see the name image let's say submit and add a function put them inside here this name images then on this button we can simply on click event this one click the submit button function i mean now if we close if we just click submit button only then we can see a manage because only then our dom is getting refreshed click submit and see we are getting these two so we have to do name dot current dot value and h dot current not value okay value now let's check click submit now we're reading the values of nishanth and 25 so my like the main point here is in the unknown components we don't have or we don't have the privilege to get our states updated or component updated automatically if we are creating a reference like this but now let me show you control components that we generally use okay so we will create a use statement first or wait a second okay yes let me create i use statehook or do we need it no we don't need let me create a function so const get input or let's say git name get name equal to an arrow function fine now we will not use this okay let me just copy and paste it once more so this will be on let me just try it and uncontrolled component is that component component spelling is wrong components let me commend this then inside the second one let's write control come in let me comment this also because here we having we are having uncontrolled components that we showed before and here control components remove this rift and this edge we can also command this temporarily for now here fine now we have only one name image here inputs fine so for the get name or uh okay we can use on change event here for control components we use on change event so if we type something this git name function will run and it will pass the value so we can say event here we can simply console.log the event event.target.value target dot value like this okay fine now let's check refresh the page type something in a name like say nishant so see here we are reading that name if we type n and we'll come here then and i such so it's getting appended every time we type inside it and the same thing is for the age so we can say get age here should we add on change on change event get h now in the age we will see the age if we type the age let's say we type 2 6 so now we're getting the h now in this case our component is getting refreshed or what is it called here it should be the word our component is getting um updated where is it where is it where is it okay this is not here okay okay okay okay it's not here so you have to believe me in this case our component is getting refreshed but in the previous case of create riff our component will not be refreshed because we are just getting the value from the dom so that's what that's what is controlled and uncontrolled components in react first of all what is what's well done the virtual dom or v dom is a concept where the entire ui is being kept in the memory and it's being synced with a real dom now how it works let's say we have some state and it changes then the component will render again and again every time some state changes if the state is changing and the component is getting red ended the virtual dom will be updated as well now if the virtual dom is getting updated it will be compared to the realtime like this we have the blue nodes the previous nodes on the left the left is the entire virtual dome and on the right we have the real talk so this blue nodes are the data what is the ui before state updation or before we're rendering the component let's say we change something and saved the component will be rendered again and we have we will have this grey nodes here the new nodes after state update now the entire virtual dom will be updated or will be compared to the real dom like this so it will check we already have the blue nodes here in the real dom we don't need to change the blue nodes we only need to change the gray nodes also called updated new nodes then it will append the gray nodes to the real dom like this now this becomes the new real dome and nothing else will change only the updated nodes will change this grey nodes updated new nodes and the entire process is called reconciliation in react so that's virtual dom and how it works so first of all let's see what is in an html so in html is a property that that prints or displays all the contents of a element with the tags html tags let's say for example we have a let variable it has a data let we have let a time in let's add this this is called string literals fine so inside the data we have p tags that says this is my home save this see now if we print data in this div we will see with the p tags here with the p tags so let's say we want to remove the p tags from here and just print this this is my home or let's say we have some styling here div style sorry p style equal to quotes and let's say we had something like font size colon 20 pixels this will show up here instead of applying the styles fine so how do we do that how will we print the speed tag with the font size of 20 pixels in the text of this is my home so it's very simple we will not use the data variable inside the div let me make one more div here we will not write anything inside the div in the area we write we will simply do this we will use dangerously set in html we will use this keyword we will have two opening brackets sorry look two curly brackets inside we will use two underscores then we will type html because we are printing html then we will add the variable that we want to print which is data save and now see we are reading this is my home text here if we change the font size to 25 pixels this will increase the size let's also add the color color should be red see now it's in the red color fine one more thing let me show you this data this like this tag p this is not jsx this is html for example let's say we have i want to print the same thing here in the return we will not use it like this way we will use like this which is if let's say font size 25 and color red see this will print the same thing here but instead of here we have html i mean this is html and this one is called jsx let me comment jsx this is this is html and this one is called jsx fine in html we are printing like a string in quotes but in the jsx we have seen camel case inside two curly brackets like this let's add one more example data 2 but not p tag we will use b tags bold attacks fine let's add data to inside one more variable here let me just copy and paste it so data two it will print the same thing but in bold if you make the color to let's say blue this will be now in blue color so this is html printing inside the data and data too then we are displaying the contents using inner html for react we don't have any html we have this dangerously set in html like this so that's how we do it now let me give you one more tip let me open one what is it uh ndm package it's called react quill see let me stall this first it will take some time but not much so this thing is mainly used for like markup for example okay wait ports we have to use every time okay let's say we are writing a blog or we are making you are making a website on a writing blog website so in that case we can use this quill package and then generally set in html i will show you why so we have installed the package here let me do one additional thing let me remove okay let me remove wait in the index.js right let me remove stick mode save this now come over to app.js here same thing really same let me import this react wheel from react then we need to import the css the same way we did in es6 like this then we have to open or render the react query layer save this and refresh we don't need these two right now because we don't have the functions no see we have this text area where we can type anything fine let me create a function here okay okay const get cool data equals to something so this function will run when we on change this react way just like this so on change the function so we also need one state so let me import react first import react from react let me create a state const let's say quill and set coil use state use state this will be an string because we will type text now in the function we will simply have a value our argument arg given and i will set the value inside the set query state now in this quill we have some data if we type something here okay use state is not defined so we can add react.edu state like this now if we type something this data will be stored inside the sql state if we console dot log the sql let's see what we get open the console clear the console now okay just type something like nishant see we are getting the text in the p tags if we just render the quill here wait a second where is it if we render the quill in this html let me remove this one fine we will see that same text here refresh the page we don't see anything also remove this one or just comment it out fine we are not saying anything let's type something called and i guess a chain t nishant so this text is directly getting rendered to this html in the inner html also called dangerously set in a html it's getting rendered and here also in the console line number 15 14. if we make this as bold this one will be bold as well see we are having this p and strong text and it's getting rendered here at the top we want to change the color or the font size let's make as heading one now the font size has now been increased in h1 and strong tags previously it was p tag and now it's h1 tag let's change it to list okay let me just make some list here first we can say one it will automatically be in list in the ol order list and then li we will have item 1 enter item 2 and the items are getting rendered at the top with the tags directly let's take an example first let me print an h1 in the return called hello hello hello it will work we can say hello on the screen if we print another h1 let's say world it will give it an error that says adjacent jsx tags must be wrapped in an enclosing tag or this fragment so the workaround to this is using a div here like this let me add one more closing div at the last okay not here okay what a sec save this all right we shouldn't get this here so let me wrap it in and what is happening here yeah so we have h1 let me add a div and add the last here see if now it will work fine it's working we have hello and world now we will not get that error because we have a diff parent element that is enclosing this two h ones fine but we have a disadvantage of using this div because this div creates a new node in the react dom element that's not preferable only preferable or we can only use this div in one case when we have the like the arrangement of a grid like this let me show at the class name grid here and dot grid if we have this display of grid here like this and or other things so and one more example let's say flex so this div can only be used when we have to use the class name like div or like uh graderflex or any class name here let's say app now yes if we don't have app here let me bring app and we will simply text align a center so we will only use this div in only one case when we have to use the class name here but let's say we don't have to use a class name we can simply use this a called a fragment or we have one more item here let me import react first import react from react then inside we can simply say react dot fragment and add this here so see it's the same so we can either use reacted fragment or its short form simply an opening angle brackets and closing one at the last so that's how we do fragmenting in react now this becomes a fragment and if we repeat it once more we will get the same merit because now this fragment and this fragment is now adjacent x and we have to use one more fragment to enclose the both so if we add one more fragment this will work see you will see hello world and hello world four times you can also use regular fragment here i am just showing for your clarification so add it here and it's done so that was react fragment or fragment in react remember we cannot use class names here so if we add class names we will see there is no option of class names here if we add the app it will not work we will still see the same thing that we are saying that we were saying before so if you want to use class name you will have to use div but the div creates additional notes in the reactor that means only use diff when it's necessary otherwise use reactive fragment or its short form and that's all about react fragments in react so what is the status component stateless component means with no states for example this component here is called stateless we have nothing but a div and one h1 that makes us stateless stateless means triple equal to no states but what about stateful let me add one state here so stateful means the component which states for example if we add a state of name and set name equals to u state let me add the initial value of nishanth and add the hello so i replace the hello with name it will print my name here now this will become stateful component it pull or which states if fine so simply put stateless means with no states stateful means which states this component is now stateful because we have a set of name here one more tip before the react 16.8 version if we wanted to use stateless component we would have used function component because we don't we didn't have any method to create states for function component before this version but after the version we had react hooks that allowed us to create states just like we did now using your state hook so that's all now that was the route that's what that was all about stateless versus structural component in react so mainly we'll use a library called axios so let me install it we can say npm i x use and my app is not running so let's start the app and then start fine so this api requests wait a second of course like this yes so mainly the requests are of four types post request to add data in the database post then we have read or we can say get to get it on the database we have put our pass to update and we have delete to delete the document from the database from the api so we have four api request types we can say post request get request put request put or patch anything okay let me make capital put our patch and delete let me make the post to the capital like this fine save post put get and delete we have this four types of requests in what is this okay so we have four times the request mainly that we normally use so i have a mock api and here we can send our data or request first let me create the mock api we can say the project name as api requests re quests then leave all these things click create it will create a api request project we can say new resource let me add the end point of let's say users we don't need all of these things just leave that user id then click create and here you see we have all the endpoints for get for post put and delete so 48 we can simply we have simply pass the id like this for update rd post we just have to post using slash users and forget we can have two endpoints to get all the users and to get one user so click create first i will show you later what is all these things now we have received that same point here if you open this you will see it here it's currently empty with no data inside so xcos has been installed now let's import the library here we can simply say import import axios from axios like this right let me create a function the const pose data it will be an arrow function fine so in the post data we will add this so we will have xcos dot post method because we are using post data i mean we are posting data or sending data to the database then we will copy the end point and we will simply add it here this url we got is the end point for posting data to the uh here to mock api is this database then second thing it takes is one curly bracket we will have to open and the thing it takes is the data itself first is the link or the end point second is the data itself so let's say we post some name called nissan let's say have some age called 26 let's say some hobbies so we can make an array here always will contain let's say poetry then second thing it will contain will be cooking then third thing let's add traveling traveling fourth thing let's add programming or let's say coding that's what i'm doing right now oh let's add one more which is piano fine so we have all this things like name string this one is number and this one is an array fine so when this function runs it will post the data to the smog api so we need one button to trigger the function so we can say post data on click of this button we will have this post data function and as soon as we click the button of post data it will send data to this api let's try this and one more thing let me show you open the network tab open the console i mean the inspect and the network tab so whatever we are having the call whatever call we are having api call this will show up in the networks tab in the chrome web tools or chrome dev tools okay yes now click post data see this api has been called and it's sending the payload means the data we are sending which is the which has the age all the hobbies that we wrote statically and the name nishant if we check the preview we will see the same thing but with id so the payload where is it okay this payload it means payload this payload is means the payload means the data we are sending to the api call this preview means the data we are receiving from the call reviewer response they are same okay see now we are adding we are getting one id also here this is a response and the payload is the request so request we sent and it is pawns we got if we refresh the api here we should see the data here in an array like this so you can make all of this dynamic by using a form field for example let's say i have input placeholder of name let's add a state here let me create a state first if you know what is states they are simply variables in react we have to import use statehook from react sorry used it from react then let's create a state called let's say state of name and set name currently we don't need set name but let's just create it let it be empty and first then on okay we need we don't need set name i was wrong so on change of the input we will simply call set name or we can simply set the target.value in the set name or name variable name state using event dot target dot value not validation message value if now whatever we type in this name it will be stored inside the name state let me bring the button after the input and in the name we can simply add the name property like this now let's try to add some data let's say name should be chalice shall is click post data so it has been sent and see now the same has been changed to sales it's not static now it's dynamic depending on the input and here also we will get the same thing but the name will be challenged see that's all for post method now let's check the get method how it works get means getting all the data from the users so let me store or well let me show you one more thing see if i add this then block here and response in the post we can use what is it we can say a promise so console.log we can check our promise using this it means when the post api call is complete we will have some input in the console or in our ui or if it is an error if the post method fails it will show us an error so we can simply console.error this error like this now if you open the console click something like uder and click post data okay it's not coming here post name okay let check network okay this hasn't been called i think open console refresh the page okay now it's here see we can see all the data we can just simply call res dot data to get this data object inside save this and now it will return the data only click some else something else like avi shake click post data it will take some time but it will be here because i think it's a little bit slower see now we have this with hobbies that all the static values and the dynamic value of team so that's it and in case of any errors we will get an error in the console not this so that was promise after api call fine now what was i going to show you okay yes get request so in this api we have all the data like the way the data is sent here if we refresh we should get it now let's get them to get them we will use then use the fact hook here sorry yes use the fifth hook that will run when our page mounts for the first time only but now we can change it as per our needs so add an empty array here for it to work here we are calling axios.post but here we can simply call xcos.get already call the data so copy this endpoint user's endpoint and just simply paste it here fine and we can do the same thing here as well so when the post is complete it will return some promise then in cash block and in the get request as well it will return some promise like it like then in catch but in this case we will get all the data so save and let's try refresh the page see we are getting four arrays for four ready objects of all the data we're getting here forwarded objects let me store them in an array state so say const let's say um let's say data or say users and set users this u state this will be an array because this is the whole array we are getting we have to set this whole array in the state of users like this not in the post in the get so that's done that's how it is useful then catch block fine so now this users have our all the data when we load we can simply do this user dot map let's say user it will return something like let's say one fragment first then it will return us and h1 that will have the user dot name let's only print the name for now so we have all the names here okay let me make this h2 equals because it's much bigger fine now we have all the names here like this fine so we are getting all the names and that was get request so we have done post and get now let's try updating the data how will we update the data so let's create a function to update the data updation is similarly similar to this post data but a few changes is needed so const update data equals to an error function like this fine now we have to create a button here in this fragment button say update so we will have to specify which document to update or which data like we have to update the nishant one challenge or the aura we say we have which we which field we have to update we will use the id because see we have this id and it's all unique we have one two three and four for each one this is one this is two three and four okay let me do this before this user dot name we can simply do user dot id let's print the id and let's add a dot here dot and a space we have the dot let's add the space but it will not work so we will do this wrap this in string literals like this and add a dollar i think i'm doing it wrong wait let me clear it out we can say string literals yes or wait i think it is like this string literals we can use again a string literal again sorry not string little curly bracket then we will have user dot id inside the string literals we will have one more curly bracket and we will use user dot name in this way we can give a space between them and one dot so one dot nissan two dot challenge three note to the end photo to be checked so all of these have an id one two three and four on base of this id we will update the data update the array object so we can say on click when we click the button we have to send this id to a function which will be this function update data so we will send the id or user.id like this let's uh get the id from the function here and if we console.log this id let's see what we get open the console clear it click any field like nishan we are heading one click challenge we will get two and so on now we have a unique parameter called id that can be used to update the records fine so for update method we will have to use x use dot put or patch so we have an output method then we will add the end point this end point add it thing it takes is the data which will be the new data so let's copy these things these three things and add it here so it has been added all these three things so let's alter some things see initially the age is 26 for all let's make the edge to be 27 let me add one more object here or add a field here called let's say we have poetry cooking traveling coding piano let's say sleeping save and third parameter it will take will be the id itself so we can simply pass the id like this so we are getting all this giving it all the things that it needs then we will have to use this then and catch block so then will be called in case it is successful or catch in case if it fails so let's try remove this console log open the console so you can also use network type to see the request so let's add some name here called let's say what can we add the name here let's say sanji now click nishant update here okay console.error is not a function we have something wrong open the network tab see that through an error because we are having an error so actually we did a mistake here we don't have to send the id here like this because it's not in the query query it's in the path params so if we check this documentation let me let me click the project let me check how to do this new resource see if you check here in the put we have to pass the id like this after the end point so cancel it in this user so we can simply set uh one more forward slash uh curly brackets and before the clay brackets a dollar for rendering a variable like an id like a dynamic id now it will work it refresh the page type sanjeet here now click update open the console let's check what we are getting see we are reading this object here and the name has been changed to sanjeet for the id number one invest the page refresh the page and it will be changed sanjit is now at the first position in this api endpoint as well in the mock api i mean so let's see sanji is now here at the place of nishant we can do the same for others like we can add mayank here and click uday this will be changed to mayank refresh the page mine will be on third number refresh refresh refresh what's wrong refresh this i think netflix problem is now it's herman so that was about updating data so let me write some comments here for clarification this one is post request request this one is this one is put request put means updating data request the fourth one or this one is called let's say select comment let's comment it and then use the vector under the user vector so this will be get request and the last one is left which is called delete so let's do that as well create one more button for this we will add a delete text here for the button label and in the place of update data we will use the delete function so just copy this update for update data function and duplicate it delete data this will be called delete data everything will be the same but we don't have to use the second parameter we don't have to send the data we simply have to delete this let me now map the but function to this button and it will work let's try fine this is a delete method let me write delete method method now click delete in any one of them like sales if we refresh charge won't be here but it is here let me check this okay we have okay this should be not put delete method we have to add it here delete for delete now let's try click delete in challenge click here in the api endpoint page and see we don't have the challenge name here anymore we have nisha we have sanjit we can also do one more thing here we can simply call this user workbook or this get function in another function to render the updated data after deletion that's not for the scope or let's do that as well let me create one more function here sponsored get data and all the things here and simply we will call this git data function here get data and same function we will call here when we delete that way this delete function maybe get called and it will delete or it will refresh the page with the updated data click mayank okay not deleted let's try okay so now we're deleted we have only sanjeet and shake click sanjit delete button here it won't be anymore fine so that was all the four requests let me copy and party cut and paste to get here so we have seen post put patch and delete i mean post get put and delete the patch works the same way as put where does it put here but fine so what can we do else fine in the get request you see where is it here we have we are getting all the data so let me add one more called nishant click post data now it refresh this will be here let me add one more called uda postdata it will be here as well but in the documentation you will see let me open new resource we have two things forget we can either get one data or we can get all data so currently we're adding all the data let's try to get one data so in the users we can simply pass the id which is let's say we have four for a bit check so we don't use this just add four four now we will only see for a mishake but the problem is we will get an object not an array so we can console.log this to check open the console and refresh see now we are getting a object of abhishek like this fine so that was gate by id and directly get for all with no id param path params so that's all for now and that was all about axios or api requests i mean axios api request that's fine so what is the bouncing if we search it on google let's say what we get the bouncing it simply means delaying a function in javascript or like yes in javascript basically so see the bouncing instruments okay not this it's chemistry in javascript yes this one it is written here that the bouncing in javascript is a practice used to improve browser performance there might be some functionality in a web page which regula okay we don't need this it simply means telling a function where do i find a correct definition a debounce function makes your code only triggered once as per user input yes this is correct or if you want a more clear explanation okay let me open this my channel or my page and free code camp here fine there are some heavy tasks in software development like calling an api so here we have an api endpoint suppose the api searches a list of users and we cannot or can't afford to fire it too often we want to search it only when we have typed the whole query or whole input so let's implement this in react we will create a function const let's say okay we have to create a function so let's say um what can we say search pin and here i have a api that is that will search the pin code or like location details according to the pin code we also have axios installed so let's export xcos for import xeos import seos from axio here we will make the api call so xcos.get we will use get method then we will pass this pin api here endpoint let's also create one input tag of placeholder enter your pin code so it's done and it's here let me zoom this too much okay fine we have this input fine but let's do one more thing here let's bring it down so we have to just copy or cut this paste it in app or and then remove everything else that we don't need and it's here also remove the background color because that also we don't need we have enter your pin code now this function will run when we type something in the pin code input this input we can say on change event we can call this starchmen input then we have to pass the query so we can say event here it will take event let's do this let's just pass the target and value directly now this will take an event here and it will pass event dot target dot value let's take the value here and and and and and and we have to append the value here in this pin api so we will do a question mark um wait a second let's do this yes it will append the value like this so we can say console dot log it responds res and save if it fails we will simply catch it cache to get the error if any in the console console.log error we have one extra market let's try this open the console oh sorry not to console let's open the network tab first let me do it like this close this click settings here how do i remove this yes yes yes click settings but what about this we can't clear disable cache no just click this button it will not okay just bring it upwards a little bit now let's type the pin code see we can see the response here it's returning us this and it's a bending the pin code to this api using this value so in the preview in response we are getting the post offices so let's filter it out now if you now if you know if you now know the api call is getting called properly so let's refresh and try once more add the pin code okay undefined what about address let's try once more eight zero zero zero zero one one more zero extra i need to remove that open this response we have to keep the data for rds dot data and what's inside the data zeroth index we have to filter zero index dot post office so that's not important the data we are getting the data is not important the important is how we are reading the data so let's say if you are if you open the network tab clear it out everything type your pin code let's say eight zero zero zero zero one so let's start let's say you type the pin code six or five times you have to just how does how will it expand okay so we called api like six times because we have six numbers here so the api call has been called six times each with a different response and request so to avoid that we use debouncing and if you use the bouncing what will happen is the api call will be called only once and this whole data this whole query will be sent at once because currently if you see we are sending 8 then 8 0 then 800 8 000 and then so on till the last letter so that's not preferable that causes abuse of the api and trust me you don't want that so what we can do is we can just refresh the page let's implement the balancing now so for the debouncing function we need a method which is called useful from react so let's import it import use effect from react also it's fine here but we need one more thing called states so we will import use state hook and we will create one state so cost let's say pin and set pin now if you type the pin it will be set inside this pin state using set pin method now let's create the hook of user effect all these things we have to do then it's simple now we have a dependency array so if we put the pin here or the state here this use effect hook will run and it will call anything that's inside it when like it will call everything inside it when the value changes so we will do this it will create a set timer function inside this user vector we will do const set or search pin let's do this equal to we will use set timeout set timeout or let's do set search pin or let's call the function the bouncing point we are creating a function called bouncing okay yes then we have to move this whole thing inside the set amount function but one more thing before moving it inside this takes the function that it will call and the interval so let's say we want to call the api after two seconds of typing so when we type and let's type eight four zeros and one the moment we finish typing one at the last after two seconds this function will run after tapping two seconds i will show you so in the balancing we have set timeout here let's cut the xus api called and we don't need it here remove this so the value becomes the pin now because we have the state here so pin api plus the pin it will append the pinning code to the api at the last fine and then we'll display the data so it's done the bouncing now we have to call the function so to call the function we can simply set we can simply do this so how to call the function let's do this so we will do return and inside this return we will do but wait a second okay um how to do this is in the return we will do this clear timeout player timeout and we will pass this demonstrating function so let's see if it works or not now what will happen is if we type in the pin code text the pin will change and this function will run but it will only run when we type the last letter and then after two seconds this api call will be displayed so now let's check clear the console now let's type the pin code eight zero zero zero zero one let's check see it works after like two seconds we are getting this call here api call with the data that is present in the database all this data let's try one more clear it out let's try six zero zero zero zero one see now we are writing the data of chennai because this input of 6 this is the pin code of like from chennai i think if we add 5 it will fetch one more set of data after 2 seconds fine so that's how the bouncing works in react we have two components here home and profile both at the same level in the home we are passing a name a state called name in the profile we are passing the function to set the state of set name in the profile we have a button that will change the name to there when clicked then it will like if we change the name it will be passed here and the name will be passed in the home component like this so if you click the name change the name button the name will change to that like this let's remove the profile we don't need that all right fine change the name the name is there so basically we have a app that changes name using two components it is changing in profile using a button and it's getting displayed in the home component so where in the both components we are passing name and set name as props here we are saving it and declaring it but this can cause a lot of like clumsy code and it also causes one thing which is called prop delay for example let's say we have a component home in the app.js in the home we are calling another component as its child in that child component like lets child1 we are calling subchild1 then we have to pass the name all over to avoid that we use something called context api in react so let's see how it works so the first step is we have to create a context here so let's do that let's create a folder first called context context in the folder let's create a file called global context global global context.s a javascript file let's import something called create context this will be used to create a context in the global context.js file let's create a const let's say let's say let's say let's say user data let's create the context using this then we have to pass this create context and an empty object here this user data will be our global object or global state so we will do an export here if you want to use this user data in other components basically we will import the user data in this component of app.js so import create not create context user data from context context and global context so now this chooser data will be imported from here we have to wrap the both components in the user data like this let's make the name as capital let's make it an snu same here and here save this then this fine then we don't need to like have our self closing tag yet we have to wrap our components in this user data tag like this so we are wrapping our home component and profile component in user data fine it was second this was the second step the next thing we have to do is we have to add a provider so we will add dot provider provider means we are sending data we have to do it in the both opening and posing tags like this it's done it's working perfectly now let's pass the data or the functions let's say we have to pass some value we have to pass the value using this value prop let's pass the name here because we want to pass the name and set name as well if we are adding the value here we don't have to add this here it will be automatically propagated to both components wrapped in user context i mean this is a data provider so it's done third step now let's come into the global context okay not in global context in let's say home.js fine we don't need to get this from here remove this and this as well so don't save it because you will get an error because name is not defined yet so now let's get data because here we are sending data to home and profile the both name and set name so this both will be available in home.js as well as in profile.js components so let's now get data that we're sending so we will import the same thing which is use context from react also we have to import the context name which is our data data so we will say import user data from profile not profile two steps back context and global context save this wait a second user data fine we are doing it right okay so in here we don't have the set name yet wait a second here we don't have the set name or name yet so to get the name we will simply destructure it to restructure it we will do const name equals to okay not like this we have this structure so we can say let name equals to we will have to use use context hook and have to pass the context name which is user data user data like this now it will work the same thing we have to do inside profile.js but we will have to get this thing set name not the name because we are setting it using the function of sick name also import these two things here and save enter and save now this should work now click change the name and it should work click it and see the name is with that if you make it to something else like a base shake and click it again it will change the name to a bishop and that's how the use context hook or context api works in react so it's a simple example but you can like do a lot of things with this oh sorry for example let's see we had one more component here called settings dot js make it functional component let's import settings component in home.js like this import settings let's render it out here also let me make it an h1 tag to display it properly save so it's here so let's say we want to pass the name as props so it is in the home component yes we have to pass if we are using props we have to pass like this like this i mean then we have to come to home.js we have to destructure it like this then again we have to pass the name again name as name then we have to get it again here so it's a lengthy process and this thing passing the state as props is called prop drilling so it's coming from app.js to home component it's coming from home to settings and so on so basically we don't need to do it here so remove this remove top here and remove this from here suppose we want to access the name here as well we will do the same thing we will import these things let me remove it from here as well we will import these two things like use context and user data come into settings and we have to change the route for this yes it's the same route we don't have to change it fine let's do this thing and structure the context now we can print the settings or simply the name here a b shape let's change a little bit a little bit say we have to pass one more state let's say const active and or let's say age let's pass the agent settings component set age use state let's say 51 is a number so let's pass the edge as context here in the provider it's passed as a value let's also get the settings but wait a second this shouldn't we don't have to do it here it's wrong so okay i mean if we want the state in the settings we can pass it here in the value in the provider then let's come to the settings page we will create one more we will structure it and we will do this what is that age age let's print the edge let's try this see what we get see now we are reading the edge as well because we are passing the h as the global context here in the provider so that's all and that's how it works our use context api so let's see the difference between class and class names in react we are using a class component here of class of app let's add some styling in m.css so we use the class keyword to add a styling to our html elements or in our case we have jsx in react not html so we have an header here a class of header with a red color and this border in the css file now let's merge them so we will say h1 class this header because that's how we do in html right it's working also you see we have a red color text fh1 with the black border around it but the problem is we are using two class keywords here one is for creating the class that encapsulates or like it covers all these things like render return and all and in the return we are using one more class called this for rendering the css if you open the console what we will see is an error that says invalid term property determine class name because we cannot use class two times because it's a reserved keyword that is used to create a class in react or in javascript so if we search class in javascript we will see the same thing classes are used to create a class just like this so instead of the class we can use class name and it will work fine it will look the same way and we don't have the error now if you check we won't have it see no errors here refresh and save so that's how or that's why we use class name instead of class let me show the same in function component make an h1 here that says something like a second h1 that says hello now let me import css here import app dot tss save it now let's use class here class equals to wait header it will reflect here but you will see the error that we got previously in class component that class name is an invalid dom property need mean last name so the same thing is here so to fix this error or warning we can say class name here and it will work the same way but with no errors if you open the console let's see what we have we have no errors of using this class so that's how or that's why we use class name instead of class keyword in react first of all let me explain all this code here we are having two components users and photos sorry posts we are calling this both in app.js like this we are reporting this and calling this in this lift class name in the users we are fetching all these users here from jsonpress folder all the users and we are mapping it through this array and returning the name we have users similarly we have the posts we have having an array of post the state we have a function to get all the posts use the fact hook and the same thing we are returning the user title from the posts array fine we also have h2 here and we have this h2 so the basic thing to know here is the both components users dot js and post dot js they are same i mean the logic is same for example we have same state we have the array state i mean only the name is different we have this gate posts and get users function the functionalities are same we are calling fetch api using the api in point and returning response then we are setting inside the state then in the use effect hook we have it here we are calling the function then we are returning the mapped array like this so we have two components users and posts we have to create let's create a hierarchical component that will solve our problem for example we don't have to use the function two times here we will write the logic only once it will run in the both components it will take some parameter and it will run same way it will be done here so let's see how to prove that in the react component so now what we have to do is we have to create a file here in the source folder called higher order dot js so make it a functional component like this in this return i mean in the function of higher order it will return one more return or one more thing we will return a function so return function let's say hoc in the host we will put this fine it's done remove this as well and fine so first now what we have to do is we have to remove this default export from here and do this let me import the component of higher order so import this component and simply do this const users comp equals to higher order then we will pass this user's component first let's pass the component title just users not the component so we have to export this as well so export default users com user comp or better make it users com save it also remove the posts from here save it save it save it so here's comp is here fine we are passing the title so let's get the title in this component so we can say title in this div we will simply make an h2 and we will render out the title we can see we will see post sorry users now as the title layer if you make it this it will change dynamically let's do the same for posts we don't need all this now remove this effects this okay we don't we need this but later but here what we will do is see we are passing we are doing this so let's do it here as well remove this populist paste this make this as posts make this as posts comp and quote it defaultly nowadays fresh we will not see it here because we are not importing this component here so import it okay higher it is not undefined let's define it or import it go down to try it so tight refresh we will see posts but we are not seeing here why we can not see posts because there are personal find refresh why cannot we see posts users com put this goes export this higher order post okay call it here as well fine now it's working you can see the title say it successfully now let's just pause this function let me bring it here first we have users and posts so we have to just cut all the function and the state we don't need it here we just need this user's mapping here and here we have to paste here the paste and then import the use state hook and use effect hook simply like this change the users to data so it will be done here and here change the set user to set data and change it here then third thing to change is the function name this should be not get users get data change it here save all these things fine just like we passed the title we have to pass the component name called users so we don't need the s2 of users here and they post save and save so just pass this users here as arguments and here we will pass the function of posts we are passing two things here pose as a string and a function here as well users as a string and users as a function so here we don't need state and effects so remove it so we are passing it here so we have to receive it as well now so we will day we will say component so we will call it as a component so for example let's say we had it here how do we call it we can call it using this save and refresh the page we will see nothing because nothing is here in the div in the return so we can add an h1 in the users and say hello from users the same thing we can do in posts so let's make it an h2 not h1 we can say hello from posts here we are using adding users and here posts and we can see it here successfully but what about the data how will we pass the data to show it here it's very simple just pass it as props in the component like this let me receive it as props the way we do it and we can uncomment this then we can say data dot slides this map then we can see all this data which is user names for the component of posts same thing can be done so uncomment and make the posts wait sorry data. data.slice dot map and all refresh the page refresh and we can see all these things but see we are not seeing the title of the post posts because we have none instead of title we have this which is called sorry instead of with a secondary slice title we should get it here but we are not title wait a second yes we're not getting title because we don't have title in the users because see we are just calling the users so if you make this says name we should see all the names so same api is called for the both components users and posts so to change it we will do this so to change it how can we change it we will pass the third thing here in the component of higher order this will be a string called the last word of the api call for example we have the users so we have to pass this users in the posts we have to pass sorry pass posts now it will come up here let's say let's say let's say the source or response not response what is the better name for this we can say request so pass the request here dynamically so request and add a toilet to make it dynamic now we will don't we will not see the posts because it's dynamic we can only see the post sorry let me explain why we are not seeing posts because we are mapping the data this data user's data which has no name in it but sorry we are not mapping the data we are mapping these posts which has no users in it it has title instead so we can say user title and it will be here see we have this posts and we have this users let me differentiate or make an hr tag between them a horizontal line so here we have posts we have users sorry we have users here and post here all done with a single component called higher order so we are calling the component in both components i mean we are calling the higher order component in users component and main posts in the users we are passing the title the component function and the api last endpoint like this users or posts see both in both we are doing this it is coming in this component as title as title c the user is the title the component all the data component and the request is this request the api last word i don't know what is called because i'm not i'm very tired right now to think fine so we have request here so it's fetching the data according to request according to the posts or users fine then it's also getting stored inside this data that's been stored inside a data state this is the component that we're rendering and in the component we're passing the data as props it's coming here as data and then we are mapping it successfully in both components users and posts so it's like a full circle we are calling the higher order component here then exporting the component here it's coming here all these things were passing then again it's getting called like a function here we are having a state which contains all the data as per the api call we are passing the component again here with the data and now it's coming here and it's getting mapped so that's how or that's what is a hierarchy component in react and how to use it so what is lazy loading so lazy loading simply means to load a component when we really need it for example let's say we have a file that's too big like this file so many text here letters or a project with so many components like a admin panel or a user management portal so in those cases when the file or project structure is big we can use lazy loading to decrease the load time and increase the performance of the app so let me show you the current performance of these two components let me comment this and save let me refresh and bring this back so if we refresh it once more let me change this network close radio to no throttling refresh it so the bundle size is four over nine kilobytes default is in loading so i have already wrote it here these commands so bundles are this for 4.9 kilobytes and the time is 1 3 5 ms milliseconds now let's check the load time and the size after lazy loading to implement lazy loading we will just do this const let's say lorem the component name then we will use react dot lazy l should be small followed by a fallback function callback function sorry not fallback callback in the callback we will simply import the component path so for lorem it's lorem lauren lauren lauren lauren then const home equals to react dot lazy we will add the path for home this will be aim not import what was that yes import the home route h4mb comment the routes before reloading save now let's check refresh the page now in the bundle the size is 375 ms and the load time is 191 milliseconds which is wait a sec size 191 milliseconds that's much okay i think we recorded it wrong so let's comment this and bring back this the original imports we refresh the page in bundle.js we have 4.9 kilobytes and one for one millisecond one four one save now comment these two and bring back the lazy loaded routes refresh in the bundle it's three seven five three seven five yes okay three seven five and wait wait wait wait wait we move remove remove remove and one three one so it's smaller than the default loading imports so see it differs wait a second bundle.js it's 375 kilobytes not ms kb small k in big b like this so that's lazy loading that decreases the load time and increases performance i mean it's not much but for a larger application it will be dramatic and it will drastically improve the performance if we use lazy loading so what if we make the network slow like through slow 3g refresh the page it will load very slowly and in our case if we load it let us load it open the network tab load it it will be very slow and we will see this blank screen when we are loading the components how to fix that so we use something called suspense from react so let's do this we can import suspense from react and then wrap the components in suspense save okay the suspense suspense will take a fallback this one is a callback and it's a fallback so it is rhyming equals to we have to add the component that will load here so we can either add direct jsx like a div and anything inside it that says loading please p l e s e wait save now if you refresh and close this you will see something called loading please wait for a small time for a brief moment of time see it's still here i don't know how to decrease the network speed uh before this let's add custom throttling custom profile let's say profile name is vvs and this is 3 k b i t slash s what is the problem number one must be number one zero two ten kilo bytes i think between zero to ten let's make it ten you cancel this refresh this let's try offline refresh the page no internet okay that's something else fine so let's try slow 3g once more and you will see a loading text here loading please wait for a short moment of time so that's how we do suspense in react or else if you don't want to use this div directly you can simply import a component so i have one component here called loader let's import it so input loader from one step back loader and just add the loader in the fallback callback callback refresh now you will see the loader again see so let's try to increase the text a little bit more let's see what happens let's paste it a bunch of times in app.js but in home.js so just paste it keep pasting it you don't need github keep pasting it and save now it is now bigger we don't need to format it so refresh now the loading text will take some time before it disappears so we can call the home once more and once more and once more now let's check what we have now we see the loading text you see please wait and the loading will come when the component is loading when the vl is loading the component so that's about lazy routing and react and how it works as you see here we have a function called get users that's getting the users from this api call we are simply calling the function to get the users fine but let's suppose a case where this api call we have to do in 10 different files or like 50 different files or components so we have to repeat this function all over directly we have to make an api call to this api endpoint using fetch api xeos then call this then post it and put it inside by use effect look like this but that's not proper so in this case we will create a helper function so let's create a folder called helpers and in the folder let's create a file called get users or get all users dot js copy this function const get users and add it here make it export and we don't need this console we will simply return this function c and that's all for now for the helper function now we have a helper function to get the users from this api call and we can call it in any file we want and that made our things easy so now now let's import this function we can say get users from helpers slash get all users and we are done but a few things before that we have to return it in a led variable so this is returning some value the data after fetching the results all these 10 array items so we have to store it inside a variable called data then we can simply console.log this data and if we refresh the page we will get this promise so we have to create another function we can use async of it here but it's not proper so make a function called const get users helper it will be an arrow function like this move these two things or cut things here and then call it here it will still be a promise so we have to use the async function make it as sync and get users will be await now let's check so refresh the page now we can get all the data here correctly without calling any api in our main file so that's make our app.js or any component in which we help use the helper function clean and easy to use and understand so the logic is separate from here and the ui is separate now let's take one more example let me create one more helper function here which will be called add to dot js this will add to numbers so we'll do export const let's say add nums make it an arrow function again okay what i am doing equals to this syntax then in this function we will simply turn the a plus b so this a plus b we have to get it somewhere from somewhere so we will get it from arguments then if we call the function we have to pass a and b here so copy this function name add nums come here we can simply call the function add nums from helpers slash add to so we can call the function so let's create one more so let's say const add to nums helper then we can simply call this function like this then let's add a button here say add and on the button we have an online event we can have and this function call now it will return this but we have to store it in some variable so we can select sum equals to this and we can simply console this sum console.log sum now click the button okay we can just comment this data console here now add click add we will see nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn n means not a number because we are not passing any arguments or parameters because it's getting true so we can pass two numbers directly say two and three and now if we click add we give we will get five here in line number fourteen in app.js file so that was function a function to add two numbers using a helper function suppose we want to add one more function here called sum so we had some already we can say const multiply so we can do return a multiplied by b it will also take two things because c and b are not defined in add to wait a second in add to yes it's not defined so we have to define it then it will multiply and return us back the multiplied number so here we can do or simply import it first so it's multiply the function name and let's measure make it multiply nums so copy this function name and add it here input it first so we have the sum here we can also have let's let multipulse equals to multiply sums and let's add two numbers two and four then we can console the same thing so what is the problem multiply nums was not found in helpers add to save this then it will work let's add one more button for multiplication but we can use it as also so if we click we will get sum and multiplied numbers so 5 2 plus 3 5 and 2 into 4 equal to 8 i think i'm correct so that's so let me show you one last thing here we are calling this get users helper function i mean we are having a function of get users helpers in this we are calling get users this function we can pass a param here as well so for example if you see we have something like posts comments albums all things so let's try to add the posts here pasta variable called posts i mean not a variable a string it will come in the get users function and we can receive the users we can receive it as params or parameter then let me convert this into string literals here then we can simply replace user with the param so if we pass anything here in this function of get users it will come up here it will append to the api endpoint and it will call so now i will get all the posts refresh comment uncomment this data and we are getting all the hundred posts see if you pass to do's we will get to do's so let's pass to do's so now it became just it just it became dynamic it just became dynamic yes now if it is refresh the page it will be to do's 200 this we can check the network tab so let's open network refresh let me filter it to xhr and fetch api let me turn it network all settings where is the filter i think settings slow 3g to fast or no throttling now you will see we are reading to do there if you open headers this will be to do's if you make it as photos we will see photos in the console it refresh and we're reading photos so it just became dynamic so that is heart or that is what is a helper function in react and how to use it so as you see here i have an object a family tree which contains children's for example this john it's a grandfather and it contains these children called mary arthur and dolores it has his children so we're mapping the children from this this array yes so click this john it will show the name of history children's but this can become hectic if we have children inside children inside children like this that right that's right so see you have children inside children and it can go on and on and on in that case we cannot get or we cannot map each and every child statically like this we are doing right here we have to automate the process so that it maps itself so in that case we will use recursion so that the family function or component calls itself when it comes to mapping so let's do that we will call this family function again in the time of mapping so we will pass the same prop here family tree but in this case it will be child so for example let's say we are mapping this children first children it's returning us this thing and the child children inside it if it is true it will pass it up here again and it will like break it like it's going up here so let's pass the family tree prop as child so if it has a children array it will map it up if it is not have an array it will skip it so that's the power of recursion now let's try this click john it's open mary add serendoratus it's opening this then click the author it will open up because arthur has the children diary these two now click marry it will not open up because mary has no children now let's go into dollars same dollars has no children but in this arthur we have lillian billy if you click lily it will have two children because then it will open up but hank and henry have no children so it will not open up then again same with billy it will not open up so in a same way in a similar manner if the child if the child have some children it will open up or else it will not open up so that's recursion in react and how to use it so in this video let's see a question that says write a function which takes an array of multiple functions and executes them one by one in left to right manner and it has been asked by the matter in their intervention or questions so let's try to tackle this question our approach should be simple we will create an array first so let's create an array of this const fn array and it will be a array yes so step one that was and inside we will have some functions so it says it takes an error sorry array of multiple functions so let's create multiple functions so let's function key what we need fn that's how we write a function let's return return a plus b let's write the params here fine we have function to add two numbers let's repeat it three times this will be subtract so minus multiplication and this one should be division so we have an array of four functions so this part is done now let's execute it so let's create a function a main function that it says in the question so write a main function so const main fn we can make this an arrow function inside this we can call this array using map method simply but first we have to call this function in this effect as well if you want to run it on the page mounts on the page mount sorry not yes not here here sorry sorry here we have to write so we will simply map this different array so we can say map to get all the functions inside directly it takes a parameter called fn and we can simply return this fn function now let's store the data inside once variable because it's returning it so console. okay let's do this let's say let data or let's say relate result so whatever we get from all these function executions we will get inside this result the data will get inside this result so we will get addition subtraction multiplication division all these and then we can simply console it to check in the console so what is that let's open the console and check what we are getting right now it will be an error we are getting this array yes it's an error because all the four items are giving nine because we're not passing this values which is a and b so let's pass two and three so refresh now we are getting this so 2 and 3 we are passing so this will be 5 minus 1 because 2 minus 3 equals to minus 1 this should be 6 because multiplication and this should be this 0.6665 we can make this as 4 or 6 and 3 then we will get this 9 because we're writing them 3 we are subtracting them 18 multiplication and 2s division so that was how we do it in an array but we have one more option here to do this not in an array but in an added object so let me comment this and wrap this in an object like this we will make an add value here add key now this additive add this add will run when the function is running i mean this add will run when we call the ad so why don't we make this as something else called or make this function as add and this should be a simple key name which will be function now we have the add function similarly let's repeat it multiple times okay not this let's repeat let's make it minus multiplication and division division now this should be divide this should be what can we call it multiply or multiply multiply yes they should be subtract now we have now four different functions add subtract multiply and divide save we can remove this but let's leave it now we will call fn.fn because we have a key name here in this object because right now it will give an error if you refresh the page cannot try properties sorry fn is not a function so i will do fn dot fn and that will work now the same way refresh and we are writing all the four items after subtract after addition or sum subtraction division and multiplication so in both cases we can do it so i think that's all the question has been solved we have a function that takes array of multiple functions and executes them one by one left to right so left right means from top to bottom if you are saying this formatted code so add is that left then second left third left and fourth left so that was how we do it and it's done so let's say custom hook is a service we can say like in angular we have services the same way we can have a custom hook but with more functionalities so let's try to create a custom hook here that will call these two apis we will need a file here called let's create a file called hooks in the file let's create a sorry in a folder let's let's create a file called use json or use yes json place holder so if you want to create a hook you will use the name with hugos jsonpress filter like this here we will create these two things so let's copy and or cut and paste it here save now what we have to do is we have to just create and function like this like this function app so we'll do function let's say use data use data it will be in function like the app.js inside we will see we have these things all these use effect hooks and states so see we are having these two states and we are using it here so let's create this in our this hook inside this function yes so paste it and save but we need to use state from react so let's import it import use state from react save and these two functions we also need inside this use data at the last we need to export this so export default this use data work and we are done not done almost done we have two states use users and posts and we're calling the api we will note here that we will we also have this use effect hook so we need this here in order to run these two hooks these two methods i mean get users and get posts so let's import this as well here so use effect and it's done fine so save this file but we will get an error because we don't have the users here these states we don't have here so let's return them from this component just like we returned some jsx here this we will return it here so we can say in curly bracket we will do users comma posts and that's all so that's how that is our custom hook to fetch the users and posts from this apis but we have to call this new hook into our app.js so let's do it we can import use data from this address this navigation address then we can restructure the data here we can select users and comma posts equals to use not sorry note you use data yes we have to this and it will work it will fetch the data that it was fetching previously so here now i have a hook that fetches the users and get posts and its loads on the page load or page mount so basically we're doing this we are getting the posts and users from these apis and loading them on page mount which is in our custom home so we can use it anywhere we want because we don't need this here remove it fine yes we can use it any way we want in our file or project or component or our react app so that was all about how to create a custom hook for a custom singular group so let's take an example first of a reallife promise that says i promised someone to be my friend on one condition that i give him a chocolate every day if i fail to give him a chocolate even on our day or a single day or one day he will break the promise and he will not be my friend now let's implement this in react so what we will do is we can create a let friend function inside we will have a syntax for promise which will say new promise it will take two things which is resolve and reject so if the promise is complete done it will be dissolved or else if it fails it will be rejected now let's create a condition for promise so let's create a variable first so let is chocolate every day if it is true only then the promise will resolve so we have to do this so if this is true is chocolate every day if this is true we will call this resolve and we will pass some params which will say promise resolved if it fails so it means if this variable is false is chocolate every day we will reject it we can say reject and a message called promise broken so that's done now we have to call this function called trend so we can do it like this so a friend function then we will use then block so then for resolve statement which will return as a response if it is successful so in this then log we will call this response and we can simply console.log this response and we will get this message here promise result but if it fails we have to call a catch block which says an error or let's make this simply as dissolve to simplify things and this one has reject clg digit now open the console and let's see what we are getting in the console refresh okay something is wrong trend is not a function so what can we do here let friend okay fine make it as const then it will work okay the problem is this is not a function so let me clear this save and let me refresh the page now it will work so promise resolve because we are resolving the promise it's true then it's returning this thing or else if it fails it will return this so make it as false because we fail to give chocolate every day so it's broken we can add a customizer here as well like this so we can say or just wrap it in a template little string and we can add our text no dot add here do i dot here and say no more body not here do it here like this that will say no more f r i e n d ship no more friendship and now i will get the extended message here with this promised broken message no more friendship so that was promising react now let's take one more example for thomas here in this promise one it is a function and it's getting a parameter called prime one if the parameter may pass its nissan it resolve else it will reject in the second function we are passing param2 and if param is promised resolved this resolve text it will be resolved and print this or else this basically we will link these promises together in a chain so we can call the promise one first so say promise one we will pass some parents let's say nishant then it will resolve because the parabola is nishant then as per condition it will dissolve it will return us some message in the then block say response we can control this response and let's see what we get let's also call the function in this effect to run when the page mounts so open the console it is a phrasal page we are saying promise resolve text line number 27 because the promise has been resolved and now see this promise 2 takes a param 2 and if it is equal to this problem is resolved it will resolve this else it will reject this so we have to chain one more than here say then and here we can say uh response again response or we can say f response for first response and s response for second response then we can console dot log this s response but we are not calling this function if we save and run it will be undefined because the function is not getting called and this is null or undefined so we have to call promise 2 here and we have to pass this f response here so let's do it and pass this f response now it will work refresh the page we will see promise resolved and undefined wait s response is getting passed here promise resolved the text is right let me add one more block called l or catch error block so the catch if it isn't any error then we can say err error and console.log this error now we are reading this promise resolved again and undefined but we shouldn't get this then s response we are calling this promise to okay the problem is we have to return this function not simply call it like this it will not work so return promise to an f response now i will get these two both so let me console it or just go back and return this function now refresh it once we will get promise resolved and sean is a good boy so basically we are getting first response and second response if we make this promise rejected here or change the text we will get some errors you see we are getting promise resolve from the first response and sean is still a good boy from this reject statement but if we change this thing this should be let's say challenge so it will not go inside this then block because it will directly reject the first promise it will directly go inside this error so if we refresh and save we will get promise rejected let me refresh once more we will see promise rejected because in the first level we are not dissolving the promise so it will not get inside in this block it would literally go inside this block and it will reject the promise so that was promise in react and how to use it so now let's look into asynchronic part in react so what is the thing of it it's nothing but sync tactical sugar on our promises so what do i mean by that is let me show you what i mean by that so in order to make a function asynchronous we will have to use assign keyword here now the function is async we have to call await now so we have to call the function now this is promise one function so it simplifies the way we write promises that's all nothing else so we will await this function from this one and await means everything else in the promise or in this promisement function will wait until this function is finished executing so let me record the response in a variable called response or res now let me console this res let's see what we are getting we should say nothing or we should and it's not matching together so open the console console we will see promise rejected because the name is not matching so let's pass nishant here or make the param one equal to nishant now i will see promise result because it's getting resolved fine so it finishes then everything else will run because we have an event here now let me call promise to so let me call promise to using let res to response to equal to await promise to and we have to pass this response here because it's promise resolved it will it will come here and then it will print this if it dissolves so we can console.logs second one as well which will say ras2 and we can save the file and check refresh it once and we will see promise resolved and nishant is a good boy fine but we cannot catch errors here but we i mean if we want to catch errors let's say we don't pass anything in the promise to where is it here let's say you pass something else called some random text we will get this message here so we cannot add a custom message we want in this async of it oh because but we can so what we have to do is we have to wrap it in a try clash try catch block so try all our code will go inside try that can fail and then if it fails you will call catch like this is that right do we have to call catch like this let's think or try so in the catch we can say console.log we can say promise rejected i think we don't have to use this save and now let's see yes that works tom is rejected because we are passing some random text here known the text that's here and being compared to param2 so promise rejected because you know why if we add res here it will resolve again sorry res response refresh promise resolve and shan is a good boy so that was promise and asynchronic now let me okay let me just copy this let me make this a sync main thing the name and add it here fine now let me do this copy the function or the use effect hope together and go back to promises page or where we wrote the promise code and simply paste it here wait brothers sends okay challenge this should be not here should we make this yes let's add the function here we only need one use effect hook because we can call one user factor and two functions two birds with one stone so we have promise main this is the syntax of promises this is a syntax of s incoming async away so you can decide which one where do you want to use if you want to use promise or a think of it i prefer think of it because the code is shorter and simplified not this then and then in catch so that's up to you now and that was all about promises and async await in react the implementation so what is code splitting it says here that most react apps will have their files bundled using tools like webpack crawl up or browser e5 bundling is the process of following imported files and merging them into a single file called a bundle and it can be loaded on a web page to load the app at once so it basically said that whatever thing we write in our apps in this project or in this react app it will be loaded inside a bundle let me show you that bundle and what is it open the network tab and you will see if you refresh the page this bundle bundle.js file we cannot this file let me show you like this bundle.js which contains everything so everything will be abundant even if we are not using the imported things here it will still bundle the app.js input and this or even if we use this or even if we want to load it like this it will bundle so in this case we can use something called code splitting in react which is me which means that we can create a smaller bundles this to avoid winding up with a large bundle it is good to get ahead of the problem and start splitting your bundle it is a feature supported by bundles like webpack and all which can create multiple bundles and it can be related loaded dynamically at runtime so one more thing we have here is loading that i showed in this playlist you can see the video but in this we will use dynamic imports to code split and we can do it like this so it's it says here that this is normally import we are using it here and this one is the part is it it was forward splitted dynamic input instead of using import here let me comment it we have to use it here so we can do it like this we can say import the path which is math and we can use a then function or a then keyword then it's simply a promise based or uh what is it yes promise based call and if you want to learn about this then you can see my previous videos on async await and promises and react online limitation will be there so then we can say math wait a second then we can say math and here we can say uh this thing so just copy or cut and paste but let me make this a small math this math will be a function that we are getting here if you console this math let me comment this sum and control this math let's see what waiting let's see what we're getting in the console open the console we will see this module basically a bundle now let me bring this back and we can do math dot add and we will pass five and six okay and then we can just do this as well replace add with this then we can control some let's say we will get 11. so it's working you can see open the network tab now and refresh the page we will see a bundle called src mac.js chunk so this thing in the user facebook is a dynamic import let me write it here dynamic import and it created import it created a small chunk a small bundle so we can use the bundle to improve performance and decrease load time fine fine so let me give you one more example here so if we refresh the page this bundle is loading see so let's say in a case when we only need this bundle when we click a button so we can create a button here first that says add let me quickly create a function so const sum or let's say const simply adds it doesn't matter add an arrow function this will be and we will move all this import in here including this let me remove user factbook and this as well something is wrong use effect also that's fine now this function will only run when we click the button of add so we can say on click on click this thing called add we have a button here called add let's click it and see what we're getting first let me open the network tab to see if the bundle is loading or not no we cannot see that math.js bundle but wait a second how to remove what happened what is this okay it's something else it's step tools so you see we are not saying this mac to js bundle we will see it only if we click the button of add see we are seeing it here and it's getting called a chunk file a small bundle so that's how we use dynamic imports in react to improve performance and it is one of the examples of code fitting in react we can use react dot is the import lazy loading i mean we can use fallbacks okay not this we can use this so it's just part of the lazy loading so that's how we do dynamic imports in react so first of all we need some data so let's go over to this website called jsonplaceholder.com we will get some apis from here that will feature some data like this to do or this posts comment and all so let's make the api call in the user effect or let's create a const method const let's say um get data and all of these then the switch api now let's import the effect use effect hook from react react like this fine but let's replace this to do's with uh let's say let's say users so make users here nmr1 fine so we can see all the users if we call it in user facebook and set the states and do all this so also we need the state so let's create it using your state hook so user set users equals to users for use effect and array now let's set it here instead of console.log then we have to call the function in the user book so render it here then call the function simply like this get data save now time to map this users to return the data inside so we can say users dot map let's say user then we can return some j6 that can be a div or a fragment first in the fragment let's make h2 of user not name you will get all the username here so if you open the users we have more things like username as well so let's render this as well we can make an p tag and then we can say user dot username what is it username if we have the username here this all let's make wait a second let me wrap this in a div this user's mapping then give it a class name of class grid main we will make a we will make a card here in the app.css so we can say grid mean in this function sorry in this class name we can say display of grid and all of these fine we will have this type of template so we don't need the margin top also let's try wait user name username what is happening remove template rows refresh the page one second i think this should be let's make it auto auto auto to auto adjust them but wait something is wrong here is we have to make it a div here let's try now now it's working we have the name and the username after the name so let's make one border also but we have to do it here in this day so we can say div class name grid child come to the app.css and say grid child here we can say border one pixel solid two one two one two one and we have a border here let's add a little bit padding 10 pixels not here here now they are fine let me decrease the color it's black let's make it a little bit gray grayer like this will be fine we can go more okay okay okay this one should be fine okay we have the name and the username fine now what we have to do is what we have to do so we can see all the users but let's create a search input first so we can say input placeholder should be search users we will have the input of search wizards a class name as well of search now let's come to about css and search then here we will be making these things also remove this border we don't need that okay it's too big so we can make the height of 20 pixels should be fine width to 80 percent too much 50 let's try 40 okay 40 looks fine then let's say margin top and margin of margin top we need 20. fine also let's remove the outline of this to none make it none we have this also change the border to this color what is it this now we have this search we are giving the power query now let's get the query in a state so we need one state as well so const search query and set search equals to use state it will be an empty string empty string initially because we don't need to search initially so it's empty then we can change uncheck yes so on change event let's type it here on change event it will take then we will use set search function to set the query inside set the query inside let's search event dot target dot value save whatever type in this input will be stored inside the search query now comes the logic way to search let's create a use effect hook here simply like this it will run when our state of search query changes like this now let's try to do this what can we do we will use filter on the user's array filter function filter it will return a user to us then it will return us whatever condition we write i mean it will return us only the data according to the condition we write here not everything else so it will filter them so we can say users first let's convert this object into an array because we will use that function plot includes that only works on arrays not objects so object dot user sorry object.values first convert it into an array like this then join them and it means to make all the items in the array to be a string using this join fine then we will convert all of the strings that we have like this lee and graham arden novel into lower case using two lower case method so that we are having all the items in lower case then again we need to use include our last method here so we will find that if this search query is included inside this whole string or array string of arrays it will return it but what if we type something in lowercase 30 not lowercase in uppercase like this in this case we have to use to lowercase here as well to convert it into lowercase like this so make it to lowercase and the logic is written now what we have to do is we have to create a state to set this data so we can say const let's say searched search searched and set searched equal to use state this then we will set it here like this all the data i mean all the filtered data will be stored inside the state called searched let's also create one more check so if this query exists so what if it is empty so if it contains something we will set it all here so cut and paste else we will do this we will set users to this users just like that fine now what can we do so we are showing right now activate showing right now is the original array so let me comment this out first so if this not searched let's try this search query if the search for a dot length is more than zero we will return the searched array so we can say this let's do this so searched where is it we can say search dot map let's say search then we will return some jsx which will be just nothing but this so instead of this user we will use search and so it's the first one let's do it in second one just return this users dot map or simply cut it this and now if we check let's try to search something try to search l e a and and we will see the first one if we cancel the search or clear the search it will go back to the original array let's start search erwin hobble erv so it's showing up here and we're done so that's how we create a search filter in react using filter function now let's try to add one bonus feature here which is not just any search debunked search for example let's say we type something here it's searching one by one so it searches for l first then if you type e it will set for l e which can be inefficient so now let's try to implement the bound search for example if we type le it will not search initially or just when we search it will search after one second or two seconds or depending on the countdown we write so in this if we can do this let's create a function called searched equals to this so in this this we will use a function called set timeout so it will create a timeout for us and based on the timeout this function will run so the timeout is 1000 milliseconds which is one second so after the one second of typing here we will get our results not immediately now we have to return this and clean up do do clean up so return it return this so we can say clear timeout and put the function inside which is searched now let's try to demo this search for l e a and after one second it will be here so refresh the page let's try once more l e a so you see after one second it's coming here clear it out type l e after one second the data will be here so that's how we do the bound search in react make it 500 which will be 0.5 seconds or half seconds refresh it type le after 0.5 seconds this data will be here in the filter data after searching type lea it will be here after 0.5 seconds so that's how we implement the bound search in react so what is typescript first type typescript is a superset of javascript it means typescript can do everything javascript can but javascript cannot do everything that script can like the relation between css and scss or sas let me take an example of what can do we do we type script additional things see we have this cons user which contains first name last name and role but we are consoling the name here so this will cause an error on the compile time if it is javascript but in the type script we will get this error called property name does not exist on the type this and this so let's try to duplicate this so let's copy a paste it here can remove all this code so we have this user which contains first name last name and role but if we console the name which does not exist here let's see what we get so console not log name but user dot name user dot name if we hover this name we will get the same error that we are getting in the chrome window property name does not exist on the type first time string last time string and all but if we add the first name it will not throw an error because we already have the first name here so that is the power type script in react but how do we add typescript in react so the basic stuff is just open terminal we need to do this so if we are creating a react app we usually do nbx create react app and app name so let's make it app but in case of type script if you want to add it in react app we use the flag called template and the name which is typescript if you've seen the documentation of create react app you will see the same thing here template and the typescript we will get not js files but tsx file tsx which stands for typescript in jsx so and one more file we get is this file called ts config.json which determines how are we going to compile our code to type script from javascript because this browser does not does not understand the typescript code it needs to get compiled to javascript so that's what how do we create a test script app in react so let me rewind it once more what is javascript typescript is nothing but a superset of javascript it means everything javascript can do typescript can do and more but everything that script can do javascript cannot fine it has so many features like type checking interfaces and all you see all these things here error handling no interference windings in javascript but in typescript we have the editor warning if you make it a name it will throw an error that name does not exist in this user object like this so that is the benefit of using typescript for example let's say we have a state here of count and set count tested the value is 0 initially and we are putting the count value here and a button to increment the count so basically we will test these two things that the count value is 0 or not initially and this button when clicked is incrementing this count or not using this library called react testing library which is default in the create react app it comes with a package you don't have to install it externally but if you want to install it just use the command or just go to react testing library this first one then you have to install using this command and install save diff react testing library or testing library react so now let's start to test these apps not this app this operation yes so the first step here is to do something like this we have this file called app.test.js so let me create one component here that will be called dot js a file let me move all of these things like count and button click here make it a functional component first then let me move it here like this also we need to transfer the state count here and import the state i mean the use statement use state now let me import this component called count here so import count sorry counter from counter then simply render it here like this it will still run fine we can increment the count as we want so for app.js we have a file called app.test.js but let's say we have a counter component we want to test it for this component we will create a file the same way we have app.test.js we will name it counter dot test dot js you can name it anything you want but let's go with this counter test.js and if you open up app.js you will see these things render and screen that we need to import we also need to import the component like app so here let me import these two things let me remove screen for now we don't need it and this app will become counter from one step back counter save next thing we need is to use this test keyword so test means we are going to test something so let's do it we will write a test here a unit test in which we will run a description first so here it says renders learn react link but we will write something like check the initial value of increment sorry in not increment count then we have to use the callback function just like this let me write a callback here here we will write this render so render means we will render this app component but in place of app we will render this counter like this so now this counter will return something so we can say const const and object this equal to this we have to destructure the object here from this render one more thing if you come to this counter so we are just calculating the value of count initially so we have to pass an initial value here so initial value equals to something so let's say we have to pass 0 only when it will succeed because if we check this counter.js the value is 0 initially this value so we have to check our test case against this and same here we have to do so pass it save at both places now as i said this render will return something and this will be this counter value this current value inside this h1 because let's say we change the count this will be changed as well so we need to pass or we need to assign a prop here which is called data test id i think that's it and we can say count and here we have to make or we have to grab this id using this function called get by test id i think that's it so now furthermore we have to grab our value of this count from this test get by test id we will do let create a variable called counter equals to this thing which is get by test id and it contains our id which is count so we have to pass count here i mean it contains our value so we have to pass count to filter that value of this count which is zero now we will we have the counter value but we have to make or get the text from there so we will use a function called or a prop called uh text content yes this now this counter contains our value of the account initial value 0. now but the problem is it's not a number it's a string so when we run the test script it will fail now we will use our thing called expect expect means what value we're expecting so we're expecting this count to be something which is equal to or equal to equal sorry uh to equal zero yes by the way we we should have counter red dot count and our script is written successfully now let's try to run it and see what happens open the new terminal and here we will simply type npm test we are testing i mean we are writing this nbm test because open the package.json file you will see in the scripts we have npm start to start the app similarly we have the test or npm test to test the app press enter it will test your application or mainly run the script let me zoom this or make it in the whole page so it's running the test the problem is we also have on test in app.test.js it will throw an error so we can delete it later see it will fail because here it's not getting this let me show you it's not getting all of these here where is the m.js this it's not getting all of these so let me remove test from app so delete it simply delete this file then in the setup tests okay we have to import this report web vitals index.js where do we import tests we have a vitals i think that's all now let's test it again clear this let me clear this and try again npm test let's see what we get so it's running now the first or only the one test that we have it's running it and it will fail because see expected is zero but we received the zero in quotes it means it's a string so it will not work here like this we have to wrap or we have to make this value or this value in a number or a numeric value so let's do it so just wrap this counter into a number to make a number not a string let me clear this once more or i think that is automatic so it's running the test now this should be successful it's a basic test to show you how do we do this so it's running now it's passed check the initial value of the count it's passed in 30 milliseconds or what is this point and time is this it has been passed so it means that our test has been passed and the value of count here is the way zero it means this has been passed okay now let's write one more test to check the increment functionality so we will copy this test once more then we will have check the increment button we have writers wrote this description and similarly like this gate is by ida function we will call one function called get by role so you see this button has a role it's a trigger event so it's the role that's why we are using this function let's create an instance of this button so let's say increment btn equals to get by role we will pass the role which is the button like this and the title i think that's right but yes button and the name so the name is this increment let me check here increment count is the name we have to grab the button from here like this so we are having this tape now we need a function to trigger this button from here which is called uh fire event i think yes this one we have to pass this fire sorry we have to pass this increment button in this fire event on click function so click when this fire event is clicked it will run this encryption button and all of these things so now this fire event or this test case should expect something just like we did it here it expected this counter to be equal to zero initial counter but in this case it will be expected to be the same c the problem here is we are incrementing the count here to 0 but we are taking it here so it's already 0 and we are passing 0 here so it will pass this test case if we go to this test case and see two cases passed so if we make it as 1 it will fail because we are sending something else but we are expecting something else it will be here soon see expected was 1 but it received 0. so it failed so what we have to do is we have to make this zero and put it here so basically counter is checking for zero it will be 0 then it will run true because both are 0 then it will it will run this increment button feature or test and fire it it will fire the event then let's create one more counter which will be counter inc which is mean which means counter increment then we can expect the one value after increment so input will be clicked then it will be one not zero now save and pass this counter rank here say when let's test what we get this test should pass or it will pass i'm waiting yes both passed i mean both twists if you make this a zero it will fail because it was the row then the button clicked again it's still 0 we are passing here so it will fail it's expecting 1 not 0 see it failed so that was how we test a app in react or how we test our components in react using this testing library from react so basically i am calling an api here from this where this website and i am storing the data in the state called data state and we are mapping and all if the api is loading we will see loading text and if it is loaded we will see the data now let me make or let me just refresh the page first you will see what i mean you will see the loading text for a moment and then it disappears and then the data is coming but let's make the network request little bit slower so we will do it like this how do we do this slow 3g now refresh the page it's refreshing and we will see the loading text for some time and then the actual data that we need then we refresh again or let's say we've changed some pages this api call will be same it will call the api once more so to avoid that let's use this react query library to cache the api calls first of all we will install two libraries there which is react router and this react query so add this wait a second this and react query so this react router will be used to navigate building pages and this query react will be used to like cache our api call fetch and cache so is this it the command which is npmi react query let me check where is the command installation yes it's the same press enter it will install this both libraries in our reactor and let's wait for it so they have been installed and setup is also done setup is nothing but two routes normal call page and cached call page if we go to the cached call we will see the cached call text if we go to normal call we will see the loading text and the data after that go to cache call again come to normal call and it's loading again that's why we are going to cache this api so that if the data is the same it will not load again it will get it from the cache and for this we are going to use react query here this library so let's do it to set up this react query in our react app we need to import a thing called or two things called react query client provider and just the react query client so import this from react query we will say uh query client and query client provider then we need to wrap this div into this query client provider like this save and this will take a key called client and we have to pass this instance of this client so let's create an instance to create an instance we can just say let query client ent equals to let's say query client and then pass it here save and our app will load but it's not loading because i don't know because why because i have missed one keyword here it's called new that's how we create an instance so now save it and it will be fine so it's done the basic setup of react query now we have to call this api again in cached call so let's do it and in this component let's import a thing called use very from react query so we can say import from react query we will use something called what i said just right now you is use query like this so it will be a function that we need so we have imported it and then we have to do this so copy this us query and here let me create the use query function like this so it takes a query a key so the key could be anything you want but let me make it as data or yes data then second thing it takes wait a second yes data one parenthesis we need then second thing it takes is a callback function like this and in this callback function we will do the api call so this api call is here so let me get this and paste it save it and it's doing all the same all the things that it was doing before in the normal call.js now let's create the states here whatever we had in the normal call data and loading states so copyist and paste it here save now import the state or the use statement from react because we need to import it like this fine the next thing we need is to do is we have to map this api from this data just like we did in the normal call so we can just copy and paste it here after the cached call and save so instead of the data i mean instead of this normal api call in this user effect book we are calling it in the us query hook from react query also let me set up this loading text so if loading is true i will see loading or else we will see the result that's fine but as of right now the both pages are same the api calls click cached call we'll see loading click normal call you will still see the loading text even if the data is not changing from this api so what we have to do is to fix this or to manage this remove this then block and return this whole thing using return keyword then we will cache it in a response or run in a variable so say const let's say it is that equals to this and we don't need these two as well because we will structure it from this result directly so if we console this result you will get sorry not data result we will get the loading and the cached i am in the loading in the data so just command this and loading is not defined command this as well now open the console and let's check we are seeing all these things from this query which is data that we need we need the error if we have an error we will get the error here we can restructure it from this result is faced it is true because data has been fetched it is error is error because no edits we have is fetched after mount yes is fetching false it means if the data is still switching this will be true it is loading error so we have all of these things so we need loading so let me structure the data and loading from this result so we can say data and loading not loading is loading yes because it's false and if we comment or bring it back make the loading as is loading and bring back this thing we can have a result it's not defined okay result is not defined yes this one now it will work fine we will have the cached call properly called so now let's start from the start refresh the page once the cache file is here click normal call you will see loading text now click cast call again we will not see the loading text because the data is not changing it will simply call the api i will not call the api it will cache the api that you already did and it's displaying as the results we need to remove the state use network save and click normal call we will see loading text click cached call we will not see the loading text so now let me make it a little bit slower i mean the network make it as okay it's much slower okay now clear the console or clear the invert tab now click cached call so i did not click the normal call loading is here it's loading and now the data is there but if we click cached call we will not see loading because it has been cached see directly getting the results without loading text or loading h1 so that's how we catch an api in react using this react query