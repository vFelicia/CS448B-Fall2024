Learn how to use Django and the OpenAI API to create a chat GPT clone, complete with user authentication. Tommy Taco teaches this course. He has created many popular courses for our channel, and we even created a course together. So get ready to improve your Django skills and create a chat bot. Hey guys, welcome to this tutorial where we're going to be building an AI chat bot, just like chat GPT. So we're going to use Django and the OpenAI API to build this. So it's going to be a chat bot where you can ask it questions, and it's going to give you responses to that question. So we're also going to implement user authentication. So we're going to allow a user to register and log into our platform. And whenever a user logs out and logs back in, they're going to see the history of the messages that they've sent before. So I'm going to walk you through the OpenAI documentation. And I'm going to show you how to use GPT three and GPT four in your application by accessing the OpenAI API. So you want to get the full code of everything that we've done in this video, there'll be a link in the description below where you could get the full code to all the files we used and the old source code to the old project that we built. I'm Tommy, a creator at Free Code Camp, as well as on my own channel Code With Tommy. So if you like more tutorials like this, please don't forget to check out my channel at Code With Tommy, where I make more videos on web development and programming in general. So having that said, thank you for tuning in to this video. Let's get started with this video. So the first thing that we're going to do is to first create a Django project. So before you create a Django project, you need to make sure that you have Django installed. So I'm going to do pip three, install Django, right here on my terminal on my MacBook. If you're on a Windows, just open your command prompt and type the same command. But make sure not to type three, just type pip install Django, and it's going to do that for you. So I already have Django installed, and it's going to tell me that requirement already satisfied. That's because I have Django installed. But if you don't have it installed, you should go ahead and install that for you. So now with the second thing that we're going to do is to just create a new Django project. So I'm going to be assuming that you have a basic knowledge of Django. But if you don't have, you're still okay to follow this tutorial, as I'm going to be explaining everything I do step by step. So what I'm going to do is to go into the folder where I want to create my Django project. So I'm going to do CD documents slash projects. And I'm going to do CD chatbots. I created a folder named chatbot. And in there, I should have a template that says pre template. So this pre template is basically where I stored the HTML CSS template of this project. I'm going to show you that in a bit. And what I'm just going to do is to say, mkdir means I want to make a new folder. Well, actually, I could just create my Django project here, I could just say Django, I think admin, start project, chatbots. I could call it Django chatbot. Django underscore chatbot. And then I could CD into let me just copy this Django chatbot. And if I press LS, now I see that a new Django project has been created in that particular folder. And I'm just going to create a new Django app. So I'm going to say Python three manage.py. Start up chatbots. If I do LS, again, you can see that there's a new folder being created named chatbots. Now that everything is done, the next thing I want to do is to open this particular project on my VS code, or any editor, any ID that you're using. So if you're stuck with what I did, if you don't understand what I just did, so basically, when you want to create a new project in Django, you need to run a few commands. And this was what I did. I first make sure I have Django installed, because if I don't have Django installed, this is not going to work. And once I have Django installed, I just CD into the folder where I want to create that project. So that was in my document. And I had some folder in there. And then I CD into chatbots, which was the folder. And then I just created a new Django project using this command, Django admin start project. And this is the name of the project. And then I CD into that Django chatbot project. And after that, I just checked if a project has actually been created in a folder, and the way to check it is by doing LS. If you're on Windows and you're using command prompt, you just need to type the IR and click enter. That is going to do that for you. But it shows me an error because I'm on a MacBook. And once we know that a Django project has been created, what I did was to create a new Django app in there. And I also checked to make sure the Django app has been created, which is chatbots. And that is what I did to this point. So what I'm going to do now is to import this project I've created in my VS code, just going to swipe. So this is my VS code right here. And I'm just going to say file open folder. And I'm going to go into document, I'm going to go into projects, I'm going to go into chatbots. And this is the Django chatbot I created. So this is it here. Now whenever you're opening a new Django project, you need to make sure that you open your project on the root directory of that particular project. So the root directory of your project is a folder that contains the money.py file. If you see money.py in that folder, that is the right directory issue open. So this is open, and everything has been done. So I'm just going to cancel all of these to make sure everything is good. And yeah, so this is not my project folder. And this is my app folder. And the first thing you want to do to avoid any errors later is to go into settings in your project folder. And then inside installed apps, we want to add chatbot. I'm just gonna say chatbot. Now this is just to let Django know that we've created a new app named chatbots. And the app belongs to this particular project. So this is the chatbots app right here is an external folder. But Django doesn't really sees this as an app that is part of this project for now. But once we add it to installed apps, it knows that this chatbots folder is part of this whole project. So that's what that does. So whenever we try to call this chatbot folder, that app, or whenever I want to use any file from it, Django has access to it. So that's what that line does. Now that we've done that, the next thing that we're going to do is to just create our template folder, I want to take you have everything regarding our template first. So I'm going to create a new folder in the root directory, I'm going to name it templates. And in here, I'm going to put my HTML files. And what I'm going to do is to just come into my folder. So I'm just going to search finder. I'm just going to come into my projects. So I'm going to say projects, I'm going to come into chatbot. And then I have these two folders right here, these are the HTML files. And this, there'll be a link in the description below where you can download this and just use it and follow along with this project. So once you have that downloaded, just drag that into your HTML file. So for now, I'm just going to copy this and I'm going to go into this and then the template folder that we created right here is the same thing as this template folder on our finder. And I'm just going to paste that in there. So now that I've pasted it, if I come in here, those are right in here. So this is just the HTML template that I already built prior to making this tutorial. So I don't want us to spend a lot of time building out the UI. So I did this before. And you could just you know, continue from this UI that I already built. The main thing I want to show you in this video is how to build the back end or the functionality of how this actually works. So this is the UI, this is the HTML and everything is done. But the thing is, not I have that HTML, just the way I added to the way I told Django that this is where to access this chatbot app. I also need to tell Django where to access HTML files. Because right now this template file can this template folder can just be any folder is belong to anything it might never belong to this project. But once I tell Django that whenever we try to take an HTML file, go into this template folder, then Django is going to know that all our template files belong in this template folder. Now for you to do that, you just need to come into settings.py again. And you're going to come into where you see templates is a list. And you're going to look for dares. Now this dares stands for directory. And it just stands for the templates directory. So where do you want Django to look for your templates files? And I want you to look for it in this template folder. So I'm just going to say base there, comma templates. So what this is saying is that from the base directory, remember, I told you something about root directory does the same as the base directory. That is the folder the directory that contains the money.py file. So I'm saying from this particular directory, go into templates folder, which is this folder right here. So now it knows that whenever we're trying to call or render an HTML page is going to have to go into this template folder. So that is what that does. Now I don't really need this no mark or cancel out this settings.py. And the next thing I want to do is to just take care of the URLs. So I want to be able to go to my own page, and then have this my HTML show. For now, if I try to run my project, let's run the project, I make sure everything is working. If I say Python three manage the PI, run server. This is the command that we use to run a Django project, by the way. And if you're on a Windows once again, don't type Python three, just type Python, manage the PI run server. So once I hit enter, it says you have 18 on applied migrations, we don't really need to care about this, don't worry is not an error is just something we don't need to care about for this project. Now it says we are project is running on this particular port. Now let's just open it. So we could click on open command and click. So as you can see, everything is working. It says that the install works successfully. Congratulations. That means this project is good. There's nothing wrong with it. But the only thing wrong with it for us is that he's showing me this Django template. When I come into my own URL, or when I come into my website, I don't want to be seeing this, I want to see the HTML templates that I built. So we're going to take care of that now. And the first thing we need to do is to go into chatbots, we can just close this. And in chatbot, we're going to create a new file named URLs.py. So let's rename that as there was an error. So we're just going to say URLs. So what this does is that every single URL in our project, we're going to configure it in here. So for example, let's say this is my project, and I want to have something like slash login, I'm going to come into URLs and say there's a URL name slash login in my project. Or if I just want to have a normal homepage, which is just this normal homepage, I also have to configure it here. Now let's do that. The first thing that we need to do is to just say from Django, the URLs import path. So this part is something that Django gave us that allows us to basically specify each URL as a path. And I'm going to show you how to do that. So you're going to have to create a new list called URL patterns. It goes to list. And then we're going to use this part that we imported. So we're going to say part was specifying a new URL as a path. And then I'm just going to have this, yeah, I'm going to explain what this does. And I'm going to take from views dot chatbots. I'm also going to explain what all of this does. I'm going to say name equals chatbots. Okay, so now what this does is that when I say path, it takes three different argument like this. And the first argument is to specify what path I'm trying to create. So this stands for the own page. That means, whenever a user comes into my own page, let's say when I deploy this website to the web, and I host it on something like www.chatbot.com, right? So this is my own page. And that's what this specifies. If I do something like slash login, then this path means www.chatbot.com slash login, right? So I hope you understand what that means now. And since we know what that is, so this specifies the homepage, the next thing is that what is saying is whenever a user go to this homepage, we want to render this chatbot view from the views.py. Now there's a file named views.py, as you can see in here, and this file, so I'm just going to enlarge this a little bit. And this file, what it does is that it allows us to create functionalities for every single URL page. So what we're seeing is whenever a user come into this homepage, what do we want to do? Do we want to render an HTML page? Do we want to register something in the database? Everything is going to be done in this views.py. So now what we need to do is to create a new function named chatbot. It's going to take a request. And then for now, we're going to pass. We're going to come back to this. But what I just did here is to create a new function named chatbot. So that when we're trying to call views.chatbot, it doesn't give us an error. So as you can see, it gives us this error for now. That's because we don't have views imported. So we just need to do from dot import views. So that is done. So we've imported views.chatbot, no error, because it knows that there's a chatbot function in here, just going to collapse this. And once we have that, we're giving it name of chatbot. So we're just naming this URL chatbots. That's just what we're doing for that. Now I'm going to save this. And for now I'm passing. And since we know what we've done, we can basically come back here now and remove this pass. And what I want to do when a user comes into this chatbot is to render this chatbot dot HTML page. So instead of showing this, you know, default Django template, I just want to show my own HTML page. To do this, I'm going to say return render. And I'm going to say request, trying to request a chatbot dot HTML. Now because Django already knows where to get our template files whenever we're requesting for one, because we specify that in the settings, remember, now it knows that it's going to come into templates folder and it's going to look for chatbot dot HTML, which is this, and it's going to render that. Now, if I come in here and it refreshes, you should expect that to work, right? But no, it shows this. Now this is just because we did all of these for our Django app. But remember, this app is just a subset of the main project. So this is the main project folder, what we need to do is to come into the URLs of the project folder. And then we also need to tell these URLs that these Django this project URLs where to go whenever a user comes into the homepage, we told the app, but we didn't tell the URL. So for us to do this, we need to do something called include. So we are importing include. And what this does is that it's basically allows us to include a URL kind of copy a URL from an app. So this is what we're doing when I say path. And I'm going to do the same thing. I'm just going to say include chat bot dot URLs. So what this is doing is that whenever a user tried to go to the homepage is going to go into chat bot, which is this app is going to go into the URLs file, which is this URLs is going to look for a particular URL that match this. And this is this URL. And whatever has been done here is what is going to do right here. So that's basically what that does. Now we can save this, we can actually close this. Now when we come here and refresh, it works. So as you can see, it gives us this basic thing. I am your chat bot, you can ask me anything. Good. If I do I, nothing happens for now. But we're going to take care of that in a bit. So now that we know we have all of that done, the next thing that we want to do is like, when we create when we say something like, I, how are you doing? We type something in there, and we eat enter or eat send, we want that message to show year. And we obviously want to have a response also. So I'm going to tell you how to do that now. And to do this, we're going to use a little bit of JavaScript. So I'm going to walk you through all these steps. Don't worry. Now we're going to come into our templates, let me just explain what this template file does. So the first thing it does is to extend from this base dot HTML. If you know Django, you know, there's something named extend, and I'm going to go through it quickly. So this is a base dot HTML file. This is sounds like the backbone or the bedrock of our template file. So this has all these constructors, every single thing that HTML files need. And what it just does is allows other files to extend from it. So what it does is that wherever we have this thing called block content, any further extend from it could basically add your own code in this block content, right, and it's going to have the same code as all of these, but with unique code in this block content. So if I come into chatbots, you see it's extending from base dot HTML. That means if I remove all of this, every single thing from the old file, right, so let me say I remove this block content, every single thing right here, it basically let me move this also, it basically has the same file as based on HTML, the same thing, no difference. But now, if I add, just gonna add everything back, if I add this block content, which is this, right, it's going to be the same file as it's based on HTML. But any code I put into this block content is going to be inserted into this block content right here. So that means, so as you can see, this block content is in the body tag. That means this chatbots, all of this code is going to be in the body tag of this base dot HTML. I hope that makes sense. So now this is a new file that extends from the base dot HTML kind of copies and paste it. But what this allows us to do instead of having to write all of this code again for every single file, and that's going to be time consuming, it just allows us to extend from it, and only make changes to where we need to make changes, which is just the body of the page. And that is what we did here. So now that we have that, as you can see, this is the body of the page is just a basic form right here. It has a CSRF token. And in Django, this stands for cross site requests for G, and it's kind of like an attack that it prevents an attack. So cross site requests for just an attack. But in this token kind of verifies that anyone are trying to access the data is authorized to access that data. So that's what that does. And you have to put it there whenever you're submitting a form in Django, even though it's going to throw you an error. So this is just the basic this UI that you see right here, that is what that does. Nothing spectacular about that. And this is just styling it. This is just a basic CSS page to style it. Once again, there's a link in the description below where you can access this template file and follow me along. So now that we have this, we could close this based on HTML, because we don't need it. And right now, if I type I, it just put some random stuff in the URL, and it doesn't really show anything. And as you can see, when I type I the page style refreshing and reloading, we don't want that we want something generic like when I say I it automatically comes up here and gives me a response. That is what we want. So we're going to do that right now. To do this, we need JavaScript. So at the end of this div tag of the body, we're going to create script. And let's just end the script right here. So now that is what we need to do. And then the first thing that we need to do in here, we're going to first actually have three different constants. So I'm going to paste the code and explain what this does. So just to save time, I'm going to paste the code rather than typing everything line by line. So now what this does is that it selects a particular query. So what it does is it comes into message list. Cool. So I'm going to come in here. And we're going to look for where we see message lists. So in your days, we're just going to say messages, copy that, let's search for it. So as you can see, there's a list right here named message lists. And what this does this JavaScript does, it just selects that particular query or that particular tag. So now, all this old tag, this list tag, it has it stored in this constant the messages list, it does the same for message form. Now if we search message form, we don't need to search that because we have that right here, we can see form class message form, it basically has access to this old form and stores that access in this message form. So we can manipulate anything or do anything we want to do with that form, because we now have it stored as a variable as a constant. And the input does the same thing. So the input is basically this input bar right here. And as you can see input text, and does a class of message input, and it stores that also in a constant name message input. And now the next thing we want to do is to create a new event listener. So when a user clicks on submit or enter or send, we want to create an event list listener that does something. So when this submit button is clicked, we want to do some stuff. For us to do this, I'm just going to also copy and paste some code in here. I'm just going to paste this in here. So as you can see, we're creating a message form dot add event listener. So now that we have access to that message form, we are adding an event listener. So that means whenever something is done to this form, this message form, once again, this message form is this tag, and basically this form. So what we're saying is from this form, when the submit button is clicked, that means this button right here is clicked, then we want to do some stuff. First of all, we say events that prevent default, which means once the submit button is clicked, we don't want the page to refresh. That is what that does. And then what we're going to do is to then store the message that was inputted. So what we're saying is constant, we're creating a new message constant. And then we're sending message input, the value dot trim. So what the user puts in here, we just want to get it, but trim it down, right to only the words that you get. So let's say as a lot of spaces and all of that want to remove all of that, and just trim it down to the sentence. And what we're saying is even message length is zero, then we want to return nothing. So that means if a user doesn't type anything in here and just clicks on enter or send, we don't want to return anything because they didn't send an actual message. Now that is what that does. Right. And then the next thing we want to do is to kind of create a list. So when a user sends a message right here, so I'm just gonna paste this code right here. Now once a user sends a message, since we already know that once these submit button is clicked, all of this is being done. So after we check that and make sure that it's not zero, that means the message is not blank, then we want to create an input, want to create a new basically a new variable, right. And they were creating a new element called list. And I'm going to tell you what we're trying to do here. What we're trying to do is that once a user clicks on send, we want to basically show the user the message right here, like this is the message you sent, right? Kind of like in any chatbot or any chat system is going to show your message and the person you're chatting with. That's what we want to do. So once the user clicks on a, and he clicks enter, we want to pop the message up here saying you sent a, right? That is what we're doing right here. And what we're doing is we're creating a new message item, and we're creating a list. So we're basically trying to duplicate or replicate what is being done in here, right? We want to make something look like this. So that's what we're doing in JavaScript. So we're saying, if we come down here, we're saying, create a new list element. And then in that list element, we're going to add a class, add a message named sent. So what we're doing is basically what they did here. So in that list, right, we're saying add a class message and sent, this is message and received, but we're going to kind of create a new class. So what he's doing is that whenever user clicks on it, it basically replicating this and just creating a new list, adding a class that says message and sent, that is basically what it is doing right here. So we get new message item, which is a list. And then in that list, we add a class message and sent done. And now the next thing we want to do is inside that list, just the way you can see that inside this list, there is now a few code in there that says AI chatbots. So this is sent by the AI chatbots and the message that the AI chatbots sent. That is what we're doing here. Also, we're saying this is sent by you. And then we're getting the message that you sent and just kind of pasting it there. So what we're not doing is send message list dot append child message item. So when since we have message lists, which is basically this message list right here, this URL, what we're going to say is under this URL, we want to append a child. And that child should be message item. And that message item is a new list to create it, which has all of the information of the message you sent. So it's basically going to append a new child kind of like pasting a new list in here. That is what that does. And what it then does after appending that is making the value of this blank. So whenever I say I, and I hit enter, I don't want the I to still be I want this to be gone once I hit enter. So that is what that does that that says message dot value, right? Now the next thing I want to do, I'm going to pay another bulk bunch of code in here. I'm going to explain what this does line byline. I'm just going to paste this in here. And now, since we have the message that user sent, we're going to send a request to our back end. So in this views, we're going to kind of send a request in here. So what we're doing is we're going to send the message that user input and sent, we're going to send it to this back end. And from these views, we are going to now create a function that sends that message to open AI API, and then gives us a response. And then we're going to show that response right here. So let me explain what this does also, there's something in JavaScript called fetch. So we can kind of use this fetch to send a request to like an API or to like, you know, your back end, in this case, or Django back end. And that's what we're doing. So we're saying fetch and the method is post. So the method of this particular fetch is post or this particular request. And we're just giving it the address, which is what you need to do for this to work. And then we're giving it the kind of like the parameters we need to give it for it to, you know, give us a response. So we're giving it a body CSRF middleware token, remember, when we said we added this, which is kind of like preventing an attack. So we need to also send that token. So everything goes well. That's what we're doing right here. Once again, the code to the template is going to be in the description and the code to the whole everything we're going to do in this video, the full project is also going to be in the description below. So you can check that out. If you're stuck anywhere, if you need to copy and paste the code, you can check everything out in the description below. And then there's also a message that we sent into this particular backend. And that message is basically the message that the user input, right, which is this right here, if we come here, we created a new message right here, which is message inputs dot trim. Good. Now that we're sending all of these, where are we sending it to, we're sending it to this own page, where is this own page, if we come into URLs, this is where we're sending it to. And then it's going to go into views dot chatbots, which is this function. So that means in here, we're going to receive whatever we are sending all these parameters, which is the message, then we're going to send that message to opens AI API. So let's do that. Now that all of this is done, what we're going to do is we're going to get a response. So I'm going to show you I'm going to explain all of these how this gets the response in a bit. But before I come back to this, we're going to have to first create a response in here. And I'm going to show you how it works. Or because we'll just talk about it now. So what this does is just once we get a response, which is like when we say, when we get the message, and then we say return response, right return response or something. So I'm just typing rubbish now, but you get the point of what I'm saying. So when we say return response, that response is going to be stored in this response variable. And then we can get that data, right? So that is going to return that response as a JSON response. And if we're going to say response equals response, the JSON, convert it to a JSON type that JavaScript can understand, and then is going to say, you're going to create a new variable name, response, and it's going to say data the response, which is basically data that we sent back from this from our right here. And then what it does is that it basically does the same thing that we did in here, which is creating a new message so that I can pop up up here. And that is actually the same thing it did. And he also appended it to message item. Now enough talking, let's get straight to the coding. Now that I explained what all this JavaScript does, let's actually come in here and you know, undo it from this part. So now the first thing I want to do is I want to first get if the required the method being used to request for this page. So I'm going to say request a method, if the method is post, then I want to do something, I'm going to do something. Now let me explain something quickly. If let's say when we come to this URL, directly, I will just go to 127 right here, the method being used to request for this URL, this page is a get method originally or initially. But whenever we're trying to send a message just like we did here, you can now see that this page is being accessed if I come into fetch is being accessed with a method of posts. So that's how I can distinguish from when a message is being sent to this page. And when this page is just being loaded normally. So if a message is being sent, and we do something like this, and we hit enter, there is a post method. So that's when Django knows that, okay, I'm have to receive a message and provide a response. But if the method being used is just a get method, then he knows, I don't really need to give a response or get anything, I just need to render this HTML page, right? So I hope you understand that. And that's what that does. And we're just going to come into views.py. And so I think if request or method is post, now we want to do some stuff, I'm just going to say message. So I want to get the message that was being sent in here, I'm going to say request dot posts dot get. And what we need to get in here is in the body that was sent into this, our URL, we need to get the variable that was used to send, which is message, and they were going to come in here and paste message. Now we have the message that the user typed in here. And what we're going to do is not provide a response. Now the response for now, let's just say I this is my response. So I'm going the response we're going to use actually is the response from open AI. But for now, let's just say this just to make sure everything is working before we actually implement open AI API. So now we specify this response. And what I'm going to do is to return this response as a JSON response, I'm going to say return JSON response. So what I'm doing is to return this response as JSON response. But for me to be able to use JSON response, I need to import JSON response from Django. So I'm going to say Django, from Django dot HTTP import, to make sure we're importing it right, import JSON response. So now that's going to allow me to import JSON response, allow me to use JSON response. So now that I have that one, just going to do three import, return this, I'm going to have my normal brackets. And in there, I'm going to have the colubraces. And I want to report return the message. You don't really need to return the message. But let's just return you also to make sure we have this message in the HTML. And then the main thing to return is the response. So I want to return the response as a variable named response. Good. So now this works. Now everything should actually work perfectly now. Let's test it out. If I come in here, and it refresh, and I say, a, you can see that it shows me a, and then it gives me a response saying, I, this is my response, everything is working. Now, we're able to actually send a message from our HTML and send it to our back end using JavaScript fetch. And then we're able to get do some processing in the back end, send a response back and get that response. We've basically done most of the heavy work. Now, the only thing we just need to do is to get into open AI, and then get the API key. And from that API key, we need to paste, we need to use that API key to basically access opens AI, you know, machine learning API that allows us to use a chatbot. I'm going to show you how to do this now. Now, the first thing we need to do is to first make sure we have open AI installed. So I'm going to come open this up. And what I'm going to do is to open up a new or actually India in my terminal, I'm just going to say I'm going to clear this out to make sure everything is clean. I'm going to say p three install open AI is going to say requirement already satisfied for me because I have it installed. But for you, it should do it and install that. Now what this does, the basic thing that it does is just allows us to use open AI in Python. Now before you even use any of this, you need to make sure you have an open AI account created. So you need to go to open AI.com and create an account. And once you have an account created, you need to create an API key. So you need to go to your account and down here on the user, you're going to see API keys. Now you need to make sure you have an API key, I'm just going to create a new API key to show you how this is done. So I'm going to create a new secret key. And I could just say Django chatbots. And you're going to create a new key, I'm going to copy that key, and it's done. Now this will allow us to use this open AI API to be able to create a chatbot. Now I'm going to come back in my code. And what I'm going to do is just create a new variable that says open AI API key going to paste that in there. So now just to make sure I have that stored, I've pasted that in there. And the next thing I'm going to do is just to come into open AI actual API. And I'm going to show you how this works. I'm going to go into documentation to show you everything about your API and you know what it does. So for these, we're going to be using the chat completion model. And what this does is just allows us to be able to send a message and then kind of receive a response. But they call it chat completion, which is the name for this system. So that's what it does. You can read through this and understand how everything works. But I'm going to just explain to you how everything works in, you know, in the code. So this is kind of like a basic system, you could open go into the playground and play around with the API, and see everything you can do with it. And you know, there are a lot of other things you could do not just try to generate image, you know, there's a Codex API, which is kind of like an API just set for helping you to code. And there are various APIs that open AI offer. But for this one, as I said, we're going to be using the text completion. So I'm going to quit this. And since we have our API key, I'm just going to come back into my code. So now that we know we have that, the next thing we need to do is to kind of create a function that sends a request to open AI API, and sends it our message, and then want to get a response from that API. So I'm going to do dev, I'm going to say, ask open AI. And in here, I'm going to pass it a message. So we need the message as a parameter. So we could send that to open AI. And now we want to get a response from open AI. And to be able to get this response, we just create a new variable. And we're going to say open AI, the completion, the create. So automatically, we can see that we have this error. This is because we know we have open AI installed, but we didn't import it. So we need to import open AI to be able to use it in our code. So we've imported open AI, and that is gone. And after specifying the open AI API key, what we need to do is to say open AI dot API key is equals to open AI API key. So these kind of registers that that this is our API key, this just stores the API key as a variable, but this sends that API key to open AI. So now that we've done that, we can come back to our function. And what we can just do is to say the completion dot create. And I want to say the model I want to use. So the model I want to use. So we could just do this equals how many is it texts? Davichi. Oh, three. So there are various models, as I said, you could go into the API documentation and, and their playground and check around with various models and everything you want to use. And the prompt. The prompt is basically the message that the user sent. And the max tokens, we're just going to set a max tokens for it. Let's say something like 150. And n equals one, going to set that as a parameter. So you need all of this when you're sending a request, you can also go to the API documentation, and you could know how to like change all of this to whatever value you want, depending on you know, your the cost of the API that you're planning to use. So we can say stop, let's just say that as none, so it doesn't stop for any reason. And then temperature equals no point seven. So these are the parameters you need to specify to be able to send this or to be able to get a response. And now we can we're going to say answer, which is a response equals to response, the choice, these are we get the actual text response, I want to get the first one, right? And when I say dot text, dot strip, this, so now if I don't do all of these, I'm going to show you what this does. So I'm just before doing all of this, I'm going to print response. I'm going to save this, I'm just going to drag up my terminal. And now whenever, actually, what we need to first do is to use this as the response. So I'm going to say response, call, ask open AI and send it this message. So instead of just sending us blank response, saying, I, this is my response, I want to send this particular message to open, ask, open AI, which is going to get a response. And we're going to have to return answer. But before we return this answer, I want to just show you what this response is on its own. So let's just run that, I'm going to come in here, eat, refresh, I'll say, how are you doing? And when I say that, you can see, because I printed response, you can see the kind of response it gives us, it gives us choices, you know, it gives us all of these, it gives us all of these users, the text, this is the main response that we're looking for. So you can see we asked how it's doing, how are you doing? It gave us no for now, because we didn't actually return anything in that, if I come down, yeah, I'm just gonna come down. So in here, we didn't return anything. So that's why it gave us no, but we're gonna fix that in a second. So now, as you can see, what it does is that for choices, it gives us text, which is the actual response, we don't really need all of this to show to the user, this just gives us information about the usage, like the amount of tokens we used, and the model and all of that. But what we want to show to the user is this text. So this text is what we want to show to the user. And if you come in here, that is what we did, we say response dot choice. So the response, I went into choice. And from the choice, what we did, this should actually be choices, because that is choices right there. And then we got the first value. And that first value is basically this list right here. Right. And they were saying from this, sorry, this dictionary, and I say from this dictionary, we want to get text. So we say text. And then we did the strip. So what the strip does is that it removes all of these, you know, formatting and just gives us in a normal text. So that is what that does, I hope you understood that. And then we're just gonna quit this back. And instead of printing response, we're going to remove this, we're going to have our answer, and we're going to return our answer. So now, everything should work perfectly. So if I kind of just going to refresh this page, I'm going to say, I how are you doing today? Now, let's wait, you can see nice is I'm doing well, thank you. How about you? I could answer that. But what I'm just going to do is to test it out and see if this actually works fine. So I'm going to say, Who is Bill Gates? Now, let's see what he says. So let's give you a second. He says Bill Gates is an American businessman Gates software developer, inventor and philanthropist, basically gives us all of the details of the gate. So let's say what is free code camp? Let's see if he knows everything. Give me a second. So he says free code camp is an open source online platform designed to teach coding skills to everyone. So this is basically a fully functional chat bot that you know, you can ask a question and it will give you a response. This is very good. This was the point of this video. This is what we want to do in this video. Now, I hope you understood everything we've done out to this point. Because for now, we've been able to actually send a message and then get a response. So we could say something like Who are you? And let's see, he says I am a human being just like you kind of funny, because it's an AI, but that gave us an answer, which is what we want. So we've been able to do that in this video. Now that we've been able to build this chat bot, let's take it to the next level. So what we want to do now is to allow users to log in and sign up. And so we want to save chat to like a database, so that when I log in, and I ask a couple of questions, I want to be able to log out and when I log in another time or another on another device, I want to still have access to my chat history. So we're going to do this. So for us to do this, what we need to do is to allow users to log in and sign up. And then we need to create a chat database. So whenever we make a user send a message, and we make a request to open AI API, we want to save the message and the response into our chat database. So let's do that. Now, the first thing we need to do is to actually create login and register page. So once again, all this template file is going to be available in the description below. And you're going to be able to use that easily once you get them from the link in the description. And what we're just going to do is to come into templates right here, I'm going to create login, just HTML. And then also we have the HD login code. And we're just going to put it in here. And then that's just a basic login page with the styling and everything. And then we're going to do the same for register. So we're going to create a register that HTML. And then in here also, what we need to do just to paste the register code, but you're going to have this already. So you don't need to paste anything. So now this is just the basic code for the register page. Now we need to make sure that this as a URL. So what I'm going to do is to go into URLs, the pie. I'm going to set login, going to set register. And I'm going to do one more, I'm going to set the logout. I'm just going to copy this paste, paste all of this year. We need to make sure we have comma in here. So we don't get an error. You just put comma in everything. Now we save that. So we need to create this login register and logout function. So we're going to have to come into views.py. And we could close all of this for now. And then actually, before we close out, let's create a new one. So we could close these two. And then we could create a login. It could take a request. And for now, we can just say return render request, login.html. I'm going to do the same for logout for register. I mean, we're just going to say register.html. And then for logout, we're just going to do def logout. You're going to take a request. And now we just need to do what the logout request. So this just allows us to log out a user. But for us to use this art, we actually need to import art up here in our views.py file. And for us to import art, so art is kind of like an authentication library that Django provides for us as default. So for us to import art, we're just going to do from Django dot contrib import art. Now that is going to work. But we don't need to worry about that for now. Let's just make sure that the login and register page are even loading up. So I'm going to go back in here. I'm going to go to slash login. So as you can see, we have this login page, let's go to slash register. You can see we have this register page. So we want that whenever you are putting these details and click on register, we want to register them and log them in automatically. So let's do that. Now the first thing we need to do is come into views right here in our register page, let's actually close that bar. And then right here in our register view, we just need to do a couple of things. So first of all, if I come back in here in my register page, you can see that we have a basic form. I'll show you right here, we have this form with a method of post, and it has username, email, password and confirm password. And once they click on register, it submits that form to this page right here. So when they click on register, I want to get that all the details of everything they clicked on and submit it in my database. So for me to do this, just the way I used if request dot form in request or method is post in here, I'm going to do exactly the same thing. So I know when a form is being submitted to this page. So I'm going to say if request, the method is equals to post. And what I'm just going to do is to say username, we're going to get the username, generate that we need the username equals to request the post username. So let's just make sure that is username. We're going to have to do the same thing for the email request the post, we can just do email. Same thing for the passwords also. So password one is equals to request the post password one. And then for password two, just copy that and change one into two. So let me show you what this is doing is getting from this form, this register form is getting the values that user input using the name. So the name of username is username, that's why we're getting a username, we're starting it in a variable name username, email is email, the first password is password one, the second password is password two. And as you can see, that's exactly what we're doing right here. So now that we have that the first thing we want to do is to error check. So we want to first make sure that user inputted passwords that are similar, that are identical, that are the same, not just similar. So we want to make sure that password one if password one is equals to password two. So we want to make sure that password one is equals to password two. So only if that is true, then we will continue. So let's just say pass for now we'll do some stuff else if the passwords are not same. So we just send an error for now we just send error message. Let's just say error has come message. I will say error message is equals to something like password don't match. So that is our error message. And then when this happens, what we want to do is to render this page again, but this time around with an error message. So say return render request, register the HTML. But this time around, we are sending an error message to say error message. And then say error message. So that that should work. And what we can just do is we could try to test this out. So if we come in here and eat refresh, and let's say I do just do some random things. And if I do this, and this, they don't. So as you can see, it tells us that password don't match. So because the password does not match, it just brings us back to this page telling us that it doesn't match. And that is working successfully. But now what if the password match we want to then continue with creating this user. So the next thing we want to do is to just create this user. So say try going to be like a try except in here, let's say try let's pass for now. And then we'll say accept. And there's also pass for now. So in try want to try to create a new user. So we're going to say user equals now before we do anything, we want to make sure that we have the user model imported. So I'm just going to say from Django dot country dot earth dot models import user. So this basically allows me to access Django user model, which is like the model or the table that Django creates for us to be able to store or create users on our platform. So what I'm just going to do is to say user, and I want to create a new user. So for me to create a new user, I'm going to say user dot objects. So from the user module dot objects, dot create user. So this is what I used to create a new user. And I'm going to create a new user using the user name, the email and the password. So let's just pick one password anyone is fine, as long as they are the same. So once that is done, I'm just going to save that user by saying, user dot save. So user to save saves that user in our database. And once the user has been created and saved, I want to log the user in automatically. So I'm just going to say the login request user. So I'm trying to log this user in right here. And then I'm going to say return redirect. So after logging the user in, I want to take them back to the chat bot. So I'm going to say chat bot. This redirects me to the chat bot. Now for us to use this redirect, we need to import redirect right here. So I'm going to say redirect. And that allows us to use redirect in here. So now if none of this works, like if it doesn't create a user successfully, the next thing I want to do is to pass an error, say something like error creating on the account. So I'm going to say error message because to let's say error creating account. And again, just like I did here, I want to return this page with an error message. Good. So now that should work successfully. And everything should be fine right now. What we just need to do is to test this out. So I've saved it by coming back in here now. And I try to say refresh, refresh with this. And I say, Tommy, and I say tt g.co. And let me give it a password that match. And I say register, he says error creating an account, right? So that means there's an error somewhere. So what we need to do is to come up here and see if they give us any error here. Okay, they didn't give us any error here, but I just noticed something. So we haven't applied migrations in Django, what you need to do is to apply migration, this is kind of like saving all these models that they gave us the user models and everything we want to save it into our database. If we don't save it into our database, there's no way we can create like data in our save data in our database. So if I need to have a database before we can save data in our database, for us to do that, we just come here, cut out of the server. And we're just going to say Python three manage the pie run server, no money, the pie migrate. So once that is done, and we run the server again, everything should be working successfully. So now if I try to submit that form, and it enter, you can now see that it logs me in, it says AI chat, but I am I am your AI chat, but you can't ask me anything. So what I want to do is right, yeah, I want to be like I then I want to have the username. So I want you to be customized for this specific user, we're going to come back in my code, where I have chat bot, and right in here, I can say I, and then I could just put the user that is logged in by saying user user name. So it's going to get the currently logged in user and tell me the username. Now if I eat refresh in here, you can see now it says I told me I am your AI chat bot, you can ask me anything. So this is basically what I wanted to do. Now the next thing, once we know that this is working, is to now allow your user to log in from the login page. So we're going to come back to views, just the way we did for register, once allow a user to log into. So this is quite similar, but also very shorter. So the same thing we did by getting if the request was the request method was post, we're going to do it again. So I'm going to say if request dot method is equals to post, we're going to say user name equals to request dot post. So we want to get that user name and say user name. And then we also want to get the password because the request dot post password. So as you can see, username and password done. So if I come into your login, you can see that in this form that we created, we have a username, name, and then we have a password name for the username and password input fields. So that's how we are getting the value that user input. And once we have that, what we need to do is to try to authenticate that user. So we can say user equals author on 30k. And what this is doing is kind of checking if this user actually exists before we even try to like log the user in. So I'm going to say request username equals to the username that we collected. And then password is equals to the password that we collected. So this just checks. And then what we cannot do is to kind of say in here, we can just say, if user is not known. So we are making sure that the user is not an invalid user. So if this user is in my database, I want to say the login. So I'm kind of logging the user in. I'm going to say request and I want to log this user in. And then after logging the user in, I want to redirect them to the homepage. So return redirect chatbot. Else. So the else means that if this user does not exist, so that's what this else is for. So we're going to say else. Here we want to say an error message, something like invalid user. So we're going to say error underscore message invalid, we can say invalid username or password. And then we could just return render. So I want to return a render the normal HTML template. So we could say request and then we want to render the login dot HTML. And then we're just going to say error message. And error message. So this is what we want. And everything should be working perfectly. So what we're going to do is all of this should be working. But we can say else that means if the request or method is not post, then we could add an else statement saying we just want to render this normally. So what this is doing is if the request or method is posed, then we go ahead and log the user in. But if it's not posed, then we just want to show the user deform. Now once we've done this, we could go ahead and test to see and make sure that this is working successfully. So we could save this. And actually, what I'm going to do is to first go to slash logout. So it says views dot logout didn't return an HTTP response return none instead. So what we can do is under logouts, after logging the user out, which can just redirect them to the login page, so they can log in. So now if you try to log out again, it takes me to the login page. Now let me log in with what I created and say login. Good. Now it says I told me I am your chatbot. You can ask me anything. Another thing I want to do is to have login and register here. But if the user is logged in, I want to say logout instead. And then I could say something like welcome to me the username. So let's do that real quick. So in here in the chat bot, what we could just do we could basically even have so I could come here in the chat bot. So right here where we see chat, it is right here. I could basically have another one and I could say something like login. So first of all, I could have an a tag that says goes to login. And I could say login. And I could just copy that leave some space. Do the same thing for register. So I only want to do this if the user is not authenticated. So what I'm going to do is to say going to use like a ginger template style. And this allows me to use like conditional statements in HTML. So I'm going to say if user dots is underscore authenticated. So if user is authenticated, then I'm going to show them to just log out or else I want to show them to login and register or register. So I'm going to say this and I'm going to say and if so now if the user is logged in, it shouldn't show us nothing. It doesn't show us anything under. But if we log out, right, and then let's say we go to the homepage, so it should show us login and register as you can see here it does. We just can't see it because the background is blue and the text is blue. So we could come here and change that so we could say something like style, color, color, and I can say yellow. Let's see. So as you can see, it works. Let's do exactly the same thing here, we could just say style, color, yellow. And let's see if that works too. Good. So now it says login or register. Now I could come to login, login, and you see I don't see login or register again. Now what I can just do instead of seeing login or register, I want to see welcome to me. And then after that, I want to see log out. So what I'm just going to do is right here, instead of this, I'm going to copy this particular code, I'm going to paste it in here. And then instead of saying log in or log out, log in or register, I'm going to say I'm going to have like a B tag that says welcome. And I want to see the user's user. I'm going to say user dot username. So whoever is logged in is going to tell the user welcome. And yeah, I want to tell these out to log out if they want to. So I'm going to say log out. So this should work now. So as you can see, it says welcome to me. And it gives me the option to log out. And I could log in back again, it tells me welcome to me. This is perfect. And this is basically what I want. So now that all of this is done, we could now go straight to being able to save this user's database, I mean, this user's message into our database. So let's do that. Right now, I'm just going to come into my model.py file. And India, I'm going to create a new model for us. So what I'm going to create is a model named chat. So I'm going to say class chat, and it's going to take from models dot model. So now what I'm going to now do is to have four different fields. One is going to be the user. The other one is going to be the message. The other one is going to be the response that the AI gives us. And the last one is going to be the date and time it was created at so know how to arrange the particular data or messages. So now we can save models the foreign key, we can use a foreign key to link to the user on the user database. So we're going to say user, but we didn't import user here. So we're just going to say from Django dot contrib dot Earth dot models, then we can import the user model. So now that we can do that, we can now use the user as a foreign key. And when you use foreign key, we say on delete, and then we say models dot cascade. Now for the model, we're just going to for the message, we're just going to say models dot text field, because it's just a normal text field, we're going to say the same for the response or models dot text field. So because it could be a lot of texts, and then for the created at what we need to do is to just say models, does daytime field. And then we want to say auto now equals true. So that should work. And instead of it just having not having a name, we want every single data to have a specific name. So we can use a method. And we're just going to have the underscore is a string. Let's give yourself and then let's return for the name. Let's see, let's say self dot user dot user name. So we want to get the user name of the user that you know, send the message. And then let's say we want to say the message that the user sent to self dot message. So this should work. And now whenever we make any change to these models, or PY file, we need to migrate that change into our database. So I'm going to scroll this up. We're going to do Ctrl C. The first thing we need to do is to do Python three manage the pie, make migrations. So that kind of saved the changes. But then what we need to do is to now migrate that changes. So money dot pi migrate. If I migrate, you can see that I told me I created a new model named chat, which is what I did. Now let me migrate that change into my database. Good. So now in my database, I have a new data name, a new data table named chat. So now I just want to run my server again. And that should be working. But I want to see that I have created these models named chat, I want to verify it. So there are two ways I could basically come here, and then just open my DB SQLite, because that is my table. And if I drag this, you can see it says chat bot chat. So under the chat bot app, a table named chat has been created by click on that, you see it as everything we did the ID message response created at and the user name of the user ID of the user that created is what we don't want to do this, this is kind of like old old fashioned. So what we're going to do is to use the Django admin that it's provided for us. So if I come here, we come to want to slash admin, you're going to see that there is like this admin page that Django creates for us. And what I want to do is to create an admin user. So right here, you can see that I'm first of all logged in as Tommy, but right here, it tells me that the user I'm logged in as is not an admin. So it's not authorized to access this admin page. So for us to create an admin page, we need to run a particular command again. So we're going to do Python free manage the pie, create super user. So we can say admin, we can leave this blank and say admin, admin, yep. And then we've created a new admin user. And now let's run server. So now we could try to log in without admin user that we created. Let's say admin login. Good. So now this is kind of how we can see like our database or all the users we have in our in our platform. So you can see we have to use as one named admin and one name Tommy that we created earlier. So the other thing I want to do is to verify that I actually have this chat saved in my database to, as you can see, it doesn't show you by shows in the SQLite file that we checked earlier. So for us to make it show you we need to kind of register it on the admin page. To do this, we're going to use the admin.py file. So first of all, we need to save from the models import chat. So first one import chat, and then we're going to say admin dot site, the register one register chat. So now if you come back in here and eat refresh, you can see that we have chat as a database saved year. So that table works. So now that we know we have a database table named chat, what we can do is that we're going to come back into these views. And we don't really need all of these for now. But whenever a user sends a message, right, so in your whenever user types in a message, we want to save that message and the response of the AI in this chat database, so that whenever a user wants to check his history, they can easily check their history. So if I refresh this page, this should change to admin. And you can see change to admin because now I am logged in as the admin user on this platform. So that is also good. Now, the thing we need to do is to make sure we are saving and registering all the messages into our chat model or into our chat database. So let's do that right now. Now the first thing we need to do is to just go back into in here. So I'm just going to come back in. Yeah, this is actually quite easy. First of all, I need to make sure I'm importing chat. So I'm going to say from those models, import chat. Now that I know chat has been imported. So from chat, but what I'm just going to do is to say, after getting the message and the response before returning the response, I'm going to kind of like save that message and response in our chat database. So I'm going to say chat equals chat. And what we're going to do is to say user. So I want to see the user in here, right? They're sending this message. I want it to be the currently logged in user. So the user that is currently logged in. So it's a user equals request dot user. So these are you get the user that's currently logged in by using request or user and message equals. So we're saying this message, which is this message right here, we are saying is equals to the message that user sends. We're just going to copy that. And we're going to do exactly the same thing to for the response. So we're going to say this response right here, it's going to come in here and paste that want to say is equals to this response from the AI. And then the last thing in here is the created at so want to know the date that the date and time this was sent. So for us to do this, we need to use something named timezone. So first of all, we need to kind of import timezone. So we get the current time of whoever is in it. So if someone is in America is the local timezone that's going to be saved is someone is somewhere in Asia is a local timezone that is going to be saved. So we want to do from Django dot details import timezone. So now that we have that we can come into created at. So right here, and what we can just do is to use that timezone that we imported, and then save that. So what we just need to do is to say timezone dot now. So what this does is I guess the current time and saves it as the created time. So now that that works, what we can just do is to say chat, just the way we save the user by saying user dot save, we can also say chat dot save. Now this should work successfully. Let's try this out. So we're going to save this. And then we're going to come in here, we're going to eat refresh. And let's also just refresh this page to see that there's no chat in here right now. But let's say I say something like, Hi, how are you doing? And I eat enter. It gives me my response. Now I want to come in here I need to refresh and see boom, you can see now now in this chat table, we have a new data says admin sent a message saying I how are you doing? Now we click on you, we should see details about that, we should see that the user was admin, the message user sent was I how are you doing? And the response from the AI was I'm doing well. Thank you. How about you? So now now that we know that we've been able to submit this data every single chat into the database from any user, now we could just show the user the history of their data that they've been chatting. So basically the history of their messages. Now what we want to do is that we want to show every user the history of their chat. If I refresh this page, that chart is gone. Even though we see have the data saved in our database, it doesn't show the user the history. So we want to do that right now. Now for us to do this also very easy and straightforward, what we just need to do is to come here. And before getting the post, what we're going to do is to try and get all the charts of that specific user. So we're going to have a new variable name chats, I'm going to take from the chat model, I'm going to say dot objects, dot future. We want to say, get all the chats from the user of the currently logged in user. So let me explain what that does. So what he does is that he returns. So we're just going to say user equals that. So what we just want to what this does is that he returns all the charts in our database right here, everything that we have here, but he filters it. So he only returns the one that as a user, so that as the value of the user as the currently logged in user. So right now we have admin logged in, what he's going to do is I was only going to return the charts of admin. That is what that does right there. And then we've saved it in this variable name chat. Now what we want to do is to pass it, whatever space to make it look clean. So want to pass it in here. Just a chat. And then we could give it chats. So now our HTML year in our chatbot has access to all the chat history of this logged in user. So now what we just need to do is to now look for a good way to showcase it to the user or showcase all the history to the user. Now what we're just going to do in this case, is that in this URL right here, so first of all, let's just comment this out, going to come back to that. So let's see if everything is blank. Cool. So now what we just want to do is that we want to loop through for all the charts that we send. So remember, in our views, we sent a variable name chat. And this contains all the charts of this currently logged in user. So I'm going to loop through all those charts, it's kind of a list that it sent to this HTML page. And I'm going to say for chat in chat. So once again, this is Ninja templating is like a format that allows me to use all these programming terms or this programming concepts in a normal HTML file. So initially, remember when we use an if statement in here, that now we're using a for loop in here. So when we have a for loop, we also need to end that for loop. So before we do anything, let's make sure we end that for loop. And we're safe for chat in chat. Even though we know that in here, we only got the user that is currently logged in, we also just want to give it an extra security check right here also, to make sure that is the user that is currently logged in, that we are showing just to make sure that there's no data leak or there's no problems in showing the right message to the right user. So what we're going to do is after saying the for loop, we're going to check that is so we're going to say, if the chat dot user, that means this chat that we sent, right, if the user is same as the request or user, the currently logged in user, then we actually want to show that message. So we're going to do this, we're going to end the if statement there also. And then what we're just doing is now is to show the message to the user. So we're going to kind of do the same thing that we did here. So in here, we could actually copy this. And then all the way to here, we just copy everything to be honest, then we paste that in there. But we could comment it out. So we could make it normal. And instead of received one days to be sent. So this is the one that we sent, I will say by you. But the difference is that the content of the message should be chat, which is chat from this chat list. So we're going to say chat dot message. So now if I come in here, let's hit refresh and see. So now it shows me what I asked the what I asked the AI before, which was I how are you doing, but it doesn't show me the response that the AI gave me. So I want to have that too. Now what I'm just going to do in here, I'm going to copy that again. So from here, I'm just going to copy that. And I'm also going to paste that in here, going to remove the comments by pressing command slash. And this should be fine right here. But what I want to do instead of chat dot message in here, I want to say chat the response. So I'm going to say chat dot response. I'm going to save it, come back here and eat refresh. Good. So now you can see it says I how are you doing? And now it says I'm doing well. Thank you. How about you? Now I want to say who is Bill Gates. And then it should give me a response of will be gate ease. It tells me will be a gate ease. And I want to eat refresh. As you can see, I eat refresh, and it still has the chat history, you know, that I gave it. So I also want to log out if I log out, and let's say I log in back as an admin. You can see that my chat history is still intact and everything is working. Now what I want to do is to try to be like another user. So I'm going to log in as Tommy. You can see now that I have a blank chat history. So since I don't have any chat history, what can just be nice to say, a, tell me, tell me about the United Kingdom. And let's see what it says. So it should give us some details about the UK. And let's see says United Kingdom is sovereign state located of not is basically it gives us details about the United Kingdom. It refresh a sea of those data. If I log out, unless I log in back as an admin, let's make sure we're putting in the right thing. And that is good to tell us that it shows us when a user doesn't input valid data. So let's log in. You can see it shows me my own data about what I asked, which was how are you doing? And with bugates? And if I log in as to me, it shows me what I asked it about our, our United Kingdom. So tell me about United Kingdom. Now what we want to do is to use GPT for in this our application. So as we know, GPT for came out a while after charge EPT was released. And it's much, much smarter and very much more smarter than the older GPT three. So I want to be able to use that GPT for in his application. So any of the user of our application can get smarter response or better responses. So for us to use GPT for we actually need to change the model that we're using. So I'm going to walk you through the open AI documentation. So right here, this is the open AI documentation. And this just tells us about chat completion. So what we've been using was text completion. And we can also use chat completion. So the major difference is that we have access to GPT for and even the chat completion models are more cheaper. So that those are the main difference. So that's why I recommended to use this chat completion. I'm going to show you what you just need to do in the code. So this can basically do anything, right? You could draft an email, write Python code, answer questions about set of document, do a lot of things. This is an actual chat model. So I'm going to show you how it works. So as you can see, this is an introduction. So this is how we call the API, we import open AI. And then instead of saying open AI dot completion dot create, which is what we've been doing, we say open AI dot chat completion dot create, we give you the model, this is GPT 3.5. And then we tell it, we have to give you like a row in which what is meant to do or how is meant to be. So if I go into the playground in a bit, and I'm going to show you what I mean by a row. So as you can see, it says row, the system is we're telling you that you're an airport assistant. So basically, I can ask you anything. And you should reply me that's what we're telling the AI. And then as the user, the user says we won the World Cup in 2020. We're the World Series in 2020. And then the assistant says the Los Angeles Doja won the World Series in 2020. And then the user says where was it played. And then the AI should continue that chat and give us a response of when it was played. So that is how that should work. If we see the response of this, you can see the 2020 series was played in Arlington, Texas, and it gives us all of that. So this is how this is going to work. And I'm going to show you in detail how we can implement this. But before I show you the actual code, I'm going to come into this playground. And this is what it is. So this is a user. And this is kind of like chat completion model. And right now I'm on the model GPT for I could switch to GPT three or GPT for anyone I want. So what I'm just going to do is to say, who are you? So I could ask you that. And I could say submit. I say submit, you see says I'm an AI model created by open AI. I could I could even delete this, first of all, and just start the conversation and be like, who are you? And I can say I am a human. And I can say, Oh, really? And then let's see what it says. I apologize for my previous response. I am not human. But so you understand what I'm saying is kind of completing from the chart already created. So you can do various things with this. Now let's actually implement this in our application. Now for us to do these, we're just gonna have to come in here. Now, everything we've been doing has been correct, or the models or the chatbots, the URLs, login, everything is good. But we just need to change now is where we're accessing, or where we are sending a request to the open AI API. So as I said, the only thing we need to change is chat. So where is this chat, where is this open AI dot completion, we need to write open AI dot chat completion. So if we come in here, again, in the documentation, you can see that it says open AI dot chat completion, that is one of the major changes. And the way in which we write this is going to be different. We really do not need all of these that we wrote before. I'm going to show you why. So what we need to do is just to say the model that we want to use. So first of all, let's say we just want to use gpt three, 3.5 turbo. And then instead of having all of these, what we're just going to do is to set messages. And it's going to be like a list. So you see the way rows, you know, the first give it the role. And we see the way we have a list of like, mess of chats right here, that is how we're going to do this. But for this, we just want to have like two initial chats, or one initial chat, actually. So let's just say row. So this role is kind of telling the AI what it is, I could tell you that you are a, let's say like a tax expect, and you were going to help me with tax, or you're like a lawyer, you're going to help me to write out some documents, you could do anything you wanted to do. So let's just say row system. Let's say the content of that role. Or we can say something like you are an airport assistant. Good. Now want to have another one. And this one is for the user. So we're going to say row user. And this is the message that the user sends to the AI. And let's just say content. And the content is the message that the user sent, which is what we pass into this function, we're going to copy that are going to paste that in here, let's just add our comma to make sure everything is good. Now that we have that, let's actually kind of see how this works, you know. So what we need to do is to say print response. Because this is not going to work because it's kind of gives us in a different response. So if I come back into the documentation, and if I come in here, you see that the response format is different. So in choices, the actual text that we want is choices dot message dot content. But for the initial when we're using choices, the first index and then we're using the text, that is not what we want. So let's just comment this out for now. And then let's return this should actually be response. So let's return response. And don't let us return anything yet. And let's say print response. So what I'm going to do is to now try this out. And I'm going to say, so let's see if this works. So in here, let me show you what I did first, I made sure I printed response. So whenever a user sends a message to these GPT 3.5 table, the response that we get, I want to print it in my terminal right here, that's what this does. So let's just make sure and see if that works before we actually show the user the response. So I'm just going to refresh this page, I'll say, I will hire you. And then it should give me a response right here. So it gave me no from this, because there's no it's not returning this, this function is not returning anything, but that's not what we're focusing on. If we scroll up, we should see the response. So this is the response, and it says choices. And we get the first one, I can see the message dot content. So now this is the content we want, we said, I were you and he said, I am an AI language model designed, designed to assist and engage a conversation with users. So that is good. Let's refresh this, you can see that he didn't save that in the database, which is quite good, because we're not actually returning any response. That's why the database didn't get anything saved in it. So now we know that this is in choices message. So choices as a list. And in that list, it has a dictionary of message and that message as a dictionary of content. So let's use that now to get the actual response. So what we're going to do is to just say, so now we don't need to print response no more. And then we could uncomment this. So we could say response dot choices, the first one, since it's in a list, we say first one, but instead of saying dot text, we say the message dot content, the strip. So now this is what we want. And this should be response that was a typographic error. And now we want to return answer. So now let's see if this works. Let's try this with each refresh now. And we can see who is the owner of free code camp, let's say the founder of free code camp. Let's see what he says. So he says the founder of free code camp is Quincy Larson. Good, everything works successfully. And we are using the chat completion model, not the normal text completion model, which is good. So everything works. If I hit refresh, you can see that it saves and in here in the database. So it doesn't allow me to log in, because I'm logged in as Tommy, let me change my login back to admin, let me log in as admin. So now it shows me the message Tommy said, who is the founder of free code camp, and I can see the response, which is good. So now if I come back in, I'm logged in as admin, it changes all the message to the messages for admin. Good. Let me try and say, when was YouTube founded? And let's see what it says. It says it was founded in 2005 by the people that founded it. Good. If I hit refresh, everything works. If I come in here, that was saved successfully. Good. Now, the next thing I want to do is to actually use GPT for in this. So as I said, GPT for is most matter, much, most matter, and it gives more, it gives better responses. So let's actually implement GPT for in this application that we're building. And let's see the change that we'll make. So the only thing you need to do to change that from GPT 3.5 to four is just to remove this GPT 3.5 and write GPT 4. Now it should be using GPT 4. Let me show you how I knew that I come into the documentation, where we have chart completion. So right here, you can see the model is using GPT 3.5. But it says it that you can use GPT 3.5 and you can use GPT 4. So that's why all I know is you need to change this to GPT 4. And if you come into the playground, you can also see the name of the model GPT 4, GPT 3.5 turbo, but now we want to use GPT 4. So now let's try this out and let's see whatever changes we it makes. So now we know that we're using GPT 4. And then what we're just going to do is to come in here and just say, so let's refresh and say something. Let's tell it to solve a mathematical equation, right? So let's say what is actually let's say to write a Python code, write a Python code to check if a number is a prime number. So let's see what it writes. So we're going to give you like a second to come up with the code. And for now, GPT 4 is quite slower compared to GPT 3.5 and the other models. But we're going to give it a little bit of time to write that out, because it's much smarter, and it's quite new, it's quite slow. That's what the open AI said, the people are opening I said, and also if you use chat GPT, if you use GPT 4 on chat GPT, it's quite slow for now. So as you can see, it writes the code for us, you can use the following Python code to check if a number is prime number. So it tells us the code and the format, we could copy this and add all the indentation we meant to add, and it's probably going to work. But as you can see, that is much, much smarter. It gave us the wrote Python code for us, we could take this to the next level. And you know, format or the Python code, whenever a code is being written, we could format it to make it look good. But for now, we've basically done what we want to do. As you can see, it wrote a Python function that checks if a number is prime. And it basically, you know, explained everything it did, even if it took a while for GPT 4 to do that, but it did it accurately. So that is the main thing. And that is the main goal. So everything we wanted to do in this video is done. And I hope you enjoyed this video. So that's going to be all for this tutorial. Thank you for watching to the end of this tutorial. And if you enjoyed everything we did, please don't forget to smash the like button and subscribe. And if you want the full code to everything we did in this video, the link is in the description below. Check that out if you need the full code. And once again, thank you for watching, and I'll see you in the next one.