in this game dev tutorial you will learn how to create a first person shooter game using unreal engine and c plus fah here teaches this course he has created a ton of game development tutorials and he is an excellent teacher what is up guys fire here but you already know that do you anyways welcome to another unreal engine tutorial this time we have a first person shooter c plus plus game yes c plus plus yeah i i gave me it uh i have a lot of things to say but i know you don't want to hear so let's just take a look at the game that we are going to create so this is the layout of the game as you can see we have this huge level huge level it is a big level and we have all of these enemies here that are waiting for us where we need to pass by so that we can get all the way through here and i'm going to speed it up and then here and then here till this door and this is the end of the game we of course have a timer and we also you know have the enemies who are attacking us so if i preview the game if i hit the play button you will see the timer here i also have my player held at the bottom left and the enemies have their own health i can shoot the enemies and you can also hear all of them look at that so there you go shoot and one more time and the enemy is dead and this is too loud so i think i think i need to you know lower the volume just a little bit there you go but anyways this is you know basically the game so we need to pass by here shoot these enemies of course you will have assignments in this you know mini course where you will have to create your own system for having you know a limited number of weapons actually bullets and so on and so forth and the enemies when they get close to me look at that so they are going to deal damage you see and this is too much damage as you can see too much damage i'm going to kill this bad boy i don't know what this thinking was but anyways this is our game as you can see and all of this is created in c plus plus of course with combinations with blueprints but five percent blueprints because we simply cannot avoid blueprints when you create something in c plus plus you need to convert that into a blueprint to use it right here in the editor or in your game but the important part is that we will learn a lot of cool things such as ai perception which is basically giving your enemies the ability to have sight hearing and stuff like that so yeah that would be it as you can see the game looks simple but we're going to learn a lot of cool and complicated things such as the ai perception and the site component of it and how to use that in order to detect the player and so on and so forth so a lot of useful info is inside of this mini course and yeah i don't have anything else to say except you know subscribe like and all of that stuff and let's get into the game and create this really cool game what up peoples we are back again with unreal engine and again this time we are going to as always create a game with c plus plus an unreal engine so this is a new project as you can see i have the project browser and over here we are going to create a game because we are not a tv producers and architectures and automotive people so we're going to click here next and we are going to select the first person so not blank project not the puzzle flying whatever we want the first person and go here and again when i say go here i mean next and over here we have the blueprint so we're going to change the c plus plus everything else can stay the same with starter content because we need it i need the starter content so badly and over here i am going to name this one monster shooter there you go because we shoot monsters okay vampires or whatever and we are going to click here to create a project now of course you know that you know it's tedious with unreal engine all that stuff it takes you know probably a year or two for it to load and compile unity is getting closer you know takes a lot of time also to create and compile and whatnot so i am probably going to you know cut out the video right here and i will see you back hopefully if this you know finishes up until tomorrow so yeah let's wait and i will see you when this you know the project loads finally unreal engine showed mercy and decided to create the project and here we are now of course before we proceed because we are going to first cover the player and all of that stuff we are also going to import our own mesh because over here we have the meshes folder and this is not what we want instead we want this let me just go back here content and i'm going to right click over here a new folder and create the meshes folder over here at the top you see content and over here we're going to import our own mesh which is basically the vampire or the 3d model that we are going to use now you will be able to download it link will be down below this video so just click on the link it will start downloading and also you will have a complete project so this finished project that we are currently doing you can also download it this is for reference purposes that you can download maybe copy and paste some code that you don't want to type out or compare your code to mine and so on and so forth so i'm going to simply drag and drop the vampire over here we do need to make sure to import all and wait for the vampire to import now hopefully this is not going to take too long because in the meantime i can sing to you or whatnot don't worry about whatever warning you've got so don't worry about that next i'm going to import his idle animation over here import all and last but not least i'm going to import the vampire running animation there you go let's go over here and import and there you go so now i am not going to do anything with the monster with the vampire and whatnot we are going to do that later on so don't worry about that this is just for you know saving purposes so the first step that we are going to do is we are going to create our game character so we are going to go here inside of our c plus plus classes and monster shooter and over here we have the monster shooter character and all of that stuff we don't want all of this we simply want to click here new c plus plus class that will inherit from the character itself and i'm going to click on next and i am going to call this one monster so monster shooter character this is the name of our class and i'm going to hit here click create class and i have issues when i talk you know as you probably noticed anyways it is not important by the way i have a new blog that is hopefully out i mean the day i'm recording this video the blog is still being made but the day this video will be published the blog will probably be up so you will see a link down below if you like written tutorials you don't want to listen to my voice and whatnot maybe you hate it or whatever so i'm just going to double click this and open it here reload all you can also follow along maybe i will have this tutorial in a written form as well i don't know just you know comment down below if you like written tutorials and if you like me to create more written tutorials on my blog so over here right below the player setup player input component i am going to create a public properties so the first one is going to be property or u property and this is going to be visible defaults only and from here we're going to say category is equal to mesh and also well over here closing the parentheses and i'm going to declare it as a class use skeletal mesh component with a star because it's a pointer and i'm going to call this one hand mesh which is going to be our hands that you know we're going to use to shoot now moving forward i'm also going to copy this over here and we already know what this visible defaults only is what the category is the category will put it under the category mesh when we try to search it inside of the blueprint visible defaults only will make the properties visible of the skeletal default or skeletal mesh component next we are also going to have another skeletal mesh component so i'm simply going to paste all of this here but this time we're not going to call it hand mesh but i'm going to call it guns or gun mesh because you know we have hands that you know our hands and we also have guns that those hands are holding so next we are going to have your property but let me just go over here and copy this so that we don't have to every single time time type it out so we have the visible defaults only category mesh but this one is going to be class u scene component there you go and this one is going to be the muzzle location or basically the the location from where we are going to shoot paste again the u property and this one is not going to be visible defaults but this one is going to be visible anywhere so it's anywhere there we go the category i'm going to say here is equal to camera and i'm also going to make it blueprint so blueprint read only so we can also read it in the blueprint and over here class you camera it's not condur it's camera component there you go and i'm going to call this one first person camera or fps camera however you want to call it now next we're going to have a few more variables for the movement and over here i'm going to say you property and this one is going to be visible anywhere and blueprint so blueprint read only category is going to be equal to camera so camera there you go close the parentheses and this one is going to be our float turn rate i am also going to copy this right here and paste it over here because it's also going to be or this variable is going to be a u property visible anywhere blueprint rings only category camera and instead of turn rate this is going to be our look up rate there you go and we're also going to have the gun offset and this one is going to be you property and i'm going to say edit anywhere and over here it's going to be blue so blue print read right and the category is going to be equal to gameplay like that and this one is going to be our f vector gun offset there you go and we're going to use this gun offset to offset the gun and we're going to see that don't worry next we are going to have protected variables or basically protected functions the first one is going to be void on fire this tutorial is on fire there you go i'm also singing so over here we're also going to avoid move forward there it goes for word like that and takes a float value as a parameter we're also going to have void move right and takes a float value as a parameter void turn at rate having a float rate parameter and void look at rate having a float rate parameter now you can of course pause the video and copy all of these because these are the default functions that we every single time we need to create because you know it's simple we need we need those in order for you know everything to work i mean move forward move right look return at rate look at the rates over here for the fire i'm going to right click on it and quick actions and refactoring and over here we're going to create that declaration inside of the c plus plus class because we know that in the dot h file we only declare things and then we need to implement them inside of the c plus file so over here do the same thing for all of these it will save us time instead of us going out there in the class and typing all of this out so right click quick actions refactoring and there you go so you can now go over here and see that all of these are created so move forward move right look at rate turn at rate and all of that stuff and over here we are first going to have some includes and i'm simply going to paste them so we have the includes for the camera for the capsule and for the input component now what's important for you to you know do is do these includes right away so don't you know don't wait for whatever just do the includes pause the video and do that i have a practice of doing these includes you know right when we start with the tutorial or when we start with a certain part of the tutorial so that i don't go back and forth every single time we need a certain component in the code and oh i need to include this as well oh i forgot to include this you get the point so do the includes right here right now otherwise i will kidnap you in teacher game development okay so moving forward over here inside of the constructor is where we are going to construct everything so the first step is to get the capsule component and from it i am going to init capsule size and set the size to 40 f and 95.0 f this is the default value of the capsule and of course we can change that in the editor but i like to do things you know like this when we do c plus plus goes i cause code i don't know about you but i really like typing out code so maybe somebody doesn't like it so there you go so turn rate is going to be equal to 45.0 f there you go look up rate is going to be equal to also 45.0 f now the first thing that we are going to do is we are going to create the camera component and well in order to create a camera we simply need to say first person camera is equal to create default sub object type of view camera component and text over here which is going to be the name so inside of text we're going to give the camera the name first person camera simple as that what do you expect am i going to give it the name carl it's not my child okay first person camera and from here we're going to say set up attachment and we're going to attach it on the capsule component so get capsule component there you go this is where we are going to attach the first person camera i'm also going to add relative location so first person camera and i'm going to say add relative location and the relative location is going to be f vector and the location is going to be minus 39.56 f for the x for the y 1.75 f and last but not least 64. point 0 f on the z axis now relative location if i hover over does it have an explanation no but the relative location is basically location relative to the parent of this component so the first person camera's position will be relative to the get capsule or the capsule component i'm also going to say here first person camera and b use pawn control rotation equal to true we talked about this in our previous videos in i don't i cannot remember exactly which tutorial that was but i demonstrated like when we don't use the pawn control rotation when we use the pawn control rotation so basically this is the this gives the control over the rotation of the pawn so that is it next we are going to create a mesh component that will be used that we are going to view from the first person and that is the hands mesh so hands mesh is going to be equal to create default so default sub object type is going to be use skeletal mesh component so mesh component there you go and over here it's going to have texts in the parentheses and for the text over here we're going to say character mesh so moving forward after that we're going to only make the owner see those hands what does that mean that means the following so hands mesh from here set only owner c and from there we are going to set that to be equal to true this will make only the owner or us having this component see those hands and this is without this access it's only set only owner c now of course this is not mandatory it will not change the game at all but i'm just showing you different options that we have because maybe you're creating a game on your own and you want some of these options well here they are so next i'm going to call the hands mesh and we're going to set up attachment and we're going to set it up on the first person camera so this is where we are going to attach these hands on the first person camera that is attached on the capsule component that we already saw next we are going to say hands mesh and from here i'm going to say cast dynamic shadow so cast dynamic shadow is equal to false this is selfexplanatory it will not cast any dynamic shadows it will also over here so hands mesh cast shadow it's also going to be false because why we don't need all of this you know again this is these are just options that i'm showing you so next i'm going to say here hands mesh i'm going to add relative low rotation excuse me i almost i wanted to say rotation and location at once so relation or something like that f rotator and over here i am going to set the value 1.9 f for the x minus 19.19 f for the y and 5.2 for the z axis there you go so this is the relative rotation i'm also going to say hand mesh and add the relative location and this time f vector it's vector like that and over here i am going to add minus 0.5 f and i add it in quotes we don't want to do that in quotes okay next we are going to say minus 4.4 f and minus 55.7 f and there you go so this is the relative location we are almost done we only need to create the gun so gun mesh gun mesh is going to be equal to create default sub object of you skeletal mesh component there you go text over here to give it a name so the name is going to be gun you know like i don't know like some hood gangster gun okay so gun mesh from here we're going to say set only owner c here it is true and only the owner will see the gun same as what we did with the hands our gun mesh so it's gun mesh gun mesh there you go cast dynamic shadow is equal to false then our gun mesh from here cast shadow is also going to be equal to false there you go and our muzzle location and gun offset that's the only thing that we need to also create so gun mesh actually the muzzle location not the gun measures so muzzle location is going to be equal to create default sub object you seen component and text over here and for this one i'm going to say muzzle location or basically the location from where the bullet is going to come out our muzzle location set up attachment we're going to attach it on the gun mesh there you go and our muzzle location from here set relative location is going to be f vector so f vector and one more parentheses so the f vector 0.2 f 48.4 f and minus 10.6 f there you go argon offset is going to be equal to f vector and the value is going to be 100 f for the x 0.0 for the y and 10.0 f for the z axis now notice over here we did the set up attachment for all these components except for the gun mesh now for the gun mesh we didn't do the for the gun mesh we didn't do the setup attachment over here inside of the constructor instead we are going to do it here in the begin play so over here we're going to say gun mesh and from here attach to component and we're going to attach it to the hands mesh and we're going to say over here f attachment transform rules and over here we're going to say snap to target not including scale and last but not least text and over here we are going to say grip point now the reason why i did it in the begin play is because doing it in begin play is safer because the skeletal mesh is not yet created here in the constructor so it can happen that this will not work but when we do in the in the begin play it will work now i will talk about this f attachment transform rules what is this grip point and all of that stuff in the next video because this video is already getting long not what i planned to do but i just want to compile everything make sure that we don't have any errors because you know i want to make sure that everything that we typed is okay and it's not okay so i have an a problem over here on line 40 in the dot h i'm missing comma in the variable declarations let me just quickly go here 40 okay here it is after our blueprint read only i need to add comma and you know you can forget things because you type too fast you are a perfect programmer like i am and all that stuff just kidding but anyways you get the point so this is basically it for this video in the next video i will explain what this is we will create a blueprint out of this we will continue to code and all of that stuff if something is not clear just make sure that you ask in the comment down below but all of this that we did so far is nothing new we already know how to create components if you went through any of my tutorials and all of that stuff so uh yep fire here from you already know that you're on the channel you're on the website or whatever make sure to check out the blog and i will see you guys in the next video what is up my game dev gangster ronios in the previous video we stopped over here with the attaching the gun mesh and i said that i will explain what this is so basically what does this mean is that we are going to attach the gun mesh on the hands mesh and these are the rules that we are going to use for that attachment so snap to the target not including scale so the scale is not is going to be untouched for the gun so if we set the scale 100 by 100 for the gun it's not going to be touched no matter what the scale of the hand's mesh is now what is this grip point well basically the grip point is where we are going to attach the gun mesh on the hands mesh what does that even mean well that means if i go over here and this is where the hands are located so in the first person folder character and then mesh and these are the hands so if i double click these hands we are going to open them right here now if we go into the skeleton of these hands you will notice over here that we have something called a grip point look at that so this is that grip point and if i come closer to the hands where the grip point is you see this is where it is going to be attached now in one of my previous tutorials i have shown you how we can create our own custom snapping socket name or whatever basically you just you know choose where you want to create it then you right click and then you add a socket and you give it a name the name is important because here in the code you're going to reference that name so that you attach your desired component on that on that socket so this is what we are doing and this is where this grip point is so this is where the weapon or the gun mesh is going to be attached now in order for us to demonstrate that we do need to create a blueprint so over here inside of the content we can right click and create a new folder for blueprints and for this bad boy i'm going to go inside create a blueprint class that is going to inherit so here all classes we are going to say monster shooter character so this is the one that we are going to inherit and i'm going to say bp underscore monster shooter character there you go and double click this bad boy open him you know in visual studio i in visual studio in the editor not the visual studio so we need to open him in the editor so over here there you go so we have the character mesh this is the mesh the the one that comes by default these are our hands that we are going to use and attach so basically over here for our hands i am going to choose the hands let me just find them mannequin hands or arms here they are this is what we want now i'm also going to attach the i'm going to attach the blueprint for the animation for these and this is going to be first person anim there you go which is automatically going to position them right here as you can see now when it comes to the gun we also need to go over here let me just compile and save that so go over here for the gun and we need to search the gun so let me just find it here is the gunny gunny and you know compile and save that so there you go so this is where my gun is going to be and i believe the gun should be a little bit more behind i think i'm not sure 100 but let's go over here inside of our map and what i'm going to do also here in the c plus plus class i'm going to right click and create a new c plus plus class and click here to show all classes and filter for the game mode and i want to inherit from the game not the game mode base but the game mode and i'm going to click here next and i'm going to call this one monster shooter game mode simple as that or monster shooter underscore game mode this i'm going to call monster shutter game mode and i am going to click here create class which is of course going to do you know all of the heavy lifting and whatnot and yada yada yada you get the point and all of that stuff so let us just wait for it and i can sing to you all this time reload everything now the reason why i have you know the reason why i created our own game mode is because we need to create a blueprint out of it so let's go here into the blueprints and right click blueprint class and filter for my monster shooter game mode here it is and i'm going to say bp underscore monster shooter underscore game mode so that we can go here inside of our project settings and then maps and modes and change the default game mode to our own so bp monster shooter game mode so that we can also change the default pawn class to our bp monster shooter character now the reason for that is now when we hit the play button to actually run the game our game character is going to be the one that's going to be spawned but let me just click on this character over here for whatever reason where is the character so first person character here he is i can delete this we don't need him over here i can have this one over here for spawning the character this is the start of the character right so yeah basically as i said when we run the game our own character is going to be spawned and we can test that out by hitting the play button and there you go so if i eject myself we are going to see that we have spawned the character look at that he is being spawned and look at where he is where the weapon is being spawned it's right in the socket that i showed you a moment ago so let me just find it it was in the first person not ppp fps actually let me just go here in the content and then first person and then fps weapon and then meshes and here it is actually this is the gun you know i forget where this is so excuse me for that one so it's first person and character and then mesh and here it is finally finally i know where it is and when we go into skeleton again having the grip point if i zoom in on the grip point and i press f to go directly to the grip point you see it's in the hand and if i go here in the map voila there you go he is already spawned here in the map so this video is more about explaining what you know is happening and all of that stuff so in the next video we're going to start to code the movement of our character then we're going to start creating the level and all of that part or that stuff and yada yada if something was not clear when it comes to this video and the explanations that we did and what is you know a socket and all of that stuff just make sure you ask in the comment down below and i will see you guys in the next video where else i'm going to see i'm going to see in jail because you know i i don't go to jail you go and uh yeah so we cannot see each other i will see you in the next video alrighty then my game dev gangsta roni oh now we are going to create the movement for the player because even if i hit the play button try to move nothing is happening you get the point so we are going to go into the project settings in here for the input we have everything already predefined but we don't need all of this so over here i am going to have jump and fire but reset vr no no i don't need that so over here for the fire i'm also going to remove all of this here we only need the left mouse button nothing else for the jump we also need the space nothing else so all of this right here can be safely deleted we are going to have move forward but for the move forward we are going to have ws up and down all of these others you know we don't need them why should we for the move right we need the a and the d that's all so let's go over here remove all of this remove remove for the turn and turn rate so basically this over here we don't need the turn rate like this so we can simply delete it here we have the lookup rate and the lookup so lookup rate i'm also going to delete we need to turn and look up so the turn has the mouse x and the look up has the mouse y and all of this right here this is what we need of course i can also delete the up and down or add here left and right arrow key that is totally up to you but what is the next step is to go inside of our script inside of our cpp and over here set up player attachment so setup player input component basically to bind the functionality to input so what we need to do over here is we need to call the player input component so component like that and we are going to bind the action jump is the first one that we are going to do ie pressed so when we press the jump button inside of this i am going to call let me just see over here i almost tried to search for the jump functionality but we have the a character that colon colon i almost said dash jump there you go so this is already built into our character i can copy this and paste it here so now i'm going to do that for the e do that do it for the e released and over here i'm going to say stop jumping so when you release the button we're going to stop the jumping simple as that next i'm also going to take our player input component and bind the action and the action is going to be over here fire so fire the section is on fire anyways when we press the i when ie is pressed inside of this we want to call the fire functionality which is this one over here we're not going to code it right now but as i said when we go through things that we want to do i don't want to you know just skip this and then later on when we actually want to shoot i come back oh we also need to bind the component no i might forget and stuff like that so i'm going to do it right now you can do some ue log for example just to print out to see if this actually works but we know that it is going to work i'm also going to take the player input component and we are going to bind bind the axis so bind axes and this time is going to be move forward axis inside of this and we're going to set here our move forward so simply copy this here and add the and sign there you go next i'm going to copy this and paste it down below because this time we have the move right so move right and also calling the move right function last but not least we have two more so i'm simply going to copy these and paste them over here so one is going to be the turn the other one is going to be look up there you go and over here we are going to call the turn at rate and over here we're going to call look at rate simple as that so this is how we bind and this is not the first time that we're doing this so we already know how to do it now here inside of move forward we are going to test if the value which is this parameter over here so if the value is not equal to 0.0 f meaning we are actually pressing the button then we are going to say add movement input and we are going to say over here get actor forward vector and comma here and pass the value so that we know where we are going you can assume what we're going to do for the move right the same thing so copy over here but this time we're not going to say get actor forward vector instead over here we're going to say get actor right vector because we are always right now over here we are going to calculate delta for the frame of the turn so what we are going to do over here is we are going to say add controller yaw input and we are going to use the rate that is the parameter over here so using the rate multiplied with the turn rate and then we're going to multiply that with the get world and from the world we're going to get the delta seconds like this and as i said this is going to calculate the delta for this frame from the rate information which is going to make it a little bit smoother and going back over here pasting this the look rate but this time it's not going to be add controller yaw input it's going to be the pitch input so over here i'm going to say pitch input and again we're going to use the rate over here the parameter but this time it's not the turn rate it's the look up rate that we are going to use and multiply that with the world and delta second so ctrl shift b to compile all of this and make sure that we didn't do any oopsies which is the case there you go let me just turn off my volume because i don't want you to hear this it's embarrassing and whatnot just kidding but you get the point so over here we bound the functionality we know already what this is and in case some beginner is watching this what is this jump what is this fire this move forward well it's basically this functionality over here so this is the jump this is the fire move forward move right turn and all of that stuff so we are binding these functions to those you know to those axes and inputs which means when we press the space bar you see over here for the jumper let's do it for the move forward so when we press the w or s key then we are going to execute the move forward the move forward function which is this one right here and we can go inside of our editor and we can test it out so if i hit the play button you see i can rotate now look up and down and i can move forward look at that i can also jump you see i have i'm jumping look at that jumpy jumpy jumpy jumpy jumpy jumpy jumpy jumpy jump you get the point i'm jumping so there you go so look or we can turn we can look up we can look down i can move backwards forward left and right and there you go so basically this is how easy it is to set up the moon this is for you who are beginners and watching this and i know this is not a complete beginner tutorial but i cannot prevent beginners from watching it for whatever reason you know i cannot put some wall internet wall that doesn't allow you to do that but you get the point anyways if something is not clear what we did over here as i said and already explained so we only bound the axes that we have over here inside of our project setting so move forward that is the name if here the name is movement so if we change from move forward to movement over here we will also change from move forward to movement so those names need to match up and then over here this is just the function that is bound to that axis or action that's all there is to it so when we press the appropriate buttons that we have designated for move forward move right turn look up these appropriate functions that are bound to those axes or actions will execute will execute so there you go if something is not clear ask in the comment down below i will not help you out i will just ignore your comment i'm just kidding i will try to help you out as best as i can and i will see you guys in the next video moving forward now that we have our character and he is moving let us create the projectile before we can start shooting and in order for us to do that we need to go over here inside of our c plus plus files and all that stuff so we are going to right click and go here new c plus plus class that is going to inherit from the actor and from there we're going to click on next and from here instead of my actor i'm simply going to call it projectile and this is going to be the projectile you can also call it bullet or however you want to call it okay that is up to you you can call it carl kenny i don't know but anyways i'm going to call it projectile so let me just lower my volume so that we don't hear all of those noises when you know something has compiled and all of that stuff let's go over here reload everything inside of our cpp file or actually in the visual studio and right here below our tick so this is where we are going to create our own properties and we are going to create a new property and this one is going to be visible defaults only and from there we are also going to set it into the category which is going to be equal to projectile and this is again when you want to locate it inside of a blueprint you can find it under the projectile category so over here i'm going to say class u sphere component and from there i'm going to call it collision sphere which is going to and it's not cp it's collision sphere and this one is going to be the sphere that we are going to use to detect collision with the player and other components in the game so next we have the u property and this one is going to be visible anywhere and this one's going to be blueprint read only and it's going to be category equal to movement and this one is going to be class u projectile movement component so we are going to use the projectile movement component to propel the projectile to move and i'm going to call it projectile movement there you go next we are going to create a u function and this one is going to be our detection for the hit and over here i'm going to call it void on hit and it takes a lot of these parameters as you already know so you primitive component which is a pointer hit component it also takes an actor which is you know also a pointer other actor that we are going to test if we you know hit or who is the other actor that we hit you primitive component which also is a pointer other component and then in 32 other body index and bool b from sweep and last but not least constant f hit result which we are going to call hit now of course we don't need all of these parameters but they are mandatory for us to well create or to declare this function so we need to do it and also the last step we are going to have a u property not proper two its property and this one is going to be edit anywhere and it's going to be a float damage value by default it is going to be equal to 20. now this damage value is going to be the damage that we are going to deal to the enemy when we hit it and over here i'm going to go and click on so right click on on hit and from here create declaration inside of the c plus plus file so over here inside of the c plus plus automatically this will be created so we don't have to you know type this out on our own now when it comes to the cpp file we know that over here we are going to implement everything so right below i am going to include everything that we need to include i'm also going to include over here so i'm going to say include and this one is going to be enemy.h now we still didn't create the enemy so i am going to simply comment this out otherwise we will have issues but i'm going to leave it there so that later on when we actually create the enemy we know that we need to include it because again i don't like to go back and forth every single time oh we created enemy let's go and include it and all of that stuff so over here inside of the constructor for the projectile we are going to say our collision so collision sphere is going to be equal to create default sub object of u sphere component and that's your component we are going to give it a name with a text over here so the name is going to be sphere collision and the sphere component we are going to set the initial radius to 20 so i'm going to say collision sphere and from here in it radius or in its sphere radius we're going to set that to 20 as i already said it's 20 f not 20 point f0 i'm also going to set the sphere to be the root component so i'm going to say root component is equal to the collision sphere there you go which is going to set the sphere as the root of all other components that we are going to add to the projectile now for the projectile movement so projectile movement is going to be equal to create default subobject of you projectile movement and from there give it a text or basically a name which is inside of a text and i'm going to call it projectile movement now right here below over here i'm going to say projectile movement and we are going to say update it component is going to be equal to collision sphere or basically what does this mean so it's collision sphere not let me just take it from here and copy and paste it so the updated component basically means who is the projectile movement moving so who is he moving he's moving the collision sphere which is the root component which is going to move all other components that are below it also over here our projectile movement we are going to set initial speed to be equal to 3 000 because we want our projectile to be fast as a you know something that's fast projectile movement from here max speed is also going to be equal to 3 000 because this is power level over 2000 it's not over 3000 because it is you know you get the point projectile movement we are going to say b rotation follows velocity is going to be equal to true so rotation follows velocity this is selfexplanatory the projectile will rotate according to the velocity and our projectile movement from here we're going to say b should bounce is going to be equal to true so we are going to be able to bounce now i'm also going to set the initial life span of the projectile which is going to be here so initial life span that's going to be equal to three seconds which means if we don't hit anything after three seconds the projectile will be destroyed simply after three seconds that's all there is to it now over here inside of begin play this is where we need to connect so our collision sphere and from here we need to say on component begin overlap add dynamic and over here is where we are going to connect this function so i'm simply going to copy it and from here i'm going to say this and then and sign and paste the function that we want to provide over here so again we need to do this in on the gameplay because if we do it inside of the constructor it is not going to work if i don't forget when we create the enemy i will test it out by simply you know just to demonstrate what happens if we call it inside of the constructor as opposed what happens when we call it in ambiguity play but we also did this numerous of times in my other tutorial so it's not something new that we didn't do so far so ctrl shift b for this to compile so let us just wait for this to compile let's see if i have any oopsies and i don't so build one succeeded there you go so what i'm going to do now is go and create a blueprint from this because in the next video we are going to start to shoot it so inside of blueprints i'm going to right click and blueprint class and i'm going to filter for projectile and here it is and from there i'm going to say bp project and go inside of the blueprint so that we can you know add everything what we need are we in the viewport yes we are what i'm doing so i'm in the viewport so here we have the collision sphere what i'm also going to do is attach the i'm going to attach a static mesh component so over here i'm going to say static mesh there you go it's simple as that and it's going to be our projectile mesh now of course i can also create this from the blueprint but you know actually from the code but i'm also going to demonstrate how you're going to mix blueprints in code because this is what happens all the time with unreal engine so you need to mix blueprints in code it's simple as that now over here for the static mesh i'm going to filter for projectile first person projectile it's a huge sphere so over here i'm going to click on the lock icon and set the scale for or for all three axis to 0.1.1 and 0.1 so there you go now this is it when it comes to creating the projectile we still cannot test it out because i don't want to make this video too big and stuff like that it's already 10 minutes and so on and so forth so starting from the next video we are going to see how this projectile is going to work how we are going to propel it and all of that stuff but if something is not clear when it comes to creating the projectile just make sure that you ask in the comment down below now all of this here that we did it's nothing new maybe the projectile movement but you can you know just read from the functions or what we did they are selfexplanatory but again if something's not clear make sure that you ask and i will also help you out in the next video we're going to start shooting the projectile i will see you guys then now that we have the projectile we can put it or add it to the monster character and use it for our shooting so over here inside of our dot h file right after we create all of this look at rate and all of this stuff we are going to create new variables and they are going to be public so one is going to be you property and this one is going to be edit defaults only and i'm going to say category is equal to not gotta go rule category is equal to projectile now what i'm also going to do or how am i going to declare this this is going to be rt sub class so sub class not sub case subclass of and over here i'm going to say class a projectile and i'm going to call it projectile simple as that and it's with one r and they are both lower case or basically one r and it's lowercase not both so moving forward we are also going to add the sound that we are going to play when we shoot so over here i'm going to say your property and this one is going to be added anywhere and i'm going to call it or set here blueprint read write i'm also going to set the category to be equal to gameplay and this was going to be our class u sound base which we're going to call fire sound or shoot sound or however you want to call it and moving forward we are going to create another you property and this one is going to be edit anywhere blueprint read writes a blueprint read write category so category is going to be equal to gameplay and this one is going to be our class u anim montage which is a pointer and we are going to call it fire animation which is basically the animation that we are going to use to preview when we shoot so when we shoot this is the animation that's going to be played now over here we're going to say class u anim instance which is a pointer and i'm going to call anim instance this i'm going to call it next we are going to have a class u world and i'm going to call it world and it's a pointer so not the parentheses world like that f rotator spawn rotation for the projectile and f vector is going to be the spawn location for the projectile so these are the variables that we currently need now over here inside of our monster.cpp at the top we are going to add the includes so you can just pause the game and add all the includes as i already said i mentioned i do this so that we you know don't have to do it over and over again or every single time we basically every single time we add something new i don't have to go back oh include this include that so include the projectile animation enemy instead kismet gameplay static statics and the monster shooter game mode i'm going to ctrl shift b just to compile this see if i you know made a typo anywhere but i'm also going to attach the shooting sound and i'm also going to attach the projectile and i'm going to attach the montage or the animation now for whatever reason it is taking a little bit too long for this to compile so i'm simply going to wait or now okay now it is compiling okay there you go it has compiled so let's go back here inside of our first person shooter or monster character here he is open the blueprint and click on the top object over here you see the top one this one so that now over here we are going to have the fire sound the fire animation and the projectile so the fire sound is going to be weapon fire so weapon fire 2 this is the fire sound the fire animation is going to be again fire and over here first person fire montage and the projectile over here is going to be the bp projectile simple as that so compile and save that so now we can go back inside of our script and do you know the rest what we need to do now inside of begin play where we are is where we are going to get some references so we're going to say world is going to be equal to get world so we're going to get that we are also going to say our annum instance and we're going to get that from the hands mesh so our hands mesh and from there we're going to say get anim instance there you go so this is dynamic instance that we're going to get and did we add anime instance yes anime instance why is this in stance okay i didn't type it correctly so anime instance there you go so now inside of our on fire this is where we are going to do the fire or whatever i wanted to sing like that you know whatever at some point anyways we're going to test if the world is not equal to null so if we have the world because the world is important to us you are my world i'm your world and we are important to each other so next over here i'm going to say spawn rotation is going to be equal to get control rotation and this is going to be the control rotation from the pawn character or our own character now why am i testing if the world is not equal to null just so that we have a reference to the world because the world is the one who is going to spawn the projectile so we need to have the world if we don't have it we will not spawn the projectile our spawn location is going to be equal to and over here we're going to perform some tests so first we are going to say if our muzzle so if the muzzle location is not equal to null ptr and this is what we are testing and if if this allows me to test it out so i believe this was okay there you go so null ptr if muzzle location is not equal to null ptr with a question mark we're asking this then we're going to say over here muzzle location from there we're going to say get component location otherwise colon over here we're going to say get actor location and there you go plus the spawn rotation dot rotate vector and we're going to rotate by the gun off set and there you go and why is this giving me if muzzle location not equal to null ptr so it's no p t r there you go why is why was it giving me weird anyways over here we're testing or we're setting the spawn location to be equal to we're first testing if the muzzle location is not equal to null pointer meaning we have the muzzle location we have created it because i told you we are going to use the muzzle location to shoot so that is the location from where the from where the projectile is going to fire so that's why we need it so if it's not equal to null pointer then we are going to get the location of the muzzle so if it's not equal to pointer but this is just in case if we forget for example or this is a way to secure your code let's say like that so that you make it error proof so if it is so with the question mark essentially what we are asking is this so we're asking if the muzzle location if it's not equal to null ptr like that then over here we're going to do this we're going to say our spawn location so spawn location is equal to and we're going to get that from the muzzle location else so else over here if that is not the case so the muzzle location is equal to null ptr then we're saying this spawn location is equal to all of this so essentially this line of code so from here up to here is equal to all of this so this is how you do it i don't believe this is called a ternary operator i don't you know i forget the names and i don't even bother to remember these names because the important thing is that you know what it is maybe for a job interview you should know what it is if they ask you what is a ternary operator you should know the attorney operator is this but for your own development you just need to know how to use it so don't bother that much my advice maybe i'm wrong maybe i'm not comment down below what you think but anyways you denote it with a question mark so you have a condition then you add a question mark and after that is the first condition so if it's true this will be executed call on if it's not true then this will be executed so again this right here is equivalent to this right here so this is what we are doing now moving forward we are going to set spawn collision handling override so over here i'm going to say f actor spawn parameters and i'm going to call it actor spawn params and i'm going to say actor spawn params is or dot spawn collision handling overwrite is going to be equal to e spawn actor collision handling method column colon adjust possible but don't spawn if colliding what the hell is this teacher you are confusing me i don't know what it is well don't you know just calm down i'm going to explain so this f actor spawn parameters defines available strategies for handling the case where an actor is spawned in such a way that it penetrates blocking collision basically when there is a danger that when you spawn an actor that will collide right away with something at that point where you are going to spawn it well this defines how you're going to or how that actor is going to handle that collision now this adjusts if possible but don't spawn if colliding this means that the actor will try to find a nearby noncolliding location based on the shape component of course so it's going to try to find a nearby noncolliding location but will not spawn unless one is found so if it's you know if it sees that something is there and it can collide with it it will not spawn it will try to find nearly so near it something you know some location where it will not collide and then it will spawn there essentially this is what we are doing and last but not least we are simply going to say over here world spawn actor and the actor that we are going to spawn from here we are going to say a projectile this is the actor that we are going to spawn and who are we going to use as a reference well our own projectile that we attached in the beginning of this video at the spawn location using the spawn rotation and actor spawn params and there you go so that's why we need to know if the world is not equal to null so that we can use it to spawn the projectile and i can control shift b just to make sure that i didn't do any oopsies you see the build has succeeded now i'm not sure if the sound is going to be heard because you know i have the mic at the low input volume or low input level which means i have my mic near my mouth so this is why the sound is now crispy you know and this is me bragging but anyways that is the reason why we cannot hear the shooting but i will hope that it will be heard from the desktop because i'm recording desktop and audio at the same time anyways moving forward let's go here and test it out so if i go here in the first person example map there you go look at that so we are shooting and it is shooting but we are not animating and displaying the sounds so there you go we are shooting and doing all of that stuff there you go there you go there you go there you go we can you see destroy everything and it is working yada yada yada yada yada yada but we don't have the shooting sound and that's and the animation so we need to go here right below and we need to test so basically outside of our so outside of this over here so outside of the if statement for testing but we can actually do it inside because it makes more sense to do it inside we're going to test if our fire sound is not equal to null meaning we have attached our fire sound so we're going to call you game play statics so game play statics hopefully it will you know give it to me there you go play sound at location there you go this and the fire sound is the one that we are going to play at the get actor location there you go so it's a good idea to actually call the code to play the sound if you want the sound to be played and over here if our fire animation is not equal to null and our anim instance is not equal to null then we are going to call the anim instance from here to montage play so montage montage underscore play not player and it's montage what is it with me montage underscore play there you go passing the fire animation and 1.0 f which is the playback rate so if you hover over that's the in play rate basically we're going to play the animation from the beginning this is what it means so ctrl shift b and make sure that this compiles and let me just lower my volume because i think it is too loud well not it's a 30 but i think you will hear it if not you will hear it guaranteed on your own computer but i will try to you know at least get the audio from the desktop there we go you can hear that we are shooting and we can also hit all of these here now of course let me just go and you know lower the volume just a little bit so that we can actually hear what i'm talking about projectiles and all of that stuff so this is how you can use the same code for your own game to shoot the projectiles and yada yada yada if something is not clear when it comes to this video for the code that we did over here for everything that we typed out just make sure that you ask in the comment down below spawn rotation we get it from the control rotation i explained this over here with a very cool visual example by using if else statements i've explained the actor parameters using the world to spawn the projectile over here if we have the sound and the animation just play them and that would be it anyways as down below suddenly it's not clear i will help you out and i will see you guys in the next video what is up people so now we are going to create our enemy because we already have the player he's shooting so let's go over here into c plus plus and see section or folder and create a new class that will inherit from the character and from here i'm simply going to call it anime very clever very creative i'm the most creative person in the whole world i'm just going to lower my volume or basically mute my computer so that we you know don't get some i don't know how's it called hearing disability hearing problems whatever because my you know speakers destroyed your ears we don't want that okay we want you to follow the tutorial so let's go over here and double click the enemy open it inside of our visual studio and reload everything and yada yada yada so in this video i'm just going to prepare the basic stuff such as animation and some components so over here after we create our setup player input component we are going to create a new property and this one is going to be edit anywhere so anywhere and it's going to be class ubox component which is a pointer and this is going to be our damage collision which is basically going to be the component that we are going to use to detect damage dealt to the player so when the player collides with this component we will deal damage to him over here i'm just going to paste this function you can go and basically copy and paste it from the player himself so you can go here inside of the monster shader character dot h and you can where is it monster shooter character where do actually it's in the projectile so in the projectile you can just copy this and you can go over here and you can paste it and from here i'm going to quick actions and refactoring create the you know declaration and whatnot so it is going to create it hopefully did it create it or did it block there you go it blocked for a second but it also created it so over here at the top we are going to have a few includes you're going to have more includes later on don't worry about that so over here we have the box component a monster shooter character we will need that to detect if we have collided with the monster shooter character so what's gonna happen inside of our constructor we're going to say damage collision is going to be equal to create default so it's default not defy default i need to do it again so create default default sub object and it's going to be a u box component and we're going to give it a name here inside of a text the name is going to be damage collision voila there you go we are going to set it up or attach it on the root component so setup attachment on the root component that would be pretty much it and inside of our begin play we are going to bind the function to the on component begin overlap so damage collision on component begin overlap that add dynamic dynamic there you go this and the name of the function which is going to be our a enemy on hit of course adding the and signed and there you go now we can ctrl shift b to compile this because now we are going to go inside of our editor and create a blueprint for it so the build has succeeded let's go in the editor and inside of our blueprints we are going to right click and go blueprint class that's going to inherit the enemy class and this one is simply going to be bp enemy very simple we did this numerous of times and this is the damage collision that we already have so what i'm going to do with the damage collision is i'm going to set the x to 41 that is the position of it and over here i'm going to set the box extend on the y to 60 and on the z to one one two so 102 also for our mesh we are going to select over here our character or the vampire there you go he is translucent or transparent not translucent let me just first do this so on the z axis i'm going to say minus 85 and rotate him minus 90 degrees and this is how the character is going to well look like when it comes to the capsule component we are going to leave as is compile and save and why is he you know why can we see through him well because he's a vampire first things first and the second is if we go here in the meshes and let me just find the material vampire matte this is what we need so this material we need to click on this matte over here and this is not the first time we are doing this so over here for the material we have this blend mode which is currently set to translucent we need to set it to mask and apply that and save it when we do that it will change the appearance of that material i don't know that much about materials and what is going on here but basically when we do this now we have the we have the vampire visible so i can research a little bit more and explain that in a separate video if you want me to but you can also i encourage you to research that on your own because that's the best way to learn now over here i'm going to inside of the meshes so in the measure i'm thinking about creating a separate folder yeah a separate folder new folder and i'm going to call it enemy or simply yeah enemy animations so enemy animations because we are only going to have enemy animation so why not put it in a separate folder right click over here and we're going to go under animation and we're going to use blend space 1d and select the vampire skeleton and this one is going to be our vampire idol underscore running there you go so let's go inside and drag the idle animation over here this is not the first time we're doing this by the way and drag the running animation here i'm going to change here the horizontal axis name to speed not spare its speed and the maximum value can be three seven five so now for example if it's over here the value then he is in the idle if it's over here he is running you get the point so this is not the first time that we are doing this as i already mentioned so yeah that would be it we can also go now inside here and create an animation blueprint so this is what we want and it will take the vampire skeleton okay this is going to be our bp nme enemy underscore animation and for this one what i'm going to do is i'm going to add a variable and that one is going to be the speed variable which is going to be a float there you go compile and save that i'm also going to right click over here and create a state machine so state machine it's going to be my new state machine and i'm going to call this state machine vampire movement we can also call it simply movement that can do i'm going to plug this in even though we don't have anything but we can go over here and now we can right click and create a new state this is going to be idle underscore walk or basically backslash walk or underscore or what's with me and the underscore idle walk or idle running this is what i wanted to say this whole time so going back over here for the result i'm going to use the idle running which is our blend space 1d plug it in over here and plug in the speed over here now the speed variable we are going to change that so i'm going to compile and save that so that now automatically we see that the vampire has changed his state from the t pose to the animation pose but we are later on when we add later on in the next video when we start to add more variables to our enemy we are going to code the speed movement inside of our event graph over here so we're going to do that and we're going to get that from the script we're going to see all that don't worry about it just over here for the enemy and the mesh character for the anim class we are going to search for the bp enemy animation so that now if i compile and save and take the enemy so i need to find his blueprint which is inside of the blueprints an enemy and there you go so now we have the enemy who is right here i can move a little bit down just take this here the snap sizes something like this and there you go so if i hit the play button we will see the enemy who is behind us and he is being animated of course he is not doing anything to us because he's not detecting us he's not doing you know yada yada what not we're going to start to code that from the next video at his ai site so that he can see us and then run towards us and all of that stuff if something was not clear when it comes to this video make sure that you ask in the comment down below but basic things over here just creating the damage collision over here also adding or binding the function to the on component begin overlap and then creating animations it's not the first time if you followed any of my unreal engine tutorials i covered this a lot so yeah but of course if something's not clear ask i will answer i will see you in the next video what it up guys in the previous video we created the enemy this is enemy look at the enemy this is the enemy and we created his animation so now we can continue coding the enemy to add some ai functionality now so far in a lot of the videos that i did when it comes to the enemy ai i have used these colliders like a sphere color collider or a box collider or collision that is so that we can detect when the player gets or touches that collider then we know that the player is closed we can attack him and so on and so forth this time i'm going to use ui perception component which is going to allow the enemy to simulate senses such as sight and hearing and so on and so forth so let's go here inside of our enemy.h file and right here below this right here you function on it and yada yada we are going to add all the components that we need but before we do that we do need to go over here inside of our dot build file here it is monster shooter dot build file so this is the one that we want so it's under source over here and then monster shooter like that you need to find the dot build file for your project and over here inside of this public dependency module names click here enter to separate them on the second line and over here after the last one that you have so my is head mounted display you're going to add comma and then you are going to paste here this ai module so paste it like this if you don't do it it will not work no matter what other code we put in so you need to in quotes paste this ai module so now that we have that out of the way we can go back over here inside of the enemy.h file and i can start typing so first i want to add the u property and this one is going to be visible so it's visible defaults only and this one's going to be category enemy there you go and this one is going to be class u a i perception component which is a pointer and i'm going to call it ai per comp there you go so what the hell is this teacher what is this ui perception component well ui perception component is used as i said to implement senses for an actor for example site so that it can see or hear so that it can hear and that kind of stuff so this is used as an ai component so next we are going to create another ui property or u property now ui but u property we're going to have it visible defaults only category enemy this one is going to be class u a i sense config underscore site which is a pointer and i'm going to call it site config it's config there you go so what is this uai sense config site whatever well this conflict is used to configure the ai perception component for site detection so this particular one is used to configure the site detection for the uai perception component next we are going to create a u function so you function like that and this one is going to be void unsensed and it takes a constant t array of actors so a actor which is a pointer by the way and over here close the curly bracket and have here and sign update actors this or updated not update excuse me updated actors this is a function that will inform us if any actors are detected by the uai perception component or by ai perception component so this is the one and i'm going to go here quick actions and refactoring create the definition inside of our dot cpp file so that you know yada yada yada we don't have to go and type it out ourselves so next what do we need for our functionality well next we need you property and over here this one is going to be visible so visible anywhere and the category so category is going to be movement and for this one i'm going to call f or we're going to declare f rotator and enemy rotation is the name for the f rotator next i'm going to just copy this over here because we're going to do the exact same thing but this time we're going to have an f vector and this one is going to be our base location because the enemy is going to be able to go and try to attack the player but if he doesn't find the player then he is going to go back to the base location basically when he detects the player he will run towards him when the player runs away from his site then he is going to go back to his to his location this is essentially what we are doing so this is for the base location next we are going to have another u property so i'm just going to copy this and paste it over here so we're going to have another visible anywhere but this one we're also going to use it as a blueprint read only we will see why basically i can tell you right now for the animation and we will see how this is going to work f vector and this one is going to be the current velocity of the movement so the current velocity of the enemy another u property that is going to be visible anywhere category is going to be equal to movement this is going to be float movement speed selfexplanatory for what we are going to use it another function that we are going to have is a void set new rotation which takes an f vector target position and an f vector current so current position has two parameters to determine the new rotation we're also going to have a boolean back to base location to determine if we should go back to the base location or not another f vector which is going to be our new location to determine what is the new location where we should move to and our float distance so distance squared there you go another over here you property so pro property there you go which is going to be edit anywhere not anywhere but anywhere and this is going to be blueprint so blueprint read only this one is going to be our health so float health which is going to be equal to 100.0 f and last but not least we are also going to have another u property i'm going to copy this over here paste it over here this is edit anywhere this is going to be float damage value by default it's going to be equal to 5 f and last but not least we're going to have a public function and this one is going to be void deal damage so that we can deal damage to the player float damage amount as the parameter or basically not to deal damage to the player this is for us to be dealt with damage so the enemy will be dealt with the damage and over here we have the damage amount parameter don't worry about these right now because we will you know code them later on use them later on for the moment what did i tell you what did i click over here cancel cancel okay there you go so quick actions and refactoring create there you go and last but not least for the deal damage as well quick actions refactoring create you know signature whatnot and hopefully come on hurry it up and it will create the definition for us i don't know why is it taking so long so i will have to sing well i wanted to sing but you see what happened anyways you get the point so we are pretty much done with setting things up we do need to go now inside the dot cpp file here at the top right below all of these other includes we need to include perception ai perception component and perception ai site config or a i sense config excuse me so make sure that you include these two or otherwise it is not going to work so over here right below the damage collision is where we are going to call our ai per component or perception component that's going to be equal to create default sub object of u a i perception component and we're going to call it here so it pass a text to give it a name and the name is going to be ai perception component there you go next we are going to have our site config which is again going to be equal to create default sub object of type of u a i sense config so sense config underscore site there you go and over here pass a text parameter and inside of the text parameter we do need to pass the site config name so that we know what it is now we need to configure this site config so that the perception component knows what to do so our site config and from here we're going to say site radius so the radius where the enemy will be able to see the player it's going to be 1250 f so floats and our site conflict from here lose sight radius so where the player needs to go or how far away he needs to go so that the ai perception will lose sight of him well that value is going to be equal to i'm just going to copy this and from here it's going to be equal to one thousand what what i thought pounds one thousand two hundred and eighty also we are going to add to the site so our site config and the peripheral or peripheral you get the point peripheral vision angle degrees that's going to be 90 degrees so the peripheral i i don't know how to pronounce it peripheral vision you get the point it's 90 degrees and again site config are detection by affiliation of the tech it's the detection by affiliation and we are going to say dot b detect enemies is going to be equal to true our site conflict so sight config and from here detect by affiliation.be detect friendlies that is also going to be true and last but not least site config and from here detection by affiliation so same thing if it allows me now to complete so detection by affiliation dot detect neutrals is also going to be true this is a selfexplanatory it is going to allow the side coughing to detect the enemies the friendlies and the neutrals but since we only have our player we are going to you know detect the player next over here i'm going to say site config and from here set max h to be equal to 0.1 f what the hell is the maximum age well age specifies the time by which the stimuli or what has been detected so the detected actor by this site conflict when he will be forgotten so how much time will take for him to be forgotten zero means never so zero means never and he will never be forgotten just like my you know your girlfriend my never mind uh moving forward so he will never be forgotten if it's zero zero point one after point one of a second he will be forgotten which means then the enemy will go back towards his base location and all of that stuff next we need to call the ai perception component and we need to configure census or configure the sense and we are going to pass over here the site config the one that we have just created over here next i am also going to call a i perception component so it's actually per comp there you go and we are going to set the dominant sense to be the site config and here we're going to get the sense implementation so this is going to be the dominant sense basically the only sense that we have configured which is the site sense and this is how you set if you have multiple of these maybe you have the hearing sense and so on and so forth this is how you can set set the dominant one so is it site here or whatever over here i am going to say ai perception component on perception it and for that i'm going to say add dynamic so dynamic and from here we're going to say this passing here and and we are going to attach this function on sensed and this is how we are binding our function to be informed from the ai perception component when something has been detected over here we are going to say current velocity by default is going to be equal to f vector column column zero vector this by default so when we start the velocity by default to zero movement speed so over here movement speed is going to be equal to 375.0 f and the distance squared is going to be equal to big number we're going to see for what we are going to use this and the big number expands to it's it's a big number so it's just a big number and it expands to you know as i said to a big number but we are going to use this to detect or to test for the distance between the enemy and the player we will see that don't worry that will come over here inside of our begin play we are going to say base location is going to be equal to this and get the actor so get actor location now i'm going to ctrl shift b just to make sure that we didn't do any oopsies and yadda yadda yadda and all of this stuff because we still cannot and we have something okay i type visibili anywhere which line of code is that so shoot enemy line 40 okay let's go over here let's go over here where did i type that out it's visible it's not like this visible over here visible anywhere there you go visible anywhere visible visible i don't know how to spell so you know don't judge me anyways ctrl shift b just to make sure that we didn't do any oopsies we are going to call it a stop for this video because there is a few more things that we need to code before we can actually test this out and i don't want to make the videos overwhelming overwhelming some videos need to be large but those that don't have to we have everything prepared next inside of our tick functionality we are going to we are going to create the functionality to move back to our base inside of our sensed we are also going to detect if we collide with something and so on and so forth and set the new rotational of that stuff if something was not clear what we did so far when it comes to the ai perception component and the site config just make sure that you ask in the comment down below and i will see you guys in the next video moving forward with our enemy ai system we are going to code this function called set new rotation because all other ones the onsens and here what we are going to put in the tick depend on it so over here i am going to create a new f vector and i'm going to call this one new direction and i am going to calculate that by taking the target position and subtracting from it the current position which are these two parameters that we have so simply subtracting this from this so this is going to give us the new direction where we need to face and i am also going to take the new direction and set the z axis of it to be 0.0 f because again we care about the x and the y and next i'm going to take the enemy rotation and set that to be equal to new direction rotation so now we have the rotation from the new direction that we have calculated by passing the target position in the current position so now we can safely call set actor rotation passing the enemy rotation and this is going to rotate our this is going to rotate our actor so over here inside of our onsen what is going to happen well we're going to loop through this updated actors array and we are going to see if we have any info or if something has been detected so we're going to say for int i which is equal to zero as long as i is less than the updated actors that count or actually excuse me num i'm you so used to unity count and length and so on and so forth so yeah you get the point so over here four in i which is equal to zero as long as i is less than the updated actors number which is well this bad boy over here and this array will contain information about every actor that's that's been sensed by the ai perception component that would be it now over here we are going to create f actor perception blueprint info and i'm simply going to call it info now this parameter this parameter is going to get information about the sensed actor so whoever we have sensed inside of our ai perception component this actor or excuse me this this parameter is going to get that information so from here what i'm going to do i'm going to say ai perception component so ai per comp and from here i'm going to say get actors perception there we go and we need to pass here updated actors and the element that's at the eye index and passing here the info there you go so this retrieves whatever has been sensed by the given whatever has been sensed about the given actor so over here we are looping through the updated actors and every actor that we have sensed this will return information inside of this info so it will return the information about that actor desk that has been sensed in our case we're using the site so if we have seen i almost almost want to say saw scene so i don't know if we saw yeah so it's more natural so if we saw that actor we will have information about him inside of this info info parameter so over here we can say if info dot last sensed stimuli and this is the last sensed actor and the element that's at index zero so the one that we have sensed was successfully sensed so if that is the case then we're going to do one thing else if he was not successfully sensed we're going to do another thing so again going over here if he was successfully sensed we are going to say f vector and i'm going to call it the ir not doer the direction and that's going to be equal to updated actors and the element that's at i index and from here we're going to say get actor location and we're going to subtract from it get actor location which is our own location and of course the ir it's not vector why back here every single time we're going to say dot z is going to be equal to 0.0 f and what are we doing here so if we successfully sensed the last simile so basically the last actor inside of this information basically the actor that we are trying to get from here so if we have successfully sensed him in our case if we seen him then we are going to get his location and we are going to subtract from it the current location of the enemy which is going to give us the direction so next we are going to take the current velocity and we are going to set that to be equal to direction get safe normal and we're going to multiply that with the movement speed what this get safe normal is going to do it's going checking if it's it's basically going to get the length of this vector but at the same time checking if it's safe to do so based on the length of that vector so essentially getting this direction and multiplying that with the movement speed so the direction is where should we face basically so way where should we face and let me just get my drawing tool there you go i have it now so if the enemy is here and it senses us over here this direction over here is going to have a vector that's pointing towards us like that so when we say the current velocity is equal to the direction multiplied with the movement speed it's going to make sure that that velocity is facing that direction and it's going to propel it towards it by multiplying it with the movement speed and now over here we can call set new rotation and we can pass over here updated updated actors and the element that's at i index and we can get the actor location not actor label actor location and we can pass our own get actor location again not label but location and there you go so this is going to set the new this is going to set the new rotation based on the and again over here you will see that it is going to rotate the actor by getting the target position which in this case is the sensed actor so the one that we saw with the ai perception and getting our own current position over here subtracting these two it's going to get the new direction and then from there it is going to rotate our enemy so this is what it is doing else over here if we don't have any info about the that we successfully sensed an actor so what we are going to do over here is we are going to say f vector that i'm going to call direction is equal to base location subtracting from it the get actor location so get actor location there you go so if we didn't sense an actor meaning we didn't see the player we're going to go back to the base location and in order for us to do that again we need to say the z to be equal to zero and we're getting the base or the direction subtracting from the base location the current direction or the current location excuse me from the enemy and over here i'm going to test if the direction dot size squared 2d if that value and open close parenthesis if it's greater than 1.0 f so essentially what i'm doing here this will get the squared length of this vector basically that is the meaning so it will get the length gets the squared distance between two points so that is what what does that mean so it is going to get this squared length and if that value is greater than 1.0 then i'm going to say current velocity is going to be equal to dri so direction get safe normal so again i'm going to get the safe normal multiplied with the move speed and then i'm going to say back to base location to be equal to true and from here set new rotation passing here the base location passing get the actor location like that and this over here needs to have equal so set equals to true that means that we are now going to go back to the base location because we didn't sense any new actor and the base location we get its location over here so the base location is the initial position where dynami is and over here inside of our tick functionality basically the update function we are going to check if our current velocity is not zero so is zero like that notice the exclamation mark that we have so we are testing if it's not equal to zero if that is the case we are moving and over here we're going to say new location is equal to get actor location so location and from that we are going to add to it the current velocity multiplied with delta time so this is going to be the new location our own location of the enemy plus the current velocity by which we are going to move multiplied with the delta time if we should go to base location so if back to back to base location meaning we should go back to the base location if that is the case we are going to first test if inside of parentheses if the new location minus the base location that size squared so again we're getting the size squared if that is less than the distance squared if that is the case we're going to say distance squared is going to be equal to new location subtracting from at the base location that size squared there you go so this is going to set the distance squared to this and its size squared with open close parenthesis there you go actually do i need to yeah only only one there you go else if it's not else if it's not and let me just go here there you go if it's not then we're going to say current velocity is going to be equal to f vector column column zero vector and then we're going to say distance squared is equal to a big number again setting it to the big number and back to base location is going to be equal to false and over here we're also going to set the new rotation to the get actor forward vector and over here we're going to say get actor location so this is going to set the new rotation outside of all of this so within this if statement over here we're simply going to say set actor location and passing here the new location and there you go so this is going to move us back to the base location and basically this right here is going to move us to the current location that we are calculating and we are calculating that well with this over here so if the new rotation as you can see all of this here as long as we're following the player the current velocity is going to be this value and as long as we need to go back to the current location the current velocity is going to be this value so over here essentially what we are testing if our new location minus from the base location if we are going back of course so if we should go back to base location subtracting from the new location and testing the size squared is less than the distance squared then we're going to set the distance squared to this value otherwise we are waiting until else over here so until this value is less than this value then we are or actually until it's greater than this value that means we have reached the we have reached our new location which in this case is the base location because this all happens inside of the this all happens over here in the if statement if we are going back to the base location because we need to make sure that we reached the base location so that eventually our current velocity will get to zero because if it doesn't get to zero we will run forever only if we are chasing the player we are going to run forever towards the player trying to get him and stuff like that but if this is our base location we chase the player up to here we need to go back here and this is where we need to stop and this is how we are going to calculate so if the new location minus the base location size squared is less than the distance squared then we are going to set the distance squared to the new location minus base location psi squared up until the value where this right here is going to be greater than the distance squared meaning not lower but it's going to be greater and then we are going to set the current velocity to zero again set the distance square to big number that's why we need it to be a big numbers because when we start to go back then every single time this is going to for the first initial check this is going to be less than the distance squared and back to base location is false and over here we're going to rotate so ctrl shift b just to make sure that we didn't do any oopsies and everything you know compiles and it is how it needs to be so build has succeeded as you can see now we can go and we can test it out so if i open my unity editor we will be able to if i hit the play button where is the enemy here he is if i get close to him and he sees me there we go so he now he saw me and he's rotating to where i am if i go away and run away from his sight and he cannot see me anymore then he is not going to follow me but you know since there you go and we finally run away from him and there you go he goes back to his base location again if we come over here his perception is 90 degrees so he can see us and you saw what happened so this is his base location if i run away look at that so now he's going back to his base location so essentially this is how it works just imagine that he has some invisible web over here and he can see everything in this line and basically how i know that is over here we have determined that so his sight radius up to which where he can see is 1250 the lose sight radius that is the radius where we need to run away so that the ai perception component doesn't see us is 1012 280. and the peripheral vision is 90 degrees which means and you saw that that the enemy can even see us if we get over here so if we get to him like this he can still see us because he can see 90 degrees that means you know you can see here and here as well so that is what we have set up and over here while we attach that science conflict we explain all of that essentially what's happening or where we are detecting all that it's right here so if we sensed the player which just happened then we're going to get the direction based on his location and our current location and then we're going to set the current velocity to that value you get the point if something is not clear when it comes to this video make sure that you ask in the comment down below and also by the way i've explained this here when we are going back to the base location when we you know lose sight so yeah that happens over here as well so when we don't or we cannot sense anything we set here back to base location to over here and then we start running back which i already explained but if something is not clear make sure to ask in the comment down below and i will help you out and i will see you guys in the next video what is crackings people so now we have the enemy who has the sight perception or basically he can see he is a bat that can see we are doomed just kidding but now we are going to animate him because if you remember when we got close to him so let me just get here look at that he's like a you know silver surfer he's sliding on the ground which is not something that we want so we are going to go here inside of the meshes and actually not in the enemy animations and enemy animation here it is if you remember we have over here the speed value that is set over here on the blend space for the vampire idol running now where can we set that well we need to set that over here inside of our event graph and that's going to happen over here at the top i am going to get the initialize so this is the one that i want blueprint or event blueprint initialize animation first what i'm going to do is i'm going to get this try get pawn owner and from here i'm going to cast to bp enemy and there you go and who am i casting well i'm going to cast over here the try to get pawn owner if i hover over this function does what the name says it is going to try and get the owner of this of this pawn basically getting the owner of this animation there we go and who is owning this animation well the bp enemy we're casting him to the bp enemy so from here what i can do is i can promote this into a variable and over here as bp enemy simply i'm going to say bp enemy so again i need to go here remove this as bp enemy so remove that part and over here bp enemy ref so ref is short for reference so next what we are going to do well from here we are going to get rbp enemy and this is going to happen here in the update animation so what i'm going to do here is i am going to get the current velocity look at that and it's right here under movement look at this over here so under movement we have something called get current velocity what is this if you remember i'm quickly going to go back over here inside of the enemy.h the current velocity look at this we set or created a property called current velocity we set it to be blueprint read only so we can read it into the blueprint we just see and we set the category to be movement this is what it means when you set the category over here in the code so when you're searching it inside of the blueprint so from here current velocity look at that it's under movement which we set inside of the code so now we can from the current velocity we can get the vector so vector length here it is and now that we have the vector length we can set the speed so from here i can set the speed this goes over here voila there you go and this should be plugged in over here so i need to compile and save that and now when the enemy starts moving because in the code we already know that the current velocity which is over here we are changing that value as you can see so if we have the player in sight we're setting the current velocity to the direction get saved normal multiplied with the movement speed that we already explained over here if we don't have the player we are setting the current velocity to the safe normal of the direction that we have over here multiplied with the movement speed which means now if i go over here again compile and say make sure that it is compiled and saved so if i hit the play button right now and the enemy sees me and he starts running look at that he is being animated and he is running towards me if he goes back you're going to notice right now if he loses the sight of me he goes back and look at the funny the funny walk anyways you get the point and you saw how now the enemy is being animated if you have any questions in regards to this and how we can access our variables inside of the blueprint and what does the category mean i mean again if how to use it and stuff like that just ask but we saw a really cool example so blueprint read only will make the you know velocity current velocity or any other variable accessible inside the blueprint category is where we can find it inside of the blueprint and that would be pretty much it i will see you guys in the next video moving forward now that we have animated enemy the enemy can move let us make the enemy attack the player and vice versa the player will be able to attack the enemy so over here inside of our monster shooter character dot h right here below our spawn location we're going to create a new property and this is going to be edit anywhere and it's going to be blue print read only because we will be or we will need to get a reference to this value in the blueprint but we'll see later why so over here we have a float health that is going to be equal to 100.0 f and last but not least we have a public function that is going to allow us to you know receive damage so void deal damage and it is going to be float damage amount same as what we did with our enemy so i'm going to right click on this one and i'm going to create the definition inside of the dot cpp file but waiting for the you see so i'm singing i wanted to charge you five bucks for that okay so here we are inside of our deal damage and what's gonna happen over here is that we are simply going to subtract from the health the damage amount that we have over here so this one over here so we're simply going to say health minus equals the damage amount and the health is the value that we you know just added over here there you go this one over here so we are subtracting from it the damage amount and i'm also going to test over here if our health so if our health is less than or equal to 0.0 f that means that the player is basically dead so what we are going to do is we are going to restart the game when the player dies so over here restart game but we can just for the sake of example call here destroy so destroy after that of course so after we restart first things first we will simply restart the game when the player dies but just for the sake of example and testing later on to see if the enemy is actually dealing damage to the player we can call destroy over here now same thing for the enemy we need to go and do the same thing same thing for enemy we need to go do the same thing so over here at the bottom we have already defined the deal damage functionality so we are going to say health minus equals the damage amount so damage amount that we pass over here and if you don't remember we already created here the health and we created here the damage amount so we're subtracting from it and if the health gets to the value so if our health gets to the value that is less than or equal to our well zero value then we are going to call destroy so it's actually destroyed and there you go this is going to destroy the enemy now where is this going to happen well first things first when it comes to the enemy over here inside of our on hit as you can see there you go this is where we are going to detect if we are colliding with the player and if you don't remember over here in the damage collision we have already attached that functionality so essentially what we are going to do over here is we are going to try and cast the other actor so we are going to say a monster shooter character who is a pointer and we are going to call him char and we are going to try and cast into the a monster shooter character and we are casting the other actor so this is the one who we are trying to cast which is the other actor that we have collided with if that succeeds so if char that means the cast has succeeded we casted the other actor into the monster shooter character that means we collided with the player then from there we can call the deal damage to apply damage to the player passing here the damage value which currently has a value of five so it will take a lot of hits if the player assuming that the player has 100 health it will take a lot of hits to you know deal any damage to or actually to to kill the player but you know it is what it is you can change that value because we set it over here i believe we set it to a b edit anywhere so that means we can go inside of the blueprint and just you know edit this value for testing purposes which is really cool and when it comes here for the projectile over here as you can see i've already included the enemy.h but i have commented out because at that point of time where we you know typed out this include the enemy script was not created so now we already have over here the on hit which we have bound over here inside of the collision sphere of the projectile and we're going to do the same thing so we're going to try and cast into the a enemy who is a pointer and i'm going to call him enemy and i'm going to say over here cast into the a enemy enemy and i'm casting the other actor and if that succeeds same as with the players so if that succeeds if we do have the enemy meaning that the projectile has collided with the enemy then we're going to say enemy and from here we're going to say deal damage passing the damage value that we already set for the projectile well let me see where it is so where did i set the damage value here it is damage value so i set it here and to be equal to 20. and of course after we destroy the enemy actually after we deal damage to the enemy we're going to call destroy so if it allows me if i can type correctly you know so we are going to call destroy to destroy the projectile so because the projectile when it touches the enemy it deals one time damage and then it is destroyed and removed from the game so control shift b to make sure that this you know compiles and it is you know error free and there you go build has succeeded so we can go back inside of the editor and from here let me just take the enemy and let's see over here do we have here it is the damage value just for the testing purposes i'm going to set the damage roller to 100 so that it deals damage automatically and kills me so as soon as the enemy touches me we are hopefully going to die there you go and bam you see we're dead we are dead if i go here see the enemy doesn't exist actually not that i mean the enemy has fallen down and we don't care about that because we're going to restart the game when we die but the important thing is that our player is dead because you know the enemy's damage value was 100 so we're going to set it back to 5 because it's not you know we cannot play so let's try to kill the enemy there we go and let me just lower my volume so going back over here lowering the volume even more to 10 because i don't care about the volume there you go one two three hopefully i think there you go there you go i i want to say hopefully it will i will kill him soon i didn't count how many shots but since we have the damage value of 20 we need to shot him or shoot him five times in order to kill him and there you go you saw that and i can repeat it just for the you know testing purpose one two three four and fifth bam and there you go the enemy is dead basic math just subtracting from the health inside of the deal damage so for enemy and for the player just subtracting from the hell the damage amount that we pass here when that value gets to zero or lower zero destroy it and that will be pretty much it and over here for the player we're going to restart the game we're not going to kill the player but we will restart the game and we will see how that works and how we're going to you know implement that but at the moment we don't need it starting from the next video we're going to create the ui and display visually the health value of the enemy and the player and from there we're going to proceed and wrap up our game if something's not clear ask down below i will ignore and just kidding i will answer and i will help you out and i will see you guys in the next video whoa whoa whoa what it is now moving forward what we are going to do inside of the blueprints this is where i'm going to add the ui i'm not going to create separate folders because you know we're only going to have one ui widget so i'm going to right click in user interface and we're going to create a widget blueprint now i'm going to call it bp underscore ui and this is going to hold so i'm going to double click it and this ui is going to hold the player health and it is also going to hold the timer so first things first i'm going to take the text and put it over here which is going to be the timer the anchor is going to be at the bottom middle so the x position is going to be minus 2 48 32 on the y position i think yeah that is pretty much it size x 5 2 2 size y 1 4 2 there we go over here i'm simply going to write not text block but time call on and zero this is it for now now i can of course go over here for the font rubato and size is going to be 55 there you go is it 55 or 85 yeah 85 because 55 is very small and probably we are also going to align it in the center and that would be it when it comes to the time so next what i'm going to do is take another text and position it here at the bottom and this text i am going to set the anchor at the bottom left corner and for this text i'm going to set the position x to 28 position y to negative 181 the size x is going to be 4 3 7 and the size y is going to be 73 over here we are going to instead of text block we are going to say player health there you go the font size is going to be 54 and i believe that would be it so next step is to take the progress bar and the progress bar is also going to have the anchor at the bottom left corner the position x for the progress bar is going to be 28 the position y is going to be minus 89 i'm going to set the size of the progress bar on the x to 477 and 60 on the y and that would be it and over here you can fill it out but for the color i am going to choose let's go over here something like this red color and i'm going to click ok and there you go that would be pretty much it so safe so now how can we display players health if you remember inside of our player health let me just go over here i set the health value to be blueprint read only which means that we can read it from the blueprint but in order for us to do that we need to get a reference to it so let's quickly go inside of our widget back and over here on the graph i'm going to set this event construct so i'm going to leave that this i'm going to remove tick i'm going to remove so what i'm going to do here for the event construct i am going to right click over here and i'm going to get the player character so this is the one that i want and from here i'm going to cast to bp monster shooter character to the blueprint that our character is using and i'm going to cast the player character this bad boy over here so when the cast succeeds from here i'm going to promote that to a variable which is going to give me a reference to the player character so i'm simply going to call this one monster shooter character ref ref is short for reference this is my own you know naming convention or however you know you can call it or what not anyways this is how we are going to get the reference of the player so now that we have the reference of the player i can click on the progress bar and over here we already know that for the percentage we can click on this bind so i can bind and i can create a new binding or from here i can also just try to find the health but i'm going to do it like this go over here and i am going to call this one display so display player health there you go and for this one what we are going to do is getting the reference of the player character and the next from here i am going to drag a note and i'm going to get the health so here is our health and what i also need to do is divide the health by the float as you can see and that value is going to be 100 and then plug it in over here why am i dividing the health value by 100 well it's very simple because over here the percentage so the percent value of the slider goes from 0.0 as you can see up to 1.0 so if the health of the player is for example 90 currently so it has 90 we dealt damage or you know we were damaged when we divide 90 by 100 that's 0.9 so that means over here if i set it to 0.9 you see this is how the health will be displayed and we can test that out so i'm simply going to put it back to 1 and compile and save but first things first i'm going to remove this and remove this there is one more thing that we need to do i'm like steve jobs but there is one more thing we need to go inside of the bp so our game mode and inside of our event begin play we need to create that widget so from here i need to say create widget here it is and the widget that we want to create is the bp ui and after we create the widget from here we need to drag a node and we need to add to viewport so add the widget to the viewport if we don't do this then the widget that we have just created which is this one over here it will not be displayed in our game at all so now if i go back over here and hit the play button we will see there you go the widget is being you know displayed and when the enemy starts chasing me and when he comes close look at the health value so help look at that so there you go health value he dealt damage a little bit we can probably there you go he needs to get too close so what i'm going to do is go here into the enemy since the enemy needs to get too close i'm going to just move the damage collision just a little bit in front of the enemy so the enemy doesn't have to get that close to the player to deal damage of course this is your own preference if you want to you know move it a little bit further or you know put it close that is up to you if i hit the play button let's try it out again so now what the enemy gets look at that so now he's dealing damage and you can see i'm running away and he's dealing damage and all of that stuff and yada yada yata anyways you get the point if something is not clear when it comes to this and what we did inside of this blueprint well basically over here for our health make sure that you ask otherwise if you don't have any questions good for you you have learned how to create games now go go and create your own grand theft auto go my pupil i cannot wait to see it and i will see you guys in the next video moving forward now that we are displaying players help let us also display the countdown timer so essentially what's going to happen here is inside of our dot h for the monster shooter game mode right below the generated body we are going to have a few variables one is going to be public and functions as well so first one is going to be public this is going to be void restart so re restart game play which will take a boolean one to determine if we want or if we have lost we are also going to have a private function and this one is going to be void resets level like that next we are going to have another public and this one is going to be a variable so it's going to be u property and this u property is going to be blueprint read only so we will be able to read it inside of our blueprint and it's going to be our integer timer count by default i'm going to set that value to be 300 below we are also going to have private variables and this one is going to be f timer handle and i'm going to call this one countdown timer handle and that's going to be equal to f timer handle like that we're also going to have a void countdown timer function and last but not least we are going to have a public overriding the begin play so we're going to say void begin play over right there you go so these are the functionalities that we have one for restarting the game resetting the level and all of that stuff so what i'm going to do is go here quick actions and refactoring you know that stuff create you know definition and all of that while i'm doing this finally i'm going to take your five dollars i don't know what this is don't give me your five dollars okay just you know quit watching this video and then unsubscribe from the channel just kidding be subscribed and give me your five bucks man anyways here you go so we created everything and if we go over here i'm just going to move the begin play at the top because this is i simply love the begin play to be at the top i know it sounds weird but you know that's my favorite pose anyways so include kismet gameplay statics over here we have the begin play i'm quickly going to call the super begin play there you go and what's gonna happen over here is that we are going to get the world timer manager so get world timer get world timer manager and from him we are going to set the timer and this is going to be the countdown timer handle because we need to use the handle to know which timer we are setting inside of this and what is the function that we want to be called well we want this one over here the countdown timer so over here i'm going to say and sign passing the countdown timer i'm going to call it after one second and i am going to set it to repeat forever after every second so essentially what is this well this is going to call the world timer manager to set the timer basically this is like a coroutine inside of unity and this is how we know which timer handle we have started so when we want to cancel it we're going to call this timer handle over here to cancel it this is the function that i want to be called which is the countdown timer call it after one second and then call it true meaning forever so call it forever after every single second so first call it after one second then after every single second and that is going to last forever ever ever ever ever and what's gonna happen in the countdown timer well in the countdown timer we are and i think i forgot to restart gameplay i believe did i create the definition i did but where is it begin play reset level countdown timer where is the restart gameplay void for whatever reason create definition the variation cannot be complete following the selected text does not contain function signature what we will create it right now so i'm simply going to copy it and go over here we have the reset level and we are also going to have here avoid a monster shooter game mode column call on restart gameplay and over here i'm going to say bull one as the parameter for whatever reason i don't know why you saw it was not you know giving me that anyways what's gonna happen in the countdown timer is that we are going to say timer count subtract from that minus minus and if our timer count gets to the point where it is equal to zero then we are going to call the get world timer manager and from here we are going to clear the timer and now we are going to pass the countdown timer handle because he is the one who is responsible essentially he is the one who is responsible for for keeping up with the timer handle and canceling the timer handle when there is a need you know to cancel it basically so that's all there is to it so if you want to cancel the timer handle you need to have the timer handle that you started which is our countdown timer handle when we want to cancel it so it will not run anymore then simply call on the world timer manager clear timer and simply count down timer handle and there you go so the name of the handle and it's going to start or or stop counting next i'm going to call restart level so not the game but restart level this is the one that i want there you go or reset level excuse me i said restart but reset here the reset level is very simple we are going to have you game play statics and from here we're going to call open level passing the world and passing the name of the level which is gameplay we still didn't create that level so we will create it very soon and well when that happens we are going to reload that you know gameplay and it's simple as that now just so actually right now i'm going to do it right now i'm going to create it because i don't want to forget about it so over here i can create a new folder for maps and let's go quickly over here file and new level this is the one with the default here is where i'm going to you know add the player and enemy so i just need to call it gameplay and there you go so from here let me go into the blueprints this is the enemy i don't care this is very small we don't care about that here we have the monster shooter character the or actually we don't need the monster shooter character here we just need the player start which is going to be over here of course after this we are going to start creating our level don't worry about that let me just hit the play button and there you go this runs this is just for testing purposes so that you know the code that we have here calling the gameplay if it doesn't exist we will have problems and all that stuff here when it comes to restarting the game we are going to test if we won so did we win the game if we well win the game we are simply going to call here reset level there you go else if we didn't win the game then we're going to call our f timer handle that i'm going to call timer handle like that or restart timer handle get world timer manager from here we're going to set the timer timer handle and we're going to call it inside of this and this is the function that we are going to call reset level so this one over here so i'm going to copy it add the and sign this is the name of the function and i'm going to call it after three seconds so basically if we want we're going to restart the level immediately if we didn't win we lost so if one is false and we're going to denote that over here so if one is false then we are going to reset the level after three seconds and that is going to be pretty much it now while i am at it over here inside the monster character cpp let me just see if everything is yes everything is imported here at the top so over here when we die look at that so restart game when we die i'm simply going to get a reference to the game mode and do i have over here my game mode monster shutter game mode yes i have so i have my game mode because inside of the game mode is this function to restart you know the the game simple as that so over here i'm simply going to say a monster shooter game mode and it's a pointer so i'm going to say my game mode and that's going to be equal to from here cast and i'm going to cast a into the a monster shooter game mode and who am i casting from you gameplay statics i am going to get the game mode like that but we also need to pass here the world so get the world and there you go so now we are trying to get the game mode if we do have the game mode so if my game mode so we got a reference to the game mode we are going to simply say my game mode restart game play that is so restart gameplay and passing here false why passing false well passing falls because we died you see over here if we get killed then you know we simply need to restart the game we died and that's pretty much it so after three seconds we are going to you know restart the game so let me just compile this so ctrl shift b we need to compile this and the reason why we need to compile it because now going back inside of our blueprints there you go everything has succeeded we are the best coders in the world so now we can go inside of our gameplay and we can test it out so we can see right away if the enemy can kill us so let me just go here for the enemy and set the value 100 for the damage just so that we can see that the enemy can kill us right away and when it does okay i have shot when it does bam look at that it's going to restart the game and voila there you go the game has been restarted if i you know you see this whatever this is well over here if we take a look at it's trying to get the display held for the player and all of that stuff we can fix this and we destroy the player it's trying to access the player to display the help but we destroyed the player we can fix this by going over here in the player bpui and before we actually display the health what we can do is we can break this pin and over here we can test is valid so it will test if the game object or actually the actor in this case if it's valid and if that is the case then we are going to display that health value otherwise we will not do that so this is one of the ways how we can protect ourselves basically the character has been destroyed it's trying to access a character or an actor that has been destroyed it doesn't have access to a destroyed actor so that's why we saw that problem so if we try that right now and if the enemy kills us there you go we are dead the game will restart there you go if i you know turn it off now we don't have that problem that is pretty much it now over here for the damage value i'm going to set that to 5 back for the enemy and what we need to do is display the countdown timer because inside of our you know if you remember in the game mode over here we are start starting the countdown but we need to display that in order to display it it's very simple over here in the ui in the event graph after we get a reference to the you know player we need to right click over here we need to say get game mode and we are going to cast to bp monster shooter game mode and who are we casting well we are casting the game mode that we got over here so returns the current game mode base null if it cannot be retrieved but if it can retrieve it it will return it so we're going to try and cast that one into the monster shooter game mode and if that succeeds i'm simply going to promote it into a variable and from here i'm simply going to see monster shooter game mode ref so this is the monster shooter game mode reference and over here inside of our designer for the time i am going to bind over here so i'm going to create the binding and this binding i am going to call display countdown timer or display yeah time countdown actually so time count down and what's going to happen over here is that i am going to get the game mode so the reference that we have for the game mode here it is from the reference i'm going to get the timer count so timer count because we set inside of our class over here that we can get a reference to it so it is blueprint read only so now what we can do is i can create here a string so i can say here append and this is for the string not for the array but for the string and i'm going to say here time and then call on and then space and i'm going to append the timer count over here and all of that i'm going to put over here inside of this returning node for the time so what this is going to do it's going to create a string time then colon then space then it is going to append to it the value of the timer count and that whole value is going to be put over here inside of that text so that text is going to be like this time call on space and the value of the timer and we can simply test that out if i hit the play button look at that 300 299 297 so on and so forth and all of that stuff when it comes down to zero i'm not going to wait for five minutes for that but when it comes down to zero we are going to die and restart the game and all of that stuff if something is not clear when it comes to this lecture make sure that you ask in the comments down below i don't know what this was and yeah i will see you guys in the next video what up game dev shooters so now we are going to create the health ui for the enemy because we have one for the player why shouldn't we have one for the enemy so i'm going to right click user interface and widget blueprint and this one is going to be bp enemy underscore health there you go you can add ui if you want to i'm not going to add i'm going to add here a progress bar and i'm going to set his anchor at the center so i'm also going to set the position of this progress bar so for the x position it is going to be minus 650 and the y actually minus not plus it set it on the plus so minus 650 and over here the position y is going to be minus 100 or actually 72 so minus 72 over here the size is going to be one two let's say one two two two there you go or one two two zero to one thousand two hundred and twenty there you go over here 136 for the size y i am also going to change here the color to the red color so something like this and let's go over here fill out this fill out the the progress bar i'm also going to rename the progress bar to i don't know health progress bar something like that and you need to make sure that this check box over here it's checked so is variable that's neat this right here needs to be checked so make sure by default it is for the progress bar but if it's not for whatever reason make sure that you check it so now we can go inside of the enemy blueprint and we can go here under add component and we can filter for the widget and yes we can also attach these widgets as components on our actors so this one is going to be the enemy health so enemy health there you go and compile and save and if i go here we don't see it i mean we do it's here but it's empty but if i go here in the user interface and widget class and if i click here to select the widget class and i select the enemy one there you go it's right there so what do we need to do in order well to make this work we need to resize it first of course so size or the position z is going to be 134 the size x is going to be 0.4 actually the scale x 0.4 scale y 0.5 and scale z point 16. so this is going to be the health progress bar for the enemy now we need to get a reference to this so that we can use it and display the health value of the enemy when the enemy you know is dealt with damage so we can get here now you would think that you can do something like this get the enemy health from here and from here get the progress bar or health progress bar let me just try to find it health progress bar you cannot find it even though over here if you go in the bp enemy health you see that we have the health progress bar so what's the issue well the issue is that we first need to cast this so we need to say over here this enemy held goes here and from it we need to get the user widget so here it is we need to get the user widget and we need to cast to bp enemy health so now the widget and this user widget is basically the widget this one right here the widget class so that's the user widget and we're casting that to enemy health and when the cast succeeds we are going to promote it into a variable which is this one right here and we can rename this variable so not as bp enemy held but instead i'm going to say enemy health ui ref so reference to the enemy ui and then from here i am going to get that reference and from there i can get the held progress bar and there you go so now we have the health progress bar and we can set the percentage so set percent and this goes so tick goes here and we're going to check that every single frame to set the percent if we lose any health and we are going to right click over here and get health and if you remember inside of our class if i go here we see that we have our health as a u property that is blueprint read which means the blueprints can read this value and that is the reason why i can get it over here but we know that the percentage here goes from 0.0 up to 1.0 so we need to divide this by float and that float value is going to be 100 and then we're going to plug this in so now we can simply compile and save this and again because the percentage goes from 0.0 up to 1.0 we need to divide this value by 100 this is in case if the health value goes maximally up to 100 because now if the health is 100 and we divide that by 100 we're going to set the value here for the percent to 1. if it's 90 90 divided by 100 is 0.9 and you get the point so now i can go over here and i can save everything hit the play button and we are going to see now that we have the enemy the enemy has the health bar and there you go you see when we you know shoot the enemy look at that the health bar is you know displaying and there you go and we you know kill the enemy there you go this is it's this simple to create a health bar in unreal engine now for if you don't see the health bar being like this we don't see it for a reason i'm not going to cover that i covered it i believe in one of the previous mini courses but that is your assignment find a way to make sure that this health bar is always rotated towards the player so that we can see it that is the way how you can see this so make sure it is rotated towards the player and that can be easily done by getting the player rotation calculating you know the direction all of that stuff google it it will be your practice if something else is not clear in this video make sure that you ask and i will see you guys in the next one the before last step is to create a door that is going to serve as you know the winning door so over here i'm going to right click and create a new c sharp script that c c plus plus what am i talking about inherits from the actor and over here we're going to call it door very creative i'm the most creative person in the world nobody can top my creativity and i'm just talking like this because we see that it takes a little bit of time for unreal engine to do its thing so i'm going to sing and said you owe me 50 bucks for this one it's not five anymore i'm not i'm not singing cheaply anymore so i want 50. my paypal is in the link down below send me 50 bucks for this song hopefully this is going to work eventually so i'm going to probably pause the video over here and wait until this compiled thank you finally so let's go in the you know see in the visual studio and here it is we have our door so what's going to happen over here below our tick is that we are going to create a few variables so one is going to be a u property edit anywhere and this is going to be our class u static mesh component component and it's a pointer and it's capital s there you go it's a pointer i'm going to call it door mesh that you know this is going to represent the door also you property this one is going to be added anywhere and over here class u box component component and this one is going to be the collision component or basically we are when we touch this box then we are going to you know detect collision with the player and there you go and over here we have our on hit you can just copy and paste this from the player from the projectile so over here just go and copy and paste this it's the same function basically we do this over and over again because that's the only way how we can detect collision between objects or actors so there you go so just copy it and over here the first thing that we are going to do at the top of the door is import or include all components so make sure that you include all of these components and then we can continue pause the video include these and now inside of here so inside of the constructor we are going to create the door mesh so that's going to be equal to create default sub object of you static mesh component and we're going to give it a name over here with the text so the text is going to say mesh or you know whatever you want to call it our root component is going to be the door mesh we are also going to set the collision component or create it so create default sub object actually it's this right here so create and the sub object is going to be you box component and text over here give it a name so the name is going to be collision component so component there you go but just with the space over here so why not and over here i need to add it inside of a parenthesis next i'm going to attach this collision component so i'm going to say collision component set up attachment and i'm going to attach it on the door mesh there you go and there is one other thing that we need to do but it's going to be here in begin play we are going to take the collision component and on component begin overlap dot add dynamic not internal dynamic dynamic like this inside so this and from there oh actually i did not create this so i need to go here right click and create the declaration as we just saw and take it from here and add the and sign and there you go so this is basically everything we need to do inside of our on hit we're simply going to test if we collide with the player so we're going to test a monster character shooter or shooter character this is going to be the char we are going to say if that is equal to casting into the a monster character shooter or monster shooter character casting the other actor if this succeeds and we have the char char if we have the well char character so if this succeeds we have the character what we are going to do is we are going to get the game mode so we're going to say a monster shooter game mode which you know is a pointer and i'm going to call it my game mode and i'm going to cast the so i'm going to say cast into a monster shooter game mode and i'm casting getting from the game play so gameplay statics get game mode passing here get the world as the parameter and i need to close the parentheses one more time this is not the first time we did this so we are getting the game mode from the gameplay statics and if we have the game mode if my game mode so the cast was successful this worked we're simply going to say my game mode and from here restart game or actually restart game play passing through because we won so when we win we are going to pass through over here we talked about this we saw this in action ctrl shift b so that we can make sure that we don't have any oopsies but these are basic things so we're just detecting collision with the player if you know we collide with the player then we are going to simply restart the game nothing complicated for this game of course you can add more things if you want to but that would be it i have plenty other tutorials where you can see i don't know whatever you want to add more components more logic or whatever so over here i'm going to create a new blueprint class that's going to inherit from the door and i'm going to call it bp door i know creative i cannot be more creative than this i i really can't so for the door mesh over here just filter for the door and there you go sm door this is the one that we want and for the door it's going to stay as is but i'm going to take the collision component from the door and the collision component i'm going to set the x at minus 18 y is minus 48 z 102. and from there i'm also going to set here the box extent x to 15. the y is going to be 45 and the z is going to be 100 and that's basically it so compile and save and we can just take the door now place it here and this is where we need to touch so when we touch here we should restart the game and let's test that out so when i get here there you go i've restarted the game and everything works again there you go i'm traveling through time shooting this bad boy and there you go look at that so yeah and you see that the timer restarts every single time look at that so now it's at 300 again and that would be it of course you can and i have mini courses for that published before this one so you can look that up and you can add some you know sign you won congratulations blah blah blah stuff like that do you want to play again again add buttons yes no and so on and so forth you get the point if something was not clear what we did in this video make sure that you ask and the last step is to create the level and put this put this door at the last you know part of the level where we need to get after passing all through all of the enemies and stuff like that in order to win so i will see you in the next video when we create that now when it comes to the level design for this particular game what you can do is take the simple box brush and then position them to form a level i don't want to stall and gain time on this mini course and this course is five hours or whatnot and creating the level is you know last 20 30 minutes because these are all basic things what i did is over here in the geometry i just took this box and then simply you know resized it so if i go over here first delete this box if i go here into the level folder and area one if i take the first floor and i simply deactivated see it's simple box brush that's resized that's all there is to it this is the first wall that's also a box brush that's resized and it will take a lot of time for you to watch me create all of this and basically what i would do is only change here the locations location here location here change the scale or actually change here the brush settings for x y and z that's everything literally everything what i would do and of course attach a material as you can see we have this material and that's all there is to it so you can see we have a hall that we can pass and over here another hall that we can pass and over here you can see the third hole and there you go this is the door where we win the game when we pass the door of course on this whole level you are going to create these enemies i only have one as an example but of course you can duplicate it just hold you know control and then you know duplicate it there is another enemy position this enemy here then position another enemy here maybe you can spice things up by adding here so you can search for a cube maybe add a few cubes here in your level resize them of course jus use them as shields to hide from the enemies that can be your assignment or you can download this complete project link will be down below in the description depending on you know where you're watching this on youtube it's you know in description of video on my website it's right below the first video i believe so you can download this complete project where you can exactly see the whole position of these box brushes and you can copy this but i highly encourage you to create a level on your own and if you're on my website watching this make sure that you post down below to see for us to see me and the people who are in the course so that we can see the level that you have created because i you know it's not the point of this course is not just for you to copy paste what i'm doing the point is for you to learn so yeah you can do that and i highly encourage that and i didn't want to waste your time by you watching me you know just positioning all of these because you will not learn anything basically there is nothing to learn by you know watching me positioning these cubes left and right and resizing them and so on and so forth there is nothing to learn there so that would be it thank you for watching this tutorial series and i hope that you enjoyed because i enjoy creating these and i will see you in the next tutorial series take care