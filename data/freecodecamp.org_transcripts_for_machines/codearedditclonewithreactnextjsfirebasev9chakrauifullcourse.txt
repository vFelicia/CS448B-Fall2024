learn how to create a fully functional Reddit clone with react Firebase nexjs and chakra UI Shadi originally created this as a playlist and he has combined everything into one course for our channel here are a few of the things people have said about the course get ready for what may be the best and most comprehensive Reddit clone course anywhere what is up everyone my name is Shady and today we're going to be building a Reddit clone with nexjs Firebase v9 recoil which is a state management library for react that I love and Shopper UI which is an amazing react UI Library that's going to help us out a lot with our CSS I'm going to do a demo in about 30 seconds of what it is exactly that we're going to be building and I'm super excited about this project because we are going to get to cover so many things in depth and we're going to build a ton of full stack features front to back that are going to really allow us to explore all the technologies that we're using for this build so on the front end with Nexus and react we want to look at things like serverside rendering using the nexjs router for clientside routing building our own custom react hooks using pretty much all of the hooks that react has to offer and overall just frontend architecture with react and then more on the back end with Firebase we're going to get you covered pretty much the entire Firebase v9 landscape everything from authentication to the firestore database we're going to look at how to to use realtime data to implement realtime features with the cloud firestore database we're going to look at Cloud functions Firebase storage we're going to store images security rules database transactions and batch rights which if you don't know what that is don't worry I'll explain it when we get to it and overall modeling data with a nosql database which is what cloud firestore is and this entire thing is going to be written in typescript as well which I think is super worth it for you to learn and it's going to make your code a lot more robust as we're going to see so there is lots to learn here my aim with this project was to include enough things and go in depth into enough things for you to actually take all the stuff and apply it into your own project so you can build pretty much whatever you want with react next year as Firebase or whatever all right so here is exactly what we're going to build for those of you that are familiar with redis you can tell that this looks pretty much exactly the same as the real product I spent a lot of time trying to make it look pretty much identical and so pretty much everything from the layout of all of the pages to the drop down menus to the font sizes and everything everything is designed to look and feel exactly like the real product and I'm super excited to show you how to build this so here is the home page as you can see we have this feed that's showing a bunch of posts from a bunch of different communities this user that I have logged in right now for the demo has not joined any communities yet so it's just post from a bunch of random communities and then on the right hand side we have some other UI elements and we have like things of community recommendations so right now it's showing the top communities which are just ranked by a number of members within those communities and this design is completely responsive as well so it works beautifully on mobile so you're going to learn a lot about responsive design and just overall how to build up pretty much any UI you would like in both desktop and mobile I'm just going to log out because I want to log back in in a second so if I wanted to join one of these communities I would of course have to be signed in and this modal is accessible through the navbar as well so let's talk about authentication we're going to cover the entire authentication flow offered by Firebase v9 we're going to learn how to authenticate users with thirdparty oauth providers like Google and any other ones you might wish like Twitter Facebook GitHub anything you'd like anything that's offered by Firebase and also looking at how to sign in and sign up with email or password or also going to look at password resetting as well so the entire authentication flow is going to be covered for you so you can apply it in your own projects all right cool so I'm just going to sign back in to that user account that I created for myself so now that I'm signed in I can actually join any communities that I may find interesting so I can join as many as I would like and then they would show up actually inside of this little drop down here which represents my communities and I can access them directly from here I want to talk about this Korea Community thing in a little bit and this drop down is the exact same as Reddit has it and then I can also leave communities right from within the side panel if I didn't actually want to join them and then I can actually view the communities directly from here as well so let's go into Tesla Motors and I can view all of the posts inside of this community I can see the number of members in here when it was created and all of this stuff related to the community and I can actually join and leave the community right from inside of here as well which is pretty cool and I'm going to touch on the creation of posts in just a short while all right so looking more closely at the post now I can see the vote status so how many upvotes or downloads this thing has how many comments it has the user who created this post when it was posted what community is posted in I can like this post or upload it I can download it I'm going to upload this one and then we can also view posts in a single page view all right so this post is from Elon Musk and he somehow has found a time between Tesla and SpaceX to pick up baking and he's posted about it here and they look pretty unreal to be honest and then I can scroll down to the comment section and I can see all of the comments on this post who commented on it when it was commented and I can also leave a comment myself so let's leave a comment for Elon because he is clearly really good at baking I'm gonna say hey Elon nice cupcakes smiley face click comment and I can leave a comment their form and I can delete it and do whatever I want with it alright cool let's now talk about the actual creation of posts because that's probably the most critical part of reddit's functionality so let's just go into a random Community we can go into Tesla and we can just go into create post and we can just create a post that's called my first post in all caps and if you will say hey everyone this is my first post with a bunch of exclamation points to show how excited we are and then we can actually post an image along with it as well so let's just select this one here and this has absolutely nothing to do with Tesla but maybe I'm on the Tesla engineering team and I'm working on the latest full selfdriving software so then I can go back to the text inputs of the post and I can click post and then it will take me back to the Tesla Community page where I can actually see my post which is pretty cool and I can view it in that same single page view as well and there are no comments yet uh so I'm gonna give myself an upvote because why not and I can actually delete the post as well so let's delete this because it's not really related to Tesla and I'm actually just going to rejoin this community because I did leave before so yeah on Reddit you don't actually have to join a community to post in it so I built ours the exact same way all right cool so let's go talk about how we can actually create our own communities now so if I go to the drop down menu uh we saw this before we can see that our communities are in here but then I said that there was an option to create our own communities so if I click on this this model pops up that will ask us for the name of our community and also the community types of public restricted or private this is the exact same flow as Reddit so let's create a community called chatties community Credit Community it will be created and we are automatically joined into that Community because we created it so that kind of makes sense and we're also added as a moderator of that Community uh so which basically just means we're an admin so now inside of this community I can pretty much do everything the same as I can in other communities and create posts comment on posts Etc and I can also change the image of this community because I am an admin so let's let's test that out let's see what that looks like so click on this Google logo because it has this nice circular shape to it which fits the shape of this so if I click save changes that image is actually going to be uploaded to our cloud firestore storage database and that's going to update our community image which is super cool all right cool so let's actually get into the build now obviously we cannot build every single feature that Reddit has because this tutorial would be insanely long so I want to focus a lot on the core functionality of Reddit if there are any specific features of Reddit that you would like to see please let me know in the comments and I can potentially cover that in a future video as I mentioned before we're going to cover a lot of Concepts there is so much to learn I'm super excited to build this with you and I'm going to be building it completely from scratch so if you have any concerns at any point throughout the video just leave a comment with like the timestamp and I will 100 reply to the comments other than that I think we are good to go I hope you really enjoy this tutorial let's get going all right everybody Welcome to the tutorial we're going to get going with the build now so on the left I just have a terminal open to the folder that I'm going to place our new project in feel free to place it yours wherever you would like and once you have my code open on the left once we create the new project in just a second and during the early stages of this build and especially for this first part our Pace might be a tad bit slower than for most of the projects since we are going to come across a lot of new things for the very first time such as working with chakra recoil and also typescript and I want to make sure that you all have a really strong fundamental understanding of all of these tools so that the entire build makes complete sense and you can get as much out of it as possible so I will spend a bit more time explaining things in more detail the first time around but do know that after getting our first few reps in with each of these things the pace will be quite a bit faster in future Parts okay so what we're going to do is start off by just creating a brand new Next genius application we're going to Google create next app and go to the next shift docs and grab this command here which is the command for creating a brand new texture project with this TS flag so I'm going to paste this in my terminal and I'm also going to add the folder name that I'm going to place this project into and I'm just going to let that install and once it's done I will open it up in vs code it may take a few seconds for you perfect now once that's done what we can do is just CD into that directory and then I'm just going to open it up in vs code and I'm going to spin up the development server so we can see the newly created app that we just made so get this set up on the left and let's now run the development server by just running npm run Dev that's going to spin our app up on localhost 3000 so let's go to that and here is our brand new app I'll open up the console as well I just put it on the bottom so we can see any errors in our console logs that we may add in the future cool so this is a Bare Bones next.js project the files that we're going to be interested in right now are going to be this app.tsx and index.tsx so app.tsx essentially represents our entire application and every page and every component that we create is going to be a child of this component and index.tsx is everything that's being rendered on the screen here it represents our index route or home page and the way clientside routing Works in xjs is that every file added inside of this Pages folder is going to be added to our routes so for example if I have a file named blog.tsx I would be able to go to a route localhost 3000 slash blog and we can create nested routes as well with folders and this will make a lot more sense when we start building out some of our Pages all right so we're not going to need any of this so I'm just going to remove this entire div here and I'm going to just add an empty div that says hello and we can see that on the right so now let's go install chakra UI and get it set up with our app so I'm going to go just search for our chakra UI and if I just go to the very first thing chocolatey.com and go to get started they have a bunch of choices for Frameworks that you can use so we're just going to click on next.js because that's what we're using and there are a few packages that we're going to need to install so the chakra and a few dependencies that they have so I'm just going to copy this command here come over to our terminal throw that in there and I'm also going to at the same time install Firebase as well as recoil because these sort of represent our core packages that we're going to be using so let's go ahead and install these it might take a few seconds for you awesome so when that's done what we can do is come over to our app.tsx and we're going to need to wrap our application in what's called a chakra provider if you just scroll down a bit on this installation page you can see that that's exactly what they're doing here so this is pretty much exactly the same thing that we're going to do so we're going to come over here and I'm going to take this component and wrap it in that chakra provider which should just automatically import for me if it does not just import it from Chakra UI react and just paste the component in there and this just ensures that we have access to chakra throughout our entire application all right so one quick note is something that you might notice depending on the time that you watch this is that you might see this error in your console and this is basically just saying that chakra UI has not yet released updates to be completely up to date with react 18 react 18 was just released I think a few weeks ago it's super brand new and so depending on when you watch this you may or may not see this I did do some research on this and I found that there is an open issue in the shock or UI GitHub and there's a whole conversation thread in here regarding this but basically one of the core maintainers said that they are working on a solution to react 18 however it will take a few days and this was just posted four days ago so again depending on when you watch this you may or may not see this if you do see it do not worry it can just be ignored it's not a huge deal I just want you briefly mention it in case you were concerned alright so what I'm going to do is just make some brief adjustments to our folder structure here in the root of our project I'm just going to create a folder called source and I'm going to put Pages as well as Styles into that Source folder and this is a common practice to do it's just a preference of mine I prefer to keep everything that we're going to write inside of a folder called Source it just makes sense to me and this is a common practice A lot of people do this and nexjs even has an entire page on their docs explaining how to use a source folder it will break initially but all we need to do is just recompile our development server and next.js knows to look for that Source folder and it will just rebuild itself to work with that folder all right perfect so now we are ready to create our chakra UI theme and pass that to our shortcut provider as a prop and since chakra is going to be handling all of our styling for this build we actually don't even need this Styles folder so we can just completely delete it and our app should function exactly the same we we are not going to have any Styles provided by CSS everything's going to be handled by chakra all right so let's create our chakra theme so I'm just going to go to the chakra UI theme docs if you go to customize theme here we're basically going to do exactly this create a theme which is just represented by a JavaScript object with the help of this extend theme Hook from Chakra UI and we're going to pass it as a prop to our provider and we are going to have access to all of these Styles throughout our app so themes basically contain styles that are going to be present throughout our entire application like brand colors and fonts and also styling for common components like buttons and this just ensures that your app looks nice and consistent from a UI and styling perspective okay so inside of our source folder I'm going to create a new folder called chakra and inside of that folder I'm going to create a file called theme dot typescript now I'm going to come over here and copy this from the chakra docs and I'm also going to add an export to the theme variable here because you're going to need to import it in app.tsx so let's go and do that so import ant theme from Chakra theme and then let's pass that theme to our chakra provider just exactly what they're doing over here okay so let's go to our theme and inside of here I'm going to make our main color the actual Reddit orange and that's going to be represented by brand 100 so every time we want to access the Reddit color throughout our app which is going to be a decent amount we can just access it by using brand.100 and that will make more sense once we start using it it's very very simple though so the actual hex code for the real Reddit orange is ff3c00 so that is the actual hex code for the Reddit brand color all right I'm inside of this theme we're going to also add the font that we're going to be using and our entire body is going to be using the font Open Sands with a fallback of sans serif and what we need to do in order to use open Sans is to actually install it chakra makes that extremely easy if you just search for shocker UI fonts you can go to using fonts and the example in their docs actually uses open sense so that is perfect and they use a package called font source so let's just grab that and go to our app and install it so once that's done all we need to do is import it into our theme file just like they're doing over here so we're going to come over here and we're going to do import at font source and open sand and we should see our app change to that font it might not be noticeable right now and this font is extremely close to the real readathon and we're just going to actually import a few different weights of this font so that we have light regular and heavy so that we can bold things so I'm going to have 300. CSS I think that they have to use the CSS extension yep and we are going to also grab 400 and 700. all right once that is done you'll notice that if you go to reddit.com they have the sort of gray background throughout the entire app it's present everywhere so what we're going to do is add that as well and the way to do that in our app is to change the global styling of our entire body so the way to do that we're going to pass in a key called Styles and inside of here we're going to pass a key called global and we're going to give this a callback function which is going to contain the key body which is going to have BG for background and we're going to say gray 200 perfect and if you're wondering what this gray.200 thing is if you just go to shocker UI theme inside of the default theme you can see all of the colors that they have available there are so many of them there's a lot of really nice colors in here and uh yeah this this library is honestly amazing you're going to see as we get more and more into the build why I love chakra so much and why I probably never use anything else and it makes it styling and making things look really good super easy all right so one last thing that we're going to just add in here that we're going to come back to in a bit is this key called components and a component is basically any UI component offered by chakra so for example buttons and inputs and Etc everything that's in here you can add Global styling tubes but it appears very consistent throughout your app so for example a button we can add styles for the button that single time and just reuse them throughout our app and we can even create variants and stuff for our buttons and we're going to see this when we create our nav bar buttons here you can see that there's an outline variant and a filled variant we're going to create those in a bit but how that would look would you be basically just pass in the button component and I will come back to this very shortly when we get to the buttons in the nav bar I think we can now start actually working on the layout of the page so we're going to do is create a nexjs layout and if you go to the layout Docs basically we're going to create the exact same thing as this and this represents the literal layout of our entire app and we can put components in here that we want present on every single page like the navbar without this layout component we would have to add the nav bar to every single one of our Pages that's just how nexjs works and we are going to wrap our entire application in this layout component and that is where the children prop is going to come from all right so I just took a little break and I also briefly added a remote GitHub repository to my projects so that I can put it in the description for you guys so if you do need to reference the code at all it is available on GitHub link is in the description all right so now let's actually build this layer component and get into building the nav bar and actually get into the fun UI stuff so I'm going to create a folder inside of source called components and this is where all of our react components are going to go and inside of components I'm going to create a folder called the layout because we're going to have several different layout components that we created throughout our project now and then inside of layout I'm going to create a file called layout.dsx and before we actually create a command I just briefly want to mention this react typescript snippet vs code extension I highly recommend you to download this it's going to be really useful I'm going to use it a lot and basically we can use little keyboards shortcuts to create skeleton typescript react components and it just makes developing a lot faster so you don't have to write all of this out from scratch and we get all the typescript stuff here just hand it to us out of the box so when we work in typescript with react we create types for each component and these types specify what prompts need to be passed to this component and this ensures that we're passing everything that this component needs to prevent bugs and crashes and this is something that JavaScript does not do so typescript basically just points out these errors to us before we even compile the app to make sure that everything works smoothly and react FC is just the type of a functional component and this just indicates that that is what we are returning out of this function and if this looks foreign to you because your new typescript you do not worry we're going to use this a Time throughout this build and you're going to know it like second major once we're done but yeah highly recommend this extension if you do not have it okay so we're not actually going to need props inside of our layout we're not going to take anything so when we don't need props we can just get rid of it like that and this just basically indicates that we're returning a react functional component that's what we're returning out of this layout function and we're going to do this a lot so we can get rid of this div and instead we're going to return just a react fragment it's going to be very similar to what you see on the right and we're going to take in our children argument which basically represents our entire application in this case and we're going to have a navbar component which we're going to create in just a second and then we're going to put our children inside of our main tag and we're not going to have a footer for this application if you want to create one feel free to do that okay so now let's create a another folder inside of our component folder called navbar because we're going to have a bunch of components inside of our navbar it's going to have a ton of children and inside of navbar let's create our room navbar file I'm going to call it navbar dot TSX now in react it is common practice to name the root file of a folder just index.tsx for this project I'm not going to do that just because it would kind of get confusing if you're looking at my tabs you would just see a bunch of files named index index index index and just to avoid that I'm just going to name the root files the name of their folder I just want to make a quick note on that not a huge deal or anything okay so what I'm going to do is use that snippet again to create our skeleton component and I'm going to remove the props type because we're not going to take in any props to our navbar and I'm going to change this text briefly to just app bar and now that we actually have a navbar defined let's go back to our layout component and just quickly reenable this and a quick keyboard shortcut if you have a component in your file that has not yet been imported you can go to this thing and press command period and this will pop up a little menu and you can automatically import it on Windows I think it would be control period cool so now if we go to our application file and we import that their component and we wrap our application in that component we should then see that navbar actually being displayed there which is pretty cool so we are completely done with this layer file we can just close it we are not going to touch it again for the rest of this build so we can actually start building out navbar now and this is where we're going to get into the nittygritty of chakra UI all right so we can get rid of this div here and we're actually going to build a meaningful navbar and we're going to use this UI component called Flex from Chakra now what Flex is is it's essentially just a div with CSS flexbox already applied to it out of the box and we're going to use this a lot throughout our application so it's super handy and um chakra UI saves us a lot of time writing out flexbox Styles over and over again so let's say I wrote the text in that bar in here you'll see that it appears exactly the same as when it was just a regular div however now the div has CSS Flex blocks applied to it which we're going to need once we start adding more components so now let's talk about styling shock our UI component so the way to do that is we can pass any CSS argument as a prop to any of our chakra UI components so for example let's say I wanted to add a background color of white to our nav bar I can simply do that by just typing BG so let's say I do VG is equal to White and I want to add a border of one pixel solid red that's how easy it is to style things all right cool so now that we actually know how to apply styles to our shortcut UI components let's move forward so I'm going to give this nav bar a height of 44 pixels and a and padding six pixels in 12 pixels if you have not seen this notation for padding before this when you give it two arguments this basically means top bottom right left and what I'm going to do now is create the component for the logos and our logos are going to be um in the top left cool okay so I'm going to actually create these logos now and it's going to consist of two images the reason there is two is because I could not find a single SVG file online that had both this Reddit text and this icon in a single file I was able to find both of them separately though and the way to use external assets and image assets like that is in our public folder we can create a another folder called images and it does actually need to be inside of the public folder that is required by next.js what I'm going to do is I'm going to paste in a bunch of image files and pngs and svgs that we're going to use throughout this build there's only about six of them and I'm just going to paste them in here for you I would recommend just go to the link on GitHub and grab these assets so you don't have to go online and find them and these are just SVG icons that I found online and they all work very well what that's going to look like the way we're going to use these is we're going to have two images and these are chakra UI images not next images and the first one is going to be we're going to go into that images folder I just created and I call this thing Reddit face dot SVG let's go back to our app so that showed up there and the second one is going to be images Reddit text.svg perfect and let's give these let's give this one a height of 30 pixels and this one a height of 46 pixels now you can see that they are a little bit misaligned there and that is where flexbox is going to start to come in handy so if I go to this logo container and uh I give it the Align prop which is short for Align items and I do Center it will Center those items for me cool and we're actually going to add a media query to this second image text or the logo text because you'll see on the real Reddit when we get to a certain screen size like on mobile that Reddit text is not actually visible it's not until we get to the medium screen size is that it's actually visible so I'm going to show you how to write a media query in Chakra so we're pretty much covering all these chakra fundamentals so that everything makes sense throughout the entire app so once we cover this stuff once it'll just go a lot quicker when we get to it again so basically we're going to add a media query to the display CSS property and the way media queries work in Chakra is we apply them to single CSS properties rather than writing a single media query with a bunch of CSS properties like you would in raw CSS we're going to do it property by property and that may sound a little bit like it's more work at first but it's actually not and it's actually really clean and easy we're not going to write that many media queries it's actually quite simple so for our display for our text we're going to make base to be none and base represents Mobile screen sizes because chakra is a mobile first UI Library so mobile screens we do not want this thing to be displayed and then at medium sized screens and up we're going to make it unset and unset is basically just the opposite of display none at Mobile screen sizes it is not visible and once we get to medium it is then visible because we apply it unset and we're going to write a quite a few mini particularly for the navbar it is pretty responsive as you'll see there's a lot going on here in terms of responsiveness so the nav bar is going to have quite a bit of media phrase so we're doing it really good at this cool so I'm going to add the other components that we're going to create in just a second I'm going to comment them out but we're basically going to have the directory which is a drop down menu item a search input and write content cool and write content is basically represented by if I log in quickly it's going to contain those authentication buttons that we are looking at but it's also going to contain all of these icons and stuff and this drop down menu there's a lot going on on the right hand side on the nav bar so I wanted to give it its own parent component hence the write content component all right so now let's start working on our search input so I'm going to go to our app and I'm going to inside of the navbar folder I'm going to create another component called search input dot TSX and I'm going to use our snippet once again and we are eventually going to take in a user here as a prop once we get to authentication I'm going to leave this empty for now all right so let's start developing this component so I'm going to get rid of this div I'm going to instead use our famous Flex component and we're going to use this so many times all right so I'm going to leave The Styling for this blank right now we're going to come back and add some stuff later once we have some more of this input built and the first component we're going to add in here is called an input group so if you want to go to the chakra UI input Docs foreign we're basically going to have a something similar to this here we're going to have an input with an icon and chakra makes that super easy they have I believe what's called at elements inside the input so this is exactly what we're going to do so I'm just going to copy this input group here and I'm going to paste it over here and again I'm going to use that Auto Import thing that I used before command period And this is this is amazing watch this so I before I showed you how to do it with a single component but now look I can do it with add all missing Imports and that is just unreal so you'll notice that these did not import and you may be wondering why and that is because they are coming from a different library that we're going to have to install which is chakra UI icons so what we're going to do is it's going to go to the browser and I'm going to search chakra UI icons I'm going to go into here and I'm literally just going to copy the installation command and paste it in our project and install that there cool so now that we have that installed I can back go back and try that Auto Import thing and it should pick it up now because we have installed the library okay and we we do not need this second input group sorry I did not mean to copy the second one we will get rid of that and when we save that I have Auto formatting on that's why everything moves when I see the file if you do not I recommend you to install prettier and turn on Save on format um you can do that by going into your vs code settings just do a quick Google search on how to do that it's it's pretty simple and it's very very handy cool so uh we actually will not be in this app file for a little bit so I'm just going to close that and now that we have a search input defined I'm going to come back here and reenable this I'm just going to comment that out I'm gonna go up here I'm gonna comment those out and I'm going to import it from search input I'm going to save this and for some reason we are not seeing anything you need to refresh oh there we go okay so we can see that something is there but it looks kind of not great it does not look anything like the Reddit thing so let's do some work on that all right first off the icon is completely wrong um so let's make it the proper icon we're going to make it the search icon from Chakra UI icons and another keyword shortcut that's really really cool is if you do command shift p it'll open up the command line in vs code and we have a bunch of settings that we can count these code to do and you can search for organized Imports mine's at the top because I used it recently but if you just search for organizing ports and you press enter it's going to automatically get rid of all of the unused Imports and sort them alphabetically I like to have react at the top so now we have the search icon there and phone number is definitely not what we want to put in there I believe on Reddit it says search Reddit and now we're going to add a bunch of styles to our input and change the color and we're going to make it look identical to Reddit so let's go over here we don't want the type equals telephone here so let's add a font size of 10 points and let's change the color of the placeholder and the way to access pseudo classes in Chakra is to do it with a underscore because placeholder we're accessing The Styling of it it's actually a pseudo class if you were to write it in regular CSS so to do that read it so we do need to include the underscore so we're going to give the placeholder text a color of gray 500 and we're going to add the hover pseudo class and we're going to make it uncover we're going to make the background white we're going to make the Border one pixel solid and we're going to make the Border color blue 500. cool so now you can see uh it's looking a bit more like Reddit whereas Reddit and the length of it and everything is going to be handled in a bit now let's do another pseudo class called Focus and we're going to make the outline none the order again one pixel solid and the Border color not work labs border color not border collapse for the second time watercolor blue 500 and we're going to give it a height of 34 34 pixels and a background of gray 50. cool I'm going to make this a bit darker to match more of the color of the text all right now let's go back up to our parent Flex container and we're going to add some properties here now we're going to say Flex grow is equal to one and that means it's just going to basically take up the remaining width of its parent container and a lot of these Styles will make a lot more sense once we actually have all of the navbar components in place but essentially flexgro means uh basically just take up the remaining room available we're gonna add another property margin right and in Chakra UI you can just say hamr I'm going to say two and that is just I think pixels that are going to say a line is going to be equal to Center cool so now you can see that we actually have an average and the styles are exactly the same as Reddit this icon you can see is a little bit misaligned and when I was doing the build I wasn't able to use flexbox on the input it was being kind of weird so I'm going to do is just add a bottom margin of one and that should make it look a bit more centered that's pretty much it for the search input for right now we're going to come back to this in a bit once we have the user because some of the styling is going to change but um yeah pretty simple component all right you guys you're now going to start working on the right content of the navbar and write content is basically the parent of everything going on over here we have the authentication buttons and this drop down menu and then all of those icons that we saw when we were logged in that is going to be a child of right content all right I just wanted to mention that When developing this application I tried my very best to keep the components as clean and as modular as possible and I avoided writing extremely long components because it can be really easy to do that in react and I wanted to get as close to a production react application as possible to show you guys how to write really clean and extendable react applications so you kind of see how it is done in the industry and hopefully this will help you out with your job search if your goal is to land a developer job all right so inside of our navbar folder I'm going to create a folder called Write content inside of right content I'm going to create the root write content file write content dot CSX I'm going to use our snippet and we are going to take in a user in this component as well like the search bar but we don't have a user yet so I'm just going to comment that out and we will come back to that in a bit and we're going to return a react fragment and this react fragment is going to have a component called authmodal which we're going to create shortly that is going to be the modal that pops up when you click one of these buttons that's what that's going to be um but we're going to get to that shortly and I'm going to create a flex component here and inside of flex we're going to have a component called auth buttons which we want to create right now and just before we do that I'm going to give this the properties of justify to be Center justify is short for justify content I'm going to give a line to the center align items to be centered so this is basically how we Center a div this is the CSS equivalent of display Flex justify content is equal to Center and align items is equal to Center for those of you who might be wondering so let's go create the auth buttons component and the auth buttons are going to be the login and sign up buttons that we see over here on reddit.com so let's go into write content and create a file called off buttons dot TSX again with the snippet and we're not going to take any props into these component so I can just get rid of this and we're going to again return a react fragment and we're actually going to start using button component from Chakra UI so I'm going to add a button called login and another one with the text sign DOT sign in sorry sine thousand cool and let's go back to our right content and enable this and do our Auto Import all right so that's not oh it's because we're not actually even rendering this right now so let's go let's go back to navbar and reenable this we're going to put directory up here to comment this out and let's put our import right content okay so you can see those buttons popped up on the right however they look absolutely nothing like the Reddit buttons so we have some work to do all right so since buttons are going to appear in our application several times and we want to apply consistent styling to them we're going to go back to our chakra theme and just quickly create the global styling for our buttons so that we don't have to repeat a bunch of component styling every single time we create a button so inside of our chakra folder I'm going to create another file called button.ts This is how you would style your components globally so that you have consistent styling for all of your components all right so let's see how we can create Global component styling for our button so I'm going to import something from from at Chakra UI not icons theme I'm going to import the type component style config and this is a typescript things that we get out of completion when we're creating our button we're going to create a button of type component style config so another keyboard shortcut that's super handy in the typescript is if you press Ctrl spacebar you will see a list of all of the properties that this particular type or interface is expecting and this is really a first glance at the power of typescript if you have not used typescript before you're going to be amazed when we write some more advanced type script at how robust and readable and Bug proof it makes the code so I'm going to create this thing called base style so let's do the Border radius and look at this Auto completion this is all thanks to typescript without this type we would actually not have this Auto completion right it would have no idea like what this thing is so it typescript at its finest okay let's bring that type back okay and inside a base style we're going to give a border radius of 60 pixels and I'm going to show you how to just apply like a global color let's just make it like let's make it our brand 100 color the red color we created and now in order to actually use this in our chakra theme what we need to do is go into our theme.ts file and remember how when I was creating this theme I mentioned that we're going to add the button in here eventually so that's what we're going to do now we're going to import back button from that button file and then we're going to enable it here and then you should see that those global Styles have been applied to our button so if you go back to our button if you say add a border of 2 pixel solid red you'll see that those are applied to every single button we create so this is global now so what we want to do is because our buttons have slightly varied Styles we want to put everything that applies to all of them inside of this file and then anything that is specific we will just add the same way we have been adding other shortcut UI Styles so I'm just going to paste in the remaining styles for our Global buttons because I just don't want to spend a bunch of time writing out a bunch of CSS once you kind of understand this the rest will make total sense so I'm going to go and just grab that from my other code base and paste it in here so this looks like a lot but it's actually not we just have some base styling being applied to all of our buttons and then we have sizes which basically just indicate any styling we want to apply to this component at certain screen sizes the most important thing to pay attention to in here is the variance we have our solid variant which has a blue background and then we just have our outline variant which is a white background with a blue border which looks like this red button here okay so we're going to close this because we're not really going to need it anymore and our login button actually is going to have the variant outline and look at this typescript gives us this nice Auto completion we can see all of the options so I click outline you can see on the right that that's actually being applied now and like I said before all of these styles that are specific to these buttons only we're going to write the same way we've been writing other chakra UI Styles so for example the height not every button is going to have the same height so I'd not put it in the global Styles I'm going to add it to each button specifically so this button is going to have a hit of 20 pixels and we're going to see some more media Crews here we're going to have on display at mobile screens we're not going to want to see this thing and small we're going to make it display is equal to flex the width we're also going to have a media query on base Mobile sizes is going to be 70 pixels and at medium screen sizes it's going to be 110 pixels margin right of two and then I'm going to add a on click function which I'm just going to leave empty for now because it's not going to do anything but we are going to have on clicks on both of these buttons that are going to trigger that modal at f1g prompt us to log in and I'm going to basically do a lot of the similar stuff to the sign up button so I'm going to make the variant of this solid but by default it is solid so I don't really have to specify that I'm going to make the height of this equal to 28 pixels and I'm going to go grab all of these things from this button because it's going to apply to this button as well so now we can see that those buttons are looking pretty good on the right and we can look at the responsiveness here they disappear on mobile and they get slightly smaller at smaller screen sizes and this behavior is identical to Reddit all right you guys we are now ready to start working on that model that I previously mentioned before the authentication model that's actually going to pop up when we click one of these buttons that's going to allow us to create user accounts and log users in so we're going to get a first glance at building a modal as well as we're going to start implementing recoil and we're going to see how to work with global State using recoil so super exciting stuff so what I'm going to do is inside of components I'm going to create another folder called Model because we're going to have a few different models throughout the app I think there's two of them there's the authentication model and then the creation of community modal so we're going to have a folder that houses all of those components and inside of modal I'm going to create another folder called auth to house all of the authentication modal components and inside of here I'm going to create a component called authmodel.tsx which represents the sort of root component of the authentication model so I'm going to use our snippet and our authentication model is actually not going to take in any props so we'll get rid of this and what we're going to do now is we're just going to get rid of this div and right now I'm just going to return a fragment that's completely empty I will go back over here and implement this Auto Import and let's go grab the model component from Chakra UI so if you go to if you just Google chakra UI modal modal dialogue we're just going to grab a sort of basic modal that's basically like this so what I'm going to do is we're not going to use this use disclosure hook but I'll grab the disc for now we're going to sort of write our own custom implementation of um opening and closing the modal and I'm going to go use the import all add all missing Imports okay so I'm going to get rid of this lorem thing that's just like text and I'm just going to write here is the modal body cool now if I go to our application now we should see this button and if I click this we should actually have a functioning modal now which is pretty cool that's how easy it is to implement modos with these UI libraries however this is not the behavior we want we wanted these buttons to trigger that so we don't want this button to be actually inside of the modal itself because these buttons live in our auth buttons component these both of these unclick functions are going to trigger the opening of that modal so we need to modify just the opening and closing of the logic a bit here and that's what we're going to do now all right so this is where we're actually going to start working with recoil and Global State the reason we need to implement Global State here is because with the opening and closing of this modal does not actually live inside the model itself it is being triggered by other components and this calls for moving our state upward and we're actually going to see as we build this application that the the authentication model is going to be opened by a series of components like when you try to vote on a post that you're and you're not logged in it will just open the modal if you try to join a community and you're not looking it'll open the model so we're going to need that opening and closing of modal State logic everywhere in our application hence the need to apply a recoil here so on that thought let's go back to our app.tsx file and we are now going to wrap our entire application in The Recoil provider and this is going to be the last time we touch app.tsx so all we need to do is just come over here and import this component called recoil root and that should just automatically import from recoil and we are just going to wrap the app in the root now we have access to global State everywhere in our app it is that easy with recoil and I'm going to show you now how to write a atom in Recoil and an atom is similar to I guess if you've worked with Redux before it represents almost like a slice of state and then we have just have access to these atoms everywhere in our app recoil is a lot simpler than Redux and it's so much quicker to get set up and going so that's why I'm super pumped to be using it and I'm super pumped to show you all right so what we're going to do now is inside of our source folder we're going to create a another folder called atoms this is the convention we create a folder called atoms and inside of our atoms folder we're going to create all of the pieces of global state that we're going to be using so for example I'm going to create a file in here called auth modal atom.ts and I highly recommend you to check out The Recoil docs and just go through sort of the home page of its explanation of atoms and I'm going to try my best to explain everything that's sort of outlined here but if you want further clarification just feel free to go to The Recoil documentation it is really great and recoil for your information is created by Facebook as well I think it is fantastic and I hope you do as well so inside of our Automotive file I'm going to import Adam from recoil just like this this is going to be our first glance at writing our own typescript we're going to create an interface called auth modal State and this interface is going to represent the properties that our auth modal atom is going to have this is purely a typescript thing you do not have to do this with JavaScript but you will shortly see why this is so handy and the power of using types and interfaces with typescript so our auth modal is going to have two properties it's going to have an open property which is going to represent whether it's open or not and that's going to be true or false a Boolean and it's also going to have a view and we're going to have basically three views for our auth model we're going to have a login view or a sign or a sign up view or a reset password view those are the three views that are possible inside of our modal and it is a vertical line that you see here essentially means or it is called the pipe operator in typescript and it basically just means that we can have this thing or this thing or this thing and also the reason that we didn't just make this up type string which would also work too we decided to be a bit more specific than just simply saying string because we know that our modal is only going to have a predefined set of strings and this is a common typescript thing and again if this makes no sense to you we're going to write so much typescript and interfaces and you're going to see this so much that it's going to make a lot more sense as we get some more repetition with it it is a little bit weird at first but just try to accept it right now and as we build it will make more and more sense I promise we need this to be part of our odd model state so that we so that the model knows which component to render because we're going to create components for logging in signing up and resetting password and this will make more sense once we actually start building out the modal component itself so I'm going to create another variable called the default modal State this is going to be of type auth modal State and so now this thing it knows what parameters to expect because we specify that up here and so this is again the beauty of typescript so our default State we're going to initialize our state as false because we don't want it just to be open as soon as the application spins up our view is going to be default to log in and look at this it's again beautiful typescript because we specified the three possible views up here so we're going to use login here so now we're actually going to create the atom itself so we're going to say export const modal State it's going to be equal to an atom and this atom is going to be of type of modal state and the key is the it's going to be auth model State and the key is a parameter required by recoil and it's basically just a unique identifier for this specific atom and this does need to be unique for all your atoms this is just so you don't have conflicting State and the default value is going to be default modal statement and this default value this represents our initial value of State for this particular atom and this is extremely similar to the U State hook where you just pass it a default initial value as an argument and also one thing to note here with typescript is because I specified that this atom is of type of modal state if I were to give this thing anything other than that type for example a number this is going to complain and it's going to say that type number is not assignable to type osmodal stage so we are seeing more and more evidence of why typescript makes your code so much more bug free over a JavaScript you would not get this type validation with JavaScript and you wouldn't realize that this is an error until you're after education breaks and crashes whereas in typescript it tells you right away so that's why we're able to use default model State because we told it that this atom is of type of modal State and we are passing it a default value of the same type it's expecting and that's why it is happy right now awesome so now we're going to see how to actually use this Global state that we just defined inside of our off model so let's go to our auth model so we're going to get rid of this use disclosure hook provided by chakra and we're instead going to do something extremely similar to Native react state but instead of using the use statehook we're going to use a hook called the use recoil state so we're going to say const modal state and set modal state is going to be equal to use recoil State and then we just need to pass it that auth modal State atom that we created over here that's all we need to do and this is and this is how easy it is to get recoil set up and this is literally all you need to do to set up Global state so we basically have our state value and then our setting State function same exact thing as you state with react however it is global which is amazing and a lot simpler than react so now for this modal it is no longer going to use that is open variable that we got rid of before it is now going to be modal State when I go into this it knows what properties are defined on that thing thanks to our interface so modal state DOT open and we're going to remove this on closed function we're instead going to define a function called cons to handle close and this function is going to use the set modal State function and we're going to take the previous state value and spread it because we only want to modify a single part of that piece of state and that piece is going to be open and we're going to set it to false now we're going to get rid of this button and then inside of our modal on close this navigation can be handle closed and we're not actually going to even have a modal footer so I'm just going to get rid of this okay so if we go back to our model we'll see that this actually doesn't do anything the model is not appearing because we have not told these buttons to trigger the model to be open so this is the reason why we needed this to be Global because now in our auth buttons component we can call that set authmodal State function that is going to modify that specific atom and set it to be open which the modal is listening to and so multiple components are able to read and write from the same atom and Trigger Global State updates and so that's we're going to do right here so I'm going to enable these on click things right here and inside of auth buttons at the very top I'm going to grab that set off modal State function and there's another hook provided by recoil called the use set recoil State and we're using this because inside of this component we only need access to the setting State function for this particular atom we do not need the value of that state we don't care inside of our buttons If the model is open or what view it's in right um if I go back to authmodal we did need the value because we needed to tell this model to be open or closed and that's why we use just the generic use recall State whereas over here we're only going to use set recoil State and there's a similar how to use only the value and it's I think just use use recoil value we're going to be seeing this a lot by the end of this you're going to understand this completely so now in our on click function for logging in we want to call that set off modal State and what we want to do is we want to set the openness of it to be true and we also want to set the view to be login right and we're going to do the exact same thing down here except we're just going to make this sign up so this is basically just when we click login it's going to open the modal and it's also going to show the login View and when we click sign up it's going to open the model annotation with the sign up view so let's see if this works so now if I click on login we can see that the modal is actually being opened by both of these buttons The View thing we have not created the components for those yet so don't worry but now we can actually see how these components are modifying the openness of this modal and that's super cool we have just experienced Global State we now know how to modify any application state from any component using recoil all right you guys so with the recoil setup and with the modal structure put in place we are now at a good place to actually start building out the structure of this model and create the login with Google button and the inputs that the user can put their username and password to sign in or sign up so let's get going on that all right so the first thing we're going to do is make the modal title change depending what modal view we're in and that comes from the value of modal State Dot View so if I'm in the login view I want to say login and if I'm signing up I want to sign up and that's super easy to do so all we need to do is make this text Dynamic using JavaScript so inside of our header we can say modal state dot view is equal to login if this is true then let's show the text log in and this is if you have not seen this before just the react way of saying that show this text if this is true this is basically an if statement in react you do the exact same thing for our view if it's equal to sign up and we can say sign up okay so now you'll see that this has changed to login because our default view was logged in if I click sign up it's sign up so it's pretty cool we can see that the second piece of state of our modal is now in action which is that view and we're going to add the third one which was reset password so we can see that being built dynamically okay now we're going to work on the body so we can get rid of this text here and our body is going to have some CSS properties so we're going to say display flex and we have to manually specify this because this is not the flex component so by default it does not have this so we just have to manually type it in deflects Direction is going to be column we're going to say align items is going to be equal to Center and justify content I don't know why I'm not getting auto complete it's going to also be equal to Center this is basically centering everything inside of this container inside of our mortal body we're going to have the flex component we're going to make the direction of this column the Align is going to be Center and the justify is also going to be equal to Center we're going to make the width of this equal to 70 percent awesome let's scroll up a bit you can see and I'll put a border on this just to make it clear on the right what we are looking at it has nothing in it right now so it just looks like a line now what's actually going to go in here this is going to be our oauth buttons so the sign in with Google button and it's also going to consist of those inputs to put in your email and password and if you look at the Reddit modal you can see that we have the this is what's going to be represented by our oauth buttons and then we're going to have these inputs as well so basically we're going to have a component called oauth buttons which we're going to create very soon and we're also going to have a component called auth inputs which is going to be those text inputs and we're also going to have a component called reset password which we will create at the very end we'll do this after we have Firebase setup and everything and we're actually able to create users this will be the very last step of Firebase authentication so we won't revisit this for a little bit okay cool and that is pretty much it we just have to go and create these components and our model will be completely done okay so inside of our auth modal folder I'm going to create another file called auth inputs and I'm going to use our snippet so in this component we are going to take in some props eventually but for now we're not going to take anything so I'm just going to leave it blank for now and I'm going to return our famous Flex component import that the flex direction is going to be column we're going to say a line is equal to Center and our width is going to be a hundred percent of our parent we're going to give this a margin top four okay and now we're going to create more child components and this one's going to be our login component as well as our sign up component and we also don't want to show both of these at the same time right we only want to show the login component when our model view is log in and we only want to show this when our modal view is signed up so what we can do is grab that modal State value and we're going to use that use recoil value hook that I mentioned earlier because in this file we only care about the value of that state we do not care about setting that state so now in here we can control which one we're seeing by tapping in to that modal State Dot View if the motorstate.view is equal to login then show our login component and if this is equal to sign up then show our sign up component which we have not created and that is it for this component and the reason we are keeping this component so small is because if we put everything from login and sign up in here it would be a super giant mess and we're going to keep it this way and it keeps it very clean and readable so that if someone else were to read this they would know exactly what's going on and it's common practice in industry and it makes refactoring the code a lot easier and it makes the component overall more extendable in the future all right so what we're going to do now is I'm going to comment these out and we're actually going to go create the login component now so inside of our modal auth folder I'm going to create another component called the login.tsx use our snippet all right and this component is going to be our first component that is going to take in user inputs in the form of a form so we're going to have two inputs that we're going to create here and one's going to be for the email and Y is going to be for the password and we're going to need to create some state in order for our user to be able to type these values in and for us to submit it to Firebase all right so to do that we're going to use the use statehawk and I'm going to create a state variable called login form and the setter function is going to be called set login form and we're going to be say we're going to say use State and the initial value of our login form is going to have an email that is going to be empty and a password that is going to be empty as well okay so now we can actually build the two inputs that are going to use and update that form state so inside of our form let's create a input and that is going to come from Chakra UI we're going to create two of them just like this okay and what I'm going to do is I'm going to go back to our auth inputs component and just enable that login component so that we can actually see what we're building on the right since we have something defined now we should be able to do that and in order to see anything I just need to go back to authmodal because that is the parent of auth inputs and enable auth inputs and that should automatically import just make sure it's imported at the top okay so nothing's showing let me try to refreshing the page oh there are inputs now the reason I have to refresh sometimes is because I take breaks between recording sessions and I think the development server just like goes to sleep so the hot reloading kind of is uh disabled for a quick second there until I refresh okay so let's go back to our login form and we're going to give some properties to our input so this one is going to have a name of email and we're going to give it a placeholder of email as well and it's also going to have a type and the type is going to be email and we're going to give a margin bottom of 2 so there's some space between these two things and we're also going to pass an on change function which we're going to create in just a second save that with auto formats and we're going to do basically the exact same thing to this one down here so I'm going to say name is equal to password the placeholder is going to be the password our type is going to be password and that's so that we get these uh if I save that that's so that we get these secretive Dots here and our on change is going to be just an empty function for now and so we're going to come up here and Define two functions and those two functions are going to be that on change function and the submit function for when we actually submit this form so let's also create the button that we're going to use to submit this form and we're going to import a button from sharper UI and this is going to say log in all right so now we have pretty much everything in place we have two inputs and we have a login button to submit our form and in order to make this so this button actually triggers a submittal of the form you have to say type equals submit and since this is wrapped in a form it knows to call the onsubmit function that we're going to create in a second when this button is clicked so what we're going to do is create that on submit function it's going to be empty for now and we're also going to create the on change function for our inputs which are going to be triggered every time a user types into the input it's going to update our state so now let's come down here and I'm going to change both of these two things to be on change so they're both going to call the same on change function and I'm going to show you how you can have multiple inputs use a single on change function in your forms rather than having to create separate stage for the email and the password you can just have a single state in our case login form and a single on change Handler will handle those updates and before we do that I'm just going to quickly add the on submit to the on submit perfect so our on change function implicitly takes in an event this event is a change event that is emitted by these inputs so every time the inputs change it emits an event and it is going to be captured by this function so the type of this event we can say is react dot change event and the type of HTML element that's emitting this event is an HTML input element and this is all purely typescript the reason we do this is so that when we're using our event inside of our function we have Auto completion and we can see all the properties on our event so petstrip at its finest once again so enter on change function we are going to update form state so we're going to say set login form and we're going to take the previous value of state and we're going to spread it because we only want to update a single piece of our form State and that piece depends on which input is emitting this event and how do we know that well luckily on our event we have event.target dot name and where's that name coming from that's because we gave these inputs a name so every time this is a particular input e makes an event that event contains the name of the Target that he made at the event and so that's how we're able to know which piece of state to actually set so we can say event.target dot value and that's just going to be the value that is inside of the input so now if I go to my browser I'm going to go to my react Chrome extension if you do not have the react Chrome extension I highly highly highly recommend you to get it it is extremely useful and it's much more accurate in debugging react applications than doing console logs so highly recommend that and I'm just going to use the react selector to inspect our login form and you can see that it has a piece of state with our form that has email and password and so thanks to our on change function that we just wrote when I type into here you can see that state is updating in the reaction extension and same with the password and it knows which input specifically we're typing into all right so now that that's handled let's actually style this form because right now it looks like garbage okay okay so what we're going to do is on our button let's add a width of a hundred percent and a height of 36 pixels and on our button I'm also going to add a margin top of 2 and a margin bottom of 2 to give it some space around it and now let's add all of the styling to our input to make it look as closely as possible to these Reddit inputs and also our model is going to vary slightly in how it looks just because I didn't like this massive white space on the Reddit form so ours is just going to be more of uh this without the white space and there's going to be little things that very like I'm not going to add like this text I don't think that's very useful but everything else is going to be very much similar let's go back to our app and I'm just going to go quickly Center this text because it is supposed to be over here so I'm just going to go quickly back to the authmodal to our header I'm just going to say text align is going to be equal to Center and that's going to Center that for us and I'm also just going to get rid of this red border all right I'm also just going to quickly add some bottom padding to our modal body just to give it some more room at the bottom there and let's go back to our login and get going on these inputs okay so the first thing I'm going to do is add the required property to both of these inputs just so that we're not able to submit our form if one of these things is empty so let's go down here and I'm going to add a font size of 10 point make it a bit smaller than it is right now and I'm going to style the placeholder by using the placeholder sudo class and I'm going to make the color of this gray 500 and I'm going to add some upper styling as well you're going to make the background white the Border one pixel solid and the Border color is going to be blue 500. Perfect all right and let's also add some Focus styling for when this thing is clicked on and in focus we want to make the outline none and the three remaining things are going to be the exact same as these so I'm just going to copy these and paste them down here and we are going to make the background color gray 50 which is a really light gray so the exact same styles are going to apply to our password input so I'm just going to grab all of these we started at font size come down here paste them down here and I think we're just also missing the margin on our password input so I'll throw that in there as well to get more spacing between that and the button alright so this is looking really good you can see that we have hover styling Focus styling it's all extremely similar to Reddit so I'm really happy with how this turned out all right so now the only thing we need to add to login is that text at the bottom that says new to Reddit sign up and that's going to switch to view to actually be the sign up view so let's go quickly and do that that'll be that won't take very long at all all right so beneath our login button I'm going to create a flex container and this Flex container is going to have the property font size nine point so all the fonts inside of here are going to be size 9 and we're going to make Justified content equal to Center and inside of here we're going to have text and text is pretty much just a P tag with zero margin that is a chakra component and this is going to say new here and also a quick keyword shortcut um if you want to duplicate lines which is something we do a lot you can press option shift and then the up or down arrows depending on which direction you want it to show up in so for example if I want the same line to show up beneath it I can do option shift down arrow and I'll duplicate the line below it which is super handy all right so this one is going to say in all caps sign up and that's and that looks like this so we're just going to add some margin right up one to our new here text and then we're also going to give this a color of blue 500 and we're going to make it a little bit heavier if we find we're going to say fond grid is going to be equal to 700 we're going to make the cursor equal to pointer so that when we hover over it it has the pointer of cursor because it's something that we can click on and when we click on this thing all we need to do is modify our auth model State and change the view from login to sign up which is something we've already kind of seen how to do so what I'm going to do is go up to our component and I'm going to grab the set odd model State function using that set use set recoil State hook that we saw before pass it our auth mortal State atom and we only need the setting about model State we don't care about the Automotive State itself and we come down here and on this sign up text which is the thing we're going to click to toggle that view I'm going to add an on click function here I should save this for their Auto formats so we can see it and this is going to call that set auth model State function it's going to take the previous state and we're only going to modify the view we're going to change the view to sign up so now if we click on that text let's move that blue Highlight if we click on that text it actually modifies the view and we'll add the reverse in the sign up component we'll make it so we go back to login just like you would see in any regular authentication form perfect so that's super easy with recoil all right so the structure of this component is pretty much done all that we need to add in here is the Firebase logic which is going to be handled by this on submit function the modal is getting very close to being done we just need to create our signup component which is going to be very very similar to this component it's the pretty much the exact same thing it just has a third input to confirm the password and then all we need to do is create the oauth button or the login with Google button that will not take very long at all because it's just a single button and then we will be ready to hook up our application to a Firebase backend and start creating users with Firebase authentication so we're getting super close to that we're just a few minutes away all right so let's go quickly build that signup component so inside of our auth folder the same place where login is I'm just going to create another file called signup.tsx instead of here then use our snippet I'm going to get rid of the type because we are not going to take any props into this component and we are going to go and copy pretty much everything from login into here because it's essentially the exact same thing with just a few minor changes so let's grab everything inside of here up to this bracket copy that and bring it over here so just paste that in there and we're going to get a bunch of angry stuff because we have not imported anything so let's go to this input and try doing this add all missing Imports thing with command period and see if that solves all that stuff so it does um what is going on here oh I think text for some reason with chakra it just like doesn't Auto Import for some reason it's kind of weird all the other ones do but we sometimes have to go manually import text from Chakra no idea why but that is just how it works okay so um that is not showing I'm just gonna quickly do oh it's not showing because um if I go to auth inputs we are not even rendering it right now so let's go and do that inside of auth input the same way we did log in okay so now if I open up sign up I should see these two inputs it's the exact same component as login so there is no difference so let's make those minor modifications to that now okay so our signup form is going to have pretty much the exact same state as our login form except it's going to be I'm just going to call it sign up form and set sign up form and in addition to having an email and password it's going to have a confirm password thing as a third argument we just need to change this to set sign up form and the odd change is going to behave the exact same way even with our third input you could technically have 100 inputs if you want which could be handled bias on change as long as they have that name you are good to go and let's come down here and graph this input and duplicate it underneath and yeah you know how much would you know you can duplicate single lines with that keyboard shortcut option shift down arrow or up Arrow you can also do that with multiple lines as well so good to know that's basically what I just did with that input so we now have the third input there we're just going to change the properties of this so the name of this is going to be confirm password the placeholder is going to be confirmed password the type is still going to be password and everything else is going to be the same down here we're going to change this to sign up because this is the sign up form not the login form and our text at the bottom is going to change it a little bit as well I forget exactly what it says on Reddit new to Reddit sign up in the sign up form it says already a redditor log in so let's type that in here already uh redditor if you are a redditor already let's log in with a space cool and we're going to change the view we are in the signup view we want to modify the view to be log in awesome I think we're pretty much done this component now that's how easy it was to create this signup component it's literally the exact same thing just with a slightly different form and the text changes that is all all right so the only thing left to put inside of our signup component is going to be that Firebase logic which we are so close to all we need to do is go and create that oauth buttons component with our login with Google button so let's go and do that now it's going to be very short it's a very simple component so let's go into our auth folder and create another component called oauth buttons dot TSX even though for this tutorial we're only going to be able to log in with Google you could in the same component at as many thirdparty oauth provider buttons as you would want to log in with GitHub Twitter Facebook I'm only going to use Google but if this is where you would add any button for a thirdparty oauth provider hence the name a lot and buttons all right so I'm going to use our snippet and I'm going to get rid of our prop type because we do not need it and we can get rid of it here as well and inside of this component we you're going to return our chakra Flex component and also a button from Chakra and this button is going to say continue with Google all right and let's go make it so we can actually see this component show up on our browser so inside of authmodal we can now go enable this component because it exists let's import it cool and so now we actually have a button that says continue with Google that is pretty hyped okay so let's go back to our oauth buttons component where did it go here and just to illustrate what I was saying earlier about being able to add any other provider you'd want in here I'm just going to say some other provider so you know that this is where you would put those buttons okay and this Flex we're just going to give a direction of column and that should fix that and also going to give a width of 100 and a margin bottom of four Perfect all right and this Google button does not look anything like a login with Google button so let's make that happen so inside of our uh Google button we're going to just remove this text for a sec and we are going to add an image from Chakra and the source of that image is going to be that is going to be one of those images that I had you guys insert into the project earlier or is it now it's in the public images it is the Google logo dot PNG so that is the reason why this is in the project it is for this button so if I say Images slash Google logo dot PNG you can see that show off on the button there it looks really big so let's give it a height of 20 pixels awesome and that's our text back in there continue with Google and I'm not sure if you remember but if we go back and look at this button.ts file in our chakra for our Global button styling uh I had this variant called oauth that I created for all of the lock buttons that you could potentially create and so we are going to use this for our Google button but if you add any more thirdparty oauth provider buttons then you can use the same variant as well so let's go over here and let's add that variant to be oh I cool cool cool and let's just add a bottom margin of two and this button here on the bottom I'm also going to give it a variant of glauth so that it looks the same and what I'm going to do is just add a bit of red margin to our Google logo so there's some space there and our login model is really the only component we're going to build that varies at all from the original red design just because I didn't really like this white space but our model is still super super clean okay so all that's missing now is just that text in between the oauth buttons and these inputs that says or so it's like log in with this or this where that's going to be is inside of our auth model root and that's going to go right in here so I'm just going to add text that says or and because text doesn't want to seem to automatically import from shortcut for some reason we just have to go manually add it to our Imports up top and we can make the color of this gray uh 400 and let's make the font weight 700. let's actually change this to 500. and you will notice that you see the a lot buttons in both the login and the signup View and the reason we do that is because when you're logging in with Google it doesn't matter if you're a new or a returning user logging in is the exact same thing and we structure our components that way so we have the oauth buttons here and that lives as a sibling as often puts and auth inputs is the parent of login and sign up so they will appear in both of those views all right so we are now done the UI structure of our modal other than the resetting of the password which we're going to do after we set up Firebase and we're able to create users if we are now ready to move into Firebase and start creating users we left off last time just finishing power login and signup forms and we are now ready to start working on implementing Firebase getting it all set up uh just one note I wanted to mention that I did create a Discord server after creating last video because I thought it'd be useful for people to get help in so if you are wanting direct access to me and you want to sort of ask ondemand questions on on the project or really anything feel free to join that server I would love to see you in there the link is in the description let's get back to work all right so what we're going to do is go to firebase.google.com and this is where we're going to create our Firebase project and get some configuration variables to connect our app to Firebase if this is your first time to the console it may ask you to log in so just log in with your Gmail account or create a new Gmail account and then we're going to do is go to the console I'm just going to click add project and the name I'm going to get this project is just Reddit clone tutorial feel free to name use whatever you'd like and then you're going to be asked if you want to enable Google analytics for this project because it is a demo I'm just going to disable this and then we're going to click create project and this may take a few minutes so once this is all done let's click continue and it'll take us to our project so we're creating a web app so we're going to click on web and then we're going to give this a nickname I'm just going to give it the same name as our project name and then I'm going to click Register App perfect now once that's done it's going to ask you to install Firebase but we already did that when we installed chakra if you did not install Firebase now would be the time to do that so go ahead and do that if you do not we're going to basically do exactly this in our app and that is how easy it is to connect Firebase to our app so what we're going to do is I'm going to come over to our repo and I'm just going to close some folders to clean this up a bit so it's a bit more visible and inside of source I'm going to create a new folder called Firebase and then inside of Firebase I'm going to create a file called Client app Dot typescript and this is where we're going to put our initialize app you will have your own unique configuration variables do not put the ones that are displayed in this video because it will not work all right so what I'm going to do is just quickly copy this over all right so now we're going to do is just in the root of our project I'm just going to create a new file called Dot env.local and this is where we're going to put all of our environment variables for our Firebase project so what I'm going to do is on the repo I believe there should be a DOT env.example file that looks something like this and this basically just contains all of the keys that we're going to put in our end file if you don't want to manually type all this out because it's kind of annoying to do that feel free to go to the repo on GitHub and grab these keys I'm going to paste these in here and now we're going to copy these variables over to put them into here all right so once that is done all we need to do now is just go back to our client app file and remove these hardcoded strings and just access our environment variables so what I'm going to do is just temporarily move this down here for a second just so I can copy the things over the first one is going to be process.env dot that thing and we're going to do this for all of them so once that's done and all these names match the variables inside of your EMB file we can close this because we're not going to use it ever again for this build all right so now our app is set up to connect to our Firebase project that we created and we're going to access it through this app instance that we created here we're going to make a few changes down here though because uh we're using max.js and we need to handle the case of server side rendering which introduces some complications with creating the app but it's just a few lines of code and I'll explain them as we go so I'm just going to remove these comments at the top and what we're going to do is in addition to this initialize app function we're also going to grab a function called get app as well as get apps and we're also going to import a function from Firebase auth and that function is going to be get auth foreign we're also going to import a function from Firebase firestore and that is going to allow us to actually access our database when we uh when we create it soon and that is going to be the function get firestore all right and the last thing we're going to import is going to be from Firebase storage and that function is going to be get storage and this is going to be used when we get into the creation of posts and users can upload images we're going to store those images in Firebase storage and Firebase storage is it is different than firestore database storage is used to store files and media things like video and photos whereas the database just stores JavaScript object Json type data all right now down here what we're going to do is we're going to initialize Firebase and I'm just going to add a comment for clarity that's going to say for server side rendering okay so since our application is going to use server side rendering in some areas we need to avoid attempting to initialize an app on both the next JS server as well as on the client side because the way next.js works when you use serverside rendering is that it renders the app on the server and then that is sent to the client and then clientside rendering will occur and we will get an error if we try to call this initialize app function both on the server and the client and that will make a bit more sense once I write this function out so basically how this is going to look is we're going to write it as a ternary operator and this is going to call that function get apps and this is going to get all the apps that we have created with our Firebase config object above and it's going to say if this app does not exist meaning that there is no length then we're going to initialize it however if it does exist we're going to go get that out and whatever the result of this ternary operator is is going to be stored in our app instance and then we will have access to it on the client side when we need it I hope that makes sense so now we're going to actually create our firestore instance and this is basically how we're going to access our firestore database we're going to pass it our app and then we're going to create our auth instance which is how we're going to use Firebase authentication also going to pass our app and we will while we're here create our storage instance same thing pass it our app and now we just need to export all of these things so we have access to them throughout our application we can just simply import them in any other clientside file and we can use their functionalities so we are completely done with this file we have created all of the necessary variables and we are now ready to actually start using these things in our app to start creating users and data and images and whatever so we can close this client app file and move forward all right so now that our app is actually able to communicate with our Firebase project we can now Implement authentication and actually start creating users so for authentication we are going to use this Library called react Firebase Hooks and these are hooks that are developed specifically for usage of Firebase inside of react and they enable us to leverage all of the amazing powers of a Firebase with just a few simple Hooks and a few lines of code and they're honestly unreal so if you just search for this package on npm and then you click on their GitHub repository link this is where all of their documentation is and if you come to the bottom here you can see they have documentation for all of their available hooks so we're going to Focus right now on these authentication Hooks and if you come into here you will see that they have hooks for essentially every single authentication method so we're going to be using you sign in with Google you sign in with email and password and use create email or password but once you know how to use one of these you can use them all and you can Implement these in just a few lines of code so we're going to start off with use create user with email and password kind of a mouthful and they have really good examples for each one of their Hooks and they look long but they're honestly very very straightforward and maybe I'll zoom in a bit hopefully you can see that so what I'm going to do is just come over here and grab the installation from npm and come to our project and paste that in there perfect once that's done I will just come back to this documentation here and I'm just going to grab this and paste it in our code base because we're going to have it written the exact same way so when we use any of the authentication hooks from that Library we need to pass it our Firebase auth instance which is what we created in that client app file right here and that is basically how we link our specific app to the hooks so we're going to need to import both of these so I'm going to try to Auto Import this um okay for some reason it's not wanting to Auto Import which I don't understand but sometimes that happens import from react Firebase hooks slash odd use create user with email and password and underneath that I'm going to import our clock instance from it's going to be all the way up in Firebase Client app grab that auth object and now it should be happy so this hook returns to us four different variables the first one is the actual function that's going to be used to create the users we're going to pass this our email and password then once this successfully completes it returns to us a user and then there is loading and error state which helps track the progress of this function so if this thing is in progress this will be true if it errors out then this will happen and we can use these two things to modify our UI to make it clear to the user what is going on so this is where we're actually going to call that function so I'm going to type out create user with email and password and the arguments we're going to pass are going to be our signup form dot email and our signup form dot password so let's quickly add form validation to check that a valid email hasn't entered and that the password that the user enters in the password and confirm password Fields match and actually um because we put the type of email on this input HTML by default should handle the case of an event on email and is once you check that the email actually contains the at sign which is what we're going to consider a valid email I think there's some libraries that exist that will check that it's like a valid domain and stuff but for the purpose of this tutorial I think that's simply checking for the ad signed is completely fine so the only thing we need to handle them is if those passwords match so we're going to say if signupform dot password is not equal to signupform dot confirm password let's set an error and how are we going to set that error well we're going to need to create another state variable so we're going to create a state variable called form error we can't use the keyword error because this is being taken by that there actually what we're going to do is change the name of this to user error it doesn't have to be specifically error because the hook is just going to return four parameters it doesn't care what the name is the fourth one though is going to be the error so I'm just going to give it a name of user error that way up here I can use the more general term error I'm going to say set error up here and this is going to be use State and we're going to set it as an empty string to start off and then we can come and actually remove this comment here and actually set error to be passwords do not match and I'm just going to return out of the function because we do not want to proceed with this if they and if their passwords do not match all right and let's open up our modal and what I'm going to quickly do is just add that error text here if it exists so I'm going to add some text in here that's going to say here is here just so we can see what it looks like and I'm going to make the text align to be Center and the color red because red means error usually and then I'm going to change the font size to just be a bit smaller 10. perfect and we do not want to actually say here's the error let's actually put in here our form not former we actually need to be there perfect and then uh to make this even a bit cleaner I'm going to say error and depth text and basically that's just saying don't display this text unless this exists so now let's try to submit our form and you can see that those required things on our inputs are doing their job they're making sure that text actually exists and I believe that if I enter a thing that does not have the at 10 in it it should give us that that thing yeah so it's saying uh it's saying it's not a valid email address so this this component handles that for us which is super nice but let's make sure if we do enter a value email like shady shady.com and I enter passwords that do not match do we get that error and yes we do now you'll notice that when I submitted that the page refreshed and that is what happens by default on form submittal uh in order to prevent that we need to take the submit event and call the method prevent default so what we're going to need to do is take in the event as an argument the same way is kind of what we did down here how the function implicitly took in an event and then we'll have access to all of the methods on that event so I'm going to create that argument here and the type of this is going to be react dot form event because it is a form event it's no longer a change event and the type of HTML element that is producing this event is the HTML form element and now since we have that typescript type there we get intellisense with all of the methods that exist for that specific event and I can call event dot prevent default and now if I try that again it's about email passwords that do not match sign up passwords do not match perfect and what I'm going to do also is that when the form is submitted I'm going to check if there is an error and if there is then I'm going to set it to an empty string because we kind of want to reset the error every time we try to submit the form and you could add some other stuff as well to make sure that the password length is like six characters and doesn't contain these characters and contains blah blah blah but uh again that's kind of not necessary for this project but feel free to add whatever you'd like in terms of validation all right and one last thing that we're going to quickly do before trying to submit a user is I'm just going to use this loading State quickly on our button and I can't remember if I explained this when we were creating the button but a beautiful thing with chakra UI is that with their buttons and I think with all of their components we can add an is loading prop to the component and we can pass it a Boolean which will show a loading state if Boolean is true so for example if I say true it will show orthologic state so in this case our Boolean is going to be that loading Boolean provided by that hook because the status of this is going to be toggling from true and false depending on what the hook is up to so let's give this a go and see what happens so I'm going to go over to our Firebase project and go to authentication because that's where our users are going to show up if they are successful and actually I'll just click get started here because I didn't do that before all right so okay so I'm glad I checked this before because what we need to do is actually enable the specific authentication methods that we're going to be using so in this case email and password and then later in just a few minutes we're going to do Google so let's click on email and password and let's click enable and then mobile save that and that Firebase is actually going to allow us to create users with email and password so let's go ahead and give that a spin and if it works we should see that user show up inside of our users column here so let's go back to our app we will refresh to sort of reset everything let's open up our modal and let's enter Shady shady.com I'm going to make the password chatty and let's see what happens we can see that loading State you see how it toggled there that was the hook changing status uh we don't get anything on the UI because we haven't done anything if it worked I'm assuming it did let's go check our Firebase authentication so I will need to refresh and look at that we do have a user in there with the email shabby chatty and that is how easy it is to create users with these Hooks and Google securely stores these users and encrypts our passwords so we don't have to worry about any of that on our own we can just focus on actually the fun parts of our app so thank you to anyone who has contributed to these amazing libraries all right you guys now I briefly want to show you how to do error handling with Firebase in the rare event that an error occurs I know it's not the most exciting thing error handling is never that fun but it is really good to know how to do it to make your app more robust so let's quickly do that so the first error that you might think of is what happens if we try to sign up a user that already exists in the case of shady here we already have a user that has been authenticated with shady.com what happens if you try to sign up again uh let's take a look we get some sort of error here and if we look more closely at it we can figure out maybe what's going on okay so let's bring that open I'm going to zoom in uh it might be a bit small for you wow this is painful to get this thing to expand why won't this expand I look like a tool right now trying to get this thing open okay what I'm going to do okay this is all we really need to see we can see that we got a 400 error which means bad request so Firebase just said that you tried to create a new user but a user with that email already has been created so we somehow need to just update our UI to indicate that to the user so the way we're going to do that is actually through this user error variable given to us by the hook so the way I'm going to illustrate what this error actually looks like is if I come down here to where we're actually rendering the error which was right here I'm going to what I'm going to do is just add an or statement that says or user error and an error in this case is the error we are setting with that state variable uh if there's a contained valid password and user error is going to be the actual error returned from Firebase authentication so what we're going to do is we're going to say okay if error or user error let's show some text that shows that error I can also add an or statement here and I'm going to type user error and I'll notice that it has a property called message and this is the thing we want to access on the error okay so uh let's try to log in with shadyashady.com and see what happens so we successfully show the error on the UI Firebase error off email already in use but that's kind of like weird to show to the user maybe we want to show like more meaningful text and I want to show you how to do that with Firebase if you are totally fine with this then like feel free to leave it I just want to show you how to potentially display a more meaningful message so inside of Firebase I'm going to create a new file called errors Dot TS and in here we're going to put pretty much all the Firebase errors we're going to come across which is not going to be that many there's only like a few but basically what we're going to do is create an object called Firebase errors and that's going to contain these these messages as keys we're going to take this key and map it to a more useful error message so for example if the Firebase error is that hot email already in use thing we can return a text that says a user with that email already exists that's much more meaningful to the user and now what we're going to do is inside of that signup form I'm just going to go and import those Firebase errors I'm going to copy this line down here because it's going to come from slash Firebase errors then we're going to grab that Firebase errors object and then what we're going to do is where we were rendering this user error message that is now going to be a key of the object Firebase errors and this is how we can actually access that more meaningful error message right because and I'll address this uh red underline in a second but if we just go back to errors we can see that if we try to access the object at that error.message it's going to give us this in return which is a very useful message okay so I'm just going to briefly attempt to address what is going on here it's kind of a weird texture thing and we need to be more specific of what type it is that we're trying to use to index that particular object basically all we're going to do is take the user Dot message and Typecast it to a valid index of that object and all type casting is is just taking a variable and changing its type to a new type so the way to Typecast in typescript is to take that variable and then write the word as and then write the new type this is kind of confusing because there's key of and type of here and if this does not really make sense to you right now do not worry we're going to see this a few times throughout the project so just kind of accept this for now I really really dislike telling people to just accept things when I'm teaching but in this case I just don't think this is something to get caught up on and this will become a lot more clear when we start defining our own types and interfaces with like posts and communities and stuff so now we can do is we see that we're getting a more meaningful message there which is great let's try to trigger the other one yeah passwords do not match but the styling changes but I think there's just something going on with the logic here okay so the formatting kind of messed up my logic here and so I'm going to remove these brackets and I think to prevent that from reformatting improperly I just need to add brackets around that so this is a single Boolean here okay and now we can see that we are getting the proper error there awesome and if I just try one more time we can see that we get the other error so now errors are handling both of our cases which is great all right and one thing I actually decided that I want to do to make this a bit more readable because this is kind of confusing I'm just going to get rid of this outer logic here and I'm going to just simplify it to this and this is just going to do the exact same thing as it was before it just is a bit more readable okay so that is enough about errors I've had it with errors for now let's go do something more exciting all right so now that we have been able to successfully create users with email and password via back use create user with email and password hook let's go now Implement oauth and log our users in with Google using the similar hook uh use assignment with Google and now that we've been able to use one of these hooks we can use them all they're all so similar in terms of functionality and that is what I love about this Library so we're going to go to our oauth buttons which if you recall is a section here and we are going to implement the pretty much same structure in this file so at the top we're going to import from react Firebase hooks off this time though we're going to grab that use sign in with Google function and again we're going to need to import our Firebase auth instance from The Client app file Firebase slash Client app grab off and inside of this file we're going to do pretty much the exact same thing as we did in the other file we're going to call that hook and say use sign in with Google and we're going to path it pass it our auth object and before arguments this time are going to be sign in with Google user loading and error awesome so a very similar structure as before and now all we need to do is add an on click event handler to our button and that will be it I'm going to add the is loading property to our button and then I'm going to add that on click and we're going to give it a callback function and all this is going to do is call sign in with Google that is it let's also actually quickly add some text from Chakra that is going to display that error if it exists we will say error and error if it exists awesome so what is going to happen when we click on this button let's find out so if I click sign in with Google this popup is going to pop up and we get some error what is going on here I think the reason that this failed is because we hadn't we have not yet implemented Google authentication in our app and this is something I always forget to do if we come over to sign in method we need to click on add new provider remember we added email and password and let's click on Google and let's click enable and I'm just going to select the email address that I have that I am currently logged in as we can ignore the stuff down here this is for reusing an existing client ID from an already existing Google project and we will click on Save perfect okay so now Google is successfully enabled in our project we should be able to refresh our app and try again but actually let's fix this first this is a react error and basically what's happening is error is an object and we cannot render an object in the Dom we need to render only text so I'm going to just do error Dot message so let's try this again let's refresh all right um what is this um I honestly don't know what's going on here at render element hmm he's gonna have to do this error let's do localhost 3000 okay I'm gonna just try recompiling the development server sometimes I'm not sure why there's Sometimes some errors with like hot reloading and um just simply recompiling the server can fix it and that seemed to do it also this error right here you might see in here is saying that there's a duplicate atom key auth modal State um this also has to do with the hot reloading it says that um if it is it is safe to ignore this if it occurred because of a hot module of replacement and that is why it's occurring in this case basically it just thinks that there's uh two of the same atoms but there is not so just kind of ignore this for now so we can probably reenable this and let's go to sign up click sign in with Google this should pop up over here and if your Gmail account isn't showing up by default there like mine is just click on the use another account and it might ask you to enter your email and password and authenticate that way and I'm going to click Shad Mary gmail.com and we should be authenticated now again we're going to do some stuff on the UI that's going to handle the successful case but let's go look at our authentication users and you can see that I am in there and it says that I have used the Google provider so that's pretty cool and this is it this is it guys for this entire file a lot buttons this is how easy it is to sign in with Google and if you want to add more providers and more buttons like apple Facebook whatever you want you know how to do it now with a single line of code so pretty cool if you ask me and the nice thing about continuing with Google or any oauth provider is that it handles both the case of a new user and a returning user with authenticating with email and password we have to handle the signing up case as well as the logging in case so now let's go Implement our login method so that users who did sign up with email and password can log in with those credentials the login logic is going to be very very similar to the sign up logic we're going to have this on submit function and we're going to bring in that use sign in with email and password I'm going to copy this over bring it into our app the only thing that's going to be different here is we're going to pass it the email and password in the login form so let's go to the top and grab those two imports from react Firebase hooks slash auth we're going to grab sign in with email and password and we're also going to grab our Firebase auth instance from Firebase Client app grab off and that will be happy there again same thing with the four arguments except this time we have sign in with email and password so inside of our on submit function we're going to take in the exact same event as we had in our sign up form and I'm just going to go copy and paste that over the react form event I'm going to grab this entire thing right here bring it into login inside of this function I'm going to call event dot prevent default to prevent that refresh of page on submittal and all we're going to do inside of this function is call sign in within our password and pass it the login form whoops the login form dot email and login form dot password and this function is going to go check if a user with that email exists and if the password is correct and in our login form we actually do not need to create another error State variable like we did in sign up and sign up we had to check to make sure that the password is matched and in this case we do not need to do that and our HTML input element is going to verify that the email is valid so we do not need our own custom errors here the only error that could exist in the login form is going to come from Firebase so we're just going to be okay with using a single error object here all right and let's go down and add the error text that could possibly occur I'm going to open up our app here so it's going to appear over here very similarly to sign up just about the button here so we're going to have some text so inside of our text we're going to access that Firebase errors object and I'm just going to automatically import it here and inside of here we're going to need to index it the exact same way we did in sign up using that complicated typescript indexing stuff so we're going to say error Dot message as key of type of Firebase errors that should compile nicely and actually I can't remember if I added the login errors to this object let's go look I think I might have but then I deleted it yeah okay so I think I added these um at some point during sign up but then I removed them because I wanted to wait until I got to this point of the tutorial I I can't remember if if I showed you that I put these in here these are coming from my existing repository you can grab them off of GitHub so Firebase has two types of Errors for logging in the first one is if the user is not found meaning that a user with an email does not exist and the second one is if the wrong password has been entered for an existing email you're technically not supposed to tell the user which one it is because it could be a malicious user you're supposed to be kind of vague um what I did here was for both of those types of Errors we're going to just show the same error invalid email or password so that we can cancel that off and we can test this out by trying to log in with an unexisting email so for example I know that the email Doug at doug.com is not a user so if I enter a password and I try to submit I do get an error invalid email or password I do need to style it here quickly so I'm just going to do the text align is equal to Center and the color is going to be red perfect and font size is going to be 10 10 points 10 point yeah just like that perfect and also uh before I forget I'm just going to add the is a loading state to our button because I noticed it didn't um it didn't work there we did get the correct error there though which is perfect let's try logging in with Shady shady.com now we're going to get the other error because I'm going to enter the wrong password the password for this is Shady I'm going to enter giant string we should get the same error so now we know both errors are working let me try if I log in as Shady but I put the correct password what happens cool we didn't get an error we haven't done these stuff to handle what happens when you successfully logged in yet but we now know that error handling is working and now it looks like we can actually log in to existing accounts so this is perfect we can create users with email and password we can log those users in and we can also log in with Google so we've covered all of these sign in sign up methods of Firebase authentication and now we just need to actually do something useful with that user once they have logged in to tell them that they have logged in so let's handle that next all right you guys so now that we are able to successfully log users in let's look at how we can actually obtain the logged in user and do something useful with it so if we go take a look at those authentication hooks from react Firebase hooks we can see that the very first one is called use auth State and this is actually how we're going to obtain the currently logged in user and so this hook looks like this it's implemented like it is here and it returns three arguments the user loading and error so it's initialized as null and once a user is authenticated we will then actually have access to it through this same object here so let's go take a look at how that's going to work when we log in first thing we're going to need to do is close the modal right because once you log in you're kind of done with the modal so let's go look at how we're going to do that what we're going to do is inside of the file auth model we're going to call that hook use odd state so I'm going to write it like this use auth State and I'm going to import it from react Firebase Hooks and we are going to need to pass it our auth instance again from Firebase client tab so import both of those things and then we're going to grab those three arguments so the user loading and error perfect so again this is going to be null initially and this will be true because it's going to go check if there isn't currently authenticated user uh and then once this is done loading we're either going to have a user or not depending on if they're authenticated so how are we going to actually close the model if there is a valid user well what we can do is we can bring in the use effect hook which is a hook that runs when the component mounts as well as when any of the dependencies change and we can add a dependency of user and so basically what's going to happen is this code is going to trigger every single time the user object changes and what we want to do if the user changes from null to a valid user if you look up here we have a function that closes the modal so if the user object is not null we can just simply call that function and now Watch What Happens the model just closed once they refresh because there is a valid user because I logged in already you need to wait we're going to need a way to sign out um but yeah this is essentially how we can actually close the modal and let's actually just add a console log of what the user actually looks like so we can see ourselves you can see that it's being logged in the console it is a valid user it has the email shady.com and all this other data that's not really relevant so even though we have a user that is logged in we are still showing the login and sign up buttons it'd probably be more useful to show something else because on Reddit that's when all those icons appear and that's when you actually have the option to log out so let's go to the parent of those buttons so what is rendering auth buttons I believe it is write content okay so inside of here you're basically going to check if there is a user and if there is a user so we're going to add a ternary operator here we're going to say if there is a user we're going to show some component that says there is a user um and if there's not we're going to want to show the authentication buttons right because you need to because the user does not exist so where is this user going to come from well what I'm going to do is I'm going to go to our nav bar and I'm going to again use that use odd State hook because we can use it wherever we want it's a hook that we have access to throughout our entire application so we can get access to our currently logged in user wherever we want right so that's what makes this hook so useful if you want to say use auth State again we're going to need to import those two things uh I'll use auth State and or auth object grab the user loading and error now we're going to pass our user to multiple components that's why I'm using it in the nav bar because I'm going to pass it to our search input and our right content you could technically call this Hook from both with inside of search input and with inside of the right content but since we're going to pass it to both I feel like it's better to just call the hook once and then pass it as a prop to these two things so we're going to pass our user to the right content component so let's add it as a prop user is equal to user and we're going to see this red underline here and that is because we need to go into our write content component and actually Define an interface for our prompt and that is a typescript thing so that's where we're actually going to use this I don't know if you remember I said we're eventually going to take in a user so if I if I comment that back in what I need to do now is because this component is a functional component that takes input of type right content props how I'm going to actually get that value into my component is if I open it up here and say user and basically just destructuring the props I could also write it like this if I wanted to and then I would just access props dot user but I prefer to write it in a destructured method I think it's just a bit cleaner okay so let's save this let's go back to here and we'll notice that that redundant line is gone because because typescript knows this component is expecting a prop called user so we can save this and check that out we now know that there is a user because we pass it in and we added that term every operator uh we're going to make we're going to make this its own component eventually but right now let's just add a button that will log the user out just so we can test this functionality that I'm talking about so let's just add let's just make this a button from Chakra and it's going to say log out and on click I'm going to call the sign out method from Firebase and if you go to your Auto Imports you're going to import this from Firebase slash auth and this is how easy it's going to be to sign out why is this oh I think we also need to pass in our auth object to this thing from Client app okay now we have a button that's going to hopefully log us out so let's click on that and you'll see that that is going to sign us out it's going to clear that auth state so that when so that now user is going to be null if I sign back in as uh Shady shady.com with the password Shetty and again the model closes and we can see that it is detecting that user and we're going to change this logout button to an actual like drop down menu if you go to reddit.com you'll see that it's your logged in there's a drop down menu and that's what we're going to add shortly and we're going to be able to log out by actually adding the logout option there we go that is uh that is literally how we access the user we're going to use this hook a lot because we're going to need access to our user in a lot of places and this hook makes that super easy and what's nice about this use auth Hook is that it persists the user login on refresh as well as if the user were to come back to your website in a few days if I refresh the page here for example we can see that initially for a brief second there it uh there was a null user and you can see that in the logs here so state is initially null but then it goes and context the Firebase servers and it finds that oh there actually is someone authenticated so we will be logged into our application automatically all right so the only part of the authentication flow that we have left to cover is resetting of the password and what that's going to look like is this so I just spun up the localhost on my completed project and just to show you what it's going to look like and what I've actually decided to do for this section of the tutorial is just make the minor architectural changes to our model to actually show this component and then I'm just going to paste in my already written reset password component and I will explain the critical parts of it pretty much the exact same thing as what we've already seen so I just didn't think it was worth covering the entire thing and then what you can do is just grab the code for this component off of my GitHub and paste it into your component all right so we're just going to quickly add some text beneath this login button that allows you user to go to the reset password form if they did forget their password so I'm just going to again grab that from my other repo and paste it into our login component and I will explain everything it's just very very similar to what we've already seen paste that in there it's a very small section we added to login and basically this is just some text beneath the login button there and on click we're going to do same thing that we're doing here except with the reset password view so I'll paste that in there and I'm going to make this reset password and thanks to typescript we did autocomplete perfect okay so now let's go to our modal because we need to make some changes to this logic in here and actually render our reset password component all right so what I'm going to do is I'm just going to come up here and write some JavaScript that's going to allow us to conditionally display these form components and what that's going to look like is it's going to say modelstate.view is if this is equal to login or the motostate.view is equal to sign up let's show something and if none of those are true then let's show something else and that's something else is going to be this reset password like right because our model only has three views if we're not logging in or signing up we are going to be resetting our password and I'm going to move all of this up here and then I think I just need to wrap this in a fragment because we because it needs a parent component of some kind and we have not yet created reset password so let's go and do that inside of our auth folder I'm going to create that component reset password all right and this is where I'm going to paste in my already written component from my completed project and explain the important parts a lot of it is just styling a UI component so I just didn't think it was worth the time to do that hey guys I am just editing this part of the video and I noticed that I did not mention to install react icons as you see online for there this is the main package we're going to be using for icons so just install this with the command here and this should work smoothly and let's make sure we can actually successfully see this so I'm going to click on my Auto Import and add that import click save and if I just go to my UI reset password we do see that form in there now so the most important part is right here we're using that use send password reset email Hook from react Firebase Hooks and we're again passing it that auth object that we created and then we're just calling that function when we actually click on that reset password button and we're just passing it the email that the user enters and this is going to actually send an email to that email and once that successfully sends it's going to set success to be true and the success State variable basically just is something that so that on the UI we can say oh go and like the email was successfully sent go and check your email and in order to demo this I do need access to an email that is real and that I actually have access to and I'm signed in so in order to do that I'm just going to go and delete my shadmare hey gmail.com because I authenticated with Google there and in order to show this password resetting process I need to create an account with my Shad Mary email by using email and password authentication not a lot shout out is not a real email all right so now that there is no account with Chad Mary gmail.com I'm going to go and create one with email and password authentication and make the password chatty and I'm going to create that account now I'm going to log out and then I'm going to try to log in but oh I already forgot my password so I better reset it so I click reset and if I enter Shadowmere gmail.com click reset password this is its functionality so it's going to say check your email I'm going to go to my email and I'm just going to show you how this works so that if you get this going on your app you know how it should option and this is what the email actually looks like zoom in a bit it sends me a link from our Firebase app if I click on this link it brings me into a form and it's saying reset your password so if I reset my password to say Shady Mary my full name I click enter it says password change and Firebase handles all the heavy lifting of changing your password and now if you go back to the app I should be able to log in with that new password so I'm going to try logging in with my old password to show you that it's already updated Shady did not work but if I use my new password chatty Mary it works so my password has been reset I'm going to leave it there for password resetting again it's super similar to the other processes in terms of using the hooks and building up the UI component and I really do want to and I'm sure you do too want to move on to more interesting things all right everybody now that we have completed our authentication workflow and we are able to access the currently logged in user let's make those changes to our navbar to reflect what it's supposed to look like when a user is actually logged in which is how it looks right here in the completed project here so if I log out this is sort of what we currently have and then when we log in we will make it up here as this so we're going to have this drop down menu we're going to have these icons and then this other dropping menu over here which is pretty much identical to Reddit so let's get going on that all right so if we recall inside of the nav bar we're already grabbing that user and so now we can conditionally display things if that user exists so let's start off with write content so write content just as a reminder represents sort of all this stuff over here as well as those authentication buttons log in and sign up so if I go into write content we are going to replace this logout button with a component called icons which is going to be the parent of all of those icons and then down here we're going to have that menu which we're going to bring in from Chakra it's going to be a drop down menu just like we saw over here okay so let's get going on those icons it's pretty straightforward we're going to just import a bunch of icons from react icons also one last thing the type of this I just want to change to user which is the actual proper type and we can import that from Firebase auth and that way we will get autocomplete intellisense when we're trying to access our user and you'll notice that we now have some compiler issue with typescript because this is saying that it says that type user null undefined is not assignable to type user so we indicated that we're passing a user in here because we said that here but it's saying that this could be undefined and it also could be null and so this type of user null undefined is not assignable to the type we gave it so we basically just need to go adjust for that and the way to do that in typescript is for undefined we can just make it optional with a question mark and for null we can use the pipe operator to say this is either going to be a user or null so this whole thing says user or null or undefined indicated by its optional and now this thing is happy okay so let's go into our write content directory and create our icons component icons dot TSX use our snippet and what I'm going to do is paste in all of the icon Imports because there's about six of them I think these are all the icons that we're going to put in there these are all from react icons so we are not going to take in any props to this component so we can remove these and inside of here we're going to basically just return a giant Flex box and this flexbox is going to have two children the first one is going to be another flexbox and then the second one is going to be a react fragment I'm going to explain why we're using a flex here and just a fragment here in just a second so now that we actually have icons here which I'm just going to put some icons text so we can see it let's go to our right content and change the logic here so we're going to replace this logout button with our new icons component import that and so basically this is just saying that if a user is logged in show those icons and if they are not show the login and sign up button perfect so let's go into icons and actually start building that out so the reason I am using a flexbox here and just a fragment here is because if you look at our demo which is based off the real Reddit you can see that the left container of icons right here disappear uh or are not visible on Mobile screen sizes they don't appear until medium screen sizes and so basically we need a flex box here or we need some sort of component to be able to toggle that display whereas these ones are always visible so it doesn't really matter so that's why we need to have a flexbox here and the way to do that is by just adding a media query on the display and that big screen sensor is going to make it none and then at medium screen sizes we're just going to make the display Flex which is going to make it visible so let's actually start building out these icons and this is going to have some other properties as well we're going to make a line to be Center and we're going to make the border right to be one pixel solid and the Border color is going to be Gray 200. all right so each icon individually is going to be its own Flex box with the icon component from Chakra inside of it and the way we're going to use these icons from react icons is by passing in a prop as to our chakra icon component and inside of as we're going to give it one of these icons so this first one is going to be our BS Arrow I don't know why I'm not getting autocomplete Circle and each of these icons is going to have a margin right 1.5 a margin left of 1.5 a padding of one a cursor equal to pointer because they are clickable in order radius of 4 and then when we hover them we're going to add some hover styling and we're going to make the background Gray 200. and this is what that hover effect looks like the reason we applied this Flex container to our icon is so that we can apply this hover effect as well as the Border radius and the display Flex ensures that it is centered in the container perfect so once we've done one icon we can do them all they're all very very pretty much the same so we can just take this and duplicate it we'll start with the three left ones and this one is going to be our i o filter Circle icon which is supposed to represent like creating a poll on Reddit and then this third one is going to be our uh video cam IO video cam outline and now one downside to react icons is they don't have standardized sizes they're not all the same size so sometimes you have to play around with the font sizes to make them appear the same so uh for this first one we're going to give it a font size of 20 and these other two we're going to give a font size of 22. 22 and the way to add multiple cursors is to basically just do um option click you can add as many as you want and type in multiple places which is super cool and now we can work on the right side icons so similar thing these are always going to be visible which is why again they're just in a fragment and I'm going to grab one of these paste it in there and this first one is going to be our chat icon our chat dots and we are going to duplicate this again three times or twice I guess and then the second one is going to be our notifications notifications and the third one is going to be add icon grad for like creating a post perfect and we're going to make the font size of these last three to be 20 just because they do appear a bit larger and the way to select duplicate instances of something in this case a repeated 20 is to do um you highlight the first one and then you press command B and that'll highlight all of the next occurrences of that thing I have a I have a video on my top five vs code shortcuts do check that out I think everything I've mentioned so far is in that video so um yeah maybe you go stop and watch that by now and that'll help you with this project and uh just to show you the responsiveness in Mobile screen sizes those left icons are not visible also we're going to make this plus icon not visible at small screen sizes as well so we're going to again add the media query on our display and we're going to say base none and then add medium between sizes we won't make it Flex so that's only the chat and the notification one are visible in Mobile which is the same as Reddit awesome so we are completely done with icons now we can close this we are not going to look at them again and we can start working on that little directory menu in the top right corner here all right so let's create our new menu component so inside I've read content I'm going to create a component called usermenu.tsx and I'm going to use our snippet and what I'm going to do is come over to the chakra docs if you just search for chakra menu and you come to this page here we're basically just going to grab the code for this component here and modify it to look how we need it to look so I'm going to grab this and that's what we're going to return inside of our component here and then we can just automatically import everything command period add all missing Imports perfect so basically the menu button represents the actual thing that you see that is going to trigger the menu opening and then there is a menu item for each thing that you see inside of the menu okay so let's make some modifications to make it look like this our menu button is going to have that little Reddit icon with the Chevron down thing and then when we're logged out it's going to appear as just that regular sort of Avatar icon and that's the same behavior as Reddit they have this Reddit icon with the Chevron and then if you log out they have just this Avatar looking thing and I tried to find Icons that were most similar to the real Reddit but of course sometimes you can't find the exact ones you have to sort of just use something that's similar okay so let's actually implement this let's go comment this in and import that and actually named it user menu and let's go to our app and we can see that we have this dropin menu now so let's come back and make those modifications so since our menu button does change depending if a user is logged in let's go actually pass our user to our user menu so that we can make those um adjustments when we do need to make them so we're going to say user is equal to user and then we're just going to forward that as a prop to our component and we can do the exact same thing as we did before with making it null undefined for user okay so now we have access to the user and we can do some conditional rendering so I'm going to grab the user from our props and I'm going to remove this actions text and replace it with a ternary operator that's going to say if there is a user meaning we are logged in show something and if there is not a user show with something else and that's something else for right now this is going to be a div that says no user and if we are logged in let's show user perfect so we are currently logged in so we can see that it says user so we can remove this as button thing we can also remove this right icon let's work on now what this did is going to be if we do have a user so if a user exists we're going to add a fragment here and then we're going to have an icon and I'm just going to paste in all of the icons that we're going to use here which are just going to be three different icons and then this icon is going to be the fa Reddit Square and then let's make some minor CSS adjustments to it we'll say font size is going to be 24. we're given a margin right of one and then we're going to write the color gray 300 and we're actually going to wrap this fragment in a flex box there's going to be two Flex boxes actually but for now we'll just use one and then I just need to import that from Shopper UI awesome and that just centers the icon without the flexbox you'll notice that the icon kind of is not centered there so that is why we have a flexbox there and then we can also add that this is where we can move that Chevron down icon in there and we're also going to add another Flex box so there's going to be two which might seem a bit unclear right now but it will make sense in a bit as we build this up and then we're going to make both of the Align on these to be Center just like that and that centered that Chevron there cool so now this opens up the menu we just need to style it a bit now let's come up to our menu button and add just a few Styles we're going to make the cursor pointer our padding is going to be your pixel is six pixels and then our border radius is going to be four four is going to be sort of our standard order it is for everything in our app and we're going to give it hover State styling of an outline of one pixel solid and our outline color is going to be Gray 200. awesome and that looks like this nice which is very very much the same as Reddit awesome so let's come back here and let's just quickly replace this because it's going to be super easy we're going to have an icon and that icon is going to be vs C account that's one of the icons we imported from react icons and this one have a font size of 24 color of grade 400 and a margin right of one now let's actually build out the proper menu items here so right now we have as a bunch of random ones that would come with the default component so let's just get rid of all of these keep one of them and then inside of our first one this is what we're going to have so our menu items are going to look like this we're going to have a flex box and then inside of the flexbox there's we're going to have an icon and this first one is going to be an icon called CG profile and I guess I did not import that and that is coming from react icons it's c g so let's go quickly do that c g profile here awesome and then we're going to have the text profile perfect so let's go back to our app and see what that looks like okay so that is there but it looks kind of terrible so let's fix that up okay so the Align on this is going to be Center and then our icon is going to have a font size of 20 and a margin right of two perfect that's looking a bit better and then let's come up to our menu item make our font size equal to 10 point our font weight equal to 700 and our hover state is going to be have a background of blue 500 and the text color is going to be white so this is what that looks like let me hover over it it has that blue and it makes the icon and the text white perfect now our second one is going to be pretty much the exact same thing we can copy this paste it down here except this is going to be actually log out say log out and we just need to import one more icon from react icon so I've got to import these last two it's going to be react icons slash MD and it's going to be MD outline login perfect now let's go change it there MD outline login and that looks like this and you'll notice on Reddit that they have this divider I don't know if you can see it there it's a very subtle Gray Line Between all of these and the logout one so let's quickly add that chakra makes that super easy with their component menu divider make sure that's imported and now we have that nice divider there okay and all we need to do now is add our Firebase logout function to our logout menu item the exact same way we're doing it before with that logo button so we can just add an unclick to that menu item and this on click is going to call our sign out method from Firebase auth make sure it Imports and then we're going to pass this our auth object from Client app so now if I actually click on this thing I should be able to log out and we'll see the display has changed there and then if I log back in as chattahoo we can see that the navbar updates and we are now signed in and I think we have to make some minor changes to our flexbox up here I think I might have done something wrong um so we just need to move these Flex containers outside of our ternary operator so this might be kind of weird to change I'm going to move these outside like this move these two up top and we can move this icon out here between those two flexbox containers my apology for that that is kind of confusing to restructure but basically we just have to move the two Flex boxes outside so that this was centered and we get that Chevron there and then we can log in and then it appears the same way we have the Chevron icon in both the logged in and logged out state so something else we have to do in here is the contents of the menu changes when we are logged out when we're logged out we should just only see the option to sign in if you go to our demo if I log out we just have this thing log in and sign up and on Reddit they have a menu with a bunch of more options but these are features we're not going to build so we're just going to have the login sign up thing which is just going to open the model so it's going to be very very easy to add so let's go back to our app so basically our menu list content is just going to change depending on if there is a user so right inside of our menu list we can add another Turner operator that's going to check for the existence of the user and then our first thing we can have is a fragment our second thing can be a fragment as well our first fragment if there is a user is going to be everything we've already written all these menu items up here just like that and if we're logged out we just need to show a menu item that prompts the user to log in we want this to say login slash sign up just like that and so then we just need to make this actually open that login signup model the way to do that is we can import our recall State Setter function on set auth modal state is equal to use it's set recoil State pass our auth model State atom come down here and do what we've already done a few times now on this menu item we do not want to sign out we want to add it on click that is going to call that set off modal State and the state we want to set it to is going to be open true and our view is going to be log in by default so now if they actually click on this login signup thing it opens the model which is exactly what happens on reddit.com and we can sign in directly from here and that seems to be working completely fine and also you'll notice on larger screen sizes that this text appears with our username and the karma so let's quickly add that all right so for that Karma text I'm just going to paste it in here from my other repo because it's only about 10 lines and then I can just explain what's going on so I'll paste it right here beneath our Reddit icon and what that looks like is like this you can see that my name is there as well as the user Karma and that little orange icon thing so basically this is just a flexbox with some additional styling applied to it the most important part is here and the reason we have both of these is because if a user authenticates with Google they will have a property on their user object called display name which is coming from their Google account and then if they authenticate with email and password they will only have an email they will not have a display name so basically this just checks for the existence of the display name and if it does not exist it will show this so what's happening here is that when we split a string at a certain character it's going to give us an array and by accessing the first index of that array we're taking all of the text to the left of the at sign in the email which in my case is shad merhi and so one of these two things are acting as the user's username and you'll also notice down here that I have hardcoded the karma of the user and I'm going to show you in a bit how to add custom properties to this user object and that is what's going to lead us into our discussion of cloud functions because right now with Firebase we cannot add additional properties and this is something that is written in the Firebase docs they do not allow you to modify this particular object if you want to add custom properties things like Karma or username or anything that is not on this base user object we do need to store it in another database table and then we can make those modifications but we will see more of this when we get into Cloud functions and it'll make a lot more sense then alright so we are now completely done with this user drop down menu component it is fully functional for both logged in and logged out users and we can now work on this community drop down menu and start to get into more of the communitybased logic of the app all right you guys we are so close to being done at this nav bar all we have to do is add this community drop down menu and make it a little bit responsive and it's going to be extremely similar to our user menu that we've already created so let's go ahead and do that all right so I'm actually just going to copy everything from inside of this file user menu and then I'm going to come to my directory and inside of my nav bar I'm going to create a new directory called directory because we're going to have a few child components inside of here and inside of here I'm going to make a new file called directory which is going to be sort of the root of the directory I feel like I said directory about eight times now directory.tsx use our snippet actually we don't even need the snippet I'm just going to paste in everything that we have and then I will save that and the parent of this directory was navbar we defined it here before but we just never used it and now I'm actually going to import it from that directory import directory from directory I called it directory because it's kind of a community directory a sort of the naming behind it you can see that in our app we have this icon thing and then there is a dropin menu but it does not look like we need it to look like ours it needs to look like this with the icon as well as the different content okay so let's come back to here and let's get working on that so inside of directory we can get rid of all of the userbased stuff because we're not even going to show this component at all unless a user is logged in we're going to get rid of all of this this entire ternary operator let's get rid of that so that we have an empty menu list perfect and then also can get rid of this user ternary operator as well so now we just have the foundations laid out for our component just so we don't have to write it completely from scratch and we're not going to need this and we are actually not going to take in any proxy here there is no conditional rendering at all no problems and then we can clean up all the Imports because there is a ton of not used stuff in here so we can just use that organize Imports command from vs code reminder if you forgot how to do that command shift p and then search for organize Imports and you can do that perfect so now we have this very simple drop down that is empty so let's work on our menu button and we basically just have these two Flex boxes to Center everything that we're going to put inside of here and make it all look nice and aligned so I'm just going to quickly import this home icon into here and I'm going to be from react icons it's going to be from react icons slash TI and this is going to be the ti Home and these subdirectories in case you're wondering I can't remember if I explained this if you go to react icons.com and if you just go into the documentation here um basically if you search for anything like home they have a huge library of icons and whenever you click on one let's say you like this one the first two letters are r i and that would mean that it would come from the subdirectory r i uh in case you were wondering I can't remember if I explained that I apologize if I did not all right so inside of this inner Flex box you want to add that icon all right so we're going to say icon as TI home and then underneath that we're going to add some text oh it's actually an import from Chakra and we are going to put home here for now and when we actually start getting into the creation of communities we will toggle this to show the current community that we're on but in order to do that we need to know which Community pager on and we have not yet created Community Pages yet so for now we're just going to hard code home and this icon we're going to add a font size of 24 and a margin right at Mobile screen sizes it's going to be one and at medium screen sizes it's going to be two and this is the kind of just finicky stuff that really really makes the design replicate Reddit and make everything fit in there nicely and this text also needs a media query on it because you'll notice that on certain screen sizes it is not displayed because there is just no room for it so what we need to do to solve that is to create another flexbox and then actually put the text inside of there and add a midi query on it similar to what we've done already we're going to make at base screen sizes it's going to be none and at large screen sizes it's going to be flex and let's make the font weight of this 600 and you'll notice here that if I'm hovering over this button there is not any space between it and the search bar so what we need to do is just add some additional margin to that menu button so what that's going to look like is the left one or the right one is always just going to be two then on the left we're going to also change this with screen size and we're going to make it at base screen sizes it's going to be 0 and the medium screen size is it's going to be two and these media queries just help it look really good on all screen sizes to make sure that not everything is squished I'm just going to make the font size of this to be equal to 10 point and that shrinks it down there nicely and that looks good and then we also just need to adjust the width of this container because you'll notice that in this demo it gets larger so in order to achieve that we need to come into this outer Flex box here and say justify is going to be equal to space between that's going to make sure there is the maximum amount of space between every child of this component and the two children in our case are this flexbox as well as this Chevron down icon so it's going to maximize the space between these two things here and then to add that responsive width I'm just going to add a media query on the width at Bay screen sizes it's going to be Auto so it's just going to take up as much space as it needs and then on the large screen sizes we're going to cap this at 200 pixels and this is what that looks like so you can see it grows and it looks great on all screen sizes if you go on reddit.com and you play around with the responsive myths it's the same thing all right and the most exciting part of this entire Dropout menu is what's inside of the menu list and the menu list is going to be the communities component and this is where we're going to start to get into the very very exciting Reddit functionality where we can actually create communities and join communities and that logic is going to happen inside of here and that is coming up very very shortly so for now I'll leave a blank component and I'll just put the text communities in there so we can get excited about communities one last thing to make the behavior of the snapbar pretty much exactly the same as Reddit is to just modify the width of the search bar if a user is logged in you'll notice if I go to the demo the width of the search bar just sort of takes up all of the space that it can that is available for it and if I log out it is capped at a certain size you'll see that it stops growing and it's very simple to do it similarly I think a few lines so all we need to do is come over to our nav bar and just pass the user to our search input exactly like we're doing below come to our search input and I mentioned that we're going to take in a user here long long ago so let's actually take that in now it is going to be a type user wrap it from our props through destructuring all we're going to do in here is add a single line to this flexbox a Max width property and we are going to say if there is a user the max width is Auto and if there is not the user cap the width at 600 pixels so we're getting an error here it's user that is not defined and that's because we just need to add that same type to our prop type and that should solve that never mind it does not at all oh a user uh let's just passed in the user object user was not defined and we only want to show this directory if the user is logged in okay so if I log out we can see that the directory is not even displayed you'll notice that if we start playing around with the responsiveness when we're not logged in it gets really really janky so we just need to add a few properties to these Flex containers here on this outer one I'm just going to add Justified content or Justify for short on medium screen sizes we want this to be space between and that is going to make an even amount of space between all of its child components and then on this one here on this inner content we want the width to be responsive as well we're going to give it a 4 40 pixels at Mobile screen sizes and then on medium screen sizes and up we're going to give it auto width and then our margin right is going to have a base margin of zero and at medium screen sizes it's going to be 2. and now we should see a complete responsiveness with our navbar and we can see that that search bar container is capped at that width and that looks really good all right so we are completely done with the nav bar the only thing that's going to change is that we're the only thing that's going to change is that when the only thing that's going to change is that this icon is going to be dynamic depending on what community that we're in it's going to display the actual Community icon and we're going to do that logic using a custom react hook that we're going to build once we are able to create communities so let's now create the model to actually create communities that we can access through this drop down menu so if I go to the completed project and I open this up here when we click this we want this to pop up and we'll actually be able to create a community so that is our next goal let's get going on that all right you guys let's build this model I'm honestly just super pumped about how this looks it just looks so clean I love it all right so let's go back to our app and start building this thing so we saw that inside of directory we already defined where this model is going to be so let's actually bring that back in and go and create that component save that and let this error out and this component is going to go inside of this directory directory maybe the word directory was a confusing name I honestly did not even think of that when I was building it how confusing that would be so let's drop our snippet in here and save that and let's come back here and import it I'm just going to refresh here okay so we have our component have a good coding which doesn't really make sense not sure who made this snippet but it doesn't make sense whatever it's still a useful tool so inside of here there's going to be a bunch of stuff but for now this is the structure that we're going to create we're going to have a fragment and this fragment is going to have a component called create Community modal so since this thing is a modal we're going to put it along with any of its children inside of the moral directory and we're going to give it its own folder called create community inside of this create Community we're going to create another file and this is going to be the root of the create Community model so we're going to call it create community modal.tsx inside of here we're going to use our snippet and I'm just going to come down here and I will put in community Perfect all right now let's come back to here and just import that and we should see it in there now this is actually going to be a menu item that is going to open an actual model and we're going to need a menu item from Chakra and the reason we're using a menu item is because the parent of communities is a menu itself and so that's why we're using a menu item all right so inside of this menu item we're going to have a flexbox and this is where we're actually going to put that text create community but we have an import effects yet so let's do that save that and also inside of this Flex box we're going to have our icon and our icon is going to be the same icon that we're using in the nav bar here it's going to be the add icon and that icon is coming from react icons slash g a it's right GR and this is the gr ad icon just like that and then inside of here we're going to say icon as PR ad awesome and what does that look like perfect so now we're going to Center this I'm going to say align Center that will Center that there and we're just going to adjust the size of this text and this icon so our icon font size is going to be 20. I'm going to give a margin right of 2. just so there's space between there okay and on our menu item we're going to give us some Styles as well we're going to give this a width of 100 a font size of 10 point and then on Hover we're going to give it a background of gray 100 and we can also add the on click because this is the thing we're going to click on when we're actually going to want to open the modal so because we need access to the open state of the model in this component as well as inside of the model because the model needs to know if it's open we are going to Define that state in this component so we're going to say open set open and it's going to be used State and we're going to say false starting off we don't want to be open initially and then this on click is just going to call that set open and set it equal to true and then we can just pass open as a prop to the create Community modal so let's go to create Community modal and this is going to take a prop in that is a Boolean and then we can destructure that here awesome so now I'm going to go to the chakra documentation and grab that model once again similar to what we did before with the authentication modal and I'm going to grab this one here because it has a footer which we're going to need if you look at the demo one we have a footer there so I'm going to grab the one with the footer I'm going to grab the entire return statement and that is what just like that and then I'm going to Auto Import all of this stuff at all missing Imports and we're not going to need this button because the thing that opens our model was this menu item out here so we can get rid of that button completely and so we passed open as a prop to this community just a second ago so that is what I'm going to say here I'm going to say is open is going to be that open Boolean there and I'm going to actually add another prop that we're going to take in called handle close and this handle closed function we're going to pass it as a proper over here handle close and all of this function is going to do is just going to be a callback that calls set open and sets it equal to false and the type definition of this function is just going to look like this it's just a callback function that does not return anything and when a function does not return anything we can just say void and then we're just saying that the type of this function is an arrow function that takes in no arguments and returns void that's all this means and in the future we will see some more interesting type definitions for functions all right and then we can accept that prop here by destructuring it and then and then on close we can call handle close let's get rid of this lorem thing because all that is is just text here is the modal body I'm going to write and then here we can also just call handle close perfect so let's go see what that looks like we have an error what is going on here I don't see oh something down here I think we're just missing that bracket there there we go okay so let's see what this looks like so I open up this thing I click create community and Bam we have our modal I can close it nice and so now all we have to do is just build the inside of this model and these buttons are going to look slightly different but for now I'm just going to make this say create community because it's kind of cool because that's actually the button we're going to click on the create the community so it's exciting it's going to look like this all right so now we're going to start building out this modal this component is going to contain a lot of interesting things it's going to have all of the logic necessary to create a community so it's going to be interacting with our firestore database and it's going to be our first Glimpse at creating firestore documents we're also going to get to see database transactions and batch rights for the first time so it's going to be very interesting and do not worry if you do not know what those are I will explain them when we get to them but before we do anything that has to do with firestore we actually need a component to interact with so let's build out the UI for this model I just want to close the directory on the left so that we have a bit more room because this component is a bit long and let's start off with this header so the header is going to say create a community just like that and we're going to add some styling to here so we're going to make the display Flex the flex Direction is going to be column we're going to make the font size just a bit smaller we're going to make this 15 and we're going to give it some padding of three just like that so underneath the header we're going to have a box component and a box is just a div and we don't need flexbox here so that's why we're just using a generic box and we're going to put everything except the footer inside of this box so we're basically just giving an extra container to our model body so that we can apply some additional styles to it and we're going to give a padding left of three and a padding right of three and we had to wrap the body inside of this extra box just so that we can apply this additional padding here I was playing around with trying to do it on the body and it was just kind of weird and so to get it to look exactly like Reddit I just added this additional box here and that seemed to work great and our modal body we're going to add some properties as well we're going to make the display Flex and we're going to make the flex Direction column and we're going to give it some padding and that padding is going to be 10 pixels so top bottom 10 pixels and right left zero pixels and I'll add a border here just so you can have an idea of what it is that we're looking at there okay and inside here we're going to have some text from Chakra X is going to be name and this text is going to have a font weight of 600 and a font size of 15. and underneath this text we're going to have another text and this text is going to say community names including capitalization cannot be changed this is just something it says on Reddit there must be some rule they have and our font size of this is going to be 11 and our color is going to be Gray 500. awesome all right underneath this we're going to have another text and this text that we're about to add is this part here it's the subtle bit of text this R forward slash inside of the input and styling this was honestly quite tricky I had to inspect the real Reddit styles for a while to figure out how they actually did this because it's kind of weird there's just a bit more to it than meets the eye but I ended up figuring it out so let's proceed all right so this text is going to be the r forward slash let's go back to our app so we have the R4 slash and underneath this is where we're going to have the actual input for the community name and this input is going to be the actual input that the user puts the community name in that they're creating so let's go create some state so that they can do that I'm going to call it Community name and set community name and it's going to be initialized as an empty string now on our input we're going to have that be the value so our value is going to be that Community name variable and we're going to use a size of small and I'm actually going to remove that order red because it also applies to the input it looks really bad so let's remove that and um here we're going to give this a padding left of 22 pixels and then this has to tie into that weird R forward slash thing which I'll explain in a second we're going to add an on change function here which for right now we're going to make an empty callback function and now let's actually position that bar to be properly positioned inside of the input as it appears here so this is the reason we added this padding left to that input there we need to use it relative and absolute positioning so what we're going to do is we're going to make the position of this input relative and then we're going to make the position of this text also relative and this allows us to basically customize the position of this particular component and what I mean by that is we can specify like how many pixels it is from the top of its parent container in our case it's 28 pixels and from the left it is 10 pixels and the width of this is going to be 20 pixels so kind of weird this is literally exactly what Reddit is doing this is the same method they use so blame them if you think that this is weird and then also the color of this is going to be grade 400 it's a bit lighter don't need these brackets awesome so that's looking pretty good all right and then underneath this input there is a text that indicates how many characters we have remaining so if you want to say some number characters remaining and that number we're going to need another state variable I think what is the default I forget default is 21. it's going to say 21 characters remaining but we need to make this actually a dynamic value so let's go up to the top and let's create that character's remaining state so Char's remaining set chars the meaning is equal to use State and we're going to initialize it as 21 and while we're here actually let's create that handle change function that our input is going to use because it's inside of this function that we're going to recalculate how many chars we have left in the name so then we can come back down to here and place that on our input so it's going to say uh not on change handle change perfect and inside of this handle change function it's going to implicitly take in an event like we saw with our other inputs in our login and signup forms is going to be a react.change event and the type of element that is outputting this event is an HTML input element okay so we need to do a few things inside of this function so the first thing we need to do is actually update the community name state by using the event.target.value that's the current value inside of the input that the user has typed and then the way we're going to recalculate how many characters we have remaining is like this we're going to say set charge remaining and we're going to take the total amount they have available which is 21 and subtract the length of the string that they have currently entered and that's going to be the characters remaining also we do not want to set community name if they are over that limit so we can do that by adding a check here that says if event.target.value dot length is greater than 21 and just return do you not want to do any of this we we just want to exit the function so this is a guard against going over that limit so what does this look like now when we type in here hello there that's not updating it's because uh I forgot to change this to charge remaining okay so now if I type in there hello there how are you we can see that it doesn't let us go past that limit so we're only allowed 21 characters cool and let's modify this to be red when they have hit their character limit and so the color of this is going to change depending on the value of characters remaining so we can check does charge remaining equals zero if it does let's make the color of this red and otherwise let's make this gray 500. so you can see it's gray and if I hit that limit it turns red which is perfect very very intuitive and we're also just going to make this a tad bit smaller so we'll make this font size equal to 9. just like that okay that is super clean I love this UI so much okay now underneath this text we're going to add another box component and in this box this is where we're going to have that Community type selection list just like this so the first thing we're going to put in here is going to be text and that's going to say community type and we're going to write the fine weight a little heavy and the font size is going to be 15. nice and let's add some margin top and bottom to this box container so that there are some space between it and the character input so let's do some margin top of four and the margin bottom also four so now everything's laid out pretty good all right and now this is where we're actually going to put that checkbox component and the checkbox is going to be a component again from Chakra that's going to be wrapped in this stack component and what stack is is it's basically just a flex box that is going to automatically handle the spacing between all of its children for us so we can capacitate a problem called spacing and I think the default is two and it basically just spaces everything kind of evenly between it like that just like that they come in handy when you have you know stacks of things that are space evenly and in this case that's what we have with our checkbox all right so inside of our stack we're going to have three checkbox components from Chakra so we can just duplicate this and the first one is going to be a public Community type the second one is going to be restricted and the third one is going to be private those are the three Community types you can have on Reddit okay except we're only allowed to have one of these right you can only make one but there's a problem we can currently select multiple so we need to implement some logic that will only allow us to select one of these so the way we're going to do that is we're going to declare another state variable that is going to be called Community type I'm going to call set community type and it's going to be use State and the default is going to be public and these checkbox elements also emit an event just like any other input does and we can use that event to actually know which Community type we have selected so if you recall from our login and signup forms we had it built that on change function that basically took in an event and it used the name of the event Target to update State and we're going to do pretty much the exact same thing here with those check boxes so I'm going to create a function called on community type change and this is going to take in an event and that the event is going to be a react dot change event and still the type of it is an input element because a checkbox is just an input element that's all it is and inside of here we're going to we can set community type to be the event.target dot name but we did not add yet names to our checkboxes so the name of this we're going to make public because we need these for the event to actually know which thing was clicked on the name of this is going to be just restricted and the name of this is going to be you guessed it private and checkbox input elements have this property called is checked and is checked is a Boolean that represents whether or not this thing is checked but since this is a Boolean I can add some logic to actually toggle that check state so in our case we only want this public checkbox to appear as checked if Community type is equal to public and then the ones down here we only want this one to be checked it's a community type is restricted and we only want this one to be checked if the community type is private so now only this one's checked but we have not added the on change function to our inputs yet so let's do that now so we're going to say on change we're just going to call that on checkbox or on community type change and I'm going to place this on both of these other check boxes so now when I actually select one of them that state is toggling and we're only allowed to select one of them perfect that's exactly what we need all right so we need to style this input text slightly different so in order to do that I'm going to create a text element put the public text in there and we're going to give this a font size of 10 point and a margin right of one and the reason we have a margin right is because we're going to put another thing of text that explains basically what a public Community is so a public Community has the description anyone can view post and comment to this community and in order to make these two things appear properly we need to add them in a you need to wrap them in a flexbox like this import Flex from Chakra and make a line equal to Center now they are aligned properly but we need to change the size of this so let's come to this description text here and I'm going to make the font size eight and the color is going to be gray 500 padding top of one awesome and that looks really really good so we can do the exact same thing with those other two so I'm just going to copy this Flex box here paste it here you can just do restricted and the description for a restricted community is anyone can view this community but only approve users can post same thing down here I'm going to paste that for private changes to private any description for private communities is only approved users can view and submit to this community now the only thing missing from each of these checkboxes is an icon just like this here so we're going to quickly impart those three icons and those icons are going to again come from react icons and these are those three here so we have one coming from the hi sub library and two of them are coming from the BS Library okay so we're going to need our icon component from shortcut UI and our public one is going to be vs fill percent fill I hate when you don't get autocomplete and the color is going to be gray 500 and we're going to give it a margin write of two just there's some space there let's copy this icon component and come down to restricted and our icon for restricted is going to be BS fill I I fill fill I and then private is going to be hi logged close nice all right so this is looking a little bit weird we are seeing some overflow and the text is a bit too long and luckily for us chakra has multiple model sizes and all we need to do is just pass a prop with a string with the size you would like and we can just specify a large and that widens it a bit all right awesome and the last thing we have to do for this modal UI is just finish up the footer let's come down here so we're going to give our footer a background of Ray 100 and a border radius zero pixels zero pixels 10 pixels 10 pixels and if you have not seen this four input notation before for Border radius basically just each one of these corresponds to a specific corner so the first one is this then this one then this one and then this one so it goes in a clockwise rotation okay so this first button is going to say cancel instead of close we can get rid of this color scheme thing here we're going to make the variant of this outline and we're going to give it a height of 30 pixels just like that and then our create Community button is also going to have a height of 30 pixels and we can just get rid of this variant because by default it's going to have that solid fill variant and we're going to add it on a click here which is going to be the on click responsible for actually calling the create Community function when we have that created but for now we will leave this empty and we are now done building out the UI for this model it's looking super super good this was a longer component that did take a while to build I hope all of that makes sense and we can now get into more of the back end logic of actually creating communities and we're going to start creating Community documents in our database and in doing that we're going to get to see database transactions and batch writes and it's all going to be super exciting we're going to learn a ton about Firebase all right so the first thing we're going to do is inside of our create Community modal we're going to create the function that's actually going to be responsible for contacting our firestore database and actually creating the community so let's create that now we're going to call it handle create community and this function is going to need to be asynchronous because we are going to be communicating with our database which our asynchronous operations so just use the async keyword there so there are a few things we're going to do in this function the first one we're going to do is validate the community name I'm going to make sure that this name is valid that it is between 3 and 21 characters which is a requirement of Reddit and that the community name is not already taken by someone else because on Reddit Community names are unique so only one Community with a specific name can exist so we need to check for that the second thing we're going to do is actually if it is a valid Community name we will actually create the community document in firestore perfect now before we can actually communicate with our five star database we do need to create it so let's go back to our firestore sorry Firebase console and all we need to do is just go to Cloud firestore you can access it from this giant card here or you can uh access it from the firestore database tab on the left here and just go into that and all we need to do is just click create database and this model is going to pop up asking you if you'd like it to be in production mode or test mode and in production mode this just says rights are not allowed you have to write your own Custom Security rules for production which we are going to do later for now we're going to use test mode which is basically just going to allow read writes by anyone at any time which is perfect for development so let's click that and then it's going to ask you to set a location just use whichever one appears for you first I think it's a region based so depending on where you are in the world it'll give you the optimal one so you can just click enable now it's just going to actually create those resources on the Google servers all right so perfect here is our empty database on the left we're basically just going to have a column of all our collection names so communities for example is going to be a collection post is going to be a collection comments is going to be a collection and then when you click on one of those things and go inside of it it'll show you all of the documents inside of that collection and a document is basically just a JavaScript object inside of a collection at the top here there is a section called rules and this is what we briefly saw in that model this basically just allows you to lock certain parts of your application and allow only certain users or user types to read or create certain documents or delete certain documents and we are going to write our security rules later once we have posts and comments being created by the users and then we have indexes which is basically not really important for now it allows Firebase to efficiently query your data we will add some indexes to our database in a little bit but it's super easy it was just a single click of a button it will add like so nothing to really worry about here and the usage just indicates the activity going on in your database in terms of read writes and deletes so you can kind of monitor what is going on in your database and how heavy the load is for now we're only going to be really concerned with data that's just a little brief introduction to the cloud firestore console so once we create the community collection which when we call this function for the very first time that collection will be created we will see it in here and we'll also see the document of any community that we create inside of my collection as well and the way in our app we're going to access our firestore database is going back to the client app file that we saw earlier it's going to be through that firestore object right this fire this get the firestore is basically going to give us access to our database so we're going to be importing this in any file that we're trying to read write trying to do anything with our database okay so let's start off with this function so since we're doing some Community name validation we do need to add a error state to indicate to the user if something goes wrong so we just need to create error and set error and that's going to be equal to use State and it's just going to be a error message string that we're going to initialize as a false and once we have created that error let's just go quickly add the piece of text that's actually going to show that error if it does happen that's just going to be underneath this character's remaining text we're going to add a text here with that error actually inside of it so just do error and The Styling we're going to apply to it is just going to be the font size of nine point and a color of red and then just some top padding of one awesome let's go back up here and let's come back to our app over here so to make sure that the actual name String is valid we need to check that it does not contain any special characters and then we're just going to make sure that it is at least three characters because we're already validating that it's 21 characters with our character count so we need to check for a length of at least three so basically we can check for special characters inside of our string using reject now I found this Solution on stack Overflow for this I will link this in the description but basically we're going to use rejects to make sure that nothing inside of this particular array is going to be inside of our community name so all we need to do is just copy this really weird looking thing over to our file I'm just going to change this to a constant variable and all we need to do to test that our name does not contain any of those things is to just say format DOT test and then pass in our community name this is basically just going to do a quick check on all those characters and then we have to also add or if Community name dot length is less than three we're going to set an error saying that Community names must be between 3 and 21 characters and also we'll ADD and can only contain letters numbers or underscores and this really ugly looking reject expression basically just checks for valid string characters and also if you do get this error we just want to return out of this function because we do not want to actually proceed with the creation all right so let's come back to our app all right so inside of here we're actually going to now create our community we need to basically check that name is not taken and then if valid name create a community so the way we're going to check if a community exists is to create what's called a document reference this document reference is basically just a reference to a specific document in our firestore database and the way to create a document reference I'm going to say cons Community dot ref is equal to Doc now this doc function is coming from Firebase firestore so make sure that's imported and then we're going to pass it our firestore object that I was talking about just a few minutes ago from our client app that's how it's going to connect to our actual database and now this doc function as a second argument we need to know which collection we're actually looking at like a document in what collection and so the second argument is going to be that collection name and that collection name right now is communities and there's a third argument we need to know the ID of that document and in this case the ID is going to be the community name because names on Reddit are unique we can use the name as the ID so just to read over this one more time for clarity so this is basically just a document reference to the communities collection and it's referencing the document with the ID Community name however this is not the document itself this is just a reference and this is basically just how it works in Firebase we have document and collection references and then we have the documents and collections themselves and then we can use those references to actually read and write from those two things respectively and this will become a lot more clear once you start working with them a lot more and we always just pass our firestore object as a first argument this is basically just a requirement by any of the firestore functions provided to us because they need to know which database they're actually looking at so now we can actually go and try to get that document with this document reference from our firestore database and the way we're going to do that is we're going to say cons community doc this is going to be the actual document this was just a reference to the document this is going to be the actual document we're going to get and the way to do that is going to use a function called get doc provided Again by firestore and all we need to get this function is a document reference so that it knows which document to get and that is going to be our reference just defined above which is community.graph perfect and we are going to see this so much we're going to be working with this get Doc and Doc all these functions we're going to see a ton we're going to be doing a ton of document references so this is the first look at it so if it is kind of weird do not worry it will become very very clear and with repetition it becomes very intuitive so now we can check does this document actually exist like is if we go and grab this document is there anything there well lucky for us Firebase has a method on their documents called exists and this is going to be false if it does not exist and true if it does so they were saying if this document does exist meaning that this community with this name has already been created we need to alert the user and we're going to say set error sorry name is already taken try another and actually the exaction on Reddit is going to be the string sorry R forward slash name Community name is taken please or I'm not even please they don't even say please how could they not say please try another and the way to do this is just with the attempted literal the back pick notation in JavaScript awesome and then we can return out of this function because we do not want to proceed after that if we get to here line 75 we have a valid name we have a unique name of a community that has not been created yet so now we can actually create the community and the way to do that with a single line we can just say await set Dock and set dock is a function provided by Firebase that will either update the existing document or create a new one and what we need to pass this function is a reference to our document so we can say community dot graph and then we're just going to pass a JavaScript object which is going to represent the data inside of that actual document like the actual content of the document and our community documents to start off are going to have a Creator ID which is going to be the currently signed in user's ID because we ourselves are creating the document we're going to pass a creative at timestamp to know when this thing was actually created we're going to have a number of members so we know how many members are in this community and then we're going to have the Privacy type and our checklist is going to indicate that are we public private or restricted and we could put infinitely many things right I'm sure Reddit has a ton of stuff stored on their community in their database but for now this is going to work perfectly for us so we actually do need the Creator ID and to do that we need our user so let's call that use off State hook we can import it up here we can say const user is going to be equal to use auth state to make sure that imports from react Firebase Hooks and then pass it our auth object from our client app file awesome now we can come down here and we can say Creator ID is going to be our user.uid the created at value we're going to call the function called server timestamp and this is basically just going to create a timestamp of the current time and the server timestamp is a function that is coming from Firebase firestore so make sure that that Imports up top here our number of members is going to be initialized as one because when this community is created we are going to be the only member and the Privacy type is going to be our community type which is coming from our checklist and get rid of these comments and we just need a comma here so now we have actually valid code to create this document so let's test this out and see what happens and before we do that actually I'm going to also create some loading scene up here so that we can indicate to our user that the creation is in a process so loading set loading is equal to use state and we're going to initialize it as false when this form is submitted meaning that they click on the create Community button after this validation has been done and it's going to actually start going to talk to our firestore database I'm going to set load loading to be true and then when this successfully completes I'm going to be set loading false and actually what I'm going to do is wrap all of this asynchronous code in a try catch block to improve our area handling I'm going to create a try catch block and the way to do that in a shortcut is to just check the word try and this little menu will pop up and just click on this try catch thing and what we're going to do is put all the stuff that we want to try inside of our try block and then inside of our catch block meaning that an error actually occurred console log of the error so usually in my catch blocks I like to indicate what function actually produce the error so handle create Community error and then I can just log at the actual error and under here we're going to set error to be error Dot message we just need to give this a type of any and actually what we're going to do is up here instead of setting the error up here what we're going to do is we're going to throw an error and then that error is going to be caught by our catch block and then we will set that error down here it's going to do basically the exact same thing to change that is basically just copy this string here copy that we can get rid of this line and just say Throw new error and this thing just takes an argument that is a string and that is going to be the error.message that we received down here so same functionality and we don't need this return thing anymore actually because if we throw this error it's going to be caught by this catch block none of this is actually going to be executed anyway I'm gonna get rid of these comments just for to create a bit of room and then I'm just going to add a comment down here just for you guys so if you're reviewing this code later check if Community exists in due okay awesome so this looks pretty good I don't see anything wrong with this so let's try to actually call our function we have loading stage and everything which is nice let's come down here and when we actually click on that create Community we now have a function to call which is going to be handle create community and let's pass our is loading prop and let's make that our loading State variable perfect now let's see if this works so let's go to our database we can see that it is empty let's come over here and let's actually try to create something so I'm going to create a community called chatty chatty's community let's click create community and see what happens okay so something happened let's go see if it's in our database so let me refresh and boom check that out we have it has created a communities collection as well as a document with the ID chattis community and this is the data we're storing in that document so hopefully this gives you a visual idea of what our database is going to look like it's basically just Collections and then documents so we obviously have created a community let's go check our error handling so let's say I try to create this community again what's going to happen so check that out our error was caught down here handle create Community error and we displayed that to the user sorry this community name is taken try another how nice is that so let's create another one uh called new new and click create community that should have been created I'm going to also make it so that the error that I on submit I'm just going to check if an error does exist let's just set the error to the empty to that sort of a fresh submittal so this should have been created so I'm going to create a new one saying random random string and I'm going to click create Community awesome so let's go to our database and we can see that these have been added to our database and the data is actually real time which is really cool so watch this do hey dude and I create it watch on the left it appears there that is so cool and we're going to see how sick realtime data is this is so useful for like chat applications and stuff but this is cool it's super super cool I love firestore so now we can actually create communities all right you guys so now that we can successfully create communities the next logical thing we need to start thinking about is people actually joining these communities because without people inside of a community it's not really a community so this is going to lead into a really interesting conversation about modeling data with a nosql database and it's going to hopefully provide a really interesting learning opportunity for us to compare how we would model this type of data in a SQL versus nosql database I'm going to do some comparisons here so I just want to kind of think about like what actually happens when a user joins a community like from a data standpoint because there are two things we need to know from a community standpoint we need to know how many users are inside of a community and from a user standpoint we need to know which can communities a user is in so that I can go to my communities right our drop down menu in the demo does that these are all the communities that I am in and our entire feed and all of the posts that we see is built off of what communities that we're in and from a community standpoint I need to know how many members are inside of this community and let's think about the relationship between a user and a community a user can be a part of many communities and a community can have many users so therefore we have what is called a manytomany relationship now this isn't a course on uh database relationships but I do want to cover this a little bit because it's really important to understand this before we move forward if it's your first time using like a nosql database really good opportunity for learning I think so what I've done is I have created this diagram here which I'm just going to expand this over a little bit and basically this is how we would model this type of data in a SQL environment in order to model this type of relationship which is many to many we would need what's called a join table and this is a join table here right again a user can have many communities I can join as many communities as I want and a community can have infinitely many users uh so to model the many to many we would need a join table however in nosql we have a lot more freedom and we can store data completely differently pretty much however we want this does make our lives easier it gives us more freedom but it also introduces complications because you can run into scalability issues really fast if you don't think through how to best model your data in a nosql database now this again this is not like a course on like SQL versus no SQL but I do want to sort of compare a few methods here so I just wanted to show this diagram to give you a visual representation of how this relationship would be modeled in SQL let's look at how we might do this in a nosql database which fires store is all right so what I've done is I've created this temp.js file to kind of show how this freedom in a nosql environment allows us to develop many solutions to the same problem and we can model our data in many different ways normalization is not required and we can therefore have this nested structure here we can have arrays of strings we can have arrays of arrays of arrays of strings of objects of strings we can do like whatever we want with our data which is really great it can simplify our lives a lot but it does come with some cost because if we don't do it carefully we could run into some major issues down the line especially when scalability comes into play so what I've done here is I've just sort of created three different solutions here that we're going to go through quickly to sort of illustrate the thought process when designing data with a nosql database the number one thing that I learned when modeling data with a nosql database something I saw on stack Overflow was someone said when you're modeling data with a nosql database the number one thing think about is how your data is actually appearing on the screen like when you look at a certain component what data is in there and it really helps you efficiently kind of think about where to have this sort of nested structure and where to group things together on your document and this is sort of something that just takes practice and you just have to like kind of honestly practice developing nosql databases for different sorts of features in order to really understand how to develop the optimal structure now as we go through these examples let's keep in mind the relationship we need we need to know how many users are in a community and we need to know what communities a user is in so let's look at this example these represent a community document and a user document okay so what we could do is we could store an array of all of the users that belong to a certain Community right every time I join a community I can add that user's ID to this array so now we know how many users are in a community and these comments just kind of represent other data that would be stored on the community document but let's think about scalability on Reddit communities can have you know millions of users you know infinitely many users there are some communities with 20 million plus users I'm pretty sure right like that's a lot and in Firebase our documents can only be one megabyte in size which is about 40 000 Fields now we're obviously over that 30 000 limit here we're sort of in the 11 million area and this is totally realistic for Reddit right and I know that our little demo app is not going to have 11 million users or 30 million users but it's really good to think about these things and just kind of think about it how it would be in the real world because it helps you become a better engineer this is not great because this array can get infinitely long and it definitely puts us over our limit so from a user's perspective we could store all of the community IDs that I am in on a community's array inside of the user's document for example like the Tesla ID the baking ID and this is totally fine I don't see any CL ability issues here because you know a user is probably only going to join like I don't know 20 to 50 communities like 50s even a lot I think I don't know so I think this type of approach is fine we're restoring you know the communities on the user but this is definitely not um and so I think this this could work for some or some variation of this could work but we would have to sort of tweak the community logic a bit let's talk about option two so option two is essentially just the SQL approach right this is option two and what we do here is basically create a collection in our database uh that would sort of mimic this sort of SQL like join table over here but having this sqlite structure calls for SQL like queries which would be like join statements and you know just querying multiple tables and Firebase does not support join statements therefore we would have to make multiple queries and one of the main benefits of nosql is that we can actually use this NASA structure to our advantage to prevent that we can prevent making multiple queries we can prevent join statements and really simplify Our Lives if we just do the nested thing properly so that's why we're going to avoid having this SQL like structure for this case now let's talk about option three and this is the solution that we're actually going to go with the user document in this case is quite similar to case one where we had just an array of community data on stored on the user and so we know what communities the user is in however in this case we're not storing just the ID we're storing an array of objects and those objects can contain sort of snippetlike data of that Community hence the name Community Snippets now why is this useful well a this is useful because what I mentioned already we know all of the communities that a user is in and B this is useful because what if in some of our components we need more than just the community ID itself but we don't want the entire Community document we want somewhere in between let me explain this with an example let's come to our demo and if we look at this drop down menu here we can see that we have this list of communities that I'm in but we really only have the name and the profile picture we don't have all of the data associated with all these communities right and we don't really need it like when Shady lands on reddit.com I don't really care about all of the data in Tesla all of the data in NBA all of data and music I don't care about that when I'm on this page I just care about the names of the communities that I make and the profile picture so in this list component the name itself which is also the ID is not enough but the entire Community is too much when I click on one of these things then I care about all that data then I need to know how many members in the community then I need to know be created at and all this other potential data that could exist right Reddit probably has tons of data stored on their Community documents in their database this design is perfect for what we need because it allows us to store just the minimum amount of data we need for each Community to display it but we're not over fetching data we're not getting data about each community that we don't really need and this is really good from a frontend scalability perspective we're not overloading our front end with a bunch of unnecessary data we're just grabbing Snippets to present it in a meaningful way in this case all we need are two things to name the profile picture so as for the community for a community all we need to know is the number of members inside of a community I don't need to know every user that's in the community because on reddit.com you can't really go into the list of all of the members in that Community I don't need that for Reddit maybe I would for another app but for Reddit all I need is a number of members right if I go to a community page all that they're displaying here is the number of members so in terms of like the relationship between users and communities I only care about this and then all we need to do is every time a user leads or joins a community we just have to update this number if this was clickable if I could click on this and view a giant list of all of the users in the community maybe that would call for a join table like this we are going to go with this solution here it seems to satisfy all of our needs it models the manytomany relationship okay that was a lot on SQL versus no SQL I hope that did clarify things and I hope it was insightful to kind of see different examples of ways we could solve this problem if you've got absolutely none of that I apologize and as I always say if this does not make sense at first glance just give it time like kind of absorb into your brain and as we develop it into the app it should become more clear and this document structure will also get us into using database transactions which we are going to see next all right you guys now that we have to solved the problem of users joining communities we can now actually Implement that data structure in to our app so as you recall from our discussion about notes SQL we do need to create a sub collection on our user document called Community Snippets and store these little pieces of data in there every time I join or leave a community so that is what we're going to do now but we have a small problem let's go to our fire story database for a sec so if you look at this we actually do not have a collection called users which is weird right like we have the ability to log users in but we don't have them in our database it's kind of weird isn't it yeah it is weird so the way Firebase works is their authentication is completely separate from their firestore database they're not linked at all it is meant to be an authentication solution only so in order to add custom things to our users like I was mentioning before with the karma score and usernames and anything that's custom and in this case the community snippet subcollection we need to store these users in our firestore database we somehow need to get them in here and this is where we're going to talk about cloud documents which should not take very long at all it's just going to be a few minutes so what we're going to do from a high level is just Implement functions into our app and we're just going to write a single function version that is going to be listening to our authentication Service and then every time an authenticated user is created is going to just automatically store that user in our firestore database and then once the user's collection is in here it'll appear the same exact way these are but then we can actually add custom things to it so let's go ahead and do that very quickly it shouldn't take any more than five to ten minutes so once you go into the function section of the console you might see something slightly different than this I already clicked like the get started button if you're there for the first time you might look a little bit different than this I can't remember what exactly what it looks like but basically what this is saying to me is that I need to upgrade my project so to use cloud functions we need to upgrade our project from a free project to a payasyougo project but do not worry you are not going to be charged a single Cent In order to be charged anything for Firebase your app has to have like millions and millions of users and millions and millions of reads and rights to your database you're not going to be charged a single Cent to sign up for a billing plan it will ask you to enter a credit card but if for some reason you do not want to proceed with Cloud functions or whatever reason I'm going to also right after this do another workaround solution without cloud functions to achieve this same functionality of getting our user into our database however I would recommend you if you're able to use cloud functions as it is the recommended method by Firebase and the community for this type of user authentication flow totally up to you so I'm going to quickly walk through the Cloud firestore solution and then right after this I'll just do like a quick five minute chapter on doing the same exact thing without cloud functions so depending on what you want to do watch accordingly okay so to proceed with Cloud functions let's click on upgrade project or whatever is there for you just click on it and it'll sort of take you down a similar path so if it's your first time seeing this it's probably going to ask you to create like a Google Cloud account or something and that's where you're going to like actually put in like your billing information like your credit card and I already have my account created so it's just asking me to set a billing budget I'm just going to put one dollar not even going to be charged a dollar and this is basically saying you will be charged as you go don't worry no charges will occur I promise but I'm sure click purchase and now it says you successfully upgraded okay so once you've upgraded your project to a pay as you go plan you can just click get started and we're going to install a few packages okay so let's click on this and let's go to our project terminal and just install that the dollar sign always gets me okay so something I just noticed that some of you may come across as well is when I try to run this command here on the right it gave me an error that I do not have permissions so I just need to change the command to use sudo so I just added sudo in front of the entire command cool so once we have the Firebase CLI you can just click continue and now we're just going to run a few commands inside of our project to initialize Cloud functions and then deploy our functions so after we initialize our project we will then deploy them so that they are actually deployed on the cloud and we can use them all right so let's do Firebase init okay so right now we just want to set up functions so we just highlight the functions option and press the space bar and then we just press enter and it's going to ask us which project we would like to use use an existing project because we have created a project on our console and the one I want to link up is Reddit clone tutorial I believe and it's saying what language would you like to use to write Cloud functions we are all about typescript do you want to use eslint and I'm going to say no do you want to install dependencies with npm now because I'm just going to say yes so I'm going to click finish over here our app should have functions and it's waiting for us to deploy so if we come over to our directory you will see that in the root of our project we have been given it three new things we have this firebase.json file we have this Firebase RC file and then we have this functions directory now this is where we're going to be writing all of our Cloud functions in this index.ts file this functions directory is your serverless backend it's being run on the Google servers and it may require different packages than your front end you'll notice that if you go to your package.json file it has these two dependencies Firebase functions which makes sense and it also has this fire service admin package installed and it's through this admin package that we're going to be able to actually interact with our database let's go see how we can do that so here we are inside of index.ts and I'm just going to get rid of all of these comments and at the very top here I'm just going to say import Star as admin from Firebase admin and on this admin instance let's call this method called initialize app which is basically just going to boot up our app on the server and then we just need to create a database instance so that we can actually write to our database all right and underneath here we're actually going to write our function so we're going to say export cons and our function name is going to be called create user document we're going to use our functions instance and tap into our auth service and then we're going to say dot user because the user is the part of the auth service we're interested in and then we're going to say dot on create and then we're going to give this a callback function that is going to trigger every time a user is created and this callback function is going to be asynchronous and it's going to take in a user as an argument I'm going to save this set of format inside of this function we are going to say DB dot collection ml collection that we want to write to is users and we want to set a document by saying dot doc the ID of the document we're going to create is going to be user dot uid the ID of the user and then we're going to set these documents to be json.parse and then inside json.parse we're going to say json.stringify and then the user and this is kind of a weird workaround that you have to do if you do not do this you will get a serialization error and this just seems to be the solution among the community that is our entire function it is just a few lines and now we are ready to deploy this function and actually store users in our database so let's go back to our terminal and there is a command that we're going to run that is going to deploy only functions because right now we're only interested in deploying functions so I'm going to copy this over and paste this in my terminal now this may take several minutes to run the first time you run it it usually does speed up uh after the first time but I think the first time it sort of has to go and actually provision the resources on the Google servers so just give it a few minutes okay so once yours has successfully deployed go back to your console and you should now see that function inside of this dashboard here and you can see what the trigger is to actually determine that function so it's pretty cool and the logs are a good place to look if the function ever fails or there's some sort of bug uh the log usually have details on what might be going on so now let's actually go try this out and try to create a user and see if it gets stored in our database so I'm going to go to my app and log out let's click sign up now let's create a new user called Shady that's shady .com password is going to be Shady actually and before we do this let's go to our firestore database and we can clearly see we do not have any users in here so let's see if it is created let's go to here and click sign up let's go to here it sometimes takes a second as well it might take like somewhere between like five to ten seconds so refresh and there is no user which is odd okay let's go to functions let's check the logs um okay so this was at 9 24 so we're just now pretty much function execution executed finish with status error oh okay it did not work um entry.2 adjacent is not a function okay I don't even know if you can see this sorry this is really really small um I'm getting it to Json error which is really weird I think it has to do something to do with this I don't know why because I have this written the exact same way in my demo all right so I did some research on this and I'm honestly not sure what is going on I have no idea why I'm getting an error and why it's not successfully writing to the database it definitely has to do with this because I tested out just writing a plain JavaScript object to a database and it did work so this function is being triggered and we can obviously see it's being triggered from the logs um so I don't have no idea why this is happening I did the exact same thing just a few weeks ago when I built the demo so no clue what's going on and I don't want to spend too too much time on this because it's not extremely critical so for those of you that are experiencing the air as well I'm just going to do a quick workaround solution if you're not having the error that is amazing I hope you're not having the air but if you are this is a potential workaround so what we can do is we can just create a new JavaScript object and we can store basically just the most important parts from this user object it as a new object and if you look at kind of one might be on this user object there's a lot of stuff going on here and a lot of it is kind of nested we don't really need all this data especially for our application so I'm just going to store the most important things which are like the uid the email and like the photo URL and then maybe the provider data so that we know it's authenticated with Google or something just the most important things so like four things so I'm just going to take this user and I'm going to say uid is going to be user.uid email is going to be user dot email display name is going to be user dot display name and this is only going to exist for all auth users and provider data is going to be user dot providerdata okay and then instead of this json.parts.json.stringify thing I'm just going to pass in new user and this should work so if you did have to implement this change we will have to redeploy so let's go ahead and do that and once this is done we will check back in all right so I'm going to try this again so I'm going to go back to my app I'm going to log out and then do this whole thing again I'm going to create a user called lol.com I love law.com it's one of my favorite websites just kidding I have absolutely no idea what's outlaw.com sorry if there's something not good uh okay and then let's go to our database and see if this actually works okay so it's saying that it's successfully completed sorry if this is super small but basically it says that it finished with a status of okay so let's go to our database and yeah look at that so the user stable has been created and that data that we indicated has been stored in there now if yours worked with our initial solution with the json.parse thing there'd be a lot more stuff in here but this is really all we need and it's on this document where we're going to create that sub collection Community Snippets so now I'm going to implement the solution for getting our users into our database without using Cloud functions for those of you who chose not to do them and it's actually very very straightforward it's only a few lines of code okay so let's start off with our signup component and so basically what we're going to do is in the signup component once a user has been successfully created with this create user with email and password function we're just going to put it into our database that's it so this function itself does not return the newly created user but we can access it as the second parameter from the hook up here remember these four arguments and it's called the user cred because this is not the use user object itself it is like the user credentials but the user object itself is on this object here which we will see in just a second okay so I'm going to create a function called create user document and it's going to be an asynchronous function that takes in a user which is a type user from Firebase okay so the way we're going to write this user to our database is with a function from Firebase called add doc now we basically just need to tell this function what collection we are writing to so we can create a collection reference using the collection function from firestore and then we can pass this function our firestore object from Client app and then the collection that we want to write to is users and then as a second argument we're going to pass the actual data that is going to be written into this document and in that case it is user now all we need to do is just call this function so what we can do is we can create a use effect and this use effect can have the dependency user cred so that every time user cred changes it will run this function and if user cred is a nonnull value meaning that the user was successfully created we want to do something with it and that something is right it through a database so we can call our function create user document and we can pass the user object and the user object is going to be user cred dot user and that's what I meant before when I said you can access the user on this user cred object so when we do that this should work exactly the same as our Cloud function so let's go test it out hey guys really important announcement I have to make as I am editing this video here please change this user that the arrow is pointing to and wrap it in json.parts json.stringify Firebase will not like it if you do not it will error out and it will not work the solution shown in the video does work for the first attempt but it eventually does fail so I did have to refactor this part of the code so please implement this I do apologize for this confusion so right now I only have a user called lolatlaw.com so let's go create a new one sign up let's sign up as dude at dude.com password chatty sign up okay let's go check our database users we can see that dude.com is in there perfect so it did it did its job so we just needed these two additions to use effect and the create user document now we can do pretty much the exact same thing in our oauth bones so okay so we can pretty much do the exact same thing in here I'm just going to rename this user cred and I'm going to create a function called create user document same name as the other one it's going to be async it's going to take in a user now inside of this function the only difference between this and the sign up is that in this function we're going to call set dock the other function was calling add doc so we need to call set doc because when you're authenticating with Google we don't know if you're logging in or signing up we don't know if you're new or if you've already been here before the set doc function does that functionality it's either going to create a new document if it does not exist or it's going to update the already existing document so it can handle both the login and signup case for Google perfectly okay so what we need to do is create a document reference to that potentially existing document or the new document and the way we can do that is we can say cons user.craft is going to be equal to Doc pass in our Firestar object The Collection we're interested in is users and the ID of this new or existing document is going to be user.uid and all we need to do is just say await set dock pass in our user doc graph and then just give it the data that we want to set the doc to be which is user and we use this same set doc function when we were creating our communities and we can have pretty much the exact same use effect in this function give the dependency of user cred check for a nonnull value of user cred and if it is not null we can pass it to our create user document function user cred dot user save this and let's give this a go hey guys we need to do the exact same thing here so please wrap your user in the exact same thing we did just a few seconds ago thanks so I went to my authentication thing and I have no Google auth user right now so let's go try to create a thing for my Shady gmail.com account because that's the only Google account I have let's sign up continue with Google so it's going to authenticate and if I go to my database now firestore I should see a third user and yes I do Shadowmere gmail.com it says the provider id is google.com so perfect now we can write users to the database whether or not you use cloud functions or not and we can proceed with the community functionality all right you guys now that we have users in our database and we're able to actually add custom properties to those users let's move forward with our community logic and actually build in this community snippet functionality so now we are ready to introduce what is called a database transaction and a transaction by definition is a set of read or write operations on one or more documents and transactions are really useful because they represent an All or Nothing operation so what that means is is if you have a set of database operations that you are doing like updating several documents at once it is very useful to have all of these things succeed or none of them if one of them fails let's fail them all because they're sort of dependent on each other so in our case when a user creates a community we are doing two very important things the first thing we're doing is we're actually creating the community itself in the community's collection and the second thing we're doing is we're going to add that Community to the users Community Snippets right we are automatically joining that user to the community if they create it and we either want both of these database operations to succeed or none of them so we do not want to create the community if the community is not successfully added to the user's Community Snippets and we definitely do not want to add the community to the users Community Snippets if the community fails to be created and so that's why transactions are extremely useful here transactions are very similar to batch rights and we are going to see batch rights very shortly there's just a slight difference between the two but I will talk about that more when we get to it okay so let's go to our app okay so here is how we Implement a transaction in Firebase so we are going to use an asynchronous option and that function is called run transaction and this is coming from firestore so import that the first argument to this run transaction function is our firestore object as usual and the second argument is going to be a callback function and this callback function is going to be asynchronous and it's going to give us this transaction object that we're going to use to actually make rights to our database so what we're going to do is we're going to add this first check into our transaction checking if the community exists in our database rather than calling this get doc function we are going to change this to transaction dot get pretty much the same thing we're just making it part of the transaction now the next thing we want to do is we want to create the community so let's move this up here and we are going to change this from set dock to transaction dot set transaction set operations are not asynchronous themselves because the entire transaction is asynchronous we don't need to put the away keyword in front of our transaction sets we do need them in front of our gets though and the next thing we want to do is create the community snippet on that user we're going to say transaction dot set so what we're going to do is write a new document to the community Snippets subcollection which lives on the user document so we're going to use the doc function from Firebase we're going to pass it our firestore object and the second argument to this doc function is going to be the path to the document we're about to create and paths are absolute paths and they start at the root of our database so if we go to our database this is the root and then we just have to sort of jump into each column here that's sort of like how you can think of a path we're going into here then into here then into the new thing so the path in this case is going to be users because we're going into the user's collection the ID of the user document we're interested in is user.uid and we are writing to a sub collection and the sub collection name is community Snippets so this is the first time we've seen this path notation and the way I want you to think about this is collection document collection document collection document and you can go as deep as you want in our case we're going into the users collection the currently users document and then that current user's sub collection called Community Snippets collection document collection the third argument of this doc function needs to be the ID of the document that we're creating which in our case is community name because their names serve as IDs and now let's hop out of our doc function and as a second argument to the set function we need to just pass in the actual data that we want to store in this document and this and the data in this case is our community snippet the community snippet has a community ID which is just Community name and then we're going to add another property called is moderator and the is moderator key means am I a moderator of this community and we are setting it to be true here because if I created the community I'm automatically being set as a moderator and I'm going to be given different permissions than other users who are not moderators and that is it that is our entire transaction so if one of these things fail all of them are going to fail which is really good and it maintains a high level of data Integrity all right so let's actually see this in action and see if it works what we should see happen is the new community should show up here in communities and then if I go to the users collection and go to the actual user that created the community we should see a sub collection inside of that document which should have the newly created Community snippet on it and hopefully this will clarify this sort of path structure once we sort of have a visual representation of what it looks like all right so I'm going to use a user that I know exists so let's use lol.com let's go to our app and honestly do not know who I am logged in as right now so I'm just going to log out actually I could have just checked the username wow uh whatever okay so let's login and let's use lol.com and let's go to here create Community let's create a community called laws and new group I have no idea that's a terrible name okay create Community all right no errors that we see so let's go to our database and let's go to communities so we see Law's new group which is perfect that's awesome let's go to our law user okay so we're at law.com and now we can see that there is a sub collection on law.com document called Community Snippets with an ID of Law's new group and the community ideas in here is moderators true and now you can kind of see that path structure that I'm talking about so users user ID and then Community Snippets and then the ID of that Community snippet and then the actual document at that field and later when we add profile pictures to our communities this is where that URL is going to be stored as well all right so now we know what communities that law that law.com is in which is super cool star transaction is working successfully all right you guys now that we are successfully able to create communities and store those Community snippets on the user so we know what communities each user is in let's now create the Community page itself and this is going to be our first look at server side rendering with nexgis so inside of our Pages directory we need to create a folder structure that reflects the Community page rep and if you go to Reddit their page route is reddit.com r slash Community name I don't know if you can see this it's super small but it's our slash Community name in this case it's comp side but this can change right there's infinitely many communities so our folder structure needs to be very similar and remember that the folder structure in your pages folder represents your clientside routes and our clients head route in this case is r slash Community name so inside of pages we need to create a folder called r and then inside of R we need to create another folder called Community name but this community name is going to be a dynamic route because the route changes it could be computer science it could be reading it could be baking it could be Tesla so it is dynamic and the way to do Dynamic routes in an xjs is to put these square brackets around it and then inside of these square brackets we actually put the name of the dynamic variable and in this case the dynamic variable is community ID so we're going to say community ID and then inside of this folder we can create a file called index.tsx so we can access this index route by going to localhost 3000 slash R sum Community name and so just to really illustrate this clientside routing concept while we're here let's create another file called submit dot TSX because that's going to be the page that we actually create posts on so if I go to our demo we have our r slash baking route this is the home page of the community then if I click on this I go to the submit page which is our slash baking slash submit index is the home page submit is the submit page all right so let's go back to our app so let's start with the index page so we're going to start off by using our snippet as usual and I'm just going to rename these props to be Community page props rename this one as well Community page props just like that and then I'm going to rename the component itself to just be Community page and Community page and I'm going to put the text in here Community page so now if I go to localhost 3000 r slash hey dude or something it's going to take me to this page that should say Community page so we actually on this page now and soon we're going to see how to actually grab this from the URL and do something meaningful with it so for this page we are going to use server side rendering and to do that we're going to use a function from next.js called get serverside props get server side props is called on the next.js server and then data is fetched from our database in this function and then pass to the component and then the component is rendered on the server and then pass to the client and then the client renders the component that's sort of the path so when the user actually makes a request to a web page all this stuff happens behind the scenes on the server and so I would basically just think of this as the web page being prebuilt before it's actually shown to the user and this whole process just makes it appear as if the data on the web page is just sort of magically there when the user first sees it whereas in clientside data fetching we would show the component first then go get the data and then use that data to update our component and the user would you see some sort of loader as the data is being fetched so serverside rendering basically just removes this loading State and reddit.com uses a mix of both serverside rendering and clientside rendering so we are going to do the exact same thing so the data that we're going to serverside render on our community page is going to be the community data so that we can sort of prerender the page with all of the community data in it and then show it to the user all we need to do is export the function get serverside props from this file and next.js will automatically know to servers had run to this page so what that looks like is this we say export async function get server side props and we're going to take in this context variable which is going to be of type get server side props context and this is how we're actually going to access the page router so that we can use the community ID and I'm just going to close my directory on the left so that I have a bit more room inside of this function we're going to get the community data and pass it to our client component so we're going to have a track touch block inside of our try block we're going to actually try to get the community document and the way we're going to do that it's going to say cons Community dot graph is going to be equal to Doc from Firebase we've seen this kind of stuff already firestore import all of these things communities is the collection we're interested in and the documents we want to get is the community ID page that we're on and that page is coming from the router right I went to our slash hey dude so I want to get the community data for hey dude so we can access this parameter from the router by saying context dot query dot Community ID and the name Community ID is coming from the name we gave it right this Dynamic route right here so whatever name we give this Dynamic route is the exact same name we're going to use to access it from our router in this case Community ID and so technically the URL parameter can be of type string or it can be a string of arrays or it can be undefined in our case it's always going to be a string so what I'm going to do is Typecast this to just a string and that should solve that compiler error okay so now let's get the actual Community document which is going to be cons community dot I'm going to say await get Doc and the doc you want to get is community.graph awesome and so the way next.js is going to pass this data to our client type component which in this case is Community page all we need to do is return an object and inside of this object we just need to return props and this props object is what next.js is going to pass to our client so inside of our props I want to pass Community data and our community data is going to be the actual data inside of this community doc we just got which is going to be Community Doc and then we have to call a function called The Dot data and that is a Firebase thing this is how we extract the data from this actual document object and then our catch block I'm just going to log the error I'm just going to say get server side props error and and next.js allows you to create custom Pages if errors occur inside of get serverside props but I'm not going to do that for this tutorial because I feel like our time is better spent elsewhere so I'm going to add uh could add error page here so this props object is being passed to our component up here so what I'm going to do is destructure the props and grab that Community data but we do need to include that on our community page props type and our community data is going to be of type community and we have not created this type yet so let's go quickly create this community type and we're going to do that in our atoms folder because we are going to add some Global Community State shortly so let's go quickly set up the skeleton for that so inside of our atoms I'm going to create a folder called communities atom so we're going to eventually Define an atom in here that is going to contain a global Community State that we need throughout our application but for now let's actually just Define that missing Community type that we have over here because that's really all we need at the moment so I'm going to create an interface pop community so if you recall our communities have an ID which is a type string a Creator ID which is also a string number of members which is a number privacy type and the type of this is going to be one of three strings which is either going to be public or restricted or private we also want to have a created at field which is going to be of type time stamp and this is coming from Firebase slash firestore and I'm actually going to make this optional by adding the question mark here and I'm going to talk about why that is later and finally we're going to have an image URL and I'm going to make this optional right now because when we initially build the Community page we are not going to have it I will come back later to add this but for now let's make it optional so that typescript does not get mad at us so now we actually have an interface defined for our community so let's come back over here and we can import that to import it from our community's atom file and this file should be happy now okay so I'm going to close the directories if I have Smart room and inside of here I'm going to render just so we can see the data coming in community data dot ID I'm going to add welcome to community data.id perfect okay so after refreshing the page you are very likely to get this Json serialization error from next.js so basically what's happening is next.js is not able to successfully serialize our community doc data in order to pass it from an xjs server to our client and this typically happens when you use timestamps and we are using a timestamp for our created at parameter in our community so basically next you ask is just freaking out because it doesn't really know how to serialize that data type so I did some research on this and the solution I found was to use a library called safe.json stringify and this basically just streamifies our data to a form that next.js can actually read and serialize so that's what we're going to do so we just need to install a package called save Json stringify so I'm going to go run npmi save Json stringify so let's install that and then at the top I'm just going to import it so I'm just going to say save Json stringify from Save Json stringify and it might complain that we need to install the types for this file oftentimes when you're using typescript and you install a library it'll tell you that you need to install the types for that Library as well in order for it to work and it usually gives you the command in this little popup window so let's go and grab that and paste it in here and just install the types okay so this should make that go away and not make it all happy Perfect all right so to actually use this function let's come down here and change the value of our community data and the value you want to change it to is going to be json.parse and we want to parse the stringified version of the data that we want to send and we're going to do that using the adjacent stringify function and we want to pass an object and this object is going to represent our community data and on that object we want the ID of the community so we can say community doc dot ID and then we want all of the data in the community document so we can just spread Community doc dot Beta And this is a function.data and so basically all we did is we just created an object that represents our community so the ID of the document is not included in the dot data function so in order to retrieve the actual ID of the document we can just manually declare it here by saying ID is the community doc.ed all right so now that we're using save Json stringify this should solve our serialization error so I think I need to run my development server so let's do that and you might have to recompile yours as well if yours was running while you did all those installations okay so now let's come over here and refresh let's go to localhost okay that seems to be working let's go to slash r slash hey dude and the actual name of the community in the database is with a lowercase dude so make sure that matches so it says welcome to hey dude and we had welcome to community data.ib so this ID thing is being shown here community dayback.id and you can log the data if you'd like just so you can see what it looks like data so if I log this this thing we're looking at here is this object so it has the ID and then we just took all the other data and spread it so we have all of the data of the community and this is that timestamp thing that next.js was having serializing no clue why some weird conflict with the types so that is why we have to use Save Json stringify all right so what we're going to do now is just handle the case of if a community dock for the visited URL is not found so if a user basically goes to a URL through our community that does not exist we should just display them some kind of meaningful messages like this community does not exist because on Reddit if you do that if you go to reddit.com and you do R some random Community like this that obviously does not exist Reddit shows you this page it's like sorry there aren't any communities with that name so yeah we're going to do that quickly it's just a single simple component and it just makes the app slightly more robust and realistic so we're gonna come down here and this is going to be very minor changes so all we need to do is basically check if this thing actually found something and if it did not we're just going to pass in an empty string as a prop for Community data and then our component up here we're going to check if this community data is an empty string we will show a component that said exactly what Reddit said sorry there aren't any communities with anything so basically all we're going to do is inside of our clientside component we're just going to say if no Community data because we do not have a community in our database with this name we just want to return out of our component early and we're just going to say div does not exist and I'm going to add a more meaningful component in just a sec in just a second here but just to get the overall flow set up let's do this for now so down here we're going to do is just change the value of our community data by adding a simple ternary operator to check for the existence of that Community Dock and if it does not exist we will pass an empty string so we can say community doc dot exists which is a function conveniently provided by Firebase if it does exist past what we're already passing and if it does not exist let's just pass an empty string so if it's an empty string meaning we went to a community page that does not exist this is going to happen because an empty string is a false value so if I want to return this div and not the div for an actual community so let's try this out so in our database I know that there is no Community called dogs right there's only these five so let's try to go to dogs so r slash dogs let's see what happens okay yeah so I think Community does not exist which is great so all we need to do is just create a very simple component to replace that dominate component that we have in there right now so inside of components I'm going to create a new folder called community and there's going to be a lot of stuff in here but our first one is going to be that not found component so we should say not found dot TSX and I'm just going to paste the component from My Demo project because it's very simple uh it's just it's just only like 20 lines so this is exactly what it looks like so now if I go back to my index page and I import that component so rather than showing this temporary div I'm going to return not found which doesn't seem to want to import automatically so I'm going to try yeah okay so add imports from components Community not found save that so now we have a more meaningful component that is displayed if they go to a nonexisting community okay so now that this is out of the way we can move to the actual ideal case of when there is a community that does exist for that URL which is probably going to be most of the time right just an edge case but it is good to think about these things I recommend to just avoid going completely happy path when you're developing your apps because if you don't cover your bases sometimes this can be catastrophic in production or something it could break something so it's always good to just think about these rare cases that might happen all right so let's go to a community page that actually exists let's go to a new new so r slash new new cool and just go to one that exists for you I don't know if you made this exact one just one that exists okay so if you go to an actual Community page in our demo we can see that we have this header component and then we have basically this feed and then some components on the right hand side here so we're going to start off with this header and it's in the header that they can actually join and leave this community so let's go make that now so inside of our community directory let's create a new file called header.tsx and I'm going to use our snippet so our header is going to take in that Community data since we are showing the name so this is going to be of type community and we can import this again from our community's atom file and then we can just destructure the props in here Community data so let's build out the actual component there is going to be some logic that we're going to add inside of this component for the actual joining and leaving of communities but for now let's return the component itself this is going to be a flexbox from Chakra import that and we're going to give this a direction of column a width of 100 and a height of 146 pixels and I'm just going to add the text header so that we actually have something to show and I'm going to come back to come back to this index file and rather than it should show Welcome to community data I'm going to actually return just a fragment and inside this fragment we want to put that header that we just created awesome so we can actually see the header there let's go make this thing look actually proper why is this red oh yeah and so we need to actually pass the community data in there so let's do that Community data which is going to be equal to Community there let's go back into here and continue building now inside of our header the first thing we're going to add is a box component and this box component is going to represent the upper half of the header that is sort of that blue Highlight thing here so let's go create that so that's going to look like this the height is going to be 50 of the header height and the background color is going to be blue 400 and we can actually just make this selfclosing since nothing is going to be inside of it underneath here we're going to have another Flex box this is going to have justify equal to Center we're going to give it a white background and we can just say flexgro is equal to one which basically just means to take out the remaining space available in this component which is 50 because you made this height fifty percent now inside of here we're going to have another Flex box this is where our icon is actually going to go and we're going to give this a width of 95 percent and a Max width of 860 pixels and I will explain why this is in a second I'll add a border to this too just so we can kind of see what it is that we're creating over there one pixel solid red all right so inside of here this is what is going to be our image URL for now since we don't have image URLs which we want to add later we're just going to use the Reddit icon which will basically just act as the default Community image so we're going to create that icon inside of here so we're going to say icon from shortcut UI react and the icon we're going to use is going to be that same icon we've used before which is going to be fa Reddit and we're going to import that from react icons f a slash fa just like that the CSS for this icon is going to contain relative positioning and the reason that is is because if we look at the demo you can see that there's a bit of an overlap here this icon kind of overlaps with this blue part so to do that we can use relative positioning and kind of customize where that thing is going to sit so we're going to make this thing a bit bigger we're going to make it 64 which is about the same size as it is on Reddit and the position is going to be relative and because now we have relative positioning we can kind of customize where this thing sits so we can give it a top parameter and we're going to give this minus three so this basically just means it's going to be minus three units away from the top of its parent and its parent is this thing with the red border and the minus thing moves it upward right if we were to make this 3 it would move it downward three units away from the top negative means three units kind of above the top and the color of this is going to be blue 500. and we're going to say border of 4 pixel solid white and a border radius of 50 and this border and this border radius are the sort of outline around the icon so you can see that there is the ever so slightest Gap in between that so I think a potentially better solution to what I'm doing here would be to have a just a circular icon that is slightly larger than this Reddit icon sit outside of it and that way you wouldn't have this little Gap here I'm not too worried about that it's not a huge deal so I'm just going to leave it for now I think this works pretty good okay and actually while we're here I'm going to add the logic to show you what it's going to look like when we actually do have an image URL for our community so inside of here I'm just going to add a ternary operator so I'm going to add curly brackets and I'm going to say community data dot image URL if this thing exists let's show that image and if it does not let's show this icon so this icon is acting as a fallback to the image outside of here we're going to say image and this is coming from Chakra UI react so if we save that the icon still being displayed because this does not exist and we will come back and actually do something with this when we do have image URLs for our images like we do for this baking one here so underneath our Turner operator let's add two more Flex boxes so an outer one and an inner one the reason for all these Flex boxes will make sense as the visual Parts start appearing so many Flex boxes on the inner one we're going to give a direction of column and emergent right of six and it's out of here this is where we're going to actually display the community name and as always text does not want to Auto Import from Chakra so I'm just going to kind of manually add it myself and inside of here we can say community data dot ID which is the community name so that's showing up there okay so let's make this heavy so I'm going to say font weight is going to be 800. let's make it a little larger as well so I'm going to say font size is going to be equal to 16 point perfect underneath here I'm going to add another text so I'm just going to copy this downward this is going to be slightly lighter so 600 it's going to be slightly smaller so we're going to change this to 10 and this is when you say R forward slash Community ID the exact same appearance on Reddit and the color of this is going to be Gray 400. awesome that's looking really good and now this outer Flex box is going to have a padding of 10 pixels 16 pixels just like that awesome now let's actually add the button that the user can click to join and leave the community so that is going to be a sibling of this flexbox here so just underneath that I'm actually going to create that button so I'm going to import that from Chakra so the text inside this button is going to change depending if the user is in this community already if they are not in the community the button is going to prompt them to join so it's going to say join and if they are in the community it is going to say joined so this is where our community Snippets are going to become useful and remember earlier how I said we are going to add some Global Community State to our communities atom our community Snippets are going to be part of that Global state right now we do not have it so for now I'm just going to create a variable called is joined and I'm going to set it equal to false but this is going to eventually read from our community Snippets check if this current Community is inside of our community snippet so that's something we're going to cover very shortly and it's going to tie into our Global Community State with our communities atom but for now we'll just leave it false we're saying that they're not in the community but at least now we have a variable to toggle this text so inside of this ternary operator we can use that is joined variable and we can say is joined if they're joined show the text joined if they are not joined show the text join awesome now let's style this button a bit the variant is also going to change depending on if they're in the community or not so we can say is joined again if they are joined we're going to give it a variant of outline and if they are not we're going to give it a variant of solid in addition to all of this let's add a height of 30 pixels let's give it some right padding of six some left padding of a six and we're going to give it an on click as well which right now is going to be empty but this is going to be a function called on join that is actually going to join them or remove them from that community so we're going to save that so the reason I added that Max width to this thing that currently has a red border is to prevent this thing from kind of infinitely stretching across the screen uh because if they aren't a large device size it would look kind of weird if it was just spread across this entire header so we sort of keep it compact like this and our feed and the supporting components over here are going to sort of have the same Max width and this matches exactly how red it has it and it just prevents all these components from being like across the entire screen so we just give it a Max width to make it look good on all screen sizes let's remove that border now that that makes sense all right and now we have an actual visual representation of what our header is going to look like minus this image URL thing which we're going to add but this is looking really good and so all we have left to do in this component is to just implement this actual joining logic but first let's go work on the actual page content of the Community page all right now let's actually talk about the content of this page beneath the header so to start the section off I want to go to our demo and I just want to point out how pretty much every single page on reddit.com has the exact same layout let's open this up a bit to make this more clear but we pretty much just have this parent component and inside of that we have this left hand side with kind of the feed and this right hand side with these other components and left hand side kind of takes up I don't know about 60 to 70 percent of that width and the right hand side takes up about 30 and this is the same across every single page so this is the home page if I go to a community page same thing right just different components but the overall like government learning layout is the exact same let's even look at the submit page so pretty much the exact same thing we've kind of seen a similar situation before right remember how I was like oh we need the nav bar on all of our pages and to solve that problem we use a layout component and we just wrapped our app in our layout component and put our navbar in there well we can do the exact same thing elsewhere right it doesn't just apply to the global level of our app and we can do that with the content of our Pages because again we have this left hand content and this right hand content with this repeated overall layout across every single page and so what we're going to do is just create a simple page layout component and then wrap all of our pages in that component and it's just going to automatically handle all of the styling for us right like the widths and the responsiveness and all that stuff and we don't have to repeatedly write the same CSS so let's quickly do that in our apps let's come back to here so inside of our components folder and inside of layout I'm going to create another component called page content because it sort of represents the layout of our content for all of our Pages I'm going to use our classic snippet I'm going to open up the demo just so we have a visual guide of what we're doing so we can model this entire layout with just a few Flex boxes so I'm going to return pretty much the entire structure of this page content what that's going to look like is we're going to use the flexbox from Chakra so this is going to be the outermost parent container then inside of that we're going to have the actual sort of content container then inside of here we're going to have the left hand side content and the right hand side content and we can represent each of those which is their own flexbox component just like this the outermost one is this kind of like gray area like the container of kind of everything the next one this one here is going to be the parent container of both the left hand side and the right hand side and then the two innermost ones represent the left hand side and the right hand side respectively so a total of four containers that's it that's that represents this entire page layout and it's going to represent our page though for every one of our Pages now we need to apply some additional styling to these things to just make them respond wanted to give them the proper width but overall this is it this represents like every single page layout so for clarity I'm just going to add a comment above this first flex box that says left hand side and for the second one right hand side okay so now let's actually talk about what's going to go inside of both of these left hand side and right hand side Flex component well just like every other layout component this is going to take in a prop called children and if you recall if we go back to our original layout component where we had our navbar children basically just represented our entire application because we wrapped our entire app in this layer component so children is just a bunch of react components right and in this case in layout.tsx this was our entire app children's might look a little bit different in here because we're going to pass in two children we can pass in as many children as we want but we're going to pass in two children because we need one for the left hand side and one for the right hand side so our first child is going to be the stuff that goes inside of our left hand side Flex component and the second child is going to be the stuff that goes inside the right hand side flexbox component and so this is kind of a weird concept at first but bear with me so if we come over to our index.tsx file underneath our header is where we want to apply the soil component right we have our header and then we have this left hand side and right hand side layout that we want to do so underneath here is where we're going to actually put this so we're going to say page content bring that in from the other file and this is where we're going to need to Define our children that we're taking in for this page content layout just like in layout.tsx the original one children represented our entire app right if we go look at app.tsx we can see that this component was the only child of this original layout this one here so in this case we want two children because we again left hand side right hand side so let's come back to our index and what we're going to do is instead of passing a single child like we were doing in our app.tsx file we're going to pass two children and we're going to represent both of those two children with react fragments just like this and we are totally allowed to do this we are taking complete advantage of how react actually works from like a Dom perspective so this first fragment is going to be child one and the second fragment is going to be child two but if it's more clear you can just think of these as divs right that's really all they are in this case all we need them to be are fragments and we're just putting them there to create this left hand side right hand side structure so again child one on the left child two on the right so inside of child one for now I'm just going to put a div that says left hand side and I'm going to do the exact same thing on the right hand side so we have this again child one child two I'm repeating myself because this is kind of an abstract concept that I hope it makes sense okay so now inside of our page content file here children is no longer just a single component it is going to be an array of two components right in layout it was just one thing in this file we have two because we have two fragments that we're passing here what that means is that this children thing is going to be an array of both of those fragments so if I log this here is children let's look at what this looks like so let's go back to our app and let's look in the console here so see it says here is children let me zoom in a bit zoom in a bit open this up and we can see all that is in here is just two react fragments right react fragment react fragment and we could add three if we wanted to we could add 100 if we wanted to but there's two because we had two fragments and that's all that these are so now what we can do is take each of these two children and put them inside of our Flex containers here so our left hand side is basically going to be children at index 0 the first element and the right hand side is going to be everything inside of children at index one to fix these typescript compiler errors we can just do what we did before we just have to make this 0 and 1 valid indexes of the children array so what we can do is we can Typecast it to be that so we can say as key of type of children okay and we're getting an error over here that's saying that children is possibly null or undefined so to fix that what we can do is we can just add a simple check and this just checks to make sure that children actually exist and is a valid value it is not null or undefined only then let's render this and we can do the exact same thing down here so I'm just going to copy this entire thing and then just change this to a one just like that perfect so now you can see left hand side and right hand side actually showed up on the screen here and so we of course have to apply a few additional styling here to these Flex boxes to make them have the widths and the responsiveness that we desire but this is sort of the idea and I think this is really cool this is like uh this is a really cool way to take advantage of how react actually works and create custom page layouts this children thing is a little bit weird at first but just give it time and I think it'll become a lot more clear when we actually start building out real left hand side and righthand side components like the feed and the about component and everything but basically the idea is that we can put whatever we want in here right I can put another div it's like hello and 10 more divs whatever it doesn't even matter we can put as many components as we want in our left hand side and as many as we want in our right hand side so depending on what page file we're working in the actual components that go inside of both these two fragments will be different but they're always just going to be the same structure because we only have two governing children I hope that makes sense that I tried my best to explain it in the clearest way possible but if that doesn't make sense hopefully it does as we build more of these and let's go to our page content and apply the simple styles that we need and responsiveness to these flexbox containers and hopefully it'll become more clear then so I'm going to add borders to all of these to make it more clear what we're actually looking at so I'm going to do one pixel solid red on the outermost I'll do one pixel solid green on the actual content container and I'll add one pixel solid blue on our left hand side content and then I will do one pixel solid orange on our right hand side okay now it's not very clear now because they're all sort of blob together but let's keep going with this so on our outermost container we want to give this a justify Center we kind of want to Center everything and we're going to give it a padding of 16 pixels on the top and bottom and zero pixels on the right and left okay now our content container we're going to give this a width of 95 justify is going to be Center as well because you kind of want to Center the content and we're going to give this a Max width of 860 pixels and if you recall this is the same Max width that we gave that component in our header and this is so that they match up evenly and it looks really flush so we're done with these two let's come down to our left hand side so our left hand side we want to make all of the content inside of it Direction column and we want to give this a width and this width is going to be responsive at Mobile screen sizes we're going to make the width 100 percent because the right hand side is not going to be visible on Mobile screen sizes so this thing can take up the entire width and then on medium screen sizes we're going to give it a width of 65 when it starts to share the screen with the right hand side okay things are becoming a bit more clear and then we're going to make our margin right responsive as well so our base screen sizes 0 and that Medium screen size is we want to give it six let's come down to our right hand side we can make the direction of this column as well and we're going to make the display responsive so at base on mobile we are not going to have this thing visible and then our medium screen sizes and up we're going to make it display Flex okay and we're going to give it Flex grow is equal to one just to make it take out the remaining width okay so now hopefully this is becoming more clear and you can actually see this structure with your own eyes and kind of see how it works and see how that Max width matches up with that header component so it's nice and flush that's why we did that this is looking really clean and then on mobile we don't have the right hand side component we only have the left and so now what we've done is we have created a reusable page content layout component and we can reuse this on every one of our pages and wrap the content in this layout component and it's going to have the exact same look and feel and we can have completely different components inside of our left hand side and right hand side due to these two children fragments we created so where we left off last time was we created this really useful page content layout component that we can reuse on all of our pages to create this left hand side right hand side layout that Reddit has and we made it responsive so that we only have to write these Styles once and we use that on our community page here and we also created our header component inside of our community page which shows the community name eventually the image of that community and we have this join leave button here that we created however right now this button does not do anything it's just an empty function and it doesn't actually do what it's supposed to so what this button is supposed to do is join this user to the community if they are not in it and remove them from the community if they are in it but in order to know which one of those two things to do we do need to know if they're already in the community therefore we need access to the user's Community Snippets which we created so even though we are successfully storing the community snippet data in our database meaning that we do know which communities this user is in we currently do not have this community snippet data on our front end so our front end actually has no idea if I'm in this community or not only our database does it so what we need to do is actually go and get those Community Snippets from our database so that we know if the user is actually currently in this community and we also need access to this data inside of our dropdown menu so that we know our own communities so clearly we can see that multiple components in our app need access to this community snippet data our header does so that we can either join or leave our drop down money does so that we know what communities we're actually in and if we go to our home page this top communities component does as well it knows which one of these we're actually in so we need this data across multiple components so therefore we are going to put this community snippet data into a recoil atom so that we have access to it globally and last time if you remember I briefly created this file called communities atom.ts I only Define the interface for a community last time we didn't actually create the item so we're going to do that now so just like our auth modal atom we can Define some interfaces in here that are going to help make our code more robust and prevent errors so what I'm going to do is create a typescript interface to actually model our community state so we know exactly what's supposed to be in it inside of our community State we're going to store those Snippets in an array called my Snippets so we're going to go and get the users Community Snippets from the database and store them in this array and that way we will have access to them throughout all of these components that I refer to just a second ago and we can actually make this better by specifying what type the things inside of this array actually are rather than just saying that they can be anything we can tell it okay well this is going to be an array of strings or it's going to be an array of booleans we can specify what's going be inside of this array and each thing inside of this array is going to be a community snippet so what I'm going to do is I'm going to create an interface that represents what a community snippet actually looks like now if you recall from our create Community model our community snippet is going to have a community ID and it is moderator key which is going to be present only if we created this community so what I can do is come back here and I can say okay well our community snippet is going to have a community ID of type string it's going to have an optional is a moderator key optional because it's only going to be there if we created the community ourselves and we're going to put the image URL as well and I'm going to make this optional to start off because we are not going to implement this initially and I do not want typescript to get mad at me I'm just going to make it optional for now so now we can come down here and say okay well we know that everything inside of this array is going to be of type Community snippet and we're going to see how useful this is when we actually start working and building these components that are accessing this data and in a little bit we are going to come back here and add another property to our community State called visited communities which is going to act as sort of a cache of all of the communities we visited so we don't have to refetch that data but we're going to come back to that in a bit basically we just want to store any data that is Global and Community related in this community State atom that we're going to create for now we're only going to have the my Snippets data inside of our community state so now let's actually create The Recoil atom for our community state so I'm going to say export const Community state is going to be equal to a recoil atom and the type of that Community state is going to be the Community State interface that we just defined up top so our key is going to be communities State and this is the unique identifier that is required by recoil and we also need to give it a default value and the value of our state needs to be of type Community State we cannot just give it anything like if we give it a string it's going to complain and say well string is not assignable to type Community State because that's what we're telling it the type of the value is so we can actually create a variable that represents the default Community State I'm going to say default Community State and this is going to be of type Community State so that the types actually match and inside of here we're going to have my Snippets and we're going to initialize this as an empty array so it's going to start off as empty then we're going to go get that data from our database and then store it inside this array and down here to make typescript happy again we can say default Community State so now the types match and we are good to go all right you guys now that we have defined our community State atom we are able to access our community State data globally and we can grab the snippet data wherever we need it and we saw that the main components that we're going to need it are is in this top communities component our drop down menu and then as well as in the headers of our community pages so we have clearly established that this community snippet data definitely needs to be Global let's take this one step further if we look at this top communities component we can see that we can join and Lead communities from within here so we're calling some sort of function that is responsible for joining and leaving whatever one we click on and we also have that same exact functionality inside of our header component in a specific Community page so not only is our community snippet data required by both of these components the functionality for actually joining and leaving a community is shared by them as well so in react when we have this sort of scenario where we need data as well as certain functionality shared across Global components we can create what is called a custom hook and in the custom hook we can put State and logic that is repeated across our app and we can use this custom hook in any component that requires this repeated functionality in the same exact way as we would use a native react hook like you state or use effect so let me explain this with a diagram so I created this diagram here of what it is that we're going to create so we're going to create a custom hook that is called the use Community data so basically this diagram represents the data flow of this custom hook and so this Hook is going to contain any Community related data or functions that we need across multiple components so we've already established that we clearly need Community State across multiple components right we need those Snippets and the community state contains those Snippets so we can put our community state in this hook we also need the functionality of joining and leading communities across two different components and those two components in this case are header as well as the top communities component and then inside of these components all we need to do is just grab the specific pieces of this global data that we need by using the exact same hook and this is really good architecture because it keeps our code dry it prevents us from writing the same functionality multiple times and it just makes the code overall better quality that way we don't have to define the same functions over and over in all the places that we needed we just have to do it one single time and I've created this diagram to model what our situation looks like to hopefully make it more clear as to why we are using a custom hook but the main takeaway here is to just understand that in react when you have repeated logic or repeated data that is required in multiple places you can extract all that stuff put it into a single place which is a hook and then call that hook from wherever this stuff is needed I do hope that makes sense and it will become more clear as we actually write the code for this so let's actually go and Implement that diagram in code and then we can refer back to it once we have done that to solidify this entire concept okay so let's actually create this custom hook so inside of our source folder I want to create another folder called hooks and then I'm going to create a file inside of here called use community data and if you've never written a custom hook before it does have to start with the word use just like all the other hooks use State use effect it is a requirement by react okay so let's begin writing out this skeleton for this custom hook to hopefully solidify that diagram if it was not clear from the beginning so this Hook is not going to take in any props so we can just remove that so this is where our recoil Community state is going to live so we're going to say Kant community State value set Community State value is equal to use recoil state and remember that this recoil hook requires us to pass the atom that we want to get from recoil and the atom that we're pulling from is our community State atom which makes sure that imports from atom slash Community data now our custom Hook is not going to return any HTML like any other component it is going to return an object that contains data and functions and the stuff that we put in this object that we're returning is what's going to be accessible by the other components that actually use this hook so we have definitely established that we want Community State value available across many components so let's put that inside of this object so let's define the functions that are going to be shared across components so one of those functions if you recall needs to actually join the user to the community let's put that in here let's create a function called join community and we will leave it empty for now and we also need leave community so now I can also add these functions to this object so that they're accessible by the components that call this hook and since this Hook is not returning a functional component we're going to remove this return type here okay so now let's talk about how to actually call this hook and get access to this stuff in the components that need it so let's go to our header and let's import our new custom hook import use Community data from go up to directories hooks use Community data awesome now inside of our component the way we're actually going to call our Hook is pretty much the exact same way we recall any other reactor you would say const I'm going to leave it empty just for a second I'm going to say this is equal to use Community data okay well now we can grab any of those three things that we were returning out of our hook remember we had Community State value joint Community lead Community well now we can grab that from inside of here so let's grab Community State value now we have access to that recoil state in our header component and we can also grab those two functions join and leave Community okay so let's go back to our hook now I'm going to create a function that is going to decide which of these two functions to call and this will become clear why in just a second so bear with me so I'm going to say cons on join or leave community all right now this function is going to take in two arguments the first one is going to be the actual data of the community that we are trying to join or leave and this is going to be of type Community which we will need to import from that same community's atom file and the second argument is going to be a variable called is joined and this is going to be a Boolean representing if we are joined into this community or not okay and I'm just going to close my directory so I have more room and so inside of this function the first thing we're actually going to check is is the user signed in and if they're not signed in we want to open up the auth modal and prompt them to sign in because you can only join or lead communities if you are signed in and since our auth model state is global we can totally do that here and this is another reason why I made that State Global so hopefully that's more clear now if it wasn't before and we will implement this in just a few minutes but let's just get it working for a signed in user first so if they are signed in the next thing you want to do is check are they joined into this community if they are and they click on that button that means they must be leaving the community so we're going to call our leave Community function and we're going to pass in the ID of this particular community so down here we just need to indicate in our lead Community declaration that we are accepting the community ID and the type of that is a string okay perfect and if you do that we can just return out of this function because we do not want to proceed so if you make it past that that means the user is going to be joining the community so we're going to call our function join community and we're going to pass all of our community data to this function because we're going to need more than just the ID inside of it so I'm going to go down here and add that to the Declaration and that is going to be FType community so now down here rather than having to return both of these two functions separately we can just return the single one on join or leave community and this is the function that our header and top communities component is going to call so now let's go to our header pull that function in from our hook so on joinery community and then down here is where we actually want to call it on this button here so we can say on join or leave community and we want to pass in that Community data and also our is joined variable that we have already defined if you remember R is joined thing we just declare it as false because we did not have access to our community's state value yet but now that we do let's make this proper let's actually read from our community Snippets so since my Snippets is an array that represents the communities that the user is currently in we can search through this array and try to find a snippet where the ID matches the ID of community data which in this case is the data for the community chatties group if we can find one that means that this user has indeed joined this community and if we cannot then they have not joined so what that looks like is this we can say Community State value dot my Snippets dot find and defined function is a higher order array method that we can use to Loop through an array to see if a specific item matches some condition and the condition that we're looking for in this case is if item dot Community ID is equal to this community data.id if the find function does find a snippet that matches which in this case would be a snippet with an ID of Shady's group it's going to return that snippet if it does not find it it's going to return undefined and you can see down here that this function is not happy because is joined is supposed to be a Boolean but right now it's either going to be a snippet or undefined and the way to fix that is we can just add a double bang operator in front of this entire thing and that is just going to booleanize it to make it true or false it's going to behave the exact same way but now it's just a Boolean okay so now that is Happy okay so now all we need to do is go and fetch the user's Community Snippets from the database and store them inside of this my Snippets array so let's do that and we're going to put that logic inside of our hook here okay so let's create a function called get my Snippets and this is going to be asynchronous because we need to communicate with our database which is asynchronous and inside of here I'm going to create a try catch block to help us with our error handling so if there's an error I'm going to say get my Snippets error and log the error and I'm also going to come up here and create some loading and error state so I'm going to say loading set loading is equal to use state false and error and set error is going to be initialized as an empty string as usual perfect okay so just before our try block and once you set loading to be true as we are waiting for our Snippets to come back from the database and inside of here we're actually going to go get this user Snippets so because we are getting the Snippets for the currently logged in user we need access to that currently logged in user so let's come up here and grab that from the hook we've seen before use auth state pass it our auth object from Client app as usual and now let's come down here now let's actually communicate with our firestore database and grab all of the documents inside of this community snippet collection for this current user so how we're going to do that is we're going to say const snippet Docs it's going to be equal to a weight get docs again coming from firestore and inside of this function we need to pass it a collection reference so that it knows which collection to get all these documents from and that collection is going to be a collection object from firestore and we need to pass this our firestore object so the path to the collection that we want to get all of these documents from is going to be users then outside of the users we want to go into this currently logged in users user ID document then on that particular user we want to grab everything from the community Snippets subcollection so that is the path to that collection let's save this firestore is going to return an array of objects of all the documents inside of that collection and what we want to do is take those documents and extract all of the data from each one and then store it in my Snippets inside of Community State value and we can do that using the set Community State value function what we're going to do is we're going to create a new variable called cons Snippets and we're going to take those snippet docs return from Firebase until you'll notice that there is a property called the docs provided by firestore and this is going to allow us to iterate through these docs and convert them into JavaScript objects to store into state so we can say dot docs and then dot map and then for each dock we want to basically create a JavaScript object and extract all of the data out of that document so this is how we do that so again we are looping through all of those docs returned by Firebase and then mapping them or converting them into objects with all of the data extracted from each document so to clarify this let's just log Snippets to see what they actually look like okay so let's go to our console and let's just refresh this page so I was trying to figure out why it wasn't showing up in the console and uh it's because I'm not even calling the function so uh that's probably why so what we do is actually call the function so we are going to call this function as soon as the application loads and the Dom mounts and the way to do that is like we would in any other component with the use effect we can use the same exact methods in our hook as we would in a regular component and inside of this use effect all we need to do is call that get my Snippets function if there's something we need to watch out for here and that is that since we are getting Snippets for a specific user we don't really want to call this function until we have an actual user ID returned from this use off State hook if you proceed like this there's going to be a data race and this could potentially be called before the user actually comes in from that hook which would result in this being undefined and we just don't want to do that it's kind of not a good idea so a way to protect against that is to just add a dependency inside of this use effect of the user that way this Hook is going to trigger every time user changes and then what we can do is at the very top of our use effect we can just prevent this function from being called if there is no user so we can just say if there's no user then return out of this function because there is no user to get Snippets for this is a very common thing to do in react if your functions that you're calling from inside of your use effect depend on this thing being valid so we're basically saying oh okay like the user is undefined get out of this function don't don't proceed and then if the user does become defined and say they log in use author to finally loads the data from the auth service then it's going to pass this and then we will call get my Snippets which will ensure that we are getting uh valid snippet documents okay so now we can see that in our console we actually are getting those Snippets so if I expand this here we can see that this is coming directly from the database and these are the Snippets for this particularly logged in user which is my Shad Mary at gmail.com right in our database there is shatties group is moderator true and that is what we are seeing on the front end here so this is just currently an array of one Community snippet because Shady shadmary gmail.com is only in my community right now Shady's group if I was in 10 there would be 10 okay so now all we have to do is take these Snippets and put them into our communitystatevalue.my Snippets and then we will actually have a valid way to check if I'm in this community or not so let's do that and we're going to see that this button is actually going to show us whether or not we're in here okay so let's go back to here and let's put that these Snippets inside of state so we're going to do is we're going to call that set Community State value because that's the state that we're updating and then take the previous state and spread it because the only thing we're modifying is my Snippets thanks to typescript we have this nice intellisense here and what we're doing is we're just going to set my Snippets to be sippets so we are going to get a typescript compiler error here and this is due to some discrepancies between the types with call signatures so the way to solve this would be to just Typecast the Snippets to be an array of community Snippets and we have an interface to find four Community Snippets in this file we just need to import it into that other file so I'm just going to export it out of here and now inside of use Community data we can just Typecast these Snippets to be an array of community snippet just make sure you import that from your other file so this is happy now and so just a quick fun typescript fact another way you could write an array of a certain type is to write it like this you could say array and then put that type in there like this this is the exact same thing I personally prefer this way it's totally up to you though okay so now check that out now that is joined variable is detecting that we are indeed in this community because that find function found that snippet of Shady's group inside of my Snippets so if I went to a different Community page for one that I was not in this would not happen and let me see if I can demonstrate that so I'm going to log out of my Chad Mary account and I'm going to log in as someone uh I think I have an account wall.com that still exists and I'll sign in give me a chatty yeah I did okay okay so you can see that I logged in as lol.com and lawatlaw.com is not in this community so is joined is false pretty cool it's actually working if I log out of this community and signed back in as shadmare hey gmail.com check that out it detects that I'm in this community automatically and the reason it was able to do that without me even doing anything is due to this use effect right because we wrote this use effect that is going to trigger every time the user changes so what happened was I was logged in as lawat law.com I then logged out of law.com and the user went from the law the law that law.com object to null and so then this triggered again but it did not make it past this because null is a falsy value then I logged back in as Shad Mary gmail.com then the user went from null to the shadmare he user object which is a truthy value so it made it past this it called get my Snippets it then went and got the snippet docs for Shad Marie's user ID and that is how that happened so I think this is pretty cool and now we're actually able to detect uh whether or not I'm in this community and so now all you have to do is just write the logic inside of these to joining and leaving Community functions and we'll be and we will be able to actually click this button and remove ourselves or add ourselves now let's just come down to the bottom of our try catch Block in our get my Snippets function and just add set loading to be false when that fetching is complete and we actually want to display this loading State inside of this button here in our header so what we can do is actually add the loading state to the return object of our hook just like this and then inside of our head component we can just grab that value from our hook and then we can use it down here on our button I can add is loading state and set it equal to loading from the hook so you saw that temporarily change there so direct your eyes to here and watch what happens when I refresh the page perfect so we can see that the loading state is working and once that my user has been grabbed from the auth service it then fetches my Snippets and we are in business and also one thing you'll notice here is that if I log out nothing happens but we should clear that and this is super easy with recoil because they have a hook that is called the use reset recoil State and this will basically just clear the atom that we give this hook and a single line of code we can do this so let's go over to our user list component that we haven't been into for a hundred years I think we are logging out right here right here okay so what I'm going to do is I'm going to grab this sign out function I'm going to copy it come up here and create another function called log out which is going to be asynchronous I'm going to put that sign art function here and await it and when that successfully completes you're just going to clear our community state which makes sense because now that the user has logged out we don't really want any Community data related to this user in our state anymore so then all we need to do is up here call that use reset recall stay Hook and the way we call that is we can create a variable so we can say reset Community State it's going to be equal to use reset recall State and then just pass this the Community State atom that we are interested in resetting and then come down here and call that function reset Community state that is it and then we just have to come down here and change the on click in this log out button to be our new log out function just like that so now when I actually log out it should clear and we should see this go back to the button that says join so let's see perfect so let's try that again so if I log in shed Mary gmail.com cool log out nice so I'm going to close this file because we are never going to see it again I don't think Vibe user menu now let's actually write the functions for joining and leaving our community and I don't know what it is about these functions I just find them super satisfying to write they just flow and they're just cool I don't know maybe I'm weird but let's see if you feel the same way so inside of our use Community data we did Define these functions here now this is where we're going to get into batch rights with Firebase so let's search up Firebase transactions and if you remember I was mentioning how batch rides and transactions are very very similar and just we have a bit of a reference let's open up our create Community model because we actually wrote Our transaction here and let's talk about just the slight difference between these two things so basically transactions and batch rides represent the same thing in the sense of doing a group of actions with our database and we only want all of them to succeed or none of them to succeed so if one of them fails fail them all that applies to both transactions and Bash rights in the case of transactions though you can do read and write operations whereas batch writes are only right operations that is the only difference very minor so the only reason we use a transaction in this create Community modal was because we were doing a read first we were just simply reading from the database to see if the community exists when we're joining or leading a community we only need to perform right operations like deleting and updating documents so we can just use batch rates that only succeed all together let's go back to our hook and let's write some batch writes so inside of both of these functions there are two database updates that we need to make that we are going to group together into a batch so the first action inside of our batch is going to be creating a new community snippet for this user right if the user's joining this community we need to take this community and create a snippet and then add it to that user's Community Snippets that is the first thing and the second right operation we want to do in this batch is going to be updating the number of members on this community right because if the user is joining the community we need to go in to that Community document and add one to this value number of members so these two actions are going to represent our batch rate so after this batch write successfully completes and our back end has been updated to reflect this user's joining of the community we just need to update our client data which is our recoil state to actually update our UI and reflect this change to the user so we can just write update recoil state which in this case is our community state DOT my Snippets right we're just going to Simply add this new snippet to communitystate.my Snippets so these are the three things that we have to do in this function and the lead Community function is just going to be the exact opposite of this so the first thing in the background I just want to simply be deleting the community snippet from user and then we are also going to update the number of members by subtracting one up here it would have just been one and then we will also update our client to remove that Community snippet from our Reflow state so now that we've kind of defined what these functions are going to be doing let's actually write this logic out so let's start with the joining of community so I'm going to create a try block inside of here and as usual I'm going to log and error if it occurs join Community error error and then we can just set error to be error Dot message perfect and just to make typescript happy let's make this type any and I think actually down here we forgot to set error as well in our get community Snippets function so let's just quickly do that set error to be error Dot message so now let's work on the ideal case so here is how we're going to do a batch write in firestore so we're going to create a variable called batch and we're going to use the function from a pressure called Write batch and we're going to pass this our firestore objects on Client app as usual and so now on this batch object is where we're actually going to perform these operations so let's create a new variable called new snippet and this is going to be of type Community snippet which I think we're already importing we're going to give this a community ID of community data dot ID and we're going to set the image URL to be the community data dot image URL and if it does not exist we're just going to make it an empty string and again these are not going to be this for now but we will just add it here because why not so this represents our new snippet and so we are not a moderator of this community because we are just joining so the is moderator key is not going to be added here so now to actually write this snippet to the database we can use our batch variable defined on line 68 and we can say batch.set and this is going to look exactly the same as the the set dock function that we've used before so we need to pass in a document reference for the document that we actually want to set so we can say Doc and then we can pass this function our firestore object from Client app so the path to the collection that we are writing this new document to is going to be users slash user.uid slash Community Snippets so this is the community snippet subcollection that lives on that particular user's document and then as a third argument to the doc function we give the ID of this newly created document which is going to be Community data dot ID and then the data that we actually want to put inside of this document is going to be that new snippet object just like this so the second thing we need to do in our batch is update the number of members on this community document so because here we are updating an existing document not creating a new one we can use batch dot update and this update function is also going to take a document reference and this particular document lives inside of the collection called communities and the ID of this document is community data dot ID and as a second argument to the update function we're going to pass in an object that is going to contain the updates that we want to make to this document and the field that we want to update is number of members and what we are doing to this field is increasing it by one and firestore has a function called increment and then we can pass in the value that we want to increment this field by which in this case is just one and that is it for our batch rights however just writing these batches out does absolutely nothing in order to actually make them execute and update our database we need to call the function batch dot commit and that is actually going to execute these batch writes and this is an asynchronous function so we need to put the await keyword in front of it so do make sure that you have the async keyword on your joining Community function declaration up here okay so after these batch writes successfully complete without any errors and our database is all nicely updated we can now update our recoil State on our client to reflect this change and we're basically just going to add this new snippet up here to the existing my Snippets rate so we can do that by calling set Community State value taking the previous value of State spreading it and the value we're going to be updating is going to be my Snippets and what we want to do is like I said before append this new snippet to the end of the existing my Snippets array so we can take the previous value of my Snippets and spread it so take what's already there and then just add this new one to the end of that array perfect and that is it for this function all we need to do down here at the end of our catch block is just set loading to be false just like that awesome and I'm just going to quickly move this comment down here so that it is alongside what it's actually describing so now let's work on the lead Community function so let's come down here and create a try catch block just like before we can log and error leave Community error error.message make the type of error any so in our try block we can create a batch variable again using that right batch function from firestore and the first thing we want to do with this batch is delete the snippet off of this user so we can do that by saying batch dot delete we can pass in the document reference for the document that we actually want to delete so the path to the collection that this document lives in is going to be the exact same path is up here so the currently signed in users Community Snippets sub collection is the collection we are accessing and as a third argument the ID of the actual Community snippet document is going to be Community ID which we are passing to the function up here okay second batch rate we need to do is update our number of members again and this is going to look pretty much exactly the same as this update here with just a few differences so I'm just going to copy this one from join Community bring it down here and the only changes we need to make are the ID of the document that we are updating is going to be Community ID and instead of incrementing this value we are going to decrement this value by one since we are leaving the community firestore does not have a decrement function so we can just make this number negative so it's going to add a negative 1 to it and it will work exactly as we desire so now let's actually execute these batch writes by saying await batch dot commit okay so I'm just going to move this update comment down here and now once our database has successfully updated without any errors we now want to update our recall State and we can again do that with the set Community State value function take the previous value spread it the filter updating is again my Snippets however this time we are going to be removing a snippet from the current my Snippets array not adding it and we can do that by using the filter function given to us by JavaScript which is another higher order array function so we can take the previous value of my Snippets and call the dot filter function on it and this is going to Loop through and it's going to remove items that do not meet a certain condition and the filter condition that we're going to apply here is we're going to check that the item's community ID does not equal to the community ID that we are removing okay and that is it for this function we just need to set loading to be false down here and also we can set error in the catch block of here to the error Dot message just like that all right so these functions are done they look good to me let's give them a go so let's go to my users document so Chad Mary and we can see that I'm currently inside of the community chatty's group because I created it so let's go to our app so it says yeah I am joined into this community so when I click on this it should remove me okay so it works on the UI let's see if the database updated yeah you can see that that document no longer exists and this is actually in real time so if I bring this over here we can visualize this a bit better so let me join now and we can see that in real time that added that document to that sub collection so leave the community join the community awesome that is super cool let's go to another community that I did not create new new new and let's try joining this one so join awesome it's added in there leave perfect now let's check the number of members functionality so we can see communities go to new new we said there are two members in there right now so if I join this it updates to three if I leave it decrements to two and these are our batch rights in action so they are clearly working which is amazing so let's put this back over here okay so we can now join and leave communities it updates the number of members and this is a huge piece of functionality of our app this is like a critical piece of Reddit and we have successfully implemented this and that is super cool so all we need to do now is just open that auth model if the user tries to click on this if they are not logged in so let's log out and let's come up here and actually implement this I did have some comments up here we already have the user from our US state hook so all we need to do is add a simple check at the top of this honor join the community function for a valid user so you can say if there is no user then let's open the modal so to open the model we can grab our set off modal State function from recoil so we can say cons set auth modal State and we can use the use set recoil State hook pass in our auth model State atom and then come down here and call that function set authmodal State and the state we want it to be is open true and we can set the view to be the default view of log n and then we can return out of this function because we do not want to proceed with joining or leaving so now since I'm now logged in if I click on this Boom the model opens and it's going to ask me to log in and that is why I love having the auth modal State Global in recoil so that we can protect certain features against unauthenticated users and that is so cool so if I did want to join this community I would have to log in and then it would allow me to join so we are done writing all of the functions for joining and leading communities and the best part about this hook and these functions is that we can reuse this logic in any component that requires it in our case it's going to be top communities but we could add more components to this app in the future that would need the same functionality and we could just reuse this hook and I think that is so cool really clean architecture and I'm super excited about it okay so now we're done with the whole joining and leading a community thing let's actually start working on creating posts in the communities which is probably the most exciting part of this entire project so on Reddit how it works is that inside of community there's this component here that has an input in it and then when the user clicks on it it brings them to the URL R Community name submit where the actual post form is and then they can create the post from within here so this thing is basically acting as a link to the submit page so let's work on that now and then we can actually get rid of these really ugly borders here and start putting in some nice looking all right so inside of components and inside of our community directory I'm going to create a new file called create post link .tfx and this is what is acting as this input linky type thing here so inside of here I'm going to use our snippet and we are not going to take in any props to this components we can get rid of that and the actual HTML for this component is relatively easy and basic it's just a flexbox with a few icons inside of it and then some additional styling applied so now that we actually have a valid left hand side component defined let's just go back to our index page for our community quickly and get rid of this dummy left hand side div and actually use that real component create post link and we can see that show up here in our left hand side fragment okay so let's come back here I'm just going to close my directory so that's my room so what I decided to do for this component is to just paste in the code from my existing project it is a lot of what we have seen already and I do want to get to the post functionality because it's a lot more exciting this component is pretty much just acting as a link to the actual creation of post thing so I figured our time would be better spent doing that but I will explain the important parts so I'm just going to paste that in here and it's only about 70 lines it's not super long there's only one important function that would X over and it's a pretty short one and I will put the link to this component file in the description so you can access it directly all this thing is is just a few icons and an input acting as a link to the submit page the only function I want to go over is this on click function here which is being called when you click on this input so basically all this function is doing is redirecting the user to the submit page of this community which lives at this URL R Community ID submit which we saw on our demo the way we are doing that is with the next JS router and we can access that router from this hook use router which is coming from next slash router and the router does have this push method on it where we can just pass in string URLs and we can redirect the user to wherever we would like and we're just grabbing that Community ID from the URL from router.query so we're just stripping this particular piece of the URL and just as a reminder it is called Community ID because we gave it that name in this Dynamic route down here and just before this we are just doing a quick check to see if you are logged in before we redirect you to that page because the only one authenticated users to go to the submit page and so if I click on this we'll notice that the router works it takes us to the actual submit URL if you recall we did Define this page a while ago uh the submit.tsx file there's nothing in here so that is what this error is from so we're going to just quickly come up with a component here there's not going to be any props so we can just get rid of this and then I'm just going to rename this component to be uh submit post page just like that and I'll just make the text temporarily submit page and we're going to work on this page next we are going to be using the router in the future parts of the build so I wanted to cover how it actually works so I hope that makes sense and now we can actually start working on the submit page and build out the form for users to start creating posts all right you guys let's start working on the submit page this is probably one of the most exciting parts of the entire build because we're going to get into the actual post creation logic okay so let's go to our demo here and this is what we're going to be creating so we have a post form and then we have our about component here which we're going to create after we get the post functionality working to handle the overall layout of this page we can reuse our page content layout component that we created because we can again see that we have this left hand side right hand side layout here so let's come to our submit page and let's actually use that page content component and as you recall all we need to do here is just give this thing two fragments one for the left and one for the right and it will handle all of the layout styling and responsiveness for us so inside of our left content on this page this is where we are going to actually have this new post form right that's going to be one of the components inside of the left and then inside of the right here we're going to have our about component which are going to create after in addition to the new post form we do have this Ted block here that to post so let's create that so in this left fragment we can do we can move this down and above here is where we're going to actually create this title we're going to use a box component as its parent container and we can import this from Chakra and we are not using a flexbox because we do not need Flex styling here so we're just using an ordinary box and inside of here we're going to have the text create a post and let's come back to our app so we can see what we're doing here and actually I'm going to remove these really ugly looking borders because I don't know about you but I am definitely done looking at those foreign so we can close this and now we can see that we have that title there so let's just apply some simple styles to our box component here so we're going to give it a padding of 14 pixels on the top and bottom zero pixels left and right I'm going to give it a border bottom of one pixel solid and the Border color is going to just be white all right and that is that we are done with this okay and now we can actually start creating this new post form so let's go into our components folder and we're going to create a new folder in here called posts because we're going to create a series of postrelated components our first of those components is going to be this new post form Newport farm.tsx and let's use our snippet so we are going to take in some props here in a bit and I'm trying to leave this blank for now let's come back to our submit file and actually import this and use the real component itself all right so we are going to build our form to be nice and modular clean components so that it's very easy to read and extendable so we basically just have this stateful nav bar here and then for each nav item we have an Associated component for example for post we have these text inputs for images and video we have this uploading component and we're not going to work on these features here because if I were to build on this tutorial would be massively long plus these two are a lot more interesting but feel free to add these to your project these would be great exercises after building these other two you're going to have a really strong understanding of how this form actually works and it would be a really good exercise to build these on top of it so let's come back to our app and let's actually start building out the structure of this component so the outermost container of our form is going to be a flexbox let's import this from Chakra and this is going to have a direction of column we're going to give it a background of white a border radius of 4 and a margin top of two now the first component inside of this Flex box is going to be another effects box and this is going to represent our nav bar nav bar has five items in it it has post images and video and these other three so we're going to do is we're going to create a static array outside of our component that is going to be an array of tab items and each tab item is going to have a piece of text and an icon and this is kind of the typical way to create multitab navigation so we're going to create this outside of the functional component because it is a static variable it is not really react related so we can put it outside so we can create the array called form tabs and this is going to be an array of objects and each object is going to have a title and an icon so for example the first one is going to be post and for the icons I'm just going to grab the imports from my project and paste them in here so make sure you have these imported as well the icon for post is going to be IO document text second nav item is images and video the icon for this is going to be i o image outline the third nav item has the text link and the icon for This is BS link 45 degree the fourth one is poll and the icon is bi Pole and the very last one is talk and this one has BS mic perfect now down here we are going to actually map through these tab items and for each one they're going to return some sort of HTML and then HTML is going to be its own component called tab item and we're going to define the tab item component in another file for each tab item component we're going to be passing a single tab item from our array as a prop so we actually want to create a type for our tab items so we're going to say export type tab item as we saw a tab item has a title of type string and the icon has kind of a weird type it is type of the chakra icon dot arguments if you recall when we create icons it has this as prop here and it accepts a type of Icon and so this is actually what the type of these icons are perfect so let's actually create that component inside of posts we're going to create tab item dot TSX use our snippet and this is going to accept a prop and that prop is going to be of type tab item and why doesn't that want to import tab item there we go and we can grab that from our prop tier all right so now if I take that item and I just return the title let's come back over here and rather than just returning this fragment let's return our newly created tab item and this thing is expecting a prop of type tab item so we can pass in the item let's come back to our app over here and we can see that we are getting the titles of those tab items but they look terrible so we have some work to do on the CSS but at least you're getting submitted in there now something else you'll notice about this navbar that is really important is that we need to know which one we are currently clicked on because the Styles change and it also changes which components we're actually seeing in the form so we're going to need some form of state to actually track which tab item is currently selected so I'm going to create a state variable called select a tab and the setter function is going to be set selected Tab and this is just going to be local state so we can just use the use statehub and the default one we just want to be this post one here which is going to be form item tabs at index 0. that is the initial value of state so we can say form tabs at index 0 and we're actually just going to use the text for our selected State and I'm just going to close our nav on the side so we have more room so now we actually have a way of detecting which one is selected because when we iterate through them we can pass in a prop called selected which is going to be a Boolean which represents if this particular tab item is the currently selected one that Boolean is going to be the result of the statement that this particular item's title is equal to the currently selected tab State so if the current one we're iterating through is the one that's selected then this is going to be true so only one of these is going to have selected being true at a single time because we can only have one selected tab item so inside of tab item we now need to accept that as a prop so we can say selected Boolean grab that from here and we're going to use that to apply that conditional styling cool let's come back to our app here and let's start working on the structure of our nav items so basically each nav item is going to be represented by a flexbox and inside of the flexbox we're going to have another flexbox which is going to be the parent container of the icon and each tab item is going to have the icon of the item that's being passed dot icon and underneath this you're just going to have some text and that text is just going to be item dot title perfect so now we're actually seeing those icons show up there okay and this icon container we're going to give it an align items of Center and a height of 20 pixels and a margin right of two and this text here we're going to give a font size of 10 points so it's going to be a little bit smaller there let's actually work on this parent container now which is where all of this conditional styling is going to go using the selected State all right so on this outermost container we're going to say justify Center and align Center so that we're centering everything inside of the nav item we're going to give it a flex grow of one so that they all take up an even amount of space we're going to apply a padding of 14 pixels top and bottom zero pixels left and right and we want to make the cursor pointer because this thing is clickable okay and our hover styling is going to just have a background of gray 50. as you can see now when I hover over these things we're starting to get some Dynamic stuff going on here let's actually use the selected state to apply this conditional styling so the color of the text is going to change depending on if you're selected or not if we are selected the color is going to be blue 500 and if you're not it's going to be gray 500 the Border width is also going to change if we are selected and we're going to give four parameters to the Border width here one for the top right bottom and left so it's going to be 0 pixels one pixel 2 pixel zero pixels if we are selected and if you are not selected you're going to have 0 pixels one pixel 1 pixel 0 pixel the next style is going to be border bottom color and our border bottom color is going to change depending on if we are selected if we are selected we are going to have a border bottom of blue 500 if we are not it's going to be gray 200 okay we're starting to see some stuff up here on the UI there the border right color is going to be gray 200. okay and that is all of the CSS we're going to add here the very last thing we need to add to this flexbox is just a nonclick function and that on click function needs to toggle the selected state so that we're actually selecting the one that we click on in order to do that we need access to the set selected function defined up here so you're going to pass that as a prop as well so as a third prop to each tab item we're going to pass the function set selected tab and it's going to be equal to set selected Tab and then inside of tab item you just have to add that to our tab item props so we can say set selected tab so this function is going to take in an argument of type string because we are sending it a title of the particular tab item that we clicked on and it's going to return void so now we just need to set this as a prop here and then down here add that as an on click function so we can say set selected Tab and pass in our item dot title okay so now if I click on these things you can see that we're actually toggling the state and the conditional stylings are being applied and actually one thing I did miss in these Styles here is just the font weight and we're going to make this 700 so that makes it look nice and bold okay so we are completely done with this tab item component we are going to close this and come back into our new post form alright guys let's continue on with our post form I'm going to collapse these form tabs so they are not in our way and actually we can make the type of this I don't know why I didn't do this before let's make the type of that an array of tab items all right so inside of our component here I'm going to define the three sort of core functions that are going to be used and that really make up our post form so the first one is going to be the one actually responsible for creating a post so I'm going to call it handle create post and it's going to be asynchronous the second one is going to be on select image and this is going to be the function that actually handles what happens when a user selects a particular image from their operating system and puts it into our post form and then the third one is going to be on text change which is going to be pretty much the exact same as those on change functions that we created in our login form and sign up form that just handle what happens when a user types into a text field okay so these are the three functions that are going to govern this entire component and this is the one that actually is going to create the post and send it to Firebase but in order to send a post to our database we're going to need some content in that post which is where these two functions come into play all right at the very top here I'm also going to create some state for our text input and the two inputs that a post contains is a title and a body all right so I'm going to call this text inputs and set text inputs and then we're going to set this equal to use State and inside of here like I just said we're going to have a title we're going to initialize as an empty string and a post body which is also going to be empty and then under here I'm going to define the state that is going to represent the actual selected file for the image that the user selected so we can create a state variable called selected file and then set selected file and this is going to be used state and the type of this selected file is going to be of type string it's going to represent the actual name of the file or the thing that we would use as the source of the image and we're going to Define some more State variables in a bit but these are the core ones required for creating a post and these are the functions that we're going to use so the next component that we're going to create is going to be our text inputs like these inputs over here so let's come back to our app and start building this all right so underneath our navbar Flex container we're going to create another Flex container which is going to represent the container of all the other components displayed in the form so our first component inside of here is going to be those text inputs so I'm going to call this text inputs and I'll comment that out okay and let's go create this text inputs component so inside of our posts folder here I'm going to create another folder called post form and inside of that folder I'm going to create text inputs dot TSX and use our snippet and this is going to take in some props but we will Define that after we have built out the HTML for it so the text inputs are going to be a stack component from Chakra and just as a reminder stack is just a flexbox with the direction of column and then handles the spacing for us and we're going to space out our inputs with a value of three and we're going to make the width of this 100 so that it takes up the entire container and essentially all that's going to be in here are going to be two text inputs and then the button to actually create the post so one of those inputs is going to be an actual input from Chakra and the second input for the text body is going to be a text area component from Chakra so it's a little bit larger than just a regular input and then underneath that we're going to have a container for our button so we can just put that in here for now just like this and this button is going to say post that's the button they're actually going to click on to create a post and we just need to import Flex from Chakra here now that we have something defined let's come back to our new post form and bring this thing in import from text inputs and we have the new form displayed there it doesn't look very good but we will make that a lot better right now and we're going to give this Flex container here a padding of four just to make it look nice and clean there now let's go in here and work on the styling of these inputs and they pretty much have the exact same style length we just need to write out the Styles once and then we can just paste them for the other one all right so the name of this input is going to be title because it's the title of our post the value is going to be coming from our props from that text input state that I created but we'll come back to that our on change is also going to be coming from our props so I will also come back to that our font size is going to be 10 point our border radius is going to be what we always use for and then our placeholder for this is going to be the text title all right and I'm just going to comment these out for now because it was complaining there okay and let's apply our pseudo class styling so our placeholder we're going to give a color of gray 500 we're going to apply Focus styling so when the user actually clicks on this thing what does it look like we're going to give it an outline of none a background of white a border of one pixel solid and a border color of black nice so if I click on that we can see that that is what it looks like that looks super clean nice and that is it for our styling so I'm just going to copy these and paste them down on our text area because we're doing the exact same styling down here let's just change the placeholder of this to be I forgot what the placeholder is actually what is it text optional and that is indeed what it does say on Reddit because I think you only need a title which is kind of weird in my opinion and the last thing is that we just need a name here and that is going to be body and just as a reminder these names are required because we need them inside of our on change function in order for that function to know which part of the state to update okay and actually one last thing I've got to this text area is just a simple height of 100 pixels just make it a little taller than it is by default all right now let's come down to our button and on Reddit the button is sort of over here so we can do that with our Flex container and we can just give it a property of justify and we can say flex and then I'll move it over there and on our button we're going to give this a height of 34 pixels heading of 0 pixels 30 pixels we're going to add some disabled State here because we're going to disable the button if the user has not put a post title and then on click when the user actually wants to post this post what is going to happen this is was going to call our create post function okay and I guess it will not allow us to just have this empty so I'll just say disable false for now perfect and that is it for the layout of this form so all we need to do now is just add the on change function to these two inputs so that we actually have some text being put into our new post so let's come up here and let's define the props that we're actually going to take in to this component so the first prop is actually going to be our text input State and this is going to be an object with two parameters and the first one is going to be the title type string body is also going to be string so this is how we can Define types for objects in the typescript I don't think we've seen this before so our on change function for our inputs is going to take in an event and the event is going to be of type of react.change event and the element producing this change event is going to be an HTML input element or an html text area element and this function is just going to return absolutely nothing so we can just say that it returns void it's also going to take in the very critical function and I'll create post because that's what our button is going to actually call and we're going to declare this as a callback function that returns nothing and then we are going to also take in a Boolean for our loading State okay let's come down here and actually destructure those props so we can say text inputs on a change handle create post and loading just like that all right then on our inputs here we can use the on change so on change is equal to on change same thing down here for our text area the value of this title is going to be text inputs dot title and the value of our text area is going to be it's a text area sorry text inputs dot body perfect and this is not happy I think because we are not passing in any props from our parent yet that is why this is complaining okay so let's actually pass those in all right so our text input prop is going to be equal to the text input State variable handle create post is going to be equal to handle create post on change is going to be equal to our on text change function save that so it formats and the last thing we're going to take in is our loading state which we have not defined yet so I'm just going to say false we will Define this when we actually build out this handle create post function okay so we actually have our form being displayed now and now let's toggle the visibility of this component using our selected tab State okay so we only want to show this component if our selected tab state is equal to post so only show this if we are currently on the post tab so if I come here we're not going to show it we're going to show the image upload component and this is really cool this is how you can create sort of multitab components using state so let's work on this on text Gene function because it is something we have seen before I'm going to copy the input type from our text inputs file paste it in here okay save that to a formats in this function I'm going to destructure all of the values that we need off of our event so the way we can do that is we can strip the Target off of it and then instead of the target we can destructure the name and the value perfect so now we have the name of the inputs that produce this event and we actually have the value that the user has created by typing into the input now we just need to update our state by saying set text inputs take the previous value of State spread it and then only update the field that produces event and that is going to be at field name and we want to set it to a value all right so now if I come to my react extension here and I inspect this form let's open this up a bit so text inputs we can see that we have this form State here body title there empty if I start typing in here that is changing so down here hey this is a nice post perfect so our state is working for our text inputs and we might as well Define that loading state that we are going to need in just a little bit so we'll say set loading is equal to use State we will initialize it as false come down here pass that to our text inputs component and then we will come into here and use that properly for our button our button is going to have loading state that is going to be equal to that loading crop and then now that we have our text inputs we could say disable this button if there is no title inside of our text inputs and then our on click is going to be handle create post okay so we are completely done with this component so we can close this and now we can start working on the image uploading component which I think is really exciting I love working on image functionality so if we come over to our demo here and we come over to that tab we can see that it's a relatively simple component we just have a box and this button on the inside that says upload and if I click on this it just opens up our file system and I can select an image and it will display a preview of the image and then we can either just go back to the post for the text inputs or we can just remove this image to select a new one same exact flow as Reddit all right so let's start building this out let's come back to our app here this component is going to be a sibling of our text inputs component here so let's come into our directory and create inside of post form a new component called image upload.tsx famous old snippet so we are going to take in some props I will leave the blank for now though let's get the actual structure of this component built out and then we can worry about the props so I'm going to close my directory so as usual we're going to use a flexbox for our outermost container here and we want to Center everything inside of this container so we're going to give it a justify equal to Center and a line equal to Center as well and we're going to make the width 100 so that it takes up the entire width and I'm going to put the text image uploaded here and then let's go back to our new post form and I think I'm getting a react key error here yeah react key and the reason that is is because I am forgetting to pass a unique key to our tab item components here this is just a requirement of react when you do map through an array and return a component we do need to pass each component a unique key and that should make that uh that error go away in the future all right so let's come down here beneath our text inputs and we can use our selected tab State again except this time we want to check if the selected tab is equal to images and video and if it is we want to show our new image upload component just like that so now if we come over here we should see that there let's come back into here and build the rest of this out all right so let's handle the case where there is no image selected yet we are going to bring in an image as a prop and we will do some conditional rendering to display that image if it exists but let's get that upload button working okay so inside of this flexbox we're going to have another flexbox and this is actually where our button is going to go so let's import a button from Chakra and this is going to say upload and on this button container flexbox we're also going to make the justify equal to Center and align Center as well we're going to give us a padding of 20 so that it gives it a nice height of the container there and we're going to give this a border of one pixel dashed it's a dashed order and the Border color is going to be gray 200 and then let's make the width of this container equal to 100 so that it spans the entire thing and then we can just add a border radius of four so it's nice and rounded there awesome that looks super clean our button is going to be the outline variant variant is equal to outline and we want to give it a height of 28 pixels and we will have an on click on this thing in just a second as well so let's create that here as just an empty function so what needs to happen when the user actually clicks on this button is it does need to open up the file system like I was showing before and it needs to prompt the user to actually select a file so in order to do that we cannot just use a regular button we need to also use an input element and make the type of that input element file and that way it is automatically going to know to open up the file system for the user to select the file so that's going to look like this we're going to have an input and that input is going to be of type file so if I save this we automatically get this button that says choose file and no file chosen so you can see that if I choose a file here and I select this image you can see that it displays the file name here but we don't want to show this input it's kind of ugly and we already have a button that we want to actually do that same functionality and so what we can do is actually hide this input and then have this button click on this input sort of behind the scenes it's kind of cool and the way we can do that is by using the use ref Hook from react okay so let's come to the top of our component and let's create a new variable called selected file ref and this is where we're actually going to bring in the use ref Hook from react so you can store any value inside of the selected file ref however it is typically used to store HTML elements in it so that we can manipulate and interact with these HTML elements in certain use cases it's a kind of lesser used hook I don't use it super often but it does come in handy for situations like this so what we can do is we come down to our input here and we can make the value of these input ref to that selected file graph and this is going to complain and it's going to say that the types do not match up so we can come up here and we can fix that we can make the type of this ref HTML input element because that is the value we're storing in this graph and then we can initialize it as a null and that should make this happy and very conveniently the input element has a property called hidden we can just pass that as a prop and it'll just make it disappear but it's still there it's just not being displayed so the reason that this is going to be helpful in our case is that because we are storing this input inside of a file ref here we can interact with this input using this ref variable and this will make more sense as I actually write out this function here so in this on click what we want to do is implicitly click on that input which will actually open up the file system so the way we can do that is we can pass in this callback here and this callback is going to interact with that selected file ref dot current and Dot current is just the current value of this ref then we want to actually click on that HTML element here and just to rewind a second there we can see all of the available methods on an HTML element and we can interact with it without actually kind of interacting with it so it's pretty cool and they do come in handy sometimes so here we want to use click okay so now when I click on this button the button is going to go click I'm using quotations with my hands right now on this input element which is kind of cool so check this out so if I click on this that opens up the file system and that is super cool we are we are implicitly clicking on this input so now that we actually have an input to accept a file from the user what do we actually do with that file when it has been selected and how do we do something useful with it which in our case is throwing it in state and then displaying a preview of that image on the screen for the user so in the same way that text inputs have an on change function that triggers every single time the user actually types a key file inputs also have a nonchange function but this one triggers once a file has been selected and also with text inputs we grab the value that the user has typed using the event that the input generates and in this case it's the exact same thing we can grab the file that the user selects from the event that triggers from the file input and this is where that on select image function is going to come into play this is the function that we're going to pass to this input on change function so we're going to say on change is equal to our on select image we haven't passed this as a prop yet but this is the idea so when the user selects a file that on select image function is going to be triggered and we're going to take that file from the change event and do some processing with it and sort in state so that is the idea so let's just leave this blank for now I'm just going to leave this as a empty function here for now and let's go back to our new post form so inside of this function we are still going to take in an event and this event is still going to have the same type as the text input change event and we're going to say that the thing that generates this event is of type HTML and development same exact thing as the text change all right and let's just take a closer look at this event for a second here so typically what we're used to is grabbing the value off of this event from text inputs but the target as we can see also has a property called files so this is how we're actually going to access the file that the user has selected so I'm just going to remove this for a sec so what we need to do is actually read the data from this file and kind of process it and convert it to a form that is going to be useful to us and the way we're going to do that is we're going to create a variable called reader and this reader is going to be a new file reader and this is a class provided by JavaScript and it is used in cases like this for file uploading and to actually read the data from files so the first thing we're going to do is check that there is an actual valid file that we can read data from and the way we're going to do that is by again accessing the event.target.files but the value of this is actually going to be an array because the input is actually built to accept multiple files in our case we're only uploading one so this is only going to be an array of one element but you could upload many if you would like so what we want to do is grab the value at the first index of this array and we're just going to do some optional chaining here to avoid accessing an undefined array and inside of this if statement is where we're actually going to read the data from that file using our reader so we're going to do is we're going to say reader dot read as data URL and we're going to pass this function the actual file that the user uploaded just like this and we do not need optional chaining here because this if statement already checks that this is a valid value so typescript knows that if we make it inside of this if statement this is a valid value so once the reader has finished processing this file and this method completes we want to take that result and actually sort in state because that is going to be the actual image that we can display on the screen and that we're going to store in our database on our post so the reader has an event listener called on load and this is going to trigger once this read as data method completes and we can create a callback function that is going to be executed when this event happens so this on load event is going to emit what is called a reader event and we can take that meter event and actually extract the result of the loaded file and store it in state so inside of this function we're going to say if reader event dot Target dot result so we're saying is there a valid result if there is let's set our selected file to be that selected result event.target.result and as we can see typescript is not happy here and it is saying that type string or array buffer is not assignable to type string or undefined and the reason this is happening is like I was saying before how the input is built to accept multiple inputs so the result could technically be a single file or an array of files and in our case we are just going to only ever have one so I'm just going to Typecast this three string and that should satisfy typescript and that is it for this function here so what we can do now is pass this function as a prop to our image upload component but first let's go into our image upload component and just kind of Define all of the props that we're going to accept in here so the first prop that we're going to select is going to be the actual selected file and it's going to be of type string as we just saw and we want to make this optional because the user may or may not select the file so it's not always going to be defined so the second prop is going to be that on select image function and we saw that it took in an event of type react.changevent change event and this takes in an argument of type HTML input element and it does not return anything so void the third prop is going to be our set selected tab function and that is because after user uploads an image we show them that back to post button that returns them to the post tab so we need to be able to toggle the tab State in here as well so this takes in a value of type string and does not return anything and as a last prop we are going to accept set selected file and that is so that the user can clear select a file state and select a new one if they choose and this is going to accept a value of type string and we do not return anything so void so that's it for our props so let's actually come down here in the component and destructure those so selected file on select image set selected Tab and set selected file perfect now we actually need to pass these props into our component so let's come over here so our first one is going to be the selected file this is going to be selected file we're going to do on select on select image is going to be equal to on select image third one is going to be set selected tab this is equal to set selected tab last one set selected file perfect just like that and look at how clean this component is it just is satisfying to look at it's so modular okay let's go into our image upload component here and for our on change on that file input let's actually pass it that on select image function let's see what happens to our state here when we actually select a file so new post form so this is our state here we can see that for the file state there is nothing there it is undefined so what happens when I actually select a file okay so there was a little bit of delay there as it was loading the data you can see that it's storing this ginormous piece of data in our file state and so this is what we can actually pass to an HTML image to render that image on the screen so just to show you that very quickly if I create an image component here and I pass in the source and the source is going to be selected file let's see what happens we can actually see that the image is being displayed there so it is actually taking this ginormous thing and and is able to interpret it as that image and now all we have to do is just make some styling improvements to this component and then we will be able to work on that handle create post function so inside of our image upload component we basically just want to check for the existence of the selected file meaning that the user has indeed selected a file and if it exists let's just display that image and if it does not we will want to display this upload button here so it's going to be quite simple all we need to do is just add a ternary operator inside of here and we're going to say if there is a valid selected file let's show we're going to show the image which is going to be in Phoenix right in here otherwise let's just show this thing that we have already created which is going to be this flexbox here just have to adjust this a little bit just like that so now inside of this fragment we're actually going to put that image in here and those buttons that allow the user to clear the image State and then go back to the post tab the first component is going to be an image from Chakra and the source of that image is going to be the selected file itself just like that and I'm going to upload an image here so that we can actually see what we're doing perfect so we have the image selected there and on this image we're going to set a Max width of 400 pixels and a Max height of also 400 pixels because we don't want the image to be too too large if the user uploads a super big one and underneath this image here we're going to add a stack component from Chakra and this is where those two buttons are going to go so we're going to make the direction of this row because stack is by default column Direction and the default spacing for a stack is 2 which is going to work here so we don't really need to modify the spacing and our stack is just going to have two buttons inside of it so just like this and our first button is going to say back to post and the second button is going to say remove as in remove that image from state so that they can select a new one all right so let's style these buttons so the height of this first button is going to be 28 pixels and on click we want to call that set selected tab function that we passed in as a prop and we want to pass this the post title so that it actually takes us back to the post tab so if I click on this now it will take us back here perfect and let's just make sure that we have a directional column on this outermost Flex container there we go and on our stack here we're going to add some margin top and this is going to be 4 so that it kind of adds some space between the image and the buttons the second button is going to be our outline variant also going to have a height of 28 pixels and then on click for this one all we need to do is empty out that selected file state so we can say set selected I don't know why I'm not getting autocomplete set selected file to be an empty string just like that okay awesome this looks great so now if I click remove the file is removed from State and the user can select a different one and then once they select an image and they like it they can go back to the post and this back to post button is kind of unnecessary because they can just you know technically go back to here but uh just for improved user experience I think that's why Reddit put it here to make it more intuitive like oh okay I'm gonna go back to the post because that is actually where I can post this post awesome so we are completely done with this image uploading component we can close it and start to work on the actual Logic for creating this post and sending it to the database because we can take in text inputs we can take in an image we are ready to actually store these things in the database all right you guys let's start writing out this handle create post function so let's talk about the series of steps that is going to happen inside of this function so the first thing that is going to happen is that we're going to construct our new post object and we're going to make this of type post and we have not created this type yet but we will do that in just a few minutes the second thing that we're going to do is actually store the post in our database in our posts collection the third thing that we're going to do is check and see if the user has decided to include an image with their post which will mean that there will be a truthy value for this selected file and so what we'll do if they have selected a file is actually take this image and go and store it in our Firebase storage which is actually separate from our database storage and database are two separate things and if you recall from our client app file we did Define this storage instance here but we have not yet used it so this is going to be the first look at that we're going to actually see how to store media content okay so if there is a file we will go and store in storage and this is going to be done using some Firebase functions and one of those functions is going to be this get download URL function so this function is actually going to conveniently return a URL to that image and that is the thing that we want to store on our post document in our database and you might be wondering well didn't we already store the post in the database why did we do this image uploading after creating the post if we need this image URL on our post and that is a very good question the reason is is that we want to ensure that a post has successfully been created and stored in our database before actually uploading that Associated image into our storage because if we did it in the reverse order and we uploaded the image first there is a chance that there could be some sort of error in actually creating the post itself and if that does happen we just now have this kind of random image in our storage with no post that it belongs to so this is why we kind of create the post first once it has been successfully created then update it with this image URL so the third step then would be to update the postdoc by adding the image URL and the very very last thing I'm going to do is just simply redirect the user back to the Community page I'm back on the Community page there is going to be a component called posts which we are going to create very shortly and that component is going to be responsible for actually going to the database getting all of the posts in the current community and then actually storing them in state and then actually rendering them and so that is how we're going to see our newly created post let's tackle step one of this function and that is actually creating our new post object that we are going to store in our database and as I mentioned in this comment this is going to be of type post but we do not have that yet so we do need to Define it and while we are doing that we are also going to create our post atom for our recoil State because we're going to need it across multiple pages so let's go into our atoms folder and inside of here I'm going to create a new file called post atom.ts so let's go ahead and import Adam from recoil and here we're going to Define our type for our post and what I'm going to do is actually open up our demo here so we can actually see all of the data that is displayed on the post and that is going to help us create the type for this post okay so the most important thing is it's going to have an ID of type string it is going to also have a community ID so that we know what community it belongs to also type string we're going to store the Creator ID so the user who actually created this post and we are also going to store the creators display name is going to have a title of type string it's going to have a body a type string lots of strings and we're also going to sort the number of comments that this post has because we can see that down here we are displaying that data here so we do need to include it on our post and that is going to be a number we are going to store the vote status so the number of uploads are down both this thing has and that is going to be a number it is going to have a optional image URL because they are not mandatory for creating posts and lastly we're going to add the created add timestamp and this is going to be up type timestamp from Firebase so make sure that import that top there okay and actually one last thing I forgot up here is the community image URL and this is going to be optional as well because we have not yet built this in and we're including this because you can see on each post that we do have that little image for the community that that post is a part of so that should be it for our post type now let's create a typescript interface to actually model what our actual what post date is going to look like so the first parameter in here is going to be selected post and this is going to be used when we actually do single page view of posts so when a user clicks on a post it's going to store that post in its selected post the second parameter is going to be all of the posts that are part of our community so when we go to Community page we are going to store all of those posts in this stage here and it's also going to start the posts that appear on our home page we're going to come back here and add a parameter called post votes and we're going to add this in when we build in the voting functionality and as usual we need our default State value so I'm going to call this default Post State and this is going to be up type post date and we're going to initialize selected post to the null and posts are going to be an empty array and now all we have to do is create the actual post date recoil atom so post date is equal to atom inside of here we're going to give this a key of Post State and our default value is going to be default host date and then we can pass in the type of the state by passing that in here so this atom is of type post date okay perfect this is all we need for now we're going to come back in a bit and add this voting functionality but for now we have everything that we need so now we can actually import this type from that file if it's going to pick it up there we go since our posts are going to contain actual user data we do need access to the currently login user so what I'm going to do is actually come back to our submit page and grab the user in here and pass it as a prop to run your post form and the reason I'm doing it up here is because we're going to use it in here for some other reasons as well so we're going to say cons user is equal to use auth State pass it our auth object and then in our new post form we are going to pass that as a prop user is equal to a user awesome then inside of new post form we can declare that prop up here so we can say user and it's going to be of type user from Firebase auth and if you remember we also need to include the type of null because it is initialized as null as well as undefined so we can make this optional and this should satisfy typescript over here and we also saw that our post needs the community ID that is being created in so we're going to need to grab that somehow as well and we're going to get that from the router using the use router hook like we saw already so let's come up to the top here and grab the router so Contour router is equal to use router from next router and now inside of our handle create post function we can destructure the router.query object and grab that Community ID from it and let's just accept our user as a prop here and now we actually have all of the data necessary to actually create a valid post and tie it to all the proper entities like the user and the community all right let's actually populate this new post object now so we're going to store our community ID in there that we just grabbed off the router our creator ID is going to be our user.uid our creator display name is going to be the same thing we did in our drop down menu over here when we did that splitting of the email to kind of grab this display name type thing so that's going to be user dot email dot split we want to split at the at sign in the email and then grab the first index of that split array the typescript compiler is not happy here and this is basically having to do with the way we declared our user type up here so I'm just going to change the type of this a bit to make our lives a bit easier with typescript so what I'm going to do is always declare this user as type user and we're going to be able to safely do this because we're going to come back to our submit file and wrap this in a condition and not even show this component until there is a truthy valid user from this hook so that is how we're actually safely able to pass this user as a valid user we are still getting some here though so we can remove this optional chaining and then since we do know that there is going to be a valid user because we are not even showing this component unless there is I'm just going to add the bang operator here and this bang operator in typescript is our way of telling the typescript compiler that we know for sure that this is going to be a valid value so it is safe to proceed and then this error up here has to do with the router being a string or an array of strings or undefined but since in our case we are only going to have a single nonarray string and we are going to assume it is not undefined I'm going to change the value of this and just Typecast the community ID from the router to be up type string to satisfy the typescript compiler this is actually better I prefer to have this always as a user and then just kind of protect against even showing that component uh without even having a valid user so I think that's just a bit more safe sorry that was a bit of a typescript tangent that we had to go on there but it was a grid lesson now the next part of our post is going to be our title and this is going to be from text inputs dot title our body is going to be text inputs.body and we can initialize the number of comments to be zero because all new posts have zero comments and the vote status is also going to be zero all we're missing is our created at timestamp and to do that we can call that server timestamp function from firestore and this is basically complaining because as the server timestamp function is only available on the actual firestore servers we don't really have access to it on the client so that is why typescript is kind of freaking out here and we could technically create our own custom type to match what is created on the firestore server and put all these fields on it but we can also just as a simpler solution just Typecast this to a timestamp from firestore so do make sure that Imports up top here all right let's actually move to step two of this function which is going to be actually storing this in our database and this is where we're actually going to start writing some asynchronous code so I'm going to create a try catch block to help us with our error handling so if an error occurs we were going to log candle create post error log the error and then make this of type any and actually I just want to see the message of this error okay so inside of our try block we're going to create the reference to our newly created post document so it's going to be called post doc ref and this is going to be the result of our add doc function from firestore and we need to tell it what collection we want to write our new document to so we can pass in the collection function this is going to take in our firestore object from our client app file and the name of the collection that we want to write to is posts now as a second argument we can just pass in the data that we want to write into this document which is going to be new post okay now let's get into this image processing stuff so let's bring this up here so we have some good comments so let's check if there is a selected file so we can say if there is a selected file we want to create an image ref which is going to be a reference to the image in our Firebase storage so we can use this function called ref from Firebase and this is the function that's actually going to connect to our storage instance so we can pass it our storage from client up and the path at which we want to store this image is going to be post slash postdoc ref dot ID and this is actually how we're tying this image to this specific post we're actually putting the ID into the storage path and then slash image image source and kind of this posts image but this is just a reference we actually need to upload this image and the way we're going to do that is by using the upload string function from Firebase storage we're going to pass it our image ref and we're going to pass it the actual thing we are uploading which is our selected file and so we're uploading our selected file inside of our image ref and as a third argument we need to pass the format of this file and our reader returned a formatting type of data URL because we said read as data URL so that is what the format is for that and then once that is finished uploading we need to actually get that download URL which is going to be the actual URL that we can use to view this image which is kind of what I was referring to up here so let's move these comments down so check first selected file store in storage and then we want to get the download URL and then update our post so we can create a new variable called download URL and this is going to call that function get download URL which is from Firebase storage and the thing we want to get the download URL for is our image ref now that we actually have a valid image URL let's update our post document so we can say await update doc pass in the document ref that we want to update and the update that we want to make is to the field image URL and that value is going to be download URL awesome now let's just add our loading State up here so set loading true and then at the bottom of the try catch we can set loading to be false and now what we need to do is just redirect the user back to where they came from which is the community home page so you can call this function router dot back and that handles that for us I'm just going to comment this out for now though so we can actually kind of analyze the post creation a bit more while staying on this page all right I think we are done writing out this function let's actually give it a spin and see if we can create a post and store this image in our storage all right before we do that we do need to go in to our firestore project here in our console and go into storage and just change the permissions a bit because if you go into the rules by default the storage is completely locked it's saying allowed read write if false and false is always false so it is never going to allow you to do this so I'm just going to change this to True which is going to allow us to always do it in all circumstances which is fine for development we are going to come back and write some rules in a little bit so let's go see if we can actually upload these things we should see a new folder in here and we also should see a new collection here called post so let's come to our form let's create first post here is the first post the exclamation points and let's upload an image as well and this image is going to be our classic demo image and then back to the post and let's give it a go oh what they doing what they're doing okay so it was loading for a while and we did not see an error here so let's go see what happens okay our database let's refresh this we can see that yes there is a post collection very nice new post document in here awesome and look at this the image URL is probably the most exciting thing of all this um but yeah all that data was stored in there so this image URL is actually the thing we can literally type into our browser and in a new tab and like it will take us to this image that is so cool and that is how we're actually going to display our images on our posts in our communities very cool and we can go see the actual image inside of our storage here if you come to storage we can see that there has been a new folder created called posts because that is what we gave as our first path segment here inside a post we're going to see a folder for that specific post and then we have stored a file called image in here and if we click on this we can see that it gives us a little preview and very nice this is so cool this makes posts so much more exciting because images are just fun and they make it look really cool and just for good measure let's try creating a post without an image so we would redirect after a successful post so we would be already back on the Community page right now so the post form would be clear but since we kind of commented out the router here we just have to kind of manually clear the form I'm just going to create a new title called second post and here is the second post and we do not have an image so let's give this a go much faster this time because there's no image uploading come to our firestore database posts you can see that there has been another post created but this time there is no image URL which is good so it can handle both cases just like Reddit awesome so now we can actually create posts which is another ginormous piece of functionality solved and now all we have to do is go back to the Community page call the database get those posts and then actually view them on the screen in the feed okay guys one last thing I actually do want to add here as well is just a quick error component and it's going to make our app just a little bit more robust so underneath our loading State here I'm just going to create the error State and it's just going to be a Boolean so we're going to say use State false and we're just going to use a Boolean here because we can just put the string in ourselves in the error message so inside of our catch block in the handle create post function we just need to set error to be true if an error does occur and we're going to come to the very bottom of our component here between these two outermost Flex boxes and we're going to check if there is an error and if there is an error we are going to display some component and that component is going to be an alert component from Chakra UI so chakra makes it super easy to place these really nice looking alerts here so it's going to come to the alert docs and grab this one here then we can just paste it in here like this add all of the missing Imports okay and we can save this and see what this looks like and we will just make this true so we can see it okay so that looks kind of not good so we're just going to get rid of this close button we don't really need that we don't really need this description and I'm going to make this regular text from Chakra and this is going to just say error creating post perfect so that looks pretty good and that is all we have to do so let's change this back to error and yeah now we are covered for errors for creating a post so now we are going to go back to the Community page so let's go to that index Community ID page and we're going to create our second left hand side component which is going to be the actual post component and that is the component we're ever going to actually go and grab all of the posts from the database and then display them on our feed for that community and then once we can actually view posts in the communities we will then work on this dropin menu here so that we can actually more easily navigate through communities because right now we kind of have to go into the URL manually and go to one that exists so let's create the actual file for that component and that's going to go inside of our post folder here so inside our post I'm going to create the component posts.tsx so this is sort of the root of the post folder then we're going to use our snippet this component is going to take in a few props and the first one is going to be the actual Community data from its parent which is the index page of the community and this is going to be up type community so let's import this from our communities atom and then we're also going to take in the user ID and this is going to need to be optional because this is not always going to be defined because the user does not necessarily have to be authenticated to view the posts okay let's change this text to posts and then come back to our index page here and actually bring this in from that file just like that and then we can pass in our community data as a prop just like this perfect so now we actually have our post there okay and you know what actually I'm going to actually not take in this user ID as a prop and I'm probably going to call the use auth State hook here but we will worry about that in a bit so basically uh what's going to happen here is once this component renders we need to go actually fetch the post from the database store those posts in state and then map through them and then display each one and we're going to create a separate component for each individual post it's going to be called a post item but for now we can write sort of the governing logic of this component so the main function in here is going to be called get posts and it's going to be asynchronous because it's going to be asynchronously talking to our database and then we're just going to have a user effect in here as we're going to run as soon as this component actually mounts and this is where we're actually going to go and fetch those posts so right inside of this as soon as the component mounts we just want to call get post and we are going to create a custom hook for our post as well because we are going to be sharing a lot of post logic between pages and components like voting on posts and deleting posts Etc and actually just sharing Post State so we are going to create a hook called use posts let's get our posts first and then we will worry about starting the mistake and this custom Hub stuff that I'm talking about all right so inside of our get post function we do want to create a try catch block to make error handling much smoother and then up top here we're going to create some extra States you're going to have our loading State as usual set loading is equal to use State and this is going to be equal to false initially so in our error block let's just create a log of a get post error and you will log the error Dot message and let's make this type any and what we want to do in here is literally just get posts for this community that is it and this is going to be our first look at an actual like database query with Firebase if you go take a look at our post collection here I know there's only two of them and they both have the same Community ID so perhaps not the best example here but picture a hundred Post in here all from different communities the only one to get the post documents that have a community ID that matches the community that we're currently in by the way we can grab that from our destruction props here and we're going to use the query function from firestore to do this so let's come inside of our try block here and let's create a new variable here called post query and we're going to bring in our query function from firestore the first and only mandatory argument of this function is going to be a collection that we actually want to query so let's create our collection reference using that collection firestore function and as usual we need to pass this our firestore object from Client app and the collection saying that we are querying is posts so you can see that is happy with just that it will just go get literally everything in this collection but we don't want everything in this collection so we need to pass in some query specifications here and the first one is going to be a where Clause so we need to import where from firestore and we want all of the posts where Community ID is equal to the community data's ID so the parameter that we're actually interested in is going to be Community ID so the second argument is going to be our operation clause and in our case we want to check if the community ID is equal to some value but there's all sorts of operations you can do in here but we want to use the equals we want to graph all of the documents in post where Community ID is equal to community data dot ID that is the exact set of documents that we want and we also want to just order these documents by a certain field as well and that field is going to be our created at field and the order that we want them in is a descending so that they are reverse chronological okay so now that we actually have a valid query built we can pass that query to our get docs function to get all those documents so we can say postdocs is equal to await get docs and all we need to pass this is our post query okay now we want to actually extract all of the data from each of those postdocs and store them in a JavaScript object that we can actually store in our recoil State we did something very similar with our Snippets so it's going to look very much the same so we're going to say posts is equal to post docs dot docs which is an array of all of the actual firestore document objects we want to map through all of these and extract the data and return an actual JavaScript object with each one's ID so we can say doc.id and then spread all of the data inside of that document and this is what we're going to actually store in our post State here so let's log what this looks like so we can see if we are getting some data posts okay so our use effect is working the component is rendering so we should be seeing this data in our console and we are getting an error nice okay so this is where we are going to actually create our first database index if you remember when I sort of did the intro on the cloud firestore I briefly said that indexes are a way for firestore to actually efficiently query your data in order to perform queries we actually do need and index on that document but it's extremely easy and firestore handles all of the heavy lifting all we have to do is literally click on this link and all you have to do is literally click create index and it's going to have a status of building for a few minutes it takes a few minutes for it to Cloud fire starts to actually do this indexing so give this a minute and when it is done we will come back all right you guys we are now back and this index has a status of enabled so we should be able to safely make queries okay so let's refresh this Community page and see if we can now successfully see these posts in the console okay yeah you can see them here let's take a look at them so we are getting the data on the front end here which is super cool and so these represent all of the posts inside of this current Community Chinese group and now we actually have this data on the front end so we can store this in our post date which is going to lead into US creating this new use post hug that I mentioned which is going to manage our post date for us so inside of our hooks directory here let's come create another one called use posts dot TSX I love custom hooks like when I was first learning react I kind of didn't really understand the point of them um and I was like I just didn't feel like I had enough knowledge to actually build custom hooks I just didn't understand them enough but now I'm actually really really seeing the um the benefit of them just to kind of extract repeated logic that's why I want to give you guys experience building something with this project so you can learn how to actually know when to use a custom mug okay So eventually in this hook we're going to have about six or seven State variables the only one we need right now is our post date Atom from recoil so we can bring that in using our reuse recoil State hook we can say Post State value and set post date value is equal to use recoil state and we want to pass in our post State Atom from atoms slash post atom I'm going to close my directory actually so as far room and if you recall in custom hooks we do not want to return HTML we want to return some data and functions so we're going to wrap all of that stuff in an object and what's going to go in there for now is going to be that post State value as well as our set postate value and while we're in here I'm going to create the actual function declarations for the ones that are going to be coming so that you can kind of maybe understand why we're creating this hook in the first place so the first function that's going to be in here is going to be the onboard function that's going to be used when we actually vote on post another one is going to be on select posts when we actually click on a post and go into single page view and then another one is going to be cons on delete post this is going to be asynchronous okay and the entire reason we created this custom Hook is because we are going to need this data and this functionality across multiple pages and components so hopefully that provides some clarification if you were confused let's come back to our post component and we can bring in that data now from our use post Hook by calling it just like this and the data we want to bring in for this component right now is our post State value as well as set to post a value just like this so let's store these posts in our recoil State and we can do that with our set Post State value function and we can take the previous value of post date and spread it because we only want to update a single field and that field is going to be posts and our updated value post is going to be the above posts and we're going to Typecast them to an array of posts and we can import this type from our atom file just like this so now we're actually going to have access to our posts via this post date value all right you guys now that our posts are inside of our recoil atom we can now create our post item component and actually start displaying these posts on the UI so inside of our post folder I'm going to create another component called post item.tsx and use our snippet all right you guys I'm going to start by declaring all of the props that are going to take in to this component because I think it will help make the building out of the HTML a lot more clear and intuitive all right so the very first prop and the most important prop that this thing is going to accept is going to be the post itself so let's bring that in and make sure you import the type from our post atom file the second prop I'm going to take in is going to be called a user is Creator and this is going to be a Boolean which represents if the currently signed in user actually created this post and is the owner because if they are we're going to allow them to do certain things like delete it the next problem we're going to take in is going to be the current user's vote value on this post have they voted on this post and if they have was it an upvote or a downvote and we're making this optional here because it's only going to exist if this particular user has actually voted on this particular post and we are also going to take in the functions from our use postage hook because our parent which is post is going to grab those functions from the hook and then pass them to this component and I'm going to just declare their types as empty callback functions for now you're going to come back to these and specify the type definitions once we actually are passing them in but for right now we are not so I'm just going to declare them as empty so we have our on delete post and we're just going to have our on select post just like this okay you can come down here to our component and actually destructure our props to grab them use their vote value on vote on delete post and then on select post awesome I'm just going to close my directory so we have some more room there now what I'm going to do is paste in all of the icon imports from react icons for this component because there there's quite a few and this is going to be the icons that we are seeing for like the voting the uploading the downloading and all of these like messaging and sharing and saving icons there are quite a few icons in this component so I'm just going to import those from my repo I will put a link to the uh this component in the description so you can directly access it but uh these are them here lines three to thirteen okay with all of our props passed let's come down here and actually start building out the UI for this component here so the outermost container of our post is going to be a flexbox from Chakra and this is going to have a border of one pixel solid and a background of white and just so we can see actually what we're doing here as we're creating it I'm going to render the post dot title text here and then come back to to our post parent here and inside this div I'm going to just remove this actually and create a fragment and then inside of this fragment I'm going to map through all of the posts and return for each one a post item let's do postatevalue dot post dot map and then we want to take each post item inside of that array and create a post item component for each one and this is complaining because we are not passing at the required props so let's pass in all of the required props and we will need to bring in those on vote and on delete functions from our use post hook and I believe I did not actually put that inside of the return object here so inside of here I'm just going to add on vote on select post and on delete post so that we can actually access them from our hook so let's go back to posts and inside of here let's grab on vote on delete post and on select post awesome now down here we have everything we need to satisfy typescript here so post is going to be equal to the current item we are iterating through the next one for user is Creator we need to check does the current user's ID match the Creator ID on the post item so we're going to need to actually bring in our user here and if you remember I kind of mentioned that before with this use offset hook so we're going to bring them in cons user is equal to use off State auth now we can check okay well does this user's uid equal to this post items Creator ID and so this is going to be a Boolean again that represents whether or not the currently login user is the owner of this post user vote value is going to tie in to that voting functionality which we do not currently have so I'm just going to hard code this as undefined because that is what the value is actually going to be if they have not devoted on the post so we're going to sort of mimic that the next prop is going to be our ongoing function on vote is equal to on vote on a select post is going to be equal to on select post and lastly on delete post is equal to on delete post and this is complaining here type void is understandable to type oh okay so for are on select post function we do need to specify that it is returning a void the reason we don't put the other ones is because we declared them as asynchronous and when you have an asynchronous function you don't necessarily need to specify the return type okay so that is happy now and we actually are seeing data show up on our screen here so our post item component is working I'm actually going to change this fragment to be a stack from Chakra so that it nicely spaces them out for us by default and we don't have to apply any extra margin on the post items this stack will handle that for us so let's come back to our post item and continue on with the styling okay so on this outermost Flex container we're going to add a border color of gray 300 as well as a border radius of four all right and let's apply some hover styling with our hover pseudo class we can say hover the Border color we want to be gray 500. all right and we want to apply a cursor of a pointer because they are clickable items and then we can add our on click function here which is going to call that on select post which currently does nothing but we will put it here anyway okay so let's go take a look at a post item inside of our demo here to kind of look at the overall structure of this thing so this entire thing is represented by this Flex box that we just created here and inside we can see that there is a left hand side column this kind of gray background thing with the voting buttons in here and then on the right hand side we actually have a majority of the post content so from a high level we really only have three major containers here and I just wanted to show you that so that writing of the HTML is a bit more intuitive so our first child of this Flex box is going to be another flexbox which is going to represent that gray voting column so you're going to make the direction of this column and we're going to make the Align equal to Center so it's nice and centered and we want to give this a background of gray 100. you want to apply some padding of two and the width of 40 pixels okay so we can kind of see that show up on the UI over there then lastly we want border radius of 4. okay so then inside of here we're essentially going to have two icons the upload and the download icon and the actual text for the vote status on this post so we can create our first icon here so icon make sure that comes in from Chakra and the icon we want to display here is actually going to be conditional as well depending on if the user has uploaded or downloaded this post okay so we can use that user vote value and we can check does it equal to one meaning that they have upvoted this post if it does we want to show sort of a filled orange icon right like if you go to the demo here if I click on this you can see that it does change to a more filled icon so if they have indeed uploaded this post we want to show Arrow up Circle sharp I don't know why I'm not getting autocomplete that's kind of annoying to type that entire thing out okay and if they have not voted on this post we want to just show Arrow up Circle outline and the color of this icon is also going to change depending on if the user has upvoted this post so if the user vote value is equal to one you're going to make the color of the icon that orange Reddit color brand 100 if they have not we want it to be gray 400. all right we're going to make this a bit bigger so we're going to say font size is going to be 22 and then when the user actually clicks on this icon we want to call our on vote function underneath here is going to be just a piece of text that shows the vote status of this post so we can say post dot vote status and these words have not been voted on so it is currently zero and all we want to do to this text to just make it slightly smaller so we'll say uh nine point okay now underneath this we're going to have another icon which is going to be our downvote icon so I'm just going to copy the output one and come up here for the downvote we want to check does the user vote value equal negative one meaning that the user has downloaded this post if they have we want to show IO arrow down Circle sharp okay the autocomplete isn't now working which is super nice and if they have not downloaded this thing we wanted to show IO Circle that line if I just change this to like true just so we can see that we can see that that thing is sort of filled in now and we haven't applied the color yet but I just wanted to show how the icon actually changes depending on what the user row value is all right our color again we're going to check how they downloaded this thing if they have we want it to be this hex code 4379ff which is the color I found that most closely resembles the download color on Reddit then we just want gray 400 if they have not voted if they have not downloaded and actually on both of these I'm just going to add the cursor of pointer I forgot that on the f01 okay awesome this is looking pretty good let's keep going all right so we are done with the left hand side boating container so let's just get rid of this title here and we're going to start working on the right hand side of this component which is going to be most of the other post content bringing it is a direction of column as well as a width of 100 and then inside of here we're going to add another stack and this is just going to again evenly space everything that's going to go inside of here we're going to give this a spacing of one and then padding of 10 pixels so inside of this vertical stack we're going to actually have a horizontal stack and this is going to contain that text that says posted by and then the username that posted this and then the community icon if it exists so we want to make the direction of this row and we want to make these spacing equal to 0.6 and we want a line to be Center so everything is centered vertically and then we want to make the font size of everything in here nine point okay so the first item inside of this horizontal stack is actually going to be the community icon here however we can see that this only is there when we're on the home page of Reddit if we actually go into a community that icon is no longer there because they all belong to the same Community we don't really need to uniquely identify it like that so we're going to add a condition here in this stack that's going to basically check if we are on the home page or not we're going to come back to this one we actually fill out the home page it's a very simple addition uh but I'm going to put a comment in here for now we are going to do a check if you're on the home page and if we are we want to actually display the icon of the community that this post is part of but for now we are sort of building the in community version of this so there is no icon the next component then would just be simply the text so this is where the actual posted by username is going to go and if you remember we stored the author's user display text on the post you can say post dot Creator display name so let's come back to our app so we can see what we're doing here and you can see that my username is actually showing up there because I created both of these posts and in addition to this we're actually going to say when this was posted like posted by Shad merhi 10 days ago or two minutes ago we want to show the actual time that it was posted right and in order to do that you're going to use a library called moment so just go to npm moment and we can basically pass this a date of any kind and it will basically format it in a very nice human readable way very popular Library you can see it has 17 million weekly downloads so very heavily used and it's going to make our app display very accurate and human readable at times for our users to see so we're going to install that okay then once that's done the text we want to display next to the username we're going to need some JavaScript because we're going to call a function from that library and that function is going to be called moment so we're going to import moment from moment so the argument to this thing is going to be a date so we're going to say new date and the date that we want to pass it is going to be our posts dot created at dot seconds because if you recall the type of this is actually a timestamp and the timestamp is not at eight but the timestamp does contain the seconds parameter on it that can be used to create a date okay then we need to actually multiply the seconds by a thousand here and then we can actually call a function on this called from now and that is going to format the date as in like x amount of time from now so 18 hours ago so very cool I think this is awesome I love moment okay so typescript is not happy here and you can see that it's saying that the object is possibly undefined and by object it's referring to the created act parameter on the post the reason it is complaining about that is because if you recall in our post atom I actually made the created that thing optional which means it could be undefined and I actually realize that we do not need to do this it is always going to be there so I'm just going to remove that question mark save this and that should make this happy and so my apologies about that I initially thought that it was going to be an optional parameter okay so we are done with this inner horizontal stack so let's come outside of that but still inside of our vertical stack here and we want to actually put the post title in here now we are ready for the Post title awesome inside of a text component we're going to actually use post dot title okay we're going to make the font size of this equal to 12 point and the font weight we're going to make it heavy we're going to get 600. whoops font weight all right so underneath this title text is we're actually going to display our post image okay so let's write a condition to check that it exists so we will say post.imageurl if this does exist let's show some component and that component is going to be an image and the container of our image is going to be a flex container okay and we're going to make the justify of this equal to Center as well as the Align here and then we're going to give this a padding of two and inside of here we're actually going to have our post image so bring an image from Chakra and our source for this image is going to be the post.image URL awesome so if I save this we can see that the post is actually there how cool is that we want to set a Max height on this image to prevent it from taking up too much room if it's a very large image so we'll set a Max height of 460 pixels and we're just going to add an ALT key which is typically used for images and we're just going to say post image just some alternate text if the image for some reason is not available and actually I forgot a really important piece just above the image here we do want to add our post body that's also another really important thing post dot body just like that and we're going to change the size of this as well to be a font size of 10. perfect so this is looking more and more like Reddit by the second okay so now we are done with this vertical stack here we can come outside of that still inside of our Flex column here though and we're going to put in the container for kind of the post footer there where we have all those icons and user actions where they can share the post delete the post Etc and comment on the post so let's come down here okay so the container for this is going to have a margin left of one it's going to have a margin bottom of 0.5 and it's going to have a color Gray 50. and we're going to give this a font weight of 600 so everything inside of here is going to have the font weight of 600. okay so and then essentially we just have a series of basically icons with a company text we have icon text icon text right each each little thing has an icon and a piece of text so each icon is going to have its own Flex container so we can create our first one by saying icon and this icon container we're going to give it an align of Center a padding of 10 uh sorry a padding of 8 pixels top bottom 10 pixels left right and a border radius of four okay and on Hover we want the background color to be gray 200 and then lastly just make our cursor pointer perfect just like that so if I hover over this thing we can see that it has that sort of gray background there okay so this first icon is going to be the comment icon which is going to be BS chat and we're going to give this a margin write of two and right next to the comment icon we actually want to display the number of comments that this post has so we're going to say post DOT number of comments and then we can give this a font size of nine point there we go okay and actually I decided to remove this font weight of 600 here you can leave it if you choose I just think it looks a bit cleaner if the text is a bit lighter okay perfect so now what I'm going to do is just copy this and clone it downward uh for the other icons and the second icon is going to be our i o Arrow redo outline which is sort of the share icon so inside of the text here we want to say share then the last icon down here is going to be the save icon so we're going to say I O bookmark outline and we want to display the text save awesome how good is this looking this is so cool and I love how the number of comments is actually Dynamic so every time a comp is created this is actually an accurate number and actually we are missing one icon here and the icon is going to be the delete icon but we only want to show this if the user is the creator we do not want to give anyone the option to delete any post only if you're the owner of this post you can see this button here and this icon is going to be the AI outline delete and it's going to say delete okay and the on click for the container of this delete icon is going to be the on delete okay so we are completely done building out the UI for the Post item component and the only thing that's going to change actually is this home page check that I was talked to before where uh if we see them on the home page it just displays the community icon but that's very minor okay perfect so now that we can actually create posts and view them on our page let's go try creating one in the submit page and then actually have it redirect us back to this page and see what happens and I just want to make sure that we actually did implement the router we did not okay so I'm just going to uncomment this so that when we do create a post successfully it is going to Route us back to the page and actually we really only want to do this when the post has been successfully created if an error occurs we don't really want to reroute the user only in the successful case so I'm going to move this up into the try block of the try catch okay so let's actually go try creating a post and seeing what happens so so let's create the title of I love chakra UI and the text is going to be uis made easy with chakra awesome let's go add an image here okay and the only other image I have here is um is this image of me I'm using for the thumbnail here so let's let's use this one and we'll come back to the place I'm actually going to change this to am I good at photoshopping and then the the description is going to be null okay I'm going to tell myself no so I'm going to click post and let's see what happens so we are redirected back to the page and then it fetches the post from the database and we can see it as soon as we post it how cool is that I think that's really cool okay and one last thing I'm going to very quickly add is going to be our post loader component which displays those sort of skeleton components when the posts are being loaded from the database so inside of our uh post folder here I'm going to create a new file called post loader dot TSX and I'm going to use our snippet here and chakra makes doing something like this so easy they have this component called skeleton so let's go see what this looks like chakra skeleton and you can basically create any shape you want of this like skeleton loader component and so you can kind of build it out to look exactly like your component and I think these are cool I think these really really really improve user experience like when I'm on a website like Airbnb or something and I see these loaders it honestly just makes the app feel better rather than just like seeing nothing or something like spinner Spinners are good too but I really like these skeleton components I think they're fun okay so what I'm going to do is I'm just going to paste in my loader from my completed project just because it's only like 15 lines and it's just basically something that's really easy to copy and paste so I'm going to put this in here like this add all missing Imports and I will put the link for this in the description so you can just quickly grab it but very simple component and all we need to do to use this component is come back to our posts component I'm going to close my directory here and inside of the return statement of our post.tsx file I'm going to create a outermost fragment and wrap everything in the fragment and the reason I'm doing that is so I can add some JavaScript in here what I want to add in here is check if loading is true and if loading is true I want to show our post loader and for some reason it's not importing there we go okay and if you are not loading then let's show the actual post content so we'll move the stack inside of here just like this okay so now if we come back and if I just make this true for a sec we can see what this looks like so you can see that created these components using the skeletons from Chakra to make this really nice looking loader and honestly I just I just get so fired up about these loaders I just think they look so cool and they really do improve the user experience so anyway we can actually check if loading is true using the real loading so now if I save this and I reload I actually don't know if we're setting loading to be true I don't think we are no we're not okay so inside of our Drive lock here I'm just going to set loading to be true and then at the very end just set loading should be false awesome so you saw for a second there that it actually was loading let's do this again cool so I think that's amazing all right and we just need to add a key to our post item here to prevent that console error we are seeing on the right hand side over here so I'm just going to make the key the unique ID of this post and also we can actually improve our image loading State because if you see there if I just refresh it loads the post but then for another second after the image is still kind of loading and that can be improved with just a simple additional State variable inside of our post item so let's quickly add that it's just going to be a few lines so up top here we can create a state variable so basically for each post item we can add a state called loading image and set loading image and we can initialize it as true because initially the image is going to be loading and for folks that don't have images this doesn't even matter it's just kind of a redundant State variable but if you come down here to the container of our image and inside of this container we can add a condition to check to see if loading image is true and if it is we want to show one of our skeleton components so we can say skeleton and we want to make the height of this 20 sorry 200 pixels the width 100 percent and the Border radius 4. and this is basically just going to mimic the shape of an image if the image is kind of loading and this is not the same loading as loading from the database this is like the posts have been loaded from the database but the image is just sort of in the process of still rendering and this will make sense when we see it in the app here okay so if we save that we can see that there is a sort of loader beside the image here but we don't want to display that all the time obviously that looks kind of weird so on our image component there is a property called on load and this is going to trigger when this image has actually successfully loaded so we can call our set loading image function and just set it equal to false just like this okay and since the updating of state is asynchronous we can hide this image to actually prevent the image from being shown at all until that state variable has updated as well so that there's no sort of flash of both of these two things appearing okay so if we save this and then if we refresh this is how it behaves awesome so it's just a bit cleaner and it kind of signifies to the user that there is something being loaded into the image awesome guys so that is it for our post item component other than those few minor things with the whole home page icon thing and now we can create posts in communities and actually view them the next step is going to be to actually implement the voting functionality and the commenting functionality so we are making solid progress I'll bet you guys so we're going to start off with handling the deletion of post functionality because now that we can create them it would be nice if we could delete them as well and it's not an overly complicated function so we might as well just get it out of the way now all right so I am inside of this post item component here and just underneath this loading State here I'm going to create a new function called handle delete and this is going to be an asynchronous function okay so we're creating this function but we also have this on delete post function that we saw that we defined in our use post hook here so you might be wondering why do we have two delete functions and that's a really good question this function is actually going to call this onto the post function and the on delete post function is going to be responsible for actually updating our database and uh and state but the handle delete function is going to handle the error handling for us inside of this component and a few other things event propagation but I don't want to get too deep into that until we get to it okay so inside of our handle delete function I'm going to create a try catch block and at the top of our try block let's create a variable called success and this variable is going to represent a successful response from the on delete post function so basically we click on a post that we want to delete that post is sent to the on delete post function the undelete post function is going to reach out to our firestore database and delete that document when that is successful is once you return to this function a success message and then we will know inside of this function that the post has successfully been deleted so we're getting some errors here and the reason that is is because our prop type for this function is currently this and type script is saying well this function that you declared up here definitely does not match what is going on down here so we do need to fix that okay so to fix our type declaration here we're going to change this to a function that accepts an argument of type post and this function is going to return a promise of type Boolean and it's returning a promise because the on delete post function is asynchronous because it's asynchronously communicating with our database and then JavaScript asynchronous functions can only return a promise so our on delete post function is going to attempt to delete the document from our firestore database and if it's exceeds it's going to return true and if it fails it's going to return false and that is what the success variable represents I hope that makes sense and that should make more sense when we actually write out this onto the host function which is coming very soon and this helps us with our error handling because we can say if there is no success if the undelete post function was not successful then we want to throw a new error error and say that we failed to delete the post then now here we can set our error state which we can create right now so you can say class error set error is equal to U State we can set it equal to false then down here we can actually call it's a set error and set it equal to error Dot message and the message in this case is just going to be this failed to delete post string here that we're throwing in the error here okay so if we make it past this if statement we can just throw a log in here saying that the post was successfully delete it and there are a few more minor things that we're going to add to this function when we create these single page postview in a little bit but I will come back to that when we get to it and then what we want to do is add this function to the on click of our on delete here we want to add the function handle delete so let's come back up here and now let's actually go work on this on delete post function in our use post hook so we just saw a few minutes ago that this function is going to need to take in an argument of type post so we can add that in here and that is also going to need to return a Boolean promise and in typescript we specify the return type after these parentheses here with a colon and then we can just type the return type and in this case that is going to be a promise of type Boolean and just one more time for clarity because of this function is asynchronous we have to wrap the return type in a promise so you can see that we have a compiler error on our return type there and this is basically just typescript saying while you're telling me that this function is supposed to return a promise of type Boolean but you're not returning anything so to make this go away all you have to do is just return a value of that type so this function is going to do a total of three things the first thing it's going to do is it's going to check if post that we're trying to delete has an image attached to it and if it does it's going to delete it from our Firebase storage bucket then it's going to actually delete the post document itself in our firestore database and that is just going to update our recoil state so that we do not see the deleted post on our UI okay so let's create a try catch block here and I'm just going to write out some comments to outline what I just said so the first thing is check if there's an image and if there is delete it from our Firebase storage the second thing is just going to be delete the post document from firestore and the third thing is just going to be update recoil state then at the end of all of these things successfully completing we will return true and if an error occurs we want to return false and so if it fails and it returns false then the value of success over here will be false and we will throw an error over here and be able to actually update our component to display that error to the user okay so let's actually build this out so the first thing is you want to check for the existence of an image URL on this post because only posts with images are going to have an image URL if there is a post image if you're going to create an image reference to that image inside of our storage and we can do that with our ref function from Firebase and we just have to pass this our storage instance from Client app and inside of here we just need to specify the path to this image and if you remember from when we actually uploaded the images the path is going to be post slash post dot ID slash image to actually delete this image from our storage we can call a function called delete object and this is going to be from again Firebase storage and then we can just pass it our image ref perfect and that is all we need to do to delete it from our storage all right so next let's delete the post from our firestore database so let's create a reference to the document that we're actually going to delete so we can say post doc graph and we can use our doc function from Firebase firestore and we can pass this our firestore instance from Client app The Collection that we are deleting from is posts and the ID of the document that we're deleting is going to be post dot ID just like this okay so typescript is complaining here because the ID is an optional parameter on our post type but because we know for sure that if we're deleting a post this ID is going to exist I'm just going to add the bang operator here to tell typescript that it is safe to proceed in using this value all right now to actually delete this document from our database we can call the function delete doc from Firebase and pass it the document reference we're trying to delete perfect so now let's just update our recall State and we're going to use our set posted value function up here so we can call that down here and say set Post State value take the previous value of State spread it because you're only updating a single value and that value is going to be posts and the updated value of posts you basically just want to remove this post that we're deleting from the current value of posts so we can say prev.posts.filter and filter is going to iterate through all of the items inside of posts and the condition that we want to filter on is that item dot ID does not equal to post dot ID okay so let's check to make sure that everything is in place so if I go to my post item we can see that we are calling this um handle delete function when I click on this delete button here and that is going to call this which is going to call on delete post which is going to do all that stuff we just wrote so theoretically this should work so let's give this a go and we're going to add some loading state in a second here but let's see and let's go talk about what should actually happen on the back end when we do click on delete before we do it so we know that it happens on both the front end and the back end if I go to storage and I go to posts and I think it's going to be this one because it's second okay so yeah let me delete this post this image should be deleted from our storage bucket here so let's try doing this let's delete okay so it worked on the front end and we're saying that post was successfully deleted but let's go check out our storage okay so let's try it refreshing here so let's go into posts okay yeah so it was deleted which is perfect the only one thing for now is that other post okay so it did work uh let's go to our database continue to posts and I don't even remember I think it had to do with Photoshop yeah okay so it was deleted perfect so we can actually delete post now which is super cool okay and let's quickly add some loading state for our deleting so we can actually indicate to the user that the deletion is in progress so I'm going to create a state variable called um called loading delete set loading delete is equal to use State and we're going to initialize this as false then at the very top of our kind of delete function here I'm going to set it equal to true and at the very bottom just want to set it to false set loading false once everything has successfully returned now all we need to do to actually update the UI with our loading state is you can come down here and we can toggle the display of this icon and this delete text here this sort of garbage can text over here all right so let's just cut these out for a second and let's create a ternary operator that is going to see if loading delete is true if it is we're going to show a spinner and if it is not we're going to show the icon in text let's say delete what the garbage can I'm just going to wrap these in a fragment here just like this okay and type here we're going to use our spinner component from Chakra UI react and we're going to make the size of this equal to small awesome so if I just make this true so we can see what this looks like that is what that looks like so it's super clean it only appears inside of that button there so let's see what this looks like when we actually delete something so I'm going to say loading delete all right now let's delete this post and see what happens beautiful I love Spinners and skeletons and loading state is just nice all right the very last thing I'm going to add is just displaying an error message if the deletion fails so I'm just going to create a new post quickly I'm going to call it here is a post here is a post body let's post this okay so let's go back to our new post form and I'm just going to grab the exact same UI component using the chakra UI alert let's go back to here and I'm going to paste this inside of this column Flex container here so just right in here say that okay that looks pretty good now we just have to change this text in here to B our error State variable just like that and then change this from True to error okay awesome so now if our post fails to delete for any reason inside of here then we will return false to our handle delete function and then the error will be set and you'll see that there was an error deleting the post awesome and that is it for deleting posts all right you guys so the next thing we're going to work on is the about Community component that is going to go on the right hand side here and that'll be sort of the last thing we need to do to wrap up the Community page so if we go back to the demo I just have a quick look at this component did I go into a community here this is the about Community component here and it's responsible for actually rendering the data of the current community that we're in we can see that it's going to appear on three of our Pages the first one is the actual home of the Community page r slash baking the second one would be in our submit page baking slash submit and the third one would be in a single page view if I actually click on this post here uh it is appearing in here as well in this r slash baking slash comment slash post ID and we've seen this before right when we need data across multiple Pages or multiple components that live far away from each other in the react component tree we can do that by putting our data into our Global recall state so we can access it from any so as of right now if we just look at the home Community page the community index page we only have access to this community data in this page only we currently do not have access to it in our submit page and we also don't have access to it in a single page view because we have not even created this page basically right now we only have access to it in this home page of the community and so what we're going to do is take this community data and just throw it into our recoil state in our communities atom and then all we have to do is drop this component into the right hand side fragment on all three of these Pages passive the community data from our recall State and then it will just have everything it needs to render successfully and if this isn't super clear right now just wait until we get into it and it should become more clear so I want to start off by going back to our communities atom file here and if you remember this was a while ago but if you remember I created a comment here that was called visited communities and I'm actually going to change this to a key called current community and this is going to wrap present the current community that we are in so if I click on baking baking is going to be stored here if I click on Tesla Tesla is going to be stored here and that way when we want to access that data from any one of those three pages that I just mentioned we can just grab it from our community state DOT current Community okay so as I just mentioned the value that is going to go in here is going to be an actual Community it's the type of it we can use our community interface and I'm going to make this optional because the user is not always in a community so it doesn't necessarily have to be defined so let's Trace back to the actual index page of this community and look again at how we actually fetch that data so if you remember we are server side rendering this page with get server side props and on the next.js server we fetch the data for the community and we've passed that as a prop to this component as this community data variable up here and that is what we have been using in our header and our post Etc but as we were just discussing we do not have access to this community data on those other two pages that we needed so all we're going to to do is just take this prop Community data and throw it into the current Community value inside of our community's atom and we want to do that as soon as this component renders and if you recall whenever we want to do something after the component renders we want to use our use effect hook so let's bring that in and create an empty callback function here okay so inside of this user Factor we just want to do one thing we just want to take this community data and throw it into our current Community inside of our community State value and we can do that by bringing in our set Community State value functions using recall so we can say const set Community State value is equal to use set recoil State and pass it our community State atom make sure all of those things import then down here inside of our use effect all we want to do is say set Community State value we want to spread the previous value because you're only updating a single value the value of your updating is going to be current community and we want to populate current Community with the Canadian data all right so let's come back to our app here and we definitely already know that we have access to community data on the home page of our community but let's go check our submit page and see if we have it there so let's go to submit and if this recoil setting worked we should have access to this data over here all we need to do is read that value current Community from Community State value so I can just say community State value is equal to use recoil value and again pass it our community State atom just like this and let's just take a quick peek at the console log of the value here no autocomplete very nice okay so this is the log here it's from our submit page if I just open this out let me let me expand the console here if I open this up we can see that the current Community has been populated with Shady's group and all of that data and so now we actually have access to the data required by the about Community component so we can just reuse this component across all of these pages and just posit this data as a prop all right so now that we have solved the data problems surrounding this component let's actually go build out the UI for it let's go back to our app over here and go to our shines group page and then I'm just going to go to the index page of our community and that about component is just going to go right in here all right so let's go create the file for our about component so inside of community I'm going to create a new file called about.tsx use our snippet and so the first prop that this component is going to take in is going to be the current Community data so we can call that Community data and it is going to be of type community we can make sure that imports from our atom file save that and then come down here and restructure it in the props Community data okay so I'm just going to close my directory here and Shrink my console a bit because it's a little large and let's just change the text here to be about and then inside of our index page I'm just going to actually bring the real component in about just like that and we can see that show up here on our right hand side so now we just have to pass in the required Community data prop so we can just copy the thing from post here because it's going to be the exact same and in this case we can pass the community data variable that we're getting from our server side rendering function but on the other Pages we're going to need to grab it from State the other pages are not going to be calling get serverside props because that would result in making the same query multiple times so if we just put this data in state once then they can all share this data and only a single query has to be made now there is the case of when the user refreshes either the submit page or the single page post view page meaning that they are not starting off on the home Bridge of the community in those cases we would have to go fetch the data and actually make this query from those pages since this home page is responsible for getting that data on the next JS server and putting it in stage four of those other pages to use but we will handle that case after it just is a simple workaround for now we're just going to focus on the user flow of the user starting in the community page and then going to those other Pages which assumes that that Community data is always going to be available by the time those users go to either the submit page or the single page postview page or we will handle the refreshing of those other two pages in a bit alright so now that we're actually passing that data to our component let's go back to that let's just take a quick look at the about component so that we can kind of see the overall layout of it okay so essentially it has this overall parent container here and then there is this header component in the top and then this other content component in the bottom so really there's only three main containers here so let's come over here and let's model that out so our first outer container is going to be a box component from Chakra and I want to make the position of this sticky because when we scroll down the Community page we want this to actually stick to the top just like that we don't want it to go above the screen and we can do that with sticky positioning and then we can actually specify the sticky position of this component and we're going to want it 14 pixels from the top and then the blue header component that says about Community is just going to be a flex box and then the white background container is also going to be a flexbox so pretty much our entire component is just a box with two Flex boxes in it and of course there will be other stuff inside of it but this is the main structure all right so let's come back to our app so we can actually see what we're doing and let's work on this header component so we're going to give this a justify of space between and an align of Center we want our background color to be blue 400 we're going to make the text color white we're going to give this a padding of three and we're going to give this a border radius of 4 pixels four pixels zero pixels zero pixels and that is top left top right bottom right bottom left so we can see something showing up over there okay now inside of here we're going to have the text that actually says about community okay and as always text does not like to Auto Import from a chakra so let's do that ourselves and we're going to shrink this a little bit so let's make the font size equal to 10 point just like that and let's make the font weight equal to 700. all right and then we're going to have an icon here I'm just going to paste in the icon import that we're going to use for this so this is it here the high outline dot circle thing and I'm just going to add that to our icon down here by saying as and it's going to be equal to high outline dots horizontal all right there we go so those are those three dots over there okay and that is it for this header component here let's work on the actual body so this Flex container is going to have a direction of column and we're going to give it a padding of three a background of white and lastly we're going to give it a border radius that is the complete opposite of the header component so it's going to be 0 pixels zero pixels four pixels four pixels just like that inside of this Flex block you're going to have a stack component here and the stack is just going to handle the spacing between this component here with the members and the number of online as well as this thing down here with the created at date and this create post button let's come back to our app here all right so inside of our stack the first component is going to be a flex container which is going to represent the container of the number of members and the number of online people and we're going to give that a width of 100 percent a padding of Two and a font size of 10 point and inside of here we're going to have a flex container for each of those two metrics and we're going to give both of them a direction of column as well as a flex row of one so that they take up exactly half of the width each and this will become more clear when the visuals start showing up on the screen here so in the first one we are going to display the text and that text is going to have the community data DOT number of members okay and on this number we want to call a JavaScript function called two local or low Locale I'm honestly not sure have the best way to say that and that is basically just going to convert it to a nice number with commas in it and stuff if we do not have that two local string function it's just going to be this ginormous number without the nice comma formatting so make sure you call that so that when your community has millions of members in it it looks very good okay and then right underneath here we're going to have another piece of text that says members just like that so three members I'm just gonna go back up here to the first flex container inside of the stack and make the font weight a little bit heavier and I'm just going to make it 700. there we go that looks a lot better all right so in the second Flex container here we are going to have two pieces of text so the first piece of text is going to be the actual number of people online and we're not building this feature because it's not super critical so I'm just going to hard code this to one and the text below it is just going to say on line okay so we are done with this first flex child of our stack container here so underneath that but still inside of our stack we're going to add a divider component from Chakra this is going to be that nice Gray Line and then underneath here we're going to have another Flex box for the created update and the create post button all right so on this Flex container we are going to vertically align everything by making the line equal to Center we're going to give this a width of 100 percent padding of One Fund rate of 500 500 and a font size of 10 points okay and inside of here we're going to have the birthday cake icon to represent when this community was actually born so we're going to bring in an icon so I'm going to copy that important over here and paste it under the other one react icon slash RI then I'm going to add that to this icon here as RI cakelake alright so let's make this icon a little bit bigger and I'm going to give it a font size of 18 and I'm going to make the margin right 2. now right next to the icon we want to have some text and this is going to be the text that actually says when this thing was created at so we're going to have the text created and in order to format the date nicely we can use the same moment library that we use for our post here but we're going to use a slightly different function we need some JavaScript so I'm going to wrap this in curly brackets I'm going to call in moment from moment so make sure that Imports and as you recall we need to pass this a date and the date that we're going to pass is going to be Community data dot created at we're going to do the exact same thing we did with the other timestamp we're going to grab these seconds from here multiplied by a thousand and this is complaining saying that created at might be undefined so what we're going to do is just prevent this text from being shown at all if there is no Community data dot created at so we can say community data dot created at and this text so now typescript is going to be happy because it knows that if we get to this point over here it is going to be defined so we can actually get rid of this optional chain in here and we need to call a function on this moment date here so at the end of it we can call the dot format function and the format we want is going to be month month space Day Day comma year year four of those just like that and that is what that looks like I love this moment Library it's so customizable and it just formatted for you exactly however you want it's pretty cool thank you moment for helping us get closer to the Reddit appearance all right now underneath this Flex container but still in our stack we're going to create our create post button and this is actually going to be a link from next link that is going to Route us to the submit page of this community and the link component from next allows us to perform clientside routing by clicking on a certain component so whatever we put inside of this link is going to Route us to the page that we specified and the element that we want to click on to take us to the submit page is going to be a button let's import that from Chakra and the button is going to say create post and we're going to give this a margin top of three and a height of 30 pixels and the reason this is unhappy is because we are not passing it the href prop and the href prop represents the actual clientside route that we want this thing to take us to you want to take us to forward slash R forward slash and then we're going to need to grab the community ID from the router which in this case is chatty's group but we don't have the router in this file yet so let's come up to the top of our component and bring that in with the use router hook so we can say const router is equal to use router then down here in our link we can access that we can say router.query dot Community ID then we want to go to this community's submit page at slash submit just like this so now if I click on this create post button it takes me to the submit page for Shady's group how cool is that okay and now what we're going to do is add the functionality to update the community image if you are the moderator creator of this community so if you go to our demo and I just go into a community that I created and I'm moderating socialize Community I can see that I have this little admin section here and I can change the image and that will actually show in the community icon up here so that is what we're going to do now the process for doing this is going to be pretty much identical to what we saw in the new post form when we were uploading an image using this on select image function and using the file reader so it should be pretty much the exact same so what I'm going to do is actually create a custom hook and extract that logic into it and it's only going to be about a 30 line hook it's pretty small and then we can just reuse it in both of these components here so it's going to be a lot cleaner just so we don't have to rewrite the same functions all right so inside of our Direct directory here inside of hooks I'm going to create a new file called use select file dot TSX use our snippet get rid of the props as well as the return type okay and inside of here this is we're actually going to have that on select image function and we're going to manage the selected file state from within here so let's go back to our new post form I'm going to close my directory as well and I'm going to actually copy this image over into this hook here just like this and I'm also going to grab that state selected file so let's put this at the top of our hook okay let's make sure we import use state from react and then at the bottom here we're going to return an object and that object is going to contain our selected file our set selected file as well as that function on select image and actually I'm going to rename this to on select file to sort of match the name of our hook here and that is it for our hook now we can reuse this function and state in both of these components for our image uploading all right so let's go back to our new post form and just refactor this to use that hook it's very very simple to do that so we can get rid of this selected file state here and we can get rid of this on select image function here I'll just leave it commented out for now I'll delete it once we actually have the hook implemented and just underneath this comment that outstate here I'm going to call that hook by saying const is equal to use select file then what I'm going to grab is selected file set selected file as well as on select file so those three things that we were returning from our hook then down here all we need to do is just change the name of this so I'm going to say on select image is going to be named on select file inside of image upload it will still be called on select image but we're passing it the on select file function from our hook as that value now we're done that is all we have to do to refactor this component to use discuss hook so now I can just delete this on select image function here delete this state where it is it yeah right here delete that and now our Hook is going to handle all that logic for us and we can test this out by actually creating a post so let's do this let's create a new post called testing hook testing out the hook we made and let's upload an image to make it that classic demo image we can see that the state is still functioning as we expect back to the post if I post it awesome so it functions exactly the same but the logic has now been extracted into this use select file hook and we can reuse this exact same Hook when we're doing our image uploading for our about Community thing over here so very clean reusable code okay so we can close the new push form because we are done with that we don't need it and we can start implementing this in our about component here all right so let's actually create the UI so the user can input an image here so underneath the create post link but still within our stack we're going to create a new section here but we only want to display the section two moderators of this community and in order to do that we need to check if the current user's ID matches the ID of the creator of this community so we're going to need to grab the user from our use off State hook so we can say const user is equal to use odd State pass it our auth object from Client app and down here the condition we want to check here is that user.uid is equal to the community data.creator ID if that is the case we want to show some sort of fragment with admin options here so inside of this fragment I'm going to start off with having a divider from Chakra okay then underneath the divider I'm going to create another stack and the stack is going to have a spacing of one as well as a font size of just 10 point here inside of the stack we are going to have the text that actually says admin and we're going to make the font weight of this 600 underneath the admin text we're going to create another Flex container which is going to actually have the upload image button and this is going to have an align of Center and a justify of space between all right inside of this Flex container we're going to have text and the text is going to say change image this is going to be the thing that the user actually clicks on to upload an image it's similar to the upload button from our new post form and if you remember from our new post form this thing has to actually implicitly sort of behind the scenes click on an actual file input that we're going to create in a second in order to prompt the user to upload an image from their computer so we're going to need to create another ref up here similarly to what we did with the new post form so I'm going to I'm going to create a ref called const selected file ref and this is going to be equal to use ref and again it's going to be of type string and it's going to be initialized as null all right and we're going to attach this to an actual file input in just a second but for now what we can do is change the appearance of this text so this text is going to have a color of blue 500. there's going to be cursor pointer okay and on Hover we want to make the text decoration underline awesome so this kind of looks like that and then r on click this is where we're actually going to click on that selected file graph I'm just going to leave it blank for now until we create that input and attach the ref to it and this is going to be the exact same thing we saw already under this text we are going to check for the existence of a community image if it exists we will display it if it is not we will just display the classic Reddit icon there sort of as a default but the community image can exist in two ways it can either be inside the community data dot image URL or if the user is adding a new file there is going to be an image inside of our selected file state which we're going to bring in from our hook so let's do that right now so at the top of our about component let's call the hook use a file sorry use select file and from in here we can grab selected file set selected file as well as on select file perfect so now down here this is defined and then if this is the case if we have either of these two things we actually want to show an image from Chakra so inside of our source of this image we want to show one of these two things and I'm going to add the statement we want to show the selected file or Community data dot image URL and this is basically going to first check for the existence of a selected file if it does not exist it will show the community image URL the reason I'm putting the selected file first is because the selected file sort of takes priority over a potential existing image URL because they're updating it right they want to see a preview of the updated image that they're uploading so that is why we are checking for the existence of this first and if it does not exist it will go and render this okay and we're just going to apply a few minor styling to this image so we're going to say border radius is going to be equal to full and our box size is going to be equal to 40 pixels okay and then we're going to give this a alt of community image and this is not happy because we do not have anything for the falseness of our ternary operator and if we do not have either of those two things what we want to display is our classic Reddit icon so I'm just going to paste that over from my completed project just like this and we're going to need to import this icon as well f a Reddit and that is coming from react icons F A let's throw that up here with the other icons so now if I save this we can see that we have no image for the community yet so it's just displaying this icon but if I click on an image to upload it oh I haven't created the file input yet um so let's do that now that's pretty pretty critical so underneath this Flex container here but still inside of our stack we're going to add another condition to check for the existence of a selected file and if there is a selected file meaning that the user is attempting to upload a new image we want to show the text save changes so it's like okay you've selected a file you want to upload for this community image click on this to save these changes and actually upload this file and I'm actually going to quickly add some loading State for the uploading so we can see that the uploading is in progress and I'm going to come up here and create a new state variable called uploading image set uploading image and this is going to be equal to use State and initialize it as false then down here I'm going to cut this out for just a second and I'm going to add a ternary operator inside of here that's going to check if the image is in progress of uploading so if it is we want to display a spinner okay and if it is not we want to display that text just like this and when we actually upload an image we will see what this looks like and then on this text we are going to give it a cursor of pointer and then we're just going to add an on a click to the save changes text which is going to call a function that is going to actually go upload this image to our Firebase storage and update our community document with that image URL so we can actually create just the definition of that right now so just coming to the top here I'm just going to create a function called on update image and we're going to make this an asynchronous function and just leave it empty for now but then we can add that to the on click of this to save changes text here on update image perfect now the only missing piece is that file input and I'm going to paste that over because it's the exact same as the other one just throw it under here and just change this to on select file okay and this is complaining um oh I think I put the wrong type on this here okay yeah so this is supposed to be HTML input element my apologies the string type was for the selected file state itself make sure that the selected file ref is a ref of type HTML input element my apologies for that then we can just pass it a initial value of null and that should satisfy that ref texture error down here okay perfect now all I have to do is write this on update image function so let's come back up here and start writing this out so this function is going to be very similar and actually a lot simpler than our handle create post function all we have to do is take this file upload it to our storage and then update our community Dock and then we just have to update our recoil state to use that new image URL so that the fun end actually updates with that new image so let's create a try catch block here at the very top here I'm just going to add a guard that says if there is no selected file let's just return so that we don't try to do anything or upload anything if there is a not a file through upload then in our log here let's just log on update image error and log the error and then also under here I'm just going to set uploading image to be true so the first thing we're going to do is take the file that the user is trying to upload and upload it to our storage bucket so we can create an image ref and we can use our ref function from Firebase storage and we can pass this our storage instance from Client app and the path to this image inside of our storage we are going to store it at communities slash Community data dot ID slash image so pretty much the exact same path as the post image just for communities now all right now to actually upload this thing to our storage we can use the same function upload string from Firebase storage pass it our image ref pass the file that we're actually going to upload inside of this image ref and then also the format of the file which is going to be data URL and as a reminder this is coming from the format we told our file reader to format this image in after it's successfully uploaded we can get the download URL for that image so download URL is equal to a weight get download URL and this is a function from Firebase storage and then pass it our image ref now all we need to do is update our community document in firestore so we can say await update doc the first argument is going to be our document reference to our community doc so we're going to say Doc pass it our firestore instance from Client app The Collection we're interested in is communities and the ID of the document we are updating is community data.id and as a second argument to our update.function we pass it an object with the updates we want to make to this document in that case and in this case we want to update our image URL on our community documents to be download URL just like this now we just need to update our recoil state to actually show this new image on our front end and so in order to update our community State value we're going to need to bring our set Community State value function in from recoil so you can come up here and grab that from recoil saying set Community State value is equal to use set recoil State pass it our communities atom from our atom file then down here after all of this successful uploading we can call set Community State value to take the previous value of the state spread it okay and now we want to update the image URL of our current Community State so the field we're updating on our community state is going to be current community and we want to change the image URL of our current community so we can spread the previous value of current Community those are only changing a single field on a current community and that field is image URL and we want to update this to be download URL just like this if you satisfy the currently freaking out typescript I'm going to type cast this updated current Community object to be a community one last thing we're missing is just the set loading set uploading image to false at the very bottom here all right so let's give this a go and see what happens so if I go to our Firebase storage we should after uploading an image see a new folder in here called communities and then we can go in there and we should be able to see the new image and also in our firestore database if I go to that Community document for status Community we should see actually with Chinese group I think it was called we should see a new field on here called image URL so let's give this a go and see what happens so I'm going to change the image okay it's not even opening the thing which is not good oh I think I've got to add okay yeah so I forgot to add the on click for this change image text to actually click on that input which is pretty important so let's make this callback actually click on this thing so we can say selected file ref.current dot click just like this okay now this should work so let's click on this and just choose this Google logo because it's nice and round you can see it show up here so now we actually have a selected file in state so it's showing the same changes text here and now when I click on Save changes we can see the loading State happens and now we should have uploaded that to our storage so let's go find out and we're going to make the change in a second to actually make this update here well let's go see if the image first successfully uploaded okay yeah so Shadow's group now has an image URL which is perfect and if I go to storage the image should be there because the successful storage upload is sort of a prerequisite for that image URL yes or Shadows group image and you can see that it is the Google logo there perfect super cool so now let's figure out how to actually get it to display in here and actually if I refresh this page it should show up in the header there let's see okay so it's not but let's go fix this so inside of our header so what we're going to do inside of here is instead of using the community data's image URL we are going to use our community's state value dot current Community Dot imageurl and the reason there is no image is because there is no Source on this image so the source of this is going to be that exact thing Community State value no autocomplete very nice dot current Community dot image URL so now we can see we have this ginormous image here so I'm just going to add some additional stylings to make that better and I'm trying to copy over the settings from my completed project um feel free to do that as well so this is going to look like this and that is going to actually control the size of that image and make it appear really nice like this and the reason we're using the image URL from our current Community State and not from Community data is because in our about component inside of our on update image function we are updating our current Community state with the latest image URL so the community data variable inside of our header is not going to have that updated image unless we refresh the page and it's getting it from the database but to show the updates without refreshing we would have to use the latest value which is going to be stored in our community State value dot current community so now let's try this again if I change the image and I change it to this thing of me because that's the only other image I have if I save changes we should see this update immediately without having to refresh the page once it's done uploading so like to save changes perfect and without refreshing the image updates inside of our header that is super cool and now we can actually change the image of our community if we are the moderator so technically inside of our header component here you could remove the community data altogether and just simply access Community State value dot current Community because they are pretty much the same thing because on our index page of our community we took that data and we stored it in current Community State however the component renders slightly faster when we use Community data because that data is coming directly from the server and it is rendered on the server rather than having to wait for the state to be populated by that Community data on the client side which actually happens completely after the component Mount because we put it in a use effect causing a bit of a delay because the component actually has to rerender once the state has been updated which causes this sort of glitch on the UI for the case of the image though if we want that functionality for this header image to update without having to refresh the page then we do have to use the communitystatevalue.com community to make it dynamic because we actually update that state on our client side when we change the community image but for the other field I'm just going to leave it as Community data but I just wanted to touch on that in case you were wondering okay and one other thing that I noticed that I want to change is inside of our about component here I realize that I'm using router.query dot Community ID and I honestly have no idea why I did that because we have access to that same exact thing on community data dot ID so we do not actually need the router at all some of you probably noticed that so my apologies for that we do not actually need the router in this file so we can just get rid of it completely and this create posting we'll do the exact same thing so we are completely done with this about Community component and we're going to move on to the voting functionality and I think the voting functionality was probably the most fun feature to build in this app because it contains some really interesting logic and I'm pretty excited to build it here and show you guys how to do it okay so in our use post hook if you remember from a while ago we actually defined this function on vote but it is currently empty and now we are going to write this thing out and get into the nittygritty of the voting functionality all right so before we get into actually writing the code I just want to briefly touch on how we are going to be modeling the data for our voting functionality so we're going to do something kind of along the lines of what we did for the community Snippets because if you look back at the community Snippets we had this sub collection on the user so we knew what communities the user was in and then on the community documents we had this field called number of members and so when a user would join a community we would add a document to the user's Community Snippets sub collection and then we would go also update the number of members of the community we're going to do something similar here because if you look at our posts we have a field on the post called the vote status which needs to be updated every time a user votes on this particular post and on our users we are going to create another sub collection called post votes and the post vote subcollection is going to allow us to know which posts the user has voted on and in which communities and then we can add documents remove documents or edit documents in this collection depending on what the user is doing doing and how they're voting and then all we need to do is just go and actually update the associated post with the new vote status depending on what vote the user has placed so you're going to be dealing with batch rights again because you're going to be updating two documents post votes as well as the post and we only want both of these things to succeed or none of them at all so we're going to be using a batch write for this logic okay so let's talk about this on vote function now so I'm going to come over to our demo and just go to the home page here and when a user tries to vote on a post there are three really important things that we need to think about the first thing is well what is the value of this vote is it a nut Vote or a down vote probably important to know the second thing is has this user voted on this post before and the third thing and this sort of ties into the second is if this user has voted on this post before are they changing their vote to be the opposite or are they removing their vote altogether all right so this post for example I have not voted on this post so I can upvote it or I can download it so let's upload it okay and now if I want to vote on this post well I have voted on this post already so there are really only two options here I can remove my existing Vote or I can change my vote from an upvote to a down vote and so this type of logic is important when we're writing out our function because it dictates how we change this value you can see that if I go from an up vote to a down vote it changes by two and if I go from a downward to knock out it increases by two and if I remove an existing upvote it goes down by one and if I remove an existing down vote it goes up by one so this is the logic that's sort of going to drive the structure of this onroad function over here okay so for now this function is going to take in three important arguments the first one is going to be the post that the user is trying to vote on that is going to be a type post second one is going to be the actual vote value which is going to be a number and the third one is going to be the community ID in which this post is in that's going to be a string so we can write out this logic with just a few simple if else statements so we can say if this is a new vote do something otherwise do something else and this else statement represents an existing vote meaning that they have a voted on the post before and they're making a modification to that vote and sorry ignore this undefined error I'm just trying to explain the concept here but inside of this else statement there are two things that can happen the first thing is the user could be removing their vote and this would just basically be like going from an upvote to neutral or down to neutral that is what I mean by removing the vote the second thing that can happen though is that there are flipping their mode and this would look like going from Up to down or down to up and both of these scenarios can be handled by another if else statements we can say if removing vote then do something otherwise they must be flipping their vote so do this other thing so in the case of a new vote the first thing we want to do is either add or subtract one to or from the post dot vote status that is going to be the first thing in our batch rate the second part of our batch is going to be creating a new postal document on the user's postcode subcollection so in the case of removing an existing vote we are again going to be adding or subtracting one from the post dot vote status whether or not we're adding or subtracting depends on the voting direction that we are moving in the second thing in the past is going to be deleting the post vote document and in the case of flipping a vote we are again going to be adding and subtracting from the vote status but in this case it is going to be 2 because we're flipping it so we need to add or subtract 2. and this is the part that tripped me up the most when I was working on this logic here uh it's kind of weird at first at least for me it was uh the second thing in the batch is going to be updating the existing post vote document in the database so this is a high level overview of this function and I just wanted to spend a few minutes to walk through this because I think that will help when we're actually writing out the code rather than just diving right into it and being like Oh yeah here this is how it works I think this is much better for you to grasp so um if I'm wrong I'm sorry but that is my assumption so now we can actually start working on writing out the code all right you guys so the first thing we need to do is go back to our post State atom and actually create a spot where we can store all of the postcodes from the database so if we go back to our post atom file here you may have remembered that I briefly mentioned the post vote section here on our post date and so now we're actually going to implement that here okay so we can reenable this and I'm actually going to create a typescript type for our post votes so we're going to need this in other files so I'm going to write export and I'm going to say type host vote and on our post vote we're going to have an ID of type string we're going to have a post ID which is going to be the ID of the post that this book belongs to and we're also going to have the community ID of the community that this post is in and then of course we need the value of the votes I'm going to create a new parameter called load value and this is going to be a number and it's going to be a 1 for not vote and a minus one for a download okay then down here on our postage we can declare this as an array of post photos just like this and then on our default State we can just initialize post votes as an empty array and now typescript is all happy and we are set up and we have a place to store our post votes that we can actually use them so let's go back to our use post hook and start working on this function okay so inside of this function I'm going to create a try catch block as usual and I'm going to move all of this logic inside of our try block because it's all of these stuff that we want to attempt to do and then I'm going to fix this spacing here and then if there is an error we will log in the error so let's say on vote error and then log the error so we're going to protect our voting feature against users who are not authenticated so at the very top of our function we're going to check for a user and if there is not an authenticated user we are going to open the authentication model but we will add that at the very end because it's very simple so at the very top of our try block we are going to destructure the vote status from our host that we're voting on so I'm going to grab the vote status key here just like this because you're going to use it throughout all of this logic so the way we can tell if the user has voted on this post before or not is we can search through the user post votes array in our post item State here that we just added and see if there's a vote with the post ID that matches this post if there is not an existing vote we are in the case of a new vote if there is an existing vote then we are in the case of the existing vote okay so let's actually create this so we can say const existing vote this is going to be equal to post State value dot post votes dot find we want to search through this array for a specific vote and the very next thing we're going to do after writing out this function is actually go and fetch those post votes from the database and populate this array with them but for now just assume that this array is populated with the user's post votes and so we can iterate through every single vote and we can check is there a vote with the post ID that is equal to this particular post's ID and so the find function is either going to return to us the existing Vote or it's going to return undefined and then we can change this to if there is no existing vote which is equivalent to saying that it is a new vote and also above all of these if else statements I'm going to create our batch instance using our right batch function from firestore pass it our firestore instance from Client app the next variable I'm going to create is going to be a copy of the post argument just like this I'm going to create an object and just spread the post inside of it and I'll explain why I'm doing this in just a second here underneath here I'm going to create updated post which is going to be a copy of our post State value dot posts array and then finally I'm going to create a updated post votes array which is going to be a copy of Hope statevalue dot post votes okay and so the reason we're creating these copies of these particular State variables is because these three things post posts and post votes are all going to need to be modified depending on what piece of the logic that we enter here and so basically we create copies of the current value of State modify these copies throughout these if else statements and then at the very end we can take those modified values and use them to update our state and this creating copies of state and mutating the copies rather than the state itself is very common in react and it ensures you avoid mutating State directly because we definitely don't want to do that because it can have unwanted side effects and so this pattern of creating copies of State modifying those copies and then updating state with that modified copy is a very common thing to do in react and the last variable I'm going to create up here is going to be called vote change and I'm going to initialize it to be the value of a vote and this vote change variable represents the amount that we are either going to add or subtract to our post documents vote status and again it's going to be modified throughout this logic here depending on what is triggered within the logic and then at the very end we will write that update to our post document in the database so it starts off as the value of vote and depending on what logic is triggered it's going to be modified and then we're going to apply that change at the very end and if all of this is a massive blur and you're just like what is going on don't worry once we actually start writing this out it will become a lot more clear this function is probably the most like difficult to wrap your head around in the entire build um just give it some time let it absorb and it should make sense with time all right so let's start off with the case where there is no existing vote that is found meaning that this is a new vote so I'm just going to put that comment here and the first thing we're going to do inside this if statement is create a document reference to this new post vote doc that we're going to store in our database so you can create a variable called post vote ref and it's going to be a document reference so we can use our doc function for firestore and inside of here we want to create a collection reference to the collection that this document is going to be in and so we can pass this our firestore instance the collection that we're going to write this document into is going to be users and now we just need to provide a path to this user's post votes subcollection so we're going to need our user object from our use off State hook so let's bring it in up here we can say cons user is equal to use auth state pass out our hot instance okay now down here this path is going to be user.uid slash post votes so we are writing a document to the user's post subcollection so you can save that and now we can actually create the new vote object that is going to be stored in this document as well as on our frontend state so we can call this new vote this is going to be of type post vote and the ID is going to be our postvote ref.id the post ID is going to be the click on posts ID so post.id and we can add the bang operator here to tell typescript that we know that this is going to be a defined value inside of this function we can add the community ID and then the vote value of this vote is going to be the vote argument pass the function so it's either going to be 1 or 1 and now we can add the document creation operation to our batch so we can say batch.set and the document we want to set is post vote ref and the data we want to store in the document is new vote and if you recall in order to make the batch actually perform these operations we do need to call the function batch.commit but we are actually going to call this at the very end of all of this logic because depending on which if else statements are triggered in here the batch is going to contain different operations so you're going to let it be modified throughout this logic and then at the very end we're going to commit all of the tasks that it has been assigned now let's actually update the post vote status so we're going to modify this updated post object because if you remember it's just a copy of post and it's this updated post that we want to make the updates to so we can say updated post dot vote status and we want to update this value to be the current vote status which we grabbed off of the post from up here so this represents the current vote status and we want to add the value of vote to it so either going to be adding 1 or adding minus one depending on if the upvote or downvote okay and we also want to add this new vote to our post vote state so we can take our updated post votes and we basically want to append this new vote to it so we can set this equal to an array and inside of this array we want to take all of the existing postcodes so we can spread the value of itself and then just add a new vote to the end of it and make sure when you declare updated post votes up here that you use the let keyword here I believe I initially had this as const but you will get an error down here if you try to reassign it if you use the const keyword here make sure you do use let to allow you to resign this variable here okay and if it is a new vote the value of vote change is going to remain the value of vote so either 1 or 1 we do not need to modify it inside of this if statement because we're going to use this vote change value in updating our post document in our database which we're going to add to our batch operations at the very end of all of this if else statements so we do need to make sure we're updating this accordingly but in the case of a new vote we do not need to modify it it's just it's just going to remain the value of vote okay let's talk about the case of an existing vote so in the case of an existing vote whether we're removing or flipping the vote we are going to be doing some sort of batch right involving the post vote document in our database so we can still create a reference to that so we can say post vote ref however this is going to be a reference to an already existing postwork document before we were creating a reference to a newly created document that doesn't exist yet whereas this one does exist so we can pass this our firestore instance the collection that we're interested in is still users and the path to this existing post hope document is going to be on the user.uid document slash post votes slash existing vote.id all right let's handle the case of the user removing their existing vote so we can tell if a user is removing their vote if the vote that they're trying to make matches the value of the already existing vote okay so as an example let me upload this post here so I just created a new post vote with a vote value of one because it was an upvote so if I click on this out vote again and send a value of 1 to our function that is going to be equal to the already existing vote value which is one so that's how we can tell if the user is removing their vote okay we can say if the existing vote dot vote value is equal to the vote that they're trying to place that means they're removing their existing vote okay so now we want to add or subtract one to or from the postpone status so let's do that we can say a biddedpost DOT vote status is equal to the current vote status but this time we want to subtract vote because we want to go in the negative Direction so let me upload this post if I upvote it again I do not want it to go to 210 I actually want it to go down to 208 right so we want to go in the opposite direction on the flip side if I download this if I download it again I do not want it to go to 206 I'm removing my downloads this actually should go back up to 208. so we're going in the negative Direction so that is why we are subtracting the value of both here and now we want to update our post vote state but now we want to remove the existing vote from our post votes so you can set the SQL to updatedpost votes dot filter and our filter condition is going to be that the vote ID does not equal to the existing vote.id so this is going to remove the existing vote from the post votes array and we're storing that filtered version inside of updated postcodes which are going to use later to update state so now we want to delete the post vote document so we can add that delete operation to our batch by saying batch dot delete and the documented delete is post vote ref and also in the case of removing the vote we want to negate the value of vote change here so we're just going to multiply it so we're going to say vote change times equals negative 1. and we're just going to negate it and if you don't understand the complete purpose of this vote change variable yet don't worry it will make a lot more sense when we actually get down to writing the batch update for updating the post documents vote status now let's talk about the case of the user flipping their vote in this case we're going to be adding or subtracting 2 from the post vote status so if I upvote this post here if I flip my upvote to a downvote it should not go back down to 208 it should go down to 207 so it's decreasing by two and on the flip side if I go from a downvote to an upvote it increases by two so to update our post vote status we can take our updated post dot vote status and we want to update this to be the current vote status and we want to add 2 times the value of the vote that the user is trying to make so if I download this vote is going to be negative 1 but I want to subtract 2 from 209 so I want to do 2 times negative 1 which is negative 2. so I want to do 209 minus 2 which is going to be 207 in the opposite direction it'd be 207 plus 2 times 1. so 209. I find this kind of confusing at first I don't know about you uh but yeah I don't know it was kind of weird to wrap my head around the first time I was doing it okay and now we want to update our post votes array but this time we're not adding 1 like in the case of a new vote and we're not removing one like in the case of removing the vote we are editing one and so in order to edit one we need the index of this vote inside of the post votes array and JavaScript has a very handy array function called find index where we can find the index of a particular item in an array and then we can use that to update the value at that index so I'm going to create a variable called vote index so I want to call the function find index on the post notes array so I can say post date value dot postvotes dot find index and this is going to iterate through all of the votes and we want to find the one where the vote ID is equal to the existing book ID so we are finding the existing vote so now we know the index at which this existing vote sits inside of this postbooks array so now we can actually update that value of post floats array to be the updated vote so we can say updated post votes at vote index and we want to set this equal to a new vote and that new vote is going to be everything inside of existing vote but with a updated vote value of the vote that the user is trying to place and now all we have to do is add our post update operation to our batch rights so we can say batch dot update and the document we want to update is post for ref and the update we want to make is to the vote value field and we want to update the value to be vote okay so now at the end of all of these if else statements we want to actually update our post document in our database so now we can create a reference to our post document so that we can add the update statement to our batch operations so you can say post wrap is equal to Doc pass in our firestore instance we want to access the post collection and the ID of this document is post.id and again we can have the bang operator here to tell texture that we know that this is going to be a valid value and now we want to add the post update operation to our batch so we can say bash shut update we want to update the post wrap and the update that we want to make is to the vote status field and this is where that vote change value is going to come in we want to do update vote status to be the current value of vote status plus vote change so the value of vote change is going to be different depending on which if else statement we triggered in here it could be 2 it could be plus two could be one it could be minus one depending on where we ended up in those statements it was modified and now at this point we have all of the batch operations set up so we can actually execute them by saying await batch dot commit and this is going to write those updates to our database so now all we have to do is update our frontend recoil State and we're going to do that using these copies up here that we created because the copies were modified and updated throughout all this logic and now we can take those values and actually store them in state and our state will contain all of the updates necessary so we can call our set post date value function take the previous value of state and we're going to update a few values here we're going to update our post array and the updated value of this is going to be updated posts and we also want to update our post votes and our updated value of this is going to be updated host votes awesome so now I hope the idea of making these copies and then modifying the copies and then using those copies to update State at the very end makes more sense now that we've kind of written out this logic okay so this is completely fine and we are updating State except we are missing one thing this updated post array has not yet been updated to contain this newly updated post so if you remember we created this variable called updated post which just represents the post that we're voting on and depending on what type of vote the user placed we updated that post vote status right we added one to it added two to it subtracted to it whatever we updated the vote status but we did not take that newly updated post and store it inside of the updated post array so updated post does not yet contain the newly updated and modified host with the new vote status okay so in order to update the single post element inside of the updated post array we are going to need access to that post index pretty much the exact same thing we had to do with our vote here we needed the vote index to update that vote inside of post vote we need the post index so that we can update the value at that index so we can find the host index very similarly to how we found the vote index above we it's a post index is going to be equal to post statevalue dot posts dot find index okay and then we want to iterate through all of the post items and find the one where the ID is equal to the post that we're voting on ID so post dot ID just like this so now we can use this index to actually update our updated post so we can say updated posts at post index is going to be equal to updated host just like that and now updated post contains the post with the latest vote status value so I think we are all done with the logic of our on vote function the last thing we need to do is just go back to our post component and if you remember we had this prop that we defined here user vote value and we just temporarily passed it as undefined because we had not built the voting logic yet so now we can actually make this the correct value and also we're getting a typescript compiler error here for onvote thing I think we just have to fix the um the type declaration for our function but we will do that in a second Let's ignore that for now okay so now that we actually have an existing post votes array we can basically search through that array and and see if there is a vote with the post ID of this item that we're currently iterating through is ID so that would look something like this so we could say post date value dot post about dot find so we can iterate through all of the votes and see if there's one with a post ID that matches this particular post items ID so then if the find function does end up finding a vote we can grab that vote vote value and if it does not find it then user vote value will just be undefined and it will behave as if the user has not voted on the post which is exactly what we want now we can just quickly fix this on vote compiler error so I just have to go into our post item and yeah change this to be the proper function declaration type so if you just go to our use post I'm just going to copy these argument types here and bring them over to our post item paste them in there and then this function is going to return void okay now that should satisfy X group over here and what's going on in here okay now now we just have to change the actual way these on remote functions are being called so I'm just going to change it to a callback function that calls on vote and we need to pass it three arguments and the first one is the actual post the second one is the actual vote value so for an upvote it is going to be one and the third one is going to be the community ID which is going to be post doc Community ID perfect we can just copy this and paste it on our downvote one here but we want to change the value of our vote down here to be negative one our on vote function I think is complete we have successfully passed the user vote value to the post item component so that we can tell if we have voted on this post and what that value is so I think we are ready to give this a go so let me try this out and see what happens if I click on this you can see that we are seeing those changes and what happens if I flip my vote perfect if I remove my vote awesome so it seems to be working let's go back to the back end and see what should be happening over there so I'm going to come over here and split screen this with our app okay so what we want to see is inside of users if I vote on a post I should see um the post vote subcollection appear so I'm going to find the Shad Mary one here so let's go back to our app so if I vote on this and then I just refresh this on the first time when that collection is created you have to refresh because the collection doesn't exist but after that it is in real time so yeah you can see that there is a post votes collection here um and it has the post ID of that post it has the vote value and then if I flip this vote you can see that that is being updated if I remove the vote it's deleted how cool is that I think that's so cool awesome okay and the other thing that should be changing is if I go look at the post we should see the vote status has been updated so that's the other thing that is in our batch right remember so if I downvote this it updates to negative one a vote goes back to one if I remove the vote zero awesome so our batch rights are working we are able to actually vote on posts and the vote status of the post document is updating as well how cool is that let's put this back over here all right you guys so the last thing we need to add here is just a quick function that is going to actually initialize the value of this post votes array by going to the database and getting this user's post votes for the current community and I briefly mentioned before that we were going to do that because right now the post quotes is just an empty array and so if I were to vote on a post the array is populated but then if I refresh this page we can see that that vote is not going to be persisted because we do not go and get those user votes from the database so the one persists because the post document was updated but in terms of our post votes we have not retrieved them yet so we actually can't see that we have indeed voted on this post so to fix that we just need to add a function that is going to be called as soon as we land on a community page to actually go and get all of our votes to the posts in this community so it's pretty simple and we are going to add that inside of our use post hook here so at the bottom I'm going to create this function called get community post votes and it's going to be asynchronous and it's going to take in a community ID which is of type string and it is going to go and actually fetch all of this user's post votes for the current community that they are currently in hence the name get community post vote and it should be plural books and votes with an ads so we can just write a simple query for our post votes collection and then store those documents inside of our post votes array in our recoil state so let's write that out so we can say const post votes query is equal to query so bringing the query function from firestore and the first argument is going to be the collection that we want to query so we can pass in our collection function which is going to take in our firestore instance the collection we are querying is users and the path to the postcode subcollection is going to be user.uib slash post votes so the second argument to our query is going to be a where Clause because we only want to find the post votes where the post votes Community ID matches the community ID that we're interested in so in this case chatty's Group whatever Community we're in we only want the post votes for that community so the field we're interested in on our coursework documents is community ID and we want to check if the community ID is equal to this community ID that is being passed in as an argument just like this okay so now we can pass this query to our get docs function to actually go and get this set of documents from our database you can say post vote stocks is equal to a weight get Docs and we can pass in our post votes query and this is going to return to us an array of firestore documents and we want to extract all of the data out of each of those documents so we can create a new array called post votes and we can take our post docs and map through all of them so we can say postcodeocs.docs dot map and for each one of those documents we want to return a new JavaScript object with the ID as well as the extracted data from that document just like this and now we can store this post votes array in our recoil postcode state so you can say set Post State value take the previous value spread it and the only field we want to update here is post votes and the value in this case is going to be post Focus and to satisfy the 10th trip compiler here we can just headcast this to be an array of post votes so make sure that that type imports from our post item file so that is it for this function here but we have not yet called it so we want to call this function as soon as the user lands on any given Community page and so to do that we can create a use effect make sure that imports from react and inside of our use effect we can call our get community post votes function and then we can pass in the community ID so we can get the community ID from our communities atom inside of the current community so if you come up to the top here of our hook we can use our recoil hook to grab the value of the current community so I'm going to create a variable called current community and I'm going to use the hook use recoil value and I'm going to pass to meet communities atom Community State atom and I want to access the current Community just like this now down here I can pass this as an argument to that function so I can say current Community dot ID just like this now typescript is complaining and we're going to fix that by adding a guard above this function to prevent calling this function at all if there is no current Community because it doesn't make sense to get community post votes if there is not a current community so what we can do is add a dependency here of the current community and so every time the current Community changes this is going to trigger and we want to make sure there is a defined Community before calling this function so we can just add an if statement here to return out of this function if there is no current Community dot ID and that will make Tech strip happy down here now there is one more dependency we need to add here because if we look at our community post votes it depends on a valid user ID as well we do not want to call this function if the user has not been logged in or if the user has not yet been loaded from our auth service so we can add a dependency here of the user and in our if statement here we can add if there is no user or no Community ID return and do not call this function because well this function is pretty useless without either of those two things okay so now if I actually refresh this page my post votes are going to be fetched from the database as soon as this component loads and then they are stored in the post vote state so that I can see which post I have voted on on refresh so if I download this post and then I were to refresh we should see that vote as soon as the page refreshes which we do awesome and so now every time we go into a different Community this use effect is going to trigger because the value of current Community is going to change to the new community and it's going to go get the post votes for that new community so that is how this logic Works cool and just for fun just we can see more exciting values other than 1 minus one and zero I'm going to go through this post here and just modify this to like 450 462 and come back here and save it so that we can actually see this value modify it's a little bit more exciting so now if I download this it goes down to 460. if I go back up 462 and I move that vote 461 downvote remove the downvote very cool the logic seems to be working I love it I think this voting functionality is super cool it is another extremely important pillar of the Reddit functionality without voting Reddit would not be Reddit so so we have successfully implemented voting functionality and we have written out probably the most complicated function of this build so congratulations for making it to here I hope that I was able to explain that in the most clear way possible if anything is unclear please ask in the Discord I would love to help you or just comment down below but I hope it makes sense and now we can move on to other things so now we can actually protect this feature against unauthenticated users by adding a simple check at the top here to see if they are logged in and if they are not we can open the modal and this is exactly what we've done with other features like trying to a community it's the exact same thing but there's another interesting thing related to this that we need to take care of so watch what happens when I log out so I logged out but my votes are still there and that doesn't really make sense our community Snippets were cleared because it no longer knows that we're in this community because there is no user signed in but our votes are still there so we definitely want to clear those out of state when the user logs out so the way we can do that is by just adding another simple use effect to listen to changes in our user object so let's create that so we can say use effect and we can add a dependency here of user so this is going to trigger every time the user object changes and if on one of those changes there is no user we want to clear the post vote state so we can say set or state value take the previous value and we want to update this state to have empty post votes so we can set post votes equal to an empty array just like this okay so you saw that they cleared there so I'm just going to add a comment here for clarity clear user post votes all right so now what happens when we log back in let's see if it actually goes and fetches our post once for us okay so it does not it's weird right because we have voted on these posts it's not picking that up it's not fetching them it fetched our Snippets because it knows we're joined into here but it's not getting our vote okay so it fetched our Snippets because it knows that we're in this community but it did not go and fetch our vote and the reason that is is because on this use effect here we have a dependency of current Community but we are not getting to this get community postcards function because we are not getting past this if statement and the reason that is is because if you remember when we logged out we reset our entire Community State atom meaning that current Community is currently null therefore there is no current Community dot ID so this if statement is protecting against running this function so you just need to slightly refactor the log out flow here because on the logout we only want to clear the community Snippets we don't really want to reset the entire Community State atom so if we go back to this user menu here this is where we did that on logout we just called this reset Community State function and completely cleared that Adam so I'm just going to comment this out here and what we're going to do instead is go into our use Community data hook and basically do something similar to what we're doing with the post votes here we're going to add it use effect with a listener on our user and then if there is no user we're just going to clear these Snippets only not the entire Community State itself so let's go and do that so inside of our use Community data hook we already have a use effect that is listening to changes in the user and then if there is indeed a valid user it will go get the Snippets for that user so all we need to do is just refactor this if statement very slightly so instead of returning what I'm going to do is inside of this if there is no user we want to set our community State value to be the previous value but with empty my Snippets basically the exact same thing we're doing with our post votes over here clearing them out if there is no user and then at the end of this we can return just like this so now when the user logs out we are only clearing these Snippets we are not clearing the current Community State so then when we log back in it will actually go get our post votes so let's see if this works so I'm going to log out and I'm just going to refresh to reset everything so if I log back in it should know that we have joined this community and it also should pick up the votes on these posts here so let's try this so let's log in perfect so it works it went and got our Snippets and it also got our votes now let's see if when we log out it clears those things perfect so all we're doing in these use effects here is just clearing all of the user specific data inside of our post date as well as VAR as well as our community state so the post votes as well as these Snippets should be cleared when there is no user perfect so I'm just going to go back to the user menu delete this and we actually do not need this reset Community State value function can close our user menu so now all we have to do is just add a simple check at the top here if the user is attempting to vote on a post and they are not locked in we want to prompt them to log in so we can say if there is no user.uid then we want to open the modal and in order to do that we're going to grab our set Automotive State function from recoil so we can say set off model state is equal to use set recoil and pass in our auth Moto State atom so make sure that Imports and then inside the safe statement here we just want to call that set off Motor State function and we want the state to be open as well as the view to be logged in and then we can return because we do not want to proceed so now if I try to vote on a post and I'm not logged in it is going to ask me to log in so now we can log in and once I log in it'll go and actually fetch that data for us which is super cool and then I can change my votes if I would like to awesome guys so we have successfully implemented the voting functionality into our app and we have written out probably the most complicated function of this entire build so congratulations for making it here I really hope that I was able to explain all of that in the most clear way possible but if anything is unclear please do ask in the Discord I would love to help you or just leave a comment down below and I'll also answer that but I do hope that it makes sense and that was a long Sprint we had to do to implement voting functionality but we are done and it is an essential part of Reddit without voting Reddit would not be Reddit so I am glad we have implemented it and we can now move on to other things all right you guys so the next thing we're going to work on is the single post page so if we go to our demo here we want to build the functionality so that we can click on posts like this and then it takes us to a page that is specific to that post and this is where we can see all of the comment comments on this post as well as comment ourselves and if you look at the URL up here it is at the route r slash baking slash comments slash post ID so this is the route we need to build and that is what we're going to do now so let's come back to our app here and if we just take a quick look at our post atom you may have remembered that we actually did Define the state for the selected post so selected post represents the single post that we are currently viewing so when I click on a post we are going to store that post inside of selected post and then when we're on this page here that is where we're going to read data from and also in our use post hook we did Define that function right here it is currently empty this is the function that is going to be called when we click on a post and all it is going to do is just take that post and put it into that selected post date it's a very simple four to five line function okay so the first thing we're going to do is actually create the page route for this page so again the route for this page is going to be r slash Community ID slash comments slash post ID so inside of our community ID folder we need to create another folder called comments and inside of our comments folder we can create our Dynamic post ID route so we can use our square brackets and inside here we can put PID dot TSX square brackets because again it is a dynamic route the post ID can change depending on what we click on okay then inside of here we can use our snippet and we can get rid of these props here and I'm going to rename this component to be host page just like this and we're not going to have any props we can get rid of that and that is good to go and then we can just add the text post page here so now if I go to this route here if I just go to R shatters Group slash comment slash some random posted it could be anything we should see this postpage text here and we do awesome now if we go back and look at the demo we can see again that it has the same layout as every other page so we can again use our page content layout component with our posts and comments in the left hand side and the about component in the right hand side once again the page content layout saves our lives and we do not have to write any more Styles we can just drop components in and it is easy peasy Plug and Play Let's go back to our app here and this is what we're going to do we can get rid of this div and we can return that page content layer component to make sure that imports from that file there then we can have our two left hand side right hand side fragments here okay and on the left this is where we're going to have the selected post as well as the comments for that selected post okay and then on the right hand side we're just going to have our about component and our selected post is going to be a component we have already created which is just post item and we're just going to pass it the selected post as the post prop so the first thing we're going to do is work on the post item for the selected post so we can reuse our prosthetic component like I was just mentioning so make sure that Imports and if you remember from our posts component which is the place for that map through all of the community posts and returns a post item we pass this a bunch of functions that come from our use post hook so again in this PID page we are going to need to bring in those functions from our so at the top here we can call our hook we can say use posts make sure all of this Imports and the values we're going to get from this hook are going to be posted value set post date value on delete post as well as on vote and we do not need the on select post function in this page here because we don't really need to select a post if we are already in the single page view so we are not going to pass the select post function to our post item component on this page like we were on the Community page so we do not need this from the hook now down here we can start passing in some of these props so the first thing we need to pass is a post and that post is going to be our selected post from our post date so you can say hostate value no autocomplete dot selected post and ignore these compiler errors for now we are going to deal with that our second prop is going to be our on vote function so on vote is equal to on vote on delete this is equal to on delete post save this so it reformats our user vote value is going to be the exact same we can do our host date value dot postvotes dot find and we want to iterate through all these items and look for a vote with the post ID that matches the postatevalue dot selectedpost dot ID perfect and then if there is one we can grab the vote value just like that okay the user is Creator we are going to check if the user's ID matches the selected post Creator ID so we are going to need to bring our user in up here from our use off State hook so current user is equal to use off State passes our auth object from Client app now our user is Creator prop is going to be the Boolean that the user's ID is equal to the posted value dot selected post dot Creator ID that is how we will know if this user is the owner of this post and typescript is currently complaining because the selected post is initialized as null and to prevent this we can wrap this component in the condition that we only want to show it if there is actually a valid truthy selected post so we can save this and it's still complaining because on select post is missing okay so we want to go to our post item and we want to make the on select post function an optional prop because again this is only going to be passed to the post item on the Community page not in the single post page and that should satisfy the typescript compiler on this page awesome so now we have a happy component we currently do not have a selected post because we have not done anything inside of our on select post function but when we do it will show that post so let's go do that now let's go to our use post hook and actually work on this function it's a very simple function so this function is going to take in an argument which is going to be the post we are clicking on and it's going to be of type post and all we want to do inside of here is take that post and put it into the selected Post State so we can say set post date value and the only value we want to update in our state in this function is going to be selected post and we want to set it equal to the past and post and when the user clicks on the post we actually want to take them to that page so we can use our router to do that so we can bring in our router up top so we can say cons router is equal to use router from next router then down here inside of our on select post function we can use the router to direct the user to that path so we can say router.push and the route we want to take them to is forward slash R forward slash then the community ID which can be accessed on post dot Community ID then slash comments slash post dot ID and that is how we can take them to that route and I think we added this to the on click of the post item if I remember correctly so I'm just going to close some of these files here um if you go to our post item I think we did add this to the on click okay yeah we did we're gonna need the changes a bit though because we need to pass in some arguments so what we're going to do is change this on click to a callback that is going to call our on select post and as an argument we just needs to pass in that post typescript is unhappy about two things here so let's take a look at these so the first one is it saying that expected zero arguments but got one and that is because our type definition for our on select post function in our props does not say that we are taking in an argument so we can change that to be exactly like this and we should be good down there for that first compiler error the second compiler error is that it is saying that we cannot invoke an object which is possibly undefined just a few seconds ago we made the on select post function an optional prop meaning that if it is not passed the value for it is going to be undefined and typescript is basically saying well this can be undefined sometimes but you're trying to call an undefined instance so that is not allowed that's really bad and the way we can fix this is to basically just add some simple logic here to make sure that it is passed as a prop and that it is a defined function before calling it and we can do that similarly to how we do it with react components we can say on select post and on select post so we are so on click we are first going to check for a truthy valid value of on select posts if it exists then we will call this function here and so now when I go back to the Community page chatty's group I should be able to click on a post and take me to that post page so if I click on this it does indeed do that so we are on this page this is the ID of this particular post and I can go back and I should be able to click on another one perfect so it's functioning exactly how we want it and now this post is inside of the selected Post State here because our on select post function did that all right the next thing we're going to do is apply some very slight modifications to the style of this component if we are indeed on the single post page if you look at this demo here if I click on this post you can see that it's styled differently we don't have the great background number here the Border radiuses are slightly different there is no mouse hover because it's not really clickable so it is very very minor things that we have to go and modify inside of our post item component over here so let's do that quickly so inside of our post item the way we can tell whether or not we are on the single post page versus the Community page is if the on select post proc is passed because remember that we are only passing the on select post function as a prop to our post item component on the Community page we are not passing it on the PID page because we do not need to select the post any further than we have already selected it so that is how we can tell inside of our post item if we are on the single post page or the Community page if this is defined we are on the Community page if it is undefined we are in the single post page and that is how we are going to conditionally modify the styles of this component all right so applying this logic we can create a new variable called single post page which is going to be a Boolean that represents if we are on the single post page so this is going to be true if on select post is undefined okay so if there is no select post then it is true that we are on the single post page so that is how we can detect which page we are on and so the purpose of this variable is that we can use it inside of our Styles here to just conditionally apply certain Styles and there's only about four or five things you have to change here so it's pretty minor the first thing is going to be our border color so now we can get rid of this gray 300 and instead we're going to use a ternary operator to check the truthiness of our single post page variable so you can say single post page if this is true we want the Border color to be white and if it is false we want the Border color to be Gray 300. perfect the next thing is going to be our border radius so if we are in the single post page view then we want the order rate is to be four pixels four pixels zero pixels zero pixels and if you are not we just want it to be four pixels and as for our hover styling we do not want to apply a border color if we are hovering in the single post page so you can say single post page if we are we do not want the hoverboard color if we are not we do want it and we want to be Gray 500. so now if I hover we're not seeing that there and we can do the exact same thing to our cursor so for our cursor we can say single post page if that is true we do not want a cursor so we're going to use the keyword on set if it is false we want pointer perfect so now we do not have that cursor on this page now there are just two more things we have to change and they're both on this loading container here so for our background if we are on the single post page we want a background of none and if we are not we want a background of gray 100 okay now you say live background disappear which is perfect and the very last thing is the Border radius so you can have the ternary operator once again if it is true we do not want a border radius and if it is false we want the important radius of 3 pixels zero pixels zero pixels three pixels all right and that is it for our styling modifications okay so what we need to do now is make two very very small tweaks to our on vote function because currently it will not work on this page if I try to vote on this post the voting works I'm able to actually place a vote but you can see that the vote status of the post is not working and so we do have to fix that all we need to do inside of our envelope function is check for the existence of a selected post because that means we are voting on these elected posts from the single post page and if there is a selected post we just want to update it to be that updated post it's very very simple it's a single if statement awesome so what we can do is come down here and just underneath this first set post a value function we can write an if statement to say if post a value dot selected posts if there is a selected post we want to call our set post date value function and update our selected post to contain that latest vote status which is going to be on the updated post object here so we can spread the previous value and update select a post to be updated post just like that so now if I click on this you can see that the vote status is indeed updating and our voting functionality does work okay now there's one more thing we have to change in this function and I'm going to show you what it is so if we go back to the Community page our slash chatties group we are going to see something very interesting when I try to vote when I click on the vote here you can see that it takes us to the Community page it does place the vote but it's still uh reroutes us to that page and we don't want to do that right we don't want to reroute the user if they are trying to get more on the post you only want to do that if they kind of click on the main body of the post here and so this can be solved by what is called event propagation so basically What's Happening Here is that these icons here have on click functions attached to them which is our onboat function but our post item also has a nonclick function and since the vote icons are children of the post item it's triggering both and we do not want to do that and we can stop this Behavior with what is called event propagation all we need to do to fix this is just accept the click event as an argument to our ongoing function and then call it function on that event called stop propagation and that will prevent the event from traveling upwards to the parent which in this case is our post item all right so let's add that as our first argument here so it's going to be called event and the type of this is going to be a react.mouse event because it is a click and the type of element that is generating this mouse event is going to be an SVG element because our our upvote downward icons are svgs and then as a second argument here we can pass the mouse event type and we can save this and we're actually going to copy this and we need to update our type declaration for this function inside of our post item here so we can just add this as that first argument save this hit and then we can come down to the on click functions here and all we need to do is in both of these cases I'm going to add the event as a first argument to this function here okay so let's go back to our ongoed function and at the very top the very first thing we're going to do is say event dot stop propagation now if I place a vote we are not being redirected because that event is stopped that in its tracks it is not traveling upwards and triggering the on click of the post item perfect but if I still click on the other parts of the post item it still takes us there which is great and now I can vote from it here very very cool voting Works in both pages and we also need to add our event.stoppropagation function to our delete function because right now if we were to click on delete it would do the exact same thing as the voting was before and it would actually take us to the single post page view which we do not want so I'm going to copy this event type from here because it's going to be the exact same in our delete function then inside of our post item since we're handling the delete in here I'm going to paste that event in here and we just have to change this from an SVG element to an HTML div element because that is the type of the component that's generating this event this time and the very first thing we want to do in this function is the exact same stop propagation function as it are on vote and also if I delete a post from the single post page view I wanted to take us back to the community page and so we already have this variable to detect if we are on the single post page so we just can add a quick few lines here to rewrap the user back to the Community page if they are indeed deleting the post from the single post page so we can bring in our router to do that we can say cons router is equal to use router then we want to do after the post is successfully deleted is checked are we on the single post page view if we are then let's push the user back to the Community page so we can do that by doing router.push forward slash R forward slash benypost.unity ID so now if I delete the post from the single post page view it should take me back to this page and the post should be gone so now I can delete them from both the pages so let's create a new one just to test this out I don't want to delete that other one because it has the image in there hey dude blah blah random post this okay so now if I delete this I can delete it from both Pages just like the voting functionality so perfect so let's come back to our post ID page here and I want to show you something interesting what happens if I refresh this page what do you think is going to happen let's find out okay so nothing is there so the reason this is happening is because our selected post state is actually currently null and why is this happening let's backtrack to the logic of how selected posts actually got to be not null in the first place if we go back to our post component which is again on the Community page we sent this on select post function to the post item component and then when we clicked on a specific item within this list it took that post and it put it in the selected Post State so right now our PID page only works if we're coming from the community page so if I click on this post yeah it works fine I can go back if I click on this it works fine but if I refresh this page our app is not yet built to get the selected post which is required if we are not coming directly from the community page we want to build it so that we can visit this link directly and view that post without having to come from the community page because that's probably a very common occurrence on Reddit there's probably a lot of times where people share the links to certain posts and then that person who received the link clicks on it and they're visiting reddit.com to only view that post they don't want to go to the Community page and then go to the Post page you know what I mean and as of right now we could not share this link with anyone because it would come to this link and be like oh well nothing's here cool so we just need to make a simple addition to account for this all we need to do is on our post ID page when a user visits this page we can check if there is a selected post inside of the post date value and if there is not meaning that they are visiting this page directly and not coming from the community page we can go and grab it ourselves from the database and then put it into the selected Post State directly from here and on this page we have everything we need to do that in the URL we have the post ID so we can query our database to grab that post and then put it into State and it'll function exactly as it was before all right so what we can do is create a function called Fetch post and this is going to be responsible for fetching a single post from the database and we are only going to call this sometimes and we're going to see what that sometimes is so let's get taken a post ID of type string and we're going to leave it empty for just a second and we want to check if we need to call this function as soon as this page loads and to do that we can use a use effect because this is going to run as soon as the component amounts to the dot and I'm just going to leave the dependencies MP for now so inside of this use effect we want to check a condition that will tell us whether or not we need to call our fetch post function and that condition is going to be if there is a valid post ID in the URL and there is no selected post that means we need to call this function fetch post and actually go and get this post because it means the user has refreshed the page or they are visiting our website for the first time on this link so we can grab the post ID from the URL using our next router so we can bring that in up here we can say const router is equal to use router and on this page we know that there is a parameter called PID inside of the router query and it's called PID because that is what we call as our Dynamic route in our square brackets so we can grab that value from our router.query object just like this PID now we can write the logic for that condition that I just said a few seconds ago so if there is a PID and there is no selected post inside of post date value then we want to call our fetch post function and pass it the PID as an argument and again typescript is freaking out here because the query parameter can technically be an array of strings or a string in our case it's always just going to be one host ID so we're going to type pass it to a string now because the logic inside of our used effect does depend on the router.query as well as the post date value selected post we do need to add those as dependencies in this use effect here so we can say router dot query as the first one and then post datevalue.selected post as the second one and that is it for this use effect all we have to do now is just write this function which is very simple it's just a single query to get this post from the database we can as usual create a try catch block and log the error if it occurs fetch post error log of the error and inside of our try block we want to actually attempt to go and get this pose document from our database so we can create a reference to that document so we can say post doc ref is equal to Doc tested our firestore instance from Client app the collection we are getting this document from is posts and the ID of this document is going to be the post ID argument of this function and then we can actually get this document from our database and we can create a new variable called postdoc and we can use await get doc and pass it our postdoc ref just like this okay and now we can take this result and update our selected post date to contain the data from this document so you can take our previous value of postage and we can update our selected post and the value our selected post is going to be a post object with an ID that is postdoc dot ID and all of the data from the postdocs data so we can spread postdoc dot data just like this and then to satisfy typescript we can Typecast this as a type host awesome and so I saved it and you can see that it did go get that post for us so now if I refresh this page it actually gets the post for us which is amazing we do not have to come from the community page and we are going to face this exact same refresh problem with our community data as well because that data is originally coming from the community page let's go take a look at that Community page just as a reminder so this page is server side rendered if you recall we are calling the get server side props function and we are getting the community data from the database and then we are passing that to this uh Community page here so then we take this community data put it into our current Community State right here as soon as this page renders and then we can access this stage from the other pages that need it like the submit page as well as the single post page that we're going to see so if I were to go to the single post page and we are going to display the about component on the right here if you remember right now the current Community data is populated with the strategies group data but if I refresh this page it is not going to be there because again the home Community page is responsible for completing that initial population so we can only access it if we come to this post page or the submit page after the Community page so if you visit these Pages directly it is not going to be there so we have the exact same problem that we had with our single post and we can do something extremely similar to what we did here where we just attack for a community ID in the URL and then we go okay there's a community ID in the URL but there's no current community in state that must mean we didn't come directly from the community page so we should go get the community data and put it in state directly from where we're trying to access it and let me further illustrate this by actually bringing in the about component here so I can show you how it's going to be there initially but not when we refresh the page similar to our post item in this page so we can bring in the Bell component and this requires the community data as a prop so we can grab that state from our use Community data hook up here use Community data make sure that Imports and the only value you want to grab from that hook in this component is going to be Community State value then down here we can pass the Community State value dot current Community as a prop okay and typescript is complaining because the current Community is initialized as null but we're telling the about component that we are always passing valid truthy Community data so what I'm going to do is add a condition here to say we don't want to show the above component unless we actually have Community State value dot current community so if I save this you can see that this component does appear over here because we actually do have current Community State right now because we came from our community page but watch what happens when I refresh this same thing is going to happen and it's not going to be there so it's not and you also notice that my post vote data is gone as well I have uploaded this post but after refreshing that data is gone and the reason our votes aren't there is because if you go to our use post hook we had that use effect that gets our votes in a certain Community only if there is a valid current community in state and as of right now that only occurs if we come directly from the community page so inside of our youth Community data hook we are going to do the exact same thing that we are doing here however we are going to be looking for a current Community as well as the community ID from the router.query in that case so let's go over to our use Community data hook so we're going to create that function called get community data and this is going to be asynchronous I'm just like our fetch post function we are only going to call this sometimes and that sometimes is when we are going directly to the single post page or directly to the submit page we do not need to call this function if we do indeed come from the community page because the community data will already be in state so underneath here let's create a use effect and I'm going to leave the dependencies empty for now and I don't know if we have our router imported in here yet we do not okay so at the very top here but we need our user I'm going to grab our router so cons router is equal to use router from next router and inside of this use effect we can grab the community ID parameter from our router.query so you can say router.query and we want to destructure the community ID which in this case is going to be Shadow's group now we can write the exact same if statement as we did before with the post we can say if there is a community ID and there is not a community State value dot current community we want to call that get community data function and we can pass in our community ID as an argument just like this and then up here we just need to accept that like that as an argument and then down here this is a similar router type error we had before we can just type cast that Community ID to a string and then up here we just have to write a simple query to go and actually get the data for this community all right so let's create a try block um first things first log the error good old error handling then inside of our try block we can create a reference to that Community document is equal to Doc firestore the collection we are interested in querying is the communities collection and the ID of the document we want is community ID now let's actually get that document from our database by calling our get doc function and we can call this community Doc is equal to a weight get doc pass in the document you want to get which is community.graph and now all we need to do is just put the data from this community dock inside of our current Community State so you can call set Community State value and when we want to update the current Community to be a community object with the ID of community.id and all of the data inside of that document so we can spread the community doc dot data and we can tell typescript that that this is going to be of type community okay and that is it for this function now all we have to do is just come down here and add those two dependencies to our use effect dependency array first one router.query and Community State value dot current community just like this so now if I save you saw that the community data is now in state so that about Community component appears and it went and got our post votes for this community because again if we go back to look at this use effect here this is listening to changes in the current community of state and it's like oh now there's actually a current Community there I should go get the votes for this community and so then it did and amazing so now I should be able to refresh this page without coming directly from the community page and it should just go and get that data for us perfect so that is great and that improves our user experience significantly and it makes our product realistic so now what I'm going to do is I think I forgot to put the about component on the submit page actually um yeah I did so let's go to our submit page here yeah I totally forgot to put that in there and so we are grabbing our community State value from recoil but I'm going to change this to get the Community State value from our use Community data hook so that it actually triggers this use effects here because the use effect is only going to trigger from that component if the component calls that hook so let's comment this out and we want to get the same value from our use Community data hook so make sure that Imports and we want to only grab the Community State value so if I save this this component is actually going to call that hook now which is going to trigger that use effect which should have populated the current Community State so if I look at this log over here so you can see that it did go and get the community data so now if I bring in our about component here drop it into our right hand side fragment and then as our community data product we can pass in Community State value dot current community and then same thing as our PID page we can add a guard here to only show this component if we do have a truthy community State value in state so if I save this now that component appears on the right hand side and I should be able to refresh this page and the same exact thing should happen perfect that is amazing we no longer have to come from the community page to see this data here and that is perfect so if I go into here if I sent the link to somebody now now they can actually see the post and see the community data and everything see the boats and whatever so awesome now our app is so much more versatile and realistic and Link sharing is possible so I'm glad we covered that because it is very very important and we can now move on all right you guys you are now going to move on to building the commenting on post functionality which I think is a super exciting feature and it's really fun to build and it's pretty much the exact same thing as creating a post but it's actually easier because we don't have images to deal with the first thing I want to talk about is how we are going to model this data in our database because that's always a good place to start so let's go to our database and let's briefly talk about the way we are going to structure our comments collection so really we're faced with two different options for storing the comments in our database we can either create a top level comments collection at the same level as these ones here communities posting users or we could create a comment sub collection on the post document and either one of these are fine in different circumstances but in our circumstance we need to think about how we're actually actually querying the comment data because again how the data is displayed on the screen what your queries are going to look like should really Drive how you model your data and in our case we are going to store our comments as a top level collection here along with the post communities and users rather than a sub collection on the posts and here is why if we go to the real reddit.com and we go to our profile page it's just a random Reddit account that I made for the purpose of this demo you can see that there is a section on our profile page called comments so on this page it would display a complete history of all of the comments you have made on Reddit which means that there are sections of the app that require access to comment data outside of just the post now we are not going to build this profile page but I did want to model our data to best reflect Reddit in case you did want to build this functionality on top of this project if we wanted all of the comments that we ourselves have think about how much harder that query would be if the comments were stored as a sub collection on the posts we would have to query every single post and then go into all of those posts and see if there's a comment that we have made like where the comment has an author ID that matches our user ID that's really inefficient and doesn't really seem necessary and so that's why I decided to store the comments as a top level collection up here because we can query The Collection directly then right we can just go let's go find all the comments where the author ID matches my user ID and for the posts it's just as easy to find all of the comments with a certain post ID so it's sort of The Best of Both Worlds here it simplifies our lives significantly if we just have the comments up here as a top level collection so I just wanted to discuss these two ways of modeling the data because again with nosql we have all of this freedom and my first thought actually was to put a sub collection on the post right because it's so it makes so much sense it's like oh I only really need to see the comments of a post if I already know the post therefore I'm going to sort of a sub collection but then I was like oh well on reddit.com there's this whole comments section of your profile and so making that query with the sub collection pattern would be very very challenging which is what led me to decide to store the comments up here as a sibling a post rather than as a child of posts just wanted to clarify that because I don't want to just be like oh we're modeling the data this way except it I wanted to provide some food for it to Hut so I hope that is helpful and now we can actually build the functionality into our app okay so let's go back to our app and it's going to be on this PID page that we're going to build in the comments functionality so let's go into here and the comments is going to be as I have indicated here a sibling of the post item inside of the left hand side fragment here so let's actually build the real comments component so inside of our directory here and inside of the posts folder I'm going to create a another folder inside of here call because the comments are a child of a post and so then inside of here I'm going to create the main root file of this folder which is going to be comments.tsx I'm going to use our snippet txed and then I'm going to just put the text in here here are the comments awesome I'm going to close my directory come back to our PID page and actually import the real comments component here comments just like this and so now we should see that show up right there and just uh again to look at our demo let's go look at what we're actually creating here so I'll click on this post and this is it we just have an input and the actual comments themselves let's start off with the props that we're going to accept in our comment component here so the first prop we're going to take in is going to be our user object so this is going to be object User make sure this type imports from Firebase auth our second prop is going to be our selected post which is going to be of type post make sure that Imports as well and then the third one is going to be the community ID because we are going to store this on all of our new comments then we can destructure them from the props down here so user select a post as well as Community ID just like this all right and let's go back to our app so we can see where we are building and let's briefly Define the functions that are going to be in this component to provide some clarity as we are building this out all right so the first function in here is going to be the function that actually creates our comments so this is going to be called oncreate comment and it is going to be asynchronous because it is going to talk to our database and it's going to take in an argument that is called comment text and that is going to be a string and we're going to leave it empty for now our second function is going to be responsible for deleting a comment this is also going to be asynchronous and this is going to take in a comment but this is going to be of type comment which we have not created yet which we're going to do in a second but for now I'm just going to make it any so that typescript doesn't kill us and our third function is going to be responsible for fetching all of the comments for this post so I'm going to call this get post comments asynchronous and empty for now and the very last thing I'm going to create is going to be a use effect because we want to do something as soon as this component mounts and that thing we want to do is get the post comments for this post that we're currently looking at and we only want to run this once so I'm going to leave the dependency array empty so essentially as soon as this component maps to the Dom it's going to go fetch the comments from the database and then put them in stage so that we can actually see them on the screen so that is pretty much the skeleton of this component and now we just have to fill all of these things out let's build out the actual container for our comments component so we can get rid of that div there and our outermost component is going to be a box from Chakra and we're going to give this box a background of white and a border radius of zero pixels zero pixels four pixels four pixels and then in here I'm just going to say here are comments that we can see something show up on the screen and you'll notice that these border radius inputs are just sort of the complete opposite of the Border radius inputs for the Post item and it's to make it appear as though it is a single component there they sort of look like one if you go to the demo they look like kind of a it looks like one massive thing uh and we are doing that by having the Border radiuses sort of mirror each other so to speak and we're also going to give this a padding of two all right we can get rid of this text and inside of here we're going to have a flex box so import that from Chakra and inside of this text box is where our comment input component is going to go which we are going to create in just a second here but let's style out this flexbox first we're going to give this a Direction of column padding left of 10 heading right before and a margin bottom of six let me give this a font size of 10 point and a width of 100 percent perfect and actually before we create our comment input let's create the state that we're going to have in this component here so the first piece of State we're going to create is going to be for our actual comment input and is going to represent the actual comment text that the user is entering when they're creating a new comment so we're going to call this comment text accept comment text and we're going to initialize this to be an empty string our second piece of state is going to be all of our comments for this post that come from the database and so we are going to initialize this to be an empty array okay and we're going to have two loading States here one for fetching our comments and one for creating a comment we want to keep them separate because there are two separate things so our first one is going to be called Fetch loading set fetch loading and it's going to be equal to use State initialize it as false the second loading state is going to be called create loading and set create loading and also false okay so that's going to be it for now now let's create the component for our actual comment input so inside of our comments folder I'm going to create another file called comment dot TSX and use our snippet and let's define the props that this is going to take so the first prop is going to be that common text State component that we declared before second one is going to be the set comment text function and this is going to take into the value of type string and it's going to return void the third one is going to be our user which is going to be a type user the third one is going to be our loading state for creating a comment because you're going to need that one in here to display a loading State when the user presses create comment so we're going to have this be Boolean here and the last one is going to be our on create comment function because that is the function that you're going to call when they click on the create comment button and this is going to take in a piece of comment text and it's going to return nothing now down here we can destructure all of these comment text set comment text user loading and oncreate comment just like that now for this component what I'm going to do for the sake of time is just paste in all of the HTML for it because it's pretty much just a input with a bunch of fancy styling and a button so I figured it's not worth going through a bunch of CSS so I thought it'd be better to focus more on the actual commenting and creating comments functionality I will put a link directly to this component on my GitHub down below so you can grab it as well so I'm just going to drop this in here and add all of the missing Imports command period I love that keyboard shortcut and text as always does not like to Auto Import so I'm going to throw that in here manually perfect so this is all styled and all of those functions that we passed in are hooked up to it properly it's just an input with a button and then with an on click that calls our oncreate common function so nothing super fancy that you're missing here just a bunch of fancy CSS that I thought was not worth going through because you've already seen so much of this already it's more fun to actually work on the creation of comments in my opinion so let's go back to our comments component and import that actual comment input from that file and now we can pass it the required props so the first one is going to be our common text which is going to be equal to our common text State variable the second one is going to be set comment text I do not like when I don't get autocomplete but sometimes you just can't have everything you want okay the third one is going to be the user so we are going to pass in the user which I believe we still have to get oh no it's coming as a problem okay and then we can pass in our create loading State create loading just save this so that formats and then the last one is going to be our on create comment function on create comment okay so I saved this and as you can see here we are displaying this component here that's asking the user to log in or sign up and this is just part of the comment input component that basically just checks if the user exists or if it does not and if it does not it just asks them to log in or sign up and the reason that it is saying we are unauthenticated even though we are logged in is because we are not yet receiving a user as a prop to this comments component so let's fix that so that we can actually see the real component fun fact this is the exact same auth buttons component that was used in our nav bar this is why I love react and the reusability of components is so cool okay so let's actually pass the user in to our component here user is equal to user okay and we are also meeting the selected post which is going to be our hostate value dot selected post and we also want to pass in our community ID which we could get from the router but we can also get access to it from postdatevalue dot selected post dot Community ID okay so typescript is not happy with the misalignment of types here so what I'm going to do for the user is I'm going to Typecast this to be of type user and for the community ID I'm also going to Typecast this to a string however for the selected post what I'm going to do is just come into our comments component here and change the type of our selected policy since our selected post is initialized as null in our post date atom I'm going to use the pipe operator and add null as another type for this prop here so if I save this and go back this should now be happy and we should be good to go and now we can actually see our new fancy input component here which is super cool our button is even hooked up to our on create comment function although it's empty but it is hooked up once you start once we build out the logic here it will work all right let's start right out the on create comment function and actually starts storing some comments in the database so when we create a comment there are two things we need to do the first thing is of course creating a common document in the database the second thing is we need to update the posts number of comments because if we go back to our database here you might remember that we store a field on our post documents called number of comments and the reason we do that is because if we go to our demo here we do store that information you can see it here and it is also displayed on all of the post items here so 328 and 4 and 458 so that is the data coming from the number of comments field on that post document so we need to update that as well every single time we create a comment so Update hosts update post number of comments all right and for both of these operations it makes sense to either have both of them succeed or none of them succeed so for that reason we are going to use batch rights once again because they are amazing and why not they help keep our data super clean with a high level of integrity and then once our batch write successfully completes we can update our client recoil state to show the new comment as well as the new number of comments and then they hit and then in the awesome okay and then okay all right so okay perfect and then in our delete function we're going to do pretty much very similar things we are going to delete the comment document we are also going to update the host number of comments but this is going to be the minus one up here was plus one and then we are going to also update The Recoil State as well to reflective changes so let's work on the creation of comments so let's create a try catch block as usual and we will log the air on create comment error all right then at the top of our try block we can create our batch instance using our right batch function from firestore pass it our firestore instance and let's work on this first thing of creating a comments document our new comment object is going to be of type comment which we have not created yet so let's do that now and for now we're just going to put it at the top of this file but we are going to move it to the comment item component once we actually create that component very shortly so you can say export type comment so our comments are going to have an ID which is a type string a Creator ID so we know the user that created this the Creator display text so we can display that on the UI Community ID that belongs to this post that we're commenting on the ID of the post that this comment belongs to the title of the post and as well as the comment text itself and the last thing is going to be our created at timestamp which you want to be up type timestamp make sure that imports from Firebase firestore and that is it so now down here when we're creating a comment I'm actually going to create a reference to this new comment document so that we can use the ID on our new object here so you can say const comment dot ref is equal to Doc from firestore and we can pass this a collection reference of the collection we want to sort this document in and that collection is going to be our comments collection just like this and now we can populate our new comment object so we can pass this an ID a comment.ref.id the Creator ID of user.uid a Creator display text which if you remember was our users email and then we split the email at the at time and then we grab the first element in that split array and we're actually going to add the bang operator here because we know that the user is going to be defined at this point because only authenticated users can create comments we can add in our community ID the post ID is going to be the selected post dot ID and we are going to again add the bang operator here because we know that at this point we are going to have a selected post the post title is going to be our selected post dot title again can add the bank operator and our text is actually going to be our state variable which is going to be comment text and we actually don't need to accept this as an argument to this function here we can just use it directly from State I don't know why I initially passed that as an argument it doesn't really matter but we don't really need to so I'm just going to use the state variable all right and for our created ad we are going to use our server timestamp function and we're going to Typecast this to a timestamp to avoid the type conflict between the server types and the client types just like this okay then we can actually add the creation of this document to our batch operations so the document we want to create is going to be our comment doc ref and the data we want to store in that document is going to be our new comment now let's update our post documents number of comments field so let's move that comment down here so let's create a reference for the Post document that we are updating so we can say postdoc ref is equal to Doc passes our firestore instance the collection that this document in is posts and the ID of this document is selected post dot ID and to fix this compiler error here we can do one of two things we can either add the bang operator like we were doing up here or we can Typecast this to be a string either is fine but we do know at this point that we are going to have a valid selected post to be consistent with above I'm going to add the bang operator here to tell typescript that it is safe to proceed then we can add the update to our batch operations the document we are updating is postdoc ref and the update we want to make is to the number of comments field on this post and we want to increase this value by one so we can call our increment function from firestore and give it the value one just like this now we can actually write those operations to the database we can say await batch dot commit and then after our database documents have been successfully created and updated we can update our client recoil state so the first thing we want to do is set our common text to be empty so we can clear the input and the other piece of State we have to update is our comments array we want to add this new comment to the top of that array so that it shows the updated list on the UI so we can call our set comments function and we want to take the previous value of this array and update it to be a new array with the new comment at the top and all of the previously existing ones behind it and this is complaining because type never okay yeah so I think when we yeah we have to specify the type of this comment State here and since we have our common type defined we can indicate to react that this is going to be an array of comments and that should satisfy this array down here perfect okay so typescript is happy I can save this and I think all we are missing is our loading State actually so at the top of our try block we can set create loading to be true and then at the bottom we can set create loading to be false just like that okay so let's actually test out this function because our button is actually hooked up to it so um we should be able to create a comment let's go to our database and what should happen is we should see a new collection appear in here called comments with a new comment but we should also see that this post this one we're looking at right here should have an updated number of comments with a value of one so let's try this out and see what happens so I'm going to do hey nice post dude click comment okay it um it didn't even load like the loading State didn't trigger are we sure we have that hooked up comment input on create comment comment text okay um what is happening here I'm not sure is our reacts did anything get created in the database no okay nothing I created um I'm gonna just try maybe refreshing this maybe my hot module thing was being weird Okay so let's try leaving another comment hey dude nice post okay so that seemed to work though I don't know what it was happening for um okay so if I go to the database now we can see that the yes the um the number of comments on the post was updated and I just have to refresh the database because the comments collection is being created for the first time and yes it was created and we can see that brand new comment in there which is super cool so obviously our batch rate worked because it created the comment and our post number of comments was updated so let's create another comment second one comment this was updated to two and that second comment should be in there second one nice all right so now we are able to successfully create comments so let's go back to our app and there is actually one more piece of recoil state that we have to update here and that is going to be the selected posts number of comments here we did that on our post document in the database but we do want to do it in the client as well so that those changes are reflected on the UI right away so in order to update our selected post we are going to need our set post date function from recoil so we can bring that in up here we can say set Post State and we only need to set post it here we don't really need to read from it so we can use our use set recoil safe hook and pass in our post date atom then down here after adding the new comment to the comments array we can call our set post date function take our previous value and the value that we want to update here is selected post and we only want to update one field on the selected post and that field is going to be the number of Commons so we can spread the previous value of selected post preview.selected post and we just want to update the number of comments to be incremented by one and the way we can do that is we can just say preview.selected post DOT number of comments plus one and we can tell a typescript that this new post object is indeed of type post and then we can add the bang operator here to tell Cat script that we know that there is going to be a selected post at this point so now if I were to go make a comment on this post I should see this number here update without refreshing the page okay dude this is cool this is cool so if I comment you can see that that change to a three immediately which is super cool awesome so now all we have to do is create our comment item component so that we can actually see the comments of this post underneath here alright so let's work on the comment item component here so inside of our directory here inside of the comments folder I'm going to create a new file called comment item dot TSX and this is going to represent an individual comment item similar to a post item so let's use our snippet in here close our directory and I mentioned before that we were going to move this comment type over to this comment item file once we have created it so that's what I'm going to do now and the reason I'm doing this is just because I feel like it just makes sense to store the individual comment type inside of the individual comment item component just the preference of mind though it doesn't really matter where you store it to be honest so let's import this timestamp from firestore save this and now we just need to go back to our comments and actually import this comment type from that file we just created so let's do import from comment item and we want to import the comment type there and now this should be happy down here we can save this and go back and I'm actually going to move this above the comment item props I feel like if you have multiple types inside of your react components the component props type should be at the bottom kind of closest to the component just a preference honestly that's uh just what I do it doesn't really matter but up to you all right so the first prop that this thing is going to take in is going to be the actual comment itself so we can declare this as a type of comment our second prop is going to be our on delete comment function because we're going to be able to call that directly from within the comment item component this is going to take in a comment argument which is of type comment and it's going to return void our third prop is going to be a Boolean that represents if we are in the process of deleting this comment so I'm going to call it loading delete and I'll explain more about this in a bit once we have the component actually built out and the fourth one is going to be the user ID so that we can know if the current user is the creator of this comments that we can display the option to delete it to them if they are all right let's come down here and destructure our props comment on delete comment loading delete and user ID all right so let's go to our demo and look at what a comment item actually looks like so we have the icon here we have the username we have the time that the comment was posted we have the text itself and then we have the option to edit and delete it and we're only going to build the delete functionality we're not going to build the edit functionality but you can see here that as a creator of this comment I have the option to edit and delete it whereas these ones I'm not the Creator so I cannot see those icons so that is the reason why we are passing in the user ID here as a prop all right so let's go back to our app so let's get rid of this div here and we can start off by creating the outermost container which is going to be just a flexbox from Chakra now the first component in here is going to be the actual Reddit icon that we saw in the demo so this is going to be contained within a box component so bring that in from Chakra and we're going to have a icon and this icon is going to be our fa Reddit icon and I'm just going to import all of the icons here that we are going to be using um so I'm going to paste in these Imports at the top here and these look like this there's only three of them perfect okay so then the first one is going to be that fa Reddit and right next to our icon container we're going to create a stack here and this is going to contain all of the actual content of the comment I'm going to give this a spacing of one the first thing inside of here is going to be another stack but this is going to be a row stack and this is going to contain the username as well as the created add timestamp so we can declare the direction of this to be row and we want to make the Align Center so everything's vertically aligned and we're going to make everything inside of here font size of eight point and we're going to have two pieces of text in here one is going to be the username and one is going to be the timestamp so let's bring in text from Chakra because as usual we do not get that Auto Import for some reason don't know why I mentioned that every single time and you're probably like yo we get it we we get the text is not Auto Import we get it okay so then the first one is going to be our comment dot Creator display text which is sort of our like little username thing and then our second one is going to be that timestamp and we are going to use moment once again so that we can get a nice formatted time stamp 10 minutes ago or four months ago or whatever so Our Moment function takes in a new date object and the date we're going to pass is going to be our comment dot created at dot seconds because the type of this is a timestamp and that has the seconds parameter attached to it and we're going to need to multiply this by a thousand and then we can call the Dot from now method from a moment to declare this as that nice four minutes ago or eight months ago type of text okay so typescript is not happy because created ad could possibly be undefined and what I'm going to do is actually remove the question mark here and make this not optional because it's always going to be there um so I'm just going to save this and we don't need optional chain here at this point so now that we have just a little bit of this built out let's go back to our comments and actually iterate through our comments and create the comment items for the existing comments so that we can actually see what we're doing when we're building up this comment item okay so underneath this Flex container here I'm going to create a stack and this stack we want to give a spacing of six and this is going to space out all of our comments very nicely and within me stack this is where we want to actually display all of our comment items so we want to take our comments array and map through all of them and take each one and create a new comment item okay and the props you need to pass into this comment item is the comment itself comment is equal to comment our on delete comment function on delete comment our loading delete which for now is just going to be false but we're going to come back to this as well as the user ID which is going to be the current user.uid perfect we can save this and now we can see that we have something here we have not fetched all of the comments from the database yet so only the ones we have created on the front and are going to be here because you have not fetched them and I did create that one a few minutes ago that's why there's one here like so if I create another one now shaded it should show up right immediately and state here okay so we're getting an invalid date here and this has to do with our created at timestamp and we're going to fix that um should I do that now or after the Styles okay let's do the date now actually so the reason that this invalid date thing is happening is because of this server timestamp function here if you remember from a while ago I mentioned that the server timestamp function is actually only callable on the Firebase servers so we tell Firebase that we want our created at field to be a server timestamp so that when this object does reach the Firebase servers Firebase will call this function you know create that typeset for us but on our client we actually cannot call this function and since we want to put this comment into our client state right away without having to go fetch from the database we do need to actually sort of manually create our own timestamp here with our own seconds field on it with our posts we did not have to do that because we created a post using the server timestamp function and then we went back to the Community page and all the posts were fetched from the database after the server timestamp was successfully created on the Firebase servers but in this case we are taking this thing and immediately inserting it into client state so that it shows up on the screen immediately there is no fetching after creating a comment my point in saying that is we do need to manually create our own timestamp on the client so that we can see a valid date here okay so what we can do to fix this is after adding this new comment right operation to our batch we can take this new comment object and modify the created at field so that it works on our and set this equal to our own little client version of a timestamp and our timestamp needs to contain a seconds field on it here and the value we want to set to our seconds you can use our date object from JavaScript and copy.now Method on it and then we want to divide this by 1000 and then we can tell typescript that this is a timestamp because it's sort of our own little custom version of a timestamp so that it works on our client so now I can save this and if I were to create a comment now we should see a valid date will this work date comment perfect so you can see now that we're seeing a few seconds ago and so moment is able to actually read that as a valid date because the seconds thing actually exists on the create that thing now awesome I hope that makes sense it's kind of confusing and it's kind of weird with this whole server timestamp thing but um this is a way around it so that we can directly insert this thing into our client State all right let's go back to our comment item and actually continue building out the UI and fix up these styles of It Go on our creator display text we are going to change the font weight of this to be heavy 700 and then for our date we are going to change the color to be Gray 600. and let's actually change the style of this icon up here as well we're going to make the font size equal to 30 to make it much larger and then we can make the color of it gray 300. very nice that looks very good all right now underneath this inner stack here we're going to actually show the common text itself which is probably the most exciting part of the comment so inside of this text you want to say comment dot text and we can style this to have a font size of Cam point to make it slightly smaller there we go we can see the actual comment there and then underneath here we're going to create a another stack which is going to contain all of the user actions that is on a comment so like these icons the edit delete buttons it's going to be a row stack so that's all spaced nicely okay so let's make the direction of this is equal to rho and we're going to vertically align our items again so we can say Center for our align we want to make everything inside of here cursor pointer because they're all sort of clickable actions and we're going to make the color of everything inside of here gray 500. now the first two things inside of the stack are going to be the upvote and download icons that we see on the comments so the first one is going to be the i o Arrow up Circle outline and the second one is going to be the down one so we can paste this in here and just change this to i o arrow down perfect looks very good then underneath here we want to show the edit and delete option but only if the user ID is equal to the comments Creator ID only if I'm the owner of this comment do I want to see these options here and we can create a fragment from within here and we're going to have two pieces of text and one is going to say edit and the other is going to say delete and we're only again building the delete functionality but this is where you would click the edit functionality if you decide to build that so on both of these I'm going to add some common styling and The Styling for these is going to be font size of nine point and hover styling of a color of blue 500 just like this and then on the delete since we actually have this functionality built in we're going to add the on click function and this is going to call our on delete comment function and we're going to pass in the comment product just like this so now we actually have this hooked up to our delete function so when we build it it'll actually work okay and one thing up here next to our created at text is we're going to actually also add a loader for when the user does delete this comment we're going to just clean up display a little spinner here indicating that the delete is in progress and that's sort of where this loading delete Boolean is going to come into play so right here I'm going to add that in and I'm going to say if loading delete is true we want to show this spinner so bring in the center from Chakra and we're just going to make the size of this small cool so if I make this true just we can see what this looks like that is what that looks like it looks really cool and it just tells the user that the deletion is in progress awesome and I think I forgot you had padding on the stack container of all of these comments because it looks like they're not positioned properly so here on this stack here I'm going to add a padding of two there we go that looks much better and while we are here actually I'm going to use this fetch loading parameter to display a skeleton loader for our comments because that makes it look so much better so inside of this stack here I'm going to create a ternary operator that is going to see if fetch loading is true if it is true we are going to display our loader and if it is not we're going to display our comments so I'm just going to paste in the loader from the component because it's just a bunch of skeleton components here and let's add these missing Imports cool and I have this like hardcoded012 array just so that it creates three of these box skeleton components here so if the fetch is complete meaning that we are in the fussiness of this ternary operator we want to display to the user that there are no comments if the comments array is empty after they have been fetched so inside of here I'm going to create another fragment and in this fragment I'm going to add the condition to check if the comments dot length is equal to zero and if it is we are going to display this component that says no comments yet and I'm just going to paste that in it's just a flexbox with some text in it so that is what this looks like and if we do have comments in our array we want to show them so then I can create another fragment over here and inside of here we want to actually put in this comments.map function just like that so I can save that and now I need to just import text from Chakra save this so now if I refresh this page because we have not created our effect comments function yet we should see this thing here that says yeah no comments yet even though there are comments but again we haven't created our fetch function yet to create our initial value of comments so pretending that there are no comments this is what that would look like okay so let's write out this get post comments function so that we can see the initial state of this post comments when this component loads right now we can see that there are five so once we write this out the initial value of our array should contain those comments after they have been fetched and all we need to do inside of here is query our comment collection to find all of the comments with the post ID of the selected posts ID so we can create a try block and inside of here let's log the error get post comment then inside of our try block I'm going to create an object called comments query that we're going to pass to our get docs function to perform the query so we can create this using our query function from firestore the first argument to our query function is going to be collection reference to the collection we are querying we can pass this at our firestore instance and the collection we are carrying is comments the second argument is going to be our where clause which set of documents do we want to get from the comments collection we want to get all of the comments where the post ID of the comment is equal to the currently selected posts ID so selected post dot ID let's save this so that it formats then as the third argument to our query we can tell Firebase how we want these ordered by so we can pass in our order by function make sure that imports from firestore and we want to order by the created at field in descending order so if they come in with the latest comments at the top now we can actually fetch this set of documents from our database so let's create a new object called comment Docs and we can call our get docs function and pass in our Comics query then after we get all of these documents back from firestore we want to extract all of the data out of them and store them in state so we can create our new comments array and we can map through our comment docs dot Docs so comment docs.map and we can take each document and extract the data out of it and create a new JavaScript object with the ID of dot dot ID and then we can spread all of the data inside of that document so we can save this now all we have to do is put this in our common state you can say set comments and throw in our comments result from firestore and we can tell typescript that this is going to be an array of comments so we can indicate that like this and actually what I'm going to do is initialize our fetch loading to be true so as soon as this component renders we can indicate to the user that the fetch is in progress because that is sort of exactly what is happening so if you save this this is what those loaders look like I think they look so cool I don't know why I love these these skeleton loaders so much I don't know if everyone gets as excited about those as I do but they just look so good to me and then once this fetch has been complete um get post comments at the very end of our try catch we can set our fetch loading to be false perfect okay so we are getting an error here and I believe it is because yes we do need an index on our comments collection this is what we had to do with our posts as well if you remember in order to perform queries on our collection uh we do need an index on that collection so what we can do is just click on this link and do the exact same thing as we did last time this will open up the console and let's create the index on our comments collection by just clicking create index and this will take a few minutes I think last time it took about four to five minutes so come back when this is done okay we are back and the index has been successfully created with a status of enabled so now if I go back to the app and I refresh this page here we should see those comments which we are not cool okay there's another error here uh function where called with in valid data unsupported field value undefined okay all right so I think what's Happening Here is it is trying to uh make this query here but our selected post ID is undefined on the first render of this component because we do need to go fetchup from the database and actually populate state so there is a moment where the selected post is null and the ID is undefined so to prevent this what we can do is actually add a dependency in this use effect here and only call the get post comments function when we do indeed have the selected post successfully fashioned the database and in state okay so we can add a dependency here of selected post then as we've seen before we can protect against running this function by simply checking for the truthiness of the selected post and if there is no selected post we can just return out of the use effect and not call our function so let's save this and that should work and it seems to have worked but let's try refreshing the page and make sure that that actually does work perfect so it does work that looks amazing I love it and we should be okay I'm just gonna say we should be able to delete them but we have not written out that function yet I'm getting ahead of myself here uh on this error in the console is saying that we do not have a key prop in our comments item so yes when we do map through uh the items here we want to add a key as required by react and the key we can just make the comment dot ID if I refresh so we get rid of that ugly error in the console we can see all of the nice loading State boom and to make this even actually a bit cleaner we can hide our input completely until the comments have been fetched as well just so we don't see uh the input as the only thing on the screen while they're being fetched so we can add a condition here to only show the common input if we are not in the process of fetching these comments so now if I refresh awesome that looks just a little bit better but it makes a big Improvement in my opinion so that looks amazing all we have to do now is write out the delete function which is pretty much just the complete opposite of the create function so not super difficult there and then we will be able to delete comments create comments and we will be done with the comment functionality and we are even closer to the finished product all right you guys all we have left to do to complete our commenting functionality is to write out the on delete comment function and if you remember we outline the steps that we are going to do inside this function and they are pretty much just the mirror actions of the oncreate comment function so nothing crazy here and we just have to undo the creation of one so underneath these comments I'm going to create a try catch block and I'm going to remove that return statement there and we can start off by logging the error on delete comment okay and let's move these comments into our try block and let's start off with deleting our comment document so we're going to need to create our batch instance because we are going to be working with batch operations so we can bring in our right batch function and test this our firestore instance okay let's create a reference to the document that we're going to be deleting so we can say comment doc ref is equal to Doc passes our fires for instance the collection we are deleting from is comments and the ID of the document we are we are deleting is comment dot ID and we can actually change the type of this to a comment now because we have that type defined then we can add the delete operation to our batch batch.delete and we are deleting the comment document okay second thing in our batch is going to be updating the number of post comments on the post document so we can create a document reference to that post so post doc graph is equal to Doc as in our firestore instance posts collection and the ID of the post we are updating is going to be our selected post dot ID and we can have the bang operator here and then we can add the update operation to our batch exact same as what we did in the creation of posts and we are updating our postdoc ref and the update we want to make is to the number of comments field and we want to increment this by negative one decrease it by one so that is it for our batch operations now we can actually write these to the database so we can say awaitbatch dot commit and then when those have successfully completed we just need to update our client state so let's do that all right so just like in the creation of a comment we updated the number of comments on the selected post by one so now we're just going to decrease it by one so we can do that by calling our set Post State function take the previous value and we want to update the selected post and the field we want to update on the selected post is number of comments and we want to take the previous value of the number of comments and subtract 1 from it and we can add the bang operator here and then we can tell type script that this is an object of type post now what we need to do is just remove that comment from our comments array so we can filter our comments so we can say set comments take the previous value of this array and turn it into a filtered version by calling preview.filter take each previous comment item and check to make sure that its ID does not equal to the ID of the comment that we are deleting to save this so the very last thing we are going to do is Implement our loading state for deleting and if you remember we just temporarily passed in a value of um where is it here a value of false but we're actually going to implement this now now if you remember what the Spinners look like on these things we had individual voting States for each individual comment item so we knew which one was in the process of being deleted and so there are two ways to do this and if you remember from deleting a post if you go back to our use post hook here um on our delete post function what we did was we had this function return a promise and we called this function from with inside of our post item like this we created another function called handle delete that is local to the post item and that function called our on delete post function which returned a promise and this allowed us to do independent error handling and loading handling in each individual post item and in this case we're going to do a little bit of a different approach just so I can show you another method to do this inside of our comments function here rather than having loading State declared in each individual comment item we are going to have a single delete loading state so we are going to create a single state variable for our deletion so rather than using a Boolean like the other one so just true or false sort of this binary method here we are going to instead have this be a string State variable and when I click on a particular comment to delete it it is going to set the delete loading ID to be that comments ID that way when we're mapping through our comment items here we can use that logic to send a Boolean to the specific comment item and it will have hobby true or false of whether or not this is the one that is being deleted it's very very similar to having selected state if you remember like in our in our new post form nav we were able to determine which one was currently clicked on very similar here um very similar idea so hopefully this will make more sense once we write it out if it if you're kind of confused so we're going to call this uh loading delete ID and set loading delete ID and as I mentioned we are going to declare this as a string not a Boolean and an empty string is falsy so we're pretty much initializing it as false and inside of our and delete comment function at the very top we want to set loading delete ID to be the ID of the comment that we are trying to delete and at the bottom down here we can set it equal to an empty string which is again falsi then down here to actually pass this prop to this component and to have it know whether or not it's being deleted we can say does the loading delete ID equal to this particular comment that we're iterating through is ID just like this okay so let's try this out so let me try clicking delete and you saw that only that one had the spinner there and that is thanks to this loading delete State we store the ID of this particular post so watch up here so that's pretty cool I think that's cool the other option to do it like I said before was with how we did it with the post where we would create another function inside of our comment item which would call our on delete function inside of here and then this function would return a promise when it is successfully deleted and then inside of the component we would know locally whether or not it was successful and we could show the loading State and blah blah blah but in this case we sort of are having a single state variable that is acting as the loading state of all of them so hopefully you find those two methods sort of interesting and yeah just a few a different way to handle loading States but yeah so now we can delete comments and create them so here is a new comment you can post this and then if I don't like it delete it very cool if you go to our database and check this out in real time if I create a new comment hey there do nice post if I post this watch on the left the document appears instantly and if I go to the posts there's four comments which matches our client State here perfect I create a new one nice that updates to five if I delete this four three the loading State works the batch rights are working and that wraps up our commenting functionality all right you guys so now that we have built all of this amazing Community functionality we have been able to create communities we have been able to create posts within communities comment on those posts delete the posts and the comments vote on those posts change the profile image of communities we have done all this amazing stuff the next logical step would be to actually be able to navigate between these communities that we are in using our drop down directory menu up here long long ago I mentioned that we were going to cover this kind of more towards the end because it is a simple component and we're already doing the heavy lifting for it we're already fetching our community Snippets you just have to build out the UI of this component so from within here we are able to create Community successfully with our create Community model the only thing that is missing is the actual list of communities that we are in if we go to our demo here to look at what I'm talking about let me expand this a bit so we can we can see that we are going to build out the menu items here for each of the communities that we are in and have a moderating section for the ones that we ourselves have created as well as our option to create the community and this is going to at the top in the menu show which Community we are currently in in our app right now it's just by default home and there's nothing else going on me it's just sort of hardcoded the home in there and it doesn't matter what community we're in it just always says home now we want to build this component to actually know what community that it is currently in and display that as well as the profile picture and allow us to navigate between these communities and in building this component we are going to build another custom react hook and have it manage the global recoil state for our directory and the reason we are making this Global using recoil and having a hook manage the state for us is because we are also going to build the functionality to be able to open the directory from the create post link on the home page here if they click on the create post link and they're not in a community we open this menu to allow them to choose which Community they want to build the post in I know on Reddit that you don't have to necessarily Post in a community but it seems like posting in communities is much more popular than just posting in not a community so I've decided to build the functionality to only be able to post in communities it is going to prompt them to choose which Community they would like you post it and then I can go directly to that so for that reason because we have this component that is far away from this component in the react componentry we are going to manage the state of this menu from recoil and using a custom hook so that both components can toggle and read from that state okay so I just did some quick Version Control here to get us all set up to develop this new feature and I'm just going to remove all of these files because we do not need them anymore and I'm going to go back into the directory file from way way back that we haven't touched in a while and if you remember we created just the skeleton of our communities component which if I open it up I believe that is where our create Community model is right now so that is how we are actually able to open up this model and create a community so essentially all we need to add in this component is just the actual list of our community Snippets and create a menu list item for each one so what we're going to do is start off by pulling in that from our recall State Community State value so we can declare that up here in a variable called my Snippets and we can use our use recoil value hook and we can pass this our community State atom Community State and we only want to grab my Snippets from Community State we don't really care about anything else in this component okay so underneath our community modal here let's add in a box component from Chakra and this is going to be a container of all of the list items so the first component inside of this box is going to be a piece of text and that text is going to say in all caps my communities so let's open this up so we can see what we're doing here okay on this outermost container we're going to add some satellite here so we're going to give this a margin top of three as well as eight margin bottom of four on this in my communities text we're going to give this a padding left of three and some bottom margin of one you're also going to make it quite small and make the font size seven point and the font weight is going to be 500. and we're also going to make it gray gray 500 just like this so underneath our create Community menu item we are going to actually Loop through our community Snippets and for each one we are going to create a menu list item with a community name in it so we can take our Snippets and map through them and for each snippet we want to actually build out some piece of HTML and that piece of HTML is going to be its own component called menu list item but for now let's just make an empty div with the Snippets dot Community ID so we can see something showing up on the screen there so now we can actually see the list of my Snippets okay so now let's actually build out the menu list item component and this is going to lead us into building out the recoil atom for a directory state so inside of our directory folder here I'm going to create a new file called menu list item.tsx we can use our snippet so the first prop that we're going to take into this component is going to be called display text and this is going to be Hub type string and it's actually what's going to be displayed in the menu item here um in the in the list here the r slash Community ID the second prop we're going to take in is going to be the link to that community so when the user clicks on it they can actually go inside of that community the third problem we're going to take in is going to be an icon and this is going to be of type icon type so make sure this imports from react icons our fourth prop is going to be an icon color and this is going to help us differentiate between the moderator list and the regular Community list and this is going to be a type string and the fifth prop is going to be the image URL which is going to be the profile picture of the image and this is going to be actually optional because not all communities have to have an image URL so sometimes it's going to be undefined so down here we can destructure these display text link icon icon color and image URL and the HTML for this component is relatively straightforward it's only about 10 to 20 lines so each menu list item is going to actually be a menu item component from Chakra so menu item make sure that imports from Chakra and we are going to apply some styling to these we are going to give all of these a width of 100 percent a font size of 10 point some hover styling which is going to have a background of gray 100 and we are also going to have an on click function that is going to Route us to this community but for now we're just going to leave it as an empty callback we will come back to this when we build out our custom hook for our directory then inside of this menu item we want to have a flex container on our Flex we're going to make the vertical alignment center inside of here we're going to add a condition to check for the existence of an image URL because if the image URL exists we want to display that and if it does not we're just going to display our famous Reddit icon so if there is an image URL we are going to have an image component from Chakra the source of our image component is going to be our image URL we are going to give this a border radius of full to make it round and we're going to give it a box size of 18 pixels and we're going to give it a margin right of 2. to add some space between this and the text that is coming up if there is no image we're just going to display an icon and the icon is going to be the icon prop that we are going to pass in we are going to give this a font size of 20 and some margin right of 2 and we're going to give this a color equal to the icon color prop then underneath this ternary operator is where we're actually going to show the display text so let's go back to our app so we can see what we're doing here and let's actually bring this component in so we can get rid of this div here and we are going to render our menu list item component that we just created we can pass this a key of this snippet dot Community ID because that's a unique identifier the icon we're going to pass in is going to be fa Reddit our display text is going to be a string and we're going to use a template literal here and it's going to be r slash then snippet dot Community ID so it's like r slash Chinese group or r slash baking okay let's save that so formats we're going to pass in a link string so that our next JS router can take us to this link and the link is going to be forward slash R make sure to include the forward slash before the r here so that our router knows you place it after the domain name it says forward slash R forward slash then it's going to be our snippet dot Community ID and that is that and so this is what we're going to pass to our router our icon color is going to be blue 500 and our image URL is going to be snippet dot image URL and so the reason we have a prop for our icon color as well as our icon is because we are going to reuse our menu list item component up here in a little bit when we display the list of communities that we are moderating because they're going to vary slightly and so that's why they're capacitance props and not used directly in the menu list item okay so let's let's save this okay so I think the reason that it's not showing the image URL here is because we added the functionality of uploading Community images after we had created this community and after the community snippet was inserted into my users Community Snippets array and so I think the community snippet does not have the image URL right now okay and this is because we built that functionality afterwards so all we would have to do to fix this is to just go back to the Community page and then join and leave the community and that should put a new snippet with the imagery on it so if I leave the community that should have been deleted from the database yeah I'm not in that Community anymore if I rejoin it should have created a new one yeah with the image URL so now if I open up the directory the image isn't there okay so now let's quickly build out the moderating section of this list because it's extremely similar to this we just have to apply a filter we go to our demo it pretty much just have the moderating section and then the my community section and the ones you are moderating also do appear in the my communities list that's how it appears on Reddit so that is how I made it so then inside of our directory here the component for our moderating section is going to be very very similar to this I'm just going to grab that entire box and paste it up above here like this but we can get rid of the create Community menu item and this is going to say instead of my communities it's going to say moderating okay so if I save this now we have a duplicate list so we need to apply a filter here to this Snippets rate so before we map through it we want to actually filter these to only be the ones that we are moderating and to do that filtering we can look at each snippet in this array and see if the is moderator key exists and is true and then once that filter is done we can then map through those results okay so I save this and we can see that there are no communities that I'm currently moderating okay so the user I'm currently logged in as is clearly the creator of this community because I can change the image right only only creators and admins of this community can do that however it is not showing up in my moderating section of the list even though I clearly am the creator of this community so it should definitely be in here I should definitely be a moderator and the reason that is is because what we have to do just a few minutes ago with having to leave and then rejoin the community to allow that new image URL functionality to be included in the snippet So currently it's built so that even if you create a community and you're added as a moderator if you leave that community that you created and then rejoin you're not automatically added back as a moderator and we can actually add that functionality because I do think it makes sense now that I think about it too if you leave a community that you created and then rejoin maybe you should be added back as a moderator so we can do to fix that is go to our use Community data hook and go back to our on join Community function so inside of our join Community function all we have to do is on this new snippet that we're creating we can add that is moderator key here and we can just check like does this user's ID equal the community data dot Creator ID that's all we have to add so I think now that we've added this code we should be able to leave this community and then rejoin and now it should end up in my moderating section yeah because if I go to the database now um and go back to community Snippets I should be a moderator right because I I rejoined a community that I am the creator of and so now it's showing up in here successfully which is perfect but I'm kind of glad we discovered this because um I think it does make sense to just be automatically added back as a moderator and also if I change the community image here to be say this Google logo if I save those take that change now if I were to refresh this page the community snippet should have that updated image because the community snippet and the community are pointing to the same image URL and so when I update the community image the community snippet is also going to be updated as well so that is super cool okay so now we're going to start working on the actual recoil atom that represents the state of our directory menu so the openness of it as well as the currently selected directory menu and then we can build out our custom how to manage that state so that we can toggle the openness from the create post link on the home page okay so inside of our directory here uh I forgot how confusing it is to have the directory component called the directory and we have a file directory it's kind of confusing inside of our folders inside of atoms let's create a new file called directory menu Adam dot TS okay so we can import Adam from recoil so just like all of our other atoms we can create a typescript interface to model what this state is going to look like so for our directory menu State we can create an interface called directory menu state and there's only going to be two things in here the first one is going to be is open is this thing open or not similar to our modals and the second thing is going to be the selected menu item so what is currently selected in this drop down menu and right now I'm going to make this up type any but we're going to actually come up here and create a type for our selected menu item and this is going to tie into the props that we are passing to our menu list item here so bear with me if that doesn't make sense I'm just going to close the left hand side directory and let's create the type for our directory menu so directory menu item so our directory menu item type is going to have the same properties that we are passing as propped to our menu list item here because for each menu list item we're pretty much creating a directory menu item and so they're going to have the same properties so this is going to have display text type string a link of type string an icon of Icon type make sure that imports from react icons icon color which is a string as well as an optional image URL and also I think I forgot in the communities component the icon color we want to pass to our menu list item in the moderating section it is not supposed to be blue 500 it is supposed to be brand 100 which is that Reddit orange so um in the directory menu item if this did not have an image the icon would be orange which would sort of indicate that we are a moderator of that community and that's sort of how we differentiate them there that's not super important though that's just a very small detail okay back to our directory menu item here now we can declare this selected menu item as type directory menu item and we can also create a variable to represent our default menu item and our default menu item is just our home page right it's a home text with the sort of home icon that's sort of our default when we're not in a community so we can say export const default menu item and we're exporting it because we're going to need it in our custom hook and this is going to be up type directory menu item and our display text for this is going to be home our link is just going to be the index route the icon is going to be an icon called Ti home so make sure this imports from react icons TI and the icon color is going to be black so this is sort of why we have those props for Icon and icon color because they're not always the same and so I wanted to make a sort of a generalized solution where we could really have any icon or any icon color and so that's why they're being passed as prompts then what we can do is as you as usual create a variable to represent our default state for this atom so we can say export const default menu State and this is going to be of type directory menu state and we want the is open parameter to be false because we want it to be closed and when the user opens the application and our selected menu item is going to be our default menu item and so to start off as the home item and then it'll change depending on what community they are in if they navigate to a community all right now we are ready to actually create The Recoil atom so we can say export const directory menu state is equal to atom and this is going to be up type directory menu state then inside of here our default key can just be directory menu State and the default initial value of state is going to be our default menu state just like this awesome and that is it for this file this is all that represents our directory menu so this is like the most important part here that we have just two pieces of State representing our directory menu we have whether it is open or not as well as the currently selected menu item which is just one of those Community list items okay so this is how we're going to use this is open parameter from our directory menu state so if you go back to our directory so Shocker's menu component allows us to pass in a prop called is open so for example if I pass this as false it's never going to let me open this thing so the reason this is useful is because we can pass in the value of our is open state from our recoil atom to our directory menu here and that is how we are going to be able to actually toggle the openness of this menu from other components and this should become even more clear when we build out the custom hook so let's start working on that so let's go into our hooks folder and let's create a new Hub called use directory dot TSX okay use our snippet here and we are not going to be taking in any props we can get rid of this okay and we are just going to return for now an empty object and then we can get rid of the return type react.xc so just like our other custom hooks this Hook is going to manage our recoil state of our directory menu and we can access this state from any other component just by calling this hook so we can pull in our directory state by saying directory State set directory state is equal to use recoil State and we want to pass in our directory menu State atom so make sure that Imports all right so before we actually build the rest of this out I want to show you how this is going to be used inside of our directory to provide some clarity so the first thing we're going to return from our Hook is going to be the actual value of our directory state which if you remember has two pieces is it open and the currently selected menu item so inside of our directory here now we can pull in that state from our custom hook so we can say const is equal to use directory and it does not want to import there we go okay and now we can actually pull in that directory State and so the value we want to pass to our is open prop of our shotgun menu is going to be our directorystate DOT is open so hopefully this is starting to make more sense now so I'm getting an error here use directory oh I think I have to save this okay that's probably why yeah okay okay so now it's false so so we're not we're not actually able to toggle the state of that yet but we're going to work on that but now we can control whether or not this menu is open using a recoil atom so let's go back to our hook here all right so let's create these sort of skeleton outline of this component here it's a pretty simple hook it's not super long at all so the first function is going to be called toggle menu open and this is going to be actually responsible for changing the open state of our directory menu and this is the function we're going to be able to call from anywhere in our app to actually open up our directory so we can create this as a function and inside of here all we want to do is call set directory state and toggle the value of the is open parameter to be the opposite of what it currently is so I want to update the is open property of our directory menu State and I want to change it to be the value that is that is opposite to the current value that's sort of what toggling is on off on off so if it's off I'm going to turn it on and if it's on I'm going to turn it off so now if I save this and I return this from a hook just like that then I go back to the directory component and I pull that toggle function in toggle menu open and then I pass this to the on click of our menu button here which is our like this thing here in our in our nav bar if I pass this to the other click so if I say on click is equal to toggle menu open now I should actually be able to open up the menu so how cool is that and this is the same function we are going to call from The Post Line from the home page and the Community page is just going to take us to the submit page but on the home page it's going to call that toggle menu open function which is going to open up this menu so now at a global level we can toggle the openness of this menu thanks to our recoil atom and this hook let's go back and continue building up this hook the other function that we're going to have in here is going to be the function that is triggered when the user actually clicks on a menu item in the directory so we're going to call that on select menu item and this is going to take in a menu item and it is going to be archetype directory menu item which we if you remember exported from our recoil item file so we're going to take this and we want to update our directory state to have this passed in menu item as the selected menu item so we can update selected menu item to be the menu item that was clicked on so when I click on Tesla motors for example that menu item is going to be sent to this function and then our directory state is going to be updated with the Tesla Motors menu item and probably the most important thing is when the user clicks on a menu item we actually want to take them to that route right like they're going they're clicking on it to go there not just for fun so we need to bring in our router from next router so router is equal to use router and after we set State we can call router.push and we can tell the router to take us to the menu items link so hopefully this is all starting to piece together now let's actually go see how we're going to use this on select menu item from within our menu so if we go back to our menu list item component which again represents a single item in our in our list here so when we click on one of these menu items we actually want to call that on select menu item function and set that state to be the one we clicked on so at the top we can pull that function in from our hook use directory and we can bring in toggle sorry not toggle menu item on select menu item and in this on click function here we actually want to change this to call that on select menu item function so inside this function here we can package up all of the props that are passed to this component into an object that is of type directory menu item because that is the type of the argument that is required by our on select menu item function and so that is why we are passing in all these props and that is why our directory menu item type has the exact same properties of the process we are passing in to this component here so we want to pass this an object and again this object is up type directory menu item which has property display text link icon icon color and image URL optional so now if I actually click on a different Community new new we should actually be taken to that Community page so let's click on it okay so the community updated and the data updated but the image is still showing okay I think on the um Community index page here yeah so we need to I initially declare this as an empty dependency array in this use effect here we need to add a dependency of community data and so this is so that every time we actually change communities and Community data changes we update our current Community State to be that latest community of data before without the dependency it was just running a single time we want to run this every single time the user navigates to a new community and Community data changes so if I save this now now that should update all right so the header updated but you'll notice that the post did not we're still seeing the posts from Shady's group and the reason that is is we have to go do the exact same thing in our get posts function use effect in our post component we need to add a dependency of community data so we go to our post component here yes we created this use effect and it's currently only built to run once because there's an empty dependency array and we want to call this function get posts every single time the community changes because you want to get the post for the community that the user is currently in so we can add a dependency here of community data which is being passed as a prop to this component and so now if I save this it should fetch the post from this community which currently there are none so let's create one just for fun inside new new blah blah blah blah blah blah random text okay post cool so now I'm in new new and I see this post I just made if I go back to Shady's group it should like resetch all of that data so now all that data updates the community data updates the header updates and everything so go back to new new the data updates so perfect so all we had to do was just add dependencies in our use effects to make them trigger every time we switch communities okay and also you'll notice that when I switch communities when I click on one of these menu items the menu just stays open right it'd probably be nice if it just closes once I click on a menu item that kind of makes sense so all we have to do to do that is if we go to our use directory hook here so right after we push the link to our router we can call our toggle menu open function to close the menu so we can say if the directory state dot is open then we want to close it we can call toggle menu open just like that and so now when I click on a menu item it should close it very nice that is beautiful okay so what we want to do now is actually change it so that the display text of the community as well as that icon are displaying in our menu here because right now it's always just home because I think we have home hard coded um in the menu button so if you go to our directory here thing yeah so we just have home here we need to change the icon as well as the text to be dynamic and pull from our state which we're already grabbing from our hook here okay so inside of here let's change this home text to actually be the currently selected menu items display text so we can say directory state dot selected menu item dot display text so now if I save this we should see Shady's group in the thing that awesome so now it's actually the community we're currently in so if I go to new new updates now we need to change the icon so what I'm going to do is above this icon I'm going to add a ternary operator to check for the existence of the selected menu items image URL and if the image URL exists we want to display that instead of the icon and if it doesn't exist we will display the icon okay so let's check for the existence of the directory state DOT selected menu item dot image URL if this exists let's show an image from Chakra with the source of the image being the image URL from the selected menu item and if it does not exist we are just going to show the icon and the icon we want to pass in the as prop as the directory state DOT and selected menu item dot icon just like that and we want to make the color of this icon the icon color from the directory state so you can see directory state DOT selected menu item dot icon color Okay so let's save this so that a format okay so now we can see the icon of this community is actually in this component here so let's make it so we can see the image if it exists so we're going to make the source of this image equal to the directory state no autocomplete dot selected menu item dot image URL okay and we're going to make the Border radius full so that it is circular and we want to make this a box size of 24 pixels and we can give this some margin right up to you so now if I go to a community that actually has an image URL like Chinese group it should show there which it does perfect that is so cool and if I expand this out we can see that it says our Chinese Viewpoint actually has the icon or the image for that community so that is super cool all right so we are very very close to being done our custom look there's just one more thing we have to add and this has to do with what I'm about to show you so right now our directory menu is showing properly it's currently Shady's group and it has our image URL which is perfect but what happens if I refresh and we're starting off on the schizer page you can see that it's initialized as the home icon and that is if you remember the default value of our directory menu we have the default menu item which is our home so right now it is not built to know what community it's in if you're starting off on that Community page right it has to do with again that refreshing thing so the initial state of this needs to be toggled if we're starting off on the Community page because right now we're only updating that state if we actually click on something right but we it doesn't know how to update by itself based on the value of current community so that's what we have to do so let's go into our use directory hook and we can handle this very similar to how we handled the refreshing problem for the community data as well as the single post page view so we can create a use effect that is essentially going to listen to the current Community value and based on what that is it is going to you update the selected menu item by itself without having to click on one explicitly so we're going to have this user effect have a dependency of the Community State values current Community because we already solved the refreshing problem for the community data so the community data is being fetched on refresh and so current Community state is being updated so if we listen for updates to the current Community State we will also be able to update our directory menu item to be that current communities item so we have this like really nice data flow triggering thing like where the community updates and then that triggers another thing and it's just a nice data flow so at the top here we're going to need to bring in our community State value so we can create a variable called Community State value and we can use our hook use recoil value and we want to pass in our community State atom then as a dependency on this use effect we want to listen to changes in the community State values current community so now every time current Community updates we are going to trigger this use effect so I'm just going to destructure the Community State value and grab the current Community from it like this current Community okay so now we can check for a truthy value of their current community and if there is 1 we want to update our directory states to be that Community as a menu item and this is extremely useful for the refresh case because we're basically telling this component how to update itself without needing to explicitly click on one of those menu items because this use effect is going to listen to changes in the value of current Community which is updated by our used Community data hook so you can say if current community we can call our set directory State function take the previous value and we want to update our selected menu item and we want to set the selected menu item to be an object of type directory menu item so we need this to have all of the properties that is required by that state here which are all of these things here directory menu item our display text we can make R forward slash then we can take the ID of the current community so we can say commute current Community dot ID the link we can set to be forward slash R forward slash current community dot ID okay typescript is freaking out right now this looks all these red underlines the next one is going to be our image URL which is going to be the current Community Dot imageurl and then we just want to pass in a fallback icon in case the image URL does not exist then it's just going to show our fa Reddit Icon by default and the default color of that is just going to be blue 500. just like this perfect so now typescript is happy thank God all those red underliners are gone okay so now if I save this this updated okay so now if I refresh the menu item should no longer be home by default it should update to be Chinese Group which it did the image URL is there and you can see that perfect that is so cool so I can go into here I can refresh this and it's no longer just going to be the home value because it's picking up that there is a current community in state here and then it's updating our directory menu item to to be that current community and as well as its image URL Chinese group can refresh awesome that is amazing and then what we want to quickly do is make it so that if they click on the the logo here it just takes them to the home page that's pretty much how every website works if you click on the logo it just takes you home so let's go back to our navbar component here okay and on our logos here this flexbox represents our logos if you remember from way back from like part one we can add it on click here to these logos and we can call that select menu item function from our hook so we can bring that in up here we can say cons is equal to eu's directory and we can bring in our on select menu item function and then our on click for the logos in call are on select menu item function and pass in the default menu item which if you remember is just the home value it's the home tax with the home icon I'm actually going to make the cursor equal to pointer now because it's clickable so now I have to click on this it just takes them home and the menu item updates to just be the home icon as well as the home text and then go back size group it updates that is amazing so the very last thing we have to do related to our directory here is just go back to our create post component and actually have it open up the directory if there is no current Community meaning that they are on the home page so if we go back to our create post link component here we already have created this on click function that routes the user to the community submit page so if I click on this I go to the submit page of Shady's group we just want to add a condition to check if there is no Community ID let's open up the directory because if there is no Community ID that means that they're on the home page all you have to do is after grabbing the community ID off of the router we can check is there even a community ID if there is then we want to call router.push and take them to the submit page and if there is not a community ID we want to open our directory menu okay so in order to do that we need to bring in our toggle menu function from our hook so you can say const is equal to use directory bring in our toggle menu item function then down here we can call toggle menu open and we actually want to return out of this function if this if statement is triggered because we don't want to open the menu as well so if I save this now so if there is a community ID which right now there currently is a create post link is going to take me to the submit page but when I'm on the home page which we have not created yet when we add the create post link to our home page it's actually going to open up the menu and so that is how we're actually going to open up our directory menu from the home page and the home page is extremely simple to make because all we're going to do is just drop in components that we have already created and it's just going to magically work all right you guys so as I just mentioned we are going to be working on the home page of our app here because we have already covered all of the community based functionality and all we need to do now is work on the index page of the app and we basically just have a post feed very similar to the communities and then these right hand side supporting components here like the top communities and then these other sort of simple components here all right so since on the home page we are not in any particular Community we just need to write a few functions to actually build out the posts that will be inside of the user's feed because when we go into a community that query is very simple we just go find all the posts with the community ID that we are currently in but on the home feed we sort of need to write some different logic to actually determine what we're going to show to the user and we want to do this for both logged in users and users that are not logged in meaning that they're sort of visiting the site for the first time so if I log out you'll see that the feed changes and it's slightly different and then if I were to log back in it builds a feed that is specific to this particular user so we just have to write two functions one to build the feed for a logged in user and one to build the feed for a nonlogged in user and our functions are going to be a very simplified versions of What Reddit probably does to build up the user's feed they probably have very very Advanced backend functions that use machine learning and everything to actually determine what to show to the user in our case we're going to be writing some simple functions so we're not going to get into any sort of machine learning or anything so our functions that build out our feed are going to be much simpler than what Reddit probably uses and our home page just like every other page we've seen follows the same exact layout pattern with the left hand side or right hand side so we can again use our page content layout component and then just drop the components in there and it'll style it all very nicely just like the other Pages all right so let's actually go to our app and go to our own home page here which should be just completely blank because we have not written really anything inside of here and the file we're going to be working in here is this going to be our index page so if we go into Pages it's the root of the entire app this is where all of the initial next.js page stuff went we have not touched this file since way back in part one when we sort of just deleted everything inside of it so now we're going to actually fill this thing up and put some meaningful content in here all right so I'm going to close my directory here and let's start with the actual HTML layout on this component so as I just mentioned we are again going to be able to use our page content layout component that we have created and we can just create the two empty fragments in here all right so in the first fragment we are going to have our actual Post Feed and then in this lefthand type container we are going to have our our recommendations and those other two very simple components um in the right hand side here all right so that's sort of the skeleton for our HTML let's work on the skeleton of the functional part of this component so the first function we're going to have is going to be called build user home feed and this is going to be responsible for building out the feed for an authenticated user that is logged in second function we're going to have is going to be called build no user home feed and pretty selfexplanatory this is going to be for users who are not logged in and our third function is going to be called get user post votes and this is only going to be called four authenticated users and if you remember the way we got our votes when we were inside of a community was that we got all the votes for posts within that Community but since on the home page we are not in a community we're going to get the votes that may possibly exist for the posts that do end up showing up in our feed depending on what this ability user home feed function ends up putting into our post date and this function is a very minor detail on the home page because if you think about the home page of really any application like Reddit or Twitter or Facebook when you refresh your homepage you're typically seeing content you haven't seen before it's new so you probably would not have voted on it but there is a chance especially in our demo we don't have a ton of user generated data like on Facebook and Twitter so it just makes sense to have this function here to sort of just cover the basis to make it actually make sense in case a post is in the feed that we have previously voted on so that is sort of how this is going to work but we'll cover a lot more on that when we get to it so don't worry about this for now and beneath these functions there's going to be a few use effects that we're going to have to to actually sort of manage the logic and the data flow and govern how these functions are actually called depending on if there's a user logged in and depending on other state in our application so the most important thing on our home page is whether or not we actually have a user logged in that really drives how our feed is built and what functions we need to call here so the first thing I'm going to bring in is going to be our user object from our use off State function I'm going to pass this our auth instance from Client app and we're also going to bring in the loading parameter returned from our use off State hook which we're going to call loading user and this is going to help us in our use effect logic to know which one of these functions to call and this will become more clear let me actually start writing them out all right so now that we actually have our user object let's write out our use effects and see how they are going to interact with the user object and the loading user parameter to actually determine what functions we're going to call so our first use effect is going to have the dependencies of user as well as loading user all right so inside of this user fact we basically want to know if the user is logged in or not and if the auth service has attempted to try to get the authenticated user because there is a delay there as soon as we boot up our application there might be an authenticated user that was logged in previously from like a previous session or the user might be logging back in or sign up but the auth service has to go and actually get that from the Firebase servers and while it is attempting to fetch the authenticated user the user is null and that is the purpose of this loading user state it starts off as true and then it goes in attempts to fetch a user and then when it comes back either with or without a user it's going to set loading user to be false it's like oh okay I tried to go get it and there either is one or there isn't one um and if there is one this will be a truthy value and if there is not one this will be a falsy value so if we just wrote an if statement like this like saying if there's no user then build the no user home feed that actually would not work because like I said before when the application is initialized and the person actually navigates to our website this is always going to be undefined or null or some policy value at first while they use off State hook attempts to fetch that user from our auth service so at first we're always not going to have a user but that doesn't mean there isn't going to be one that is returned from the use off State hook and so that's why this wouldn't work because we can't just assume that no user initially means that we should build the no user home feed we need to know that the service actually attempted to fetch the user and then if it did attempt to fetch one and there still isn't one then we want to build the no user home feed so I hope that makes sense so what we can do to actually implement this is to say if there is no user and we are no longer attempting to fetch the user then build a no user home feed that means that the auth service tried to get the authenticated user and there was not one and we should build our feed for a nonauthenticated user so there is another use effect that we are going to write in a bit that is going to tell us if we need to call the ability to Homeview function as well as the get user post votes function but we are going to work on the no user home feed first and then we will Circle back to the actual user home feed alright so let's start writing out the logic for our no user home feed so what I'm going to do is at the very top here just below our user here I'm going to create some loading state so that we can actually use our post loader again very similar to how we use it inside of the Community page and once you set it equal to false to start off and inside of our build no use your home feed function I'm going to create a try catch block and the very first thing we're going to do at the top is set loading to be true and then at the end we can set loading to be false just like this and we can log our error build no user home feed error so our very simple no user home feed algorithm is just going to be simply grabbing the 10 most popular posts in our database and a really good feature to add in your app would be pagination so that you could you know load 10 initially and then if the user keeps scrolling it would load another 10 so that it keeps your front end nice and light so you'll notice fetch all of the potion database you can start off with 10. pagination is really good for frontend optimization and it just ensures you're not fetching too much data in our case we're just going to create a simple query that grabs the 10 most popular posts in our database and the way we can do that is by querying our post collection and ordering them by the vote status so to do this we can create our post query object which is going to be created using the query function from firestore the first argument this requires is a collection reference to the collection we are querying so import collection from firestore pass it our firestore instance from Client app the collection we are querying is posts so after our collection reference we can pass in some query specifications to tell firestore what exactly we want from this collection reference so we want to grab documents from our post collection but we want to order them by the vote status so we can bring in our order by function from firestore and the key that we're ordering by is vote status that's the name of the field on our posts and we can pass in a second argument of descending because we want the highest rated at the top okay and as a third argument we can pass in another query specification and in our case we're going to pass in a limit so you can bring in the limit function for firestore and you can pass it 10 just like this so This query is going to get 10 posts from the post collection that are ordered by vote status in descending order so that the highest rated is at the top so now we can actually get these documents from firestore by passing our post query to our get docs function so we can say post docs is equal to a weight get Docs and in order to use the await keyword we do need to make this function asynchronous so let's do that and then we pass in our post query to this function here and as usual we can create another array called posts and extract all of the data from each of the post documents inside of post docs so you can say postdocs dot Docs .map take each one and turn it into an object with an ID of dot ID dot ID and spread all of the data inside of the document to extract it all out now in order to put these posts into our post State we are going to need to grab our set Post State function from recoil so we can grab that value from our use post custom hook because we're going to grab a bunch of other stuff from this hook as well so we might as well grab the state from here too so for now we can grab our set Post State value function returned by our hook come down here and take the post array that we just created and call set post date value and we want to update this to contain those posts and we can tell typescript that this is going to be an array of posts we can say posts is going to be equal to posts as an array of posts so make sure the post type imports from post atom that is a lot of same posts kind of a tongue twister after a while so now we have successfully retrieved posts from the database and put them into our post State now all we need to do is actually show them here in our feed so we're going to do something extremely similar to what we did in our posts component if we go back to this component here all we did was take our post date and map through them and for each one create a post item and we're going to do the exact same thing here it's actually going to look exactly the same as this even with the post loader so let's go back to our index page and we can remove this comment and inside of our left fragment here we can put the same ternary operator that we had in that post component so we can say are we loading the post right now so if loading is true we want to show our post loader which we can import and if it is false and we are not loading we want to map through all of those posts inside of post date and return a post item for each one okay so we're actually going to need our post State value from our hook as well so let's come back up here and just grab that Post State value and we can come down here and we actually are going to wrap all of our posts in a stack to space them out nicely so import stack from Chakra and inside of our stack we are going to say postatevalue dot post dot map take each post and for each one we want to create a post item component just like this and actually if you remember from our last part we also want our create post link on the home page as well which is what triggers the opening of our directory so let's put this at the top of our fragment here above our stack so you can say create post link and if we save this we should see the create post link unless we get an error we're not seeing post because post item thing is broken and we're not even calling that function yet but we can see the create post link which is perfect so our post item component if you remember requires all those functions like on vote and on delete and on select so let's go back up to our use post hook and grab all of those so we're going to grab on select post on delete post and on vote okay so let's come back to our post item and pass all these in as props so our first prop can be a key which is going to be our post dot ID second one can be the post itself post is equal to post third one can be our on select course function on select post is equal to on select post that's on delete post we can pass on vote on vote we can pass in our user vote value and if you remember this is where we're going to check if a vote for this particular post exists in the user post post state so you can say Post State value dot posts of votes dot find and we want to iterate through all of these votes and see if one has a post ID that is equal to this current post or iterating theories ID just like this okay let's scroll down here and if we can find a vote then we just want to grab the vote value from that vote okay we're going to pass another prop called the user is Creator to know if we are the author of this post so we can say does the user ID equal to this post Creator ID and the last prop we are going to add is going to be a Boolean called home page to tell this component whether or not we are currently on the home page and this is from a while ago but let's go back to our post item and if you remember I briefly touched on that here I had this comment saying home page check and that is so that we can display the community name and the image URL here if we're on the home page because if we're inside of the community we do not show that because we don't really need to because we're inside that community so we don't need to display what community it is but on the home page we do want to show that so that the user can actually click on it and see what community it's in so inside of our post item here we can come to the top and on our post item props type we can add an optional Boolean prop here that is going to be passed if we are indeed on the home page so then we come down to our component here and grab that from the props from the structuring then on our index page we should now actually be able to pass this in just like this and just by simply passing it in it is going to be true perfect and this is actually it for our entire left hand side fragment so I can save this and all I need to do now let's go back to our app here is just have it actually call this function so if I log out let's see what happens it actually called the function and it went and got those 10 posts from the database now our database only has one post um so it's going to get up to 10. yeah there's only one post but it would get 10 if there were 10. and like I said before after we finished the no user case we're going to write out the logic to actually build the feed for what happens when I log in and there actually is a user but now this is pretty cool because you can actually see some posts on our feed and they appear exactly the same as they do in a community it's just a more generic feed so now let's go into our post item component and quickly write out that new Logic for checking if we are on the home page and display the community image URL and the link to that Community if we are indeed on the home page so just underneath this comment here we can add some logic to check if we are on the home page so we can say home page and then write the double Ampersand sign to say if we are on the home page we want you to display this additional information that we're going to right here so I'm going to create a fragment inside of here so now if I just put a given here that says home page just to test this out if I save this we should see that here so let's get rid of this div and inside of here we're going to add a ternary operator to check for the existence of the community image URL and if it exists we're going to display it and if it does not we're going to show our generic Reddit icon this is our classic image icon turnaround operator so you can say does the Post contain an image URL if it does let's show that image so we can use our image component from Chakra and if we do not have an image let's show our classic Reddit icon simple icon and then we can say as fa Reddit icon so this icon we're going to give a font size of a 18 point and a margin right of one as well as a color of blue 500. okay so on our image component we want to make the source equal to that post dot Community image URL and we actually have not added this parameter to our post yet in our new post form but we're going to go do that in just a second it's a single line addition we want to make the Border radius of this equal to full to make it round and we want the box size to be equal to 18 pixels and we're going to give this a margin write of two just like this so underneath this ternary operator here now we're going to actually add the link to that community so you can bring in our link component from next link and we want to give this an href value of the page that we want to go to when we click on this thing and that is going to be our forward slash then we want to pass the post dot Community ID okay inside of our link we're going to have some text we can add some curly brackets because the text you want to display inside of here is going to be R forward slash then the postdoc Community ID okay so if I save this now we can actually see that link in there let's add some styling here so we're going to make the font weight of this text heavier so we're going to make it 7 and we're also going to give it some hover styling to make it appear as if it's a link because it is and links usually have a underline text decoration so you can say text decoration and we can give this an underline value here just like that and to create some space between this link as well as the posted by username text rather than just adding some margin we're going to add this little dot icon here because that's how Reddit has it and it looks really nice okay so just underneath this link here we can create another icon but this icon is going to be the value BS dot so make sure that Imports and we're going to give this a color of gray 500 and a font size of eight so it's very small and very subtle but it does get some spacing there and I think it looks really good so now I can actually click on this link and it'll take us to this community so let's watch so it took us to the community but just for a second there it actually took us to the single post page view so if I go back the first route that it went to was the single post page view and then it went to the Community page and this again has to do with event propagation because we haven't on click on the post item here that takes us to the single post page we do need to do some event propagation to prevent us from triggering that when we click on the link inside of the post item so what we can do is just add a simple on click to our text here and we can just simply take the click event that is generated and call the events.stop propagation function on it and so now if I were to save that if I click on this link now it will take us directly to the Community page it is not going to first go to the single post page view and then the Community page so now if I go back the previous route is the home page not the single post page and now we just need to go back and quickly add the community image URL to our new post documents if it exists because chatty's group if I go into here does have a custom Community image and we need that to be inserted onto the post as well and we are currently not doing that very simple to fix we can just go to our new post form file so in order to insert this on this new post object we do need access to that value so what we're going to do is add the community image URL as a prop to our new post form so if we go back to where this new post form is actually rendered it is on the submit page we can see that the new post form is here and we have the Community State value inside of this file so what we're going to do is pass this as a prop to our new post form so you can say community image URL and this is going to be equal to Community State value dot current Community dot image if URL just like that then inside of our new post form we have to actually add that to our prop type here okay so underneath our user we can add Community image URL and we're going to make this optional because if it does not exist on the current Community the value of it is going to be undefined so we need to tell typescript that it's going to be either undefined or a string okay so now we can grab that from our restructured props here Community image URL and on our new post object underneath the community ID we can add Community image URL and we want to make it the value of community image URL or if it does not exist and it is undefined we're going to pass an empty string and the reason we're doing that is because Firebase will not like it if we pass a value of undefined here we need to pass in a empty string instead they're both policy values but Firebase just wouldn't like the value of undefined it is happy though with an empty string so the value of community image URL is going to be this variable if it exists and if it is not we're passing an empty string so now if I were to save this and inside of Chinese group create a new post oh I have to log in let's log back in as Shah merhi oh forget my password okay so if I go to create post and I call it uh Community image feature and I can say newest feature okay and if I post this and go back to the home page we should see the community image URL in this post because it was inserted this post however does not contain it because this feature we did not have when we created this post and actually if I go into Shady's group and I change the image to something else like the Google logo here and I save that if I went back to the home page and were to refresh the posts should have the latest Community image that would have to log out to see that because our feed is only Built for logged out users and you can see that the Google image is indeed there so you can close this new post form we can close the submit page and we can come back to our index page here now let's start working on the actual Logic for building out the user feed for our authenticated users okay so for users that are logged in we are going to show them posts from the communities that they have actually joined and we know all of the users communities thanks to our community snippet State inside of Community State value so what we can do is build some sort of query that is going to grab a set of posts from the various communities that the user is in so the main thing that this function needs to accomplish is to get posts from the users communities okay so let's create a try catch block and log the error if it occurs build user home feed error okay then at the very top here we're going to set our loading state to be true and at the very bottom set loading state to be false okay so the way we can write our query such that it fetches posts from multiple communities rather than just one is we can create an array of the users Community IDs using the community Snippets and we can write a where clause in our query to find post documents with the community ID that is inside of that array so since we are going to be fetching posts from specific communities we do want to make sure that the user has indeed joined some communities so we can write an if statement to check for the length of the community Snippets array so we can say if Community State value dot my Snippets dot length meaning that there are indeed communities that this user has joined then we are going to get posts from the user's communities and if the user has not joined any communities meaning that they're like a new user or they just haven't joined anything yet we're just going to call our build no user home feed function because that's going to build them a nice generic feed so we're going to need to create an array of the user Community IDs because it's going to be required by the query we're going to write and we can do that using their Community Snippets so we can create this array and we can call it my community IDs and what we want to do is basically extract the ID from all of the users Snippets so we can take the Community State value dot my Snippets and map through them and for each snippet we want to sort of convert it into just the community ID so we're basically just converting the full snippet object to just a single string that is the snippet dot Community ID so my community IDs is just going to be an array of all of the extracted Community IDs from all of the Snippets and we're going to use this in our post query which we can create right now so we're going to say cons post query and we can use our query function again first argument is going to be our collection which is going to take our firestore instance collection name is post so the second argument to our query function is going to be our where clause and this is where we're going to actually use that Community ID array so we want to get posts where the community ID of the post is in the my community IDs array and this is how we can write that using this where function repair server so this is going to find all of the posts where the post Community ID is inside of the my community's ID array that we just created and we're also going to set a limit on this so that we don't fetchulate hundreds of posts if they exist so we're going to set a limit of 10. and again this is a very simple query to build out the user home feed a really good thing you could build on top of this app would be to make the actual feed functions a lot more sophisticated this works though for the purpose of this demo then we can actually fetch these documents from firestore so we can say cons post docs is equal to a weight get docs and pass it our post query then we can create our post array and map through all of the postdocs dot Docs take each document and convert it into an object with the ID of doc.id and with the data inside of the document okay then we can just call our set post date value function and actually put these posts inside of our post state so we want to update posts to be posts as an array of posts very similar to what we did in the no user home feed function okay so just to reiterate we are checking if the user is inside of any communities if they are we're going to go get some posts that are inside of those communities and if they are not in any communities we're just going to call the no use at home feed function that's going to build them the generic feed that is not specific to any Community okay so now that this function has been written we do need a way to call it and the way we're going to do that is going to be with another use effect that is going to run some logic and check if it is appropriate to call that function very similar to what we did with our build in the user home feed function down here so we can create another use effect here okay so just like this use effect down here that is listening to some application State and then waiting to read those values to see if they match some condition that it makes it appropriate to call they build no user home feed function we're going to do something extremely similar inside of here as well we want to basically know when we should call our build user home feed function now if we look at this function we can see that it is fetching data based on the values inside of Community State value dot my Snippets meaning that this function and the posts that we want to retrieve in this function depend on this state here Community State value dot my snippet so we don't really want to call this function until we have fetch those Snippets from the database so that is what we're going to do down here in this use effect we're going to check and see has our application attempted to fetch the user Snippets from the database if it has then let's go call that function so as a result this use effect is going to have a dependency of Community State value dot my Snippets because we want to listen for changes in this value here because it's initialized as an empty array and then our app goes and gets them from the database and then it puts that data inside of the states we want to know when these updates occur but there's a slight problem here we saw that in our function build use your home feed that we check for a length of the array and if there is a length meaning that the user is inside of communities we go and get posts for those communities and if they are not in any communities meaning that that array is empty we just build them the generic feed but we need a way to know that our app has attempted to try and fetch the Snippets because it's just simply checking for the length of the snippet so if you were to say something like if Community State value dot my Snippets dot length and then in this case we would call build user home feed this doesn't actually work because what if the user has not joined any communities like the database could attempt to go get those Community Snippets but there could be none because it's like a new user or they just haven't joined anything yet meaning that this would be false meaning that this would not get called so simply just checking the length of the community Snippets is not enough information to know whether or not we should call this function we need some other piece of State similar to how down here just checking the truthiness of the user was not enough we needed to look at this loading state to see has our use offstate hook attempted to fetch the user and the solution to this is basically creating something similar to this loading user State on our community State value so all we need to do is add some sort of parameter to our community State value that is going to change once our application has indeed tried to fetch the sentence from the database only after it has tried to fetch these from database and put them into 8 we will call this build user home feed function and in this use effect here we actually do not need to worry about checking for the existence of a user and the reason is because if you go to our use Community data hook the use effect that's responsible for fetching the Snippets in the first place already depends on the user and it's only going to go and get the Snippets for that user if the user exists meaning that this use effect over here inside of our index page implicitly depends on the user so we don't have to explicitly Define it here because the way we're going to write this use effect is going to make it impossible for it to even trigger before this one has actually finished so all we need to do is go into our communities atom here and add some piece of state that's going to tell us if we have attempted to fetch the community Snippets in the first place so all we need to do is on our community State interface here we can add a parameter called Snippets fetched which is going to be a Boolean that is going to be initialized as false because as soon as the application loads we have not fetch the Snippets and once the Snippets have been fetched for the first time this is going to be set equal to true and then that is the variable we can listen to inside of our index Patron have the Snippets be fetched oh okay they have let's go build up the user home feedback let's go back to our communities Adam and inside of our default Community State if you're going to initialize this value to be false now back in our index page over here we are going to change this dependency from my Snippets to be that Snippets fetched Boolean parameter and then in this user effect we're going to say if my community State DOT Snippets fetched is true then go build out the user home feed because then it is appropriate to do that and then inside of our abilities your home feed function it would make sense to check for the length of that array to see if the user has joined any communities or not so the only thing missing now is to actually set this thing equal to True inside of our fetch Civic function so inside of use Community data inside of the getmycipits function right up here as soon as we fetch these Snippets from the database for the first time we can just update the value of Snippets fetched to be true okay so the data flow is like this the user is going to log in which is going to trigger the get my Snippets function to happen to get my Snippets function is going to fetch the Snippets from the database and it is going to put them in state and it's going to set the Snippets fetch parameter to be true them inside of our news effect over here on our index page this use effect is listening to changes on that Snippets fetch thing when this is changed to true this user's effect is going to trigger this if statement is going to be triggered because it is true and then as you're going to call the build user home feed function and build out the appropriate user home feed okay so I hope that makes sense and this is a very common thing in react to have your user effects so listen to certain pieces of state and wait for that data to come in before triggering other things and it's sort of this nice data flow logic and I just make sure all of the data that your functions depend on actually exists or at least has been attempted to have been fetched so now when I actually log in it should go and fetch the Snippets for shadmarehand email.com which should trigger this build user home feed function and a new feed should be built so let's test it out so sign in okay nothing happened okay my Snippets are not even being fetched okay so there's definitely a user because I'm logged in oh okay you think that okay so I think what's happening currently is that if you go to a used Community data hook this use effect that is um down here that is supposed to call get my Snippets which is listening to the user object is actually not even happening because we're currently not calling this Hook from our index page we need to call this hook in order to trigger these use effects here uh so the way we can do that is instead of pulling in Community State value using the use recoil value hook we can actually grab it from our use Community data hook so we use Community data import that and we can grab Community State value and it's going to return the exact same value that recoil did because this Hook is after all just grabbing from recoil but we are now going to actually trigger the hook to call those use effects that we needed to so now if I save this okay so it did rebuild the feed there's only two posts in our entire database and there's only one Community I'm going to need to create some more posts in different communities that I'm not in to test this out but if I log out it should yeah it rebuilds the feed for a nonauthenticated user and also when the user logs out and there is no user anymore we want to actually reset the value of that Snippets fashion Boolean and we can do that inside of this use effect here as well because we're already kind of doing that when there is no user we clear the my snippet State because it is specific to a particular user so if the user logs out we just MP that array we can do the same thing with these Snippets fetch thing here and this ensures that if a user does happen to log out and the feed is rebuilt for a nonauthenticated user and then they do decide to log back in it will trigger another update to rebuild the feed for that user again so if I save this if I log out it rebuilds the nonuser feed and if I log back in as chatty it builds a feed for shady okay and both of the user and nonuser feeds look exactly the same right now because our database only has two posts in them and so to actually differentiate the two feeds here let's go back into that uh new new new community or go into some other community that you have created and I want to create a post in here uh new new blah blah blah blah blah blah I'm going to post this inside of here okay then what I'm going to do is come to my home page so okay we can see that this is in my home feed because I I am in new new so let's log out so I see the same feed right let's log back in and I should see the same feed just in a different order shot man cool okay but now what I'm going to do is go into new new and leave this community and after I go back home I can see that the post is no longer in my feed because I am no longer in new new if I log out though it rebuilds the feed and that post is in my feed so now we can actually see a difference between a user and a nonuser feed if I log back in foreign with only posts from the communities that I am in and I actually realize there is some missing logic inside of our create Community model that I forgot to add after we actually created the Community page because we want to actually create the community and then be rerouted to that Community page and currently it's not doing that it's just creating the community and it just stays with the model open and so to fix that all we have to do is go back to our create Community model which we haven't seen in a long time so inside of our handle create Community function and so after our transaction runs and our community is successfully created we want to Route the user to that page and we can do that using our router from xjs so let's come up to the top here and just unloading seed here let's bring that in the cons to router is equal to use router okay than underneath our transactions inside of our try block we can call router dot push and we want to push this user to the route of our forward slash and then Community name and that is the name that they entered inside of the input in the modal and we actually want to close the community modal and we can do that with our already existing handle close function okay and one more simple thing we can do is just close our community directory here and we can do that with our already existing toggle menu open function from our use directory hook so just underneath our router we can call that hook use directory and we want to bring in the toggle menu open function then just after the handle close function we can call toggle menu open okay so now if I create a community and it is successfully created it should close the modal it should close the directory and it should route me to that new Community page so let's give this go let's do create community and let's call this Tesla Motors create community perfect okay so Tesla Motors was created it brought me to the Tesla Motors page and the directory closed and now I can see Tesco Motors inside of my community Snippets and that is exactly what we wanted to do okay so let's go back to our home page and we can close our create Community model okay so let's go back to our index page here and we are now done with the build no user home feed function as well as the build the user home feed function and the last thing we need to do is just write this simple function to get the post votes for the posts that end up appearing in our feed and because post votes depend on a user being logged in this is only going to run if the user is indeed logged in so we're going to create a third user fact that's going to run some logic to check whether or not we should run our get user post Source function okay so there are two important pieces of state that we need to listen to before we know if we should run our get user postcodes function and the first one is going to be our user and our second one is going to be our post datevalue dot posts because we want to wait until there are actually posts in that array before we go and try to get votes for posts so we need both the user as well as actual posts in the feed to exist before it actually makes sense to even call to get user post function okay so then inside of here we can just write a single if statement to say if user and postdatevalue Dot posts dot length then call the get user post votes function because we have both of the things required by that function hit then for this function here we need to make this asynchronous because it's going to be fetch any data from the database and we can create a try catch block and log the error if it occurs get user post votes error and so what we want to do is query our users post votes sub collection and try to find the votes with a post ID that matches any of the possible posts inside of post date value and so to do this we can write a similar query like we wrote up here in our post query in this one we are finding all of the posts with a community ID that is inside of this my community IDs array down here we're going to be finding all of the votes with a post ID that is inside of a post ID array that we're going to create so let's create that array and we'll call it post IDs and this is going to be equal to postatevalue dot posts and we're going to map each of these posts into just a post ID string so now post IDs is just going to be an array of string IDs then we can build out our post votes query we can say post about query and it's going to be equal to query the collection we want to query passes our firestore instance and the path to the collection that we're querying is going to be users slash user.uid slash postcodes you can save this so it formats then as the second argument to the query function we can pass in that where function and in this case we want to say where the votes post ID is in the post IDs array that we just created then we can actually fetch these documents from the database so we can say post about docs is equal to a weight get docs and pass in our post votes query then we can create our post votes array and extract all of the data out of all of these docs so you can say postmodocs.docs.map and map each document into a object with the ID of that ID as well as all of the data inside of Doc dot data and now we just need to put these votes inside of our post votes state so we can say set Post State value and update our post votes to be post votes and we can tell typescript this is going to be an array of post votes so import that type from your post atom file and indicate that it's an array of postcodes so let's come back to our app here so now we can see that the votes for these potential posts in the fee here are actually being fetched because it's indicating that I have voted on this post without calling this function uh so if I comment this out here in our use effect and we don't call it you can see that the votes are not being fetched uh if I call it back in they are and kind of like what we were talking about before with building up the feed if there was enough data being generated by the users most of the time the content you're seeing in your feed is brand new and you have never seen it before and you have likely not voted on it and in our case since we just don't have a lot of data in our demo here we just have to build this to make it make sense because uh naturally due to the lack of data some of the posts that are showing up in our feed here are posts that we have seen and have voted on but just because there is not enough data and to prevent duplicate post votes from showing up in our postal state to say on the home page we don't fetch a bunch of votes for the posts and then if we go into a community it's going to fetch the post votes for that community there could be some overlap there and to prevent that we can inside of this third use effect here that's calling our get user post votes we can create what is called a cleanup function so in react when you return a callback function inside of a use effect this function runs when this particular component Dismounts so in this case our component is our index page so inside of this use effect here we can return a callback function which will be triggered when we navigate away from the index page hit end in react this is what is known as a cleanup function because we typically use them to clean up our data and remove any sort of like stale data from our state so inside of here all we want to do is just clear our post mode so if the user navigates to a community page the post votes are sort of started off on a new Clean Slate so you can say set post date value and simply just set our post votes to be an empty array just like that and this is typically what cleanup functions look like so that is it for the entire functional part of this component we have written out all of the required functions all we need to do now is just create those right hand side components alright guys we are now going to start working on the top communities component here on the right hand side of our home page and it's relatively straightforward component all we are going to do is fetch the top five communities rated by number of members and then we will display them to the user here and give them the functionality to join and leave these communities from right within here now on reddit.com every time you visit the website you see a different list of five communities here sometimes it's like top sports communities sometimes it's top pet communities or something it's always changing and they have again Advanced algorithms that are recommending you certain communities based on your interests and your user actions our simplified version of that is to always display the top communities and grab the top five communities rated by the number of members parameters stored on the community document so let's go back to our app and create this okay so let's go into our files here and inside of our community folder which is up here I'm going to create a new file called recommendations dot TSX okay I'm going to close my directory so we have some more room and I'm going to use the snippet and we are not going to take in any props to this component so we can remove that so it's a pretty simple component all we're going to have is a single function that is going to be responsible for fetching those top five communities so we're going to call this get community recommendations and it is going to be an asynchronous function and we can create a try catch block inside of here as usual and log the error if it exists I'm going to paste the function name in here because it is difficult for me to type also inside of this component we are going to add a single use effect that we are going to give an empty dependency array so that it only runs a single time after the component mounts to the Dom and when the component maps to the Dom we want to just call that get community recommendations function okay and at the top of this component here I'm going to create two pieces of state and the first one is going to be the actual communities array where we are going to store the top Community documents from the database so we can say communities and set communities is equal to eu's State and we can initialize this as an empty array and we can indicate the type of items inside of this array by importing our communities type from our community atom file and indicate that it is an array of community items and I'm also going to create some loading State inside of here so we can display a nice skeleton loader to the user which is going to be a simple skeleton and we're going to initialize loading as false and also inside of this component we are going to need our use Community data hook so we can call that in here and what we're going to need is the Community State value as well as the on join or leave Community function because we are allowing the user to join or leave communities from right within its component so we need that function in here all right so let's build out this function so at the top here I'm going to set loading state to be true and at the very bottom we can set loading to be false okay then inside of our try block we can just build a simple query that is going to grab the top five communities ordered by the number of members parameter so we can say cons Community query is equal to query import the queries function from firestore create a collection reference to the collection we want to query past collection our firestore instance and the name of the collection is going to be communities and as a second argument we can pass in our order by function and we want to indicate that we want to order by the number of members key and we want them in descending order so that the most popular is at the top and then we can also just pass in a limit of 5 because we are only displaying the top five okay so let's actually grab these documents from the database so we can say cons Community docs is equal to a weight get docs as in our communities query and then extract all of the data from each of these documents you can create their communities array and say community docs dot Docs dot math and map each document into a JavaScript object with the ID of a DOT ID I thought this so many times to be done this 100 times doc.id and the data from inside of the document so spread.data just like this okay and then what we can do is just set our communities array state to be the value of this community's array that we just created here so we can say set communities to be communities and we can indicate to typescript that this is going to be indeed an array of community just like this and this community state in this component is local here because we don't really need it at a global level so it makes sense to just have it local to the component because that's really all where we need it awesome and that is it for this function and all that is left is to build out the actual HTML of this component here okay and if we look at our demo here there is an image at the top of this component here and this is an external image that we are getting from this images folder inside of our public folder here and I think very back in the early stages of this project I had or I recommended you guys to grab all of these images off of my GitHub and put them in here but if you did not grab all of them uh the one we're going to be needing here is reccoms Art and we're also going to be needing this one down here this kind of like spaceship one and I think that is um Reddit personal home so these are the two we are going to need retcoms art and write a personal home so please ensure that you grab those off my GitHub and put them inside of your images folder in your public folder okay so I'm going to close this close the directory let's go back to our app here and let's get rid of this div and the overall container is going to be a flex container and inside of this Flex container we're going to have two more children Flex containers one for the sort of header part which is that top communities image thing I was just talking about and then the other Flex is going to be the container of all of the communities here okay so let's go back here and let's add the styles for the outermost Flex container okay so this is going to have a direction of column we're going to give it a background of white a border radius of four we're going to add a border on Pixel solid and the Border color of gray 300. now let's work on this header component here this first flex child okay so the header component is going to have an align value of flex end because we want the text to appear at the bottom of the um of the container okay we're going to make the text color white we're going to give this padding of six pixels top bottom 10 pixels left and right we're going to make the height 70 pixels the Border radius is going to take four inputs and it's going to be 4 pixels 4 pixels 0 pixels zero pixels save this so it formats a little bit nicer I'm going to give this a font weight of 700 okay and this is where we're going to place our image in here so we're going to say the background image and we are going to use that image I was just talking about in the images folder and we can access it via the URL function through CSS and inside of here we can pass in the path to that image so it's slash Images slash Rec comms art dot PNG just like this okay and then we're going to add a background size that is going to be equal to cover so that the image fits the entire container and then all that's going to be inside of our header here is going to be the text top communities just like this okay now let's go back to our index page and actually bring this in so we can see what we're doing so where this comment is in our right hand side fragment let's bring that in so we can say recommendations perfect and I think you just have to refresh because my hot reload thing is uh kind of frozen or something okay so we're not seeing that image for some reason oh I'm missing images here this is images there we go and to make it so that we can actually see that top communities text a little bit better um I'm going to place the the sort of like black overlay filtery blurry type thing over the image just so it makes that white text Pop a little bit more okay so what we're going to do is add a background gradient here um and this is kind of a long string here so I'm just going to paste this in from my demo and it's basically just a linear gradient basically just that sort of black overlay uh with some like light opacity so that it's sort of seethrough and it just sort of makes the white text Pop a little bit more okay and that is it for this top communities header component here okay so let's move on to the actual communities list part of this component here so we're going to give this a direction of column as well column and inside of here we are going to also add a skeleton loader so I'm going to add the turnaround operator loading if we are loading we are going to display a skeleton component that I'm going to paste in from my project here it's about 15 lines or something it's just like a stack just like this and I'm going to add all of these missing Imports okay and if we are not loading we actually want to display those top communities okay so inside of here I'm going to create a react fragment so that we can add some JavaScript we want to iterate through all of the communities so we can say communities.map and for each one we're going to return one of those list items and in each of these list items we need to know if this user has joined this community or not because we need to toggle the display of this button to make it say joined or join and to make it blue or white and so to do that for each one on each map iteration inside of communities.map we can create an is join variable and do the exact same thing we did in our community header to determine if the user is in this community so we can just say Community State value dot my Snippets and try to find a snippet in here with the community ID that matches this particular item's ID okay so we can take each snippet and check if it's Community ID is equal to the item dot ID an item is the current community that we are iterating through here okay and then I'm just going to booleanize this and add the double bang operator here and then underneath here is where we can actually return the HTML for the community item list component here okay so let's go back to our app here all right so the outermost container of this component here is going to be a next link because you're going to make these clickable and direct the user to that Community if the user does click on it okay so we can bring in our link component from next link and to satisfy reacts requirements when I'm mapping through a list of items we need to pass this a key so we can give this a key of item dot ID and the href prop of our link is going to be the string that is forward slash R forward slash then item dot ID so that's like the community ID and inside of the link we're going to have a flex container here in this container is going to have an align of Center so everything is vertically centered we're going to give this a font size of 10.8 order bottom property of one pixel solid and a border of color of gray 200 and we want to give this padding of 10 pixels top bottom 12 pixels right left okay so we can save this okay then inside of here we're going to have another Flex container and we're going to give this one a width of 80 percent and also an align of Center inside of here we're going to have another Flex container that is going to contain the actual uh number here with the one two three four five okay and where we can get that number from is by in the map function we can take advantage of the fact that JavaScript also gives us access to the index of the current item we are iterating through and so down here inside of this Flex container we can add some text and that text is going to be the index plus one because we did not multiplicate 0 1 2 3 4 we participate one two three four five and we need two important text from Chakra which it does not Auto Import good old text okay so if I save this okay let's go back to our app here uh we can see the one two three four five thing there and the flex container of this text you're going to give a width of 15 here now as a sibling to this Flex container with a width of 15 we're going to create another Flex container and this is going to be the parent of the community name as well as the image or the icon if there is no image okay so we're going to give this an align of Center as well as a width of 80 percent then inside of here we can add our famous image URL ternary operator we want to check if the item has an image URL and if it does we want to display that image and if it does not we're going to display our famous Reddit icon so let's do the image here so let's bring an image from Chakra and we want to pass a source value that is going to be equal to item dot image URL you want to make the Border radius equal to full to make it round as well as a box size of 28 pixels and we can give this some margin right of two to add some space between the image and the community name okay and if there is no image URL we want to display an icon and that icon is going to be our fa Reddit icon to make sure that imports from react icon F A if you want to make this a bit bigger so we can give it a font size of 30 and a color of brand 100 our good old Reddit Orange brand 100 and a margin right of two perfect okay so we can see those showing up over there now underneath this turnery operator here I'm going to create a span element where we're going to display the actual Community ID okay and the reason I'm creating a span is because we need to apply some CSS to the text name so that if it's super long it has like the triple ellipses like the dot dot dot and so the text doesn't overflow because that's how they do it on Reddit and that styling wasn't working on like the flex container component from Chakra so I'm just using a span and it seemed to work on there so for this we just need to add some inline styling and The Styling is going to be white space which is going to be no wrap and we're going to add overflow which is going to be hidden and you're going to give text overflow to the ellipses just like this so if the community name is super long it's just going to show the triple dots which looks pretty nice let's go back to our app here and inside of here all we need to do is display the text that is going to be R forward slash then item dot ID which is the community name so if I save this now we can see those names drop here so yeah you can see the triple ellipties here for this one with the longer name now all we are missing for each of these list items is just the button that the user can actually click to join or leave the community so two Flex containers down from the span component we just created I'm going to create a box which is going to wrap our button component and inside of here we're going to add our button can I scroll up a bit okay so we can give this button a height of 22 pixels a font size of eight point then we can add the variant property and we can make this Dynamic depending on if the user is or isn't joined in this community so we can use our is joined Boolean then we just create it up top and we can say if they are joined we want the variant to be outlined and if they are not we want it to be solid and whoops I did not mean to make this button selfclosing we do need a closing tag in here and the text we want to display inside of our button is also going to be dynamic depending on that is joined parameter so we can create another ternary operator if they are joined we want to display the text joined if they are not we want to display join awesome so we can see that showing up over here and then we just need to add the on click to this button to actually call our join or leave Community function and inside of here I'm going to take the click event that is generated and create a function that I'm going to call event.stoppropagation so that we do not trigger the next JS link when we try to click on this button okay then right after that we can call our on joinery community function and pass in our item because that is up type Community as well as the is joined Boolean parameter because that is what that function requires perfect so now this should be clickable and I should be able to leave and join these communities right from inside of this component so how cool is that okay so one very subtle thing you'll notice is that the logo and the text kind of move over very slightly depending on the size of this button because there's only so much room in this container and so when this button is a little bit larger the text and the logo move over and we don't want that to happen because it looks kind of weird and we want it to be in the exact same spot all the time so the way we can fix this is on our box component here we can add absolute positioning so we can say position is equal to Absolute and we can position these buttons to be 10 pixels from the right of the parent container so if I save this it's going to look kind of weird we just need to go up to this Flex container that is the first child of our next.js link and add a position of relative now that absolute position button knows it is positioned relative to its parent which is this Flex container here awesome so now when this button grows it's not going to change the position of that text because it's using absolute positioning it is no longer technically taking up any space in that container even though it appears that way and so the very last thing we need to add to our recommendations component is just the view all button at the very bottom there so let's quickly do that so below all of our list items here in the communities.map function uh just underneath there but inside of this fragment here we want to add a box component and this box is going to contain that button that says View so we save this then on this box we want to give it some padding and the padding is going to be 10 pixels top bottom 20 pixels left and right and then for our button here we're going to give this a height of 30 pixels and a width of 100 percent and this button isn't going to do anything it is for decoration only but this would be a cool feature for you to add to maybe take you to some Community recommendation or Community Discovery page where users could see a more extensive list of communities that they could potentially join awesome so we are now completely done our top communities component and we can just add in those other two decorative components on the right hand side here so let's go and do that okay and I'm just going to paste in the code for both of these components because they're very simple they're only about 20 lines each and they don't really have any functionality they're just for decoration only so inside of our community folder I'm going to create a another file called premium dot TSX and this is going to be this component here that is recommending you to try red premium okay and I'm just going to paste in the code for this component here it is here I will put the links to these components in the description so you do have immediate access and you just throw them into your project and then the other component I'm going to create is going to be called personal home.tsx and that is going to be this one here paste this one in it says slightly longer but nothing super crazy it's only 45 lines and again this uses that uh Reddit personal home image from the images folder so do make sure that you do have this to make sure it works on your end and that is it for these decorative components so we can close both of these and I can close my directory here and inside of our index page we can come back and bring both of those in so just underneath recommendations we can bring in our premium component and underneath that we can bring in the personal home component so if I see this and go back to the app so you can see these showing up here but they are not spaced out very good here so what I'm going to do is actually change the fragment to be a stack and then we can add in some spacing here and this spacing is going to be five awesome so they're spaced out much better now and this looks really really good and actually a really good exercise for you to do on this personal home component here would be to actually make those buttons do something functional for example the create post button you could trigger the opening of this directory up here maybe scroll the user to the top of the page and open that up and then for the create Community button you can open up the create Community model so I will leave that up to you if you decide to do that all right you guys it is now time for deployment we are now ready to actually get our application into production and I've decided that we're going to be using Purcell for our deployment for those of you that don't know versel is the company that created an xjs and they making deploying next apps extremely easy all you have to do is just with a click of a button we can connect the git repository that our project is hosted on to a Purcell project and every time we make changes to the master or main branch of the project it will automatically deploy those changes and we can track the build and everything on resell it's super easy and we're going to see that in just a few minutes all right so for deployment if you have not done so yet you are going to need to create a GitHub repository for your project here and put all of your code on GitHub because like I mentioned we are going to connect this repository to our newly created Versa project that we're going to create right now all right so before you move forward with versel make sure you do have a repository created on GitHub and all of your code is on there and they actually do have changes that I need to commit here um for our new index page that I need to push to my main branch before we do this as well okay so I'm just going to commit this and I'm going to say complete index page I will push this to GitHub perfect okay so now all of my latest code should be on GitHub uh yeah so I'm saying just right now it received that commit so we should be good to go with the deployment so this is what I'm going to do I'm going to go to versel.com okay and I already have some projects created here this is the this is the demo over here so what you're going to want to do is create an account if you do not have one and once you are logged in you'll see some like sort of dashboard where all of your projects are and there will be some sort of button where you can create a new project and this is where we're actually going to connect our repository with a single click of a button you can connect any one under GitHub repositories and get it ready for deployment so versal makes it extremely easy to deploy maxjs apps okay so this is the project here Reddit clone tutorial this was the repo we were just looking at and uh so I'm going to click on import and it's going to ask you for a project name I usually just leave it the same as the repo name and then the framework preset so we're using xjs and then I usually and then the root directory we can just leave as this index route here and then there's some things in here like the build and output settings we're not going to touch this and then there are environment variables which we are going to need to add because if you recall if you go to our DOT EnV local file we have all of these environment variables for our application to connect to our Firebase project so in order for our production application to connect to our Firebase project we are going to need to add all of these environment variables into our production environment and this is where we're going to do that and these can of course be modified and you can add more ones and remove ones and edit ones after you do deploy the project so don't worry if you forget some of them or some of them are wrong or anything you can always change this after your initial deployment and we may have to deploy it a few times because it might fail the first few times it usually happens the build will fail and it'll you have to go find something in your code refush to GitHub to trigger a new build and then usually after a few times work so we're going to walk through that process together okay so what we're going to do is add all of these environment variables to our next.js project so what we're going to do is copy all of these names here and place them inside of the name part of the environment variable and then place the value inside of the value so let's do the first one here so next public Firebase API key I'm going to paste this in here and as the value I'm going to grab the value paste it in and just click add perfect so once all six of these Firebase environment variables have been added go ahead and click on deploy and we can see what is going to happen so what's going to happen here is the deployment is going to be queued and it's going to start building the application to attempt to take all of your code packed it together into a production bundle and then deploy that production bundle and again as I mentioned this might fail the first few times due to some sort of you know any sort of typescript errors or compiler errors really anything can trigger a build error so we are going to see that and we'll walk through any debugging that might need to happen Okay so we can go back to our like home page here while it's building and we'll see our new project here and we can just go into this uh this is kind of the actual dashboard of this project and we can track everything there's there's we can see the build logs in case something does fail there's the deployments you have in here and so we can see there already was an error in the build so let's go take a look at that so we can go to view build logs so it says yeah build failed so now we can take a look at these logs here and see what errors it came across okay so cannot find module Firebase functions or corresponding type decorations okay and it tells you like what file this is in and everything so it makes it super convenient to debug so if we go to our functions file in here it's saying that it cannot find the module of Firebase functions or the corresponding type declarations okay if you don't think I've come across this one before when I deployed the initial project I don't think I came across this but let's see here Firebase functions okay so for some reason I do not have Firebase functions installed I thought it would have installed when I enabled Cloud functions but I'm not sure exactly what happened I don't remember having to manually install it in our demo but that's okay okay so I'm just going to Firebase functions maybe I did maybe I did have to manually install this okay so I'm just going to manually install this in our in our project here npmi Firebase functions foreign so having failed deployments is super common um and it happens a lot so don't be alarmed if your project fails to build it is very very common and oftentimes you have to try several times to get it to work there's always stuff you miss and things that just um make it fail unexpectedly okay so let's go back to versatile here and so that was the first error that it came across so basically how versell works is every time you push changes to the main branch or the master branch of your project it automatically once you trigger a rebuild and so all we have to do here is push this new code that we just have which is the installation of Firebase function through our main branch so let's Commit This you can say install Firebase functions and if I actually push this to my main branch okay so now the code is on GitHub if I go back to the MicroCell home here we can see that it says just now via GitHub and it's that commit is already there and it will have triggered a new build so the building is again in progress so let's go view build logs and see what happens this time okay so it failed again so let's take a look at what happened this time here okay um here's a few errors here okay so the first one is react hook use effect is called conditionally react hooks must be called okay so let's go to our index page for our community okay so the reason this is saying that this use effect is called conditionally uh it's talking about this one here and that is because it is below this if statement here so if this triggers um this is actually not going to run and that's not allowed in in react to Your Hooks need to run the exact same amount of times every single render it they can't be conditionally called so to fix this all we have to do is move this down here below to the very bottom and then if we save that that should solve this one here okay so the next one is saying that um quotation single quote cannot be or sorry can be escaped with okay so instead of our reset password it's saying online 33 it tells you the line everything which is super nice okay so I think it has to do with this text here this um this apostrophe inside of the wheel send you a reset link so like all we have to do to fix this is we could we could change this to like we will or I think we could wrap this in a template literal string like this to make it JavaScript and that should solve that we will see I think that should work um and then this one down here is it saying do not pass children as props instead Nest the children between okay so go to our search input um it's talking about line 16. okay so I think that's this one here okay so rather than I guess passing this um search icon as a children prop to the input left element uh what we can do to do basically the exact same thing is remove the selfclosing tag on this input left element here and create an actual closing tag and then we can take this search icon component and place it inside of here like this delete the child and this should do exactly the same thing because now this is acting as the child or children of the input left element okay so now if we go back to our app yeah it does appear the exact same however now it's more like it's proper for reaction so I guess chakra has to update their documentation to reflect that as well because I think we just grab this off of chakra but okay so let's go back to versaille here and I think that was it so here we have the Escape one children as props and the use effect okay so I think that's it so what I'm going to do is commit these changes uh we can say fix build errors and push those to GitHub some of you by the way might be using your terminal to push these changes to GitHub I'm just using the GitHub Source control in the left here I just find it super easy cool okay so this should trigger a rebuild so let's go to so let's refresh this this project here um okay so fixed build errors it's there and it is buildings so let's go ahead and view the build logs see how far it makes it this time okay so it looked like my build succeeded we can see the check mark here so it's pretty quick it only took just over a minute uh one minute and 22 seconds so now we can actually visit this and this is the real app here this is it in production it's deployed at this uh versel domain sort of given to you and you can connect a custom domain to your project through Versa there should be a domains section inside of the project where is that um I need to go to oh yeah view domains so say you wanted to put like Reddit projectproject.com or something any sort of domain you would add that in here and resell would connect that for you to your production build so in our case I'm just going to leave it as the assigned one buy or sell but this is pretty cool we have a securely deployed application that is now officially on the internet and it's connected to our Firebase project so this is this is in production so that's super cool it's officially deployed and we can log in and everything so I'm going to log in as my Shad Mary user and very cool we are now able to actually use this application in production this is actually on the internet we are on the internet comment very very cool you can delete everything the app should function exactly as it was in development awesome all right you guys so the very last thing that we are going to cover here is going to be Firebase security rules because now that our application is in production we want to add some security rules to our database to only allow certain types of users or authenticated users to access certain resources in our database such as posts comments so the way we can Implement security rules is we can go to our Firebase project here and inside of the firestore database tab we can navigate to the rules section which we have briefly seen before and we actually want to write out some rules for our specific documents in our database okay and security rules are really important because even though our front end if we go to our app okay so only the owners of posts can like see the frontend action icons here like deleting the icon Etc or only admins can change the community image of the community but technically you can still make a request to the back end using the command line like using making a curl request or something and the request to your app and to your database may not necess necessarily be coming directly from your actual frontend application and it might be coming from some other source like a curl command and so for that reason it is important to protect your database and all of the data inside of your security rules against these types of potentially malicious requests made from outside of your application so now your front end and your back end will both be nice and secure okay so I'm just going to expand this out a bit so we can we can see this here so essentially this is the default security rules that you are given for a new Firebase project and so right now there's only one rule that exists it's basically allowing every single type of action on our database which is perfect for development because we need to test out all of the features so basically this thing here the document equals and then the double star thing is just a wild card that is the path to every single document in our database so it's the post the users and everything in here every possible path that is what this document thing represents it's basically just saying allow read and write in all cases that's essentially what this means and so we can write paths to our specific resources like our posts and comments to only allow read and write on updates and deletions to each type of resource okay awesome so let's remove this here and let's write out our first security Rule and once you write the first one the rest should be pretty intuitive so you can delete this here and the first one is going to be our users collection so to do that we can use the match keyword here and we want to write the path to the particular resource we are creating the security rule for in this case is going to be our users collection and the second part of the path is going to be our user ID so this curly bracket notation here just indicates that this is a dynamic path and that we are referring to essentially any document inside of the user's collection with any particular ID and on any specific user document we have those two sub collections Community Snippets as well as post votes and for both of those they're going to have the same security rules and so to indicate that we want to refer to all of these subcollections on any particular user document we can use the wildcard parameter rest of path and set it equal to the double star and this was similar to the double star we saw before and this is basically just saying that at any path inside of any particular user documents or any subcollection and any document inside of any of those subcollections that is what this is referring to here so we can create specific rules for those and in this case this is going to be the community snippet sub collection as well as the post vote subcollection and any document inside of either of those okay so then we can open up some curly brackets here and this is where we're actually going to write the permissions okay so for these particular resources we're going to say allow read and write and then we can add a colon here and then basically we just want to write some sort of if statement I just want to say allow this if some condition is true so in our case we want to only allow reading and writing to these particular paths if the request dot auth instance is not null which means that the user is logged in because we can access that current user via this dot auth instance because it's connected to our authentication Service okay and we also want to add the condition that the user ID which is coming from this path here so whatever we name this in the wildcard path we can use as a variable inside of this logic here so if I name this user ID LOL down here this would be user ID lull it's basically the same as a dynamic type index.js whatever we name the dynamic path we have access to that variable name inside of the logic here changes back to user ID okay so we want to see that the user ID is equal to the requests.auth instance dot uid so we're saying okay so the user must be logged in so the request.auth instance is not null and the user ID of the authenticated user matches the user ID of the actual user document that they're trying to write to so only Chad Mary can write to the Shad Mary user document Chad mayor he cannot write to the Ben document or whoever document awesome and so that is it for our users collection so we can come down here and start working on the other ones to get so the next one we're going to do is our posts so we're going to say match slash posts and we are going to again use our Wild Card post ID variable here and for our posts we are going to make them completely public because all of our communities are public on reddit.com there are private communities and stuff which would require more advanced security rules but in our case we are making all of our communities public so all of the post data is available to me to anyone for reading so we can just simply say allow read and we do not need to specify a rule which means that this is going to be readable under all circumstances but we want to add a condition for writing a post so for actually creating a post and storing one in the database we want to add some condition for that and in this case we only want to allow the creation of posts if the post Creator ID matches the ID of the authenticated user because we don't want Shady creating posts on behalf of Ben or Ben creating post on behalf of Chatty so we want to make sure that it is shoddy creating a post for shoddy's user so to do that we can say request dot resource and request.resource is how we can access the actual document object that we are trying to write to the database okay and then we can access the data of that resource and our data if you remember has a parameter called Creator ID on it because if you go to our new post form here this is going to be the request.resource.data object and so on here we have access to the Creator ID so we want to check that the resources Creator ID is equal to the auth instances user ID and the next rule that we want to add for our posts is for the deletion of posts because you only want Shady to be able to delete Shady's post we don't want Ben to be able to delete Chinese posts so what we can do is we can add a rule for deleting so we can say allow delete and we only want to allow the deletion of posts if the user making the request so request dot auth dot uid is equal to the Creator ID e of the post resource that they're trying to delete and the way we can access this resource is we can say resource dot data dot Creator ID so in the case of creating a post when we are actually like writing a document to the database and we are passing data with a request we access that data through request.resource.data in this case we're accessing a resource that is already inside of our database so it's not coming from a request so we can access that just through that resource object here I'm just going to change the order of this first one here to match the bottom one it doesn't really matter but just a preference of mind so let's say like that and the very last crud operation we could add a rule for would be for updating the post and in our case our application is not built to allow editing of posts but if you decide to build that in this project or a future project this is how you would write a rule specific to updating this resource so now we can work on our comments so you can say match comments use our comment ID wildcard variable and the rules for this are going to be the exact same as the posts they're going to be publicly readable but only the owners can create and delete these resources and the very last type of resource in our database are the community documents so we can say slash communities and use our community ID wildcard cool and so for communities all authenticated users can create communities so we can just say allow read they are publicly readable but for writing we just want to make sure that the user is authenticated so we can say request.auth does not equal no just like that I'm just missing an if statement here awesome so now if I publish these rules it will actually be published to the Firebase servers where our application is currently deployed and they might take a minute to property to upload servers but now if I go back to the application these should be in effect and depending on the functionality and the types of features and security you have built into your app you can add more security rules and you can have more advanced userbased authentication but in our case this is exactly what we need for our application perfect and that is it for our security roles and now our database is nice and secure and only the appropriate users can access the data that is available to them all right you guys so believe it or not that is the end of the entire Reddit build I cannot believe we made it here it has been a wild Journey congratulations if you have made it to the end here I hope you have learned an insane amount we have covered so many things here and my entire goal with this project was to cover enough stuff in detail to give you the tools necessary to create anything you would want with these Technologies so I hope you have gained that from this and I really hope that you feel that your skills have been upgraded in following this tutorial and if you have enjoyed this content please like And subscribe it really does help out my channel and I'm going to be creating more and more tutorials in the future this is just the beginning and also please join our Discord it is a growing community and it is not only for this project just joining there uh to chat really about anything it could be about this project it could be about your own projects and it could just be this ongoing thing and chat about really any future project all right so thank you guys once again so much for watching I really really appreciate it it has been a crazy journey I hope you have learned a lot so thank you guys so much once again and I will see you next time