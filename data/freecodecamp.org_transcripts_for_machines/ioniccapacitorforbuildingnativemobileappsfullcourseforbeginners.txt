welcome to this comprehensive video course on building native mobile applications using ionic and capacitor you're in great hands with an expert instructor Simon Grimm who is an ionic developer expert and an experienced ionic instructor this course will guide you step by step from getting started with ionic and capacitor to deploying your crossplatform app on various platforms ensuring you gain the skills needed to create impressive mobile applications get ready to dive into a world of ionic components animations gestures and more hey freeco campers what's up this is Simon from the ionic Academy bringing you up actionpacked course on building mobile applications with the ionic framework and capacitor in this course you will learn how to use the ionic framework in combination with capacitor to build powerful crossplatform applications based on existing HTML JavaScript and CSS skills yes that's right you only need to be a web developed had two built native applications in today's world so what we're going to build along this course is a simple demonstration of what's possible with ionic we're going to talk about routing layouting we're going to use tons of components and we're going to build the simple flow which is very common in today's applications like having a login and registration page and then having some sort of different inside area within the inside area we will then also use a bunch of ionic components to see the power of ionic we're going to make API calls but overall you just need some limited experience with HTML JavaScript CSS and the react framework we will use ionic react along the course but you could actually also use ionic with angular which is very popular with view or with no framework at all however since react is most popular on the market and you probably already know the basics we're going to use it but trust me you really don't need to know a lot more about react besides use State and use ref and how a page actually works if you want to learn ionic even faster check out the ionicacademy.com which is my online School geared 100 towards ionic developers with tons of courses templates and a private Community I help developers bring their web development skills into ioni and enable them to build powerful native applications for IOS and Android from one code base so check it out ionicacademy.com and if you like the idea of crossplatform app development also head over to my own YouTube channel which you can find at Galaxy's underscore Dev where I upload a video every week about crossplatform development topics web development topics and also live stream usually every Thursday now without further Ado let's dive straight into the course and build an epic iOS Android web and even native desktop application with ionic and capacitor to get started with ionic you first of all need to install the command line interface so simply copy over this or type in npm install G for globally the ionic CLI the ionic CLI is required because this will help us to boot through a project to create template to add pages to run our application and it just offers a ton of helpful things for our application and once you've installed this you can follow this up with ionic start which usually starts a new project with a specific name and template so I'm just going to call this one my app as a template I want to use the blank template so there's also the site menu a tab bar but I want to show you how to build that in a later point of this course so we're going to start with a blank template which is just one page in our application and then we're going to follow this up with dash dash type react because we could also use angular we could use view or we could use no framework at all and this will now bootstrap a new application so let's take a look at this ionic is marketed as the mobile SDK for the web it is an open source UI toolkit and that is what you can think of ionic I think in the best way ionic is a set of components and helpful utilities to build awesome looking native mobile applications for both iOS as an Android with adaptive styling so applications will look different on IOS and Android without you having to do actually a thing for that that is pretty cool so once your installation or setup is finished you can open your application with a preferred terminal now with a preferred code editor in my case this is Visual Studio code but of course if you prefer uh something like webstorm or whatever you have you can use that as well however ionic itself also recommends Visual Studio code there's also an ionic extension so under the extensions you can use you can search for Ionic if you're not a fan of the command line it's pretty nice and it can do a few things for you however most of the time we're just gonna do it with the CLI because the extension is just using the CLI usually under the hood now we're going to talk about our project in a second let's figure out how this project looks by running ionic served in our new project because this is the fastest way to bring up our new ionic application and here it is ready to start an app this is our ionic application using the read preview now what is going on this is basically a website that you could have created with create react app or anything else it is just a website we have one pad slash home and it displays this page which actually looks pretty nice already it's kind of responsive so as we can see this fits into the middle of the screen and well it is a website so what I want to show you really quickly in the beginning is that we're not just working on a website although the live River usually looks like a website we are creating native applications with our web development skills so let's do this um let's go back to the editor and I'm going to put this a bit to the side and I'm gonna uh where's actually my preview of the application there it is I just want to quickly show you that this is actually as always in most project using live reload so underswords you're gonna find all the important parts of the application you're gonna find the home page here you don't have to worry at this point about the different text in here but what we can see is we for example have a blank here in the header so I could say free code Camp hit save and it will immediately update here so this is the page where we could put in our hello world code just to see that something on the screen is actually going on if you just want to get your hands dirty real quickly however before we do any kind of development in this project I want to show you the most important part which you most likely came for and that is how you can build a native application from your web code and for this we're going to have to use another tool called capacitor now capacitor actually the landing page looks very similar to ionic well capacitor was also developed by the ionic company so you probably heard about Cordova in the past if you've been longer if you've been around for a longer time in the cross platform development and capacitor basically helps you to wrap your web application into a native container and then deploy it on IOS and Android or as a progressive web application Cordova did this as well in the past however capacitor has a bit different philosophy and I think capacitor is the way forward in the future as more and more people are actually switching over to capacitor and it's also what recommended for Ionic one quick note capacitor is not just made for Ionic you can actually use any of your Web projects so let's say you have some random angular project or you have some react project you can just install capacitor and use the capacitor tools to wrap your web application in that native container and deploy it as a native iOS or Android app so there is no fixed connection between ionic and capacitor it's just that ionic and capacitor work really great together but you could also use your react code with whatever kind of styling layering native based tamagui and then plug in capacitor to build a native app or just use View and tailwind and then install capacitor so there are tons of options however what you get with ionic are a lot of great components so think of I ionic as the components and think of capacitor as the tool to actually build your app so we're going to use a bunch of these cool components later you're gonna see how all of this works how we can customize them and how we can integrate them but to quickly give you a win let's see how we can integrate capacitor into our ionic project so therefore I'm going to kill my live reload and I'm going to run ionic build because ionic build will actually create the first build output of my project right here and this is what capacitor needs to actually set up the project so then we're going to follow this up with ionic cap at iOS so we're adding the native platforms to our project I'm first of all adding the iOS platform and once we've done that I'm gonna also add the Android platform so we gonna end up with two new folders in here IOS and Android and the interesting thing is these folders are simply native projects so if you happen to have any kind of experience with Android or iOS development or if somebody on your team uh knows about it these are really just the native folders so we can now open them which is actually very easy with a CLI so you can go ahead with cap open iOS and then it will open the native project this is what iOS developers using this is xcode and if you want to run your app on an iOS device there's a little uh step you need to take so first of all apparently you need Mech to build for iOS it's there are a few build tools in the cloud but usually if you want to develop you're going to have to use some kind of Mac just get a cheap I'm no not an iMac what's the small thing uh Mac Pro make mini get a make mini ads you really enough if you just want to test Waters and you can probably get a refurbished one and what you want to do then is you want to install xcode so right now this would be xcode 14 you can download this for free from the App Store and additionally you might have to install some environment tools but the ionic documentation for developing on iOS is pretty good um I think actually you just need to install xcode and that's pretty much it and then you should be fine for Android you're gonna have to install Android Studio so you can download Android Studio for free as well and in your project just like we did before you can also run cap open Android which would open the native Android project yes I want to open this oh actually updated Android Studio just yesterday so yeah I want to open now from the internet that sounds great uh uh yeah I want to trust my project as well and there we go I now have a native project in here so every native developer could work with these tools and we're gonna learn how to use them as well react native or Expo abstract this away by giving you an application which you can run your application ionic is actually working on something as well called Nexus it also does work and maybe we want to use it later but for now I'm going to show you how you can easily deploy your apps to Android and iOS to give you a quick win so for iOS um we're going to go into our application uh I think we just added the platforms right ionic cap at Android right so let's go ahead with ionic cap sync what is command does is basically syncing your distroller into the iOS folder so it's just copying over the assets from your build into the native platform and we can do the same for Android and on top of that it is doing a bit more because capacitor has some plugins that we're going to talk about later which are like the entry level for you as a web developer into the native features like GPS bluetooth camera contacts you can access all of these usually native device functionalities from JavaScript through capacitor so capacitor is one the tool to build your app and two the bridge between your web code and these plugins and the sync command will just make sure that everything is correctly installed and just like we did this uh yeah we just do it ionic capsync it should be synced for both Android and iOS so let's get back to xcode um and once you're in xcode you can select from different devices or you could actually also plug in your own device however I'm just going to use the simulator because the iOS simulator is pretty great and we can use that if we want to now for Android you can also create a virtual device in Android Studio however for Android I kinda prefer to actually use my own device So within xcode within Android Studio I'm just going to select Google pixel my connected device and run app and I'm gonna also start another application so I can give you the screen of my device now here's already the iPhone 14 simulator starting up and voila this is our or your application running as a native application you can see I can minimize this it has the capacitor logo as the app icon in the end we will change this so it looks completely like your own application but you now already have this and there's actually something already going on what's going on we didn't write any code well this is just a preview of the awesomeness of ionic components so if you inspect this ionic page there's not a whole lot going on we just have a like a header area and we have a Content area but just by passing in a few more parameters we got this iOS native looking UI which transitions a title from big into the status bar once again just a little preview of what's possible with ionic so let's see how we can also do this for Android I'm going to start my Android broadcast because the application was deployed and here we go here is the preview of my Android application and you see side by side notes apps look different right so this is another thing about ionic the ionic components render to the underlying platform form styling and we're going to see how we can play around with this and customize it but overall things will look androidlike on Android as we can see here in the Android application on the status bar and the text and how everything appears and on iOS it will certainly look different you see the difference here in the status bar very clearly we have the iOS version and we have the Android version side by side coming from just one code base now this is pretty a pretty massive win already if you're just a web developer before at this point you can pretty much say you're able to develop native applications because at the end this is what we do we build our web application with web tools HTML CSS and JavaScript then we deploy it with capacitor as a native app and we can run it and use it just like any other native application now the process we used was well kinda complicated we had to build we had to sync we had to go to the studios and isn't there a better way and in fact yes there's definitely a better way so there's a live reload on a device I'm gonna run this command ioni cap run iOS dash dash live reload dash dash external I don't think you actually need the last Pad but if it's not working give it the public host your local computer IP as well to make this work what is command will do it will ask on which device let's use the iPhone 14 when we use Pro okay and this will do something um pretty cool it will bring up your local preview so in my browser uh where's my preview here we go I can still see the preview because just like before the live reload is working in here but at the same time capacitor will deploy a specific version of my app now to the simulator which is accessing the remote URL basically my own local server so what I can do now is I can have live reload on a device and let's say freedco Camp live actually this is a pretty bad example because this is only showing in here so let's change this to free code cam and we see immediately the change is applied in here so this is something every native developer would be jealous of because you have live reload of your application on a simulator or native device this is really unheard of in the native world I know it works with Expo and react native or flutter uh we all everyone in the crossplatform community knows about this but if you're developing just with swift um this is pretty cool so this helps you to get a preview in the browser play around with it in the best possible way and also see a live preview of your application here and by the way you can also spin this up for Android so you don't have to use iOS whenever I say iOS in these commands you can usually switch it to something else so let me also run the live reload for my Android device and then you're gonna see something which is like even another level Beyond this and that is you can have live reload on different devices at the same time so here we go here's my device now we get some space problems so let me for now bring this to the side and give this editor some space and what I'm going to do is I'm just going to write something in here so let's say I want to change uh the content of this screen let's say I want to change the color of the header bar I'm going to say color equals primary and with just a bit of delay everything updates so nicely uh we currently don't have the update on iOS because it's using this big header let's remove this for the sake of the presentations I'm going to get rid of the special ion header and then we have it the same in all the places and I could change the primary color now to let's say secondary again we're going to get into colors and what this means later on but for now I just want to show you that we can have this live reload on all the platforms we have web we have Android and we have IOS so we're really focusing on all three platforms at the same time how you want to develop is up to you my recommendation is to either use this command and occasionally look into the simulator or just use it and show look at the web preview because that's usually the easiest way sometimes you update stuff and then you want to reload the native platform so it's a bit more complicated and just hitting refresh in here is a lot easier however do as you prefer finally to wrap this up at the beginning and the quick wins we already have I want to give you the tools to debug this application because along the course I might run into problems or you might run into problems and you should understand now how you can actually debug your applications because that's a critical part uh for developing crossplatform apps so for our web I'm going to put the code to the site now for the web you can just use the usual browser debugging tools so on a Mac I can press command option I and this will open the sidebar should be fairly the same in other browsers and Firefox or Safari or whatever you prefer to use I just happen to use Chrome all the time where we have the console and if I put anything in my component here you can just put this at the top level actually don't know let's put it yeah and let's put it in here I see my log from home sweet home there we go right in here now how do I get the lock on these platforms and that is very important because if you want to develop native applications you also need to know how to debug them but that's actually pretty easy so for iOS you can or could check out xcode if you run an application through xcode you would see down here the lock of that application however we don't really see this on reload and I kind of don't like to look at xcode all the time so a better way to handle this is to open Safari and for Safari at the top you can press develop and then select your device so in my case no I don't want to make Safari default I really don't like to alright that was actually a good thing that it happened right now because now I can show you how to how to build this so if you don't see your application if you go to Safari develop and then select your simulator at the top and don't see your application to inspect simply go to the settings of your simulator go to Safari go to the bottom and advance and simply toggle JavaScript on and or off and on again so it definitely needs to be on if you then select your application and from the develop menu you should actually see your application which Len opens a new console inspection window for Safari and in here I can actually press something like reload and I would reload the application in here and as you can see we get the Luxe home sweet home feed connected and some more locks from capacitor so that is how you can debug your native iOS application and still get the web logs of your application and by the way this is the same for the simulator or if you connect a real device so if you connect a real iOS device to your computer and deploy it you by the way also need as far as I know to be enrolled in the iOS Developer program that's a different story and then you can do the same procedure from Safari and debug your application which is called remote debugging so here we got the direct debugging in off or of our webview that was the remote debugging with Safari for iOS and for Android devices you can actually use Chrome and try Chrome slash inspect which should hopefully show up your webview application so remote roller whatever and then simply hit inspect which will open another window I don't really like this preview it never really worked great for me so you can also toggle that off but anyway you're gonna find your application in here and if I hit refresh Yep this is also reloading my native application and giving us the logs so using Chrome inspect is the way to do remote debugging for Android with all of these things in place we have basically reached the first checkpoint the first checkpoint means we've installed ionic we've created our first ionic application we can run it on the browser with live reload and we actually deployed it to Native IOS and Android devices using capacitor and we understand how we can debug our applications using the browser debugging tools make sure you're at this point make sure you have your code editor open with our blank application because we can now die dive into creating the actual ionic application most applications today start with a login page they have a registration page and then they have an inside area and that's exactly what we're going to implement together along in this course so right now we just have one page and we haven't really talked about our folder structure so let's now first of all take a real look at what's going on we got the usual files of a web project we got a wheat config we got typescript configuration files we got an additional ionic configuration which isn't really important but the capacitor config will become more important later once we talk again about capacitor and Native applications besides that we have the usual index.html you see in react application which simply loads our main.tsx and that is actually the entry point to our application so within the main TSX you're going to find that we're looking for the root element and we will render our application in that element I'm actually going to disable react strict mode as this is always triggering twice the the locks in use effect and stuff so you can enable this again in the end for now I'm going to disable it and within our app TSX we're gonna see a lot of imports now this is where ionic really begins in here we're importing the ionic react router which is a package around the router we import all the styling and the utilities and the stuff that ionic needs and we also import and another variables file which specifies like a theme for our application these are CSS variables and we're going to play around with them in a second basically just note that they're used to style your application and then we have a call to set up ionic reactor if you remove this your application won't work at all and then it begins by wrapping our whole object or the whole application in an ion app now by doing this we enable a ton of different things settings that come from ionic page transitions all these cool things come because we are rendering our application as an ion app and the only thing that's happening here is the configuration for the ion react router in fact let's do this for our own route so let's get rid of these settings here and and I want to start with an empty pad and I want to have a login page so let's create a new file I'm going to call this login.tsx and I do have a little snippet for react functional export components so here we go oh no not react ionic react uh page component there we go that makes more sense so this is the login page and Export default login now by the way this comes from an extension let's see called ionic Snippets so if you want that simply install that in Visual Studio code otherwise it's just a quick way to have some code in here and the application is not failing now I've added this new page I will actually get rid of the home page and the home CSS like that again later but we really want to start at zero also I'm gonna delete these components so those are just components used in that initial app and instead of rendering the home page initially we will now render our login page and I'm pretty sure yes that I should remove this so here we go I should now be able to go to just the empty path and we see a blank page title and the UI goes here so this is the starting point for our login page while we're here let's also add a registration page so register the TSX ionic react page component I'm going to call this one register and then we can include this pad as well we can by the way also say route and then use component and put in register that would work exactly the same but we also yes have to supply the path I think I messed this up and if I now go to slash register um is this slash register I think I had a typo yeah register opens the registration page as well cool um now before we get into the routing let's create a little page and see how we can play around with this so we've already seen that ion app was at the top then we had the ion outlet with the routing information and then we have the ion page now every ion page defines like a page in your native application and if you come from a website well you usually had this huge screen and you had tons of different components and parent components and yeah we can still have these components with react but usually if we're talking about mobile mobile applications this is what we see this is a page of our application or a screen sometimes also called so what this is what you can imagine if you see an ion page now on that page we currently have an ion header which is the header area up here or what we see up here basically the area from the status bar including the title sometimes the menu button supporting buttons or anything else in that area and then below that below the header area we have an ion content area I'm just going to remove this and put something else in here so test there we go oh I'm actually on the register page so I want to go to the blank page there we go test so up here status bar title then we got the main content area which automatically becomes scrollable if this becomes bigger and then we could also have below the ion content an ion footer area that could wrap up our applications so then we had like an ion toolbar um please add the import and all these elements come from the ionic react package as you can see we need to import all of these one by one and right now I'm gonna put something in here we have this toolbar area so those are the three main blocks ion page ion header ion content and folder actually those are four anyway so let's get started and Implement our little form for that I'm gonna add a little function so we don't really do a real login uh we're just gonna do like a fake lock in and this will get an event and then we're gonna do some kind of operation in here um yes we're going to prevent the default of submitting a form and then trigger a little lock message I also don't need the footer area so let's start by creating this view I will also use a bit of styling so for most ionic components you can put in a color so by default we see the header has no color but if we go ahead we see we get access to these colors primary secondary and so on now I can just select some and it would apply The Styling and the color now comes from our variables because this is specified in ionic so we have the definition for primary secondary success and we can change these colors to our needs if we want to and by doing that we can easily retheme our application so if we use this pattern across the application on buttons and different things you just need to change your color in one place to update the components across the whole application so there's actually a cool tool called the ionic color generator it's hidden here in the documentation down here and you can put in your own colors and then it will give you a nice little export so I used the free codecam colors here I just use the dark colors you could also use the light colors whatever you prefer and then you can grab this object usually actually I was a copy button I don't know it was time for for the copy button to move on so I'm gonna put this in here I don't want to override the other stuff and as a result we should see that my header now comes in this dark green color and as well I could use the primary color which would be this purple color or is it purple yeah I think it's purple do you want to use this I want to think I think we're going to use the green color and we're going to call this free code camp okay here we go this is our login now one particular component of ionic is pretty common and that is an ion card so let's add an ion card and on that ion card I want to add ion card content and within the content we're gonna later Define our form so if I put something in here and yes please update the import this is how an ion cart looks like actually it looks also pretty nice on iOS and if you want to get a quick preview of iOS here's what you can do you can just trigger your development console um then go to the device preview and now simply select the iPhone now it has still the default styling but if you hit refresh you're gonna see that this is now using the iOS styling we will later get you how this magic works and how you can play around with this just know that you can always inspect how your app would look like on iOS or Android by going here if we're not using the inspectron just use the default mode and now hit refresh we would once again get the default Android material design theming so with that in place uh let's create our form the form is a standard form and I want to say on submit it should trigger our do login now I don't really want to use a div element in here because there are other elements that we can use however of course you could use div element just like we used the form we could use any kind of diff element in this place but what I want to do is I want to use an ion input so all of these components can be found inside the component overview there are tons of components and I try my best along this course to show you most if well not all of the available components but really most of the cool components you should definitely check this out in the ionic documentation just to get a feeling for what they have to offer but usually they have pretty much everything that you need to build a native mobile application so an ion input would be of course an input field I'm going to give this the label email and let me let's just close it and see how it looks that could be interesting so by default well we have a pretty boring input with a static email in here now there are things that you can change about these components to make them a lot more awesome and that is something you have to learn if you get into ionic you will not only need to get used to the different components and understand what's available but also how you can actually use them because you can use them in tons of different ways just like we see in the first example this is the first example now um then we got different input Fields number Fields okay that's not too special but then we come to label placement it could be here could be here could be stacked could be floating um we got the clear option uh we got field inputs so all of this is just using the ion input and setting the right properties and I know this now looks very scary and I will never understand what's going on but trust me you will get used to this just write one two three ionic applications for fun do something release them on the stores and you're gonna get used to these things really really quickly so I'm gonna do my best and explain the properties that we're going to use so first of all I'm going to say that this is of the type email this is especially helpful for Native devices because they then know that you should display um that you should display the email keyboards which is a bit different than the usual keyboard additionally what we want to say as well we're going to probably add a placeholder uh so Simon and ionicacademy.com could be the placeholder that already becomes better and I definitely want to have the label placement floating so if we do that it looks like this if you click into it it moves top it's always a pretty nice thing however I also want to have this cool outline fill so let's add fill outline and we got it like this that's already pretty nice isn't it um and then the thing is here is my iOS preview and it looks okay by the way uh I get these at sign now because um we're using the type email here however I don't really like the way it looks so maybe later we can change this again and just don't worry about it too much we're gonna focus on this for now so we have fill outline we have the placeholder let's do the same for a passport field so I'm just gonna copy this over I'm gonna call this one label password type should also be set to password if you don't do this you will get clear text input but now we have the stars in here and you see they're kind of bunched together because I just HTML elements right below each other in those cases you can write some CSS to position them correctly to have like a little Gap or something but actually there are a few ionic utilities that you can also use so if we check out utilities CSS utilities there are a bunch of modifications we got text alignment like text start and Center then we got text transformation lowercase and we got also element placement uh we got floating stuff iron flow left right and what I like most is spacing so just adding ion pending to something or ion margin would work the same ion margin top start and and we can easily add this to our application it's pretty much like using Tailwind CSS utilities so let's try this and to my own input I'm going to add actually I'm going to use the second one I'm going to add the class name ion margin top and as a result we see it gets this nice little separation here which is a fixed value inside of ionic so that looks pretty nice all we need as well for the form is of course a button so let's use an ion button for that and I hope you kind of get a feeling now for most things everything's start with ion you can just give it a try and hope that it works this button will have the type submit so it will trigger the submit on submit of our form and actually get a nice little code completion but I won't I won't use it today uh copilot I won't use you today so let's close the ion button there we go and this one should say log in so um a small button well not probably not the perfect position so what we can do again we can say this should expand the full width there's also an option to use block so block is as you can see a bit more rounded maybe where we go with block today do we want to go with block or full it's a Pity that you can answer we should do this live anyway this button should also have some margin top so I'm going to copy this over to it as well so we have the nice separation here as well and then we also need probably another button to create account by the way we haven't specified a color then it's using the primary color so for our create account we want to probably not use type submit because this shouldn't trigger the submit we want to use let's say the secondary color then we do have the second button in here uh we have the margin top and as well this button should bring us forward to the next page so simply add a router link I'm going to say to slash nope register and then voila if you see in that transition we're going to talk about that transition in a second uh for now let's just keep it like it is uh and let's focus on on finishing up this page so there is a thing that we can do as well in most applications you're gonna see icons and we can also add icons to our application because there's a cool kit called ionicons ioni cons there we go and those are already available in our application it's a pretty cool set and these are just like ionic components responsive so they look different on IOS and Android we have outline modes filled sharp um actually I don't think they don't look different right um but you can use the different modes which usually already helps to achieve this so as I said these are already installed in our application so let's try and add something to the login button I'm going to add an ion icon again this is a component from ionic and then I need to specify the actual icon and there's something else slot that we're gonna have to talk about in a second now first of all we're going to import this button so let's add the import this usually not works automatically so lock in outline from ionicons slash icons that sounds good um actually what do we do oh I think yeah we messed up the icon so lock in outline and then we should see we have the first button so we will talk about slots later for now just think of them as injecting content into components um we have this ion button which is like a fixed component but we can still inject some content here and there and the same is true for other ionic components as well we're going to come back to this concept later for now let's just be happy that we have this nice little button here this icon and we can do this here as well let's say we're using a person Circle outline from ionicons and boom we have the second button and again I'm keeping up the iOS simulator we have all of this here in the simulator of course as well and would just work most of the time as you've seen that was pretty epic right we're gonna get to that in a second so now that we got this we can also do the registration page or maybe maybe let's also display a little image so I grabbed this image let's create a new folder here let's call this assets and within acids I'm just going to add the free codechem SVG um just grab this from somewhere or use your own image whatever you prefer and then um probably above my card I'm just going to put an image source uh we're gonna have to talk about the source and then alt should be free code cam and Logo yeah but of course we need to set the source as well so let's import the free code camera logo from my assets folder uh it should be yes exactly this and we'll put in free code Camp here and let's see there we go probably not the perfect size well we could say the width should be maybe 50 percent and then it's not centered so let's add a diff around this and we can actually use the ion text Center that should usually Center our element and I'm going to close this afterwards and there we go we have a nice login screen once again looks pretty cool on mobile as well I'm pretty proud of this one actually this looks really cool now one thing I don't like uh that I always complain in my reviews is we have this screen this lockin screen and there's enough space on the screen but I still can scroll this you can't really feel this here on the web preview but I can feel it here in the iOS simulator so to overcome stuff like that this gets more into the direction really of the nitty gritty and under the hood stuff but what you can see is you can see scroll y equals false and with that no more scrolling of the ion content on this page possible however would be possible on our registration page so let's talk about the registration page we can already move to that page and in fact the page should be pretty should mostly be the same stuff like we do in here so I'm going to actually grab the whole ion page from here and move on to this page what we don't really need is the um the logo so let's get rid of the image I'm gonna call this one create account and then we of course need to add all the missing Imports and we should probably do a new function let's call this do register and on registration we get the form submission and then we're gonna handle this somehow right so instead of do login we're going to do register can I already move to that page yeah that looks good uh only thing is that we want to say create my account and instead of using person the login outline we're now using let's say something like check mark done outline also we only need one button so let's remove this one okay that looks pretty good uh I think it's actually pretty fine now how do we get back to the login page we've already seen this before I can go here and I can go back and actually use Swipe to go back so this is enabled by default in ionic and you see this is like a native transition and this is all HTML and CSS this is what the web can do you see this fading of the header area it is just unbelievable and stunning every time I use ionic and we get this automatically if we use the right kind of transition we're going to see how to change this and use a different transition once we move into the inside area as well for now by default the router link is simply pushing this new page on our stick now we might also arrive on this page like we do here if we refresh or as we can see we don't really have a way to go back besides swipe to go back so therefore let's inject a button into the toolbar of the registration page I'm going to use the ion buttons wrapper in the starting slot of the toolbar so this is a wrapper component around stuff like buttons and it's using the starting slot of the toolbar which is on the left hand side we also have an end slot so you could also put in buttons towards the end side of this I'm going to do a special button not just an ion button to go back but instead an ion back button and I'm going to also set the default href to slash now if I use an ion back button it will render a little back arrow at the top right here to go back whenever there's a page to go back to so we now got this working we could also change the text of course whenever you think oh Simon is using this component can actually also change the answer is usually yes and we will get later to how we can customize more of these things for now I just want to focus on getting used to ionic components and constructing a nice looking page so that also means I can refresh and the back button would have actually an action so we have the flow from our first page to this page let's see how we could also go back if we just click that button but you can not only use routing in components like we used with the router link you can also of course do this from code ionic is using another Hood the standard react router if you're using react and when there's a cool hook that we can add from ionic so we can call use ion router and actually they're going to be more hooks that we're going to talk about later but with this router we can simply say router go back so that just a handful of things that we can actually do so let's do this router go back and creating my account would now bring us back in a real world example of course you would now do your API call create the user and then navigate back or probably also log in the user but for us this is already enough and we can do the same in the login page so here we're back in the login page rout router equals oh come on router equals use ion router and then in the login we can do something like router dot push and go to the next page now this is still for the future we're not yet there because we are a few other things that we should take care of so we have created this login screen uh which is pretty nice in itself but in most applications you also want to have something like an introduction screen so let's also add an introduction screen to our application because it's actually not that hard as I said in the beginning you just need some basic react skills so what we're going to do is we're going to use state with use statehook and we're going to set uh intro scene set intro Steam oh come on you could do this copilot two use State false or we could also use true well we're gonna probably play around with that in the end and now if we haven't seen the intro we're gonna show a little intro component so therefore let's create a new folder components that's a nice way to create this it could also be a full page but I think uh marking it as a component should be enough so let's call this intro.tsx now what I want to use in here is the swiper implementation because ionic uh previously had something called slides but usually today all you want to use is swiper and Swiper is pretty easy to get started so we just need to run npm installed swiper and that's what I'm going to do in the project so npm install swiper and once we got swiper we can create our intro component actually can I already do an ionic react page component actually this is not a real page uh let's for now just call this a diff element and then say test oh I forgot about the name so I'm going to call this intro an intro as well and then we're going to try and display this on our login page using the simple logic with our state so we return and check um we're gonna put an empty fragment around our page like this won't really change anything but if we haven't seen the intro then we're gonna show the intro component so in that case we can use intro and we don't really have anything else yet um actually we're going to use the tenery operator so if we haven't seen the intro we're going to show intro and otherwise we're gonna show the ion page stuff we did before and we just need to put in the right brackets and now we see okay test because our intro component is showing up that's actually good news um on that note let's get into the intro component that's probably the fanciest react that we're gonna write in this course so really if you come through this part you shouldn't really have a hard time we're only using a bit of fetch on data fetching later but nothing really fancy besides that so what we're going to say is we're going to give this some container props because we need to inform the login page once we're done with the presentation so I'm going to Simply add an unfinished here and once this is called once this is called on the login page we can set some value because that is actually the exercise we're gonna have here that is to save that we have seen an introduction not only show this every time but we're gonna actually use some storage mechanism to store that information Now to create the intro we can now specify that this is of the type container props and then login will complain because we haven't implemented the interface yet so let's say intro on finish we're going to call some kind of function finish intro and I'm gonna just add this part here cons finish intro is that might might or might not become an asynchronous function um so uh fin putting it in here not really making any use of that so now we can create the introduction with swiper swiper is actually pretty easy to use we can just put in the swiper component and then put in swiper slides and each swiper slide can have some kind of information uh let's see and we can't really use are we importing it correctly yet uh not really we want to import it from swiper slash react additionally we also need to add the import for swiper CSS because otherwise usually it's not working very well of course it's displayed I just had no text in it so if I can do this come on uh then we should be able yes we see swiper seems to work it's really just installing swiper and then using it it's sometimes unbelievable how easy things can be now I'm gonna put in three little graphics for the intro you can use whatever you want or you don't even have to use some but I just want to have them in here and I'm going to add the Imports for all of our images at the top just like we did before so now with this information we can create our little overview here so just like before Source intro one alt intro one and let's see nice this renders our view and we can of course swipe there great um let's also add a little bit of text so let's add an ion text element you don't really have to use text but it's always a nice wrapper and you can change the UI if you want to or the the color easily so let's call this build awesome apps with ionic UI components and hit save and there we go well that's probably maybe we can improve this a bit uh so maybe at this point it's time to add our own styling so let's do a little intro dot CSS file right next to it and in the intro file I want to use a a specific heat for the swiper image so swiper slide image image should have like a height of 40 view height so it's not getting too big and then margin bottom so the text is not so sticky to it okay this won't work yet because we still need to import it so let's go back to our actual uh intro page and import the uh CSS actually we just need to put in the path right just need to use the pair yeah that's it it's as easy as that and voila well this is not perfectly centered oh yeah we we only change the hate we should definitely make this centered by using uh swipe or slide styling so this applies to every single slide I actually don't know why this looks so horrible so let's use display Flex then it's next to each other so we're going to use the flex Direction column then it's below each other a lot better and then we're gonna say the usual align item Center justify content Center and I think I also had to use text align Center for whatever reason I didn't quite get but now it should be centered good good now with that in place I also want to have this take up the whole Space um because right here oh I could actually can't go back in this one um probably need to kill the application and then come back to it yeah we can see this is not looking great so what I want to give is to the general swiper element I'm going to give it the full hate uh actually with not hundred percent uh and hate can be 100 view hate so then it should position our elements right here in the center of the screen and we have this traditional uh introduction swiper screeny thing now um we can stripe through this but there's also a way to go to the next page however this is actually more complicated with swiper than I thought it would be and for that we're gonna add a little additional component here so this was actually a recommendation by swiper so we can use the use swiper Hook from swiper react and then we can add our ion button and on click we're going to call slide next on the swiper hook it's just not working if I put it right in here so I had to create this custom button however if we now put in the swiper slide next button and put in next you see we can actually go to the next slide great with that in place we can finally create the other slides so let's create slide number two and three so I'm going to call this number two I'm gonna say text something else and then finally this will be intro three and Row three and we should be able yes to see the different images and we can swipe through them now the last one should actually not be a swiper next button but just an ion button which is triggering our unfinished event so on click I don't want to lock to the console but I want to call Finish intro um where is my Finnish intro um didn't we oh yeah we have the unfinished in here so we can add access to on finish to our container props here and then call it from here good so now if I click finish or we can also do it in here we should see a lock in the console which we do see right here Finn uh that tells us okay the user has finished this introduction and at this point we can set the intro scene to false but that's of course not enough so if we just do this we will get a problem maybe we're going to try this so let's say we finished the introduction we come back here to the login page and we're going to just set set intro scene to true okay cool story so user comes here next next finish and boom we're on that page cool that's great however if the user is opening the application again they would have to go through this again so we need a way to save that information on the web you can sometimes use local storage that is okay but something that is recommended if you want to save little Snippets little uh settings is capacitor preferences now capacitor preferences is one of the capacitor plugins we haven't talked too much about this I've given you a little in idea about this in the beginning basically capacitor is not only building or helping us build our native application but it's also giving us abscess to a bunch of native uh SDK functionality device clipboard camera stuff like that and there are also Community plugins that you can add besides the core plugins that I mentioned here so capacitor preferences is one of these plugins which gives us access to either user defaults and iOS or shared preferences on Android how is this working under the hood capacitor plugins have an implementation with native kotlin code for Android and Swift code for iOS and capacitor will select the right implementation for our job the cool thing is we just install these plugins and we use them with one API like preferences set camera get photo and under the hood capacitor will handle the rest for us no matter on which platform we run web iOS Android capacitor will use the right code and create the connection so it becomes a lot easier for the developer we're gonna get more into capacitor plugins later for now we just want to use this one plugin we could probably also use local storage but I thought it would be a good idea now to include a little native functionality at this point so npm install capacitor preferences and then follow it up with npx capsync because we're now adding a native plugin and we would have to rebuild the native polygons the Platforms in my case this means I won't have to restart my live reload to actually make this work on the native IOS app again so I'm going to dim this ionic cap run iOS just so I can bring up the preview uh this was the iPad for iPhone 14 pro I think hopefully uh we're gonna get back to that in a second little app oh it's already running again nice um but what we're gonna do is we can now check when the page loads if the intro was already seen before and once we've seen it we can set the key that we have seen it so let's define a little const up here simply because I like to access keys of the storage with a const so I'm pretty sure I'm not adding a typo in some place and then we're going to add a little use effect snippet uh add an empty dependencies array so this only runs once in the beginning don't add this in there and add a function const check storage gonna be in a synchronous function and once we've defined this we can call check storage here now in check storage what we're gonna say is we're gonna get the scene value from uh preferences get and we just have to specify the key so now we can use the cons this really makes the code better uh and more secure I'm going to actually put a little lock in here so we're going to see what the value is and then I'm going to say set intro scene if scene value is equal to true because you can't actually store objects in capacitor preferences only strings even if you're like Json objects you would have to stringify them to write them to capacitor preference it is really meant for small things there are things that you can use for storage uh for example ionic storage I got more information about this in the ionic Academy if you want to learn more just check it out so I'm going to open up my console again and if I hit save now we see the value is true because I actually have seen the um one before so maybe that's also a good point of time to go to application okay this is getting confused I usually have this on the side uh um how can I get this back to the site there we go okay um there we go uh here is not okay it should be right here there is it under local storage capacitor storage intro scene so I'm gonna delete this key I'm going to refresh the page and then the value is set to null so that was a little debugging of how you can debug storage um on the web it is using storage so there's also the cool thing about capacitor plugin on the web it's simply using the fallback available and on Native devices it would use as we've seen as user defaults or shared preferences with that in place it means we're checking for the storage and we can now also say when we finish the introduction we can set the preferences key value to true just like this and on the next start they would not appear again however if you want to keep that option let's also add something to see the intro again so we can set the intro scheme to false and probably also preferences Dot I think we can also call remove on this one and then we're just gonna add another button below the create account one and uh something like watch intro uh this should yeah again no router link uh I'm actually gonna give this the size small so we have a small button um why is this here by the way and then we're gonna have color maybe something like medium uh type button but anyway we're still in this so let's go through this once so this should have stored it oh I don't want that background in that case I can use fill clear so then we have this button okay so as you've seen I just went through the introduction if I refresh I shortly see this so I kind of don't like the logic here maybe it will be a better idea to set intro scene always to true and only um in this case yeah that should still work fine so now by default it will show the login page only if we haven't seen the intro it would show it so let's just click this um watch intro again uh that's probably not yet connected good point good point so on colic uh on click we're gonna call C intro again and now we're able to retrigger the introduction and it makes more sense like this uh because they will usually just see the intro once so it's better to have this page and then the intro flickers in one you could of course also have some kind of transition but we don't want to get too much into that stuff right now okay we have the registration page we have a user introduction which is connected to our storage and let's do two little things before we move into the inside Area first of all we're gonna create the menu.tsx and we're going to use an ionic react page component and call this menu now this menu should be just like before specified in our app TSX as a route so I'm going to copy this and I'm going to make this under app I'm going to call this menu okay so hit save and on our login page so you would usually do some sort of verifications and the data to your backend and then bring the user to the actual next page that would push the app page on our stick so let's try this out okay this brings us here now you've seen that this was just a replacement of this View if I go back to this um probably we should add something to quickly test this out we're gonna do it like this um so if I hit knock in right now it's immediately replacing this this is because we use root if I would use something else in here and there should be something yeah there is back forward none or root let's see what happens if I use forward go back here and we see we get the push animation so by defining in the router Direction here we can change how ionic will transition the pages this is done under the hood ionic is listening to the changes of the react router and if it's moving forward using the forward Direction it is using the transition defined in the Iona core and the CSS stuff to go forward by the way you could also I think you can also replace that if you want to so we now have this forward transition or you could also use the root transition um from login to inside area I'm kind of undecided I think root is the Ural transition you would see because it's not really like you go back then again from the Locking area so root makes more sense however uh let's make this more realistic but also add a little loading as you usually do some kind of operation with your back end you would present a loading overlay and of course ionic has us covered so let's use another hook I'm going to add present and dismiss from use ion loading close this and then before we do the router push we're going to call present oh come on what's going on uh present could have a message if we want to um so let's say logging in not wait and I'm going to await this as well so marking the function is asynchronous and then usually you would do this once your request has finished we don't really have a request so I'm just going to add a little time out here of like two seconds once we hit that time out we're gonna dismiss so that's the second we added here uh and after the dismiss I'm gonna call Rooter push now if I press login we should see a lowering overlay and we're in the inside Area nice sometimes things just play nicely together and it just works and with ioniq this happens more often than not so you've built this fullblown login page at this point I don't know we're probably in this like an hour now or a bit more but we already have covered the basics of navigation styling some components forums and even login and that's actually a lot now one last thing for this uh chapter of the login page I want to make sure that it's not looking like this on the web so in order to do this uh we can use some grid components you could also write your own media queries of course all of this is just HTML and sees is everything you see in here these are just all HTML components um but there's also the ionic grid system that we can use and most of the time you will native applications and you're just fine by optimizing for this screen however if you really want to go from one code base to a deployed website and Native app you're gonna have to take care of these things as well so let's do this um I'm gonna add first of all to ion content a bit of padding as well I feel like um some petting is always good ion padding that will make our app already look a lot better yeah tons better um and then I'm going to wrap this in an ion grid the iron grid is a simple grid system that we can use you could of course also use your own grid if you want to but this makes it really easy basically you have an ion grit then you have rows and in every row you can have columns which can have a size up to 12 units so you could either have in one row 12 single columns or you could have a column that is four and the column that is eight of a size and by defining these values we can create a cool responsive UI so I'm just gonna say this has a column size of 12 and then we're going to put in our image okay this won't really change anything so far but I can now say that on medium screens for the size MD it should only use eight uh and on LG it should only use six available units and on size XL it should use four available units now as a result this image stays small most of the time however it's not centered but no problem we can change this let's go to the ion row and add class and a utility class ion justify content Center and yes I could have done this basically from CSS as well um I think I have a typo justify content Center and now that one stays perfectly fine in the middle just as it should I think I can also say ion grid fixed so then it has like a fixed maximum value yeah that looks even I think that's even better yeah that's good however our card is not following that styling so let's copy uh this part of row and column and put it down here I don't want to put it in the same row and column setup although you could do this in some cases in here it doesn't really make sense so I'm just gonna grab the whole ion card and throw it into a column of itself and as a result we have this nicely centered page which looks great on Native devices and would also even work if you deploy your page as a website I think that's a pretty nice outcome um by the way we can also now do the same do we want to do the same for the registration maybe that's a little exercise for you it shouldn't be too hard simply put in the ion Grit close the column close the row close the grid make sure you're adding all the Imports and then grab your Ion card put it in here make sure that everything is added correctly I should have just added all missing Imports and with that in place I think yes we do have it in the center as well nice uh this yeah kind of works as well and we can log in and with that we have finished the first part which was the outside area the login screen and the registration at this point once again checkpoint number two you should have a decent understanding of ionic of how we put together some components on the page how we can use them how we can look them up in the documentation so really in the ionic documentation you're going to find all of these components the utility classes everything is usually um explained in detail with a bunch of examples on top of that we have introduced ionicons for icons we have used swiper an additional package is a show that we can use all things from the web all npm packages in our application and make them work and finally we have also already used one of the Native plugins with capacitor preferences which is we can't really see it but we know that under the hood on this native device it is actually using native apis it is using the default on the web and all of that from one single line like set remove or get so we really don't need to care about the native specialty so much if we develop ionic capacitor applications and we can just rely on the plugins and that they perform their work under the hood we will probably later look a bit more under the hood here and there but for now we have finished so far this second part and now the next part is talking about layouts after creating the outside area of our application which is lock in registration some information about the app we usually have an inside area as well and most of the time this is a new layout which is not just pushing new pages completely above the page but instead having a different layout and that's what we're going to implement now we want to implement the traditional site menu layout and we also want to talk about the tab bar navigation because implementing both is actually pretty easy so to get started let's create two new files I'm going to create a list dot TSX so ionic react page component let's make sure that I call this one list as so just do it immediately then would also do this correctly and saying a list and I'm gonna also add a settings.tsx ionic react page components settings and calling this one settings okay good so those are just blank pages that we can now use in our navigation after our login we already present the inside area which is slash app uh displaying the menu page and on that menu page we will now Implement our view so what we need for this is a kind of different setup I'm going to cut this out actually we're going to use this as again and I want to add an ion menu and for the ion menu I'm going to set the content ID to main this is important we're going to have to use this in another place as well and it is right below this right below this we have to add an ion router Outlet there we go with the ID Main and by then connecting the different path to the different routing information we can make sure that our stuff in the menu is working correctly with the main page so the menu of course we know a side menu as this area with links on the left or right hand side wherever you want to have the menu and then in the inside Area you have the actual page think of this ion menu here as our left hand side the actual menu so I'm going to put in the header say something like menu and in the ion content it could be like menu items on top of that we have the ion router Outlet which then renders the actual page and by the way you can already drag this in just like before we have this feature enabled by default so here we see our side menu I can just hide it once again this is already pretty fancy but we don't really have the main area defined so let's define different routes so just like before we're using route from react router I'm going to use an exact match for the path um slash I Think We're on slash app so slash app slash list should render our component list that we just defined before um and then we do have a second one which is actually not using an exact match because we're gonna have to supply some additional settings here later this is settings so we've defined those right now we don't display anything if we check out the URL we just add slash app but we can easily add a simple redirect in here as well so let's say for the exact match path we want to have a redirect um we could also do a list but I kind of don't want to do this I want to do a redirect in that case uh so around not automatically closing please and redirect to slash app slash list so whenever we enter this screen which we currently do from login we're just navigating to slash app we wouldn't automatically redirected to slash app slash list let's hit save let's refresh and we see I can just go to app and will immediately bring me forward to slash app slash list and we've pretty much already implemented like 60 of the site menu at this point let's continue um let's define the path for our menu items we don't have to do this but I really like to do the menu as sort of dynamic as possible so let's call this one home uh let's say the URL for this one is slash app slash list and then it should also have an icon that we can use in the list so let's use the home outline icon and now the import should work nice as well now we also have a settings page okay thanks go pilot Settings app slash settings and probably it doesn't really matter all it is newspaper outline for now okay now we want to create that uh menu view so to create that menu view we're gonna go back here uh in the ion header I'm going to give this toolbar the color maybe secondary so we have some fancy colors going on so then it turns blue actually quite nice and then for the actual menu items we can just use the ion content this is uh completely Dynamic so you have to create this our own it's not really based on or automatically using any kind of path but we can now make this a map function over our um path here but I want to do this manually so I'm just going to close it uh here so what we're going to use is we're going to use an ion item this is a very classic one almost like the card we used before or the button the ion item is a very standard component we're going to add the router link which should point to path.url and we also want to use the key of course and then let's also close it and say something like item dot name um uh okay yeah let's use item here not path that makes more sense uh can we can we go back yeah we can or did I mess up something no here we go we have home and we have settings does it actually work uh this one brings us to app slash settings yes kind of I wonder why app slash settings wasn't displayed correctly alright I finally figured this out so the problem is if you can access exactly app settings we have to go to app and remove the exact match from App otherwise this would get in our way and now we can refresh and I could go to app list and app settings and on both pages I should be able to drag in my site menu also this we can see in the background is changing from settings to home but of course we can improve this so what we notice is when I click this I would actually like to close this view here in that case we can surround our item with an ion menu toggle item so ion menu toggle actually we're going to use the index in here already so then we don't have to use it in here and we simply put the item in here now if I go ahead and select something it will close this and there we go now one other thing is that using items from the menu it should just replace the background I don't really like that it's still showing some sort of push transition so you notice this when I select this it is still showing this so therefore I'm going to set for the router Router Direction I'm going to set this To None So then it won't use any kind of specific transition and it simply replacing the page in the background that makes a little more sense in those cases also should work just fine here settings list works perfectly now um there's a problem if we use this on let's say a bigger screen a side menu is not so super cool so we're gonna have to figure out something for that and as well on small screens we also need this little Burger icon so probably we're gonna tickle the letter one let's go to the list and the settings page and what we can do on those pages is we can change our header area and just like before I on buttons goes right to the starting slot and then we're going to inject an ion menu button there we go and what's the idea of the ion menu button well the ion menu button should be displayed if a menu is available let's add this to the list page as well add all missing Imports and then we have a button to toggle our menu we're going to also make the toolbox color here matching our success color again I'm doing this on the settings page as well actually the buttons belong to the ion toolbar so I messed that one up there we go settings home and we have a nice side menu navigation and many apps this is actually already enough this is the traditional site menu pattern that you're going to see in tons of applications and we can use it perfectly however there's something pretty cool that I of course want to show you because this is of course is all about cool things with ionic and that is called the ion split Pane and at this point it is unbelievable easy to see this so here we go this is right now our app on bigger screens not really super helpful let's go to the menu and before we start the ion menu we will add an ion split Pane and I'm going to set the content ID to main as well when the menu is closed um no actually when the iron router Outlet is closed we're gonna also close the split pane now what's happening let's see on bigger screens we will now automatically have our menu attached to the site instead of being hidden behind this button you also see the button automatically hide because there's no more menu and yes we could change all the sizes and we could change the breakpoint at which this appears so iron split plane um I think there's a show or when yeah when um we could actually set this to an earlier point so it would not already show on the small medium break point or we could set this to the MD breakpoint here I actually kind of like the default so I'm going to keeping it as it was it's probably the LG or XL breakpoint um no I don't break anywhere now it's breaking here however we noticed something else our menu items are missing the problem is that usually the ion menu toggle will hide items if they are already visible so I actually don't know exactly what's the thought behind this because I always have to use it like this so on the ion menu toggle we're going to set auto height to false and then we're gonna see even on bigger screens we get access to the items this is pretty cool if you want to also Target like um tablet size devices so instead of having the site menu it would easily go to this always on menu on the side if you want to and we just got this by adding one little line with the ion split pane to our view also I just noticed that the ion items here are still pretty boring so I think we included icons uh let's do this um we should be able to inject them in the ion item so ion icon slot start using the icon um oh nice and there we go we already got them also here we got them if you don't want to have this Arrow at the end you can also say detail uh false or none I think it's none I'm not completely sure detail or its detailed fault yeah it's detailed faults that will remove the arrow here but still navigation should work just as before so now we got this by the way now we can even see this better if we remove the router direction again then every page would be pushed like this I don't really like this so for split pane for menu transitions this is usually the preferred way to do it so this is how we can Implement a side menu actually that wasn't too hard and because it wasn't too hard let's take one more step and also add a tip bar so we will just add a tab bar to the settings page to make life more fancy um you could also just have the tab bar there's no correlation between having a menu and tab bar you can have one of them or you can have both of them you could have a tab bar in a site menu or a site menu just in a tab there's really no limit to your creativity so let's get into our settings page um and on the settings page I'm actually going to do it a bit smaller organ and bring this up so you can definitely see the footer area here because that's the important part uh we're not making an eye on page but instead we gonna make this ion Taps uh or maybe we need to surround it with ion page I'm not completely sure we're gonna find out that's a cool thing we will just figure it out so we start with the ion tab bar um ion tab bar in the slot bottom actually the bottom slot is the default and top is not really working well anymore and then we follow this up by adding different tab buttons to our bar ion tab button and this should now be related to a specific tab like tab one and it should have an href so something like slash app slash settings slash tab one now we don't really have that tab so probably it's time to add those let's add two files I'm going to add tab 1.t is X and again ionic react page component okay ionic react page component there we go tab one so tab one and another file Tab 2 dot TSX honey react page component tab 2. I really like the snippet it makes it really really fast uh you can just focus on building the stuff so tab one and tip two pretty boring but we can now use them for the tab bar and for the routing because just like the side menu the split pane or the menu had its own router Outlet same is true for ION tabs so I'm going to have this area of ion router Outlet again in which we can Define the different routes so let's see if copilot gets this right slash app slash settings tab 1 should be component settings nope should be component tip one settings I think we're already on the settings page so that doesn't really make sense my friend um route number two is gonna be path to uh Slash app slash settings slash Tab 2 and the component will be yeah tab one of course not it's gonna be tab 2. and there we go and also not even adding the Auto Import cool so those are our two tips and just like before we're gonna have to figure out a redirect because once we enter this page from the menu we're just on app settings so we need to account for that and make sure we activate an initial page therefore we're going to add a redirect for the path app slash settings that should have redirect just like before two apps lettings tab one and then we also need to close the route cool these are the routes we got now what we need as well is the actual implementation of the tap buttons we already added the tab button number one let's give it a little icon ion icon uh icon let's say I don't know triangle I don't really care uh and then we're gonna use an ion label this is always used or many times used if you want to inject some text and there we go tab 1 is ready let's copy this over assign this to Tab 2 and the route tab 2. I'm going to use a different label and a different icon and voila this is our tab bar so with just a few lines of code which actually fit in my zoomed editor we got this tab bar working and it also looks as you would expect on iOS just great we still have this so I can still go to my home page and if I go to the settings page it would show tip 1 and tip two what happens if I just go to slash settings okay which just show and probably on those pages we should also add our cool little uh ion buttons to the ion toolbar so on both tab 1 and tip two let's quickly do this ion toolbar um yes please add all missing Imports this is tab one uh but this well yeah it should happen button yes that's yeah that's right uh and same for tip two so replacing this tab two and making sure we got all the Imports in place now we got this finished we got a site menu where we can go from our list to the settings page and the settings page also has a tab bar navigation which allows us to switch between tab 1 and Tab 2 and we could all the time just also use the site menu same for the web and on the web we even got this bigger preview we got the home screen and we got the settings screen which has this internal tab bar um yes the activation colors are right as well and with that you've already finished and taken the next step which is understanding the different layouts navigation patterns that you get available in ionic applications so we had just the simple push transition push pop in the beginning which just replaces The View and now we also have the site menu which allows us to put different links and items in the menu that's usually hidden or you can also have the tab bar which is a very common pattern seen in most applications from the App Store to Instagram to pretty much everyone using a tab bar and you see the implementation we have in here is really straightforward and pretty easy and it even worked with direct links which is in fact important if you want to display or deploy your application in the end for the web as well as a website so make sure that at checkpoint 3 you have this setup in place that you can navigate around in your application uh we don't really have a button to you go back maybe that should be our last action for this checkpoint so let's go to the menu and Below what we already got here for the path mapping we're going to add another menu toggle this doesn't need a key and it should just say log out um it should use an icon log out outline and the router link is just slash in the router direction should be rude let's see there we go if I hit log out I'm back on my login screen so now we have a full circle from going in navigation and finally tricking that actually I don't really like that it's a button an item so I'm going to make this an ion button instead um and I'm going to use slot start I don't need detail in that case I feel like that's cooler I don't know why expand full to make it cover the whole row yeah that looks a bit better we could probably add some some margin of heading but now we got the nice little lockout button primary color once again for theming and therefore we have the whole area so the next part is gonna be more challenging as we move further into ionic land and ionic components so make sure you're fine until here um use the navigation maybe just add a few pages to get used to the tab bar and the side menu and how it actually works to make sure you really get that nailed down and once you're ready we can continue with the next part now that we have the basic foundation for our application let's focus on the list pay page and really Implement all the things that go into a page which will show us a bunch of different ionic components so let's close the menu settings log in and let's just focus on the list page for the moment and what we're going to do is we're going to add a new function uh we're going to call this get users inside get users we're going to make an a fetch request to the random user API so we can just say cons data equals uh yeah almost that's almost good but I want to use a different API I want to use this one here and then we can say const users await data.json and finally I'm gonna also add a state so cons users said users that's going to be use state and that's going to be an empty array in the beginning okay perfect and we can call of course said users after this one once again this is as much react as you need to understand and if we put out a little lock here and refresh our page you should see uh that we're not yet calling that page good point so let's see we could use use effect but we can also tap into the ionic life cycle of our page that feels a bit more like ionic so instead of using use effect we can also use ion if you did enter did leave will enter will leave so let's pick will enter it should be a nice place and we're going to call get users which will set our data um and then we're gonna already close this okay on top of that we could also use a bit of a loading state so let's say loading set loading use State fault um yeah well initially we're actually loading that's true but once we got this we can call set loading fault but that means we should return some data here so let's return users uh otherwise we couldn't really use that and then we're maybe gonna just say cons users equals await good users just restructuring this a bit and then calling said users in here okay that looks a bit cleaner now if we reload the page and you add some kind of lock somewhere you should see that we get back results and there are like 10 random users with some data included in that response that's pretty nice and we can use this to create a little list in our view so let's go back to our page we already have the header we have the buttons um probably we're going to also add another function let's call this one clear list um that should hopefully in the end yeah basically set the users back to an empty uh array but we're going to implement the functionality later for now we will just add ion buttons in the end slot as I said before you usually have a star in the end slot and then we add a button for ION icons um ion buttons on click clear list and that one shows up in the top right corner in fact this could probably also just use a little icon so instead of clear let's go for ION icon uh slot icon only is another slot if you want to have something a bit bigger so previously we use start and end in some cases you also have the icon only slot by the way all of this is always documented on the ionic documentation for the specific components so let's use I don't know treasure bin outline um ion icon slot um it's probably not using the right color so let's use color light in this case um Iron icon slot icon only uh where did I go wrong yeah this of course needs to go into a button um we actually had it right almost so we just need to make sure that we have an ion buttons outside but then we have an ion button within also adding the import and once we get this ion button uh hello Crush bin outline it's included where's my button am I on the right page actually um I on buttons uh slot and ion button on click clear list an ion icon slot icon only color light and yeah it's icon not name okay there we go now we finally got this man sometimes I really wish there were better error messages but anyway um let's also say in some cases you want to have a search bar well I only got you covered as well so you can simply drop in an ion search bar just like this and it will show up here well that looks pretty horrible now the cool thing is you can actually have multiple toolbars in your header area this is something you don't always see but that's actually a very clear and clean solution so after my first toolbar which has the buttons and the title I'm just adding another toolbar and then it looks like this also on iOS if I go there um actually this was not I should probably reload this application as well uh there we go log in and well it's not perfectly aligned in the header yet so on iOS we probably uh need to be a bit more careful uh we can do something we can say color uh success in here oh I don't want to move a screenshot and if we do this it works perfectly oh that wasn't fixed yeah we don't really need padding we just need to make sure that it's using the right background color so now it's more natively included up there I think that looks better a ton better nice let's also display our content now so in the ion content area we can remove class name ion padding for now and instead iterate over our users so users.map we have a user and probably yeah user and index and I want to write my own expression in here so what I want to use is an ion card just like before because the card is really a great component the card looks great in most cases uh and I think there is one missing bracket yeah now we go there we go um user's map is not a function yeah we probably need to we're setting users to an empty array and then I need to be careful here so this should actually be uh users hey maybe you should return this in the right way because the array has results so I'm going to say uh the get users function Returns the result how do you spell this results um yeah that's better and now I can iterate them correctly so the ion card has a header area and it has a Content area we will only use the content again ion card content maybe for uh giving you an idea of what the header looks like so ion card header and then ion card title test showing this this should render a bunch of cards with the header here and then we could have some kind of content here Below on iOS once again it looks a bit different card has a maybe nicer Shadow so I do like it a bit more but that's just my feeling there we go this is our card this is our playground uh we can now create something in the content let's use an ion item again as I said before this works in many places so for the ion item we have the ion label for some text and for the text we can now render a user dot name DOT first and user name last so that should already give us the starting point good um you might notice there's a little gray boredom this is for items because items are usually displayed in a list so if you don't want that you can say lines none and then that should be gone nice below the label we will also add a paragraph in the label yeah let's use user dot email for a bit of additional information and I also want to display a picture so we can of course create a rounded image that's not really a problem or we can use another ionic component which is the ion Avatar in the starting slot of that item and the ion Avatar just gets an image actually there's also an ion image tag that you can use so feel free to use it and then voila we already got this one nice that looks good that's a good starting point however I feel like this card has a bit too much padding so we've used utilities to add margin to add padding in different places and just like that we can add a utility ion no padding because ionic makes some assumptions about in which places we want petting and it usually makes sense for cards and other things but we don't really want this it's taking up too much space so now if we say IO no padding voila no more Petty also could we could we say large in here would this change anything I don't think it won't really wouldn't really change anything um and let's try so we have the starting slot we have the main slot and we also have an end slot let's put something in the end slot um how about an ion chip yeah there's really everything there's an ion chip there's an ion batch there's everything checkbox uh we got everything so let's use an ion chip in the end slot of the item and let's use the color um primary and what I want to say in that is um user.nationality I think we can just hear user.net yeah and I only have this nice little batch here and again on iOS I think it looks even Doper here on iOS so this is a nice list and once again we're just using the stock the default I haven't done any kind of custom styling and it already looks pretty good out of the box this looks better than most developers 15 years ago could style their web applications like you get this for free out of the box and I think this is pretty impressive so with that in place uh I want to do a few more things so where do we get started um we probably want to implement the reload for the list that's going to be funny so uh we have the button to clear the list um let's see um we probably don't want to clear the list immediately and we show an alert instead and of course come on did you really question this there's of course an ionic component for this let's call the show alert um use ion alert and you already see there's also an action sheet and a modal and a pop over and yeah we can have a lot of fun with that but for now we're just going to use the show alert and we're gonna do this in our clear list so I'm going to just use the show alert hook and then I can pass in an option to show alert uh can we see the properties uh well alert options thank you use ion alert where are the alert there the alert options so this is how an alert could be built you can have a header or sub header message special class and inputs and buttons and you can even have a different enter and leave animation yeah we're not going that deep in it in this course but we got stuff on that in the ionic Academy so you can really do a ton of great things with ionic and the customization if you want to go the additional mile so in our case I'm just going to put in a header confirm I'm going to show show the message I sure you want to delete the users and then an array of buttons now the first button will have text cancel and roll cancel which will allow us to cancel this and the second one will be delete the users and this now has additional Handler inside of the Handler we basically catch the click event of that delete button so we can now close it and close the array and as a result if I now click on this button up here we get this overlay where I got cancel which simply cancels this or delete which actually deletes the list uh once we delete the list let's use another component called toast a toast is also pretty cool it's also um sometimes called a snack bar I think so use ion toast uh really there are tons of helpful hooks available and then show toast yeah that was actually pretty good go ahead copilot message all users deleted and for duration of two seconds and then maybe color danger whatever so if I do this and hit delete at the bottom we would have this nice little toast for two seconds um once again iOS just checking this and this is also very impressive on iOS this looks totally like the native iOS delete uh window I found this really impressing when I used ionic the first time it completely looks like the native dialogue and it's just the web this is not a native control so I can do delete as well and then I got a toast at the bottom as well with a deleted list and again uh works great now the only problem is we don't have any data anymore so let's add another functionality for that let's add a pull to refresh yeah that's not really hard to do with ionic there's a component to do this actually so in our ion content we can put an ion Refresher an iron refresher should go in the fixed slot which means it's fixed at the top and on ION refresh there should be a function call we won't call our gate users we're going to call a different function and within this there is the ion refresher content which you can of course style to your needs as well so let's do a function I'm going to call this const do refresh which actually gets an event I'm just going to use any for now so do refresh goes in here event do oh come on not twice do refresh there we go and voila and within our do refresh actually we should see this there we go there it is um so this is doing the ion refresh and it's doing it until we call event dot Target dot complete so when we call that uh actually not eventdetail DOT complete once we call this it will disappear so what are we going to do well we can say Khan's data equals await get users which means we're gonna have to make this an asynchronous function get users and then we can call set users with a new data and then we can call event detail complete so let's give this a try we got my data and I try to refresh and we got new data nice uh while this is taking place we could also have uh we could also have a loading no we don't really want to I think this is actually better there's no there shouldn't be a loading overlay this is exactly how it should work and once again works really nicely with this dragging factor that you can by the way set of course you can also change the icon so nothing is as it appears well somehow but this is the beauty of ionic that you can customize this and we will get to how we can customize those kind of things okay um we have the list we have a cool UI we can clear this stuff we have the uh toast and alert now let's do something else and that is uh something I really like and it's called skeleton views so while this view is loading it is empty and we can make a view that looks like the data is almost there and YouTube Instagram everyone's using this and ionic actually has a component for this as well which is pretty cool so um below or above our users map let's do another block if we are loading we're gonna do something in here um we're gonna do uh loading and open up a new expression and then we're going to create an array so this is just some dummy stuff uh yes an area with 10 items and using the ion card uh not too much I don't wanna uh put too much in here just want to make sure that we got the brackets right okay actually we're going to have this this which we'll display 10 ion cards and now we're gonna basically reuse what we have in here so this is my ion card content but of course we don't really have an ion image instead we have an ion skeleton text and this could be animated but we're going to use the animated in here so let's replace the name with an ion skeleton text um animated and also a style of let's say just 150 pixels and then for the paragraph down here we're gonna also add an ion skeleton this one won't be animated and then for the ion chip we will actually not display anything so watch The View actually we should reload the page and there we've seen shortly our perceived skeleton views and these are really I really like them uh you can do so many things with the ion skeleton um we could probably add a little time out to our function to make it take longer uh but I don't want to over complicate the code I think you already see how this is working um while we're loading initially it displays these components which pretty much look like what we got you could make sure that they have the right hate so it looks even more natural but this is already pretty epic and of course we got our ion refresher which I still like a lot uh why is this not refreshing uh fail to fetch okay fail to fetch why did they fail to fetch that's interesting okay I'm not failing to fetch anymore okay so this is a pretty cool list already but now we want to add something more we're going to add some modals to this page because modals are very important they're like overlays over your content if you want to show some more information in you know modals which just cover the whole screen and you can close them pretty much like passing or showing a new page but ionic has ways to present a model in really interesting ways we're gonna do a sheet model which we can drag up from the bottom and we're going to have a cart model which follows some iOS guidelines let's see how we can do this so to do this we're gonna uh first of all create those models which one do we want to first I think the cart model is actually a bit easier um so maybe we're going to start with that no actually I think you know what I think the the bottom sheet model is even easier so let's get started with that one um we're gonna do it in a specific way we're gonna have a selected user and we're going to display some information about that user in that model once we click on a card so therefore let's add currents selected user set selected user use date any I'm gonna start with null on top of that we're gonna have to use a little reuse ref so that will allow us to access the ion model element more easily from our application from the code and then we can heat over to our iteration don't use the skeletons uh use the real card and what I want to do is for the ion card on click I want to call um set selected user with the current user of that iteration now this will set simply set the user it won't really change anything but now simply below the ion model ref model we don't really want to CSS class in this case and I can also immediately close the model and within that model what we need is the same setup like we have in a page we have an ion header we have a toolbar we probably have some some buttons and then we also have this is pretty nice copilot you're nailing it today you're really nailing it uh this is uh impressive really impressive uh if you haven't used a copilot give it a try it's just writing your ionic application um completely so um we have our model with the reference um this is important because if we use it like that we can simply attach it in here to for example have a dismiss button to close the model additionally uh we now need a way to check if that model is actually open or open it so what I want to do is um how do we display this um let's say this is open when my selected user is not null I think yeah in this case it was actually already clicked so let's start again and click this now I click on it I set a user and the model opens which is by default just this full screen overlay again here uh same shows the full screen overlay I don't know why the transition looks so horrible uh anyway also we noticed something I can't use it again so I should use um functionally an event here from ionic so not that one but on ION that's usually how the events start and then we have on breakpoint it change on model did this Miss that's what I want so on model did this Miss yes I want to set my selected user back to null um too many brackets yes definitely so now it should work clicking this again close yeah now I can open this what again this is a pretty boring model and I want to show you something that is a lot better and for that the only thing you need to do and this is so funny they introduced it with I think ionic six something is you add an array of breakpoints this is not what I want a year an array of breakpoints like zero zero point five zero point eight something between one and then you're gonna set an initial breakpoint I'm gonna set this nah probably to 0.5 now what happens is this is still the same code we just added those two lines but now we get this how cool is this this is a bottom sheet model that we can simply drag uh in our view and again this should of course also work here um so maybe is this already getting the latest version now this is probably stuck on the issue before so I need to real log in and then I should be able to get the bottom sheet model in here as well so this is the breakpoint 0.5 here's the 0.8 I can't deal any further but I can switch between those two and of course I can close it and with that I also get access to all the information in the model which means I can simply present um some kind of information about the user here in the model that we just selected um so for example in the title we could say selected user name first and last as a result yeah it should cut a lean Theresa Steffi yeah networks great okay that is the bottom sheet model um do you want to see yeah let's first of all take a look at the uh other model that I want to show you and we're going to add that model to this page as well just like we did the previous one in this case days I'm gonna add an ion model again so you can have multiple of those I'm gonna also set the ref to model it doesn't actually matter that both of them are using the same as long as I don't mess up um let's call this card mode I don't wanna I really don't want to mess this up so let's do card modal in here and then we can be sure that we're not messing up anything no I don't want to close the iron page I want to close the ion model of course so for that model we'll just copy the content for now and within the header I'm going to say this is a card model um then we have card model current dismissed to close it and within it I'm just gonna put my card model so how do we display this we previously used the is open property but this is actually not the preferred way the preferred way is to have a trigger now so I'm going to give this a trigger and call this card modal and I'm gonna now add a button to my page which has the trigger as an ID um because we want to use something else let's also add an ion fep button which is a floating action button properties vertical bottom horizontal end and also fixed and within the container of the ion Feb we then have the ion Fab button and this one can have an icon so something like ion icon um probably not the trash bin but add outline makes more sense now you don't really see this but there we go this is the uh fep button down here easy as that it's sticky it's actually very at the bottom but we could change that if we wanted to uh can we add something like class name margin bottom not really I think this is it's in the fixed slot so maybe there's a little issue anyway you could change this if you wanted to the important part is that on click I want to trigger my card model to open and therefore I'm going to give this the ID trigger modal so I'm going to refresh that page because I'm not sure if it works otherwise and on click it's not displaying anything that's good uh probably because it's called card model and not trigger let's try again and there we go now this is of course not a card model a card model looks different a card model is also of course I need to refresh this but I can tell you it's not yet working so what we need to do in order to make this work and this only works on iOS apparently is to give this a presenting element so this is a bit more complicated setup but trust me it's definitely worth it so let's go back to the top of our component and let's add this so we have the presenting element and set presenting element just using use State and when we enter the page let's do this now with a news effect we're gonna set set presenting element to well document query selector I kind of don't want to use it like that so let's add another reference const page equals use ref ion page element uh no actually that was right oh is there no HTML HTML ion there's no HTML ion page element that is interesting I didn't know about that uh well in that case let's just set it to nothing and let's call set presenting element on page dot current and we're just going to connect page with our ion page as a ref so setting the ref here not reference path of course page okay um we're setting this we're setting the presenting element now we just need to attach this and this is now just like before at this point we have a standard model that we display but just by adding presenting element in here we're gonna make this a card model um you're complaining about this well yeah at this point it's definitely gonna be set so here we go and voila the second presentation of a modal which is this awesome looking car on once again this is not using any kind of native technology this is just the web this is the web and what ionic is able to do with taking a lot of time to finetuning and customizing their CSS transitions of these things but to normal users this is just exactly what they expect it's a cart model it's an iOS card model and nothing else apparently for Android there is no such thing as the sticking card of you however it's a quite easy implementation for iOS and something we can easily add to our view now with that in place let's see what we can add to this page as well um probably for our view here for our bottom sheet let's add a segment control that's quite interesting a segment is very common in cases where you have like a home list and you want to switch a filter or something so let's do const active segment uh set active segment equals use date of well that's interesting uh no I want to set this just to any and when I set this let's say to details um that should be enough for making the segment work now in our first um in the bottom sheet model let's find this under the breakpoint we can once again do the cool thing where we have a second ion toolbar included um actually I'm going to use the light color for this toolbar and then I'm just going to do another toolbar and in that toolbar what I want to do is let's see bring this up here it is in that second toolbar I want to include an ion segment control the value is our active segment and on ION change I will yes call set active segment to event.detail.value that's correct Additionally the ion segment did it already closed no that's good so there we go and then we put in two ion segment buttons the first one will have value details so as I don't know details about the user and then we do have a second one let's call this calendar because I also want to show you one more component and with that in place we got this nice little toggle here and of course for the web uh let's make this a bit bigger so you can see this we got this in here as well so that is the segment control now we just need to react to the actual changes of that segment so let's do this in our content here I'm going to give this once again the class name oh I'm sorry uh class name ion padding ion padding there we go and then we can simply check if the oh what is here what was going on if the equif segment is equal to details in those cases I want to show something for example I just want to show an ion card with the user pretty much well it doesn't matter you can do whatever you want user details in here I prepared something like this oh come on now it's my messing up everything so I just made it like another card in there doesn't really matter what you want to do just showing some information you can copy this over from our previous page already additionally if the active segment is equal to calendar I want to do something else and I want to do something and use something called ion date time now this is a very very interesting component and something that people either like or hate because oh we already see it in the background the ion date time component displays this calendar view and there's a lot you can do with this there are so many options it doesn't really look great on the web so let's take a look here um if we go into the calendar on iOS it looks a lot better it really looks like the native calendar component you want to select the time you get all of this out of the box uh switching between month or selecting a different uh year or whatever with wheel Pickers and I don't want to get too much into this component you see we got this by simply rendering the ion date time there's the option to have an ion item which then triggers an overlay of the daytime you can set predefined dates use colors customize this view so it's not just the month view only week only time there are tons of options on this one so I really don't want to show you too much about this just check out the documentation for the ion date time in the button you're gonna see there's so much about ion daytime here um no we could make probably like a three hour course just on customizing date time different ways to use it with an overlay and the date time button is also pretty interesting which is this button which then renders the daytime as an overlay or you could also still have the Picker view which is what we've seen as well to select our dates now this was quite a lot um we tried to build one view based on some data including search bars including portal refresh we have tons of different uh items on the screen and also um I don't know if I'm why I'm getting this as a preview uh and also the bottom sheet modal and the cart model the calendar the segment there's a lot going on in the Stream the cart model so give this some time and play around with all the elements that we added to this page I make sure uh that you get this right however this is now checkpoint four if you don't have this this is not a big problem because we're going to continue with the tabs in the settings page now and leave this page but if you want to explore more of how this page works definitely spend some time checking it out and then continue for the next part at this point we've pretty much covered all the basics of ionic we've built a nice page that looks good that works good that has some functionality and we've used a bunch of components so now let's take an additional step and talk about two interesting things the first thing is animations and gestures and the second is how we can actually customize those ionic components and how they actually work under the hood so let's get started with animations and gestures this is an interesting topic because you actually won't find a lot of material about this topic you will probably find a blog post that I've written about it or you're going to find the ionic documentation on it but actually this is pretty cool and we can easily integrate these kind of animations in our ionic app with some simple code so uh let's get started probably on our tip 2 page so I'm going to close this and I'm gonna see both the apps here um where's my Tab 2 page because that's a blank page and we can create something nice in here um let's start with the animation because setting up the animation is actually pretty easy we can wrap our elements that we want to animate with the create animation component so I'm gonna put this up here and within I'm just going to add a little ion button you have caps lock enable things um ion button and that button should have well whatever let's call this join ionic Academy which you should definitely check out if you haven't done at this point and lose the class name ion margin okay uh where is my type 2 page should be somewhere here there we go so here's the button and within create animation we now get access to the cool API that ionic defined to create an animation you can start by giving it a duration actually I'm going to give it two seconds then you can specify how many iterations so how often should that play I'm actually gonna set this to Infinity because then we just keep playing um maybe I want to also add like a little delay of 200 milliseconds or maybe just a full second and then I can also either animate from two so I can just animate from like opacity 0 to opacity one or what I could also specify is keyframes which allows us to build a more complicated setup so yeah I could do something like this and offset 0 1 okay um yeah let's just let's just try this one if I hit save now we I actually don't know will we see something uh no we won't see because we have only defined the animation at this point so in order to also play this we need to give a ref to our animation and play it at some point which means you have full control over when you actually want to play your animation so let's create an animation ref and see uh use Rev use ref um this should be create animation um and exactly should be null and then I'm going to use this as the ref in here so there we go and now at some point I could play or start playing this animation let's say I will use the ion view did enter so after the user enters the screen I want to use my animation ref and simply call play on it that's what we want to do um play does not exist on create animation it usually should uh let's see this is definitely like this uh yeah this is not current dot animation we also need to access the animation so now when we enter the page it should play our animation let's see and there we go we've created a super simple animation I mean it's not a great animation I'm gonna make this one expand to the whole view but you see the potential of using animation so you don't have to Define your own CSS animations you don't need to bring in another library for animation so if you just want to animate some stuff on the screen the animation API is really powerful there are a lot of examples here uh like the keyframe examples and transitioning color opacity you can also group animations together when they play at different times so stuff like this easily possible with the animations API of ionic it's just one of those additional utilities that make life as a developer easier and developing ionic apps is a lot about this ionic has thought about how to make your life easier and how you can easily build apps and animations um by the way it should also work in my native app let's check it out um yeah there we go Works in here uh just Flawless as well also completely fluent I think it should be definitely 60 FPS I mean it's not a hard animation um it should work also I'm gonna cancel this now because it's going to be really distracting from what we're going to do next the next thing is we want to also create a gesture so gestures are pretty interesting we're going to create an element reference for that as well and that's going to be in HTML div element and then we're gonna Define the gesture on that element and just put the element on our page so uh let's just put it below the create animation below let me just create a simple div element ref will be set to our Elementor F and I'm just going to set a simple style for this so let's say I'm going to use just a red box I want to make this a red box with 50 8 50 and then background color uh background color red okay so there we go we have a red box on the screen that wasn't too hard you can do a lot of things with the gesture and you have full control over what you want to do so to get started you simply need to set up a gesture and we're not using hammer for this um we're using an ionic react gesture and we're not calling new gesture we can actually call create gesture just like we can also create an animation from code by the way and I'm going to already close this to make sure it works okay so first thing we need to pass in is the element then we can give this a name and then it's already happy so that's good now we can Define different handlers so we got an on start Handler on move and on end which means we started the gesture we're moving the finger or the the pointer across the screen and we let go of it so let's define these in their own functions I'm going to call this on move Handler and this one will get not an event but actually gesture detail so I can type this correctly I'm just going to put out a little log message and I'm going to clear the lock here I'm gonna add this as my Handler so on move I'm going to call my on move Handler let's see uh oh that's actually uh we probably also need to pass in the threshold of zero so that means it starts and yes I forgot what I always forget is putting in gesture enable otherwise the gesture is actually not enabled so right now there's of course not a lot going on and I think we're not passing the actual event to my Handler here uh so let's try and refresh and there we go we get a bunch of logs with the gesture details and those details I usually uh the coordinates and where we move the finger and the Delta between where we started and stuff like that so a lot of information about the actual gesture and we can use that information to now move this across the screen so from our detail we can extract the X and Y coordinates and then we can simply set on our element ref current style transform and call translate actually I want to call yeah I think we can just call it like this let's see so now unmove um yes on move I can drag this around and transform it um as you can see it's always going back there and somehow feels very strange so we should probably also add a little on end Handler so let's copy this over and use it as on move end and on move end needs to go in here as well and in that case what I want to do is I want to just snap this item back in place so therefore I'm going to do element ref Uh current style transition yeah that's actually close to what I wanted to do so I want to translate it back to zero zero and I want to use uh 500 milliseconds ease out yeah that should be fine so let's see if I now release it it's just transitioning back but now it's also using this uh 500 millisecond delay all the time which is kinda strange and give this strange feeling so let's make sure that when we uh start the on move or we could probably do this in the OnStar so then we would have a use case for that as well so I'm going to call this on start Handler on start I want to have the on start Handler and within here I'm just gonna set my transition to none so now whenever I start the um gesture it will set the transition to none and I can immediately drag it around and in the end it's just snapping back and with that we have implemented a pretty dope transition um yes that is a problem on Native screens as we've seen here in my native applications so always a good thing to check your views again this doesn't really feel great so to prevent that we're gonna go back to my ion content and once again say scroll y uh folds so if you're working with these more advanced topics you might run into trouble here and there but overall we see we had the animation I can also enable the animation again and then we would have both on the same page uh working in fact uh yeah there we go now it's working again so I got my cool gesture here with the Box the different handlers and also the animation playing at the same time and no problem for the device at all and of course would work in the browser just the same so hope you uh like this quick demonstration of one additional utility but beyond that I want to now also get with you into the details of ionic components um so far we've just used them as HTML components I told you they have some slots and uh what you can do with them and how we can style them with our color or the different properties an icon or um whatever lines or whatever we used but how do they actually work that's an important concept to understand and it's actually not too hard so ionic components use or are web components and they are created with a tool called stencil which by the way is also so from the ionic company so the only company created both ionic framework which is the UI components and bindings capacitor a tool to wrap your applique web application in a native container and also stencil which they internally use to create all of their ionic components so how does a web component actually look like if you never use the web component it's pretty much like a reusable HTML tag that you can drop into any project if you import the right sources so you could have like uh English mytech and import a library and that would be your web component and you can actually check out all of the ionic components for example here on the Iona framework git repository I went into core source components and into the very common item and for the item what we're going to see is we're going to have the TSX implementation and additionally we're going to have some material design styling we have some iOS Style we have an interface but this one is the main file at the top you're gonna find the definition for the item with the different slots available so these are the slots we already use likes and for the item they are starred and helper or error there are also parts and we're going to talk about CSS Parts in a second as well for now let's just take a look at this so we have a class of an item which has a bunch of properties all of these things are the inputs that we use so we could for example now use four lines and we're going to see there's a property for lines it is either full inset or none um just like that we have a bunch of other things to be defined and we can try and use like you can go into the button you can go into the header and you're going to see the same thing over and over additionally to all of this well there's some ionic logic and what happens with the items but in the end you're gonna find a return block for all of these elements and this is basically what the element the HTML element looks like so an ion item under the hood is made up of these things and then there's a slot Define there's a div class there's an ion icon probably available if you have show detail and here's another class so under the hood this is just HTML CSS and JavaScript ionic just makes it easier for us by putting that logic away behind an ion card behind an ion content behind an ion item so you can use these items and they are not part of the actual Dom they're Shadow components in the shadow Dom which means their styling won't spill over to the rest of your application so if you usually write CSS you might like use a class that ion item is using and and then the ion item would suddenly look like the class and you don't really want that that won't happen simply because these are web components and if we inspect our application we can also see this so let's close this again let's make this a bit bigger use the inspector I'm actually going to put this to the side that's what I'm used to for inspecting stuff let's go to elements and let's just go to the ion item here and we're going to see here the shadow root inside the card opens so everything in here in that card is part of that shadow root which is in the shadow Dom not in your actual Dom but we're gonna see here are all the HTML components that I used another Hood in the ionic component now why did I tell you about all of this it's important to understand what these components are they are not magic they're just HTML and it's also important to understand how we can style them because we can't easily style for example the background of an ion item let's do this let's create a new list.css file here and I'm going to import this at the top of my list page so import um list.css so in that list CSS earliest try you use ion item background red no change why is my ion item background not turning red well the reason is that the background of the ion item is defined in the web component and it is hidden in the shadow Dom so in order to inject styling into ionic components we usually need to rely on CSS variables let me show you how you can find them so let's go to the documentation again let's go to components let's go to ion item and if I inspect the item on the right hand part I'm going to find theming so different colors okay that's cool and then we're going to see CSS Shadow parts and custom properties and all of that and at the bottom there is a definition of the different parts we're gonna get two parts in a second for now let's take a look at CSS custom properties because this is the way how we can now inject styling into the ion item using these and you can also find them if you inspect your application if you inspect the application and then use the search for dash dash something it will usually show you all the CSS variables used in something so instead of using background let's try Dash Dash background and immediately our styling is applied because the CSS variable is injected into the component this is how we can style our app and now we could do whatever we want so for example if we want to implement a little hover effect because our app should also work on the web um let's try and use I don't know green like color uh let's see and then we have it working really nice additionally maybe we're gonna change also the color of the text so in that case we can set it to well probably let's let's set it to White uh and then we see the header turns to White of the ion item probably not the best but interesting nonetheless additionally while we talk about colors and stuff you've seen our colors in the beginning so there are a bunch of colors defined by ionic you could also Define your own color if you want like ion color Simon I could Define this in here as well following the same setup but we can use all of these light medium danger warning success territory secondary and primary simply in our files so if I want to access one of those colors I can use the variable function and pass in the name of the CSS variable so iron color dark and now it yeah it's this is the color light dark because previously we had white now it's using this so I can also use primary it should give us like a green bluish thing yeah secondary is there anything better that works as a good contrast well none of them let's really go back to dark but it's definitely changing those colors and just like that you can do everything with CSS variables I could also change like the padding uh if I don't like the padding of that element so let's or set paying star to 20 pixels and would move this along so this is the way to inject CSS styling into our components no in some places uh for example if we have a detail icon uh here in my list actually I disabled this let's enable this again so in my menu I'm gonna say uh detail true again then it shows that Arrow so it's sometimes really hard to style these things now how can we apply additional styling or how can we inject General CSS into components an ionic figure out a way or actually they're using a way they're not inventing this and it is called CSS parts so defining CSS variables for every single property of an element it's not really possible an ionic key can't keep up with that so in order to allow styling different parts of something so that's where the name comes from we sometimes have Parts on items if we inspect the ion item and look for a part we're going to see we got a part native and we got a part detail icon defined in the HTML and we're going to also see this under CSS Shadow part for all of the items you can check this out not all of them but many we got the detail icon and we get the native part and if we use these parts we are now actually able to inject our own General styling without using CSS variables in Target every single property of an element let's try this out as a simple example for the ion item so the syntax is Ion item um part and then the name of the part so we saw there was detail icon and for the detail icon I'll just set the color to um something that's going to be noticeable and I'm also going to set the opacity to one because right now the opacity is like this and we hit save and we see these are just general CSS rules they are not CSS variables and we can inject them now directly into the part so that means we have two options to style and customize ionic components we have the predefined properties the CSS variables to override General things like borders background colors um Shadows there are different things defined for all these components has something that you just can't style because there's not the CSS variable defined in that shadow component you usually have access to this as a part so as we've seen with the item we have a detail icon part in which we can inject any kind of CSS without using variables now this was an explanation about the web components and how they work but there's one more thing that I want to show you that is the general configuration of our app now let's go back to the lockout I'm also gonna go back here to the lockout so I don't really like how the log out on iOS looks it's pretty cool that ionic is using adaptive styling because that gives us material design styling automatically in Android and web and iOS on iOS however if you don't like this on some components you can change this and you can not only change this on components you can also change this globally but let's do one by one I'm going into the login page and I'm trying to find my inputs so those were the email and the password input and I'm gonna add mode equals MD because MD is the material design mode I'm going to add this to both inputs and let's see what happens um actually nothing happens because the page is not reloading right um how can I reload this of course it's not reloading here let's see I'm gonna restart this and as a result we now have the same material styling on iOS that we had before so we can basically Force our app to say hey this component or that component should use a specific mode I can also do this for the button if I think the button looks better with that mode but of course now it's not changing again um so I'm going to stick it to those how does it actually work well the logic for the Adaptive styling is pretty easy just quickly explained if you check out your application uh you're gonna see but where do we go right here at the ion app level it adds the class oh thanks for that uh the class material design or if I would run this now on an iOS simulator it would add the class iOS to it so it really as easy as that we are adding at the top level one specific um class iOS or MD and then all subsequent um components on the page use their according styling or as I said if we want to we can change this on a per component level or what you can do as well you could change this globally and this is now in done inside the app TSX so in the beginning I already hinted at this that this setup ionic or recall has a lot more power and we can actually Supply a configuration in here so you can check it out there's an ionic configuration with a bunch of things that you can globally set you can set durations you can add custom animations which is by the way going back to what we saw before how we build animations yes you could do this to change like how your toast enters the page or how other Pages enter um and additionally like set the global refresh I can tell the general back button text or set the mode and that's what I'm going to try so I'm going to set my mode to iOS and if I set my mode to iOS what happens is on the web where we usually had the material design styling we would suddenly have IOS like buttons and an iOS like header iOS like overlays on the web which is actually looking pretty interesting I usually like the iOS styling additionally if you want something like no animations you could set animated to folds for the whole application not fail could be a fail but you want to do false and as a result everything will enter immediately you see menu opens closes immediately immediately back while the logging still we show that but then it just pops and no transition between a card model or sheet model so these are Global configurations that you can do I'm going to comment these out because we don't really want to use them so I kind of like the material on the web and for Native we have this but this shows that we can not only use these components and you should know understand what those components are they are web components and they're just HTML there's no magic behind them so you can always check out the source code and you don't have to rely on the general styling you can change the modes you can inject CSS variables for The Styling or sometimes use the different parts the shadow part of an item to inject custom styling now with all of that being said I think we've wrapped up the general UI part and now we move more into capacitor end to understand a bit more about the possibilities and the power that capacitor gives our app before we finally build our applications for the different platforms let's take one closer look again at capacitor because we're using capacitor but we're also not really using it yet so the cool thing about capacitor is not only that it wraps any kind of web application in a native container the cool thing are especially the plugins and we're just going to use one of these plugins now in our applications for example let's install the capacitor camera this is a very good example because it's going to teach us about a few different things first of all whenever we install a capacitor plugin it means we need to restart our live reload because we are making basically changes to the native projects so I'm going to use my iPhone 14 pro again and those changes need to be synced so you see this now uh under capacitor uh the installation it will now also install the capacitor camera not only the app and the haptics and keyboard and whatnot that we already had before so with that in place yes it will start up the application again now uh what else do we need to do well if we're talking about Native plugins we're now venturing away from our cozy little web development world and we're entering the world of IOS and Android and those rules are those walls have different rules for example to use the camera inside an iOS application you need to supply specific permissions same is basically true for Android as well we need to use these permissions and this is now I think the first real time that we have to interact with those uh platforms so what you need to do for example to use the camera and this is a common thing that you're gonna do if you're working with Android with capacitor many times is you have to go into the native folder and you're gonna have to find that file under app Source main manifest this is a very um central place every Android developer knows this file there's a lot going on in the Android manifest it defines a few things for your application and at the bottom we're gonna find the permissions block so I'm going to add my two new or three new permissions to read media images and to read and write the external storage and the same is now required for iOS so we need to now configure our info p list this is basically the same kind of file like the Android manifest but that is in the iOS folder under app info PLS a cryptic file with a bunch of strings in here and we're gonna add our own key uh the NS camera usage description uh you can put in whatever you want and then you also usually have like NS photo library usage description and finally uh well no in its location we're not using location uh we're gonna use the NS live photo library add usage description uh to well this is not really we don't really want to scan barcodes uh but anyway you can Define this to your own needs once you create an app I just want to show you that at this point we're kind of mixing web and Native together and we need to take care of that so we are responsible for managing the info PLS the Android manifest in on off our project now how do we actually use the camera that is once again pretty easy so here's an example this is all it takes to use the camera and we're going to use it on top of that I want to install the progressive web app elements I don't want to really talk a lot about Progressive web apps today we could probably have a whole course again on this on Progressive web apps if you're interested but while this package is doing is it's adding some cool things for capacitors so your plugins also show up nicely on the web for example for the camera how do we actually see a camera view on the web well with the pwa elements package we're gonna have a nice overlay for that the problem right now is usually I would install it like this and use it but at the time creating this course this wasn't working correctly with Veet so I'm gonna use the script instead and simply put those in my index HTML somewhere here in the head area I'm going to add the two scripts so that should work as well now at this point we can go back to our application and write the actual code to use the camera uh we're gonna do this on let's say the tab one page that's the last page where we don't really have anything yep so here we go let's simply Define a state image set image and then use state I'm going to set this to any null in the beginning on our page we will then add an image here so image source will be set to our image uh we don't really need an ltch and we of course need a button so ion button on click not really set image on click I want to call a function let's call this take picture it's gonna be an async function so that is what I'm gonna call in here and not this crazy part so take picture there we go and that should probably say take picture okay so we do have a button uh if I don't mess up my code here there we go take picture and also add the expand ion button expand come on full or block whatever you prefer there we go uh image example that's all also the headers counting for that okay now take picture is using the capacitor plugin that we just installed um it's certainly not working like this as copilot is recommending so we're going to write our own code const uh image equals await camera importing from the capacitor camera package get photo and there are a few other things like check permissions but that is usually done automatically if we take the first image we can also use pick images or get limited Library photos actually never use that one before so to get a photo we can supply a few properties like quality allow editing on Android the result type is interesting um that's what we're going to set in a second so we're going to set the result type 2 camera result type so we can nicely import this either base64 data URL or Yuri in this case we're going to make it easy and use base64 because then let me bring this in we can create our own image just like this a prepending data image JPEG base64 and then using the image base64 string that we get picked and the cool thing is this line is so powerful it is so easy we're gonna like four or five lines of code but is is doing so much well it's not really doing much but under the hood this is triggering the right call on Android it's calling the kotlin implementation of the camera on iOS it's calling the Swift implementation of the camera on the web it's using the web apis to get that image and we don't have to care about any of that we can just use it like this and then we set our image and we are happy so let's give this a try I'm gonna now take a picture and this brings up the pwa elements overlay that I talked about so it is now using my camera here I'm going to capture an image um usually there's like a bit of delay on the web so I'm going to use that image and the image is here on the page and we can do the same in here uh I actually don't know that we already redeploy let's give this a try logging go to my page take picture and uh if nothing happens yeah that's a good sign that we probably we did didn't we do it already uh let's see no probably not um or it's having some problems with the update uh ion label no that shouldn't be any problem um okay yeah maybe we messed up I'm just gonna do it again sometimes this is also having problems with the live reload uh in that case you can also just run like one build and we'll do the sync run one build um do that again but now actually it should work because we have set the right plist information as far as I know yeah no it comes up um by default this will open the dialog where you want to take this from photos or take picture on my simulator I will just use photos I'm gonna give access to all photos so this is now the permission dialog that is automatically triggered I'm just going to select this one and then I think those pictures are sometimes really big so I hope it shows up um or we get into trouble here try again let's try this one yeah this one shows up nice so again works both on the web I could also use an image here like one of my angular streams and select basically like a photo library and that works as well so we have image capturing and this is just one of the Native functionalities of capacitor there are different plugins in kinda included so that means they are managed by the ionic company by the capacitor team they are listed here under plugins and apis on capacitor.js home page especially the geo location or the Google Maps plugin is pretty cool which wraps Google Maps and uses the native implementation they have a native hdp plugin which helps you to use cookies and prevent course issues there are different other ones we already use preferences in the beginning local notifications is cool we got push notification stuff so just go through that list and try to use a few of them because they are actually really interesting but besides that there's also one more thing that we can or should do now as we move closer to releasing or building our application and that is also adding um an app icon and a splash screen and for that there's also a package called capacitor assets so I'm going to install this package now in my application uh here we go install capacitor assets and under um we want to put it in here I'm going to put this at the top level so this one expects a folder at the top level called assets hello sorry um Visual Studio you're still with me assets there we go and in assets you're gonna put in an icon and a splash screen so the splash screen is what shows briefly in the beginning of your application when it boots up the icon is of course how your app looks on the home screen of a user so I just created this logo PNG you can create your own little icon or use anything you prefer and once you get that we can use the tool here we can also Supply a dark logo by the way if we want to and this is now the line that we can use to generate our image in fact I think I used this before with a tiny little what I am calling it at assets yes there we go so here's the command I used before npx add capacitor which executes a local script from capacitor assets it will generate the icons and the splash screens using the icon background color or some dark color and for the splash screen also this dark color so let's run this command now and voila generating assets and it did generate our assets for the pwa for IOS and Android and we can confirm this actually so if I go back into the native project um we can check out the app um yes here's the launch screen and we can even see this better in where is it assets right under assets I can now find my app icon in all Dimensions with just one call that was pretty easy wasn't it I love it however to actually get that we're gonna have to remove the application I think uh so let's delete the app and I'm going to hit the reload once again so run please on my iPhone 14 pro and if I now run this this should install my application if there are some caching issues it might use the old version but usually yes that was briefly the splash screen and we also see we got our app icon in place so at this point you're pretty much ready to submit your application um because you got everything in place you got a splash screen uh you got a native icon and everything works we have now also uh used a bit more of capacitor as I wanted to uh say there are also a lot more capacitor plugins in the community so these the capacitor core plugins are just some of the plugins from ionic but there are also Community plugins so under the capacitor community on GitHub you're gonna find more plugins like Barcode Scanner like Firebase packages and a bunch more now they're just 50 repositories I mean that's quite a lot but they're not covering everything so in the past we or I already said that you used Cordova now Cordova has a tiny bit different system of how it handles stuff but capacitor is actually backwards compatibility with Cordova which means if I find like a Cordova plugin let's say Cordova contact picker something like that um this plugin although it's four years old so always be careful with the Cordova plugins they're sometimes not really maintained very well anymore um anyway you can use Cordova plugins holy moly 10 years ago with ionic with capacitor so usually you add Cordova plugins um like Cordova add some kind of plugin but with capacity you can just npm install these and capacitor will make sure that they work like 99 of Cordova plugins will work with ionic and I know the Cordova Community is really really big so over the years they're like I don't know thousands of Cordova plugins but many of them not very actively maintain as people move away from Cordova or shift to capacitor so just want to let you know that in case you heard about Cordova in case you think about Cordova or your company is moving from Cordova to capacitor you still can use these called plugins so with that being said I think we're ready with our app and we're finally able to take the last step together our last mission in this course is building the application and we will actually not only build it for IOS and Android we will also build it for the web and one additional platform in the end that you're gonna be surprised about so we have our application everything is cool and I just want to show you the general steps that you could now take to build out your application in general it would always start with something like ionic build this just builds the web project of your application and you can follow this up with a sync to your native project this is important because we've used live reload all the time so there might be some settings included that your application is using the remote server locally and we don't really want that so before you go live before you release your app you will run just a default build and then sync your app and then you could dive into the platforms you can just run cap open iOS which would open the project now to build and submit your iOS application to Apple you're gonna need a Mac you can do this in the cloud somehow but I said this in the beginning it's going to be painful and I don't really recommend it also if you want to release an app on the real app store you're gonna have to be enrolled in the iOS Developer program which I think is like 99 per year uh something like this 99 so and then you're gonna have to sign your application uh all of this setting up we do this in the ionic Academy I show it in a course or you can also find a big video on this on the uh on my channel so go check that out if you want to release your application basically uh you would go and run your application you would select like the general device and from the top of xcode you would run an archive so not a real build you would just do an archive yes I need to select my uh this for it for an archive to actually work this will then create an archive and you could go through the submission of uploading this to App Store connect and then putting up the images for the App Store the description and all of that stuff so making it short at this point we're basically leaving web uh we're leaving JavaScript and everything that we do and we just rely on the native tooling of the platforms and that is what makes capacitor different to tools like um I mean work with Cordova as well for Expo in the react native World they also trying to abstract this away but usually it's actually not too hard to use xcode or Android Studio so um also the benefit is you can just use the tools available to Native developers and they are usually pretty good you can also build this from the command line or you could change like the version numbers and stuff in xcode so it's not really too hard to manage a few things same for Android for Android you can open Android studio and within Android Studio you will have an option to run a build and create a signed bundle or signed APK you can also by the way just create an unsigned APK which you can distribute to your friend so on Android that usually works a bit easier if you do this you're gonna have to supply some keys for the bundle to upload and then you're gonna go through the submission in the Play Store which again takes some time but it's not really too hard you can find a video on that on my YouTube channel now this is IOS and this is Android um there's really no magic behind this there are a few steps involved but really it's no magic we gonna get more into magic as I'm gonna tell you that our page is just a website it is just a website and because it's just a website with ionic build we've created this dist folder and what I'm going to do now I'm going to do the easiest possible things so I'm going to open my app here and at the same time I will go to um I will go to netlife file I will just use netlify as an example because on Netflix I can deploy manually aside so I can just drop in a folder and that's what I actually gonna do now so I'm gonna drop in my app folder what we just did in here so I don't really recommend this way of deploying stuff you usually connect netlify to GitHub repository and on every commit it will rebuild your app and that sort of thing but I just want to show you that our app is just a website and within like seconds I can and I'm able to deploy this page uh actually oh I dropped did I drop in oh I dropped in oh no I dropped in the whole page that's not what I wanted uh your upload was interrupted yeah please um I definitely don't want to drop in my app I want to drop in the distal I was already curious why this is taking so long so yes please just upload the disk folder and not your whole project with Note modules oh I hope I didn't break the browser so manually deployed let's check it out and here is our application running on netlif I deployed to the World Wide Web working just as before because we're also optimized for bigger screens it's working nicely in here but of course it will also still have the responsiveness of smaller screens everything that we implemented before is now working on the web and taking a picture would ask me for camera access so everything would work exactly the same let's try to just pick this and there we go everything is working exactly like locally but deployed as a website so from our one code base we have now satisfied three platforms already we got iOS we got Android and we got the web but there's one more thing because our application is HTML in JavaScript what is close to that electron right you're using visual studio code so you're already using an electron application you probably also use slack and other applications that use electron I don't want to go too much into electron we got a course on electron in the ionic Academy but I just want to show you how quickly you could also get a desktop application there are like three commands that we need to run in our project to add electron as a platform for capacitor let's do this together first one is making sure and clean this npm install at capacitor Community electron I'll also kill the live reload for now okay second command is for in adding the platform so npx cap add capacitor Community electron uh this might or might not take a few seconds I actually don't know um and once we got that we should be able to open our web application with electron in a native container now we could also have a whole video about talking is electron good for web development or not there's also a rust um you know Tory available now which is on the hood using rust as far as I know but electron makes it really really easy to do stuff like this so let's open my platform and let's see um as far as I know there was a little problem with electron uh but here we go in a matter of seconds we have this native IO uh Native Apple application working uh this is so crazy it fascinates me because it's just I don't know uh crazy the only problem is as far as I know if we use this it's not able to make an HTTP call yet but this is just the configuration issue so let me try and put this to the side and quickly fix this as far as I know we now have an electron folder and with that we can do stuff for the electron app for customization and there's a setup TS and at the bottom of the setup TS I think there's a configuration right here um so instead of doing the content uh like we did it here and comment this out and use this one instead so this will allow access to other URLs as well if I now refresh um the application is gone from electron but opens up quickly again it's also automatically opening this debugging view so again it's just a web application I can now log in and voila here we go we got our app so that means at this point where's my netlify page so here is the netlify page here is the electron page and here is the native iOS application we get everything from one code base and that is the beauty not specifically of ionic but definitely off capacitor um so even if you don't like ionic and the components you've seen the power of capacitor is really fascinating in what it gives us we could also now put in right next to this and see the Android styling but we have covered every platform we have a native application that I could create for the Mac App Store we have a website that I can easily deploy and update and we have a native IOS and Android application that works completely native with an icon and is not distinguishable from any other native application and if this is not showing you the power and why you should use ionic and capacitor then I really don't know if you've made it this far congratulations on taking the first step to building ionic applications as a web developer I think adding this as a skill set to your web development tools is so powerful because you now have the power to not just build websites you can use that skill basically to 99 and build native IOS and Android applications or even desktop applications with electron including the power of capacitor and the styling of ionic you could also now build out that project add a few more pages and make it more logical and then use it as an example in your GitHub repository or show it on your CV to Future employers that you actually got the skill set to build native applications next to creating websites if you found this great there are three places where you can check me out first one is definitely the ionic Academy where I've been teaching ionic Developers for the past six years seven years almost how to build epic ionic applications we also got a private Community where we answer questions we have tons of courses on using Firebase using different back ends and implementing outside of cool features with ionic the second in place is my own YouTube channel so go check it out Galaxy's underscore Dev which is also one of my projects which is more focused on react native in case you're liking that but definitely heat over to my channel as I release at least one tutorial or one video per week over there as well and the third place is Twitter so go follow me on Twitter at schlimzan which is actually a German thing so that was a kind of bad idea but hopefully you're gonna find me otherwise just search for Simon Grimm on Twitter and follow me over there for fresh content basically every day I really hope you enjoyed this course on free code Camp about ionic and capacitor it has shown you the power of ionic and capacitor if you liked it please leave a like subscribe of course to the free code can Channel and let me know in the comments if you want to see me again in a future video thanks for your attention and of course happy coding Simon