Creating a user interface for your machine learning model can make it easier to adjust the model and visualize the results. Great yo is a Python library that makes it super easy for machine learning engineers to create intuitive user interfaces. In this course, Abdul will teach you all aspects of radio, including deployment. Dear fellow coders, welcome to one little coder, radio machine learning AP course 2021. I welcome you to this course. And in this course, you will learn the fastest way to demonstrate your machine learning model using gradient gradients, a Python library, and we are going to learn more about gradients in this course. Follow us on YouTube to learn more about machine learning data science and analytics. This course contains nine sections, and this course runs about one hour 15 minutes. Let's get started understanding what is this course content. The first thing is you will learn what is the current problem that we have in the ML prototyping space. And then you will learn about advantages of radio and what is radio. Next, you will learn how to get started with radio with a very simple example to create your first radio web application. And next, there are a lot of different components of radio. So you have component for image of component for text, you have different components, and in this section, you will learn the different components of radio. And in the next section, you will learn how to handle multiple inputs and multiple outputs in a typical radio application. And next, you will learn about debugging your radio application, and also using a very special feature that radio has got called flagging. And next, you will learn how to improve your radio applications user interface and user experience. This section will also help you understand how can you change the theme and also have your own style in your video application. And next, you will learn how to share the video application with everybody in the world, and also how to add security which means add an authentication layer at the top so that way only people whom you want to take the video application to can check. And finally we are going to finish this course with a capstone project where we are going to build a Gradle application that is powered by deep learning and that deep learning powered radio application, we will learn how to deploy it on hugging face spaces. So starting from understanding the space to completely deploy this application on a permanent hosting, you will learn everything from scratch to end to end in this one hour 15 minutes course, which is about nine sections. If you do not have time for all the nine sections of the scores. What I've done here is at this this particular page, you can actually see that there are certain things, those have been highlighted. And those highlighted things are the most important thing. If you only cover these important things, you will be able to build a decent radio application. So if you do not have time for everything else, you can at least go fast track with these highlighted items. And that will give you the necessary knowledge to build a great new application, which you can use to demonstrate your machine learning model. Let's get started with the course. And I hope you will find this course valuable. In this section, we'll learn a little bit about the challenges that we have in building a machine learning web application, especially for prototyping. So if you go to Google, and then say machine learning web app, using then you will certainly see a lot of suggestions like flask is the Code Stream latest area code Jango, Sasha got all these suggestions. So the first problem that you usually face when you want to build a machine learning web application for prototyping, let's say or even I can say that machine learning, machine learning web app, proto type web app using Yep. So if you see this thing, now you'll you'll see a lot of a lot of suggestions. flask is there. Again, the extremely it is there, you will see Django somewhere. So the first problem that you have is, what is the solution that I should pick for my current need. And it could be anything, right? So you have solutions varying from flask to Django, to streamlet. And a lot of other solutions exist in this space, especially in recent times, if you see a lot of new applications or libraries that helped that that is there to create web application around your machine learning a data science model. So for example, solutions, like for example, if I go online and then look for streamlet versus flask, versus then you see Django dash then vs. Then you see grid view. So basically, if you see the current space, you have all these different Python libraries that is there to create that is there to help you create a web application and on your machine learning solution. So it is very important for you to understand what is the problem that we have in the current space The problem that we have in the current space is that you have either applications like flask, which is usually used for a full stack web application using Python ecosystem flask or Django for that matter. Or you have something like streamlet, which is, which is, again, a very good application library for you to create ml web application, or even any web application of that sort. You can even build a streamlined dashboard analytical dashboard. And you can, you can do everything with streamlet. But you don't need the level of knowledge of flask or Django, because streamlet helps you wrap around all important components in the form of stimulate and you have got stimulated, but components. So now when you see a world video chord, stream rate and video, I've got flask and Django. Now you would start wondering, what is the one that I need to pick. And because this course is about grade, you, I would like to highlight that as grade you fit in this stack. So if you've see, like, let's go to the examples available on hugging face spaces. So this is hugging face spaces where we have got a bunch of applications available. Okay. So now when you go to spaces, and then look for one of the most popular spaces like these are the spaces of the week. So if I look at one of the most popular spaces, when I click it, it's running. And you can you can actually see a great view application popping up. So this is this is built with grid view. So you have an input text, and then you need you can you can do anything like multilingual summarization model, and then you have the ability to select languages. And then you have an output design. So this is the typical use case where you want to use radio or any other solution. So my pitch here is, let's say you want to build a startup. And that startup should have like high scalability and then you want like a production grade application, not now. Now this is the time probably you would start using flask or Django because that's what people do. So you have a flask developer or a Django developer, and then you put together a full stack development team. And then you can start production using your application, will it let's say, like you're building the next Facebook, next Google or whatever the next is, right? If you are in that condition, if you are in that state, then you know, for the web application that we are talking about, for the machine learning powered web application that we are talking about, you need a solution that is quite scalable, that can handle a lot of different things, not just only machine learning, but you know a lot of different things. So you would probably go with Flask, or Django. And let's say like you are in a space where your solution is very confined to machine learning, especially data science machine learning, you want to build a dashboard, you want a tableau alternative. You want easy wrappers around machine learning, you want like simple third party components, I would probably prefer to go with streaming it there. Streaming, it is highly flexible, I love streaming it. And streaming, it also makes it easier for you to deploy. Okay, so this is where streaming. Now in this process in this entire process, let's say you want to build an MVP, what is an MVP? MVP stands for minimum viable product. This is a product that you would build to gain your customer confidence to find out product market fit. To find out whether this is a product that people want to use. That is an MVP. The second thing is while your machine learning team is creating models, you want to make sure that you have the best model in place, you have the best in class state of the art model that is available for your customer. And so you which means you're going to build a lot of models, like you're going to do an experiment probably weights and biases, karma and Neptune whatever solution that you use for experiment, but at the same time, you also want somebody to actually play with the model that you have built. So now we are talking about two cases. One, you want to build an MVP minimum viable product for your startup. Or second, you want to build a web application that is used for iterating your machine learning solution. Now, if you are in this situation, either of these situation, I would strongly recommend using radio because radio is specially built for this purpose, or at least in my opinion, like you could talk Gradius founder, and then probably that person might have a different opinion. But if you asked me, if you look at Radio, if you are in a corporate setup, or if you're a hobby hobbyist, Mission hobbyist, or if you are somebody who's trying to build web application, or like machine learning startup, like you could be an entrepreneur, you could be in academia, you could be a normal data scientists like to build data scientists like me, or you could be a hardcore machine learning engineer who's working for Facebook, artificial intelligence research, or Google Brain or some kind of organization, you could be any of these things. Now, one of the things that you would do across all these different verticals is that you need to iterate on your machine learning application. You need to build an MVP before your startup looks, you know, like go speak. So in that case, I would strongly prefer radio because gradient gives that flexibility to build something like very fast very soon without having to be worried about you know, scalability without having to be worried about deployment without having to be worried about what is the CSS style looks like? What is the style? How do I have to change my, you know, style, like what, how does the head headline or text should look like, I don't have to be worried about any of these things. Because this is a phase, where I'm going to, if I'm, if I'm an entrepreneur, I'm going to probably focus on you know, finding the product market fit, making more people use my product and finding how they feel about it, like how they feel about the solution. Or if I'm in academia, or if I'm in like building machine learning solution, I will be probably more interested in finding the best model that I can serve my customers with. So if you are caught in this situation, so you're not building the next Facebook, you're not building the next Twitter, you are not even you know, building an analytics dashboard, if you are in this situation, but still you want to have application that is to be created fast, that is to be created and shared with everybody. And that also has, you know, some flexibility to deploy permanently, then I would like completely support picking a gradient for this purpose, because I strongly feel gradient is used for this purpose. So if you come across a question like radio versus stream lit versus flask versus Django anywhere on the internet, then probably my take on that is you have to use different products, different libraries, for different stages of your product lifecycle, if you're an entrepreneur. So if you are in an MVP phase, I would close my eyes and then pick radio. If you are in a phase where I'm going to deploy my production grade machine learning solution, I would probably go with, like, if it is only a machine learning solution, but it's only a machine learning solution, probably I would go with streamlet, again, like slightly an enhanced version of me MVP. But if you want like a production grade solution, like let's say I'm building the next Facebook or Twitter or something, then I would probably go with Django, something that has people, something that people usually use for production grade web application, something that can compete with the JavaScript ecosystem. So this is how I usually see this problem. But you can see the natural problem that we have here, the problem that we have here is not about which solution to pick. But generally, if you want to build a web application, you don't want like, you don't want a public building a web application to be an overhead for your current problem. So your current problem is solving a machine learning problem. And you have to just solve that you cannot sit and spend your time on learning how to you know, connect your API is within Java, like a flask, you cannot, you cannot think about how to you know, get your app routed to a particular link, you cannot do all those things. These are like roadblocks. These can inhibit your progress in your machine learning, research or application or whatever you do, right? Whether it is machine learning research or applied machine learning, you don't want a solution that can stay in your way prohibiting inhibiting your progress in doing something greater than just building an application, you want a solution that should make it much, much easier, just like icing on the cake. To enable you build a web application that can help you serve your web application. So that can help you serve your machine learning solution as an application that the entire world can use, I would strongly pick radio. So if you are wondering why radio, then you do have the answer in this video, which is to say that I would pick radio whenever I want to show machine learning demo whenever I want people to use my models. And I want to build an MVP. And whenever I want people to actually you know, play with a model and iterate on it and then find the best solution. So internal or external, customer facing or internal, you know, like machine learning engineers, iterating, whatever this is, this is a place where I would probably pick Grady over any other existing solution because every solution has its own place in the machine learning lifecycle or product development lifecycle. So for this particular phase, I would pre grade you and then we will learn more about grade you as well in this course. A quick introduction to grade you. What is gradient gradient is the fastest way to demo your machine learning model with a friendly web interface, so that anybody can use it anywhere in the world. So gradient has this pitch that says, Build unshared, delightful machine learning applications with anybody in the world. And what does it mean? It means if you have to demo demonstrate your machine learning model, you don't have to create a full stack web application. Rather, what you can do is you can wrap your function with gray do and then gradient would be able to create a web interface for you. As you can see on the screen, it says, with five lines of pure Python code, you should be able to create a UI around your machine learning application. Let's look at the example here. So let's look at this sketch recognition. So you've got handwriting recognition, machine learning model or sketch recognizing machine learning model. And then you want to create a web application around it for people to use it. For people to experience how good your machine learning model is, it could be a that you are creating a demo for somebody else. Or it could be that you want to yourself, check the validity of your machine learning model, the efficiency of your machine learning model. So for you to do all these things, if you have a web application that you can play around with, that is a great, great way for you to learn how your model is performing. And usually, typically, it's not an easy task for you to do. And gradient makes it really, really easy. If you see this code here for sketch recognition, the first step is import the library, then wrap your sketch recognition model everything within a function and use that function as a radio interface. And the input in your image, you can see that the input image, which is the input for the function has been given as an input image here, and then output you're going to label the output like the display the output. So let's go ahead and then try to use this application and then see how it works. So you have got a canvas here. And this canvas has an attachment output. So you have an input, and you have an output. So let me clear this. And then you can see there is like there is nothing here, right? So I'm going to clear this and then say, three, okay, this looks like three, yeah, you can see that it has gone to the machine learning model, and the machine learning more or less, try to figure out what is this, and then it has given you the output score. So this is the easiest way, let me let me write something very ambiguous. Okay, so I'm going to write like this. Okay, for not very ambiguous. So if I do like this, yeah, so now, you know, it doesn't know whether I'm trying to write nine or six or for whatever it is, right? So this is how you can actually see, okay, where are the places your machine learning model is not doing good. And then you can probably fix that. And that is, that is one of the advantages of using radio, because radio lets you do that with a very, very simple interface, all you have to do is wrap around your machine learning functions, whatever you're doing within within our like main function, here speech recognition, and use that function as an input to the radio interface. So that is your input. And all you have to do is import the radio library and like that, you can see couple of other examples that is there on the website, question and answer you. So you have got a question. So the idea here is that you can use it for computer vision tasks, just like this. You can use it for NLP tasks, like a question and answer generation, you can use it for speech recognition, like you can speech detection and translation, text to speech, speech to text. And also if you want to, you know, Mark some mark some like segmentation within your image, you can still do that. So these are like all the examples. And the one thing that common you would see across all these examples is that you import the library, you wrap it around the function, and then you have the grade your interface, skates, recognition, question and answer and everything you would see the same thing. It might be that you know, the number of inputs differ, like, for example, in this case, you have got two inputs, right? But but the fundamentals are same, you do the same thing, and then it just helps you create that interface. Okay, so now we know that radio is an application or like a Python library that can help you create easy web interfaces for your machine learning model that could be shared with anybody. Let's look at some of the companies that are using radio. So if you see the logos that are available here, you can actually see that almost all reputed companies that use machine learning model you can see like Google is their Amazon is their Facebook is that you can call it meta, whatever you want. Cisco is they're hugging faces. They're VMware Siemens, like all these companies, and also educational institutes like MIT and Stanford, all of them are using radio. So this is, again for you to gain a confidence that this solution is there to exist. It's not a solution, you know, that's bi, that is just used by a bunch of hobbyists, gray area is a solution that is being used at corporate level and academic level. And it is a way forward for you to demonstrate your machine learning model, if you are not using radio. So what are the advantages of using radio. So first of all, Gradius quite easy and fast to setup. All you have to do is install radio. And you all know like, if you're in the Python ecosystem, you know that all you have to do is pip install radio. And creating a great audio interface requires one only a couple of lines of Python code to your existing project, which means you don't have to change a lot of things in your code existing code because that shouldn't the objective of creating a user interface for your machine learning model shouldn't be shouldn't be a roadblock in your machine learning itself. So that's the whole point of Grady, right. So it's that you just have a machine learning model and all you wanted to do is create a UI now You don't have to deal with you know, a lot of API's, you don't have to deal with a lot of new classes, a lot of new libraries, the whole advantage. And the point objective of gradient is that you keep your machine learning code as it is. And all you have to do is add a couple of lines of Python code like pure Python code. And then that entire script is now turned into a UI user interface that anybody can play with. So So that's, that's the greatest thing. So fast and easy setup, that's a very good advantage that you have got the first. The next thing is, you can present this as part of a lot of things. For example, you can present this as part of your Jupyter Notebook, or Python notebook to be precise, because now you have got a lot of different notebooks, right? Zeppelin notebook, Jupyter, notebook vs. Code notebook. So you can present it as notebooks, like embed within notebook, or you can also present it as a separate web page. So you have the liberty for example, if you're prototyping something on a Google collab notebook, you can still create a radio interface within a Google collab notebook and radio will give you a URL which you can use to embed this radio UI, the web application within your Google collab notebook, which means let's say I want to publish a paper, right? So what is what what what is papers with code, so you try to publish your paper with the code. But imagine you can publish your paper, not just with code, but also with a web interface, where people can play around with your model, like, now, this is going to prevent a lot of things. For example, let us say there is a bias in your model. And then you have no clue about the bias. But before the model becomes mainstream, somebody plays around with that, and then come up with the bias, like identify the bias. And you can you can actually see a lot of people have utilized radio to find such biases available in image segmentation model language, language models in the past about a particular community. So gradient has been already used, where biases have been identified. The second thing is adversarial attacks, when you have a machine learning model, you want to make sure that you know, the models are not going to be attacked by you know, some some silly examples or some, like it's not prone to adversarial attacks. So for that, you cannot make sure everything and then you know, the community can always help you. And for that, again, like if you have your model, and you believe it's a very good model, you believe it can do something good in the world, it's, it's very important for you to make sure what kind of adversarial attacks this model is prone to and for somebody to actually even try out that adversarial attack, they need something to play with, right. And radio can be that. So radio could be embedded within your collab code, Google notebook, sorry, Google collab, notebook, Jupyter notebook or any sort of Python notebook and also as a separate web page. So you can just take the link and then share it with anybody like it generates a public link for you. And then you can generate it with anybody Imagine, imagine, like you're you're trying to attend a machine learning interview, and you have been asked to build a model. And then instead of just rather giving just a model in like a pickle file, you can actually build an interface and then share it with your potential employer, or you're going to go to a conference and then you want to, you want to show something out of your machine learning. And instead of having the machine learning model on your PowerPoint presentation, you can also have it as a web interface, where all the attendees of the conference can play with so this is enormous potential. And that's the second biggest advantage of radio like you can present and share radio applications within notebook outside of notebook with anybody in the world. Another third thing is if you want to do permanent hosting, like Until now we were talking about temporary hosting, you get a you get a like a URL that is like an ngrok URL and then you can share it with anybody but but if you want permanent hosting, today, you have a very good option which is called hugging face spaces. So hugging face spaces is an initiative from hugging face the machine learning company that used to be the NLP company, where you can deploy your very interface for completely free, very easy, very simple, I've got a separate video about that already, I can link that in the YouTube description. But otherwise, you can also check it out. At the end of this course we will learn how to deploy a radio you AI radio app on hugging face spaces like even without even touching your local machine completely coded on the web and also deployed deployed completely like seamlessly and the workflow is really really easy. So, if you want permanent hosting again you have a very good option the form of hugging face spaces to host your radio application now that you are you could share it with anybody you can I mean you you can now share it with anybody permanently not just like a temporary interface. So easy and fast setup, you can present and share the radio application with anybody in the form of notebook or web application. And finally, you have the ability to permanently host radio applications. These are these are really good advantages and like I said before, have letting people to play around with your model has a lot of advantages. In a corporate world and also in an academia. Oneness like I said like you can eliminate bias you can eliminate adversarial attacks second Like, you can actually let people play around with something that you have built, which is the whole point of building something, right. So a lot of advantages of using radio, radio has very good interface with hugging, face, Jupyter, notebook, matplotlib, NumPy, pytorch, scikit learn and a lot of other machine learning libraries or scientific stack in Python. And you can see already there are a lot of people who love using radio, and then they have Windows radio to, to use radio as a solution to do a lot of things. For example, if you see the last example, it very clearly says honestly, without radio, we wouldn't be really doing a real time a trial. So in clinical trials for them to try out their algorithm, they have used radio and like without NLP, again, somebody has used radio. And you can you can actually see a lot of different use cases of how people have used radio and what are the things that people have used radio for. So if you're interested in taking your machine learning model, and then making a full stack application, this course is for you. So we'll learn more about radio in the future section. In this section, we're going to learn how to build our first radio application. Previously, we learnt about why do we need radio and what is radio and some of the advantages of radio. And so here, we are going to start with coding. And to code, I'm going to basically use the Getting Started page on radio. This is quite a comprehensive page. If you don't prefer watching a video, I would strongly recommend you to check out this page. So to code I'm choosing Google collab interface. So I've created a Google collab notebook. So all you have to do is go to go to Google and then type Google collab, you would get an interface and you have to go to File and click new notebook. Once you click new notebook, you would get something like this. And then you can change the name of the notebook. So I've given the name here called Building your first radio web application. Let me zoom it, zoom it a little bit so that you can see it. After you have all these things. You can connect with the Google collab notebook. Basically, Google collab notebook is Google machine that Google gives us to practice machine learning, like create applications, whatever, like create scripts, whatever you want. And this is a notebook interface hosted on Google collab. So at this point, you can see like you have got a machine like you have got a decent machine. And you can see the missions usage here, like the RAM disk, all these things. For our purpose, you can do the same thing on your local machine as well. You don't you don't necessarily need Google collab. But if you need Google collab, you can use that as well. So the first step, after you have the Google collab interface is basically you will have certain basic Python libraries that are predominantly used in Python machine learning stack for just just by default. For example, if you want pandas, you would already have pandas here. But if you want something that is not available there, then you need to unity unity install the library first. So in our case, we are going to install CREATE VIEW. First, the first step is installing radius. So I'm going to say, Pip, let me delete this, I'm gonna say pip install radius. So first step is install the library radio. And you can you can see that it is getting started. If you face any issue in this, basically, all you have to do is go here, and then just restart runtime. Yeah, restarted runtime. After you restart runtime, you can see the runtime gets restarted. And after the runtime has restarted, you would see being connected to a machine. So this, this icon would change like from orange, so you're getting a new machine allocated. After this allocation, you can again install the library. So whenever you face an issue, on Google collab, all you have to do is go there, and then restart your runtime. But make sure if you have anything temporary, like a temporary variable store, when you restart runtime, it may not be available for you. So let's wait for the machines allocation to happen. So the first application that we're going to build would something look like this. So you're given him and then it would give an output. And then I'm going to explain you every single part of the code. So that's going to be this particular section, where you would get to learn the radio web application. Once your connection is established, you can see this here, and all you have to do is go ahead and then install the radio library. At this point, the radio library would get installed. It's a very lightweight library, so it shouldn't take a lot of time for you to install. So you can see that the video library has been successfully installed. So after the library is installed, you can you can basically like just for the sake of sanity, I'm going to clean my outputs. But here you can just keep it as well or you can install it quietly like this. So after the upgrade your libraries installed, the next thing that we're going to do is we're going to build our first application. So the first thing that we have to do as in every time Under libraries import grid view as gr, so you're basically importing the radio library here with the alias GL, the next thing that you have to do is you need a function. So a radio interface has three components of function, input and output. So first, we need to define the function. So let's say we're going to define a function that says hello world, okay? Very typical machine learning stuff, programming. So where we are going to return saying, hello. And probably an emoticon plus the name, the name, okay. So this is what we are going to do. And maybe like, if we want, we can, we can add something to this. So this is a function if you want to see how the function works, what you can start doing is you can call the function and then you know, pass on some name, maybe you can say, to coder, and then see whether it outputs okay, it it outputs Hello, one little quarter. So let's, let's give some space. So that we have this thing. So now our function is set that that function main function that you want to create, assume that this is your machine learning model, right now you don't have a machine learning model. But it's like you know, you could be you could have a speech translation model some some machine learning model. So now that you have got your function, now let's start building our radio interface. So the radio interface we want to like you can call it anything you can like, I can just call it interface. So I can say interface is equal to, I can say gr dot interface. And within this, I'm going to have three main components. One is a function, so they just call it wait. Yeah, one of the function, the function, what we want to call here is hello world. And then the second thing is an input. So what kind of input do we want? Do we want to capture a text input? Because that's what we're doing here, right? So text, and the third is output. And what kind of output we want, we want the text output. So text input, text output. And also what is the function. So now let's define this interface. Okay, hello world is not defined. It's because I've made a stupid typo. Okay, hello world is defined. And then we have got the interface now that this is successfully run, the next step for us is to launch the interface, interface launch. And once you launch the interface, ideally, you should be able to see the application somewhere here. So let's wait for it to launch. So a couple of things would happen behind the scenes. So Google collab notebook, if you want, if you want. If you want the notebook to show, like if you want to debug, so you need to use debug is equal to true while launching, you have a public URL as well. So this link will expire in 72 hours. So if you want, if you want longer links, probably you need to contact radio support, which is not required for us. And then also like you have, you have the app. Okay, so let's click the link, then go here and see, how does it look like. It's loading, as you can see. And we have the same application embedded here as well. So we can see the same thing here as well. So you can see that of the name, and you have the output. So let's say I want to give one little coder and submit this. And then you can see Hello, and little code. If I say hello, Python with an emoticon maybe in face emoticon, and then submit. So you get this. So basically, you have something you submitted. And while it is run, you can see you can see something happening here, click this you can see you can see that right so you can see that this has been processed. And then you can you can take a screenshot, if you want to flag it, you can do do all these things. If you want to clear this input, you can clear this input. So these are like the basic default options that you get with radio. But again, this is not what integrators and the same application, whatever, we just open with a URL. So the URL is useful for you to share it with your friends, and potential employer colleagues, like whatever whoever is on the world, the planet with internet connectivity. But if you want to share this web application as a Google collab notebook or Jupyter, notebook, or any notebook of that sort, so you can still do it because if the same thing is also embedded here, so I can go here and then say, gradient, okay, and I can put put some magic one. And when I click Submit, so you can see that it has taken 0.00 seconds like very, very minimal time. And then you can see the output as well. And if I want to take a screenshot of this, I can take a screenshot of this. So at this point, we have successfully managed to build our very first greedier web application. And in the next section, we will learn how to improve this web application is This is enough for let's say computer vision problem No, this is not enough. Is this enough? Where we need to have multiple input option or this is not enough so the next section we're going to learn the customizations of different components that are available in grid view. But at this point, you should be able to code your very first video web application. So congratulations to you. In this section, you're going to learn how to customize radio components. Which means in the last section, you learned how to build a very simple radio application. And this section will help you to improve or enhance your application for your needs. So if you remember what we learned in the last section, a radio interface, a radio application, the interface is a core interface class, it actually has three main parameters. One is the function, the function is where the input is passed on to. And the output of the function, whatever you're returning from the function is shown as an output. And if you remember, that's what you have. So you have got the input, and you have got the output, and something goes between it that is a function. So now we are going to learn and finally write, of course, after you do all these things you're going to launch. So basic, the basic skeleton of a radio application is you have the import statement, you have the function, then you have the interface, then finally, you're going to launch. Now we are going to learn how to customize these components like input, output, or also anything else that is available in such a way that you can build slightly more complex applications, because that's the whole point, right? Nobody is going to just take a text, and then show something. I mean, like you can build gradle applications like that as well. But our whole point is to do something beyond this. And then we can see, we can learn how grade your supports us or enables us doing that thing. And once again, like I said in the previous video, and basically using the material, the code that is available in the radio documentation, I strongly recommend you using this documentation. So if you have any, like if you have any concern, whatever I'm showing the video, you should definitely refer the documentation because that is exactly what I'm using as well. So let us get started and then try to understand how to customize our radio component. So currently, our radio application looks like this. So we have a name. And we have an output. Okay, so there is one mean, and one output. Like right now you can see the textbox is not very big. What have you need a bigger textbox? With a valid question, right. So what if you need a bigger textbox, all you have to do is you have to create an input component. So I'm just copying the same radio interface that we already had. And instead of creating a new function, I'm just going to show you like we can keep the same function, which is the hello world in this case, but I'm going to show you how you can change the input. So what we are trying to do is, we are trying to make this input slightly bigger. And for that, we are going to use a new component from radio, which is radio because we have imported grade us. And here, radio inputs. So we have inputs. And within that you can see you have a lot of inputs, like you have audio checkbox, data frame drop downs, you have a lot of things. And then the one that we are interested in is we're going to use a text box. And the text box takes an argument that says lines, number of lines. So let's say we want a five line. And then we can have a placeholder text, the placeholder text is enter your input here to the reader. And then we can now execute this, and then say interface dot launch. And you should did I just, yeah, that's mine. And then you can launch the interface like you can see the interface. And you can see there is a different URL altogether. But you can launch. So now you have a bigger name. So instead of had having a smaller name, so if you want this to be more like a lot bigger than you can, again, change the number of lines, and then you can have a bigger textbox. So this is how you can customize the input. Okay, so you had function, we kept the same function, you had output, we get the same output, but we just change the input from a simple text box like a single line text box into multi line text box that gives us multiple lines of the code. So this way, this is a simple example for you to learn how to change the radio components like how to change the radio component within the grid application, so that you can have multiple lines of input text given that this is a text, let us say we don't want text. Okay. Let's say we don't want text, but we want an image. So in the next section, we'll learn how to build an image input. Instead of text input, we'll learn how to build an image input. And that image input will be used for some kind of machine learning one second. So for that, let's go to the radial documentation. And there is a very nice example that that is given. We're going to take the same example. And then I'm going to show you I'm going to explain you the components. So input radio's Jr, same thing. NumPy is for image processing, we are just going to apply a sepia filter. Okay, so we are going to take an input image, and then we are going to apply a sepia filter. And then that's it, let's let's leave this function because this is just going to apply a sepia filter. So the most important part for us is instead of having a text, like as in here, which is which is here, right, instead of having a text box, we are going to have an image as an input. And then we are also giving the shape of the image. Okay, and the output is also supposed to be an image. And once you run this, you can see the, you can see the textbox like I delete the box, so you can click and upload it, or you can drop down the image. So if you have downloaded the image somewhere, then you can drop the drop down, drop the image here, and then that will work. So I can, I can show you a sample image. And then we can see how it works. So I've selected an image from my folder, and you can see the image is available. So I'm going to click submit. And then you can see that the sepia filter has been applied. So basically, instead of having a text input, you're getting an input image. And also the output format is an image. So again, this is not named document like if you want named again, you can say my function is equal to this, my input is equal to this, my output is equal to this. But if you don't want that to happen, like if you just want to just want to give this like in the same model, you can do the same thing as well, like you have the grid your interface, your function, your input and output. And in this case, image is not input is not text, but it is an image. And you get that from the inputs class. So inputs image, and then output is also image. So we have successfully learned in this section, we have successfully learned how to use radio two to build an image application like an application that takes image as an input, and also image as an output. So now that this, this is quite interesting, right? So we first saw text with them. So image, but now the question is, what if we want to work with tabular data. So in the next section, we're going to learn how to build a radio application that takes tabular data as an input. And once again, like I said, we're going to refer the radio documentation. So radio documentation has a very nice example, where you work with tabular data. So there is a tabular data and that tabular data has been taken inside and then you know, some kind of data transformation and not not to the ETL level, but some data transformation is happening. And then you can see there is an input data frame. So there is a data frame as input. So this is again, use this for an example. But you could you could be reading the data frame from your CSV file, and you could be displaying as well. But the important thing that you have to note here is you have an input component called data frame. So like you had text box like you had image, now you have an input format called data frames, and also an output. So you have like data frame as an output, you have plot, and you have NumPy. So you have input, and you have output, and you have the function, and we can add a description as well. So this is something that we have not seen before, where we didn't see description, but we have seen a description. So let's launch it. Once again, it's loading. And then you can see that you have you have an input data frame, if you click submit, you can see output one is a table. So you can see you can go to the function and see it's returning three things. One, you are returning a tabular data frame, second, you are returning a plot. And third, you're returning a numpy array. So you have an output, you have a plot, and then you have a numpy array. So if you want to change the value, again, like go ahead and change something around it. And then you would see like, again, ideally, in an ideal world, you will not define the data frame asset is probably you would be loading a CSV file or something. And that's what like when you load a CSV file, if you have a different value, click Submit. And then you have three outputs output one, output two, output three, so you have three outputs. If you again, if you want to change it, let's say like you don't want the outputs, you just want a plot, we can go here, delete whatever we are returning, and then we can come back here also delete the output format. So we have only plot here and then run this again. When you want to run this thing, you would have only the input and output. And then once I click submit, you can see the output chart itself. So again, you are not specifying where the output should be shown. So if you had noticed, when we had more than one input, sorry, when we had more than one output radio itself managed to display output one by one, but typically if you're building an application using any other existing tool, so you have to manage that you have to manage how this search so on, you have to manage whether it is responsible or not. But here you don't have to be worried about it. Once again. You have the output here, if you want to change, then you can change. Again, like we saw before, if you want to take a screenshot, you can take a screenshot, or right click and save the image like whatever you want to do, you can basically do and this is how exactly, you have an input data frame, you have an input data frame, and you have an output plot as a chart. Okay, so so far, in the previous sections, we have learned input text, input, image. And now we learned about input data frame. And that's quite helpful. So these these are the three main formats that typically a data scientist or machine learning engineer would be using. Again, you can have audio, right, so the potential is enormous like you if you want audio, all you have to do is go here, let's say inputs. And you can see you can see audio. So you can have audio, like you can have audio and lot other things. But if you ask, like a typical machine learning engineer, or a data scientist, image, text, and these are like a few valuable with me, a few valuable things, a few valuable formats, tabular format, image and date stuff, few valuable formats, typically, data centers, machine learnings, use a lot. So we have learned how to create a radio application text application, how to create a great year image application and also how to create a radio application that takes a tabular data has an input. So now we have explored different components like image, text and tab, data frame. The next section, we are going to learn how to use this different components and also have different kinds of input. And more than that. So let's see in the next section, how to use multiple inputs and outputs in your radio application. So far, in the previous sections, we learned how to build a simple radial web application. We also learned about customizing components like different formats, exploring different formats like image, text, and tabular data. So in this section, we are going to learn how to use multiple inputs, not different types of inputs, but multiple inputs. So not every time you want to use only the same input, right. So for example, if you see here, you have one text box, if you see this example, you have a bigger text box. And if you see this example, you have got one image. But what if you are in a situation where you need to take multiple input from the user, and you want to process it in such a way and then give some output. So for that, what we're going to do is, we're going to make a simple function, just like a Hello World example. And then we are also going to learn how to handle multiple inputs in a grid your application. Once again, like I say, in every section, you can always explore the documentation for this part. And it is quite comprehensive. And the examples that I've taken for this code is again from the documentation. So let's start from scratch. If you have not even you know, seeing that, whatever we did before, so we are importing radius, Jia. So that part is done. So the next thing is we need to create a function, we need to create a function that can do something. So what we can do in this case is we can say let's calculate BMI, okay? I don't, I don't necessarily know the formula for BMI, but I'm just going to take a short BMI. And let's say we want to take BMI for a person. And then we want to take height, and then we want to take weight, okay. And then we are going to calculate BMI now, so and then we are going to also thank the person based on the BMI. So the first thing that we need to do is, let's get the BMI calculation, BMI formula, let's say and then okay, basically it is weight divided by height square, and the height should be in kilograms, the weight should be in kilograms, and the height should be in meters. So what we can do is we can say, Okay, first let's do the formula. And then we can we can have a description. So BMI is equal to BMI, Val is equal to height, weight, divided by height squared. Okay, use the parentheses so that you don't have confusion about anything. So now that at this step, we are calculating BMI. So we're going to say, print. And then we're going to say hello. And the name of the person, which is in this case is name less, some thing and a new line and your BMI is and then you're going to say str of BMI. Okay, let's run the function. Oh, I didn't return anything, right. So I should have ideally return this return this. Let's run this and then try to give the value so I'm going to say one little quarter, and the value which is 220. And then wait Let's say 15. And the BMI is point 334. I have definitely missed up this formula, which is kilogram weight divided by height square. And height should be in meters. right height should be in meters in the sense. One point, centimeters. Okay, 1.2 Maybe. Yeah, so we have got a BMI. So approximately our formula works fine. So that BMI participation. So the next important step for us to do is, so make sure that you have three inputs, and one output, right? So if you want two outputs, we can still do that. But right now we are exploring only one output. So what we're going to do now is we're going to say, okay, interface is equal to radio interface of, and then we're going to say, function is equal to BMI, that that part is simple inputs is equal to, what are the inputs we want. The first thing that we want is a text input. The second thing we want is a checkbox. The second thing is, let's say in this case, slider, maybe gr dot inputs, dot slider. And the slider value goes from zero to, let's say, 100. And the label if you want to add a label, say height. Okay, and then you're going to have another slider. And this slider is for weight in kg, and height in meters. Okay. And this should be ID 200, I think, yep. Now this is done. The next thing is we need to define the output. And the output in this case is a simple text, we are not dealing with multiple items. So simple text should be fine. Define this. It's worked. Now interface dot launch. So technically, you can actually do launch here also, like, if you want to like if you don't want to define the interface in a separate step, you can do that. But yeah, just just for the sake of explicitly, I'm just doing it here. And then I'm going to launch it. Once we launch it again, the same thing happens where it says like debugging is equal to true like all the same examples. So I've got a name, let's say name is one little coder. And then height is somewhere like this. Weight is somewhere like this. Weight and kilogram height, as let's see here, and then submit, you can see that the BMI has been calculated, like forget about what the formula is doing right now, at this point, maybe what we can do is it looks really ugly for us to show this thing, so maybe we can round it off, then we have to input okay, I'm not not dealing with rounding off at this point. So you have Hello, the name, BMI and then the value. So at this point, you can see that we have successfully managed to get three inputs. And then we are also outputting one output. But what if you suddenly think okay, instead of just having three inputs, let me have one more extra output, okay. And now probably the output is something like a emoticon. Okay, if the BMI is less than this, let's say there is any more Deacon the BMI is greater than this return to the remote icon. So result emoticon. emoticon is equal to, again, for simplicity. We can we can use or I can I can actually actually use this. Okay, so just use happy face. If BMI while is less than, like maybe 30 I don't I don't know. So don't take health advice from this. Otherwise, keep a sad face. How do I keep a sad face this is a sad face. This is a sad face. So now we have a result emoticon. So now what you can do is you can result this emoticon as well as part of this. So we have one, okay, we have one entire string if you want to make it easier, you can see output string is equal to this. Okay, and then you have the emoticons so I'm going to say output string. And then result emoji icon. And then I'm going to run this function. I'm going to call the function to see okay, so my my BMI is terrible. So it's just giving me this sad option. So now I can come back again and then specify that my first output is a txt. Again, I want to do txt for the second output as well very good. If you want a different output, you can still do it. But in my case I want text output as well. So run it come back here launch it again. And once you launch it is going to give you the application and then you can see okay, name is let's let's say Mars, maybe hide. A good mom. and weight is 58 Something submitted. And then you can see, it's a happy face. The reason we have a happy face is primarily because the BMI is less than 30. So if I go back to the same example, like for example, I should be in meters, right? I should have ideally divided this because height isn't centimeters, let me add centimeters, and then divide the height by two, I 100. Run this, and then try the code and try the code on getting okay, it's because of order of precedents, my code is getting Messier with all the parenthesis but that's okay. So now, I have defined height and centimeters weight in kilograms and come back and launch it again. Then maybe this time, we can say Mars and Jupiter, other names. Height in centimeters, okay, I didn't give centimeters. It didn't get updated with this, okay? submitted. Okay, the app did not refresh one last time. Let's refresh this. Launch ID. And identity because here, one little quarter, height and centimeters on 60. And then when you say BMI is 32, and you're sad, and your BMI is less. Okay, you're still sad. Okay, let's reduce the weight. And then ideally, now you're happy because your BMI is less than 30. So technically, we have managed to build an application with two outputs. Again, if you want to change the name of the output, again, that's something that you can change within your output as well. So basically, what we have managed to do here is if taken multiple inputs, and we have done multiple outputs. And this is this is quite important, because in a lot of cases, for example, let's say you're doing doing neural style transfer, usually, for neural style transfer, you would have multiple outputs, sorry, multiple inputs and one output. So you need to know how to do multiple inputs and multiple outputs. And that's quite simple. You have to match the number of arguments that you're getting in your function with a number of inputs, and all you have to do is the type of input. So one of your input could be a slider, one of your input could be text, another input could be a number, another input input could be an image. So you can you can have these multiple formats as well, which is not just, you know, like numbers and all these things. Like for example, let's say like, suddenly we are deciding that we want to add a checkbox, okay. And I want to I want to add something new. So that is feeling okay. And based on feeling I wanted to say something, okay, so we'll say if feeling this true, okay, then, then we'll do text is equal to happy. Yeah, and we're going to send feeling also, sorry, text, we have to send the text. Okay, now this one, I'm going to make a Boolean out of it. Okay, and how do we make a Boolean out of it or a checkbox. So my last attribute here is gr dot inputs dot check. The check box is checkbox and you can see when I want to make a checkbox, I have to specify default is false, right default is false and the label is your feeling today and then everything else is fine. So we have the text as well. So we have a third text and it ran the function again and then launch it. Now at this point, technically, you should have one extra check box. So check box is selected something something height weight selected, that is an error. There is an error and what is the error Okay, so we have got three inputs 1234 Our four inputs 1234 Okay, I think the problem is because if get let me let me even do this text is equal to if feeling is sad, okay. And let me run this and then try with this. So we have one 12341234. Okay, that's done. And then let's run this, let's launch. And then let's see this thing. So let's see if we can if we can get rid of the error successfully worked, right, so you have output one, output two, output three. And then you can disable the feeling, and then run it again, you get sad. So basically manage to add a new type of input without any problem. So you have multiple types of input, multiple formats of input, and also multiple formats and types of output that this done. So because we have got a bug, maybe this is a very good opportunity for us to try. Try out the debugging option. So what I'm going to do is I'm going to make the same mistake that we did before. And the mistake was just using like this, right, so this was a mistake that we had. And there is a way for you First, identify using this, for example, we can we can do like this. But if it is false, it would probably throw an error like you can see the error. But but let's forget this kind of debugging for a moment. And then let's see if we can find a way to debug here. So what I'm going to do is I'm going to say debug is equal to true. And the launch date here. They did just say, okay, sorry, I have to add debug is equal to launch. So that was silly of me. So I'm going to do debug is equal to launch. When I do the same, it's going to launch with the debugging option. Ok. So it says this, this cell will run indefinitely, so that you can see the errors and logs. So if you want to turn it off, again, you have to go back and then say debug is equal to false. So what we are going to do now is we are going to say something, and then we are going to select some value, select some value, and then click. So your, your value is good. So you have got all output, the problem arises when you have false value. When you submit now, there is an error. Okay, so you can see that there is an error. Now that error, because we have enabled debugging mode, that error is displayed here, which wouldn't have been displayed otherwise. So now you can see the error local variable text referenced before assignment. So which means saying it gets the same error that you would get when you're doing like a ripple or interactive environment. So this will, again help you to debug, so I've just taken the liberty of making a mistake to explain you that this is there. So all I can do is I can just add an else or I can just go with list comprehension. Then fix this, and come back again in debugging mode. Right? Come back again, in debugging mode do interface. And you can see all these are not running because this launcher still running. So I'm going to stop it, everything has ran, and then run this again, then try this out. But now the debugging mode is still true. So you have the mode set. True is happy done. And false is error. Again, because this because because we didn't run it. So ideally, you understand the point. The point here is, once you once you've, once you have a mistake or a bug or an error, it's very important for you to debug it the same interface that you have, you don't want to you know, juggle between lots of different interfaces. So the easiest option for you to do that is debug is equal to true. So once you do debug is equal to true, then you will be able to debug the file. So we'll have a slightly extended debug session in the next section. But if you simply want to debug this is your way to debug. So in this section, we just learned how to improve your gradle web application with multiple inputs, multiple outputs, same format, different format. And we also played around with a bunch of options for us to see how it works. And we also made a deliberate mistake to understand how do we go about debugging. So in the next section, we'll also learn a slight extension of how more to debug or log what is happening there. This section, we're going to know a little bit more about debugging your radio web application. And also, radio has a nice feature called flagging. And we are going to look more into that. First, let's start with debugging in the previous section at the end, you might have seen that we try to debug. So extending that we're going to see what kind of errors that we might face and then some debugging options that we have. The first thing that you need to make sure whenever you are building your radio application is that the function that you are using for your radio application, the number of arguments in your function should be equal to the number of elements in your inputs. And also the number of arguments or number of items that you are returning should be equal to the number of items or elements in your output. So the first thing very important thing that you need to make sure that it is right. The second thing is the type of the argument For example, here name is a text, make sure they input his text. Here, if you have an output text, again, make sure that it is an output text. So whatever the type is, make sure it is that type so that you know, you know the types have not messed up, because you're not going to compile anything and check. So it's always good to have you have this validation, like, if you're creating a checklist of test cases, this is something that you should do. And let's say that you have, you have done all these things, right. And then you have built an application. But still, if you want to validate whether your application has any error, and this is how you have to debug it. And the way if you want to debug this, basically you have to enable debug is equal to two. So debug is equal to true is just a function, like an extra argument that will help you enable display error messages. If you want error messages to be displayed while the radio application is run, which is like which is linked to run without stopping, then you need the need to enable debugging, like debug is equal to true. So let me quickly give you an example. And then we'll move on to the next section. So if you see this thing, for example, here, we have got height and weight and feeling right. So by default, let's say if I don't have debug is equal to true. Okay, I have this thing here. I'm going to give some name, right? And then I'm going to have something here. And if I submit, it worked, but let's say if I keep it like this and submit you see an error. Now do you know why this error is happening? Now, of course, you wouldn't know why this error is happening, even though like probably, if you're a math whiz, you would have probably predicted by this time, but yeah, let's assume that you are an average programmer. So you don't know why the error is happening. And that's why it's important for us to enable debugging, like this. And then after we do that, so it says the sale will indefinitely run like we saw before. So it's going to run all the time, so that you can try a lot of different things. And then you have the error log in place. So now I'm going to do the same thing, I'm going to put the name and then keep it zero, keep it zero, and then submit. So it shows error, the moment it shows error is going to also show the error message. And the error message here is zero division error. So float division error. So basically what has happened here is that this is a thing that you wouldn't have probably anticipated when you created this application, because now you're dividing weight by height, and then height cannot be zero, because you're going to get divisible by zero error. And what is the ideal solution, you can you can go to your code, you can change everything, you can handle the test conditions. Or if you want to simply make a change, you can just come back here in the slider, you can start with one so that your user can never go to zero. So let's run this and run this. And now again, most likely, you are starting with one. So even if somebody submits something, there is no way that they're going to hit zero in this case. So this is again, a very typical example of how do you find out an error and then fix an error using RADIUS debugging method. So if you want the debugging method to be enabled, and a lot of other things. So basically the same way you debug your Python programming code, so you can debug your radio application in a very similar way, with debug is equal to true enabled while you're launching the application. Now that is said. So the other important thing that I just talked about is flag. I just told the start of the section, that flag is another very interesting case. So what is flag, the flag is a button that helps you flag any erroneous or unexpected behavior, the output. So you could be running a model and then suddenly you see something weird. You can use flag, you could you could have like let's say my segmentation model, and then you're trying to find out which images have done well, which images have not done well. So you can just click flag, whenever you see the images have not done well. And you could you could use this for a lot of purpose. But what happens when you click flag? That's the most important question, right? Let's say you have an internal machine learning team and you have created an application and given it to them. And that team whenever they find out something, we are some, let's say some bias some something unexpected happening in the model behavior or even this calculation, something weird is happening, right? So now we want to flag the team that has created this application. So what does it mean? What does the team see when we create flag here? So let's do a couple of flags. And I'll let you know. So first, there is a flag. So let's do one more thing. And then we'll say another flag. Okay, so we have flagged at this point, we have flagged two items in this case. So now what happens here is when you create flag, ideally there is a flagged folder that gets created. So I've stopped it and then if I go back, there is a flagged folder. So when when we go to the folders, let me refresh the folder. And you can see there is a flagged folder and there is a lock here. Let me copy the path of this folder. Come back here and then use pandas to show you what is there import pandas as PD. PD dot read underscore CSV the path. And then you can see the instances, you can see the instances, what is the name? What are the inputs that were given? And what was the output. And these are flagged. So this is to help the machine learning team or ml ops team, whatever the team that is going to look into the model issues to check, what are the items that are flagged by the users or internal testing or whatever that is, right. So whenever you flag something, there is a new entry that is made here. And, and that entry is used in the future, to evaluate the model or the performance of the application. So right now, what you saw is an application that just had text. So now what happens when you have images, what happens when you have images, right? For example, we had we had an application like this, what happens when you have an image like this, when you have an application that has images, both the input and output images gets stored, unlike this, where you have text, where you have everything in tabular data only, and you don't have anything else, right, so if you go to the folder, you wouldn't see anything else other than dot CSV. But when you have images, the actual images or any other media type for that matter, the actual media content itself is stored inside that follows making it easier for you to evaluate what has gone wrong. This is a very important aspect. Again, when you're going to use gradient for retraining your machine learning model or improving your machine learning model, this is quite important and useful to us. And again, a lot of people who build radio might not be very aware of this thing, because you know, just exist there. But yeah, efficiently using flag can improve your machine learning model can help you identify, there is a bias. Like for example, let's say you put together a machine learning model. And then you've created a radio wave application, you have a published data hugging face basis or somewhere, you can explicitly tell your users saying that if you find anything interesting or weird, then please go ahead and click flag because that will help us improve the model, eliminate the biases, or you know, be more robust. So you can tell this explicitly in the description that you have a description right like you, you can like you can write a description here like this. And then flag if you find any erroneous output, okay, so I can run this. And then I can let me disable it. And then it can run when it runs it descriptor flag, any flag if you find any erroneous or put some having this message very clearly as part of the application could help people understand that when they see something wrong, they have to flag and that comes to you as a very well structured data which you can use in the future, to fix your machine learning model or do anything that you want to do with the data. So one aspect of debugging in radio is actually you know, using the debug is equal to true. But I'm also including this in this section, because I believe that if you our machine learning model doesn't work well. If your machine learning model is doing something semantically wrong, not syntactically but semantically wrong. Only the user who is actually seeing the output can tell you that thing and that human intervention could be made, the flag could be raised using this flag button. And that could be extremely useful in a lot of different cases. One thing that you would want to note when you're talking about flaggers. So right now the flag content is in the the actual folder, like the current folder, but if you want it to be in a different folder, then you have a flagging directory. So you can have a separate directory, you can specify a separate flagging directory. And that will probably enable you to have this flagging, like flagged content in a different directory altogether if you want it to be in a different directory. But otherwise, everything is good here flagging is extremely helpful. This is how you do debugging. And these are some things that you should pay more attention to. And in the next section, we will learn some quirks and nuances about radio application. So far, we have learned all basic and very important things about building a radio application. So in this section, we're going to learn how to enhance or improve your existing radio application that looks better that does better It has better user experience. And to start with, we are going to talk about examples in radio application. So what is examples? For example, if you have a radio application that looks like this, sometimes the user might get confused. What do I have to give here? What do I have to do here? What do I have to do here? And to avoid this confusion, usually in user experience, if you see a lot of existing tools, like I can quickly show you a tool that I came across recently, which is called shield or how when you go here, it's still loading. But when you see this thing you can see there are suggested commands. So these are like examples. So instead of somebody trying to figure out what to type here, a good user experience would always be very intuitive where people can just click And then select it. In a very similar user experience. Principle, radio also has got something called examples. And I'm going to show you how to do examples in this section right now. So let's start with the example. An example is quite easy. What do you want to do with example, for all the input, you're meant to give an example value. So I'm going to come here, and then say, after output, I'm going to say examples. Okay, and here, I'm going to just, I'm going to select what all examples I'm going to give there. Like the the previous examples are nothing but predefined answers. So I'm going to have a list. And within that, I'm going to have another one. And the first one is, let's say, one little coder name. And then the second one is, let's say 100. And the third one is, let's say 50. And then the fourth one is true. Okay, so this is one example. The next one, I'm going to copy, let's say, Mars 120 3020. Yeah. And third example, like, we will stick to three examples, let's say moon, and then 200. Or maybe we can use u and Moon. Under third 150 kilos, and then false. So we have three examples. Now when we run this application, invalid syntax. Because we didn't add the commodity, that's why it's invalid syntax. When we launched this application, at this point, you would see this application being launched with examples. So you can see, there are three examples. So when you have a great new application that looks like this, if you don't know like, let me even open this video application separately, so that it's easier for us to see. So when we have this great new application, it might be difficult at first for somebody to know what to fill. So what they can do is we have examples, all I have to do is click this application, and then submit, then they will get the output, click this example, click Submit, and then give the output. So it becomes very easy for anybody to click something and then get an output rather than themselves typing something. So this is very important for a very intuitive user experience. And thanks to gray area for offering this because this is what a lot of good web applications, especially to give intuitive user interfaces. So whatever the type is, like if you have an image, you can give image as an example, if you have tabular data just like us like not tabular data necessarily, but text and numerical data and Boolean values, you can have this. So for whatever type of data that you have, you can specify examples. Very simply, just by defining another parameter here that takes different list. Like you have multiple lists multiple examples, you don't want to also give like 1020 Different examples, examples should be like one or two. In this case, we have taken three examples. So example is a very, very important way for us to improve the user experience of the radio application. So that is one important thing. So you need to know when to use example, and how to use example. And that's what you just learned. The second thing is, what if you don't want to click submit all the time, what if you want it to be reactive, so if you have seen stream late, if you have seen are shiny, or if you have seen even Tableau, like there are a couple of instances where you can select an option, and then suddenly, it is reactive. So certainly you would see the output rather than somebody going and clicking. And for that, within this, like within the greater interface, you have an argument called life. If you say live is equal to true currently, by default, live is equal to false. If you say life is equal to true, then you don't have to submit every time. And that's what we're going to see now. I'm going to disable the exam. Okay, let me keep the examples and say, life is equal to true, right? And then let's run it. And let's run it again. Is it going to restart, imagine? So I have this thing here, right? I have this thing here. But you can see that there is no submit button at this point. So submit button is gone, because it's live. So all I have to do is I can go here and then select it. And then you can see the output. I have to go here and let me zoom out a little bit. Yeah, all I have to do is go here, select it, you can see the output, I can go here selected, you can see the output selected, you can see the output. So basically, you are eliminating one extra step. So this is useful in some situations, not in some situations. For example, if you have a situation where model inference takes a lot of time, then you wouldn't want this to happen. Because if somebody like by mistake, click something silly, no good start processing. So you would want that explicit submit button in those kinds of cases. In cases where you like, for example, this case, right? We don't necessarily want somebody to click Submit. In cases like this, you can like for example, you change the slider, it would it would change. So in cases like this, this makes sense. But in some other cases, it may not make sense. But live radio application is another useful feature because it again improves user experience with a submit explicit submit action button action is not required. So if you think an explicit action, like submit is not required, then you can then then you can actually have, then then you can actually have this thing in place, which is a live application. So, the next way to improve user experience is we discussed in the previous section about flagging. So, flagging can also have multiple options. For example, instead of just simple flagging, we can say flagging options, equal to, so we can say, is no, maybe something like that, okay, and then run it and run it. And now when you run this thing, you can actually see flagging options. So you instead of like, for example, let me click this thing, and you have three flagging options, all you have to do is hover your mouse on it, you have three flagging options. So as you know, maybe, and these things, these values might also get recorded. So flagging again, instead of keeping a simple plugin, for example, let's say you want to build a text annotation, some, like simple annotation tool. So now all you have to do is like you can have all your entities here. And then you can ask somebody to annotate. So as simple as that, even if you have a major whatever that is, or maybe like a prediction is right or wrong or not, right, so you can again, use this to actually do unit testing under flag flag, not only when something goes wrong, but also you can use this to kind of label things on the go while you're building your machine learning model. Again, flagging options is extremely helpful, because you can use it for something more than what flagging is supposed to do. So flagging is very, very helpful. So far, we have seen examples. So far we have seen live application. And also we have, we have seen different options in flagging. The final thing that I wanted to highlight here, which I'm not going to show you right now is using a state. So what is the state? Let me quickly show you state here. Radio getting started. I'm going to copy the example from radio page. So what is the state? So one thing that you know, very clearly is that every time you click Submit in your grading application, the entire app resets. That's, I think that's something that we all can agree. There is no persistence of data here. So anytime you submit something, the data is reset. What if you want to have persistence of data? What if you want to use a data point or a data from the previous before submitting to the next instance. And that's where state comes into picture. And state is quite common, again, in full stack development. So if you want to create a state that persists outside of a single function call, which means you need a global variable, right? So you need something that is outside this function like outside the function that you have this function, if you want, if you have a use case like that, then you need to set state and the chat message is a typical example, right? Why chat messages, a typical example, somebody says hello, and then you replay Hello. And somebody says, How are you, you will say I'm fine. Now in the application, you want all these messages to be there, you don't want every time to you know, initialize with empty message, because you want the previous data to be there. And that is where state is quite helpful, because you want the data to persist across multiple submits. Okay, so let's look at this demo quickly. And then we can see how it works. So quickly see the demo of state. I'm running this thing. And again, like I said before, this is an example straight out of radio documentation. So messages, hello. And then I'm going to submit it, you can say hello. So it says, the next message is, how are you? And then I can see how are you okay, you can see the response, you can see the response here, right? So and this is important, because you want that message to persist as well. So that's why state is very important. And you can refer data, I'm not getting deep into it, because that is again, a topic for a separate, you know, Section altogether. So to avoid that, I'm just saying that you can go to the Get Started page in radio. Also, you can check in the documentation about state. So this is what the purpose of status to have something beyond the function like to create like a global variable or to the function call, so that even when you when you load this thing, it doesn't there is persistence. And the very best use case that you can think of is you want to load a large model. And every time you want to load the model, you don't want it to be refreshed if you have if you have the model being loaded inside In this, you don't want it to get refreshed all the time. So you want to load the model outside the function. And then inside the function you do, everything gets like inference, right. So. So that is a very good use case and states could be used there. So explore state more. And that could be really, really helpful for you in improving your radio application. So, if you need a variable that should be persistent outside the function call, then set state is the function that you should set state and get state is a function that you should be looking at, to store and retrieve the persistent data that you have created. So that is state and the final state then. So we have seen examples, we have seen live radio. And we have seen state. And the very final thing that I want to talk about improving your radio application is grid, your themes, and grid, your CSS. So grid your application by default, you would see something that looks like this, I'm going to remove, I'm going to remove the flagging options, I'm going to remove the description, I'm going to even remove the live option, okay. So by default, you would see the radio application that looks orangish, which is in line with that radio color. But but sometimes you want something else, right? So sometimes you want to, you want to try something else, like you want a different color combination, you want a different thing. So Gradle has two options for that for you. One gradient has got seen so quickly showing theme. So you have the default option, you have hugging face option, you have grass option, peach option, dark option. So you have got different themes. The second one is rather than using the existing theme, the theme that is available on all these themes, you yourself can actually create custom CSS. So you can use custom CSS option to create theme. And that is again, another important feature if you want to try out something. So we are going to explore these two options now. So theme and custom CSS. First, let's start with theme. So I have a Grady obligation that looks like this. And maybe you know what I can I can do side by side. It doesn't it doesn't let me do side by side. Okay, I thought I can just show it side by side. It doesn't allow me to do that. That's okay. So first thing that I want to do is I want to enable a theme. Okay. So theme of theme is equal to what is the theme name? Let's start with the hugging phase. And then we'll go to some dark theme. And I run this thing and run this, you would see the theme color changing. It's you can see. Now the theme theme has changed. Like it's an this is the hugging face theme. Right? So it's cleaner. And I would actually say like it's cleaner if you want no no offense to existing default Dario theme, but yeah, it's it's cleaner. If you want a different theme, let's say like you want a dark theme, then you can just go like dog beach, or dog default. Maybe we can do doc freaking face. Let's let's try how it looks. Doc. Okay, and this and this, and then see how does it look? Well, this is quite nice. This is again, a very pleasant dark theme. So you can you can see the font is white in color. You select something, you submit something, you have everything in Word in color. So this way you can play around with the theme, right hugging face thing, let us say you have played around with this thing. But there is one thing that you don't like necessarily, and you want to change that. And that's where your CSS is going to help. So one thing that you can do with CSS is you can for example, let's say you want to change the background color to something. So I can go here, say CSS is equal to and then I can I can add the CSS, I'm going to use multi lines just to keep it easy for me. And then I'm going to say background color. This Okay, let's run this, run this. And then you would see the change in the color. Ideally, it didn't change. Okay, let me disable the theme. And then see. You can see after I disable the team because the team overrides the CSS. So after you disable the theme, you can see the color of the background has changed. Like if you want to, let's say like a different color altogether. Let's say you want you want, let's say, yellow, maybe terrible option. But again, just for demo purposes. If you want a background color to be a low end color, you can you can again change it. In the previous section, we learned how to improve the user interface and user experience of our radio web application. So we learned about examples. We learned about life mode. We also learned a little bit about state and then finally we learned about themes and CSS custom CSS to redesign our Radio web application. In this section we are going to learn how to share the radio application with anybody in the world. And also the most important aspect is do you want everybody to see that? Or do you want to add an authentication page before anybody could access your radio application. So the first thing is, by default, when you launch your 3d application, you would get a URL like this, and that that URL stays for 72 hours. So you can get this URL, and then share it with everybody, anybody in the world. And then they can use the URL for 72 hours. But if you want to make it explicit, there is an attribute called share. So if I say shared is equal to true, whether to create a publicly shareable link from your interface, so you can say share is equal to true. And that will also give you the same URL if you want. And then the next thing is, you don't have to only share the app. But also you have the ability to share the APA, which is something that not a lot of people who do so APs are very helpful. For example, if you want to integrate this, let's say you have a JavaScript based stack available, and you want to integrate this machine learning solution inside JavaScript based solution, the easiest way for you to do is to use an APA. So what Grady also gives you is the APA with also some starter code. So for example, the A for this particular app, when I click this view, the APA you can see that there is an APA here, and then that APA says like this interface takes four inputs, returns three outputs, the URL endpoint, you can copy. And these are the input types. These are the output types. This is how the payload is going to look like. And this is how your response is going to be. And also you have couple of examples where you have a Python code, you have a curl code, and you have a JavaScript code. So if you want to check it, you can go here, and then click Post, and then you would get the response yours. Or if you want to try it on your Google collab as well, you can come back here and this and then say, okay, okay, true, we have to say true. And then see if you have the outputs or the time it took the data input, sorry, the data output, and then again, the time it took. So if you have multiple calls, then you can see the average time otherwise, it would mean the same. So basically, not just the app that you can share with the world. But you can also share the API where anybody can make a call to the endpoint, and then get the result that they want. Instead of saying get the result should say, post the response, post the request, then get the response. Yeah, whatever it is. So one, take this link, share the link with anybody, they would be able to access the app, second, add slash APA, or the EPA link that you can get from here, and then share it with anybody, they can use it the second, now that we know how to share a radio application with the entire world. The next important thing is, do you want to share it just like that, or you want to share it with an authentication page. So now we are going to learn how to add an authentication page on top of a radio application. So basically, when somebody clicks this link, it makes sure you're listening. So basically, when somebody clicks this link, we don't want them to directly see this app, we don't want anybody in the world to see this app. But we want one least specific people who have access to this application. So maybe let's say I have generated a username and password and given to them, I want to only them to use this application. So if you want to add an authentication page, what are we going to do, and that is quite easy and simple unexpectedly, usually, adding an authentication page could be another overhead. But it is extremely simple here because all you have to do is when you're going to launch the application, all you have to do is you have to give up. And also if you want any if you want to write only if you want any HTML message on the authentication page. So I'm going to show you how it works. First, let's start with an authentication page. A simple authentication page, I'm going to say odd, is equal to, I'm going to add a username password. So basically, I'm going to do like this A tupple username, password, and the user name here. Let's say I'm going to say user. And then the password I'm going to say is one little code. Okay, so this is the username, this is the password. Okay, I'm going to run this. After I run this thing. I have got the app. So I'm going to click the link here. And you can see it takes us to an authentication page. Let's say I'm going to give a wrong username password first. I'm going to say user and the password, I'm going to say something else. And when I do that, it says the server could not verify you, you either supplied wrong credential, or your browser doesn't understand how to supply the credential. So the first thing is, it works. It works. The authentication works. It's not letting anybody to log in. So now let's try I'm going to give one little coded. And then you can see it has successfully taken us into the application. So basically, we have managed to add an authentication page on top of our radio UI, just purely with one single argument. So added a value username password to auth argument. And then we have managed to add a login page. So let's refresh this, you can see this because we have already authenticated. So let's run this again. And I wanted to show you an extra thing. So when you run this thing, when you go here and see this thing, you can see the login page does not have much details. Let's say you have shared the login details to somebody in the email. And you want to make this in the login page itself. So that is where you have an auto message. So I can say odd message. We can say check your strong login details. Strong sent to your email. So we can see email. And if you want to add, add an emoticon you can probably add an emoticon. So now you're hiding a login message also along with the usual authentication page. And, like authentication message also. So let me click this, go here. And then say it says, check your login details into your email, and you have this thing. So this way people would know that they have to look at their Slack channel or an email or discord or whatever it is, so that they actually know where the email is, once again, let's let's just log in one little corridor. And then try, we have successfully managed to login. So this is how it is quite easy and simple for you to add an authentication page to your ad application. And, and it's quite simple. So all you need to do is you can give a tupple. Or also you have another option. So you can either give like, like username, password topple. Or you can you can take in different formats also like if you want or you can have a function also like that takes username and password and then you know, validate something, and then returns true if there is like the valid authentication, like let's say you have a dB, you don't want to just give hard coded values, then you can do all those things. And also you have the ability to provide an authentication message along with the login authentication page. So this basically takes us to the end of building a radio web application. But this course does not end here. We want to also deploy the radio application. So for what we have done here, as we have managed to deploy the radio APPLICATION make it available on the collab interface with radio link. But can you deploy this radio application on a post permanent hosting, and we are going to see in the next section, how to deploy a radio application using hugging face spaces. This is the last section of this course. And if you have made till this section, congratulations, you have almost done something that nobody usually does. So in this final video, we are going to learn how to deploy a machine learning radio application permanently on hugging face spaces. So the first question that you might have is, why couldn't we have done whatever we were doing already as something permanently. So if you see this thing, this link, whatever you share, it is applicable only for 72 hours, and the interface has to run. So after 72 hours, you might not get it then you have to rerun it and then the URL might change you have a lot of these complexities. And to avoid that in a typical permanent hosting space. You need a server where you want to host it and hugging face the company the machine learning company that used to be the NLP company has made it really really easy for anybody who uses radio or stream li to deploy very simply using an interface basis. So in this video, I'm going to show you how I've taken an existing python script and then translated into a great new application and then how are we going to deploy that. So the first thing if you see I am using radio and transformers I am installing both this libraries and from import radio as here and from transformers. I'm importing pipeline transformers is the hugging page library pipeline is what we are going to use to build a very simple sentiment analysis tool. So the pipeline name is sentiment analysis because that is the task that we are trying to do. And after we do this thing, we are downloading all the pre trained models you can see the model because we have not specified any specific model it has been defaulted to distill bird bass and Ks fine tune SST to English. It's basically a fine tuned version of distal Bert. After that we need an important function. So basically anything you want to do with If you're brand new application, you have to wrap it around a function. So here in this case, we are doing a very simple function. So the function name is get sentiment, and then it has an input text and it returns as the sentiment output, the output would look like this, I'm not formatting the output here, I'm just leaving it out. Because I want it to be simple for you to deploy the application, I don't want to take a lot of time off you to modify whatever I'm trying to do. So it's going to be very simple Grady obligation. So the output is just a text that looks like this. After that, our function is at this point ready. So gets increment function is ready, input is ready, and then the output is ready. And then we have also tested it right. So I can I can write something saying that this course is super awesome. Okay, so that's my narcissistic view of this course. So it says it's positive, it's 97%. Positive, that's a good thing. So it's positive and 97%. And whatever you want to do, like, for example, this, this course is terrible. So probably it should say it's negative. Well, it, yeah, it says negative. So basically, we have managed to build a sentiment analysis solution using the deep learning model, which is distilled. And then with just few lines of Python code, thanks to hugging face. Now, what we have to do next is we have to take this script, the few lines of Python code and translate into a radio application. And for that, we all know if you have watched all the videos of this course, you would have probably known that we are going to say gr dot interface interface, ie with caps, upper caps, the function name, the input text, we have only one text and then output text, we have another only one text as output. And also we have the title, the title is sentiment analysis, we can also add a description if you want, we can say add, get sentiment, negative slash positive for the given input. Okay, so we have managed to create the interface that looks like this maybe better ways to do like this, this would increase readability. But again, I don't know why am I spending time on this thing, but every Okay, so right now we have defined the interface with the object a phase. Now all we have to do is launch a phase. Let's see when we launch a phase. So again, you don't have to do this on collab, you can do it on your local machine. And then then finally, you know, connected with your hugging face pieces, get and then upload it, I don't want to touch my local machine at this point. That's the whole reason I'm doing this. Because I assume that a lot of people might be trying to do this using collab. So that's why I want this deployment experience to be how you would do it on collapse. So we have the title, we have the description, we have the input text. So let's go ahead and then say this course, is freaking awesome. And I want little quarter this seriously narcissistic, but I would take it still. So it's a label positive, we have this thing again, like I said before, we are not, we are not formatting output. So just take text, I'm throwing it just for the demo purpose. So now at this point, our sentiment analysis, application is up and ready. Now let's see what we are going to do with hugging face faces. First, go to Google, and then probably say hugging face spaces, you would get this, you need to sign in. If you're hugging face spaces are meant recently made open for everybody. So it's out of beta. So if you if you go if you have a hugging face account, you can log in with that if you do not have, you have to click click create a new account. So I already have a hugging face account. So I'm going to use login. I'm going to use my username sorry. And then I'm going to use my password. And I'm trying to log in. So this is how my initial dashboard or my space front page looks like. So now we have to create a new space. So I'm going to create click spaces. After I click spaces, I can create new space. Let me see if I can change the theme. The dark theme to light theme No, I couldn't change. I hope it is readable for all of you. So click create new space. You can read the documentation if you want. You can read you know like what is what you can do with the stream written radio what kind of things you can do, how do you go about like the best practices all these things? So the good thing is all the models that are available in hacking face hugging face transformers are also available for you here with less hassle. So create a new space. After you create a new space. We have to give a space name so I'm going to call it and radio sentiment analyzer. Is there a good name, okay. And the SDK that we want to use so great SDK. And do you want it to be public or private, of course, I'm habitable from public. So at this point, you can see there is no application file your space, when you open the app, it shows the like, there is nothing here. So you have to do certain things. For example, you can clone this repository, if you're familiar with Git, you can clone this repository on your local machine. And then you can create a simple app.py file, and then that app.py file can can you know, show can be served as an application. And after you create this on your local machine, then all you have to do is add the file to your Git commit the file, and then push it and then it would come here to this particular folder, and then your app is available to be served. But on the other hand, what we are going to do is we are going to do everything on the browser, because like I said, if somebody wants to try it out, just based on Google collab, like you have already used Google collab your local machine is not powerful enough, you'd have you don't know get, you don't have rights. So to get if you are in any of these categories, then preceding section is for you. So I'm going to use the Create button at the last. So let's open the Create dot app, create app.py file the new tab, and then we have to copy our code one by one. So you can copy one by one, or in my case, I've already copied everything. So I'm going to paste. So the first line is to import radio. The second line is to transfer like import pipeline from transformers. Then we have the sentiment analysis pipeline task. And then we have the function that helps us to get the sentiment, then we have the interface. And finally we have the launch. And once we have all these things in place, you can specify launch in lane is equal to false. As well, if you if you don't want it to be in like usually you use inline is equal to false when you are going to avoid the app to be embedded within your Google collab notebook, like if you wanted to build on separately. So now at this point, everything is ready, let's go ahead and then commit the new file we have successfully committed and you can see it is trying to build but it will end in a building error. The reason why it will fall in a building error is because we have to install the Transformers library. So even though hugging phase spaces is actually on hugging phase still, you have to manually install the Transformers library and also torch which has a dependency for transformers library. Before we install the library right now there is an error, that's completely fine. I just wanted to highlight the readme. So if you're using this template, by default, you are sorted out. But if you are not using this, then then you need to make sure that you have this Yamal at the top, clearly, because this is what this is really important. Without this part, the Yamal part of the talk, your app would not be rendered properly on Korean face. So you have the title, you have the emoji, you have the color, and you have the app file SDK, and the app file, which is actually used to create serve the application. So let's quickly go ahead and then create a new requirements dot txt file requirements dot txt. Oops. And then we need two things. One, we need a torch. Second thing we need transformers. So ideally, we should be able to. So the first thing is they are going to install these applications, libraries. And after that, they will render our app dot phi and our app.pi. Because we have already tested it should be successfully running. Let's see. You can you can never be sure. Okay. It says it's running. So let's copy this URL, go to a new tab, and then paste it. Oh, wait, I think I got a little exited. You have to copy the entire URL, go back here, paste it. And then see, okay, it has successfully managed to work. And also it has got the dark theme that is that goes well with the interface dark theme that we have spaces. So I'm going to give an input text, probably I think I'm tired of seeing that discourse is awesome. So maybe for a change, to say radio is awesome. And I thank the developers for this amazing tool. Let's submit. Okay, it's positive. So maybe I can say Java sucks. And then you have negative so you have basically positive and negative. And at this point, you have successfully managed to build a full fledged machine learning deep learning powered application deployed at Deep Learning powered radio application, and successfully deployed it on hugging face spaces. Now you can copy this link and then give it to anybody. If you if you want anybody to use the API. Again, you have this thing also available for you. So you have successfully managed to learn everything from building a simple grading application to improving the UI of the application and then finally hosting or deploying your application permanently on hugging face paces for free at this point, I don't know whether they'll charge us later, but at this point for free, which you can share it with anybody in the world. Thank you so much. Congratulations, we have reached the end of this course. Thank you so much for watching this course. And I hope you found this course really valuable in learning how to build a machine learning web application using radio and also to deploy the application. You could use this for a lot of different purposes as it is described in the course. And I would love to see the radio application that you have built during the course of this course. If you have any more questions, please let us know in the comment section, you can always reach out to us on Twitter. And also please make sure that you subscribe to our channel and share it with your friends. I wish you the best for your machine learning journey. Happy coding