what's going on guys hope all we're doing and welcome to a brand new video tutorial this is my new videos are actually on the free cone camp um is that my boot and hopefully you can actually enjoy the tutorial as i'm actually enjoying making this and creating the application we're gonna do today so for this one we're gonna probably do is create a really awesome and cool react weather application so we're gonna just go ahead stop by step by step from scratch start up a project create a react application and create all the different components and stuff like this put them together with the css styles and different things actually to be handled and we are actually gonna go ahead and go through creating a full weather application with restore apis and we're gonna just go ahead and use um some things actually some help from uh apis actually public apis using the restful http apis uh like this api xu so we can get the weather data and the forecast for for probably a couple of days actually and for currents whether data for any city we want for example we want the current city that we are actually in and we can get all of the different data actually if you don't know me it is actually my learning website iphones.com and hopefully you can go ahead and check out the channel and down there so we can have like millions of other tutorials like this really awesome cool tutorials and stuff like that the other one for web development so let's go ahead and try to get started so the final application or the prototype we're going to work on um this is actually the the thing that we try to achieve throughout this tutorial so hopefully you can just go and imagine this in your head i've tried to put a prototype together in here just a quick one using figma so for those of you who doesn't know figma figma is just like a prototyping tool you can just go to figma.com it's a pretty pretty nice to prototype into you can go ahead and just go and use it if even though you're not that much of ux designer or something it simplifies your life as a web developer actually gives you a lot of other cool awesome features that you can use to prototype such an application so actually here we've got the weather uh title we've got the location name it's gonna probably basically just your location name uh like london or something we've got uh you know number of degrees or the actual current uh weather and we've got whether it's sunny or it's dark for example since it's nice it's just gonna show a logo or an image of of like darkness like a moon to show up that we are actually at night otherwise we show a sun so we are pretty much a day and we sell them like even it's sunny or with some clouds or partially cloudy or something there's something specifically for a weather application and the weather forecast and everything we can also have just simply this one uh this little tiny button here that allows you to select uh probably a location we can just go and click that to get a popup and we can actually search for a location we set the name of the location and there we go the location's just going to go ahead and change jump or layout up in the background we're gonna try to make all of that from scratch and hopefully you can actually enjoy that and get the experience behind creating uh like a really awesome application using react even though you're actually new you still need to actually follow up the story and try to figure out how things are actually working behind the scenes and in the future part in here the bottom bars what we're gonna probably do is just like you know show the forecast for the couple of next days like the four next days or something like this it's gonna show um what is going on in the next couple of days like sunday monday you got the point actually and uh the celsius degrees we can use thirds or celsius i prefer facilities in this case uh like you know more details about the weather for this particular days like whether it's sunny or cloudy or whatever thing uh you've got pretty much the point of how weather application works so let's go ahead and try to get it started for react application if you are a react developer you probably heard about through used create react app the command line tool that allows you to create quickly and set up uh applications or react projects very very easily without any hassles or problems or that much of configuration so i'm going to use creates um react up so probably you need to open up um a terminal here or you can even use cmd for windows i'm using c mender in here and you create react up i'm gonna put um weather up okay simple as that i just type in this one and it's probably just gonna start creating the for us and it downloads and resolve dependencies like the reacts react scripts and different packages that allows us to do so and there we go the setup and the creation of the project has been successfully done now we can just go ahead and use our favorite editor to uh start working on the application i'm going to use visual studio code it's just you know like very awesome and very good you can use whatever id you pretty much like so i'm going to just go inside of the weather upper folder that has been created for us from the create react absolutely and i'm just going to use a code to open it just type in code dots and it opens this project on a brand new instance of visual zero code so waiting for this just the projects you load and everything and hopefully everything can pretty much work fine so uh first experts do whenever you create a reacts project especially using the query react op cli is actually to test it and try to just go ahead and start run the start script to see actually what is going on behind the scenes so let me just get rid of that i don't really need any more i'm going to open up a new terminal instance of the integrated terminal from visual studio code and um okay now let's try to run the script which is nbm1 star so we can uh you know make sure that the application has been set up and created successfully without any problems or missing dependencies or something so we can stop developing the application without any problems so i actually decided to start the development process of this particular application from the scratch like by creating projects and show you everything going on behind the scenes so probably when people faces ears and doesn't know actually how to go or how to start or something like this so yeah they would have a problem and they would try to fix it by just you know following up from from just the beginning from scratch and just to make you guys uh feel comfortable following it along this one and there we go so the surface actually is starting without any problems npm didn't actually throw up any error or um yeah no exception at all so everything hopefully works pretty much fine if you take a look the application this is actually the main upds file so we can actually use this for um it's the main components that is being rendered so i can wait for a couple of seconds actually to um make this actually running around taking quite some time there we go and there we go we've got the application working in the boilerpan is actually running without any problems or issues so now we've got to simply just go ahead and start working on the application so starting off let's just try to um since our application if you take a look we're gonna i'm gonna use actually the prototype a lot let me just zoom in here so you can clearly see what's going on i'm gonna create first the container or the actual main components that are gonna pass all the prompts to this particular data so in this case i'm going to create i'm going to try i'm going to create a new file and i'm going to use some kind of a flux like flux state management you're probably familiar with this or not it's just like uh a design pattern for reacts applications that allows you to pass data between props very very easily as we know that you can only pass data from a parent to a child not a vice versa thing like passing it from a child to a parent so we actually need some global data to be accessed from the old actual uh components that is being rendered in the hierarchy and on the other hand we can have like a main upstate that holds the upstate actually of all components like the shared upstate between all the different components so any components in the hierarchy any component is being rendered when our application can actually access this data and alter the data and set the states and change all different things so it's a really really important thing to know even though our applications is very basic straight to the point it doesn't really need the flex design pattern but i just want to point you guys there too i'm gonna use it in this one for you actually guys so you can take later on the source code and just develop it take it to the next level add more features to it and make it just a real word weather application so you can easily edit the features without any problems uh whenever you find it's actually already been built on top of this design pattern so i'm going to name this for example um it's going to be the store so why i'm naming it store because it stores the critical uh global upstate so yeah store.js it's going to be a normal component so i'm just going to go ahead and do like import reacts okay from uh well react and i'm gonna do well um yeah it's gonna be a normal reaction but i'm just gonna do export defaults and let's try okay so it's going to be class i'm going to create a class in here i'm going to name a store and it's going to extend doesn't normally react dot components okay there we go and it's going to be having a constructor or something you can initialize any dna you can pass in props to this contract constructor which is not really that much of a big deal but yeah still worth having in here uh we can have like a mean upstate in here which is like this is going to be it so and i can give you like hints by comments in this like uh mean up state okay and we can have render function and what we want is all of the children that's going to be inside of that is actually or any children that we're going to pass to this one it's going to render it just inside the store we're going to have passed to them the state we have in here whatever data you have in here for example try to put some data like the name or like the application uh name and i'm just gonna put like the application name is gonna be weather up so yeah and here we try to return whatever uh like props dot children think but this doesn't actually how it works what you want is to take the state every single piece of data that is inside of this date or the state blocks we are having is you just need to pass it down into the hierarchy so whatever the child is gonna get it is gonna get it as a props so to do so we're gonna just use the help of props and children alongside react clone element function or the method that allows us to clone uh elements very very easily into components and passing the props down so here i'm gonna like return and it's gonna be a math function it's gonna use react thoughts well um children and for this reaction i'm gonna use the map function so the map function you need to pass it whatever child so we can do uh react children so we need to access the props i totally forgot about i thought i'm gonna use it actually stateless components and we can actually render that here and um what i wish to use well we've got a we've got a serious issue in here so clearly something is actually going on but and yeah so i think we having let me take a look in this one okay the map components taking actually uh children oh okay so if we need just to pass in the children my bad uh here so this stuff perhaps both children and the next thing it takes a call back with a child and we can use this so yeah i'm totally screwing up these right now so you probably see me typing in really weird air things and just stupid errors uh anyway so here we can use the child we're gonna probably return for each single child going to be passed into this we're going to probably just render one single charge it's going to be the up components that we're going to render inside of this so we're going to return and i'm going to return like um react dot clone elements and this clone elements it takes an actual element which is going to be the child so the child is actually a real word uh react valve element and it takes the second thing you'll clearly see here it takes whatever props you want to pass into this child and it just creates a brand new component with these prompts being passed into so the props you want is for example is actually the states that we're having up there so i can easily need to mutate this state so i'm going to do this dot state and make sure to mutate this using this expand um symbol thing or the the actual expand uh object iterator in here so just to like you know merge an object this is an object with another object and why i'm doing it here just merging the state objects with an empty object so we can create a different object rather than state so here if we try just to pass in the state just going to pass in the reference of the state we don't want that we want to mutate the actual state and pass it down to the child so you can have the same props as we do for the actual state so it's going to be simple as that everything in here is going to have the up name whatever we add in here it's just going to be right over there so yeah it's pretty good the pattern here it's basically not the best thing you can have you can have redox one of flocks fox actually have many different ways to be implemented on so it's just very basic in a very efficient way i actually have and i use a lot of my other projects so hopefully you can actually like it and everything this is just simply the store.js now we can jump back into the up.js um probably on the whole rendering i don't need any of this and they can just get rid of it and what i want since i need the styling so i'm just going to put um another file so i've got in here what is it actually the store inside the src i'm going to put another folder named it says this is going to hold our sas files and for actually working with sas and in node.js so or probably queer react app you've got to go ahead and install node so to do so i'm just going to do this so npm install node sas make sure to do this if you want to use less or something you can use the actual compiler for less but we want to use sas just only for development purposes i'm just going to install this for developing purposes now actually have been installed successfully now we can use sas very easily so i'm just going to do it here create a new file i'm going to name this probably just um up says so it's just going to be the main application style inside of this folder you can you can have a different ways to create that and structure it but yeah you know it's the best thing for me so it's actually better to change this from js to gsx so visual studio code any other id can actually recognize this as a real gsx files and it can actually activate some features just like image and we can use some html features or gsx features in this one or you can easily just go in down here select javascript and search for react javascript and change it but i would like very much to change the name in here and rename it just adding gsx and clearly see the icon changes into recognizing uh gsx or javascript and react and probably gonna get another error so for this we're gonna probably do is just simply go to the index.js and um it doesn't actually recognize any of that it can just add the gsx in here and everything should pretty much work fine or yep and yeah we've got a completely different um awkward situation that is actually happening for this and i still can't quite actually figure out why but yeah so if i try to keep recompile this and be on one start again and yeah we've got a complete difference here which is like react scripts are not defined welcome mr heirs okay so they're just starting up let's try to fix this with npm install um well react script this sometimes happens when you actually configure or recreate react up projects then you actually install some other dependencies as we did just install the node says so it basically i don't know some kind of a really hard bunk it deletes the react script or it removes it from the pack.json so this is a really really bad thing to do um i should actually submit some issue or some other people actually should submit an issue into the uh actually the github issues for the query reacts app and they can let developers fix this as soon as possible because it's very very annoying for developing things in here now actually everything is working pretty much fine after installing the react scripts i don't know it's just a serious bug anyway so just like you know rendering a div in here just for testing purposes and you're pretty much working fine with all your problems as you can clearly see in here we've got the react and let me just open up the dev tools so we can clearly see what's going on behind the scenes now we're gonna probably do just you know put a div in here i'm just gonna put a div um i'm gonna put a class name for a div and um let's try to put the class name i don't know like this is gonna be the the main container then we're going to have just a smaller container inside of it so it's just going to mean it like main container okay and inside of that we're going to have is well another container so i'm just going to put another class name which is going to hold um well let's name this or let me just rename this like up container the problem is actually with renaming so the majority of problems are naming your variables and your classes and your ids and different things so just to have them nicely remembering and stuff like this so i'm gonna name like i don't know what is this name main container okay i'm gonna be just uh main contributor here and we can just go in and play with the sound a little bit so we're gonna have to see a sas style it's gonna be the up container first let me just first put the body and the html so i'm going to start with html and say party i don't know i named it sas okay i shouldn't have done that i should name this as css okay now it should work so bari and it can put 100 percent okay with is gonna be 100 height it's going to be the same so 100 high as well um well we're just gonna use the uh box sizing so i'm just gonna put box size in to border box this is the best uh box sizing that you can use actually for your application it's the best thing actually for having a smoothie layouts and responsive design so yeah this is basically what we should have done and let's try to get our classes so first i have up container so and inside of it i'm just going to use sas so i'm just going to put inside of him i'm going to have mean container okay and this is going to have like the width of 100 percent so 100 okay the problem is actually with typing most of the time so yeah um 100 as well and it's very hard actually to type and talk at the same time so you got a point pretty much i'm going to use a flex display in here just to display things smoothly you can center things or align them in the center so what it wants i want to take this one um yeah that feels soft okay let me just refresh that what i want is actually to have them all in the center in here just the weather application the whole container of the application is going to be in the center and we don't really care about the other uh thing that we have so this is what i mean this is just going to be it and the other one is just like the outside page so we just only care about the inner container of the application in here the weather application it's gonna be the main container i'm gonna have like flex dos okay i'm gonna just do justify content to center and align items to center so we can have a perfectly centered um thing so let me just refresh that really quick hopefully i'm just not including his style anyways let me just go ahead and try to include the sound just by importing it i'm going to import this styles we're just going to says and updates css so update css there we go just saving that recompiling it should now we have them like uh horizontally centered but not vertically and most of the time the problem is actually with vertically centered so i've got the body taking the full height everything's taking the full height but the root is not so what i want is just like to add this the same thing to the id or fruits simple as that now there we go we've got them specifically centered right over here in the center and the container is actually probably just the main continuous actually working fine without any problems and you can put some constraints into it so it can put with and or i can put like minimum width of that it's going to be i don't know 300 pixels or something something like this let me just go ahead and copy the pixels of this this has 993 and you know let's just go and try to copy this uh of the main width it's quite large so i'm going to try to put 600 pixels or something like this okay that seems that seems pretty decent it's not really that much of bad and it can put height the highs actually always fix it and it can put about 400 pixels of height and um if you take a look at that i think it's quite a lot so we can actually take this to 300 okay um yeah 300 seems quite decent without any problems it's clearly seen here just the the actual hovering and the outline it shows pretty good so let me just copy this put them right over here and it should be much worse and also i'm gonna put a display of flex into here so we can have this container as well going to be flex designed i'm just going to add a couple of things in here i'm just going to add for example um well let's try to add some borders so we can clearly see i'm just going to add the pixel with a solid and i'm going to add about 2 2 or let's try a8 so we can have a decent um okay let's try 999 so we can have a decent grey here and i'm going to add the border radius as well so for a border region i'm going to three pixels and i'm going to say solid so okay i don't know i added solid but i'm going to say four pixels or even three pixels a little bit much better i'm just gonna copy everything in here okay just copying it it's actually a pain um just copy pasting it okay there we go and what he wants in here to design and actually to structure the application you're going to have two different halves the first half is the top half and we have actually the bottom health and this is actually the main container so the main container is going to be flexed like flex box so we're going to use the display flex and you're gonna have to split this into half so we're gonna have up section or the top section and the bottom section both of them so we've got to go ahead and just add those uh exactly the same as we want them so up.js and we can actually go ahead and try to put them right over there so i'm just gonna do uh this is the main container i'm gonna add in here uh dots top uh okay section and we're gonna have another one so it's going to be bottom section there we go and this is going to be actually the top section i'm just going to put top on it so we can easily structure these things and we can put them together without your problems and probably here we're gonna use uh since we want them in rows not columns so we're gonna change this to actually flex display or for flex direction to very say uh simply you see the flex call of the stream main axis has the same orientation so this is actually what it wants with one of them actually actually both columns like this first column and the second column in here so i'm just going to save that and this should hopefully there we go so this first column the second column as we said and we've got the main container in here but it's not taking the full width how to do so i'm going to use the bases or flex main um attribute here to set this i'm going to set 100 for both of them but actually it takes them out of control i'm just going to say 50 out of the worth so they have the top has the first top and the bottom actually has what's left from it i'm just going to need to copy this from it and it should pretty much work fine so i thought of that it's going to be the main container i'm just going to put both of them so just just top section i'm going to put flex and also the bottom section so and flex right over there so if you try to refresh that there we go we've got both of them this is the top this is the bottom and they have like completely separate paths uh from from actually you know with different things in here without any problems or issues so we've got them covered successfully let's go and try now to work for the top half and try to place some actually data that we can actually later on change and make it dynamic we just need to put for now just a static data so later on we can i don't know hook up or just try to call an api and give the data and make it actually work as a dynamic thing as actually you know changes every single day changes whenever you choose a location it changes it changes over you know when time passes and so on and so forth so we can actually visualize a real world application or weather application but for now we just need to get the data out there just need to structure it and start with the css like to put the data so this is actually what you want whether you're actually designing or creating a react application whether another vanilla javascript application any framework you actually use in angular vue.js so this is actually the steps that i would like recommend for you guys to go through uh for every project for every application either a simple or a huge application of course when you're dealing with a large application you're gonna need to prototype a lot you're gonna put your classes inside of like uml or some some diagrams in order to simplify this kind of things for you and make them easier for you actually to reach and understand the whole complicate complexity for large application but never mind actually just for a simple one just need to prototype like this just get things up um put them statically like text in here so you can easily visualize them and uh you know design your interface first then add the functionality to it so jumping in here uh since we're going to work on the top uh corner of it i'm just going to put that i'm gonna go to inside of the src create another folder i'm gonna name this folder like components so it's gonna hold all the components just the best practice actually when when it comes to react applications is to put your site components your like you know uh small components into a different folder called components then you can actually call them from the main application components i'm going to create the first one um it's going to be top dots gsx so and i'm going to create another one it's going to be the bottom.jsx so you can actually name them whatever uh but just you know naming like this would be pretty good i'm going to import first uh reacts from reacts as we always do so and am going to just export defaults a normal component a stateful component actually not going to work with stateless components in this case i'm going to say top um okay top section the same like this is a little bit much better we're gonna react start components and it's gonna have a constructor as all of them does and takes up props and actually we can we can call super products and we can have a state in an empty object of states and just a render function very simply and this return render function what it does it just like returns another container you can actually use um i don't know you can use it like a div in this case and you can put something like this inside of it just for a quick visualization you can copy all the things in here and put it in the bottom uh without your problem just changing this to bottom section and going here changing it and there we go just you know you've got two separate files two separate sections for you ready to go now jumping back into the up.js and here we actually can import our sections so i'm gonna do imports um okay top section and from the components folder i'm gonna go inside of components to grab the top and there we go so i'm just gonna go in and render this section inside of here and okay and there we go it does have no props actually so we can easily just render it simply just by calling the components like this and it should be much workers in theory here now we can just move with the developments into the top.jsx instead of putting all the code inside up.js because it's way way much better for um you know a civil application so you can disappear it with our your team people can actually read it in this generation happening behind the scenes well then just putting all the chunk of your code logic and application logics and the ui and you know just mix them all together inside of a file that's gonna be really really painful for a lot of people actually who's gonna read your code so make sure to do so in the right way um here if we take a look on the prototype what he wants is first to get the title up and the title is actually gonna be centered right over here so we're gonna use the display flex and let's go and get this out of the way so i'm just going to create a class in here class name i'm going to name this for example i don't know let's try to top container okay that seems quite decent um inside of the top container we're gonna have and i'm gonna have the top title and we're gonna have actually another stateless component i'm just gonna create it down here just in a second so i'm gonna have this is actually the title i'm to say div da title i'm just going to name it like this for the class name and here i'm going to say this is going to be actually the weather up i just try to name the application actually whether up instead of like weather up like this and it actually means the weather up always so you always actually get your weather or something you can choose another meaningful name for the application of course i'm not that much of a person who actually does the name you know uh selection or something this i'm not good at it at all so yeah hopefully you can just go ahead and figure out a better name for this and let me know why not so um it's gonna be the weather application jumping into the style let me just move this into alongside the top.js in there um here we're gonna have so the title but inside of the top section and we're gonna have actually this this actual container so it's gonna be the top container or we can easily just move it right over here so it's not going to be having any any any bad but the best thing is not to mix the up.css or the uh the main css styles all of them just put them in one single file this is going to be really painful as well so you need for each component to split the sas or the split the style for them and put each style on a separate file for each component and when i talk when for each component is actually when you have big components like components that plays major roles on the development of application when it comes to component for example to a button is actually if you re going to reuse this button across the whole pages of your application a lot of other components gonna depend on this button you're obviously gonna go ahead and do the sound for them uh separately in a separate style sheet file so it's gonna be way much better for you actually guys i'm gonna put here um another one which is gonna be the top style or the best way actually to go with this one is let me just go ahead and show you this i'm going to create another folder i'm going to name this top i'm going to create another one going to name it um bottom so we can just copy this and put this in the top uh it says move okay and any actually visually your code likely tells you to or notifies you if you want to like update the imports to for the moving files i am going to say yes okay i'm going to take the bottom as well move it in here and it's going to ask us again so hopefully it does actually be asking i don't know something is actually wrong with this anyway so i'm just going to rename this into index.js and what i'm doing in here is just going to like whenever you try to access the top just only the top directory in here or the top folder it automatically knows that we want the index.js if you specify another file name obviously just gonna go ahead and import the file name for you simple enough i'm going to change this as well in here i'm just going to put it index.js so now we have like this is the bottom this is the main entry point of it and we can put some style files in here i'm just going to put like style dots scss for this i'm going to create another one in here so it's going to be styled.scss pretty great um here we're going to have the style for the actual top file so let me just move this into it it's actually in the top so we're gonna have the top container it's gonna be the main container inside of it we have a title and the top containers i've said it's gonna be display flex so it's gonna have like a flex display and flex direction is gonna be a column so uh columns actually just you know like um to display them uh vertically in here so yeah instead of horizontally if you want horizontally you can use the row instead of the column you can use also reverse row reverse column and stuff like this uh here i'm going to put for example let me just set the funds family for this one so we can easily change it later on i'm going to say from family i'm going to use the oxygen if it is actually defined for your browser or something i'm going to use as well sinceriff instead of it in case this is not defined we will just you know fall back in into the songs serve fun so i'm going to set a font size so the font size is going to be about 22 pixels because it's kind of a title so we want it to show up and the line in here and we're going to have like a color for it so the color is going to be fff for completely white and yeah so this is this is basically what we want here we need to center it since we want this into the actual center so we probably what we want is all the other components actually we want them into the center so we can just take this and put it right over there so we will think more about this select location we can have this button uh let me just move this so we can have this button moved out into right here we don't have to do anything with the other spaces in there um yeah we can we can have that but it depends on you and how you want to layout or style and structure your application so i'm just going to do um okay justify consists i'm going to center it since actually we're using a column so this probably should pretty much work and make sure to include the style file here so we can recognize this really easily so you can just go ahead and do cycle css now it tells us that it couldn't open up anything in here so need to just jump back into the up.jsx and actually you couldn't find that or something so yeah it's pretty bad from there we go just by referencing the index when you actually go ahead and exit the the actual running watch or the server development just you know control c and you can remove this index and you can just go ahead and rerun that because it has a also another bug i found out about that it actually doesn't recognize the index whenever you try to rename the files once it's actually running or something like this so just you know get your head over it try to fix it or something like this now it works without any problems hopefully uh we can jump back into the reacts application um yeah it shows actually nothing for the top container or something it does shows nothing because we have we haven't set any background yet so we're just going to try to grab this background this really nice dark blue background and try to put it right over there so i'm gonna go to the style top i'm gonna say background color okay i'm gonna just paste the color and hopefully now it shows but the height is actually not taking the full space i'm just going to say height to 100 as well as the width so and there we go so just control s there we go we've got we've got now uh the weather up actually 22 pixels is quite a lot i'm just going to move it to 20 and it's actually centering it i don't want the just of my contents yeah since we are using the column so we need to use the alloying items okay now we should pretty much work there we go we've got the weather up perfectly centered up there and with everything pretty much working fine without any problems or issues or something and everything that's actually working as expected now we can have another component that is going to be placed right down here which is going to play the role of displaying all the data that is about this so all of this data is actually going to be grabbed from the api hook so whenever we call the api and the api i'm going to use is a i don't know api xu or something like this dot com it's pretty good it gives you a really nice you know free trial about about 10 000 hits a month or something like this so we can use this and test any career application probably not going to reach out ten thousands a month you can have another apis uh services that provide aps like this for free you might find another better one you know you can just go ahead and just update the application like this and that would be really nice for you so as i've said is going to be all of it just a containing component so we can create another component separately for it and it's going to be um well another stateful components uh for this one so i'm just going to do a class inside of this we can actually have it inside of this or we can create a separately different file the best way is actually to create a separate file because you know you can take it as each file takes one single component unless a file has a stateful component and a status component when it comes to status components it doesn't actually count as a real components you got the point pretty much so here we can create um i don't know so we can we can call this like weather.jsx or something okay that seems quite interesting um okay we can name this reacts from reacts and i can export defaults i can put a class name it whether okay and extend react stop component uh it's gonna have a constructor and everything and why i'm adding a stateful component instead of a status components because we're going to have a state it's going to be managed by this since we need an api call we need to hit the server and get the dna and feature from from the actual api the restore api so we need to change the state like over time we need to set the stage whether we set it to null since we haven't received or if there's any errors or something uh and we said the actual state update the actual current celsius uh in the weather we update the image and stuff like this so we're gonna see more about this when it comes to real world things when it comes to working with the uh or dealing pretty much with the restore apis and here i'm gonna have the render so just gonna be basically uh rendering a very basic uh scaffolding thing here what we have is actually a container so i'm going to return a div dots weather container okay and for this weather container we're going to have is actually the first is the location name then these two containers one is holding the image the other one is actually holding the currents um i don't know the current weather and just we have another container down here which is going to be sunny or shows the the current um weather uh details so sunny or cloudy or whatever things actually happening so we have in here it's gonna be the weather container it's gonna be flex design or flexbox um let me think about this a second so we can have the best i'm gonna create a div so um basically you can have another container inside of this i'm just gonna name this inner container so we can style them the best way and this container we're gonna have like above this um header and a footer so we can actually style it as this way and inside of this we can have two containers like image or yeah we can just call this image and another one we can we can call this actually um currents weather okay and there you go you can just put like 10 um image here location name so we can actually test with them and we can see what's going on we can put for example sunny and there we go now okay the next step is to take this um components and actually call in the top in here so we can actually write before or right pretty much right after the weather up title we need to render this component and get everything as i've said i just want to put all static information in here that's why i added all the static text in here but later on we can use the um weather api to get all of the dynamic data on our components so just simply import that in here so let me just go ahead and do that really quick and then i'm going to say this is going to be the weather component and we're going to import it from the the file components that we have just created symbols that and now we just need to like render it right down here so i'm going to say weather and there we go okay so ctrl s save that and going back into the react application it's just going to use the hot reload or to reload for you guys in here and there we go you've got location name image here and 10 degrees in here and and then basically says it's sunny or something like this so it's not quite as we expected it to be but it does actually a great job so we're trying now to add some stylings uh the way i actually love to add stylings to my either like react applications or any other css style whether you're creating a normal static website html css website or you're dealing with a react application or any other framework you're using it doesn't actually matter because at the end you are going to deal with with the css so you need like a live preview of your css you can actually just go back in here type in the css save and and let the hellhol reload or you can go back and refresh that it's going to take quite some time for you actually guys to develop the application to see the actual size and since actually designers or who designs web page and web developers actually takes a lot of time to put a web page together they need to do a lot of modification a lot of um resizing things a lot of putting things in here color changing families and font sizes and all different things that makes you feel really uncomfortable while trying to do this so the best way is actually throughout the dev tools use the devtools the power of the dev tools and put some css styles from here so we can he really really helps you out throughout your journey as a web developer and putting css styles together so now i'm gonna probably do just go into the weather app or uh the weather container in here is completely received it's completely empty it doesn't have any style i'm just gonna start with the display i'm gonna put a flex display i'm gonna change the flex direction to a column so i want them like you know uh like you know just in a column way here but it's basically a little bit more complicated than that which is we have in here this is the header and we have like two components then we have the footer so this is actually um we're gonna have like three or one more container so this represents the header the other one represents an inner container and the last one in here the sunny thing represents the future so i've got to go ahead and work around with this because this way it's not going to work so we need to work around the structure and change it a little bit uh since we have added in here so clearly we see the inner container the footer and the header we already did the structure and everything so we need to structure it using the css style and put it actually together in order to actually you know make a difference so um since now we just put it like a display flex in here since the flex container and everything uh now we need to go into the header and i'm gonna say there's also gonna be a display flex but the flex direction is going to be low so it's always going to take the row thinking here um yeah that's basically that it is i'm going to go to the inner container and we add another display flex i'm just going to say flex but this time the flex direction is going to be real as well because we want them to be displayed as well like the image is going to be alongside the degrees or the clcs of the weather so basically this is the image on the right um image on the on the left side and we've got degrees in here on the right side basically this is basically what we want and finally we've got the feature so it's just simply as we did in the other side so i'm just gonna display flex and i can i can just like put flex or justify content to center this out because i need it in center as well as the location name i need this in center so we can just go back to the header and justify content to center it's already being centered because the within is taking the fool of it but you can you can see actually the difference when once the size is actually or the text is getting smaller so yeah it doesn't actually matter for this time now we can just jump back in here um we can go to the style of the weather and that if i added a style anyway so if add like i have a top style i can add or clear another style file but that doesn't really matter because it's not really that big of an application that much of large or something so i can simply just go ahead and try to put a header uh in here or try to create another container since it's inside the weather container here so i'm just gonna add a class i'm gonna say a weather container simply and i'm going to add dots um okay can't quite type i still can't find the type i'm going to add the header add this kind of things into it i'm going to add the inner container i'm gonna add the feature finally so when you just tone back copy both things it's just basically a bunch of display flex and stuff like this it's not really that much a big deal and i've got here the same thing for the future basically so just going to copy that just like centers the text and you can put that there now i should save that and it should pretty much take effects immediately without any problems as clearly see it works without any problems the one thing you just need to add in here just like justify content to center save that and it should actually take the center uh perfectly without any problems so yeah hopefully now it works so anyway let's just jump into now trying to add a little bit of better style to it because it looks really really ugly so in the header or the whole container i'm just going to change the color of the font to white because we are having a dark background so it's better to change it to a light color this is actually the best way all the best practices you can take it as a web designer and um well this is the color here we've got the location name and what i want is i just to get some a little bit of margin from the top from the actual title i don't want just all of them are stuck together in here on the top so instead of that i'm just gonna say margin let's stop i'm just going to say i don't know about 3am or something that's quite a lot um let's add one okay that seems something decent or 1.2 okay that sounds good i can just copy that as well i always love to copy my things because saving changes is really important because you just refresh the page or you do some ugly mistake or stupid thing and all of your css styles in here are gone so make sure just go ahead and save them before you do a stupid mistake or something like this we've got the location name now the location name the image and all the degrees we've got now to go ahead and just grab the image and just display it over there and i need to just take the font size a little bit down because this is looking ugly i don't want it to look like a list so just one size let me just put it for example 18 pixels that's quite a large you're going to put um location name sampling this 30 pixels and i'm going to put for the inner container i'm going to put some well let's just leave it like this for the inner container i'm going to put the down or the feature just or fund size and i'm going to put it i think 30 pixels will do the job perfectly and there we go so we can just put that in here so okay styling can quantitative sometimes so yeah it's probably gonna take the hubble video uh that's why you see me actually doing a lot of it and since i haven't created this like uh project anyway it's the first time creating it with you like a live thing from scratch so i have no idea actually how it looks like or something like this and you actually can have some i don't know examples of how a developer actually works and how you can how you can you know take some tips techniques and how you can absorb things and you know use them for your side and help you guys into the other side i completely think i forget about taking something here which is the margin top i think yeah i just okay let me just uh take this really quick i can't quite stop so i'm gonna see 1.2 yeah i'm gonna put the color to white i'm going to use hex in here because it's way much better i can get rid of that anyway here it doesn't really matter so we can refresh but still there's nothing actually taking effect or something uh yeah i'm missing i'm missing it ending here so it's not quite as expected to be weather container you can save that and there we go so location name sunny but um it's taking the margin from here while i shouldn't have put it there okay um good pretty nice actually so i can put some margin as well like margin top and margin bottom i can put about i don't know 8 pixels or something or let's say 10 pixels is quite good and we can put zero pixels from the left and the right and yeah it looks pretty decent let me just try to go ahead and grab this image i've already set up this image in my desktop i have just a messy desktop in here a lot of things that's going on but i can just copy these things i copy this both of these images uh which is going to be used for boston and this just like to shows the sun just for now just for the static thing because they are already out of the api it's going to completely change uh the look and feel of it so yeah it's basically just for now okay let's try now to take a look for this kind of things hopefully it should work pretty much the same so i need to go uh let me see slc uh clearly see they put in the logo inside of here so we can clearly go to the src reveal explorer and try to put something in there i'm just going to put a new folder named it resources inside of resources i'm going to put some like images or something you can name whatever folder you like but i'm just going to you know use this quite good name i've got sun.png and sunnyweather.jpg this is what i need so just refreshing that to make visual studio code aware about the new folder has been created in the in the directory of the working directory and now we can just go ahead and import it and since we need to import inside the weather components so i'm going to do that really quick in there and actually create react up does all the handling behind the scenes of images and stuff so you don't really have to care about how webpack does the bundling thing or how you actually can import an image using webpack gear reacts app has the configuration already so you don't really have to think about it just go ahead and implement it okay now we can um grab that really quick i'm just going to import it as a normal component so you can deal with images as a normal component i'm just going to go back since we are inside where are you beside the top so we can grab um sun image from coming back once okay is that going back we go to resources images and we grab the sun wng now we can create an image container here with this image here i'm going to create an image within src holding up this so it's going to be okay sun image i can just go and get rid of this i can put that and zero's actually gonna go so i'm gonna go in here and there we go we've got the sun but it's not quite centered and everything but i need to go ahead and try to add a little bit of style i'm gonna put it with 100 percent height 100 percenter takes the appearance container this is basically what i want to do so it takes the parent container with and now we can put the width the custom width to this one so for example kind of puts um i don't know 1am in here which is not what it wants okay heights uh three or something that's quite a lot okay seems seems quite good right now it's not really that much of ugly or everything but it looks pretty good everywhere so yeah i don't know but okay let's try to copy that i know uh go into the style inside of the inner container since all of them are inside of the inner container completes image you can put some with inside of it and inside of that we have an image tag or image element so we can refresh that too and that's why i love actually using sas or less and just like a css preprocessor because it helps you a lot to nest attribute or nest tags inside of other tags nest classes inside of ids and containers or children inside of its containers and so on and so forth so it really really helps out during the development of things like this applications so we can go for image and it can put the width a hundred percent and um okay you can put high as well so okay 100 there we go so we should do the job perfectly but it's not perfectly centered as we thought it would now we need to fix it in some style in so we have the image and we have the actual weather they shouldn't actually take um the full height or something i'm just going to take telly to feed the contents and there we go and i'm just going to use the display flex so is that i'm going to use flex display to justify it now vertically inside of horizontally i'm just going to say align items and center there we go now it does the work we are perfectly i just need to take the font size a little bit up for this one but everything is actually working pretty much fine without any problems uh this class is actually named cringer and um it's not it's not much for this meant for this one and this one is actually hide to fits the contents basically yeah and um i'm gonna take the font size a little bit so it could be a little bit more obvious 20 pixels is that a good job or it's not so i can 23 or even more than that it's 25 okay because this is the main thing you want to show up and uh yeah it's really important to show it up in a really big font size because it really really matters and then just go ahead and try to just copy this one uh yeah just gonna take it and it's out of the weather in here just going to put it right there and just copy paste in it so now we can look a little bit much better like a real world celsius thing and if you take a look it looks pretty much identical to this one uh not a big difference you just need to automate this and it takes the height a little bit of that and take this actually down a little bit so i'm just going to try to fix this same styles um of cuts where is that so let me just use the selection the inspection here uh it's actually a header or it's basically nuts okay where's that let me just grab this really quick it is inside of the title and it can take it down like this and it can add some margin to the top of uh five pixels that quite good okay pretty good nice you can take this um you can go to these style basically you think yep let me just now it looks pretty good there we go now what we need is actually we have we have done this kind of things in here with bit of the sun with that we just need the button in here which is the select location button that shows us some custom location that we can select and manipulate and actually we can select this location later on so we can actually probably just show up some kind of a popup whenever we click this button whichever popup we tell the user to enter the name inside of like an input tell the user to enter the name of the location he wants to get the information of the weather from then afterwards we're going to use the api that i showed you and we can we can actually send the request we grab the data about this particular city or a particular zip code and we get this data and actually we display it to him like the weather and we show him whether it's actually sunny or whatever other image in here we can automate this kind of things because this api that i'm just i told you about the api xu thing that allows you to actually get the weather it also provides you with images of realtime weather so whether you're actually getting sun it shows you an image of sun or it gives you in the callback in the response an image of sun or actually it gives you an image of knights like a dark moon or something like this so it's pretty identical and pretty good for us actually as a developers so you don't really have to do a lot of things i just like automates a lot of you a lot of things behind the scenes for you so you can care less about images and automation like this and yeah so uh we've got to go ahead and add a button here and it's like actually inside of the top so i'm just gonna do um let's name this a button i'm gonna take class name of a btn vtn okay selects location okay we have you can just have some kind of a style class in here like a common class which gonna name it btn well that would be better if we put in the side of the up.css so it's be available for everything i'm just going to name this.btn in here and yeah and i can put inside of here i can put some customization for this particular class like the btn select location class um which can be actually used for any other thing but it's particularly made for the location so we can just go ahead and put it inside of i don't know so we can we can put it just like the top container and it should be there just like leave it alone here okay pretty good no problems actually uh inside of this button what we're gonna do let me just try to put a button first then we can care about how we can style it or something okay there we go just put the name or the title of the button and yeah it doesn't actually look as we want it to be but it will so with this really nice color we try to make it with with some borders and broader idiots and stuff so it's gonna first i'm gonna put it um i'm gonna change the border to solid and uh put some kind of aaa coloring around there or just try to put two two okay that's that's not good uh ddd okay seems good we can go now to um let me just put some margin around it like the margin from the top and the left so you can put 15 pixels uh it looks pretty decent now and a zero from the left to the right and um you can jump in here you grab the color let me just select this really quick all the text but this one copy the hexadecimal value of the background and it can pull the background color really easily there we go kind of identical you can change the font size to 16 pixels that is quite large um you know seems seems decent to me or we can take it down a little bit much further i don't know what font size it's actually using but it's actually um let me select the text it's using um i don't think it's that available for us but let's try so once family i think so that is actually available if it's not i'm just gonna fall back to the sensor so you can easily use that and i can add some border radius quite a lot now it actually seems good okay two pixels is pretty decent and uh okay that that's actually pretty good i can change the color a little bit to make it a dark gray so we can put a8 around there or a much better thing 5x5 there we go wow as i quietly want it to be but okay that's that's pretty decent i try to copy into uh this one i'm gonna put just take them since the bottom i'm gonna take the margin and this and we can just lift the old all of the other ones to customizable things so we can copy that it can put inside of the button here and they can both have merged together without any problems and yeah that is actually working pretty much fine i can just go ahead and remove the outline from from the bottom here i'm going to say this and ouch or um yeah i'm gonna i'm gonna change the focus okay that should work if you try to press stance or something or try to focus the button in general you're not actually going to get um any outline or something like this that's pretty decent so it works as we expect it to be now we actually need to work a little bit on the bottom side in here so i'm going to bottom and the index.js for the bottom in here and we have just do a couple of things actually for it let's first just try to add the class name so i'm gonna do um bottom dash container it's just gonna be the container and inside of this container can clearly look how is that so if you clearly look in here i'm gonna just use this image in here from from this um process type so i'm just going to put this image in the background i just i've already got this image in my source code just put it there and we probably you probably not so we can just go ahead and later on at a forecast for the couple of next days we just do a very simple forecast because working on is going to take more much much more time it's not that much of complicated since you know the principles and actually the basics of getting restful api is done in here in just one single component which we're going to work on in a couple of minutes of course and getting everything done in here it's going to be just pretty simple just playing around with reacts and when doing single one a couple of times actually using a group and rendering um components couple of times actually just showing the forecast for every single day and you're done so this is pretty much it not that much of complicated or anything else so as i've said let's go and jump into my source code and have already uh put the image inside of as we have seen which is the sunny weather so it's a lovely image you can find may went much better image of course but let's just go and stick with this for now i'm just going to go to the style of the bottom and let's try to add to this so i'm just going to do bottom dash container so we're going to add a couple of styles i'm going to do a background a dash color to it and um or just like the background and we can we can basically put a url for this background uh it's gonna be we have the style inside of this so we need to get out of this and it's inside of components so we need to get out two times so we're just gonna go back once and go back twice and we can um go inside of resources then we grab images sunnyweather.jpg and it pretty much should do the job perfectly without any problems we might do some linear gradients above that but there's still not really that much of um thing let's try to put the width so it's going to be 100 okay that's not really what i want uh the height as well is going to be 100 and yeah there we go try to save that also make sure to go ahead and import this i'm not importing these style sheets so you're going to do style dots um scss which is referencing a relative path of it just saving this it should do the job i can go back in here um i think we're not seeing any changes anyway so let me just see this the bottom container is is this actually matching it or yep it is but uh it seems a little bit off okay let's check it's the bottom um i added a class of okay it's a top section in the bottom section okay i'm not even importing this either so yeah um go into the app.js and you need to import the top section it didn't do even that so i'm just going to do bottom section from components forward slash bottom and forward slash index so i'm going to grab the index from there and down most cases in here i can clearly see i'm putting the index i don't know for some reason it's giving me an error because in most cases like 90 90 of times you're not required to put the index in here because node.js or i'm your compiler is actually webpack most cases it knows about that it's smart enough to know that you are wanting the index since you only reference the actual path in here the actual folder only without putting the name of a file inside of it it always going to go ahead and look up for a file name by default uh named index.something.js or typescript or something like this but in this case we are required to put it for some reason right now it's just like a really bad buck so it's very annoying you know here i'm going to put the same thing i'm just going to put bottom section and there we go so just simple as that we can now we can jump back in here hopefully we wait for it to compile or not taking quest on time and yeah there we go we've got a really ridiculous uh not centered image or something anyway so i need to work on this image a little bit so we can i could put this center or i can let's try to figure out something okay um so all these center is actually working for this kind of not really what i want spots um yeah it's it's a little bit annoying because the image is not fitting the right spot in here so yeah i want to just like to resize the whole thing in here it takes the full width and the full height of it so i'm going to add the property of background size so um so this property basically it lets you size the background um on an image program actually on a container however he actually wants as a cover as a content uh basically we want them to cover so it can actually scale and fits the inner width and the height of the container so this is what basically what we want and here we can put center and it can put out for example no repeats so it doesn't actually appear or something just to make sure that it won't repeat it anyway and there we go we've got everything basically working as expected but still not looking as we wanted to be in here and the preview it's a little bit deemed as see conclusion here so we've got some linear um color above this and this is actually the css code of this linear color i'm just going to copy i'm just going to show you what is what does this linear color does so here's the linear color you can um change it a little bit to look a little bit much better for us which i am doing now um to make it look a bit better and um yeah other than that it's just looking a little bit off so i try to look good okay this this seems decent um she's gonna go and copy the code and this is the nicest things about figma it lets you copy the css code right of the box so just you don't really need to go hang through it from the beginning and fix all the stuff and and all things around so just like to bring your ingredients you added that you tell it which degrees and you give it the hexadecimal color and from where it goes like from top to left or right to left and so on and so forth you've got like basic direction in and there we go so you can add this just before we specify the url and we can add um a comma and there we go it's just doing it basically as as we want it to be now pretty good you can even actually find a little bit better and smoother linear uh gradient color in here and much much better image you need to put in the background just you know if you do that make sure you just go put it pull a quest or something that just let me see your preview or your application your version of your application so we can i don't know see what you can actually do it and how productive you are so let's try not to basically copy this and go back in here go to the css style and where's the css let me just copy it just nearby this so we can work flawlessly and i'm just going to paste this one very simple save it and it should pretty much work fine it's clearly seen here nothing has been changed or something let me just get rid of that text it's really annoying i don't want any text or something i'm just going to keep it smooth and nice and empty for now so everything would look basically the ones or however you actually want it to be so looking pretty basic without any problems and stuff and now it's time actually for working with the actual api now what we need is to get the real dynamic data here all of those all of these like sunny tanks then the location name and this image in here all of them actually are static and since we are creating a real world weather application we don't really want to deal with any static things in here we want everything to be dynamic so we can just go ahead and put a request there and uh you know fetch some data from a specific api and we get the the json data from from that for the forecast uh for like the current weather for today's weather basically and for the forecast for example for the next 10 days or something like this you can specify how many days you can get and there's a limit for that of course but the ap we're gonna use is actually called api xu it's it's a really awesome weather api and the reason you choose this over the other is because it gives you like a 10 000 hits per month for free and since we just want them for testing purposes it's not really for commercial things or something like this so it's definitely worth it and you can just go in and try it it's super simple it gives you a really meaningful data that you can use so just go ahead and register that's dislike the website so just go apixeo.com uh you can just go and create your accounts uh basically you need the key phrase let me just go ahead and just give you a quick um overview of this api so this like an interactive api explorer that lets you test the api and see what does the api actually have and what data does it return for you what does it provide and does it you pretty much need it or not it gives you two options xml json of course we're going to use json because xml is just like hell and since we're using javascript json is like the feature for javascript basically you want now nowadays to use json for everything so i know so we want to use https over http for a secure layer and here you just put the value for the query which is basically the city name um that you want to get the forecast for it's like you need to use a city name you can't use a country or something because a city name is is what basically describes a weather forecast and here you can choose a courage weather a forecast whether um like search also complaining in history whether that's like you know already or the history of the weather of the past days past years or something there's there's not really much instruction we want we want a realtime weather application so we can get the forecast weather or the current weather let's just go and try to work with the forecast weather because later on we might add as i've told you the forecast for the couple of next days uh so we can just go in and put the forecast for um the weather of the next days basically so we want to use the forecast weather instead of the current weather here we put the query so which city i'm going to just put london um just use it as an example you can put how many days you want to get there's like up to 10 days of a forecast i'm just basically gonna put for example five it's quite decent and you can just go and show response make sure to put your api key in here in order to be able to test that and it gives you this really awesome uh json structured data in here really really easy with with a really important and crucial information that we need through our application it gives you the name of the city it gives you the region specifically gives you for example the latitude the longitude uh which you might not need it for this application but you definitely need it for other things um that gives you an id so where exactly is like inside of europe and london so a local time and a local time is like what is the current time of getting this weather uh data so you can you can do plenty of things for this uh there's also occurrence objects in here so like the last updated the last update as well uh epoch just like the milliseconds or it's a timestamp a temporary in celsius or temporary infrared so i'm going to basically use celsius in this case like four degrees uh is day so it's like a bullion tells you if this city is currently out today or at night it's basically when it tells you zero so you can take it as a boolean either zero one so it basically at night uh the condition of this is clear and it gives you the icon and the icon i'm talking about is basically the icon that we have used in here so it's like the sign icon either it gives you a sun icon or it gives you something like um a night icon like uh a moon half moon icon cleary scene here it's a half moon icon you can clearly go ahead and use this because as i told you we're gonna make everything image the text and the location name and the sunny text in here uh everything is going to be dynamic so we're going to use this weather api really really awesome and a couple more other things and also we've got an important thing like the forecast and it gives you an array of forecast days signing off from the first day so we're starting from zero uh this is the first day temperature and the condition and everything all the information and you've got basically all the data that you need for the days that you've specified uh like the up the next updates or five days and there we go so you simply just go ahead and try and need to install axios so just do npm install axios it makes you to save it as a dependency so what basically axios is just like a library that allows you to send and receive http requests and receive pretty much uh responses very easily with an awesome apis and it uses promises this is the best parts since it uses promises it gets you out of the old way and promises a great way to deal with async code and all of the callback health things or promises are the um the thing that you should actually take care more about especially now like nowadays you should use promises no callbacks are required and for http requests is actually doing pretty great job with a lot of features and stuff so you should probably just go and do it i already installed that make sure to install it it's really minimal it's not really that much of a big deal uh you can just go and jump the that's and now we need to get the actual api key in here so you can just go ahead and grab this api key uh copy it and we can go ahead and use it but for now let's just go and see how we can work with our application so remember that's we've got the top section and the bottom section and both of them are wanting to access the weather api dna so how we can do this for example some of you might ask or might see like like a proposition they say like you can go ahead inside of the top components in here like the top section and do a request like you send an http request and you receive the data then you actually go ahead and render this particular dns out of the render method pretty basic uhhuh so this is not the case actually what about the bottom section in here so the weather section and the bottom section are completely separate uh siblings they have nothing to do with each other's and they they don't actually know each other so they can exchange it at the end unless we use some kind of a flux or something that we're using but it's not the practical thing you to do because you're gonna hit or request the server twice and since you've got a plan that's you're not needing to request this particular server because you've got a limit like 10 000 hits per month or something and you're actually doing it wrong because you're gonna request it on the top component or the top section then you're gonna move on to the bottom section and do another request which is absolutely uh nonsense you shouldn't actually do this so you only need to go ahead and hit the server only once when you once your application is actually starting because your application is basically about whether up data so you need to do it on the startup of the application then passing this dna as props to both of the components and remember that we've got the up.js in here which is the main render of both of these sections like he renders the top section and it renders the bottom section so we should actually fetch the dns out of the up.js then we take this the other that we have got pass it through down through to the top section in the bottom section they can actually use it throughout the props pretty basic now for fetching any data for using restful apis with react the best way to go through or the best way to set up your request and um receive the response and handle all the data you get is inside of the components did mount method so it's actually the best method that you should choose uh for sending requests there's other methods actually but this is the one because once your component is actually just mounted you you've got access to all of the um inner data and and air references of your prewash components and you're not going to get any errors or something like when you put this inside of component did update or something like state conflicts or something like this everything's going to work for you for you and this is the best phase to push the um the data now we've got to access some kind of accounts so i'm just going to set up i'm clearly seeing here it did set up a constructor i think behind the scenes so it's simple just go ahead and set up a constructor as a normal constructor i didn't show that i think in the video but yeah just set up a constructor here put the states um pretty basically in here what we're going to do is just going to put a couple of things i'm just going to say um well let me create a const variable that's going to be an accessor from here i'm going to say whether key equals i'm gonna take my key and put it in here so okay i've got i've got no key let me just copy that and make sure to get your key so you can put it in here as i const because it's not gonna change anyway so we can go ahead and use this and i'm gonna just set up a couple of things since we need this city name so we're gonna add a city name also uh we need like the days of the forecast that we're gonna need to check for we're gonna add this to the state we're gonna say city name going to be something london okay and i'm going to add forecast days it's going to be five days okay that's pretty good you can use up to 10 days in here i'm going to just go ahead and use the d structure of the states so we can fetch together out of the states very easily without any headache i'm going to say city name and the forecast days and this thought states okay now we need some um actually this is the weather api and everything now we need to use axios to hit this data so obviously just go ahead and like import that very easily just do import axios from axios and there we go you've got axios available for you and you can go ahead and use it and as i've told you before axios uses a promise based api so it's very easy for you to go through it i'm gonna do a get request since this accepts a great request to this particular api or this particular url i'm gonna just go with here and before doing any requests is we need to set up the url first i'm gonna just copy the url i'm gonna put it between string literals because it's going to allow us to interpolate some variables inside of this and this is really important we need to interplay some variables like the api key since we've got it up there so i'm going to just go ahead and do the weather key and also for the query we're going to intro play the city name and also the forecast days that's what i've got and there we go so yeah pretty basic now we've got the url basically set up and everything we can just go ahead and take and put the url and as i've told you it's promises so we can use then and catch and it takes a callback so it takes a response and we can do anything with within their response and we can actually go and do a catch so we can catch the air and we can actually check if the air has anything to do with that if it doesn't get you gonna do console.error uh you cannot fetch weather from api and um i can put the air in there so for just very debugging and we can see clearly what is going on behind the scenes so we can just go ahead and castle block the error as well the error objects and if they got the response we're going to do i'm just going to do here just console.log i'm going to put data i'm going to put a response so we can clearly see what is the dna that we are getting back now we're saving this we go back um hopefully here it's going to go in and refresh and once the component is being mounted we're going to go ahead and get the dna back there we go we've got the dna successfully no errors nothing at all and the other objects that axios actually returns for us has a couple of things it has the configuration the global configuration for f4 for axios that you can actually set up and configure we've got the data which is basically the object that we receive from the headed url that we just you know the api that we have just hit and we've got a couple of headers that has been sent back from from the server that we have just from the api and basically the request that we have just sent which is the which has a couple of data actually but and headers and stuff and the status and status that like okay or error or something depends on what actually states you are on with this one but basically what we need is the objects called data which has all of the data so here you see in here we've got the json dna which is current and you can actually deal all of different things in here um that you you can actually access the different data and the forecast and the location and stuff so we can just go ahead and use this and what i like in here using is pipe then inside of that so this returns an object so we can just go ahead and distract this object and move on to another end which means she's going to go and do like a response return data and um inside of this data i'm going to need a couple of things i'm just going to turn the data and the data is going to have current forecast and location objects i'm just gonna return this i'm gonna you know uh pipe another van and this is gonna have the actual idea so this is the best thing all the best part about promises so you can actually pipe and then inside of another then and so on and so forth there we can help you a lot throughout your journey as a web developer and dealing with asynchronous code in general so then in here we've got all the couple of data and stuff like this we can just go ahead and update the state with a couple of things so uh since we need the weather dnf take a look on the top what we've got we've got just a simple title uh the location but this one actually needs a data so we need something to be rendered like the degrees and stuff so let me just go ahead and set up a props for this um the props that we're going to need is actually the data so i'm going to access this let me use a destructor in here i'm going to do a const i'm going to get the data out of it because later on i'm going to pass the dna throughout to the weather.jsx as a props and then we can go ahead and get this data and render it right over here so um just gonna say let me let me see for the api where he's actually naming it so it's naming it temporary c to pretty c and we can get um ease day pretty much it's like a boolean variable shows if it is there or not and um i don't know we can guess basically like the condition well let's go and get text out of it so the text that we need to display right over here instead of the sunny and we can get an icon so i'm just gonna say icon url and there we go i'm going to extract this from these two props and you can use prop types and react prop tops and stuff like this but it's not really that much a big deal in our case so i'm just going to return the temp sir celsius in there i'm gonna replace that with the text that we need to show and the icon and stuff we're gonna i'm gonna talk more about this in a couple of seconds but yeah so this is basically working pretty much fine and yeah this is what basically what we need let's just jump back in here for the top and he it's going to require something because it's going to throw us an error telling us we've got no props or something so and also i need a location name so it's already forgot um i'm gonna say location and i'm gonna put location right over there so instead of the weather in here we've got a couple of things we've got location um we've got as well a temporary see okay there's no comma i don't know is day um we also got the text and the text or the icon url so both of these needs to be passed as well from from the top in here um so also we need to get them from the props in here so we can go ahead and just pass them through this one and we can probably do i don't know what you did this way but you can just go ahead and put the props like using the spread syntax the esx pressing tax to spread the props all over here just pass it through without carrying and putting every single prop name in here because they're gonna have the same prop names so let me just gonna copy all of that because it's just like uh or pretty much cut it go to the up.jsx and we've got we need this on on the top section and i'm gonna give this from the state because we're gonna save this on the state i'm going to do const i'm going to get the city name i'm going to get temporary c i'm going to get east day i'm going to get the text and icon url so all of those gonna be saved inside of the state so we can go ahead and access them and here we need to just go ahead and do this operation so we can do this set state and uh we can pass in the data that we want the city name is not going to be changing or anything because it's static for now we can deal with all this uh later i'm just going to put the temporary c um it's going to be data dots let me see this so it's going to return the current so we need to access the currents then we can actually temporarily see so i'm going to do currents.temp um c also we're going to need easeday which pretty much instead of the same thing in here just we need to access the current inside of the data current dot ease but it is like a dash we're using camo casing in here why they're using um like dash keys in here or something so yeah uh this is for the east day we can pass in the water book icon and all the things of the text so data currents dots we've got condition and um inside of condition we've got text and finally we can put the icon url which is going to be dna currents condition okay and icon simply icon okay there we go so i know i'm not getting any pretty fine code but it's not really that much of good got a couple of errors that's why it's not working i need to pass in a couple of things in here i'm going to pass the city name temporaries the east day and texts and finally the icon url so we can easily just pipe them through using the props so we can go ahead and use them from from the next side and here we just set the stage without any problems just simple as that because setting the state is a really important step to do and uh i'm going to put some kind of a variable in here so for example i'm going to put a layouting and it's going to be boolean at first it's going to be true because the application gonna start it's gonna be really yielding inside of the leodin state and i'm gonna check in here so uh if there is actually any lyodine i'm gonna have like a top section in the bottom section um what it can do so let me see this i'm only going to just go ahead and do this inside of the top section uh i'm going to check let me grab this eel uh what did they name this okay leodin let me just add is because always when naming your boolean variables makes them look and feel as a boolean variable like adding an ease or is it or or something like makes it like a boolean variable so like uh when you ask a question easily odin so the answer is pretty much gonna be for example true or false nothing more nothing less so this is what i mean by making it much more booleaner uh thing in here so i'm going to put ease layout in and and so we can actually render that i'm not referencing this anyway you can grab it up there and if it is leodin that's pretty great if it's not i'm gonna add another one um well it's actually vice versa if it's not leodin we can just go ahead and do that if it is leodine it can remove the knot if it is not we yelled in what it can do is um render something like uh whether okay set some text i'm gonna put in h3 it's not gonna work let me just the yodine weather you can make it just a little bit much better about ideal deodorants or any other cool style that make it glimsey and smooth and nice but that will do the job for now because we want to test the functionality so you always want to start by testing a functionality and seeing if your application logic inner logic actually works or not so we've got easily odin true and here once we finish the audio like we fetch the dna we need to make this false because it's a really important step is the audio we need to make it to be false so we can actually end the loop of our application that we tell it easily ordered or not we can save here we can go back in here what i can do as i've told you the spread props uh capabilities i'm just going to put a dot dot desktop props and we can pass this inside of an object in here and es6 is going to do the job for us with the lovely people and stuff like this is going to help us do that so we're just going to spread the syntax because they have the same names that we have passed in so we don't really have to do that much of things and we're going to give the dna finally in here we can just go ahead and render it so we can easily go ahead and check if our application works uh lyodine weather and i think it never goes off so it just like keeps lyore or something i don't know something ridiculous um it's actually really odin but there we go oh my god it's actually working and we've got london uh four degrees even though there's like there's no degrees sign in here and there's like um the sun thing we've got clear location and the text is working pretty much fine but the icon is not as we want it to be so we can go ahead and change it and also we can add the degrees thing so i'm just going to copy this really quick from here i mean i mean this section of the text um we can go to the weather and here we can just um out of this at the end so it looks much more that's we are using celsius and it's actually actually a weather uh degrees okay and here for the src instead of putting the sun image we can put the icon image and it should basically work fine but i don't know let's try this if the weather image is gonna work fine or not and there we go we've got it that's but it's it's a little bit um not as we expected it to be so we can jump into the style of this and you can see this three let me just take this to four to make it look uh much better and there we go it looks much better much clearer and we've got a little half moon thing that's there and it's selling us four degrees if you you can take a look on google and tell him uh london weather and um yeah he's actually failing us we got here four degrees i don't know google is telling us three degrees but it's basically the same thing i think i don't know but yeah our api is actually working we trust in this api and it working i don't expect you to get it 100 of time uh fine but that should do a job perfectly without any problems i think so there we go we've got your first api started out before a weather application that's pretty good we've got that thing first now we can take this into the next level and we can create um like the forecasting and show up the days in here we're going to create a couple of seconds actually just going to do this really quick and you can also go through this and select a location so whenever you select a location you can go ahead and reload the whole application and uh reselects everything from scratch and so on and so forth it's going to go ahead and take question time of course but that's going to basically be it in a very simple thing so let's try to go ahead and do it now actually for adding the functional into this button and be able to click and get us some kind of a popup like an inline popup then we get an inputs then we'll be able to input the city name we click enter then um the the actual application is going to go ahead and change to that particular city that we have just chosen so i'm going to use some kind of library or thirdparty components or decree for us which called react popper that allows you to easily create popups without a headache or something plus creating a popups is is quite a hard thing to do it takes quite some time and it's not really a bad thing for doing it just uh from scratch on this video so we can just go ahead and use a thirdparty library basically the best thing to do in this in this case so it does the job basically perfectly in here you can go ahead and just install this react popular thing it's available in github with all of things in here and it uses actually the render prop from react it's like basically an awesome design pattern that you can go ahead and use uh let me just go ahead and do this i'm gonna install reacts cover and make sure to save it so i just like um full of documentation in here reacts proper and we normally install or you can use run whatever both of them are actually working pretty much fine so it's pretty simple pretty basic uh this is going to do if we jump to the weather application um i think inside of the top yeah there we go we've got the button and you can take a look in here and explaining the definition of this or how actually it works and how this design pattern works you've got a manager in here that manages the both the popup and the reference and basically the reference is actually the button that you toggle like you click and you show up the popup and you actually uh you know or you hover and you show up the popup this is actually the toggle button that we want in our case it's going to be this we click it and we want to show up the problem uh button or the actual popup container and we've got in here you're basically going to pass it a function and you're going to pass your props from this reference so the reference is going to pass you will props in here you can use this props in order to be able to render this it's a really awesome design pattern and also you can pass in another function here passing you some kind of a props like having a row props which placement it is you put the placement of course above here and what a style and a reference that you can actually use and you can just go ahead and put them all inside of here and you can this is basically the container of your popper or you pretty much pop up and you can just go in and use it it's pretty basic it's not that much of complicated or anything it's straight to the points so we can go ahead and use this right now i'm gonna go ahead and grab it from uh as they've said in here and i'm just going to copy this i don't want to waste so much of time so we've got the manager the reference and the popper and i need to wrap both of these inside of here i can also just go in and copy all that just like copy pasting it's not really that much of complicated so we've got the reference and we've got both of them we need to go ahead and inside of instead of putting this button i can cut this button and put it in here because this is our toggle button that we want to use and we've got just like a very basic popup in here so we can go ahead and test it and see how it works but instead of the right let me just put the placement to the top so we can you know better see this uh we've got the react application i don't know i'm getting um getting two things in here two completely different things like two buttons like i'm rendering them both or something and just might make sure to put the reference in here because this is actually how the design pattern work just with the referencing you're going to allow it to reference then and get the actual exact location uh or the exact position of your target running in here and and this actually can help a lot so yeah um just doing that that can pretty much help a lot but what we need in here is not going to help us anyway so uh as we clearly see the layout is pretty much working we get all of that but the proper elements shows anyway so by default it's visible what we want is only to show it or only make it visible once we click the button so we toggle this like they show up of this popup elements only once we click the button so we need to do like a toggle system so we're going to go ahead and add an all click kill here so once we click it we're going to just do that and i've got above this i'm going to create a private function or private method since we are actually inside of a class context i'm going to name this on select location okay let's let's try to toggle let's try on toggle select location and it's going to take events or basically we're not going to need that much of an event anyway so yeah this basically it's basically where it is um i thought myself i'm actually in typescript that's why i put it private sorry guys i just like i work a lot with time script that's why i did private over there uh but anyway so putting just an on toggle select location method up there and here we want to guess the the reference of that so by default we're going to have is select location open and by default it's going to be full so it's the startup is going to be false and here we're going to do if or we're just going to do the set state and we're going to get the second version so we get a previous state and we can actually set a new state of this of this previous state so we can do like is selects location open and we just toggle it by by just um putting it false to the last stage so select location open and just doing the knots in here we reverse everything since they're just a boolean this is going to do the job for us perfectly and here we're going to go ahead and put this so i'm going to save this dot a selection location or on toggle select location and make sure to bind the current class context by just doing buying this it's a really important thing to do inside of reacts either you can do it inside of the constructor or you can inline do it in here on the event function both of them works so we just like to prefer using it in an online events function and yeah this should do a job perfectly now we need to use this variable so up here i need to go and construct this variable from the stage i'm going to do is select options open equals okay so it's the states there we go and we're not going to allow this to render so i'm going to do is select location location open and so we're just going to do an in operator here so if it's just true it's going to render if it is false it's not going to render anyway and this should do draw firstly for us so we can go back um i think once we click this as clearly we get it once we click again it just like toggles everything so it's like uh now it looks much better as a popup we still got a couple of things actually to add like a style you know to show the proper cursor the the hand cursor thing so i'm gonna do this um where's the button actually so or we can do this a little bit on inside of the update css because it's like generic thing for all the buttons i'm gonna do cursor to pointer and yeah you should do the job uh one other thing is i want to fix the popup so we need to give it a quick awesome style for this popup uh it's really important thing to do so i'm gonna do this really quick i'm gonna do the width about i don't know let's try uh ibm or something like this that's that's okay that seems good okay for the height i'm gonna try five uh that seems decent and i'm gonna do a display of flex um okay that sounds actually good i'm gonna do a border radius of four pixels and i'm going to add finally background color it's going to make make a white background color so it looks stunning as clearly seen here basically i'm going to add some box shadow like i'm gonna zero pixel zero pixel just like center it and it can have three pixels in there uh for the blur and stuff so you can three pixels and you can add for example a big source and it can do rgb r15 15 15. just basically dark gray but with just a little transparency in here and i can actually take this down so yeah it looks much better now way much better so it looks like a real world popup so it better than it was and it's basically doing the job perfectly um yeah i think um putting the top and the bottom i can put some kind of top like this so it gets the point perfectly and i can put just like since it's an absolute so you can easily play around with the top and the left positions in here without any problems actually so yeah you can get them do the job for you and yeah so this is basically it let's try now to uh let me just change the font size okay just make it 16 pixels or something like this um okay let's just just go ahead with 16 pixels no problem with this let me copy that and put it inside of a popup since we are inside of the top but the popup is actually a generic thing so we can go ahead and put it inside the app.sscss it's like a common thing to have you're gonna do a popup dash container and it's gonna be the popup container you know that's where i've got then we can just um go back and reference the same style that we have got so where is that inside of the top and i'm gonna put okay this is gonna take class name and popup dash container great jumping back in here okay that's that seems pretty decent actually so yeah it's it's doing the job perfectly um it can take a little bit of the width and the what is that the updos css can take the top a little bit up like 60 or something i should actually do the job or i don't know i think it's being overwritten that's why i'm not getting it right but what i can do is i don't know we'll just keep it for now like this or we can play around with some css styles in here like inline styles so we can actually take that as you can seriously i'm putting the style in here and which doing the job perfectly but i can put another object inside of this and i can put the top or it's not here the top position to like about minus 55 pixels so it goes a little bit to the top and hopefully does that spot yeah i think this is actually okay this is this is not what i want in here uh it's basically not what it wants so i need to put it inside of this style so this is basically the the main style that i should have put inside of it i'm just missing a curly brace and saving that where is this okay and um basically now it works okay so i don't know i don't like this 45 it could work now for the 45 yeah it does it does a great job okay now the popup's actually finished let's just try to now to put inside of it some input things so we can control this popup um inside of this nifty text i kind of put a div and this there's gonna be a class name like form container and we're gonna have some kind of a label and label html for location dash name or application name and we can put in input let's type text and we can put an id to this input which is going to be location name and yeah so placeholder i can play a little bit place order and i can put city name um all right and we might want to reference another better barn and uh it's gonna it's gonna have the same style of this button let me just go ahead and put it the same style of it i don't want to do a lot of things so and select take a look on it and select selecting here it's pretty much working fine without any problems hopefully and we're doing actually inputs with with some kind of a placeholder we definitely need to add some sounds to it because it's not going to look this pretty much stunning as we want it to be as labor and everything so we can just go ahead and edit the style just a tiny bit so it looks as we want it to be like for the fonts brush size and for each pixels or something okay that sounds good and also we can go ahead and uh do some where is the form container we can do some padding for the form container like five pixels or even more than five pixels six pixels okay and for the input as well i'm going to put the width so we can take the full width out of this okay the input is actually i'm gonna add some border we're used to it like four pixels or something okay that that's quite a lot so i'm gonna do also a border one pixel solid rtba 0.2 um that that's decent actually it's not the greatest thing the greatest input basically but it should a job perfectly so we'll try to go ahead now and style this and i'm gonna put it okay inside of the app.css and i'm going to just create a form dash container and it's actually inside the input so i'm going to put in inputs i'm going to put it there i'm going to have a label and also it's going to have a custom style that i've just set for it so it's just a font size just a tiny font size and we've got also some kind of custom styles for the main container which is the form container and um well it's actually doing it and the try not to go into the popup container and take this fixed height i should do the job perfectly for now or we can just take it up ourselves like 55 em is is basically perfect uh problems and we can take the width and now it looks much much more stunning than it was looking i don't know what he could advance it's um where's this actually so i think it's kind of a popup container they've put it in here yeah i actually did it completely forgot so just pasting this saving it and um there we go we've got we've got that it's pretty decent not really is that much of an awesome things but it should do the job perfectly and since we've got an absolute position so once you change that it actually changes with you but just refresh the application it's going to work so yeah i don't know what i'm getting this but it's ridiculous um i think the problem that i'm doing is if i go to the top is i'm actually overwriting the data which you shouldn't have done but i'm stupid enough to do so yeah your goblet points i should have done that just leave it as it is you can just go ahead and use some css styles to offset this but i'm just going to leave it as it is for now it works pretty much fine with any problems so here we see that's pretty great now we need to add some functionality to it like whenever we click that uh we're gonna change the like we click select it changes the whole thing for this and uh i actually can when i click outside i can't close this it's really annoying thing but you can work a little bit on that so you can you can fix it that's not really a big deal to be taken care of but still a thing to do for your application so now how we can think about whenever we click the select button which is going to be this button we're going to hook up um something so we're going to just like do an event or something like emits and events and it's actually going to take care of doing and refreshing the whole thing and changing the state and actually sending another request to the apis for getting another city and so on and so forth so for basically doing this uh what we can do is use event imager that i've put inside of the flux so remember the first time that we have set up the the store.js and i've told you that it's going to be our flux store so we were actually combining together components so as a child component it's kind of rough and hard from a child component in react ecosystem from a child component talking with appearance components that's in the hierarchy this is actually really ridiculous to do but using a flux like apparent compared to flux or even redux for higher end application of larger projects but for now just flux is doing pretty much job for us great job for our application without any problems actually so we can just send the dnf from the child back to the actual parent component without any problems and we can use for this case uh something called events and events imagers so i can actually go ahead and create something like this so what i'm going to do inside of this store i'm going to go ahead and grab this events i'm going to do events immature from so the event event's actually a modular created for you um by default and it's not for you from node.js so it's like um a prebuilt smarter it's a standard module on node.js so once you actually use npm you install the packages you're going to find it by default install for you inside of the node module so you don't really have to install it even though you don't have it you can just go ahead and install it but most of the times 100 you're going to find it over there so you don't really need to require install anything and yes this is basically what you should just take be taken care of uh now inside of here inside of the state we can save some kind of an event imager then we can use actually this object so inside of the constructor not the state actually so i'm just inside of the construction i'm going to create an instance of that i'm going to do this dot event image here it's not a couple case because it's just like an object instance so that i'm going to do new of event image i'm just creating a simple instance of this and this actually when you take a look on it you can do event or image or not accessing the actual object so event imagery dots you're going to find a couple of methods like the most important for us is the emit method that allows you to actually emit um an event to the whole registered callbacks and listeners and inside of the on method you actually register your listeners for specific events names and events keys and stuff so we can use this to actually the parents gonna play the role of a listener that listens for specific events to be fired up and from the child components we can just go and fire up these events we can pass him some data that we can actually use in a specific channel or that the parents uh think they're gonna need in our case it's gonna need actually the city name so we can pass him from the child to the parent and he can actually get the dna and refresh the whole things and the states and stuff like this i'm gonna try to grow that and as i've told you whenever i try to render this i'm gonna pass in the events immature all the way down to all the children's so this is gonna be the case thinking here i'm gonna do it right over here so we clone the elements we're to just pass in the states but alongside the states i'm going to do this dots or i'm going to name something event imager and i'm going to pass in the event imager you can just go ahead and pass in only the on and the image events if you really uh perform as flindy don't really pass all the things into the hierarchy of your children but it's okay for now for our application and it's going to help us a lot for performance and stuff so it's not really a big deal to be taken care of now we can just jump since the up.jsx is this next thing is going to be uh rendered so we inside of this dot this dot props so remember it's going to be passed through all the props in here we're going to get something like event imager has the reference of the object that we have created up there and actually we can get that really easily in here um what is this okay so once we get it um let me just think for a second where we're going to use this i'm going to use inside of the top section so here i'm expecting to get from the props inside of the render i'm going to do just to expect that we're going to get is like an event where is that imager and it's going to be this top rops but basically i don't think i'm going to use it in here anyway so just expect this that we have is this way and we can just go in and pass this i'm going to do events immature equals this dot prompt events imager remember that's we have just passed it from there so yeah it's clearly the way that we should do that we're going to get this event image here but we first need to register a callback once we click the select button we're going to get to the data that is inside of this input and how we can do that that's i'm going to talk about this in a second let me just going to first add on click call back inside of this i'm going to name this for example i'm going to do this dot on select city i won't select city okay just keep it like this i'm going to bind this to where okay i'm going to add this boundary to it and uh it's going to be selecting everything hopefully so we can oh and now on select city it's going to take an event and everything don't really care about the events and we actually need to go ahead and do another method on um city name change or on location name change so this can actually update every single time go ahead and update the state and it's going to take events so it's going to be a change event from reacts and every single time we update the inputs this change event is going to be fired up and we can go ahead and update the states with the new value that we've got from the input and i'm going gonna have a change events in here so on uh location and change i'm gonna find the actual this callback okay and as i've told you it's gonna guess basically an event in here as for the change so i'm going to basically just go ahead and do this thoughts set the states city name or let's go ahead and do its location name it's going to be e dot target and i'm just going to fetch the value from the target target is actually representing the actual html and input elements so it's the reference of it and we can just access the value of it the current value of it as the mean time of receiving this particular event and we just go ahead and just do with this dot set state and we save that basically without your problems and now hopefully should work but now we're actually gonna guess the location name like this text is gonna be saved inside of the location name of the state so let me just go ahead and do this reference unit here i'm going to be locationing this dot states and what i'm going to do i'm going to use the events image without it gets from the props i can also go in and reference that so event imager is going to equal this dot props remember that you have just passed this into it i'm going to do events imager dots and here we're going to emit an event remember i'm going to imagine events i'm going to give it a name of or let me just do updates weather so updates whether it basically is i'm gonna hear what's data or type of data you want to pass it through i'm gonna just go ahead and pass um an events or the actual city name that's we have got a location name so remember it's going to be location name and that basically it now up with the hierarchy on the uh the up.jx remember the app.jx is actually the main component that is responsible for fetching the dnm and doing the states and doing all the changes and stuff like this so what we can actually go ahead and do is just go in and do like components dip mounts we register the event listener for this so i'm gonna just right below this i'm going to go ahead and register the events imager uh from this top props so i can i can reference that so event image here is going to include desktop perhaps and down here event imager i'm going to list foreign events for a specific invention name is gonna be uh where is this update weather okay and it's gonna be a callback so here we're gonna guess the actual data that we want which is gonna be just gonna name it data there's going to be an array so we need to access the first uh step of the data so i'm just going to go ahead and do a console log of the data or location name so to make sure that everything's pretty much working fine and i'm gonna just do data the zeroth value and this should actually return um an object and i'm gonna access okay let me location name so it's basically the api of how the image event imagery works it returns or it gives you in here is inside of this callback it's going to give you an array of all of the data so if you try it in here to pass multiple things you can do it so uh remember the first one is going to be the zero index and the other one is going to be this the first index and so on and so forth so since we only have in one it's still going to be an array anyway but we need to access the first index of it we fetch that and it's going to return objects of all of the anodized inside of that and we can just go ahead and fetch the location name pretty simply but let me just get rid of that so um i'm not pretty sure that's going to be an object anyway but let's just go ahead and see compile that's going to here and we can try to you know take a look on um just give it a quick look um what is this update weather component the amounts let me see this i don't know kind of uh something not working and yeah it can it cannot actually be the property on if undefined um for some reason the component the amount is not actually getting the events immature data from the amp that we are rendering let me take a look on the index.js we're rendering the up okay that's that's a kind of problem i didn't do that i talked about the store we created the store and everything so remember that we've created a store and we meant to use the store like a flux store so we've got to use the store as a wrapper to render the application but we didn't do that anyway so i'm actually full or something but let's try to go ahead and fix our what we did we can just go ahead reference the store we get the store then we can instead of the up in here we need to use the wrapper so it's actually uh to work as we expected it to be so it's gonna be the wrapper of things in here and now hopefully it should work if you're jumping back in here we take a look on the console log we're not getting anything since we haven't done anything yes try to put some city name for example gonna put um i don't know purse or something okay try to click select and there we go we've got the location name there we go this is location name but even though that's we're only getting the p for some reason uh we're not getting purse we're just getting the first character so that's pretty nifty as well let me just check that again just getting p that's really ridiculous i think the problem in here and it's not passing an array or something i don't understand that but the last time i used this it was passing away believe it or not but right now all of a sudden it does decided not to pass in array i'm gonna put a paris again select and there we go i've got paris so just ignore my what i said it it won't pass an array or something i don't know i'm so confused you can just go in and check out the documentation but this is basically how it works now it works we tested it and everything is pretty much working fine we can just go ahead and do the whole process but the whole process is a little bit confusing and it's going to take us quite some time so we can just copy this old code and ugly thing and we can just put it in here and so on and so forth which is not what we want so what we can do instead is actually just uh go ahead and set the state and everything is going to be rendered for us and um the component is going to check but in this case we only put it this like the component bit mount so only when he tries to mount or something it's not going to be like it's clearly see if we can take a look on documentation call immediately after a component is mounted setting state here will trigger a rerendering only rendering but um nothing completely different so let's try and i would go ahead to set the states enough talking i'm gonna do set state i'm going to change the city name i think it name the city name okay i can put city name and i can put the data so basically what it is try to see if that works once we click we input this new city name and we click select location does it gonna go ahead and change the location name and refresh for that i'm not quite sure let's go ahead and try to test this i'm gonna say pers selects and there we go we've we've got that actually so we've got pears we've got everything updated basically pears as well as actually at night we might want to choose something completely different like california or something so to see the difference um i don't know i don't know how to spell california or something but yeah it's actually updating california but it's not updating something like the celsius or degrees and um it only updating the city name for some reason so yeah as i've told you this is not as we expected it to be so we need to move on this logic from here to a completely different thing so we can just go and create a function for it and once we hit that we can just go ahead and fire up this function so i'm gonna do a function updates weather and this update whether is i'm just going to take that's the whole thing of it i'm going to paste it here i'm just going to copy that as well this is all needed up there so there's city name and everything and i need to call this every single time that we want to update the video so firstly initially by default once we get into the application without receiving any events or something we want to update this so he gets the initial thing i'm going to do updates weather and actually after putting this dot state and we set the city and we set actually the data now we've got to go in and update it so we call this da update whether the the method that you have just created up there so what it does it's just gonna go ahead and grab this url i update it it does the get requests and everything and later on it sets the stage and updates every single thing so this is what probably should do after setting the city name so it takes this new city name from there and update it with this but actually there's one single problem with this architecture we're thinking about remember that reacts when it sets the state everything is going to be asynchronous so when a synchronous code is gets executed you can't actually know if the set state is going to be first or the update whether it's going to be first executed so yeah this is really confusing so you've got to go ahead and use the callback to help you that and likely this top point state or the sense state method gives us that and it provides you with a callback so you can just go ahead and use this what you can do with this callback is actually when the state has been sent and updated successfully you can just go ahead and call this the update weather and this will probably pretty much going to go ahead in here just by cutting the update weather and we're going to go ahead and put this as the second parameter so the set state method takes a second parameter which is a callback that gets executed after um the state has been set successfully so it's a normal combat gonna use weather or rail callback in here and we just like update the weather and once the city name has been updated with the data we can just go ahead and um you know update the weather so the weather can know about the changes have been made to the city name that was really important since we are using it in the update weather method and we're distracting that and we're doing the whole you want old thing we are encoding this data on it it's really important to ensure first that city name has getting updated on the state then later on we can just go ahead and you know get the data and fetch it from the api xu doc dot com or something the api rs4 api then we can just go ahead and update that let me just get rid of that i don't really need it and save so it compiles that um hopefully now if you can take a look um the set state is is actually gonna do the job and um the update whether pretty much will get executed of the state has been successfully set so there will be no problems and uh you can just go and refresh that it loads the weather we wait for it now we first need to try to set the state and for example california we can go in and do select as you clearly see behind the scenes it's changed it changes the icon update updated the degrees think uh also the the city name has been updated and all obviously the text that we have got in there everything has been updated now the actual way that we have thought about has been working actually very fine without any problems you can also use another thing or something by using this but right now i'm thinking is actually when you get this popup you click the select button and actually the popup gonna be hard automatically so try to add that so we go into the index top uh component or the top section component and i need to actually find the on click method so the popup container in here is going to happen is actually hide it once we select the container so when we do that um hopefully we can go ahead and use this so we can press is select options open and we can put this to false so once we click the select button it's just going to go ahead and falls that's that's pretty much we're going to do in here uh just let me just go ahead and select that i can clearly see london and this london thing is going to get its by default because we're having this inside of our state and it's sitting there by default you can go ahead and change that by default or better thing to do is actually you can get the location of the current user this is actually what most of the weather application gonna do and to do this in the browser browsers a little bit tricky so you've got to get the permission for the getting the location and stuff you can go ahead and do it using the javascript api it's not a big deal or something you can find a thirdparty library saying they're npm and you can go and use it very easily but i think what i'm talking about is getting the weather and i'll try to select it in here as clearly see uh but we've got a box so i think i thought or i put this in um the wrong place yeah i shouldn't put that on select location name change so actually need to find uh select city so there we go this is the method that we want to you know hide the popup so we can go ahead and do this dot set state and actually we can put um a selection popup open and we can just set it false this is basically what we want once we select the city or to barely say once we push the button we do that and actually we have to emit the events before that so refreshing um just wait for this and i don't know i'm having two instances of this uh now trying again california once we select that there we go the popup gonna be automatically hidden for us and this is a really awesome user experience so this is actually what you should be doing care about uh better thing or better user experience you can have like a close button inside of the popup and you can just go ahead and let the user exit the popup uh you know the time doesn't allow us to do so so you can just go in and ignore this and let me change it to four days because this is gonna use instead of five days it's quite a lot so i'm just gonna go ahead and try to work on the bottom section and try to display up to four days of forecast so from today and the next four days and we can just go ahead and do that so the bottom section we try to add inside of the container like a you know add the ending div or the closing tag of that and we try to add the bottom container but actually here what we first need to do is actually get another component that gets rendered so obviously what you need to do is get the forecast day which is like an array and basically just go ahead and use a map function or it's basically a for loop and loop on each one of them and return that so you can easily render them so i'm going to add a new component i'm gonna name it um you know forecastdate.jsx and this is gonna render a single forecast date and we're gonna have four forecast days gonna be um rendering there clearly see here have an array so i'm going to simply just type in import react from react this is an usual thing for creating a component and we can go in and export a default like uh forecasts um on a day or you can use days or something in this i don't know let's go ahead and just put it like this way noncapillary and we can extend the components simply you're just creating a normal class components so constructure the props and super with props too since we're going to need the props in this case because we're going to pass in the data inside of the props and this data is going to be actually the forecast day day and now so we're going to get that and actually we use the render to return the actual structure of this so if we can take a look i've got in here like a simple container that you know shows the um the forecast date that we can actually copy the css code from figma as you clearly see in here the right side and we can for example display the degrees and show up an image or simply just show up the text in there like for example it's cloudy or sunny or you know something like this or overcast or anything like that so we can jump back in here um let's try now to go ahead and render dev with a class name and for example we're going to put forecast day dash container so um it's going to be actually the container for the for the whole thing that is going to be inside of that we can have another day which is going to be the image so it's going to be the container of the image and we can have another one which is um let's try something like text okay so gonna be image and text and here we're gonna test with an image so simply you can just go in and put an image uh let me just go back in here and try to copy the url for this just for testing purposes as i've told you before you always need to test your you know your code your components that gets rendered in something then you can integrate or invoke them with apis so yeah the apis of the dynamic data comes at the end you can put sunny there now we can jump um i don't know the forecast day container here conjunct with those style.css for the bottom which is actually inside of the bottom you can put an image and this is the image actually the class name and we can have also the text which is also a class name in here the main container for the text we're going to put i'm going to have an image tag since it's going to have an image tag obviously the width is going to be 100 relatively going to take the full width and the full height of the main container which is the image container here we can have for example i don't know let's look on um the size of this i just want to make it a little bit smaller than the the top section image that we have got in there so i don't know try it for with about 2 am and heights exactly 2 am i don't know that sounds decent for the text you might want to set the font size okay the trend font size or yeah okay font size about let's try 12 pixels okay that should be decent like 12 pixels and we can save that now we've got to go ahead and use the components and actually render it but before so we've got a first gets the data from the main application what i mean by data is actually gets when we fetch the data from the restful api we are pretty much gonna pass this data uh as a prop to the bottom container then actually on the bottom container we can go ahead and do a for loop as i've told you or a map function and it's actually gonna use a map function because on react when you try to loop an array you've gotta use map functions so we can jump back in here um as we clearly see we need to go into i don't know the app.jsx in here and once we update the weather api we've got to put another data for the forecast day so let me just go and name forecast days it's going to be an array as we have seen in there since we are already getting it away so this is basically it we're going to just save on the state and array so clearly seen here we've got the forecast then the forecast days which is an array um yes we're going to just save that so we've got a first access data forecast and forecast days okay so um yeah that that should be actually it's and we just actually access the objects that we are going to get now on the bottom section we can go ahead and pass in as a prop so we can do forecast days equals this um i don't know we can use the disc this structure let me just put that first and i can copy this and just put in the state in here like we've got this structure um yeah i've got i've got already the uh the stating here i know what i'm doing but so i've got i need to put forecast days or all right i basically need a forecast days with with no capsule d in the middle but yeah i actually think i have some kind of a name convention but okay never mind we're gonna just put that and now what we expecting inside of the bottom section components is actually we're gonna distract this from the from the props so the forecast days and um simply we're gonna do this top prompts so now we can take this and remember we've got an array inside of that let me first just import the new components which is going to be the forecast day components from from the file list we have just created so okay there we go we just import that and simply we've got an array in here inside of array there's a couple of objects each object is going to represent a single day on the forecast so once you request something like um five or something we're expressing for you're gonna get this exact four days inside of the forecast so yeah it's pretty simple uh let me just go ahead and change this because it's a little bit annoying so the name of the convention i'm gonna change it to four and of course i've got like forecast days let me change it to num forecast days so it's a little bit much better for a name a convention because we've got another variable in the states named the same thing like forecast days which is an array we don't really want to put that so you already have to know how to name your variables because that's a really important thing when dealing with an application especially if it's large or a complicated project thing so components nested in china side of each other's uh if you try to look in here so we're going to do just the forecast days in here and so i've got to first wrap this um i can't do that so we've got to go ahead and do like the escape inside of the gsx and here instead of the map function we're going to get um a cool bag that gets cold with the each element out of the array so you can just remember or take this as a for loop even though you can use a for loop inside of a gsx to render things so the only way to render an array and loop on each item and render that each item contacts so you've got to use a map function so this is basically why my functions exist in es6 and they are very powerful a lot of people use them so we can get the dates the index uh now we've got to go in and do it's just like go and return each components or for each object inside of that just return a new component which is going to be the forecast day so remember that it actually takes um a couple of data from the props so i'm going to go ahead and pass it let me just get him uh you know i need to make this dynamic so we can go ahead and use this but for now let's go and try to use this for testing purposes and it should pretty much work fine i just put the key and the key actually going to tell react how to organize things especially use them inside of the map so they all going to be stacked above each other's and the key gonna let react differentiate between them and allow us to optimize the application and the rendering process and now it's actually yielding but i think it's kind of a stock or something i don't know it's taking quite some time to leo the weather and it's stuck on the lyodian weather screen try to fresh that um take a look sneak look on that and there we go we've got actually an error so the error says uh it's actually on the bottom container and we've got canary property map of undefined so for them some reason the forecast days is actually undefined and let me just take a look on that so i think the props now are being passed and defined and everything is is actually working fine here but um yeah i think so let's gonna try to use an end in here so to make sure that only render this only access the map function once the forecast is actually available otherwise don't access it so it's really important to do so on a react application especially when you're using a lyodin um you know screen or something like this the props not going to be layouted or when you actually use the rest for apis this really helps so let's try um i think it's not working it's still stuck some reason and there's actually kind of a really annoying error in here take a look on the ears and as you clearly see so the data from the api cannot be properly forecast they have undefined okay so we've got some kind of an error in our api that we're trying to parse the json data that we are getting from the of our api and i think um i'm feeling looking pretty much fine in here but when we set the data uh the forecast i think i'm missing an e in here so the forecast i'm misspelling a forecast okay that's that's actually pretty great i'm misspelling that and for getting e in the middle so i'm just going to put forecast day here just fix that i'm going to fix that as well the key that we're sending is out of the states uh also we're going to go ahead and then just fix the states fix that on the bottom container and pretty much the bottom section and also we can fix that all over the way on all the components in here um now that should do pretty much the job because it's just like uh you know the syntax error nothing more nothing less and but okay try to refresh that either we get something there we go we've got we've got actually a really awesome thing so it's like sunny sunny sunny but all of them are structured or put it like in a vertical line so it getting the data but not perfectly so yeah it's not perfect as we wanted and also without having a static data in here so it's not really that much what we want uh we need to change this and make it look much better on the side components in here but as i've said it's working pretty much fine as far as you can see in here and we need to structure that and fix the style a little bit so it looks a bit more awesome you can change the background in there like you can you can find a really better background but this is doing the job okay now try to use this and try to fix the style so i'm going to put a display effects for the for the actual container the main container the forecast date container i'm going to use flexbox it's a great way for dealing with your elements i'm going to do flex direction i'm going to keep them actually in row um for a reason i'm gonna put a justify contents in center and uh i'm gonna put also the align as you're gonna like align them vertically and horizontally just align it in center gonna do the job perfectly hopefully for that uh we're actually getting them centered horizontally but not vertically and they're not displayed in a row so for some reason that that's not actually happening as we want it to be so there's clearly some issue in our style and we have to go ahead and fix that so um yeah that's really a little bit annoying let's try to add another inner container so it's going to be working as an inner container that wraps all of the data that we have got in there it's always better to add an inner container inside of your main container which is in this case the bottom container so this inner container can hold the data uh or whatever you're under especially when you're using a map and rendering and rain looping through it so you can put the style in here make it like wraps the whole image and the text and everything we can move all the display flexes out of that and let me just make the width and the full height so from forecast container and pretty much this should do the job perfectly for us for taking the full width and the full height uh also the inner container um i don't know that seems a little bit compromised it's taking the full height actually uh it's actually a lot of height actually taking it but still not displaying as we want it to be so let me just double check that uh the best way is actually to use it in specs and i'm gonna just dive into the hierarchy of the rendering and take a look on our elements try to fix the sales styles it looks like all of them are taking the full width and the full heights for each forecast day in here each forecast container and that is not what we exactly wanted to do um that seems a little bit of a misunderstanding if we try to do in here and also the inner container is actually taking the full width uh for some reason so that seems a little bit annoying okay let's take a look on the style.css and i don't know that that's a little bit weird uh i've got all of that okay that i totally forgot about that so i'm just going to take the inner container and put it up because it doesn't belong it's on the forecast day container so it actually belongs inside the bottom container that that's my bad it's not a shell a child of the forecast a container instead it's a child of the bottom container and it completely misunderstood that now it somehow looks a little bit as we wanted but not exactly there's still a couple of things to do and yeah we actually need to put them in the center but they're not perfectly centered and i think the problem is um let me take a look that's so full width it's out of here um i think the problem is we're just putting the full width and the full height but the forecast containers each one of them is taking the full width and full height let me just try to put none items to censure and um to completely center them i'm not putting display flex there that's clearly annoying when you try to working with the styles so each one of these are taking the full width what i want is actually to center them so that's a little bit off when it comes to dealing with the css styles and rendering data from an array and trying to take care of that uh let's try now to like you know hook up the api and try to push or you know pretty much uh push the props i'm going to name this day i'm going to call it day and i'm just going to pass in the day to the to the actual forecast now we can change from the static test that produced and we could use actually the props from from a dynamic data you've got from the restful api and that should do the job perfectly we're going to get the day and here we also need to change the static image the static icon to let me take a look on that um for temporary we've got an average temporary so we can use this so we can do i don't know date dot um average temporary you can use a max or a minimum temporary but uh okay that's that's pretty decent if you're just going to use an average temporary there's a plenty of data you can go ahead and render but they're just going to make it simple for now you can also go to the condition we can grab the icon so i'm going to access icon and yeah let's try to refresh that okay there's there's actually nothing being displayed on the api like we are getting nothing so let me just double check that it looks a little bit like there is something wrong with this yeah the condition is actually missing and here for the average temperature um yeah we've got an error like day.condition.icon you can now access the property of undefined and i think there's a problem when it comes to props and since we're using leodin but i don't know i think gonna return and know if there's no day and uh if actually the day has been received and undefined it's going to return null so we're not going to render anything because the risk for api hasn't hasn't you know sent a response back to us and hasn't responded anyway with the data that we need so therefore we might use that but uh taking a look inside of this the condition seems fine and uh yeah i think we've got a day unless we were missing actually so we need to access the day property which is the object that holding all this data so we can do this in here like data or we can just go back and here we say day dot day and actually we can pass in the current day so i mean the objects of the day so it has an object of the day and it has all a couple of things like the day uh time and stuff like this and there we go it works pretty much now we get the icon we get the um you know the average temperature just getting like a little bit like a floating point or a double point but that's not really a big deal you can go and change it or you can like you know show both the minimum temperature and maximum temperature and uh let me try to fix or play around with the css style in here so hopefully he can fix that and the width is actually not taking the full width and the full height um let me just try the third 3m or something just give it a custom width and custom height um i'm gonna go ahead okay so it's taking the full with the full heist both of them are being aligned um i don't know some reason it's not working let's try to put display flex just to find content to the center and also align the items to the center there we go now we've got them actually perfectly aligned because they weren't aligned as we want them to be inside of the forecast container and it wasn't actually putting a flex or a display flex that's that's my bad and this is the problem i've got and now we should pretty much do the job perfectly the children try to copy that and let me just you know take this a little bit up uh the actual width of that copy the css styles can go inside of okay the forecast container can just overwrite all the data and now it should work pretty much fine so take a look in here try i don't know let me take a look and and put a color in here fff because the color is not exactly matching as we want it to be since the background is not the best thing for this dark gray color now the white color might look a little bit better but we still need to upgrade or take the width of the height of the image is a little bit up that's quite a lot so can take it 3.2 i'm not sure this that's still ridiculously i don't know a lot just three would do the job okay and there we go that seems much much more interesting than it was and it actually displays everything perfectly he gets the forecast and he gets everything uh you know the api is working we can actually pass the props you can add another one which is gonna name it for example muted text and uh this one gonna have actually the text for your for your day for example sunny or cloudy or something like this like the condition of that so you can put the condition dot text inside of this and um i can i can you know make sure that's it's like exactly inside the condition now we can go in here add the class of muted text and we can add i don't know the font size of this it's going to be let's put 12 and see the color is going to be um okay let's try something like a little bit darker than the ffff or something i'm trying to call the color picker and there we go we've got the color picker now and try to figure out something like uh dark gray not completely white spots something that could do the job try this okay let's take a look on the style um yeah we've got we've got the dark gray but it's not looking great as we expect it to be so let's go and try just change it back to the white just completely white ffff okay that does the job perfectly now and let me just take this down to 10 pixels and yeah that sounds pretty great so 10 pixels does the job perfectly and the style that we've got is actually pretty cool so yeah everything seems to be nice we've got the icons we've got the weather you can just go ahead as i've said you can put the current location and everything gonna be automated for you but if you take a look on the update sas in here let me just take the heights of the application so it looks way much better and there we go now it looks like much much better with the image in the background and um you know the forecast of the days and and the weather the current weather all the information always listed and that's pretty much it for the weather application that was actually very basic thing just want to point you guys to uh creating a new weather application hopefully you actually enjoyed the video tutorial i'm ipa so you can go ahead and check out my channel down in the description you're gonna find the code in the repository and github you can also find the link in description below actually it's i think a computer to freecom cup so hopefully you like this if you like more videos like this let me know in the comments and i'll be very happy to do so and yeah also you can just go ahead and check out the iphones.com with a really awesome source much more stories like that and yeah so thanks for watching this video again hopefully you guys have enjoyed that and see you all hopefully in another video tutorials like this