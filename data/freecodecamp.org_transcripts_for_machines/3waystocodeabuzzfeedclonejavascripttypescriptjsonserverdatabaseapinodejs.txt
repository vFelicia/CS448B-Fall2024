hello everyone here on freeco Camp my name is Anya Kubo and I'm a software developer as well as a course creator here on freecodecamp as well as on my own channel in this video I'll be showing you three ways to build one thing I'm going to show you how to build a buzzfeed clone in JavaScript followed by a version in reacts using Jason Saba for mimicking an API and then build a typescript buzzfeed clone with a mini backend using node.js to communicate with our external database so a lot of Technologies and the coolest part about this app is I will also prompt you to the next question once you answer the ones above and scroll to the top most unanswered question use some cool scroll logic that we will write together okay so what are we waiting for let's find out what cheese we are thanks to building out BuzzFeed in these three different ways ranging in difficulty and Technology okay so here we are on my code editor of choice I'm using webstorm which means all I have to do is start a new project and I'm going to create an empty project and just go ahead and call this Buzz feeds clone JS okay so all I'm going to do is Click create and that will spin up a new directory for me of course you are free to use whatever code editor you wish so if you're using vs code or anything like that just go ahead and create a directory and open it up in vs code once you have done that we're just going to add in some new files so we're going to create an index HTML file making sure to give it the HTML extension and then also create a style sheet my style so Styles CSS and then also a Javascript file which I'm going to call app.js just like so so there we go those ro3 files make sure to put in those extensions so that your code editor knows to treat them as a HTML file CSS file and JavaScript file now first off well we're going to be doing the majority of this in JavaScript okay because we want to populate the question based off some data but we can put a little bit of stuff in here so let's go ahead and just change the title of this document that so that it shows up in the browser when we open this up so I'm going to put BuzzFeed clone and then of course we need to link up the style sheet so we do this using the link tag Rel sheets and then we also have to put the href which will take us to our style CSS file as it's in the root of the project we could just put the file name like so and of course we need the script tag making sure that it's at the end so after everything in here loads then we read the JavaScript at the moment there isn't anything in here but just make sure that that's at the bottom anyway and we're going to link it to the app.js file now in here I'm actually just going to create a section and in this section we are going to have a header that says what cheese are you now we could have fed this in from the data but you know I'm going to show you how to feed in data anyway so if you choose to find the title after this then that is your choice and then we're also just gonna have a fun little paragraph underneath it this quiz isn't cheesy or anything okay so making sure to spell anything correctly so so far that's what's in our section I'm also going to get a div and we are going to be injecting stuff into this div using JavaScript what we're going to be injecting is the questions so I'm going to pick this out I'm going to give this ID of questions and then I'm also going to create a div where I'm going to inject the answer once we've answered all the questions so I'm going to give this the ID of answer so you could also pick it out in our JavaScript so this is it this is really everything we have in here does it fit yeah there you go it all fits kind of nicely I can even make it smaller if you want so that you can literally everything okay and then this would be the proper indentation as well so script section cool nice so that is our HTML done uh what should we do first should we give this some basic styling yeah let's do it I'm actually going to put my style sheet over here and I'm just going to open up this index HTML file in the browser so with webstorm I could just go ahead and click this and I will open up the document in our browser I'm just going to inspect this so you can see what's going on so there you'll see the body with the section with H1 tag the paragraph and the two divs that I made or if you're using uh other code editors you can also do this by going into the project clicking on the index.html file right clicking and then just copying the path the absolute path and go back to the browser and pasting it like so okay it's it's the same thing so there we go which cheese are you let's give this a little bit of styling so the first thing I'm going to do is actually just make sure that everything is centered so I'm going to grab the body let's make this a little bit bigger and again I'm just going to minimize this and move this over perhaps so I've grabbed the body and I'm going to use display flexed initialize Flex box and I'm just going to justify content Center to make everything centered horizontally and then all I'm going to do is grab the section and the section I'm going to hard code the width to be 600 pixels okay so that is how coded it won't change I'm also going to grab the H1 element and just give it the font size what font size we want to give this we can work in Ram 2.5 RAM and then let's give it a line height of 0.1.05 text align left so we don't want it to be centered and also the P element uh well with this let's also give it a font size we can do it in Ram so like that and also give it a line height of 1.2 great so now if we look in a browser and just hit refresh there we go so this section is kind of in the center and has a hardcoded width of 600 and the text is aligned left and the fonts have been changed now if I want to actually use a different font see I'm like no I'm not keen on this one and it doesn't look like what BuzzFeed does we can actually pick out a font thanks to Google fonts so I'm going to do that too we're going to have to import it so there is a font that I found that I quite like it's Montserrat and it's the closest thing to the one on BuzzFeed so let's go to Google fonts let's search for monsterat and I'm just going to select let's select a few so I can do the thin one the light one medium we can really just pick out all of these if we want and if we view them I can use the import we could do in the HTML or we could do it directly in the CSS file so I'm going to do it in the CSS file so I'm going to copy all of this and then just at the top here I'm just going to paste that in okay so I'm actually going to minimize this so you can see everything I've just pasted in that entire line which will give me the font Montserrat along with the weights okay so that's what it looks like and now I'm going to apply this font to everything all the elements in my document so star means everything and I'm just going to do font family month so rat making sure to spell it the same and sounds serif cool so that is looking good so now if I go to my clone and refresh that font has now been applied wonderful let's carry on so now I think it's time for us to start injecting the questions into here so let's get up our appsius file and the first thing that I'm going to do is just pick out these so I'm going to pick out this div by the ID questions so I'm going to use documents it's a little bit bigger query selector and look for the ID of questions and I'm going to save this as a question display the next thing I'm going to do is the same for the answer display so cons answer display and I'm going to look in my document my HTML document and then look for something with the ID of answer and I believe it was a singular answer answer that's right so we've picked those two things out and now let's get to injecting stuff into them and what I want to inject is stuff from this data so const questions is it going to be an array of all the data that we're going to use for this quiz so we need sir three questions we're going to answer three questions in order to find out what cheese we are so each question is going to be essentially an object so there's one there's another there's another and now I'm going to give each question an ID so we can keep track of it so this is going to have ID 0. each one is also going to have the actual text of the question question so let's go ahead and put pick a vacation destination and then we're also going to have the answers available to us so there's going to be an array because there's going to be four of these and each one is going to have essentially one of our choices so the first choice is going to be New York uh we're gonna have an image for it so we're going to put the image in here which is going to be essentially a URL to unsplash.com is where you can get loads of free images but you do need to credit them we also need to add some alternative text so I'm going to put a photo of the Empire State building during daytime again I'm just going to get rid of that and then we have to give this credit right because unsplash asks you to do that so we're going to put the credit of this photo which is Oliver nubat okay and I actually have the URL already so I'm just going to go ahead and paste it in here like so if you want to get this specific URL then please visit uh my description where I'm going to share this code so you can take this or you can find your own image okay just visit images.unsplash.com and find a cool image of New York and just grab the whole URL to do it so for those of you who perhaps haven't done this before you can get any image really so for example if I visit Wikipedia and just type in New York and if I want to get a picture of New York City I can literally just essentially what I'm doing is left clicking on here copying the image address and then this is essentially the images so that's exactly what I'm doing apart from minor not from Wikipedia they're from unsplashed so that's what we need in order to get one answer so now let's do another so this is the form that it needs to take so let's open up our curly braces and I'm not going to subject you to this because you know I've already kind of done this for you so we're gonna have New York we're also going to have Austin with a time lapse photography of cars and then we're also going to have Portland with a photo taken by Elena kuchko so there we go and then last one we're gonna have New Orleans okay so that's just one question we have two more to go so making sure that is finished now so here we go that's our first question we're gonna make another so let's give this the idea of one this time and let's carry on this time the text is going to be pick some food and the answers are going to be so let's open up our array let's get the first answer the first answer is going to be a pizza so you can choose to select a pizza with a photo of some pepperoni pizza by Ellen Hardman let's open up another object the second one is going to be a sandwich because who doesn't love sandwiches so there we go uh the third one is going to be some pasta it's actually going to be some pasta and tomato sauce and then finally the fourth one is going to be a hamburger so I'm just going to paste that in like so so there we go that's our second object and our third question so id2 is going to have the text of picker home this time so this is how the three important questions apparently for how to find out what cheese you are and the answers are going to be well let's get up our first object so our first answer is going to be a traditional home so I'm just going to paste that in here like so our second answer is going to be a modern home this time so I'm just going to paste that in and then we're going to have an actual house so like a fullon house with a garden everything and then the last one is going to be the mountains like some cabin in the mountains or something like that wonderful so that's all our data done please go ahead and check you know like obviously that's working with arrays and objects it can get kind of messy so if you're getting any issues just check out my code below cool so now let's use all this data in order to create some questions so what I'm going to do is actually write a function um I'm going to use a function expression for this so populate questions that's what I'm going to call it so just like that and when we call this well for each question in my questions array so if here's a questions array and here's each question we've got three in here right so four each item in my questions array which I'm going to choose a cool question you can call it whatever you like and call it I if you wish I like to give it you know some readable value so for each of those what I'm going to do is use document create making sure to spell document correctly document create element and I'm just going to create a div so I'm going to call this div something I'm going to call it title block okay and this title block I'm going to give it the ID of the question ID okay so we can just keep track of it that will be useful later what I'm also going to do is get the title block class list and we're going to make a class called title block so we can see it in our browsers and before we do anything else let's just see what this looks like so of course we made the div we've got an ID we've given a class name a title block but we also need to put it in to our questions display so let's grab the questions display and I'm going to use append to put in the title lock wonderful and of course we need to call this so we can actually make this function do something it's just been called otherwise nothing would happen and now let's style this up a little bit like a block so we can see something in the browser so class of title block because we added a class and the title block well I'm just going to hard code each one to have a width of 600 pixels a height of 210 pixels a background color what we're going to do RGB and then 102 96 221 and then we're going to do a border radius of 5 pixels display Flex justify content because we want to Center everything in the center and we also want to align so we've just centered everything horizontally if we want to Center everything vertically too so it's like literally in the middle we do a line content Center and make sure that it's got a height otherwise that will not work and of course these two will not work without the display Flex and let's also give the text of everything in here some uh just white so I'm gonna do cool so that's our title block so now if I look in the browser I should see three question blocks right tada one two three but they're kind of like scrunched up on each other um which is fine for now because we're going to be adding the question options in here too or the question answers I call them okay but first we also need to add a heading in here so let's go ahead and put a heading inside this div we just created so the div that we called in our JavaScript title block so let's go back in here so let's create another element so we want to put in let's put an H2 tag so I'm going to use document create element by putting document here doesn't mean I'm actually putting it in the document yet okay it's kind of floating around in nowhere we have to put it in using append so that's something that might trip you up let's create an H2 tag and I'm just going to save this as title heading just like so and title hedging text content equals the question text so for each question in here so again this is one question I'm going into the question because I've chosen to call it question and I'm getting the text we've already got the ID now we're getting the text next we're going to get the answers which is an array which which means we're going to have to use four each again on this array but don't worry I'll walk you through that when the time comes cool so we've given the title heading we made an H2 tag we've given it the text from our data and of course next we need to put it in and we want to put it in the title block right so title block append title heading cool so I believe that's it so if we look in the browser and hit refresh so here's the divs we made there's nothing in them at the moment and if we refresh that tada we have put in the H2 element with the title wonderful let's carry on so perhaps let's also style up our H2 tags because I want them to be a little bit bigger so I want to override the default styling for the h to element and I want the H2 element to have a font size of 3.5 Ram a line height of 1.05 and I want to text and what the text is already in the center so we don't need to do that cool so the next thing I want to do is just create a block for all my questions to go and so all four of them so once again I'm going to do document to create element I'm going to create a div I'm going to call this const question Z block and I'm going to give the question block the ID as well so question block ID this time the ID obviously happens to be different because we can't use the same ID um that's literally the not the point of IDs they're meant to be unique so I'm just going to add the string of questions as well so we can pick it out later and the question block I'm also give it the class list add of answer options so perhaps we should call this answers block now let's keep it like it is I hope that's not too confusing so now let's actually give some styling to this so answer options uh and the answer options I just want to make sure that all four items are going to go in this are going to be spaced out evenly so I'm going to use display oops making sure that that's in here display Flex and I'm also going to make it Flex wrap wrap so I'll show you what this looks like without it and I'm going to justify content space between so that there's a space in between them not around because I want it to go all the way up to the edges so space between will literally give like a little Gap in the middle between the objects cool and perhaps Also let's give it a margin just at the top 16 pixels Zero from the side 23 pixels at the bottom and zero to the right wonderful so we've made a div that will store all our questions the next thing I'm going to do is actually populate the um the the on the div with the class of answer options so I'm going to do so by getting the question answers and then four each so this is exactly what I said earlier we're getting the question answers and using four each so we can essentially use these four items to do stuff for each answer I'm going to create an element so document create element and I'm going to create a div let's call this answer block okay and the answer block is also going to have a class class list add of singular answer block do you know what let's call this answers block because it's annoying me I feel like it should answers block answers block answers block okay yeah because the answers block is going to hold all our answer blocks that makes way more sense okay so our answer block we're adding the class of answer block so perhaps let's go ahead and add that too I'm essentially just going to make them like uh little squares that have a width of 286 pixels and a height of 286 pixels let's round them off a little bit so border radius I'm gonna get five pixels and I'm also going to give it a box Shadow so box shadow RGB a because I want the to be transparent I'm going to do black so that's black and then 0.07 opacity okay and then we want zero horizontal zero vertical zero uh blur but then one um spread okay cool one pixel that should be those can be zero without a unit but that needs to have pixel okay and I'm going to make the text align Center I'm going to give it some margin at the bottom let's just say 15 pixels and overflow hidden okay so that if anything comes out of this box like an image that we want to put in then it will be cut off cool so we've done quite a bit I'm not going to show you the browser because we haven't actually put this in if I wanted to though I guess I could put the answers Block in and we put the answers block into the question display so we've already put in the title block and outside this for loop I can also now put in the answers block so now if we look in the browser you will see r title block but also the div that we made with the id0 questions that have the class answer options and we haven't put anything in it that's what we're literally doing now we're going to put the four questions in at the four answer blocks in it so let's go back we've added a class to that answer block next we're going to get the answer block and use add event listener to listen out if we click on the option and for now I'm just going to put handle click which of course we haven't written yet so that's equal back function uh const handle click so we'll write that later I'm just going to write console.log clicked for now great so next we're going to put in the image so we're going to use document create element and create an image element and I'm going to save this as answer image and we're going to use so let's get the answer image that we just created and I'm going to use set attribute to set the source of the image as the answer image okay because We're looping the same this time We're looping we're already in the loop this is our second Loop and we're getting the answer image we're also going to have to get the answer text and alternative text and credit so alt is the next one that I want to do so answer image set attribute this time alt and I'm just going to get the answer Alt Okay so we've done that of course we haven't put it anywhere else yet we are going to have to essentially append that to the answer block itself so down here still on the loop I'm going to get the answer block and I'm gonna append the answer image so we've got the image the next thing we want to do is uh create the I guess like a little answer title so let's go ahead and do that document create element and I'm going to create an H3 tag this time I'm going to save this as answer title and I get the answer title and I'm going to use text content to just give it the answer text it wasn't titled it was answered text because that's what we're getting we've got the answer text okay so we've done that we've got the answer title so now let's put it in so we're going to put it in after the image so this order does matter because it's literally the order we're going to be putting these elements in until after we have the answer title we're going to have the answer info so I'm going to create a document again create document create element and I'm just going to create a paragraph element and I'm going to save this as answer info now I'm going to get answer info and use text content uh or am I no I'm not because we're gonna have to make some links in here as well so let's create a link I'm going to call it image link document create element a tag and with the image Link Link a image link I'm going to use set attribute to set the href to be the answer credit so that's essentially who created this image right we also have one more link to make and that's the source link which will essentially just give us a link to unsplash so document create element another a tag let's get the source link I'm going to use text content to assign the well just the string on Splash right and then if we click on it so source link set attribute I'm going to set the source to be https www dot unsplash dot com cool so once we have all of that I'm going to get answer info and I'm going to use a pen to put in first off the image link then just the string two with some spaces around it and then the Source link okay so that's our answer info let's go ahead and also put it in the answer block so just gonna put it in here and before we do that we actually need to get the answers block and append the whole answer block itself cool so now if we look in here and hit refresh handle click okay right that's fine we'll just do that for now so I made a call back and we'll just do that for now and tada this is looking great there's a few things that didn't work however why is the P tag not showing up so there's a P tag but it seems to be kind of below there seems to be some sort of styling issue so let's solve it so we've done overflow hidden um perhaps we should actually stall the image itself as well so I feel like obviously without the Overflow hidden we would see all the other stuff but I'm just going to say that any image that exists in the answer block well I'm just going to give it a width of 100 fast okay so that's looking a little bit better this is it's just too big that text that's why it isn't fitting to my wanted size so I'm gonna once again get the answer block and say that any P tag that lives in here is going to have the font size 11 pixels and the font Style italic okay and just the same I'm going to actually get the answer block and say that any a tags that live in here are going to be gray so let's give it the color RGB oh let's just do I don't know which color we should do so I'm just going to use this to pick out a kind of grayish color RGB one one okay RGB just to keep everything kind of consistent even though I know we put RAM for one font size and pixels here I'll go back and change that later so now tada even though why is this not working to unsplash this should have a name so let's go back to our code image link hrefr okay the image link also needs some text so image link text content equals answer credit as well so that should actually show the name as well as link to it cool so that is looking wonderful this is looking so good why is this one not centered however hmm let's start the H2 tags just to make sure that everything is centered was H2 text align Center wonderful pick a destination pick some food and pick a home so now that we've done that let's get to writing our function for the handle click to handle our clicks so what this means is that I want to actually collect all the questions that have been answered make all the others disabled and do some scrolling as well to make sure that we scroll to the uppermost unanswered question so let's do this let's get up our app.js file so okay I'm gonna get rid of this now in the handle click well what do we want to happen well if we click on the actual Square um we want to know which question it belongs to is it question one two or three so we're going to have to pass that in to the handle click here so let's open this up and for whatever question we are on so question ID that's what we're going to pass through we're going to pass through the question ID and we're also going to pass through the answer text okay so I don't need to call it the same in here in fact let's definitely not I'm going to call this question ID and chosen answer so now if I console log what we are passing through just hit refresh so click that's the question ID because we're on question zero which is pick a destination and I've clicked on New York Austin and if I click on here this is question two so we've got the id1 and ID to Modern traditional and so on so that's working that is good now let's use this to our advantage so what do I want to happen well actually what I would quite like is to make an array of unanswered questions so that we can essentially work with it so I'm going to do so perhaps right under the data so right here I'm going to go const on answered questions and make this an empty array so unanswered questions why is this not like it on on I don't even notice for answer anymore I've said it so many times on answered oh my gosh okay I'll answer the questions so I'm going to get this array and I'm actually going to push in um each question ID and I can do somewhere We're looping over each question so let's maybe just go ahead and I mean we can do whatever we want so unanswers questions and I'm going to push the question ID in here okay so when we create all the questions all of the questions are going to go in the unanswered array okay because they're unanswered yet but however if we click on one well first off we essentially need to get rid of something from the answered unanswered questions right but we also need to make another array of chosen answers so I'm going to do that up here const chosen answers again an empty array I'm going to get the chosen answers array and push in the chosen answer now we probably want to do this only if the unanswer so if unanswered questions includes the question ID so say we click on question with ID 0 and we click on something in there it goes oh yes it's included so it's unanswered so we can go ahead and push our chosen answer in here and then we can also remove that from the unanswered questions so let's get our unanswered questions again and I'm going to use index of question ID and then save this as item to remove and then if item to remove is larger than 1 I'm going to get the unanswered questions and splice item to remove so that is how you would remove something from an array based on its answer okay so I'm essentially finding the item to remove and I'm looking and answer the question and I'm getting rid of it okay so that's the piece of code to do that so now I'm just going to console okay console.log the chosen answers but then also console log unanswered questions so let's look in the browser so if I pick traditional we pick traditional that's been put in our chosen answers array and you will see that on unanswered questions now consist of zero and one because question zero hasn't been answered and question one or with id1 hasn't answered we have a question with id2 has been answered so it's been taken out of the array cool right and if I go ahead and maybe pick one from here okay so just this one to answer now sandwich so now all our questions are answered there's nothing in the unanswered array and those are our three chosen answers cool rights but we are not yet done of course we have like edge cases and stuff to do so if there's basically nothing in our unanswered questions array so on answer questions length does not exist well then I just want to show the answer right because we've answered all three there's nothing unanswered questions we want to show the answer and ideally we want to scroll to something so I'm going to put scroll to answer div okay so that is something that will happen we also want to essentially disable the question blocks right the ones that haven't been chosen so disable question block or the entire question block minus the one that we chose of course uh and to do this we're going to pass through the question ID into here and the chosen answer as well and then we're also going to have to scroll to top most unanswered question in fact we could do this now so let's do this before writing the disabled question block because I'm going to show you how to do that so to do this well we need to find the lowest question ID and to do this we're going to use a math Min okay math Min will return the lowest value from an array so I'm going to get that array and I'm going to destructure it to get all my unanswered questions and pass them through into math men like so and that will give us the lowest question ID and I just want to scroll to it so I can use location H ref to scroll to the ID of whatever the lowest question ideas so let's check it out um I'm of course going to have to comment out show answer because we don't have that yet so now let's start at the top I'm going to pick New York and then it takes me to the second question and I pick one and it takes me to the third question same for if I start on the third question it should take me to the first question and it does pick a vacation destination and Let's do let's start on the second question so one two and it should take me to the top one great and if I answer that amazing so it's taking us to the top most unanswered question I hope that was useful I thought that was pretty cool let's carry on so now what shall we do let's show the answer yeah let's go ahead and do that so const show answer and all I'm gonna do is uh essentially show so we're going to create an answer block first I'm just going to move this down a little bit so document create element and I'm going to create a div and I'm going to save this as answer block now I'm going to grab the answer block and I'm going to use class list add result block I want the result block to be pink so the answer to be pink so let's go ahead and do that I'm going to get the result block and I'm just going to give it a width of 600 pixels a background color of RGB 255 61158 any border radius of 5 pixels okay so that's what my results block is gonna look like um we'll do some more styling in a bit but for now I'm just going to add that and then what else do we want to do well we want to have a title so let's go ahead and once again use document create element to create a H3 tag which I'm going to save as answer title now I'm going to get the answer title and I'm going to use text content and it's going to give it the result text and then I'm also going to get the answer image and I'm going to use document create element to create an image and I'm going to get the answer image and I'm going to use set attribute to set the source to be well we're actually going to have to write some data for this right so I'm going to go ahead and name this answers and it's going to be array of all the possible combinations of answers that I have so it's not actually going to be all of them because you know we need a lot of data for this so I'm just going to essentially make four and then make a default answer as well of course if you actually got all three combinations that would be a lot more but hopefully you know that and if you really want to make all the combinations then please go right ahead so if the combination is New York in any order by the way New York is that so it doesn't matter which way you put this in the array but we will do that in the code uh traditional making sure this has to be spelled exactly the same otherwise it will not work then the answer that you get is blue cheese or blue cheese and then the image that you get is going to be again from unsplash just a picture of some blue cheese that I found so there we go once again that will be in the code that I provided and we're going to have to provide some alt text so I'm just going to go ahead and put Alt blue cheese okay so that's one answer that it could be now I'm just going to copy paste these four and then like I said we're gonna have a default the default one is just going to be um well it could just be the first one we'll decide that later so for this one if we choose Austin pasta modern you get to be cheddar so I'm going to change this to be cheddar cheese and that is going to be the image and then this one is going to be Portland sandwich mountains the image we'll put in later and you are a feta cheese I'm gonna put feta let's put feta here too and one last one let's put New Orleans hamburger house and then you get to be halloumi let's get rid of that as well and I'm just gonna put halloumi cheese wonderful so those are our answers like I said the combinations need to have a default answer to compensate for a lack of combination data okay so in the show answers we're going to have to essentially get the the answer right of the combinations so I'm going to put this as results so let result and we're going to get all the answers and for each answer if our chosen answers includes the first item from the answer combination array and the second answer and the third answer so if three of those are included then the result is the answer which will be an object right it will be the whole object of the answer else make sure to spell answer correctly which is going to default to the first answer object is default so I'm just going to assign the value of answers first item to the result okay so great that will give us our answer so if I console log results let's just check sure okay so that's being called so if I go ahead and pick New York Pizza traditional okay so that is our answer we get the answer which is an object that has the alt blue cheese the combination the image of some blue cheese and the text blue cheese so that is cool now we need to get the answers essentially text we need to also get the image and all that and assign it to here so the answer image result image is going to be the answer image we're also going to get the answer image and we're going to use set attribute to set the source and the result alternative text and now we're going to get the actual answer block to the answer block and we're going to append the answer title and the answer image cool and then we're actually also going to get the answers display that we picked out and append the answer block which has all three of which has all two of those things in it so answer block cool so that is looking good let's have a look to see if that has worked so once again one two three and there we go even though the blue cheese image is not working why is that there must be something wrong with our data okay so that's fine oh that should say Alt so there we go so now some things we need to do are actually disable any other clicking right because otherwise two Jesus show up and we don't want that we can't have that so I'm going to show you how to essentially get all the um answer blocks and essentially disable them so we're going to do this on the show answer right at the end of the show answer function clean this up a little bit so let's get all the answer blocks again const all answer blocks because we have to get them in their current state or onto blocks document query selector all I'm going to look for anything with the I class name sorry of answer block and once we have that we're going to create an array from this array from all answer blocks and then for each answer block we're going to get the answer block and do replace with block answer block clone note okay unfortunately we can't have uh we can't just do remove event listener that will not work so this is a way to do it and pass through true so now once again let's just test it out if I just go ahead and select some oh two two one oops let's do it again we got even though we shouldn't really have blue cheese but if we click on the others you won't see anything else popping up so Austin sandwich modern I feel like this should have given me a different sandwich so let's check it out uh Austin pasta modern let's try that one Austin pasta modern still giving me blue cheese hmm okay so because we are looping even if we do get the correct answer and then we do another loop and turns out there isn't a combination that result's been going to be overridden by the default answer we don't want this so I'm going to put if else else if sorry there's no results if no result exists only then do we give the default answer and finally let's write our disable questions question blocks we're going to disable the whole question block minus the answer that we have chosen and for this we need to pass through the question ID and the chosen answer so let's uncomment that out and I'm just going to pass through the question ID and chosen answer I'm going to look in the document I'm going to get element by ID and look for the question IDs we're looking for the essential question block so we're going to look for as we know something with the question ID questions and I'm going to save this as const current question block and now let's get the current question block I'm going to make an array from it array from current question block children so all of its children are going to get all four things and four each block I'm going to say that if block children item one so the second item in that block so essentially the title if the titles in a text does not equal The Chosen answer then we're going to get the block style and add opacity 50 to it okay so that is what I have done essentially what I'm doing is saying I'm grabbing I'm looking in here so this is the div with the ID questions and I'm looking into it I'm getting all of the children all of the children and then for each child I'm getting the child's second item so I'm not getting the image I'm getting the H3 tag and if that equals The Chosen answer well then I know not to disable it so for example tada and you'll see New York is not disabled same for the sandwich you'll see all three are disabled and same for here wonderful and of course you can't click on any others great so that is it that is my BuzzFeed clone I hope you've enjoyed it I hope you've learned a lot one last thing I would do is of course change everything so it's not RAM and pixels and of course we need to scroll to the answer here as well so on the where do we leave the scroll to answer so I'm going to use location href equals and then we're just going to pick out the answer active by the ID answer okay so that is it and that should scroll to the div with the ID of answer wonderful I just want to clean up a few things so actually when we set the attribute of the image link to credit it shouldn't be credit it should be the image link so I'm just gonna use answer image for that and I notice that we aren't getting an image of Portland so let's go ahead and change that Portland is just showing New York so I'm just gonna switch that out like so and then let's change everything so that it's consistent I'm just going to give the H1 30 pixels let's get rid of the line height for now the H2 20 pixels and the paragraph tag go let's look at the H2 maybe larger so 50 pixels instead that's looking watch watch better and just get rid of the line height maybe let's just make this 15 instead and finally we just need to add some cheeses that we are missing in here so let's go ahead and add a URL for cheddar a URL for feta and a URL for halloumi as well okay so that's all I am doing right now and now in the Styles I'm just going to style the images so I'm going to say that any image that lives inside the result block is going to have a width of 100 and then I'm also going to give the results block a border of solid and I'm going to use this color I'm going to say 20 pixels thick okay just so the result is like that great thanks so much for watching and I hope to see you again soon okay so let's do this let's make our BuzzFeed clone and react so all I'm gonna do is start a new project I'm going to go ahead and click new project on my web store which is the IDE that I'm choosing to make this project in if you're using vs code then please go ahead and spin up your directory in any way you want I'm just going to go ahead and select react here which will essentially spin up the project that I need with all the files as well as configuration thanks to npx create react app and I'm just going to call this react buzz feed clone and click create now for those of you who are not using webstorm please just go ahead and get up your Terminals and whatever you choose so for example I can do this in development I'm going to use npx create react app so that command to essentially do what is happening in the background right now and I would go ahead and call this react BuzzFeed clone and just hit enter and that once again will essentially give me all the files and all the configuration I need to set up a react project but I'm not going to do it this way right I just wanted to show you I've already got webstorm doing all of that for me so I'm just going to let that do its thing and once it's ready you should be able to see all the files along with a package.json file which is going to hold all the dependencies that we need for this project okay so great and there we go happy hacking that is now done I can now minimize this and if we look in the directory code react was being clone you will see the punch Json file which holds all our scripts as well as all the packages that we have these other versions that I am using so if you're watching this future and something doesn't work it could be down to the package so just go ahead and change the package and run npmi making sure that you are in the directory so npmi to install the latest versions of those packages however I'm not going to do that so let's put that back to 18 that's an 18 for react Dom great now while I'm again just going to clean some of this stuff up because we don't need it I'm not going to be writing any tests or reporting any vitals so I'm just going to delete these files like so delete anyway I'm going to delete the logo as once again we're not going to need it we're just starting off completely from scratch so delete that delete anyway and then delete the test file because we're not going to be writing any tests as I said I'm going to delete the app CSS file as we're going to hold all our styling just in one file as this isn't really a very big project okay so now if you look in the index.js file you'll see this I'm just going to get rid of everything that we don't need so we don't need this import anymore I'm just going to get rid of the semicolons just because that is my preference okay so just like that that is now my entire index.js file now my index CSS file once again is going to start from scratch so let's delete everything in there and the app.js well I'm just going to change this to a functional expression as that is my preference so const app and let's use the arrow function here and we're not going to import these two things const app sorry I have written that completely wrong so there we go and then we're just going to return a div for now okay so there we go that is now what my app.js file looks like I've stripped everything down okay so now if we run this so let's go ahead and look at the script npm on start that's what I need to do so npm Run start making sure that you're in the directory and hit enter and this should bring up my browser with my project on localhost 3000. and there we go okay and if I inspect the page get a back console log we are now ready to go wonderful so I'm just going to minimize this again because that is running let's get rid of the packaging file get rid of the index.js file I'm going to keep the app.js file the first thing I'm going to do is actually just think of what components we need to make our BuzzFeed clone but we're going to have a title okay that's going to hold you know the title of the article we're also going to have a questions block this is going to hold all four of the questions that we can answer and then we'll have each individual question container as well as a reveal answer block to tell us what we are what cheese we are so let's go ahead and do this so let's make a components directory I'm going to make a new directory called components and in here I'm going to create a new file this is going to be a jsx file and it's going to be called questions block jsx I'm also going to create a question block jsx or individual for each individual question and then an answer blocks a new file answer block which is going to show up to show us what cheese we are and then also the title which is going to probably be the easiest component so title jsx okay great and now let's just create each component so there we go let's return a div for now and then let's export default the constant okay so there we go I'm actually going to use this I'm going to copy this for all the others so this can also be answer block and then we export it so there we go our answer block next we have the question block individual so question and then the questions block which is going to hold all four of our individual questions and we need to answer in order to find out what shoes we are great so that's all our components done next let's go ahead and import some into here so I'm definitely going to have the title import title from you want to go into the components directory and I'm going to get the title just like so don't forget to put this and I'm simply just going to use it like that so now if I just put something here I am a title and we look at it in the browser you will see I am title okay so that has worked just going to make that a little bit bigger great so now that we have all the components done I think we should start by adding our data so let's go ahead and do this I'm just going to serve this up from a Json file so I'm going to show you how to do that for your own projects in the root of your project I want you to go ahead and create a file which I'm just going to call database Json which is going to hold all our data and now we're going to add all the data that we need to populate our BuzzFeed clone so let's do it well first off in a database I would imagine that each kind of quiz is going to be an object in itself and I'm going to maybe give this the quiz ID right because if I was working at BuzzFeed I want each quiz to have an ID and I'm just going to make one up for now like we're not actually going to use it I'm just showing you what I imagine this would look like a buzzfeed HQ next we're going to put the title of the quiz itself we know this is what cheese are you question and then we're also going to have a subtitle okay and this subtitle is going to be this quiz isn't cheesy or anything okay let's put in dot dot so there we go so that is the quiz object and each quiz object I imagine should have content right and that content is going to be an array of all the different questions that we have so one question block is going to have the ID of zero let's just say of course we can give it whatever we want and then the text of the question block is going to say kick a vacation destination you will see how tab 9 is trying to guess the uh text for me whether it's a I Thank You tab 9. so that is what it's going to say and then we're going to have the actual four questions that are possible for us to pick from okay so the first one is going to have the text we could have options we could have questions it really is up to you the first one is going to be New York so are we picking New York and then we're going to have an image that's going to show us essentially New York so I've already picked this out so I already have an image of New York that I'm going to use so just like so if you want to just use your own images what I would suggest doing is going to do something like unsplash.com and then you can literally search for a picture of New York like this and then click on it and copy the image address and essentially that's what we're doing we're just getting that image addressed just like so but instead of putting it in the browser we're putting it in here okay so there we go and please do credits whoever's image this is just because you know we're not paying for it so it's the least we can do to support artists uh let's also give it some alternative text and first off let's give credit to this photo to Oliver Nesbitt thank you sorry not neswit niblet thank you very much Oliver new bullet for the wonderful photo and the alternative text I'm going to have is photo of Empire Building during the daytime okay so that's one of our options one of our questions for the question block next uh we are going to have text it's not going to be New York this time it's going to be Austin and the image of this is not going to be the images above we're going to have an actual image of Boston which I've again picked up already so you can I will be sharing of course this project with you so please feel free just to copy and paste this whole database if you want to the whole file I'm just going to talk you uh through it there so just make sure to actually understand what it is your problem and the alternative text for this is going to be just a time lapse of Photography car photography so again I've just predone this to save us time and credit for this is not going to go to Oliver this time credit is going to go to Carlos Al Gonzo so thank you Carlos okay so I think you get the jizz so I'm just going to copy the other two we're also going to have Portland as an option and New Orleans as the fourth option okay so as you will see each question block so this is my question block right here okay that's my question block and each question blog's gonna have an ID the text and then four options to choose from okay so let's go ahead and create our next one we're gonna have three question blocks the next question block is going to have the ID uh not titled bridge but nice guess and description it's going to be something else too so this one is going to have the idea of one and the text is going to be pick some food because apparently we need to pick some food in order to find out what kind of cheese we are and actually we're not going to have description we're going to have an array of questions so this is an array so let's open up our array and create our first object and that first object is just going to have the text this time of bit set an image of pizza alternative over any pizza and credit goes to Adam Hardman for the project and change that to give that the integer of one like so change this to say text next we're going to also have a sandwich so sandwich could be one of the options you choose thank you it is collective for this lovely image and the third one is going to be pasta again thank you so much for the image we have credited the author of this photography and then the fourth it's just going to be a hamburger with credit to s k great so now third question block and this is going to have the ID of two the text for this is going to be pick a um just like so so previous ones to pick some food this is going to pick a home and now we're going to have our four homes as an array of option for us to choose from so I've called this questions but I guess we're asking do you want a traditional house so here's the traditional house or representation of the traditional house with an image or do you want a modern house so again a representation of a modern house or just a house in the woods or a house in the mountains okay great so there we are there we have our three question blocks I think we're finished so let's finish off that array and next off we're now going to have the answers that are possible for us to get so essentially I'm gonna have answers as an array and each answer essentially gonna is be a combination it's going to be a combination of basically one answer from each of the question blocks but basically every single every single um possible option of it so what we have to do is how many other that will give us 60 possible combinations combination okay so let's say that the first combination and obviously I'm saying that repeat ones aren't allowed right because you can only choose one from each question block that's one combination and if you get that combination you are blue cheese okay and the image of this is going to be some blue cheese that I found so just that and the alt for this is Bluetooth okay so I'm not going to sit here and make you just wait until I write out all 60 I'm just gonna paste them in so you don't have to like so and please go ahead and just get this from my uh project at the bottom in the description so there's lots of very different cheeses that I have found manureone there's a lot okay great so that is my database Json file done now I'm going to serve this up onto the internet so host it online and I'm going to do so by writing a script so I'm actually going to change this start script I'm going to change this to front end and I'm going to call this a back end even though kind of really I mean whatever you can call a bucket if you wish and I'm going to use a command npx Json server to save up the Json watch and we're going to watch the TV Json file on Port 8000. okay so that is how you would write that okay so save this get a good terminal stop this from running using command C or control C and I'm going to have to install another package which is Jason server which we wrote in our Command right here so just go ahead and install that and you should see that populate right here along with all the other dependencies and there it is I'm just going to do one more thing and that's on the database right here what I'm going to do in order for us to be able to have an end point is actually put this all in another object called quiz so that our end points can go to localhost 8000 forward slash quiz okay and I'm going to take all of this you'll see everything that we wrote and then just put it as an object right here okay so object quiz and this is our quiz object the quiz ID so save this and now open up our terminal and I'm going to use this command to serve up the Json so this one right here npm run start back end and now if we visit localhost forward slash localhost 8000 so let's go ahead and visit this one first actually nothing will happen however when we visit the endpoint quiz you will see our quiz is here so I'm just going to make this a little bit smaller again there we go there is our Json file essentially being served up got it cool now to populate our app so let's go ahead and start up front end again so making sure you're in the right directory just to npm run start front end so this one front end this time I'm just going to paste it to make it obvious what we are using and this will spin up our front end once again so there we go there's our front end spinning up once more I'm just going to inspect this page again and get up our console log great so now I'm just gonna minimize these and what I want to do is on the app itself I'm simply going to fetch the data so for this I'm going to import use state and use effect from react which will mean that I can write a function here so I'm going to call this fetch data it's a functional expression which is why I haven't used the function keyword it's going to be an async function so stick the word async in there I'm going to try to fetch the data from this URL right here so this one logo host 8000 forward slash quiz and we need the await keyword as this will return a promise and once that has returned to us I'm going to save it as the response okay and once we have the response we're going to get the Json from it and we're going to store the Json as Json okay and once we have all that Json we're going to set quiz items Jason so const quiz items set quiz items use State and we want the quiz items to start off as null or we could just call it the quiz right as essentially it's the quiz we're not working with items it's it's a quiz so set quiz let's just make it a little bit more easier to understand so set quiz so using set quiz to essentially override sorry this is going to be false override the value of false which has been assigned to a quiz to whatever the Json is okay so that is essentially what I am doing right here again this needs to be a weight as this returns back a promise so once again we're fetching the resource we're saving it to the response then we're getting the adjacent from that response we're awaiting it as it returns a promise and then we're saving to the Constitution and whatever comes back we are saving to the constant quiz right here which at the start has the value of false as we've used use state in order to set the value of quiz to false to start off with okay cool let's actually just console log what this Json looks like just assuming know what we are working with and of course we also need to catch any errors so go ahead and do that and I'm going to console off any errors that we have so there is our function I'm just going to put it in a use effect so there we go this is the Syntax for a use effect and we're just going to run it without any dependencies so we're going to call the function in the use of facts so that you know if it doesn't return anything the first time it will keep essentially doing this until we get the data that we need in order to make our app work okay so let's go ahead and see what we've done I'm just going to refresh this and great so there we go there's our Jason it's coming back because we've saved it all under the constant of quiz so there it is there's what it looks like we expand it we've got our content which is the three question blocks and we also have our answers which are all the possible combinations of all the answers we got from our question blocks great so this is looking good so I'm just going to get rid of that for now and if I console log quiz here The Flash you will see quiz is false at the beginning because we assigned it the value of false and use effect essentially means it runs until we get the data back to us okay wonderful now the first thing I'm going to do is just feed in the title and the subtitle into the title component so let's go ahead and do that now so here is my title component and it's going to feed through the title which I know is the quiz title and that's if that exists and also the subtitle which I know is the quiz objects subtitle but only if that exists as at the beginning you saw this would be essentially false right is the value of false so false does not it's not an object that doesn't have a subtitle uh property so this won't work which is what I'm saying a quiz you know exists So It Isn't false then we want to get the subtitle property wonderful so that means that on the title block we're going to have to pass you the props I'm going to destructure them to get the title and the subtitle okay just like that and instead of it saying I am a title here well let's return a few things actually I'm going to return a div that has an H1 tag of title and a P tag of subtitle okay wonderful okay so now if we look in here we go we will see our title and our subtitle are being fed through from the quiz object got it good perhaps now it's time to do a little bit of styling so I'm just going to actually just minimize this as we don't really need it get our CSS up so the first thing I'm actually going to do is import a font I'm going to do it from Google fonts okay the font I want to use is a monster at so if I go to Google fonts and then essentially what I'm going to do is just search for the fonts and the font is called Montserrat so that's the one that I want I'm just going to select a few of these okay let's go ahead and set the thin one maybe the 300 one 400 500 you can really pick as many as you wish okay so there we go I'm going to use the import so I can import it directly into the CSS file so just copy this and then just paste it in like so so that's how you import it and it means that now we can use the font family so I'm going to say that I want to use it on everything so the star means everything and this is the CSS rule that I need to apply so I'm just going to copy that and paste it in here like so great I also want to grab the body of the entire document and I want to Center everything so for that I'm going to use display flex and I'm going to justify content Center so I'm essentially uh centering everything horizontally at the moment next I'm actually also going to let's make sure let's actually say that this app component is returning a div I'm going to give it the class name of app okay which means we can now pick out this class name and I'm going to say that I want my whole BuzzFeed app to only be 600 pixels in width at all times okay great and my H1 element so I want my H1 element I'm only going to use it once so I'm comfortable just styling the one each one element if you're using this in projects then I would suggest you know maybe picking up the H1 element by an ID or class name or nesting it and I want this to be 2.5 Ram and I'm also going to give it a line height of 105. and text align is going to be left and also for the paragraph I'm not really going to do much I'm just going to say that all paragraph elements are going to have the font size of 1.125 Ram and a line height of 1.2 so if we look in here now that is what it looks like okay I'm just going to get rid of the Google fonts browser tab for now cool now that we have our title let's go ahead and map out some question blocks so the questions blocks are the ones that are going to hold all our four questions so let's go ahead and import them I'm going to import questions block so questions questions so just like that I'm looking at single quotes to make everything consistent I'm going to get that component and this time well what I'm going to do is say that you know if the quiz exists then we want to get its content and map each content piece so let's do content or content item and I'm going to map it to the question log element like so okay so all I'm doing is essentially looking in here and checking with the quiz content and checking if the quiz exists and if it does I'm getting its content so the three objects I'm going to map each content item to the question block I'm going to pass through each content item let's pass it through as a quiz item it's a Content item I'm passing through into the questions block as a quiz item which means that on the questions block this will be a quiz item now and I'm destructuring it and then let's go ahead and just console of this so console log each quiz item so if we look in here now I cannot read properties undefined of map let's say if quiz exists and okay so there we go we are now mapping out each quiz item and this should be three okay and there it is so now with each quiz item let's actually display it on the questions block so let's go ahead and do that by getting the quiz items title so I'm just going to get rid of that console log and let's return a empty div this time and then an H2 element which is going to essentially just show the quiz items text so if we look in here so now we have pick a vacation destination pick some food and pick a home we also need to add a key as we are mapping so let's go ahead and go back to the app I'm going to get some parenthesis so that we can also add an index so we can add a key to the questions block so key index just like so in fact we might be able to just use the ID of the content and let's go and see what this looks like we can go ahead and foreign so let's go ahead and perhaps use that instead which means we don't need this I'm just going to pass through the content item ID instead just like that great so now we shouldn't have the error showing up anymore okay now that we have each question block let's style it up a little bit so let's get up our CSS once more and this time I'm going to add some sine to the H2 elements happens I'm going to say that each H2 element is going to font size 3.5 or M a line height of 1.05 and text a line this time it's going to be Center okay cool and while I'm actually here I'm going to get the questions container and while I'm actually here I'm also going to perhaps give this the class name of question title okay and I'm also going to create a div and give this the class name of questions multiple containers so that we can figure out and style it I'm also going to give this the ID as we are going to want to scroll to these titles so let's go ahead and give this an ID and it's just going to be the quiz items ID that we passed through cool so this is looking good now let's pick out the question title so let's get up our CSS once more dot question title as it say class name and all I'm going to do is just say that each question title well I'm just going to give it a width of 600 pixels just like our app our height a particular height of 210 pixels a background color which I picked out which is this the purplish color that I quite like let's also give it a border radius to soften it up a little bit around the edges and I'm going to say that everything in it is going to be centered horizontally so I'm using display Flex justify content Center but also vertically so I need to use align items Center for this and we also need to assign a height which it already has okay and I'm going to say that the color of the text for these question titles is going to be white so I'm just going to use the RGB for white which is like so cool and we also want to grab the questions container so questions container class name and I'm again just going to use display Flex however this time I'm going to do Flex wrap as we're going to have four items in there and I want to wrap over each other and I also want to use Justified content space between to make sure there's equal spacing between each of the four options okay and let's also space out a little bit 16 pixels from the top Zero from the right hand side 23 pixels from the bottom and zero from the left side so there we go there's each of our titles okay question titles they look like this and once again just maybe we're going to zoom out a little bit so it's better for us to see what this looks like cool so that's what we have done now let's get to putting in our questions into the questions container so let's do it so this time I'm actually going to have to import the question block the individual question block into here question block individual from our components directory components we are in the same place actually so we can just do this and get the question block and now for each quiz item so quiz item DOT questions I'm going to map each question to the question block I don't think we need an index again thanks to have nine anyway because I think each question has an ID or at least I'm pretty sure it does content question questions they do not have an ID because that's one question okay fine so let's put it back let's put in the index and I'm just going to underscore as we don't really need it okay so into the question block I am passing through the actual question which means that here we can destructure the question so that we can use it in the component so let's go ahead and just return a button element for now okay because we're gonna have to choose each one of the options so that button for this essentially makes sense uh for this let's actually give it the class name individual question lock this time and then we are also going to in the button put in an image element an H3 element which was a closing element H3 element is time which is going to show our question text and then we're going to put a p element which is going to have two uh links essentially the first one is essentially going to go to wherever we hold our image so I'm just going to put the question URL and as the text I'm going to put the person who took the photo so the question credit is going to go there and as the second one I'm going to say where you can get this image so I'm going to put href and I'm actually just going to put a link to unsplash as all my images are from there so I just want to credit it properly and in here I'm just gonna put on Splash okay great so if we just look at this now that's what it looks like each button has some text which is one of our options whoever took the photo as well as where we've got it from and just go ahead and put a space after the credit so that it spaced out a little bit and now let's get the image showing so all I'm going to do is put the source as the question image like so so once again all we're doing is getting the all the image the text and the credit showing up as well as the alternative text which I'm just about to use because as we know each image element should have some alternative text so I'm going to get a question Alt uh question URL doesn't exist we actually have to use question dot image in order to get the URL so there we go so great this is looking kind of cool let's just go ahead and sell up these buttons a little bit by getting rid of the default silent so let's grab the button by the class name this time so I'm just going to grab the class name of question block and all I'm going to do is say that each question block has to have a width of 2 8 6 pixels and a height of 286 pixels I'm going to give it a background color which is just going to be white essentially so RGB 255 2x5 255 just like so a border radius to soften it up of 5 pixels and then let's also give it a box Shadow one that I have kind of premade already but essentially all it's saying is that I want it to be black with an alpha channel of 0.070 uh from the xaxis zero on the yaxis zero spread within one pixel plus so it's a really really small box Shadow and I want the text aligned in the question block to be in the center I'm also going to get the margin bottom to be 15 pixels and any overflow I'm going to say that hidden and let's see what that looks like I'm also going to get rid of the Border as that is very harsh so Porter none so there we go okay that is looking quite cool as you will see overflow is hidden so if the image is bigger it will be hidden with the overflowed property great I'm also just going to get rid of the padding as it's causing some funky Behavior I believe so padding zero just like so so that is looking much better now we have our questions block we have our individual questions this is looking good however I think we might need to make these a little bit bigger or maybe the text smaller as it's hiding a paragraph element right here so maybe let's go ahead and do that in fact let's get our H3 elements I'm just going to give it margin 10 pixels okay so that is kind of becoming a little bit more visible and maybe the height of these let's try auto see what that looks like okay so actually that's not bad if I want to apply different styling to these paragraph elements I can actually gravity question block and say that any P tag that lives inside of it is actually going to have a really small font size let's go ahead and put 11 pixels and I'm also going to make it italic so I'm going to do font style italic which would mean that it's just a little bit smaller and I think that looks better I'm also going to change the anchor links so again any anchor link that lives in the question block is just going to have a color of uh this gray let's maybe change it to be RGB though so what is that one five three RGB one five three one five three one five three so just like that great and I'm also going to get rid of the underline with text decoration none cool so that's already looking much much better uh cool I'm pretty happy with this great so now that we have done that let's actually get to picking out the questions and we want to save each question so let's go ahead and what should we do first okay let's we have to scroll to each unanswered question two and we also have to make the others disabled ones we put up a question but let's just do this slowly let's start from the beginning and let's actually choose the chosen answers first so get rid of the CSS file get rid of the title get rid of the answer block and let's focus on the app.js file so I'm just going to save this under here okay I'm going to go and save this in state so chosen answer items set chosen on Sarah items and use state it's going to be null as we're starting off with nothing and we hope to essentially add stuff into this chosen answers item which is going to be an array okay so that's what that is going to be let's go ahead and do it so what do I want to do well on the question block I'm actually going to write a function to handle the click and if we click a button so a handle click just like so and what we're going to do in here is set chosen answers items and then if we want to add to an array we're going to get the previous state of the array so this is how you essentially add to an array and use State and we're going to get whatever was the previous state of that array and destructure it so essentially letting it all spill out into this new array but we're also going to add whatever we chose okay so whatever we chose in here which is going to be the question text that we have passed through here as a prop yeah so what this means if I click on the button so on click of the button I want to handle the click and if I click any one of these buttons then the text of that button so New York or Austin or Portland OR New Orleans will be saved to My Chosen answer items on the app but for this to work I actually need to pass through such chosen items into here so along with the question I'm going to pass through set to chosen answer items I'm gonna have to pass that through also from the questions block which is in passed down into from the app so there's our questions block so I'm just going to pass through the set chosen answer items too so let's go ahead and actually console log chosen answer items get rid of that so we can see a little bit better let's get up our console it's refresh so we can get rid of everything and if I click on New York we should save the question text into the array Something's Happened sections and items is not a function at handle click question block set chosen answer items being passed through here we're not passing that through into the question block so let's go ahead and pass that through as well okay so that's now being passed down so it's here we're passing it into the questions block and then in the questions block we're passing through is a plot prop and then into the question block so we can now use it and I've destructed it and I'm using it here got it and finally instead of having no we're just going to start off with chosen answer items being an empty array instead cool so now let's test it out and if I check in here set chosen items is an empty array and if I click on this we should pass through the question title of New York and we do and if I click Austin New York and also not be there but if I click any of these we're essentially adding to that array also this is looking good however I don't want to be able to pick any of these if I click one from this Bunch right so perhaps let's go ahead and do that next so to do this well I need to know what the chosen answer items are really at all times or more specifically when I handle the click right so what I'm going to do is pause through the chosen answer items into the questions block which means that I need to destructure it here and pass it through into the question block so then I can destructure it in the question block and use it here so now if I will add the disabled property to the button I'm going to say that the button should be disabled if chosen answer items and does not include the question text so at the moment they are all disabled but if we clicked on one which we're not able to at the moment then that one should go in the array and show up as not disabled so how do we go around this I'm just going to comment this out for now so that's how we would do that however we also want to keep track of which ID so which question block ID so for example this one has the ID of zero this one has the ID of 1 and so on we want to know which one has already been answered so I'm again going to set this in state up here on the app so const set unanswered question IDs and a set const unanswered question IDs and set an answered question IDs I'm going to use State and let's start off with this being an empty array and we're going to actually handle this on the question block again so let's pass both of these through I'm just going to pass them through here so just like we did with the other state so we're passing them through into the questions block which means we need to destructure them now so on answered question IDs and set unanswered questions let's maybe put this on a new line like so I think it's set unanswered question IDs and then let's pass it through into the question block as well so unanswered question IDs and set unanswered questions IDs streams on here we again are going to get the unanswered questions IDs and set unanswered questions IDs and once again I'm just going to put these on a new line for us so we can see them all and welcome okay great so on the handle clip when we click on one of the buttons we set a chosen answer but we also want to change the unanswered questions so actually at the beginning what we should do is set the unanswered questions well we could have hard code it to be zero one and two or we can do it dynamically based on how many question blocks we have so I'm going to show you how to do that as it's more interesting I think rather than just hard coding it as we know there's three so let's get rid of that and under the fetch data and the use effects I'm going to write another use effect to get the unanswered question IDs so there we go I'm just going to leave this empty for now and I'm going to say that if the quiz exists I want to get its content and map so I'm just literally going to get the ID of each object by destructuring it to get the ID and then just returning the ID so that's how you would do that in order to get the ID of each object in my content array and I'm going to say this is constant answer word IDs just like so unanswet IDs okay and once we have those I'm going to use set unanswered question IDs and pass through the unanswered question IDs it's an array so we'll essentially override this array okay so great if we console log unanswered question ideas and have a look in here not defined in the questions block questions so that's not being passed through properly set unanswered question IDs grab that just make sure that I'm spelling it correctly at all points uh typo unanswered set and answered set and answered set and answered says and answered certain answered and I believe the last one is here great wonderful so now if we look in the console log now that we've spelled it right everywhere and we need to run this use effect every time the quiz data changes so just pass through a quiz as a dependency here and great so now you will see that the unanswered question IDs are zero one and two based off the IDS of these three question logs got it cool so now whenever we click on a question in one of these question blocks I want to remove one of these ideas from this array so let's go ahead and do that now so we are passing that through into the question block so what I'm going to do is when we click on one of the questions along with choosing the chosen answer I'm going to use the set unanswered question IDs and I'm going to filter out and look for the ID so the ID does not equal the quiz item id which is going to be passed down from the question block so let's go ahead and call this quiz Item ID and it's essentially just going to be well the quiz item is and get its ID okay so should that should be either a zero or one or a two we're passing that through as a quiz Item ID into the question block which means that here we destructure it and now we can use it here so get the quiz Item ID awesome okay so if quiz exists and if content exists then we map so just put the question mark there great so now if I go ahead and pick New York it should add it to the chosen answers array and also this array of unanswered questions the zero should be removed are not a function that's because we need to do unanswered questions not to set an answer questions sorry we're getting the array we're filtering it and then we are passing the whole new array into set unanswered questions ID okay so what overriding was ever in there with this new array cool so now let's try again let's pick New York and great New York's been added here and zero has been taken away from our unanswered question IDs wonderful and if I click New Orleans New York and New Orleans have been added but we can't take away zero so it's still one and two and if I click Sandwich New Orleans and sandwich has been added to the answered questions and two is the only ID left so that's this one here great this is looking good now to use this to disable all the other buttons right so we've already written this I'm going to actually write this as a const up here const valid pick and I'm going to say it's a valid pick if The Chosen answer items do not include the question text and the unanswered questions ID array I'll put this on a new line includes does not includes the quiz Item ID and then I'm just going to pass through this and through the disabled property okay once again let's see what's happened cannot read properties undefined or includes okay so we just need to check if this exists and check if this exists great so now you click on here New York select an audio this is disabled sandwich is selected and all three are disabled traditional is selected or if you're disabled so we can't click on any of them and we've answered all the questions now to actually gravitate towards the top most unanswered question so I'm going to show you how to do that so this is going to happen on the questions block as we've given the H2 elements an ID for a reason and that is because we want to scroll to each one of them so what I'm gonna do is so this is going to happen on the app.js file however I just want to show you again that's why we added the ID to each one of the sh2 elements as we're going to scroll to them so on the app.js file I'm just going to get rid of these for now I'm going to write another use effect and this times is going to pass through an empty dependency for now and I'm going to say if unanswered question IDs exist so perhaps we need to actually make this null to start off with let's make that null if unanswered question IDs exist and if the unanswered question IDs length is suddenly smaller than or equal to zero we know that all the questions you know haven't answered but just to double check and chosen answer items land is larger than or equal to one then we definitely know that you know all the questions haven't answered then we want to essentially scroll to the answer block right so I'm just going to put scroll to answer block however still if unanswered question IDs exist in general we just want to scroll to highest unanswered question ID and to do that we need to get the highest and I can get the highest or const highest ID by simply getting all of the unanswered question IDs and unpacking them into math Min okay so that will return the smallest number from this array okay so that would be the highest ID and now we're going to grab the highest element in my document and I'm going to do so by grabbing the document and using get element by ID and passing through the highest ID so that would be either 0 or 1 or a two whichever one is the highest that exists in that array I'm going to say this is highest element just like so and now if highest element exists I want to scroll into view so dot scroll into view and the behavior of this I want it to be okay great so this is looking good and I want this use effect to run essentially each time the unanswered question IDs array changes okay and also each time the chosen answer items uh change as well so let's see if this works so for example we're scrolling to the first one however if I answer sandwich here it will take me back here so the first one to answer it and then we'll scroll down to the third one as I haven't answered it either great and if all three are answered it should scroll to the answer block but we are yet to write that code so let's go ahead and do that now so the answer block well essentially I want to actually show the answer block first and to do that we're going to have to save this up here um I'm going to save the state of show Answer set show answer I'm going to start off with it being false so use State false foreign have answered everything we want to scroll to the answer block because we want to show it right so we're going to put show Answer true and now we're going to use this constant social answer in order to show an element so I'm going to do so here and I'm going to say if show Answer exists then I want to essentially show the answer block just like so and what do I want to pass through into the answer block well maybe let's just pass through all the answer block options and do the logic on there so I'm going to put answer options and just pass through quiz if that exists dot answers it's okay so that's an array of all our answers as well as the chosen answers so our combination so chosen answer items so now on the answer block right here just going to make that a little bit bigger I'm going to destructure the answer options as well as the chosen answers okay and we're going to save the results so const result set result use State and the state of it's going to be null to start so this this is going to be no let's actually go ahead and import use state so we can use it import use State from react and now in a use effect and then just empty dependencies for now thanks for importing the use effect I'm going to get the answer options and for each answer okay so for each object in my answer options or 60 of them I want to say that if chosen answer s includes so essentially I'm looking in my array of chosen answers of the three question blocks that I have here and it includes the answers combination first item or if the array includes the second item in our combinations array or includes the third item then I want to set result with the answer objects okay this should be an and and this should be an and else if no results to say for some reason it didn't work and we didn't get one even though we should I'm gonna have a default okay and I'm going to set the results as whatever the answer options are just the first one this is the first answer object is what we are going to set as the result okay great so let's see if that works I'm just going to console log it for now so console.log results and in here it's going to pick New York Pick Pizza pick traditional and tada we get an answer object and that is blue cheese so that is the answer object that we're getting back let's pick another one Austin pasta mountains and this time we get sanit cologne as the cheese so this is working we're getting different uh results each time let's go ahead and show that here so I'm going to return this time a div I'm going to have to give this the ID so we can scroll to it and let's give it the ID of answer block and I'm going to give this also the class name of answer lock and then in here I'm going to the H2 element that's going to say that if the result exists I want to show its text and I'm also going to show an image of the cheese so let's get our image element and as a source I'm going to say that if the result exists I'm going to grab its image and the alt text for this is going to be the result and it exists text cool and now let's style up our answer block so once again just get up our style sheet right here so dot answer block and I'm going to say that my answer block is going to awit of course of 600 pixels I'm just going to hard code it you don't have to a background color of this pink that I have preachers and so RGB 255 61158 and then order radius to soften it out of 5 pixels display so we can Center everything align items Center Flex Direction column and the font of everything in here to be white so 245 245 255. I'm also going to say that the image so the answer clock image is going to have a width of 90 percent so now if we look in here we also need to actually scroll to this actually so let's finish out the code that we started writing here so this time we're going to go into the document and get element by ID of answer block and save it as the answer block and then if answer block exists I'm going to scroll into view and once again the behavior is going to be yes just make sure that it's consistent okay great so let's check it out New York hamburger modern I do not scroll why is that so let's also actually add show answer to this dependency so that if she'll answer changes we run this again Austin Pizza modern and there we go we scroll to the blue cheese we just go to the top of this for now however if you want to offset it further then please feel free well I'm kind of happy with this we scroll through and get the title and then we can move down to see the full answer and actually we don't really want a backup let's just get rid of a backup for now because null will be the start state so we don't want that we just want to override whatever this is so let's go ahead and say each time the result of changes that we want to run this is effect again okay so now let's try again okay wonderful so that is working now and I guess I mean we can add this back in now if else no results then set result to the answer options fast item so it should be else f okay great because now that null will get overridden when we get to a new answer so great we're getting so many cheeses in some reason the image of Goya did not work perhaps it's been removed but you get the gist okay now we should really use the and operator for this instead of the bitwise operator so that returns a Boolean so the statement of terms of Boolean rather than integer so just go ahead and change that I'm just going to change up a few more things as well while we're here I don't think we should be using false here as technically we should start off with this state being null instead of false and then we're going to change null from being not null to something okay so that makes more sense to me and one last thing I'm going to do is just make everything consistent in here as we use RAM and pixels interchangeably so I'm just going to make everything be REM okay so please go ahead and do the same for you will file just to keep everything kind of a bit neater in here I don't really like using RAM and pixels interchangeably so that's essentially what I am doing I'm just cleaning things up a little bit I will be sharing this code in the video description as well so you can just take this if you need um of course I would like you to really practice your skills by you know maybe applying different styling if you are using this for your portfolio Okay or perhaps even a different quiz that is completely up to you too that could be quite fun okay great so nearly done and wonderful now one more thing that I want to change and that is actually back on the app.js file which really should be an app.js X part as we have jsx in here I'm actually going to just use the question mark here as what we are technically doing is checking if content exists and done wonderful so maybe just change this to a jsx file that's what I will be uploading to the code at the end and finally I'm going to show you how to not use the document get element by ID and use the use ref instead however this is going to be a little bit more complicated as I'm going to be using the use or a hook from react but outside of the component so just go ahead and get the create ref Hook from react for now and then just under here let's do it here I'm going to Define all our references which are going to be taken from the unanswered question IDs if they exist and if they do we're just going to essentially reduce them to create a reference for each ID so this is all I'm going to do I'm going to show you what this looks like create graph and call that method and I'm just going to return the accumulation as an object so if I console log graphs and look in here that's what it looks like at the moment the current rep is null however we're going to pass it through into each mapped question block so I'm going to get the refs now and on the question block I'm going to pass you the refs but go into the ref and just pass through the ID so we can just use the content ID for this because that will get us back as zero or one or a two and now on the questions block well I need to wrap this in a forward ref so get the forward ref this is something again from react so we're going to have to import that up here import forward ref from react just like so and now we pass through the ref so our props are here the ref is the second argument so just pass that through like that and now we can just use it here like so and we don't actually need the ID anymore so let's get rid of that great so that is all I had to do wrap this in a forward wrap pass through the ref as a second argument and then use it here okay so great now how do we scroll at the moment if we look in here you will see they all have a current H2 element so either this one or this one or this one but to scroll to them we're going to have to put that in the use effect so we're gonna have to change up this whole use effect here and first off I'm just going to get rid of this and then I'm going to say that I'm going to get the rest and we're going to pass through the highest ID into that and scroll into View Behavior smooth okay and we're going to do this in an if else right because now if we go and finish all of the ones that we've clicked through this will show errors hence I'm putting in the if else because we're going to check for the unanswered questions and chosen answer items first so just put that in there like so and in here I'm also going to essentially have to get rid of this right so let's get rid of picking out the answer block by the ID and I'm going to create a new reference so I'm going to call this const answer graph and use create draft for it again so just call it like so grab the answer ref and on the answer block I'm going to password a ref which is the answer ref which means that on the answer block once again I need to wrap this in a forward ref pass through the ref as a second argument and then just use it on here so ref equals ref okay and I believe we don't need this now here great so now we are nearly done however I just need to handle scrolling to the answer so instead of this I'm actually going to check if the chosen answer the items length is larger than zero as we only really want to start scrolling once we actually have some chosen answers right and if show answer is true well then we get the answer ref current scroll into view and then let's also have Behavior Smith okay so I believe this should be it of course the score is now happening here let's check it out what we should also do is add the missing dependencies from here so I believe we're now missing the answer around and the Reps and we also need to just import the forward graph in yeah as well now this is causing errors so we just need to render this once reps exist as well so just add that to this line on 5th 959 make sure to have current here too foreign so now we can go ahead and select items it's not letting us scroll to answer current as well into you why is that score interview I need to change the spelling of that so now we can scroll and it will take us to a cheese and we can also start like from the end and it will take us to the highest unanswered question and then to the answer great so that's it I hope you found this useful and I hope you now can enjoy your BuzzFeed clone in reacts I hope to see you again soon for another actionpacked walkthrough lesson okay so let's do it let's go ahead and create a project I am using webstorm which means that it will help me get all the correct files and configuration to spin up a project fast I'm just going to hit new project and under here click react as well as make sure that create typescript project is checked right here okay so that is all I am going to do and then also going to choose to call this type script BuzzFeed clone like so and then just create okay so that should now spin up my project for me along with all the correct files and configuration in this typescript BuzzFeed clone directory for those of you who are not using webstorm please go ahead and use the following command just go ahead and get a few Terminals and then wherever you choose so if I choose to do this in webstorm projects I would just use npx create react app my app so whatever you want to call it and template typescript okay and hit enter well if I'm not doing it this way I'm doing it the webstorm way so once again just go ahead and wait for that to happen and done happy hacking so now if I look in here it will give me all the files and configuration that I need to start my project including a TS config Json file okay so that's what it should look like just make sure that you have the same I'm actually going to change this to the es6 and that should be fine for now the next thing I do is just delete some things that we don't need in here so I'm not going to be doing tests I'm just going to delete all of these okay just go ahead and delete those three and then I'm going to delete the logo as well so just delete the logo delete anyway and then the app tests and app CSS as we're going to be doing all our styling in one file okay we're just going to keep it simple as this app isn't very big great so now your index TSX again just delete everything that you don't need so I'm just going to delete all of these lines that are not necessary to me so that your file looks like this I'm so going to get the index CSS and delete everything from those we can start from scratch and here as well I'm just going to delete everything just so that it turns one div like so and I'm going to choose this to be a function expression so const app equals and then an arrow function right here and then we're not importing these two so there we go great so this is what each of these three files should look like now now the next thing I want to do is create some components so in the source directory I'm going to create a new directory called components and in here I'm going to create a new file this is going to be for our title which is going to hold some TSX so click add I'm just essentially going to just look like this so let's go ahead and just copy and paste that in here and I'm just going to change this to title and also change this to title just like so and then do the same for the question block and then next I'm going to create a new typescript file so type script to jsx file and this time is going to be to hold all of my questions so I'm going to call it a questions block just like so so it's going to hold all four of my question options so let's just go ahead and change this to be questions plural lock and questions blog plural once more okay and just one more maybe sure to spell that exactly the same so questions block so new typescript file jsx file question block this time so individual question block I'm just going to paste that in here actually let's copy this one and paste it and we get question block question block just like so and one more we're gonna have an answer block which is going to show us the answer as to what shoes we are after we answer all our questions so answer block just like so paste that and changes to be answer block and once again answer block suggest like that great so now that we have those I'm just going to get rid of these for now let's get to adding some of those components in here so I'm going to import the title of course from title and that's in the components directory so we go in there and we get the title okay so there we go we've got our first component which I'm going to actually put in here so title great and that is the first component that we're going to feed data into but first let's actually put our data in the database so for this I'm just going to use a free database so you might have seen me using this before as it is one that I like to use because it is free I'm talking about data Stacks so I'm just going to go ahead and sign in please sign up if you haven't already and I'm going to just sign in with Google okay so you can choose to do it this way or you can choose to manually just put in your email address and set a password that part is totally up to you now once in here we're going to create a new database so just go ahead and click that and what should we call this database name what I'm just going to call it BuzzFeed and the key space name I'm going to call this quizzes okay and now we just need to select a region I am currently in Europe so I'm just going to go ahead and put West Europe and click create database okay so that will now do its thing you're going to get shown a token and please go ahead and get this data I'm going to show you as I will be deleting this but this is what yours should look like so please copy this and keep it somewhere safe as this is what we're going to use in order to communicate with our database okay so I'm just going to put mine in notes wonderful so I'm just going to go to database however this won't be done yet we need to wait for it to do its magic and we will know when that's finished as the status will not be pending anymore okay so we'll come back to that in a bit let's carry on here so now I'm going to go ahead and create a backend for this project there's just going to be a one file it's going to be a typescript file it's not going to be a jsx file okay so I'm just going to call it server and that should create a file called server TS a typescript and essentially all our backend stuff is going to be done on server TS and all of our front end is going to be in the source directory so that is how I kind of envisioned the structure for this project in the savates file this is going to be responsible for getting our data from the database and four I'm going to have to import a few packages so just make sure you're in the directory and use npmi to install the packages Express axios and I think that should be it for now I also know them on to listen out for changes to our backend so that you know we don't run the file once we keep on listening out to any changes done in this file so go ahead and install those three and great so that is now done next up I'm going to go to the package Json and actually write a script to start the back end so I'm going to add start back end just like so and I'm going to change this script to start front end in order to start off front end so my backend script is essentially going to be no demand to listen out for constant changes to the server TS file and that's it okay so we are done on this right now wonderful as you will see here here all the other packages and the versions that I am using so if something doesn't work it could be down to the version you are using of any one of these packages okay so just make sure that yours are the same as mine great let's have a look at how our database is doing and the state is now active wonderful so let's get to adding some data I'm going to do this using the document API to help us with this we can actually use the Swagger UI to make it a lot more visual so just go ahead and click on this link right here and that will load some Swagger documents for us in order to create our first collection that's going to install our quiz so let's go ahead and create an empty collection in a namespace I'm going to try it out and all of this has been also generated for me so that's great and we're just going to put in the namespace or key space which we called quizzes okay and I'm going to create a collection in here and the name of this collection is going to be quirky quizzes okay so imagine we're about speed and you know they have like a whole bunch of quizzes and they've decided to split them out into collections uh this collection is going to be called funky quizzes and it's going to store all our funky quizzes okay I'm not saying this is the way BuzzFeed do it I'm just doing it this way for the sake of tutorial but you can choose to organize your data however you wish so quirky quizzes is what our collection is called make sure to actually put this in double quotes too and let's go ahead and execute this and great we get a 201 response that has worked so that is now the name of our collection let's grab it and then we're going to put an ID to create a new document in here try it out the name space is called quizzes The Collection is called quirky quizzes and we're going to put in our fast Json object which is going to represent one quiz I'm going to show you how I'm going to write this now in fact I'm actually just going to get a Json document up as I think will be easier and we can paste this thing here so let's go ahead and do that now I'm just going to get up my project and I'm actually going to make a new file in here called sample data.json okay and just add it like so now for our sample data well we're going to have to create an object as this object is going to represent one quiz and each quiz is going to have its own ID so I'm going to give it the quiz ID and I'm just going to make this up so let's just go ahead and give it a random ID and then we're also going to have the title of the quiz on this occasion it's going to be what cheese are you question mark and also we're going to have a subtitle if I can only spell subtitles wow uh and then this is going to say which uh and then this is gonna say this quiz isn't cheesy or anything like that dot okay so there's our subtitle next we're going to have the actual content for the quiz okay and the content is going to be made up of an array of three different questions okay three questions to find out what cheese we are so there's one question and each question is going to have an ID which is going to have a integer value it's also going to have some text which is going to be pick a vacation destination for the fast question and then it's going to have the actual questions associated with that so there we go the question options are going to be New York for the first one so New York is our fast vacation destination so let's just put text New York and then we're also going to have an image associated with it that I've taken from unsplashed so I've actually premade this already so that we don't have to you know sit here while I search for images because that would be pretty boring so here it is this is what it looks like and we can get it by actually visiting on splashed searching for New York and then all I would do is right click this and copy the image address okay so that's all I've really done okay great so let's just get rid of that for now and paste in the original image that I found so we've got the text we've got the image I'm also going to have to give this alternative text as you know we really should do that uh on images for the visually impaired photo of Empire state building during daytime okay so that is just some alternative text that I have given and we also have to credit this right as we are taking this from unsplashed it is essentially free and they have requested that we credited so Oliver niblet get some credit that we're gonna display so there is my Essential first um question option we're going to have another one we're actually going to have four in here that I have premade so I'm just gonna copy them in here to save as time the next one is going to have Austin as an option and then we're also going to have another option which is Portland so I'm just going to copy this because I premade it and there we go and then here's our fourth one our fourth one is going to be New Orleans so I'm just going to copy that and paste it in like so okay so that is our array of content essentially let's just check this works they feel I've messed something up already so questions should end here so that is finishing and then we've got an object in an array okay and then that array is in an object itself so great so there we have it so questions those are our questions great for our first question object which finishes that and now we're going to of course have another one so yes we're going to have an ID this time the ID is going to be one the title of this is going to be pick a um and then of course we're also going to have some questions okay which is going to be an array some questions and then all right great so just like with the first one I'm going to have one option for picker home which is a traditional home then we're going to have another option which is a modern home and then we're going to have a third option which is a house with some trees next to it I call just a white house I guess and then some house in the mountains so there we go and then we have one more question objects which is going to have an ID to this time a title of pick some food so we are obviously going to decide what we are by some food in fact I'm going to swap these out because I think in the other tutorial that I did a simplified version of this pick your food was the second question and then we finished on picking a home it doesn't really matter it's just because I want to keep it consistent with another tutorial that I did so pick some food and then the questions for this are going to be when it's an array and again we're going to add an object that's going to represent a pizza choice because you can choose a pizza and then another option which is going to represent a sandwich Choice and then another option which is going to represent some pasta so let's just wipe that in and then a last option that's going to represent a hamburger okay so great so there we go we have all of our three question objects which live in the content of the question and now we're going to have the answers so answer is essentially just going to be um objects representing different types of cheese based on a combination that we have chosen of the three questions so there's actually going to be 60 okay there's going to be 60 answers to cover all the combinations that we have so our first object we're going to have a combination It's a combination which is going to be made up of an array of let's say someone picked New York and then they picked pizza and then they picked traditional for the home well if they pick these three combination if they picked these three I have said that I want them to be blue cheese okay great and the image that they give back is a picture of some blue cheese that I found again on unsplashed so I'm just going to whack in that image like so okay great and then we also have some alternative types of glitches so that's one answer I'm not going to make you sit here while I write out all 60 because I'm not sadistic and I'm sure you have better things to do so I'm just going to share this file in the video description okay so you can take it just copy the contents of this file so there we go we have paneer we have Ezra we have Danish blue we have manure we have so many cheeses I seem to have used title instead of text for the two question objects so let's go ahead and change that and here so once that is done or you've decided to just take the file content of my file I'm going to copy all of it this is essentially one quiz item right this object is one quiz and I want you just to paste it in like so and then I'm going to ask you to just execute okay so there we go that is a lot of data but as you can see that has worked you get a 201 code and our object now has a document ID so this is great we have added that into our database great so now we actually need to communicate with this database so that's what our server.js file is for it's going to get rid of the sample data for now so what was in our server TS file well we're going to have to import Express as well as the request and response type from it so from Express just like so making sure it's built everything correctly import Express as well as request and response from Express and now I can use Express and call it to release all of its wonderfulness and I'm going to save it as the const app just like so and now another thing I'm going to do is actually uh use app and then app of course that's Express's wonderfulness and express comes with something a method called listen and I'm going to listen out for changes to my port so let's go ahead and Define a port let me do so here cons Port equal and I'm going to say 8 000. so that's what I want my server to run on so all I'm going to do is just say that we're going to listen up to the port and we're going to console log server is running on Port and then whatever the port is great so now if we get up our terminal we're actually going to run this script so get up our terminal npm Run start back end uh it would seem we need to download TS node as well so just go ahead and install that package but also also going to have to install types Express and at types node which means we don't actually need this Express package anymore so delete that and reinstall everything and under module we're going to just change this to common Js click save and now just hit npm Run start back end and great I think we should we should technically be getting rid of you know stuff like this and we will just get rid of that and Jess as we're not doing any tests or anything like that I think that should be it testing Library let's get rid of those and I think that should be fine great so that is now running on our Port let's carry on I'm just gonna get rid of this and get rid of this great so now we're going to use app get and we're going to pass through a path or an end point and let's just go ahead and call this quiz item to get one quiz item and this is going to be an async function in which we're going to have the request which is a request type and a response which is a response type which we have imported from the package express and what we're going to do is try and then we're going to essentially use axios to get a resource from the following URL so let's go ahead and actually import axial so import axios as well as the axios response type so axios response type from response from axios okay I think we've already installed axios but I can't be sure so let's just go ahead and install again axios I'm just being lazy I could have actually just looked in here and there it is okay so we have axios in here so now we can use axial sket and the URL that we need to pass through is essentially the URL to get all our documents through such documents in a collection let's try it out and all I'm going to do is essentially pass through the name space so the namespace of the collection is called quizzes The Collection ID is called quirky quizzes so quirky quizzes with an underscore and we're just going to execute this and it will return my quirky quizzes Which at the moment only has one quiz so I'm just going to get this URL okay I'm going to get it like so and then I'm going to just paste it in okay so that's the URL that I am so I should get it okay just disable that hint so you don't confuse it as code so great we have the URL it should end with quirky quizzes and that will get us all our quizzes okay and we are gonna pass through some headers as well so let's put a comma and make an object and we're gonna pass through the headers so headers of X Cassandra token so essentially everything we see here x Cassandra token the header X Cassandra token let's grab that I'm just going to paste it in like so um so let's just make sure to make everything kind of consistent I'm just going to give everything single quotes and our X Cassandra token is going to be the one that we saved at the beginning so go ahead and find your token and just paste it in like so for now okay so that's one thing we need to pass through and the second thing we need to pass through is accept application Jason so just copy that and put it in and put this in single chords as well so so those are my headers and we are going to have to await this as this returns a promise and whatever comes back I'm going to save as a response this also has the type of axios okay so that is a typescript thing great now if the response which I know is an object an object that has a status and if that status equals 200 well we know that everything essentially has worked right so we're going to get the response and get the data which is also linked to that object await it and save this as quiz item okay and we actually can write a type for this or an interface so let's go ahead and do that in fact let's maybe wait a little bit just know that we're going to actually Define the type of quiz item and what it's made up of uh the other thing we actually need to do is also set a header so set had a access control allow origin and I'm just going to allow http localhost 3000 so essentially our front end again I'm just going to disable these hints okay as I don't want you to get confused and think they are good and I'm also just going to send the quiz item to localhost 8 000 as well otherwise I'm just going to catch any errors and console log them out so console login error okay we can actually pass that through the console error great so let's check this out right I'm now going to visit localhost 8000 forward slash quiz item and tada we are getting the same days about that we are seeing here we're getting all of our quirky quizzes however if I just want to get the first one okay we only have one in here so I'm just going to go ahead and get the first one really so I'm just gonna do that I'm gonna go into the data and I'm going to grab the objects by its document ID so just like so but we're going to hard code in here okay once again I'm just going to put in single quotes so now what we are doing because we knew the document ID of the quiz item when we created it okay that was its documented D what I am doing is in my back end just looking in my collection of quirky quiz items and looking in the data of that and I'm looking in the data to find the document ID of this and then I'm returning the whole object so this is what it looks like now we get the answers we also get the quiz ID the subject of the title and the actual questions themselves too so all our data is here okay even though backwards to how we entered it but it's that great so now let's move on we don't need the Swagger UI anymore and we don't need this either wonderful so also our server is nearly done I just want to actually create some interfaces so that we can essentially assign types to the quiz item fragments if that makes sense I'm just going to create a new file and here it's a new file I'm going to quote interfaces dot TS to make sure that it's a typescript file and hit enter okay great and now I'm going to define the interfaces that make up our quiz item so the first interface we're going to have is the quiz data that makes up our individual quiz as we know it has a title which is a string it also has a subtitle which is also a string and a quiz ID as you will see here there is a quiz ID which is also a string so let's go ahead and put that as a string next up we also have these questions right so each question block is made up of an ID and then multiple questions and then we also have answers which again can also be made up of a interface right because they are all kind of the same and we want to make sure to keep the same types assigned to each property so let's go ahead and do that we're gonna have content which is going to be made up of an array of content and we're also going to have answers which is going to be made of the answer interface as an array let's maybe go ahead and do the uh answer interface first so interface answer just like so and each of these when it comes with some text which is a string an image which is also some string a combination which is actually an array of strings so I'm just going to put string as an array and some alternative text to the image which is also a string so that's my answer interface next up we also have a Content interface so interface content and let's go ahead and Define our content well our content let's have a look here foreign object so let's call this a question perhaps so literally the content is just going to have an ID and questions and I think it has some text too it also has some text which is a string so ID which is actually a number some text which is a string and then questions which I'm going to say as a question interface I'm going to make that interface now interface question let's get rid of these and the question interface is made of some text which is a string image credit and opt they're all strings so this should be easy image string alt string and then the final one is credit which is a string so there we go that's all the interfaces that we need let's go ahead and Export them all so export quiz data answer content and question making sure that's an export type great so now in here I'm actually going to import the quiz data from interfaces and use it as the response to this so quiz data and wonderful so that is our first custom interface or custom type that we made let's move on it's going to try and minimize this so you can see the whole file now while we are here I'm just going to create a DOT DMV file so create a new file called dot EnV so you can store all of our sensitive data so that we don't upload it onto GitHub and for this I'm going to have to insert a new package so import a new package called dot EnV so just go ahead and import that package and we're going to actually use it in here so import or as dot Envy from dot e and V and then dot EnV config just like so and now that means that I can actually get this whole token the sensitive token and store it here so the token equals like so and in here I can just use process dot EnV token like that and now that will work we can also do the same for the URL so let's go ahead and grab this URL I'm just going to paste it in here like so by putting in here I'm saying that you know this is a string it's implied it's a string and I could just use process NV dot URL in order to get that URL okay so for some reason this is picking up the URL I can see that here but I'm still getting errors so what I'm going to do is just suppress this for now and then come back to this later so suppress with TS ignore okay and save that and just check this still works and great cool so let's move on so that's our server done we were just about to create our components so let's go ahead and start with the app again and then pass through the days that we need for our title but to do that we're of course going to have to you guessed it get the data so our interface is now also done let's remove that EnV is done our package.json is done on our TS config is done let's go write a function to fetch our data so I'm going to call this fetch data and it is an async function so I'm just going to use the async keyword and in here we're going to try to get that data so I'm going to use the fetch API and I'm going to pass through this URL right here so localhost 8000 and then the endpoint to get my quiz item and I'm going to await this as it will return a promise I'm going to save this to the constant response just like so and once we have that I'm going to get the response and get it to Json okay and again I'm going to await this as that returns a promise and save the response as Json so that we can use it okay and then all I'm going to do is get that Json and set it up here so I'm also going to have to import use State and use effect from react and I'm going to save the Json as well let's just call it quiz right this is the quiz that's coming back to us and set quiz and we're going to start off with the state being no right now so just empty and I'm going to say that these State types we can have are going to be the quiz data so we're gonna have to import the quiz data interface quiz data or null as we're going to start off with now so let's go ahead and import that interface import quiz data from interfaces okay so that we can use it so I'm now going to do set quiz to set the cons of quiz to be whatever the Json is in value okay so it starts off of being null and then we use set quiz in order to change it to be the quiz data right and of course we're going to catch any errors if there are any I'm going to console error of the error great once again I'm just going to disable this hint so it's not confusing for you awesome so we've written our function now I'm going to use use effects in order to call it as many times as we need in order to get that data back I'm just going to pass through an entry dependency and I'm going to call fetch data in here and I'm also going to consult log the quiz to see if we get that back of course we need to actually start our front and two so let's go ahead and do that in the second tab I'm going to do npm run start and then front end as a script we wrote oops I misspelled it front end and just hit enter okay so that should start up our front end on localhost 3000 I'm just going to inspect this and see the console log as I'm hoping our quiz comes back and it does okay so there's our quiz item uh it has a title a subtitle quiz ID content and the answers we're going to pass through the title and the subtitle into the title element so let's go ahead and do that here title and I'm going to pass through the quiz if it exists title as well as the subtitle if it exists subtitle okay great and let's just close off that component once more so what I am going to do now is on the title I'm going to destructure the title and these subtitles that we can use it in here and the types for each well the title has to be a string which we can actually take from quiz data and search for the title as that interface has the title property which has a type of string attached as the value so again I'm just using stuff I already have so the interfaces are coming in quite useful for the button and the front end and of course we're also going to have a subtitle as well so we're going into the quizzes object and finding the subtitle two so it can be this or it can actually be undefined as well okay so just go ahead and do that because on the first run it will most likely be undefined as you know we might not have our quiz uh come through quickly enough great so now that we've done that I'm just going to add an H1 tag that has our title and a p element that has a subtitle and close off this div wonderful so now if we look in here we get our title and we get our subtitle this is looking good so that is not it for our title let's carry on next up in the app I'm just going to actually map out all my quizzes content onto questions blog so multiple ones that are going to hold each question we have like what's your favorite vacation spot pick a favorite food and so on so let's go ahead and get that questions block questions block so there it is and I'm going to import it so import questions block from questions block and I did say that for each quiz content I'm going to map out onto the questions lock and what I'm going to map out is I'm just going to put this on a new line actually to make it a little bit more readable so if this exists we're going to map out let's get rid of the hinge each piece of content individual which has the type of content okay we're gonna have to import that interface from the interfaces page as well okay because we did predefine it so now we can use it so that content well I'm going to pass this through as a quiz item okay so that it's a bit more readable maybe as each question block is going to be made up of the quiz item and I pass that through as the content and also going to have to give this an ID so let's go ahead and just use the content ID for this so ID and I can just use the questions block ID for this as you can see here so I'm going to go into content and get the ID from it okay great so now this I also need to give a key which I'm going to pass through as the ID and as you can see if I hover over it the content ID is the type of number so that is good okay so now we need to pause three of these things into the questions block I'm just gonna pick out the quiz item in fact so let's get up our components and get the questions block and I'm just going to pass through the quiz item and the type of this well let's just put this on a new line the quiz item is going to have a type of content so again I'm just using the interface for this which means it means to import the content interface from interfaces the quiz item is now an ID a text that's a string and the questions which is made up of the questions interface and what we're going to return is just two empty elements so an empty element sorry and with an H2 element that's going to hold our quiz item title and I'm actually going to also give this an ID as I'm going to want to pick this out by the ID later so that we can scroll to it and this is going to be the quiz items ID right as the content or the interface right here does have an ID we can use which is a number however we can't assign a number to an ID so I'm going to have to turn this into a string so that the ID attribute can use it great and at the same property title does not exist on content why is that let's have a look in here that's because it's text so that's a great little helper for us we're going to use text so we've got the H2 element and great we get all three texts of each of the content objects so pick a vacation destination pick some food and pick a home let's carry on next under each one of these I actually want to show four of the options that we added okay so each of the four questions associated with each object so let's do that next to do this I'm actually going to map that out onto a question block so let's go ahead and import question lock from question block so we're in the same location as it and I am going to essentially map this out I'm actually going to create a div faster and that div is going to have the class name of questions container and then for each quiz item questions so if quiz item exists and for each of the questions I'm going to map each question which has the type of requestion interface which we're going to actually import from the interfaces so the question interface let's have a look at it one more time here is the question interface as text image or on credits or as strings and we're going to map that onto the question block element okay great I'm also going to have an ID which is the type of number or maybe let's just put the index like so I'm going to comment that like that because we're not really going to use it so this means that we need to give this a key which is going to be the index that I am not using I'm also just going to pass through the whole question right onto the question block let's get rid of this also make sure not to use curly braces here great so now on the question block I'm going to destructure the question which has the type of question which I'm actually going to move this as I know we're going to have a few more props to pass through here so I'm just going to do it like so and I'm going to say that question as a type of question foreign otherwise interface which we're going to have to import so import question interface from the interfaces file and this time on the question I'm actually going to return a button right as we want to click on each one of the buttons and in fact let's actually give it an opening and a closing tag as we're going to want to put other stuff in this button so button right and in the first tag I'm just going to pass through the class name because I'm going to want to style it up I'm going to give it the class name of question block and then on click of this well I'm going to want to handle the clicks I'm just going to write a function called handle click which we're going to Define up here again also in the button what I'm going to want to add a few things right I'm actually going to put in an image which is going to have the source of the question that we're passing through image and the alternative text that comes with it which comes with a question object is Alt and then we're going to have an H3 element which is just going to have the question text as well as a p element which is going to have two anchor tags so just like so one two the first one is going to take us to the URL of the image which is actually also stored in the object as image and as the text I'm just gonna actually put whoever took this so I'm going to get the credit that is associated with the question object okay so if we look in here question credits actually I think it's credit though is it credits or credit what does it say in our sample data it's credit so just change that to be credit just like that great and that will get rid of those cardio lines and in the next one the href I'm actually just going to put https for www dot unsplash foreign okay and then a space here just so the two whites aren't so close together great out I'm just going to rerun this as doesn't seem to be registering my change in the interfaces and great okay so I'm just going to inspect this once again so we can get up our console log but essentially we've done it okay we have got a question object pick a vacation and it shows us four options as well as you know who took it and where to find the image and then pick some food and then pick a home so now before we do anything else let's take a break and do some styling okay let's do it so let's get up our index CSS file right here and perhaps let's just minimize all of this for now great so first off I'm just going to go to Google fonts as I want to import a font called Montserrat so just go ahead and go here and then all I'm going to do is simply search for the font called Montserrat so this is it I'm just going to select a few line weights so you can do the thin one you can do the 300 one the 400 the 500 it's up to you and then what I'm going to do is import it with this option so I can import it into the CSS file so go ahead and copy all of that and just whack it in like so and this just means that now I can use the font family so I'm going to say that everything star means everything is going to have the following font family and that is font family Monster Rat so I'm just going to copy this let's get rid of that for now and I'm just going to paste it in like so and that's it now I'm going to Center everything horizontally and to do this I'm going to use display Flex justify content Center to Center everything horizontally now I'm going to actually give my app the class name of app okay so that I can pick it up a DOT for class name and all I'm going to do is just give it a width of 600 pixels next up I am also actually going to say that I want every single H1 element that I have used to have the font size of 2.5 RM and a line height of 1.05 and text aligned to be left okay so that's all my H1 elements and all my H2 elements that I use in this app are going to have the font size so this is standardizing all of these fonts 3.5 Ram a line height of again 1.05 and text a line this time the center okay and any H3 element that I use is just going to have a margin of 10 pixels I'm going to keep the default sizing any P element is going to have the font size of 1.125 Ram this time and a line height line height of 1.2 okay great so there we go we've just changed up a little bit for now wonderful next let's style up the title blocks so this is going to be on the questions block I'm going to give this specific H2 element the class name of title block be sure to spell that the right way and this time I'm going to pick out the title block just like so and all I'm going to do is make sure that it has a width of 600 pixels I'm going to hard code a height of 210 pixels so they're all consistent and give it a purple color as the background color so RGB is one I picked out earlier 69 221 okay great and let's round it off so I'm going to give it a border radius of 5 pixels and I'm also going to Center everything so display Flex justify content Center to Center everything horizontally on this occasion and I'm gonna align it vertically two by using align content Center or align item sorry I should say and we've given it a height so we'll Center it to this height and I also want the font to be white so I'm just going to pass through the rgb4 right next I'm also going to grab the questions container that contains all the questions okay all four of my questions for each question block and I'm going to use display flags and then I'm going to make them wrap over each other so Flex wrap wrap so they're not stacked and I'm going to also justify the content between them space between so that they just look a little bit better okay uh and we also have to actually use this class name on the questions container so in the questions block okay this should say questions container as that's what we call the here questions container and now let's also style each of the question blocks so let's grab this button that has the class of question block I'm just going to remove any default styling from it really I'm going to do border none let's see what this looks like okay so that's what it looks like at the moment it is a little bit big so let's make them a little bit smaller I'm going to hard code their width as 286 pixels and our height as 286 pixels too so they're like little squares and great you will see they are wrapping over each other the images are kind of going over so I'm also going to do overflow hidden overflow hidden and that will stop the images from leaving these squares wonderful so this is looking so much better let's continue doing some styling we're losing some of the text here so what I'm also going to do actually let's get rid of the Heights I'm just going to get rid of that so that it just kind of lets it do its thing I'm also going to make the text smaller however let's finish off signing this question block first I'm going to actually give it the background color of white okay and instead I'm going to give it a box Shadow and also border radius so everything's going to be that little bit softer and box Shadow is going to be RGB a and I'm just going to make it black but then with 0.07 Alpha and I'm going to say I want 0 x axis Shadow 0 Y axis zero spread and one pixel blur so it's a very very light Shadow I also want all the text to be centered so it takes the line Center and let's just give it some more margin at the bottom 15 pixels margin on the bottom okay so now it looks a little bit more like this I it did say I want to make this text smaller but only the paragraph text inside the question block so any P elements inside the question block we're going to override the default key sizing I want to give it a font size of what did we make this one let's make it 0.5 RM I think that should be okay and font Style metallic okay maybe that's a bit small but I mean you can change it too whatever really you wish great and then maybe let's also give each of the a tags that live inside the question block text decoration none to get rid of that underlined uh color style as well as I'm going to give them a grayish color so color RGB three one six three one six three one six okay maybe a little bit darker okay I mean it's really up to you I don't think that's very readable so maybe let's get it wonderful so there we go and then let's also get rid of the padding on these so I'm gonna get rid of the padding on the question block padding zero great so now that we have that I think we're now ready to do the handle click for handling the clicks on all of these buttons what I really want to do is uh collect all the chosen answers and if it shows an answer is I guess attached to one of these question ideas so at the moment this one this whole block right here hold on let's try make these a little bit smaller so this questions object has the ID 0 this one has the od1 and this one has the id2 let's also collect them so we can figure out which ones have been answered and we can also scroll to each of the topic so the highest ID that hasn't been answered so all of these things we're going to do there so I'm just going to get rid of that for now so let's handle that on click well cons handle click what do we want to do like I said we want to start collecting all the chosen answers so we're going to do that up here so I'm just going to do const chosen answer items and set chosen onto items I'm going to use state to say that this is an empty array to start with okay it's an empty array and this is going to take the types of string as an array as it's going to be an array of strings let's make this small and now we're going to use set chosen answers to override this empty array or in other words actually we're going to take that array and put stuff into it I'm going to show you how to do that in use state so this is going to happen on the question block which means we need to pass through that method all the way into here I'm going to do that here so handle click I'm going to set chosen answer items and we're going to get the previous state of the array and then we're going to destruction whatever's in there I'm going to put in the new item and on this occasion I just want to put through the question text so whether it's uh New York or Austin or Portland OR New Orleans that's what I want to put in my array so that is how I would do it well of course we need to pass this through from the app so it exists here so we're going to have to pass it through into the questions block just like so so I'm passing it through into here and then here I'm going to have to destructure it so let's just pass it through like so and this is going to be a function which I'm then going to pass through into the question block of course so there we go and on the question block once again destruction the prop so just pass it through and this of course is a function so now I can use that here of course we need to actually uh assign a type to this well this is going to be an array of strings so string array cool so now back in here if we console log The Chosen answer items where is this on the questions block I clearly missed an s let's get our consort log out so at the moment I'll raise empty but if I click on New York it will put the string of New York in there if I put New Orleans it'll be New York and New Orleans and then New York New Orleans sandwich and so on however we don't want this to happen really right if we click on one of these we want to disable all the others so that we can't put them in our array and to do this we're also going to have to collect the unanswered question ID so by questioning me this whole question object IDs this is zero this is one and this is two so to do this well once again on the app I'm gonna const uh what should we call this this time let's go ahead and call it unanswered question ideas on on swords question IDs set unanswered question IDs use State and the state of this to start off with um it's just going to be an empty array and this array is going to take numbers so an array of numbers just like so so once again I'm going to pass this through into the questions block so which means I need to destructure it here and again this is a function so function and I'm just going to pass it through into the question block two which is on the question block once again I'm passing it through destruction of the prop and this is a function type great so on the handle click well we should actually in here first of all um we could go ahead and just say that to start off we have these three IDs as we have you know three question IDs or we can do it dynamically based on exactly how many questions we have I'm going to show you how to do that as I do think it's more interesting so to do this I'm just going to do it in a separate use effect so let's go ahead and do that here use effect and I'm just going to on um okay so we're going to get the quiz and if it exists we're going to get its content and if that exists we're going to map and get each item of the content and destructure its ID so I'm going to go to the object and get its ID and then I'm just going to return the ID okay so that's all I am doing and I'm going to save this put some parenthesis around this and yes this is a number however the whole object that the ID is in is technically the content so we can do this and then let's save this as an answered IDs Okay so we've saved our const and I'm just going to use set unanswered questions to be the unanswered questions ID so I'm going to pass that through in order to set this constant okay it seems like this could be undefined as it might not exist so I'm just going to add number or undefined as a type here okay okay so just you can read that that's what it is so now we should have uh let's console log it out of our unanswered questions or unanswered question ideas sorry let's have a look I'm just going to get rid of any other content actually let's keep that there so I'm going to keep that console log now if we look in here we don't want this to run forever in fact I only really want to run this use effect if the quiz changes so quiz stop this running loads of times okay so great so now if I click on New York you'll see New York coming here and here is our dynamically produced array of all our unanswered questions so now if we click on this I want to change this array so it gets rid of ID 0 as this belongs to the question group of id0 so let's do it so this is going to have an on the question block I'm going to set unanswered questions and what I'm going to do is override the array that's in there and like to do this I'm going to get the unanswered question IDs and filter this actually means that we need to pass this through as well as these set and answered questions so let's go ahead and do that let's start from here I'm going to pass through the unanswered question IDs which means that on the questions block I need to pass through the unanswered question IDs and then pass it through as a prop of course as well let's maybe do it in the same order and this is going to be array of strings you can also just do which is numbers it's number yeah array of numbers or undefined and now on the question block we of course also need to pass it through and it's an array of numbers or undefined which means we can now use it here so we're using it here to filter and if it exists you're going to filter each ID and return only if the ID does not equal the quiz item id we are answer quiz item id which we're again going to have to pass through this time from the questions block so the question blocked when I pass through the quiz item id which is actually the quiz Item ID right because it belongs to the quiz item itself or the content okay so this will either be a zero a one or a two right I hope that makes sense okay if it doesn't let's have a look at the interface so let's look in here I'm essentially getting this right the content and that's what I'm passing through into the question log great so we also need to pass this through as a prop which we forgot to okay okay so I hope that makes sense I'm also going to give this the type of number well I'm here and great so now when I click it it should get rid of the quiz item id let's have a look seems to be wrong here IDs that should be on the app IDs and we also need to pass the quiz item id onto the question block so let's pass that through as the first one and this is going to be a great so now if I click New York New York will be added to My Chosen questions array and my unanswered question IDs zero will have disappeared as this belongs to the group with the ID of zero and if I click on here well either 2 will disappear and it does okay and traditional husband added great and if I click on here we have answered all the questions so there is nothing in our array so now I'm going to use this in order to write a const called valid pick and if I look in my chosen answer items array and of course it exists and it does not include the question text so bank will not include so if it does not include that and we look in the unanswered question IDs array and if it exists and check if it does not include so not include the quiz item ID so if these two things are true then we know we've got a valid pick which means we disable all the other buttons so now I'm just going to pass through this from the app as well as it's another one we need to pass through so on here I'm just going to pass through chosen answer items into the questions block so there we go chosen answer items I'm going to pass that through here as well and this is an array of strings and then I'm also going to pass it through here which means that in here as well not again this is a array of strings great so now if I click New York all the other ones should be disabled so I can't pick them sandwich and traditional so great so now that we have done that let's get to scrolling to the highest uh question group so I'm going to do that right here and we're going to use a use effect for this so under the last use of fact I'm going to use use effect again okay so just get up this following syntax and we're going to scroll to the highest unanswered question ID so to do that I'm going to actually get the unanswered question IDs and I'm going to destructure them into a method called math Min which will literally return the smallest number from anything that's in here and I'm going to save this as the highest ID okay so that's all I have done that was actually super easy I'm also going to run this use effect every time the unanswered question IDs change and now I'm going to look into my document and get anything with the ID of the highest ID okay and I'm going to save this as the highest element because we're going to want to scroll to it okay so I'm going to grab the highest element making sure that this is in parenthesis say that a little bit bigger for you now I wouldn't usually recommend using the document get element by ID in a react project but as this is kind of hard to do with the use refwork I've shown you this way but if you're interested in how I would do this using the use ref hook then please stick around to the end and I'll switch this out okay I'll switch it out so you can see and making sure this is a string as at the moment is a integer and get element by ID won't take that so now we're going to get the highest element and I'm going to use if it exists actually I'm going to do scroll into view and I'm going to put the behavior as smooth so Behavior smooth okay and disable this great so we actually only want to do this if unanswered questions IDs exist right so I'm going to grab this and check for it before we do any of the following Behavior okay so there we go so now I go ahead and fix them from here it will scroll to the top one and if I pick something from the last one it will again scroll to the top one until we answer it okay so that is pretty cool we have now finished the scrolling Behavior now if unanswered questions length is smaller than or equal to zero and just to You Know cover ourselves chosen answer items length is larger than or equal to one well then we want to find the answer block which we're going to have to make so let's go ahead and create our answer block I'm going to give this to the class name of answer block just like so oops and we want to scroll to it so I'm going to essentially once again look in our document and get element by ID of answer lock it's gonna disable this hint and I'm going to save this as the answer block and if the answer block exists I'm going to scroll into view and once again I have the behavior as smooth okay so we also want this to run anytime the answer items or the chosen answer items change great so that's really it next up let's get to actually displaying our answers so we are actually going to want to show the answer block so let's gonna go ahead and import it import answer block from answer block and I only want to show it so I'm actually going to set this as const shell on tour set show answer you state Boolean and I'm going to start off with it being false and I'm going to use set show answer to actually true when we want to show the block so the answer block so if show answer is true then we want to show the answer log component so that is how we would write that okay so expect that we need to do our outside here so just like that now what do we want to pass through into the answer block but we want to pass through the answer options that we have so he's going to pass through all of them I want to do the logic on the answer block and we're also going to pass through our chosen answer items okay I'm just going to pass in through as chosen answers but we have them saved here as chosen answer items great our answer options are actually going to be your quizzes and if our quiz exists answers okay so everything that comes with the database so now on the answer block we're going to have to pass through the answer options but also the chosen of course just like that and the types of these are well I'm just going to put this on a new line for us I will format this a lot better A little bit later when I upload these files at the moment I'm kind of rushing the answer option is going to be well it's going to be an Erasure but it's going to also have the interface of answer that we prewritten so an array of the interface answer or is going to be undefined we of course need to import the answer interface so answer interface from let's go back on more interfaces and the chosen answers is going to be an array of strings so let's just go ahead and undo that now in here what do I want to do well I essentially want to show an answer but to do this I'm going to have to essentially check to all our answer options that we have got from the database to see if it matches the combination that we have for the chosen answers so what I am going to do let's just return an empty dependency is get our answer options so essentially the ones from the database and for each answer which is going to have the interface of answer foreign just go ahead and put this in some parenthesis I'm going to have to say that if The Chosen answers array that we have you know done on our client includes answer combination the fast in the array and includes the second item in the array from our database and the third item well then I want to set the results as the answer right which means we also need to actually import use effects as well as use State into here so we can use both and I'm going to use const results set result use state and it's either going to be the answer or no and essentially I want to do this every single time the chosen answers change okay so now there's a console log or result so now if I go ahead and pick New York a sandwich and mountains I get as Darrow as the cheese and if I pick Austin Pizza and traditional Eggert palmito so this is looking good the final thing I'm going to do is actually just show that result in here so all I'm going to do is actually scroll to this so I'm going to have to give this the ID because we haven't actually given this an idea yet or answer block so that we have something to scroll to and I'm just going to use the H2 element to say that if result exists I want to just pass you the text of the result and then also the image so I'm going to use the image element and the source of this is going to be the result if it exists image as well as the alternative text which is going to be the results objects if it exists text great and now some final styling so let's get up our CSS files and I'm going to grab my answer block I'm going to give it a width of 600 pixels a background color of pink that I've picked out previously so this is just a funky one that I have found I'm of course going to soften up with a border radius because they are my favorite and I'm also going to do display Flex align items Center to Center everything vertically Flex direction is going to be column and color for the text is just going to be white so there is the RGB for white and I'm also going to say that any image that is inside the answer block is just going to have a width of 90. great so let's try it out I'm going to start from the last one modern and should take me up to here I just miss it there and pick pasta and then pick Austin we get cheddar cheese okay so that is cool however something funky did happen it didn't all um I had to click Austin twice so it must be something on the use effect let's go ahead and give this index a number type while we're here foreign show Answer changes let's try this again New York sandwich modern and we get roomy the image is broken but that's because we took it from Wikipedia so maybe someone took it down let's try another one New York Pizza traditional and blue cheese okay so this is looking good and of course we can you know start from the bottom house pasta New York and we get bread cheese again this is taken from Wikipedia so the image is broken but you get the gist now before we run off I just want to clean a few things up I'm gonna get rid of this I've left it to last as this is a bit Advanced so if you're happy with it just leave it just know it's probably not the best practice and that we should use use ref so I'm just going to get rid of that and all I am going to do is import create ref from react just like so and under here so perhaps just get rid of this console log as well so before we fetch the data I'm going to Define our refs because we're going to be picking out a ref outside of the components to scroll to so what I'm going to do is get the unanswered questions so unanswered question ideas and if they exist I'm going to reduce them so I'm going to use accountant ID that sounds good to me and then I'm just going to look into the objects by the ID and then for each one I'm going to create a reference okay so that is what I am doing we're of course going to have to add some types to this I'm just going to console log refs so we can see what is going on so for this I'm going to actually make a reduced type to reduce type up here and let's refine it to type reduce type and then I'm just going to add the ID if it exists which is going to have an object okay so that's all I have done and then here you need to say that this ref that we are making art is an HTML give elements or let's just put them now okay just make sure that says type great so this is looking good we'll put as unknown as key of the reduced type as well just so we can identify that and we're going to create objects out of all of that great so what's it not liking here now let's maybe just put any as well okay so we shouldn't really use any but you know I'm at the end now I'm just showing you this alternative better option of how to use ref instead of using document get element by ID and now let's just return the accumulation so now if we look in here this is what is the return we've used the unanswered question ID so here to create this object that has the create ref in it so it's an object of objects okay and we're going to collect them all in here and to do that I'm just going to scroll down to the questions block pass the ref through get the Reps and then pass through the content ID so in fact can we just do ID I think we can they should probably be content ID you should probably get rid of this actually and just make this the content ID instead and then we can just use the content ID here too great so now on the questions blog so let's find the questions block we need to pass that through as a reference so here are all our props and the reference is the second argument I'm going to wrap this in a forward ref just like so and then import that from reacts so forward breath and great and it means we can now get rid of this ID as we don't need it anymore and I'm just going to use the ref instead okay great and then we can just infer parameters from usage if we want there we go great so now if we look in here you will see that has been populated with the H2 elements okay just like so so now let's go ahead and use that in order to scroll to the highest element so I'm going to have to rewrite the use effect for that so this one right here so once we get the highest ID we're going to use the refs we're going to go into them and pass through the highest ID we're going to get the current scroll into View Behavior smooth okay great and just disable this hint wonderful and of course we also need to scroll to the answer block so I'm going to do that in its own if statement to show Answer exists then we're going to scroll okay and I'm also going to pass through a check to see if the chosen answer items length is larger than zero because we don't want any scoring to happen when we first load our page so that should get rid of that okay and just keep the unanswered questions check great so now let's create another reference let's get rid of that I'm going to call this answer ref I'm going to use create ref for it and just call the method and then I'm going to use the answer ref pass it through as a reference into here let's also check that refs exists you know before reading it down here now on the answers block let's just put this on a new line just like so I'm also going to pass through the ref but this time is the answer breath okay so that means that on the answer block we again need to pass it down as a second argument so outside of the props and then wrap this in a forward ref just like so which we're going to have to import from react to import forward graph foreign use current scroll into view and then just put the behavior as smooth okay great so this is looking good I'm going to put this as an else because this works as an elf else a little bit better now let's also add the missing dependencies so answer ref current and refs and we need to assign a type to this well once again I'm just going to get that from here it's going to be an htmlive element or null okay great so now in here let's also check if answer ref exists so and answer ref all right and great maybe let's add that to be current as well okay wonderful I believe that is it let's also add the type here so I'm just going to copy this right here and paste it it doesn't it seem to like that so let's go ahead and just put any as well great let's go back in here let's run it if the children items length changes and of course we cannot get rid of this and just pass through the ref onto the wrapping div so now let's check it out let's go click here click here and click here and we scroll to the answer wonderful now one last thing I'm going to do and that is in the index CSS file I want everything to be consistent so I'm going to change everything to have REM instead of pixels because at the moment I'm kind of using both and I don't really like that so let's change this to be 37.5 REM this to be 0.625 um this to be 37.5 gram and then we've got 13.125 gram a border radius of 0.313 Ram a width of 17.875 gram again a broader radius of 0.313 RAM a margin bottom of 0.938 um it's got one pixel here so let's change that to this let's change the answer block to 37.5 gram with a border radius of 0.313 RAM and there we go Okay so we've done it we have essentially finished our BuzzFeed clone in typescript I'm going to share this with you I'm going to clean it up so you know everything's indented a little bit better and we get rid of the console logs so if you want to check out my code then please go ahead and do that let me know what you think in the video description and I will hopefully see you again soon thanks very much