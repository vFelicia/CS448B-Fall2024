clean code is code that is readable reusable and refactorable i'm going to show you how to write clean code and objects and data structures this video is part of a series i'm doing based on an article by ryan mcdermott on clean code and javascript check the description for a link to the original article when creating an object it's better to use getters and setters to access data instead of just looking for a property on an object this is going to make it easier to change your program later it makes adding validations easier it gives increased encapsulation on your object and a few other benefits so look let's look at this code right here we have the function make bank account and when you are creating an object like this whatever you return is what you're going to be able to access in the object so here we instantiate an uh bank account object and call it a count and then we're going to see it starts with a balance of zero whenever you make a bank object but we're going to then set it to 100 and then we can console.log that and you'll see that the balance is now 100 when it started as zero that's the bad way to do it where there's no getter and setter you can just directly access the property in the object now let me show you the good way we are going to create a variable here and set to zero anything that's up here that's not in the return statement is private so you're not going to be able to directly access this variable now and now we're going to create a function here and another function and then we are going to return just the functions so i've created a getter function get balance and a setter function set balance and then i've only returned the function you see i did not return the actual property or variable balance we've only returned the functions that means these are the only things you're going to be able to access in the object anything under the return is what is publicly available to access an object so you can still get the balance by calling this function and it's going since this function is is going to be inside the object it can still access that variable inside the object and we can also set the balance by doing balance equals amount okay first i'm actually going to change these two semicolons to a comma that doesn't need one there it was a mistake having a semicolon so account that balance instead of account.balance we're going to do account.set balance to 100 and we're going to actually instead of making equals 100 we're going to pass in 100 and then we're going to do account dot get balance to get the balance and it still says 100. so that is a better way of doing it using getters and setters the next thing i want to talk about is that you should make objects have private members so here's the constructor function for an employee object this constructor function actually creates the initial object prototype but we can add another property to the prototype and this one down here is a function so we create the employee object but we're going to add to the prototype a get name function where it's going to return this dot name so remember this is actually the bad way to do it whenever you use the word this and dot and then you put a property name after it this dot name this is creating a basically a public property that can be directly accessed so this is not this is not really a private member this is a public member when you use this dot name so let's see how this works i'm going to uncomment this out let me put some parentheses on there and if we run that it's going to say employee name john doe employee name undefined so let's go through this code here we are going to instantiate a new employee object and call employee and we're going to pass in the name john doe so it's going to go to this function up here it's going to it's going to do this.name equals name then the name we passed in was john doe then we're going to console.log now these are template literals just look in the description of this video to see a link to my other video about template literals so we have employee name and we're going to do employee.getname so we're calling this getname function now then we're going to delete employee.name and if you console.log employee.getname again it's going to say undefined so this is the bad way of creating properties and members of an object because it's easy to do something like the deleting it or you can change the name really easily we want to make it a little harder to change the name so basically i'm going to delete this whole section here and we are not even going to use the this dot notation because that creates a public property that can be easily accessed and deleted so we're going to do this so we're passing in a name but we're not assigning it to a property so it's still stored in the object but it's private so it cannot be directly accessed but we can access it using this function that's returned we're returning the get name function that's going to return the name variable that's with an object but it's not a property of the object so let's look at this down here now we're again going to do create a new employee called employee we're going to pass in the name john doe and we're going to call get name let me just run this and we'll see how it's different so you can see look employee named john doe employee named john doe remember last time the second name was undefined but when we try to delete employee.name well there actually is no employee.name we not create that property in the function so this is going to be a better way to create an object so the members are private and you can't accidentally delete it or change it directly you can only do it through the functions well thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good