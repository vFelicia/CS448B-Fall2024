so i've had my heart broken into it but something's different next to you it's like my soul is is feelings that i know i can't keep on this road alone that is oh then feelings feelings that i know i can't keep bottled up inside and all i wanna know is are you ready for the ride what have i been waiting for oh i can run but i can't hide the feelings that i know so so so so so so you know living in the light you're giving out whenever you cross my mind without your baby tell me let you i'm stay is is nobody all this is know is tell me is me we're flying high like a when you're with me and i realize what it all means you're the one on my oh till the sky of this feeling soaking in your light right above me it's an open sky full of dreams is every single crowd and i know you love me till the sky i was running to the ocean underneath i was doing just for me oh is for me so so so so so yes so so so hello welcome to recipe for an accessible component i'm sophia a front end engineer at course hero i'm here with karen a senior friend an engineer also from course here so i actually have a question for you sophia when people think about accessibility what do you think that most people have in mind i think that people tend to think of very visible disabilities so when we think about like visual symbolism it's the person in the wheelchair it's a person with a crutch but i think when we think about accessibility in a more universal sense it becomes uh kind of more motivating so this definition which was kind of cobbled together from a bunch of different definitions says that websites that are designed and developed so that every person can understand navigate and contribute to them no matter their device their circumstances or their ability i think that definition of web accessibility makes us realize that it's more of a universal thing right so maybe you don't have a conventional disability but a website that has high contrast and clear information structure is easier to understand when you're on your phone or maybe if you're in a really loud environment right you really want those captions even if you can hear in normal circumstances one thing that's interesting to know is that disability affects a lot more people than people realize so according to the cdc roughly about 15 of the people in the world have some form of disability but that number goes to roughly one to five when you look at adults specifically and there's four major kinds there's manual or motor mobility which means that maybe the user can't operate a mouse the same way that other people can um there's hearing disabilities in which case captions are really important and then there's like different levels of visual disability right it might not mean that the person is completely unable to see but maybe they need to use the zoom function or maybe they need higher contrast and then there's also cognitive disability which means that they really are relying on a really clear information hierarchy to understand where they're going and what they're doing on the website so to summarize why is it important one better accessibility on the web benefits everyone again with the example of high contrast captions like a lot of people will benefit from that even if they don't have a conventional disability and then it's also the law right so the americans with disabilities act has spurred a lot of these lawsuits related to companies missing certain features on their websites so hulu faced a lawsuit in 2017 because they didn't have caption support for a lot of their videos beyonce's website also had its own lawsuit because the website is kind of like a visual photo diary but it was missing a lot of the text alternatives and the keyboard navigation that a lot of people rely on so it's kind of interesting to think about accessibility and react there was a study that was done earlier this year by webbing which is an organization that is considered an authority on web accessibility and in their study they looked at the top 1 million websites and what technologies they use and how those choices affected accessibility and one category was frameworks and they found that pages that use react had about six percent more accessibility errors in the average website but this is completely preventable right there's nothing inherent to react that prevents us from building accessible components and websites so we're gonna talk about how to do that by doing a demo for how to build an accessible accordion all right here we are on localhost with a really basic accordion we've set up so so tell me a little bit about what you mean when you're saying an accordion here that's a great question so there's a lot of names for it um sometimes it's called a collapsible section sometimes it's called called a drop down but basically it's just a button that lets you toggle content by clicking on it so let's think about the accessibility of this one really great builtin tool that's on chrome is lighthouse so that's something in dev tools that you can use to evaluate your website for things like seo accessibility and also just general performance so let's open up dev tools i'm gonna go to the lighthouse option and then we're just gonna have accessibility checked off and we're gonna run it by clicking generate report see what it says okay it's not too bad but there's an issue that's flagged which is contrast so it says background and foreground colors do not have a sufficient contrast ratio all right so let's let's see what that ratio is and i can see the the problematic element is accordion title uh so let's select that all right it's telling me the contrast ratio is 1.97 which is not great it doesn't pass even the minimum requirement so we will want to fix that okay you know one thing i did notice is this additional items to manually check can we take a quick look at that sure what it says there uh page has a logical tab order interactive keyboard controls let's see tabbing through the page keyboard controls i don't think we set this up on our example let's uh take a look here tabbing doesn't do anything when i see something like this the page that actually comes to mind is one of my favorite resources the w3c um these aria design patterns uh let's uh command f here and see if we can find uh an accordion ah there we are okay so this has a little example accordion it works pretty similar to ours um i notice uh already some differences in things that are highlighted um but let's look at the accessibility features that chrome was mentioning like keyboard support uh space or enter should open things i like these arrow options uh the tab should be there for sure um what else is there there's some aria information here uh i like this idea of showing whether it's expanded um there's some really good stuff in here uh cool so this this kind of gives us a little idea of uh what we can focus on going forward all right so let's edit the code for our accordion by hopping here in code sandbox which is an online editor so just to summarize some of the issues we've noted there's the color contrast issues there's lack of keyboard navigation it's uh the the ui for focus states and then some aria attributes so let's just walk through this quickly we have our root component app.js which remembers an accordion which takes in a children which is just an array of data objects the individual accordions are here in accordion item and each according item contains a header and a body so the header corresponds to the text up on the button and the body corresponds to the body of the accordion um so one quick note before we start often times in react we use a div as a wrapper when we're returning multiple elements but if there isn't a better semantic element to use or if we don't need a class name which in this case we do then we should use a react fragment which looks um like this and the reason for doing that is we don't add an unnecessary um node to the dom which can complicate where the focus goes in this case we do need the div because we have a class name so we're gonna leave that as is um and let's tackle the first issue which is improving the markup so um we're using a div for the button here which doesn't really say much so let's just change that to a button element all right so before you panic obviously it's applying the default styles hence why the button's no longer full width but not to worry we can override the width pretty easily with a little bit of css i'm going to hop into the style sheet and just pop this here okay we are back to where we work for um and again to reiterate by turning this div into a button we can now navigate using the tab which is very cool another thing we should do is make it a little more obvious that these buttons can be clipped on right because it's not inherently obvious so a lot of times on websites they'll add a plus or minus sign plus meaning that you can expand this section minus meaning that you can collapse it we are going to be a little fancy so we are going to use the after selector to add some triangles to our titles um if you look in accordion header we have this open class or conditionally rendering so we can use that to show a different triangle when it's open versus when it's closed let's just save this really quickly and we're going to add a little bit of css here there we go now we have upside down triangle when it is closed and then right side up triangle when it's open and this way it's just a little more obvious that this is an element that you can interact with so that's good um one other thing we noticed from the lighthouse report was that the contrast wasn't strong enough so we can fix that very easily we just basically need a stronger contrast between the background color and the text color so just to keep it simple why don't we make background white and that should be a lot better okay now it is a contrast ratio of 5.74 which passes from the strictest standards with blind colors so that's awesome um one other thing is a lot of people don't really like this default focus styling this blue rectangle but we can customize that and make it even pop a little more if you look at the examples page they talk about how the background color of the header button should ideally change just to make it more obvious that that's the one that's open so i'm just going to add a little styling to the focus selector here so now it's a little obvious right we have this green outline and this pale yellow color and it's just a little bit more obvious that it's the element we're focused on one other thing i want to do is add emphasis on the header for the accordion that's collapsed by making the text black but right now if i click out it actually goes back to gray so we can just add a little bit of css and this way it's a little more obvious but it's the one that's being emphasized awesome so we've improved some of the things on the visual front we also want to communicate some of this information nonvisually as well so for example for the average person maybe it's obvious that the accordion is open when you click on it but for someone who's visually impaired we want to communicate that information using some aria attributes so pretty straightforwardly we can apply arya expanded to communicate whether the toggle is open or not so we can simply just set that to our is open property which will be true or false this way screen reader knows when it toggles open so that's pretty straightforward um based on the notes in the w3 site we also want to add some attributes to communicate the relationship between the button and the text right for us maybe it's obvious that you click on the button to see the text but for someone using screen reader we want to communicate that otherwise so let's add an id and also this aria controls property which tells us which section it will compact and then on the flip side let's also add some attributes to accordion body so i do roll region which just tells screen readers hey this is not um this doesn't fall under like a specific type of label but it's an area that you should read out and then also aria labeled by which is the inverse of aria controls saying hey the the um the part that points to me is label index so we've improved our ui to show the focus state better we've added some important attributes now what about that keyboard navigation i'm actually really excited to talk about keyboard navigation and it's completely vital to accessibility and as we saw um it's actually uh there's actually suggestions by the w3c on how to do that so let's get started on this let's put this together so let's see how do we want to start here um i'm thinking let's start in the header component itself if we take a look at what we have here we can tab between stuff we can shift tab between stuff but the up and down arrows don't work i remember reading that over there that we needed to make these up and down arrows work um let's let's how about we start there so what i'm going to do is i'm going to write a little on key down uh listener let's put that maybe right here on the header so what does this do this listens for arrow up this listens for arrow down this listens for escape it's a personal favorite um i like the idea of hitting escape to quit an accordion uh and what do we want to do when we have this let's say on arrow up i wanna scroll up uh arrow down scroll down escape close it uh i think that's probably more appropriate for a parent component uh so let's let's just add some stub functions here maybe something that we will uh grab from the props so something like this okay i like that i like how that looks okay let's let's move to the accordion now so this is probably where we're going to control uh a lot of a lot of this functionality um you know i have an idea of how we're gonna do this and i like the idea of using a use effect in our child component let me let me put some code on the screen and then we can talk through how it works so the idea here is let's create a little state maybe something like a focused index and what i want to do is i want this parent to listen for these key up and key down events it kind of knows what index of the child is sending those events and all we really need to do is send it to the the item above or item below so we can update this focus index and if we hop here to the header again we can actually maybe put in a little ref here so i'm gonna put a little ref here uh how about here okay and this ref will actually point to this item right here and what this ref i put in does is it checks hey should i be focused you know did did something in the parent component tell me that i should be focused now and if if that changes uh and it's true then focus me really straightforward really simple uh you can of course do things that are much more complicated uh but let's let's start simple for now okay so let's uh um let's uh move in and let's start stubbing out some of these functions so the first thing i'm gonna do is put some little empty functions that we'll use here okay so what do we have here we're passing our is focus which we were using over here uh we're uh passing our focus focus previous and handle escape uh let's start with focus next so i'm gonna i think it's pretty straightforward that we want to set the index to the next one but there's also a situation where what if you're on the last accordion element what does that look like that looks like something like this and you hit the down arrow i i say we should loop up i believe i saw that in the w3c that's very comfortable uh navigation for me uh so let's add that here so what did we do here we said that uh if we're on the last element we're gonna loop to the beginning otherwise we're just gonna go to index plus one and because we uh are listening uh um for changes in the focus index in the child uh this uh this seems like it should work let's try this together hey there we go down arrow oh and it loops okay i really like that so the uh up arrow is uh pretty similar so i'll just put in the code for that real quick boom and you know let's test it together uh let's go here down arrow works up arrow works that's great uh and then escape what do we want to do um i this is a personal uh preference i like the idea of collapsing according with escape so let's try this i'm going to put in some code here i'm going to click on this and i'm going to hit escape so let's let's open this one and hit escape hey that works so one this is very inclusive right there there there are individuals who wouldn't have been able to comfortably use our uh accordion before that now can there are people who we are empowering but i genuinely believe that this helps everybody everybody has a better experience because of this it just feels like uh it feels intuitive it feels right um it feels fun to use it's a simple accordion component i know but uh it just it feels fun so that was your demo obviously there are libraries out there that you can just how download it is to make your components more accessible so what are the ingredients it's being thoughtful about the markup by using semantic html it's incorporating aria attributes it's making sure that keyboard navigation is supported which can actually come from the symantec markup and it's also being clear about focus management there's a lot of great resources out there but two that we particularly recommend are the w3c examples page and this website which has a lot of information about different patterns the first one is the one that we showed during our demo which has really detailed information about the kinds of attributes you should be using different considerations kind of at the element level and then the second link kind of takes a more philosophical approach when it comes to different components so why we can make different choices and what the implications are for those choices so we really encourage you to check those out so before we close out here uh i actually had a question for you sophia it's been a year and uh i wanted to know uh something not related to computer science something a little personal what gives you hope that's a really good question yeah this has been quite a year i think it's two things one thing is just how resilient people have been both at the team level and also what the level beyond that people have found really amazing ways to cope with everything that's going on in the world for my team at course hero we did a virtual cocktail class i think i heard that your team did a virtual escape room which is really really cool um and then secondly i think what gives me hope is how we've been able to recognize the humanity in each other um definitely of course hero but also across all the different social circles we're in um i think being empathetic being patient and demonstrating our respect for each other has kind of underlined the fact that beyond us being devs you know we are humans we have basic needs and we should take care of each other in different times what about uconn um you know it's uh like i said it's been a year um i think sometimes it just feels like the world might be falling apart and sometimes it feels like there's a lot out there to be scared of and sometimes it even feels like that feeling might never go away um but interestingly tech represents hope to me tech to me is a promise that the future will get better you know i learned the word doom scrolling this year if you look it up it's just this idea that you keep going on twitter and keep finding more and more scary things there's always going to be something scary something negative out there but no matter what it seems that phones always get a little thinner computers always get a little faster and every once in a while something new comes out that just feels magical in those moments that magic can inspire a sense of wonder and for me hope you know i i became an engineer because it allows me to shape what this slightly better future will look like and i think that we focus on accessibility because it allows us to make this slightly better future more inclusive as well this was an awesome talk sophia thank you so much for setting this up thank you for uh having me as a part of this oh thank you thank you for everything you've shared everything you said really resonated with me as well and to the people watching this talk i hope it brought you something both in terms of learning about accessibility but also thinking about who we are as people thanks so so so hello everybody welcome back welcome back anjana i'm happy to see you today on this wednesday we were just talking before it's hard to believe that it's only wednesday there's been so much that's happened in three days during this conference and i i'm excited to get into this third day i mean it's it's only day three it's amazing um we've had so many great talks uh already and topic tables and such great sponsors but uh i'm just excited to get kicked off today my name is jonathan catrell i am a director of technology at pbs i also host developer t which is a podcast for engineers like yourself who are looking to level up in uh in their careers and i'm excited to get going today anjana uh once you introduce yourself nick yeah we are really excited to be back with you for day three um in case you haven't been able to join us the last couple of days hi i'm anjana vakil i'm a software developer and developer advocate at observable and i am really excited that we have one more actionpacked day of amazing stuff for y'all and we are super excited to tell you all a little bit about what's going to happen today and also jump right into our talks but first i want to make sure we give a huge thank you and shout out to our amazing sponsors who've been making this all possible so thank you so much and please everyone join us in thanking flexport course hero imagex versailles off zero hassara vonage netlify and mux awesome sponsors sponsors make the world go round for uh events like this so it's it's wonderful to have such great sponsors this year we hope that you had a chance to hang out uh with those sponsors this morning in the past two days because they have some of the best engineers working at those companies official expo sessions are now complete but many sponsors will still be hanging out at their booths make sure you go and say hi you can find that in hop in which we're going to continue talking about because it's such a an interesting platform with so much more going on than just the main stage so make sure you click around and explore a little bit definitely and also a huge thank you to uh free code camp who is making our live stream possible we have folks joining us on hop in live but we also have folks tuning in to our youtube live stream so huge thank you to free code cam for making that happen and whether you're looking on the stage on hop in or whether you're watching the live stream you're gonna see some amazing talks today so get pumped get ready because we have some awesome talks coming your way from becca bailey brian larue lee robinson cassidy williams and then we're going to cap off the day and the whole conference with a very special live episode of syntax fm with west boss and scott telinski exciting wes and uh and scott are much more entertaining and funny then i can be in a live setting so i'm excited for that one uh and as the previous two days have as it's been true in the previous two days the morning and the afternoon talks will be broken up by live topic tables with speakers and other experts so make sure you check out those topic tables you can find them let me see if i get it right this time over there the sessions are over there in hoppin uh you click on the sessions you can go and join a topic table those have been really fun and by the way when you're in a topic table you can actually show yours show your face it can be kind of like those the big you know brady bunch style zoom videos or zoom meetings rather where you can show your face and share your voice as well and ask questions in that way as long as that particular topic table is open to that yes definitely and please um remember that in all of our interactions with each other whether in the topics table sections in the uh in this the chat um or even in the youtube comments all of our conversations with each other we want to keep this a very safe and respectful place so please everyone please keep being considerate keep being respectful keep taking responsibility for your actions um and remember that we are all abiding by the code of conduct which you can find at reactathon.com conduct if you ever do feel unsafe or harassed or someone is just trolling you unnecessarily you can report them by clicking on their profile and clicking report user even if it's questionable if you're thinking maybe i should maybe i shouldn't please do that because we'd rather have the report than you feel like you were like you were hurt or harassed this will send a report to the organizers and they will pay attention to it and they will handle it absolutely all right well without further ado let's jump into these amazing talks what do you say jonathan who we got up first yes i'm excited yeah first is becca bailey becca is a frontend engineer at formidable with a deep love of react typescript and graphql after previous career as an elementary music and fine arts teacher she loves helping artists and career changers understand software i love this i love how many folks we have speaking at the conference and attending the conference and being present at the conference who have transitioned uh into this wide wonderful world of tech and react from other industries other jobs um love this so uh today becca is gonna tell us a little bit about how to love refactoring our code which i am really excited to hear about because refactoring is always a huge headache to me so i'm excited to change my mindset about it and so we're going to learn how we can love refactoring without avoiding or while avoiding unintentional changes to our existing logic and we're going to learn how refactoring can help us simplify create a foundation for future work and better communicate our intentions for our code base which i love that was one of our kind of subtle themes yesterday was how our code really communicates with our teammates so we're delighted to have formidable engineer becca bailey show us how to find joy in refactoring uh by marie condoing uh up to levels of organization and cleanliness that marie kondo would absolutely approve so please everyone join us in welcoming becca bailey hi i'm becca i'm a software engineer and engineering manager at formidable and today i'm going to be talking about refactoring and sharing some strategies for how we can hopefully make refactoring one less stressful thing that we have to deal with this year for those of you who are not closely following american or japanese popular culture marie kondo is the author of the lifechanging magic of tidying up as well as the star of the lifechanging manga of tidying up and a netflix series a couple years ago i decided to read her book and i attempted to put her principles into practice in my messy 600 square foot chicago apartment i really expected to hate this entire experience but actually i didn't in addition to learning some new folding skills i learned about how reducing the number of things that i own helps me to better appreciate the things that i have and when we know and appreciate the things that we have it turns out that we're less likely to leave them lying around on the floor so this got me thinking about how to connect these these practices to the code that i write because there are many days when none of my code brings me joy but unfortunately just throwing it away is not a viable option so this brought me back to the concept of refactoring what is refactoring well according to the book refactoring by martin fowler code refactoring is the process of restructuring existing computer code changing the factoring without changing its external behavior so there's a word in there that we might not be familiar with which is factoring and factoring refers to the internal parts of a program or the implementation details so let's note that if we're making breaking changes to the publicfacing api of a library or even a toplevel component while this is often necessary it's not actually by definition refactoring refactoring means changing the inside without changing the outside this brings me to my personal definition of refactoring to me refactoring is an opportunity to change your mind and ask yourself what decisions would i make differently if i could write this code again sometimes when we talk about refactoring we're referring to the process of modernizing our syntax in react this might involve refactoring from a class to a function component replacing deprecated life cycle methods or converting state and life cycle methods to hooks this is often a great and necessary thing to do but i think this is a separate concern from refactoring for code style and readability modernizing your syntax is a part of refactoring but at least for me it's not the entire reason that i refactor you might discover that using hooks context suspense or other modern react apis might aid you in your pursuit of human readable code but in my view modern syntax is a tool and not an end goal when refactoring refactoring isn't just about code quality either in my experience the pursuit of artfully crafted software can lead to a lot of pride about your work but unless you're deliberate about respecting deadlines embracing alternate viewpoints and collaborating with your team it sometimes just makes software engineering more exclusionary to people who don't subscribe to a specific set of engineering principles one of the things i really loved about marie kondo's philosophy is that it's not just about buying stuff from the container store and redecorating your house to make it look like a beautiful minimalist magazine cover likewise the end goal of refactoring isn't to have perfect or beautiful code for its own sake so when do i refactor when i organized my apartment a couple years ago my goal was to feel less stressed every time i came home from work after dealing with this anxiety for a few months i knew it was time to reorganize likewise there are some things that tell me it's time to refactor my react code my general rules are to refactor when your code is hard to test hard to understand or hard to change for example if you find yourself mocking out a lot of external libraries or walking on eggshells around your code base or just scratching your head a lot when you try to read your own code it might be time to refactor but more specifically here are some things that i see in react projects that clue me in that i might need to change some things these things include out of control props so usually if i have 27 props on one component that tells me that there's something wrong nested conditionals so conditionals that are really hard to follow confusing variable names or components that are doing too many things that are uncertain about what their responsibilities actually are these are some general best practices as i know them but i'll tell you this if you do your job for a while if you do regular code reviews and collaborate with your team and practice refactoring i promise you you will develop your own sense for knowing what to refactor a couple more things to note before we move on first of all it's really common to think about refactoring as a negative thing as something that only happens when we write bad code i call this get blame refactoring however refactoring doesn't mean that you or someone else did something wrong maybe you made the best choice you could with the knowledge you had in the moment but now you have more information or more expertise and you've changed your mind it's okay to change your mind there's no shame in refactoring or having someone else refactor your code so as we're talking about how to refactor let's talk about discarding a key tenet of marie kondo's philosophy is to start with discarding while i know most of us have some amount of legacy code to maintain and we don't have the ability to just throw out everything that doesn't bring us joy it's also not unusual for us to hold on to code that we don't need anymore maybe it's a class that your coworker wrote a year ago that you don't quite know what to do with or some utility functions that are no longer useful or some old comments that don't apply anymore perhaps we're afraid to get rid of code because we didn't write it we don't understand it or we're uncertain about whether we're going to need it someday but you can discard it worst case scenario we can use three magic words to bring it all back again this is one of my favorite things about programming because no matter how messy it gets no matter how much we mess up it's really easy to reset everything and try again so i don't know about you but the practice of refactoring isn't always a joyful experience making changes to the structure of our components can result in confusing errors test failures and unintentional changes to the to the behavior of our components have you ever introduced a bug by refactoring i know i have so this is why i love writing tests testing sounds stressful especially if you're not used to doing it but believe me when i tell you that this is the number one thing you can do to transform your refactoring work from a chore to an actual relaxing experience however not all tests are made alike so here's an example of a way that tests can not help us refactor let's say i have a simple class components i'll call this a drawer since marie condo loves putting things in drawers i have some states and a render function with some conditional logic now if you don't understand what's going on here don't worry because neither do i and that's why i'm refactoring this component so using a tool like storybook i can test that this component works and let's say that this component has some existing tests this syntax is a little less common now but if your code has been around for a few years there's a good chance that i'm using a test renderer like enzyme to test my code enzyme allows me to access the props and state of my component in order to make test assertions against them i can run my tests and everything works great so far so now i'm going to start refactoring okay i know i said that we shouldn't refactor just to modernize syntax but hooks are cool so i'll start by switching this class component out for a function with a used state hook and look at that it got shorter already but hold on now when i run my tests again something is broken even though i know the component works the same way it did before so let's read that error message it says shallow wrapper states can only be called on class components well at least it's a pretty helpful message because it tells me that i'm not able to access the state of my component anymore because it's no longer a class well it works the same way but this tells me something about my tests the things i was testing were actually the implementation details if i can break my tests by changing the name of my state variable or changing the internal function name or removing my state altogether this makes refactoring difficult the thing that i care about when refactoring is actually the way that this component behaves so if i look back at this component from the perspective of a user i can see that when i click the open button the contents are visible and when i click the close button the contents are hidden again so let's write a test that says this instead while i can still use enzyme to do this i'm as long as i'm changing my tests i'm actually going to switch my tests to use react testing library which is a test renderer built for these kinds of behavior integration tests well this time i'm not using any internal component apis but i'm able to say what the user should be able to do so now i'm rendering my components i'm clicking the button with the text that says open and now i'm expecting my component to have some inner html that is the that is the props or that's the children i no longer care about my inner props or states so this test passes for both versions of my components once i add a couple more tests i should be start good to start making more changes to this component without so much fear of breaking things so here's the part that makes refactoring really satisfying for me which is having the ability to make small incremental changes while relying on my tests as the source of truth now i can gradually untangle these nested conditionals i'll start by adding one overarching conditional and then step by step i'll remove the ternary statements that are making things more confusing if i were actually refactoring this i would be using a test watcher to check after each step to ensure that my functionality hasn't changed and the final result might tell you a little bit about the code that i appreciate notice how i haven't made this function any shorter is actually got a few more lines of code and a little bit more repetition but because there's one conditional instead of three it's actually easier for me to tell what's going on now this isn't strictly related to refactoring but along the way you might discover another pain points which is file structure and code organization and since i am talking about marie kondo i should also talk a little bit about putting things away marie kondo would say that the goal of reorganizing isn't just to make it easier easy to find your belongings but also to put them away for example if this the shoes you wear every day probably shouldn't be stored in a bin under your bed because you're never gonna remember to put them there likewise the goal of file organization isn't just to make it easier to find things but also to make it easier to know where to put new code there are lots of philosophies on this but my basic rule of thumb is to group things together that are used together and to avoid really deep nesting because if we use lots of deep nesting and a really complex file structure it's going to be much harder for me or the next person who comes along to know where to put things in that complex structure if your imports are a mile long it might be time to rethink your component organization and that will help your refactoring to go a little bit more smoothly so for me i like to think of refactoring as a daily practice every time we refactor we have an opportunity to leave something a little better than we found it now i haven't sent out an official survey but i'm willing to bet that the number one reason why we don't refactor all our code all the time is because we don't have time when there are looming deadlines and any number of things going on in the world right now the struggle is real so rather than refactoring all at once the more we can make refactoring a part of our daily routine at work the easier it will be to find the time and to get the buyin from our team i don't think it has to be a prioritized item on your backlog by itself it can just be something that you take an extra few minutes to do while you're working on a new feature or even just when you have a few spare minutes when you are when you're to clean up something that you've already done now i don't want to get anybody in trouble here but i'm going to say that most of the time you probably don't even need to mention it to your product manager that you're doing it but speaking of product managers how do i get other people on board especially when we have bigger refactoring work to do because sometimes this is where it gets really tricky if we don't have a team that values thoughtful code reviews and collaboration chances are there will be someone organizing their one little drawer for all the rest of your house stays messy or worse you will all be organizing your drawers and there will be a different system for each one and there will be no consistency one of the best things you can do for your team is to be consistent in code quality and style so the goals when refactoring are clear this might mean making some compromises with your team members about code style and how you're writing it sometimes in my experience it helps to document the this style and testing practices that way even if there are older or more inconsistent parts of the code base we have a shared idea of what we're all working towards as we're refactoring and making incremental improvements like the end goal of tidying up is to better appreciate the things you own the end goal of refactoring is to better understand your own code and build systems that other people can also use and understand now this might be a little out there for you but i think marie kondo would say that the key to refactoring well is gratitude for the work that has already been done both by you and by other people who have worked on your code base gratitude is the antidote to the scarcity mindset that tells us we need to stockpile 23 pairs of jeans just in case the apocalypse happens and we can never go to the gap again which admittedly sounded a lot crazier when i was writing this talk nine months ago but anyway we can have gratitude even for the things that we're getting rid of even for the code that doesn't work anymore or that doesn't fit our current standards marie kondo says you'll be surprised at how many of the things you possess have already fulfilled their role by acknowledging their contribution and letting them go with gratitude you will be able to truly put the things you own and your life in order when i re approach my refactoring process with gratitude i can acknowledge that i learned something from this code even if the thing i learned is that i don't want to write code like that anymore now go forth and write code that sparks joy thank you very much amazing love it when talk spark joy amazing talk from becca please everyone let's give a warm virtual round of applause for becca bailey and this awesome talk about khan mar in your code konmariing your code and yeah we have the extra special treat of having becca live in our virtual studio with us today um so we get to chat with her right now so everyone please join us in welcoming becca to the stage hi welcome we're so pleased to have you here thank you so much for the amazing talk um we are just i'm i'm i love this topic i love this idea that uh you know you can kind of find more joy in your code base by approaching the code that you no longer need as um not a burden but something a nice you know something to approach with gratitude as you said in the end um so i just i'm so curious how did you come to choose this topic to talk about today what made you choose of all the many things that you could talk about at reactathon uh what made you choose this one yeah so back i guess it was like a year and a half ago when i was actually writing this talk um because of all the things that have happened this year i was in a job where i was just refactoring a lot um it was a code base that had been written very quickly and in order for me to make changes to it it just involved a lot of reworking of the code that was already there and it was not always a very pleasant experience it was really hard sometimes because as the new person on the team and just in a messy code base it was really like there was a lot of pressure not to break things and not to make it worse than it was to begin with so i learned pretty quickly how to use testing retroactively in order to refactor well and that was hugely helpful for me and i just wanted to share that awesome you mentioned that sometimes it's scary to refactor or deprecate code especially if you didn't write it and especially if you're a newer engineer on the team uh i can imagine coming into a team and seeing code that a very senior engineer someone who's kind of moved on into even moved into a management because maybe they're even your boss right uh they wrote that code and now it's your turn to delete it all so um and that can be scary so i'm i'm curious do you have advice for how folks can build the confidence to refactor or even throw out all of that nonjoyful code yeah um and that can be really scary um i think my advice is just to remember that just that if you're coming to code that somebody else wrote that is hard for you to understand or hard for you to test or hard hard to work with you're probably not the only one who feels that way there are probably a bunch of other people on your team or junior developers or new people who would come on after you who would feel the exact same way so just remember that it's not just you and that it's okay to to change things over time and it even if somebody even if the person who wrote it is like the best engineer at your company i'm betting that there are things that they would look back on and be like oh man i can't believe i wrote it that way yeah i love that i love remembering that you're you're not alone that like if you're struggling with something you're not the only one who's gonna struggle with that that's just amazing advice in general i think and i know for um you know a lot of us and as we heard from your bio um you also made the transition into tech from a different field from from being a teacher right very exciting yeah and we had we i i as i mentioned yesterday i get really excited especially for uh to hear about folks who are engineers who used to be teachers because that's also my background so um you know in the spirit of remembering that there are folks out there who are thinking about making that transition maybe going through that transition remembering that those struggles again that you're not alone that other folks have been through this would you mind sharing with us a little bit about how you decided to make that change and what that process was like for you yeah absolutely um so i graduated from college with a degree in music education i was really excited to be a teacher um i was living in chicago at the time so i was teaching in a lot of like chicago public schools after school programs i spent a year teaching abroad in guatemala which was really fun but then after i after that experience i was coming back to the united states um i had like a bajillion different things on my resume didn't couldn't really find like a steady job that i could stick with for a long time because of the recession and just the challenges in education right now um so during that time that i was living abroad i was blogging a lot and i was spending a bunch of time like fixing my wordpress blog and it just became a huge interest of mine so i discovered all these resources for learning to code online um found meetup groups and like a support community and then yeah basically i came back to united states and decided to make that transition and went to dev boot camp took a job as like that had an apprenticeship program where i was really able to work my way into like a fulltime engineering job so yeah i mean it's basically the story of like i had i was struggling to find a steady find steady work and make money and found something else that was a little bit better for that i'm so happy yeah go ahead end up here with us sorry me too yeah i think your story is is very um is very much going to resound with a lot of people a lot of people probably have similar echoes to what you've experienced so thank you so much for sharing with us today and for for giving us this excellent talk uh where can folks follow you or your work where can they hear more from you yeah um well you can for all of my contact info you can go to my website which is becca dot is pretty easy to remember and that should have my twitter links my blog posts um my blog has been kind of quiet for a while thanks pandemic but hopefully we'll have a few more things up there after this conference for you to follow and yeah i would be very happy to talk to you more in the reactathon chat or on twitter you can find me online awesome awesome well thank you thank you so much been such a pleasure everyone please join us in thanking becca for an amazing talk and thanks so much for joining us for this chat you're welcome have a great day reactathon all righty wow i love that we can kick off the day with all this uh joy and and positivity and refactoring and tough subjects like that and talk about changing careers too i love that this is sort of becoming a a subtle uh subtheme of the conference yeah absolutely and i think we're gonna keep on talking about hard things today we've got an excellent talk coming up here in just a moment from lee robinson lee is a developer a writer and a course creator he currently works at versailles a solutions architect helping educate and grow the next js community he frequently speaks about frontend development design and the future of the web yeah and today um we are going to be hearing from lee about data fetching with nexjs um so this is a hybrid react framework that empowers you to choose your data fetching strategy on a perpage basis which is pretty amazing and so i think we're going to hear a lot about clientside rendering serverside rendering static site generation incremental static regeneration when to use all of those and what those mean which i certainly need to learn um yeah and so you know we'll see i don't know maybe he'll tell us about the next generation huh but um no just no star trek fans about okay all right well anyway uh if you're not familiar with nexjs don't worry you're in good company me neither so we're gonna learn about it from leigh and we're gonna hear about some of the main features of the framework so without further ado please join us in welcoming lee to the stage hey everyone my name is lee robinson and i'm a solutions architect at burcell and today i'm going to be talking about nextgs i'm going to give a little introduction and then talk about the different ways that you can do data fetching inside the framework if you haven't heard of nextgs that's okay i'll give a quick introduction it's the most popular and the easiest way to build react applications and it includes a lot of functionality that you would need to probably use in your react application anyway as an opinionated set of defaults that are easily extensible and easily customizable so routing is included in the framework by using next router by creating a new file at pages slash index.js or about.js you can use file system based routing to easily create the different routes in your application it has image optimization built in using the next image component there's react fast refresh so it's very easy to work with the framework locally and see fast rebuilds and have a great developer experience to host files all you need to do is drop them inside of a public folder there's builtin support for css and sas and it easily works with popular libraries like tail and css if you need to do serverless functions or any sort of backend functionality you can actually merge the frontend world and the backend world using api routes by just making a new file at pages api user.js or something similar there's even support for internationalized routing typescript support and last but not least a really important one is code splitting and bundling so when i visit the index right of my application we're only serving up the javascript for that route which means that our pages are going to be more performant because we're shipping less javascript to users and it also if there was an error on the about page or the contact page that javascript would be in a separate bundle which helps improve the resiliency of your application as well and that's all configured out of the box so you don't have to do anything so lots of great defaults in the next js framework and because of that we're seeing nextgs growing very quickly so over the past couple years it's became the most popular framework for building react applications and excitingly we're seeing it being used from the medium to large size businesses all the way up into the enterprise so lots of great logos on here that we love to see using next.js and lots of happy customers and as i mentioned at the start of this i work at versailles which is the easiest way to deploy your react applications and our mantra is develop preview ship so you start by developing your next.js application taking these building blocks of react components and providing a great developer experience then you push it to a get branch and you get an automatic preview url where you can view your changes collaborate with stakeholders and share across your company to developers or designers or leadership then you just simply merge your branch into production and it's immediately available on vercell's global edge network and it takes care of all the hard things for you like setting up domains and dns and ssl encryption asset compression cache invalidation all that stuff are automatically handled by versailles edge network with a nice user experience and developer experience to go with it so that's the company i represent and they're also the creators of nextgs and what i want to talk about today is the different data fetching strategies with nextgs because it's something that i see people get tripped up with a lot so we're going to start off with the most basic next js application you could start here with just mpx create next app or by adding next react and react on to your application and then all it takes to build an xgs application is one file so pages slash index.js or about.js and when you export a react component from your file that's all it takes and this file will be prerendered to html on the server now there's a variety of different data fetching methods that you can do with next.js you've probably heard of some of these you have clientside rendering serverside rendering static site generation and you also have incremental static regeneration which we'll get to here very shortly so the the first concept that i want to talk about is prerendering so no prerendering is a plain react.js application on that initial load the app has not rendered and you just see a white screen you might have seen this before if you tried to load a react application with a large bundle with a very very slow internet connection then after that javascript loads and the hydration period happens the react components are initialized and that app becomes interactive so that's no prerendering with next.js you're using prerendering so on that initial load the prerendered html is displayed and it comes from the server then as the javascript loads and your application hydrates those components become initialized and it becomes interactive so for example like links so the first data fetching strategy i want to talk about is static generation and this is where your html is in one case generated at build time and then reused for each request so for example we build a production build of our application with next build then this html is generated and when a request is made to your page or your website every single request is going to reuse that statically generated html file which is really easily hosted at the edge by something like versel now there's two different types of static generation without data and with data so if we think about that about example that i showed previously very simple react component when you do a next build and that html is generated since we weren't doing any external data fetching that page is going to be prerendered using static generation without data i would say this is somewhat common if you have like an index page or other marketing pages where you just have static markup and you don't need to fetch any external data but you probably also want to do static generation with some external data sources so for pages that need to fetch that data when you run next build it will fetch that external external data so for example information about your products or information about your blog posts and then the html will be generated after that promise resolves and you fetch that information so for example i just got a quick code snippet here the main thing to focus on is get static props when this function is exported when this function is exported from your react component from your page you just have this function get static props it takes in some context you can make an api call to fetch something like products and then when you return these products as a prop it's forwarded to your react component as you see we have products available here now and now you can iterate over those products and display them out as a list for example and the really cool thing about this too is with just one extra key you can actually make this incrementally regenerate now what i mean by that is if you ran a full build of your application at build time you would build all of these files and you would ship them out to something like for sale put them on the server and when request comes in they wouldn't be recreated they would be static for the life lifetime of your application until you did a rebuild but with incremental static regeneration we can actually set a revalidation period based on the cache control uh header http request header so for example if we say 60 seconds here when a request comes in and it's within those 60 second period it will just reuse that same existing html that's been statically generated after that the next request that comes in it tells our application hey you have stale data now and the subsequent request after that it will go and it will update the cache with the new data that's been fetched from the server so i have a quick example here that shows this very well using github issues and leaving reactions so in this example if you leave a you know a heart or a smiley face on this issue and then you go back to the demo you see it on the first request it's stale but then on the following request that in the background that new version of the page had been generated and then you see the cache gets invalidated and it gets updated with the new static version and you didn't have to do anything so the magic of nextgs handles this completely for you now there's another thing to consider with static generation which is when your page paths depend on some external data so git static props is one piece of the puzzle but what if i want to render out a bunch of different posts and i need you know x number of different urls for those posts so when you build the app you have to go fetch all the different posts you have available and then generate a path for each id of the blog posts in your blog and we can do this using git static pass which is another function that we can export from our file so for example here we have an api that we're talking to post we're fetching back some post and then we're iterating over that to tell next js all of the different ids that are available for our application so we return those paths and then we say that we aren't we don't want a fallback meaning that if one of those ids isn't available it will 404. now if you want to learn more about the other fallback methods go check out the data fetching documentation i don't have enough time to get into all of them today but i at least thought i'd mention them the next thing i want to talk about is server side rendering so on every request we're generating new html so on every visit that a user makes your website it's talking to the server there's a blocking request that's fetching that html from your server and you're probably doing this with data so the request comes in you fetch your products or your posts and then that html is generated and sent to your users so let's look at an example for this we're using a function called get server side props now again this is just a function that we export from our file we it runs in the node.js context so we can talk to things on the server and it's not included in our client side bundle so we can fetch some products again return those as props to our react component and it works exactly the same it's just on every request and the last one that i want to talk about is static generation without data and then you fetch on the client side so bear with me now we talked about prerendering in the very simple example where you were just serving up something that was static if we take a look at this example on the right which is the vercell dashboard we're seeing this nice loading skeleton and in this example we're doing the static generation without data where we're prerendering on the server and in this case we're prerendering a loading state the difference here is that on the client side when that javascript loads so at request time then we're making a request to fetch some external data and then we populate the rest of the page with that data so the projects and the deployments and my user information let's take a look at an example for that we have a profile and this is using a handy library that vercell has made called swr that is a react hook library for data fetching so if we focus in here we see that we're rendering a loading state we're prerendering that from the server and then on the client side we can use swr to talk to an api route or an external api which could be a rest api graphql whatever you want and then it returns that data and shows the name on the profile the best part about this is that nexus is a hybrid framework and what that means is that you don't have to choose any of the different data methods that i just talked about you can do static generation on your index page you can do serverside rendering for something like a facebook news feed where the content is very dynamic and needs to be updated on every request and then finally you could do static generation for a bunch of different posts on your blog posts or different products for your ecommerce site without leaving the bounds of your framework so nextgs works great for small projects and it scales up to really large projects always staying within the bounds of that framework and being able to do different types of data fetching and that's all i have today thank you so much enjoy the rest of the conference and feel free to reach out to me on twitter at lerob with three e's if you have any questions thanks all right thumbs up to this talk yes thank you so much lee for this amazing talk everyone please join us in thumbs upping and applauding virtually in the chat um and yeah it's just uh it's just so great to to see all of these options that we have um with next js so if you want to keep learning about that we've got again the chat and lots of ways you can connect with the speakers and i know a lot of other folks um are also interested in this so connect also with other conference goers but for now we have got more exciting uh content for you before we round out our talk session and get right into the topic table so we have another great talk coming up from brian larue who is the cofounder and cto of begin.com which is the fastest and easiest way to set up ci cd get ops for serverless web apps on aws and brian is also the creator and maintainer of openjs architect which is an open source framework for generating and deploying aws standard sam cloud formation and um also has coined the term fast stack so very exciting and bonus um they have a very cool url of arc dot codes so pretty pretty good url game there yeah yeah yeah so today brian is going to be talking about dino uh and i believe that there is some uh some confusion uh in the community about how to pronounce it maybe it's dino maybe we will learn in the talk that's one of the things i'm looking for in this talk is how do you pronounce this but also what is it maybe you haven't heard about dinner it is a brand new javascript runtime from the creator of node with many compelling characteristics he's going to be teaching us about how to put deno into production let's tune into this talk with brian hi everybody my name is brian leroux i'm the cofounder of arcdoc codes which is a tool for deploying serverless applications to aws and begin.com which is a tool for cicd to aws and today i am here to talk to you about putting deno into production you might be asking yourself what the hell is deno it's a good question denno is a next generation javascript runtime from the creators of node.js which is not controversial at all i think it's great in fact that we finally got some competition for node on the back end and bringing javascript to more places so it's less baggage of the past it's always a good thing more competition is always a good thing especially for a javascript program so knowing with a little bit about what detto is you're probably asking well why the hell should i care and that two was a good question and denno is important to you because it's got a lot of qualities that do make it interesting compared to the available options for server side or backend javascript and that's we're going to get into in the talk today so the first thing i'm going to show you is a completely ridiculous benchmark that's going to make everybody angry so this is showing console.log in node and in deno in both cases i'm evaluating the result and i'm putting it through a system timer we can see node's a little bit slower now console.log is not a realistic program this is a very synthetic benchmark and i acknowledge that what we're testing here is the cold start the startup time of a trivial program and so this is testing the cold start of the runtime the application one time on the application so the reason this is important to you things are moving serverless things are moving towards single purpose uh distributed stateless little functions and these stateless little functions uh are started up out of nothing they're cold and if you have a slow cold start you have a slow program won't scale quickly and might even fall apart um nodejs is probably one of the best serverless runtimes today and deno is proving to be about twice as fast on cold start this is trivial stuff and probably won't matter for most applications but a large application those milliseconds could add up and this will keep things compelling and it's going to keep these runtimes on us they're going to keep getting faster which is great for us as javascript programmers the next part is often invoked for fuddy reasons not security and i think this is actually genuinely a really good thing to be thinking about today right now a node can do whatever node can do on your program and your program can do it to your system so when you install a node program um it's kind of got carte watch with deno we have to tell it explicitly what features we're going to give it access to and it splits those features up by disk network and a whole bunch of other stuff in this example at the bottom of the screen you can see i've got a tiny little demo program you'll also notice there's no dependencies which is pretty great all this stuff is built in and we're just going to encode a text file it says hello world and kind of underneath the header here i've got demo run index ts and it falls apart permission denied we did not have the ability to write to disk and so it wouldn't run that program so i had to run it again with the flag allow write or or you can allow all by just doing capital a and wrote our program or wrote our text file run our program and order text file so that's cool uh that is a feature that i think will be increasingly important to folks that are security conscious and it's just a nice thing to have now the big daddy here denno supports typescript out of the box everyone's loving typescript these days and a good reason and the reason this is important to you right now it's not only the first typescript but it includes jsx and dsx files which is dope so we can write our programs with react and they're going to run without a build step which is quite nice the build stuff is that bad but it's great to have this just built in also great to have builtin are web standards this one makes me particularly excited deno is sometimes described as a web browser for your terminal which i really like a lot um first thing you'll notice we've got es modules built in out the gate we've got wasm built in up the gate got fetch built in out the gate and a whole bunch of other browser globals are built in like alert confirm and prompt and this means more of your code's going to be portable without transpiling steps and so that means your code will be both portable and debuggable which is really nice dental comes with a bunch of builtins also that are normally user land concerns so in the node ecosystem the idea is uh that the core is very small and that we abdicate a lot of the normal functionality and tooling to user land to compete over and this has been great for innovation there's been tons of change and tons of competitive products it's been kind of terrible for putting stuff together there's no vertical integration and a lot of this stuff is commodity and you shouldn't be arguing with your team over lender rules or testing or bundling or formatting this is all stuff that should just be handled for you and so deno does handle all this for you it has a builtin linker a builtin tester builtin formatter and builtin bundling it's also got a really comprehensive standard library in fact i'm going to jump out and uh pop up a web browser just go to safari wild man i'm gonna go to dinner.land i do recommend you check out denno.com and uh we'll check out the manual onetime api standard library and thirdparty modules so this is pretty cool so demo comes with like a nice manual that walks you through the various features so check that out it's like a book and because it's it itself uses typescript fairly extensively it's got amazing docs right out of the box you know we know uh what everything requires great documentation about how to use these things and it's almost like a mashup of the go standard library or runtime library and the browser runtime library which is it's neat all this stuff is just built in normally you'd be in npm installing tons of programs just to do simple stuff and in demo this is all just there for you and if it's not in the runtime there's also a standard library which is hosted by them these are frankly quite kind of a greatest hits album of of the mpm registry just anything you can think of that you needed or wanted out of npm is going to be in this standard library version by default and handled by by the demo project which is pretty great so you're not arguing to team over which uid library or which hashing functions or whatever too much in here to go through but one other one worth noting they are building a node.js compatibility layer they still have a ton of work to do on it but if you're looking for an open source project to get some commits into this is this might be a really great one to try out and then for finally just like with npm there is a registry and there are um user land modules but still you know there's 1300 modules so this is a great time to get in at the ground floor there's i don't know how many modules in npm but there's a lot more than a thousand and because so much is built in you might not need all this stuff um but it's it's worth checking out yeah so really comprehensive things are just built in just which is really great um so we're gonna run a little demo program in production and uh and then we'll pop back and see how that way let's go take a look at an application uh that i built for signin with slack and so this is just a common oauth user flow or click the assignment slack button takes us to slack slack's eventually going to load this oauth page it's asking for some information about me i'm going to hit oh wow that's going to send a request back to my local server with a code which deno is going to use to exchange for a oauth token which it gets my slack info and now i'm signed in and if we reload the page i'm still signed in and i can sign back up pretty cool so let's take a look at the code that made all that happen just in my deno ssr application folder and we'll start at the very very sort of top here we've got a package.json and a deno project and the reason i'm doing that is we're using architect to deploy it architect so this is a dependency uh we have a npm script here for starting a local developer sandbox we're letting architect know that we're using the demo runtime and then we want to have three lambda functions and the first lambda function is going to be for logging in it's going to point at this folder back and log in second lambda function is going to be for logging out it's going to point to backend logout and then the last line of the function will just intercept any traffic at all and we'll pump that into the front end as it should be this app has a dot emv file for environment variables for the oauth handlers so we've got a slack client id slack client secret and slack redirect you can get these by going to api.slack.com signing up and creating an application get your keys we'll start the front end of this app and just have a look at that so index.ts is the entry file to our our frontend um lambda handler and it's named handler and everything so this is a typescript file and we're going to respond with headers that we're going to be generating html we're going to give it a http status code of 200. i'm going to do the render and this is a jsx file which is pretty cool so uh here we're pulling in the es builds of react and react dom server and we're using a library for encoding a jwt token and then we pull in our app itself from our components folder so if we look at the actual render function here we're going to get the session we're going to grab the client id and the redirect environment variables if the session looks good we're just going to use that for props and if the session doesn't look good we're gonna get the client id and the redirect and we'll pass that as props to our app and we're just gonna render that app to strain and uh clubs are uncle getting the sessions a little bit hairy we're going to parse out the cookies from the request and when we find the cookie my session we're going to encode the value of that cookie as a jwt token or rather we're going to verify that it's a jwt token we're going to get the value of it so let's go take a look at the app um you'll notice here that we're using deno types to pull in the react type defs i just copied those in make it easier to use tsx or jsx the tsx is actually optional you can just do jsx as you can see so you don't have to do the typescript thing if you don't want to um but i think sometimes you'll want to anyways uh the app gets props and if you know this could have been a boolean is logged in but we're just looking for an avatar if the avatar is there we'll show the protected route and if it's not we'll show the unprotected one and this component is about as silly and easy as you can see like just hardcoded href to log out nothing really very special about the slack button all this is is a an href to the slack api oauth endpoint so that's it um that's the front end uh 30 lines of code so we'll take a look at the back end next you'll notice there's no compile step here either this is just pure pure code so logging out's pretty easy in deno land uh with api gateway being our our web server we just have to pass it a cookie and we're going to expire that cookie this is how you do that in dental land with the standard library we we have a response pass that response to delete cookie function that's a my session key and that'll get us the set cookie header that we need to expire the cookie session okay login is a little more involved and this is where i think typescript starts to shine we can see we opted into typing our request handler here the reason this is important is this is a really nice map to future programmer looking at this page wondering well i wonder what they're doing like what are they using this is a pretty nice hint to say hey i'm probably relying on cookies and i'm probably relying on queer string parameters and here's our the interface that we designed for our account payload we're pulling payload out of the jwt library we used and uh we're extending that just to say that our jwt is gonna have a name email and avatar which i really like see it's doing a little bit of console log debugging but go here and we grab our code if you have an oauth request it always comes with the code which you use to verify and if we don't have one we're just going to go back home and say that we didn't find the code if we did get the code we're going to trade that for an access token this is part of the oauth flow and then we use that access token to call the slack api to get the account data and this is quite nice it's all typed and then we'll take that account data and we'll encode it as a cookie which will set cookie on headers and the response just like you do with any old web standard server and and that should be good we'll be logged in so we take a quick look at get access token and get account these are both making api both making api calls into the slack api and this is where the web standard side of things really starts to shine i mean we're using fetch api directly really clean just give it the slack api url with the right data and we can get back our access token getting the account info is even cleaner just call in the slack api the token that we got and then we're going to encode the response into this payload with name email and avatar to match our account data shape now the payload shape and then our set cookie string is basically the inverse what we were doing before we're going to create a jwt token we're going to create a cookie we're going to use the builtin standard library set cookie and we're just going to return that header to write to the api gateway response so oauth uh zero dependencies maybe 200 lines of code tops with deno which is pretty nice so that is building a little mini oauth app with deno and that's kind of the same old new thing we've got a javascript runtime with a slightly better cold start more interesting runtime security model and a lot of things just built in that you probably already used today we've got typescript out of the box we've got web standards out of the box and we've got a comprehensive cli runtime standard library all built in and out of the box which is great i want to thank you for joining me you can find all the source code on my github uh it's brian leroux arc example deno ssr slack oauth that's a mouthful and if you get a chance please check out begin.com and if you want to deploy this to your own aws check out art doc codes and stars on github thanks ah excellent talk uh about dinner as it turns out that is how brian pronounces it uh and you know if you haven't yet um if you haven't yet seen another runtime it's very possible that you imagine that node.js is going to just take you through your entire career right it's possible to imagine that these things only last or these things will continue to last forever but as we know our tools will continue to evolve and so it's great to see a talk like this because it reminds us there's more to the story than whatever it is that we used last year right so i'm excited to welcome brian to the stage with us uh today we're gonna have a a discussion with brian about this talk welcome to the stage brian thanks for having me whoa i'm big now this is great hi hi nice to meet you both uh that was a lot of fun it's kind of neat seeing yourself come together with a lot of people from afar and uh yeah i'm excited to be here let's get in let's get into it let's talk about this deno thing rodino i think so initially let me let me throw i'll i'll tell everyone what i know and what i know is the maintainers or creators called it denno and then the community started to call it dino because the little icon logo was this little dinosaur guy and uh now the main creator ryan doll the dude who created note also uh has started saying dino i think just to confuse people so you're you're fine to interpret this any way you want uh it's kind of like gif and jiff you know pick the one that annoys you least and uh someone will disagree with you but you know and and it brings up a a good point that you know uh this is brand new um so we're still we're still establishing these norms around uh community even understanding what's going on um you know like do we say node.js or do we say no js that was a topic in the early days so i'm curious you know why should i even care i'm coming to this as a you know even a junior engineer and i'm just now getting my feet wet with note what why do i have to care about another runtime what what's important about this yeah i think the thing for me with deno is that there's a lot of builtins and so the philosophy with node.js was that there would be a very small core that would start very fast and be very portable for writing small networked applications and the ecosystem would fill in the gaps uh npm and that's uh have predictable results we now have a huge ecosystem and we're sort of living in the tyranny of choice there isn't one way to do anything there's a million ways and what's the best way it depends on your you know when the wind's blowing today what's popular right now and um denno uh defeats the law of triviality in that it will take these decisions that you normally have to make with your team and make them for you it builds in formatting it builds in lintina builds in a standard library it builds in a really comprehensive runtime library and uh because all this stuff is built in i think it's got a good chance of having a better developer experience which will result in better uh velocity for the teams that choose to adopt it now it is early days and you mention this when you're saying like i thought you know maybe i could you know ride this out with node for the rest of my career and i actually think that's possibly possible there's enough javascript out there today that um you know if you're a node developer you're gonna you're gonna be able to find a job for a long time to come there's a lot of inertia for that existing code but things do change in this industry and we want more options especially on the back end a lot of other languages have multiple runtime implementations and they're sort of spoiled for choice javascript doesn't really have that we've got browsers we've got desktop with things like electron we've got mobile with things like cordova and capacitor but on the back end you know it's node or i guess if you're feeling masochistic you could use the jvm but that's about it so it's about time we've had some more options and i like that it's taking some really hard line opinions and pushing those forward in a new direction where we have a lot of builtins and i don't think it's an either or for what it's worth there's a lot of zerosum thinking in our industry because it's largely venturebacked and everyone thinks that there's going to be one big outcome and there's going to be a winner take all as it were and there's no historical evidence that that's true there's always been lots of programming languages there's always been lots of ids and there's always been more than one way to do things and the right way is what's right for you and your team so well said yes love that and uh you know it is really exciting to see to see denno coming up and since it's so uh early days as you said we know things are moving really fast with denno and um so i is anything exciting been going on even even in the time since we recorded this talk totally uh yeah and this is you know maybe the the downside of something that's new is that it is moving fast there's a lot to keep up with they've been quite good on uh stability so there hasn't been a lot of breaking changes but they're still susceptible to that especially since it's typescript based which doesn't really have much of a policy around breaking changes other than to deny they happen while they do it but with the case of tenno anyways they just did a big release 1.6 and the sort of banner feature of dental one six is a compile command and we've wanted this for node for a long time the idea is that you can take an arbitrary program compile that into a binary for all operating systems with no dependencies so you can take your your deno app and you can turn it into an app app and uh why that's important to you um one for deployment this just makes life a lot easier you're not waiting to download a bunch of dependencies or setup steps and two for distribution um for things like libraries especially like uh tools anytime you've run npm install dash g you're installing someone's executable node program and that's you know a great distribution channel and has been useful to a lot of people but it's also a blocker if you're a java shop or python shop you might not want node running on your your developer's machines for whatever reason or maybe you've blocked installing globally so this will allow people to create tools and redistribute them as binaries and the binary it creates is very small it's around 20 megabytes so it's startup time is is ridiculous it's like something like 10 to 20 milliseconds startup so for cold starts for things like serverless apps this is going to be really important and i kind of feel that this is a major line in the sand as a capability that node just does not have i think a lot of developer tools are going to be evaluating to to do this in future super exciting yeah and so it's probably going to be a really exciting year yeah that is incredible to have that flexibility to be able to to compile uh down to that by you know it's portable right so it's it's the the dream that we always had uh in the back of our minds with with java but now we can write the the language that we actually love so that's very exciting what do you have planned at begin.com for the for the new year that's a great question um we've been pretty busy in the last year uh i'd say largely focusing on frontend use cases begin has been mostly focused on centering the idea of what does the world look like when we build lambda functions and we really nailed that side but there was still a fair bit of friction getting on board if you were coming from a front end focused context which a lot of people are and serverless sort of first started going i thought this was going to be a revolution from the back end but what i didn't expect is that technologies would democratize backend development and uh allow frontend developers to play uh with these tools and so a large part of our adoption is coming from folks that have hit a wall with get requests and want to move beyond that and do stuff with databases and queues and infrastructure as code so we have a ton of features coming out this year to help people that are building jam stack static asset based websites and move those into a dynamic world but serverlessly awesome awesome so exciting well so um where can folks best follow you and your work um and learn more about all these exciting things to come in the new year yeah my very easy to spell name is brian leroux it's brianleroux and i am that uh on all of the social medias so if you're looking for me on github well you'll find me at brian github i'm always on twitter not trying to stir anything up but often in the middle of it and uh and uh yeah those are good places to get in touch if you're just interested in following along with the sort of begin architect stuff you should follow those twitter accounts um begin and at arc serverless awesome awesome well thank you so much for being here with us today um and yesterday we'll definitely have to follow along yes we're so pleased that you could join us thank you for the amazing talk and for this great chat everyone please join us in thanking brian so cool alrighty so jonathan what a lot of great talks we've had so far today so good so good yeah and all of it is very exciting i i love refactoring and i love portability and i mean it's it's just been a good day and i'm excited to hear more um but i think now is a different uh a different section of the day right yep i think it is time for us to move into our topic table sessions so uh just like the last couple of days this is the time where we break away from the stage talks to allow everybody to get up close and personal with all the speakers workshop instructors sponsors and other subject matter enthusiasts around different topics so how can folks get uh jumped into the topical sessions all right i've got it down now they're gonna go over there right go go go click on sessions on the left side of hop in and it's in the left menu you can browse all the topic tables uh and there's a lot of great topic tables that happened yesterday and today there's going to be even more uh there's so much to talk about and you really these are very flexible conversations and you are the most involved in these topics tables you can ask questions you can even show your face as we mentioned before if the topic table will allow for that uh in in their particular discussion so make sure that you go and check out a topic table that looks good to you definitely so you've got tons of options you could talk about design systems with the flexport engineering team you could talk about dynamic apps with some awesome engineers from netlify engineering management is going to be on the agenda with uh netflix engineer ryan burgess and um we've got also topic tables around nexjs which we heard um about earlier so you can talk with versailles engineer jj casper about that and you can even chat with brian larue who we just had speak about uh serverless and deno and you can get all your questions answered there so tons of options too many to choose from good luck with that and talks are going to start back up in a little over an hour so make sure you keep an eye on the schedule we will back be back here in just a little over an hour so make once again make sure you keep an eye on the clock so you don't miss out on the next talk i've had my heart broken into it but something's different next to you it's like my soul is set on fire feelings is oh the feelings feelings that i know for sure i can't keep on this road alone and all this time i thought i knew i is the feelings that i know feelings is is what have i been waiting for oh i can run but i can't hide the feelings that i know you so so so expect is we're forgetting how to slow down so tell me never gonna let you down breaking up without your baby is this is something different so tell me you give me when you're with me and i realize what it all means oh till the is is till the sky falls down i i was doing just is me i think you're perfect closer than anybody else for me fame so so so so so so so don't so you uh uh uh show me is through the windows like superheroes is like we wear our is is forever don't hold back is come with us is is don't hold back i've had my heart broken into it but something's different next to you it's like my soul is set on fire is oh the feelings feelings take my hand the same for sure i can't keep on this road alone and all this time i thought cause i can run is feelings is is the is what have i been waiting for oh i can run but i can't hide the feelings that i know so so so so so so you know next whenever you cross my mind we're forgetting how to slow down you give i'm never gonna let you i got down baby don't you know your love is without your baby nobody is when you're with what it all means is to believe is till the sky falls down oh for me me so pick me up when you're done i think you're perfect i was else for me see so so so so so so so so so you uh uh i was watching you watch the sun come up in this tshirt show me is through the windows like a superheroes is how is is is foreign don't hold back tonight so come with us forever oh is don't hold back i've had my heart broken into it but something stay different next to you it's like my soul is set on fire is oh the feelings feelings that i know i can't keep on this road alone and all this time i thought is i know hi welcome back everybody hope you had an amazing time at our last topic table session of the conference we've had so many great topic tables over the last few days so many great conversations going on so really hope everybody enjoyed that and now we get to kick off our last talk of the day and of the conference and we could not be more excited to have our final keynote talk be from the one and only cassidy williams if you don't know cassidy better known as cassadoo on twitter and github and all the above she is an amazing instructor and speaker um she's a developer with netlify has also worked for react training codepen amazon venno and lots more really impressive places and she's had the honor of working with various nonprofits as well including seekis and hacker fund as their director of outreach so cassidy is just such an inspiring person in the developer community you may have seen some of her amazing talks at all kinds of super prominent uh events and her amazing and hilarious tick tocks and tweets um she is just such an inspiration in the developer community and she wants to inspire generations of stem students to really be the best that they can be um and also very important to note she loves mechanical keyboards and karaoke woman after my own heart so what are we gonna hear cassidy talk about today jonathan well we have to all uh put our serious face on for cassidy we if you've if you've ever heard of cassidy you know that she's a incredibly serious person uh and we've heard a little bit of about next js today the popular react framework today she's going to give us a super serious discussion about next js so please welcome cassidy williams hello and welcome to the most serious talk of reactathon an incredibly serious discussion about next js i'm your incredibly serious speaker cassidy williams you can find my very serious handle cassadoo on twitter on github or just google it you'll find some very serious results now in this talk i want to talk about serious business because being serious is serious business if you use react chances are you've heard of nexjs the react framework next js is very very serious it has a lot of serious business built in with next.js you can use ssr and ssg that's serverside rendering and static site generation in a single application the routing system is file system based routing and so if you have a file in a certain directory it's an automatic route and this includes dynamic routes as well you can programmatically update the site's head and a bunch of other features per page and there's a lot of builtin components for that as well it has a very powerful api plus there's some really cool developer experience features like code splitting absolute imports and css and js already built in natively in next.js you don't have to install any extra loaders on top of that serious developers use nexjs but also nerds do too and today we're going to be talking about pranking people because yes you can do all kinds of serious scaling cool stuff with next js and that's what most talks are going to be about about next js so why not do something fun for once and that's right we're going to be pranking people with next js so first i want to show you some really basic things on how to set up next js how a certain page works and how a website might look but then beyond that we're going to use some of these features to build a fun little prank website okay so first of all this is our next nutlify starter project if you'd like to look it up you can find it on github at github.com cassadoo nextnetlifestarter it's a very very basic project and if you look at the results you'll see it's just a welcome to my app it's that's it so let's actually look at the code a little bit just so you can kind of get familiar with it so first of all this is a very simple thing where we have a header component and then this description this header component is inside the components directory and it's truly just a function that exports a header component it's really not that thrilling um and then inside the head this head right here is actually a next api and so when you have a next js site anything you put in the head will update in the title of the page and so right now the tab over here says next js starter but if i were to update it saying next js demo and then save that when the page refreshes you see next js demo hey not too not too crazy right all right so if you look in the directories here on the side pages is really the only thing that you need to get up and running with next.js in pages that's where all your routes are so in index.js index.js is the index page the home page of your website in app.js this is a global wrapper and in app.js you don't really do much it's really just something if you want to install something globally throughout your application which for example i want to import styles globally across my application and so i have this globals.css inside of here i just have some basic centering and stuff if you see on the application over here you can see it's really just centered so that's what the global styles are and that's what's imported in the app.js which is automatically wrapping any other page that you might have in this application and then this footer component i have a footer.js which is a pretty simple thing it's an html footer but one thing you might notice is i have styles from a css module css modules are automatically built into next.js so if you want to use them you can just use them you don't have to add any loaders or anything so this is a very very basic site if you'd like to do a little bit more with it you can by for example adding another page and let's just say i want to say fun page.js now in this fun page i'm going to copy all of this from index and put it in here and then i'll just say this is very fun we'll call it fun page like that see how fun that is wild okay now if we go over to our browser and then we go to slash fun page look at that this is very fun that is it that is how you make a page that's how you make a route you don't have to do any extra configuration to just have these pages work now page components in next.js are pretty special because you can do some really neat things with it when the site loads and so both for static and for serverside rendered pages there's some really nice functions that you can use and the one that i probably use the most is one called get static props so you do export async function get static props okay now the return value of this function is passed to the page and so if you were to call a bunch of apis and put the values that you get from the apis the data you get from the apis onto the page and you statically export this website then those api calls happen at builds time not at run time and so you could really save a lot of time when your pages are being loaded on the screen for your users because it's happening at build time that part is really exciting to me so in this get static props you can do a lot of different things i'm going to call a very simple api const and we're going to get a response and excuse me while i copy and paste from the pokemon api okay we've got res and then we're fetching so we're going to fetch from the pokemon api we're going to get charmander i'm going to do const pokemon is equal to a weight and then res.json just like that oh whoa that was some sorry about that okay cool so now that we have these done we have the data that we want what we can do is we can return that to the page so i'm going to return an object the object will have props that are passed into the page and then inside of there i will pass in pokemon just like that and so now inside of home we have props right here and so i can get pokemon from props and then anything inside of pokemon i can pass to my app right here and so for example instead of having next js demo right here i could do something like pokemon dot name so now it'll say charmander and it'll say how about this hi charmander and now i could say for example an image i'll say image src equals and then inside of here pokemon dot sprites dot front underscore default if you'd like to know this api go look at the docs i've used it enough where i happen to know how that works oh and i forgot a little a weight down here and so if i save that and then refresh the page look at that we got high charmander and the title and we got a little charmander in here and so again this fetch call will happen at builds time and won't happen at run time i think that is super cool now i've talked a little bit about routes talked a little bit about this whole get static props things we can also generate static paths and so we can build what different paths might be coming from an api route or something at build time and we can also have dynamic routes now if you want to have a dynamic route what you would do is you would create a new file and you would say anything fish dot js and you'll put it in brackets like this and that means anything that matches the paths that would go to this fish.js is what would actually be returned to the user i'm going to explain this to you with a prank example so this is a prank project that i built i'm very proud of this prank project people have fallen for the prank and that's truly what matters so we have this home component and in this home component it is a very very basic thing i actually used the same starter project that i showed before and i have this header let's prank people and then i have a prank article right here if you'd like to see it live you can check it out in this let's prank people thing right here and be like cassidy did the cassidy did the best talk at reactathon and then if you click on it we get rick rolled and so this is a fun little prank project where it shows the title here it shows the title up here and also i programmatically updated the head so it looks like a real article if you were to share it on social media and so i'm just going to show you that head component really quick inside of this head component you can see we have the title here we have the open graph title i made some graphics for it it it looks like a real article and so if you were to actually paste a link to this on twitter or something you might just prank someone so this is this is something that i had a lot of fun with and now with this i'm going to talk about a few different things first of all the dynamic routes we mentioned this a little bit earlier with these dynamic routes it's a very similar thing as before where we have a function and it's exporting a component and it's in a page component here because it is uh in the pages directory now because it's in the pages directory we have access to certain functions and so the functions that i used were that get static paths which i mentioned a little bit and get static props now in get static props instead of calling an api what i did was i got the params of the url the parameters and in get static pads i actually returned that to get static props so in get static pads this is something where i would say hey i'm calling for example the pokemon api again and i would have some variable paths and then inside of there i would have just all of the pokemon names pokemon pokemon names in here and then that paths variable would go right here and so anytime i would go to my app slash charmander my app slash bulbasaur or whatever it would show data from that but if you have nothing there then it gets a little interesting there's this thing called fallback when you have fallback is false that means any paths that are not defined inside of this array returns a 404 but if you have nothing defined in here and then you put true that tells next hey you can have other routes that aren't defined inside of here and so if you define notepads then you can have some userdefined paths and so if i were to for example have a prank article and if you look at the url up here i have this cassidy did the best talk at reactathon thing that's generated from that form i can use that cassidy did the best talk i reacted on i should have made something shorter and pull it in to the parameters here and get static props then i'll do two title case and so i take out all of the dashes in there add spaces do uh do some title casing in there and then i pass it as props and those those props go to article right here and then this is the page component it's passed to the rest of the page and so the prank head which i showed you before all of the metadata comes from that title and then we have this you have been pranked this is pulling from the current date and then uh we have just the youtube video there um and then we also have the title and we add not at the end because that's the best way to prank people i learned that as a child anyway so we have that you can look at the page and you can see again you have the you have been pranked you have the current date we have this not after getting the title from there and that's about it we're just pulling everything from the url and so this is a really really interesting concept where in next.js typically this triggers something that's called incremental static regeneration now what that means overall is that when you have a static website you have a site that is built entirely it's built once and then you can go to all the pages that were built but if you don't necessarily know what routes a user might be going to you will go to some other routes that don't exist and that haven't been built and typically you can serve or side render those or you can do the incremental static regeneration thing now i'm going to call it isr because that's long with isr what it does is next js builds that page at runtime and then later if a user is to go to that page it will be cached and that page will exist in the future um or you can server side render it either one works but that's kind of how the whole fallback thing works that's that's how all of this works now i've deployed this already and there's one really cool thing that uh we haven't talked a lot about at netlify but i'm really excited about it and it is a next.js builds plugin now if whenever you have a website that you want to upload to netlify you have what's called a netlife.tamel or what you do is you run a builds command you can have your netlife functions in there your redirects all kinds of stuff and we have this brand new thing called netlify and then plugin next js what this does is it allows you to do all of those things that require runtime functions all those things that require serverside rendering with this plugin using netlife functions and so uh what i really like about this is i can kind of write my next apps deploy them wherever i'd like with with this plugin i don't have to worry about making any code changes or anything to make sure everything works seamlessly on nutlify and so i installed this package and that's actually it if you if you look at my package.json it's very simple we just installed next react and react dom we build it when we want to build it and then netlify builds it and then during that build it has the plugin that runs the entire thing and ships it and that is the entire pranking application and i think that it's so fun that this it's kind of a simple application but you can see how it could get more complex this this functionality is so useful because if you are going the static site generation route it's something that often results in very large builds where if you have thousands upon thousands of pages you might have to wait a while for your entire site to build granted your users will get tons of benefits because it's already built and loaded you can just pull it from the cdn and it's done but your builds take a while with something like this with these dynamic routes being able to pull things from the server you can have the best of both worlds where some of your pages will be static pages that are just loaded from the cdn but the ones where you have just a ton of blog posts for example or a ton of product pages a ton of prank pages something like this you can just call a function you can server side render it you can run it at runtime and it'll just work and and you don't have to wait for a build it might take a little bit longer for the users but honestly i've experimented with this a lot there's not that long of a wait it's just a few milliseconds more and so this is something that i i think is really really powerful both for very serious business but also for very fun pranks that being said i want to thank you so much for your time today i've been cassidy i hope that you uh have a good time at the rest of the conference if you have any questions i'm gonna be around in the chat or you could find me on the internet and talk about very serious things but also please just talk to me about fun things that would be so much more fun and i'm happy to answer any uh next questions any nutlife questions and if you'd like to see this project it is on github and then you can also look at this url that i am putting on the page post edit where you can actually mess with the pranking application thanks so much for your time and have a good one excellent talk a very serious talk from cassidy we're so thankful that she is able to maintain her composure with such a serious topic as next js uh so hopefully this has been such a good conference uh jenna and i don't know if uh if you want to talk about some of the talks that we've had for a minute um but i i've really enjoyed it i know it's been an incredible few days i mean actionpacked like i don't know if it's been a few days or a week or like a month of content that we've all just uh had downloaded into our brains right here we have heard about so many amazing things we've heard about uh everything from the uh site generation and static site site generation that we heard about today with next um we've heard about we've heard about um getting started in uh tech and in transferring careers changing uh from different backgrounds we've talked a lot about that we've had a lot of great talks about uh things like typescript and how type safety can help save some headaches uh from the developer life that we all know and uh don't so much love i mean we have just learned so much what else am i uh am i missing here jonathan well i i there's some this is such a big ecosystem now it goes well beyond what it was even just a year ago uh things are kind of exploding in a very good way um and and of course there's so much more to come not just today but in years to come uh we we're very excited about the future of reactathon but also for what we have remaining for the rest of the day um which we can talk about here in just a minute absolutely and yes um we have had so many great folks uh come in and uh work with us in different formats so not just the socks we've also had these amazing workshops these amazing topic table sessions the sponsor booths so hopefully everyone has had lots of amazing opportunities to connect and that this is not the end of anything this is going to be hopefully the beginning of lots of great conversations following out of these amazing um spaces and forums for us all to get to know each other and dig into some of these exciting topics and yes as jonathan mentioned the conference is not over we have wrapped up our stage talks but we have a very special treat to close out the day today we are going to be hearing a live recording of syntax live so uh syntax um is a very exciting podcast syntax fm um that we are going to get to uh be part of all here together and it is hosted by the incredible scott telinski and wes boss so scott telinski is a web developer and creator of leveluptutorials.com which features comprehensive tutorials on everything from react to figma and he is also importantly a father of two and ask him about this one a breakdancer super important super important uh yes uh syntax.fm uh the the other person that you've probably heard of uh on top of scott is wes west boss is the creator of many popular web development courses including javascript 30.com probably a lot of you that was your entry into javascript in the very beginning the full stack advanced react and graphql and his latest course master gatsby these are all things that wes has been creating you've probably learned something from him and if you haven't you probably will today and i know that they have a lot of tasty treats for us loaded up that's a syntax.fm cut there nice so we are super excited to have scott and wes um cohosting their wildly popular podcast syntax fm here live today um and we are you know as as usual on syntax live wes and scott get super interactive with their audience so we are excited to allow the rest of the conference to also but unfortunately here on the stage where you've been watching these great talks all day we have about a 20second delay with the broadcast so it's not the best for audience interaction so uh we are all going to migrate over to the sessions tab tab here somewhere on the left of your screen um to watch syntax live and for everybody tuning in on the youtube channel on free code camp's youtube channel you will be able to see it live but it'll again have a little bit of a delay for that live broadcast but first before you go we want to thank you all for being here and experiencing this very unique version of reactathon with us if you missed any of the talks you'll be able to find all the recordings in about a week on the reactathon youtube channel and from the main virtual stage here at reactathon anjana and myself are signing off yes we uh we have had an amazing time with you all these last few days thank you so much for joining us and for having us as your mcs um it has been an absolute pleasure so once again uh we are just thrilled that everyone could come together here and especially since it was the first edition of reactathon in the cloud reactathon on the webs coming at you through your screen so we hope fingers crossed by this time next year maybe we can all uh be in person uh again and if not then then sometime in the near future we hope to see you all here in san francisco so i've been angina vacheel a developer advocate at observable and thank you so much for having us and with me here and i'm jonathan catrell i am a director of technology at pbs also host of developer t and this has been so wonderful let's enjoy a jampacked hour of syntax with wes boss and scott telinski i almost did the scary voice again welcome to syntax everybody spooky uh thanks so much for everybody for tuning in my name is oh no we have slides for this um welcome scott how you doing you guys get a look behind the scenes of how unprepared we are you didn't even clap you put your hands up you put your hands up and i put my hands up and i was like oh we're gonna clap no clap all right let's do the club ready three two one that was the best cop we've ever done not for me awesome well uh let's let's get into it thanks everybody for coming out this is super fun we've got a lot of interaction today so uh make sure that you're glued to the chat and we also have um some q a and some stuff we got links coming up in just a sec yeah uh so to answer your question from a minute ago i'm doing good wes i'm doing i'm doing very good uh those of you who are listening on the podcast this is uh being uh originally recorded uh at reactathon 2020 so shout out to uh everybody who's listening into a post fact but uh this is this is going down live right now uh how do we want to kick this off wes i think let's let's get into intros and uh and then we'll we'll get into the show yeah well okay so uh for those of you who have never heard of syntax we are a twice a weekly podcast and on mondays we have 30 minute or shorter episodes we like to call hasty treats and on uh wednesdays we've got tasty treats that is our hour long um screenshot and scott you got your cursor in the middle of the slide i man you always drive the slides i don't uh it's true yeah no that's my problem because i could have css cursor none on that when you're in full screen mode with the css there's css for full screen right i could have cursored none it so my bad you should have added print styles as well for instance i actually have done print styles before because i wanted to uh export my slides to a pdf so i could upload them so we do printers for our invoices oh that's i actually have done that as well yeah it's worth it uh my name is scott talinski i'm a developer from denver colorado you can find me at stolinski uh on just about everywhere uh instagram for dance moves and twitter for code moves my name is wes boss i'm a full stack dev from canada i tweet most recently fleet until they shut it down um and instagram at west boston no they're not but it's uh it's not taking off as well as i thought it would so we'll see my fleet all right what do we got next so today is a live podcast what do we got on the gamut next slide please scott next slide it's weird not being able to control the slides um yeah so we're gonna have all i want for christmas and react js or nay s where you have to decide if the library that we're referring to is a real javascript library or uh if it's not if it's fake if we made it up or if it's uh potentially something else as well as a javascript library we've got underrated versus overrated where scott and i talk about hotness you hear about often and we're gonna give our opinion of whether you should spend your time on it or not we're also going to be doing a fun game that we prepared and i'm actually really excited about this one because we have not talked a whole lot about it but we're doing something called syntax error where wes and i are going to uh throw up a code that has a small error in it somewhere and we're going to have to try to find it without uh code styling or anything like that we've got uh javascript hot take tweets that's all i say about that for now javascript take tweets and we also have q and a with scott and wes the q is is me and the a is wes in this one for the q a we've got a link um so uh if you have a question you'd like us to answer um go to pigeonhole.a t forward slash tasty um and that will there's two things on there we're gonna we're gonna play a little polling game in just a sec and then there's also a q a you can you can add your questions in there so um if you've got something already throw it in there um and you can upload the good ones and whatnot yeah so let's get into the content here uh the first thing we're going to be doing is all i want for christmas in react is and these are fun things and if you think some of these things should not be added to react that's cool uh i think these are just sort of some things that maybe we've seen either elsewhere or just things that we think could be better that we really like i would love to see it react so the first one um i think this is be on top of a lot of people's lists would be suspense for data fetching uh you know there's just an endless amount of jokes you could make about being in suspense about suspense but i'm not going to go there once you use suspense for data fetching or at least give it a little try uh it's really nice to use uh and i would love to to see more of this but man yeah i think we're just gonna be waiting for a little while yeah i don't know um i just wish that we knew what the status of what it was um or like i know they're they're trying to spend their time um to see like make sure that they make the right choices and and the best approach and we have all this like possible server streaming stuff that's coming so i'm pretty interested to see what comes of that next one we have here is mountain unmount animations um there's just this is a general theme for me in react is that um i look over at it's that meme where i look over at some of these other frameworks that looks nice like i kind of wish that a lot of the stuff was just built in and you didn't have to use thirdparty library i wish there was just like a firstparty way to do this this type of stuff and i don't even do a lot of animations i don't scot you do lots right yeah i do lots and in specifically the um the mount the unmounting animation bit kills me so many times because like if you're nested deeply and you want to control like the delay like even a point three second delay on unmounting a component it's kind of difficult to like really orchestrate that uh and it's not like it's not doable we have things but if you are several components deep and you want to unmount the parent component orchestrating something nested like that not not super duper easy to do still this next one i'll let you take because i know this is your your baby yeah well okay so i would like to see single file components which like it doesn't necessarily say that i need single file components and really what that is is the idea that you have a file um and the framework can understand a little bit more about the application or that specific component just by the nature of the fact that it's in a file the obvious example of this would be something like a style tag in a spell file a style tag in a spell file automatically scopes the css within that file to that component and the amount of js you could save typing just by having writing a little style tag below your component and having it just work a little sprinkling of uh magical uh rock salt what do do you have any fancy salts we have a volcano which is black really no we have um what's the the flaky salt in diamonds yes diamond what is that stuff courtney just bought it i sick picked it on the podcast before mal don't yell don't um and we you we bought like on amazon you can buy like a bucket of it and last summer i bought a bunch of salt cellars which is like a little wooden thing with the lid on it and um i gave everybody in my family a salt cellar with the the salt in it it was an awesome gift super cheap and uh it's got a nice little stocking stuffer so yeah for you i would take a salt flight uh add a little bit to my uh component files and and have single file components there uh next one we have here is prevent default shortcuts um just like one of these little things like if there was a syntax for handling events that was like star equals i think i don't even know maybe i think another i saw this in another framework a lot of them yeah so what's the smell syntax for that you just uh you can you can just tell it to to ignore the prevent default like directly on the on the component via a directive i forget what the syntax is offhand star like on click or handle change star equals and it like immediately default prevents the default on that that would be kind of cool yeah and i'm really trying to i'm really trying to limit the amount of times i say spelled here on my promise jonathan says this is a smeltadon it's true maybe we just need to um move over what do we got next here um form input state um to mapping yeah i just think like like forms in react like that like everybody uses forms in their react application or almost everybody does and it wouldn't it be great if there was some sort of like builtin thing like i remember back to the angular days i still remember like it just like you just like ng bind and you give it a piece of state and it just sinks in like oh my gosh and like if it's a number it will parse float or parse into it um there's i know there's lots of libraries out there whenever i talk about forms and everyone's like oh have you heard of formic before i'm like yes i heard a format in like it's awesome but like i wish react would be uh default have all that stuff baked in for you when i look at like formic code it's like this is no less complex than just writing all the state updaters myself um and that's not what i'm looking for i'm not looking for complete i mean yes i want complete control but i'm not looking for endless fine tunability i'm looking for do it all for me um and that that can be nice i actually ended up even writing my own form library because i didn't like any of them and and it's still not great and maintaining your own formal library kind of sucks in itself so like yeah i there there has to be a better way than than making controlled state for each individual each individual or reducer or whatever there has to be a better way um now we're going to be kicking off something that we like to call js or nay s and this is going to be a fun little game where we shout out a library title or potential library title and you tell us if it's a javascript library an object of which we're going to define or both uh so we've done this a couple of times on our live shows and it's one of our favorite games so we gotta keep coming back to it so you gotta head to pigeonhole.at forward slash tasty or scan the qr code in the slides here and it will get us up and running let me bounce on over to yeah we got 19 people in there right now 25 west do you see the slides or do you see pigeon hole on your end right now i see pigeon hole yeah so click through to the js or nas you bet 36 42 how many people should we wait for we got two 122 watching on there and got another 164 on youtube so let's let's see how many we wait for you are currently oh and now it's going up going up i think it's i think that's the youtube delay right there skyrocketing let's let's wait till we go to a hundred so what are you sipping on with i'm sipping on uh young rival it's uh strong ipa in canada if a beer is over like 5.2 percent it must legally say strong beer on it which is funny because it's like like like laughs in german you know like yeah yeah i don't know if i ever told you this story but we went to montreal for my brother's bachelor party and we were like we were like oh yeah bad flip party right and so we went to the store to get a bunch of beer and we were all sipping on these beers and i had like maybe like three beers and i was like what is going on i do not even i do not even feel tipsy at all and we look and they're like two percent beers and we were basically just like hydrating ourselves the whole time uh yeah it was a lot like utah it was very funny we were just like oh what so we had this giant case of two percent beers that we had to go through it was it was ridiculous that's hilarious all right 91 let's start it there ready start it i'm ready start quiz all right so is graphene uh carbon atoms organized in a hexagonal lattice or an oh go ahead sorry i forgot how we do this go ahead this is the flow west come on or an opinionated python library for building graphql libraries oh i forgot to delete that in python all right i thought i thought it deleted the np or both or both of them wow wow they're flying in now yeah i can see the answers right now all right we're going to reveal the answer both it is both so i looked it up what graphene was and it's when carbon atoms are organized in a specific way kind of interesting wikipedia read next up we have floodlight is it a super simple syntax highlighter for xhtml documents a large light used to illuminate dark outdoor spaces or both i think we're getting people on this one scott it's fun to see the the answers i get to see the answer streaming in by the way shout out to pigeonhole um they make this awesome like conference software where you can do like live polling like we are doing right now and um it's awesome like we checked out probably five or six different pieces of software and uh i think i want to have the one of their devs on the podcast just because of how super fast and like slick it is yeah all right ready reveal answer oh man holy three point seven percent of you got it correct it's literally both white i think you might have to goof this one oh yeah so obviously it's both so i keep that up but it's only not only 40 percent of you got it right it's not a light to eliminate dark spaces it is it is oh man all right next machine is this an early 2000s skate brand or a view based gui for creating state machines or both hello i'm seeing i'm watching the youtube chat and everyone's like wait a floodlight literally the original description for that one was a literal floodlight and i was like i changed it yeah oh man that is good all right here we go answer boom 51 of you were correct it is an early 2000's escape front although that would be a good name for it it's like totally believable it's so unbelievable a view based gui for creating state machines oh believable yeah all right next next joplin is this a free open source note taking and to do application based on markdown so i got cut off there a city in the northwestern corner of missouri or both they are streaming right in streaming i like all the skaters in the chat are like toy machine yeah one of my favorite skater skates for toy machine all right ready reveal really wait hold on who's your favorite skater uh his daniel uh man his last name's really hard to pronounce daniel daniel live like i always want to say leviathan amazing i'll check them out are you ready i'll share them with you both 50.9 percent of you guessed it is both i didn't even know this i was just looking for um i went on github's like trending repos and i saw joplin and i was like oh i wonder what joplin is and i also figured out like it's a wicked markdown um app well they're like you know we were talking about like how i can't take markdown notes on my phone and like have them sync to just files on my computer yeah um looks like this does that oh something else for that what is that do you remember i'm very curious because i'm my eyes right now my phone is currently dead so oh yeah scott poor scott this is the new weekly segment what piece of technology is broken with scott right now dude i can't even like my iphone stopped working just out of the blue it started looping and i'm uh gotta send it off i have no idea what's going on with my tech no idea all right all right next one no is this a javascript library that connects to no code tools like uh what was this one um bubble the i o i didn't realize that or is it a smart 12 volt car battery changer charger or both doo doo doo doo doo doo doo doo all right ready oh this one was very split uh this is a carvel that and in fact i was uh my battery just died because i haven't driven my car in like nine months and i didn't drip feed it uh so i was like looking at battery stuff on amazon and that's where i found the noco uh that's how we uh come up with these questions here so you gotta say 37.8 percent voted the correct answer we gotta say it for our audio only listeners audio only yep next one we have here is inner is it an internet of things smart light bulb or a css in js library for selecting parent selectors and unfortunately this one cannot be both this is a good one i kind of like not having both but both like at least you can throw people yeah both is definitely the wild card in my mind because it adds that little bit of like well could it be yeah all right oh it was the internet of things smart light bulb which is funny about this is because i actually sick pick the inner bulbs on an upcoming episode and i was like wait when is that episode airing did i uh did i ruin my uh my uh js or nas oh yeah you're sick next one is cap coma strand is it a thermoplastic carbon fiber composite rod used in modern building or a reduxlike state management library for svelt or both wow i'm about to get them votes let's just say i'm surprised that's this one i think i think it's safe to say that you're surprised about all of them so far i thought this one would have got people it's not getting people people know what this is do you know what this is people got got or people did not get got they did not get got on this one not all do i know what this is i'm gonna guess it's a thermoplastic carbon fiber composite rod used in modern buildings but i'm not quite sure all right reveal yes almost 77 of you guessed correctly that's an odd thing to know that it is a thermoplastic carbon fiber composite rod i think most people could look at this and say there's no way that's an actual thing and that it's most likely a thermoplastic carbon fiber composite rod oh man all right next one sputnik five sputnik v uh is this a code name for an upcoming wordpress release with the build the builtin headlights in headless getting that cut off yeah they're getting cut off i think that's a i thought i had them all in there maybe it's a limitation of this thing or is it a nonreplicating viral vector covet 19 vaccine it's funny because we should be we should be voting on the ones that the other person wrote because yeah okay so you tell me what you think it is i think that this is the wordpress thing okay i think people are googling it because it was very much skewed in the early days to the wrong one and now it's it's going up all right ready it is 45 percent of you guessed correctly it's a nonreplicating viral vector covid19 vaccine but 44 of you thought it was a a code name for upcoming wordpress release um it's not though because wordpress only uses jazz musicians for their uh code names well who doesn't know that okay oh that's good people in the chat are saying how many they got right one out of eight all right the highest score was me i bet that person the highest score person probably picked both for floodlight and was like yeah yeah you know what so there was there's two people that got all of them cracked because obviously i goofed up the headlight one but that was fun that was fun awesome all right thanks for tuning in let's jump back to the slides now yeah sorry it's for some reason when i go out of or when i go into full screen i have to go like back i have to go out of full screen all right so uh next thing we're going to be doing is talking overrated and underrated and this is sort of like a a segment where we're just kind of gauging each other's interests or ideas on some of these new tech things so let's kick it off with the very first one is dino overrated or underrated i'm gonna say right now it's probably underrated it's very nice to work in um i think the permissions model of it all is very uh very forwardthinking i think the entire import via url is not as painful as i expected it to be overall the typescript experience with it not having to run a bundler not have to do any of that was just very nice it's very nice to use and i like that all of their tooling is sort of um well what's the reason what's the reasonable way to say this not all over the place it's not a total mess so uh i like it yeah i i think it's i'm gonna say underrated as well um not to say that you're going to build your next app on it because that would that would probably be not a good idea because it's very much in the early days yeah um but there's there's like a lot of and you probably have heard this on the podcast we've been talking a lot about shifting um tooling right now we've been talking a lot about esm becoming the thing now that it's in node uh we've been talking about modules and urls we're talking about typescript um and dino seems to just nail all of those things um and that's really cool um will it replace node i don't i don't think so maybe it would you would see it coming for like in like five years like it's not like we're gonna wake up tomorrow and be like oh my gosh i'm i have no skills left and like that's the other thing about it is that if you know javascript and you're in node like you switch over to dino no problem um but it's it's kind of cool and i'm very curious to see how node will react to this but also it's it's harder for node to just do this stuff because they have to maintain compatibility with the rest of the node that's why esm in node was so hard to get right because they couldn't break 10 years worth of work that they've done whereas dino could just be like all right brand new thing here we go uh next one is on the uh sort of somewhat related is esm import from url and i think this one is very very um very good in fact it only took me a little bit to this is underrated i would say i think importing anything from url is really pretty underrated overall because it is to me one of the the fastest ways to try out a file i know that when we were trying out stuff with ts in um dino it was like so nice to be able oh let's just import this file from a url yeah just in general importing from a url and being able to access the file as an import like that very very good yeah i think so too as well like first you can do that in literally you can do it in javascript in the browser um which is super cool that you can just like you you can write an app have a html file script tag type of module and then just start importing stuff from different urls that are out there and i think that's pretty cool i don't know how i feel about um upgrading like what happens when you upgrade like a bump of version release i'm sure there will be tools around that um because like you you literally import it from like whatever cdn.com forward slash v2 v2.2.0 and then what happens when two point zero point one comes out do you like find and replace um do you have to copy paste that in dna and there's orandino there's a uh uh like a like a standard of doing like a depths folder depth.ts where you do your imports and that sort of almost becomes a package.json if you think about it okay but it's just with import statements uh so that's definitely a thing there are there are detractors from that but uh it seems like that's what we taught in our dino course so like it seems to be pretty much of a like a standard in that world so who knows maybe that becomes a thing so you have like a depth.js file where you import everything you need for the project yes and then you and then is it global or it's almost like a package.json because you're setting the version when you're importing it and then you're yeah you want to up the version you're only modifying it in one spot oh that makes so much sense yeah because you can even inside but yeah you can use the export from syntax for that or you say like export react from http whatever and what that does is it imports it and exports it in the same go oh that makes so much i don't i didn't think of it that's awesome yeah it's nice uh next one is remix dot run wes do you want to take this one first yeah um this is the new uh react framework for building apps and websites from ryan florence michael jackson uh two of the devs or the devs behind react router awesome react uh thought leaders in the space uh and they are sort of like taking a look at the landscape and and rethinking it and um it's it's closed right now and i think it will be you have to pay for it um but from what i've seen it seems really interested so i'm going to go underrated on this one and not that we're going to everybody's going to be using it but i think that they are rethinking a lot of things especially with um i've what i've heard is that streaming from the server and this pain that we have which is server side and clientside rehydration and whatnot um i'm very curious to see and i bet if they like nail something like i bet other frameworks will adopt that as well yeah we're we're pretty much all going when we're agreeing on everything i think i think it's underrated uh i also think that like that like you said specifically about the streaming from server side uh yeah and that stuff sounds so good to me uh i i maintain our own server side rendered react application and it's not a lot of fun um it's just not it's not super easy but it also feels like it also feels like it's doing more work than it needs to and i think the remix folks are really figuring a lot of those aspects out um next one's gonna be xstate which believe it or not uh i'm gonna say it's underrated yeah that actually might have been a problem in our approach to this but uh xstate hey uh i don't know if you've used state machines at all west but when we were writing the video player for or the video uploading system so we upload our videos to all of those who have not uh heard we use a service called mux to do our video so we upload our videos to bucks and building that a video uploader was like the thing that made me see the light for state machines specifically because there were so many states that this uploader could possibly be in and so for me it was uh pretty eyeopening to control those states in the uh state machines world for the first time and just say like all right i really feel like this uploader is really solid compared to some of my other code which was mostly boolean flags said by state variables and things like that i've not used it so i'm gonna go medium rated but uh it's one of those things that you just can't hear people stop talking about it and we had david on the podcast six months ago and he talked about it and it it just made a lot of sense like i certainly had the problems that it solves yeah um i think we should skip a couple because we're uh we're running a little low on time so let's you want to move to the um lighthouse scores or no code rated no no code it's overrated i don't want to lose my job no code overrated yes render props overrated render props overrated underrated thunder lighthouse overrated rated they're fine okay uh now we're going to get into a really fun one that we're calling syntax error and this one is so much fun that wes and i have really not consulted on this beforehand uh so this could be a total mess so syntax error is we are going to be showing each other code with no syntax highlighting and the other person must find out what's going wrong with it uh and we initially had some idea of like point point giving points based on a time timer but let's just see how fast we can do it let's and uh for those of you who are watching along i have no pl please go ahead and try to solve these on your yourself as well but i have no clue how dastardly wes has chosen to be and i'm really see i was i was like do i want to do i want to work in what do i wanna do here okay give me the code scott first one yeah let's do it first one is for wes how do you find the bug in this code and no you do not have to know the libraries involved animated from frame promotion portal modal from utilities okay const there's there's a no error no no no no no that's not it no i see the arrow don't look at the chat because somebody spoiled it in the chat no i'm not looking at the chat uh is accent max width equals you got back ticks on that sucker that's fine um yeah that's fine okay uh return portal animate presence portal this is one that you will this this is a common bug close close action is being run on mount not on the closed event you are right yes all right ten points for me next one scott for you for me okay kant's okay i gotta not look at the chat okay we got an array with an object name string properties okay that all looks fine to me i see that you are using uh semicolons here so that's a no i'm just kidding um so your destructuring name oh man this one is dastardly okay this one is this is not hold on we should say this is not something you should do but it is valid javascript except for the part that's the syntax error i can you use a property uh parts 0 before you yeah you can just declare you can destructure a value and then create a renaming no no we're creating new variables based on the previously destructured values i didn't know you could do that okay i know nobody knows that that's you know what it's handy for is if you have want to get the uh last item in the first item of an array you can say like uh you can destructure the length from an array and then i think i know what the error is by the way is it that you're giving me is that you're just returning first and last in the object and not returning the object itself yes that is it it's there is missing parentheses around the curly brackets right now there now that all right this one oh my gosh oh my gosh god this is a comp series form playlist oh man even typed it oh yeah this is sorry this is typescript i tried to remove any of the typescript stuff that's fine you state if there's a playlist author id i would consider this one desperately but um is it it's a syntax error right like not like a it's um it this code will not work it will it will run but it won't work i'm gonna have to go to the chat for this one this one uh the props could be defined somewhere else no sorry problem this is the type script though i i should oh you state is not imported no i'm sorry that's not it no that's right come on come on all right tell me what it is the actual i mean i'm sorry the actual error here is that a select list does not have an options oh i was gonna say that i don't want to look like an idiot like i didn't know it yeah so select list does not have an options property uh the everything else was sort of just that noise yeah everything else is nice okay next one here for me okay function function okay you spelled that correctly uh three url i always look for that i feel like you're going to do something like that okay const i would never do something like that i'm going to pull the graph at you and say use ref is not defined okay um okay right that your podcast component isn't outside of something you're just so the first is the function definition and then below it is using it using it mp3 url is equal to here's a string okay audio this is closed audio ref use ref uh controls hell yeah target set volume e set valley parts the volume is equal to volume range oh this one is difficult for me to find um use state good one set box isn't it is it funny how dependent we are on like people used to be like oh just use notepad for coding but how dependent we are on for silly little mistakes i use my uh yeah my my styling a whole bunch you want to know it i yeah now that the audio source says mp3 uri that killed it see that to me is dastardly i don't think that that to me is destroyed yeah i tried to use like a lot of like uh distractions because kind of ref done right and things like that yeah okay all right here's a uh here's a good one for you s so buckle up all right import wrap from react import link from rack router dom postcard post style link you have a nested component called card if link return link to where is the bug at least i didn't taunt you in this one what kind of bug is that um it's a react bug uh you can't uh maybe you can you're passing the prop with like a object and a string in it what are you talking about or no not objects are the curly brackets with the string in you can do that though right usually when i do it that way it's back text but i don't see why a single quotes like the color on the author card uh the color on the author card no that's fine that's just that's that's uh that's a misdirection is what that is that's what we call that i see i see what you're doing there okay um it's just to say hey uh you probably don't write like this very often the style's missing double curly brackets yeah you're not passing an object to style on the the link you're right so in for those of you who are watching and paying attention on the link component here we used a style property and then just passed in some a property and a value but there was no containing that's a good one yeah yep yep so they're all fairly oh i got one more ooh okay yeah sorry i wasn't in the mindset i got a oh this is this is just one liner um i mean i know what the bug is uh there's a bug here the the yeah the the date get full year is like a space between it is that correct that is wrong that is valid javascript did you know that it's like that yeah it works try it new date space docket full year isn't that weird i don't want to try that and i have no idea why that would work in that uh really because see that's yeah i don't know why actually that is dastardly okay what a year um so you have the opening and closing curlies oh you got an extra curly two curly yep nailed it that's good in that isn't that a good um distraction though with the space it's perfect distraction because nobody's ever seen that nobody ever sees that yeah this is pretty good all right we'll move into some hot cake tweets i asked on twitter for some hot take tweets what are your javascript hot take tweets um and everybody gave me their opinions which is hilarious because my like twitter's been ruined for like three days now uh with people sending me because not because like people do it but people reply with their hot take and then there's like a every single tweet has like a 40 thread argument behind it so the first one is uh from l'oreal tech spread syntax isn't super readable and you probably should use something else if you can have it yes i just shared an advent of code solution using it so sue me so i really like this one because um this has i do it myself but it's not super readable um how take tweet what do you what's your take on the scott i think it's wrong i don't know this is gonna bug me because i'm the the type of person who does want to go on to twitter and be like no that's wrong like it doesn't matter uh in fact but i i agree with laurie that like when i when i don't want to say i don't want to try to claim that she just started using them because i doubt she has but like um when i first started using them personally i i felt like this is not readable but like now that i'm i i've been to the edge and back and i've been using them for so long and i understand yeah like i i see through it for some reason i've i've been able to see through the lines of the matrix and now i just like it a lot but once you know what spread is then like you obviously have to know what it is but uh but once you know it's the best it's the yeah it can definitely be a little much uh next one is from chris hellman you missed one ah no keep going we're running out of time go to go to the okay next one is from chris gilman console.log is lazy and slows you down as a terrible debugging experience uh chris can be right about all of this and i will still use console.log until i enter the grave so uh yeah no debugger is great debugger is fantastic but sometimes it crashes my browser and sometimes it's slower than using deep or just a simple console log and seen actually like i we did a show on syntax about like advanced debugging techniques with like people ask me what else do you use break points um break on you can you can listen for dom changes um all of that stuff uh you can view network requests and all that um those are great and i use those when i'm when i'm in trouble but nothing wrong with the console log i love a good console log optional chaining makes code so much more readable and makes it harder to debug when it comes to optional props or fields i love optional chaining it's my baby and i will defend it i've not run into a really odd bug because that's the thing is like it could be undefined anywhere along your chain and you wouldn't necessarily know where it was undefined unless you took them out um but you could also just pop a break point in there or log the thing one step above see what is coming in what's funny is that i uh once i moved to typescript it made me realize just how unsafe some of my code was and like sometimes the solution is if you're in a conditional just dropping a question mark in there to do the optional chaining and it's like all right now this is uh safe i'm it's gonna work i don't have to worry about it ever again uh this next one is from dan dan says javascript really isn't that bad as long as you avoid double equals and four dot dot in uh yeah dan is dead on javascript is really not that bad and it's gotten better all the time a lot of the people i think who criticize it or even criticize the the changes on them are maybe people who came from other languages they're using javascript and it all feels like hectic and chaotic at this point uh and it is kind of chaotic but once you get in it you got it and uh you know i really i really enjoy working in javascript now typescript for the most part big fan um double equals i don't use it so one of the other hot ticks was double equals is fine yeah uh and the other uh for in yeah use four of instead i was added to the language a couple years ago and it's awesome yeah it's worth it next one is the npm ecosystem has turned javascript development into a game of legos rather than real programming and to that i say i'm a lego master i wouldn't be able to build some of the stuff i build without some of the packages from some much smarter people that's the beauty of javascript is that you can reach for these much harder things uh like oauth implementations and be crypt um when you don't necessarily have to do it i wouldn't know how to build that myself you know as real programmers they mold their own legos out of their plastic that they have forged from the oils of the earth yeah i i don't know about this one yeah i mean that's all for unless you're unless you're writing like a binary everything you're doing is the exact same as what you're saying npm is um okay react is the worst choice for beginners doubly so in its current state yeah i kind of agree it's it's it's it's not the worst choice for beginners because uh it's so widely used that's why it's a good choice for beginners it's so widely used you can get a job it's good on your resume right but if you are just trying to understand dumb events and whatever man uh keep it vanilla and if and if you uh want to move into a framework i don't know keep into something way easier than that yeah that's so for beginners listening let's not say you shouldn't learn react i literally have a course called react for beginners um but there are there's a handful of things you need to know about react you couldn't be able to just jump in but i think that's the same for a lot of stuff so i think i agree on this but you could still learn it it's it's still not not super hard and complicated there's just more you got to have like a list of like five gotchas you know it's also part of like saying like pancakes are the worst food for breakfast they're still pancakes man like they're pretty dope yeah next one aaron bushnell says if you work at an agency really try to avoid using um using things until it's absolutely necessary and even then only what you need when you manage hundreds of sites it quickly can become a tremendous source of technical debt i agree as somebody who still has a coffeescript site in uh production and what six or seven i've been working this year to convert all my gulp sites over the world are you saying it's i'm not writing it anymore but like it's it's still running and it still runs good um but uh yeah you definitely that's the beauty i loved doing agency work and freelance work because you could choose whatever you wanted but you can definitely fall into a hole um if you start using you just bring on a whole bunch of stuff it's the same thing with wordpress plugins too if you go bonkers on wordpress plugins you're going to have a bad time because half those things are going to be out of date or not maintained or break they're going to wait for you to bigquery yeah uh what do we got next do we want to get into q a because yeah yeah let's move into q and a we're running out of time here yeah because we've been going forever 100 more of these yeah some good ones some good ones go visit that tweet and listen to all the popular and popular pages so um if you've got a question for us um go to pigeonhole.at forward slash tasty um and ask a question or you can you can drop it in the chat as well um or wherever you you would like to to do that let me open up my admin board here all right i've got one here first question is from anonymous if you've recently started doing web dev work which career path would you choose startup fang fang is facebook amazon uh what's the other apple uh netflix and google yeah right you need to actually start making up like a fake fang with like different companies in here yeah it's bored uh yeah that would be hilarious uh yeah so would you choose startup fang or slash big tech companies or freelance or contractor if i started today um it depends um i for me i look at some startups and i don't envy the work life balance and the grind and and how quickly things move um but i also know people who get into startups and they're they're young and they've got nothing but time and and whatnot um certainly easier and i also not not to say that startups are only for young people because there's there's lots of people that are running um great startups they just work nine to five and they're done right but i think on the flip side there's also a very heavy culture in that fang um i really like studio work a lot yeah like that that's an option to working in a design dev studio because you get a lot of experience with many different projects and especially earlier on in your career um it can give you a lot of exposure to different projects in working with clients many times you're you're in client meetings yourself rather than you know being some project manager so you can get some managerial skills you can get some uh you know some project skills that shift very rapidly um i also i'm gonna say if you can get the fang job go for it um just don't allow your lifestyle to inflate what they're paying you um because it's very scary to be making two hundred thousand dollars um at facebook and before you know it like someone's gotta pay for that tesla and if you get sick of if you get sick of working at a fang and you want to go do your own thing like i get dms like this all the time people like oh wes i want to i want to make courses like you do i want to be able to just dick around on the internet like you do um and uh so like that would look so good on your resume like i work for google and now i'm doing my own thing x googler makes a new um product or whatever i think that would be kind of cool so if you can get it go for it um otherwise i'm a big fan of like scottish studio i went contract freelance my own and it worked out for me i really enjoyed it yeah yeah i agree uh uh eric real quick before we do the next one ask in the chat about uh breakdancing being added to the paris olympics i have been following the breaking in the olympics thing for maybe like 15 years now maybe longer than that they've been the the group that's behind it a lot of people have been trying to get it in since the literal 80s so um i'm very excited the the junior olympics for went really well you know a lot of the the people in the scene are concerned about it becoming exploited by the masses or whatever but to be honest the junior olympics went so well and they didn't really change it too much so i'm pumped uh this uh anon says typescript all the things and yeah i'm pretty much in i'm pretty much in uh i i really like it and i don't see myself writing anything else even like today i popped open a quick utility and i um would typically if i'm firing up a quick code utility i'm going to hit up just some some you know off the cuff js kind of like real quick stuff and i did it in typescript and it didn't i wasn't any more encumbered than i was in javascript like i felt i felt like i could flow with it and um and that to me was like a big thing because i always see typescript as this big barrier to entry you've got to set up your tooling and whatever but as long as you're using the right kind of systems that make it easy to get going and typescript all the things yeah i we were talking about this we had a topic table on typescript yesterday and i joined in and we were talking about like is it a barrier to entry anymore and i don't think so because like um pretty much every major or even minor package out there i have a one line uh line code called weight and somebody submitted types where they all have types already um you you can infer types for like like i just built right before this podcast i was like man i want to see my webcam but the like apple photo booth they crop it to like like this um so i was like i built like a it's called check my hair and it's just it just shows your webcam really quickly and i i'm like all right build this and type script and like the the number of line it was like maybe 40 lines of code and there was two or three spots where i had to literally type something and everything else was inferred and you got all the benefits from the the code completions and all that so um like i don't think everything no you can still write really good javascript but um i think the barrier to typescript has become very low in the last year or so that's specifically why i'm into it now because you can get up and running even for silly projects super quickly word uh next one you wanna grab it what do you do to keep up to date with the latest and greatest changes in tech front end libraries new languages etc um hey here's actually um do you have the github app on your phone wes um no i don't get it do i the github official app uh let me see pop it open here this is uh it's so good for finding new packages there's an explore tab on it and it gives you a bunch of potential libraries that you might be interested in yeah explore there we go and i use this like crazy for finding stuff i don't know how or why but um this to me like has really changed how i find projects because it shows you trending stuff and whatever but it's very good and i use it all the time to find new things i also uh look at awesome awesome repos you'll find things that like awesome script and then you just go down the line of list and look for cool stuff um just look for for neat little things so that's what i do personally next question we have here is what do you do to keep up to date with the latest and i read that i've read that sorry that i read and answered oh yeah obviously answered that um for me it's we can't ask this question all the time it's um follow you follow people on twitter who who follow this stuff um like scott and i listen to syntax um and like what do scott and i actually do um i read i read release notes of every single browser um i will anytime there's like a working group that changes a proposal um there is a good twitter account called intent to ship which is really good which means that like that at that point it's going to be in the browser in a couple weeks so um just like kind of watch those and you don't have to it's not like you're going to miss something if you listen to the podcast and follow a handful of good people on twitter you're going to hear about subgrid 14 times and the 15th time that you hear it that's when you should probably pay attention because okay now now it's the thing i need to implement in my uh in my app speaking of cool new things uh i saw adam oh no uh not adam um oona tweeted this out houdini.how today oh yeah houdini.how very cool stuff for css houdini um so i posted in the chat so let me go and check that out all right uh wow big wallet questions here yeah they came in we got how much time left no time let's let's just keep going until they kick us off um what what other good questions we got here can you share some exclusive barbecue tips fish sauce did you did your mom try the fish sauce she did yeah she made it right my mom was like i'm making the recipe and i'm like what recipe and she's like the one from the podcast that wes was talking about so it's very fun uh yeah she made it no she loved it and um we do something very similar to that all the time we use fish sauce pretty pretty heavyhandedly over here fish sauce is a sick pick i would say all right um i'm just looking through it what do you expect of blitz js in the in the coming years uh we'll see um uh i don't know it's gonna have a tough time because i think as somebody who's used like full stack frameworks uh they it takes a lot for them to like really take off and blitz js is on top of next.js so at least has that going for it where it's like alright this is like nextgs with prism and or prisma and all this other stuff right and that's cool to me but like i feel like it will have a hard time getting getting people to really latch on to it and building a community but i think it's cool and i think it's worth doing i like this one what's the first node module you install in a brand new react project besides react itself rudder for me it's usually next js if it's multipage or parcel if it is just a single little oneoff app and because parcel will bundle it all for you which is kind of cool i like that that was a good question thoughts on using languages other than js or ts with react like kotlin for example i think it's neat um i've kind of looked into some of this myself lately but uh thoughts about using it i'm not good at any other language if we're being entirely honest so um yeah js and ts for me all the way right now but yeah you know i'm learning i'm learning rust but i'm not going to be super effective with it you know yeah i don't i don't have all the time in the world to learn other languages although they probably expand my horizons but there's literally nothing wrong with just spending all of your time in javascript all right let's last one right here is do you have any approach for optimizing highres images that are stored in your back end like s3 for a gatsby website we're talking about this on twitter today um and uh there's a lot of services that will slurp up your image transform it on demand and return it cloudnary imagex sanity does it um whatnot those are like yeah i think making your own is is what i need to do because i always i love that approach on demand rather than doing the gatsby build especially if it's uh if it's a remote image next js image component does it with remote images which is a killer feature but not gatsby's and uh but like i'm always like hesitant to be like yeah just pay this monthly cost for this service and then the service will do it because i do that but then also like it sucks to have to tell someone just pay for it yeah right right yeah wouldn't it be cool to like run it on like a serverless function or something like that that'd be neat it'd be cool if there was like a spin up option where somebody had created like a preconfigured one where you could just like spin up your own platinary okay yeah you know i think there i think that does exist um it's just that like cloudinary has four million features and then you sometimes you use them like the they even have like cpi like if you wanted to sepia tone your photos like it's a digital camera from 2001 you could make it like into a photo booth at a western show at disneyland that's a great idea oh all right i think we should end it off there um thank you everybody so much for tuning in that was really fun we always like doing these live ones it's a bummer we couldn't do it in person um but hopefully next year we get get the big shot in the arm and we'll be able to to see you all in person what about uh sick picks do we want to do some sick kicks before we bounce off sick pics quick picks we pick things that are sick i i was just telling less i'm overflow with with sick pics over here so uh well west goes and uh hunts for his i'm gonna pull up mine here sick picks my sick pic the thing that i think is sick and this is going to be a very special one this is the coolest little extension i've ever done used and it's called color conversion color this is a vs code extension and so i i'll post it real quick here um find the actual links page so i've been um personally dealing with a lot of like moving colors to hsl hsla doing a lot of variable work there and i found this really neat extension for vs code that allows me to uh convert colors from it hex to hsla and it um is so dang fast because you just basically highlight your your color string your hex value you say go turns it to hsla again i'll post it in the chat here i'm like trying to google it while i'm uh talking about it but it's really nice to not have to leave your editor or whatever just toggle through different types of color conversions and this thing's been saving me some serious time i'm going to stick pick a lock picking kit um so i we have this like vintage gumball machine in our house and we bought it years ago and we every now and then we put some candy in it for the kids and they get a penny and they turn it and they get like a couple of um smarties that come out and uh it's getting full of money and we don't have the key we have the key to put the candy in but we don't have the key to get the money out and it's getting full so i i i told kaitlyn i was like oh i'll i'll learn to pick locks um so i bought this is uh it's an acrylic lock so it's seethrough and you can see all of the pins in the lock so you can see what you're doing and then you can it comes with a whole bunch of different picks i'm trying to pick i did it i did it on camera um so it's a super cheap lock that's why it's so easy to pick the real real locks are a lot harder than that but um it's cool because you can see what it's doing um and how locks actually work um and that just is so helpful to understand like when you are picking a real lock what are you trying to do right now you're not just jamming this pick in there and it came lining up the chamber came with a whole bunch of a whole bunch of different types of picks and i i watched lock picking lawyer on youtube so uh yeah so much lock picking trying to lock pick one of our doors and the door was locked it was and it was like a super fancy slang lock or whatever schlog yeah not a slang slog i was a slang in my slang and i could not get the thing open obviously and then i had a lockpicker come over and need to use like a whole like big rig machine to get it open so i didn't feel too bad about myself after that awesome um shameless plugs westboss.com forward slash courses is the list of all of my courses you can use syntax for 10 bucks off and also mostly plug levelup tutorials.com sign up to become a pro and you'll get access to 12 new tutorial series for the entire year as well as the entire back catalog of thousands of video tutorials so check it out leveluptutorials.com all right thanks so much to react on for having us thanks everybody in the chat that was super fun make sure you subscribe to our podcast syntax.fm um and in whatever podcast player you are using and leave us a review positive review and say nice things about us too that'd be cool peace uh oh you is so me me so me so you