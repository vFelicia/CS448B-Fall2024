hey guys and welcome to react beach resort project where we'll display hotel rooms and set up functionality so the user can filter them as well during this project we'll use react router for our routing react context api for our state management content full headless cms for our data management and netlify to host our application so what in the world we will build well first and foremost i do want to let you know that project will be responsive and since i don't want to jump back and forth for every section that i'm showing you i might as well tell you that right away and for the navbar on a smaller screen size we're going to have a toggle button so this is how the nav bar will be displayed in smaller screen size but then once we go to the bigger one we will gonna have our traditional navbar right after the navbar on the home page there will going to be a hero component that we're gonna have a background image and in the middle of the hero component we're going to have a banner that has a link to route to our rooms page since we're not done with the homepage we will then head over back and then we're going to have services where we're going to use react icons to display the services that the hotel provides after that we're going to have future rooms so imagine you're going to have data for all the rooms in the hotel but some rooms hotel would want a display as featured so these were going to be a featured rooms now in both pages whether that will going to be featured rooms or all rooms together we will going to use the room component to display that one specific room and as you notice in the room component there will be price for the room as well as the name for the room and as i'm hovering over the card we're gonna have an option of clicking and then we're gonna navigate to a single room page where we're gonna have information just about that specific room page whether that will be let's say our family deluxe room or it will be single deluxe again i'm heading over there this will be a unique picture about that specific room as well as rest of the information that would tell us more about this specific room since we are using the react router i also want to let you know that if let's say we're going to be trying to navigate to a page that doesn't exist we are going to create a custom 404 page where it says okay so page not found and obviously we have either option of clicking return home or we can navigate through a navbar now once we're done with the homepage notice these are the sections we're creating now let's head over here to a rooms page where we're going to have all the rooms that currently hotel provides as well as since we have multiple rooms the user will also going to have an option of filtering them out so let's say i'm not interested in all the rooms i would just be interested in the family rooms this displays me all the family rooms that hotel provides and like i already previously said we still have an access to a single room page where we're navigating to that specific room then once we look at the family rooms this is what we're interested we also have an option of filtering even more let's say judging by the price and if i'm going to go below the price that i'm looking for notice it says unfortunately no rooms match your search parameters now what does that mean if we're gonna have no rooms to display that would match the search parameter this is gonna be our error message we can filter our rooms even more let's say i could look for family rooms that only providing the breakfast as well as the pets are allowed now in this case this particular room allows pets as well as provides free breakfast however i can check maybe for the rooms that only allow pets all right now this is just going to give me the rooms allow pets but if i would want breakfast then obviously i'm going to be heading over back to that one room within the family room tab then i can also say you know what i would be interested in let's say staying four people so let's see which rooms allow to have four people and then this one obviously doesn't allow four people that's the reason why it's not showing you now hopefully this gives you an idea what we're going to be building and why don't we talk about where we're going to store our data now first and foremost initially we were going to have all local data that i'm going to provide so even if you don't want to work with contentful or netfly which by the way we're going to use both of them free tier so you'll not have to pay anything but let's in say that you just don't want to work with content folder or netlify you'll be able to finish your whole project just with the local data that i'm going to provide in the setup files now later on once we're done with the project we were going to take a look at how we can set up the contentful which is a headless cms or also something called boyf which means bring your own front end and what's really cool about contentful that regardless of the application that you're building whether that would be with vanilla js whether with the gatsby project with our react project which would be our case we can set up our data and then using the cdn we're going to be able to consume our data what's really cool about connectful that once we're done with our application once we're going to set up all our data within the contentful it will be possible for us just to add changes within the control and we'll not have to store our project locally our machine just to change something delete data edit the data and so on and so forth last but not least like i said we're going to use free tier netify to host our amazing application so the whole world can see it as far as setup files go they will be located on my github account so you can search for setup files react beach resort or just follow the link that i will leave in description i also want to let you know that if you like projectbased courses be sure to check out my udemy courses where we cover topics like react javascript gatsby and styled components just to name a few in the description of the video you'll find 10 dollar course coupons before we tackle the project i do want to mention two things first as far as styling is concerned we will use one main css file available in the setup files and since it is react project we will cover css very briefly only when i find it useful or for understanding our whole setup second while developing application only one react hook will be used use context hook and only because we will look at multiple options of consuming context api all right assuming that you installed these setup files i think we can kick it off and start working on our application and the first thing that i would like to do is bootstrap the react application using the create react app now i'm gonna go with npx route but obviously you can install this globally or assuming that you already have this globally you can just run create react app and then whatever the name of your project will be now i'm going to call my resort so what i'm going to do right now i'm going to navigate to desktop once in the desktop like i said i'm going to run npx then we're gonna go with create react app so now i would need to just come up with a name and i'm gonna go with resort while i'm right now bootstrapping the react application i would wanna show you what you're going to have within the setup files so here you're going to have three files as well as the images folder and this is going to be used for redirect so i'm going to show you what's happening in the next video then app.css will be the main css file for the whole application data will be the local data that we're going to be using while we're developing the application prior to when we are hooking up actually everything with the contentful so this is very important otherwise it's going to be very hard for you to code along and then last but not least we have the images again which we will use while we're developing this locally as well as later on once you're setting up the contentful this might be useful where basically as you're creating more and more items you can just grab here the images that we're all going to be using okay now also you'll notice there's a gif one for the loading so there's going to be a case where we would want to set up the component as let's say some kind of page part loads so this is we're all going to be using the gifs all right now once you have all this installed then obviously what's next is happening is that the application currently is being bootstrapped so we can see that we have a bunch of dependencies that are being installed with create react app and once that will be finished in fact before we run npm start and we actually start the development server i would want to install these two dependencies because we're going to use them right away so i didn't see the point of starting the dev server and then in fact stopping it install these two dependencies now one of them will be react icons and the second one will be react router dom which we'll use for our routing so in this case i would want to navigate to my resort folder so since the name is quite simple i can just say cd resort and then let's run npm install i'm gonna go with the react icons first and then once they will be installed now we're gonna go with react router down and then after that i would want to open up right away my text editor as always i have a few options i can do it directly here from the terminal where i can just type code dot or i can just go with drag and drop now this would be my first application or i'm sorry not application the dependency and then i'm going to go with npm install again or we can just write i react router dom and we can just go with dash dash save as well just in case okay now once we install both of these dependencies like i said i would want to open up my text editor and in this case this will be visual studio code we'll drag and drop and we're going to get our folder i can might as well minimize this we will not gonna need that and let's open side by side window so that way we can have two browser windows one is gonna be the small one where we're gonna see everything that we're doing as we're developing the application and the second one will going to be the bigger browser window where we let's say want to say how the grid works okay now in this case i will going to open up the terminal the integrated terminal in the visual studio code by the way if you don't know where it is this would be the new terminal and i am using the shortcut here of course and then why don't we run the dev server so npm start we all going to start the local dev server which will serve our project on localhost 3000. now like i said this would be the finished project that we're going to be striving to achieve and then i would want to set by side by side with localhost 3000 where this will be the project that we're currently working on okay now this will be the setup and assuming that you followed all the steps and everything was successful i think we can move on to our next phase of our application first things first i would want to do a bit of a spring cleaning because obviously this comes with a bunch of things that we don't want and we can start simply by app.css now you have two choices either you can import right away my file that you have in setup files meaning you can just replace it by drag and dropping or you can clean out here and just copy and paste the content of the setup file css file this is really up to you in my case i'm just going to delete this and we're going to create a new one later on when we're going to grab my app css from the setup files then i'm going to head over obviously to the app.js and for the time being we're just going to comment this out because otherwise our application obviously we're gonna break then we can head over maybe to index.js and i would want to comment out index.css because like i already said three times probably our main css file will be just one so we don't need the second one with the index css then we don't need the logo svg so we can just delete this sucker as well so let's say logo svg you go byebye then what we have well again we have app js breaking so why don't we do very simply by deleting everything that we have currently in the div and we can just have i don't know maybe a react fragment in this case and we can just say okay within the rack fragment we're going to place a hello from app just for the time being hello from app now let's save that and there should be no errors i'm apart from the fact that i'm trying to import the logo of course so i can delete that and yes everything is working correctly we do have our hello from map then uh we will gonna head over to the public one and within the index html i would just want to create a new title because at the moment i have react app and i'm going to call my one resort resort recording recording all right now let's say that this is going to show me two things where i have beach resort that will be my finished one and then i have a resort recording now as far as the setup files are concerned why don't we go over to the setup folder and we're gonna go one by one so here we have the redirects and like i said i will gonna talk about redirects in this video and in fact i'm gonna do that right now so what happens is since we're using the react router dom they don't play very nicely right out of the box with a netlify where we will going to be hosting our application eventually and what happens is that the fix is very simple you need to actually get this redirect file so if you want more information again you can head over to the google you just type react router down and pretty much this is going to be the first blog that comes up and like i said we just need to grab that file and that file needs to be in the public folder and that way whenever we're going to be redirected or any kind of routing that we're going to do in metal file will in fact work exactly the same like it would work locally with just a react rotor dump so i'm going to grab this redirects i would want to copy this guy and then we're gonna head over to the public and just copy and paste it right here like i said if you want more information if you're gonna head over to the blog you can just read what is actually happening and what would be the case scenario why we wouldn't want to use that and notice we have the redirects now that is obviously the file name and then we have our index html now technically this would come up only later once we deploy it on nutify but i think that we can just get it out of the way because maybe eventually i might forget now next one up we do have our app css like i said this is going to be our main css file so i will gonna right now copy this and we're gonna head over back to folder of the source and just copy and paste it somewhere in the source now it is important that you actually use the same structure as i am where the files are at because i do have already some paths here so let's say when i'm setting up the hero backgrounds or something like that i am already having some kind of paths so it's important if you change the path notice i'm actually looking for the images folder layer now and then if you're going to place this file somewhere else obviously it's not going to make sense so that's why i'm suggesting either you follow the folder structure exactly by the letter or if you are actually creating your own folder structure then obviously just keep in mind that whatever we're going to be having some kind of path you'll need to fix it all right now this will be my app css now i can head over back to app.js and in fact comment this out so now we're not going to break or we shouldn't break at least and the moment i do that i do have a beautiful error and the reason for that is like i was just talking about that i cannot find the path because i'm looking for the image and i cannot get the image now i will gonna return back to app.css we will talk about a little bit more but right now what i would want is get these images so i would want to get this images folder and again somewhere within the source so make sure that this is still within the source we're just going to copy and paste that and this is going to be our images folder then images are quite selfexplanatory these are going to be the images that we're going to be using locally and later on you can use the same images if you're setting up the data on contentful and then why don't we also grab this data one and why don't we talk about the data and what's happening here now i'm gonna discuss this data file later on in more detail once it's going to make a little bit more sense but as you notice right now there's our bunch of imports here on top where again we are just getting the images so it is crucial that again your data is sitting within source because if you're placing it somewhere else this path will not going to make sense but like i said we're going to talk about this data.js later on when it's going to make sense because at the moment we are not working with the data so we might as well just skip that so this will be our setup files and last but not least i would want to talk about a little bit about css so the way i was setting up css first and foremost you notice that i have a bunch of variables here so i'm using the css variables i did set them up in a root and then all throughout the document you're going to notice that i'm just actually accessing these variables because i find it easier now there's also one more thing that i would want to let you know that my main goal was as i'm working to create as little class names as possible so even though normally i would work with style components or even if i just work with css i prefer naming everything with the classes in my case i didn't want to over populate the jsx that's the reason why we're going to see a bunch of these nav links and then you have let's say whatever the element that i'm choosing this is not my preferred way but since again i'm doing the recording and i didn't want to over populate the gsx that is the reason why my css was structured this way you're also going to notice that here on the top we have a bunch of globals whether this is going to be the body where whatever heading wants then a few classes that we're going to use all throughout the document and then everything will be in a following string where basically you're going to have a comment so this would be the section that we're going to be working on let's say navbar and all the css that has to do anything with the navbar will be here then we have end of navbar then obviously we're going to cover hero and so on and so forth so if you ever need to find something remember that you're just going to have to look for the name of the section that we're working on or if let's say you want to find a specific class you can also use always find and let's say we're going to be working on a hero i can type here okay so these are going to be the classes that we're going to be working with a hero now last i also would want to mention that i am purposely repeating myself now what do i mean by that you will notice that for each and every section i will gonna set up the media queries and bunch of them i could set up in one place and just use the grouping now again i did this purposely so whenever you're working on this particular section you can see all the css that was done now again this wouldn't make sense normally you just group everything together especially as far as the media queries are concerned because let's say if you're repeating the same rule it doesn't make sense but in my case again i wanted you to show rule by rule that is applied for each and every section that we're working so this would be the setup this is the folder structure that we're going to be using well obviously we're going to create more folders and more components but this is how we connect right now our application with the setup files that were provided our next tags will be creating pages that we will use all throughout the project so as i'm looking at my finished project i have few pages i have the home page then we're gonna have the room page where all the rooms will be displayed as well as single room page where there will be information about single room and also we would want to set up the 404 page so let's say we're going to a page that doesn't exist we were going to be brought to a 404 where we have an option of returning home okay now what do we need is we we're going to head over to the source within source there will be new folder and quite selfexplanatory we're just going to call this pages within the pages there will be four components most of them will be actually functional components only one the single room page should be classbased component you can obviously do it later on however you'd like but you might as well do it right now so let's start with the first one uh this will be home js and like i said the home js will be functional component and in this case i am using right away the extension that i have which will be the es6 7 react snippets and this allows me to not to type the whole spiel where i'm importing a react and all that i can just say r a c and or fc sorry and this creates a functional component in this case though this will be an arrow function now you can also do it rfc this is just going to be creating as a function this is really up to you however you'd like all right now in here let's just write hello from home page because this way we're going to know which component we have actually rendered in the app.js because starting from next video we all gonna set up the react router dom for the routing then the next one will be rooms so again new file let's call this rooms.js again let's create a functional component rfc or rf ac and then let's just say that hello hello from and we're going to say rooms page okay then we do have another one which is going to be single room page so we can just call this single room js again same old deal however in this case like i said let's create a classbased component so in that case i'm going to type rcc and we can just say hello from single room page now last but not least there will be an error page let's call this error js and again this is going to be the functional component and why don't we say hello from error page error page and when we save them i might as well can close all the tabs and then what we would want is within the app.js i would want to import them one by one we're just going to import them so i'm going to say first and foremost import and why don't we actually close the sidebar so import now i'm just going to be looking for the home and that will going to be in the pages folder so since this is the same folder of course that's the only thing i need to do and then i'm not looking for the images in fact i'm looking for the pages and then we're gonna go with home i will gonna save that we can just copy and paste that four times since we know that we have four of them and let's just change the naming the second one was rooms then we had what was the naming here i think the second one wasn't the rooms obviously that was single room and we also need to change the name of the import single room and last but not least we have the error so let's write error page as well as import from the error all right and when we do that why don't we render everything out just so we can see how everything would look like if we wouldn't use the react order dump so in that case we're just gonna go with home and then again like i said copy and paste it like we did already previously and let's just change the naming in this case we're gonna say rooms then we have a single room single room and the last one will be no other than the error page and once we say that we have four pages now it's a far cry from our final application but at least we have started doing something so why don't we take a look at how we can work nicely with react router dom setting up all our pages was nice and easy however we would probably want to give our user an option to navigate to a different pages because at the moment if we're just going to keep on filling in all the components that we created we're just going to have one giant page that will not make sense in the long run now there's many ways how we can do that however probably the most popular would be reactor or dump and as always if you want more information we can just go to react router and we're going to be looking for the package name of dom and then since this is created by react training all the documentation will be in fact in this website where we have reacttraining.com and then step by step first we would need to install it which we already did and then we would want to import few things and we would want to start with the browser router which will serve as the router then route we are going to point to a specific route where each component will be rendered and last one will be link which will be pointing to that specific url okay now we also gonna use the switch and we're gonna talk about it once we get there but these would be the basics that we would need to get from react router down as far as the browser router we would want to use the browser router to wrap our whole react element tree or react componentry so we have few options we can do this in the app.js however just so we don't clog up the app.js we can also do it in the index.js so this is exactly what i'm going to do is i'm going to import i'm going to say import then i'm going to say browser router and usually what happens you use the alias like you notice here they use browser router and then you just call this as router so you give it an alias and we're gonna go from react router down since we already have installed the package and what you would want to do right now is just wrap your app component that you have that's being rendered in the browser or i'm sorry in a router so this is going to serve as a parent container right now or parent component and then we're just going to lift this guy up the app and we're going to save it and now we're going to have access to a browser router now i did mess up here because obviously this is not how you write this so let's write it correctly and then we have the import and we have successfully set up our router once we have the router we might as well can start using it and like i said we would need two more things now the first one will be a route so notice we have a route component and then later on we're also going to use the switch and i'm going to talk about the switch once we start using it but i will gonna import this right away so we're gonna be looking for route then we have the switch and then again this will be from react router dom and the syntax is very simple so let's imagine we have these components that we already created as pages and then notice we have the link component which will be pointing to that route whether this is going to be forward slash or this is going to be forward slash about and what happens with a route component it has this path prop that just shows where we're going to be actually navigating and then what component will be rendered so if the path is forward slash this component will be rendered then if we have the about then the other component will be rendered and in our case this is very simple in fact we again need to set up the route and i'm going to say okay so if there is a prop and the name is passed in fact not to let me go back path and i'm going to say if the route is the home page which would be the forward slash what component i would like to actually show well this is quite simple component and then we're going to go with our home one i'm going to say okay so home component will be displayed then i would need to get rid of rest of them and we're just going to copy and paste them and set up four paths now the last one we're not going to use the path but we're not going to talk about it right now so why don't we get rid of the fourth one all together and we're going to talk about a little bit more once we actually are covering the error page so if the path is forward slash if the home page we would want to render then obviously we're going to be looking for the home component then we would want to set up the rooms path so if we're navigating to the rooms then we would want to show rooms and last but not least we also would want to show the single room so for the time being i'm gonna write like this single room but we will gonna change this a little bit later so let's write this a single room and now let's notice what happens i do have my home page awesome because currently we are sitting on the homepage however the problem will be if i want to navigate to a rooms because i'm going to write forward slash then we have the rooms and check this out i still have my home even though i'm also rendering the rooms and the reason for that is because with react router dom it will match the first one now in our case what we would want is match the exact one and for that we do need to add this prop and the name here is exact and that way only if the path matches exactly which would be the forward slash then we're going to be rendering the homepage because what you need to understand is if you're looking at the rooms the way it's written right now we have forward slash and then rooms it also matches the forward slash the one that we have just for the home one so what i'm gonna do is right now is i'm just gonna grab these guys and i'm just going to copy and paste them so we're going to add this exact one to all our writes so one two and three we're all going to have this exact route once i do that and by the way i didn't set up for the last one then if i'm going to be on a home page only the home page will be rendered if i'm going to be on room page only the rooms page will be rendered we also have an option of single page or single room right so we can write single room and this will be our single room however there is an issue currently because what's going to happen is that the single room we're going to use for each and every room however we will going to be displaying different information so if we have single economy room this will have information about that single economy room if i would want let's say some kind of presidential room i would want information about that presidential room and at the moment the way our setup is currently we are not doing that we're just rendering this one single room and in order to fix that we would need to use the route parameters so how we can do that well we need to come up with a path so in my case i will going to say this this is rooms even though remember you could just say leave the forward slash and then do the route parameters but in order to set up the route parameters you need to set up the colon and then need to come up with whatever variable name you would want now in my case i'm going to call this slug but you can call this uncle bobby it doesn't really matter now the key here is going to be later on when we're going to be working within this single room component we're going to check it out how we can access this slug here how we can access that variable and then pull the information about that one specific page so that's the reason when i'm going to be clicking on a single room page i'm going to be getting a unique information about that single room page all right now let's test it out let's test it out our slug so in this case i can say localhost this will be my homepage then if we're going to do let's say rooms let's type rooms this will be the room page and then if i'm going to do the forward slash and this is going to be my path where i'm going to be accessing the single room and we were going to set this up with the naming where if you're looking at the final project notice that this would be double basic this is going to be our slug but just to show you that doesn't matter how we name the variable this is just the accessing i could type let's say one here now what this is going to do is this is going to say okay so i cannot find this particular rooms now the reason for that because i didn't save it now let's save that and notice now i have rooms then i have one which will be that one specific room and obviously this will be hello from single room now instead of one i could just write slug and again this will gonna lead to a single room page now last but not least i do want to set up some kind of error page because at the moment if i delete everything that i have in the url and let's just say forward slash hello check this out i have this blank page because none of these ones matched here so i had a bunch of routes but none of them in fact match and what we can do here is we can set up the switch component so we can place everything within the switch that is giving with a react router now let's place this all the way in the bottom and then once within the switch statement we can set up again route component in this case we don't need to show the path we can just say okay so we're going to be rendering the component the name of the component will be in our case error error and now let's check it out when there will be no match for whatever url we currently have we will be rendering this error page all right now this will be our setup from the reactor or dom and then next we can start working on our navbar once we have successfully set up our react router with the url parameters as well as the error page just as a side note i want to let you know that if you want to get more information about what is happening with react router dom just explore their documentation where in this case they do talk about the url parameters basically what they are and how to work with them as well as we have our no match and the reason for that why we're placing in the switch because the switch will render the first child route that matches and the route with no path will always match now just to show you how this is going to work so let's say i will going to get rid of the switch so i'm going to select them both and in fact delete them now i can leave them as a fragment notice right now my error one will be showing up on each and every route so even if i'm going to go to a let's say rooms then i'm still going to have this arrow so one of the things that we can do is we can use the switch statement here like so and then what happens is that if the route will obviously not gonna match we will gonna be rendering this error component all right now the nav bar as i'm looking at our finished project notice that navbar will be on each and every room even the error one so even if i'm gonna say hello and i'm gonna have a trouble finding this page i will gonna still have my navbar so one of the most important things that we need to remember that navbar will be placed around the switch statement because we are going to use the nav bar for the navigation in order to do that i will going to create a new folder now i'm going to call my folder components and then within the components we're going to be placing a bunch of components and then the first one will be navbar js and why don't we do it very simply where i will gonna place a classbased component because i do want to set up here the toggling and why don't we write just hello from bar let's save that and then within the app.js i would want to import so somewhere here maybe in the bottom last import import then we're looking for navbar this will be in our components so not there but dot forward slash components and then we're looking for the navbar and on top of the switch we will gonna render our navbar let's save that and we do have our hello from network which is really really good because then for each and every page we will gonna have the navbar once i go to homepage i'm still gonna have navbar and so on and so forth our done in or sorry i work in the app.js is pretty much done and next we'll just going to be working whether the pages or whether this is going to be components first and foremost i would want to show you how we can work with react icons because if you're noticing on a smaller screen we all gonna have a very very nice icon and let me make this smaller notice this guy so this is gonna be the react icons now in fact that is a phantasm icon but what i really liked about react icons the package is the fact that they are rendering this as an svg and it just gives you more nice features all right now first and foremost let me make this bigger then i will gonna keep this open just again to show you where we're going to be working with the links because this is what we're going to be setting up but i will going to open a new one i'm going to say react uh react and let's call this icons and then this is going to lead you to react icons netlify.com and then notice how we should work with them so first and foremost we would need to install them which we did then we have few libraries that we can choose from whether you want to do font awesome ionic material design and then the way you would import this would be the name of the icon which you would like to import and then the library where you want to import from so in our case we're going to use fantasm so we just need to add this forward slash fa and then if you want to render that icon the only thing you need to do is just name it okay now if you want to check it out what kind of icons they have here you go knock yourself out again icon name and then from the font item obviously you can just follow along what would gonna be my naming for the icon so you don't need to actually go ahead and search for that because you'll see in a second which icon i actually picked now first and foremost uh what kind of other imports i would want well i would want to set up some kind of uh logo as well because if you're looking at it in again the final project we're noticing here the logo so why don't we start with a logo and we're going to do this from the images import then i'm going to name this logo and now we just need to navigate to a images folder and we do need to add from and let's see so we have right now images and then within the images the name of the logo will give me logo svg now this is going to be the logo that we're going to be using second i would want to get my icon so i'm going to say fa then the name is align and right and then like i said this will be from react icons and then forward slash and fa now last i would want to get and this is not what i would want these are the setup files but what i would want is to head over to a not react icons but react router and then remember we talked about the link component now link component is going to be the thing that we're going to use in the navbar because we're going to use the link component then to prop this will be actually directing our user to a specific url okay now let's import it import and let's name this link from react router down and get used to this import we will do this all throughout our application because we'll have a bunch of buttons that we're going to be directing the user to some other route all right now we do have the link everything is awesome and like i said i would first want to set up right away the state because i will do a bit of a toggling if i'm just going to make this smaller just to show you how this is going to look like if we're going to go to the smaller screen notice this is going to be our navbar and then we click it again and now navbar disappears i'm doing this with a state and with handle toggle as well as there is a little bit of css but obviously i'm going to show you what kind of css is involved however i do want to let you know that in order to see everything that we're going to be doing within the navbar you will gonna have to head over to app css now let's find where is the nav bar let's look for the nav bar and then within the nav bar links you have here the height 0 and overflow hidden so if you're not going to comment this out unfortunately you're not going to be able to see what is happening so you do need to make sure that you comment this out and that way everything that we're going to be writing within our js you will be able to see okay enough of me apping why don't we set up the state like i said we're going to set up the state then we're going to use this or is open then we're going to set this equal to false so by default navbar will not going to be open and we already know that we can create a handle toggle which will be our method obviously we can name this however we would like and what this is going to do is use this dot set state and we're just going to make sure that if the is open is let's say false we would want to set it equal to true if it's true then it's false and so on and so forth and the way we do that is we use this that's the state then we have this property there by the name of is open and we're all going to set it up to opposite so i'm going to say exclamation mark this dot stat state and is open so this way as we're going to be clicking on it this is going to be toggling in between the false and true then within the render this is where the real fun starts so first and foremost let me delete div and i'm going to say that this instead will be nav i do want to add right away the class of navbar class name bar and if you did everything correctly obviously there's going to be already some css that's being applied within the nav bar we're going to set up the nav center this will be the div then after that we would want to go with nav header div and then last but not least i would want to start setting up my logo but i will gonna wrap this in a link so the way we use this link component that we got from react router down we just need to write link then to prop so we're all going to be directing the user in our case if i click on my logo i would want to go back to the homepage so let's close it out and then within the link why don't we place that logo so for that i'm going to use source i did already import the logo from images and i can just place it within the source so i can say logo and we can also add maybe alternative and for alternative we can write i don't know beach beach resort something like this resort and we also obviously need to close out the image so forward slash and this will going to be our logo like i said there's going to be multiple things happening first and foremost you notice that there's the background here there's also a logo and everything is working nicely all right then i would want to work on my button which like i said will be our toggling button on the smaller screens and in order to do that we will gonna set up the button component or button element first and foremost then we might as well add type will be button button and then why don't we add a class name of our nav btn so nav btn and then within the button i would want to render my icon here the fa align right now like i already previously showed you from their docs the only thing i would want is to access obviously this icon so i would just need to add a name of this icon and then i will gonna add right away class name because i did add a bit of styling here so nav icon let's close that out let's say that and sure enough we have our icon but we still haven't set up the handle toggle when i'm clicking on this button so the way we're going to do that is we're going to set up on click then this will be equal to a obviously function and the name of the function will be this dot handle toggle since we have access to it in this class last but not least i would want to set up the ul or unordered list which will render in fact all our links now i need to be careful here that i would still want to place this within nav center but i don't want to place it within the nav header so make sure that you are outside the nav header and we're going to set up the on our list then for on our list this is going to be the kicker where the class name will not going to be a simple class name in fact we were going to use the value from the state where we have this dot open i would want to write it first and then once we're going to set up everything here within the navbar i'll head over back to css and show you what is actually happening but the way we're going to do that is this dot state is open since obviously that is the property we're looking for and i'm just going to check if the property is true so if this is open then this class name should be two of them then there's going to be links for my unordered list as well as we're going to be looking for the show nav class however if it is going to be false then we're only going to be rendering one class or adding one class to this on order links which will be nav links and then within the onward list i'm just gonna go with list item and for that particular list item we're gonna place a link and then there's gonna be two prop again this will be again directing the user back home so we're gonna write that the name in this link will be home let's copy and paste that one more time and then the second one will be rooms and that's it that's the only thing we need to do as far as the navigation is concerned because we don't have a bunch of links here so let's write rooms and check this out and currently what i have here i can click on it all day long and not much is happening only this small move but we're gonna fix this a little bit later on the reason for that is of course because we commented it out but i do have my links now as a side note normally if you're setting the links it's probably wiser to set it up in a different place and then just rendering it as a list well what do i mean by that well let's imagine again i keep going back to my github where i don't want to go but let's imagine you're going to have a bunch of links and those links will be displayed all over the page let's say you have the sidebar you also have maybe links displayed in the footer and what you don't want to do is just hard coding all over the place because let's say you want to change something so probably a better way would be setting up some kind of constants folder or data folder where you have access to these links so set them up as some kind of array and render them now in my case there wasn't bunch of links and i was just rendering them in one place so i thought this might be a bit of an overkill but normally if you're rendering in multiple places and you have way more links it makes more sense to set up this as some kind of array array of let's say objects and then you're just rendering this and that way you have the information one place so if you change this information then all the changes are being affected all throughout your project again in my case it just didn't make sense now the second one will be this app css because what you notice in the nav links we have by default height of zero and overflow hidden so if i'm gonna comment this out you'll see how actually this is going to work i will going to set this up so at the moment by default they should be hidden but probably because i already clicked on them this is the reason why it's not happening so let me refresh notice now my links are gone because by default height is zero and overflow is hidden and then there is the show now of class that adds this height of 100 or i'm sorry 100 pixels that's the reason why we click on it now this class of show nav is being added to my on our list and now my links are being shown that's the whole magic here behind this navbar js and as you notice here we are just checking the value in a state is this open then add these two classes here the nav links as well as shown up and if it's false which by default this is false then we just want to work with a nav links okay this is the only thing that we should be interested within our navbar.js and now we are ready to move on to our next component which in fact will be a hero component as you're looking at a final project you probably noticed that for each and every page that we have there's going to be this massive hero background image and that is going to be the component that we were going to create and the way we're going to create that is that we are going to be able to reuse it now there's still going to be a problem just doing it with a regular css route so when we're going to get to a single page in fact we're going to do it two ways first we're going to set it up normally like we're going to do it right now with the css but we're also going to explore the styled components way where we can make it even more dynamic okay now what i would like to do right now is head over back to the components we're going to create a new file and i'm going to call this hero js this will be a functional component so rfc and let's close the sidebar and now let's decide what we would want to do so this is going to be my component then there's going to be two props children because i would still want to render this banner with a button and all that within inside that's the reason why i want to access the children and the second one will be a hero now this is the prop that i'm creating myself which i'm going to add to this header that i'm going to be rendering the reason for this hero class is because i want to add it as a class name so i'm going to set up the class name and i'm going to say hero so each and every time i'm going to be rendering this hero component i'll have an option of changing the class name and then i'm going to show you obviously in the css how we're going to be doing that but in general i'm going to say okay so this will be equal to my prop so instead of passing this as a string i need to say hero and then we also would need to render the children so i'm going to say header and then we're going to say i don't know children so let's write children that is the prop obviously that we're accessing so let's go with children and this is our component we're almost done we're still going to have a look at how we can set up default prompts and why would that make sense but why don't we test this out so i'm going to say okay there will be a hero component and first and foremost i would want to try this out in my home page so we're going to head over to the homepage we will going to import this i'm going to say hero from and let's say components of course then within the components we do have the hero and why don't we render it first and foremost let's get rid of this div and then let's just say that this will be my hero uh hero component like so and i do need to add the class name here because this is what i'm expecting in my hero because i have my hero prop and then this hero prep will be passed down into attribute of the class name and then this is what's going to make the whole change so in this case i'm going to say hero and i already did set up within the app css hero class now let me show you how we can find that instead of looking for the nav bar we're going to look for the hero and then check this out i have two classes i have one for default hero and the second one would be for room zero so this is what i'm talking about when i say that we're gonna reuse it so we're gonna have this hero prop but in this case i would want to pass default hero and since this will be accessing the class that i had the default hero class since that is the whole setup in the hero check this out now i do have this massive image in my homepage however i would want to set up some kind of default props for this hero component because the issue right now is that yes i am expecting this hero prop but what about let's say i forgot to add the prop now it would be annoying if the only thing would be rendering is pretty much nothing here because this is just going to be empty component so what we can do here is we can use the hero now that obviously is the name of our component then we go with default props and i'm just going to set up right away that the hero prop will by default be default hero which is in fact the class name that i had within the css now what's going to happen is if on a different page let's say the rooms page i would want to render different image obviously i'm going to be passing the class name that i'm going to create for the rooms however if i'm not going to pass anything altogether like let's say for the error page if you're going to go to the error page notice this again we're going to be rendering the same thing like we had before is because i have the default props so let's test it out i do have my hero prop i already have the default prop so that way within home i actually don't need to add any kind of class name here this is happening by default and why don't we head over back to the rooms again we're going to do the same thing we're going to import hero from and then we're going to be looking for the components as well as we're going to be looking for the hero and why don't we get rid of all this and for the time being let's just say hero however in this case i would want to pass the information and if you remember within the css what was the other class name that i created and that was room zero and again just to repeat the reason why i didn't create a separate class for the single room is because we're going to do a little bit differently because there is a bit of issue here if you want to customize this even more so there's limitations to doing this with acss but in this case i'm going to call this a rooms hero which in fact will overwrite the default ones that we did set up so in this case if we're going to head over to the rooms page i will going to have a different image now all the magic is obviously happening here within the css because i do have these two classes what i'm saying here is the min height will be 100 view heights then i'm just getting rid of the height of the navbar i'm also setting up the background now for the default one i'm just looking for a default image from the images then i'm making sure that it's in the center and here i'm just adding the flexbox so the banner that we're going to be adding later on will always always be placed in the center and for the room zero i'm using all the properties with the values but i'm just overriding them i'm saying you know what i don't want 100 view heights so i don't 100 of the viewport in fact i want only 60 and then i also would want to change a image now last but not least like i said we still would want to set it up the error page so why don't we head over back to the error and in this case again this will be very simply we're going to say that we're not going to be getting any kind of specific class for that particular hero component where we're going to write hero from and then let's say what from well we can go to components again hero and why don't we render this dude why don't we say hero without any kind of classes or anything like that now let's save that and in this case if i'm gonna navigate in my browser to let's say again hello how we're going to be brought to my error page and which i'll going to be able to set up later on in next video the banner component which will have this button so then we're going to be able to navigate back to a homepage we have our hero component good good and next one up we have the banner and i can tell you right away that we could set up everything within hero so where i do have the background then within the banner obviously we're going to be placing all this information whether that would be title subtitle this underline and then as a child we will be able to place something else now in my case i'm going to be placing each and every page we're going to have some kind of link and like i said you could set this up everything in one component now the reason why i split this up because my idea was like this to show you that you can always reuse them however you would like let's say in your case you wouldn't want to use all of it together you wouldn't have some kind of place in your project where you only want the background or you would only want the banner or you would want to place different children than just let's say button so that way if you make them smaller the only annoying part is the fact that if you want to use all three of them together for each and every page we're obviously going to have to do the import within home we're going to have to not only import the hero but also the banner and also the link and so on and so forth so you could technically set this up as one big component the reason why i splitting this up because i find it a little bit more customizable where if i want just to grab a hero component i can just add it as an image that's it i don't have to actually get rid of the banner or anything like that all right that is just a side note then after the hero i would want to create a component and the component will be banner.js within the banner js again this will be functional component then let's close the sidebar and we will gonna pass three props so there's gonna be option four title and subtitle and title would be this guy then subtitle would be here and then also we're gonna be rendering the children and just as a side note for anybody who is interested what is the children that is basically within the component so if i'm saying here that i would want to render children whatever i'm going to place within this component we're also going to be rendered otherwise if you're not going to use these children then whatever you're going to place within that component in fact will not be rendered so we have hero then we have banner like i said we have three props again we're going to use the children because i would want optionally to add this button now you don't have to there's going to be cases we're not going to be adding the button but in most cases we will going to add this link and for that we're going to say children so we're going to render children then title and then subtitle and what we would want to render well there's going to be a div i already did set up the class name the class name will be banner and then we will have a heading 1. now heading 1 will be rendering the title then we will have a div so simple div as well as after that there's going to be a paragraph and paragraph we'll be using to actually render the subtitle that we have and last but not least i will going to place the children and what you need to remember that depending of where you're going to place these children this is where they're all going to be rendered so the reason why this button is all the way in the bottom because i just set it up i said whatever i'm going to be passing as children will be placed in the bottom so if you're going to place them here let's say above the title they will be rendered above the title we did set up the banner now just to show you the classes that i'm using for the banner this will be right after hero like i said so if you're following along next section up we have the banner here are the comments again display online some backgrounds some colors some paddings text alignments and so on and so forth then within the banner we are pretty much done we don't need anything and now again this would be the part if some of you are annoyed by the imports where we would want to import this of course i will gonna right away import link just so we can set it up everything together with the children so i'm going to say import then i'm looking for the banner from and i would need to say from where well this is obviously from the components and the name will be banner and like i said if i want to render the children i would need to place this within the hero and the kicker here that within the hero we already set up our flexbox remember when we were saying that if there's going to be child it basically will be placed in the center display flex align item center and justify content center so this is exactly what we're going to do right now we're going to say that we would want to render banner the props are optional as far as the title and the subtitle is concerned so for the title i have luxurious rooms so let's write title and i'm going to try to not misspell it and this is why i'm not going to repeat that because usually when i talk and type my spelling is even more terrible so hopefully this is luxurious written correctly and then for the subtitle let's write deluxe deluxe rooms starting i don't know at 299. so dollar sign 299. let's actually not close the manner but let's just close the opening tag and now i would want to get my link so what i'm going to say here import then we're going to be importing link from what well we can use it react router down let's import that and then like i said within the banner this is where we're rendering the children we're going to say a link now this will link back to a rooms when i say back obviously in the case of the homepage this will be rendering or this we're going to be navigating to the rooms and then we can also add right away class name class name will be button primary now where's the button primary in app css again the fastest way probably will be btn and this is going to set up the class that i'm adding so notice this is the css we're adding and by the way this is going to be something we're going to reuse all throughout the project then within the link what we would want to render well let's write our rooms let's set this up and bummer i don't see it here and the reason for that is obviously because i'm looking at a hello which is our error page but if i'm going to head over back to the home and this is going to be my banner and if we're going to click on a link notice now we're going to be navigating to the rooms i also would want to set up the same way like we did in home i also want to do a banner or i'm sorry not banner the error page so let's close the home i think we can close the css i don't think we need it anymore and for the error what we're gonna do well i think it's gonna be a bunch of the same things where again we have already hero imported i do need to have my banner so import banner from and that components banner and i also would want the same thing with a link so import and then i need to have it as a name import link then where well this is coming from the reactor dom and then again within the hero there's going to be a banner within a banner there are going to be a link so let's write banner then let's write title title will be 404 subtitle let's write page not found page not found let's close this banner for now and then within the banner again let's actually uh set up the link now in this case this will be directing us back to the home page so link component that we just got from react router 2 then home page class name in this case again we're using btn primary primary and by the way i can close it here and then within the link we would want to render return home so let's go up a little bit to return return home let's save that and now if i'm gonna navigate on my current recording to some kind of hello page this is what's going to be rendered and check this out so i have 404 page not found and then now we can navigate back home let me double check with a finished project what's happening with the rooms and within the rooms i do have this banner still with just a title so not subtitle as well as the link so this is exactly what we need to do within the rooms let's check out the rooms let's copy and paste it in this case we will can obviously rename that we are not looking for the banner we're i'm sorry for the hero we're looking for the banner and let's close that and again we'll need to do the same thing import link from and react router down from react router dom react router down and same old spiel here we're going to be looking for the banner hero within the banner and then banner and again i already said it once but i'm going to repeat it twice if you don't like to be this way where you have bunch of small components you can obviously combine it into one if this is really what you want now in my case i just thought that i'm going to show you how we would do it if we have a bunch of small components the same way you can just set up one component for the banner the title will be just our rooms title our rooms and we'll have no subtitle so since we have no default or no nothing then nothing will be rendered and then in this case where we're navigating back home so again link to and why don't we set up again forward slash and two and obviously we need to write something within that link and in that case we're gonna write our return home and we also would want to add that class name with a button so class name btn primary let's save that and this is going to be my rooms also so once we navigate to the rooms i will gonna have this massive banner and i can navigate back home then next one up we don't have search rooms that in fact will be the last component that we're going to be working on but we do have our home and within the home we have these services so that will be our next component we're gonna create excellent we did set up everything that we wanted with a hero as well as the banner next one up we have services that will be rendered only in the home page and within the services we're also going to create one component that we will reuse later on which will be titled for the sections so notice how we have services titled and featured rooms so on and so forth that way we're gonna create both of these components right now okay now let me open up the sidebar i would want to close everything that i have currently open i don't need it and then within the components let's create two of them so first one will be services js which will be a classbased component so let's type rcc this is our gonna be our component let's write uh hello from hello from services and then we can right away import the component that we currently don't have which will be title so from and then that title component will be in the same folder so within the components so let's just write title and we obviously don't need to have the extension then once we have the services why don't we create the actual title component so title.js this will be a functional component and we will gonna be expecting one prop the name will be title that will be rendered once we're actually working with this component the class name for this particular component that i have set up in css is section title within the div the title will be displayed within the heading 4 like so so let's say that we're going to be rendering this title prop and right after that there will going to be a div which will be the underline let's save this title first and foremost we can also save the services but what i would like to do right now is get rid of everything that i had currently so hello from services and let's just say that i was going to be rendering my title component and the name i guess will be what well i think it just went with services so i can say title prop you'll be equal to services let's close out this particular component and then like i said we would want to render this only in home page so what we're going to do right now is we're going to head over to the home and then right after the link by the way we can close the sidebar import and then not the title but actually services that we were going to render in a second so from and then we're heading over to components and then within the components there will going to be a services component and right after the hero we would want to render services now the issue right now is going to be that we will try to render to adjacent component so the issue would be fixed by adding a react fragment so either i can write react fragment or not create factory i could just type react fragment or the shortcut shortcut would be just angle brackets as well as the closing angle brackets let's close out the fragment and now let's render our services now we don't need to pass anything here the services will be a component on its own so i'm going to write services and services should be rendered now at the moment we only we're going to have a title and by the way we do need to navigate back to the home page and yep this is going to be my title again if you're interested in the css just head over to the app css i believe it was actually globally let me check title and then sectional tile is right after the banner so align it in the center added some font size letter spacings the color the main color that i'm using as well as this underline okay that is as far as the app css is concerned and why don't we head over back to services and obviously there's a bunch of other things that we would need to add here in the services first and foremost we would want to display a bunch of these icons so i have four icons and we already have the react icons working so it will be very simply where we're going to say import now there is four icons that we're looking at so tail then fa hiking hiking and then fa shuttle man shuttle van and last one will be beer now all of them will be from and then again react icons forward slash fantastic icons and once we have these imports i would want to set up the state again so technically we could set this up globally in a context api which we're going to take a look at later but i just thought that since these are kind of dumb components anyway meaning we're just rendering the icons we might as well can do it locally here within the services component so let's set up state state will be object within the object we're going to set up one array services that will be my array and each and every item within this array will be an object now we're going to have few properties here the first one will be the icon so i'm going to go with a cocktail one first then title let's write that this would be free free cocktails cocktails and then i would want some info and for that i'm just going to get some laura mipsum and let's say i'm going to go with 10 words so let's say lorem 10 and i'm just going to grab this text so within the icon i'm going to write info and that property will be equal to this text now like i said i would want four of them so what we would need is copy and paste it four times or three times so we would have four i'm just gonna add some commas so we don't have any issues and then we obviously need to change these values where this is not going to be hiking anymore where i could just select them three right now and let's just write hiking that will going to be my second one then let's select next to and let's write fa shuttle van and last one will be very simply beer if a beer okay we also need to change some texts here this obviously is not going to be um three cocktails we can write endless hiking like so then we don't need a free cocktails we would probably need free shuttle and that last one will be strongest beer strongest strongest beer let's save that and after that we would want to obviously render that so what i'm gonna do right now is get rid of this div we're going to go with the section section we're going to have some class name now the class name is important when i say sum of course services that is the class that i'm using for the styling then within the services the first one will be title that will be rendered first and after that we're going to have one more div with the class of services services center now within this div i would want to render this list there's a few options i can obviously do this above the return get my array or i can just do it straight in the jsx which is going to be this case so i'm going to say this dot state map and no you know what first of all i need to access that array so i'm going to say services since services is an array i can use the map method and then each and every item within this array i'm going to pass it as an argument in my callback function so i'm going to say you particular item i would want to do something with you and as far as uh the mapping is concerned we might as well you know what do the index because we're going to have to add key so why don't we say item which will refer to each and every item in the list as well as the index and now we would want to set up some kind of return where we had a simple array and now we would want to wrap this in the jsx now the way this is going to work i'm going to say all right so there will going to be article for each and every item in array now the key prop we need to use every time we're rendering the list and since the key prop needs to be unique i will going to use the index and in this case it doesn't matter because it's not going to be changing normally if it's something like a list that's changing let's say within the rooms you should never never do that but since again this is just a dumb uh components list where we just have the icons i think we can just cheat a little bit and i had index for the key as well as i would want to add a class name and the class name is service so this is what i added in the css now what will be within the article well first there's going to be a span and we're going to be accessing actually i item icon so each and every item in a list we're going to have the icon that is obviously the property that i have like so then let's copy and paste the span two more times but you know what i actually didn't want span my apologies we're gonna have in fact heading six uh this will be item title item title and then last one will be info now info will be in a paragraph so we might as well go to paragraph tags and then let's add item info idem info and let's save that and voila we're gonna have all the icons here as well as the text now it looks like i did mess up a little bit because at the moment for the free first one i don't have three cocktails so i have everything written here with a camel case but then rest of them i didn't so probably i would want to add here a little bit of css now let's head over back to app css first and foremost i'm going to show you where we're obviously getting it so we have services then services center this is for styling where all throughout the project i'm using grid and i'm using this grid template columns where basically you can set up the repeat function then with the repeat function we can have either autofit or autofill so with autofill this is going to make sure that the columns fill out the whole screen with autofill if there would be extra space it would add a empty column which by the way we're going to use later on within the rooms section where we are actually doing the filtering and then we're using the min max where the first value is the minimum of the actual column so minimum would be 255 pixels and then second one is one fraction now this says what would be the max and within the grid this just means one value from the screen size so let's say one fraction would be one part of the screen okay now when in reality means that this is going to span as much as it can until it is actually able to fit two columns in one line so that would be the shortcut and then for letter spacing i'm obviously working with heading six so here i can just add text transform uppercase like so and we can save that and notice now i'm having everything uppercase but probably capitalize would be better capitalize and now all my texts are capitalized and if you want to do a little bit more info on one fraction let's say that would be one unit of the screen so if you have let's say the screen size so one fraction would be one unit so if you have one fraction one fraction that will be a two column layout so what we're saying here is that as i'm going to be increasing the screen size check this out it's going to get bigger bigger bigger bigger now the moment it will be able to place both of these with the minimum size of 255 then we'll have a two column layout okay since this is a react project house level i'm not going to focus too much on css but i just wanted to tell you that all throughout the project this is probably going to be most used and useful property as well as the value okay we have our services set up let's check it out in our recording i'll head over home and yep we have the services so next one up what do we have in the final project we already have the featured rooms so first why don't we talk about what we have in our data why the data is structured in a particular way and then we're going to start working on setting up the context because in fact i want to access the rooms data using the context api before we start working on our next section and even before we start working on setting up the context api let's look at the data that we got from the setup files and let me explain why i was setting up this data this way well first and foremost let me tell you why we in fact are including this data so my ideas was very simple later on at the very end we will check it out how we can set up everything externally within the contentful now i apologize if some of you actually pronounce this contentful i already have used to i guess saying contentful so if some of you are annoyed by that again my apologies but either contentful or contentful and in order to do that i did want to set up the data where we can finish the whole project just by using the local data because what i've noticed from the courses and from tutorials a lot of times people have actually issue of connecting now that is not the reason why because the service is bad because usually there's some kind of bug or something like that somebody misspells the name or something like that and what happens is that let's say if that would happen in the very very beginning person gets frustrated and just moves on to a different project so my idea was very simple where i did want to create a local data that we can use all throughout the project build the whole project so you shouldn't have no issues of accessing it using it i don't know modifying it and so on and so forth and at the very very end i'm going to show you how we can actually set up this data in the contentful and then get this data to our application and obviously we're just going to flip it there's going to be one place within the context api where we're getting our local data and then what we're going to do is we're just going to change few lines of code and our whole application is still going to work so that's the main idea now that leads me to a second point of as you're looking here like i said first and foremost these are just the images that we're using so each and every room obviously has bunch of information about it you can think of it as a big object that has images it has all kinds of information about it and these are all the local images so what i did here is just reference them and then i added to all those objects now each of them has obviously a separate image but you understand the idea so there's a room object and that roon object has particular image let's say image number one image number two and so on and so forth then as you're looking at it you might be a little bit questioning my sanity you would be like okay first of all okay i see that this is an array this is an export default that's all good but what is this all about why this dude couldn't just do id equals to one and then rest of it be name slug why is there a system then this is an object then we have an id then we also have the same thing with the fields and don't make me even get started on the images where i have the images array then each and every item is an object and then the actual image is within the fields within the file and within the url all right now let me explain what's happening first and foremost each and every item we're going to have these keys when we have the id or you have the name slog type price size and you can obviously see all them as you're looking at the final project as well as as you're looking to a single page where we go and look at information about each and every single page we have price size and yada yada now the reason why we're adding so much information because i would want to have a nicer filtering where we have more options to filter it trust me i could just set this up with one type and that would be fine but i just find it a little bit more interesting where we have multiple things that we can actually sort it through now let me tell you the most important thing why there is a specific structure to this well it's very simple like i said at the very end i would want to flip it where we are using all the time the local data and at the very end we're going to connect to the content full and we're going to use the external data now what i don't want to do is set up the whole application and then be like okay so now we're going to rebuild everything just because the data is coming back like this so the short answer is that when we're all going to be accessing our data from contentful this is going to be their structure now obviously they were going to have more information so the structure will going to be the same but as you're going to be looking at a systems property there's going to be a bunch of things so the only thing that we're looking for is the id but there's going to be other things if you want you can obviously access them but that way when we are actually accessing the information from the content pool nothing will gonna break now understand in the beginning you would be like okay so we could have set this up much more easier but i just find it more better if we do it this way where we have our original setup already like we were going to be getting the information eventually from the external source and yes of course we are going to have to do some kind of formatting where as we're working with our application as we're accessing this data obviously this is not going to make sense so within the context api we're all going to set up the function that we're going to format where basically we're going to get one object just with these properties id name slug breakfast blah blah blah and then as well as extras and images will going to be just a simple array with a images property here and we're going to be able to access them because it would be the pain each and every time as you're working with an application if let's say you want to access this image this is not going to make sense but you would have to do this regardless so even though you would be getting this externally you would still have to do some kind of formatting so i think it's much more better if my original data is going to be exact same structure as the data we're going to be letting on and right from the scratch we were going to set up a function that we're going to format our code are basically our data and then we're just going to get back the data that we would normally work with once we talked about the data why it was structured why it was created in the first place now let's talk about how we were going to be distributing our data as we're looking at our application it would be very easy to set this up locally for each and every component so let's imagine we have these featured rooms and by the way i can tell you right away that the way i'm accessing the feature rooms is that on each and every object we will going to add the featured property where for most of them this is going to be false and the rooms that i would like to show will be equal to true and we could set this up like i said where we're always going to have this featured rooms component then we just access the array data that we had separately filter it out and show it however what i wanted to do is create one place where we're going to be storing all the information our data that we will eventually we're going to get from contentful and currently we're going to get from our data file and then we'll just going to take a look at how we can distribute it around our application and you could definitely do it with the redux but what we're going to do is we're going to check it out the react context api and again there's many resources you can find but i just find this one to be most straightforward obviously we're going to do the coding but just to give you an idea we will first going to create a context object now once we create a context object then we have an option of passing some kind of default value or in our case we're just going to say that we don't want anything then we have access to two components one of them will going to be provider notice provider react component that allows consuming to subscribe to the context changes meaning this component will gonna allow the access to our context all throughout our application our react component three and then we have a consumer where the consumer will be in fact subscribing for that now obviously we're going to get to that one thing i would want to point out that this value property or prop is very important because this is where we're going to be placing pretty much all our application we are going to do this in a few steps where first of all we're just going to set up the context then we're going to start accessing the data from our array and last we're going to do that formatting like i was talking to you okay now first and foremost let's do a simple access and by the way i will gonna be returning here because we will look at few ways how we can access it because as we're working with the other component with a consumer component that also comes with a context object we have multiple options we can use the actual context where we're using context type we also can use the render tabs that is also an option notice this would also want to be one of the syntaxes we also have an option of actually using higher order components also something we're going to look at as well as using one of the use hooks or name of the hook would be used context but that basically be one of the hooks okay all right now let's start working on our setup first and foremost i would want to create a context however in this case i will not to place it within the pages or the images or components in fact i'll do it directly in the source so i'm going to say new file and we're going to call this context js now you can obviously name it with capital letter doesn't really matter next one up we would want to create a classbased component now at the moment it will not get a matter but i'm going to show you in a second why actually i'm doing this the name currently is context and that's not what i would want so instead i'm just going to say that this will be called the room provider and now i would want to set up my context api and the way i would do that i would need to come up with some kind of name so const and i'm going to call this a room context and this will be equal to react and then we have that method available where the method would be create context and i'm not going to pass any kind of default value so now i do have my context and if you remember now i had access to two components so the first one was a provider and the second one was a consumer so the provider was in fact responsible for allowing all the components in the component tree to access it now obviously we do need to wrap that component tree with that room context provider and then the consumer was used to access that information now i could technically do something like this where i say room context i do need to add obviously my value so context and by the way let me spell this correctly context i'm going to call this provider and then i need to use the value however the reason why i created the class because what we were going to do is we were going to set up the state here and then we're going to place all our information in state create methods that actually operate with these state values and then we're going to pass it down to the value because this will give us way more flexibility now the kicker here is that not only we can pass like let's say a simple string of hello in fact we can pass the whole object so that is the case where we're going to be working with a state so how this is going to look like i do have my room provider so instead of wrapping my whole component tree with the room context provider and then value i was going to set it up here within this room provider so within that specific class so let's slide that we're going to be looking for the context then the name is provider and at the moment i'm just going to set this equal to a simple hello okay now nothing fancy here now let me make sure that i do close it so i have room context then i need to go with a provider but i definitely 100 sure need to make sure that children are being rendered and this actually made me mess a bit so let me close it properly and then once i have this room context provider that i actually accessing from my room contest but since i'm going to be wrapping my whole component tree i do need to make sure that i'm accessing the children now the children in the classbased component are this dot perhaps and the name is selfexplanatory children so this would be the provider then we also do need to create a consumer because we would want to access the data now the most simplest way would be const room consumer again name however you would like consumer and then we need to use the room obviously context since that is the context we created and then set this equal to a consumer now last but not least i would want to export them and at the moment by default this is exporting room provider and that's not what i would want so what i'm going to say is that they're just going to be a simple class and nanowires is going to export it like so where we have the export then i'm going to say that i would want to export room provider now that is obviously the class that we just created second i'm going to export room consumer and last but not least there's going to be a case where we would want to use the whole context so that's why we're going to actually export as well room context and obviously we're going to go one by one where some cases we would want to access room context in some cases we would want to access room consumer now once we have exported all this then what we can do well i could technically go back to app.js and just wrap my whole component tree but since i already have the react router done it would make more sense if we're gonna head over back to the index and in fact wrap everything the router the app in my provider okay now in this case i do need to say import then i'm going to be looking for the name export since obviously we named them and the name was the room provider and then this will be from the context which is in the same actually directory so let's access the context and now let's wrap it let's say room provider will going to wrap around the router as well as the app so i can select these suckers here get them out and copy and paste it and now i do have my provider at the moment nothing magical happened i understand this might be a bit of a bummer where you're like okay this i mean what is happening here we did all this work and nothing magically happened yes that is true but just to give you an idea what would you normally do so let's say that you have multiple components that would want to use some kind of data well eventually you would want to lift your state now what do i mean by that well let's say that we have a route with the rooms then i also have the home and then as you're noticing my services are featured rooms that we're going to create later on will be within the home so what you normally do you would set up the state somewhere here and then you start passing down you would be like okay so i'm going to pass these functions as well as the properties that i have on the state down to rooms component or the home component and what's happening that as you're doing that you're passing you're doing basically a prop drilling where you're passing those props down unnecessarily because the component that's going to be using is just sitting pretty much wrapped in three other components but you do need to pass it through so if i start with an app i'm going to have to pass the home home is going to pass down to featured rooms and then so on and so forth so what context allows us to do is avoid that step where even though the section that i'm going to be using my data will be in fact within home i don't need to pass anything within a home so we will gonna avoid that step now what do i mean by that so let's say we have the home and like i said we will have to create a featured rooms section we're all going to be looking for at a featured rooms then normally what would you well you would pass it to a home then from the home you're going to find wherever yours component and then pass it down but i'm going to show you in a second how we can actually omit that step so within the components let's create featured rooms and at the moment we're just going to be rendering obviously that one silly thing that we had remember when we passed basically what within the context we had a simple hello so first we're going to access that and then of course later on we're going to set up everything properly where we will going to access whatever we have currently in the state okay now let's head over to the featured rooms this will be a functional component or i'm sorry no class based component so let's say and first of all i do need to name this properly so let's rename js that's the first thing that i would want then classbased component voila here you come and then hello from featured rooms right let's save that then what i would like to do is head over to the home imported so right after services import featured rooms and let's say that this is housely in the same or no it's not in the same folder it's actually in components folder then within the components folder we had featured rooms folder let's save this and then right after services let's check it out what do we have so we'll have a featured rooms and we're rendering them now at the moment again i just have one silly hello from featured rooms again nothing magical happened yet but let me show you where the real magic comes in where again we have multiple ways how we can access it whether that's going to be render props whether that's going to be hooks but the first one we're going to look at is where we set up the static name here is important where we have context type and we set this equal to the context that we just created now how this is going to work well this is going to work where we do have the name of course for the context that we created and we're going to set the sequel to now there is one easy mess up that i did where i would probably want to actually create this like this where this is going to be my value and now i'm going to have my hello then within the featured rooms like i said first and foremost we would want to import this we would want to import my whole context not just the consumer but the room context the way we're going to do that import then we're going to be looking for room context from and now we're going to go up the tree we're not the tree actually directory then we're going to be looking for components or no not components sorry context is actually in the same one or where it is let's figure out so we have context right here i don't know i'm staring at it but for some reason i cannot see it and then like i said we would need to follow these steps where first and foremost we're going to set up the static context type and this will be equal to our context all right now let's write that let's say static then proper naming was what context type context type is equal and now we're setting this equal to a room context so that's the first step now the next step is i would want to access this value so in this case i'm just going to say const and we're going to set this equal to a simple value now if i want to access this i need to use this dot context so this dot context and why don't we right away do a console log so i'm just going to say first of all value and why don't we do also here where we're showing what we have so i can just add a curly braces where i want to access the javascript and the moment i save it check this out now i know that it's hard to see but here in the bottom i do have my hello and in fact if i'm going to head over to my project my recording and if we're going to do inspect you're also going to notice in the console where i have the hello now this is magic because we actually went around the home page we went around whatever other component would be there so we didn't have to set up anything in the app.js pass it down and then in fact access it we directly access it using the context api now if i'm going to change that and if i'm going to say i don't know hello world now check this out now what i'm going to have here is hello world so whatever values we're going to be placing there we're going to be accessing of course of course the string is the most basic one that we can use like i said why don't we check it out would we have an object because let's say that i'm going to have like some i don't know greeting then within the greeting i'm going to say hello and let's also use name and then we're going to set up john now in this case i don't want to pass here the string instead i want to pass the object and then we have a few options we could access properties one by one so i could set up in my new object let's say a property by the name of greeting and the value is going to be coming from my state object so let's write this dot state and whatever property name so again since i'm looking for a greeting i could just type here greeting or i could use a javascript object spread operator where instead what i'm going to do is i'm going to select object whose properties i would like to copy so in my case that is going to be state and then i'm just going to type here dot this dot and state so in this case we are going to copy and paste all the properties that we have within the state object now currently we have two of them but of course i could add 10 000 of them and all of them are going to be copied now at the moment obviously there's going to be big fat error now the reason for that error is because within the featured rooms i'm right away saying okay so get me the whole value now that is not what i want since right now i have the object there so let me delete that let me rerender and check this out so what we have here is greeting hello and name of john that way instead of just working with the whole value i could say that instead of creating some kind of variable we can right away do a destructuring from the object that we're getting back again we got our own context it's important that you pass here not the consumer but your whole context set the equal to the context type and then you're going to have access to that context using this dot context and then like i said we would want to destructure what i'm going to say name and greeting and we can use maybe here name name john from uh hello and by the way we can probably change this hello as well let's say greeting now let's check it out and what do you see here well i have hello john from featured rooms so hopefully you understand the basics of the context api where most of the work that we're going to do be in fact within this context.js we're starting from next video we will going to get our rooms and we're gonna set up them in a state and then we're gonna pass them exactly the same way down and our whole work is gonna start where we're gonna create a bunch of functions here that we're gonna work with state and so on and so forth but these would be the bare bones of how we can start working with a context api that creates provider and consumer we wrap the provider within our component tree or component tree gets wrapped with a provider and then we have multiple ways how we can access it so we looked at the way how we do it within the classbased component now this is important you're not going to be able to do it in a functional component this is the reason why we're gonna check it out other options as well but this probably would be the most simplest one in class based because the render props is a little bit i mean just takes a little bit of wrapping your mind around it but static context type get the context that you have and then you have access to whatever you have currently in your context once we understand the general idea behind the context api why don't we tailor it to our application so we're gonna do our setup i will gonna get rid of this greeting as well as name because at the moment we're gonna do a later setup anyway and i'm just gonna get rid of it just remember that we were gonna have to use this that context in order to access it then we're gonna head over back to a context.js and as a side note if you are really just passing one string you could do something like this however it doesn't really make sense that if you're going with all this setup just to pass down one string okay so in most cases this is exactly what you're going to see but then remember that if you're passing here the object you do need to have a two sets of curly braces otherwise this is not going to work that's the reason why it's probably more useful to place that string within the curly braces so then at least you understand how would be the general setup all right now i also want to add different values in state but before i do that why don't we import all the items that we have in the data and like i said i do have it as a default export so if we're going to check out the data all the way on top you'll notice that export default and that means that we could name this however we would like but i will gonna name these items again the reason why i'm naming these items when we're gonna be accessing the contentful it will going to be placed on the property by the name of items that's the only reason so let's do from now this will be exactly in the same folder so we're just accessing the data and then before we do anything i would want to change some values within the state so there's going to be rooms property which will stall all our information about our rooms then we're going to have sorted rooms now the reason for that is when we're going to be filtering our rooms this is the array that will going to be rendered but then if we would want to get let's say information about all the rooms that's when we're going to be rendering our original rooms array okay now after that we have featured rooms featured rooms will be in home these three rooms and at the moment again this will be set to featured rooms and then we're going to set up here a empty array now last one here we're going to be loading and by the way when we start setting up the filtering there are going to be more properties in a state but i just don't want to overwhelm you so why don't we start with the first four which allow us to complete a big part of our application and then once we get to filtering and sorting that's we're going to set up more properties here so let's set uploading to true now as we're getting locally data as we're getting this data locally of course this is an overkill because we'll have instant access to our data but like i said our general goal is to set up everything where we were going to be getting this using the external data so eventually at the very end we're going to have the function let's call this get data and we're going to run that function when the component will get amount and what we are going to do right now is obviously we're just going to access the these items directly from our data but there's a reason why i'm not setting up directly in a state so again i want to show you how we would do it later on anyway when we're accessing the external data and currently we're going to do it with our local data however what i would like to do is once the component mounts then we're going to make sure that loading is in fact now at the moment you're not able to see that but once you refresh the page again because this is getting instant access once actually you would have let's say some kind of slower internet connection you would be able to see the gif that we're going to be placing later on okay now we do have this get data that we for sure are not going to do anything right now but i would want to set up the lifecycle method so when this component mounts so component didn't mount then i would want to update these values in a state and that's when we're going to update this whether this is going to be true or false so first and foremost why don't we set up component did mount then within the component and mount there is going to be a let rooms so that will be my variable and i'm going to set this equal to this dot and function that we haven't created now this function is again format data and then we're going to set this equal to a items and again once we're going to get external data i know i keep on repeating this book but this will going to make much more sense later on as we're getting this external data currently this function will just gonna work as a formatter so we're gonna be getting all the items here so we're passing them down into this function and what i would like to do is eventually just to get a normal object where my data structure is not like this okay because this is going to be much more easier for us to work with so obviously you understand that next thing we would need to set up this function so i'm going to say format data now this format data as a parameter is just going to get some kind of i mean you can write array but i'm just going to call this items but of course understand that this is the argument where we're actually passing our data that we got from the items and this is just the parameter that i'm writing here okay now what i'm saying here is let and first and foremost i would want to loop through my items that i have loop through the data that i got here so first and foremost i'm going to say temp items temp items this will be equal to items map so i'm iterating over my array and each and every item here i'm going to call this that this will going to be my item now there's going to be a quite a bit of destructuring so for sure i'm going to create a curly braces and the return is going to be here at the very bottom now first and foremost i would want to access this id so each and every item we're going to have the system property and then this id property on it okay now the way i can do that i can just say okay let id is equal to item so each and every object we're gonna have systems property will gonna have the id property in there now that's first one then i would want to get those images because like i said accessing these images this way we have images array and then one object second object third object doesn't really make sense so you can say let images is equal now item will gonna have what well the image is in fact sitting within these fields so we have the fields then within the fields we have the images so this is the reason why we type fields then we type also images and then i need to map over those images because again each and every item there was in fact an object so what i can say is each and every item you will gonna have what well i could just return what i had in there right so each and every item has fields file url but what i'm interested is only this url so what i can say as i'm mapping or looping over this images array just return me image fields file and url and that's it now our array in fact which is going to be simple array with all these values then i would want to create a new room object so i'm going to say room this is just going to be simple object however to access all the properties that are within each and every item fields property i'm going to use dot dot and item fields and again if you remember this is javascript object spread operator where within each and every item we do have the fields property now the fields property is already object itself with more properties so what i'm doing here is i am creating a new object and i'm just going to copy the properties from the fields object and then after that once we have copied all the properties we have two options if that actual property is already within the object if we're going to come up with the new value we're going to override that property now if that property is not within that object well we're just going to add that property to our new object so in our case we would like to add two properties one by the name of the id and the other one by the name of images now what happens though images is already there within the fields remember images was already there now the problem was that images had this nested structure however in our case we already have flattened out that structure so what i could do here is i'm going to say there's going to be an images property now since that property is already there essentially we are overriding this and i could just say images like so where i set this equal to my variable but please remember that of course we're using es6 so i could just write here images that's it that would be exactly the same like we just wrote previously and then after that like i said i would like to add the id property now since the id property is not within the fields as you notice scroll up and down you're not going to notice this id property because it is sitting within the systems that's when we are creating a new property in our room object so this is our room and what i would like to do right now is just return now room and what happens well i'm getting back this temp items correct so i'm looping over my array i did all this destructuring and reformatting now the last thing from this function i would want to return temp items and then next one up since we are obviously calling this function so i'm saying this dot format data then i'm passing the array that we got from the local data and i would want first of all console.log just to show you what is happening with a rooms okay and then after that i'm gonna kind of give you a brief idea of what actually happens okay later on when we're gonna get this data so i'm all gonna head over to a recording and now check this out i have an object which i'm constantly logging with 13 items and now notice what we're actually rendering now this makes much more sense right so this is more cleaner where each and every item is just an object now it has the breakfast capacity all these values and check it out the images again this is not a nested object anymore we access everything here that we wanted which in fact is just that url and just to give you again i'm going to repeat this probably already for the fifth time but we were going to have this get data now once we're going to get get data or once we're going to run get data we're going to get our data then we're going to run this this format data in the actual first function of by the name of git data and then we're just going to run this this dot get data again this will be at the very very end but i'm just explaining why we're going through these actually steps because what i would want to do is run this one where in fact it mounts again it would be much more easier to for me to say okay items pass in the rooms but we would have to do all this extra work at the end of the day now the only difference is where we're calling this format data and the way this is going to work we're going to say okay so we got the rooms awesome and now i want to work a little bit more with the information that i have because notice not only i'm looking for the rooms i would want featured rooms as well as i would want to probably set this loading to false because what i'm going to do is later on we're going to pass this value down and the component is going to check are we still loading the information if we are loading then i'm going to show the spinner if the information is there then i'm going to display the items okay now the way this is going to work first and foremost let's get to featured rooms and now we're already working with our normal object and when i say normal of course what i'm saying is this is just going to be simply to access so that way i can say featured rooms is equal to rooms since obviously we have access to it and then filter it out whatever you have for the featured rooms so like i said there's going to be property with the value featured and we're just checking whether it's true or false so i'm going to say each and every room if you have room featured if your property is in fact equal to true you'll be added to this featured rooms array and then we also might as well just do the this dot set state so let's write this dot set state and now we would want to change the values and the values we want to change is for the rooms is also for the sorter rooms feature rooms and loading now at the moment at the very beginning sorted rooms will have all the information the same like you would normally get the data so since we would want to display initially all the rooms they were going to be exactly the same as we start filtering you'll see why we're using the rooms but what i would like to do right now is this that's the state again we can use the s6 where i don't need to say rooms is equal to rooms since i obviously named it exactly the same then i'm looking for featured rooms which also is named the same then the sorted ones is not exactly the same name so i do need to write that sorted rooms will be equal to my rooms that i just got and last but not least we'll be loading off a false again not going to make much sense currently this loading falls because we're getting our data locally but once we're going to be setting up getting the external data it does matter that we in fact use this loading flag where if the data is still loading we're not trying to render something okay that would be our initial setup and now check this out we do have all this access in the state so just to show you and we're going to do it in the next video the actual proper rendering but at the moment just to show you that we in fact have the featured rooms i can just say that i would want to access this so i can just call this as a variable const and i'm going to call this featured room so i'm accessing that value from the featured rooms but i'm right away going to give it an alias or i'm just going to rename it i'm going to say that this will be equal to rooms and i'm getting this from where where i'm getting this from context and now let's check it out where if i'm going to do console log let's cancel log and whether we all gonna get rooms and let's see what we're gonna have and whoa i have an empty array okay let's go back to context and figure out what went wrong let's scroll up and i can see that notice here i didn't use featured should be featured not feature now let's save that again and voila we have our array with three featured rooms so now we can use this information in fact to display them before we start working on a logic how we're gonna be rendering all the featured rooms we will gonna use two components one by the name of loading and the second one by the name of room and as a side note like i said both of these components we will gonna reuse in different parts of the application as well let's say for example room is gonna be rendered also when we are rendering all the rooms not just for the featured one so what's going to happen right now is we're just going to set up the bare bones for rooms application where there's just going to be one text then i'm going to render the rooms that are in the feature rooms and then we're going to work in the actual rooms component all together okay now for the moment i just want to create the bare bones for uh rooms component and set up the loading component first and foremost let's call this loading js and for that this will be a just a basic functional component rfc than what we would want to pass nothing as a prop but we would want to have a div by the name and we're going to give this a loading that is something that i already set up within my css we might as well have a heading 4. let's write rooms data loading dot dot dot and then i would want to import one of my gifs you can go with uh gears if you want because i have two of them basically i have gears and i have the other one was the arrow i think i'm going to go with the arrow so if we're going to head over to the source if you'll notice the images within the gif i don't know whether you can see that but basically i have one of them which is an arrow and the second one which is a gear so this is really up to you which one you would like i think i'm going to go with the narrow so i would want to import that so i'm going to say import i'm going to name this loading gif like so and then from and now we're obviously looking for my images so i'm going to say not data we're going to go for the components no not components images then gif and then we're working with the name is loading and arrow arrow and then the extension is gif and then right after the heading 4 we're going to have the image then for the image we're going to use loading loading and we're going to call this gif then full alternative i don't know we can just skip this i don't think this is going to be doing a bunch of bad things if we're just going to skip alt altogether then i would want to import that in my featured rooms so import um let's call this loading of course loading from and that and we have obviously the loading component and instead of just looking for the rooms right after the ending text and just say loading and let's check it out whether our gif is going to be working let's save that and all the way in the bottom notice this is going to be my loading gif if you're interested again in the css same old spiel the difference would be that this class will be in my globals because like i said i will going to reuse it one more time so only thing i did is text capitalize line center and margin top ones three that's all what happened here close the app css and like i said i would want to create a room which at the moment we're just gonna have some dumb text like hello from room but then starting from not next video next video we're going to set up the functionality in future rooms but then one after that we're going to actually work on the rooms component and at the moment this will be a simple functional component rfc we're going to call this room and let's just go hello from room let's save that as well we can close at the moment then we can close loading we don't need it anymore as well as for the time being context is also not needed let's close the sidebar right after the loading why don't we get the rooms let's call this room or not room say room from and we're gonna go with uh obviously my component by the name of room just so i can see that everything is being rendered properly and let's say right before loading i would go with a room component that i currently have let's save that and i do see my little hello from room right after the feature room so i know that i successfully created both of these components well one of them completely and the other one just has the bare bones and now i can start working with displaying all the featured rooms that i have in my application we're all going to start working on our logic just in a second but i did i forgot that i do need the featured rooms title meaning i do need to import the title component so let's do that we'll say import and we're looking for title component from and then where it is it should be in the same directory so let's just write title and let's save that okay that would be the first step then after that remember when we were working with a context i was telling you that we were going to use the loading again at the moment local data doesn't make much sense later on we're going to be getting our data externally we're all going to make a whole lot of sense so not only i would want to get featured rooms that i would want to rename it as rooms but also i would want to get loading i'm going to say get this property from the context okay now once i have that i don't care about console logging anymore i would want to loop through my rooms and in fact set up right away the jsx so i'm going to say rooms and again we can do it multiple ways we can do it right in the jsx or we can just do it separately outside and as always with all my projects i'm striving to kind of show you multiple ways this is what i was talking about where we're going to have a multiple options of how we can work with context now you can pick and choose which one you like of course i would rather probably with class based components stick to this one instead of using render props but i want to show you multiple options just in case you're like hey you know what maybe the other one makes sense so previously we did our rendering within the jsx just remember we can do it outside as well so we can say rooms map so i'm gonna be again looping over my featured rooms array each and every room will going to be an object of course there which i'm passing here as an argument in my callback function and what i would like to return is not just a simple room but i'm going to wrap that room in a room component that we just created i do need to have the key since there is going to be list and each and every room remember had the id that's something that we didn't change the only difference is we don't need to use the system anymore to access it and then we were going to say that we're also going to pass a room prop with all information about that specific room okay so we're passing it down then i'm gonna close this out i would want right away to get rid of this room because usually what happens i render the list and then there's an error because there's just one simple one and we also would want to restructure this a little bit so what i'm going to say here is this will be section instead of div first and foremost and let's type here section as well then the section we're gonna have a class now the class name is again important because it adds all the styling featured rooms like so then we're gonna have our title like i said title and the title is expecting a title prop title prop will be featured rooms that is the text that i would like to display here then after the title i'm going to set up another div which we're going to have class name of featured room center again this is for the whole layout with the grid so this is important so div so class name or i can just go with featured featured rooms and we're gonna go with the center like so featured room center and then within this div i would like to get my ternary operator where i'm gonna check if the loading is in fact in my context true then i wanna show this spinner and the moment i'm gonna get my data obviously loading will be false and then we're gonna be displaying all the rooms okay so that way again we're not rendering an empty array which would be the case if the loading is true because only featured rooms will gonna have some kind of information once we're done with loading once we're done with getting that data and in this case what i would like to say is that loading so i'm going to check the property that i'm getting from the context if you are true if the data is still loading then we're going to be displaying this loading component that we created in the last video and if the data is there then just do everything that we did here where get me this rooms and just render it here all right now let's save that of course at the moment we should have already some kind of rooms and at this point saying all constant oh yeah so that is the issue i should use let here because the moment i use const i wasn't able to do it and what i have here well at the moment i do have two loadings because i didn't delete this guy so let me get rid of that one but i do have my three rooms because obviously once i run the component did mount then loading is set to false but let's imagine that we're waiting a long time and i'll do that by just passing through then if we're just loading then the user is going to know at least that okay so we are getting that information sometimes again probably you could say well i don't need this flag i really don't care this is really up to you but if you are doing some kind of data fetching i think it makes a little bit more sense if you have some kind of flag where you are rendering only when you get that data awesome we have ourselves featured rooms the only problem is that this is currently a far cry of how our application would look eventually so i think we can start working on a room component because this is where we're going to be displaying all the information about that particular room whether that would be the price whether that's going to be image and naming as well as we're going to set up this link where once we click on a link we will be directed to a specific single room page where there's just going to be information about this room obviously we're going to work on this component after this after we finish with the room but in general this is the idea we're all going to have our featured rooms and then each and every room will be displayed as a component and by the way like i said before this component the room component we will also going to reuse in our rooms page so we're not gonna have to do double the work but in fact we're gonna do just once we're gonna build our own component and then we can display it all over the page okay now after i have rambled on and on about the actual room component why don't we start building it we already have the file room js and here i would want to start firstly by importing the link now link will be imported obviously from the react rotterdam and the reason is very simple because i showed you that i would want to link it to a specific single room page so link from and then we go from react router dom of course that is our import and why don't we start working on what we're going to display within the room now i know that within the featured rooms what am i doing well i'm passing the prop by the name of room and then i'm assigning everything that i'm getting for each and every room so in the room component i'm going to destructure first of all the prop that i'm getting first and foremost and then i would destructure a little bit more where if you want to check it out what kind of rooms are we going to be getting or what kind of information we as always can do a simple console log or you can use the reactos this is really up to you i'm going to use the console.log this time where i should have three objects printed out on screen because obviously i have three featured rooms so let's head over to our recording let's see what we're gonna have and i should have in the console three objects so console and sure enough this is gonna be three object and what i'm interested is a few properties so first of all i would want the images more specifically the first one because that's going to be the one that's displayed now again this is really up to you this is an array with four images and the reason why we have multiple images because later on we're going to have a single room page we're going to be displaying a couple of those images and that was the reasoning there and then what i would like to display as the main image would be the first one then i also would want to get the name the slug that will be displayed in my url and then what else what else uh i think i will gonna go with uh price so price is right here so these are the things we're looking for each and every object and again the same thing we're going to work within the room page so what we can do here is const we already know how we can destructure using the s6 so i'm looking for name properties slug property images property which will bring me an array and price property here and in this case i can just say that i'm going to be looking for the room to be destructured so room prop and now we're destructuring and now let's start working on our return first and foremost this will not gonna be a div but instead we're gonna go with an article and i will gonna add a class name now the class name will be room again and this is something that we did already in the css so i will gonna get rid of this random text hello from room and first and foremost i would want the image container where i will gonna have my image as well as the actual link that will gonna link to a page to a different page so let's start with the div image container that will be the class and then let's start by placing an image so for the source i will use this images array and i'm going to get the first one i'm going to say images and then we're just going to say 0 since this is an array and we'll have access to that particular image now after that we have an alternative one so let's write single room and then let's save that and let's see what's going to happen and what you should see is these three images for each of the featured rooms now there's one thing that i definitely want to do right away which would be setting up some kind of default image because here's the case well let's imagine that i'm going to head over back to the data and i know that i should have this presidential room which by the way was going to be all the way in the bottom and the reason for that because i know that this is definitely featured so i don't want to look for feature that way and let's say that we comment this out let's say there's some kind of error where you're not getting this image from your data so let's do that and what you'll notice is that the single room in this case is missing so i cannot see it that way and this is not what i'm looking for and by the way i was actually very very lucky because this was also featured i didn't get the presidential so let me again show this room and then scroll a little bit more down where i'm gonna have my presidential so now i'm gonna comment this out and check this out i don't see the room right now i don't see the image because obviously i'm not getting it and what we can always do is set up some kind of default where if i'm going to head over back to the room js let me close the sidebar here i will going to import some kind of image any kind of image from the images and again this is really up to you you can obviously check what kind of image you're importing i'm just showing you how we can set up the default image so i'm going to call this default image and then we're looking for the images folder then within images folder we're not going to be looking for gif again random image that i'm just picking normally you would obviously research what kind of image you would want and here we can use the or operator so i can say get me the zero images or one images or whatever images you would want from that array however if it's not there if it's not at all in the array what we can do is we can just say just show me default image so that way you don't have these surprises where let's say you have your application and it doesn't make sense where you should have some kind of image but you don't so i think this is a better better look where we have at least some kind of image now i will gonna head over back to that and of course show the presidential there's no reason for us not to show it but this is going to be nice fallback where just in case we don't have that particular image let's close the data now next one up after the image i would want to show the price so still within this image of container this is important we will gonna go with div by the class name of price top and again this is important to keep these class names that's the reason why everything is going to be displayed this way and i would want to access the price so i'm going to say first of all dollar sign then we're going to be looking for the price like so and we're going to also display a paragraph by the name of per knight let's save that and check this out we have nicely priced displayed for each and every room and then last but not least still within this image container again this is important but not within this div of course let's work on our link so the link that will gonna guide us to that single page so how this is gonna work well first of all i'm gonna say link two and now here's the question so where are we linking well if we're gonna head over back to app.js notice what we had for the single room and i do need to close the sidebar right now just so you can see it a little bit better where the path for the single room was what well we had the path of course then we were heading over to rooms and then we had our url parameter where i'm just passing the name by the slug but of course again we can name this however we would like what's more important is what kind of information we're going to be setting up here so what i'm going to do right now i'm going to say okay so first of all i'm gonna have to create a curly braces because i will gonna have to use the variable and the variable by the way will be slug and then we're gonna set up obviously the template literal and we're gonna write rooms so first of all we would want to navigate to rooms and then within the rooms we're going to access each and every room that we have selected so this slug will going to allow us to do that now currently of course it will not do it it will just gonna show the url that's it we will gonna have to set up the single page in the next video so in the next video we'll see how we're accessing this information because what's really cool about react router dom or react router as a short one then we can access this so there's a reason why i'm setting up this slug because each and every room will gonna have a unique slug we could do the id but then we're gonna have to have some kind of number here and what i would want is to have a text that's the reason why i'm adding here the slug now this will gonna navigate to that single page but again nothing has been set up yet and then let's add a few class names here that will going to add the styling so first of all i'm gonna use again button primary and we're also gonna call this a room link that was just used to actually place it correctly and then let's add some kind of name of course features like so and then as i'm hovering i should see this link and if you're gonna check it out notice right now i'm heading over to rooms and double deluxe now what's happening of course like i said already probably three times we haven't done anything here within a single room page because we haven't set up any kind of logic where we're going to fetch this information from our context api and we're going to get that information about each and every room specific room and that will be displayed meaning if i'm going to head over to finished project you'll notice that of course if i'm clicking this is not just going to be single room but actually specific information about each and every room all right so this is going to be dynamic eventually currently at the moment this is just going to show this dumb text if i'm going to navigate back of course this is going to be the same however you will notice that the url is changing so we are going to a different url however at the moment we're just showing our single room page that we didn't do anything with it okay then still within the actual article but outside this div i would want to set up here the paragraph and i'm gonna add some class names here i'm gonna add class name of room info and then let's use the name here let's use the name and again we're gonna have to obviously navigate back and what you're gonna see is double deluxe family deluxe and pretty much each and every name of the room now last thing that i would want to do with the room is set up the prop types because we are passing the name the slug the images and it would be nice to have some kind of mechanism where we're at least checking whether the prop has been passed and the way we can do that in react or one of the ways how we can do that we can use obviously prop types so let's write prop types from and then we're importing this obviously from the prop types so name is prop types like so now once this is imported all the way in the bottom we are going to set up our prop types and the way i'm going to write that this is going to be the name of the component then we're going for the prop types like so but we do need to use the camel case here in this case prop types and this will be equal to an object now the kicker here is that a room itself is an object remember these are not just single properties so what happens yes the room has specific props but the room component has only one prop and that one prop in fact is an object so what we would need to do here is use uh shape from the prop tips so how this is going to work i'm going to say okay so there is one prop within my room component by the name of room then we're going to say that we would want to check whether this object has particular properties there and in order to do that we're going to have to use shape then within the shape we're going to set up the object and now we're going to go one by one and basically check our properties now first one was the name then here we're going to write prop types and we need to make sure that this is a string and we also need to add is required so that way if the string by the name of name will not be there then obviously we're going to have a warning in a console and i'm just going to copy and paste that i have four of them now next dude will be slug here which also will be string and also will be required of course then images is an array so in this case we're going to do a little bit differently i'm going to say okay images array then prop types will not be string of course because it is an array and we need to use array off and then we need to specifically say well array of what well and what we would want is to be array of strings so that way i can write prop types and we just say string so just make sure that this is an array of strings in fact and then last one is a price which obviously should be number so we can just write price and then instead of string we can just write number now let's save that and now we're setting up the prop types so this should be good as well as everything else is being rendered now our next challenge obviously is going to be working with the single room page but before we do that why don't we head over back to our recording just so we can see what we have done so far i will gonna close the console i don't think we need it and yes we do have our awesome featured rooms so now let's head over to the single room page and work on the single room page before we set up this single room page i would want to set up the function within the context that we will use within a single room page now the reason for that is because single room page will be quite big component so in fact i think we're going to do multiple videos on that particular component so why don't we split up even more where we're going to set up the functionality in the very beginning and that way it's going to be easier later on so first and foremost we're going to head over back to context.js we do have our component mount we have formatting the data and right after that why don't we set up a function that we're going to call get room now this get room function we all going to accept one argument by the name of the slug and here the only thing that we're going to do is in fact we're going to filter it and you can probably already see what is happening so there will going to be a way for us within the single room let me open this component where we will have access to the slug that we're passing from the room component remember we were using the link and we were passing the slug so there's going to be a way for us to access that slug and there's also going to be a way for us obviously to access the context and we already looked at one way and by the way we're going to repeat the same way using the context however later on like i still promised i remember that we're all going to have to look at multiple ways how we can do that but again since single room will be quite big the way we're going to access the context will be the same way like we did before where we use the context type because i just don't want to put too much information in the single room because this is already quite big then like i said we get the slug okay that's first and foremost and now i would like to filter it and get that specific room that has that slug that will be passed using the link so the way we're going to do that we're going to say let and i'm going to call it stamp rooms and temp rooms is going to be equal to our rooms property in the state however i wouldn't want to assign it in fact i would just like to copy the values that i have in my rooms array and the way we do that is by using the spread operator so again i'm saying there's going to be an array and now just like to spread out the values that i have already within this dot state rooms all right now once we have these particular values once we have array now i would like to use the find method to get the room that matches the slack that we're going to pass into our function and the way we do that is by setting up another variable then we're going to say temp rooms that is of course already our array we're going to use a find method and then within the find method we're passing in the callback function and within the parameter of our callback function we can access each and every item in our array now since it is a parameter we can call this however we would like so i'm going to call my room and in fact i'm going to use the arrow function and then what i would like to say is you know what get me the room that slug matches whatever we're passing into a get room function so let's write rooms log is equal to a slog let's save that now we have our function and lastly what i would like to do is return the rule okay now if you're wondering what would be the difference let's say between the filter and the find so define is going to find the first match and also find is going to be an object where within a filter you would need to essentially actually get it out from the array because filter is going to return the array so in my case since i'm just looking for one item i'm fine with just being an object and then once we get to the object then we're just returning back from our function now lastly i would want to make this available in my context so once we have spread out our this that state correct within the value what i could also do is add more properties now in this case the way we add the properties is by coming up with a name of the property so i'm going to say get room and i'm going to set this equal to a this dot get room function and this is how we can make this get room function available within the context and this particular function is going to help us to get specific room once we open up a single room page that was nice and easy we do have our functionality awesome now we're gonna head over to a single room and first and foremost we're gonna do quite a few imports now i'm obviously going to explain to them uh to you once we get to that particular import once we start using it while we're doing it most of them will be uh straightforward but let's say some of them i'm not going to spend too much time right now you'll see it as we're creating this component while we're using it and of course i'm going to return and then show you how we did that so first and foremost i would want to get some image so i'm going to say default bcg and then from and then we're looking for images again you can pick whatever image you like i'm gonna go with room one jpeg that would be number one then i do want the hero because we will gonna be displaying a massive hero and at the moment this will be a very basic one but like i said later on we're going to check it out how we can do that using the style component now this will be my hero so let's call this hero and then this will be from components of course components and the name i believe was euro then we do have the binary banner will be used display name so banner from and again same thing banner from the components then we will have a link which will link away from a different page let's say rooms because notice again we have the banner and we're going to have this link back to all the rooms page so again we're going to look for the room or link from and react router dom react router down and last but not least we will gonna have to get a context because within the context there's gonna be a few things first and foremost we will gonna have access to all the rooms that we had because we would want specific one and second one we want the function that we just created in the last video so let's go with room context and like i said we will use again context type that we already covered since this is a classbased component we already know that probably the simplest way would be using the context type now for the context type i do need to have my whole context the room context and that's the reason why we're importing here from the context later on we're going to have a functional components where we're going to check it out the other way is how we can access the context like i've already previously mentioned the reason why i'm not doing it here is because this will be quite a big component and i don't want to confuse you more than i already have all right now first and foremost i do want to show you how we can access the parameter the url parameter that we passed here by the name of this log and in fact this is very simple now we have a few options how we can do that in the classbased component and by the way we can also do this in a functional of course i'm just going to show it with the classbased one where remember when we were working with the classes or classbased components we had an option of creating a constructor where we had the props and we also had super by the name of the props and now we can do something here whether it bind functions or set up the state as well as we had a life cycle method when the lifecycle method was well one of them at least was component did mount and now let's notice something interesting so what's going to happen is that i can in fact access here something that react router is giving me and how we can do that well first of all let's look at console console log and let's type this dot props and by the way i can tell you right away that this is going to happen exactly the same in the component in month i will gonna tell you in a second why i'm showing you the component didn't mount but for this time being let's just save this and once we're going to head over again to our recording we'll notice something interesting but by the way before we do that let me just uh elaborate that nowhere in our application we're passing this directly to a single room because notice this obviously is just a link so it's really interesting it's not like i went back to app.js and passed somehow here the prop the prop is being passed by react router just remember that that is kind of important now if i'm going to do again inspect check this out what's going to be in the console now currently there's nothing there right so currently our console is just a bunch of complaints that we're not using some kind of variable that we set up but check this out i'm going to click on features and i'm seeing this prop and i definitely didn't pass this prop myself now what's really cool that this is a react router and it gives us what well it gives us access to bunch of things now what we are interested is notice we have an object and we have history location match what we would want in this case is get this particular slug because remember this is what we set up the function for where we will gonna pass that slot and by the way this slug will be specific for each and every item that we're passing so we're gonna have a match then within the match we're gonna have a params and what do you see within this params object i see the name the name is double deluxe so just to show you that this obviously would be unique remember this was double deluxe let's head over back and let's go with let's say prudential just so we know for sure that this would be different now again there's going to be another object again we're going to look in the same place we're going to look for the match and then what do you see within the match params i see the slug by the name of presidential room so react router gives us a very very nifty way how we can access in fact this parameter so this is exactly what i'm going to do and the reason why i'm showing you a component did not because in our case i'm accessing this specific room here from obviously my function from the context now there's going to be cases where you're going to be setting up a different kind of api call where remember eventually we're going to set up everything using contentful so in our case we could say that we were going to get all our information from the contentful and we're going to store it here in context but then there's going to be cases let's say you want to make a single call because obviously what you need to understand is that this would be a single call so what do you do well you would set up some kind of api call where you're just getting the specific room about that specific one page now in our case we are already doing this just by accessing the contacts but this is not always going to be the case there's going to be a case where you specifically need to make the api call now the reason why i'm showing you this that you most likely were going to do it with component mount and that again is where you can access this console.log this problem now i'm not going to console.log this right now i'm just showing you that this obviously works and i'm just going to comment this out for now just for your understanding and yes you could technically just pass it here grab the information from the state you can do it let's say you're going to access that slug and then you're going to make your api call but i'm just letting you know that you still have access to this component that mount to the props to any props but more specifically in our case what we want is access to the props that react router dom is providing now after we have rambled on about the props so we're going to comment out just so you can have it for your reference and what i would like to do right now is set up this dot and state now within the state i will have a few properties that we will going to reuse all throughout the project so first of all i'm going to set up the property by the name of this log now this will be equal to this dot props like i said bunch of objects match params that was the path and then last one will be slug and again remember this is unique for each and every time we're going to be opening up the single room page this will be unique because we're getting this for each and every room this is obviously different and then i also would want to set up the default bcg which will be exactly the same name that i had here default bcg again this will make sense a little bit later this is just to be a image so we're going to get there all right now last i would want to access my context so we can do outside the constructor we can say static static context type will be equal to room context now we already knew that so what we can do is we can save that and now let's notice something interesting once we successfully get our context from the room context why don't we eat this structure and more specifically why don't we destructure the function that we had by the name of guestroom so in order to do that i'm going to say get room that obviously will going to be coming from this dot context that's number one and then i would want to run that function and i would want to run that function and remember we had to pass in this log so the way we're going to do that we're going to say const and we're going to assign it by the name of room i'm going to say room and then we're going to go with this dot and then we're going to say of course first we need get room let's go with get room and then this dot state and slug and now i would want to console log the room to show you the issues that we're going to be having and then we're going to decide how we're going to fix them so first and foremost we have console log so we're looking for the room and now let's check it out when we go to the console notice we have undefined first and then we are only getting the room now what's even worse is let's say that not only we are navigating to single room from when we click on the room component we can also obviously navigate here in the url so not only if i'm going to be going for presidential but let's say i'm just going to type one check this out now i'm going to have two undefined so we would need to figure out a way how we would catch this undefined then render something first if the room is undefined and then only when the room is defined eventually then we would want to render information about that single room knowing the issue is the first step next we would want to fix it of course but before we do that let's just see how our application will perform if we try to access this room when it's undefined now we know that we cannot access object in general but we can access the property and i already know that there will be the property by the name of or name yeah by the name of name and of course at the moment there will be a big fat error because it says well i cannot read that properly now we could technically just again refresh and let's see how this is going to work if we go directly from our featured rooms page so once we click it over here everything is awesome we are accessing this double deluxe all this is fine however the issue will be once we refresh then of course we're gonna get there the same way if we're gonna try to access some kind of room that doesn't exist again we're gonna have a same error because the room will be undefined so how we can fix that well we could set up the if statement where we check whether room is undefined that means that either it's still loading or there was an error and then we render something so one part of our application and then once the room is actually defined then we're gonna destructure it and show the information about that specific room very simple so why don't we do the if statement and we're just going to say if room is undefined then we would want to render something now that something will be a narrative so i'm going to say return then we're going to go with error and not console.log error but in fact we're going to go with error div error div and then obviously this is the class that we're just accessing from the css as well as we would want to maybe place some heading three no such room could be found now please understand that if you're doing some kind of apa call api call from the component didn't mount then you're probably going to write like loading or something like that now the reason why i'm mentioning that because people sometimes do a different setup by using the code that i have and then they write in the comments that well you know what it didn't work well yeah it didn't work because you're doing a different thing in my case i don't have an option of loading i have only option of if that room is not in my context then there's no way i'm going to be able to find that room now if you're just waiting for your component to mount then probably if it's even better set up the flag within the state where once you actually get that specific room get fetch that information then in fact you render in my case again there is only an option of either that room is in my context or not and that's it so in that case i'm going to write no such room could be found then we have three dots and then why don't we set up the link right away so the user can navigate away from the page so link two then we're gonna do i don't know rooms and then let's write class name will be btn primary like so and within the link why don't we write uh i don't know back to rooms and let's see what we're gonna happen then in our application we notice that there is no such room all right then if i'm just gonna type and write deluxe i will gonna get this deluxe because initially yes it will be undefined but then we're gonna get that information about that specific page so not only are we gonna have an error if that room is not in my context so once we're gonna type that no such room could be found and then we have an option of actually navigating back to the rooms that will be the first thing now we would want to set up here our actual div that will be rendered if everything is successful so if the room is uh defined first and foremost we would want to destructure it so first of all i'm going to be looking for that name property then we're going to write for description so comma description then we also have capacity as well as size and again these are just properties that i have on my room so price extras uh what else we have breakfast breakfast as well as we're gonna have pets and images and all that will be in the room so images and that will be in my specific room object and why don't we actually change also what we're going to be returning so this will not just be a simple div we're also going to use a hero and for the time being we will going to use our hero class however in next video we were going to look at styled components and how they improve our application so we're going to set up the basic setup and i'll show you the pitfall of this kind of setup so rooms hero that is the class that i already used before for my rooms now within the hero we are going to go with the banner and for the banner title in this case we are going to set up the name that is for the room so that way i can say that i'm sorry not two but title and then why don't we set up right away the template strings and we're just gonna go with a dollar sign i will gonna be looking for the name of the room and i'm going to say that this will be the name of my room then within the banner i also want to place a link now the navigation will offer user to let's say navigate rooms why don't we also add right away class name i don't know um button primary of course button primary like so and then within the link we're gonna write i don't know back to rooms again back to rooms let's save that and we'll see what will happen and again in this case since the slug doesn't match any rooms that we have we have no rooms can be found if i'm going to change this one to deluxe of course i will gonna get this nice hero component with our banner and then this will be the name of my room however there is another issue now this issue is very simple where each and every time we're going to be rendering that specific page the image will not going to change now why it's not going to change because we're just using a simple class where i have the room's hero class and remember we had the case for the app css and then within the app css we did have somewhere hero and i think it will be easier to find it using find so why don't we type hero and sure enough we have our two classes and you might be tempted to say okay of course i understand yes at the moment because we're rendering room zero we're just accessing that one image so maybe we could set up a bunch of classes here and each and every class will be targeting that specific image and then each and every time we're going to be going to that page we of course will going to render a different image but again please remember we will going to be getting this data from where we're all going to be getting from contentful and that way it's going to be impossible because those images will not be stored locally in our application or on machine in fact they're all going to be stored in contentful and we're just going to access them dynamically so even though you would want maybe manually to add whatever classes you have you're not going to be able to access the images that's number one number two you probably are going to be wasting a lot of your time because every time what you're going to change something about your data you're going to run back over to your css and add the class so there has to be a better solution and that better solution will be styled components which allow us to insert this data dynamically so this is what we're going to do in the next video and this is what i'm saying where this component is going to be quite big as you noticed first we dealt with an issue of actually accessing the slug now we fix the error and now we're going to fix this hero we're all going to have the styled components hero that we'll access for each and every page dynamically the image we would want so the image will be changer that big background image and then we're gonna run the rest of the information regarding that single room okay we know our next task is to create the hero component to be dynamic now the first things first why don't we take a look at what are styled components because this is exactly what we're gonna do now i'll tell you right away that i'm gonna be skipping over them a lot because i already have a separate course on styled components so i'm not going to go through each and every detail what is happening with style components so we're going to look at the general idea and we're going to customize it for our example if you want to learn more about style components check out my course on udemy and you're going to know everything that there is to know about style components now first of all what is the idea well the idea with styled components is the fact that we can attach styles to the component and it will be right away rendered now there's a bunch of advantage with styled components and the simple fact that your css will not going to be colliding where each and every style component we're going to have unique class also we have access to variables because in fact what we're doing here we are writing javascript now like i said this is just going to be brief over you so first and foremost if you ever want to find out anything about style components this will be installedcomponents.com then if we head over to documentation we notice also the api reference and what they're telling you is that first and foremost the default export will be styled then once we import styled from styled components then we can start using that style by writing whatever the component name would be and usually the uh simplest example would be some kind of button and then we use the styled which would be the default export that we have and then the name of the component now in this case it could be another style component this could be html element this could be really anything you would want in fact this could also be a react component and what happens here once we have these backticks which are template literals then we can just write whatever css we would want but what's really cool about this that since these are template literals we in fact can use javascript in here and what we're all going to do here we dynamically we're going to access our image and place it within our background all right now what do we need to do first well we would probably want to get the styled components and first and foremost if we head over to the basics we just see this is the install we would need to create i will gonna head over back to my project i will gonna clear everything and that's not what i would want i'm gonna clear everything in my integrated terminal we will gonna install style components right away and we will gonna create a new component now first of all we're just gonna test it with the button but i know eventually this will be styled hero so that will be our other component the hero component only this one will be using styled components and then again let's head over back to the api like i said i will i'm going to be skipping over a bunch of stuff and remember we needed to import style from stealth components so import styled from style components and notice something interesting how we don't need to import react now there's going to be cases where you're obviously going to combine them where style components will be used together with react component but in this case this is just a styled component however it will perform uh a lot like a react component so let's do npm start now this is going to start up obviously our dev server i can close the integrated thermal i don't need that from and then we're looking for styled components because we installed them people then next one up why don't we create our simple button and by the way i will gonna render this somewhere why don't we head over maybe home and let's grab the styled component just so we can take a look first and foremost how this is gonna work so import now this will be styled component however i do need to make sure that i'm exporting something because at the moment i'm not importing or exporting anything apart from the style so in this case i we're going to set up const why don't we call this whatever we would like but we're just going to call this simple button then we need to write styled and again what kind of html element in this case we would want and i'm going to go with button and here let's add i don't know color red and background green something like this background green and we do need to of course so we're going to say export export we can do either named or default export so in this case if we're just going to say default simple button will be exported so far so good then next one up we would need a home js and we can name it again whatever we would like so in my case i'm just going to name this button from and then we're going to access components and styled hero all right now somewhere all the way in the bottom right after featured rooms why don't we look at the button that we just created with style components and at the moment we don't see anything now the reason for that because obviously we have the button remember we created the actual button so we would need to create some kind of text so whether that would be i don't know hello or whatever so we're going to create hero or hello and all the way in the bottom i could see the little button here notice i obviously can click it this is an actual button but nothing is happening now what's really cool here is that like i said this is javascript at the end of the day so i could pass some kind of variable i could set up i don't know const red and this would be some kind of red color now i do need to use obviously the quotation marks here and i'm just going to say all right so this will be a string by the name of hashtag whatever we can use maybe orange color f15025 and then for the color why don't we change this why don't we say that all right so we would want to access the variable instead now this variable obviously is not going to be red i don't know why i'm writing red this will be orange color and also we can write orange and you know what in order to actually make this button more visible why don't we add a massive font size like i don't know three rems let's test it out and then notice check it out we do have right now the color however the color is not being displayed properly because i actually gave a wrong hashtag value i should add here f as well but in this case i do have it here the color is not red anymore in fact this is orange because we are accessing this dynamically using the variable so now let's think about it we have a style component we can access some values dynamically and what we are trying to do is get this image in our styled component so whenever we are rendering this hero the big massive component i would want to place here the image so hopefully the bells are already ringing in your head because this is exactly what we're gonna do now how this is gonna work well first and foremost why don't we get the default image now you don't have to do it this way but i just always find it useful if we have some kind of default image so i'm going to say default image from and again we're going to be looking for the images then within the images they're obviously going to be some kind of default image and i'm just going to go with room jpeg like so then obviously i'm going to change this around i don't care about the button anymore what i would like to do instead is get my default hero and the way this is going to work i'm going to name this differently i'm going to say const styled hero will be equal to styled now in this case i don't want to render the html button i would want to render html header now that is going to be the name of my html element of course and then what we would want for the header well we can actually already check what we already had previously so that will be in the app css and what are the styles that we're adding well i am adding the min height here i am adding the background as well as we would obviously want to display flex align item center and justify content so we can just grab whatever we had over in the css there's no point of rewriting this because our main goal is to look at how we can name this dynamic i don't care about min height being hundred view heights i can just go with 60 view heights here then display flex will stay the same align items justify content all that will stay the same what i care about is this this is what i'm really interested about and we already saw how we can use one variable so first of all before we mess up anything let's just write that we are exporting default styled hero like so and then let's change this value here around let's say that i would want to access this image dynamically by again i need to use the dollar sign since i am within the template literals and let's say that i'm checking for default img now this is obviously the variable name that i have here so hopefully everything was correct let's save that and let's see what we're going to have in the bottom wow i have my massive image and i can even go back in my recording we can go back home and for some reason this is not showing right now and yes it is showing right now what do you see here this will be our massive image okay but at the moment it's the same thing again i'm getting this data so each and every time this will be rendered exactly the same because all i'm doing here is rendering the image now what's even more cool about style components that we can pass the props so what will happen at the moment i'm just going to show you obviously this in a home page because this is where we're rendering and by the way i named this button but the way this will work eventually is that there will be some kind of prop and we can name this however we would like but i'm just going to name this image and then we dynamically will going to access the images that we had here from the room all right now let me show you how this is going to work first and foremost i don't think i care about the button anymore i can just get rid of it it will be on my way i can also delete the import i will gonna fix the style hero and the way we access props in the styled components is a little bit different so this way if we're just taxing the variable it's very simple i can just say okay so give me whatever variable i would want but if i'm going to be accessing the props that are being added to this style hero the syntax would be following where it what it will not be just a simple dollar sign i will gonna have to again access something dynamically but in this case i'm passing here the function and this function grabs one argument which will be the props now the props obviously will be the ones that are added here on the style component by the name of style hero in this case and then i'm just going to be looking for either i can return it or we can even do a ternary operator again the simple way would be something like this where i say props image now again this will be the name of my current prop that i'm using and just to show you how obviously this will work is i will gonna save it currently we will gonna head over back to the single room and right after the room context why don't we import this i'm gonna say styled component like so and you know what no styled hero why i'm calling the stone component and then from and then obviously i need to head over to my components and somewhere within the components of course i will have my styled component so it's or styled hero i don't know why i keep calling this styled uh component well it is styled component i guess but the name of it is styled hero now we will head over to a return if the room is actually defined and we're going to change this around so we're not going to be looking for the simple hero in fact we're going to change this around then we will use styled component styled or again styled here or not styled component the prop name will be image so the prop name again i use the name here image you can use whatever name you would want but i'm just going to say image and that image will be equal to anything that i would want from that images array now this is really up to you how you would not want to do it but in my case i'm just going to go with images and since i know that this is an array i can just go with a0 now let's check it out what we're going to have here let me first of all save home and then let's test it out in our application i click on it and what do you see as an image well i see that this is going to be my double deluxe room again if we're going to head over to the prudential now this will be a presidential room there is one more thing that i would want to show you with this styled component and the simple fact that if you would want the default one you can either do it here let's say set up some kind of default if again you're not able to access that image within the images or we can do it here that's the reason why i did set up this interstate so this is really up to you i'm going to add an overkill right now because i'm going to add in both ways the default one so i'm going to say show me images 0 or and that way i'm just going to say this dot state and default image again you don't have to do this this is definitely an overkill but just to show you that we can add these default images in both cases where i can say okay if it's not there then just render this guy and also we can do the same thing here where not only we're looking for the props but i could set up here a ternary operator not that ternary operator will be basically like this i'm gonna check if i'm passing any kind of prop and if no image prop is being passed i can obviously say like this i can say all right so props images if it's there and if it's not there then just render whatever default i have now where is my default well this will be this guy so i can just say ternary operator if the image prop is passed obviously render that image prop and then if it's not passed then just render this img okay that's basically a protection if let's say you forgot to add that kind of prop and this is how we can set up our single room page to be dynamic where each and every time we're going to be trying to render something and i can go back to my final application where for each and every room we in fact will be accessing image from that room okay instead of rendering the same old image all the time we have our styled hero component awesome and now what's left to do is just pretty much fill out the rest of the information about our single room so in this case i will gonna navigate to the single room obviously this is gonna show me the background image for that double deluxe room but we already have our awesome styled hero where each and every time this will gonna be rendering different images and like i said it's pretty much the easiest part where we would want to set up rest of the information about that one specific room i would want to render everything after this styled hero so in this case since we cannot do two adjacent things in the gsx i will gonna also set up the react fragment so opening and closing will be react fragment and then rest of the information will gonna go here where we're gonna be filling out using all the values that we're getting from that one specific room first and foremost we're gonna start with the section now within that section there will be a class that we have in the css by the name of single room now this should get me obviously my jsx right now i'm just waiting on my emmett here it goes then within the section we are going to start very simply by showing all the images so if you're looking at at my finished page you see that we have all the images now this is really up to you if you want to render all the images that we have in the array basically including also this background one you just need to obviously do it the images map because obviously we're accessing the images and then all of them will be rendered but we're also going to check it out how we can do a little bit of the structuring again with javascript and render only three of them so the easy way would be like this where we have a bunch of images and by the way i would want to place this in another div single room images again this will be just for the styling and this is just gonna give me class name that i don't want but again we're gonna have to get my jsx and then within this images this will be where we're gonna render our images so i'm going to start with images then we used a map method and then since there's going to be a few of them i would want item so each and every index or each and every image in that array and also we're going to add right away index just because we're going to be rendering the list and what i would like to return is just a image with a key and then the key will be indexed of course and then source will be the item so source attribute form my html image will be coming from each and every image from my array and i'm going to call this item and then alternative we can just say that the name the name of that particular room which obviously we still have access to so let's do this this will be our first setup and at the moment this will be complaining because i should obviously have the return as well now this should do better and now we have all of these images again we can head over back to our recording check it out single room and i have these four images and like i said if you instead would want only the three images so this background one maybe you don't want to display we would just do a bit of the structuring here and in this case instead of object destructuring we're going to do array destructuring where i do have my images array correct so i could just write all right const and now get me out the images out of that images array and i could set it up this way where i have the main image that is going to be my first image and i could just say let's say image number one image number two and so on and so forth and set this equal to a images array so now what we're doing is we're just grabbing the items out of the array so that is going to be my first one then second one and third one and so on and so forth now the thing is that i would like to get another array with the rest of the images so essentially i don't want to keep the count of how many images i have in my array because in this case i'm getting the second image then third and so on and so forth but of course there's cases where i don't know how many extra images i'm going to have whether that is going to be 5 or whether that is going to be 50. so a better way would be this way where i'm getting the main image correct so i am the structuring array and i'm getting my first item but then for the rest of the items i'm using the rest operator where i'm just going to say dot dot and then whatever the name of my array so in my case i'm going to say default img but you can call this however you would like so again we are doing the array destructuring and then in order to get rest of the items apart from the first one i'm just using a rest operator so in this case i'm going to rewrite my background as well but you don't have to do it so i'm going to say okay get me main img that of course is the item number one and then instead of looping over all the images what i'm gonna do is i'm just gonna say default img and then just to double check let's just cancel log just so we can see that for sure default img are going to be next images or rest of the images in the array now let me head over back to my bigger browser window we can maybe refresh our dev server first of all i can right away see that still my style hero works excellent so we're still accessing our main image but then notice how rest of the images don't have anymore that main image so we got rid of that successfully and essentially we're rendering out the rest of the list and if i'm going to click on inspect within console we're also going to notice that we have the array of three images so essentially we have rest of the images so that's how we can do array destructuring using the rest operator in order to get rest of the images without the main image that is displayed in the background well we are done with images this will be our div so make sure that right outside this div there's going to be another div now this div will be called single room info and what i would like to access is obviously right now my jsx and then we're going to start with article now the article class will be description and let's go with that let's get description and within the description we're gonna have few things first and foremost there will be a heading three and within the heading three we're just gonna write details details then next one up will be the paragraph so let me navigate to the end of the line create a new line and i'm going to be going for the paragraph and within the paragraph like i said we were going to be placing a description like so description and again what we're accessing right now is all the properties that we currently have description hopefully this is written correctly description let's save that and let's see what's going to happen sure enough what i have next is my details as my description also still within this single room i would want to create another article article then for the article class will be info info and then within this info there's going to be a few things there's going to be a heading 3 first and foremost and we will going to be targeting info and then also we would want to work with the price so let's say that we have a heading 6. so for the heading six we're going to have a price and for the price we're going to do simply a dollar sign and then we're going to go with actual price so i'm going to write price let's save and let's see sure enough what i have here is info with a price after that we would want to render size so let's grab this guy we're going to have the size this should obviously give me another thing but at the moment i don't see it so why don't we grab the size prop from our object and right after we change the size prop i also would want to add square footage so square foot like so and then i have pets and capacity and breakfast now just to show you where this is going to be located when we're all going to head over to our page we will going to have the max capacity and in this case i would want to do some kind of conditional rendering because let's say the room has max capacity of one it's not going to make sense one people so we would want to say if it's less than two then that would be our sleep person and then it will be two three whatever four people if it's plural now if it's going to be singular then we would want to render one person and also pets and breakfast will be conditional some rooms will have pets allowed some we won't so we're going to do a little bit of conditional rendering as well first and foremost let's start with capacity let's get heading 6 and for the heading 6 we would want to render obviously like i said capacity and for the capacity let's write max capacity and then we'll just going to be like i said doing a conditional rendering where we'll use a ternary operator so in this case i will gonna check what is the value for the capacity if it's bigger than one then we're going to use a template literal where i'm just saying okay so they're all going to be a capacity obviously rendered but it will be people so if it's more than one so if the capacity is more than one then we'll render people if not then the capacity will be capacity will be person and in this case we do need to have again template literals person now that should do it but we do need to add here a question mark for our ternary operator and now everything is working and we have a max capacity of two people all right now after that we do have pets and breakfast and there's few ways how we can also check the same thing so i will gonna say all right i would want the heading six but in this case i will going to be checking for the pets prop and then again we're going to do a conditional rendering so we're going to close out this curly brace and we're going to return if the pets are allowed if that property is true on that particular room i'm going to write that's allowed if it's not true then i'm going to say no pets allowed okay that's going to be our setup and last one will be breakfast and as you can see in this case pets are allowed and for the breakfast it's going to be even simpler where we're going to use the and operator we're all going to check if the breakfast property is true that means the breakfast is for free breakfast then we use and operator and we say free breakfast breakfast included and obviously if this property on that particular room will be false then we're just not going to render that string that's all now right after this section there's going to be one last thing where i would want to render the rooms or i'm sorry the extras that the room has so right after this section i'm going to write section with a class name like so class or why i'm typing class name i just need to type our room extras okay so this is going to be a room extras and then within this section we'll just going to head over to a heading 6 and then we're going to write extras and then last but not least i would want to loop over this extras array and the way we're going to render we're just going to attach a class for that on our list so i'm going to say this on our list we're going to have a class of extras extras and then within this on our list why don't we do extras so obviously we're accessing right now the variable map again method then we're going to use item and index since these things will not change then what is going to be rendered and we would want to return each and every list item with that item that is in that array so let's write list item key and we're gonna obviously access the index because this should be unique and then within the list item let's close it out first of all and then within the list item we would want to return that specific item so let's write item and then here we're going to add over here this dash and let's see we should have extras and if we're going to check it out our recording yep these are going to be the extras that we are rendering if we're going to go back home again the presidential obviously going to have a different price different square footage capacity is going to be bigger pets allowed free breakfast because in this case the breakfast property is true and of course extras i added exactly the same i'm going to be going and running around and changing these extras for each and every room but this should just give you an idea how we can create whatever arrays or whatever we would want and then render them awesome we did complete single room page now what are we doing next well let's check it out so this would be the double missing room yada and then these are going to be the rooms so what we would need well rooms will be our last component but obviously when i say the last component what i really mean is that within the room page there will be in fact two components one of them will be for the searching and the second one will be displaying all the rooms that are being searched for so let's say we're going to be searching for rooms that are less than 205 and obviously these are going to be three rooms if you want to search less so on and so forth we're going to be displaying the rooms in order to make this simple because i still want to show you how we can render the context within the functional component and there's actually two ways what we're going to do is we're going to set up one container component that will going to hold both of these values okay now it's also a little bit easier because i think this is going to structure our code better and the plan will be very simple we're going to head over back to our components and then within components we're going to create three new files so the first one will be rooms container that's we're going to be that parent container for both of them and for now like i said we're all going to create this as a functional component so let's make sure that this is functional let's actually access it and the moment we're going to do that of course we again are using what we're using while we're using the es6 snippets of course so let's head over back and that's not what i wanted let's head over here and yeah let's actually get those snippets for some reason again my vs code is like slowing down on me and let's fix that yep now i have my functional component and then within the functional component let's just write hello from rooms container and we might as well can right away import both of the things we're going to be creating so first one will be rooms filter so i can just call this the rooms filter from then this will be in the same directory so at the moment we cannot access it but i'm going to call this rooms filter.js then we're going to copy and paste that and the second one will be in fact uh the actual room list so that will be where we're going to be displaying the rooms that are we are filtering so room list and room list and why don't we right away render them again there's going to be an error if you're going to save the file but eventually they will be there so rooms filter let's copy and paste that and we're going to call this room list once we have this set up like i said we would need to create these two components so first one will be room list js where again this will be functional component and we are just going to grab all the rooms that we're going to have and that way let's just call this hello from room list like so and then what else we have that room uh filter yeah new file room filter.js and again let's call this functional component room filter and just hello hello from room filter then let's save them one by one room list room container i will gonna live these tabs open because obviously we're going to be doing a bunch of work here i can close the single room i will going to leave the contacts open because we will going to do a little bit of work there we don't need the room and what else do we have i don't think we need featured rooms anymore either all right now we would want to navigate to the room page just so we can see what is happening so at the moment nothing is happening because we do need to have our container so again let me open up the sidebar we will gonna head over to the rooms page and let's say import our rooms container i believe that was the name right so rooms container and then we all gonna say that from and that so components and then within the components we had a rooms component now be careful as you're saving of course your files notice how there is an issue where basically i'm one place i'm saying a room list and then a room filter and then the next one is let's say rooms so again this is singular and plural issue where that's the reason why sometimes there's an issue okay now in this case it says cannot find rooms filter which is weird so let's head over to filter this should be in the same thing so actually don't understand why we can't access it it's in actually the same directory so it says cannot resolve rooms filters and using components interesting why we can't get rooms filter oh because it's room yeah you see this is the issue sometimes when you go with the room and rooms and that's you know that's why sometimes i just told you to be careful in fact i made a mistake myself okay now this will be rooms and at the moment we're not rendering anything so let's head over back to rooms and again we would need to create of course the fragment because otherwise this is not going to work and we're going to have to have no adjacent jsx so this will be my fragment and then let's render room container or rooms container or you know what this is getting really really annoying what i'm going to do right now is i'm just going to rename it so by mistake i in fact called it rooms and it should be probably a room container because otherwise this is just really really getting annoying so let's say this will be rooms as well as within the actual rooms we're going to get a room and this will be from room so let's save that and at the moment this is again complaining is not defined because we have rooms container and now let's say that and yes finally everything is successful where we have hello from rooms and then we have two of the components one is filter and one is the room list now my first thing is that i would like to show you how we can obviously work with the context as far as the functional components are concerned because at the moment we want to access the context because there's some things we would want to pass it down to a room filter as well as the room list so we'd want to grab the rooms the sorter rooms as well as the loading because we will gonna have to check loading here however that one obviously we're not gonna pass it down that one we just wanna check it ourselves but also there will be a method and that's what we're going to be looking for okay now what we want to do first is head over back to the context and notice what happened so the first time we had we had this context correct where we had this dot context and we were able to access it because we were working with a static type and then this was equal to the my context and we set the sequel to a this dot context and then we got the value if this is a functional component we cannot do that now instead what we are looking for is for the consumer that we created all the way in the beginning and the way we can access that is in fact using the render props where the return in between the component will not going to be just a simple some kind of value but in fact this will be a function now this function takes an argument of our object that we placed now just to show you where this is in the context remember all the way in the bottom we had our value that was equal to a state so here we can access that value but i think it's going to be easier a little bit to show you how this works but the general idea is like this so rooms container first and foremost now we do need the consumer remember we imported in fact or exported three things room provider room consumer and room context and all the time we have been using this guy the context one now we in fact need this consumer so let's head over to the container we're gonna import we're gonna call this or by the way this is a name import so we need to call it like it is room and this was consumer then this will be from the context so again we need to access the context of course and then once we have accessed the context i also would want to right away get the loading component so i'm going to say all right import loading and that will be my loading component loading component and now like i said what happens is that i will have to use this room consumer to access my context so the way this is going to work is going to be very interesting especially if you're doing this the first time so we have our component room consumer and like i said in order to access this information we need to run the function here okay and this is something called render props now within the function the only argument here is going to be this value the value that we are in fact passing in our context this is exactly what we're accessing so what we can do is since this is the function i obviously will gonna have to do some kind of return however in this case why don't we set it up where we have right now our divs oh so this would be my return let's place that that is our return but since this is a function we can start in fact destructuring it we can actually start looking at what values are we getting so again this would be the same thing as we would set up in the class this dot context type and then accessing by this that context so why don't we check it out const and again maybe we can just value uh maybe we can just console.log just so you believe me that this is actually happening let's write value and i understand that in the beginning this kind of syntax might be throwing you off a bit because again we're just not accessing simply the variable that we're getting from the actual context in fact we do need to run this function and that's the reason why of course if you have the class this is probably much simpler and also in the rooms filter we will check it out how we can use it as a hook where we can do a lot like we're doing within the class just by using the hook again that will be in the rooms filter component so far we're dealing with this render problem because i want to show you a couple ways how we can do that now in this case i will gonna head over to my recording i'm gonna go to rooms and if everything is correct i should have my value object and of course i do and now check it out so everything that we had in the state we have access to and we already know how to the structure in fact i think we're experts already and that's it let's just start grabbing the values so i'm going to be looking for loading i will going to be looking for sorted rooms as well as the rooms and this will be from the value now my plan is to pass the sorted rooms down to a room list and then the rooms into rooms filter please remember that whenever we're going to be working with rooms filter we also we're going to grab some more functions that we haven't set up yet in context and we could technically set them up right now and pass it down to rooms filter however since i want to show you how you can use use context which we'll do in rooms filter this is why we're going to be doing grabbing a little bit of information from the context in our container and then a little bit draw more from filter and understand that you can do it either way i could grab everything within a rooms filter or i can just pass it down like here within the room container the only the reason why i'm doing this because i want to show you multiple ways how to do that okay and in fact in the next video we're going to check it out how we can do this with a higher order component again it's kind of important whenever you're going to be working with context to kind of know these ways how we can do that so in this case i could say sorted and i'm just going to say that this will be rooms so i will gonna set this up and you know what in here i'm actually gonna pass the rooms so the sorted rooms will be passed into rooms list but i will gonna call this prop exactly the same so i'm going to say yes there will be a rooms prop so each of them we're going to get rooms prop but the difference would be one we'll get sort of rooms and the other one we're going to get the rooms and you'll see when we start filtering why in fact we are doing that but i also would like to check the loading because let's not forget eventually when we're getting our data from the external api we need to make sure that the actual data is there and that would still require checking it within the room page all right now in this case it's very simple i'm going to say if loading if loading is true then i would want to display or return in fact the loading component loading component and then if it will be false which obviously can be our case because this is done locally then of course we're just going to be rendering and passing down these props into rooms filter and rooms list now let's test it out just so we know that loading is for sure working again i'm going to head over back to set state and i'm just going to say that or you know what i could have just done it like i could have commented out and now i should have a massive loading because obviously we didn't change it from two to false so we know that that is working and why don't we check it out what would be another way how to write this because like i said you might be thrown off a bit from this component where we are pretty much using this render props where we are using the consumer and then we're passing it this way where we're using the function now this is not unique to context you'll see in fact uh all over the react that somebody might use this kind of pattern especially before hooks of course now that there's hooks there's probably less use of this case but you will gonna see this so just remember this is a function the argument is whatever we have currently in the context and then you just need to access it and make sure that you're obviously returning that this is a function but you can do all kinds of functionality right here on top don't do it in return that is against the rules of jsx but you can definitely definitely do it here on the top all right now while we're still in a subject of course why don't we cover how we can do this with a higher order component however what i would like to do right now is in fact first of all set it up and the way we're gonna set it up will be within the context now let's go somewhere here let's create that component let's say that you don't like this kind of syntax you're like i cannot stand the fact that i do need to pass the function and then i need to access this value so let's say that you decide to go a higher order uh component rod now how this is going to work i'm going to say export i'm going to call this function we can just say with our room consumer it doesn't really matter how you call it and then within this function first and foremost i'm going to pass in the component so there will be going to be a component that i'm going to pass within this function but we need to remember that in this case this will be a room container but understand that you can do it obviously with any component where you want to hook up the context now once i pass it within the function what's interesting about this function it will return another function that's what they call it higher order components where basically they return another component okay now let's call this return then we're going to write function and of course you can do this with an arrow function but i just find it a little bit more understandable if we write it the es5 way where we're writing the functions because otherwise if you just have a bunch of arrows there i think that i mean some people might get confused let's call this consumer wrapper again we can call this however we would want and what's important about this function is that we're all going to be grabbing props now i understand that you probably will be asking well what props are you talking about we will run this function with consumer within this room container and of course in our case we did not pass anything as a props but let's say if we're going to be running this with rooms filter notice we are passing some kind of props so what we would want to do is if we're creating this higher order component we do want to pass those props into the component that will be returned okay now last thing from this function what are we going to be returning finally okay we have our first function we have our second function the one that's grabbing the props and also we are doing the return so what on earth are we going to be returning here well this is finally where we're going to be returning a consumer so i'm going to call this a room consumer and remember we still need to follow the rules because it still will return the value because remember we had this setup where room consumer is returning this function now in this case though we will gonna return already right away the component that will be passed in so the way we're gonna do that is gonna be like this component then we're going to access the props so dot dot and props that component might or might not have let's make sure that i'm typing actually correctly because i would want to access this particular component as well as i would want to right away set up context and the context will be equal to the value the prop of the context obviously is not mandatory you can call this however you would want the most important thing is that you are accessing this value here so this way you're kind of skipping where instead of running through your whole application and each and every time using a room consumer what in fact you will do you're just going to grab this higher order component and you will wrap your component within this higher order component and your component will be returned right away with the props that component has which in our case we didn't but like i said again for the room filter let's say you will gonna have as well as context prop or any kind of prop how you'd like to name it that is equal to this value so how this is gonna work we already are exporting and now i'd want to go back to the room container and you know what i know this might be a little bit redundant but i'm going to select everything i will going to comment this out just so you can have it for your reference and we're basically going to retype everything from the scratch now this is not going to take like ages or anything like that this will be quite uh fast because again everything is already there now some things we might as well copy and paste it like let's say imports these are obviously going to be mostly the same so let's copy and paste that and we're going to select them all this will be my loading now the difference is of course i don't want room consumer i want with room consumer that was the higher order component that we created then i also would want to create obviously here function then room consumer i'm going to name this like so and then within the props i will going to be able to access to the context now one thing that we do need to do is as we're going to be exporting this we need to wrap the room consumer the one that we currently have or you know what let's call this room container sorry room container we would want to wrap it in the with room consumer so let's write it here export default just so we can name it however we would want and then we have this room consumer and we pass in the room container and that's the reason why we're going to have access to this context okay let's rent the room container now we have successfully wrapped the container in the with room consumer so how a higher order component and now we're going to have access to this context just like we normally would with the props and again here's the question what do you find more easier just setting up this room consumer with the value or if you have to use it all over the page you maybe would want to go with higher order component but there's the last thing that actually is again very easy one which we're going to check it out in rooms filter where you can just use the hooks again this is really up to you now let me quickly finish this we're going to say again loading loading sorted rooms and then rooms we're obviously passing this will be coming in this case from the context of course then we can also do right away for loading and then of course this all will be exactly the same so we can just copy and paste that okay a little bit of copying pasting not too much okay so we got if then in this case this obviously is working really well now the only difference is that i do need to add here obviously the closing tag and this should fix everything that i had on the errors hopefully it will so in this case i am accessing if and for some reason i'm not getting back to return and that's why sometimes the issue with copying pasting i guess let's delete that let's save it and yes it is working everything is working correct again this is really up to you however you would like to do in the rooms filter we'll check it out the hook that we can again use to access the context within the functional component again if you would have some kind of classbased component it's obviously just using the static type we have successfully finished with a room container so by the way we can get rid of this guy we don't need it here and if you really don't want to have this div here of course you can just delete it and this will become react fragment and next on our list will not be rooms filter in fact it will be a rooms list now the reason for that is because this will be a more straightforward where we just want to render all the rooms that we're going to be filtering and the only thing that i would want to show you at the very end is the difference in css a little bit and pretty much it because we were going to grab the room container or i'm sorry room component that we already created and we'll just going to render the list that we're getting okay now i can close the room container i will not need it anymore then where is my buddy where is my room list here it is and first of all like i said let's import the room component from this will be in the same folder of course or directory then i am getting as a props i'm passing here rooms so i'm grabbing this rooms prop and then i obviously would want to render them now one thing that i would want to set it up is if there are no rooms because we will going to be filtering and there's going to be case that rooms array that we're going to be getting as a prop will be in fact empty so that way i would want to render that unfortunately no rooms match your search parameter now you don't have to do it but i think this is just going to be a little bit better user experience now the way we're going to do it is going to be very simple i'm just going to check if the rooms room's length is in fact equal to zero then i'll gonna render one thing so i'm gonna say return and then in that case we're gonna go with a div by the name of empty search and again this is already set it up in our css and let's just write this long text and hopefully i will try to not mess it up as far as the spelling is concerned no rooms matched your search search parameters like so and then let's do another return which in fact will be normal return obviously since the array in most cases will gonna have some kind of items in this case i will gonna use section here so let's use a section with a class of room list like this and this is obviously not giving me what i would want so let's write section and then let's add right away class name and we're going to call this a room list or you know what no rooms rooms list and we're going to have the section now within this section there's going to be a room list center so simple there with the room list center and then within this div we would want to map our array so let's call rooms again the prop we're getting map method item each and every room as an argument and then we would want to return that room wrapped in our room component that we already had the key here will be the same item item id and then room will pass as an item so the room prop that we're expecting in the room component we're just going to pass each and every object that we have and that's it that will be our massive and interesting room component and the moment we render it notice obviously we are getting a bunch of bunch of rooms now there's one thing that's missing and that is again this s so i apologize there's rooms and room and this is what's missing that's the reason why it's rendered this way the moment i'm going to save it obviously right now the rendering will be better we can check it out in the context let's say i will going to say sorted rooms will just gonna be an empty array because remember we're passing the sordid rooms the rooms itself will be passed in a filter so again if i'm gonna comment this out notice we should have the text unfortunately no rooms matched your whatever parameters and we're going to get that text if our array that we're going to be getting from the context will be empty now the last thing that i would want to show you as far as css is concerned and again we're going to do finding because we have rooms list now notice how for rest of the grid i was using autofit when i did my function with repeat and then i used min max where minimum column width should be like this and then maximum is going to be one fraction that would be part of the screen and in the rest of them i used autofit and in this case i used autofill now if you want to see the difference is that with autofill if there will be extra room within let's say your layout it will gonna enter this one empty one so there's gonna be this one empty column however with auto fit this is just going to make sure that you have three columns so they all going to be spanning all across so if with auto fill if there's going to be extra room for that column the same with a rest of your columns it will be inserted so in this case i think it looks a little bit better because let's imagine that if we have one component it would be just spanning all across the page because it would take up all the space that would be the effect with auto fit now with autofill it just says okay you have room for one column but if you have more i'm just going to be creating the empty spaces okay that's the only thing that i would want to show you as far as the css concerned that i find of course important and once we're done with a room list then we're going to start working on the room filter all right guys i think we're ready to our most important component which we will use for the filtering before we do anything within the search filter or room filter component i would want to make some changes in our context and the reason is very simple if you have done any kind of work with react or especially with react forms you know that there's a option for using the controlled inputs now what does that mean that there is a value in the state that is in fact reflecting whatever you have right now and then you also have the onchange handler which makes sure that every time we're going to making change it is also affected in state and this is exactly what we would want to do here as well so we will going to have to set up some values in the context state then later on we will can also set up a function the handle change function as well as we are going to pass them down into a filter component and we'll attach them to each and every component obviously not all the values from the state but that particular value just so we can control the input okay first and first and why don't we head over to context then within the context like i said we would want to add more values after the loading i would want to add type and these will be the default values or basically i'm saying type by default will be all if you're wondering this is obviously our first select box now i'm not gonna go one by one because you'll see obviously what is happening meaning i'm not gonna scroll over to the page just to show you where we're gonna be using it because my first uh deal is to actually render them so capacity one that will be the default price by default will be zero then min price will be also zero also i would want max price that also will be zero then mean size again you guessed it zero max size you guessed it zero and then we have breakfast which uh will be by default false as well as last one pets by default also will be false so we have set up the values in a state before we start working on our handle change i would also want to make few changes here notice how we're using this that state where we're changing the values in state so as far as the price and the size is concerned i would want to set up the max ones not as zero but whatever max i will be getting from my data so what does that mean well you see by default once you're gonna refresh it notice my max price will be all the way up to 600 as well as my max size will be right here so those are the two values that i don't want zero but i want specifically from the data so i don't want to guess what is the max price for the room in fact i would want to calculate that from the data that i'm going to be getting the way we can do that i'm just going to set up the variable max price now we're going to use math max but we know that we would need to pass it as a values not as an array so in this case we can use the spread operator and i can just use rooms now again rooms will be the data that we're getting back right here and then we're going to write map then of course item so return me the price for each and every item so what will happen is that we will going to be returning the array because we're using map then we right away going to use the spread and this way we're going to know our max price again we can cancel log it but i think we can skip it this way and the same way i would want to set up with a size so we're gonna copy and paste that now i will gonna rename this this will not be max price it will be max size and i will be looking not for the price but also for the size and the way we're gonna do that right now in a state is first of all the price we're gonna set it equal to max price because again right away you see that my price is all the way on the end that is my max price and we're just going to say all right max price then we already have in a state the max price property so we just need to write max and not there but we need to write it within this.max price so that will be equal of course to the max price and last one will be max size that also will be equal to the variable that we just created let's save that and then we need to set up two functions at least some kind of structures a minimal structure for them where right after the get room i will gonna say handle change that will be the name of my function and i'm just going to say that this function will be expecting an event and you know what for the time being why don't we cancel log the event target type name and value and the way this is going to work just like in regular javascript we have access to the name object then within the event object we have the target uh that we're clicking or that is actually being changed not maybe we're clicking on it but then we also have option of accessing the value from the target or from the event the name as well as the type so the way we're going to do that we're going to be const let's just go with first of all i don't know maybe type and that will be event target type and then we're going to copy and paste that and these values are just going to change to name name like so that will be my variable and then we are looking for not type but we are in fact going to be looking for the value so then dot target value and just so we can see everything that's happening in fact we're going to do a simple log of type name and value okay and then eventually we're going to call another method once we're done changing the values because what we're going to do with this function is in fact we're going to grab everything that controlled inputs were going to give us and we're going to fix the values in a state because notice we have a bunch of properties so what we're going to do is we're going to access those properties and change it from within this handle change function and then once we run the function after that we're going to run another function which we'll call filter rooms filter rooms that will not look for any arguments it will just grab the values from the state and filter rooms and at the moment we can just say hello doesn't really matter i'm not going to call it anyway okay now what we would want to do though is in the state we have get room but i also would want to pass not both of them not filter rooms but just handle change so i can write handle change will be equal to this dot handle change and once we make these changes in the context we are ready to head over to a room filter and start working with our data once we have our general setup in the context.js i think this is the great time to head over to room filter where we're going to do most of our work well it's going to still head over once in a while to context.js because we will going to have to add more functionality than just a simple console log but most of the work will be done here and first and foremost we're going to have to do some imports now i'm going to be importing right now use context which is a latest way how we can actually access context and this one is using the hooks so i'm going to say from and this will be from react and again this will be used because this is a functional component and of course we cannot use the static type here that is the reason why now we also would want right away a room context remember that was something that we used when we were not using the higher order component or the render props because we used actual room consumer now this is a whole context so hold the whole object that we're creating again we're importing that and then this will be from the context of course so from the context and last but not least we do have the title so i don't know whether you remember but all the way in the beginning we created this title component and that's what i will be right now importing let's grab it this is my title and first you probably are wondering well how we can access the context well very easy the only thing we need to do is set up some kind of variable which in my case will be context and we can use use context room context and if we want to double check what we're going to get let's just go with the context and let's check it out of course inspect not here but here and voila people we have our object so we don't need to use render props if we don't want to we don't need to use hieram component but we can use right away the hooks and in this case the use context of obviously it is very good to know them the higher order component than the render props because like i said this is not unique just to a context api you'll see those patterns as well but probably i think you will going to be sticking with use context because this is as straightforward as it gets just get that context api set this up equal to some kind of variable and you're good to go all right now what we would want to destructure from this particular variable well all the things pretty much that we have in the state and when i say all the things of course not all the properties but a bunch of them now let's start by handle change that was the function that we needed then i'll need a type and again only thing i'm going to be doing is listing basically a bunch of these properties all right so type capacity price because these will be used as my value on the inputs that's why i'm going to have the controlled input capacity capacity then let's do price we can also do i don't know min price mean price then also max price and i know this might be a little bit annoying but i need do need to type them out mean size max size breakfast breakfast and pets now this will be of course equal and we're gonna set it equal to context context let's save that okay now we have access to the variables awesome and why do we start working right now on what we're going to be returning now in this case obviously i have the div but instead i would want section section and now we're going to add some class name here so i'm going to say class name class name will be filter container filter container and in the first video we're just gonna pretty much set up the first one let's first input the select box because there's gonna be quite a big setup meaning we're gonna have to set up the input box and then we're gonna have to do a little bit of context where we're just working with handle change as well as we're gonna have to get unique values so why don't we start slow where we're just focusing on one input and then you'll see that it gets faster but the first one will include bunch of boilerplate that we're gonna have to do okay now within the filter container we're gonna have a room by the title of search rooms let's render that dude and let's see what we're gonna get that is obviously my title awesome search rooms and now i'm gonna be working with a form for the form there will be no action but i will gonna add class name now the class name will be form filter form sorry filter form and then within the form i will right away going to set up some kind of comments because it will going to be easier now that way i'm going to comment the line and we're going to say select type and let's write end of select type and the select type otherwise it's just going to get messed up at least in my opinion these comments kind of show me where i'm starting with this select input and where i'm ending then there's going to be div with a class of form group now within this div i would want first of all a label now label will be for the id of type and then we're going to write a room type after the label we'll have our select box for the select box we do have a name and we do need to use this name input now what is the reason for that because we will going to be grabbing that value right here when we're going to be working with our handle change so that is important that that name in fact matches so in this case i type type and the reason for that because of course here within the state i also have the type and you'll see why that is important just make sure that you actually type this type the id is just for the label so i'm going to say type and then we do want a value so i'm going to say value and the value will be the type that i'm getting back from the context state so this is how we're creating a controlled input then we also would want some class name for styling i'm going to say form control that i added for the styling and last but not least we would want that handle change so on change we're going to set this equal the function that we're getting from the context and the moment i save it notice this will be my input so far so good now what is missing though as you're looking at it what is in fact missing here well we're missing the values that we're getting from the state and the way obviously this data is going to work if i'm going to head over back to the data js for each and every room there will be type of room now the thing is though that i just want don't want all the rooms that i have because types are obviously going to be repeating let's say if you're scrolling up a little bit you'll notice that let's say type is single then i scroll over to the next uh room it's also going to be single so what happens is that i only want unique values if i'm looking at my finished project check this out i do have here only the unique values not repeated otherwise i'm going to have for each and every room i type so the more rooms i'm going to add it the more types they're going to be even though they were going to be repeating so we need to be careful there's few ways how we can do it we could technically set this up like this where if i'm going to head over to room filter then within the select i could be like okay so i'm going to grab the select and now i'm just going to manually add these types so first and foremost we would do let's say option we're going to set some value i'm going to say this i don't know single and then val and then the actual input would be single we could do it this way the problem though with this way is again you don't want to do anything manually you want to check the data that you're having and by the way where are we having the data remember when we were using the room filter let me show you we had rooms container and what we passed into rooms filter we passed everything from the context so all the rooms from the context and this is what i was talking to you that i just wanted to show you how we can pass the information we could technically get this from the context the same way so this is a bit of an overkill where i could get that information directly but i just wanted to show you how we have many ways how we can pass the context all right so what i'm would be interested is getting these rooms that are being passed and what i would like to do is instead of doing this manually where i'm like okay let me head over to my data and just find out what kind of types i have i would want to set up some kind of function that will return only the unique values how is this going to work well it's very easy first we will gonna have to set up some kind of function that will only only repeat or return unique values now we're gonna do this above where i'm gonna say get all unique values get all unique values and then why don't we set up the function const get unique and we're going to be passing two things the array of items so whatever items we're going to be passing but of course in our case that will be the rooms array and then the second one well what kind of unique values are you looking for whether you're looking for a unique type whether you're going to be looking for let's say unique capacity and so on and so forth in our case in fact there's going to be only two there's going to be this guess the capacity as well as the room type because the rest of them are obviously different inputs now in this case i will going to say value and then since this is a function i would want to return something so i would want to filter this out if you're struggling with what i'm about to write please head over to my channel you're going to head over and you're gonna see that there's a playlist for javascript challenges and one of the challenges in fact is looking for unique values because i'm not gonna spend too much time here this is very straightforward javascript and again if you need more information please head over there that is one of the solutions that we used so what i would want from this function to return is in fact an array but i will gonna spread it out right away and i'm gonna use new set now the key here with the new set data structure is the fact that set only accepts unique values so within a set i can just map over whatever items i'm going to be getting which again by the way will be rooms since we're going to pass rooms right here and then what i would like to return will be item and that item value so item value and what's happening here again we're using the dynamic properties this will be a string so i'm going to pass in the string it will going to check what kind of value you have for the type and if that value will not be in a set it will be included if it's in a set by default set will not gonna include so this is how we're gonna get all the unique values now let's test it out this function and we're just gonna pretty much say like this we're gonna say types types we'll use our get unique function then we obviously need to pass two things the array that we're going to be checking as well as what we're going to be checking for so i'm going to say type now i do want to add type of all because that's something that i'm interested because that's also going to be one of the options okay where i would want to get all the rooms with let's say all the types now why don't we add here maybe comment get and let's do it properly get unique uh get unique types then why don't we add all again comment add all and why don't we say okay so we had our array because obviously we're getting back an array and we can just use again spread operator where i can say i would want to add all and whatever you had already in the types whatever you had original types and this will be my types and what we can do right now is head over to my select and instead of working here with these values we could display the jsx or we can work on this jsx right here where again we're going to create some comment map to jsx then types will be in this case already jsx let's write types map and again we're just going to wrap this in the option that's it now for the map we would want two things item and index then we have the function of course and what this is going to return well we're going to say we would want to return option and we would want to wrap option actually option for the option value will be the item that we're passing so each and every item that will be in this types array and last but not least we have a key that will be index and let's close it out however still within the option we all going to place our item now lastly within the select box we're just going to say that we would want to access types and what you see here is okay so item is not defined room filter seven okay let's check it out item item of course because i'm using the items here that's the reason let's say that and what do you see here on the right hand side as far as i can tell if i'm going to open up i will have only the unique values whether that's going to be single double family on presidential again if you need help with this check it out one of the actual challenges is getting the unique value i went over already what we were doing and then next is just getting these values using that function and the reason why i created the function is because we were gonna like i said reuse it for the second one for the capacity as well so we might as well not do the double of work then i'm just adding here this all that would be for all the properties and last but not least i would want to work with uh actual jsx so that's the reason why i'm getting jsx and last but not least i'm saying okay so set the value for the type so now what's gonna happen if i'm gonna head over to the bigger screen so we can see remember we were doing the console logging so we can clear the console for now and then we can head over to rooms of course we're already here and if we're just going to click on it let's say single this is going to tell me what that i'm selecting one that is obviously the type that i'm having then i do have this type as well as the single now the type is let's check it out what do we have here otherwise it might be a little bit confusing and you know what why don't we add here the actual explanations what we had within handle change now uh and you know what we can do it probably with template literals it's going to be easier this is and let's set like this this is type this is name and this is going to be the value so this is value let's set this up why don't we add maybe this is value and that way you'll see exactly what is happening so name i know a little bit annoying in the beginning but i just want you to understand because this is important what we are in fact getting back so this is type and now let's console.log everything that we're going to have where we're going to have this is type so the type will be select one then the name will be type and by the way name will be the one that we are in fact changing in our state and the value will be family we also can notice something very interesting where all the time our value goes back to all and the reason for that is very simple because we do have value set up on a select box and we're getting it from the type and at the moment we're just working with the handle change where we're getting the type the name and the value however what we're not doing we're not changing anything in a state so if i'm going to head over let's say and in the type we're going to type single notice of course i'm going to be getting right now in the single because this is the controlled input where everything we're going to be coming from the state so that's exactly what i would want to do next where now that we have this information so we have whatever change are we creating i will gonna head over to a context and we're gonna set up a little bit better handle change where instead of all of this console logging we're gonna decide what we would want well as i'm looking at the state right now check this out i have type then i have the capacity price and all of that and this is equal to some kind of value and if you notice when we were working with console logging name was actually equal to whatever we had with the state and then the value is whatever we selected so how this is going to work well i would want to first of all decide whether i'm going to have the checkbox or this is going to be something else because with the checkbox in fact we're not going to be looking for the value we were going to be looking for the check so first and foremost we're going to say like this we're going to say that there is going to be a target now target will going to be very general where we have event target then after that i would want to set up the value again by the way i can just delete this guy because this will be an if statement where i'm going to say const value so again this is because we have the checkbox if you wouldn't have the checkbox you wouldn't have to do that then event type and i'm going to check if the type is equal to the checkbox then instead of target value we'll have a target checked so in fact we're going to say okay if there is checkbox then use target check and then and by the way this is not what i wanted dot checked and then if it's not a checkbox we're just gonna use like we did before target value that's number one and name will stay the same so there will be target name as well as the target value and now it's really interesting the way we can do that within the this dot set state is the fact that i can again use the dynamic variables in my object so instead of saying okay so once i get these values this is just going to be for the type what i would want to do is for all my inputs every time i'm going to be changing i'll be dynamically checking what is my name and then the way we can do that is very simple i'm going to say whatever name property i'm getting back just check that value in a state and set this equal to whatever value we have currently from our input okay now name and we're going to set the value the last thing that i would want to do is run this this dot filter rooms because depending on whatever we're going to do with our input we're also going to be changing these values so once this runs once we run this that state as a callback function we're going to run this filter rooms so we're going to change this value in a state and then depending on that we're going to filter our sorter rooms remember that was something that we're going to be passing down into the room list the sorted rooms let's change that and now let's check it out i will gonna have access to it and now in this case i will gonna call single now this calls me hello and the reason why it calls hello because we already have here the filter rooms and obviously with filter rooms we have console log hello all right now i do think that it will be a little bit more beneficial if we're gonna head over to react tools then we have the room provider and now let's check it out what we're gonna have for the type as you're looking at it what is the type right now i believe this is single so if i'm gonna head over here to family what i'm gonna have i'm gonna have the family the same i'm gonna have within my input family now if i'm gonna go back to all this of course will be all and so on and so forth and this is exactly what we're gonna do later on with the rest of the inputs where we're going to have access to a value in a state because this is an object and we can access the properties dynamically by passing in the value and then we'll just going to set it equal to whatever value we're getting from the input and i understand that probably the most confusing is this part as far as the handle change is concerned because again we're not doing it one by one we're not saying type will be equal to value no we're saying whatever i'm getting back doesn't matter whether it's type whether that's capacity whether that's money it doesn't really matter as long as you name them exactly like you have in the state you should have no issues all right now we also would want to set up the filter rooms and like i said the first one will be the longest one and once we already set up everything this is where it's going to go faster okay now in the filter rooms first and foremost i would want to get rooms from my state not sorted rooms sorted rooms will be passing down the rooms the original value that we have because the changes we're going to be making to the sorter rooms but if we want to ever want to go back to original values this is why we would want to access rooms so again we're going to have to do a little bit of destructuring where we have rooms then we'll have type then we have capacity then we're gonna have price so again we're just gonna be checking these values mean size uh max size and what else we have we have breakfast and we have pets now where is this coming from very simply it's coming from this dot state again very important to understand and this is a callback function because this dot state is asynchronous so we need to make sure that we only run this when the state is actually changed okay all right we have successfully destructured our state values and again please remember rooms not sorted rooms sorted rooms will be the ones that we're going to be changing then we're going to set up some temporary variable we're going to say let temp rooms is equal and now why don't we do the spread operator where what i'm getting back from the state we'll use the spread operator now we're going to have an array and why don't we set up our first if statement where i'm going to say if type and now i'm talking about this specific type is not equal to all is not please remember this is again important if it's not equal to all i would want to filter my temp rooms so the way i'm going to write is temp rooms is equal to temp rooms filter and then we can say return me only the rooms that match the current type because what we were going to do right here is just like i showed you we changed the values for the type one of them was single then we had all and whatever so what i'm saying here is unless this is all in that case we're just going to have our original value we're not going to change anything if the value for the type is anything but all then i do want to filter it then i do want to return only the rooms that in fact are matching the room type that i'm passing so return me only the rooms that has the same type that we're getting right now from the state and obviously when i'm talking about the type i'm talking about the value now last thing that i would want to do within this filter rooms is again set another this that set state and in this case like i said what's important we got the rooms we got the original value and i would want to change not the actual rooms but the sorted rooms that we are accessing later on in my list so in this case i'm going to write temp rooms so set this equal in a state the sorted rooms to the temp rooms okay now let's save that and at the moment again this is roms i can see already there's some kind of temp uh not the temp there's already some kind of bug not some kind of bug i can see that i'm accessing roms not rooms let's do that now once we save that it complains about uh 81 and then of course this is not temp items this is temp rooms yep bug scrolled in now let's test it out we're gonna head over to my recording we can maybe make this big smaller now notice i do want to still show you what's happening here so let's click on double and voila our type is double so we changed it and what kind of rooms we have we have only the rooms that have the type of double that's it that's the only thing we need to do and as long as we're going to be changing that value that's when we're going to be displaying only those rooms now if i'm going to click on all notice now i'm going to be getting again the full value because i have type of all and i'm going to grab all the original rooms that's the reason why when we passed down to room list we are using the sorted list the sorted rooms but if we would want let's say again use the type all i'm going to get back all the rooms so that's how we can do the filtering this was our first filter so like i said the second ones and third ones and the fourth ones should be already much faster because we have all our structure i know the first one was a doozy but once we have all our structure i think it will gonna go faster and the next one will be in fact the guests so i'm gonna be checking how many people are max for each and every room and again we're gonna do a bunch of the same things so in this case i can and i will gonna copy and paste it and we're just gonna be changing here the values because i don't see the point of retyping all the divs and everything now this will be guests and i'm not going to call this type and just say okay so there will be guests and that's all there will be no type then i will gonna leave the form group so form group will stay type will not be my label in fact this will be named capacity we're just gonna write here guest that's all guests then for select naming again will not be type as well as the id so both of these will gonna become capacity uh value obviously again we're not accessing the type so we're accessing the variable by the name of capacity handle change will not change because we're going to use the still the same function that's the reason why we spent so much time on a proper setup and then for the types i would need to do very similar like we did already previously so what we're going to do right here is we're going to say that first and foremost we're not going to be getting the types we're going to be getting the people so i'm going to say let people and again we can name this however we would like this is just the naming that i came up with now we're going to be checking for unique that is obviously the function that we set up i'm still going to be running through the rooms array then we're going to be looking for capacity so for each and every room what would be the unique capacity as well as we might as well can right away set up everything with ajsx in this case we don't need to add anything so i'm not going to have to use the spread and i'll add all the all string and then why don't we do this why don't we say people map there will be item and the index again because this is an array like already previously then let's just do a return and again we are returning an option so we're saying option key will be item id or you know what no let's just do index here because obviously this was just going to be an array with numbers whether that's one two or three or four and then what else we would want for the option well we would want value of course the value will be actual item within this array that's being returned and then last but not least we would want to display whatever we got in there so item now within the second select box we're not going to be looking for the types in fact we'll be looking for people let's test this out sure enough now we do have our guests everything is working fine we should be also able to change the values in a state right away because our handle change is already working i will gonna head over to the bigger screen because i do want to show you the react devtools let's do inspect let's have a react open and then i don't have a select box that's not what i want type will be all but what we're going to be focusing on is of course the capacity i want you to keep track of something and that is what type of value this is not what value this is but what type of value because as you're looking at notice that this right now is a number however check this out once i save it notice these quotation marks so what's happening right now this is in fact string now this is simply because when we are getting back the value from the select box this will be automatically as a string so we're going to have to do a little bit of parsing we're all going to turn it back into a number that's the reason why we're going to do that within our function all right now we're going to head over back to the context we have our filter rooms we did our first filter remember we got our temp rooms so we were filtering already but now what i'm gonna do is right after i got my rooms and everything by the way i'm gonna start adding comments because there's gonna be a bunch of values that are repeating so in this case i probably think that adding comments would make a little bit more sense let's say all the rooms then after that why don't we do a transform values values and what we're saying here is obviously we already changed the value in a state so now we're getting back the capacity but capacity will be string so what i can do right now is i can say okay whatever capacity i had and that's the reason why i use let here because i'm going to be overwriting them i'm going to say capacity will be in fact used with parse integer which will make sure that instead of string we're going to be getting the number of course now this is going to transform the values and now i would want to write the commented filter by type and then now we're going to be filtering by capacity filter by capacity whenever we're talking about this kind of filter again it will be a lot similar like we already had before and the way we're going to write that is just going to be if capacity is not equal to 1 is not equal to 1 like so then we would want to filter it again and the way we're going to filter it we're going to say temp rooms again like we had before is equal to temp rooms filter and then what i would want to pass is room if the capacity property on the room so room capacity is in fact bigger or equal to a capacity now if it's going to be one then again we're not going to touch it we're pretty much we're going to have our original array but if we're going to make sure that capacity let's say is bigger if we're getting a bigger value for capacity let's say 2 then return me only the rooms that will have this capacity property bigger or equal to two all right now let's head over back again we have all our rooms check this out if i'm gonna let's say three then my value changes in a state and what do i see i see only the rooms that have the capacity of three that's how we can filter by capacity next one up we have filtering by price but i do want to close the console just so you can see that obviously both of them would work together so if i'm going to go let's say for all then in this case this will not show anything and that's the reason why i said to you the more data you're going to have the more interesting this will be by filtering of course if i'm saying that i'm just looking for a room type by the name of double and then i'm expecting that this will have a guest of three unfortunately within those particular rooms we cannot have three guests however within the family room we can check it out okay so all the family rooms as far as i can tell have right now right now the guest minimum of three meaning we can't stay three people if you would want to but we also can obviously do that in prudential that's the reason why it shows all the rooms which in our case is just one that you can stay with the request if i'm going to go back to all then this will show me all the family ones and i can stay at least three people can stay there now within the single and double there is a max and the max for the single let's say would be one and four double this will be two however if i'm going to go let's say with two then this again will gonna show me all the rooms that i would want let's say in this case all the double rooms that two people can stay in and all of them can stay in all the double rooms all right now we do see that both of them can be used together so that is working now next one up we all gonna have the price and the more filters we're going to add it the more of course again it will depend of how much data you have because for 13 rooms and if we have six filters understand that it's kind of hard to combine them where we can check by all of them all at the same time now we can always check them obviously one by one because we're just returning all the rooms but the more filters you're going to have the more it will going to make sense to have way more data that way this will be interesting otherwise of course for all the double rooms there's only two people that can stay for all the single rooms one and so on and so forth okay now as far as the money is concerned as far as we're working with the price why don't we grab here or you know what we're going to create a new one because in this case we will going to create a input with the type of range so it's not like we can really repeat everything within a select let's write the room price copy and paste that let's say end of room price end of room price and then here we're going to write again first a div with a class of form group within the form group we're going to have some label then i will going to go with price for my label and we're just going to write room price and we can also access the current price that we're going to have because what we need to remember is that we're all going to be changing this notice how the price will be changing and we'll be displaying whatever price we have currently whatever value we have in the state that's the reason why we're going to access price here after the label we're going to work with an inputs so i'm going to say that there will be input now this will not be simple text in fact we're going to have range and now name again is important because it needs to match whatever we're going to have in state so this will be price and for the range we have min max that's the reason why we set up mean price and max price values that's the reason why we're getting them out of the state so max attribute will be equal to the max price and then we'll have an id now id again will be used with a label let's just write price and we also need of course the value value will be the price that we are getting currently from the state on change will work with a handle change like we already did before handle change and then last but not least we have the class name class name and the class name will be simply um what we have we have form control form control let's check it out control and not control x in fact this will be control once we say that yep this of course is the room price but i can change that oh no actually everything is working already yeah right because we already have the handle change now as i'm going to be scrolling i'm not filtering anything but you notice how the value is changing and that's the reason why i have 600 if you'll notice in all my rooms the max value will be 600 and that's something that we didn't by the way we already had the filter here but the reason for that is because my presidential is 600 if some room would be let's say thousand and thousand dollars would be shown and remember we did that in the context in the very beginning when we were getting our data now once we have the room price all this is done what we need is filtering because at the moment again we are just getting the type as well as the capacity again as we're looking at our state what you'll notice is that from the range again the same thing happens like we did before where the value will be changing in state all that is going to be happening but notice the max price is 600 the moment i touch it the price is 577 and as you can see here quotation marks that means that this is a string and again something that whenever you're working with the range the return that you're going to get back will be in fact a string so what we need to do is again the same thing like we did with capacity then in this case we're just going to change this around where we're going to have not capacity but we're going to write price so the price that we are getting from the state first and foremost and now let's do a little bit of filtering where again after the filter by capacity you know what i'm going to add here change state just so i can see where i'm actually changing the state and we're going to set up another filter now this filter be filter filter by price and then what we're going to do over here we're going to say if and in this case we can just go with no if statement because what we need to understand that if in general we're going to be changing the price then we would just want to display all the rooms that are being obviously rendered right now in that case we can skip the if statement we can say temp rooms equals to temp rooms like so and we're gonna run with filter now within the filter we're gonna have what well we're gonna have not temp rooms but we're gonna have temp and temp room instead of temp rooms and then filter and what are we saying here we're going to say room if your price is less than the price that we currently have in the range then that room will be displayed so let's write room price if your price is less than price then obviously our rooms will be rendered okay let's save that and if we're going to go to the bigger screen again i'm going to close this one right now and if you're going to notice something that if i'm changing the price also the rooms that have the price less than what we currently have in the range only those rooms will be rendered i'm going to go up to let's say 431 the last room will be 400 and then i have 280 and that's how we can filter according to a price that we're setting here in our range now that we are experts already how we can work with the filtering why don't we complete our application as far as our search rooms component is concerned because in this case we will gonna set up filter according to the size as well as we are going to create these check boxes and set up the functionality okay now we have the end of room that is not what we want right now we would want the size and i'm going to say end of size and off size as well as we will going to have a div by the name of form group within this form group we will going to have label a label will be for the size in this case and then we're going to call this room size after the label i would want to set up div now within this div and we're going to call this size inputs and not input but in fact inputs and then within this div we're all going to place these two inputs one will be for the small size and the other one will be for the big size uh input type will be number we're gonna head over with a number and then as far as name is concerned we're gonna say min size id in this case we'll just gonna be a size of course because this is what we have labeled for size then our value will be from the state mean size and then what else we would want well we also could use on change that will be equal to our handle change and last one will be class name class name will be of course for styling self explanatory size input size input so size hyphen input all right that is my input and what i would want right now is copy and paste this guy copy and paste that and the second one will just have different values where instead of min size will change everywhere to the max size now that obviously is in two places so value as well as the naming will be max size instead that should do it that will be my room size min and max and again remember the filtering that we did all the way in the very very beginning when we did have component did mount we checked for the max size and we set this up in a state so that is exactly why we have this value of thousand again if one room would have a bigger size bigger square footage obviously that will be rendered and then last but not least i would want to show these check boxes so in this case let's write extras and i just want to complete here everything within our component and then we're going to set up the context there's no point for us to jump back and forth because we already should have the general idea and of extras now in this one again we're going to start with the div form group within the div we're going to have a two other divs one of them will be where both of them in fact will be single extra single extra within this div what i would want is input by the type of checkbox name will be breakfast and again this needs to match whatever state values we have uh for the id i don't think we need anything just delete it because there's not going to be a label or you know what no my apologies there will be a label so why don't we write here break first like so and right after the input we're gonna write our label and i didn't notice that it was right after it and why don't we write uh breakfast since that is the div and let's just write breakfast here as well okay we have our setup for the input we do need to have obviously the value however the value in this case will not going to be value attribute by itself but because we are working with a checkbox we need to set the sql as checked now for the check we will going to be checking what is the value that we're getting back from the breakfast property in state all right and we also have the on change that will be applied later on so i'm going to say unchange and they'll change let's save that this will be my breakfast and just to show you that this is working if i'm gonna head over back to a state and i'm gonna set this equal to true notice the checkbox will be checked okay let's do that let's say false back to false and last but not least i would want one more div exactly the same just the value will not be breakfast it will be pets now in this case i will gonna select bunch of them because i would want to pretty much change them all together so i have one breakfast second breakfast this guy's a breakfast this guy is a breakfast and this guy's a breakfast we're going to delete them all i'm just going to write pets that should be the value that i'm getting back from the state so pets pets and pets this should do it once we have this kind of setup then we have context of course and we can do all our changes in the context first one we are going to be looking at is not going to be filtering by price but in fact we're going to filter by size the way this is going to work we're going to say and this is change state so let's leave that but again we don't need to even use the if statement and just say temp rooms and temp rooms is obviously the array we'll have and we're always going to filter it and we're going to say filter by and in this case we're going to say room and now i'm going to be checking we want to make sure that we are only returning the room which size is in fact bigger than minimum size that we're going to have over here and smaller than maximum the way we write that we can just say room size is bigger and by the way i need to write bigger here i need to say bigger than a min size and then also i need to use the and operator so i'm saying and room size is less than the mac size so min and max okay this is going to filter depending on the room size and we also have two more filters and those ones will be the breakfast and the pets why don't we add here that filter by size and filter let's say filter by breakfast breakfast and then copy and paste that and this will be pets pets and again very simple filter where i'm going to say if breakfast is true so in fact if we click on it then we were going to be checking basically temp rooms again temp rooms is equal to temp rooms filter and then return me a room that room breakfast is in fact equal to true okay and very similar way where we have filtered by pets you can just copy and paste that filter by pets and instead of breakfast of course we're just gonna have to change it here we're gonna say we are selecting both of them and we would just want to select pets whether the pets is true then of course we're gonna be returning only the rooms that allow pets uh one thing that i wanna mention is the fact that the reason why the checkbox it doesn't use the value attribute it just uses the checked attribute that's the reason why we checked the type and if the type was checkbox then we know that we're targeting the checked attribute instead of the value attribute we're almost ready to take our baby out for spin but i am noticing that there is a bug because in this case i set this equal to target so i went with event not target this is equal to target and instead of what i'm not checking is i should be checking target type not the event type right now let's set this up we're gonna head over to our document and in this case why don't we start checking which rooms have the breakfast and which don't so if i click on it i'm being shown that these four rooms have the breakfast if we click on it again now we see all the rooms same thing we can do with the pets these rooms allow pets however these rooms can have pets and the breakfast if you're gonna get rid of the pets now you're gonna have only breakfast so what we can see is that all the rooms that offer breakfast also offer pets however there's rooms that don't offer breakfast but do offer free pets and of course we can combine it with all the rest of the filters that we already had the same goes with size i could go to let's say zero square footage in this case this is not going to work but let's say these rooms are at least 500 square footage and i can obviously add it to the price and so on and so forth this is how we can set up all the filtering in our application awesome guys we have a fully functional project however there is one thing that is bugging me and that one thing is very simple currently we are using our local data and while that not be a big issue and overall it was really good when we were setting up the application because if we needed to do any kind of changes we could just do it in our data js the problem will be later on when we're hosting this application let's say on netlife because if we're using the local data that means two things first of all we always will gonna have to have access to this project on our machine honestly if we would want to make some kind of changes and let's say if we would want to add one more room we would need to get that image we would need to import this image in a file set up the object as well as what that means is that most likely you'll be the one who needs to add these changes and for the simple reason let's imagine scenario where person is not aware of what is a javascript object or something like that and they're struggling with this kind of setup so wouldn't it be nicer if there would be a external resource where we can set up our data separately from our project in order to set up the data we're going to have a nice graphical interface so even somebody who doesn't know anything about our project would be able to do it and we could access that data using the cdn and not only that we could access the data even though we would have different type of application let's say currently we're obviously using the react application well we could do the same with gatsby we could do the same with venandle.js and that external platform will be by the name of contentful and i already named all the nice features about contentful but why don't i repeat well contentful is a content infrastructure and what that means is that we can have a nice graphical interface to set up our application and then we can consume our application regardless whether we have react application gatsby application vanilla js application just to name a few and counterfall is something called headless cms or boyf which would translate to bring your own front end and this is exactly what i mentioned before where regardless of the type of application we're going to have we will be able to consume our data without changing the data obviously contentful has a paid versions and all that but we will going to use a free one and the free one just requires for the email nothing more so i would encourage you to sign up you get like 5 000 records two spaces and all that so i don't think there is no reason why you shouldn't try it out and set it up for this application now next one up i will gonna log in again hopefully you're gonna sign up for the free version and you're gonna be able to follow along now once we click on login i will gonna be directed to a space and this is something you won't gonna see because most likely in the beginning you're just gonna have to sign up for the example space so you'll be met by this type of screen now in this video i would like to do a brief overview what you should expect from the interface and next we're going to be setting up the content model as well as the content so as you're looking at it there's really four things that are really important especially in the beginning as you're working with contentful so first of all would be the space again most likely you'll gonna have the example space but if you would want to create a new space and you can think of it as a database as a project you can just click here on creating a new space as you're using the free ones you can see that i'm using one of two and that means that the moment i'm going to create a second one that would exceed what i can use with obviously the free one or that would pretty much limit to two environments now i'm going to open this up and i'm going to call this example just like you probably will going to have in the very very beginning so i'm going to say proceed then we're going to create a new space and before we start talking about content model or content i would want to show you that if you have that example space or in general you have a space and you do want to delete it you will need to head over to general settings and notice then it says remove space and all its contents and then you just need to say okay so this is going to be the example one or whatever space you have and if you would want to remove it you just need to type example obviously the name of it and i went all caps here an example and we're going to remove the space then again i'm going to go back to the space that i already had depending on what you have you can either create a new one or you can keep on working on the example one that let's say you didn't delete then we have a space home and what's really nice over here is the documentation for how we're going to be consuming the data we were going to use the sdk which means software development kit but you can obviously access this also with api we're not going to do that right now because we still would need to have a look how we can set up the data then next one up we have the content model and notice we have beach room or beach resort room obviously this for you should be empty because if you just set up the data but for me i already set up the data that we're going to be consuming with this application again what content model would be if we're going to head over back that would be the structure for your inputs so let's say in our case this is obviously a room so content model would be structure for that room input and you can think of it again as an object you can think of it as any kind of structure that would give you availability later on to add that particular data notice i have few content models here for multiple courses and tutorials let's say i have coffee item comfy house products and so on and so forth and what you're noticing here these would be the fields so this would describe what kind of content i'm actually going to be adding all right now once we have the content model then after that we have the content so once i have set up the blueprint of how my data will be structured then i only need to work as a factory and just keep adding any kind of data i would like so if i'm going to go over to my beach resort room you'll notice that i you have or i have 13 entries and this will pretty much be each and every room all right now last but not least as far as the general interface we would be interested again in the settings and setting up the api keys so why we're interested in that because in order to consume that data we will gonna have to use these api keys we can head over to api keys again for you you most likely will just gonna have one example one but i already set it up a multiple ones for my different tutorials and projects and the way you can just add a new api key very simply just click over here we're adding new api key you can name it however you'd like you can have description but yeah what you'll be interested is this data one will be the access token and the second one will be space id now once we have the general idea how the contentful interface works next one up we're going to be setting up the content model as well as the content for our data once we have the general understanding how we can work with contentful interface next one up we would want to set up the structure for the data that we're going to be creating i already have the structure i already have beach room resort as well as i have all the data here now i do want to show you how to do it from the scratch and this is the reason why i'm going to set up the example one however in the next video when we're going to be adding the data i will going to keep on adding to the data to a content model that i already have because there's no point for me to create two of them and just keep adding to the new one all right but i do want to show you how to do everything from scratch so first things first we would need to go with add content type and the name here is important because this will be used as api identifier so you will going to need to access it later on because by default you are going to be getting all your data and most likely you would want to limit of what kind of data you would like to consume so in my case i will gonna call this beach beach uh resort room and you can call this however you would like i will gonna go with example because by the next video i'm gonna delete it anyway so i'm gonna write a create a new one and notice this is the id that we're going to be using like it says here use this id to retrieve everything related to this content type via api all right so this is something that you would need to remember regarding of what kind of naming you have and the next one up is very very simple where we just start adding the fields we would like so i'm going to go with the first one and the first one will be name as you can see these would be the type of fields we can have whether we have the rich text text number and i'm not going to name them all of them you can obviously see them as you're working with contentful now we're going to go with the text this will be the first one for the name and here we have two options we can go with the short one or the long one so for description we're gonna go with the long one but for the simple name field i'm just gonna go here and i'm gonna say that i would like to create and the moment we created we have two options we could have configured in a previous screen or we can do it here now what do i mean by configuration well a lot of times what i see especially in the courses and tutorials where people forget to add that particular field so let's say they do set up here your content model but later on when they're adding the content they like skip some kind of field and then when they're trying to access it they write me hey john listen there's something wrong with application i cannot access that particular field well the problem is that most cases the student or whoever is watching the project just skips adding that field so in order to avoid that we can just go with required field so that way we're making sure that we're not going to be able to save this particular content as we're adding that content into this content model if we skip that field now this is really up to you if you're 100 confident that you'll not be that person then obviously you can skip this but in general i always prefer to do it myself because that way i am not skipping something all right now first one was the name then after that we have the slug and again we're going to go with simple text i'm going to go in slug we're going to create and in general i'm going to go to validations in required field now i'm also going to show you how we can do it right away as we're saving next field up will be price and for that we're going to go with integer in this case we have a decimal so if you're going to go with the rooms let's say that have decimal price obviously go with decimal i'm going to go with integer and i'm just going to call this price all right now i'm going to create it and in this case notice we also have create and configure and that way we right away go to validations and we can just say required and obviously you have other options but again we're going to be skipping in this tutorial then we have the type right after the price we're going to go with the type type will be again short text so we're going to go with type short text create configure validations required field and next one up we do have the size for the size again we're going to go with integer so number integer this will be size of the room so what would be the square footage validations required field all right then we do have the capacity so what would be the max people of how many can stay in a room again we're going to go with integer so let's call this size create configure and in this case it's complaining that it's already there well because the name obviously isn't uh size its capacity my bad capacity create and configure foundations required field all right we have that then we have two of them pets and breakfast that will be boolean so we just go with let's say boolean here and we have pets whether pets are allowed again we set up the validations all right next one up we have breakfast again we're gonna go with boolean breakfast create and configure and in this case again we are going with the required field after that we're looking whether the room is featured so whether the room shows up on homepage this is where we're setting up that featured room and in this case again we'll go with that field again we're going to go with boolean featured and i will going to be skipping over here because this is as straightforward as it gets again we're going to go with a required field and then we have the description extras and images and just to show that obviously you don't have to always have everything required i will not gonna create them as required fields but again remember if you want them as required fields make sure that you click on configuration let's go with a description and for description we will going to go with long text because technically we could fit everything that we have here of course i don't think we have 255 but i will gonna go with long text now in this case how we're going to call this description like so create and again in this case i'm not going to be requiring that field extras will be what we can see in a single home page notice if we're going to be navigating here these were going to be my extras and for extras we're going to use something new that we haven't seen yet and that is a json object so what we're going to say is the json object this is what we're going to use for extras create and configure if you want to have required or i'm just going to go with required and then last one will be images now for the images notice that we are obviously using multiple of them because for the single page it's not just one image in fact this is many files so this is the difference if you just want one image you go with one file if you want multiple images you just say that images and this will be many files okay now once we create it i will gonna save it again remember this is where we're gonna be able to find the id obviously i'm gonna come back to this i'm just giving you a heads up and then once we save it in the next video i would like to start adding the content because our content model is there so we have the blueprint of what kind of data we would like to add and if we would want to add the data again we're heading over to the content and then we have option basically decide where you would want to add the entry if i would want to add to beach resort room which i will do i would add it here if you want to add to example or the one that you created obviously you would need to click on that in your case most likely just because you just started this will be the only option the content model that we just created but in general once you're gonna have multiple this is where you will need to use this drop down and decide where you would want to add the content once we have successfully set up the content model now this would be a great time to start adding the content before we do that i will gonna delete my example because like i said previously i will gonna be adding my content to previously already created content model and in order to delete that particular content model we just need to head over there click on deleting then i will gonna select the name here since i'm lazy to type it out and sure enough we can just delete it and the content model is gone then we're gonna head over to the content and like i said we would need to decide to where we would want to add it to which content model well in our case i will gonna go with beach resort room and we're just gonna click on adding the entry again the same would go here we we can click anywhere we would want but we have the suggested one already alright now in this case once we click on it we are adding the entry and then we just need to decide what would be the name since i'm going for all the rooms i'm going with single then double then let's say family in this case just because these will be examples i'm just going to name them triple and we're going to start with economy and then we also would need to add a slug in your case as always you can come up with whatever names you would want then for the type this will be triple price let's say will be 500 bucks size will be 1200 uh square footage then capacity we're obviously going to say that max three people can stay there uh no pets allowed no breakfast no free breakfast it will not be featured and again just because i want to save a little bit of time i'm just going to grab the description that i had already previously we're going to copy and paste that then next one up we have the extras and for the next again i already have this array set up like this for the json one so i'm just going to copy and paste it in your case if you want to create it from scratch this is really up to you then we have the image and we have multiple ways how we can add images the first one the most easiest one would be from your local machine so i'm just going to click on it this is going to select everything that i have i will going to head over to a desktop then i already added them to the images and most likely you're gonna have these images as well and we're gonna start by room 13. so we're going to open that all right this will be our first image and then always always remember to click on publishing otherwise again this is the part where sometimes uh somebody who's watching tutorial or course skips and then you'll have no access to that image this would be our first and only image currently but remember we set it up that we will have multiple images and what we can do here the other option would be link existing assets and in this case i'm having all the images that i already have in the contentful in your case again probably you'll just gonna have this one image so what i'm gonna do is i'm gonna find where i have those linked images and remember when i had a single room for all the rooms i had these three images that were basically describing that one particular room and the way you can do that is since again you're linking your assets you can just say okay show me this one this one and this one so these three will be added and the way i did it is i added for all the rooms now once we have this set up the only thing we need to do is click on adding and then we have a few options we can click here where we're going back to all the content that we have or i can just add a new one here again multiple ways how we can create a new content and in this case i'm back in the content screen where i could search for different type of contents so this is going to give me coffee item again coffee product or i'm gonna go back to beach room sort this will show me all the entries that i have and then if i would want to add new entry obviously i just click here and again if you want you can add it to different content types but since we're working right now with beach rooms it will only gonna make sense if we keep on adding the content all right now let's go with content not content sorry triple and let's call this basic then again we're gonna do the same thing so lots of repetition here triple basic type will be triple then uh price let's go with i don't know six hundred dollars again i'm just free riding right now here um i don't know 30 or 3 000 square feet capacity still will be three people no pets no breakfast or you know what let's give it a breakfast here but no pets it will not be featured and say mulch peel here we're gonna go with description i'm just gonna make sure that we copy everything correctly then copy and paste json the same deal we had our extras okay so just a little bit of data input here then last one will be images and again in this case i will gonna show you that we are not limited to adding from the computer or from the assets we already have we can obviously also do the web search so let's say here you would look for i don't know hotel so this is just gonna give you all the images that you can add for the hotel i will not gonna go with this route i will still going to continue adding from my device but just to let you know this is also your option i'm going to go with room 14 this will be my image all right as always let's make sure that we remember to click on publishing then we're going to head over back and like i said we would want to add these new assets and by the way this is not what i wanted to do this is going to give me the draft where i can just delete it so in this case i can say all right i don't want this asset and last one i would want is link existing assets or the way we would do that of course again we're going to find for the images that will be added to all my rooms okay now this will be added again we can just get rid of that guy because we don't need it and then we just click on publish so this will be the second one and i'll show the third one which will be the last one because again you probably don't want to watch me do the data entry so it doesn't really make sense to do more in three now last one i'll show you that we can do it from the actions tab right here so we don't have to go back just click here create now this will gonna create a new m tree and then i'm gonna check it out what was the naming that i used so i used single standard okay so this will be my last one so i'm gonna go with single or you know what not triple uh triple standard standard room this will be standard of course the slug will be the same just with a hyphen like so type will be still triple price i don't know we can go with maybe 200 again we're just free writing here uh size i don't know maybe go with 400 capacity still three and why don't we add for this one the pets are allowed as well as the breakfast but it will still not be featured and last but not least i would want to head over and again add the description like we did before so let's check it out this will be my description maybe let's get rid of all the quotation marks here like so and we have also obviously our json data for extras so let's select that this will be added here and then let's add also the images like we already did before where we're going to click on that then we're going to head over to room 15. this will add our image okay so far so good you can obviously right away publish it and let's link our existing assets which by this time if you have been coding along you should have at least some images already there so you can click on existing assets then we're going to find them i'm going to say this guy this guy and this guy will be added and of course i'm just going to publish that then the moment i do that once we're were gonna head over back to all my data i should be able to see that i have 16 where previously i had 13. once you have added whatever rooms you would like obviously in your case if you're trying to access it it would make more sense the more rooms you're going to have because like i said the moment you start filtering it it makes sense that you have more data otherwise if you have three rooms the filtering is also going to be kind of boring once you have added the data next one we're gonna look at how we can access this data from our application all right guys we successfully set up our data structure as well as we added the data so now this would be the time where we start in fact consuming our data and the fastest way of doing it would be using the sdk and for that we will gonna have to install one more package by the name of you guessed it contentful or contentful doesn't really matter however you would want to pronounce it i will going to stop the dev server i'm going to clear the console right now and we're going to copy and paste it here the npm install contentful or contentful and let me just copy and paste that and sure enough this will be installing right now while this is being installed why don't we right away check it out the documentation and what we're really interested is creating the client as well as running the method of getting entries again there's a bunch of things that you can do here and if you would want to get a single entry obviously check it out the get entry but what we will be interested is getting entries now as we're scrolling down you're all going to notice that first and foremost we do need to install it they also let you know that if for example you're working with simple vanilla javascript application you can do something like this where you are using the cdn but it will not be our case of course because we do have the content full installed and then we just need to require it of course and then run this method create client and we need to pass here the object with two parameters one would be space and the second one will be access token now i'll show you in a second again where we do need to get this information but i think this will be our first step so why don't we clear the console we can start the dev server obviously these will be two first steps then i can close it and we can create a new file so within the source i could say you know what i would want a new file and i'm going to call this file let's say contentful contentful and we're going to say js and instead of using the syntax that they give us here which by the way we can do it you can just copy and paste it why don't we set up the es6 way what i'm going to say import now in this case i will need to use the named import and the method name will be create client this will be from contentful and then right away we're going to use the export default we're going to say export default and we're going to run this method or the function but we're going to pass in obviously our own parameters so the first one will be space and the second one will be access token where can we get this information remember in the very very beginning i showed you that here we have the api keys under the settings we head over to api keys and we just need to create one now i can name this however i would like this could be store 4 or whatever i'm just going to say resort rooms or something like this then let's copy this guy let's say that this will be my space and we're going to set this equal and as a side note in the next video before we deploy this on a netlify we will going to create our environment variables okay so if you are right now committing this to the github please don't because you probably don't want to share this information then i'm going to get also my access token and the same would go here for the property on the object access token and this will be equal to my string now let's save that we have successfully exported right away this function so now our next step will be heading over to the context then right after the items i would want to import since this is a default export anyway i can name this however i would want i will name this client and this will be coming from my local content file so the same folder all right now once i have that i will gonna use client and then if you're looking at it in their example they give you this get entry where we are looking for specific entries and this is what i was saying where these two probably will be your most used ones where either you're getting all the entries or you're getting specific one now you have other options here but these will probably be your most used ones instead of getting the entry which we will not do i'm gonna head over to the get entries and right away notice what happens so they give you an idea what you should do and this is exactly how we're gonna test it out first by running client which in our case obviously would be whatever we would name it because that was a default export the click client or create client and then we're just going to run get entries this will return a promise and then we're going to consume the promise with dot then and then we're just going to be looking for response and the reason for that because i want to show you what would be the pitfall if we are not filtering actually our entries okay let's copy this in our case i already named this client so we're going to have to adjust it a little bit where it will not gonna be client but let's say all the way on the top of our file i'm just gonna run it now first and foremost i do wanna check whether my dev server is running before i start checking out the console yes everything is correct and then we'll gonna head over back to my recording and let's see what happens if i open up the console okay now in this case nothing is happening but at the moment i do have my array and what do you see right now when i see array of 64 and the problem is the fact that i'm getting all the data that i have right now so everything that i have and by the way i'm going to save the changes here so it's working but all my entries are here not just my 16 the ones that i was looking for where i said that i would want the beach resort room as you can see right now i can't filter it out but if i'm looking at all my data in fact the value will be 64. so what i'm saying is if you're going to have multiple content types for let's say each and every project you probably would want to filter it out you can obviously do this in your file i could go back and be like okay whatever data i'm getting back i would want to filter it somehow out but you can also do it right away as you're making the request and in order to understand more information about this what we were going to do as we are getting the entries we were going to head over to rest api reference and this will going to give us more details now as we're looking at it notice what they're saying if you want to query entries we would need to use either content id or content type now in our case we're going to go with content type and if you're going to click on querying the entries check this out so they tell you okay what would be the content type and then within the content type we are passing in the id now your next question probably will be well where are we looking for that id and remember in the very very beginning when we were setting this up i was like a chicken and i was reminding you all the time you need to remember this id you need to remember this id and when i say remember obviously i don't mean that you need to remember the id for each and every content model that you have but you should know where to find it so if you're going to go to that particular content model this is the id that you'll have to use in order to filter your data depending on your particular content model so what we can do over here is again we're just testing it out right now don't worry about it but we do need to write content like so then underscore type and then let's pass in that beach room sort because that was obviously the name of my content type if you have a different name please add a different name than one that's matching and voila in our case we have the 16 items that i was looking for so once i have this information of course we would need to restructure a little bit of our application because the moment the only thing that i'm doing is console logging and that is obviously not the extent that i would like to do so remember in the very very beginning i said to you they're all going to be this function by the name of get data that will be responsible for getting the data from the continental and instead of doing everything in the component did mount where we again used our method the one that we created ourselves with format data instead we were going to move all this functionality into this this dot get data and then we're just going to run this function okay now let's list it up first of all let's build it we're going to name this surprisingly get data then this will be a sync because i do want to use a sync weight because this is just a little bit more straightforward syntax as we're dealing with asynchronous code so let's write it here async await and you know what why don't we right away at it within a try catch because that way we're all going to be able to find more errors if there are any and the first thing why don't we console log the error just in case there is one and then within the try what would we want to set up well we're all going to be waiting for response and since we are using a single weight i can just say okay let response and this will be equal to a weight because i am using a sink weight and then i have the client and in this case i am using again get entries so either you can copy and paste it whatever we had here on top where we had the entries and then you would want to add this content type now we will gonna add one more thing for the order but that will be in a second so you know what since i'll have to delete it anyway i will gonna get rid of this guy i will gonna delete that then and we're just going to set this await equal to whatever response we're going to be getting so now we're getting back this in this response variable all right now okay so far so good we got our response back now what well we have all this functionality and remember again i was repeating this over and over again when i said we are creating this function correct but then within the function at the moment we were passing all the time i keep repeating local data local data local data and then once we're going to get external data we will going to flip it around where all this data that we were using all the time locally we all just going to use externally and we are not going to change any functionality below that all right so how this is going to work well i am using right now my response i'm getting my response so it's very easy in fact i can take everything that i had already before here we can just actually cut it out because again i don't see the point of rewriting anything we can uncomment this so we will run this that data however after the response once i copy and paste that the difference would be that i'm not adding here the items then in fact we will gonna pass within our function response items so the way this all works is i'm getting back my response from the contentful and on the response object there will be items now if i open up my response check this out what happened here when we were console logging remember we were console logging response data items this is the array that we already had locally meaning like i said we had less fields we obviously didn't have in a system object so many options we didn't have as well some maybe extra stuff that they had within the fields property but in general the setup was exactly the same and again if you want to double check that you can notice that whenever you're going to be dealing with get entries this is exactly what's going to happen you will going to have your response object and then within the results pawn subject the property name will be items and the way we structured our data locally is a simple difference that as i'm getting this data right now externally i don't pass items i pass response items of course you could set this up differently but the main idea is very simple here that now the data will be from contentful it will be external data and the difference pretty much is just the fact that we are getting it from the control i'm specifically saying what kind of data i'm looking for and then from the response i'm just using the items and everything else here yes will stay the same now what i would like to do right now is comment out the items just for sure that you know that i'm not using the local data we will gonna save that and voila people if everything is correct and i can by the way close the console check this out i already can see that i have featured rooms so this is working really well and then i have rooms all together so i have all my 16 rooms check this out so i have four rows with four columns each now i know that i successfully got the data because if you remember locally i had only 13 items and now we're working with 16 items and again we didn't have to change any kind of functionality or anything like that that's the reason why we went through the pain in the beginning when we structured our data exactly like they would the only difference obviously is that we are getting back the object and we placed everything already in this items so that was our items array but this way we don't need to recreate anything i don't need to refactor anything because it already matches the format that we're getting back and again we can do all the filtering and everything and i'm not going to bore you right now however there is one thing that you probably noticed where you're like okay so i get single standard then right away i have triple standard then i have double economy and again we could actually set up some kind of filtering right now here i could say okay whatever items i got filter depending on that and only then update rooms you could do it but since this is a case where i would want to show you that we can also do it from the contentful why don't we head over again to documentation and be rockstars and find out how we can do that so if i'm gonna go again back to api reference we all gonna scroll down we eventually will to hit the order or let's say reverse order now let's test it out we would say let's say order and there we're going to give you an example here pretty much where we can order it depending on a date and again in this case i just want to speed this up so i'm just going to grab this information order we're all going to head over back and the next one will be depending on order now they do warn you right away that you do need to right away set up a specific content type so notice they're saying you must set the content type otherwise obviously you're going to be pretty much working with all of the data that you're getting back now in this case why don't we set this up so in this case i'm using the order now let's save that and yep what happens here is that i have single economy which was first then single basic single standard single deluxe and so on and so forth let's imagine that you don't believe me you're like okay i don't believe that this is actually working maybe he's just saying that that was how the order came in okay just to prove my point we still have the comma i will going to comment this out right now and why don't we set up instead we can use the order property again that's what we need to do and then what is the property that we would want to order in well why don't we try it out the price and again if you want to find out what property you should order by you just need to go back again to your local data and remember each and every object has all the same properties so what do you have within the fields we have name we have slog type price so why don't we order them by price okay why don't we start very simply by ordering them by price as we're heading over again back to context.js now where is the price it is in the fields property and then we're looking for the price let's save that and yeah now everything is grouped by the price again we have 100.50 to 200 250 again 250 and i can go on and on and on now last one why don't we check it out how we can do the reverse order because again this is something that they suggest in the documentation where the next one would be reverse order and the only thing we would need to do again is use the order property and then flip the sign where this would be a negative sign or subtraction sign now let's test it out like i keep saying all the time let's do the negative one and now i should start with 600 or whatever was my max yep it was 600 and then obviously we're going reverse order as i said before all the things that we could do manually of course ourselves but what i'm trying to show is that contentful gives you nice options where you can already get your data structured the way you would like we successfully have pulled data from the contentful and now we're ready to deploy our application online well there's many awesome platforms that we could use in our case we're going to use netlify because it's an awesome hasslefree service and even free account allows you to do a bunch of things in order to get the free account the only thing you would need to do is sign up with your email and they will not gonna hassle you you're not gonna have to leave your credit card or anything like that and you're going to be good to go assuming that you already have signed up for the account i'm just going to log in and in your case probably if you just sign up for the service this screen will be empty in my case i have a bunch of projects for the tutorials on the project there's two ways how we can do it we can do a single drag and drop or in fact we can use the continuous deployment using the github this is the option we're gonna choose so for that you're also gonna need to have a github account however assuming that you're watching a react tutorial it's safe to say that you probably already have one so i'm just gonna be kind of skipping a lot of things because i do find it very very basic first and foremost we're gonna have to create a new repository i'm gonna name one i don't know react beach resort and let's say recording and then what i would like to have is the external url and in my case it's saying okay you can have it and the reason why i would want the remote url because this is going to let my git know where to push the application that we have built then we're going to head over back to my document and before we actually set up the git i would like to change these variables to the environment variables because i wouldn't want to push them up to the github now in order to do that we're going to first create a new file we're going to call this dot env development like so once we have this file i would also right away want to add this to git ignore so this way the file will be ignored when we're going to be pushing this up to the github and let's call this not git ignore but in fact env development just make sure that you add this dot in front of it and once we have the development file within the file we're going to create the environment variables now in that case we can change how we're accessing them so instead of just placing the string here so the rest of the world can see our secret variables we're going to set them up in the environment variable file and the way we work it with create react app the naming would be react underscore app and then whatever name of your variable so in my case i will going to call this api and let's call this space i'm going to set this equal to whatever string i had first and foremost and the second will be this access token so let's grab this value as well by the way we can probably cut this out and we'll just go with naming react app access token and then let's copy and paste that once i have these two values what's going to happen is my application will break even though we were going to be accessing them now let me show you how this is going to work first and foremost if you would want to access these environment variables we go with process.env and then whatever name we had so in my case this was react app api space so let's copy and paste that and the second one will be exactly the same but of course the variable name should be matching whatever i had for the access token so let's delete that and we're gonna go with the react app that is again the important part and let's call this access token once i'm going to save it my application will going to break and the reason why it will break because every time we're creating these environment variables we do need to restart the server so let's stop the server clear the integrated terminal and let's run npm start just double check that everything is working because obviously it doesn't make sense pushing this up to the netlify if you already have some errors locally thankfully everything is working so everything is awesome and now again i'm going to have to clear the integrated terminal as well as stop the server and my first thing would be setting this up as a git repository so we're going to initialize the git get in it now once we do that the next one would be adding all the styles or not i'm sorry not all the styles all the files so in order to do that of course we're going to say git add and we're going to add all of them then after that why don't we do the commit so git commit and what would be the message i don't know react beach beach application something like this at this moment we're committing and now we would need this remote url so in this case i'm going to copy and paste this line clear the console probably first now this will gonna create my remote url and last but not least i would want to push it up to my github repository so let's go back get push u and origin will be master in our case hopefully everything is working hopefully we didn't push up the environment development file because otherwise everything that we did is kind of useless anyway uh let's refresh the browser let's see okay this will be my project awesome and now we're going to have to head over back to indentify and we're gonna have to click on this tab where we have new site from git and of course in this case i would need to choose my provider in my case i will gonna choose the github and then why don't we find right away the file that i had or not file the repository and it was the react beach resort recording however before we do anything before we click on deploying the site we would want to check out the advanced one and add the same variables that we had before otherwise basically you're going to deploy the site it will going to break and then you're going to have to add them anyway so you might as well skip that step and the way we're going to do that we do need to copy and paste these values so number one and number two would be the value of course so this will be my space one and then after that i would want another one the access token so let's go with this guy copy and paste and the same i'm going to do it over here copy and paste once we have that let's deploy the site now notify we're going to start building the site and while the build process is happening we're just going to go to the site settings and we're going to change the name and again why don't we change the to react beach resort recording yeah i should do it let's save that and it says the name is already taken okay unfortunately that is the case why don't we say youtube as well i think this should work and yes it is working we change successfully site name let's look at the deploy currently we can even check it out how the build process is happening and as you can see right now this is being built and if there will going to be some errors you will be able to see them now i do need to warn you that it is kind of hard to work off the netlife errors as you're getting them in most cases you do need to troubleshoot and that is not as easy as it seems but anyway you can see if there's some kind of error and let's say there would be an access token error or something like that it might show up here okay now let's head over to the github we can might as well close that the site is still being built but no it's already live awesome let's head over back to a site we're going to click on here and of course this will be my site and check this out i do have my rooms awesome and if you remember we were using the order and the order was reversed so in this case everything comes with a higher price first then we do have the rooms so we have the rooms we obviously can have an option of filtering it we can also have the error page where if i'm not going to be able to find the page let's say we're going to go with hello notice remember we had our 404 page not found and this is where that file remember we copy and paste in the public dose redirect so if you're not going to copy and paste that if you're not going to use that simple line of code then it will going to be directing you basically to your default netlify error page as well as when you're going to be refreshing the single page if you're going to click on here and if you're going to be refreshing the single page it will not work in our case notice nothing breaks and this is why it's important to include those redirects we do have all the pages everything is working and just to show you that we are actually connected nicely with contentful let me show you one last thing if we're going to head over let's say to con in full and just because this is an easiest option i will going to delete one of the rooms that we have just so you can see that this is working and the room that i will gonna delete will be presidential because that way we for sure know that this would be something unique so first and foremost we're gonna have to go with then publish okay so we're gonna unpublish it then it shows that this is a draft already now it's not published and then why don't we delete it so we're gonna go with deletion and the moment we do that if i'm gonna head over back to my project notice this was previously the first one the moment we're going to refresh what do you see here i don't see any more presidential and if you're going to look at all the rooms we notice that we have one list so now we know that everything has been nicely connected to contentful and what that means is that now your project doesn't have to be in your local machine you don't have to add all the changes in fact you can work with your project data exclusively on contentful hopefully you guys enjoy the project and hopefully i'll see you on my next project