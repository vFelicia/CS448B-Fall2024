hello hello everyone and welcome to another live stream in which we're going to solve project Euler challenges using javascript for those of you who didn't join the first live stream we had I think two weeks ago we solve the first four problems using the free code camp platform and in this dream we're going to solve a couple more we'll see how it goes and how many we can solve if you join the live stream I can see close to 100 people being like say hi in the chat and yeah keep in mind that yeah I didn't prepare for this problem so well I don't have the solution I looked over to see how it looks and well how it works how it should work like a main idea but I didn't solve them and that's because I want to show you how how you can even fail when you start doing something you start coding on something and that's perfectly normal so yeah we're going to try and solve this on the first go and see how it goes for those of you who don't know me my name is Larry Popp I'm a developer from Romania I have a YouTube channel where you can find me live coding almost daily and I also upload different videos or you can follow me on Twitter if you want alright I see Quincy hello Quincy get so yeah I think you can hear me let me know in the chat and we can start with the problem number five the smallest multiple let's see what it requires smallest multiple 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any reminder what is the smallest positive number that is evenly divisible by all of the numbers from 1 to n all right so we're having to deal with the divisible numbers okay yeah also as Quincy met Christmas and the chat for now is for members only if you want to enjoy the chat I haven't be able to chat with me and engage consider becoming a member you also support this awesome platform and help other developers learn how to code for free alright so let's see we need to figure out how well probably this one of the problems I wanted to solve today is the hardest and that's because well we could go so we need to get all the numbers from one to add and then we need to find the smallest number which can be divided by each of these numbers right now this could be trickier we could just start and multiply 1 + 1 with 2 + 3 + 4 up to n but then we'll get a very high number and that's not the smallest number possible I know that there is a function but I knew about it but I kind of forgot in which you could check for you could have two numbers and check which is the lowest column multiplier let's let's go the latency lowest common divisor ya think ya LCD I think for not denominator let's see to do to do or so this could be one approach to use this function although it can see it now or we can go the bruteforce and start with a number well actually let's do that we're going to have one number to start with and we're going to increase this number and check for every number if it's divisible by all the numbers from 1 to n and I guess the starting number could be n hey kattiline welcome to the live stream how are you okay and now we kind of need another function to check Thank You kattiline to check if the number we're going to give it is divisible by all the numbers so let's write check the Visser's and we'll get the number and the desserts oh this is kind of interesting it as well these divisors will be also number we're going to loop or alright let's go with this and then we can slowly improve the function so here we're going to go from let I be dessert well it should be I 1 then it will go less than pickles to the number the divisor Haitian thank you for the super chat well thank you on behalf of Rico camp obviously alright so let's see here I don't like the names here so maybe number two check and number all right so let's do this and here we can check if kattiline thank you for the super chat ok so if our number well i modulus number two check so if this is different than zero so that means it's not divisible then we want return false right so think about this we're going to start with a number which will be the biggest number here well yeah okay let's let's Candide itself we're going to take for example a let's write examples here will be easier to explain so we have the numbers from 1 to 10 right and we need to find lowest well the smallest multiply for but well the smallest number that can be divided by all these numbers right which we know that is 2520 and what time we're going to do here is we're going to start with them start with 10 and then we're slowing slowly going to go up 10 11 12 13 14 and we're going to check all of these numbers if they are divisible by all the numbers from 1 to 10 hopefully that makes sense let me know it'll chat if it does or if it does it all right so that's what we're going to do here we're going to have a while look not sorry for the wire loop should be the best way to go we might get an infinite loop but well let's let's try for now yeah say they say that an infinite loop but actually we could have a boolean found be false and while not found we can Oh also we need to work we're going to use a start so while not found we're going to check the results we're going to pax the number two chapel which will be the start or what them start again not a good name so that's right number to check alright so we're going to check the number to check and we're going to pass in the app which will be our number then here infinite loop hype if this returns true then we want to well found be true so we're setting found to be true well again it says that we have an infinite loop like don't know if this is the best approach that well let's see how it is as a set this is proud of the hardness of the ones forget to do today so let's see again we have the number to check starting with the highest one all right then we're going to pass in the number to check oh and here we wanted the number to check plus plus right we want to increase the number and at the end we're going to return this okay so we're capping the number we're checking for divisors if it's divisible by all of these numbers well here we need to return true if it doesn't find a number which is not visible then should be true okay and yet this should probably work although let's check it might run my timeout yeah so something is not okay yes yes if you're in the live chat if you have an 80 feel free to suggest okay let's think again well this check divisor work so we have I 1 I less the number I plus plus okay so we get the numbers from 1 to 10 for example if we have the number 10 okay well you know what let me see so we need to check all the numbers okay number to check oh my bass the number to check has to be divisible by I right yeah kinda messed it up there okay let's also cancel that vlog Ness to see what we get okay number two check 30 which is yet so we're passing 20 we need to check out numbers from 1 to 20 all right and here we're saving it to the number to check now let's see if the while look while loop works okay so we get this number which is not what we wanted what is that isn't it check modulus I do different and Sarah so it's not okay what we get for five 60 we get 61 alright good good good good good so we're kind of closer here we get 61 because we increment here once again so we kind of want to do it here all right yet so now we know at least one test will work if we don't have well that's nice I didn't expect this to be honest so apparently all of them work now yes this is the life of a programmer it works and you don't always know why but yeah you have a nice goal there kattiline okay so could we improve this should we try to improve this or we should just leave it yeah so we're kind of checking all the numbers which is not powers oh yeah I think that number to check which we did there good thing number to check should be here although now if we have a number like 2 save for and that's not good right because we're starting with this number but then we increment in the wire loop so I kind of want to do n minus so one okay so now we get to sorry so yeah what about three three won't work for for for we should get let's see not six not eight probably twelve oh look at that yeah stuff so yeah this works now my trophy all right so let's run this let's submit and go to the next one which hopefully will be easier we did it the brute force way which is not well always the best solution but if you don't have another solution it should work all right problem six sum square difference the sum of the squares of the first ten natural number is three hundred and eighty five the square of the sum of the first 10 utter number is three thousand twentyfive hence the difference between the sum of the squares of the first ten at your number and the seventh and the square of the sum is that number all right find the difference between the sum of the squares for the first and natural numbers and the sum of and the square of the sum that's interesting there yet so yeah basically again we need to take all the numbers from one to ten or well one to n we need to add them up and then raise them to the power of two or we need to raise them individual to the power of two and then add them up and the result of these two well we need to subtract so yeah this shouldn't be that hard now okay let me see I could oh yeah that's better so let's create two functions one will create the square of the sum and when we create the sum of the squares so function square square of sums sum K and function sum of squares okay get and both of them receive and we could create an array and use map and the reducer yeah I'm kind of complicated over complicated now let me also add console clock here so we can see what we get all right so we need the sum of the so the square of the sum minus the sum of the squares let's go hear some once more so square of some square of sum of n minus sum of squares of that alright not a number yet now here well for one we need left I equals zero well I equals 1 I less than equals and I plus plus and square of some yeah we're going to have a sum which will be 0 and then sound plus equals I so we're getting all the numbers there and then we're returning some for now in this square of sum so we can do either met that power some until let me return here one so we can see something in the console or we can do I think this is a newer thing never used well it didn't really use it we can do this which is pretty much the same thing but yeah this is more obvious that we're raising the Sam ^ good now for the next one well we're having pretty much the same thing but instead of adding so let's remember the sum instead of adding I here we're going to add map that POW i ^ so we're squaring the numbers and yeah this should yeah it looks like it works for 100 this should work it's brute force I'm not sure if you can do it other way I know there is a formula for adding the numbers I've learned that in high school song time for adding the numbers from 1 to N it was something like let's see if I remember so n times n plus 1 divided by 2 so this should be the total and here we can do whoa wait wait wait not here this will work here because we're having the sum yeah oh not n times n plus one like this see so this works basically I remember that for the numbers from 1 to 10 it was like 55 so yeah this is the formula and well we don't have to do the loop which is good we saved some time here we can also put this here well let's leave it there we can use cops because we're not reeling yet now about days let's search a square sum of square formula sum of squares formula why not let's learn something new today k n n plus 1 and 2 n plus 1/6 all right thank you google so this is the formula let's use this so we kind of don't have taste here and this will be two times and all right let's return this and here this and is not oh oh sorry so and it's not the function we need to multiply there and here also alright so yeah this is I think this is now the more cleaner way it should say I was doing this we're using formulas instead of looping over which is pretty good it's way way faster this way because we're just multiplying instead of looping because if we had a big big big number well then would have some problems there all right so yeah let's submit this and go to the next one seven ten thousand one 10,000 first Prime I think by listing the first six prime numbers 2 3 5 7 11 and 13 we can see that the sixth prime is 13 again what is the nth prime nice prime numbers okay let's see so first what we could do again the brute force method and go over all the numbers from 1 to X well this case is M but we want the end pride we don't want to go up to end like we had before so we can start again and check all the primes get the primes and store them inside an array and when we get to an array of length of n we're going to output the last one this is the first idea I had let's see if that works although this is again the brute force but maybe we could improve it afterwards now let's see so we're going to need left number which will start from let's so two is the first prime number good and let Prime's will be an array and I'm going to put a number inside because while two is already a prime all right while this could be a Const because we're pushing to it okay let's see and here what we can already do Prime's that pop because pop sounds nice and well it will return the last one and this is what we want what's the end prime okay and we can do a while loop while Prime's that length is less than n so while we don't have the primes we want to well push to the primes so Prime's that push on the next prime number mmhmm okay let's think here Oh we get Prime so we could loop and find primes mmm let's do that so we're going to well we have the number there right the starting number and here we can do a check of it if it's a prime if is prime the number then we want to push the primes array okay I guess then we can remove it from here because automatic it automatically two will be added at the end here we're going to do number plus plus and we kind of just need a prime is prime functional so how do we check if the number is prime well a function yeah there is a thing I'm I'm thinking now we could do to improve because only 2 is 2 is the only prime number which is an even number all the rest are odd numbers yeah English samples so we killed two numbers plus equal to just so we can save half after loops loops count so let's do that we're going to push to here and we're going to start from three so now we don't check for all the numbers we just check for the odd ones okay good so that's an improvement it will also probably not work for well it will probably timeout you know it depends on how long it will take yet so is prime let's write another function which you're taking a number and it will return if it's pride so return through here by default we're going to assume it's prime and here we're going to do a check so we need to start from two let's go up to the number I plus plus and here we want to check mmhm so let's see we're going to start with three it will check the division so if number modulus I will be 0 then return false because the number one number is prime if only is divisible by 1 and itself right so we don't want to go up to the number very well inclusive the number okay and we check so we go here and we check is it divisible by 2 with 0 reminder if it is then well it's not a prime then we go up one more if it's divisible by 3 and so on and so forth okay we again have a potential infinite loop but this should work now so we're checking if it's a prime if it is well we push it here in the primes array and when the primes rate length is equal to n we we get the end right let's see what we get let me console that love this okay so for that we get that number which is not correct let's see what we have in the primes array okay so two three five seven eleven thirteen seventeen okay this looks it looks like we have the prime numbers well let me use it for six kay so if you do pop here what happened we have 30 which is good let's see for 10 we get 29 the last yes for 100 we get 541 thousand let's dip up here again okay so somewhere around there it fails let's learn the test and see what we get now that's weird why did you get that you know what it did it let's see again for 2001 we should get that number but we get this that's interesting might be something here yeah so it kind of stops in a in this terminal or whatever it is but it works murder while we're running the test okay there are a couple of things well a couple I have one idea which we could improve you can see here that we're also going again over all the numbers which is not a key we also need to do something like we did here to skip well at least we could to skip every two numbers so we could do here if number modules 2 is 0 then return false this is for the base condition that 2 and then here we could start with 3 and oh wait no no I'm wrong here so yeah we need to go over our lumbers because we could get a number and CV happen here we won't check for even numbers right so there's no way in trying to to check with another even number okay so yeah that should work well let's see so this is what I wanted to save more more loops here let's this okay yeah although it took more time which is odd but at least here you can see here we now got the number so it's it's faster okay and I think we also don't need to go up to the number we can go up to the square root we did it the last time but I forgot again so let's see ya know again up to the square root yeah so that works also we don't go up to the number but up to the square root so we save even more more loops all right so I think that's it for this one let's go to the next one can we stay we have 1% complete that's my later place okay problem eight largest product in a series the four adjacent digits in the 1000 digits number that we have the greatest product are nine times nine times eight times nine large production series okay so we have this big number and we need to find the and adjacent digits in the 1000 digits number that have the greatest product what is the value of this product all right so yeah we're getting a number and we need to find a number when to find a number which is n digits and it digits is the highest product Thank You Quincey I think for supporting the organization yeah she'd done it well I am a member on YouTube so see I think I have they had the emoji but I don't have it I don't see no never works okay so what we need to do we have this array which they provided for us thank you which is good because it's already an array so we can work with the numbers and if we have a number of lengths well if then and here is for window check this for store the product then check this for check the product is bigger than the previous product and so on and so forth up to Yeah right okay we need to get those ohms if we have five numbers we need to check like five numbers every times so we can do that using well we again need to go over all these numbers right so all these numbers and get the pair of four five or six numbers or how many they are we can do that using the slice method we can start from the index and get yes the slice or the splice method but the splice will change this array so let me first move this from here I'm going to create it here comes tiles and digits okay so we have we have a room here next up we want to create a loop which will go over basically all these digits right don't worry kattiline I know it's a joke okay so it goes over all the digits it will get the pair's and check the next one and so on and so forth so well what's the data for let is 0 I less than and for now but we're going to change this and I plus plus get and here take the pair it's not a pair how they call ends multiple take the series sirree ever and check the product here we're going to store the maximum product so max product will be the lowest number possible so yeah let's put 0 we're going to check if series product is great than Max product then we want to do max product be equal to serious product okay this is the function we are going to create okay good now because we're calling it twice well let's move it out in a variable so comest product will be series product and here we're going to test in an array with all the numbers we want okay get and at the end we're going to return the max product let's console.log it again all right now the only thing it's left oh we are left to do is to create this array so we want to get n numbers at a time so starting with the index we can do that by let's see so have this array let's write it here array will be this that's slice slice needs the index on which you want to start so it will be I and the second index the second argument will be our parameter will be you want to end but not inclusive so we want to do i+ n so let's see if we start this will be zero we if we do I plus and which is five we're going to up to five but not inclusive so we want we basically want to get all these right seven three one six seven and slice will give us this four because it goes up to so we can do I plus and plus one and now it will take all the five in the next loop it will start from this one and take all the five and then this one is so on and so forth we're going to pass this to our cities product yeah let's write it here like another function but then afterwards we'd like to write it in line so function series product will get an array and we want to do the product of all the numbers we can do that using reduce so hooray that reduce which gets an accumulator we're going to store the product in this accumulator and we have the number and we want to return here accumulator x equals to the number and the initial value should be what okay thousand digits oh yeah it's a Const it doesn't see now this because it's a constant it's down there all right all right let's put it up you all right good now Casey the X product arrey arrey juice accumulator commit x number this should work we create a new array now again the last thing wanted to check so basically now we're going up to M so this one but after this we don't have five five numbers so we could go up to n minus o this up to am sorry not up to end my bad my bad we need to go up to thousand digits not length the length of this and we can subtract the head so not the last ones let's see this works like that all right yes so definitely networks now let's see for for what we get so he had that number now the bad part is that we can't really really debug this it's the long list so let's see we have this array we have the Max product start with zero we return the max product that's fine here we're going over all the numbers sorry we're going over yeah the digits and we're slicing the digits we need thank you can see yeah I hope people enjoy so we're slicing from i to i plus n plus one so the length plus one because it doesn't go to the end good now here something happened we're going to the length up to the length minus n minus 5 well basically we want to check the the fort well if we check the last 5 we want to go up to this number right so it's minus n this is n plus 1 oh we need to check this and with the with his friends so plus 1 ok but we still don't get a correct number or do we know you know yet next we have this product which is a radius let's and thinking how can we test this because if well if we here comes something I counted a lot product just so we can see we get a lot of hammers well I guess we try deleting these or you know what let's comment this out and let's write again just with a couple of number so we can check what happens all right so we have one two three four five six numbers and we want to check let's see the pair of three now let's let's leave it for so basically these four or these four or these four are the largest now we kind of need to see what we get the product so consume the lock product and let's also the product let's also see the array okay so we see that we already have some issue here we get five numbers and we only need four so +5 oh yeah so my bad here we don't have +1 logic was correct but the implementation was wrong so if we start here this is I + 1 + 5 so 1 2 3 4 5 but then we added one more yeah so this already goes up to the number we want plus 1 all right my bad good so this should work now hopefully well yeah let's see so we get these numbers and we get it the maximum to be 126 and also you can see how nicely we get all the pairs here if we add in one more number here like nine we always get an array of four numbers which is perfect alright let's come and this out let's remove this and look at that we have the number 5832 let's run this and yeah and we got to 2% awesome now what could we improve if we could improve something one thing would be well I created this function but we kind of hailer and how are you welcome we kind of kept well we could do this here right it's just a function calling reduce so we can do that there all right but other than that I don't really see how we could improve it the well we're working with this the way should think about how to improve it is when you have a loop right you want to see if you could somehow not have a loop or have less iterations but I think for this one should be fine you wish you could cope with it okay I think you can't cut yeah so we kinda need to go over all the numbers I don't think we can cheat somehow I don't really think oh yeah I think this is the proach maybe someone can find something even better but I can't for now all right let's run this and submit and there we go vii done twelve eight really when did we start to date all right let's go to the ninth then all right let's drink some water we need to be a bit of a break good ix problem special Pythagorean triplet hopefully I pronounced that right a Pythagorean triplet is a set of three natural numbers sorry a less than B less than C for which a squared plus B squared equals C squared yeah yeah this is another math heavy problem so for example 3 squared plus 4 squared is 9 plus 16 which is 25 which is 5 squared so this is a Pythagorean well 3 4 & 5 it's called the Pythagorean Pythagorean triplet there exists exactly one Pythagorean triplets for which a plus B plus C equals 1000 find the product a B C such that a plus B plus C equals 10 okay uh what we need three numbers which are Pythagorean triplets well part of my Tiger paper Pythagorean triple I'm going to mess this up row saying by Pythagoras and when we find them we need to check if there's some equals two and then we need to multiply them I'm not sure did I understood this correctly so there exists exactly one triplet for which a plus B plus equals a thousand okay find the product a B C such that oh yes so the product a B C this is a product okay such that a B C equals that ABC equals 24 the product should be 480 oh okay so ABC here we have a square B Square C square oh okay yeah couple things to check mmm here we have a plus B plus C will be let's see 3 plus 4 plus 5 9 12 okay what would be 424 now I think the way we could do this is to I have three loops in mind like two inner loops one going from for a one for B 1 for C and then for C going up to a number yeah Thank You kattiline have a good day now yeah I'm not but thanks let's see so I'm going to write something just so we have a starting point for left I not I a equals one a less then something ABM what I said eh but I wrote I ate nah I plus plus all right and here well let's go for B and C B and C now B has to we have hit this condition here so B has to be one bigger than a at least and see one bigger than B at least so we can do here B equals a plus one and C equals B plus one all right now we need to check if there are Pythagorean triplets of if is triplet ABC if it is we need to check its SAP and if we find the sum we can return there find the sum to be close to this number then we can return the product so let's see if it's a triplet and a plus B plus C equals M right but this year then we want to return a times B times e okay this is not some of ABC yeah that's provided add it there and we don't need this so we kind of do everything in these slopes although I don't know if it's the best way but yeah so we go up to the number now again we go up to the number but we probably shouldn't because well the number in this case will be 24 but we kind of need the sum to be 24 so it's obviously that three numbers which are greater than each other they can't add up we can't all go to 24 so yeah but that's not just one we can fix later now let's create this is triplet functions function is triplet we get ABC and let's see so we need to check if a squared plus B squared equals C squared the third a squared plus B squared equals C squared look yeah it shouldn't be if it looked not sure why they said that we are not reassigning see so yeah should be good let's see castle that love this although this is not undefined okay so a list and if is triplet and if the the some damn otherwise let's retired one here just okay let's check for 24 what and compute see out of a and B what to mean okay so for 24 we get the number she's good now for 120 we get this number and 4,000 hello pression welcome welcome to support a roll so you saw that it works for 24 and 120 although they say this or this or this but now for a thousand yeah test timeout because well uhh you can compute the out of a and B I feel like you have something there so we don't need to go another loop and I kind of have an idea of what you're trying to say let's see so definitely this doesn't work because we have a loop of 1000 and 1000 and 1000 so that's a lot of thousands but as you said can compare to see out of AMV yeah yeah yes yes yeah so C will be a and minus B minus a right that's what you mean so then we don't need this look so then we're pretty fast and look at that that solved it thank you aren't I well I couldn't have done it without you yes so we don't need to look for see because we can find out what si si is by doing the subtraction right because we know a we know B we know ed yeah thanks that's really good please stay around I need your help all right it's pretty good and I think now they're passing the test Oh such a good feeling but yeah let's think I don't like the fact that we're going up to n right because well definitely don't need to check for a to B and at anytime it could go up to at most and right so see could be now no definitely not but how so if we have a sum of three numbers b24 what's the lowest take well the highest a can go it can be something like yeah I couldn't eat out you gave me this idea it was very good so if you have three numbers adding up to a number how can we check what's the maximum value to that so it could be for 24 so we have ABC equals 24 it could be 23 but then B and C well it couldn't be 23 or 22 because C B and C needs to be higher so definitely the sum couldn't be 24 then it could be half no way because if it's half then B is bigger than the half and C is even bigger so again we don't need to go up to n if not even up to half of it this will still work also be doesn't go doesn't need to go up to half of n again of the same principle right so have three numbers there's some is 24 yeah I think here we already saved a lot of loops but I still need to see could we find out how much they can go I think twenty four three numbers so definitely well if we divide by three because we have three numbers then yeah that's that's an idea so yeah and talking too much now let's write something so we have 24 this could be something like seven plus eight plus nine the most right because 24 divided 24 divided by three blah blah blah and here we get this so a could go up two and divide it by three minus one and this could go and divide by three like that up to okay so up to we broke why this could be a divided by 3 minus 1 K B and C could be at most third part plus 1 we broke it somewhere let's see for 24 still works yeah for 120 okay so here doesn't oh this is the correct answer I taught it's forty nine thousand nine hundred and twenty or its dalda the tree yeah I'm kind of spending a lot of time on this one but I want to see if we could find the best approach it is the square root I don't follow that buddy don't follow only have a problem we turn a thousand which gives us one so it doesn't find a triplet so we broke it once we set here divided by three trying some random numbers not to say yeah so apparently it's not divided by three well you know what be good could be pretty big I made a mistake so this is for a it could be at most seven but then B could be something like square root Oh and that or a triplet check right so this is 4a and 4b we need to see the maximum so we kinda could do a b1 I equal 1 then be equal to and that leaves us two Oh No so B could be that's Tess so half 11 I think and then C could be tough right they need to be they always need to be bigger than it well see bigger than baby bigger than a so it could go up to 11 which is half yeah that was my my mistake so a can go bigger than seven which is 1/3 well one less than the third and B can go up with more than half I'll also have minus one here Anna I think if you put two here it will it will still work in this case but might break in other cases let's see yeah so what I wanted to do is here is to find to improve this to make it as fast as possible who knows maybe there are even better ways to check it to do it so we are here undefined well which is by default so we can even remove these all right good let's go to the next one we spent way more time to this problem ten summation of primes primes again all right the sum of the primes below 10 is 17 find the sum of all the primes below and okay this doesn't seem that we'll look at this it is a big number we definitely need we need to improve this might be a timeout if you do the bruteforce but let's start with the brute force so again we need to have a function which will check if it's Prime let me write it down fast so let I beat to I less than equal a less than man that square root of n we did this in the previous the previous child so I'm not going over it again well I guess he couldn't we could thread yeah we could test here and module still equals to zero then third false and here we could the three and plus equals 2 so we improve it even more if and modulus I is 0 then we won't return false let me push this also like this just to make it pretty and otherwise if you don't have these we have a prime number so to get so we have a prime checker in to do to do okay yeah this looks good now wait a second there we go it should go for okay good and now let's go overall the numbers up to and and find the primes and then add them up so cost primes will be well too and here let's have let current or what number be three while number is less than and we want number plus plus and here we want to check if is prime number then want to add it in the primes ray so this way we add all the primes let's see Prime's here council that love here and let sees a smaller number get so yeah below 17 we have taste so find the sum of all the primes below n okay so not inclusive yeah yeah and that we kind of need to add to add them up so we could use videos accumulator number accumulator plus equals number started zero and Paula ring not voila does it work why is that let's check for ten you get twenty six which is not good let's see what we have in the primes two three five seven and nine oopsie why do we have nine as a prime whoops up to so I less than equals to square root of n up well inclusive all right they should fix it so excited yeah so we get 17 good fingers crossed yeah it works okay so we have a function we check the primes then we get all the price we put it in a primes array or you know what we can even don't do this and just have a total total b2 and every time we find we just do a total plus equals number why do we do a reduce here not sure all right nom todo total is readonly yeah obviously we need something like this alright so yeah is there a better way to test this we kinda did optimization here so we don't go up to the number if it would go up to the number let's see what would happen here so we go up it's not even check for two so I just want to show you that the brute force might not work so we go over all the numbers right if anarchy falls first good so let's see yeah it doesn't work because I did something okay yeah so we need to check for 2.41 so yeah this is the brute force well the longest and you can see that it will timeout I think yeah so this is why we need to improve it by adding these small tricks all right hope that made sense so here basically we would go up to a number like what's here to Melia but by doing this first we remove half of the checks by doing plus equals two right second we move I'm not sure what's the square root of two million but well let's check console Dethklok man that square root of million yeah so we don't go up to two million we go up to four thousand so that's a lot of millions worth of loops right so you can see how fast it is now is it two million yeah hit it oh okay so I I added here 20 million so it goes only up to 1414 and also it skips every other number so it kinda does only 700 loops and the brute force did 2 million so you can see how's that good also you can could get this question in an interview so it's good to know something like this I think all right let's run this and go to the next one Thank You Laurent please be please stick around oh boy now this will be complicated should we do this or go take a nap all right largest product in a great okay we did something similar but it wasn't in a grade it was in a row so let's see in a 20 by 20 grid below four numbers along the diagonal diagonal line have been marked in red why the product of this number is big number what is the greatest product of for adjacent numbers in the same direction updown leftright or diagonally in a given array I don't know all right so now this is interesting you okay I see here we have an array of arrays yeah be pretty pretty tricky so we kind of let's go back to the challenge resolved there was this largest product in a series this one here we only had to go one way but in this we need to go in a lot of ways so we need to go to the right to the left up down and diagonally this is fun yeah to watch it's very fun to watch okay so we have an array of arrays which gets the inner race gets the rose okay we could you let's think good start by going like this and well do the same thing we did here do we have no we don't have the code anymore oops we could have used that so we could go line by line and check what we did previously right that will be going to the right and laugh right because well it's the same thing up and down is the same thing that's one approach well one we kind of need to do three things to the right down and diagonal to the right and to the left yeah that's three this will probably take up the remaining time all right so first we go like this then we go like this and then we need to go like this and well when we're here we need to go like this and check all of them and store the biggest product okay let's stop complaining and start doing something good too bad I didn't save that I'm not sure why why why I didn't save it we could have used that so we need to think basically where we have a look that I call zero I less than a Raider flanked I plus plus this will go this will go on a collar and then left I J equals zero J less than or a that length J + + this will go from left to right right alright yeah so here we can go to right by checking what we had wait what's the four numbers okay so the number left lengths or I don't know and be for no man and don't like him we need to sew the length to to check it's a bit too long but that's what we need to do so here if you check to the right well you okay so we can check like with it right so we get an array which will be but we have array already here so is the great Catholic a KKK KKK let's write this somewhere else oh great we have Greek here metrics yeah that sounds better so have them metrics that's her that's the right thing but alright and here we need a sub array which will be by the way here we need to go metrics of I not like because it's the inner ray the sub sub array here will be matrix of I that's slice from J up to J plus lengths to check yeah so this is what we did previously and here well let's start up let max product be 0 and here we need to do if cost product will be sub array that reduce accumulator number accumulator x equals number and we start with one and if product is greater than max product then max product will be product right we solved one to the right which will basically head in the previous challenge this is why I went a bit a bit faster over it good but now we need to go down so how we did that two down let's have another Oh now the only issue here is that we're not if you remember in the previous one in the problem aid we kind of go we went up to this number and we checked to the last four but now we go up to this number which won't have so the slice will only return this but then the product will be it will be just this number so it shouldn't worry us but if we go like this if we end up here well sorry here we need to check one two and nothing so that could be let's see could you see that yeah okay so yeah here we don't have anything uh and we need to check for that and then we have two diagonals which will be okay good so two down two down well let's do the brute force and then we can see so basically when we're here we need this this and this oops this this and this when we're here we need D this this and this and so on and so forth so let's write this right for a okay and right product right product and we do this for the right and then to down we need a down array which will be an array with metrics of ethics of I and J this will be the current title so this one now we need this one which is I plus 1 and J so matrix of I plus 1 and J then matrix of well let me put this here so see we go down on the row the reason why I'm doing everything here is because I don't want to go multiple times over the entire grade ok I plus 2 and J and matrix well do you know what it's not that hard actually it's just what type I was worried for nothing so yeah now we have two down array but this while this won't exist well it it could not exist so I applaud if we're here I plus two is nothing so we don't have a jailer so we kind of need to check for death too so if we have matrix of I plus one we want to get that do we have it or it could be zero okay so how do we check he's different than undefined we get that and otherwise we get well what write the number multiple well in the product if you have one and multiply with anything it will be still the same number all right so I think this is what we need to do for all of this and if you don't have it we just say one okay Kanna tree property sale of undefined why so if Matty's side oh sorry to entry that could get so yeah now we kind of checked for those test cases and yeah let's do here can strike product I kind of want to move this in a separate functional so down product will be down array and all that so whoops you could create a downer with a loop four times incrementing the row I'd check yeah but that's another loop so I kind of did it manually here all right let me write a function get product and this will get an array and we're going to do this thing here we third array reduce blah blah blah all that so now we get the product of down array and here we get the product of right array loops look see get product of right all right okay so now we're left to check for diagonal 1 and diagonal too so it's just a lot of type typing to do and more than its art so diagonal to check direct check the bottom that's right if to the down is something check diagonal one and check diagonal two let's think so we need to go from this and go like this and so on and so forth we always need to check if we get to the indexes yeah okay so here we have kind of a bit of a problem Oh No yeah it should be good so we go like this from top to bottom right and then from top to bottom left from diagonal I was thinking that when we're here we need to check this but we already have it if we go down that way let's see so here we need to curl down and we get here we don't need to go all right so yeah you today it's something like this here and here this will be diagonal one array this will be diagonal one product this will be diagonal one ray this will be product and product so many copy and pasting can don't truly yeah all right we have actually you know what let me delete this and I'm going to copy this and change it once to tools too to all right good now what's that when we are here this element is I plus 1 J plus 1 right so I plus 1 J plus 1 we also need to check if we have that right because when we are here we don't have I plus one there now the second one is I plus 1 J plus 2 I plus 1 J plus 3 now the issue is that we might not have this and then we get undefined I don't really want to do another ternary operator although yeah this won't look very good but let me do this just for now so we're going to check if this a constant find well not equal it's different than undefined if it does then while we're going to add it otherwise we add one so we're checking there we're checking the dead happened and expected comma okay so this one No oh yeah another comma here yeah this is a bit silly so we're checking if we have the first we have the I here if we don't have it then we want to put an one in the array then we're checking if we have this if you don't have it we put a none one in your a and if we have them both then we put that number uhh yeah I'm going to think about a way to improve this so this could kind of work let me put it two more times and we're going to change you could go only with the metrics length minus 4 for ing yeah but I still need to check hey sorry I don't get it that well now so let me do that brute force so we're going to set that with tree and this weed well that with two and this with three KKK so yeah that's not good carry property three of undefined you oh okay I see oh no it should be good so if this is undefined it goes here check this one if this is not on the final it goes here otherwise one one so why we get three is undefined probably a messed up something yes this will be diagonal one and the agonal two will be let's let them put it here kind of silly but yeah so we're here we want to go this way so minus 1 minus 1 minus 2 minus 2 minus 2 minus 3 all the pluses here all day all the pluses here will be minuses cannot treat property still undefined oops why do I get on the fan I don't see it and you're here well with this Everett well everything works we should have the max product here but it doesn't also at 20 by 20 okay so it's square square grid you canary property so here doesn't look right oh okay I see so I forgot to change the first part here the first check okay so I think we have it now although these checks of looking awful but let's where it is let's cancel the plug this we don't get a good number there is no way oh we could test on the test great although yeah again right so what's happening there I'm going to rewrite the test grade just so that's just we can test so we're going to have nine nine nine one one one copy dates three times it will have 99 it will have nine and nine so we only have nine and I don't diagonals other than that we'll have one of everywhere and we should get oh sorry so let's put two instead at 16 which works what happens if we add one more we should still get 16 okay yeah we should get a a times 324 we get 24 so then what's wrong what about if we got the other diagonal oops one one oh boy this is so badly formatted don't like but nevertheless two two two two okay so you can see now that it doesn't all let me format this because I don't like it yeah so it doesn't pick up this yet we know where is the issue he is here oh yeah my bad so it goes one one it goes up top up top yeah the pop up and left and we don't want that we want down and left so down plus one down and well this plus one again probably you're yelling at your screens now but oh well see this is what why it's good to debug and write this dumbest code example alright look at this so basically if you're looking at this number we went this way so we went from five to forty seven thirty one and zero and we needed to go from five to sixty nine ninety nine sixty two okay that sound let's see test okay so I think that doesn't work because I change it change the test grid yeah bro yeah look at that oh boy this was a tough one well tough because we had to write a lot of code do I want to improve this yeah I guess I could remove the space here but that's all banking we have a lot of kind of copy and pasting and changing the values and I this check is you know not very very clear one thing it could do yeah I have an idea let's try that so instead of doing the ternary operator we could do and end here so it's going to check the sec well we need that instead of this actually and we're going to do the shirt secret method and we could avoid no death so if this is go here if it is false it will put false inside array that's what we want to avoid now well we need to check here when you do the product but yeah that's that's another thing we'll need to worry about now the good thing with this approach is that to fight a lot but let's see here instead of doing this third triple ternary we could do matrix I plus one and matrix I plus 1 and J plus 1 again so different then don't think why I'm checking could be couldn't be zero so it'll be just undefined so let's try this so it's going to check for this if it's an array it will be true if it's not well told be undefined if it's undefined it will be false so it will well beyond the finally side array which is good so I think now we could do this everywhere but just for simplicity sake let's comment it out and do the simple version first here so plus two plus three and this was plus wait wait we're plus two plus three plus two plus three and we get the same number whoa okay okay I think I know why so our product method here so this number could be let I can only want to show you one so how can they do that so if we do here console that log array hopefully don't break my yeah won't break my my browser but you can see that sometimes we get undefined and apparently two x undefined it will probably convert this to 0 and that's good we get is the total of 0 let me check with clay here so if we get console that flog 2 times undefined should be easier not a number all right not a number but then we do this diagonal to which is a number is it greater I think that's why so we need did she see why why Java scripts the way it does so we need to check if 3 is greater than this and it's false so it's not greater so it won't add it all right works for me although the best thing to do would be a to check if this number is actually is not a number and convert it to to a number or up to zero if it's undefined but the trick works so let's not worry about that now good so the last thing we'll do here I'm going to copy this again if I mess it up just to have a backup and we need to do this at yeah look at how much code was safe with that pretty crazy face the scene plus 2 Plus 3 plus 2 plus 3 minus 2 minus 3 all right yeah remove the test grade here use this get eventually that number okay and I'm of taste so yeah this looks much much cleaner now I like it goodygoody how we say it in our stream yeah let's submit and it works now if the good thing is that we only go over the matrix once and we check everything aside here the only thing we could kind of well we could think of let's see what Lauren says so I was thinking if you look at the number 40 in the bottom right or tin the button okay this one then you see you do not need to go further than I equals 16 and J equals 16 oh yeah you're right so we could do I think length check though they're not really know because we need to go here and check this diagonal so we kind of need to go up until here hey Quincy I'm glad you're still around yeah goodygoody yeah you wrote it wrong though it's goodygoody yeah that's our saying okay so we can to go up to 36 well we don't need yeah we don't need to go on this road though so that could be that could save us a couple of check so length to check right No like to check plus one yeah so yeah you were right yeah you're right torrid yeah nice clever clever guy I like I like I like the way you're thinking get so yeah we could just go up to this row because it will go oh but you know what then it won't check to the right here and it now what if the number is on this row we won't get it hmm so yeah you know what let's leave it like this we kind of need to check even this one right now and that one and yeah this one here is diagonal so we need to go to this number we need to go to this number yeah so this isn't we can't really cheat so we do that and we're using the undefined in JavaScript just to play around it can i if I do come and save yeah look at that it sailed into browser local storage good if we need it all right let's see what's the next one if it is too hard well if it's more complicated than oh well I almost didn't submit all right every direction has a prefer to limit not sure what to mean by that sorry I am I might just be tired okay let's see what's this about and it fits till I guess we could try it highly divisible triangular number again the sequence of triangle numbers is generated by adding the natural numbers so the seventh triangle number will be one plus two plus blah blah blah the first 10 terms will be 1 3 6 10 15 21 and so on let us list the factors of the first seven triangles triangle number sorry ok we can see the 28th is the first triangle number to have over five divisors what is the value of the first triangle number to have over ten divisors yeah you know what let's let's leave this for the next week Street I think I will have a fresh mind yes so basically we need to get all these numbers and then check the divisors once the first value was developed first triangle number two have over nd resource yeah and you know what let's they know that kind of dictate now okay so we're going to loop over all the numbers eyes ear oh I is 1 I less than what we don't know so we need the for a while loop while while to don't like that it will complain but while too we need to let is one we get here need to do them all in one go yeah I know but at least do as many as we can so we improve this while we get I plus one at the end and here while we need to check cast length the d'azyr's or I know the Visser's baby's arse hmm you again reserves prime numbers and all that they'll be an array and we need to check here if TVs source dot length so let's see what is the value of the first triangle number to have over and the whizzers so if it's greater than n we want to return the number which we don't have now so to get the number constant number I think this will be trying little number triangle number would be get get get get get get triangle value and we're going to paste in I this is the number right okay and let's write that function get triangle value I didn't wrote it right here four in number and here we need to go up to that number can add all the numbers so one way we could cheat kind of well let's do a for loop let's sum equals zero for let I equals 1 I less than equals to number I plus plus sound plus equals I and retired sup alright so we get we kind of get these numbers right so for 1 we have 1 foot the number 2 we have a triangle number of 3 1 plus 2 4 6 we have 1 plus 2 Plus 3 I kind of see a pattern here over way we don't need to do this but well we'll get that in a moment because we basically have the sum already we just need to add a number than another number so we don't need to do this loop over and over all right so we get that triangle number and then we need to get deep fizzers let me put this here and write the function get the deserts of triangle number function get the V source do yeah one cut off number and here yeah I wanted to read this you know me so well so we need constant divisors array we want to look loop over all of them I Swan I less than equal to man that square root of number I I plus plus now I kind of see something we could improve here nevertheless oh we need to go up to the number or we could just add it yeah oh okay so no square root my let's go up to the number and because basically number here when you check if number modulus I is zero right if it is then resource push you don't deal with primes I had Prime's might push PI and here we want to return the divisors goody goody want to check for five though good and triangle number I want to cancel the flock let's see what we get well we got it look at that well it work for all of them turned out probably but we have a we have an ace we can use have an ace in our sleeves not sure if that's used in English but we know meaning we have that thing good so the issue we well one thing not Kay so I kind of see a pattern here the girls up to the number the half of it so up to half of the number this is one improvement oh yeah so we kind of have one by default we need to hear and the bazaars that push we need to pull the number at the end because we're going captain up the half so then we don't have the number itself although if we have one with the only one one that's a special case so if number is one return but an array of one this is special case for one all right so then we Canada taste which is good we saved half of the iterations although I think it still turned out because not we don't have a problem here that we don't have a big problem here we have a problem here okay so the triangle number uhh triangle number they're recreating always the Sun but we don't have to the triangle number should be here I now let's make it zero and here we're going to the triangle number will be plus equals I okay so not cost so here we're just adding and we don't need this function because well by default we have zero then it goes here it will be 1 because well for one we have one but when we have two the number two we have one already and we add two when I have 3 we have 1 plus 2 which is 3 and we're three so that's good increment well no comment I don't have a mind of a comment I plus plus I guess we could do at first was here yeah well let's leave it like this just to make it be better okay so yeah this is it don't like this while through a loop but how many times do we need to loop we could move these dividers outside let's do that constantly deserts will be rent array and we're going to check this well the visitors that length is less than or equal to n we're going to do this now we save a couple of wealth it basically to loop the same amount of times but at least we don't have a while true and here well we could pre read you read only okay left yeah although I kind of like the wild through there but ya know it's not the best sometimes push number something like let's see that number or wait the Wizards that got a method concat number yes and they'll do the push there so we start with one oh you know what let's do something else here it we're going to do the check here if number is one we want to return the whizzers nukkie otherwise we're going to do this yet let's it still works timed out well I didn't check while well true we had it working right did I broke break something what happened you I totally forgot if I had it working or not you and cats shouldn't matter that much though let's see 23 works 167 potentially fatal OOP undefined okay not good so we still do you remember if we had it working I can't forget and yeah probably not so we still have an infinite well a timeout we too you the only thing we could improve is here this loop we get it deserves the length returned a triangle Oh you is there a way to get the Visser's by not doing a loop can we improve the loop you you yeah fine so it is working but it stand out so it's not fast enough you you ah yeah we kind of don't need need a length of the divisors get Wizards liked so we don't store it in an array you just get linked and here we check if the length is greater than and here the length that length be zero well true let's make it well to again so while two we check the length and here instead of doing this we're going to return the d'azyr's what that length last one well again we don't need to push the array okay so if number is one we want to return one a else let's first length oldest one and here we just increase the length length plus plus so I think all these pushing and getting from the Ray was hurting us get a visitor's light so this is a way with a length is read only Kiki what undefined so get visuals length they have triangle number we go over the numbers if it's divisible then we improve the length and really turn seems legit and well we don't need a special case I think length will be one and here yeah it won't go inside the loop now let's check for five again thirtysix okay so something is not working right 3636 oh I see we forgot here if you remember we added the divisions pause we added the last number because we go up to the half of it so we need to do the length plus one all right but then here blank should be zero should be zero and I should be one and should be yeah yeah okay good so length zero and our stuff we start with 2 pi 1 and then we add one at the end there is something about the divisors what let's see now we changed to an array well from an array so we're not working with an array but still it might probably too much well we have the right answer there do we have 423 we have do we have for 167 we have undefined because it's an infinite loop and a well it will just break out of it so I think we need a way to get and all the divisors of a number so go bail please help us get all the visas over number let's see do we have some kind of formula wicked years says meantime just say formula if it's a loop to adorn you're not interested if I look at 28 let's see what what Lawrence's if you look at 28 I see the first two divisions are important one two and four dollars calculated by yeah but what about Oh the next one which will be a 36 but what's 36 divisors 36 will be one two three four six 10 now at 12 18 right these should be right revisers five is not seven eight is not oh nine we have nine ninety five by four twelve eighteen they're always couples okay I see what you mean here we have two four six eight but how do we know what's the let's see let's go to 45 we have 1 3 5 fifteen and for five I miss something right No you say and / I my eyes hurt wait wait so 4045 here 120 approximately 2.14 and / hi okay my head hurts now techno so yeah you see here we don't have like you said pairs right we have nine so we have pairs and / I and which will be 40 now but what's the N we received you say you Oh so here if I is a divisor ad / yeah oh I think I see what you mean so here we don't need to get so like only over three so the square root was the square root of yeah we get seven so I see if we have one we have n divided by 128 if we have to we have n divided 14 if we have four we have n divided seven but what's the condition we go up to what square root the square root of twenty twelve the square root of ten eight mad at square root 20 fine whoa yay we candidate so here we can go up let's check that square root of number and we can do plus equals two so here what was the function this and we need to pass in what five okay so it kind of works and now we're dropping a lot is is very nice why did they think that the square root of 28 is 9 it's five so all it goes up to half of them square root of 21 is I'll get this four in a bit yeah so I think this solves it yeah now you can't say now that I couldn't done this without you well I would have done well yeah I wouldn't want to look over some code so I didn't want to cheat / co' they wanted to cheat looking over math but yeah that's a very good point we dropped from going up to the half of the number up to the square root which is huge and yeah we kind of need to do the same thing but here we just have to not sure why we need to do this but oh well yeah let's let's run this see it works submit and they done with it if numbers modules is zero and I am the number yeah we don't have the divisions or error anymore we change it to so we wanted to do something you we lost everything yeah Freaker camp you should store my solution oh wait maybe I go here portfolio uhh yes yeah oops [Laughter] yeah we don't have it anymore well yeah it was pretty fun although hard sometimes all right thank y'all for watching this or listening I really hope you enjoyed it if you enjoyed it give this video a like and don't forget we're doing life every Wednesday so come back in next Wednesday where we're going to attempt to do more of this and when we're going to get stuck sometimes which hopefully it won't happen we want to get to 100 but I honestly don't think I can do it up to 100 maybe only with your help but yeah come back in every Wednesday and we're going to continue also let's see there is a button saying don't blow to run the tests wait to work well you matt serwe to me all right so the download button yeah I don't see all right okay thanks all for watching if you want to check out my channel free free I have a link in the description of this video we are doing all kind of stuff they're coding JavaScript CSS react and all that and yeah I'll see you next week here on the freakin camp YouTube channel where we're going to continue this series I have a great great day and I'll see you next time bye