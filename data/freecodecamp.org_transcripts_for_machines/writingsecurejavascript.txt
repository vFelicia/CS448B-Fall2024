hi everybody um thanks for uh for having me here so i'm going to talk today about writing secure javascript code um just a little bit about me just for history is that i come from kind of a long time security application security type of experience through the israeli army and a bunch of application security companies and then did about six years in performance so for some people here i know through that world and i kind of back into a security startup dealing with using open source securely so kind of jumping into it we all know i think probably everybody here agrees that javascript is awesome right you know we all love it and we like to talk about how javascript has one and it's the most popular language and it's a kind of out there by any metric kind of growing faster than anything else and there's a lot of reasons for it right there's a lot of goodness in it and all sorts of core javascript traits some are just sort of scripting traits and some are specific to javascript around you know builtin memory management and native serialization with json and the fact that it's naturally scalable various sort of uh great capabilities that help us be productive right it helps us run run faster and those are our amazing capabilities and their core right and they are indeed parts of the reason that javascript is is so successful and that in general we can create these awesome things but sometimes the same capabilities that are sort of unique and make it awesome also make it vulnerable right so you look at these different capabilities and you know while you might see kind of builtin memory management i would look for the flaws there and i will see you know buffer object kind of leaking memory from server side if you talk about native serialization attackers would look and they would say well you can do some type manipulation because types are decided in runtime can i manipulate those can i change so a lot of this talk today is just going to be understanding a little bit about how these capabilities can be abused right how can attackers use them to to understand the weaknesses in your system and run forward the other thing that's important to remember is that these vulnerabilities and these types of flaws don't just happen in your code as part of a core uh kind of a core part of the javascript ecosystem are packages or libraries npm in node you know it doesn't matter if you use bower if you use javascript libraries if you just download jquery away much and much of your code is thirdparty code open source code that you are using and you know npm is also awesome and as a result its usage has exploded i'm kind of picking on npm but really this is true for package management as a whole and it has some like ridiculous number of downloads and packages every time and it's sort of update the slide and the result is that a typical application i will focus on node but this is increasingly the pattern in in front and javascript as well has a ton of dependencies hundreds often times thousands one study put it at 350 on average and it leads to the situation where this is your app and this is your code and and this may seem like a negative slide but it's actually not right you could create all that orange value by just writing that little purplish dot uh orangish value so it's a good thing but it also is a risky one or a slightly frightening one from a security perspective it gives an entirely different meaning to javascript as one definitely on the dependency metrics javascript is also leading the charts so so with that context when you think about security it's also remember to understand that most of your app's code comes from npm which also means that most of your app's vulnerabilities come from npm or come from these packages so it's different sources that can lead into your system this is not a theoretical problem it's practical roughly one in seven one in eight packages in npm carries a known vulnerability doesn't mean that 14 of them are vulnerable but the packages themselves use other packages that use other packages and within that ecosystem roughly 14 would bring in a vulnerability with them and we see that pretty much every node shop has those and this risks node apps and this is kind of the focus that i talk about here but when you talk about javascript it's not limited to just node it's also true for frontend application with jquery has a very prevalent scripting vulnerability if you're using a specific component of it uh you know in react and angular in in in with brazorify with all of these components you pull in npm packages and again the same concepts apply for bower and also risks the internet of things so there's a lot of chatter today about mirai about all these like ddos attacks massive attacks that take down the internet that are built on these devices many of these devices run node apps or very small lightweight apps and those could have vulnerabilities so those are that's kind of setting the stage and most of the time i'm not going to send in presentation but what we're going to do is we're going to try and combine those two and what we'll do is we'll look at real world vulnerabilities in these npm packages it's i find it more useful than fabricating an example these are real packages with real vulnerabilities then you may actually be using and has a bit of a dual purpose one of it one aspect of it is to see the vulnerabilities and how can you kind of code to not have them and on the other side understand a little bit the security risks you might be pulling in through those packages and we're going to focus on node but as i said this is sort of applicable more broadly so with that let me switch out of this and introduce goof so this is a javascript talk clearly it needs a surprise i'm the first one to have a model view control like an mvc app in a javascript conference and it allows you to do great things like you know todo lists say you know call mom and you know it has some markdown supports to emphasize important things and you know just just sort of some features and it uses a bunch of packages on it i'm going to use rtool uh snake it's on github by the way and on snake goof and you're welcome to clone this and play with us after and run those exploits yourselves so we're going to use sneak to to test this application to try to find some of these vulnerabilities then i have some preopened tabs just in case it doesn't play ball as we go so we will test our different repositories and we will find our little vulnerable app here and we'll see that goof has a bunch of these vulnerable dependencies so we're going to pick on that and expand and i will kind of randomly choose a specific set not randomly but you know i've chosen a set of these and show a bunch of exploits and there you know each of these uh there would be some explanation that says this is a vulnerable package this is the vulnerability on it and how it manifests we're gonna start with this one with st who here is familiar with st not that many it's a it's a package written by isaac from from npm it's used to serve static resources js and css on our our website as well as our about page and it serves static resources from the the slash public url so to attack st st is susceptible to a directory traversal vulnerability and typically you would read the advisor here but you have me so you don't need to see if this font is big enough so what happens is you know if we have some aliases to uh sparingly some typing but if we go on and we do a curl and we fetch the about html page we're switching to the to the terminal because the browser has all sorts of convenience features around normalization things like that that kind of get in the way of attackers so we can get the about page through here as well and as an attacker if there's a if i know or i suspect there's a directory traversal attack then the first thing i'm going to do is try to break out of the static file folder this is these are components that are supposed to serve a set of static resources but you don't want them to to serve more than those resources so i will put a dot dot slash dot dot slash dot slash and if i do that i will get uh nothing actually so if you kind of scroll up you will see that i just got redirected to the home page of it because sd is a smart package and it has a security control on it it's not that they didn't think about security it just omitted something there's another way that i can represent a dot in a url which is thought url encoding so i can do percent to e percent to e percent to e percent to e and that would get me all the way up to the roots and i can do as many of those that i want and then i might want to add some sensitive files say like an atc pass wd and and voila i get the adc pass wd so okay so this is just we're just getting started simple simple vulnerability uh and uh and you know sort of prevalent enough so we're getting roamed up we're gonna go from simple to complex right um our vulnerability at its core the vulnerability that st had here and this is a common vulnerability we see around is just not dealing with encodings you have to think about the different ways that a character can get represented in your system so this was on the url side so we showed a bit of a url encoding vulnerability but let's look at another one in marked which is more in the html side so who who here is familiar with marked a few more hands so marked is one of the more popular markdown parsing libraries uh out there and it's it gets about 2 million downloads a month you know it's quite prevalent and we use it to sort of do that you know emphasize beer and things like that in our system now we know that it's susceptible to a crosssite scripting vulnerability so what's the first thing we're going to do yeah an alert script so we're going to try to do something like this we'll say alert one slash script and we'll try to do this because markdown oftentimes many of these packages including marked actually support some html snippets in there as well so we're going to do this and nothing uh we're just going to get the text and that's because marked has a sanitize function in it now surprisingly or not sanitize is actually turned off by default so that's something to consider many of these packages actually have uh insecure defaults so they might have a security feature might not be on all the time but in this case we did turn it on we wanted to be secure but there are other ways to get a script onto a page how else can i invoke a script thoughts yeah i can do a link so i can do there's a bunch of these i can also do like attributes i can do a nonerror i'm gonna focus on this right i might do a script like this so this is i'm still within markdown and i will do an alert one and then what happens here if i do this no nothing because mark catches this and again the sanitized function is quite comprehensive in fact it is fully spec compliant so even if i try to do get fancy here and i will try to use an html entity so html entity is kind of the html little sister version of url encoding or maybe the other way around and i will represent this colon with a ampersand and a hash and i think it's a 51 and also from kind of past experience i know that i also need to encode this thing to i think a 40 let me sort of cheat here a little bit oh sorry this is 41 and the other one needed to be 48 58. and these are uh just sort of ascii representations just american representations of this character and if i do this i'm now evading some of the security controls and if i do this i get nothing so again like security control is going to be pretty tricky and this is on the html side something that's important to understand is market is actually fully spec compliant and it catches these things and there's no known exploits that are not spec compliant but browsers not so much uh so browsers tend to be very tolerant towards html mistakes and if i come here say after this eight and i say i'm just going to zoom in further and i add the word this so the browser sort of sees oh you know you said an amp percent and you had like the hash mark and you had 58. you didn't go all the way but i kind of know what you mean you know i think i think you mean a collin and they would pull a call in there and then the remainder of that is just script and this is a valid thing to call in script and i get a link here and we got our alert so vulnerability number two okay so kind of first lesson from those components you know one is just again think about those think about the different encodings and there's the url side of it and there's the html side of it let's get fans here so in both of those cases we talked about uh uh encoding vulnerabilities but there are other properties of uh of javascript one of javascript's kind of bigger claims to fame is uh is that it's naturally scalable right it is event driven so it doesn't require a thread for processing every incoming request and it also means that it's a bit of a point of fragility because if one of those threads if there is an action on the thread that makes makes the thread take a long time some algorithm some you know infinite loop like the wild truth that jake showed before right if you had the wrong conditions you get those prompts in the browser that says this script is you know running for too long uh or you might take down a thread on the server and because javascript is naturally scalable even high scale production systems have a relatively small number of threads so it can quickly lead to a denial of service vulnerabilities now the most prevalent type of algorithm that we run although we don't think about it that way often is a regular expression it's an algorithm it runs and depending on how you write the algorithm but almost always true to an extent uh the the time it takes to calculate or sort of apply a regular expression is nonlinear to the length of the input string now that linearity may be hard or maybe low so depending on your regular expression let me kind of switch back to the slides a moment and show you a bit of an example of this in a an aptly name problem in regular expression referred to as catastrophic backtracking um so you look at this regular expression and it's it seems pretty simple right it's just sort of a b c d e and you could have like more of the c occurrences and then maybe a wild card but what happens here is the regular expressions are you know very stubborn they try to match so if you give them a pattern if you give them a methodology where they can almost match like almost get there but not quite they will backtrack and they will try to figure out another path and by having nested groups like this so first if you have multiple c's they could apply to the c plus inside the group or they could apply to the star outside the group and that just creates a ridiculously large set of possibilities and most regular expression engines including the ones in javascript would just try them all and as a result you can see that by just having this fairly s short string there i know that like 30ish characters i can make calculating this regard take a second and then every character i add would double that amount of time this is on a sample machine but it's definitely a lot of time so a moment a very popular package has recently had this vulnerability i don't have an easy demo on that one but another package that's very popular that had it is ms and ms is used for do i have it here yeah ms is used for calculating milliseconds or a time stamp in a million seconds so we can say you know call mom in two days and it would calculate those two days to say you know this is the number of times milliseconds i can set a reminder so ms has this vulnerability a little bit less extremely so it also has a regular expression now service vulnerability but it's not quite as extreme so what we're going to do is first of all we're going to again kind of make this call mom in 20 minutes and i'm going to use http or http which is the same as a curl just like with some syntax highlighting and it goes on if i go back to my application i will see that i added a little bit of a record here but what we will do is we will try to give it an especially long string so and again i'm just going to cheat because i have it just to spare myself some timing here and what we'll do here is we will print sixty thousand fives as the duration and then we're gonna add another twist which is we're going to swap the last character here instead of being an s to an a so it almost matches but doesn't quite and when i do this it takes a long time to respond now it takes a long time to respond it's not a problem but the problem is then the meantime my application here is irresponsive so in this case i have a single thread and this is just taking out one heroku dyno here but you know first of all i can hike up my bill and if i added another zero you know it wouldn't complete before the end of this talk uh now this way it will i think in about 10 or 15 seconds complete an end but this type of regular expression denial of service is a very prevalent vulnerability and you have to be very careful about regular expressions both in your content and in uh code overall and now in this case you might say hey this is 60 000 characters who in their white right mind would sort of pass 60 000 characters but if it's not explicitly blocked it is allowed there's nothing really there the fix in ms by the way in the package is a little mediocre they just capped it i think it's like a thousand or ten thousand characters uh the the right solution is to have a logical cap there to allow 20 characters or 30 characters in the different sections so that you truly limit it because otherwise it doesn't take down the server but it takes a very long amount of time to process okay so our application will recover here we can just kind of go back here and we deleted a bunch of items so this was redos and it really comes back to the event loop and the same type of problem can kind of happen on front end for my last trick i will show a couple of other vulnerabilities so this was in ms and the last vulnerability i will show is in mongoose who here knows of mongoose yeah everybody uh so so mongoose is um uh everybody knows mongoose is the way to access mongodb it's kind of the top one and it has an interesting vulnerability in that it tripped over an object called buffer a buffer is a very very tricky object in the world of node typically when you when we work in javascript we don't really think about memory management right memory is this thing that's just sort of handled for us but buffer allows us to to to play with it a little bit and to preallocate some memory and it has a couple of constructors actually i went to the advisory here but i can probably show you here if i just do if i just run node i'll just move this up a little bit so you can see it and if i do i can do new buffer and say 100 and i will get a buffer allocated with those three characters one zero zero but if i do a new buffer and give it 100 i will get 100 bytes of memory that's intended however that memory is not zeroed as you can tell here if i do this a few times you'll notice that you have very different values in the different items because this is just what happens to be in memory in those 100 bytes that i just allocated so as an attacker if i can make the application allocate such memory and then get access to that this is remote memory exposure and if i do this enough times i basically can get anything that's in the system's memory including keys and source code and a lot of those components this is like heartbleed in openssl except running in the node process so only access to the secrets that the node process has so buffer has tripped up many popular packages mongoose included and for us we we have a little bit of a simple schema here that allows us to we use buffer as the content field and um you know so we can have images and and other uploads and buffering mongoose indeed had a vulnerability where it did not enforce the the right type that goes into the component so what we're going to do to exploit this is first again we're going to move to uh to the browser so we've already seen that we can do a curl command to invoke an item but what we will do is uh our application like many node applications also supports another form of input which is json so i can do echo with a instead of a form field of content a json parameter of content and say fix the bike and if i do this then if i go back to my application i will see that we've indeed added an item that says fix the bike but because this is json i now have the ability to modify it a little bit and instead of saying fix the bike i can say 800 like this which would give me 800 as a string or because this is just naturally serializable i can say 800 like this when this gets serialized in the application it allocates 800 bytes and that memory is now a todo item that's exposed to me and if i look here i will see just like a bunch of binary components if i just do this enough then you know it depends on the every every demo i get something different but you might see some snippets of of text and source code you kind of need to trust me here that if you run this enough and you do a loop you just sort of extract those of course as an attacker you would kind of clean up after you you would delete these items right after so buffer has tripped many items it's really not just mongoose but it's a pretty severe one because it touches on memory and allows that to sort of be leaked out it also demonstrates a general a broader problem called a type manipulation which is true for any kind of type dynamic typing language and specifically javascript and can happen with json but also can happen in other components a good example of that is qs and qs if i parse a string like this i get a json object or a javascript object with two fields a and b but if i pass it to a's i get an array and for instance this tripped das js which is a linkedin templating library that paypal used and actually had a realworld vulnerability on paypal because a sanitization logic only happened on strings nobody anticipated that an input that came through the query string could be anything but a string but with qs it can be with json it can be so it's just something to be aware of to say do you know which type is is the one that you're using and just sort of as a last anecdote is type manipulation can also be used to do something called no sql injection so we've shown strings and arrays but if you have something like this where you use mongoose to find users by a username and a password and it's meant to be used like this where you have an admin and a string however if you can control a json input then you can do something like this and instead of a string in the password you pass it a a mongoose function that allows you say greater than nothing which is everything which means that if you've done this you just get basically like sql injection you get a no sql injection to return all the records and depending on your application logic this might have just been a pretty major thing so so just to cap off i want to show you a couple of things so before we close off here one thing i do want to show you is you know we talked about a bunch of vulnerabilities there are clearly many many more that we can talk about uh hopefully these give you a tidbit and the other thing you should talk about is you know on one hand you should understand the security flaws and on the other hand you should understand this application has been made vulnerable without writing any of this vulnerable code it just pulled it in externally so you know a little bit of a shameless plug you can try out sneak to help this it'll help find those issues you know free for open source kind of try it out and it would also help you fix those issues just sort of open a fix pull request with a single click like magic and just sort of try it out and take over protect yourself going back here so yeah as you sort of seen when i move the slide don't start hacking website you know you you could get tremble in trouble uh and either way it's impolite um i i will encourage you above and beyond sort of general awareness to first of all think about the javascript takeaways and these mistakes and and how can you avoid them in your own code and second is think about the specific vulnerabilities in these npm packages use a tool like sneak like no security project there's a bunch of these tools out there to help you find those issues use tools to help you fix those through upgrades through patches through whatever means necessary don't discount this this is a part of your job this is a part of software uh part of software quality these security concerns so to recap js and npm are awesome but please use responsibly