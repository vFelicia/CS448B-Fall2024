hey everyone i'm cody cyber and welcome to a full stack tutorial on how to build a web application using vue.js for the front end express node.js for the backend and then mysql for the database or sqlite as we do it development locally and before i get started on this tutorial i want to say that this tutorial might be a little bit in the intermediate advanced level but if you are a beginner i'm going to try to talk through everything i do and repeat actions you know often so that you can kind of bake it into your head of how you build a full stack application so hopefully you know first time through if you're a beginner it might be confusing second time through you might pick up on key things third time through everything might make sense to you but without further ado let's go ahead and get started so hit an overview of what vgs is it's a frontend library which is used for building singlepage applications and i'm on the vjs website right now so if i go ahead and click on get started here it navigates us to their documentation which i believe is some of the best docs i've read for a library or framework in the past i've worked with angular 1 i've worked a little bit with angular 2 and i've worked some with react now i want to say i'm an expert in angular 2 or react but nor am i an expert in vjs but out of those you know the three hip new frameworks that are out i do think vue.js has the most potential just because the way they have it set up and their docs and it's very easy to pick up and hit the ground running with vue.js so if you like react you know stick with react but i hope you take some some key components away from this tutorial because vue.gs kind of mixes both the best practices from angular 2 and react so you'll see a lot of the same paradigms in vue.js which i think is good for beginner because it allows you to easily transition to other frameworks in the future so for the back end we're going to be using express.js which is a very barebones framework that can be used for building restful apis built on top of the node.js runtime environment and there's a couple of other frameworks out there like sales.js js cola js and i haven't used anything other than sales at work um i personally like express because it's super bare bones and if you're trying to start off learning about web applications and how rest api works i think starting with some of those bigger frameworks or libraries is going to leave you a little bit confused there's a lot of like magical generation and hooks and whatnot going on so for this tutorial we're going to start with express and just kind of walk you through how to create a restful api that connects to a mysql database to store certain things so that kind of wraps up the overview let's go ahead and start building out a project and i'll go ahead and talk about what i'm going to be building in this tutorial all right so i'm going to start off showing you a prebuilt application which we're going to rebuild and try to work our way towards which i created over my spare time so basically i've created an app called a tab tracker which we can use to track guitar tabs right so there's a couple of other sites out there like ultimate guitar tabs or whatever.com but i wanted to try to replicate that in something that's a little bit more user friendly and easier to use so the app we're going to build in this tutorial is going to look like this we have a main page which if you click browse here it takes you to the songs url and what this page has is if you're logged in already which i am over here i'm already logged in and i'll just go ahead and lock out just to kind of demonstrate that so if you are not logged in the browse tab allows you to search through songs so if i want to type in let's say reliant k for an artist it'll filter search the backend for that artist if i search for a genre it'll show up if i search for like country my other song will show up so basically the functionality is here we have this little panel which allows us to search through songs we have the songs displayed down here if you were to click on let's say one of the names or genres it go ahead it updates our filter here and also updates the url query string now if i were to click view it takes us into the song in which we have a link to a youtube video where we can listen to the song it has again that basic information it has some tabs over here so i can easily go through and you know play through or try to learn the song and guitar and then also on the right we have some lyrics so super straightforward and basic application now if i were to log in go here login has my password and information saved we get a little bit more um functionality so on the left we have our recently viewed so anytime you click view into one of these we're going to keep track of what you viewed before so you can easily just go to songs that you viewed in the past and then also we have a section down here called bookmark song so if i were to go into let's say getting into you and say bookmark it'll bookmark this song for my user accounts now if i were to go back to the browse tab i have that song bookmarked over here and again i can go back and view that um we can also since i am the owner or the one who posted this song i can go in and edit this song so we have our own little edit song panel or view around which we can edit the typical metadata that you have on a song such as the title artist genre album we can put a link to the album image and we can also put a youtube id which is used for displaying that embedded youtube video and then of course on the right we have our lyrics and our intro um and then we have an about page nothing special go back to browse and then lastly we have the ability to add new songs over to click on this plus arrow over here we are given a create song route where we can enter in those same metadata information and you know it'll print out red if you don't have it filled in because these are all required fields and once you have those set up you can click create and it will create the song for you and in this instance we can't because we haven't filled out all the fields so that is an overview of what we're trying to build very very simple it's like a very bare bones web application but it's still enough functionality to i think get you past the stages of being an intermediate or from being a beginner and transitioning into an intermediate developer like we're going to build all this from scratch starting with a bear get repo which i'll actually build in this tutorial so let's go ahead and get started trying to build out this exact same functionality all right so starting off i have my github account right here so i'm going to go ahead go ahead and just click on repositories i want to create a new repository and i'll name this one tab tracker and then this will be public i'll make it mit so anyone can just grab it and do what they want with it and description will say a view vue.js expressjs web application for keeping track of guitar tabs so now if i click create repository github will create that tab tracker project for me and in this instance we can click clone or download i'll go ahead and copy this link and remember that you can change it to https if you don't have ssl set up on your machine i'm not going to cover up how to set that up but if you try to clone it with this ssh and it doesn't work go ahead and switch it to https and try it that way but anyway i'm going to go ahead and copy this link and i'm going to go to my console and say git clone and paste that url and that will go ahead and download that git repo project and put it inside my workspace folder so now i can go ahead and go into our cd which is change directory into tab tracker and right now i have a folder at my workspace location called tab tracker which has absolutely nothing in it except for a license cool so now if we go back we can go ahead and open up our visual studios code editor which i'm going to open up that same folder which we just cloned so i'll go to workspace i'll go to tab tracker so now our visual studios editor is opened up to that project and we can start creating and adding files and folders as needed all right so now at this point we have a blank project folder now we want to set up our client or view js application for the front end so starting off there is a project called view hyphen cli which you can use to kind of build up template project so in this case you want to install it using npm install global view cli so if i were to copy this command and go back to my terminal and run it that will install the view cli client in this case i already have installed so it's not really going to do anything now if you read through the docs it says you can use it by typing view init the template name and then the project name so in this case we can say view init webpack and then the name of your project so i'm going to say view init webpack and the project name is going to be client alrighty so now that view and it is done installing we can actually use it by running view in our command line so if i were to do view list for example that'll tell us all the different templates we can use to build up our view applications so in this case i'll say view and knit webpack because that's one of them that's specified here and that's the one that has like all the goodies that you'll probably need and then i'll do view init webpack and then the name of the folder i want to create which is client that's going to take you through a walkthrough which asks you a couple of questions like the name of your project i'll keep it as client project description uh keep it as default author yeah whatever view build runtime and compiler just stick with that view router yes lent your code yes um es lenting is just basically the way to keep your code very consistent so you know make sure you don't have extra semicolons all your spaces are lined up and good um so i'll do standard setup unit tests with karma and mocha sure why not night watch sure why not um and now at this point we have a client folder which you can see here after i did an ls which lists all the files in my directory we see we have a client folder here and if i were to go into the client folder and list out we have now a bunch of different files which are kind of used for running our view application and then a better way to visualize this if i were going to my tab tracker and go to the client folder again we have a bunch of files that are built up from the view init command and a lot of these you don't have to worry about like this is just prebaked boilerplate project setup which you don't need to worry about you might need to later on as you get more advanced with like setting up with pack and setting up your build and whatnot but for the most part we have a project that is ready to go um but before we can actually do anything we need to install all of our npm dependencies or our node dependencies so if we were to look at this package.json file and if you're not familiar with what this is package.json is a way for the npm project to understand what dependencies your project needs so we have a basically json file which has a list of dependencies and dev dependencies so right now none of these are installed on our machine right so what we need to do first before we can even try to run our front end application is we need to go back to our terminal and go ahead and just run npm install and what that's going to do is it's going to go off to the npm repository and it's going to fetch every single package which is declared in this file it's going to install it locally into a node underscore modules folder inside of this client folder here so basically when we tell our project to run it knows where to find different packages such as you know express our eslint our view view router etc and in the future of this tutorial we're going to go ahead and add more dependencies as our project becomes more complicated so we're going to go ahead and let that run it might take a little bit of time because it's going to download a bunch of dependencies but after it's done you don't have to run this again unless you're trying to update modules or something in the future all right so now that npm install is done running i'm just going to show you what version of node i'm using i'll do node hype and hyphen version and i'm on version 8 2 1 so i recommend that you have the same version of node or be on at least version 8 or the latest version just so that you're not running into issues because this will change and download different dependencies and build them up depending on what version you node on so again make sure your node version eight point something at least but at this point all the modules are done installing we should be able to see that node modules folder locally so if i were to ls grep node modules we see that we have a folder called node modules now and just to visualize that inside our vs code editor we have a node modules which has all of those dependencies and their sub dependencies added to that project folder which is pretty big right so all these plus all their sub dependencies and whatnot are inside this folder and that's just you know a little bit of background information it's good to understand how this is being set up but just know that this is where all our dependencies are coming from so when we import stuff in the future know that basically we're just going into these sub projects and downloading and using their source code right so now all the node modules are installed at this point we can actually run npm run dev which is going to start up our vue.js frontend server and the reason we can run npm run dev is because if you look at that package.json file over here we see that we have a script section and then inside that script section we have a line called dev so i could do npm run dev npm run start npm run build or any of these and what that's going to do is going to execute a command behind the scenes called node build dev server which basically builds up our source code and loads up a html web browser and points it to our servers now if i go back to my browser we see that magically we have a chrome browser pointed at our vue.js application and everything is ready to go cool so at this point just to recap we cloned a github repo locally to our machine we used vue cli to kind of build up a boilerplate project which can be used to create a vue.js frontend application and then finally we did an npm install to make sure we have all the dependencies we did npm run dev which went ahead and started our web server in our view js application and now we have a tab which is ready to go to see the view js application running so that might seem like a lot of work but remember it's a onetime thing we don't have to do any of that stuff again other than if you wanted to start up your server like if you shut down your computer and come back the next day you just need to run npm run dev and everything will be ready to go for you so now at this point we've done a lot of work so it's very good to make sure you always commit your changes like a small changes that you can make and very often commit them to your github repo so in this case if i were to do a git status we see that we have a bunch of changes well in this case a subfolder because we just added something so i'll go back it says that we have a client folder added and what we want to do is we actually want to add all the changes that we've done we want to go ahead and make a commit and give it some you know initial message so i said um let's just go ahead and say init the vue.js application using view cli so that's going to go ahead and add or add all of our files to the staging area of our local git repo and it's going to make a commit so we see that all these changes were added to our commit and now lastly we want to go ahead and push those changes to our master branch on the remote origin repo so basically at this point recap we added all the files we made a commit with this specific message and then we push it all to our remote origin repo which is on github so now if i were to go back to my project on github refresh the page we see that client is now there we have all those files inside of our client folder of the branch master and then if i were to go to our recent commits here we have two commits and the last commit we did init the vue.js application using vue cli which if you remember is the exact same message that we put up here now if i were to click into this i can see all the different changes that happened with this commit right a ton of stuff not really useful because there's just so many files make sure your commits are small and make sure you do them often so again that was a kind of quick overview of how to use git make sure you commit often and make sure your commits are pretty small and then that was also demonstrating how you can see your changes in github so if you're not familiar with git or github or all these things continue watching and i think after some time this will start to click and make sense as you get used to continuously committing to a remote repo but if you feel lost at any point be sure to pause and go read up on some information about git about npm about view about whatever you want but at this point let's go ahead and move on to setting up the backend project or or pretty much setting up the express.js back in rest api okay so what i like to do in my project is we're going to have the client code and the server code separated but in different folders of our git repo so if you see here we have a client folder i want to go ahead and make a server folder which is going to hold all of our server code so the client and the server don't overlap it's a little bit easier to manage and deploy separately and sometimes you make separate git repos in general with your client having a different repo and your server have a different repo but for the sake of this tutorial let's keep it straight forward to have a client in a server fold server folder with a very simple you know divide or separation between the two so i went ahead and made a server folder and if i were to go ahead and go into that i'm going to go ahead and split the tab here and typically i have my client on the left so i can do like npm run dev here to have the clients always running and then on the right i can just go ahead and do cd into the server folder let me just fix that really quick because that auto load in my browser so now that in this case remember the left is just our vue.js application running so we don't need to worry about this left tab anymore the right tab is where we're going to have all of our server code or our express.js code so we have a blank folder here nothing in it and i can visualize that by going to here we see that we have nothing inside the server tab the first step we want to do with initializing a new you know server project is we want to enable it with npm so we need another package.json file which we can create doing npm init dash f for force and basically that's just going to create a patch.json file and put it inside that server folder so now i see i have a package.json file here no big deal we're familiar with this we have the scripts and it has a test and what we want to do is first of all we're going to install something called nodemon which is something very useful for continuously restarting your server so i'll do npm install hyphen hyphen save nodemon we also want to install um let's go set eslint all right so now that those two packages are done installing what we can do is go back to that servers package.json file i'm going to go ahead and just delete that test and put in two lines i'm going to do a start command close this we have a start script which pretty much is going to run nodeman over some file so right now we don't have an app.js created but we'll do so in a second and it's going to run a linter over our code and then it's going to run our server now this don't i would say don't really worry about this this is kind of getting into the weeds of like your setup but just know that we're just going to add these they're just going to work we need to set it and forget it not worry about any more and then later down on the road you can learn more about npm and how npm scripts and nodemen works and all this other stuff so again we're hitting you with a lot of information at once but i think that's good so that you have exposure to you know how a full stack web application works so at this point let's go ahead and make a new folder here and we're going to call it source and inside that source folder we'll make a new file called app.js and so inside this app.js file we want to define a web application so just to kind of start off i can say console.log hello and now if i were to save that file let me make sure everything looked good okay so we saved the pack to json file we saved the app.js file and if we were to go back to our terminal we should be able to do an npm start command because if you remember in that package.json we have a start script and there's a there's a couple of keywords like start which you don't need to do run like technically i could do npm run start but in this case since it's start which is a special keyword i can just do npm start hopefully this works we might run into an error let's see it says it can't find e s lint that's because i forgot to run and initialize for eslint so let me just go ahead and run that really quick so if i were to go to node modules eslint and then it should be like a bin file uh oops all right so that's kind of a little bit of setup so basically remember we did the npm install we installed eslint so now i basically just want to run the eslint script so that it creates a configuration file for us to use so i'll do node i'll pass it a file that i want to run and then i'll pass a flag called init and when we do this it's going to give us a prompt and i'm just going to say use a popular style guide i'm going to say use a standard style guide which format javascript and so i'll give this a second to finish running all right so now that that's done we should be able to do an npm start which will spin up nodemon it'll run and enter over our code and then it will start our server so in this case eslint ran and it says too many blank lines at the beginning the file max of one is allowed so if i go back to here and just remove those blank lines save it our project should restart it should run the lender over that file and again print out any more errors this is a new line required at the end of the file but not found right so now at this point nodeman should pass eslint and then our app runs and it prints out hello and then our app will finish because that's basically all our app does at this point remember we have a node script that just prints out hello and then it's done okay so let's take a breather a little recap we made a server folder we did npm init force to create that package.json file we installed two dependencies which were nodemon and eslint in fact these are probably dev dependencies so i could just put them down here no biggie and then we created those two scripts we have the start script in the lens script and which start is going to run nodemon over our app.js file this is our main entry point make sure you remember this is a key key information and then we're going to also run lint over that all over all of our javascript files and then of course we we created our app.js file here which just prints out hello so again there's a lot of work just to set up a little project and there are other you know ways to generate an express package on the back end but i decided to take a you know from a scratch approach for the back end just so you have more exposure to npm you know creating files creating projects creating scripts versus the vgs stuff there's a lot of stuff going on with webpack which i don't even want to deal with or teach so i think it's better to use a generator for the front end because there's a lot of stuff the back end you could use a generator or you could get your hands dirty and try to learn how to do it by hand and that's what we're going to do in this case with the express server alrighty so now in this case we can just go ahead and do uh control c to close out of that infinite running nodemon script um again nodemon will just watch our javascript files and then if we save or change any of those files it's going to restart a server and we'll see how useful that is in a second but to start off what we need to do is start installing a couple of those dependencies that we'll need to create an express application so to start off we're going to need an application or a module called express we're going to need one called body parser we're going to need one called cores we're going to need one called morgan which is good for printing out logs and then i think that's good enough to start off with so let's go ahead and install those node dependencies we just installed a couple of dependencies not that big of a deal we've seen that done in the past we add hyphen height and save to make sure it's added to our package json here so now if we go and we have those four dependencies added to our package.json um let's see so at this point we can actually start building up a very basic express js server so if i were to do an npm start again just to get everything you know ready to go and running what we need to do is go back to our app.js file and let's go ahead and start importing some of those uh modules that we just imported are installed right so first we can do a const express is equal to require express we can do a constant body parser is equal to require body hyphen parser and basically we're just requiring those same modules verbatim which you can see here on the right side where we do require and then putting them to some type of environment variable or not environment but but putting them to a constant or variable here and basically what this is doing is it's going to dive into that node modules folder it's going to find the package called express or cores so right here you see this one called cores and it's going to find the main file and just include it here so in this case if i were to look at package.json of course there should be a main one here which is libindex.js and basically what that's going to do is when you acquire cores it's going to go ahead and just grab that cores package of course it closed down it's going to grab this index file and pretty much put whatever it exports into this file so again we're learning more stuff about how modules work in node.js but it's probably super confusing right now but it'll make more sense down the road as we start using it more and so finally let's just finish off with you know declaring or requiring that last package we installed called morgan now at this point we have an app which has these four dependencies included let's build up an express app so i can say const app is equal to express and that's going to build us an express server which again is just a very basic web application that's used for building up rest endpoints or whatever type of endpoints you want and then we want to start enabling some of those packages so that we can easily hit or back in and have logs printed out of course we don't have to really worry i'll think i can talk about that later body parser is for allowing you to process json data very easily um so you can do app dot use first of all i'll say use the body or the log use the log generator called morgan and then this is something that if you look at the morgan docks it says you pass a string of combined to have it print out it logs in a certain way we'll see that in a second app.use bodyparser.json it's saying allow our express app to easily parse any json requests that are sent in and then we'll say app.use course to allow any host or client to access this i'm not going to talk more about cores but pretty much you need cores if you want a server to be hosted on a different domain and you want any clients from around the world to hit your server and it's kind of a security risk to have it enabled so just if you do have an enable make sure you have a good you know security covering your application and finally at this point we can just do app.listen oops and then we can say process.env.port or port 8081 so at this point if i were to save this file and hopefully i don't have anything wrong with the actual code i've been typing but save the file it's going to link my code and it's going to restart my server so the server is running at this point but unfortunately there's no way to hit it because i don't have any endpoints so i'm going to go ahead and just create a very very simple endpoint called get on status and what we want to do is just return something so here is how you define routes in express right so you give it the method that you want to post or you want to use so in typical http request you can do a get request you could do a post request you could do put you could do a patch you need to delete i think there's some others but these are the main five but basically we're doing app dot the name of whatever command so in this case we'll do a git request to a status endpoint i actually do status and then once we get a request on our server with that endpoint what we can do is just send something back so i'll say res.status or res.send go ahead and send back some message objects to say hello world okay so delete all that stuff save this hopefully it works it restarted it seems like it's working so now at this point i'm going to show you we had another tool so if you give me one second actually if i could actually just do this so we have an app running on port 8081 right so we should just be able to go on our chrome go to 8081 and do status and we see here we get message hello world back so this shows or demonstrates that we have a server actually running on port 881 it's handling an endpoint called slash status when it gets a request it's going to go ahead and send back a json object which has an attribute message and then the string hello world exclamation mark if we go here we just saw that it gets returned to our browser when we hit this get endpoint and by default when you do a request in your chrome browser it's going to do the default of a get request so let me demonstrate another application we can use to kind of test out our backend so i'm going to go ahead and load up an app called postman which you can download from i think the chrome app store give me one second it's loading up right now actually i just i just saw a little bug so it's pretty all combined here it's supposed to be combined so i'm gonna go ahead and change that and save that and just to show that what that does is now if i were to hit this end point we actually get some you know some logs it tells us what device hit us so we got hit by chrome version 60 whatever um it was to the endpoint status it returned to 304 or something and then i think it also tells you how long the endpoint took but anyway that's what this morgan logger is doing just kind of like you know went off on a tangent there but to kind of demonstrate another way to test your backend api you should download i think there's one called rest clients this one is called postman it's a very useful tool and i think it's invaluable that you actually use it but basically allows you to do different requests so i can say do a get request to that status endpoint so i do this it says hello world i can go ahead and save that to my tab tracker so if i were to save that to tab tracker i can easily just load up my application and then you know grab that endpoint and test it whenever i want but basically you can chose the url you want to test you can choose the different methods that you want to send to it you can define headers you can define bodies so if i would do a post i could define like a json body here or upload a file but yeah this is a very very useful application and i highly suggest you download it because it's very helpful to test out endpoints as you create them and as you debug them so again going back i'll just go ahead and close out of that and we'll come back to this in a little bit as we create more endpoints and stuff gets a little bit more complicated but for now again let's just do a nice little recap so going to the code we created an express application it's running on port 8081 and this is just allows us to overwrite that port if we want to using environment variables which we'll cover probably later on but basically we created a status in point when we hit it it sends back this and i think i already covered that so pretty much wraps up setting up a client using vue.js and then setting up a server which is going to use express.js and both of these are going to get a little bit more complicated um down the road we're going to add a lot more logic a lot more endpoints a lot more files but it's good to know that it's very easy to set up using generators it's also good to know how to set up a project yourself using just you know npm install look through npm and find what packages you want and install them and again now we just did a bunch of work on the server side so let's go ahead and go back and we could add those so git add all git commit actually that was probably a mistake we want to go ahead and do a git ignore file first so that we don't upload every single node module that we just installed so this message i'll say add everything i don't get commit and say setup of the express js server and then i'll go ahead and push that to our backend or push that to github and again if i were to go to get up here refresh the project we now have a server folder at this location with that same you know app.js that we've built up so i mean hopefully this wasn't too complicated it might have been a lot of information at one time but i think as we continuously add new functionality in the process i'm going to do is add functionality to the front end have it point to the back end and then implement the back end endpoints that we're trying to hit right so we're going to keep on doing that for every single page and every single feature and panel inside the front end so it should end up clicking over time so with that being said let's go ahead and get started building the first piece of functionality for our vue.js application and that's going to be a register page or a register route okay so to start off we want to be able to access or do these type of get requests and post requests against our express js application so one npm module we should install on the client just remember this is in the client folder we want to go ahead and install a package called axios which is a library which can be used for doing those http requests to a backend so while that's installing let's go ahead and move over to our client folder here and what we can do is inside the source folder i'm going to go ahead and create a folder called services and then inside here i'm going to create a file called api.js and what this is going to be used for is basically um setting up some type of connector which can be used to hitting up the backend so i'm going to go ahead and first of all import that axios um library that we're installing or importing and now we want to have this file give back a connector so if i were to go here and just do um let's see so this is a function and we need to return a connector so what i can say is return axios create and then that's going to take in a couple of things so first of all we need a base url and that's going to point to our backend api all right so that should make sense we're saying create as an axios object which is going to point to our backend url of 8081 and this api thing can be used for like hitting our different endpoints so now that we've created that we can go ahead and create a new folder or file i mean called authentication service dot js and what this is going to be used for is basically hitting that register endpoint that we haven't yet built but we're going to build in the future so i'll say import api from services api so now we have an api object that's imported from that api file that we created here which is basically just going to be this axios object and now we can actually just export a object that has a couple of methods so in this one i'll just say register credentials so basically what we want to do is have a object which allows us to call a register method which will hit that register endpoint which we haven't yet built yet so if i were to do something like this basically what we're saying is this authenticationservice.js is going to export an object that has a register method to it and then we can call this like so we can say authentication authentication service dot register and then we can pass it let's say email gmail.com and then password can be like one two three four five six so basically this is how we call this method from another file and we'll see this in a little bit when we start building out that register endpoint and then basically what this is doing is we're going to pass that email and password to this post method of the axios module which is going to do a post request to the register endpoint on our express server and then is going to use those credentials so what we can do here is go to the back end now and if we were to create a endpoint called register instead of using git we say post register and then let's just go ahead and send back a message that says your user was registered have fun so now we can hit this register endpoint with a post request it should return this message to us and then you should see how that kind of links up to what we're doing we're doing a post request to the register endpoint and we're sending in some credentials in fact if we wanted to access those credentials we can go back to our rest service and we can say um we could actually say like hello and then the name of the email so wreck that body of the email close this so we can actually see what's going on so now if we were to send in that email and password payload to this register endpoint it's going to send back a hello your user was registered to have fun and just to visualize that with postman because remember i said it's very useful to use postman if we were to go to this register change this to post change this to json and i'll say email is testing at gmail.com keep forgetting that this needs to be real jason and then password is one two three four five six if i do a send there it returns back from their backend hello testing gmail.com your user was registered to have fun so i'm gonna click i'm gonna go ahead and save this um let's see register a new user so now we have an endpoint called register a new user i'm going to go ahead and delete this one because we're not using that so again this kind of shows you how useful postman is we don't have a ui yet so it's good to make this or use postman to kind of test your endpoints and then once we get the ui we can start hitting those endpoints and see how it actually works all right so again a little recap on our back end we have a register endpoint which takes a post request and it will return a message with the email that we provided in the payload and then a little information you can access the payload using rec.body.email on your express server and then for the front end as a recap we created two files we created api which returns an axios object that points to a certain url and then we created this authentication service which allows us to call a register method on it which will simply post whatever object that we pass into it down here so this is how you call it we say authenticationservice.register we pass it some json object and in this case we're going to pass the email and password to be used later on so let's go ahead and actually start implementing a ui to be to use for um this authentication service because we have like the whole behind the scenes stuff ready to go we have the back and ready to go and we have some methods in our javascript frontend for how you kind of communicate with that backend okay so i don't kind of like jumping all over the place i'm jumping from the client to the server and back and forth and i think that is a good way to kind of get you exposed to all the different things that happen in full stack development like this is how i kind of work naturally i'm not just um like i like to implement the back and forth sometimes or implement the front end and then integrate them together with a little piece of functionality so to start off what we need to do is inside the ui we want to be able to hit a log or a register endpoint so if i were to try to go to register here it doesn't work because there is no registration endpoint so our first task is we need to build a register endpoint and register component so we can display so to start off go ahead and close out these because we don't need these anymore so if i were to go to our router inside our vue.js basically this is the functionality or the code which designates how do you hit different routes so in the url basically if we hit the path slash it takes us to a hello view or hello component so what we want to do is we want to make a new path if i could click sorry about that so which basically we want to have a register path it's going to be called register and then we want to display a register component so right now we don't have a register component so let's go ahead and just copy that and say register so if i were to save this this will probably fail because we don't actually have a register component declared anywhere so now at this point we can go to the components folder we can say you know just i like the copy and paste existing code so i'll go ahead and just rename this one to register dot view and then inside here we can just make a very basic div get rid of all this jazz we don't need this don't need that let's see technically we don't need data at this point and we don't need any of these styled scripts yet boom so we have a very bare bones vue.js register component which if i were to say let's say i'll say like h1 register so now if i say this i go and we have a register page here in fact i'm not sure why this giant views here i think it's because i need to go into the main app file here and again just get rid of that i don't i don't really need that stuff okay so again a cool thing with the view or yeah vue.js the whole like view cli product that we set up anytime you save your file it will refresh and hot reload your different things that change so that's just good to know it makes it super easy to use so now at this point what we want to do is inside of a register component we need to have two different things so we need a let's say an input field and that's going to be a type of text and then i'll say name is email type is actually type should be email right so basically we need a register page which has a email section and it has a password section and maybe a button that says register so what i'm going to do is go ahead and do those three things so i'll say give me an input box which has the placeholder email if i were save this we get an input that says email in it i'm going to go again go ahead and go here we need something called password save that boom we get a password and this is just super super basic html with no styling and i'll go back through and style this with probably material design in a second and then lastly we want a button and that's going to have let's say register all right so we have an input box called email we have a input box for password when you have a register button so at this point what we actually want to do is inside vue.js what you can do is you can bind the html to your controller so basically everything inside the script tag is your controller and you can kind of bind your html using special keywords as attributes which will kind of link things together so i mean they say it's bad practice to kind of use twoway bindings but i don't necessarily think that's true as long as you keep it like based inside your component um and we'll we'll use view x in a little bit and i'll spell that out there's a framework called view x which is kind of like the flux way of doing things react does it very similar with redux and we'll use that later on for a couple of key store related objects but for now what we want to do is just do a v model and set that to email here and do the same thing down here for password and basically what's happening is it's saying when view runs go ahead and grab this input find any type of property or data or something called email and bind it so now down here if i were to say email is equal to a blank string password is equal to a blank string and save that right now it's putting in like autofill settings that's really annoying so i'm just going to go ahead and put abc123 so if i save that we see that those are put into our input box because what's happening behind the scenes is v model is a twoway binding so it's saying set this input value to whatever this is and vice versa if i were to type into this input go ahead and update this down here so what what i can do is kind of demonstrate that is i'm going to go ahead and say watch email and whenever the value of email changes so i'll say console.log email has changed value so now at this point in my console down here whenever this changes it's going to go ahead and print out email has changed and that's just kind of demonstrate how the twoway binding works as i type into this input box my data model is updated and vice versa if my data model is updated so i could do another thing so i'll say mounted and that's basically whenever this view component is mounted onto the page i'm going to run a command so right now i'll just do set timeout of 100 seconds in fact i need to do function because i need to use this so i say this dot email is equal to hello world all right cool so make sure this is a fat arrow basically when the page loads after about two seconds what we're going to do is change email to abc and this will demonstrate what happens with reactivity and how if the data model changes the actual view will change so if i refresh the page you see that it starts with abc and then after two seconds it changes to hello world so again this is a good demonstration of how the twoway binding on v model works for input boxes so basically what we're trying to do here is when we click the register button we want to hit the register endpoint with some data and do something so now what we can do is just go ahead and get rid of all this you know temporary border boilerplate code and we want to add a listener to this so i can say on click we want to say register so basically if anyone clicks this register button it's going to go ahead and call a register method so down here i can say methods i could say click or i could say register you could say i see register button was clicked get rid of all this get rid of all the watch because that was just kind of for demonstration and get rid of mounted and now if i were to save this when we click that register button with some values so let's put some random values and click register we see that it now calls register button was clicked and then we have the username and password so at this point it should make sense as to why we need that what we can do with that so if we can go up here we can simply import that authentication service from if you remember that services authentication service here import that service and then what we could do is just call register on it and say email is equal to this dot email password is equal to this dot password and then i'm going to use await in async here because i think it's much better than using promises these days and i could say response is equal to that so basically what we're going to do is call that endpoint remember there's a register endpoint on our node service we're going to pass it email and password and then we're going to wait until we get a response back and once we get that response we can just go ahead and print out response.data save this file this should refresh and then we click register with that and we get back a message hello see cyber gmail.com your user was registered to have fun and again we can go to our endpoint here node and we see that every time we click that register button it's hitting our node server right i keep doing that a couple times so we're getting our node server requests and we're sending a request to that register endpoint all right so i think this is a good stopping point i think we you know covered setting up an entire project front and back end with vue.js and express.js for the back end and then we also set up how to create a very simple login or registration page using the exos or xiosum library and then also defining that endpoint in our express application so at this point remember after you've made some progress it's very good to go ahead and commit your changes in this case i'm going to go ahead and do it in vs studio so that i'm not you know overwhelming with command line lingo so what we could do here is just go ahead and say add everything so and then a commit message would be setting up the registration page and then go ahead and push those changes to the master branch and again if i go to my github refresh the page i should be able to see that we now have that register endpoint here so all of our code is now on github we're at a good state and i think we can stop this video for today and come back later and start implementing some more stuff alright thanks for watching