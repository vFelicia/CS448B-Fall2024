mhm all right just getting started here getting the stream all hooked up i am now live awesome everything looks good over here memories good cpu load good all right so i can minimize u no actually i should keep that open i'll get rid of you though and hello everybody who's already here we're just getting set up and uh getting ready to get started how's everyone doing today okay that good put this up here all right i'll give it a few more minutes so people get in um anyone can give me feedback on if connection is good or anything like that be much appreciated or in the live chat i'll keep this down here all right let's get i mean i'm just going to get right into starting here and then we'll um like chat as people show up so uh to start off we are working on es6 today um same code base as the last one earlier this week however we are going to be refactoring um there is some issues with the use strict keyword um i did a little bit of work on my own adding the used strict word to every single challenge but then i realized that that caused errors um and it caused a bunch of linting errors so we're going to go back through and fix it up and all the meanwhile changing some of the tests so they're a little bit easier to understand um i'm gonna start off by just kind of going through all the going through all the json and then once we're done with that because this is it's a little bit of a faster process if i work directly on the json um a conversing to just jumping back and forth so i'll do all the json first and then once i get that all set once i get all that running we'll just do a live q a as we work through um all the stuff all right so got some people in the chat oh hi jesse great glad to hear it um coding and caffeine my favorite remember the last time i actually got up and got a cup of coffee but i already had my cup this morning so uh i'm good to go awesome glad to know it's all working well all right so let's get right into the coding here um where are we at so the last challenge i did was the destruction assignment to assign variables from objects so we um made this uh this challenge into a function just get length passing it a string and then we have the function scoped use strict definition um from there we have the change code below change code above and what's cool about this challenge is that we want the user to return len as the variable rather than just like the um keyword length because i like to reserve that um so the solution here would be you know you would do const length is len equals str which is the string up here and this uses the object destructuring because string is an object technically and they have properties like length hello glad you can join us and so this is a great way of testing this where basically we're like yeah you can we have a length variable here but we actually want you to return len so that's kind of a hint for people going through this challenge some of the testing features we're still able to test so this is an interesting one so the type of length is number is no longer a valid test because the variable length is no longer um like global scoped it's function scoped so what we can do though is we can type of the return value of get length and then we just pass it a um a blank string because that will technically return zero um sergio asks is the es6 challenges now live so a version of them are but they are very um like there may be a lot of things wrong with them and that's why we're here today we're gonna refactor everything and then we're gonna all go back through it and do some live challenge completion just do some live bug testing i've already done the first 13 challenges last night and so we're gonna try to get through the rest of them right now um so this will say the funk let's change this message to say the function um get length returns a number and then we're going to test if the string returns the correct value and then we're going to expect the user to have used a the length as to lan assignment and moving straight on to the next one um and like i said we're going to go through everything and then we'll go back through um and actually test this all live cool so destruction assignment to assign variables from nested objects okay i do remember this one so let's go ahead and let's think about how we can function scope this i believe we could probably do something as simple as a function get max of tmrw and then oh we can't do that and then we'll go ahead and do a new line grab the use strict from there paste it put that in there and then we'll go ahead and grab all this chunk of code put that in there and i want to return we should be returning max of tomorrow so and we need that you need to use um destructuring uh idris asks how about using mocha and chai so yes we could total like this actually uses an assertion library very similar to that of a generic javascript testing framework um in fact i would love to be using mocha or chai but or tap or tape or intern you know all of them however because all of these challenges are in our index and version control and are able to be deployed anywhere um and they wanted to do it in a way that's like very quick to deploy it's all wrapped in json so we can't exactly write full like test like test.js scripts which is where mocha and chai would be great uh i imagine you could refactor the free codecamp project to do that but i feel like it would be slightly more complicated and would be harder to like you know drop into multiple instances and get running um but a lot of the principles of mocha and chai is implemented here with the assertion library just very basic you know assert this statement and then here's your message to display out to the user um so this so we should be able to pass an object into here so actually we'll pass forecast but this is not so this is just an argument forecast so they'll be able to use that we should say um we call this one local forecast and then we'll pass get max of tomorrow local forecast and now that function should be returning the valid uh the valid value so the solution would be the the structuring here where we would want to use like the tomorrow and then the sub nesting of max and then assign that to the word max of tomorrow um you know obviously users could like break this pretty easily and just you know return whatever they want to um but this test right here this assertion should should block that because they need to use destructuring um and now this one meth we need to actually test get max of tomorrow local forecast cool all right moving straight on through use the structuring assignment to assign variables from arrays ah this is a fun one this is when you swap a and b i really like this one um so how can we do this properly with you strict um so we're because we're reassigning we could probably keep that declaration up there and then we'll go ahead and we'll write this guy and then that one's now nested in there this one should be nested in there and then we'll put on the after burner there we go that closes it off and we can snag this guy throw that in there and then yes so the user should be editing their code right in here which will swap the values a and b using you know the a comma b equals b comma a and that should actually keep the hoyt the let the global scoped a and b's because you don't need to reassign it and then this should all work fine cool let's see what we have to do we have to change any tests i don't believe so because those remain on the same level um mocha chai yeah those are coffee types but uh no they're also testing libraries use the structuring assignment with the rest operator to resign array elements similar to the last one we should be able to then declare let array out here and then do a go go ahead and write one of these snag the use uh oh that was not what i wanted to do there we go nope wrong line there we go put that in there put that there there there array now goes down to here um so this is invalid currently and then go ahead and write that line um because they should change this yeah i think this is fine and then that should be good that's a good destructuring assignment and we're testing for the there we go not all right that's nice what is that see this is an issue because if they use a redot slice they're actually going to have stuff between here so we should only be testing for the array.slice um because then of course they'd have to wrap it let's see do we have videos on how to actually use just unit test testing frameworks while making an npm module i don't know if free code cam has one um but i could definitely do one i love writing tests it's a very important thing in fact a lot of my contributions to node.js and react are all via testing um in the implementation yeah i actually uh been working on some like deployments of like like pretty like complex node.js apps and i've been finding the travis ci platform as long as as well as code coverage really useful and uh making those set up so maybe i'll do something along those lines in the future when i'm working on a side project and not free code cam all right let's go on to the next one use the structuring assignment to pass an object as a functions parameters okay so this one uses we just have we're basically just destructuring inside the function declaration itself okay so this uses a very like simplified so we're gonna expand this um this arrow function out a little bit in fact i'm just going to rewrite it because it's a little bit nicer const as i say half equals and then we're going to want to write return stats.max plus stats.min divided by 2.0 and then we want to do close off that and this is going to have the stats variable in it and then we're going to say sorry grab that paste it there now we can then use function argument destructuring um we're not even going to keep or we can put that here get rid of this line and then i'd like to do we'll do a do not change this line okay almost there and now stats should still be valid because it's hoist because it's global scoped and half stats should be very valid great bohemian city asked which program am i writing i am currently writing the um es6 challenges for the upcoming beta free code camp beta i dress yes travis ci is is awesome it how it works is it basically watches your pull requests as well as branches and when you push code to a pull request it'll automatically run a test suite your it'll automatically run whatever tests you have written for your application and then if it passes it'll return like a green light and if it fails it'll return to red light and you can get github addons to like track those testings in fact i think we have that on the free code cam platform you'll see at the very bottom of a pull request it'll have like the travis ci symbol and it's running it's trying to build and if it fails it tells you that that way you don't merge anything that would crash potentially crash the site um it's all that's pretty easy to set up what's something that's fun that i've been working on is using heroku which is like a web server hosting kind of platform and i've been working on making um like node.js deploys that start off on staging in heroku pass the travis ci test and then auto deploy themselves so that you can see the like the see the application you just wrote and if you're happy with what it looks like in staging all you have to do is click a button and it pushes it to production and then you have like your production update um and then all you have to do is just keep pushing code and github to the staging branch and then it does this really nice loop um again like i'd be happy to go into that in another video but um for today we're working on this we are making moves because we want to get this curriculum up and running for you guys as soon as possible let's check our stuff real quick type of stats is remains an object good the assert that the value returns that great and get user input assert matches using the structuring good all right create strings using template literals um ah i think we just got to use another function scope so we'll say function make lists and we're going to say array and i'll go down here and add the closing line okay let's see we can do here um so we're actually going to want to and then just do return result display array make list should return i think we go like do that and you know make this make people know that they're actually making a list here of things oh no like making like making a list of oh of um jsx elements tutorial and travis ci in the future video tutorial and travis ci will come i can uh that would be a lot of fun to film i'll i'll do that not as a live stream though i'll make sure to do that as i um oh how's it also my name pronunciation is eidd rhys idris just the i'm really bad at phonics so i probably won't probably not saying it right still but idris idris okay i'll see how that goes um okay i put that one there this should be fine now all right and we want to say type of we're going to test for make list is an object and has a length of three and then result display array we don't get that so instead let's do this so i'm actually i actually have the solution to this problem in the um in the test code so yay all right cool i did get it right idris cool nice to meet you all right let's see one more time and now we're going to make we're we're verifying that the user has this because this is like we're literally saying we want this so this code right here is doing that just that oh this needs to be placed with a word all right we'll see how that goes um well yeah chatting and chatting and coding i'm just doing a lot of refactoring i've been looking at this code for many hours so it's kind of it's a lot i'm a lot more familiarized with it cool this one should be easy we can probably just pop this in here and be done with it in fact we can take this and put it in here and then place that one above and we should be good to go with this one let's think oh yes we have our little shallow equals there's supposedly an assert that deep equals method in here but i don't i don't know how to use it i don't want to try to rely on that so i'm just going to keep my what i wrote um dependencies are never fun because if something is not working then it all breaks for you and then good this i'm asking for them to remove the colon which is expected awesome coding is actually fun coding is a lot of fun all right let's see all right so let's snag this use strict variable and we're just going to slap that in crap that's what i want not wanted to do put that come on there we go cool that should be okay i don't see anything else to do with this one okay we're getting through these and then we'll um do some live q a this is a larger one so we want to we want them to make the class vegetable oh we also want to implement you strict this one looks like we're just gonna have to um i don't like this uh could we how would this work if i did like let c oh nope just the wrong one node now we do let's see and then can can we then assign a class to c within a function let's see class c constructor x this dot y equals x oh something didn't work um i mean can i just reassign c is that a thing has already been declared yeah can't do that hmm although i can't see anything clear except the color green is it grainy or is it yeah i know that the syntax lighting here isn't really great it's because it's on all json so i wish it would be better but um right now i'm writing some code down here i can actually move i'll move the facecam thing so that you guys can see the code i'm writing i'll stick this up here cool so you guys can see i'm right now i'm trying to um i'm trying to see how we can declare like declare like um declare a variable and then assign it to a class malicious hex and my monitor freeze or just me my i haven't frozen yet sorry about that before i was writing code where you guys might not have been able to see so you might have thought i was frozen but i was just writing um off screen but so let's see uh keep me updated though if things are still causing errors let's see what we can do here can i say class uh class a what does a do a is a function but then kind of then see this isn't great this doesn't work i don't like this um because i can't run any of these tests i could return uh can you return a class a type of yeah i guess it does let's let's work on this a little bit more so let's do say function x and it's going to return class class y stephen what does my computer set up look like we never get to look at monitor system setup etc um great question i could actually um i'll actually do a picture um and a little when you go on break i'll do a little do a quick picture and put it on on twitter but i actually uh move around a lot a college student so i've been jumping around between homes and going between my my own home and where i go to school so i actually just have a laptop and i have a monitor and i just hdmi the monitor and then i have a usb mic and an ethernet cable and it's pretty pretty uh it's pretty not not too shabby set up but it's definitely not as hightech as some other people's um and then dinesh says that's terminal ic and you're working on json yes so right now i'm working on a terminal it's an embedded terminal within vs code i can actually make it a little bit larger for you guys so you can see a little bit better but um right now i'm just working through like declaring a function that returns a class because we're going to use that in the challenge above but i'm just writing it in a node instance at the moment so we're going to return class y and y is going to have a constructor that is going to do is going to take in the character zed and it's going to say this dot foo equals zed and then we're going to say like uh that should be good enough and we can close off the class declaration and then the function declaration and now if we're going to say let um bar equal x uh crap well what if i did new is this gonna work let's see fuzz class constructor y cannot be invoked without new hmm so what if i did uh let y equal and then first let should just do bar equals new yy fuzz up okay ah okay what's this new why why i do okay cool it does do that um yeah two monitors helps a lot i can do i've gotten pretty good at writing with one when i have to um because like i said i find myself traveling a lot and working in a coffee shop or a plane or a train or a bus but um definitely there's perks to having a nice home set up with a double monitor even triple monitor um those are fun okay we're almost there okay so let's say we're going to say we're going to call this function make class and then within it declare that we have ustrict and then we're going to grab this line paste that in there snag you it's not you and then what we do return vegetable okay and then we're going to call const see this is a fun one we just go vegetable out here and this is going to equal make class so four monitor setup now i'm down to three anything less than that feels weird now and then dinesh when you are when you are coding while speaking it seems like you are you're and you're having a conversation that's just so amazing yeah i guess i guess it does and then jesse said definitely i used to have okay yeah um was it different for fun once i had like a desktop and i like tried to see how many monitors i could plug in and i somehow got like six monitors all working and it was just like i had them all spread around the room like there was no way to actually get that set up nicely um and it's just like really it was like really silly but it was hilarious to be able to be like yeah six monitor setup uh i'm having a discussion with my code and myself yeah yeah it is that's kind of how it goes here a lot of coding is talking to yourself so this should be a valid thing uh now when we say i don't want to mislead them this is very ambiguous let's just show that and then they should put the class declaration in there okay so this one more time let's test this out down here so we're going to solve or have a function it's going to we're just going to call this or actually let me um clear out node so i get all the variables back let's go ahead and write function foo is going to take in no arguments but it's going to return a class x that is going to have a very basic constructor which is going to take y and return no this dot z equals y close the constructor close the class close the function and then we should be able to say go ahead and write const x equals foo and then we should be able to say const bar equals new x and we're just just going to give it a um buzz keep writing this thing and then we should be able to go bar dot zed yes all right awesome that works so type of vegetables function and vegetable should have a constructor that's so valid and get user input assert get user input matches class so we want to use class keyword and then assert that constant a equals new vegetable apple yeah that's a fun that was a silly one i wrote in wow it's just just vegetable can be instantiated great tool um what's your what's your question chris this one all right yeah i love this one this so this is my favorite challenge i think in the whole section use getters insiders control access to an object because it actually is a little challenging it um you have to you have to create a thermostat class that has a constructor a getter and a setter and you have to implement the celsius and fahrenheit functions and it's very like it emulates a sort of state management that is much higher level with classes and kind of like you know more um just high level high level object oriented stuff but it's really cool um i hope it's not too difficult when people go give it a shot let's see dinesh i'm just made a function javascript that asks your name and tells you what your favorite dish is house it does is is it completely random dinesh or does it process like the characters in the name and make something off that okay so we're back on here how are we going to adjust this one um i could totally just use the same thing shouldn't i just the function make class and then have it return that out yeah let's do that how do you delete that line we don't want to be misled we go return thermostat oh okay and then we're going to say const thermostat equals make class i love this this what we're doing um here is really really nice though because we get to use the function we get to use use strict which is really good keyword because it makes sure things aren't overwritten and it throws type errors instead of just crashing the whole program um and we still get like a standard constructor um and it's not very obfuscated this is actually very nice syntax i wonder um i wonder if this could be implemented in other applications to make things a little bit easier uh yeah you got to tell me your your dish first my favorite food has to be cheesesteak um or as the bostonians like to call it steak and cheese all right and now we're on to the import and require challenges so i'm actually going to leave these because they're still not working at all and i don't want to try to mess with them so we're going to we're basically done here with all this so let's go ahead and run a quick let's push our code and we're going to run npm run commit and then we're going to do fix i'm going to say challenges and we're going to say what do we do um refactor es6 challenges what are y refactored refactored es6 challenges up to 23 i believe um up to 22 because we didn't do 23. and to use function scope use strict i want to great breaking changes none none let it run its thing then we're gonna go ahead and get push origin fix es6 challenges okay let's go check over here oh quincy started queuing let's see so getting error confusing messages all right so quincy's having some issues um with this obviously there's a little bit of work to do so let's go ahead and start cueing a knees ourselves um i wonder what is going on here though let's go check that's one of the first ones okay yes this should all right let's go see what's up um obviously some things are not working so we're going to debug and make it all work all right let's add another one here we're going to run node seed after the database is going running cool and now we're going to run gulp awesome okay let's go over here we're gonna run localhost 3000 and that should kick us into the can't and we're going to start at number one saved work all right why is this oh let's reset here we go so we should be able just to go over here and run let and let and that should do it all right something went wrong let's check what it is what unexpected token what's wrong it's a function calling it let's see real quick you know okay maybe it has to do with it being an arrow function let's fix that but this should be a valid way to call a function maybe we can just do this that's not i don't even i don't like that syntax let's just update this let's just say um you know cat function cat talk here we go cat talk and then below this we should just run run the method cat talk okay let's go ahead and bash let's run node seed okay we're gonna also go back here and update quincy uh it sounds rainy is it going to rain on out there it might uh you might as well be hearing my fan um my computer i wish my microphone wouldn't pick it up but i don't really know how else to make it not i can try to place it in front of the fan and that might help but there's really not not a whole lot i can do about there but it actually might rain outside too okay working on them a lot on these live right now um the error you ran into has something to do with the function declaration this self calling function declaration i'm updating them to look nicer now and still use and still use use strict it's important that when you're working on open source code that you keep the information on the github otherwise you know what i might be doing right quincy might still be working through these and if he doesn't receive an update like this he might be spending hours scratching his head so by telling him that we're working through it and that this is like what's up he's like all right cool so he knows what's going on he knows how to fix it um someone asked can i watch the full live stream afterwards when it's finished yes you can um my live streams always get reuploaded it'll take a little bit the process because it'll be quite long but they will definitely be there for you to watch um cool let's go back over here so we've we've done node seed let's gulp or let's reset okay it's done and then let's do a nice refresh here let's reset the code yep clear it and then if i unlock and run it should work good because now we gotta go here but var does not exist in the code that's confusing um oh that's silly there we go i should probably not write code at 3 am because errors like that happens cool refresh that and unlock the code and it should run and pass good stuff all right reset please you know what actually i'm gonna go ahead and how can i do this how do i how do i reset local storage oh it's in these isn't it local storage really delete everything is that a thing i can do oh great can i just delete all awesome all right cool give a nice refresh yeah so this browser guys the reason i'm able to do that and not care is because this browser is a dev browser that i the firefox dev browser um developer edition so like i don't use it for anything professional i just use it to write code and test code so this is a backed stuffed right i need you to back end back no actually this is all um this is very front end um a lot of the syntax you use in es6 will be used in react and redux and a lot of the front end libraries you see in today's world all this code that you're seeing right now do that all right cool i love not seeing any errors over here because of the nice u strict so let's see var variable does not exist in the code so we should just do variable let i and then block scoped let's run the tests okay same deal probably i think the variable message is messed up here yeah looks like copied and pasted it okay that fixes that let's be verbose and check awesome my computer's doing a lot better today in terms of performance it's good to see let's run this love it all right i guess all right there seems like there's some spacing issues let's clean that up and i know that's not gonna work let's go ahead and run it anyways just to see loop protect is not defined uhoh um i wonder what that is no i asked for protect not defined this looks like it's a free code camp error let's see you're in the example okay well i'm not trying i don't want to divide so this is a firefox issue let's see so it still gets transpiled down the es5 because of use of the for older browsers compatibility right yes all right great question let me talk about that just for a second here so this whole section is es6 and everything that is written everything that we write for the um for free code camp is es6 because it's the standard it's awesome has some really cool things but you're right it doesn't run everywhere es6 is not currently supported on all browsers the way we do that is by transpiling it using babel or something else but i'm pretty sure we're using babel and when we do this code you write your code here and then webpack actually will take the code chunk from here put it into an object and then before it transpiles it using babel it actually stores it in a variable called get user input which is why we're using it right here get user input we're passing out that's a variable and then we pass it through we can do we can do stuff with it we can test it we can run regular expressions against it we can run the code inside of it all normal in es6 because whenever code is executed in this environment it's transpiled with babel first and then the output is sent so um when you have words like let and constant and const they will automatically get changed to the too far appropriately um through the use of something awesome like babel um right so i'm having an issue with loop protect which seems sounds like it's a firefox error is not defined on not defined problem on beta yes ah they're experiencing it in chrome as well um let's see where did he add this rechallenge builders that should fix this i'm going to assign myself to this and i'm going to review his code in a little bit and we're actually going to do live github stuff okay we're going down the rabbit hole i'd like to what is he doing this looks good to me um i'm just going to say actually we'll do it over here all day we'll say review changes say looks good to me going to um run locally and test with one of my es6 challenges next and approve if it solves the loop protect issue okay we will hold off on this for now but we're going to make a note of it so what challenge is this declare a readonly variable with the cons keyword where is that where can i write that i'm just going to go ahead and just link everything together to do tests with all right cool um sorry did not want to get rid of that cool okay back to this let's um skip to the next problem which one did we just use all right mutated array declared with const let's go okay how does this one go if we do something went wrong please try it yeah okay same deal here this kind of function declaration just is not working function edit in place okay i should fix this let's go ahead and run node seed cool refresh reset clear the code what's wrong ah missing semicolon okay two five seven run it and pass great okay got the same deal here let's go fix the function declaration um i'm going to call this function freeze object cool cool it's great to reset all we should have to do is write object dot freeze math constants uh oh oh i see so can we do a can i go try is that this is valid and then when it doesn't work catch exception and then math constance is not defined i see let's see what says i'm actually going to write grab this okay we're getting there this is awesome and now i see so that's that's an issue let's return and then let's go ahead in here and write return math constants dot pi okay and then we should be able to go ahead and say const pi equals that i know it's a little not optimal but all right let's see how did you get to be the person that writes the challenges for free code cam i've been contributing for free code camp for a few months now and uh quincy reached out and said we need to get this ready to go by christmas and i know you know new i know you know es6 and i know you know how to write challenges so right all the es6 challenges and i was like yes let's do it so now we're doing it um let's keep that there and then go ahead and write assert pi equals 3.14 message say i want to actually have this we want to write code pi equals three point four reset gulp and let's get right back into it okay refresh reset yes please i'm missing a semicolon okay check stuff freeze ah okay i'll fix all that okay let's get rid of this real quick something's going wrong i don't know what it is okay let's just try this how did you contribute to free cocaine in the first place um i don't know what my first free code camp thing was um but i know i got into just the general curriculum um probably doing some styling or some basic challenge review and then i did a lot of contributing for some other projects like react and node.js as well as did my own github stuff learned more github skills kept up with the free code camp repository um started taking on some more challenges um even uh began work on a python curriculum for a bit but that has fallen through at the moment um and then from there i transitioned into uh the guides platform pretty heavily um doing a lot of review for that as well as doing some leg work on um fixing some things and you know some of the some of the back end code for that setup and then from there i got invited to work on the free code camp project to do the challenges sebastian says typo question mark um let's see yes you're right that probably is it let's see math constance there we go should be constance see i would have taken forever to figure that one out that's the issue with writing and json is that you don't get you don't get to know if your variable is like correctly named or not i'm just going to snag this line and reset the code so i can make sure i see it from a good slate makes no errors paste that in unlock and run i still spent i still spelled it wrong where oh in my object line finally all right let's go fix up this one yeah i don't even know what i was doing here this is an easy one it we don't even need these we to change the whole like basically we're going to be able to change the whole function here yep yes sebastian the chat is about 30 seconds behind me so um sometimes i will uh see i'll like you'll you'll see something but you'll see 30 seconds later i'll already have seen it but thank you though for pointing it out it's just good enough is that all we need to do yeah because all they're doing here is changing it to the other thing excuse me martin is that what so it's not the only it's not like contributing to open source does not guarantee a job um nor is it a requirement but it definitely helps um i actually hopefully a blog post should be getting published soon um on the free code camp publication on medium that talks about that that was me sharing my experience and how contributing to open source has gotten me into um has gotten me into my current internship position and it definitely does help um but it is not necessary and you can achieve uh internships or fulltime positions without open source contributing um but yeah as jesse is just just pointing out it is definitely a very big help right we're getting through these take you come on oh well that's not what i wanted but whatever at this point uh take that away good and we're just basically going to lead up to here get rid of this line yeah sebastian's right um i talked last time about how applying your code is a lot better than just learning it because anyone can sit down and watch a youtube video over and over again but it's until you apply that code where it really will stick and then if you can produce something even if it's as simple as a static website but it's written with react or written with view and then you know you you use gatsby to bundle it all up and then you deploy it on heroku those steps are monumental to a bigger project and if you can just show someone or an employer that like hey i've done this before on a much smaller scale but i've done it i'm familiar with it they'll be like that's awesome we'll take you we'll teach you how to do it on a larger scale and then you'll be you know the next best thing on this team um so yeah don't ever think that you need to like make your own facebook for it to count like every tiny small project makes a big impact um just make sure you're able to talk about it and talk about the tools you used and um things you learn things you didn't learn all that kind of fun stuff or things you failed and learned from all right function declaration with you strict this should be good all right let's run this good and then cool but i think i want to change this to var there we go um is it getting an interview or is it passing the interview martin um because getting interviews there's uh that's just resume and side projects you need to be able to show them that you've done some cool stuff through a piece of paper and you know there's a lot of tips there's a lot of tips you can get on that the next step is acing the interview that is a serious um it's a challenge you know it's not like you're not gonna i'm not gonna lie it's a challenge but there's but there's so many things you can do um and i bet you're doing them but you just gotta keep it up and uh keep trying you know working on side projects and then being able to talk about them quickly um doing like coding challenges knowing your algorithms knowing your data structures um and maybe consider starting out like depending on how much you're shooting for like if you shoot directly to facebook or microsoft or amazon or any of the big companies it's gonna get difficult very quickly and those interview sessions can be very competitive if you can go with some you know more smaller teams or maybe something that's a little bit less esteemed at first work through there and then apply later down the road that might go a lot better for you because it's definitely going to be easier to get a job at a different tech company than it would be to go and work for like amazon or facebook where they have some pretty intensive um interview processes what did i change here oh i had to change all this all right we're getting through it so i'm gonna go ahead and write a function called square list getting an interview um resume resume resume resume um it's worth it to take a class you know see if there's any programs in your local area universities do a lot of career prep yeah the the interview processes at these big companies can be a little ridiculous they are they can be quite difficult but they are changing um when i uh when i interviewed with microsoft i didn't have to do a single coding challenge um so there is there is times when you can uh when those when those larger companies are changing their ways but um it's a way to show the the coding challenges i've seen are it's a way to demonstrate a little bit of aptitude um yeah preparation is ridiculous i was spending a lot of time doing that it's definitely tricky and it's definitely not it's definitely not the way it really should be but sadly it is and you kind of have to play the game and then eventually you won't have to any longer you know suck it up and get that first job through the interview through that horrible interview process and then you should be good uh that's a shame reach out to other ones though other universities sometimes have public programs too you know they don't a lot of universities aren't just like for their students i know mine has you know they could reach out and they would they would provide um their resources if someone asked also just general career help that knows a lot of websites on online that have resources all right let's go from here so function square list passes the array and we just want to so we're going to want to say const squared integers snag this chunk delete all that and paste that in there udemy also has some good courses um and they tend to be a little bit cheaper than udacity unless some sometimes you can find the free udacity programs um there's also plenty of websites too let's see where we're going you just want to be able to return this and then we should be able to say go ahead and write const but yeah this won't work yeah you like you're actually sorry let's do i want to say const squared oh sorry square list i want to write real number array uh but we want to first want to write squared integers equals um i think the reason why people encourage you people to go into development is because it's a growing industry um it has a projected job growth that far exceeds other um other job paths um i know everyone is really encouraging until you actually looking to get a job yeah that is uh that is a challenge and it's kind of because it's hard um then it's back to only wanting the top percent um well i mean from a professional standpoint you don't really want to hire people that aren't going to like do the job well but that said there's a lot of companies that still hire and then they want to teach you on the job um so there's a balance there anyone can be a developer it takes a lot of work to get to that like developer standpoint because you know you aren't um i would say this you aren't like a full developer until you're writing code that is being used by the world up until that point you're just learning you know i'm still learning i haven't written anything that uh is people are directly interacting with up until with my open source work um so there isn't balance between the like learning and you know going for the job and then while being in a job all right we're going with here okay this should be good to go to test this let's refresh okay if i remember this correctly which do dot reduce and then it's accumulator value and then the return which is number dot is integer value then a dot concat v times v or return a and make sure you pass in that guy oh how is it any different whether it is deployed publicly for company or not though in what sense like the code that i've written for open source and how that differ okay i think i know what you're getting at the difference is if you're just publishing code on open source that is not it is it's awesome because they can see it um but then it's another thing if you're contributing to currently active projects because little bits of my code currently run in node.js and react.js and having my name in those repositories means something it shows that you know my code is being used by people and that tiny factor i think is what employers really enjoy seeing so if you can if you can uh do that basically and get you know where even free code camp that's the one of the i love working on free code camp because um it's a lot easier to get into and it's a lot uh it's a lot easier to teach people how to use it and it means all the same you know you're writing code that thousands of people are going to be using so if you can if you can benefit and work on free code cam that would do a lot of good things okay let's see if we run this should we pass everything yay but i want to update the thing over here const equals equals cool all right ugh see what it is nonsimple parameter in strict mode uh what does it not let you do let's see this all right so i don't like that syntax though um should i not do tutorial too um martin to answer your first thing keep doing full stack projects and publish them on github um that are those are great things to have on there and answer your second question yes um how looking around just constantly starring different repositories that i use and um well i know you might not be interested in a specific repo but if there's a thing that you use like react for example i love using react so i start it and then i look through its issues every now and then if i see something that's labeled as beginner friendly i grab it otherwise with free code camp i knew specifically the goal with contributing a free code camp because it was easy to get into and now i'm making a big difference writing some really awesome code amy martin that's if that's what your intentions are um you know just doing it to get better and looking to get a job then just do it if that's you know if that's what's if that's what you're reasoning behind open source is then go for it um you know if you're gonna write good code and make projects better then doesn't matter what your reasons are i would totally recommend you go for it and maybe start with free code camp there's plenty of challenges there's plenty of issues open on the free codecam project and they have a really active contributor channel getter channel that they can help you if you run into any snags while said setting up or running through the code all right let's implement this though how does that look this one here var increment equals let's see function oh i believe so martin that should work um hello how you doing today manchu hmm okay let's see if this works that's okay martin everyone's got to start somewhere i re uh free code camp is a really good one to get started with both the beta project as well as guides have some really nice um open issues awesome sweet next challenge has arrived oh how many have we done so far use the rest operator with function parameters i don't know which number that is use the rest operator oh wow we've done a few one two three four five six seven eight nine ten all right cool um i'm actually going to do this one and then take a quick break just two or three minutes and then we'll get right back into um going through the next few cool um this one looks pretty done so far let's see ah it wants me to destructure so i think this is gonna give another issue but we'll try it anyways yep is this it oh same deal all right we gotta wrap it i want i wanted to ask why too much javascript framework um can you clarify please i'm not sure what you're trying to ask why why too much javascript framework is there a specific one you're asking about like react okay oh wow oh that's a great question um is martin is clarified why are there so many um it's a good question i think there's i mean there's definitely a point of you know certain companies built their own and then open sourced it and said this is what we use you guys should as well um i know like you know angular started and then google now acquires it now google uses angular all the time and then um react was released by facebook and everyone's using it and then you know people realize that angular and react were quite large so they just created their own like view um but there's also some before those like backbone and ember um that all have their pros and cons um but i don't know much about them to go into detail but basically people build different frameworks for different reasons and then they release them because it's what they use at their company or whatever and then the community if the community enjoys using it then they keep pushing it yep mine's about right just you know people make it to suit their own needs you know react was developed for facebook and then people then they realized how awesome of a framework it was and just decided to release it and now they support it for everyone and it's turned into an incredible incredible framework angular has moved into more of an enterprise direction um so you won't so you'll see because it's now in full support of typescript which react is not but angular is and a lot of larger companies especially enterprise level companies like google and microsoft really love using typescript so angular's direction now is more enterprise will react as more developer um yeah plenty of different differences see yeah ah we gotta return this now i can't remember if you just do arguments cool okay guys so i just finished this one let's um give me a few minute break and then just going to be two or three minutes and then we'll be back to do the next few actually before i leave let's commit to github um always a great thing to do oh there's there's actually a refactor that's interesting i didn't know that let's um test challenges qa es6 challenges yeah martin yes um one cool thing with javascript this is imposed by tc39 guidelines is any once they make a decision about how something is going to work it will not change so for example the spread operator the three dots that will forever destructure things like it does in es6 and when es7 and 8 and 9 and wherever javascript goes in the future the three dots will always destructure just like objects can always be accessed by um the array blocks and by dot notation um those will not change and that's a part of the way tc39 runs if you don't know tc39 is the like people that make decisions about esx in the direction of the language and the standards um give descriptions what changed why what optional um refactored es6 challenges getting tested and q8 nothing nothing cool i'll get push origin fix es6 challenges awesome all right where can you get the code which i'm doing right now yeah i cannot show you guys the stuff um if you'd like i don't know if this will let me post a link but here we go so that was the link to the github um challenge it's or this is the pull request pull request number 16 262 and um that's where all my code is currently sitting and there's the chow and then there's the um where we are addressing issue number 16 254. okay right be right back guys be right back whoa whoa hello hello all right let's see one question always if i'm learning one framework and doing project with same framework new project with new framework uh archer needs you to uh so am i i'm able to learn and code in required framework yeah um i uh i've said it before but um applying something that you're learning is the best way to in semester oh yeah for sure you don't ever need to fully master framework there's trust me there's there's many aspects of free of uh react that i still no clue and probably will never use or maybe not told a very small you know niche case in the future but that doesn't mean that i'm not that i don't have that i'm not confident with my react skills um just applying it keep building projects even when you're learning it's the best way to do it um so definitely keep it up all right let's get back into it let's see what we got here if we have any comments okay we gotta make sure we go back and test that one um good so the commit came through everything is building correctly still good to see let's see don't you know man get it have fun you know i've never used i think you meant to write couch i've never used couchdb before um unless there's something called pouchdb but i know there is one called couch electron is a lot of fun and you know um yeah there's too much to know everything so just use what you can keep building have fun with it no one's expecting you to just become a master of one framework um that's a little crazy all right what are we doing with this one ah spread operator uh i think all we have to do here is go change this to function and i think we add it out here that should fix it let's run node i'll do it oh well let's go do it in here pouchdb works in the browser and can sync with couchdb oh cool yeah i've never i i just know about them i've never actually touched them um i'm a big fan of and firebase for a while now the new firestore um but plenty good reasons to use other things don't break on me come on there we go oh that's not how you write function cool oh cool interesting i'll have to keep that in mind i was trying i'm uh currently thinking about a offline capable app the app can still store and read data from pouch and when there is a network connection it can sync with couch oh cool so i was going to do something similar but i was just going to local storage at all and then just using reacts thing whenever the like whenever the app like loads up it would check the local storage and be like yo is there something in there if there is it would like commit it to the database um but all right cool pouching couch that sounds fun do you guys know if it's a nosql or sql based database or does it not matter it's more of like a wrapper airbnb is popular martin um yeah go with the airbnb um the standard eslint options are very standard and um they actually get changed quite often um but no one's going to be judging you based on your syntax really as long as it's readable um i would also recommend looking into the prettier um project and using prettier to style your code um i've found that that is a lot easier than using eslint and doing it manually okay oh well something's broken in here let's see what it is nope right here uh oh no sql awesome is it a key value or document based databases are my like favorite thing in the world i hope to study them more in the future why is nothing working here oh nope that's not what i wanted i figured how to just run the con run the code i should know yeah um prettier formatter for visual for vs is a great one um prettier is just a framework but you can um it can be but it's been like ported to like different types of editors so you could just auto pretty auto profiles undefined why is that undefined oh i failed i didn't even do the task here we go there we go what did it change over here though um document based with json awesome best book to learn data structures and algorithms in javascript oh friend let me tell you um this one right here introduction algorithms i don't know who it's by but here um thomas h corman charles learson ronald rivest clifford stein highly recommend that one and then data structures oh i don't want to read it here we go fourth edition data structures with abstractions with java frank m carano timothy m henry two phenomenal books um they are textbooks college textbooks but uh i best thing ever you know there's they don't get any better than that that algorithms textbook is like the best thing ever the data structures one is um you know it has its pros and cons but yeah i was just writing it down so if you wanted to copy and paste be a little bit easier okay we're on to the next one guys four case is not defined good shouldn't be well just just because i just wanted to but that was an easy fix great that needs to get fixed real quick am i crazy or yes see this is wrong that should get let me edit that just in case ever someone ever comes by and asks better okay and this is this one so berkeley approved them um cool we'll get to that one soon so we just made a basic edit over here oh come on great and that was what we do just wants me to do this put that there oh that's an issue so see this oh i can't do that here let's just return the right crap okay gotta fix this one up let's rename this function um remove first two all right have a good one jesse have a have a good night himanshu glad you guys enjoyed it thank you for thank you for coming i hope it's not the last either him aren't you i do well there's plenty of these on free code camp so make sure to come by in the future i'm glad okay awesome oh hi sammy you're welcome for that so oh okay something went wrong ah use the structuring and that can't do that you we're getting there we're getting there okay we gotta grab all this code right here apologies if you guys can hear the dogs barking i think there's a boat coming by oh wait actually these need to go out there now this line gets to go up here instead okay i'm so excited for these all to be ready for everyone to run through themselves all right i'll um start talking about what i was just doing so basically i forgot a semicolon um es6 an es5 there's this awesome mode called strict mode which basically keeps things from going wrong doesn't it it prevents the user from writing bad code um like rewriting over variables and stuff now there are some rules with you strict for example you're technically not allowed to destructure variables or assign defaults within a function declaration of your strict which is what happens when you put you strict within the function that you're going to do the destructuring in so by by doing what i just did hopefully uh hold on a second by doing what i just did this will still implement you strict over this function but will then still let us go ahead and do our destructuring in inline so plus i personally think this code looks pretty baller awesome all right let me clean this up a little bit before we move on so i want it to look like that i want a space oh please don't i want to paste that in do we want a space above no we want it right up against it good remove this line i want to place it right here and then i'll put one more line in there cool all right we are moving right on through all right know what's going on here let's get rid of this console log um and replace it with a white line white space white space we should be golden actually there we go actually take this line and place that one above it ah crap nope it's not there okay so just to emulate that let's just delete this line all right know what this one does so we have to do a raw dot map and then we're going to pass the value to the template literal which is ally class equals text warning and then we're going to do the v in right there oh no we'll send syntax v right in there and then close off this little thing majig and get that going there and we should be golden we have to go ahead and then do cons to result display array equals make list result dot failure awesome snag this and sneak it in right here yes martin an entire lesson section is one json file um the dream would be for it to be way easier to edit but at the moment this is what we're doing and it does have a little bit of learning curve but it ain't that bad once you get to know it okay did we remove yeah i fixed everything else up nope every challenge is just one every section is just one big json file um the json is processed and stored in a database and then we take that database and then that's what we pump into the um the client through like when they when you want this page it goes and reaches into mongodb is like i want this and builds this challenge uhhuh what's the meaning of life yes martin um the in here we actually it's like when we want to build these code blocks every new line is considered a entry into the list and then you can also input like html like block quote code hr br to break on the line when it comes to the challenge seed this code is what's rendered into here so the way you write that is you use just you write your javascript code but you have to put in all your it um white space matters so it actually holds its white space so like you know you i have my indents here and that is emulated on the screen when it when it's rendered um so you gotta be very deliberate with what you write otherwise it would be issues and this is why we're refactoring and cueing and using q a to make sure everything's good yes teemo the custom editor for challenges i wish that that existed and i hope that someone someone in the future builds one but for now this is the oldfashioned way and hello nice seeing you very tired ah my favorite challenge all right you guys could see all the solutions so this is past fahrenheit to start and then you get temperature um yeah right you do that right yeah this is going to return this is returning celsius so we want 5.0 so i actually do not listen to lofi um i do enjoy it though but i'm actually listening to a alternative um playlist at the moment um believe it's called good vibes or something like or no um called good future club they're like a company and uh they have a playlist of a bunch of alternative music so i listen to that when i code um i enjoy the the rhythm and the beat to it um is this javascript you writing yes yes it is um javascript this is es6 challenges for the upcoming beta curriculum um we are writing the we are writing the challenges as well as queuing them yes javascript is very flexible it's a very loosely typed language compared to java um but java has a special place in my heart because it it enforced some really good coding practices for me that i um get to emulate with javascript and it helps a lot um plus algorithm and data structure design using excuse me using java was awesome because i got to take full advantage of all the object oriented features like inheritance encapsulation and typesetting and all that wonderful stuff um iterators and private and public variables made the most of most use out of it and built some really awesome data structures that had some really good use cases and were really efficient so and that would have been slightly harder with javascript because you have to be very cognizant of you know what you're declaring and how you're using everything that you declare all right how we set temperature set temperature receives celsius so we want to say i saw typo where is this one thermostat you know javascript does have classes it is an an esx feature um i believe it was also an es5 but definitely less adapted but um nope it has classes it kind of fakes it though um you know if you're actually actually real quick so we're done um we just finished up the rest of these are imports and requires and this section is still broken so i'm not going to try to qa them at the moment um which means let's shut down gulp and shut down mongodb and let's quickly commit and i'm going to show you nino go into a little bit about es6 classes so we'll add this and then npm run commit what we call this we called this a fix no we called this um let's just fix it uh challenges refactor oh no we um qa remaining yes six challenges yeah we don't need any of that all right that's good to go get push origin fix es6 challenges so all that while we wait for uh everything to run on the background let me go into a little bit detail about classes for you you know so right now i'm running an instance of oh come on all right nevermind then um can this work sorry hold on a second what's the command there we go that's what i wanted all right cool we're cleared the console so we're looking at a node console right now so we're gonna be able to write javascript code you know that if we write type of um function you know we'll get function you write type of you know object you get object now if you write type of class or so let's now let's define a class so we're going to say class c e or class c doesn't really have anything in it so we write type of c it's called a function um so you notice type of c is a function and that's the same as a traditional function um but then what if we wrote type of newsie oh well that's not what i want to write type of new c it gives us an object so what that what this means is that classes in javascript by default return an object but if you notice we wrote type of function here let's do a selfcalling function so if you so when a a default function in javascript returns undefined because you don't declare it a return statement with object with classes it automatically returns an object and this is built upon because if you go ahead and you write class c2 and then you add a constructor that takes a variable foo in a variable bar and then assigns them appropriately you know this dot x equals foo and this dot y equals bar and then you close everything off you can then go ahead and do things like const you know instance equals new c2 you know abc def and then if you um class as a constructor um class has constructors it uh default it has a you know its default statement is constructor because when you go ahead and you use the new keyword on a class it will automatically return it'll automatically call the constructor so what this means that instance now has an x value an instance now has a y value and this you can take this further and you can define functions and state and you know if you go into react that's where a lot of this awesome stuff comes in and as you can see you can actually go ahead and say type of c2 it's a function type of c2.constructor is also a function um type of new c2 is an object and type of uh i believe if you do this might not work uhhuh so see if you try to call constructor directly it doesn't exactly work um but yeah that's a brief intro into classes okay so let's go over here so we refactored everything um this should refresh shouldn't it there we go and now we have one one more thing to do today let's go ahead and check out these edits um wait i forget how to do this yes martin so when you call typeof and it returns function it tells you that by default the class is returning like it's saying like here's my constructor you know let me do something um i forget how to check out uh when you add two empty arrays together you get an empty string why beats me it's a javascript thing um we can actually explore that uh you add two empty arrays you get a string so if you think about it type of that is an object so if you were to add two objects together what do you get oh something ugly um well i think by default like an array returns um would probably return like its values so if you had like uh you know like an array with something in it it would it wants to return itself and show you it so if this if these are empty lists considered like null entries or null value or empty then when it adds together it might just be returning like it's contents yeah it's all coercion um yes teemo i wanna i wanna pull down that pr locally i was just about to look it up but if you know how to do it and you wanna share that would be incredible um do mult do can class have multiple constructors um like overloading i don't know if javascript does overloading let's find out class we only got only only have one constructor in javascript oh i see okay yeah i found a team out it's actually right here so i'm gonna check check out b actually let me just copy this and run that from here okay good and then we should be able to then run npm install get our stuff this is a fun one guys check this out um this is the type coercion table so you know true is the true false you know is it false true is one true is also the string one true is also the array containing one um you know null equals null undefined equals undefined but they also equal each other infinity only equals infinity as well as negative infinity only equals negative infinity um but like empty string is false it's also zero it's also an empty string it's also an empty array it's also a doubly nested empty array okay installed that and we should be able to run mangoed cool where is this where's this one at yeah all right gulp all right and which challenge do i want to test this with um declare readonly variable uh today you're wrong uh hold on a second ah this meant i meant to put sentence in here uh what this is completely wrong hold on a sec guys can you post a link to that table yeah let me grab it for you guys um it doesn't exactly like doing links in here so i'm actually going to split it up and then i'm just going to let y'all connect it all back together yeah we get links turned off automatically because otherwise people could post um bad things but as the i i think i can just put that link back together and you all should be able to get to it oh this has the old code never mind i don't think i'll be able to let me see if i can do some magic alright well uh crap this one and i should be able to do what's wrong ah this is not this ain't going well um all right this ain't going to work um because i'm going to have to re oh let me see if i can no we're going to do guys um uh we are going to go rogue here and we're going to do some real fun get stuff all right so what just popped up on screen is from the amazing um dan abramov from react and he taught me how to basically keep something up to date but it also has some really fun things in it like how to reset something back to its original state um which is a very useful tool a useful thing to know how to do um so we're first of all we're just gonna reset hard to scissors need food to fix loop pro tect undefined error that did not work um i think i forgot the nope okay just get reset there we go yeah so all these issues are all right so we're just gonna basically uh close we're just gonna get check out or sorry um get check out fix es6 ah getting sloppy okay cool you i'm a little confused this is not gonna let me on disk in digital code i think this is good okay i misspelled fix where oh before yeah probably oh so i'd check out spelled incorrectly um can i get remove the branch how do i i just wanna oh you always gotta look your stuff up when you're doing get you never wanna just go for it because you could break things um get remove branch delete a local branch cool okay so let's get that branch name back up i'll just do get check out d right now we got right branch hello how you doing today just cleaning up here having some fun with git um some other ones why don't we just clean up i'll clean up a little bit of my thank you very much and okay i misspelled it in the reset all right it's whatever i i was i needed to cherry pick like four different commits and that wasn't gonna happen so what i'm gonna do is i'm gonna do a little cleanup and then i'm going to go and squash my commits for the es6 challenges into one and then i'm gonna refork the thing that i just grabbed and then i should be able to cherry pick that singular commit and then merge all new do the whole thing run the database all that and then i should be able to test my new challenges with that loopback fix um so i just need to just try and do some cleanup and i should be able to now because i believe the feature one we merged last night awesome okay so now we're on get branch good that's all i want to see okay so now give me a moment we're going to open a new mozilla window you guys don't need to see that perfect because over here and now we're going to run some other fun ones so first of all we're going to get log the um the commits for my last for the last four commits that i have uh that did not work what did i miss unknown revision or path not a working tree should i be able to do that oh no that's not what i wanted to do oh god nope still not all right i just wrote git log there we go look at the last few so we have qa remaining challenges qa es6 challenges refactor es6 challenges um and then add function scope of u strict those are the four yep cool so now we want to get rebase i head and we want to do the sub we want to grab the last four so this grabs the previous three plus the parent does it nah did not okay so then i just quickly have to run just escape out just quit without saving um do the four there we go and then we're gonna go ahead and just call squash on all these ah wait we gotta pick first so this the first one we pick and then we squash the rest into into the first one and what this does is takes all the changes that i made up till now and um pushes it all into one commit um dot dot instead of that that probably is it uh timo what is all of that okay so this is github this is like how i make changes to this is how we track all the changes and what you're looking at is the logs of all the work that we've done so far so in the for the past 12 hours i have created four different commits on the code that on these es6 challenges and those are four separate things like they're called like diffs like diff differences what i'm doing right now is i'm taking all three and compressing them into one and that then that one difference can be merged at once and then i can also take that big difference that one single difference and plop it onto another branch which is what i plan to do in the next step because we want to test someone else's code on our challenges to make sure that challenge works um the way you do all that is you have a squash commits and that's what we're doing right now so we just edited the the commit history and we've added the squash commands and then once we've done that we can then escape and then do right quit good this is a combination of four commits good we just want to scroll through it the hash lines or comments they don't get printed be ignored great last command's done i love it okay golden so now we need to uh get push force the origin es6 challenges great and if everything went correctly this should have reset the history here um and it did not uh missed one step i don't know what it was oh here we go okay so you now you'll see all of my code has just been compressed into a singular commit so all 178 plus all the 123 differences is one singular commit if you go and click on the commit you'll notice that it actually has the previous three commits in here this is uh what it looks like so what is this all about basically these this is the kind of a higher level get function which maintains the state of a repository in an easier way let's pretend that this this pr right here was to get merged into the project with four different commits in it but something went wrong you know something broke in the and we broke the ma the staging the the production level application because we merged from this pull request we would have to go back and revert the four commits that we merged four times manually with each different commit code and that's a process it's annoying instead before we merge this whole chunk of code into the main project we squash everything into a singular commit one code change it's called we make it we we tell the version control system here that everything we've done we want to commit all at once instead of in little bits and pieces so if let's say we now work now we merge this pull request with one singular commit and something went wrong on the staging side all we would have to do is reverse this single commit all the changes would be removed and we'd be okay um and we are maintaining the history here because there's been a big aspect of the the history of things that have been changed so people can know who changed what when so by rebasing and doing all that squashing and stuff that i just did in the command line we have this beautiful you know this really easy to read descriptive commit definition along with you know all of our code changes bundled into one okay that was kind of a long explanation um and it comes with a reason because we're also about to do something cool so i'm going to go over back over to here i'm going to copy this and we're going to go ahead and run it great now i want to get cherry pick my singular commit yes it does need to get approved um i will not be merging it uh until quincy or bouncy or berkeley or anyone teemo or anyone else reviews my code and tells me it's all good cool so we just cherry picked and you guys noticed that we just changed everything in this file in one click with no merge conflicts so happy it's a good sign now what we have to do is run npm install and then we should be able to run uh mongod oh oh someone was running ah this one's been running the whole time that's not good oops um let's go ahead and just go back to one and now we're gonna write mongodb and then we're going to create a new tab and run node seed and then we run gulp awesome and then we get to go back over here do a nice hard refresh on here i might have to clear local storage we'll see it's working it's working yes and we unlock the code run it passes no loopback errors so now we can go back and we can say um let's go ahead and let's quit gulp and quit out of then let's go get check out back to our fix um es6 challenges and then uh i'm not touching that that's not um hold on just one second guys get branch i'd like to just modified package lock json that's not a good sign um i'm just gonna get reset don't know why that's acting up um oh i have to rerun npm install that's fine um honestly that doesn't really matter that much because we've already changed it online and once we get to merge up there we're good um so we're good over here get rid of this this challenge is great and ready for qa and then we can go back over here and we can say um let's let's code this out and let's say completed and successful update the comment and then i'm going to go over here and i'm going to say i'm going to go ahead and approve approve and we should be good to squash and merge because berkeley approved it i've approved it quincy approved it squash and merge awesome great work great work on this was able to run my new changes to es6 curriculum and get the back error to go away or loop protect cool so this is the so that we've done that and now we can go over here um we should be refreshed that should merge that should say merged and now this gets closed automatically and we get committed together awesome awesome let's refresh this uh so this is the issue that is going to get closed when this one gets closed and if we refresh this we should get a green light um so i'm going to quickly do this i'm going to say i'm going to change this to the check mark q aid locally on live stream update the comment so this will close that issue quincy stuff got solved i've done this completed and successful and add function scope to use strict verifies so now all that someone has to come through is come and check everything and then squash and merge when they're ready to go and our changes get successfully done um with that uh let me run get status again this package.lock is still being weird so i'll figure that out on my own time but with that guys i think we're done for today if you have any other questions i'm down to hang around and answer some stuff but yeah that was a crazy amount of work um both coding and with git i'd be happy to do to go over what i've done again and talk more about it and share some of my resources so let me know i'll hang around for a few more minutes and then i'll but then after that i'll sign off and all that good stuff all right i don't see anything in the comments so i'll take that as a time to head out so guys thank you so much for coming today i love doing these streams expect more from them in the future um have a wonderful day happy coding please reach out if you need anything or assistance or help or guidance be happy to give it with that have it going guys