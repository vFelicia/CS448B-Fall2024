learn p5.js for Creative coding by following along with five beginner project tutorials p5js is a JavaScript library for Creative coding with a focus on making coding accessible and inclusive for artists designers Educators beginners and everyone else Pat ver created this course Pat loves making art with code and is great at teaching others about it hi everyone welcome to the course my name is Pat and I teach creative coding over at the pat vaa YouTube channel the goal for this course is to introduce you to p5js a JavaScript library for Creative coding that focuses on making coding accessible for artist designers Educators beginners and anyone else we'll be working on five projects that cover a range of topics including generative art kinetic topography interactivity and so much more all you need is a computer and a web browser just head over to editor. p5js dog so without further Ado let's get started welcome to another coding tutorial and in today's video we're going to be making this interactive display with rotating blocks we're going to start by creating this one block to understand the mechanics of it I'm going to use a function called wct and wct takes in a total four arguments the first two are the x and y coordinate of the top left corner of the rectangle and then the third and the fourth are the width and the height so I'm going to put it at the center of the canvas so with WID ided by two and then height divided by two and then the width and the height let's do 100 by 50 so as you can see here it is not at the center of the canvas because the X and Y coordinates is at the top left corner of the rectangle and we can change that easily by changing the rectangle mode using the function Rec mode and then give an argument center now I want to rotate the rectangle and we can use the function called rotate and how about we rotate by 45° and because we're using the degrees mode we also need to set the angle mode to degrees and that is not how we want to rotate the rectangle and the reason that it's doing what it just did because the rotate function rotates around the origin point and right now the origin point is at the top left corner of the canvas so we also want to use a function called Translate and put that before the rotate function and translate is the function that translate the origin point and we want to translate it to the middle of the canvas so let's give it width ided by two here and height / two and by doing this now we can draw the rectangle at the new origin point there you go now the rectangle is rotated around the origin point which is moved from this point to the middle of the canvas how about I create a new variable called angle and let's set it to zero and then I can put angle here and we can increment it by one degree at a time and now the rectangle is rotated in the clockwise Direction perfect to make this interactive we're going to have the rectangle rotate when the mouse is Clos to the rectangle and we can do that by first let's set a new variable called distance and I'm going to set it to a function called dist and dist is a builtin function within p5js that calculate the distance between two points and the two points that I want to calculate is the location of my mouse so Mouse X and mouse Y and mouse X and mouse y are builtin variables within p5js that outputs the location of my mouse now I want the distance between the mouse location and the center of the rectangle so width / two and height / two so how about we also first print distance just to see then I'm going to comment this out all right so as I move closer and closer to the center of this rectangle you can see that the distance becomes zero or closer to zero now that we have the distance calculated we're going to use a conditional statement to check if the mouse is close to the rectangle so we can use an if statement that says if distance is less than how about we set a new variable let's call it this mouse for distance between The Mouse and the rectangle is 50 so if distance is less than this mouse then I want to increment this angle here by 1° so not moving not moving not moving and then when the condition is satisfied the rectangle is moving then it stops when the mouse is further away now that the code is working for one rectangle let's put it in a class so you just come to this Arrow here Click A Plus signed and then click create file I'm going to name this file block. JS and before we start writing the class go to index.html file and then come to this line of code here copy and paste and then change the name of this file to the name that you just created so for my case block. JS and this is how we integrate a new Javascript file into the program let's go back to the class we're going to start writing it by writing the word class and then I'm going to call my class block and then we're going to write two methods one is the Constructor function and the other one is the display all right so for the Constructor function we need X and Y location of the center of the rectangle so I'm going to set these as variables this.x and this.y and for display let's go back to our sketch. JS file and then we're going to copy these set of code here for drawing the rectangle all right and we need to tweak this a little bit so instead of width divided by two and height divided by two here we're going to put this. X and this.y and then I'm going to also create a new variable here called this. angle and initialize it at zero all right and we also want another method called move and this is the method where we check the distance and move the rectangle rotate the rectangle so so we can copy this set of code and then put it in the move method all right and then we also need to change this to this.x and this.y and then this mouse is already the global variable so we can keep it as is and then we need to also set angle to this. angle perfect so now let's go back and let's try to create this one block object we don't need this angle anymore okay so I'm going to call it B and B is going to be a new block object we're going to set it at how about this the center of the circle so width divided by two and height divided by two and then to call the function or the methods we just do B which is the name of our object and then Dot and then the name of the method so move and then display all right so it's displaying and then once the mouse is closer the rectangle is moving great all right one more thing that I want to change before we move on is I want to also set the size here using a global variable size which I need to also create and then I'm going to set it here as how about 50 all all right so now it's a square now that we have this one block let's create a grid of blocks so I need a few new variables so the first one is columns second one is rows and then we also have the size and instead of just this variable block I'm going to create a new array and let's call it blocks all right so we're going to create a 2d array and we can do that by using a nested for Loop that goes from IAL to0 to I less than columns right and then in the Inner Loop is from J equal to Z to J less than rows in the outer loop here we need to populate the blocks array with empty 1D arrays and then inside the inner loop we can now create a bunch of new block objects and then for the arguments it's not going to be this anymore it's going to be I * size and J * size I * size and J * size will allow us to create a grid of rows and Columns of blocks that are spaced out by the distance size all right and then now we want to call the move and the display methods and we are going to use the nested loop as well so we can just copy and paste this and then now just call move then blocks of I and J dot display what's going on it is because first we have not yet C calate what calls and rows are so first we need to calculate that so columns will be the size of the width divided by this variable size here and then rows will be height divided by size all right so this is not a grid that we want and that is because we forgot two important functions called push and pop that are very important when we do any type of Transformations so let's go back to block. JS so essentially right now that we do transformation which is translating the origin point to this.x and this.y we need to use the function push and pop so we need to use the push function which saves these two transformation translate to this point and rotate at this angle and then we need to use the pop function to return it back to the original setting where the origin point is at the top left corner of the canvas before we do the next translation for the next object block and if we do that and click run we get a grid but this grid is not exactly what we want so we want to shift the grid a little bit to the right and a little bit down and that a little bit is actually by half the size to the right and then half the size down so let's do that go back to sketch. JS and then here we need to put an offset of size ided by two and size ided by two here all right now we have a grid of blocks and now when the mouse is closer all the blocks are rotating but as you can see here when the mouse is no longer closed then the blocks stop moving but what I want is that I want the blocks to keep moving until specific angle before it stops moving and that angle is 90° so it rotate exactly one rotation all right so we can do that by using an if statement inside the move function so right now what we have is we have we say if the distance that we calculated between the mouse location and the center of the squares is less than a specific amount then rotate the angle right or increment the angle by 1° else so right now we're going to say if it's not less than this. Mouse I still want it to rotate but only if this. angle is more than zero and also less than 90 then I want it to continue to rotate else so if it rotates more than 90° already then I want to set this dot angle to zero all right let's try that all right so as you can see here the square sto moving after it rotates 90° looks really nice perfect but now if I don't move my mouse the square keeps rotating and that's not what I want what I want to do now is I want the square to stop rotating if the mouse doesn't move and to check whether the mouse is moving we can use another builin variables called P Mouse X and P Mouse Y which are the built and variables for the location of the mouse previously inside the draw function I'm going to print going to print P Mouse X and mouse X and then P Mouse y and mouse y all right so right now I'm moving my mouse and then I stop then I move my mouse then I stop all right so let's look at this so as you can see here when I move my mouse right you can see that the P Mouse X versus mouse X it's different because the location of the mouse X previously and the mouse X now are different but when I don't move my mouse then they're the same so we can calculate the difference between P Mouse X and mouse X and P Mouse Y and mouse y to see if I move my mouse all right let's delete this then go back to block. JS so inside the move function we're going to write a conditional statement that says if P Mouse x Mouse X is not equals to zero or P Mouse Yus Mouse Y is not equal to zero meaning that we're moving the mouse right then that's when I want to calculate this distance here so let's copy this part and put it inside all right so I'm also going to to declare the variable distance outside the if statement and then we can do this All right so now we also don't need this else statement anymore so we can just use another if statement here so basically what we have is that we will only check the distance if the mouse is moving right that's the first conditional statement second one is checking if the angle is more than zero or less than 90 meaning that if squares are already moving so how about let's comment so that we know so this one is if the mouse is moving check distance between Mouse location and center of square and then for this one is if squares are already moving or already rotating keep rotating until ankle equals to 90 all right it seems like I have an extra curly bracket no I didn't have enough okay let's try that all right it's not working the way that I want it to work right because it stopped stops before what did we forget so ah so we need to end this if statement before all right so this if statement of checking distance encapsulate this this part and then this is a new if statement so let's try that all right and now when the mouse is not moving then the squares are not rotating nice let's change the Aesthetics of how this look how about we make the size 10 let's make it small all right okay and then how about we change the background color to Black and then let's go to block. JS and then we are going to do the stroke color to be white and let's do no fill okay then actually I'm going to do the stroke color to to be this. C and I'm going to create a new variable here and set it to 255 for white and then let's go back to sketch. JS right now all the squares are right next to each other I actually wanted to have a slight gap between each one of them so I'm going to create a new variable called offset and let's set it to four and then if we go back to block. JS so instead of just drawing it at size let's do size minus offset all right and actually instead of 255 here I'm going to make it a little bit darker and now I want to change the color of the squares to White when the distance is less than this mouse so let's do this. C equals to 255 okay but then now it's like drawing on the canvas because even if the distance is not less than this mouse anymore it stays at 255 so we want to change that too and we can do that by inside this conditional we can decrement the color by how about let's do three all right and you also want to set it at 70 here when the angle is no longer satisfied this condition H you saw this right that it's like slightly black here we can fix that easily by saying that we only want to decrement by three only if this dot C is more than 70 let's try that all right that's better perfect okay and I'm going to make this mouse here to be smaller all right now instead of just drawing squares we're also going to draw a different shape or an X shape so inside here instead of just drawing rect here I'm going to use the function called line and the line function takes in a total of four arguments so it's the x and y coordinate of the two points that will connect to become a line all right so I'm also going to comment out the rotate function so it doesn't rotate what if we draw it from 0 comma 0 to size comma size all right can you see this it's a little bit hard to see so let's go back to sketch. JS and let's make columns to let's just do one by one and make size to be 100 actually let's do 4x4 so you can see here that because when we draw the rectangle we need to move it out by a margin of size divided by two because when we draw the rectangle using the rect mode everything is from the middle point of the squares so now we also want to move this back by negative size / by to so if we go back to block we can do that by how about we create a variable called margin and then set it to negative size / two and I can do margin here margin here and then we want to add margin to this too all right so now everything moves where we want it to move but we ALS Al want to add the offset we want it to move it slightly to the right and slightly down by half of the offset so we can do margin plus offset / two for the first two argument so for the third and the fourth arguments we want to subtract the offset by the same amount all right you can't really see it's quite small but that is working all right so now we want a new line that goes the other way so it's going to be so let's start simple so it's going to be what size zero and then zero size okay and then now we want to First add the margin right so we want to move everything to the left and up okay and then now we need to work with the offset so for the first one we need to subtract by offset divided by two and then plus offset ID by two for the Y variable and then for the third one we need to add by offset divided by two and and then we need to subtract by offset / two okay let me change the offset here to how about I do 40 so you can see that it's actually is working all right okay so if we go back to block. JS again I'm going to put this whole thing here inside a new method and let's call it draw X all right and then I'm going to do the same one same thing for rectangle so draw rect and I'm going to move the set of code here here okay so now when we want to call a method within a class all we have to do is we just put the name of that method so draw X right and we just need to put the word this dot we get what we have here if we go back to sketch. JS and then just make we don't need to set 4x4 here anymore set the offset to four and then the size back to 10 and then uncomment this all right so now we have a different shape why did I make two shapes basically this tutorial is inspired by this website here called any pixel which is a project by Google creative lab and open source software and Hardware library to make interactive display but as you can see here they have a really cool interactive display which is exactly what we're trying to do and they have two shapes they have the X shape and then they have the square shape so that's what we're going to do for the last step all we need to do actually is come this part here inside the display method and we're going to write a conditional statement that say if this do angle is more than zero and this do angle is less than I'm going to do 45 then I want to draw the squares else then draw X let's see what happens so now it's all X because this dot angle is equals to zero right initially then now you see that we get a mix of two shapes this is my take on making an interactive display with rotating blocks what if you create your own version by creating different shapes maybe change the colors or even maybe change the speed at which things rotate give it a try welcome to another coating tutorial and in today's video I'm going to show you how to make this rotating circles using the concept of oscillation what you we see here is a set of smaller white circles in a shape of a bigger Circle that is traveling in an even bigger circle's circular path but that is not actually what is happening these smaller white circles are actually traveling independently of each other in an oscillating motion along a straight line first let's start by drawing the biggest circle so I'm going to use a function called ellipse and ellipse takes in a total of four arguments the first two are the X and Y coordinates of the center of the circle and then the third and the fourth are the width and the height of the circle so I want the circle to be in the middle of my canvas so we're going to put width / two and height divided by two here and then let's do the size to be 300 by 300 so actually instead of putting width ided two and height divided by two here I want to translate or I want to move the origin point from the top left corner of my canvas to the Middle Point here so I can do that by using a transl function and then put in the two arguments as the new origin point so let's do width / two and height / two and once we move the origin point we can put in 0 comma 0 here all right so everything is still the same next I want to draw a smaller Circle and this smaller circle is going to travel along the circle path here so we need to figure out what are the X and Y location of this smaller Circle and we can do that by using the rules of trigonometry you can watch my video on how we convert from Polar coordinates to cartisian coordinates but essentially we need two equations and these two equations are X = to R * cosine of angle and y = r Time s of angle so let's us also declare X and Y variables as well as angle let's set angle to zero and also how about we also do radius = to 150 and then instead of putting 300 here let's do R * 2 and R * 2 and do not forget to draw this smaller Circle so let's do it at X and Y and then give it a size of 20 a few tweaks so I'm going to put this after and then I'm going to not color the big circle and I want the smaller Circle to be the color red and also I am going to use the angle mode degrees so I'm going to also write a function called angle mode and put in degrees here so right now this red circle is not traveling anywhere it's a stuck at angle equals to zero so let's move it we're going to move it based on the location of the mouse we can map using the equation called map and we're going to map what we're going to map the mouse X location from zero to width to the degrees of 0 to 360 all right so now it's traveling in the clockwise Direction along this circular path now I'm going to draw two more circles and these two circles one is going to follow the X location of the red circle and the other one is going to follow the Y location of the red circle so we can do that by calling the illust function again and instead of putting X comma y we're going to do X comma 0 Let's do the same size then the second one is going to be 0a y same size and let's give it a color how about white all right so right now one is following the X location of the red circle and the other one is following the Y location of the red circle you can see that it's traveling what along a straight line right along the X and Y AIS how about we draw the axis out as well so we can use a function called line and line takes in a total of four arguments the X and Y coordinates of the first point and the x and y coordinate of the second point where these two points are connected to make a line so let's do the xaxis first so it's going to be R comma 0 and R comma 0 all right and then another one will be 0 comma R and 0 comma r and what these two white circles are doing is that it is traveling in an oscillating motion right around a center point which is the origin point and this oscillating motion is called a simple harmonic motion which can be represented by the sign and the cosine function which is exactly what these two locations are right because X = to R * cosine of angle and y = to R * s of angle what we're going to do next is that we're going to draw another set of X and Y AIS but we're going to rotate it counterclockwise by 45° so let's copy these two lines of code and use a rotate function and we're going to rotate by 45° counterclockwise and that's why I need to put 45 here all right so let's give it a different color so we can see so let's do blue for the Y AIS and green for the xaxis and then we need to also reset it back to black here all right let's try this and I'm also going to comment this out first all right so now we shift so if we don't shift it at all right so we can see that the X AIS is blue and then the Y AIS is green and now we shift it by 45° now what if we want to draw two more of these white circles have them travel along this new axis but still follow the location of the red circle what if we start by declaring two more variables the new X and Y coordinates so let's do X2 equals to and we're going to just set it equals to the same equation first and let's see what happens so Y2 = to R * s of angle and then we're going to draw it out as well so we're going to draw the exact same thing as this but we're going to replace it by X2 and Y2 and then let's give it the same color of white angle all right so and then we're going to have it move okay so this is not exactly what we want right because right now everything is shifted by 45° meaning that at angle equals to Z the x coordinate is at equals to one right and then the y coordinate is equals to zero which is exactly the same thing as what it is on the main axis so we need to change something in these two equations such that the circles are following the X and Y locations of the red circle right so what we want is that let's change this to 45 and comment this out again so at angle equals to 45 the locations of these two circles need to be shifted a little bit right so we want actually this circle to be equals to one and we want the circle to be equals to zero what that means is in terms of X and Y as a function of angle we want Y at angle = to 45 to have a value of 1 and X at angle equal to 45 to have a value of zero if you look at the sign and the cosine graphs here as a function of angle y = to 1 and X = to 0 when angle equals to 90 so we need to tweak these two equations such that inside the parentheses it equals to 90 when we give an argument of 45 and we can do that by adding the shifting angle or in this case 45 inside the parentheses so now y of angle equal to S of angle + 45 and X of angle equals to cosine of angle + 45 so let's first declare a new variable let's call it shifting angle and set it to 45 and then our angle will be at zero right and then we need to add shifting angle here all right so all right so add angle equals to 45 right and this is what happens now we can start adding more access so let's first we don't need this green and blue stroke colors any anymore we want everything to be black so instead of declaring the shifting angle as a variable that is set to 45 we're going to make it an array so we're going to change it to an array and then we're going to declare another variable called num axis and this is going to be a variable that controls the number of axis that we want so let's start with two so two will be what we have right now right so the main axis and then another one that is shifted 45° and then in the setup function we're going to calculate the shifting angles based on the number of axis that we want so let's use a four Loop so four let I equal to Zer I less than num of axis I ++ and then the shifting angle of I will be equals to so the equation that we're going to use is going to be I * 90 / num of axis so let's try to understand this so if we only have this one axis which is the main axis I will be equal to 0 right so 0 * 90 / number of axes will be equals to zero meaning that we're not shifting it anywhere and now we want the second axis to be shifted 45° right so if I = to 1 and then 1 / 2 right is 1 and 1/2 1/2 * 90 is 45 so now that we changed the shifting angle from a variable to an array we also need to change the X2 and Y2 variables to an array as well so let's start by declaring X2 and Y2 as an array and we are going to use the for loop as well to populate the X2 and Y2 array so let's do for let I equal to z i less than the num X I ++ and then we're going to copy these two lines of code in here it's going to be X2 of i = r * cosine of angle plus shifting angle of I right and then Y 2 of I = to R * s of angle plus shifting angle of i as well and now we're going to draw the two smaller white circles based on the X2 and Y2 location so so we have it here already so how about we just first we need to move this down here and then we want to copy the set of code and then put it in here so what do we have here so now we have calculated the X2 and Y2 locations of the smaller white circles we want to rotated by negative of the shifting angle of I right and then we also need to put X2 of I here and then Y 2 of I let's try this all right so now it's still the same we can clean this up a little bit more too because right now we also have this set of codes that draw the main axis and the main two smaller circles which now it's just a repeated of what we have in here so let's delete this all right and now all we have to do is that we need to change the number of the axis here so let's do three ooh what's going on here all right don't freak out the thing that is going on here is that we forgot to put in two functions that are very important when we do transformation which is push and pop so let's put it here push and pop and essentially the push and pop function push save the transformation and then pop returns it back to the original state that we are in and we need to put these two functions every time we call a new Circle because we want to save the new transformation which is the rotating of Shifting angle right and then we want to return it back before we rotate it again so let's try this all righty and now all we have to do is we just play around with the number of axis that we want okay and so now instead of having it mapped to our Mouse location what if we just increment it by one all right the last piece which is the fun piece is how do we beautify this I am going to change the color of my background to this turquoise color and then I'm going to change the color of my main Circle to be black and then how about let's give the stroke white color and let's do transparency to be 100 so it's not very very bright and yeah let's just do that and this is just like the original image that I had sh on you um and then let's do let's give it just a huge number of axes here and there you go and this is just using the concept of oscillation where the circles just travel back and forth on a straight path and it gives this illusion that it's travel in a circular motion which is really cool so give it a try welcome to another coding tutorial and in today's video I'm going to show you how to make this kinetic typography made out of a bunch of Cubes we're going to start by learning how to make this one Cube so first we need to come to this create canvas function and we need to add in the third argument webgl and this will allow us to render things in 3D mode all right so I'm going to start by drawing a box and we can use a function called box and the argument that I'm going to put in is going to be the argument for the size so let's 50 two things that I want you to notice so first usually when we draw in the 2D mode the origin is at the top left corner of the canvas right but now it is at the middle of the canvas so this point right here is actually 0 comma 0 the second thing is that you only see a square but actually it is a box or a cube but the reason that you only see a square is because you only see the front facing side of the square the next thing that I want to do is I want to use the rotate function to show you that it is actually a cube and we're going to declare a variable called X and I'm going to Map X to my mouse location between zero and the width and we're going to map it to 0 to 360° so because I'm using the degrees mode in the setup function I also need to change the angle mode from radians to degrees all right then I'm going to put in X as the argument to the rotate X function so now as I move through here you can see that the box is rotated along the xaxis right all right what if we change to rotate y so now it's rotating around the Y AIS all right how about the Z axis AIS so this axis is the axis that goes through our screen right all right and what if we do it all at the same time so rotate X rotate Y and rotate Z all right so now you can actually see that it is a box and not just a square now let's draw another box but instead of having it at the origin how about we move it slightly I'm going to use a translate function and I'm going to translate it by how about 50 to the right and 50 down and then I'm going to draw a box of the same size 50 so how about we fill the first box red and then the second box white all right so as you might have guessed the box is now moved 50 to the right and then 50 down right one thing to notice you can see that it is a box you can see the second and the third sides of the Box whereas if you were to draw it at the origin you cannot see that what if we do the same thing and I'm going to use another translate function and I'm going to translate it to the left 50 and then up by 50 why do we only see two boxes now instead of three and it is because we forget the two main functions when we do Transformations which is push and pop push is the function that saves the Transformations that you do while pop restores it back to the original settings the reason that you only see two cubes right now is because we draw this red box right and then we draw the first white box but we moved it 50 to the right and then 50 down from the original point and so we have this box here but because we didn't use the push or the pop function we translate it again on top of this first translation we say move to the left by 50 pixels and then move it up by 50 pixels so it moves from this settings here to the left and then up and then we draw this other box and so this third box is actually on top of the red box that we drew initially but actually what we want to do is that we want to translate this box from the original point so we want to use the push function here and then the pop function here such that before we call this translate function we go back to the original setting which is the origins at the center of the canvas so if we click run now we have this third box here and the reason that now these two boxes are both red it's because I put this fill inside the push so it restores it back and now the third box is using the field function of the first box so if I were to put this here we get two white boxes and then one red one which is this top one now we want to draw rows and Columns of boxes so essentially we're going to be using these set of functions over and over again inside a nested for Loop let's start by writing the outer for Loop so let I equal to zero I let's then let's do how about 2 I ++ and then four let J equal to Z J less than 2 j++ so we're going to do 2 by two boxes all right then I'm going to copy this line of code put it in here then I'm going to delete this and before I move forward I'm going to declare a new variable called size and I'm going to set size to 50 so that I can put in size here instead of hard coding the number 50 but we don't want to translate everything everything by size right if we do that we only have one box because all the boxes all four boxes are at the same location we want to multiply I * size here and then J * size so we have four boxes and because we put this red here we don't see it let's put it after let's say that we declare rows equals to two and columns equals to two right and then we can replace this by columns and rows let's do the same thing and now we want to change it by let's do 10 by 10 now it's off the screen so what we want to do is that we want to shift everything to the left and up but by how much so if you look at it right now right there are how many here 1 2 3 4 4 and A2 1 2 3 4 4 and A2 so we actually want a total of 10 so we're going to shift it by how about five so five boxes time the size so let's try that so if we subtract it by size times the number of columns and then subtract by size times the number of rows oh it has to be because columns is now 10 x 10 right right so we actually want just five so divide by two here divide by two here our canvas is a little bit too small for the size that we set so what if we do 600 by 600 all right so you can see that it's a little bit off centered so actually to have the same margin for everything we want to add size / by two here as an offset okay so now we're smacked in the center I'm going to change it back to 400 but I'm going to change the size here how about 6x6 and if you want it to fit the size of the canvas perfectly instead of giving it the number of rows and calls here we can also just calculate the number of rolls and calls in the setup based on the width and the height right so we could do calls equals to width / by size and rows equals to height / by size perfect next we're going to create a box class and inside the Box class we're going to be drawing each of the boxes based on the code that we just wrote so let's come here and then we're going to click the plus sign and then click create file I'm going to name my file box. JS and before we start writing a class let's go to index.html file and come down to this line copy and then we're going to change the name from sketch to whatever the name of the new Javascript file that we created so in my case it's box. JS and this is a way for us to integrate this file into our program now let's go back to box. JS we're going to start writing a class so start with the word class and we're going to name the class box inside the Constructor function we're going to give it two parameters X and Y then I'm going to set this xals to X and then this y equals to Y and then we're going to write a method called display and display is going to have functions that we just wrote let's go back to sketch. JS they're going to be these ones here all right so we're filling the box to be color white and then we have the push function the pop function here then inside we want to translate it by a certain amount but instead of having these numbers here because this is part of the nested for loop we're going to put this.x and this.y now let's try to just create one box so let B and then inside the setup function B is a new box and let's start by putting it in the middle of the canvas so it's not going to be width divided by two or height divided by two right because now our origin is at the middle of the canvas so we're providing Z comma Z as the arguments and then let's comment all of this out we're going to call the display Method All right but we don't want to just create one box we want to to create a bunch of boxes right and we're going to use a n four Loop here so four let I equal to zero I less than the number of columns I ++ and then four let J equal to Zer J less than rows j++ now we're going to populate this box array we're going to make it into a 2d array so inside the outer array we need to populate it with empty 1D arrays and then inside this inner loop we're going to create new box objects right inside this box here we need to put in two arguments right which are the X and Y location of the center of the box and as we have already done it it's going to be at this location right so we just fill these in here and then now inside here we also don't need any of this anymore because we already wrote the method display Tada all right so now we have a bunch of boxes we can delete this too next I actually want to tweak the display method a little bit so I'm going to tweak the display function a little bit by putting in a different argument here so instead of just putting size I'm going to do size minus 1/3 of size to give a little bit of a space between each of the boxes and then I want to put in two more arguments actually we can do three up to you but let's just do two which is the rotate function right I'm going to do rotate X and rotate Y how about that let's just declare the variable X again and have it map to the mouse location then I'm going to put it in here all right so now we have a function that rotates each of the boxes but just be careful so the order of the transformation functions really matter so if you were to put these two functions before translate it does a completely different thing right now we need to figure out how to draw the h letter that you saw that was moving up and down we're going to use a function called text to points to get the outline of the text that we want or the letter H to do that we need to first come here and I'm going to create a new folder I'm going to call it fonts and then you're going to click this Arrow here and you're going to click upload file and this is where you're going to drag and drop your font file in here once your file is uploaded then you want to use a function called preload and this function will allow you to preload the fonts into your program and you also need to create a new variable call font and we're going to set this font to another function called load font and then inside this parentheses this is where you're going to tell your program where your font file is and in my case it's in the folder called fonts and my file is called Roboto db. ttf so that's exactly what I'm going to put in and you need the quotation mark here you're going to put in funds back slash robo to bold.ttf all right and then you want to click play just to make sure that there is no error for my there's none now we're going to use a function called text to points to get an array of points that outline the text that we want so let's declare a few variables the first one is how about MSG for message and I'm going to set that to the letter H then I'm going to create an array called points and this is where I'm going to keep the array of of points that is returned from the text to points function and then three more that I want to declare one is font X font Y and then font size and these are I'm going to set this to 400 and these are the X and Y location of the bounding box of the text and it's the bottom left corner of that bounding box and then font size is the size of the font so let's set this to zero and zero first and then we can adust accordingly all right and then we're going to set points to the text to points function but we need to put in font which is this variable here Dot and then text two points and then inside the text to points function you are required to put in three arguments so the text that you want the array of points and then the X and Y coordinates of the bottom left corner of the bounding box so we have it at as font X and font Y and the fourth and the fifth are optional but we're going to put in the fourth which is the font size okay now if you click play nothing happens because we haven't used any data within the points array yet so how about we come to the draw function here and then let's use a for Loop to go through the points array and I want to draw ellipse on all of the points that makes up the letter H so points of I dox and point of I doy and then let's set it to the size of 10 and how about we fill it the color red okay actually let's stop it from moving for now okay go back to sketch because we put font X and font Y at 0a 0 that's why the letter is at the top right corner right so we want to move it how about we move it a little bit to the left let's do how about 120 um that looks pretty good maybe 130 130 and then let's move it down so down for the Y AIS is positive right so how about 100 a little bit more maybe a little bit more that looks pretty good but we don't actually want to draw out all the points here right we don't want these red ellipses what we want is that we want our cubes to have the shape of the letter H all we need to do is that we need to find the distance between each of the cubes each of the location X and Y of the cubes to the points that are along this shape here and if it's is at a specific distance then we say that hey that is part of the H outline so what we're going to do is we're going to come here I'm going to comment all of this out inside this nested 4 Loop we actually need one more Loop so we're going to go through actually it's going to be K now and this K is going to go through from k equal to Zer to k equals to points. length so the length of the points array and I'm going to declare a new variable called distance here and distance is going to be a calculation between the distance of the what the points right points of K dox and points of K doy and the boxes right boxes X and boxes Y and this function here called This D is a builtin function within p5js that calculates the distance between two points and it takes in a total four arguments so two XY coordinates which we have given here then we want to say if this Den is less than let's do 10 then we want to set boxes of I and J dot is letter which we not created in the class yet so we're going to do that next to true so if the distance between the outline and the box is less than a specific amount in this case 10 then we're going to say that it is a letter it's part of the letter and else then boxes of I and J is letter is going to be false all right so now we're going to go back to box. JS and we're going to create a new actually we don't don't need this we just say this dot is letter and we're going to start it as false right and then in display now let's click play to make sure there's no errors there's none all right so in display what we're going to do is that we're going to write a conditional statement that says if this do is letter is true then let's fill it with the color how about blue and else then fill it at as white and something's wrong what I did wrong is that I put in this additional conditional statement so I guess it's because there are some points that we go through within this third inner loop second inner loop right that there's a point where the distance will not be less than 10 so it just reset the boxes of I and J do is letter to fall so we don't want that so if there is only just one point that has the distance of less than 10 already then set it to true so if we do this then we got something here all right so I'm going to actually uncomment this out so you can see an outline of this h letter you can see that actually only some of the boxes are blue right but we now can play around with this number here to get the outline that we want so it seems like from here to this point here it just doesn't match it enough that like these boxes will turn blue so you also want to play around with maybe this number here too all right so now it has the letter H that I want so now I'm going to comment this out actually I can just yeah comment it out now let's go back back to box. JS we were able to move the boxes using the rotate function already so we don't actually want to map the X location here right but we want a new variable and let's call it angle and set it equals to zero as the initial value and inside here let's use that as the argument right and then so now what if we just rotate the boxes that are part of the letter H so we just do this do angle plus equals to 1 all right and then we can do the same thing to the rest of the boxes but what if we rotate to in a different direction that looks pretty cool all right the last piece I want to show you is the depth so let's declare a new variable called depth and then I'm going to set it to zero this translate function we only translate in the X and Y Direction right now if I were to give it the third argument which is the Z Direction so if I put it at zero right nothing happens but what if I set the variable Z and map it to 0 to actually Mouse x 0 to with and then 0 to 100 then I'm actually going to comment this out for now let's look at this oh I need to set this here do you see that it's moving in and out right so I'm going to use this third argument here in the translate function to move the letter H to move the cubes that are part of the letter H up and down we don't need this I'm going to uncomment these two and I'm going to use this Z this third argument and I'm going to put this. death and I'm going to say that that if it is part of the letter then this dodeth is going to be equal to what I actually want it to move up and down in an oscillating motion to get the oscillating motion I need to use a simple harmonic motion equation which essentially is the sign or the cosine function so I'm going to set this. depth to be equals to this. Def plus let's do how about sign of and then I'm going to just say to this do angle because this angle is already incrementing by one and instead of doing this do dep equal to this do depth plus something I can just do plus equals right same thing as this we don't need this plus here and let's try this do you see that it's moving up and then it's going down but because the output of the sign function or the cosine function ranges between this 1 to 1 and that's why you can see that this oscillating motion is you can't really see it that much so we can change the amplitude to get a bigger motion so how about we multiplied it by five all right so that is a lot so you can play around with this variable as well to get the image that I had initially I need to change some of the appearance a little bit so here I'm going to change the stroke to White and with a transparency of 100 but if and then we want it to be no fill and then if it is part of a letter then the color will be white and we also want the sketch file here then inside the background we want that blueish color so 0 comma 0a 139 let's try this all right this is a great tutorial that combines a lot of different concepts steps including how to draw things in 3D how to use the text points function to get an outline of the text how to map that into the shapes that you want and how to use the sign or the cosine function to get the oscillating motion so I hope that this Sparks a lot of your ideas give this one a try welcome to another coding tutorial and in today's video I'm going to show you how to make these hypnotic flowers let's start by creating this one Circle first we're going to to draw out a circle using a set of points so I'm going to declare two arrays one called X and one called Y and these are going to be the two arrays that store our X and Y locations of each of the points and then the third variable is going to be called points and these are going to be the number of points that we're going to create to make up a circle so let's start with 10 inside the draw a function I'm going to write a for loop from let I equal to zero I less than the number of points i++ I'm going to use the concept of trigonometry to convert from Polar coordinates to cartisian coordinates and I've made a video that explains this whole concept so if you want to get a better understanding be sure to check that out so essentially we're going to set X to be equals to R * cosine of angle and y to be equals to R * s of angle now we're going to set R to be equals to how about 100 so this is going to be the radius of this circle and we also want to set what angle is going to be we want to set angles to be I / by the number of points * 360 so this is going to allow us to evenly space the points all right let's try that oh see let me so we need to draw something too right so we're going to set each of these points inside the function called vertex so vertex allows us to draw points so this is going to be X of I and Y of I and if you click play right now you don't see anything because to use the vertex function we need to use two additional function called begin shape and in shape right so these two functions tells us that hey we're about to draw a shape using these points these sets of points and then after we draw all of these inside the for Loop then end the shape so let's run so first let's move everything to the center of the canvas so we're going to use the origin point from the top left corner to the Middle Point here so translated to width / two and height ided by two perfect and you see this whole thing that is not a circle and that is because we're using angle between 0° to 360° and that is in the degrees mode so we need to also set the angle mode to decre all right so now two things that I want to tweak one is I want to also set no fill for this and as you can see the first and the last Point are not connected and to connect them we just have to put in an argument called close in the N Shape function all right so as you can see here it's not really a circle right and that is because the number of points that we use right now maybe is too small which is 10 so what if we do 100 that's a better Circle next to make it look like a flower what we're going to do is that we're going to change the radius here right now the radius is set at 100 so we don't want it to be 100 throughout this whole circle so what we're going to do is that we're going to add how about we declare this variable as flower radius and we also need a print C's around here and I'm going to copy and paste this for the Y part all right and then let's set flower radius to how about 50 and if we were to run this it just make the circle bigger and that is because the flower radius here has a constant value and that's not what we want we want to vary this value here flower radius in a wavy pattern so what we can do is that we can set this to an array and then inside the for loop we're going to say f underscore Radius = 2 and we're going to use aign or a cosine function to get that wavy pattern how about we set the amplitude to 10 then multiply by let's do how about cosigned and then just do angle it's the same angle as this one here and then let's run what you see here is still just a circle right but actually let me show you something so we're going to set the stroke here to the color red and then this next one I'm going to set it to Black so basically I'm going to show you two sets of circles one with the fcor radius and one without and as you can see here if I were to draw an ellipse at the center of the canvas you can see that our new Circle basically just shift to the right right by adding this fcor radius at a specific cosine function it just move it to the right but it didn't do the flower pattern that we want and that is because we're only just drawing one period so this equation outputs the number between 10 and 10 so what we can do is that what if we set period right and then we'll multiply the period here and right now the period is one so we have the same thing but what if we do two period all right what if we do three so the period is the number of times that we get the value between 1 and 10 because right now our amplitude is at 10 right so if we just keep increasing this we get a shape that looks more and more like a flower and I also want to set actually fcor M to be 10 so instead of just hard coding this number here all right and then we can change this to what if we do 15 so this is just depends on what you want your flower to look like all right so I'm going to delete these part out and then set this to Black so before we start making a bunch of these flowers let's figure out how to move this one flower so all we have to do actually is add a value here so if we add let's create a new variable let's call this variable how about rotate and rotate starts at zero actually I might not be able to use the word rotate let's just do rod I think it might be okay let's do rotate and then outside of this in shape function we're going to rotate it by a specific speed let's do one all right use this change Val rotate so I think we cannot use the variable called rotate so let's just do r o oh I think I can cannot do rotate because okay I just want to see all right so I could use the variable called rotate and that rotate is going to be the variable that we increment one degree at a time to get this rotation that you see here perfect now we can make a bunch of flowers let's start by creating a class called flower so you come here click a plus sign click create file and then let's call it flower. Js before we start writing a class let's go to index.html and then copy and paste this line of code change the name of this file to whatever the name of the file that you just created in my case flower. JS and this is how you integrate a new Javascript file into your program all right let's go back to flower. JS we're going to start writing a class called flower we're going to have a Constructor function and we're going to have function called display so we can go back to sketch. JS and then we can copy this whole thing up to here all right come to flower. JS and then paste it inside display inside the Constructor function I'm going to declare the X and the Y arrays right and then let's put this X and this y here and then we're going to declare f radius right which begins at zero and and then we're going to have F of amp let's set it to how about 10 so we can do this this. F radius this. F of mamp also this do r or the radius of the circle right actually I'm going to set all of these as arguments or parameters inside the Constructor function so F radius actually this one I don't need F of amp the reason I don't need this is because it's being calculated here and then I also need period which is going to also be the prator here so we'll have R we have F of M and then we have f f period right then for this F of radius we're going to initialize it at zero and then I want to also set one more thing which is the speed here let's do this. speed and that's going to be another parameter also all right so we have X and Y and then R so these are the initial Circle we have these variables for the flowers and then this is also for the flowers and then we have the speed that moves the whole flower all right let's try going back to our sketch. JS actually we can also set points here too so this do point is going to be another parameter so here okay so now if we go back here we can erase all of this all of that actually everything all right and then I'm going to just draw one flower I'm going to call it f and then f is going to be a new flower right then let's go back here so we need what so I'm going to copy and paste this so we need R so let's set R to 100 the number of points also 100 the amplitude of the flower we set it to 15 period how about seven and then speed let's just do one and then we're going to display the flower okay so we need this do points here this start points here let's try that period okay okay actually I cannot use the word or the variable called rotate so actually let's just use rot how about that and set rot initially to zero R is not defined so okay so now we have an additional variable call this do rot for the rotation of the flower perfect so now flower is moving all right now let's make a bunch of flowers so I'm going to change from F to flowers and it's going to be an array and then I'm going to create another variable called num and this is going to be the number of flowers that we want to create how about we start with this five that sounds like a good number so let I equal to z i less than n i++ so we're going to create a total of five flower objects right so we can just copy and paste this then flowers of I is going to be a new flower object we want the radius to be the same the number of points to be the same 15 is 15 is what amplitude is still okay period can be the same speed can be the same actually the radius should not be the same right because if we give the radius to be the same for all flowers that's the radius of the initial Circle then let's see what's going to happen you just see one Circle that's not what we want what we want is how about we subtract it by I * 10 so each of the other flowers will be or will have smaller and smaller radius that looks good maybe we start with how about 140 so it's a bit bigger okay okay okay all right so now comes the trick which is how do we get that hypnotic look so what we need to do is we come back to flowers and we're going to instead of doing no fill we're going to fill it with the color white nothing happens yet just wait for it so we do no fill H um not no fill I mean no stroke looks like this one flower but now I'm going to use a function called blend mode and the argument that I'm going to give is called difference blend modes is a function that blends the pixels in the display window according to the defined mode and the mode I'm using is called difference and difference subtract colors from the underlying image 2D so we're not going to go into details of this blend mode right now but by using this different mode it gives us that hypnotic look so just be warned what I'm about to run might give you a little bit of a headache so close your eyes for maybe 5 seconds if you don't want to see that 1 2 3 all right and that is because we need to put in two functions push and pop and by putting and push and pop it clears out all of that craziness that you just saw all right so now that we have this I'm going to go back to sketch. JS and a few things that we need to tweak to get the final result so first I want to set my background to Black all right I also want to set the speed instead of a constant one I want to change it to be based on which flower it is so I can do I times maybe a constant of 10 no actually let's just do 0 point let's just do one so as you can see here the biggest flower doesn't move and that is because when I equals z i * 1 is zero so the speed is zero and so it doesn't move so we can change it by do I + 1 and so a the flower actually moves but at a different speed but it's going a little bit too fast to my liking so I'm going to change it to how about 0.1 that's a bit better I like that better I also want to change the number of flowers to 15 and there you go so this is the hypnotic flowers that you saw at the beginning of the video and it looks really neat but before I end this video I want to show you another cool trick so instead of having all the flowers move in the same direction I'm going to write an if statement and I'm going to use an expression called I mod 2 = Z so mod is an expression that checks whether I / by number of two how many remainders is left for example if I is 3 I / 2 has a remainder of one right that means it's an odd number but if I equals to let's say 4 4 / 2 is 2 and there's no remainder that means it's an even number so the answer is zero so this expression checks if it is an even number and if it is then we're going to declare flowers the same way that we just did but if not if it's an odd number I want to instead of incrementing the speed in the clockwise Direction I'm going to change it to a counterclockwise Direction and this is what happens looks really cool so this is when you finish a piece and then you just kind of play around with different variables and sometimes you get this unexpected result that is really cool I love this piece because it's using very fundamental concepts of how to convert from Polar corn to cartisian coordinates to draw points and how to use the sign and cosine function to create the wavy pattern of the flowers and when you put these concept together you can create some really cool stuff so give this one a try welcome to another coding tutorial and in today's video will'll be making this generative art piece inspired by the artist Pete mandrian let's start by drawing a rectangle so we can use a function called rect which takes in a total of four arguments the first two are the X and Y coordinates of the top left corner of the rectangle and then the third and the fourth are the width and height so I'm going to draw it at the origin point and then I'm going to give it a width and a height so let's also declare width to be 100 and then height to be I want it to be twice the size of the width so 200 all right and now I also want to draw a line and this line is going to go from the top left corner here to the bottom right corner corner here so the line function takes in a total four arguments the first two are the X and Y coordinates of the first point and then the last two are the X and Y coordinates of the second point and these two points are the points that we're going to connect a line so I want to connect from the top left corner Point here to the bottom right corner Point here so it's going to be from 0 comma 0 and coincidentally it's going to be W comma H all right but actually if we were to move the rectangle to 10 comma 10 here now if we do 10 comma 10 now you see that this line doesn't actually touch the bottom right so what we need is that we need 10 + W and 10 + H because the rec function takes in the first two points and then the width and the height so the width and the height depends on the first two point but the line function takes in the first point and the second point so you need to make sure that you need to set the offset which is the 10 comma 10 here in the third and the fourth argument too now I want to draw a 2X two set of rectangles so I'm going to start by declaring columns and set it to two and then declare rows and set it to two and I'm going to write a nested for Loop now I just need to put this function inside here and then I need to change the first two arguments here it's going to be I * the width and then J * the height same thing as for a line it will be I * W and J * H but then here we also need to do I * W + W and J * H + h perfect so now we figure out how to draw a line that goes from the top left corner to the bottom right now to draw a line that goes from the top right corner to the bottom left all we need to do is let's copy this line of code for the first argument it will be I * w+ W and then J * H and then the third one which is the bottom left will be I * W and then J * H + H so I'm going to comment this one out perfect I'm also now going to set the width to 50 and then the height to 100 and then let's do columns to be eight and then rows to be four but instead of having lines that go in the same direction I want the even rows to have lines that goes from the top left corner to the bottom right corner while the odd rows to have lines that go from the top right corner to the bottom left corner so I need to write conditional statement so if so what should be my condition my condition is going to be J mod 2 = Z so if you're not familiar with this expression this is an expression that's called modulo and how it works is that it takes the first number here divided by the second number and then tells us what is the remainder of this calculation so for example if J which goes between zero and row minus one right if JS is z 0 / 2 is z no remainders so the answer is zero but let's say J = to 3 3 mod 2 or 3 / 2 has a remainder of one so this expression will give us a result of one so this expression here J mod 2al equals 0 is basically calculating whether this number J is an even number or an odd number because whenever you divide something by two if there's no remainder it's an even number and if there is a remainder of one then it's an odd number so this is how we tell whether this row is an even row or an odd row all right so for an even row I want the line to goes from the top left corner to the bottom right corner while if it's odd then I want it to go from the top right corner to the bottom left corner let's try that perfect now I want to put the code that we just wrote for each of the rectangle or a set of lines in a class and let's call that class how about cell. JS and then before we start writing let's go to index.html file then come to this line of code copy and then change the name here to the name of your new file and this is how we integrate a new Javascript file into our program let's go back to cell. JS start by declaring class call cell and then we're going to declare two methods Constructor and display and then I'm going to put this set of code here inside the display function and then instead of Constructor function we will be declaring a total of four parameters X and Y location of the top left corner of each of the cells and then the width and the height and then let's set that accordingly and then the last parameter that we want is row to tell whether it's an odd row or an even row and then inside theplay here instead of J we just put in this do row and then here we need to change all of these arguments right so it's going to be this.x the second one is this doy third is this do X plus this do W and then what is it this.y plus this.h right this is for the case when the row is even and so when the row is odd we want to change it to this.x plus this.w and then comma this.y for the first point and then the second point we don't need this withth here all right let's try this go back to sketch.jpg to comment this inant Loop out and then just do c. display just to make sure that our class works it actually should go from left to right right because we forgot the fifth argument and then we will put zero which is an even number so it went from left to right and then if we put in one it goes from right to left let's create an array called grid and this is going to be a 2d array and and we're going to create a nested for Loop inside the outer loop we need to First populate this empd array with a bunch of empty 1D arrays and then inside here we're going to put new cell objects inside this grid and instead of doing 0 comma 0 here we're going to do I * W comma J * H right and we're not going to put one here we're going to put J because J is telling us which row this cell is on perfect then now let's uncomment this we don't actually need the rectangle anymore now we just do grid of I and J Dot display but what we have here is that we have a bunch of cell objects that fill the entire canvas but what if we only want to fill a part of the canvas let's declare four more variables I'm going to call it starting column ending column and starting row and ending row and then going to copy this then how about we set this to let's do one then ending will be how about four Z and two and then instead of setting columns and rows here right we just need to change the beginning for I here to be starting column and this to be ending column and forj starting row and ending row here and then I'm just going to copy and paste this in our second nested for Loop let's play uhoh What's Happening Here No error but nothing is coming up oh I re declaring these variables and we cannot do that we already declared them here here so I didn't need the let in all of these all right let's run so now we have a set of cells that goes from the variables that we declared here but to make this piece generative we don't want to give it a constant here right we want to randomize these numbers so let's use a random function and the random function can take in arguments in multiple ways so one of the ways is to put in two arguments by putting in two arguments basically it's going to Output a random number a random floating or decimal number between the first and the two arguments but not including the second argument so it's going to go between zero to columns but not including the columns number and because we want to get an integer or a whole number we need to use the function called floor and this is going to turn whatever the output here into an integer and we want to do the same thing for all of these these will be rows instead okay and I'm going to also print these numbers so you can see all right so there is one flaw with what I'm doing right now so the first one is what if the random number is the same number right between the starting and the ending column so as you can see here there's nothing on the screen actually in this case there's another problem so as you can see here the starting row is at three and then the ending row is at two so how is that going to work it it doesn't work we want the starting row or the starting call to be the lower number and then the ending call or the ending row to be the larger number so actually let's fix that one first so I'm going to declare actually for variables let's call it a b c and d and then actually these variables will be the variables where we get the random number and then the starting column will be the minimum number or the lower number between a and b right so we can use the function Comm Min and it's going to return the lower number between the first argument and then the second argument and as you might have guessed for the larger number we can use a function called Max and we have to do that for the variable CND D here all right let's tried this okay so we haven't fixed this problem yet but as you can see the starting number is always lower than the second number now I'm actually going to write a function to do this let's call this function random length generator and it's going to to take in one argument which is the length so in this case it's going to be columns or rows and then let's copy and paste this in here okay so basically we just need the first set and then columns here will be length and we need to declare these two in order to fix a problem where we generate the same numbers we'll be using a loop a while loop specifically a do while loop and a do while loop is similar to a while loop but with a do while loop you execute the commands first and then you check the condition instead of checking the condition first and then you execute the commands so the syntax is do and then do what do the commands which is this right this is the command that we want to do and then while so basically first we want to declare A and B outside of the loop and then we want to execute this expression here where we Generate random numbers but then after we do this then we use the Y Loop to see whether these two numbers are the same or not so we will do a minus B but a minus B can be a negative number so I'm going to use a function called ABS or absolute to turn these numbers into a positive number and then we want to set it equals to zero right while the difference between these two number is equals to zero then keep going through this y Loop until it is no longer equals to zero which means it's not the same number now inside this function we also need to return the starting column and the ending column value right actually instead of doing it this way I'm going to declare a new variable and call it how about range and this range is going to be a vector object and a vector object is an object that can hold two values so I basically just wanted to hold the first one is going to be the starting call Value and then the second one is going to be the ending call Value right and we don't need this anymore then we're going to return the range okay let's come back here let's declare a new variable how about let column range to be equals to the function name is random length gen and then we need to put in columns here right and then we need another one which we'll call row range and then the arguments will be rows you don't need any of this anymore and then now let's print these so it's going to be call range and then we want the first value so we dox and then call range for the second value we doy same thing for row range dox and then row range doy and then before we click run I'm going to comment everything out so it doesn't give us any errors let's try that okay so it seems to be working perfect so now we can uncomment this and then instead of starting call it will be call range dox to car range doy and then row range dox and row range doy then we can just copy this for our second nested Loop let's try this car range is not defined ah because I Define these two variables inside the setup function it's not defined here so basically I just need to Define these two variables outside of the setup and the draw function so it's going to be called range and row range I don't know if you notice but it never goes to the last column or the last row you know why it's because we basically generate between Z and columns minus one right but right now we say hey the four Loop let's go from I equals to whatever that number is the smallest is zero but the largest is columns minus one right but this is less than it's not less than or equals to meaning that it will go from i = 0 to I equal to columns minus 2 so what we need is that we need to we want to add columns plus one here and row plus one here and there you go it goes to the last column and the last row now perfect now we can also set it smaller nice now we can generate one block of these cell objects but I want to generate a bunch of these blocks so what if we put it inside a class so let's do the same thing click create file let's call it block. JS then comes to index.html file again and do the same thing rename this to block all right let's go back to block. JS we're going to create a class called block then we're going to have two methods here which which is Constructor and display so inside the Constructor function what do we need let's go back to sketch. JS we will want this call range and row range let's start with that and then let's do this. call range this. row range and then this will be columns and rows which are Global variables so we don't need this dot random length gen is a function outside here I want it to be inside our class so let's copy this and then let's create a method called random range perfect and then this will be this. random range gen same as this so I have to put this dot here because in order to call a function or a method inside a class you need this dot all right so let's look look at this if there's anything we need to tweak yeah everything should be fine here all right so now for display let's go back we basically want to also create this grid inside our block. JS Constructor function so let's declare how about we call it a block and it's going to be a 2d array and then we're going to have a nested for a loop that goes from this. car range which we have declare here and then this is going to be this. block this. row range here right this is going to be this do block as well and then for the cell we can keep it the same right all of these are Global variables and then we basically need these nested for Loop inside our display function right and what do we want to display we want to call the display function so not to be confused this display function is the display function inside cell here so let's do actually let's do display cell so that it's not confusing because this block of I andj is a cell object and so we're calling display cell which is a method inside the cell object so let's go back to sketch.jpg run yay all right okay so how about we make multiple of these blocks so let's do blocks is an array and then let's also create num a new variable to indicate the number of blocks that we want to create and then now we're going to write a for Loop that goes from Zer to num now we're going to declare new block objects inside our blocks array and then we also need this for Loop to call the display function perfect okay now you can see that some of these width of each of the block blocks are kind of small these ones are two right this is one for aesthetic reasons you can change it you don't have to but I want to change it so basically inside the random length gen function instead of setting this conditional statement to be equals equals to zero I want it to be if it's less than let's do how about four so I want the width to be at least three so now you get a bigger Block in general so now let's work with the colors so I said that this piece is inspired by Pete mandrian because he has a very signature color which includes yellow blue red white and black and I have created those color palette already so let's declare a variable colors and colors is going to be the set set of arrays so it has a total of four colors here because I'm not including black and then inside the block object here I want to put in one extra argument C for color and then inside the display function let's do stroke set that to this do c go back to sketch. JS so if we were to put in let's do how about we do red first now everything turns red so we want to be able to call all of these colors based on the number of blocks that we have here so I want to show you one thing we can use a modulo function so let's do how about I comment this out first and let's do colors equals to a b and c if I do for let I equal z i less than let's do how about 10 I ++ so I want to print a total of 10 characters so let's do print and I want to loop around this colors array so what I would do is what if I just do colors of ey would that work let's try it so you can see here that the first three are printed and then the last seven are undefined so for us to be able to Loop through this array over and over again we can use a modulo function how do we do that so if we do I mod and then the length of this array so colors. length then we click run what do you see here we have total of 10 characters from ABC ABC ABC and then a and that is because we can Loop through the index values by using this expression so what is happening here is I goes from zero to 10 right so when Z divided by the length the length is three we get a remainder of zero right when 1 divided by 3 we get a remainder of one two we get a remainder of two but then when it comes back to three three mod 3 has no remainder so the index goes back to zero and so on right four mod 3 is 1 so it goes from 0 1 2 0 1 2 012 and so on and so on and so on so in order for us to be able to Loop through an array like this without getting an error like we saw earlier all we need to do is using the mod function here so that's what I'm going to do with the colors so I'm going to do colors of I mod colors. length and we don't need these characters we actually want the colors and there you go and we also how about not set a constant five number of blocks what if we do num to be equals to also a random number and I want it to be randomized between three to six not including six so it's going to be between three four or five we only have a few things left the first thing is let's go back to block. JS I also want the stroke weight to be be thicker I want it to be three yeah all right and with the pet mandrian kind of aesthetic each of his rectangles usually have a black border so to imitate that I'm going to set a conditional statement and this conditional statement is going to say if if what so if the columns is equals to this Dot call range. X or I is equals to this do calls range do y has to be minus one right which is the last one then I want to set stroke as black else stroke can be the color Tada that looks pretty good all right and then the last thing I want to do is I want to go back to sketch. JS and I actually just want to add a grid of cells that fill the entire canvas that we had at the beginning so let's just redo that grid and then we need a nested for a loop grid of I equals to Mt arrays and then grid of I and J will be the cells right so from I * W J * h w h and then J for the rows right then we can copy and paste this and we want it to be I want it to be underneath these blocks so I'm going to put it before this four Loop and then do display oh display cell all right and then I don't want these to be black although this looks kind of nice two let's do stroke to be how about let's do white and I want stroke weight to be a lot thinner at 0.5 nice all right so this is my take on generative piece inspired by Pete mandrian hopefully this gives you an idea of how to create a generative piece using a random function so create your own version and share it with us give it a try