hey guys my name is tiffany thank you for joining me you can't see me but i'm here i decided to do like a little intro to github how do i post a new project to github because i i realized a lot of people they're afraid to use the command line and then or the terminal and then they're also afraid to use get some as a new developer um and you definitely shouldn't be afraid to use it these are tools that are gonna make your life easier once you master them i'm going to be on my profile and then i'm going to go to repositories and remember this is just to get a new get this is just to get a new repository on your github page so when you click on it you are able to see the code and everything so this is the process that we're doing okay so i'm gonna go back to here go to repositories i'm gonna click new this part is fine to do on your um your interface it's fine i'm just gonna call this testing one two three okay and and you could put a description here um testing github repo it's almost a good idea to always do that as well as to initialize with a readme what this readme does is the readme is basically going to allow you the ability for others the ability to to read what's going on before they decide to um want to either make a fork or website or clone it or s or of the sort so the readme is important that's where you put the technologies that you're using that's what you use to give instructions to the user if there's additional instructions so i'm going to create a repository and now i have a repo well not really [Laughter] so what i have now is basically this um readme file that says testing one two three that's all it is and then here it has my description that i had okay so what we're going to do instead of doing these we're going to go through the command line and do this so what i am um going to do is i'm gonna clone this so i'm gonna copy this url so i can put it here so the command that we're gonna use is git clone and then paste the link and this is going to clone what we have so far inside of our repo that we're in in this case it's testing one two three so we're going to enter okay cool okay now clear this clearing just takes you back to the top now if i were to ls ls allows you to list the items that are in this particular folder and right now we have a folder inside of here called testing123 okay which is the exact name of our repository now if i wanted to i could have just created a folder on my desktop well i didn't have to really create a folder on my desktop and i always make that mistake of making a folder and then making and then cloning it and then here i have two folders in here but i don't really need it that's a common mistake and i still will sometimes make that mistake as you can tell so i'm going to just go into this testing123 so change directory on a mac it's cd and then if i ls again it should give me that readme file that i was looking for earlier so here is this readme file and if i wanted to open this readme file uh i can do yeah i'll just go the ad oldfashioned way add project folder and uh actually let's just use this one instead okay so from our desktop if we just go into this testing one two there should be a folder called testing123 we should be able to go into that and then if we ls it's going to show what's in this folder and it's just that readme file that's here okay so now i've lost my atom here it is so i want to use this one i'm going to open this one and you see when you open it inside of your text editor it has um like this little link here this is your github this means it's connected to github that's what that means and of course as your doc get files you can get ignored all those things and here's your readme file right so it has your description in it for right now um this is basically for uh future directions on how to use your app um also this is like i mentioned earlier earlier this is where you put the technologies used in app and i'm just writing this down so um hopefully it'll help you um and then also technology is used in app and then any like yeah general directions sometimes if it's a if it's something where you can participate in um like open source project they'll have like directions on how to um contribute to open source so i mean that's another thing that you can utilize this for so as you can see it also has changes highlighted off to the side depending on which text text editor you're using is going to depend on what color it is but these just means that these were added to here to this file i'm also going to add a new file and it's just going to be an html file i'm just going to go ahead and save it and as you can see i'm inside of this directory desktop 123 and then here is the app that i'm in so i'm just going to say test.html and everything tests okay so now we have a new file and then we also have some changes so if i go back to my command line and i do a git status i always recommend doing a get status whenever you're working with git especially if you get a little lost no pun intended it'll kind of tell you what to do in most cases and point you in the right direction so basically what this is telling me is that i have some changes here that i've modified i've got a new file that i've added but it's not in git right now so it's untracked um so it can't really tell me anything about it because i don't have it inside of my repo or my repository and then it says use get add and or get commit dash a and so it's basically telling you what you can do right and it also says at the top here use git add and then the file name and to update what will be committed okay so i'm going to do git add myself personally i do the period i do get add period and that adds all the files um usually if i'm at work and there is only one file or there's only one file that i want to be committed to this particular branch that i work in branches at work so if it's only one particular folder i want to add to this or one file i want to add to it then i'll just add that particular file so i would do something like uh this so i would copy it and then i'm just gonna paste it right and then you could do the same thing with this and then paste this as well so it's basically saying you want to add test html and readme.html and then if i enter i can do another get status okay now instead of red now instead of being in red like it was up here it's green which means hey we're almost there right so these are changes that need to be committed so if i go back over here and refresh it's still not going to show up here inside of my repo because they're not committed and they're definitely not pushed so if i do a git commit dash m always do dash m because that's the message that you're gonna put on github these messages are really important when you're when you're working in a group and they're also important when you have your own project because they're kind of like little reminders of what you did and and um to these files that you're in so it's very important uh i use i tell everybody like make your messages count because one day you're gonna go back and read them sometimes mine can get a little crazy especially while i'm working i'd like to make sure that i know what what these files are because a lot of times i'm doing like a feature that's inside of these files that i'm using or something like that or updates and i want to make sure that i'm keeping track of what i'm updating the whole point of github is so that you can track your changes and everything and i feel like if you're not tracking what you're actually doing like in an actual message if it doesn't make any sense then it's kind of you know ridiculous really because then i mean you can go back and look at the code or whatever but it makes more sense to go ahead and be like okay this is what i actually did in a message rather than reading through all the files so i added a test html file and updated readme with how to use it kind of vague but if i go back and look at this i'll know what i mean okay now it tells me that it tells me my message and it also signs it like an id number and it tells me that it's on master master is going to be the branch that you're on when you first create a new project when you first create a new repo in github this master is going to be what you're on if you want to have another branch which i definitely recommend doing and we'll go over then you'll want to create a new branch and then this will not say branch master it'll say branch whatever name that you call it here but that's for a later video for right now we just want our to get our project up and to do that we can use master and this is under the assumption that you're working on this project on your own and you haven't formulated inside of a group yet you just want your code on github okay so it told me that i've got two files changed and it tells me what has been inserted i haven't deleted anything from these files if i did it would have told me um deletions as well okay and then if we want to push this to our page because still if i refresh over here there's still nothing here it's like oh man it's still not there so if you do a get push origin master origin master is going to be the branch that we're on in this case like i mentioned we're on master so that's that's what we're gonna push to and if i enter it's gonna um work its magic which is basically pushing all of our data up there and it tells you kind of how long it takes and um what it's doing in the process which is cool so if i refresh i should see i should see my files and i do um you see i have my new updates here which it didn't really look how i thought it was going to look but hmm something to think about and then it has my html here that i had just made so that's how you do it if you're looking to push up your project to github this is pretty much the directions you need in order to do it if we want to recount what we did we basically created a new repo in our or repository in our interface which is over here and then we got the url we cloned it over here let's see i can't go up yes i can we cloned it here to our actual machine and then we went through the process of get status which i told you was a big one to use if you ever get lost um and then we basically after that we um we added our files we committed our files and then we pushed them and that's pretty much it any other changes you'll do the same thing you'll add them and then you could add each individual file if you want like i did here or you can do get ad a which you won't have to list them all out it will just add them off for you and then commit and push that's pretty much it so don't be afraid of the command line guys it's your friend trust me we're going to be working on branching creating your own branch and then pushing up to your branch so branching is important because when you're working as a team you'll want to be working on your own branch so what that means is you have a copy of whatever is in master so this would be my master and if i create a branch then that is mine right that's my branch that's my copy of master and with that copy of master i can make my own changes and then push them up to my branch and then when i get done say that i'm working on a feature to add a navigation to the website right i make my navigation in my branch and then i do a pull request the team looks at it okays it after changes are made and then it gets pushed to master when it's in master it's essentially um that's the branch that you want to put into production you don't want to put your personal branch into production you want to put your master branch into production you want it to be the best updated copy that you can get right so right now if i did a git branch i think i spoke about this in my last video and by the way i'm gonna link the last video up in the link description bar if i haven't already um so i'm gonna do a get branch and that's gonna tell me what branches i have and what current one i'm under so i have a branch called master which everyone has by default whenever you create your github repo and then it's got a asterisk by it meaning it's the current one and it's green so that's the current one that we're on i want to create a new branch in order to do that i'm going to do get branch and then the branch name i'm going to call mine test now it doesn't return anything to you but if you do another get branch now you have a master and a test pretty cool pretty simple if i want to see if i want to be on that test branch then i'm going to do git check out and then the name of the branch and it told me that it switched to branch test if we wanted to check for ourselves now test is highlighted green and um it's got the asterisks by it now another good thing is that when you are inside of your text editor and it's hooked up to your github it'll tell you this one's a little small you may not be able to see it but at the bottom it says hey i'm on my test branch if i moved back very quickly tells me i moved to master and if i go here it's switched back to master so that's kind of a good indication that you are on the right branch believe it or not i use that all day making sure i'm not making updates to the master branch and pushing things up that aren't supposed to be pushed up yet although i haven't made that mistake before but hey it happens so we are in our test branch what i'm gonna do oh i'm going to go here and i'm going to refresh as you can see nothing has happened we got one branch still no changes i'm going to make a change while i'm in test see i'm on my test branch and remember i said something about the navigation so we're going to add to our navigation and this project that i'm working with is for a old youtube series i did with html and css it's just a basic html css website if you want to check that out i'll link that in the description bar above and you can check that out so i'm just going to add a list item tag and it's going to just say test in it that's it so now i'm going to do a git status alright so now we have some things it tells me that i have some changes a file has been modified and these changes are not committed which means they're not saved which means they are not on my branch they're not saved to my branch so to speak so i'm going to save them to my branch because i want to record this change because it's an important change for my project so i'm going to do git add copy this paste it the next thing is git commit and i'm kind of running through this because i did this in the last video this message is just going to say added a link to nav push i mean enter and then i'm going to push this change origin and instead of master i'm going to do test test is the name of my branch which means that if your branch is called hunky dory then you want to say get push origin hockey dory so it's pushing my changes to this branch now if i go over here we notice some changes happening when i refresh this real quick now it says i have two branches whereas before it said i only had one so if i click on it it now shows this test branch is my branch and it's an active branch okay and then it also shows me hey you just recently pushed to this do you want to make a pull request and that's what it says here so we'll go over that later so like i said the point of a branch so that you could work on your changes make your mistakes before you push them up to master another thing i didn't mention about branching is naming your branch so if i wanted to name a branch name is test here whatever you want to name it you could have underscores you can have dashes if you wanted to you can do camel case as well and then if i enter that's just created a new branch which i don't really need but you see here this is now now my branch name uh you don't want to have a you probably won't want to have a mix of camel case dashes and underscores but if you want to just name your branch name underscore is test all lower case that's probably a better practice or if you want to say name is test camel case then that's a another good thing to do and what i'm talking about is like this get branch name is test so you could do that or you could do name oops dash is dash test all lower case with dashes in between or you can just do underscores name is underscore test so that's another way to do it if you'd like i'd say stay consistent with whatever you're going to use with your branch names you don't want to have them all some of them camel case some of them dashes some of them underscores it gets to be a little crazy to look at so what we're going to do now is we're going to do a pull request at this point so we've got our code up onto github so far we've created a branch we know how to name our branch now we want to make a pull request and have others review it alright so let's get started i'm already in my terminal here i'm in the correct folder that i'm in and i've got my github up and i've also got um my web page up here if i want to make a pull request on the branch i just go here to branches sometimes it'll show up on that main page in yellow if there's been recent changes but for mine it didn't show up but this is another way that you can make a pull request so you just click over here new pull request okay and it has right here this is the commit message that i had and if i want to i could add additional things in this here box i can say this is normally where you would put a more descriptive description of what it is you accomplished with this branch and pull request also if you have any additional screen shots that you'd like insert them here just to kind of give you as much information about what happened as you can possibly can remember this is what's going to be live right so when you're making a pull request you're basically saying this is as best as it's going to be and i want you to review this so we can make this change live that's what this is and if you haven't already you could assign yourself to this you could assign others if you're in a group as well you can request someone to review it those types of things labels projects milestones they've got a lot of things in here to keep you organized create pull requests all right great so all it has is my my commit message here the number the number of pull requests that it is this happens to be number three and then it has my description if i had any additional information now you could easily since there's no conflicts you could easily just say merge pull request but there's really no fun in doing that and it's really not the right way if that you would like to practice on doing this so i'm going to click command line instructions and it basically gives you the entire instructions on what you need to do okay so i'm just going to go through and follow the directions it's going to fetch the origin which is going to fetch the the main part of this branch which is technically your master the second thing you want to do is you want to check out the branch that is on this master and it's going to tell you that that you have now switched to this new branch from your origin the next thing is get merge master so you're getting the latest changes from master everything's already up to date on my end so i didn't need to make any changes sometimes your branch is behind so you just want to get the latest changes from there if i go over here i now see that i am on test down here hopefully you can see that um and then also now i have a list item called test and if i were to go over here and refresh my page now i have test as a link it doesn't go anywhere i didn't tell it to so it's just a link here okay so i've checked it out everything checks out all right this is something i want to merge into my project or the final piece of project and i'm going to do that now now if i haven't said so already i do recommend that you have somebody else on your team look over your pull request you really shouldn't be reviewing your own pull requests it doesn't really make any sense for you to do so you did the work so you don't want to look over your own work you have you need a second pair of eyes to do so so with that being said i want to merge these changes so i'm going to get checkout master and now switch to master and if i wanted to check that it now shows that master is here and i'm no longer on test now this is the piece that's important this is what merges your branch right here now you may see them show up here um honestly i never make a a commit message here because that's what it's telling you to do i honestly never do that because i already have the message i want um up here that's descriptive enough for me there might be a reason for this if it is i'm not sure but i normally just uh colon cue to get out of them and to take me back to my text editor and this tells you the changes that were made in the files that were updated the very last thing you need to do is just push this into your master branch and that's working its magic it's writing things it's adding things to your master and it's done so if i go back here that message this get push origin master basically um merged my branch into master and it's telling me now that it's merged which is great which means i'm done you could delete the branch from here if you'd like or you could delete it from the terminal i recommend doing it from the terminal we'll do that in a second so this is it now if you click on pull request there's no more if you go back to your code it now has your added link to navbar message here if you click into it you can see that as well if you were to refresh you should still see test because it's now merged in the master and we are on the master branch and everything is up to date so that is all you do if you wanted to delete this branch after you're done with it you don't want it anymore you don't want to see it when you do get branch all you have to do is get branch the name of the branch dash capital d and get rid of that okay where did you get branch again it is gone so that's it guys