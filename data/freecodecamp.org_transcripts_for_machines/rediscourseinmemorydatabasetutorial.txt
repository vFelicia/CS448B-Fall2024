redis is an inmemory data structure store used as a database cache and message broker following in the footsteps of other nosql databases such as cassandra couchdb and mongodb redis allows the user to store vast amount of data without the limits of relational database it supports various data structures such as string hashes sets list sorted sets bitmaps hyperlog logs and geospatial indexes if we talk about the architecture there are two main processes in redis architecture one is redis client and the other is redis server this client and servers can be on the same computer or to different computers redis can also be configured as a master slave configuration for the distributed systems talking about the advantages of redis speed is the most important part of the radius redis stores the whole data set in primary memory that's why it is extremely fast it loads up to 110 000 writes per second and 81 000 reads per second can be retrieved it supports pipelining of commands and getting and setting multiple values in a single command to speed up communications with the client libraries talking about the persistence redis shows all the data in memory changes are asynchronously saved on a disk using flexible policies based on elapsed time and number of updates since last save redis supports rich data type it supports natively most of the data types that developers already know such as list sets sorted sets and hashes this makes it easy to solve a variety of problems as we know which problems can be handled better by which data type all the radius operations are atomic which ensures that if two clients concurrently accesses the radius server will receive the updated value the competitive advantages of redis is that it provides multiutility tools that can be used in a number of use cases such as caching messaging queues any shortlived data in your application such as web application sessions web page hit counts etc i bet this is enough to get you excited and start with reddish on your next project now enough jibber jabber let's get our hands dirty while exploring radish to install radisson system go to reddish.io download once you go there you can find the download information over here you can download this stable version you can download the docker file as well so that you can run your radius on your docker you can find the other versions as well okay you can download the zip file and you can unzip and you can start your ready server and the other way is you can download from your package manager also so uh let's go and download redis from the ubuntu package manager so let's go to ubuntu so in your ubuntu so run this command to update your system first sudo apt update enter your password and within no time your system will be updated okay now run sudo apt install redis server okay in my machine you can see that the radius is already installed so it's saying the latest version is installed if your system doesn't contain radius then the new then the new ready server will be installed in your system okay once the reddish is installed you can start the radish server by redis hyphen server command okay you can see that my ready server is started so this way you can install and start your address in your system in this tutorial we will see how we can use redis cli and check the first data type that is strings so let's first start the redis server in a background process and open redis cli and use some string commands so let's start ready server in background okay so my ready server is started okay you can see from here you can see that my ready server is started okay now let's open that is cli for opening that is cli we'll just write is cli okay and hit enter you can see that once you hit enter you can see that your redis server information has been shown here so this is running on your local host and the port number is 6379 which is the default port for radis okay now here you can write all your radius commands so now let's start with strings quite any strings in red is what we can do is we'll just write set string name and the name so you already know that red is runs on a key value pair okay so what we gave here is name as a key and value as a shabir and we are setting a string so you can see that we returned okay so that means my chubby value is set into my key name okay if you want to see that what we can do is get and the key which we need to pass so we'll pass name you can see that my value is shown here okay let's add one more variable set email as email at domain.com okay here the value is set you can check that value as well give get email okay now if you want the particular data from this string okay how we can get is you can from get range and the key you need to pass that is email i want the first five characters okay so i will pass zero to four so you can see that i'm getting the first five characters so this way you can get all the characters different characters from the strings now we are just studying these single single strings if you want to set multiple strings how we can set this using m set command using multiple set we need to provide the key value pairs so just we'll provide here lying as english this is one key value pair the other value pair we can say technology technology has redis so you can see two key value pairs we are setting over here okay the same way we can get multiple keys with m get command we can pass multiple keys over here we can pass line and we can pass technology so you can see we got both the values if you want to get the length of the string with htr line command we can get the length of the string as well let's get the length of a length key you can see that it's a seven character length you can check for technology as well okay so this way you can check the length of the strings as well if you want to rename any of the keys okay then just set the values again for that particular key set key for the name and i'm changing my name from shabby to daily code buffer okay you can see that the value has been changed and if i get that value the sharpie is changed to daily code buffer so htr line will give this zero as the length of a key when the key is not present so if we see abc abc the key is not present right so at that time it will return zero okay we can also store the integers as well so let's store set count as one okay so we'll get that integer when we do get count okay now we can increment and decrement these values as well with the incr command incr and the key we need to pass that is count so current my value is 1 right when i do i ncr it will change to 2 so incr will always increment by 1 but if you want to increment a particular key by any of the particular amount so for that you can use incr by command increment by and that you need to give the key and by how much value you need to increase so suppose i want to increase by 10 so you can see that my value is changed to 12. the same way you can use decr command decrement so decrement the key sorry decrement the count right so decrement the count will change the value from 12 to 11 and the same way you can use decr by to pass the particular values to decrement the values suppose i want to decrement by 5 so you can see that the values has been decremented we can also store the float type values so suppose let's store set pi as three point fourteen okay so float type values also we can store you can see it's been stored let's first clear out all everything okay let's do get pi again so you can see that 3.14 has been set to my pi way so if you want to increment the values of a float type okay so for that we need to do incr by float okay increment by float and then you need to pass the key that is my pi and how much i need to increase suppose i want to increase by 0.001 okay you can see that my new value is 3.4 double zero and multiple characters that way so this way i can increment now suppose i have some values and i want to expire those values i want to delete those values after some time okay so for that we can expire those values okay suppose i have one value a which is set to one okay you can see that my value is one now i want to expire this value after expire a i want this values to be deleted after 10 seconds okay so my command would be expire 8 10 so after 10 seconds this value will be deleted we can check this by ttl here you can see that four second is remaining two second is remaining minus two seconds that means this value is expired okay you can check the value again with get a you can see the value is not there by default the value will be minus 1 when the expiration is not set we can set the expiration while setting the variable only so for that we'll do set x and we will provide any key and will provide how much seconds i want to keep that value and the value okay so that means my b key would be expired after 10 seconds till then i will be having that value okay till that if i do b i have that value okay if i check what is the timing okay it's been expired if i do again get b that value won't be there so that's it in this string in redis in the next tutorial we will see list and radius in this tutorial we'll be going through list data type so in the last tutorial we created many of the keys over there so to list down all the keys we can use keys command and we can give the patterns okay you can give the wildcard characters or any of the particular so i want to get all the keys which i have already added so with this keys star command you can get all the keys so these are all the keys which we added earlier okay now to remove all the data what we can use is we can do flush all command so this will delete all the key value pairs from our radius okay now if you see keys star you can see that i don't have any data now okay now let's add some list now to add any of the list variables the command is l push and the key value so i'm putting my data into my country key so country is the key and value okay you can see that i have pushed you can push one more data country as usa okay now to get all this data which we have already entered we can use l range and the key and start and stop so this start and stop is the value which we need to define to get the data from the list so my start would be 0 and my end would be minus one to get all the data you can see i can get usan india let's add one more okay i'll push uk okay now now you can see that with l range country zero minus one we are getting all the data then i'm get adding l range country zero to one so that means i will only get my zeroth element and the first element that should be uk and usf okay so this way we can define the range to get the data from our list so if we so we saw l push that is pushing from the left side that means from the top side of our list so all the values you can see we are adding at the top of the list if we want to add the values at the bottom of the list then we can use r push so with the r push command and now my country as a key if i put my new value then it will be pushed at the bottom so currently you can see my values are uk usa in india so australia would be added at the bottom of india okay so if i again check my countries you can see that australia has been added at the bottom okay so this way we can use i'll push and r push to add the data do a list so currently you can see we have four elements in our list okay you can use ln length of the list command to get the length of our list that is ln and the key name the key name is not present it will return zero now if we want to remove the data from our list the same way we have l push and r push the same concept we have for r pop and l pop with lpop the data will be removed from the top and with the rpop data will be removed from the bottom so the command would be lpop and key that is my country so you can see that with lpop command my uk would be removed okay you can see that uk has been removed with ipo command australia will be removed now if you check our list again you can see that we have only two entries available so this we can use lpop and our pop command to remove data from our list okay let's add one data okay i'll push country france okay let's clear this out sorry and do a range of country with zero to minus one so we have france usa and india now suppose you want to change any of the value okay you want to change france to any of the country so with the lsat command in my key as country and you need to provide the index which index you need to change okay it starts from zero so either zero one or two we have suppose we provide zero as france we need to change let's change it to germany okay you can see that reference has been changed to germany with the lsat command now you need to insert data at any particular position okay suppose you want to insert data between germany and usa or usa and india or you need to insert data before germany or after india anywhere so for that for that the command is l insert and you need to provide the key and you need to provide the command that is before or after what you want to do suppose i need to do before okay i need to add before what before germany okay i want to add before your money and what should be the value suppose new zealand okay so you can see that i can add new zealand at the top suppose i want to add after usa okay so for that i'll insert country after usa i want to add any country suppose ui okay so that will be inserted after usa so this way you can use ali insert command to enter any of the details at any position in our list now you want to find the values based on the index from our list okay so for that the command is l index and the key we need to pass is our country and what is the value at any of the particular index suppose what is the value at 3 you can see that at the 3 my value is uae check with any of the value so this way a linux command can be used to get any of the value from the index now we saw in the starting right we use l push command and we added country and we added value okay at the time what it happened is it created a list and added the value to it okay but what i want to do is i want to check if that list exists then only add the value into my list otherwise won't add so for that my command would be help push x then my key suppose i'm adding data to movies currently i don't have any movies list okay so i'm using l push x movies too and adding any values okay so it will return an 0 okay because it was not added to the list but if we use l push x for my current list which is available and if i add any new country okay so at the time it will return the length of the string so you can see that without range country right so you can see that south africa has been added the same way we have our push x command as well the same way as l push x if you define any of the things okay it will return zero because the movie's list is not available yet you can check with l range command right i'll range move is zero to minus one you can see that my list is empty or doesn't exist okay so this way we can use l push x and r push x command to insert data into a list when list is available so you can see that we have data right in l range for country i'll range for country 01 so if you want to sort this data okay so to sort this data we have a sort command okay we need to provide the key and we need to provide the pattern and limits and all the many informations available okay here my list is of type string okay so for that i need to provide alpha as a command to sort the data of my list so you can see that my data has been sorted okay now if you want to sort based on descending order you can sort that as well so sorting of the list can be done that way so if you have a list of numbers okay that is of integer of any other type you don't have to provide alpha as a command while sorting the data now the other command we have is bl pop and vr paw so what bl pop will do is it will block the execution till it has any value to remove okay if there is any value in the list then it will remove in the particular time frame otherwise it will wait till the timeout is been done to remove any element okay so for that what we can do is let's open one more terminal okay let's set bl pop over here in bl pop let's add let's specify any of the key suppose i'm passing out movies you know that movies there is no data in movies okay so i'm passing one time or second so it will wait for one second and saying data is nailed that means it was not able to delete any of the data okay now if i add movies for 10 seconds let's say 15 seconds so let's give bl pop movies 50 okay we are passing 15 seconds over here and let's add i'll push movies abc okay bx you can see that it removed movies abx okay so this way the rpop is also available for the blocking of removing the data from the list so either of blpop or br pop can be used according to the requirement so these are all the commands that you can use for the list in redis in the next tutorial we will see how we can use sets in redis in the last tutorial we saw list in readys in this tutorial we will be looking into sets data type okay to create any sets we'll use set command okay and we'll pass key and the members for the sets suppose we have java okay you can see one member is added we can add multiple members we can add radish we can add multiple members node.js aws okay they say we can add multiple members as well to list out all the members we have s members command and we need to pass key so you can see that it will list all the members available inside the technology set the main advantage of set is if you know from other technologies or other languages as well sets will store all the unique values if you are trying to add the values which is already been there in the key then it won't affect that suppose if you are trying to add java again then there won't be a duplication for that it will be always the single you can see it's returning zero so it's been not added to the set so that's the advantage how it will work so all the values will be unique irrespective we saw in list there may be duplicates as well to get the count of members available inside your sets you can use s card command and you need to pass the key okay you can see that it will return four you have four members available inside your technology set now to check if any of the member is available inside your set or not for that you need command sys member s is member or not ss member then you need to pass key that is technology and you need to pass the member which member you are trying to search suppose java so it is returning one that means the number is available if you try anything else like spring then it will return 0 because it is not available inside your set currently we have node.js aws radius and java inside my technology set let's create one more set front end okay for frontend technologies and let's add some of the members i'll add javascript html third node yes maybe react okay so these are the members that i'm adding in my front end list you can see by as members i need to provide front end you can see that these are the variables available into my front end so currently we have two sets that is one for technology and one is front end to find the difference between those two sets we have sdif command and we need to pass the key technology and here the key is front end so this will return the differences available within the two keys so if you can see that with s diff command it will check from the first key to the other key so it will check what is the difference okay so node.js it will check nodejs is available inside my front end okay it's available so it will be neglected other things it will check aws is not available redis is not available java also not available so these are the differences that is not matching to my second key that is front end so these are the list which will be printed out now if i want to store this data inside any of the set for that what i can do is s diff store command then i need to give destination suppose new set okay then i need to pass the key technology and frontend so what i'm doing is i want to store the difference from technology and frontend which is this which we got right that is java and aws to be stored inside my new set key okay previously we just displayed it this we can do to store the data okay the three elements has been stored inside my new set if you do s members for new set you can see that three values are available the same way we can check for the intersection elements as well so press enter and you need to provide key one and key two or many keys which is available so if you can see i have a enter technology i am passing and i am passing front end okay so you can see that the intersection element from both the list we have node.js so node.js is the common element for both the sets so it's been giving that well we can provide multiple keys as well so if i provide technology over here front end over here and we have a new set as well right so we'll provide new set okay so this will return the data which is been common to all so you can see that there is no common data which is available in all the list so it is returning empty list now the same way which we store difference data right as diff store the same way we have as interstore to store the differences of the data into a new list so new enter is my destination and my key is technology and front end is my t2 so you can see that the data has been stored into a new list sorry new set s members new enter we can see that node.js has been added to it let's clear it out now let's list out all the members again right yes as members technology and yes members front end now we saw the difference of the list intersection of the list and the union of the list we will see so s union is the command to get the union of the two or multiple lists okay sorry multiple sets so for that we are providing as union and we need to provide key so that is technology and we are providing front end okay you can see that we are getting the data which has been union so all the data has been added we can provide multiple keys as well we have technology we have front end we have new set we have new intel okay so all will be merged up together and the union will be displayed to store all the union data we have as union store and we can store in union new destination let new union and we can provide multiple keys let's add all these keys right and the new union seven elements has been added to new union set we can see all the members oh yeah so this way we can do multiple operations on set we did difference operations we did union intersections we added the elements we removed the elements and multiple things okay so that's been it it sets the next tutorial we will see sorted sets so in the last tutorial we saw sets in freddy's in this tutorial we are going to see what is sorted sets sorted sets are very similar to sets but with extra functionality which has been sorted form sorted sets sorts itself with an extra value which is the score so when we add any of the values to sorted sets we will define this score for that particular value so based on the scores available the sets will be sorted from minimum to maximum value of the scores which we provide so let's add some of the values to the sorted sets in sets we were using set command to add the value here for the sorted sets we'll be using z command z a double d we'll start ready cli okay and then we'll add z and key will provide users and we'll provide this score which is one and we will provide the value cover so you can see that the value has been added we can add more values with pipings as well like z the users will be key and we need to provide the score and the value for it x4 2 lx 3 nema four steve phi is nick so all these values would be added based on these scores which we provide and the values will be sorted accordingly we can see all the data with the command z range and then we need to provide the key which is users and then we need to provide the start and stop that means the minimum and maximum value so 0 to minus 1 which we will provide so you can see that all the values are being stored and sorted based on the scores which we have provided okay if you want to see the scores as well then we need to pass this with scores command as well so you can see that this course has been added to get the count of the users available or the cardinality of the values available we can use z card command and we need to pass the keys okay you can see that there are five variables available inside my users we can use the z count command as well okay to get the count based on the rank available so we need to add z count the keys which is my users and we need to pass the rank which is the minimum and maximum rank to get all the data we can pass minus infinity to plus infinity okay minus n2 plus inf so it will get all the data based on the negative infinity to positive infinity okay so you can see we have count as 5 now if we need to provide any particular values okay suppose i need to get all the users with rank 0 2 4 so you can see that we got 4 one element is been missed out because we've provided the maximum rank s4 we can remove the elements with the command z ram remove we need to pass the key which is user and we need to pass the members which member i need to remove suppose i need to remove alex i'll pass the alex and the alex will be removed if you say again you can see that we have shabbir nema steve and i miss baldinik okay that's fine so these are my users available we use g range users to get all our range right get all the data but if you want to reverse it we can use z reverse range then keys and we can give start and stop and with scores if you want with scores so this will reverse the list you can see that shabbir nima steve nick it is reversed to next you neema and shabir so this way we can reverse the range as well to view it out based on the ranks we can get the individual score also that has been assigned to any of the values suppose i want to get the score of shabir okay so i can do z score then my key as users and i end a member number is sharper so you can see that i'll get the score of it you can pass any of the variables let's get for steve so this way we can find the scores assigned to any of the values so when we did z reverse range okay so at the time the reverse happened based on the rank of all the particular values but if i want to reverse based on the scores which i provided so for that the command is z reverse range by score okay we need to provide users and we need to provide max and min max five minus zero i need with scores okay cool right so this will reverse my set based on the scores which we provided so from nick i should get shabby you can see that right it's been reversed now if i want to increment any of the scores of any of the values okay so how we can do suppose i want to increase the score of steve okay so for that the command is z increment by z i n c are by e we need to provide that is users i need to increment by two what is the member steve so i am incrementing four to six score of steel okay so you can see that the value is six now so you can see that if i am uh executing the same command which i executed earlier right for five to zero okay so at that time steve is not coming if i do six to zero then nick will be coming so this is again do the commands is done score now suppose if i want to remove the values based on the scores okay like minimum maximum value like i want to remove nick and steve based on the scores okay like if i have a long range a long list the command is z remove z ram range by score okay z remove range by score the key is users and the minimum value the minimum value should be five maximum value should be six so my five and six will be removed okay if i do z range users again with zero minus one you can see that stevenic has been removed i have two values available now if i want to remove based on rank okay let's add some more data see add users 5 6 mr 7 early okay z range users 0 to 1 okay these are the scores as well now i want to remove based on the rank so z remove range by rank okay the key would be users and starting in stopping rank my rank starting should be zero i should remove till two zero one and two okay so three values has been removed you can see that we have two values left mri and only so this way we can do different operations on sorted sets in the last tutorial we saw sorted sets now in this tutorial we are going to see what is hyper log log data structure a hyperlog log is a probabilistic data structure used to count unique values these values can be anything for example ip addresses for the visitors of a website search terms or email addresses are the unique count of locations and many things so let's add some data to hyperlog log and we can count and merge the data available inside different hyperlogs now to add the data in the hyperlog log the command is pf add and the key i'm providing hsl and the element suppose i'm adding any value a okay so this way the value is added we can add piping as well we can add multiple values like pfed a already there right b c d e multiple values we can add now what are the values available inside my hl so we can get with pf count and the key you can see that the seven values are available in my hsl let's create one more okay pf head hll2 and let's add numbers in it one two three four five six seven okay we can get the count of that as well pf count hll2 okay this happened now we can get the total count of all the available hyperlogs as well so we can do pf count for hll and hrl2 this will provide the total count for my both the hyperlog logs we can also merge this two or if we have multiple many of them then we can merge them as well too into a new one so pf merge is the command and we need to provide the destination will provide merged hll and we need to merge based on the available which is hll and hll2 so this way both the data has been merged to merge hll you can see merged hli sorry we need to do pf count okay so this is you can see the count of the new one so this way we can use hyperlog logs for counting the sets for the different use case scenario as we saw earlier so in this tutorial we are going to see hashes and radish so hashes is a map of string keys and string values which is a perfect example to store our objects so let's create a hashes the command is edge set and we need to pass the key we are passing my hash and the field name we need to provide field name and providing name and the value as sugar okay you can see that it returned once so data is added let's add one more values let's set my hash email as email domain.com so i've added name in mail into my my hash okay now to get all the keys and values from the hash the command is h keys and key which is my hash okay then it will return all the keys available we have name and email available over here right which we added name and email so it will return all the keys available in my hash so to get all the values we can use h wells command and we will pass my key which is my hash so you'll get all the values which you have added okay so h keys will return all the keys and edge files will return all the values available in the hash as get all command will return all the keys and values available in my hash in radish so we saw three commands to get the values available in the hash as keys as well as an edge get off but we need to check for the particular values available so for that the command is h exists and we need to pass key which is my hash and the field the field is name or email which we have already so we will check with name so it will return 1 when the value is available it will return 0 when the value is not available see if i check with name one which is not there in my hash so it will return zero so this way we can check if the value is present in hash or not we can also check the length of the hash with hln command passing key which is my hash it will return the length so currently i have two elements in my hash so it is returning to suppose i'm adding one more my hash i'm passing age has 25 and if i do h line again it will return three okay now here we can use pipelining as well we can add multiple key values inside my hashes so for that the command is hm set and we need to pass key which is my hash and we can pass key value pass okay suppose i'm passing country as india phone as phone number okay so this way the values will be added the same way we can use hm get command to get multiple values out of the hash the command is hm get we need to pass my hash as a key and we need to pass multiple fields i have name field i have email field and phone you can see that all the values have been written okay the phone is wrong right it should be capital okay so this we can use hm set and hm get to set and get the multiple fields from the hash now suppose i want to increment any of the values in my hash then we can use h incur by command h i n c r by command we need to pass the key which is my hash and the field i have age added to it right you can see i have added age so let's increase the age so i'll add age and increment by 2 so you can see that my age is 27 now okay so this way you can use edge incur by command to increase the values of the hash if you want to increase the values with the floating point data then also we can do with h incur by float command and we need to pass key which is my hash field which is age and increment the value like i'm adding 1.5 years okay so value is 28.5 so this way h incur by float command is used for floating point we can also remove the elements with h del key h del command and we need to pass the key which is my hash and we need to pass field suppose h let's remove the edge you can see it's returning 1 that means the edge is removed we can again check with h exist command with my hash and h it will return 0 okay age has been removed from the hash we can use hstr line command to get the length of any of the values so hstr line we need to pass key which is my hash and we will pass the field suppose i need to check the length of the name okay so it is returning seven shabiri is of seven characters so this way we can use htr line for finding the length of the fields with h set nx command we make sure that we will only add the fields which is not available in my hash so it won't override the fields so for that reason we will use at saturnx command suppose h7x will pass my hash okay we will pass field suppose i'm adding name name is already there i'm just changing the name so this won't add to my hash it will return zero you can see that okay so it will always check if value is available or not if value is not available then only it will add let's add the new value suppose i'm adding last name okay so it will return one and it's been added to my hash so this way we can use h7x command so that's been it in this video in the next tutorial we will see that is transactions in this tutorial we are going to see redis transactions you have already seen that we are executing single single commands in ready cli to get the job done okay but what if we need to execute multiple commands what if we need to execute a bunch of commands in a single go in a single fly considering the advantage of is which is an atomicity all the transactions all the commands which we are executing should be atomic if any error is there then all the commands should not be executed so that can be achieved using status transaction to start a radius transaction you need to specify a multi command once you enter this command you are in a transaction mode so all the commands which you enter from now will be in the queued state and it won't execute until you specify a execute command okay let's check it out we started a transaction we are giving a bunch of commands like set name as shabir okay it's been queued then you can see get name that is also been queued we'll do set as1 set bs2 you can see all the commands are been queued now all this command will be executed in a single transaction when we specify execute command this exec once we fire this command all the commands will be executed you can see that all the commands have been executed so this way a transaction has been created and it's been executed within a single flow suppose you have created a transaction right you are adding some commands get a get c get b any different commands you have been executing okay by the mean time you want to discard the transaction you don't want to execute okay so for that the command is discard if you specify this card then all the transactions all the commands that you have been added to the transaction all will be nullified okay your transactions will be cancelled out so this way you can execute a transaction or a discarded transaction based on the requirements now there is a special command which is watch command if we watch any particular key right if we add a particular key in my watch and then we create a transaction then what will happen a transaction will be executed based on the conditions for that variable which has been added to the watch if there is no change in the key defined in the watch then only the transaction will be completed if there is any change in watch okay at that time the transaction will not be executed and it will return but the change in watch should not be within the current command line or current client if it is coming from a different client at that time only it will check if there is any change in a particular key from any other client if so then the execution will be blocked for the transaction so let's check that out okay let's flush all our data let's set as1 let's open a new window new terminal okay now i'm adding a multi command okay i'm doing set bs to get b okay meanwhile i'm adding watch on a okay watch on he has been added and i'm doing execute command so you can see that i have added watch on a but i haven't changed that key a so for that my current transaction will be executed successfully you can see that i am getting the data in this tutorial we are going to see pub sub in redis so pops up means publisher subscriber model okay so we'll be having a different channels where any of the client can subscribe to it or any other client can publish the messages to it so let's subscribe to couple of channels and within one client we will publish the messages to those channels and we will see how the messages are been displayed so you can see i have three clients open over here for readys from two clients will be subscribing the messages and from one client will be publishing the messages okay so let's subscribe to one channel suppose i'm subscribing to the subscribe command and the name of the channel it's not necessary that channel has to be created before you can directly subscribe to it and later the channel will be created that's also fine so currently there is no channel created i'm just subscribing to news channel okay once you do you can see that it's been ready to read the messages and it will only exit when you do control c or quit the command line or the client let's also subscribe my other client to news as well sub subscribe to news okay so my both the clients has been subscribed to news and let's publish the messages to news now with publish command publish channel name which is news and we need to provide message the message should be any message that you need to do i'm providing new breaking news okay so you can see that it's showing two which is mean it's been sent to two subscribers okay you can see we are getting over here and over here both the places you're getting the data okay we can add multiple messages publish to news new news you can see that data is coming okay now let's change the middle client and change the subscription to multiple channels okay i'm just quitting and again opening ready cli okay and clearing out and i'm subscribing to news as well as broadcast channel so now it's been reading messages from the two channels now publish to broadcast as well publish news n1 okay you can see that it's coming to both if i do publish to broadcast new broadcast okay sorry i did typo right you can see that it's been coming here okay now let's change this first client and change to patent base subscription okay let's close it out again open ready cli okay let's clear it out okay now for pattern based subscription the command is p subscribe okay so here we can give different patterns for the different channels okay there may be multiple channels so to subscribe to those channels we can give patterns over here if the pattern is matching then it will subscribe to those channels and the messages will be read from those channels so for news right instead of news let's add news star okay so that means if there is any multiple news like news one news two news three news hello anything okay then all those channels will be subscribed okay with stars so star is a wildcard character and it can be specified as any of the character let's subscribe to one more which is hello okay suppose i just want to match for the single characters okay like this hello so if we are passing this way then it will be subscribed to hello hello that question mark can be replaced with any single characters over there okay we can also add few of the characters to it if the character is matching then like if i want to match ball and bill okay then i can add this way it should be matching with ball and bill okay so this way particular characters will be matched so this way we can subscribe to multiple channels with patterns you can see that i'm subscribed to this channel now let's add the messages i'm publishing the messages to news channel with hello so you can see that in both of the clients i'm able to receive the messages so new star is working this way now suppose i'm publishing the messages to hello channel with message hello okay you can see that we have added h question mark hello so if you enter this you can see that we are listening to that as well if i publish to h x double l low right so i'm just changing that character and i'm passing that message i'm able to receive the messages for that particular subscription let's check for bill and ball as well let's publish the messages to ball new ball you can see that i'm able to get furball the same way let's check for bill as well you can see that all is working if i add anything else you can see that is returning 0 so it's been not subscribed and no one has been receiving those messages for all so this way we can specify different patterns for the subscription of the channels now let's check some of the pub sub commands okay so pubsub command and the sub commands for channels okay now pub sub channels will return all the channels that have been subscribed which is not a pattern based subscription okay so if you can see that with pub sub channels command i'm getting broadcast and news that means those two channels have been subscribed the rest of the channels are being subscribed based on the patterns so that's why i'm not getting hello or bail or ball okay so pop sub command for channels you will get all the channels the next command is pub sub and num sub so this will define number of subscriptions for that particular channel so if i check for news okay so you can see that it's been returning one so only one client has been subscribed to news channel okay you can see that still my patentbased subscription is not coming over here okay so it will only fetch all the nonpatentbased subscription for the channels so this is your pub sub channels command and pub sub num sub command we can also check number of pattern based subscription with pub sub numpad ok this will return all the pattern based subscription for the channels okay you can see that there are three pattern based channels that have been subscribed you can see that is new star h question mark double hello and bail or ball which has been subscribed so this way we can check all the different pop sub commands all the subscribers available within the different clients for my radish so that's been it in this tutorial in the next tutorial we will see scripts and readys in this tutorial we are going to see scripts in radish most tasks you do in red is involve many steps instead of doing these steps in the language of your application you can do it in side that is with lua this may result in better performance also all the steps within scripts are executed in an atomic way no other radius commands can run while a script is executing so the command is eval and we need to pass scripts so we can pass any of the functions available inside redis library are the lua scripting libraries okay so we'll be using redis library functions that is reddish.call inside that will be passing the commands and the keys and values available so i'm using set and i'll be using keys which we will be passing as an arguments we'll also use argb argument variables which will be passing okay and the number of key value pair is one okay so we'll be providing one if you are not passing anything you can provide zero and you need to pass the key which is name and variable you can see that command is executed you can get the name you can see shabbir has been returning okay now how this works the ul command is what tells redis to run the script which follows by redis dot call which is the internal redis library methods or functions which are available there are multiple lua functions also available for the scripting currently we have here radius.call which have three commands that is set keys of 1 argv of 1 which are string is our scripts which is functionally identical to the radishes set command okay three parameters follows the script text which is the number of provided keys which is one the key name which is name and the first argument which is the shabir value of the key so this way my command is executed we can add we can check one more command by passing multiple values okay so let's add eval with radius.call okay we'll pass that okay let's use amset command to set multiple strings okay and then we'll be using keys of 1 and then argument 1 then keys of 2 argument of 2 so i am using m set command passing key one value one key to value two yeah i need to pass number of keys i'll be using two keys okay for key one and key two then i need to define two keys i'm specifying name as one key and last name as another key now followed by these two we need to pass argument one and argument two so i'm passing shabir and i'm passing the way so this is the command my name and last name are the key 1 and k2 will be replaced in the radius.call function in the same way irg1 and argv2 both arguments will be replaced with shabir and you can see that command has been executed if i check the values get last name you can see that it's coming down okay now let's take up one notch above so i'm executing this command okay which is hm set country capital i am passing bunch of countries and capitals okay india for new delhi u.s usa washington dc russia is a moscow german is berlin japan stockholm and italy's room so this is creating my set with all the country and country capitals detail okay and let's add one more sorted set so i'm creating a sorted set of country and i'm passing three countries italy india and usa with the scores available okay you can see that z range of country zero to minus one so we have three countries india italy and usa now what i want is i want the capitals from my ad set based on the values available in my country sorted set okay so i want all the values like for mightly i want rome for india i want new delhi for usa i want washington dc but i want all the details from that hash for this particular set within the same sequence okay so let's write a script for it so we'll be writing eval okay and we'll start the script we'll be using redis dot call we'll be doing z range for keys we provide okay so whatever set we provide and i want all the values so for 0 to minus 1 all the value okay now let's store all these values in our local variable so i'm creating a local variable order okay i want that in this order so i created this variable now with this order let's get all the data from edge set that is the country cap which we created so we'll be doing return redis.call i'll be needing multiple keys so i'll be using hm get i'll use keys of two i'll pass the second argument as the hash key okay and then what i'll do i'll use the luas function for table that is unpack and then in unpack i'll pass my local variable which is order okay and then i'll specify number of keys which is 2 and then i'll pass key 1 my key 1 should be country right because my country is my set so i need to pass set over here and for key 2 it should be country cap ok you can see that i got all the details rome new delhi and washington dc for italy india and usa with the same sequence based on the values of the hash and sorted side okay so this way we can use different scripts available this is just the gist of the lower scripts which we can use in redis there is a lot more we can do you can for sure go to the lua's website and you can learn the lua scripts and you can use android is now let's do one more thing now to rather than writing entire script over here right we can store that script and we can execute those scripts okay so let's do that okay so this is my entire script from here to here right now let's load the script okay script load command and this value you can see that once we load the script we will be getting a hash value okay so entire script is stored in this hash so we can evaluate with this to execute this hash scripts we need to use eval sha command okay after that we need to pass the shaky and then we need to pass the arguments so previously we passed to country and country cap okay so same we can pass over here my key is two i have two keys available so and the first key should be country and the second should be country cap okay i'm getting the same results over here okay i can also check if my script is available for the particular hash available okay this is my hash so let's check if script is available currently we have the script so it will be available so the command script exist and we need to pass hash so you can see it's returning one so the script is available with the script flush command all my scripts will be flushed out you can see okay now if i check again if script is exist or not then it will return zero my script has been deleted so this way we can use scripts in readings we can load the different scripts we can remove it we can check if existence is there or not we can create the entire lua scripts as well and we can entirely run those rua files as well so i recommend only using scripts when you can prove that it results in better performance so always run benchmarks first for the scripts also your script shouldn't be too long remember that while a script is running everything else is waiting for it to finish so if your script takes quite some time it can cause bottlenecks instead of improving performance and the script stops running reaching the timeout so the default timeout is for five seconds okay so that's been it for the scripts and readys in the next tutorial we will see connections and security in the last video we saw about scripting and release in this tutorial we are going to see connections and security in redis so once you're connected to your redis client is your connection is successful or not to check that you can use a ping command okay once the connection is successful server will return you pawn okay it's a nice game so you can play ping pong with redis client we can add the messages as well with echo command with any of the message it will be displayed in the client okay so in redis there is a concept for databases there will be different databases available the default database when a client is started then it's assigned as 0. to select that the command is select to select any of the database and we need to provide the index of the database default will be always zero so you can see that when you do again select zero it will return okay your zeroth database will be added if you want to change the database you can add select one then it will change to the newer index database you can always switch and forth between them despite of different databases available all the data are persisted into a single rdb or aof file in the radish okay in a single node architecture if there is a clusters available if your radius is configured in a cluster then by default every time your database will be zeroth index you cannot change it at that particular time so this is only available when you are running on a single node and the main important part is when you are switching between the databases when you are using select zero or select one with either zero or one databases then your keys will be unique to each of your database so if you are adding one key to database 0 then that particular key won't be available to database 1. if it's there then value if you're adding to it it may be different so let's check it out so currently i mean select zero so i'm adding set name as shabir okay you can see that get name is available for shabbir now let's switch it to index one okay database one and then if i do get name you can see that it's returning nil okay so that means it's not affecting to my the select zero database let's set this value over here set name to the audi if i again check that name it is and if i check the same name again in 0 database changing back to zero index and checking the name you can see that both the values are different one is now the and one is shabby in both the zero and one database so in the ready server multiple redis clients will be connected to the redis server so what are all the clients available you can check by the command client list okay so this will return all the clients which have been listed over here you can see that all the informations are available their id their address their name their agent all the different things are available currently i have only one client enabled so that's why only one entry is coming if multiple clients are available multiple entries will come okay you can also set the name of the client you can see that currently the name is nalovaya so we can set the name as well so let's add client set name as this terminal you can see that the name is set you can also get with client get name that particular name okay now when we check for client list again okay at the time you can see that that name value is coming for the listed clients so this way we can identify which client has been active and which client we need to kill or any other operations if you want to do for the particular client if you want to kill those clients we can use the kill command to kill the clients okay the command is client kill and we can kill based on the id so we need to provide id and the id which is your 17 okay and if you want to do by address then you need to pass the address which is over here to kill that client i'm passing 17 over here you can see that okay currently i'm running in this so it won't be deleted let's clear it out so this way we can use different client keys as well over here now coming to security we can define the password for the clients to login to your server okay so for that we need to check the configuration we need to change the configuration for it so let's change the configuration for storing the password we'll do config set require pass okay so this is the require pass is the configuration for setting the password here we need to set any of the password so let's set submit one two three okay so you can see that password is set so once the password is set now you cannot execute any of the command without authenticating to your client okay if i open any new terminal okay and i do get name you can see that error is coming north authentication required so unless you are authenticated you cannot execute commands over here so to authenticate you need to use auth command auth and you need to give password so the password we set was submit one two three right submit one two three so once you are authenticated then you can check your commands will be executed properly so this way you can use authentication to connect to your radius clients as well so that's it in this video for connections and securities in radish in this tutorial we are going to see geospatial commands so in geospatial command what we store is we store a location information we store lat long details of any of the particular location we say lat long but if you are aware of all the geometrical aspects or geography then the details which have been expressed is longitude and then latitude x and y axis okay so we'll be storing the data as longitudes and latitudes so how reddish stores all these information so that it stores all this data in a sorted set but if you remember that in our previous tutorials we saw that sorted sets to store the data we specify scores okay based on this course data has been added so here the scores has been added based on the jio hash generated based on the latitude and longitude information which we provide so it generates a 52bit integer value based on that the jio hash is generated jio hash will be a unique value based on that location based on that data has been stored into the sorted sides okay and the model here is used as a spherical model the earth which has been modelized in radius is a sphere okay so all the data which we are storing will have a prone to 0.5 percent of errors so make sure of that while using that is in your application for geospatial data so let's start adding locations into our radish the command here to add the information of latitude and is geoad okay geo add and then you need to specify the key suppose i'm specifying key as maps okay and then you need to provide longitude and latitude information okay so here are my latitude and longitude information uh so this is the city ahmedabad so i'm storing the information longitude and latitude of i'm the birth city you can see that the data has been entered now let's add some more data for different cities okay we can use pipelining also over here when adding location data okay so this is the command jio add maps using the same key and i'm adding the longitude and latitude for mumbai and the same for bangalore okay so you can see that i have added the data let's check the data now to get the data right you can use all these similar sorted set commands okay because pin functions are stored in sorted sets so we'll see the range maps and we'll provide the start and end index you can see that bangalore mumbai nam nabat is added to it now i told you right in the starting that all the information are stored based on the jio hash values okay so uh let's check the geohash values for the sorted elements to check the geo hash values we can see with command jio hash okay and we need to specify the key which is maps and you need to specify the member for which member you need to see that suppose i want to see for ahmadabad okay you can see that this is the hash key which is been generated now if you are not aware of what jio hash means then you can go to wikipedia and check on geo there is also a website called geohash.org that will take jio hash value as an input and it and it will show the location information i can show you that as well you can see your hash.org if you go okay if i specify here my geo hash value then you can see and the bar is being shown over here okay so this way you can check the geohash values and the coordinates for it okay now getting back to business now we stored our values we got the jio h values as well okay but what about getting back the values okay so the command to get the values like my longitude and latitude value okay the command is geopos okay and you need to specify maps that is a key and you need to specify the member okay that will return your longitude and latitude values which you specified now you can see that the values which we're getting here is different than what we have stored right because i told you that earlier it converts into a 52bit integer and then it's storing these values okay so there might be a point five percent of error so these are the values being stored you can get this information from here as well now we store three locations okay let's add one more location okay i'm adding pune as well giving longitude and latitudes for that as well now if you see my data i have four locations okay i have added my latitude longitudes now i want to find the distance between those two locations okay that the command to get the distance between two location is geodest okay geodes command and then you need to specify your key and you need to specify the members you can only get distance between two members only not more than that so suppose i want to get the distance between mumbai and pune okay mumbai and okay so you can see that you're getting the distance over here the default unit for the geodest is meters so you're getting this in meters okay now if you want in specific units you can specify it if you want in kilometers okay so this is the information in kilometers so there is 120 kilometers of distance between mumbai and pune if you want you can get in miles as well with mi okay so this is the distance between the two cities in mice you can get in meters as well okay so this way you can find the distance between two cities you can specify for others as well you can specify for mumbai and ahmedabad in kilometers okay you can see that it's 441 kilometers now be sure that there might be some of you who will be specifying okay the distance between two cities is not that which you are getting in google maps it won't be because the distance between the two cities which has been calculated by radius is based on the two points so it will be a straight line between the two points and the straight line will be based on the sphere model okay so the distance is calculated on this sphere model between the two points with a straight line so that's how radius calculates the distance between the two locations now i got the distance now i want to find the locations around a particular point okay suppose we can take a scenario like i want to find the restaurants nearby okay so i have my current positions i have all the positions of restaurants as well so i want all the restaurants nearby area suppose 200 meters or maybe 50 meters okay or maybe all the restaurants in the city so all these informations i can get with the help of jio radius command i have all the information stored okay you can see i've just stored informations of map you can store all the information for all the particular restaurants all the different use cases what you have so yeah what we'll do we will find the cities specified to the location okay within this location within the radius of this location how many cities i'm getting so that information will find out with your radius command okay your radius command and then i need to specify the key which is maps then i need to specify the longitude and latitude information okay suppose i want to find nearby series for that particular radius from am the ball so suppose i will give the latitude and longitude for amdapad and then i can specify the radius value so within how many kilometers or meters or feet or miles you can see all the information you can provide so i want all the cities within 500 kilometers okay so i'm getting two cities which is amdabad and mumbai and the bath would be zero zero kilometers for sure and mumbai would be you can see it will be 441 kilometers so all these informations you are getting from here if i change my kilometers okay supposed to 1000 kilometers you can see that i'm getting more data pune is also included in it okay the same way you can calculate in miles as well okay within thousand miles of radius you can see within thousand miles of radius all the information all the cities are being included bangalore mumbai ponem daba okay now there are some more keys also we can specify we can get all the coordinates as well with r and we can get distance as well okay so for that we need to pass with with coord right so you can see that we'll get the coordinates information as well for mdhaba these are the coordinates for bangalore these are the coordinates for mumbai and pune accordingly okay if you want coordinates as well as distance also okay so you need to specify with a dist so you can get the distance as well for amdava this is this is 0.0001 mile the same for bangalore mumbai and pune all the information you can get now there is also one command to get with hash okay so there is one catch over here okay if you do with hash and hoping okay you will get that jio hash value okay and you're out of your luck because radius doesn't store that information so this value would be your 52bit integer that has been stored for the sorted cell right that value it will be you can see that that integer will be this not your jio hash values okay so for getting gi values you are with geohash commands only good luck with that so this way you can get the informations based on the longitude and latitude for your particular location but what if you want to get data within the radius based on the members which you have already in your key okay so for that the command is let's clear it out everything first okay so for that the command is jio radius by member okay your radius by member is a command then you need to specify the key which is maps and then you need to specify a member suppose okay so my point starting point is amdabath and within that mdhabat i want a radius and that information i want i want radius of 500 kilometers okay and then you can see that you will get the information based on the member values you can always specify more information so this information you will get up to feeds level okay you can specify feet meters kilometers and miles so within the area and within the use case what you have you can get the information based on this geospatial commands here as well in geo reduce by member you can specify with chords with dist and with hash values and with this you can also specify how data you want okay by ascending order or by descending order so you can specify the esc to get data in descending orders with the maximum value first so bangalore is the farthest from ahmedabad followed by pune mumbai and you can change to ascending order as well to get data from the nearest to the um followed by mumbai pune and bangalore so these are the details of all the command that you can use to store your geospatial or geographical values and you can perform your operations and you can use in your use cases so that's been it in this video for geospatial commands and readys in the last tutorial we saw geospatial commands and radius in this tutorial we'll be seeing reddish benchmarking we are in home stretch now benchmarking is very important thing whenever we decide to use a new technology or use new tool then how the tool or technology is performing for our application or for our use cases that will play a huge role in going ahead with that technology or tools okay here redis provides an inbuilt tool that is redis benchmark to benchmark how radius will perform on our server or how it will perform on our single node or a cluster so that way we can get our expectations clear how reds will be performing and we can optimize it or we can check if new nodes or new servers would be needed to get the desired performance in our application or not so let's check how we can do benchmarking in redis one protip yeah till now you have seen that we are connecting to that is cli with our only ready cli command so we are connecting to just our local host which we have installed in our machine but what if you want to connect to any of the server okay so for that we need to specify the host name or the ip address and the port number so the command would be redis cli and then we need to pass host number that would be i'm connecting i'm still connecting to my local or so i need to pass my localhost url which is my localhost type is 127.0.0.1 and then we need to pass the port number so my redis was working on port number 637 and which is the default port for rides okay so this way you can connect to any of the remote ready servers okay you can see that i have connected to redis now so let's cancel it out and go with the benchmarkings okay for the benchmarkings also the same thing if you're running on your local system on your system where the redis is installed you can directly go ahead with redis hyphen benchmark command you don't have to specify any of the parameters but if you are running on any of the servers then you need to specify your ipn port number with hyphen h and hyphen p parameters okay so let's do redis benchmark okay now we need to specify some of the parameters how we need to do benchmarking with what number of data with what number of lines and all the different informations so if you don't specify anything at that time it will french benchmark on all the different commands available with 50 clients and three bytes of data default okay but i need to specify for maybe thousand commands okay so i need to specify hyphen n and i'll specify thousand so it will run on 1000 commands so you can see that benchmarking is completed okay so it's running on 1000 commands you can see 1000 operations with 50 parallel clients and three bytes of payload okay you can see all the different informations for set command how much time it took okay 31 250 requests per second it can perform okay with three bytes of data the same way you can check for get and all the different information okay let's clear it out again now you saw right we had only three bytes of data suppose i want to run the command for more data okay so for that i need to pass the data information that is hyphen d then i need to specify the size okay i'm specifying 100 kb so what it will run now is benchmarking will run four thousand commands with 100 kb of data so you can see that all the operations have been running for help push or push all the different commands it will check how it's behaving okay it's set and all different informations have been loading up so this way you can check the benchmarking for a system let me cancel it for now okay and then check how it was behaving if we scroll it up you can see that oh boy so much information right yeah you can see that thousand request completed in 0.03 seconds and it is showing 50 parallel clients and how much period it is okay we change the payload from 3 bytes 200 kb so accordingly you can get the value right it will take around 830 request per second for setting the data 800 788 for getting the data for incrementing your values 344.82 requests per second and all the different information you will get and accordingly we can get the idea how redis is performing okay let's clear it out all the details okay so this way we gave this information and we saw that the default lines were 50. now if you want to change the clients right then we need to specify hyphen c command and then we can specify how much client we need to check you can see that we specified 200 clients okay so it's running on it will turn on 200 lines so again it will show the same informations how much number of requests has been served per second you