hey welcome back to the free Coke Camp podcast I'm Quincy Larson teacher and founder of freecodecamp.org each week we're bringing you Insight from developers founders and ambitious people who are getting into Tech this week we're talking with Jessica Lord Jessica worked as a software engineer for more than a decade at companies like GitHub and glitch uh she created the electron team at GitHub if you haven't heard of electron it's a library for building desktop desktop apps using browser Technologies and if you've used the desktop version of slack figma VSS code then you've used electron Jessica you're over in London how's the weather over there dim dim this is the the natural light we've got really today awesome well I hope it clears up a little bit and you get a little bit of Sun at least well we're so happy to have you on the podcast and real quick before we jump into our conversation I want to thank the 8,427 kind people who support our charity each month and who make this podcast possible you can join them and support freec Cod Camp's Mission at freecodecamp.org donate or you can click the link in the description so Jessica you are the first person I've ever talked to who is both a Lord and a lady it's true it's true I really like having this last name sometimes the male comes for me as Lord Jessica just depending on how their database spits out addresses um also fun fact emically emically is that is that right emically yeah and their shared emology is that they have to do with bread Keepers so Lord is like a loaf Ward and over many years it got smooshed into Lord and then lady was a a loaf maiden like Neer like bread Neer and then that also got smooshed and so Lord and Lady come from like the people who had to deal with the bread interesting so like you think of those people as like High Society you know and nobility essentially and yet you know they were originally just like terms for people that worked alongside you know the farmers and everybody else inet said it was a loaf Ward so like or Ward so the person who gave out guarded guarded like the bread because I guess it was maybe valuable then so yeah well I imagine it was valuable back in like medieval times and stuff get yeah everybody's working really hard to to make all the inputs to make that bread possible so you got to guard the finished product right um but like I mean you wouldn't think of like the you know the mall security like watching over the the Apple Store uh you can think of that person as being like some elevated person in society today right yeah I think it's like back when spices and sugar and maybe bread had to be locked up in kitchens yeah well I mean like wars were fought over spices right like territories were conquered over spices people people really love uh having tasty food yeah so I am very interested in like learning a little bit more about your background obviously you've worked in tech for a long time you probably have tons of amazing War Stories and tons of stories of like getting things done uh with the many projects you've worked on but I always like to like have some sort of chronology to my podcast so that people can like understand how you got you are like you grew up in the states yeah yeah I I lived in the states until three years ago I'm like I'm I'm technically British by the skin of my teeth like two technicalities including my mom being born on an Air Force Base during Birthright citizenship years so oh okay so they they had something called Birthright citizenship at one point is yeah which America has today still right if you're born in America you're American but not the case here but they did have it um back then yeah yeah well so when did you find out that you were British or had some claim to like a British passport 3 years ago I just yeah I moved quickly after getting it but I I was always unsure um because being a military child my mom moved really quickly from here she kind of she has no memory of this place she left when she was two um but she has a British birth certificate and there was another gacha which is the K didn't give women the right to pass on their citizenship until January 83 I was born in September of that year so I was the right side of that and because of those two things I qualified and so a friend actually recommended like an immigration lawyer and I spoke to them and I was like here are all the things I know does that make me British and they were like yeah am I British enough wow that's crazy so three years ago like yeah uh so 83 I was bornn in 80 so three and a half maybe yeah yeah yeah so I mean you lived like the first 30 plus years of your life like totally oblivious of your roots I guess yeah yeah yeah it's so cool that like the moment you could you picked up and like just yeah and it was it was in 2020 and so it it's the middle of the pandemic too and I still made it happen wow awesome well let's talk about like so where did you grow up uh I mean probably a lot of places if your parents were in the military right well so it was my mom's grandparents who were in the military my parents weren't and so I grew up in one place okay where was that yeah so it's like Warner Robbins Georgia shout out if like anybody listening knows about Warner Robbins Georgia it's in the region called Middle Georgia it's the geographic center of the state or the heart of Georgia and yeah it's it's where okay the heart of Georgia yeah there's it's just it's a lot of small towns we do have a big Air Force Base there which employs a lot of people and brings a lot of people to wner Robins usually though if anyone's heard of any town in Georgia that's near it they've heard of mon which is also in Middle Georgia so yeah so monish okay so it a pretty small town like it's not like some bustling Cosmopolitan place like where you live now no yeah and what was your childhood like super suburban sprawl it was I mean my childhood was good it was a very Suburban childhood lots of subdivisions and things but also subdivisions in between Farms so goat farms and like crop farms and then a subdivision called like River Wind that's like the name of a casino in Oklahoma where I grew up a River Wind so it definitely evokes that kind of like Suburban kind of uh like pining for like not being somewhat agrarian like we celebrate The Agrarian in Oklahoma and yet like it's Suburban like it's like yeah you look at it it's just a bunch of you know culde saacs and stuff so yeah um that's cool and by the way if anybody who hasn't heard the Rush song uh subdivisions amazing song from the 1980s I'm gonna link to it you got to listen to that after this it's just such a cool song and it's about growing up in the suburbs because like you know the rush that they were kind of they didn't like the fact that they grew up at the subs they wanted to grow up at the city but like yeah pretty cool song uh subdivision I'm just making a note to add that to the show notes subdivisions such a cool song it's got this iconic like 80s like huge Sy sound uh so you were over there and uh when did you decide that you wanted to get into technology and computers and you know the people aspect of Technology as well it sounds like well so my career in Tech actually started so much later but I got really into Tech myself when I was like in middle school early High School um but I genuinely and I've like tried to reflect back on this because now actually having been in tech for a decade plus now I'm like how how was it that I as this like girl in Middle Georgia was like programming on her own I didn't have any friends who did it but I was like I was spending my allowance money on like HTML books and I was building myself a personal website every two weeks like rebuilding it from scratch using like Photoshop 7 or something building new Suites of buttons every time um I was like in M IRC writing scripts there and and I I did yeah I didn't have like a community of friends that were into it and I genuinely didn't think it was a career or I couldn't imagine what a career in Tech would be like so it was a hobby it sounds like then yeah yeah yeah so you just approached it like you were just intellectually curious about yeah you know HTML CSS like a lot of the early web Technologies which ultimately became like the backbone of web Technologies because if it's if it ain't broke don't fix it right like as every engineer cringes a little bit when they hear that but yeah uh we just built all kinds of layers of abstraction on top of these these yeah HTML CSS I was ftping files I guess I was writing Pro scripts like for for MRC and and so MRC you said you didn't have any friends but if you were on IRC you were probably talking to a lot of people yeah I had like internet friends but not Middle Georgia friends so how old were you when you get got internet access it must have been like late middle school early high school so like I don't know six seventh mhm yeah yeah that's about when I got it I I remember going to nintendo.com they had chat rooms and I would just hang out and talk with people about Nintendo games and stuff and got exposed to a lot of things that a 13yearold kid probably shouldn't be exposed to but uh yeah it was it was really interesting uh and I I mean like internet friends you used to have internet friends and then you had your friends that you actually like hung out and ride bikes with and stuff right yeah totally totally and yeah all my friends at school and in the neighborhood Ood had no idea or interest I have a brother who's just a year younger than me also no interest in any of this and so it was just my like side thing and I was super I was super into it I I I'm proud I was a really good child and I didn't get in trouble a lot yeah but I genuinely like when I did get um like grounded and stuff the things I got grounded for were not taking ey breaks from the computer and because like in the very early internet computer days my mom was super stressed about me looking at a screen for too long and so there were rules about how I had to take a 15 minute eye break after every hour or something wow and I just like I wouldn't get off the computer I wouldn't take my eye breaks and that's what I would get in trouble for yeah that reminds me of like all the concern around screen time which you know there it might be well founded but I just remember during the pandemic like suddenly all those rules just kind of went out the window people let their kids use the tablet as much as they wanted so they get some sanity for themselves uh but yeah so it's interesting to hear that your parents were like very concerned about your your health and your eye Health uh at a young age My Eye Health yeah they were like it's cool you're interested in this but please protect your eyes yeah yeah so um you wanted to did you want to get out of the burps did you like Suburban life like I I mean I didn't know anything else we were just like a workingclass family in Middle Georgia you know our like vacations were just you would drive to Florida right so it's like everything was kind of the same in that respect like the biggest place I'd been to was Atlanta until I went to college in Atlanta um and so I just didn't know that much but I I had always loved architecture and if I wasn't like doing doing weird MRC script writing I was also using really random like 3D house Builder software that I would buy at Walmart and um or just drawing plans on graph paper and my dad is a builder and has done a bunch of construction work in building himself and my parents were always into houses and and because I grew up in this like sprawling suburb place there was always a new subdivision being developed and so I feel like every weekend for most of my childhood we would go check out a new subdivision and walk around the houses under construction and my parents were like you know interested in like where kitchen layouts were and where this was and I started learning about how houses were built and thinking about space and um yeah I mean when I was a kid I didn't even give two thoughts to you know why houses were the way they it's just a house I had like zero intellectual curiosity and today there are like several TV stations that are like dedicated just to like building house house construction house remodeling you know tons of reality shows around like uh like oh we surprised them by completely remodeling their house when they didn't even realize it and now it looks all art decoy or something right yeah yeah that's cool and so like I I I guess I knew that that was a job right like building house houses was a job and I didn't really know what kind of jobs were computers and and so like yeah when I went to University my mom was surprised they didn't do computer science I chose architecture well architecture does use a lot of Technology right like you're modeling things you're probably rendering a lot of stuff maybe you could talk a little bit more about that a bit there was actually at least when I was in university still a really strong because it architecture is this this like collision between technology but also art and and creativity so there was this really strong emphasis on like we had to like really like know the plans we were drawing physically and so we were not allowed to submit like final designs in CAD even though like CAD of course existed yeah then but we had to like draw them with our hands and learn to like feel them so it was it was a kind of a tactile like experience like you would actually would you actually carry those big tubes with like architectural Blueprints and stuff or around campus so yes I mean but we also had architecture studio so you would have a dedicated desk and lockers so that you didn't have to Lug so many supplies around and the architecture Studio was like the only building on Georgia Tech campus that was open 24 hours a day like Atlanta police officers sometimes came by and brought us Donuts because we were there like slicing our fingers open building models at 400 a.m. after not sleeping for two days so you would like actually use like the that foam stuff and like actually sculpt buildings yeah yeah yeah and like chipboard and and wood and stuff and we had to yeah we had to draw the plans build the models for them do the topography for you know like the Hillside and things that they were built into when I was living in tingan there was like giant kind of like diarama Museum and it was just diaramas of different parts of the city and so you would stand on this giant like kind of like thing and you look down at like this recessed kind of like platform that was just covered in like models of literally every building in the city and I was like wow like it must have taken so much work to like figure out like where everything was and like map it out and then actually build it out so you were building things like that yeah yeah I mean not at City scale we were building it for like you know the building that we were building on the piece of land that it was on but yeah yeah yeah I mean it does sound like a lot of fun it's like Lego blocks to the next level basically where yeah did you play with Legos as a kid oh for sure for sure yeah yeah my kids love Legos and like we go to the mall I don't know if you see those Lego flowers back there like every time we go I'll get them like a different Lego flower and they'll assemble it and we'll put it in that little bouquet back there but um yeah that's so cool so so one of the things I have of course I'd love to hear more about architecture school but uh for the sake of our audience who may not be that interested in architecture um I I'm really interested in how software and Technology were used at the time and how that has progressed even I don't know if you still follow the field of architecture and of uh you know like Civic planning and and these other related urban urban planning uh if you still follow these fields and read any of the journals or or watch like YouTubers that talk about this stuff but like what was the technology like back then and how has it changed so I I still have one foot in on all of that stuff I'm sure there's plenty of stuff I don't know about but what eventually was frustrating for me is so I graduated with architecture degree worked as an architect for a year then I went to Boston City Hall and I was an urban designer there and I worked in the Urban Design Technology Group and I was like this is perfect like this is the role I'll be in for the rest of my life it's like clearly made for me I love computers I love cities um and I came to learn there was not a lot of Technology actually um and that I you know was one of the youngest people there and the person who had the best idea about what current technology was but I mean at the time at City Hall we were using CAD um sometimes like Google SketchUp and I think someone else has bought SketchUp now and I forget who owns that um when I so when I first graduated and did the architecture job we were using Revit which was kind of a big deal then of like building information modeling of like it used to be when you did Cad and you had a plan and you moved a window in it you then needed to move that window in the section in the elevation and everywhere else but um Revit so you you can like cluster things together so you can move like entire like I gu collections of elements kind of like how you can like set everything as a group or a layer in like Photoshop and move it at once yes exactly you could move the window once and it's moving everything else like it's moving that window and all other related documents it can create the other documents for you it can do building material calculations it can do renderings and so it was the next level and it was such a big learning curve still at that time that a lot of architecture firms were still stuck on CAD because like the inertia to get everybody there to learn this new software but I I was lucky in that I joined a very small Architecture Firm um and so we did switch to yeah I mean and CAD is like a primordial tool like it is I mean CAD computer AED drafting right we used it in wood shop class when I was a kid and I mean I'm sure that there are like industrial versions of CAD that are way more powerful and everything but like I I think of CAD for Designing like you know like something that you're going to uh machine like a part right uh some small like widget that you're going to put into like an engine or something not for Designing something is complicated and you know deliberated upon uh and impr precise is like a house I guess like if somebody wants to have their dream home they probably don't want to be using CAD to build right no you absolutely do CAD really precise like yeah well I mean it's extremely precise it's extremely precise but what I'm thinking is like I mean with a part like the the design considerations are probably pretty baked in and maybe you wouldn't go through as much iteration as you would with like a house like okay now we're going through this rendering of the house and like I don't like where this this bathroom is or something like like okay well let me just move the 20 five polygons or whatever that make up this bathroom individually to a different part of the house and yeah I can just imagine that being like a lot of work well you also start on paper too right and sketch and work with a client and so by the time it even gets into CAD it's gone through so much iteration just because getting things into CAD is probably very expensive in terms of time and I'm sure there's like different like versions that do have like shortcuts and like component libraries and stuff that make make some of this easier too but there was still a very big leap between like Cad and the like building information the Bim building information modeling system software building information modeling B BM yeah yeah so that's a jonro software that I just learned about awesome well um I'm very curious so of course I'm curious like what you did after you got out of school but but while we're on the top a school you went to one of the Premier engineering schools in the United States uh Georgia Tech I've had I think several Georgia Tech alums on the Freo Camp podcast uh they have you know a very prestigious computer science degree program and so you're studying architecture but you're interested in computers did you ever think like maybe I should switch to computer science or honestly get this is something I've reflected on now that I'm this many years outside of having switch to Tech fulltime because yeah I went in to Georgia Tech doing architecture they definitely had a computer science program but still like I like I think I just couldn't imagine and I think that sounded really boring to me um like what kind of job would that be and so I did architecture um but Georgia Tech at the time was one of the few or only schools that required all majors to take a CS course to graduate you had to take like an intro CS course and it was my easiest a at Tech like I really like I had architecture studio is nuts it's so it's so subjective and it takes a lot of hours architecture Studio was worth like a lot of credit hours too and so it was like it weighed heavy on your GPA and yeah it was just like down to like does someone like the way you did this compared to like my friends who are in other major where it's like it's science there are like really clear answers to a lot of these like objectively right um yeah so it was like doing the computer science class was my easa at Tech all my architecture like fellow Majors they really struggled with it we did like gyon which was like Java python something and sounds fun created it it was fun we created like scripts um and and made websites and then I took like a few other like CS courses like that went wherever I could like for electives and stuff and yeah it was like fun and easy for me but I still was like but this isn't a jaw yeah so it sounds like you just kind of viewed I mean throughout your entire childood you almost kind of took technology for granted to something that was fun and interesting but it wasn't like a serious field you could go into and like yeah at what point so you're working for Boston you know massive city in the United States esteem for its very old architecture yeah all right because it's one of the oldest cities in the United States so it probably has like buildings from like pretty much every period from the past 400 years 300 years I don't know um what was what was the uh I guess the path from doing that to working as a software engineer because obviously you did transition into software engineering yeah yes so like I said I was in the Urban Design Technology Group and I was feeling a bit frustrated that there wasn't as much technology as I thought there should be there and that considering the name of the organization for sure right you think they would have a technology Focus right and I didn't want to be the person like I didn't have anybody else to ask or talk to about technology there are some things I felt like I was hid my head against a wall trying to get some things going I felt like you know at the time I didn't know about the term open source and the open source Community but one of the things I was really wanting to make happen at the city was that cities should share their ideas and their thinking I like kept trying to push for us to have a Blog where we talked about like the planning initiatives or we talked about the things that the urban designers and Architects at the city were thinking about because yes like City are different but also they're the same and they share a lot of the same problems and eventually I had been there like three years or so and this thing called code for America started and had its very first year where it was partnering with um cities to build open Source software that cities could share and so even though that was like genuinely what I was like trying to do and hoping to do when I was at the city I still I still was like this is cool but again I don't think I want to write code all day that just seems really boring and so I really I I spent almost the whole year working with some of you know the teens that they were working with and knowing about it and it wasn't until the very last minute I was like well it's free to apply why don't I apply and at the time I was considering like should I go to grad school for something and I it was like I might as well just apply and I applied and then I got it and I was like okay well I'm going to go do this I'm going to go spend a year basically geeking out and being able to actually talk about technology with other sort of Civic Tech nerds and be able to bring it back to cityall Hall spoiler alert I did not go back to see Hall let's talk real quick about code code for America So for anybody who hasn't heard of it like it's an organization I greatly admire uh Jennifer paa I think is her name the founder like she started it you know this is probably like 20 2009 2010 like is that about when you yeah so the first Fellowship year was 2011 and then I was in the 2012 Fellowship year so you were very early to this that esss developers with people right and tries to like like hey how can we fix your sewage problem with technology or something like that right yeah yeah and I I mean I think they've changed the model a bit now but during the first few years when it was primarily a fellowship fellows like me would apply to be the fellows and then cities would apply with a problem they had that they want the fellows to solve and so then the organization would pick a group of fellows and then pick a group of cities and then everyone worked together to try and solve that problem with open source software that other cities could use yeah that sounds cool and how has it changed just out of curiosity because you said they're not necessarily using that approach anymore so I don't know all of the details actually um but I think I think it sort of works more as like a consultancy now but I could be totally wrong um I think the primarily Fellowship stuff lasted for like five or so years yeah that's so they's they're still doing like human centered open source government work but I think in terms of like H Staffing that and like having a longer running project rather than projects that get spun up then shut down like every year they they iterated on that yeah well I would love to eventually get Jennifer on the podcast uh aspirational goal of mine like maybe I'll just cold reach out to her if if you know anybody I can talk to like definitely send me a link because I would like to uh learn about the history of the organization again it's an organization that I deeply admire uh and was really inspiring and I have a lot of friends who went through it it's I I kind of joke that it's like the peace score for people that just want to code and don't want to go overseas yeah yeah yeah we used to say it was peace core for geeks peace peace core for geeks okay so I'm not that far off from what people are thinking but it you know it sounds like a great bridge into working as a Dev because you're kind of working as a Dev but you don't have to go through like the grueling interview process and you don't have to explain yourself to hiring managers and stuff did having a year of working with code for America help when you went into the job search later on well so it yes it helped that it also showed me what writing software as a job actually looked like and what the other people who did that were like um and so it really sort of became real in my mind rather than like all these years I had been like no there's definitely no way I want to program all day um but I I also fell into the right place at the right time in terms of like San Francisco and 2012 and on and I and like code for America was great at really connecting you with other people and other like interesting open source developers and organizations and so I I fell into JavaScript and node at the right place at the right time and got really involved um in node then and and so I got really energized then in that year like seeing like oh this is what a career in software development looks like and I got really excited you know with the people I met who were doing software and I got excited and energized by how fast things went especially having come from the last three years being at City Hall where things don't move fast and maybe they shouldn't move fast certainly but yeah I mean there's some Merit to things not changing too quickly when it's government related yeah um but it was it was really eye open and yeah it it just painted the picture to me of like oh this is like and actually software is creative and you can have fun and um and it's like really collaborative and stuff and and it finally also put a name to open source because like I said I didn't really know about open source I didn't know about the open source Community I had always been in this little bubble of my own um writing code for fun and so once I so like really started to then understand like the open source Community the role of GitHub and open source and stuff it just it just filled in a lot of blanks for me I'm I'm definitely like sensing kind of like a theme in your I guess your history and your your career progression and all that and one of the things you've always emphasized is wanting to help people collaborate right and do you think that this childhood where you like the only person who was into technology and you had internet friends but you didn't really have like real in inperson collaboration do you think that that kind of like spurred you to like I want to increase the amount of collaboration in the world I don't know maybe like for some reason I've always really cared about the idea of like shared knowledge so I remember like when I applied for code for America I you know didn't have like that much to show I done like super random stuff I had done some websites for the city for planning projects and things but I also had like a personal blog that I did with my best friend still online called ecab EAB online ECA b o online however you spell online um where we it's like all how to make and sew things but we would draw tutorials and diagrams and I I was just really I don't know why but I've always just felt like it's important to like work in the open and share what you're working on and share knowledge and yeah I don't I don't know and I don't know where that I don't know this is so cool I mean like the it looks like a Google Blog blogger blogger BL from P yeah oh man so cool like your own pencil JY Pala saw that site and was like yeah this person cares about like sharing knowledge and so I was like yes my craft Blog has helped me yeah awesome I'm GNA link to that in the show notes for anybody who wants to check it out note that the uh https like it it it wasn't um like yeah I don't know maybe that's something you just go into blogger and configure but it's it looks safe to me I clicked through despite the scary warning from chrome uh yeah so so cool so you maybe you can explain the the process because I'm I'm really curious about okay when you finished code from was it like a preset like I'm going to commit for like one year and then I'm going to figure out what to do from there like you're winding down your time at code for America what is your next step like how how do you approach the next leg of your life yeah so I was winding down code for America I was like having to decide am I going to go back to Boston do I go back to City Hall and I like through connections at the time I got a kind of threemonth temporary gig at diy.org to help them build out like challenges so that young people could learn about how browsers and servers worked um and so I came on and was working with them and then I I actually got like a DM asking if I wanted to talk about working at GitHub and so I got lucky in that respect of like I don't think I've even would have thought of applying to gith HUB and so I met up with someone at GitHub and I started the interview process and then I got an offer and I just had that moment well actually the moment I told myself was like this is like really amazing and unbelievable but I thought I was going to go back to City Hall but also in the grand scheme of things I'm only going to be learning learning more that I can bring back to City Hall later so if I just do this for like if I just do this for three years I can go back to City Hall then you know with more knowledge yeah I always kind of entertain this this notion of going back to be a School director and being like the most competent School director ever uh in terms of like being able to take all the Automation and you know management skills I've gotten for free C Camp and just run like a you know a tiny English school or something like that uh so I can kind of relate to that notion that like everything I'm learning I could take more so why don't not learn even more and so that kept repelling you like 10 years in do you still like entertain the notion of going back to to City Hall I do well yes I do actually and I still have some contacts and actually amazingly like another code for America fellow who I think was the year after me is now like chief of staff at the city of Boston um you know and works with the old the department I used to work with there so I think in Boston has always done some really cool stuff um they've had like the office of new Urban mechanics in Boston and they've done cool stuff um so yeah it's still back there in the back of my mind that one day I'll go back did you you didn't have to give up your US citizenship are you like a dual citizen or I'm a dual citizen okay yeah that's one thing like the US does with some friendly countries but with like China and India and a lot of the other big countries they they I guess all the nuclear powerered countries I don't know does does Britain have nukes I can't remember but but yeah like um that's cool so you could still potentially go back and uh and work in in government there I'm not sure if like even if you were a British citizen you might be able to work in the US government I'm not sure what the restrictions are sorry for this tangent my thinking is like Okay cool so you're at GitHub now like or you get this like you know Cinderella story of like not even having interview basically did they still interview you so I yeah I did I did interview I just didn't apply myself like someone reached out to me and started the conversation um because yeah I don't think I would have ever attempted which which completely changes the dynamic is like oh you want me huh okay well like it it probably gave you a lot of like they probably were a lot less rough on you than they would like a peral walk on who's trying to uh try out for the team it was also 2013 so honestly it was like there were not a lot of like rules and regulations happening at San Francisco companies at that time and I benefited from that for sure yeah like you just maybe you can describe because that was like pre Microsoft acquisition that was like way back in startup land like uh I remember uh you know cuz free Co Camp started in 2014 so this was before even that um and yeah what what was it like getting a job at GitHub do you remember like do they ask you a bunch of interview questions like at the Whiteboard or was it more of like a are you a a GitHub I can't remember the term that they use for people that work at GitHub an octocat hubber yeah hubber okay yeah I'm trying to remember I think I had some small coding exercises and then I had um just some were just sitting down and talking to people and then some were because at that time GitHub had no managers we didn't have have um like we didn't have product I'm pretty sure all the engineers were also designers as well right this was like Mark Otto was there who had done bootstrap I there was very much of like Mar met him I met him at a conference and I was too intimidated to talk to him but I stood by him and like nodded while he talked to his you know click of other developers yeah and so there was very much of like you wear multiple hats and so I also I one of the interviews was just going through one of the GitHub pages and talking about how I would redesign it and code it and like sort of do a walkth through of like interventions to improve the page and why but yeah everyone had to kind of design their own stuff at the time too yeah and then that was and then the job offer I got then it set because again this was like the everything was so it said frontend super star is what literally my title was on the job off wow front end Superstar I've heard I haven't heard that one I've heard like ninja I've heard like you know Master Chef like I can't remember all the all the different like you know names I've heard for job roles but Superstar is a pretty good one you must must have felt pretty good putting that on your LinkedIn I I didn't even create a LinkedIn until like three years ago but that is privilege right there I I I probably had to send it to like landlords and stuff who were like okay this is fake yeah so um yeah what was it like the early days like again this is like and and of course I just want to stipulate that like this is your current job like your current floyer is get up so I'm not asking you to like say anything bad about them or anything like anything you can say if you can't talk about something it's totally cool just tell us you can't talk about it but like what can you talk about do see tidbits the dayto day was there like crazy you know beef jerky and and like uh confectioneries everywhere like did you have like lots of confectionaries I mean there were beverages as well there but it was it was very interesting it there were lots of things I liked about it there are lots of things now that I've been in tech for long enough that I knew could never work work in the long run of like we didn't have managers everyone it was like a a sort of land grab freefor all of you went into the repo you clicked issues and you picked something right and you planted a flag and like I'm now like questioning some of these metaphors I'm using yeah but you put your stick in the ground like the Oklahoma Land Run I got to tie it back to Oklahoma yeah you yeah you just you claim stuff and if someone else maybe was working on it would have to work up the courage to ask them like could you join them and work on this too and and yeah so it really benefited stronger personalities yeah um and and people who are friends with each other worked together on stuff and so it was like kind of chaotic at the beginning and and that was during the period when GitHub was really like proud that it had no managers and that and they would say no one will tell you what to do at GitHub yeah which is a fiction because at the end of the day there are things like that you know there are lines you can't cross they may not be visible lines but there are lines yeah yeah I I want to take a moment just to talk about um the role of bureaucracy and the importance of bureaucracy in like militaries and governments and uh even like large corporations like there are some pretty big companies out there like Walmart has like a more than a million employees you know of course the federal government in the US has like 2 million um like even a company like Microsoft might have like hundreds of thousands of employees like if you don't have any sort of like chain of command and like people you report up to it just becomes charismatic leadership you get like the uh the the Wei work guy coming in and like serving tequila shots and right after he fired half the people you know and like you just get like this weird you know kind of like uh the loudest voice in the room becomes The Voice that people have to listen to or or the most imposing threatening tall person who's like looming over you you know or or or the person who just has the most crazy kind of memorable ideas even if they're not good ideas um and I am very cognizant of that because free C Camp like our our organization our charity we don't have like a a chain of command so to speak like I consider myself kind of like an individual contributor and IC alongside everybody else but at the same time I'm very aware that this will not scale and it might work with like 35 people but it's not going to work when we have like hundreds of people you know decades from the future if that ever comes to pass like yeah uh and and so I think what you're describing if I can editorialize a little bit not having ever worked to get up and only knowing a few people that have uh but it probably was like kind of like the growing like going from small founder driven startup to like bigger company and you were there for a lot of that growth like do you remember how many people were working there when you joined I think I was like 175 okay um and when I left three and a half years later we had like over 600 and I think today we have like 3,000 interesting so you came in under the dunar number which is like like the psychological theory that like a human can keep like about 150 human relationships in their mind and so oh I know this person they're on this they're working on this and like you could conceivably know everybody that worked with the company and it's like 100 what what did you say your number was it's like 175 I think okay so you were just over the Dum the dumb Bar number is 150 so but but still like you're kind of stretching the dumb Bar number but like once you get up to like 300 plus people then that starts to break down pretty quickly especially if there's like a lot of churn which in Tech famously like I don't know about that era but like it you know the average tenure of a developer at a company might only be like two years or something um yeah like like was was there a lot of was it chaotic back then there yes I yeah I woulda I think chaotic is like a fair word I mean we still did stuff we it wasn't all like we are like chickens with our heads cut off and nothing was getting done we were still doing stuff we still had like a a singular Mission you know but it yeah it but it it experienced every growing pain like I and I but I so I think that there was like a period where it everything felt like it was the right size we all knew each other we all trusted each other and everything was like golden for a while but like you said yeah as it grows and you start to know fewer and fewer people and what and less and less about what's going on um then it then it breaks down more then you need more structure like I mean I remember when we got lawyers and stuff and you grow and you have to go through all of these things and so yes and even still at the at the time that I left originally they were still trying to figure out GitHub had finally sort of caved to having managers um but then it kept flipflopping about should managers be technical should they know should they have like technical skills in the area they're working on or should they just be people managers um there's something in developer culture sorry to interrupt you but like more than most Fields I think developers want developers as managers they want people that are quote unquote technical because it's it seen as kind of like a badge of an honor like I can yeah go in and I I can go to a whiteboard and I can explain how this this data structure works and I want my manager to be able to do that I don't want to be managed by some you know point pointy haired boss you know as as they're called like Dilbert if you've ever read that comic uh it's it's all about like the the people that like have risen to their highest level of incompetence where like they can't rise any higher so they're just there but unfortunately they're there above you and you have to report to this person who doesn't even really understand the work that you're doing right like that's every developer's kind of like nightmare is reporting to some person whose background was like selling sugary soda or something and then they transitioned in like to use the you know the Apple Steve Steve Jobs bringing in John Scully metaphor like they had this culture of like developers and innovators and then they bring in the Pepsi guy and he proceedes to like run the company to the ground and every like nobody in the company respects him and everything like that right like so I think more so in software engineering than a lot of other fields people want to look up to somebody it would be like if you were like a soldier and like some general son came in to manage you or something who didn't have as much military like you'd be upset and you probably some um what's the term for it like you wouldn't necessarily comply with the rules um and you wouldn't necessarily You' perhaps grudgingly carry out their you'd be insubordinate that's the word I'm looking for did did you sense any of that like when you when GI brought in managers who had like an HR background or had a legal background or something but they were like suddenly over developers did that happen very often um so I don't think people came with like HR illegal backgrounds to become engineering managers but they maybe had been Engineers you know 15 years ago and on a completely different Tech stack um or they had come from like a really giant corporation that didn't get the GitHub culture right um and so I think that was where some of those issues were around you know trust and respect and feeling like your your manager even understands what's going on on but I think you know the the inverse there was the problem too of well if our managers are Engineers who know the tech stock deeply they maybe have just right been promoted up into management and gotten a pay raise but actually have none of the skills it takes because they are entirely different skills like being a people manager um but they thought it would further their career and it was more money and so then an engineer like becomes a manager and so like theoretically they understand all of your technical challenges really well but they're awful at the people stuff yeah or maybe they actively kind of avoid the people stuff that people part of their job and they just kind of retreat into like codebased minutia as a way to yeah kind of like use up their time as opposed to like actually cultivating younger Talent or or they really hate not coding and then they keep coding and not doing not not unblocking their people yeah I mean like a manager who complains about meetings that's always like the the worst in my mind because it but I'm not I'm not again I just want to be clear I'm not characterizing any managers that GitHub my own knowledge of that is limited but I have had lots of managers who uh kind of like regretful managers problem either yeah I think I think lots of companies have gone through that growing pain of figuring out how to get good managers yeah so you are a manager yourself now after many years working as a software engineer you are a product manager the other PM you know there's pro project management and then there's product management and they're both simplified to pm and you hear that PM term a lot but if you're working in like construction or something a PM is completely different than if you're working in software and there are project managers in software like there's agile project Managers from like the the PMI ACP the project management institution uh agile something something uh project manager agile certified project manager right like so so just to just to be clear product management and P and project management are two different things it took me a long time to realize that and it was a source of great confusion for me but uh maybe you could describe very quickly what a product manager is and what they do yes so a product manager in the most general terms I think is making sure you're building the right thing in the right way at the right time um and and so yeah I came back to GitHub almost three years ago and this is my first time as a PM and this is a culmination of a few things to part of it I think it really suits my architecture Urban Design brain like I think about how people experience the systems they're in right and you know working in product is like I'm thinking about the end user right like ultimately I'm thinking about when you go to github.com like does it work the way you expect it to does it help you collaborate does it make you more productive or does it like piss you off yeah um and so I think that that that's part of it I think part of it is that I feel like now I seen engineers get stuck on really interesting technical problems while their really cool product idea sort of dies because they don't know how to talk about it and they aren't prioritizing building the right things in the right order and so I think for me there's also there's satisfaction in getting to be a part of the decisions about what we do so that I that I like I can feel less frustrated that we're doing the wrong things right which as an engineer you only have like so much say around um yeah and I think I also got kind of tired of not getting to write exactly the niche JavaScript that I wanted to write which is completely unrealistic if you want to like work at a big job anyways so there was like multiple factors where I was like I'm going to try and be a PM for a developer to um and actually so when I was first at GitHub and I the last thing I worked on was starting the electron team and that was like I was wearing a lot of hats at that time and one of them I was wearing but I didn't realize I was wearing at the time was product and so some of the stuff that was the most fun about working on electron getting it to its 1.0 then is like actually very product related and not to like be too boastful but I genuinely think was like really important to establish an electron early on like establish how we talk about it how we do the documentation um and how we prioritize you know what features are needed to be done when so essentially making sure that you're building the right thing in the right way at the right time and communicating what that thing is right like product management exactly yeah yeah yeah yeah so I've come back now and I'm a product manager awesome and uh we we can talk about your journey away from GitHub and your journey back to it but uh I just want to talk a little bit about electron because it's such a cool fundamental technology that we take for granted like that there's this Library where you can build desktop apps that also leverage all the power of like chromium and all these other browser tools and essentially make you know native app development put that in air quotes that make Native app development like web development so if you're a web developer which more than half of all developers on Earth are web developers uh even like mobile app developers uh they're not spending all day like you know doing mobile app development per se they're doing a lot of web app and uh development in and writing apis that the mobile app consumes right so uh I I just want to clear clarify that because so many people are like why do I have to learn you know web app development I want to do game development or something like well you don't understand like web app development is development in 2024 like everything uses the internet as a platform uh so I'll get off my soap box but um yes you you were involved you essentially uh in the Inception of this critical tool that like you know Microsoft uses heavily with VSS code that slack their entire mobile app uh I think Spotify like a lot of other if you ever downloaded kind of like the mobile or or the desktop app version of a website it's probably running electron under the under the hood yeah maybe you can describe what that that process was like like why was it created like was it to scratch your own itch no it was no no part of me actually had ever wanted to build a desktop app and I knew nothing I knew nothing about Native development I didn't know how like siloed it was was or how you would have to have three teams building the Mac version which like if I had to sit down and think about it I could get there but I just never thought about it before because it was never like I never needed to think about death stop ass um it was because I had moved on to the Adam team at GitHub and so Adam shout out to everyone who still remembers and loved Adam yeah you we used it like I think I did yeah I loved it um and Adam uh yeah go ahead Adam was gith hubs IDE it's like code editor which I mean you can go way back in the origin stories be because it was even like um Chris wanstrath who was one of the founders of GitHub defunct his handle um he it was like a sort of pipe dream of his even when he was founding GitHub and he kind of Never Let It Go eventually he hired a few people to start working on it at GitHub they're writing it and Ruby it wasn't going great for all of the like asynchronous things that needed to happen in the text editor um they also part of um dun's like original Vision too was that it should be built with web technology and so there was this kind of Goldilocks situation where the I think it was like three people originally were sort of just working on it like at GitHub before it was even like talked about at all they had tried um there was like nwjs and then there was NW like Northwest like Northwest but it I think it stands for like node webkit or something okay I can't remember now and then there was another one it had the word Chrome in it I think I can't remember it's what it's what Spotify was using years ago um but both of these libraries tried to do the same kind of thing which is allow you to build desktop apps with web technology but they did them in sort of different ways that made it like really harder to access node or was bundling too much of chrome into it so it became really big and so yeah it was this Goldilocks thing where they kept trying this and then trying that and none of them was quite right and they ended up talking to this guy Chang who had been working on nwjs and he also shared this vision for like a another like alternate version of what the library could be and so he started working on it at GitHub and it was just called Adam shell Adam shell s yeah s h l l so it was just it was literally just built to build Adam it was just a thing that existed so Adam could exist um and at this point it was just like an internal tool like it was it open source it was open it was open source one Adam itself launched and open sourced because Adam when it launched it did open source like its entire or of repos so it was open source from the beginning but you'd really only know about it or care about it if you were already also trying to solve that problem of I just want to build a desktop app with web technology right because that's what would lead you to question well how was this built um and yeah and so there had there was no plan for for it it was called Adam shell it just existed to like it its sort of road map was only to build things that Adam would need yeah um and So eventually I joined the Adam team I onboarded I started learning about all these things I learned about why like why trying to build a desktop app is hard um and I just started I just thought it was actually the Revolutionary sort of tool besides Adam which and I loved Adam right but Adam's a text editor does a lot of things that other text editors do but I thought the like real game changer was actually Adam shell and so I honestly just started being really annoying and I I benefited again from it being kind of Loosey Goosey at early GitHub yeah I mean it sounds like this is the perfect environment if there's ever been a perfect environment to like just step in and say hey I I want get this project going and like permissionless Innovation right like nobody's going to tell you stop because there's nobody to tell you stop I did get tell I did get told stop for a bit um I genuinely was told if you care about this just work on it on your weekends like it's it's I like I kept being emphasized that it was not important it was not important um and then and then eventually so this is preacquisition but Microsoft had reached out to say hey we're building a text editor too and it we're using Adam shell just giving you a heads up we're going to launch this at this conference and we had this moment where're like okay it's going to start getting confusing actually if other people are making text editors and actually they can make anything and it's all linked and named to Adam another text editor it would just get confusing so we just had like an internal brainstorm whatever we picked the name electron and so then then it got so then it got renamed electron but it was still just going to be this dependency of adom um and I I kept being annoying I wrote up road maps about what should be developed so that other people could build apps yeah and then eventually yeah eventually I someone said that I could spend my time on it and so and it and it grew from there of like putting together the road map making sure all the documentation was good and building like like the demos app and stuff and making sure we could communicate like what it was and why you should care about it yeah so at the risk of maybe edifying you too much it sounds like a lot of this stuff like like without your internal advocacy and things like that it it may have taken a lot longer for a tool like this to get off the ground and so you being the squeaky wheel you ultimately got the grease and in this case the Greece was having a whole lot of people adopting this tool and having this very you know active open source project that uh because I mean like a lot of people don't realize this but like most people who contribute to open source are getting paid to contribute to it right like like people software engineers at Microsoft right Microsoft has a lot of software Engineers on their payroll and once they're contributing along with the GitHub team and you know potentially the slack team and like all these other Engineers are coming together like hey we depend on this tool we need to add this feature we need to improve the per over here the performance we need to do XYZ right like that had to really help kind of like be a shot in the arm in terms of the project really yeah speeding up but maybe you could talk about that that's my presupposition like did having a you know a bigger table did bringing more people to it did that accelerate development I think so I think yeah I started like using my time to speak about it at GI help conferences and other conferences and um I mean Microsoft took it after the acquisition it's not like yeah you may you may have added a few uh tens of millions of dollars to the acquisition price because he like oh yeah more more Spoils of our acquisition yeah yeah so I definitely think so and yeah like slack Engineers were very active early on helping it along yeah yeah that's cool well um at what point did you decide like hey I want to go work at other companies like I don't want to just stay working here at GitHub because you know a lot of people would you know be perfectly happy working at like one of the most successful Tech startups of all time perhaps yeah definitely one of the biggest Acquisitions of all time uh and uh yeah maybe you can talk about that a little bit Yeah like I'm happy to talk about it honestly I just didn't work with enough women and I was like I think I can do better somewhere yeah and like because I've been there three and a half years um and I I had never I had not had another technical I not had another software engineer like woman on any of the teams I've been on that's not to say they weren't there I mean some of them were there and they were my best friends but we were never on the same team and so my person personal experience there was that I had never ended up on a team that had another woman like um in a technical role and so I just kind of yeah I like I felt like I wanted to see electron to its 1.0 like that was really important for me and I wanted electron to have enough traction internally that I felt like I could sort of like marry Popp out of there and so and and that's kind of how it worked out like we did our 1.0 like GitHub started to say and see like oh this is important and interesting and worth funding and so we got like a proper engineering manager who I knew and trusted and so um yeah and so once all of that seemed like it seemed like it had a solid foundation then I was like okay so it's almost kind of like uh like my my baby's all grown up and I'm going to set it Loose into the world and now I'm going to go you know enjoy life as an empty nester kind of yeah yeah and so I went and I I looked for different kinds of engineering teams yeah and uh where did you go from so um technically I was at mongodb for a minute but there's like a whole other background of like their hiring system and why that did that's like a story for another time but then I went to splice which is like sometimes they would say it's like GitHub for musicians okay um oh splice like where you buy all your stems and stuff for if you're like a DJ yeah yeah yeah if you're a music producer yeah okay I'm familiar with him yeah yeah yeah so um I knew a few people there who I I trusted and thought were great and and it honestly it was like a lifechanging experience it was the most collaborative and diverse engineering team I've been on and and so I really like at that point I I swung the pendulum because I'd been really dedicated to JavaScript and node and open source and developer tools and like Civic Tech and open gov and all of that for a while at that point and I swung the pendulum and I was like the only thing I'm caring about right now is like a good engineering team and so I started writing go um go go the go yeah go and I you know it was close source and I didn't understand the first thing about music production so like myself so you didn't have the domain expertise like really the the feel for like users and empathy for users that you needed to be able to do a good job well I mean I think I did a fine job I just it was for me it was different to not understand our users as well as I understood the users at GitHub so it was just different you know like I'd be in meetings where someone would like throw out a music term and I was like can someone what's a sample oh no and so it's like so it was like a cultural fit but it was not a cultural fit it's like you know toxic culture it's just like completely different like would you consider cultural or just were most of the de developers that you work with like interested in music like yes yeah yeah like and and I did love that so like I still love that it to me it felt like a nonevil company that was trying to do good I felt like the founders were genuine and wanting to to Like democratize Music Creation more and get artists paid um and you know when our All Hands hearing them talk I felt inspired like I loved the stories about some of the like things we are enabling for people so in terms like in that aspect of culture like it felt really aligned to me and like I wanted to not work at an evil company I wanted to do good I wanted to do stuff that enabled people to be creative and follow their dreams and then I worked with like amazing engineers um and so in that respect it was all fine right and like in theory I could have carried on there forever it just ended up for me I I missed I missed being active in the community I missed like working on solving the problems for the community I was in you know and and so that's the only reason I left like I still think there are people there that I know that are amazing and are some of my favorite humans let alone engineers in the world um but I I ended up going to glitch after that yeah and glitch I'm so excited to talk about this company this is like the part I've been like all right I can't wait to talk about because I'm a huge Anil Dash fan uh and uh I had the pleasure of interviewing him many years ago he like bri coken was very new and he agreed to come and like hang out with us on New Year's Eve we had this big New Year's bash where I interviewed a bunch of uh devs including him uh so yeah let's talk about that sorry I didn't mean to interrupt you I just had to I have to contain my enthusiasm a little bit it just it ended up like yeah I I knew people at glitch and a Neal for some time and actually when I originally left gith help I talked to them about going to glitch and I didn't because it was so small and like mostly dudes at that time yeah like and I was like that's not what I'm optimizing for right now you know and so yeah after after splice which was just like an amazing group and it was tough but I was like I'm I have to swing the pendulum back and I have to optimize for like yeah for like open web stuff again um and so I I joined when they were starting to grow a bit more and they were going to really build out um a team to work on the editor self um and so I joined and was there for two years um working on that which was yeah a whole other experience because it was a very very tiny tiny startup yeah and when did how many people were there when you joined how many uh devs and then how many nondev I don't know it was really it was really small was it it based in New York where where where was it based so yeah we had an office in New York but it was still still remote friendly so some people were remote I mean I think at most we had like 50 55 but it definitely was like 20 you know at times yeah and glitch just for anybody who's never used it like free Cod camp we used to use it as part of our Core Curriculum because it was like such good user experience you didn't have to learn get you didn't have to learn uh how to like go into like the command line and you know run all these you know make files and stuff like you just went in and uh into the cloudbased editor and you just started building your full stack app uh using node.js using react using whatever tools you want and you could just build and and to be completely Fair like a lot of this functionality may still exist I haven't used glitch in a while but uh it was just like a great kind of like intermediary step to actually developing locally on your on your own you know development environment on your own computer so you said there were about 55 people it was a very technical product like I immediately saw this I was like wow they put a lot of engineering into this U maybe you could talk about like glitch the product containers yeah um yeah so it was really interesting because it's yeah it's the in browser editor and then instant continuous deployment of JavaScript and node apps um and so it was like you know easy enough to like if you just like literally needed to show someone on how one thing worked you could just write it and you would know it always work in the right way when you sent them that glitch link and then you could also remix sites so we also wanted it to be a way for like Bas it's like I used to have this thing called like fork and go fork and go like like in GitHub or in get like for branch I briefly tried to promote the idea of forking go of like building websites that are intended to be forked and gone with so like boiler plates and things like that yeah yeah yeah that were like 90% done and only needed you to like go in and change like a name and a bio or whatever um so like WordPress templates almost almost but just like so simple yeah way way more simple than um and because also GitHub Pages you know are also deployed instantly so it's like you could Fork a giagia site and then you also then have a live site um but so glitch like this was really baked into glitch too and you could it would work for node apps and so that was like the big difference whereas um GitHub pages is static sites yeah and and that was the big differentiator is like you had GitHub Pages you had code pen you had like code sandbox I it may have come a little more recently jsbin shout out to jsbin great great website that just solo found founder if you ever want to read some War Stories for being a solo founder of a project did you ever read that series of blog posts where he talked about like JS Spin and like what a nightmare it's been for him like he wishes he never started the project basically I'll see if I can find it I can link to it but you have people listening to this you've got to read this series of blog posts it's it's pretty sad but it is just like wow this is real you know yeah no there's a very like unhappy side to open Source right especially if you're a solo person and a project exploded and become widely dependent on and it wasn't your it doesn't fit in with your life goals yeah you can yeah there's a lot of unhappy friction friction in that path for sure well so you're working a glitch you're trying to build these fork and go which sounds like a a restaurant that would be like on the bottom floor of like a big tall office building yeah but so I glit is called remix so you could remix a glitch project um and essentially also have instant deployment you know and a URL right after you remixed it yeah and it was yeah it was a small startup I like I joined to be an engineer I was going to go back to writing JavaScript and node and front end um but it also quickly seemed like there needed to be some organization and and so I was like we need a manager and so I actually sort of became a manager like three weeks after I started as an engineer yeah and so that's my first and only stint in people management and so I was a people manager for my time at um glitch and yeah like eventually was like engineering director yeah for engineering that's quite a quite a series of like I guess with a smaller organization you can rise very quickly say you can do that in a smaller organization especially with lots of like the change and stuff at at startups um but yeah we had I mean it was still pretty small teens um running the these things but I thought it was really really interesting like coming from Adam I I was really interested in like building editor interfaces and that and that still really excites me about like glitch and excites me in general because I don't love vs code I think I'm allowed to say that that's fine you dis the name of our beloved it's like a space spaceship Command Center and so I yeah it is very complicated just to make sure I'm understanding like there it's it's like Microsoft Excel when you just need like Google Sheets or something yeah and so I thought that there was really really a need and a place for a simple a simple editor that and I think that simple editors aren't just to say oh it's only beginners need simple editors I think genuinely like people and I I say I think this but I've also like talked to these people yeah you know to confirm it like even you know established senior plus Engineers when you want to do something for fun or do something for a demo like you just need the essentials and you need to know how everything works and you just want to get in and start doing stuff you know you don't want to have to toggle a bunch of things or bring a config over and so I think it's really interesting like that problem of like what are good defaults in like a bare minimum code editor convention over configuration yeah yeah yeah the pendulum always swings like oh we've got total customizability oh you don't have to customize things CU we've got same defaults right like that always happens with like the tool hype cycle right um sorry for the the tangent um but okay so it sounds like you were doing a lot of stuff a glitch and like it's a small organization very exciting oneofakind product like nothing like this had ever existed as far as I could tell I almost look at glitches like an invention more than a product well so we did have competitors for sure like code sandbox replit like they were all out yeah but I mean like repet of course and and I think code sandbox just does front end stuff right like you couldn't run like full you couldn't run full stack apps there and and rep you you might be able to do that but they didn't abstract so much away from you like glitch did yeah that's why I think of glitches in a category of its own um in terms of just simplifying the development experience like if you knew what you were doing you could get in and get something live so quickly it was amazing uh so uh what made you want to like leave and and like why didn't you just stay at that glitch did glitch get acquired what what's going on with glitch these days I saw it was very popular for whle like everybody was using it glitch for whle like I couldn't believe the amount of get acquired by Cloud flare um so that's where it's at now but it it was just the startup life of like it was really chaotic I was wearing a lot of hats um a few other people started to leave and and yeah it it was tough because I I do I do think glitch is really really cool but I I had also like I had had a conversation with friends that were still at GitHub and had been there you know since I was originally there and I was checking in with them I'm like so what's it like postacquisition and stuff and and and you know what kind of opportunities and things do you have and and there was like a bit like I guess maybe it's becoming clear like every time I change jobs there's like there's like a pinge on like something I'm trying to course correct for yeah um but at glitch I did like yeah it's like we had product for like a minute and then we didn't have product and so then I became product but I was also director of engineering and stuff and I like could and when you say product again you like having product managers on the team that would actually oversee development of a particular product multi disciplinary bring the designers and the developers and and the you know business people all those people together and kind of like advocate for the product itself yes exactly and and so then eventually like also technically I was in charge of produ and but like there are a lot of engineering challenges there too and so there was just never any time to think about product and and yeah like I said like I'm really interested in sort of the product aspects of like what actually is like the minimal code editor that makes like senior people seasoned people happy and also is really inviting and not scary for beginners and like those yeah like solving those problems are product problems and I wanted to do do that at glitch and there was just never time to do it because it was just yeah startup chaos and like yeah and and and me being in charge there was like there was not a there was not a scenario where then I become just only in charge of product right like yeah short of them like bringing on a whole lot of additional people to absorb all the responsibilities that you taken on yeah so it was like I had to wear a big engineering hat and just like a tiny little product hat and and so that's what kind of got me thinking again and thinking back to my electron time of like I do really get some satisfaction out of like oh no we need to build the developer tool like in the right way um and so yeah checking in with friends about like what gith help was like post acquisition it seemed okay um and they happen to have a opportunity to rejoin and sponsor to to work on sponsors at GitHub as a product lead and so I did and yeah and that's where you are today that brings us up to that one hour of roundabout we're we're back to Jessica in 2024 yeah I'm not working on sponsors anymore but I am still product atub like we've had I mean it is a large company now we've had like four reorgs yeah get Hub spons just to talk about that product real quick we use it free C Camp uses it we were an early adopter of sponsors because we're a charity that likes to sustain itself and not run out of money and of course GitHub uh created this tool that would like at the time I don't think there were any fees at all it was like way better than like patreon or or even like PayPal or stripe uh so people could if you already have a GitHub account you can add your credit card number or whatever and you can start supporting open Source projects and I support lots of them uh I actually I don't support them through GitHub sponsors I I think I just use patreon but but uh people do support us a lot of Open Source contributors support free C Camp and uh so that that is a cool thing and GitHub makes it pretty seamless they it's a very clear minimal product it's it's unconfused and it's right there integrated into GitHub so um thanks for help helping oversee that uh cuz you know fre C Camp gets thousands of dollars a month uh maybe maybe thousands uh from GitHub sponsors this a big help um yeah so you talked about like some of the reorg can you describe what a reorg is reorganization yes re yeah reorganization the org chart changes and it is like so much a part of big companies and this is like so now being back at GitHub this is the biggest company by and large you know I've worked for so a lot of this is just what I've learned now being back almost three years yeah um um yeah reor like reorgs happen yeah what is a reorg like like exactly like oh so it's like what the people use this term all the time but I'm not sure exactly what it means I mean it can be triggered by anything right like someone very senior at the company decides to leave so then there's a hole and then like a few other people then get promoted which then leaves holes down below and then you all of a sudden you have to move all these teams around to make everything make sense again okay and and then company priorities change they change all the time right and so a company priority changes and to get enough people working on that uh priority like things are shut down okay and then all the people who are on that project then need to be like distributed to the other projects I'm kind of learning in real time but but the the Vibe I'm getting is it's even more chaos right like people people are like settled in they got their coffee cup they've got their their daily like cycle where they wake up they get certain things done they talk with this boss every week and and now suddenly they're reporting to completely different people they're working with different people slack groups and and you know uh all the other you know email list serves and all that stuff has to get completely reconfigured is that is that what happens well we don't have any email list serves but we do we do do basically it's all based on who what team you're on and like literally within GitHub the app you know how you can make teams yeah like it's around on the yo GitHub dog foods GitHub to like no end it's actually sometimes I'm like you all like I'm like I get it it's good but sometimes we need to use Google Docs because it does have its like yeah not in minute here like an entire culture of Engineers right I don't want to commit every time I re word yeah so uh just just to describe the term dog food real quick uh you and I are both familiar with it but uh there's this saying that like if you want to build like a really good product you need to eat your own dog food right you need to like be well acquainted with the taste and the idiosyncrasies uh all the different notes that you get from eating dog food I don't know that like dog food manufacturers actually do eat their own dog food they probably wouldn't be advisable that's really interesting does someone who make dog food actually eat their dog food yeah well they must where did I have to interview some uh some QA people from Purina or something yeah yeah okay yeah we we we I mean legal is on is a repo like HR is a repo like we we push it to the limits everything is happening on GitHub that's great um yeah and I mean a lot of internal tools are born like electron the fact that you wanted to build your own editor and not just settle for uh you know jet brains or something like that like that you wanted to so a lot of creativity is spurred by this kind of culture of eating your own dog food it sounds like but that comes with its headaches as well yes yeah and and because sometimes we're on things like really early before they release like projects you know exists and is a thing for everybody now the combon tool yeah yeah yeah but like we were using the early most broken version of it and I was like yeah you get to be the uh the guinea pigs the test subjects yeah yeah yeah um yeah well um I want to talk with like some practical advice obviously your journey into Tech is very unique I've never talked with somebody who came from architecture as a field and and Civic planning and things like that who just had somebody from GitHub like approach them like hey do you want to work I mean it's like again I use the term Cinderella story for you maybe there was a lot of like struggle and everything but that that sounds like a really amazing transition like congratulations on your extremely what sounds to be like a really uh idilic transition into like yeah yeah I did sort of later find out more details about how it happened and I I gu I don't know feel like is this okay to talk about but I guess like this is just yeah what I was told was Jim pacco Jim Palco was at an event with a founder of GitHub who is like who's doing interesting stuff at code for America this year and I guess my project was interesting right on getting a recommendation straight from the top Founders do talk to one another and so yeah so that's how I ended up getting pinged and I like yeah like I my code for America project was one that actually two other people decided they didn't want to work on and I was like well then I'm going to do it I I felt it was important and so I did it yeah that's awesome so I mean that would definitely be like a who you know type thing like like you make your own luck uh by virtue of being kind of the woman in the arena like being out there building apps uh working with code code for America uh which you know there were probably a lot of other lucrative things that you could have pursued instead of going into code code for America you you you took that and it you were awarded not just by being able to like do good work and make an impact I did use all of my savings to move myself to California yeah it's not a cheap place to live um yeah so it sounds like I'm trying to like take some generalizable advice from your story maybe you could summarize some of some of the things that like worked out really well that you're in retrospect you're like that was a very good decision oh my gosh on the Fly I don't know but I I feel like not I feel like what has been really good in general is talking working in the open like I think that also has helped me right like I find jobs and connections on Twitter from talking about what I was working on and I don't so let's let's pull in that thread a little bit so working in the open like of course contributing to open source famously we haven't even mentioned this but one of the most popular ways to learn how to use get is this uh node school module called get it that we used to actually recommend in our Core Curriculum and so probably thousands and thousands of people have used get it because we personally recommended it uh as like a good way to learn get and practice those different um you know commands and stuff and and get yeah and I have not Concepts yeah I've not touched it in many many years but people are still using it it's in the tens of thousands now that have done it um but and I so I do think so you mentioned like contributing to open source and I want to say that I also think it's like scratching your own itches too because I think it's really really hard to just go out there and find a project to to contribute to yeah um but you can create your own stuff right like create like nerdy Pages for things you're into create little projects for things you're into and just like as long as they are on GitHub like I don't think you necessarily have to be like I'm gonna become a top contributor to react like yeah you know that could be a stretch goal like yeah it could be a stretch goal but like also I think if you're doing stuff that you're really interesting it interested in you know you have a better chance at succeeding in it because I think sometimes people do come and have the idea of like oh I just need to find an open source project to contribute to and then you think well then if you find just like any and you're not actually using it and you're not like interested in the problem it's solving I think that impacts like the time you put into it or like your contributions and stuff like if you and if you have the time and not everyone has the time which is another thing but like if you have the time like build your own thing and talk about it and it can be a small thing it could be a small thing that ultimately grows into a very large thing like electron wasn't wle small yeah I wle took the World by storm I don't know how it works I just see people with these like 25 you know squares I can't remember exactly that works but but like yeah like yeah as they say like big things have Small Beginnings right like um and and I'm sure get it when you were sitting down and did somebody ask you like hey can you build a module like how did that come about that's that came about because in the early days of GitHub so this was in my first like tenure we were doing a lot of community events and so there was kind of the freedom to say like is there a thing you care about that you want to have a community event for and I was like I care about teaching people get and GitHub and so so I got so and the event was called Patchwork um because it was about submitting patches and everyone's like building together this quilt I like that so I ended up building get it so that I could like Host this Patchwork event at the GitHub office and like teach people getting GitHub yeah well I mean it is just like a simple like why not it was permissionless Innovation right and then you submitted it to node school and then the rest is history pretty much like I'm taking a lot of inductive leaps but uh yeah how how how many revisions did you did like what was the early days of people using it did you get a lot of user feedback on it people like this part is like buggy or this part is kind of confusing yeah definitely I got a lot of feedback and um and so the early days it was a node school application so that means it ran in terminal on the command line was fully on the command line um but then as I started to get more involved with electron and I think I mentioned like beforehand I had never felt the desire to build a desktop app before so that's why I was totally clueless about desktop app building um but then when I started to work on electron I was like oh actually get it would be really good as an electron app so I did rewrite it as an electron app so there is like a desktop version that's more visual than the command line one I will link to that in case anybody wants to try it oh my go I'm sorry I haven't merged any poll request in a long time are there open issues when was the last time you even checked out the revo five years ago well we you might want to take a look maybe a lot of listeners the podcast will CH here's the thing I will I will get on my little soap box and be like if you just write like simple JavaScript in HTML it will keep working this is the beauty of it people is like it still works I mean sure there are some bugs and there are some things that could be improved but it still works like because it's vanilla JavaScript and it's HTML and CSS and like vanilla JavaScript in node like it uses node but yeah and I I think you don't have to make things more complicated for yourself and I can like Coast now because these things still work yeah this are great um yeah and seven open poll requests it looks like it's like pretty healthy in terms of like people aren't complaining too bad about like because you use the fundamental tools that don't generally change people don't want to break backward compatibility and stuff so yeah oh and I hadn't started yet I just started um so uh check out get it it's going to be a link in there um what does the future hold now that you're a UK citizen uh and an American citizen like hanging out there in London um what are your plans for the next 10 years or so if if I could be so bold as to ask that I don't have any plans I think I have been really lucky so far that I've been able to follow my interests and there's certainly like now that I've like spent this time laying it all out I'm kind of noticing things too of like when I was at City Hall like I didn't know open source was a thing right and and I was actually I'm sure when I was writing my little MRC scripts and building websites and stuff in middle school I'm was using open source but I wasn't aware of it yeah and then even when I was at City Hall and even when I was making my little like sewing blog about like instructions how to make things like these ideas were in my head but I didn't I didn't know there was a world for it and a word for it and then I learned about that word world and stuff and and so then I get more involved with open source but I didn't know product was a job right when I first joined GitHub there was you know yeah the early days and we didn't have product people initially and stuff so I didn't even learn product existed until years down the line um so I've sort of followed my curiosity I guess made things learned about things and then tried to do that thing know so yeah I don't I I genuinely don't know what's next like I want I want developer tools to be good I want collaboration to be better I feel like there's endless work to do there um some some sometimes I do get tired of being sort of in the belly of the Beast of tech and I imagine my like what's what would I do if I weren't like at a giant company going going back to City Hall maybe uh help with some urban planning helping helping people use technology to like fix you know walkability seems to be something that you've optimized for um yes I love that yeah maybe you could talk a little bit about that because I imagine you're like interested do you still you know read about urban planning and like like geek out about like different cities and their decisions and things like that I still follow about what different cities are doing and I've done like a few things along the way too like while I was at glitch I did another short fellowship with actually this was like a bucket list thing for me my favorite Urban designer is Yan gaale who was a Danish Urban designer um and he had a non profit from his private practice and I did a fellowship with them to open source like how to measure activity in public spaces and so I helped them out like putting it on GitHub and making it a more contributable thing and that was like a bucket list for me to be involved in any way with Yan Gale and to like combine like open source and Tech and stuff um and then for a number of years I was on the board of a nonprofit um but it's no more but well what were they they were also in what what what space what problem were they helping with uh Transportation data and like public health so it um it's called StreetWise um and it was around like this idea that also is not unrelated to the things that were frustrating me at City Hall of that cities are doing a bunch of different initiatives to improve mobility and transportation in cities from like walking and cycling and making things more TR Transit oriented design to um and they're doing things and then a lot of times they are measuring it and running studies afterwards and there's results but there's like no way to know right like that this other city did this thing and they have a whole like set of results on on what the impact of those things were and so this was is trying to be a centralized location for results from like mobility and Transit studies and to like summarize them and bubble them up and be a central place so that if you're a city and you're kind of like we have maybe this amount of money this amount of time we're a city of this scale like what can we learn from people who've also been in this situation or like what what are the best outcomes to from like different types of bike Lanes to add and stuff like that so if we are going to make like an intervention like what's the best one we can do and so yeah I've tried to stay involved and like I mean that seems like a really Noble effort because uh you know a lot of taxpayer money is spent in a lot of you know engineering Talent planning architectural Talent um trying to figure out like okay what should we do here and there probably because there are you know thousands of cities on Earth you might be able to find a city with similar you know uh you know demographic data and like similar you know all those different considerations that make a city like like another city where a similar experiment has been done but if that information isn't yeah publicly accessible or if it's just uh if it's just obscure and they don't know about it they may be completely you know blowing a lot of their budget reproducing something that's not going to work that has already been proven to not work or or to be suboptimal or something like that so yeah I I can definitely see the Merit in that like have you ever considered like maybe creating a charity of your own I don't want to put you on the spot uh so a couple of times like over the years someone is like why don't you start your own electron consultancy or like why don't you just like go on your own now that's the scariest thing can think of honestly like I don't think I can do it it sounds scary and hard why did Street wise fail do you know like they just was it adoption by the cities was it like they weren't able to sustain themselves well so it was I mean it was a small effort so it it's one person who was doing it it was a urban designer who then went on to do her PhD related to this and so she was trying to spin this up and I think I think its resources in honestly if I I I think if people have more skills and like can you make a website yourself have you seen someone Market a company before have you seen different subscription models before I think if you've been sort of in these Tech spaces for a long time you you maybe don't have as many hurdles as like a busy PhD student who probably is very very you know maybe not as tshaped as somebody like you in terms of like You' got this very broad skill set and you've also got very specific skills like software engineering and product management uh that you can like she may just be a domain you know subject domain expert and that she knows a whole lot about the specific problem space she doesn't know a whole lot about administering a charity for example um or or just getting things done with software and it could be that just taking the raw data sets and putting them on kaggle you might be able to you know completely go around a lot of of the uh uh you know work that would need to be done and yeah uh again I'm not trying to like you know do uh you know a forensic analysis or like an autopsy report or whatever about her effort I don't I didn't even know about it beforehand I love the name StreetWise um but I think that if this is something you're like super passionate about like I would encourage you to consider uh you know developing some open tools about it that'd be amazing it's massively scary it's also I will say something that's very important to me these days is like being around people like the last few years of the pandemic and myself having gotten really sick like and then having moved to another country in my late 30s yeah your social life is probably completely up you know yeah of like it also sounds like a very good way to continue being alone so well not if you not if you make a lot of friends and you get some other people involved with you like free C Camp like is is even though we're all remote we're like very tight you know we we hang out in person once a year we flew everybody who could get a US Visa we flew them out to Dallas and we hung out and ate a bunch of like barbecue and stuff and like so I don't know that still seems more than I can handle like I'm in awe that you can coordinate these things I don't feel like I can I mean like from where I'm sitting there's probably like a dramatic overlap in our skills and you're probably way better at a lot of things than I am so don't don't sell yourself short but again I don't want to be like here's a whole bunch of work have fun you know if you're happy just but I mean it doesn't hurt to like plan a little ways out like a lot of these problems with cities are not going to just magically save themselves right like I mean and they're getting worse as things change gets cut and things like that right yeah not to go in that I don't want to like open a whole other can of wors but yeah these problems aren't going away um and it's very sad like honestly even England like trains are struggling here and I'm like I thought you guys are going to have trains yeah yeah well um there's so much work to be done uh I don't think that like some automation you know Genie in a Bottle is going to just come out and like solve all our problems overnight that'd be nice but uh I think that people will probably still be working like you know in architecture and urban planning and things like that for many decades to come obviously people are going to be working in software engineering for many decades to come so it's it's thrilling to have somebody like you in the space who can empathize with users and like help them you know essentially get the work they need to get done through uh GitHub and uh yeah and it's cool that you you do care I mean you worked with uh code for America um you know you you were on the board of the street wiv charity it sounds like you do care a lot and I think that's the number one thing like I get excited about is meeting people who care they're not just like enjoying their like you know middle class existence and like going home and watching Netflix and like checking out of other people's problems they're they're trying to actively help other people get up to where they are right yeah and I I like for better some days I wish I could check out like mentally I do think like there's a there's a flip side to caring so much because you get too involved and too invested and it takes up a lot of your time um but I don't know how to turn it off yeah so I I I just follow the things that interest me that are problems that I think need to be solved and then find a way to get like allowed into that awesome well thanks for all the important work you're doing um thanks for again for creating get it which you know so many people have learned how do you get through that thanks for creating electron which I use every single day buried several layers deep in the the little native apps that I launched throughout the day um yeah so amazing and I say created like created the initiative to really get it out there I just want to you were very clear earlier when I was talking that you that you're not the the you know it was a big team effort I didn't I didn't write the first commit on what was Adam shell that then became electron but I turned it into yeah a thing that cared about other projects yeah exactly well um it's been an absolute pleasure talking with you Jessica I hope always so good to talk to you I hope people found this interesting yeah absolutely and uh to everybody out there who is uh has learned I hope you've learned a lot from uh listening to Jessica's experience and that you can have I love about tech that people have different backgrounds and all of those different backgrounds feed into making things better in Tech so yeah I don't know if there's anything I would say is that you can always change what you work on yeah yeah right on well thank you again and everybody out there until next week happy coding