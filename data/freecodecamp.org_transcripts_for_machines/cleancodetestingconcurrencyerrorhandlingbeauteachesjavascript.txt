in this video i will be covering how to make your code clean in testing concurrency and error handling it's always good to strive for 100 test coverage of your code there are plenty of good testing frameworks for javascript and the following principle applies to all of them you should just use a single concept per test so in this bad example we're using the the assert test framework and this test actually is testing for three different things you can see we're trying trying out three different things in regards to the dates and this uh make moment js great again so this is the bad way to do it the good way to do it is to create three different tests so now we have it handles 30day months it handles leap years it handles nonleap years before remember we just had it handles date boundaries so you should just use a single concept per test the next thing i want to talk about is concurrency you should use es6 promises not callbacks callbacks aren't clean and they cause a lot of nesting sometimes you need them but in es6 promises are a builtin global type so here you can see we use some callbacks when we're getting the free code camp wikipedia page so we get that page and then we have this callback and then we have to see if there's an error then we're going to write the file and then there's another callback and then we have to check on the error and then there's a lot of nesting here but if we just use promises it's gonna look like this so here you can see that that looks a lot simpler we're still getting that the page but then we're gonna use the dot then notation the dot then function to say what what's going to happen after we get the page which is we're going to write the file and then we're going to use the dot then function again to log the files written and then we can catch all the errors in one place as opposed to having a bunch of places where we catch the errors so promises are cleaner than callbacks however if you're using es8 i know most people at this time are on es6 but an es8 async and await are even cleaner than promises so the bad code in this section is actually the same as the good code in the last section because it is good to use promises but it's even better to use async await if you can so this is how it looks like with promises but with async await it's even simpler all you need is a function that starts with the async keyword and then you can write your logic imperatively without a then chain of functions so we have async and then we can say we're gonna await this and when that's done we're going to await that and then you can just console that log just like we did before and then catch errors down there because this is all in a try catch block the last thing i want to talk about is error handling there's just one main thing to know about for this which is just to not ignore caught errors don't ignore caught errors logging the air to the console with console.log is sometimes not even much better than doing nothing because it can get lost in a sea of things printed through the console a lot of programs have a lot of things logged to the prop console so with just console.log you may not you may miss it also anytime you have a try catch block you need to do something with the error because that means you're you're expecting to possibly have an error so one thing you can do instead of console.log is console.error console.error is better than console.log to log errors because it highlights the error in red and gives a little extra information and these other functions notify user of error and report error to service are not built into javascript this is just showing that you can create functions that do these things and you probably should create functions that do those things if possible and as you can see above you should always make sure you handle errors for rejected promises or the rejected async await functions okay that's all for this video this video is based on ryan mcdermott's excellent article on clean code in javascript check the description for the link my name is beau carnes thanks for watching don't forget to subscribe and remember use your code for good