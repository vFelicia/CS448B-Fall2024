this is the fifth video in my clean code series based on ryan mcdermott's article this series is about how to write clean code that is readable reusable and refactorable now i will talk about classes it's always better to write small functions than classes but if you do need a class you should use es6 classes instead of how classes are created in es5 especially if you need inheritance so let me show you how an es5 class looks this is the bad way to do it so here is how you used to do it when you were using es5 if you wanted inheritance i'm not going to go through all the details because again this is not how we want to do it but we would create an animal and this is how you would create the animal class and you could add a move function to it and if you wanted to inherit from the animal class you're going to create mammal and you are going to have to call the animal class with and pass in the age but then if you want to add a fur color to the mammal that's different than the animal class you know this.fur color you are going to create this the prototype based on the animal class you are going to create what the constructor is basically there's a lot of different steps pretty long compared to what you will see for the es6 class so let me show you what the es6 class would look like and i just pasted that in and you can see this is much shorter this is the whole thing right here and it's so it's a lot more readable this es6 class is a lot more readable than you see what this es5 class looks like so we're going to create the class animal you're going to have the constructor where you passing the age you're going to have the function move which is not defined in this example but we have the mammal which is going to extend the animal that's how you're going to do inheritance and you're going to super age which passes in the age here create the fur color uh create the live birth function that's in the mammal class but not the animal class then we have the human class which extends mammal class you're going to pass in three things in the constructor but it's going to do super agent fur color where this is just going to call the the previous function the mammal function which is then going to pass the age to this function then you're going to create your new language spoken variable here and you create you can create a new function here basically the point is that it's just a lot easier to read now let's go on to method chaining method chaining allows your code to be more expressive and less verbose the easiest way to explain method chaining is just to show you so first i'm going to show you what it would look like without method chaining now this is the bad way to do it so if you create a class and you're going to have the constructor here and this is some of the default values and then you can also have these functions where you can set the make you can set the model you can set the color and then you would save the class using this function which is not the save is not fully implemented but just as an example it's going to console.log these things when you're creating a car class you're going to do constant car equals new car car that set color pink card set color four color.set model f150 and then card.save now let me show you what it would look like with chaining it's mainly this part right here that it's going to be a lot simpler so let me put in the the good way which is how you do method chaining now when you're creating a function with method chaining you're just going to return this at the end of every function so everything is the same in this new class car except we have this line at the end of each function we're going to return this we're going to return this we're going to return this we're going to return this and this allows us to do something different first let me show you what it used to look like when you were creating a car we were saying that we would do card asset color card asset make current asset model card save now since we've returned the car object at the end of each function we can just do this we don't have to do card outside color card except make card asset model we can just do dot set color pink dot set make dot set model and dot set save because up here after the function is is run it's going to just return undefined and then when you try to call another function if we did set color pink and then we put dot set make without putting the car here it's going to say that it cannot call this function on undefined because we're not returning that car again at the end of the function but when we return this at the end of each function if after it sets the color to pink it's going to return the car object so on that same car object you can set the make and then you can set the model and then we're just chaining the methods one after the other okay the last thing i want to talk about is that you should prefer composition over inheritance inheritance is like what we did up here where we did mammal extends animal human extends mammal that's inheritance human is inheriting from mammal mammal is inheriting from animal composition is when you have one class that's referenced from another class but you don't necessarily extend that class i'll show you an example but it's good to know that there are actually good reasons to use inheritance and good reasons to use composition but you should try to use composition over inheritance when possible well let me show you an example of the composition and inheritance so here would be the bad way to do it with composition and so what we're going to create the class employee which is going to have this constructor name and email and then we're going to create the class employee tax data and say extends employee so employee tax data is inheriting from employee but it says right here this is bad because employees have tax data employee tax data is not a type of employee and you're going to use composition when you have a has a relationship like employees has a or have tax data you're going to use inheritance when you have an is a relationship like a human is a animal or is an animal if you want to add tax data you're not just going to extend employ and add the tax data here you are going to use composition so let me show you what that would look like so in this composition example you're still going to have two classes so first we're going to define the employee tax data class with the social security number and salary and then we're going to define the employee class but none of the classes are going to extend from another class we are just going to use the employee tax data class within the employee class so it says set tax data uh social security number and salary uh this is just a function or a method of the employee class and we are going to say this tax data equals new employee tax data social security number and salary so we are just calling this class from within this other class and that's how you would do composition oh whoops this was supposed to say that this is the the good way to do it now there are some good reasons to use inheritance even though it says bad up here you just have to think through what your your actual problem is so if you have an is a relationship then you should use inheritance like the human is a animal like i said or but if you have a has a relationship like if you have user and user details a user is not user details but user has a detail then you'd use composition also you should use inheritance if you can reuse code from base classes like humans can move like all animals and the third reason why you would want to use inheritance is that if you can if you want to make global changes to derive classes by changing a base class well that's clean code classes thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good