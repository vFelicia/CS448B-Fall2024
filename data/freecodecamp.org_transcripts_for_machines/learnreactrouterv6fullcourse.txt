if you're building projects with react you should learn how to use react router this course covers everything about routing with react using react router you'll learn about setting up basic routes protecting authenticated routes custom route Transitions and more da Cola teaches this course he uses animated visuals and focuses on real world application building all work together to handle routing and render the appropriate components based on the URL we'll cover essential topics like handling common routing issues passing and accessing URL parameters redirecting users to specific routes and implementing nested routes for hierarchal navigation we'll also explore Advanced Techniques such as lazy loading route Transitions and Route guards throughout this course we work on practical examples and real world projects putting your new found knowledge into action by the end of this course you have confidence and expertise to implement robust routing in your own react applications you'll be able to handle complex routing scenarios optimize performance secure routes and provide a seamless user experience so get ready to embark on this react router adventure with me welcome to the introduction to react router section of our course in this module we will explore what react router is its purpose and the benefit it brings to our react applications we'll also discuss the different versions available so let's get started react router is a powerful routing Library specifically designed for react application it provides a declarative way to handle routing allowing us to create single page applications with multiple views or pages with react router we can Define different routes in our application and render appropriate components based on the current URL the main purpose of react router is to enable seamless navigation and provide a consistent user experience within our react applications it allows us to create links handle URL changes and update the rendered components based on the routes defined in our application let's explore some of the key benefits of using react router declarative routing react router offers a declarative approach to routing meaning we can Define our routes using a simple and intuitive syntax this makes it easier to understand and maintain our application routing logic nested routing reactor support nested routing allowing us to create complex application structures with multiple levels of nested routes this is particularly useful when building applications with different sections or subpages dynamic routing react router enables us to handle Dynamic routing by supporting parameters in our route we can Define route patterns that match specific URL patterns extract parameters from the URL and pass them as props to the rendered component this flexibility is invaluable when dealing with Dynamic content or user specific data programmatic navigation react router provides an API for programmatic navigation allowing us to navigate to different routes programmatically we can trigger route changes based on our user Actions application logic or even external events this gives us full control over the navigation flow of our application code splitting and lazy loading react router integrates seamlessly with code splitting and lazy loading techniques this means we can load components and routes on demand optimizing the initial load time of our application it's especially beneficial for larger applications with numerous routes and complex component hierarchies hello guys so this is the first project we're going to build to learn react router it's kind of like a GitHub Explorer site this is the homepage that shows random GitHub repos as you can see over here and then if you click on the repo we go to the repo detail page as you can see we have some information about the repo over here then if we head over to the users page from the Navar as you can see we have a list of random users just as we had a list of random repost and also if we click on a single user we also go to the user Details page where we can see more information about the user then we go to the user search page where we have a search functionality that searches for GitHub users so you can just type in your own username and you're going to see your details now if we click on the profile link from the search bar you can see that it takes us to the login page well that's because the profile page is a protected route and it requires authentication to be accessed so you are going to learn how to implement protected routes in this project however if we log into the application and go back to the profile page you can see that my GitHub profile is now popping up with a bit of information about me so with this you are going to learn how to implement protected routes in your applications using react router all right that's an overview of what we're going to be building for a start and with this you're are going to learn pretty much everything about routing using react router let's begin immediately welcome back guys in this lesson we are going to be creating our first react application and also installing react router I assume you already know how to create a react application if not just make sure you already have a recent not node version installed in your machine and the way you can do that is by simply going to your browser search install node and the first link you see here with download node.js click on it and then install the appropriate node for your machine all right now let's head back to our terminal and create our first react app so to do that all we need to do is type npx createreactapp and then the name of our app in this case the app we're going to be building is going to be called git Explorer so we are just going to say G Dash Explorer just like this now hit enter this is going to take a couple of minutes but just allow you to finish working and we can continue from there all right now that we have our project installed for us by npm let's open it in our code editor for me I'm using vs code as my code editor if you happen to be using a different code editor please feel free to continue using it so all I'm going to do is within my terminal I'm going to say CD git Das Explorer which is the name of the app we just created and then hit enter that is going to take us to our project directory I'm just going to clear my terminal here and then to open my project in vs code all I have to do within the terminal is run the command code do dot just like this hit enter and vs code is going to open our project for us cool all right now that we've built our project and opened it in our code editor let's launch our project first and see it in the browser and then we install react router afterwards now head back to the terminal again and type the command npm start hit enter as you might know already this is going to open our project for us in the browser let's just wait for that to happen all right as you can see we have the spinning react logo over here and our project is working properly all right now let's go back to our terminal we are just going to kill the process here with contrl C or command C and now let's install react router so to do that we're going to run the command npm install react Das router Dash Dom so just npm install react router Dom just like this and then we hit enter so yeah once that's done running let's head back to our code and see if we have our react router properly installed now back in our code editor open the packet. Json file in our project directory and in our project dependencies we should see react router Dom as one of our project dependencies over here if you see that it means your react router D has been properly installed all right now in the next lesson we are going to be going over a few Concepts you need to understand about react router for you to be able to properly use it hello guys welcome back to this lesson in this lesson we will set up our project to use react router to enable us to implement routing functionality within our application to do so we simply need to wrap our entire application inside of a react router component called the browser router what is a browser router the browser router component is a high level component that wraps our entire application it utilizes HTML 5 history API to keep your UI in sync with the URL it provides the routing functionality for your application by listening to changes in the URL and rendering the appropriate component based on the defined route so at the base of our routing functionality is the browser router component let's head over to our code and see how we can set up our application for routing using the browser router so if we go to our app.js over here first of all let's import the browser router from react router Dom so we see import browser router browser router from react from react router done just like this now we said our browser router needs to wrap our entire application right and our app.js is the entry point to our application and all other Pages we might have in it so let's wrap all the component inside of our appjs inside our browser router so in our return statement we're just going to call the router component copy the div over here and paste it inside if we head back to our browser let's refresh and see if that works perfectly oh we have an error here all right we have an input error here seems like I omitted the T of act so if we head back to our code I'm just going to add the T over here head back now if I refresh the page everything seems to be working fine so our router seems to be working perfectly however since the browser router is supposed to wrap our entire application it's completely fine to use it like this but it will certainly make more sense if we go to our index.js file and wrap our app component inside of it rather than wrapping all the component inside of our app.js I hope that makes sense so in our index.js file we are just going to import the browser router again so we say import browser router and inside of our react. strict mode we're just going to call the component and simply paste our app component inside of it this offers a more robust way of wrapping our component inside of our browser router to use the routing functionality all right so now we just have to go back to our app.js and remove the browser router component we called here since we are now using it in our index.js file now with this we have set up our application to use the routing functionality in the next lesson we will see this in action when we create different pages and switch between them in real time using other powerful react router components welcome back to this lesson guys now let's go over a few react router components before we head over to our code and start using them in the previous lesson we saw how we can set up our application to use router functionality by wrapping our app component in the browser router component now to actually Define a route to another page in our browser we use the route component of the react router Library the route component is used to define a route and specify ify the component to render when the URL matches that route it takes two main props it takes a path prop which specifies the URL pattern to match and an element prop which specifies the react component to render when the URL matches the path now let's head back over to our code and see how we can define a route to take us to another page in our browser and display the component we want to render in that page back in our code let's clear the jsx in our app component and change it to a homepage route component so I'm just going to cut the div over here everything inside the div from the header I'm going to cut that and then I will Define a home component right above the app component just like this and then the home component is simply going to return a H1 that says homepage just like this right below it let's create an about us component which we will render in another page so const about us and this is going to return a H1 that says about us page just like this this should be this should be this should be small letter H right all right now let's use router components from react router Dom to show these individual components based on URL path specified first let's import it so over here at the top of our file we just have to say Import in inside craes route from react router Dom all right now that we've imported our route component from react router Dom so inside our app function let's define our route components and display our Pages individually so in here we just have to see route just like this like I said before the route component takes two props a path prop and an element prop so in here we have to specify the path in which we will follow to reach that page in our browser so path is going to be equal to for the homepage we want it to be the root of our URL so over here we're just going to put a for slash which signifies the root of our URL also if you want to render an app to be the root of your url apart from adding a four slash in your path we should also add an exact keyword this is going to make sure our route outputs the right component at the exact root of our project right so now we need to add the element prop and this is going to take the react component which is going to be rended when the user goes to the path so at the root URL of our project we want to display the homepage so in here just like we display components we are just going to display our home component now that we Define our new r Let's test it before we add the second route which is going to be our about page so let's head back to our browser and see if this actually works as you can see we have an error which says a route is only ever to be used as the child of rout element so what does this error mean react is telling us that we can only render a route inside of a route component not a div container as we have done back in our code the routes component apart from being the plural of Route it helps in rendering a single route exclusively by wrapping multiple route components within it if no match is found a default not found component can be rendered I know this might sound confusing at the beginning but let's actually see how this works and it should be really easy for you to grasp so instead of having our div over here we just have to turn this div into a route component just like this and again vs code automatically imported it for me but you can go up here you can go up here add a comma and add the route here so now we've imported our route and our route and that's what we have here so in order for you to have a route component you need to wrap it inside of a routes component that is the only way you can have rout that leads to other Pages now if I head back to our code in the browser you can see it works perfectly for us we have the homepage component displaying all right so let's head back to our code and actually create another route for the about us component we created earlier so inside of our route component let's copy and paste our home route and then change it to go to the about us page so since we said the exact keyword should only be used for the root URL over your project we need to remove it here since we want to add another path so over here after the four slash we just need to specify A New Path for our bter page which is going to be about and then we change the element to be rendered to our abouts element just like this I think this should be pretty intuitive now let's head back to our browser and see if this actually works over at the URL let's add a fourth slash about for the new route we created and if I hit enter you can see we have a new component being rendered for us about us page okay guys I need you guys to clone this repo as it has all the boiler plate code needed for this project so there's going to be a link in the description that leads to this repo right so all you have to do is click on this code copy this link open your terminal CMD and then you simply get clone and then you paste the link and then you hit enter now this is going to clone the entire repo into your computer and if you come to the source folder over here the component you see we have a list of components these are all the components we need with the boiler plate code to begin working with react router all right I'll see you in the further videos all right now that we've created our user.js file and we've pasted our boiler plate code let's head back to our app.js and add a new route so in our app.js just like we have our home and about us route I'm just going to copy one of them and I'm going to change the path to users and the component is going to to be our users component which we just created all right that's it let's head back to our browser and see if this actually works in the URL we are going to go to for/ users hit enter you can see that works perfectly fine in the next lesson we are going to learn how to navigate between Pages specifically from our users page to our home page that is going to be a fun one to learn welcome back guys now let's see how we can navigate from the homepage to the user's page in react router there are a couple of ways we can navigate between Pages the link component of the react router Library allows us to achieve this without reloading our application as a m HTML anchor tag might do let's see how we can achieve this back in our homepage let's import the link component from react router Dom so so above so here I'm just going to say import link from react router Dom just like this so if I scroll to the bottom of our map function over here after the H1 loading let's make use of our link component and actually see how it navigates us from one page to another so I'm just going to create an opening and closing tag for our link component just like this and then we can put our placeholder to be go to users page just like this but before this link component can dynamically navigate us to another page we have to specify the route of the page we want it to take us to for that the link component has a prop that takes a URL path as its value let's see how that works inside opening tag of our link component we are going to type to as in to is equal to and then opening and closing codes and this is where we specify the URL path we want this link to take us to when we click on it for this case we simply put for/ users as that is the page we want it to navigate us to all right let's head back to our code and see if this works now in our homepage let's just give it a Reload somewhere at the end of our homepage you can see we have a button that says go to users's page although this button is not properly formatted we just need to test it and see how to navigate from one page to another in the upcoming lessons we are going to make this even better now if I click on this button you can see it takes us to the users's page and that works perfectly fine so we use the link component within our GSX to navigate from one page to another each time you use the HTML anchor tag to navigate get from one page to another it reloads your entire application and the state has to restart but when we use the react router link component it just kind of changes the component that is being rendered on the screen without altering the state of any other component within our application and this is really powerful all right welcome back to this lesson guys in this lesson we will set up our Navar here we learn how to deal with components that need to be in all our Pages like a naar and footer component using nested routing first of all let's handle showing our naar in all pages regardless of the route and then we will make changes to our Navar file to dynamically navigate us to different pages on bottom Clicks in order to be able to render our Navar component in all pages we need to Nest all needed components inside our nav bar route let's head back to our app.js file and then we Define our nafar route so inside of our rout we are just going to create another route and since we will Nest other component inside of it we will create it with opening and closing tags just like this then let's import our Navar component just like this and then we pass our Navar component as our element prop just like this and then for the path prop we just add a f slash the path has to be a for slash because we want it to appear in all other sub routes nested within it and that will not clash with our homepage path because the exact keyword we use there will simply make sure that is the exact component that shows on that path now let's cut all other routes and Nest them inside of our Navar route just like this with this our nav component will show up in every route nested inside of it let's head back to our browser and see if this actually works so if I refresh the page you can see that we clearly have a problem only the Navar component is being displayed let's try going to the user page to see if we have the same problem over there too for/ users I hit enter as you can see even at the users page we have only the Navar being displayed the problem here is that although we nested all other components inside of our nav and we said that should work we actually needed a way to tell our nafar component to render child components nested inside of it for that react router offers an outlet component that allows us to do this let's go to an na. JS file and make use of this comp component in real time first let's import the outlet component from react router D so over here I'm just going to import outlet from react router just like this then since we want to render all other child components right below our nav in between the nav HTML tag and the container tag we simply imput our Outlet tag so over here we say Outlet just like this now if we head back to our browser and refresh the page as you can see we have the nav bar and the home component showing let's go to the users page and see if that works too all right that works now that we've seen how we can Nest rout with our nav by example let's head over to our code and make sure our Navar links actually take us to the appropriate pages when we click on them back in our navb bar. JS file if we recall in previous lessons we said that using basic HTML anchor tax for navigation is usually a bad idea I mean we can easily specify the path we want within each anchor tag but the problem is that they reload our application this means that whenever we navigate to another route in our application using an anchor tag your app State resets and that is simply not ideal so the solution to this as you may have guessed is the react router link component this is the same component we used when we tested navigation between Pages now let's use that here as well so we first need to import link from react router doome over here where we imported our Outlet we just need to add a comma and also import the link component and then we can simply clear our anchor tag along with it HF and change it to our link tag so over here I'm just going to clear the HF plus the anchor tag and change this to a link tag all right so the link tag takes a prop for the URL path to take us to when it is clicked so over here the prop is two as in T is equal to and in here we can specify path we want it to take us to so in quotes we are just going to put a four slash since we want to go to the homepage when we click on the git explorer link all right let's also change the anchor tag here to a link tag and specify the path we want it to take us to to also be a for slash because the homepage is also the page that shows the repost right so this is going to take the same path as the git explorer link all right let's do this same for our users anchor tag we just going to clear anchor tag here put a link component and then the path to take us to is going to be for SL users all right let's head back to our browser and see if this actually works back in our browser since we're on the users page over here if I click on the git Explorer it should take us to the home page right now as you can see that works let's also click on the users link and see if it takes to the user's page all right that works and you can see how this works instantaneously that is because our application doesn't fully reload it only renders a new component when we click on the link since we use the react router link component to achieve this all right in the next lesson we are going to create a page not found Route that shows up when a user goes to a route that doesn't match any route we defined all right guys welcome back to this lesson in this lesson we are going to create a default route that renders whenever a user goes to an unmatched URL in our browser so let's create a not found. J file inside of our component folder not found. J let's create an export our GSX so we can see const not found equal to an arrow function and this is simply going to return and this is simply going to return a div this is simply going to return a div tag inside of our div we can define a H1 tag that says page not found and below that we can use a link we can use a link tag that says go back to homepage go back to homepage and inside the link tag we can specify the path to take us to which is simply the four slash to take us back home we actually need to import our link component from react router so I'm just going to say import link and I have a suggestion here from react router and then right below we just need to export our component export default not found another typo okay now let's head over to our app.js and import our new not found component so over here we're just going to import not found from component not found all right since this route is meant to show up whenever a user goes to a page that doesn't exist it makesense for us to render it as a standalone route that means we don't have to Nest it inside of our nafar component so right below our Navar closing route we can create another route just like this and set our element prop and set our element prop to be our not found component not found just like this now comes the important thing again since we want the not found component to always show up in every route that doesn't exist in our application the value of our path prop which I'm going to create the value of our path prop is going to be the wild card symbol just like this with this whenever we go to an unmatched rout this will be the comp component that will pop up let's test that out so back in our browser let's go to a route we know we never created in this application so let's just try F SL product and hit enter as you can see we have our not found components being rendered for us let's try another random route so I'm just going to put a random word here hit enter and we still have our not found page and if we click go back to homepage this works perfectly fine as you can see if you also click on the users page this works perfectly fine but as soon as we go to a route that doesn't exist we should see our not found component being rendered to us over here all right hello guys welcome to this lesson in react router the route parameters allow you to Define dynamic segments in your routes these Dynamic segments can be extracted from the URL and used as variables in your component this feature is particularly useful when you have routes with Dynamic data such as user profiles product details or blog post Pages these are just examples now let's see how we can make use of Route parameters and dynamic routing in our application so we say import user profile all right after that we simply create a route for it we want the na bar to display inside this page so we will Nest it inside of our nav route so in here let's create another route and then we give it an element prop of our user profile component just like this and the path prop is going to be for/ users for/ user all right let's head over to our browser and actually see if this works so in our browser we simply need to change the url to to for/ users and for/ user just like this and as you can see that instantly works it shows my GitHub profile my username my name my location my location my bio and my profile image all right this works perfectly now we are going to implement a functionality for this page to show a profile for whichever user we click from the user's list page so whenever we click on this view user we want it to show we want to navigate to this page and show whichever user we clicked from that page right however since the profile page is route on it own we can't pass props to it so the solution to this problem is adding URL parameters to our route so that means we can add another parameter to this URL and then grab the value of that parameter within our code using react routers use params function now let's actually see how we can add parameters to our URL and grab that within our code in our app.js file we only need to add a column and then the name of the parameter we are looking for over here inside the path we first of all need to add a for Slash and then a column and then the name of the parameter we are looking for within our component so we are looking for the user's usern name so we simply add that here so we simply type username just like this cool then we can go to our user profile component and grab that parameter value so above I'm just going to import use params from react router Dom just like this then inside of our component function we can grab the parameter we want by destructuring it from the use params function so we are just going to say const then we D structure username is equal to use params and this is a function just like this this has to be the exact value we gave it in our route component back in our app.js file right now with this we have our parameter value and to actually test this out let's just create a H1 tag over here and call the username parameter to see if this works all right let's head over to our code refresh the page and see if this actually works so as you can see we have a page not found here because we no longer have a page that has this path rather the path we have has another parameter it's looking for which is the username parameter so here let's just add the random username value so I'm just going to to say for Slash adom and if I hit enter we have the Adam keyword over here which is the URL parameter we added let's use another value to actually see if this works so I'm just going to say John if I hit enter This Is Now John as you can see this is how we can add parameters and get it within our component using the use params function from react router D now we want to pass this parameter to our GitHub API URL inside of our effect function over here where we have my GitHub username we can just change this to a dynamic value just like this and then we can add the username instead of this being a static value of my username this is now going to be whatever parameter we inut in our browser let's actually head back over to our browser and see if this works Let's test the username John and as you can see we have John John appears to be a potato Let's test another username and let's say Angela Angela also works Angela appears to be a Wonder Woman cool as you can see this works let's remove this H1 tag it's actually messing things up so I'm going to remove it over here as you can see this clearly works if we give this parameter a username it's actually going to bring up that GitHub user's profile and displayed for us over here let's go back to the username we used before which is my username I'm just going to say colosa now you can also try this by imputing your GitHub username and see if it actually works but as you can see it clearly works for us finally let's head over to our users's component and see how we can navigate to the user's profile page when a button is clicked to do that we simply change this button over here to a link tag so I just going to change it to a link tag and we actually need to import that from react rout import link link from react ROM just like this the path we're going to specify should be to the user profile page so we need to grab the username and pass it to the path so instead of using codes we are going to use btics and then let's start with the path which is for SL users for SL user and then for Slash and now we are just going to use the user name value as our parameter so we say dollar call braces and that should be user. login just like this this is the value for our user username now if I head back to our code if we now click on this view user link it should take us to the user profile page and actually display this specific user's profile all right let's test that out let's start with this first user if I click on the link as you can see we have this user's profile this is their user user name their name their location and their follow account if we go back and select another random user such as this one you can see this also shows their profile if this lesson for some reason seems confusing to you don't worry too much you are going to get enough practice in this course to grasp all the concepts and become confident with them in this section we'll be learning about programmatic navigation but what is that programmatic navigation in react router refers to the ability to navigate between different routes in your application using JavaScript code instead of relying on user interactions like clicking on links or buttons programmatic navigation allows you to programmatically trigger out changes based on certain conditions or events in your application now let's head over to our code and see how that works after that let's head over to our app.js file and create a new route for it so in our app.js first of all let's import it import search user and then still inside of our navigation route since we want this to also have our Navar we're just going to create a new route inside of there so the element prop is going to be our search user component just like this and the path URL is simply going to be f / search just like this now let's go to our browser and see if this works refresh the page and there we go we have it it's a simple form with one with one input and a submit button all right we will make use of the use navigate hook of the react router to programmatically navigate between Pages the use navigate hook allows us to navigate between Pages without the need of components so far we've only been navigating using the link component now let's see how we can do the same thing programmatically using the use navigate hook if we head over to our users. JS file over here you see we have a link component that handles navigation for us let's change this to a Buton HTML tag just like this now we can navigate to any page we want without actually using a link component thanks to the use navigate hook let's import it and see for ourself so over here right beside the link component we can just say use navigate and then we initialize it into a variable so we say const navigate is equal to use navigate just like this now we've initialized it into a variable which we can now use anywhere in our code now let's head down to our button tag and let's make use of the hook inside of an unclick Handler so inside of our opening button tag we are just going to use an unclick Handler here and inside of the unclick Handler we can call our use navigate function all right now let's declare an arrow function and then here we can call our navigate function just like this so when we use the link component we navigated to the user's profile page and pass the username as the path parameter we're going to do exactly that over here so we're going to use back ticks and URL path is users and URL path is forward SL users for sluser and then the username so here we're just going to grabb our username variable dollar cbra and then we are just going to say user. login which is the value of our username just like this all right let's head back to our browser and see if this actually works I'm just going to go to the users page allow that to load and let's click on this and let's click on this view user button to see if that actually works we click on it yes as you can see we are still getting navigated to our user profile page and everything works perfectly fine and you can really see the convenience of this the Ed navigate hook has made it possible for us to trigger navigation from any HTML tag you can have an image with an onclick Handler using the use navigate hook to redirect users to another page when the image is clicked in this lesson we would learn how to redirect or navigate a user to a specific page based on application logic let's head over to our search user.js File over here and immediately import the use navigate Hook from react router Dom so above we're just going to say import use navigate from reactor just like this well as you can see we have a handle get user function over here that is triggered inside of our handle submit function don't worry too much about these inside the handle get user function we send the request to the GitHub API to get a specific user for us and then there's an if statement to check if that user actually exists so inside this if statement we want to navigate the user to the profile page if the user searched does exist and if the user doesn't exist we have a catch method over here that displays the message user does not exist and the number of attempts you have left right this is a typical use case for programmatic redirect think of this as an authentication function it where your users attempt to log to your website and then you redirect them to another page after successful authentication let's see how that works for this application first of all we import our use navigate Hook from react router Dom which I have already done over here and then down here let's initialize it into a variable like we did in our previous lesson so we say const navigate is equal to use navigate just like this then inside of our if statement when the user is found we call the navigate object which we just created and then in parenthesis we imput the page we want to navigate to just like we did in the previous lesson so we say navigate parenthesis and then the page we want to navigate the user to when this works in this case we want to navigate the user to the user's profile so we are going to use back ticks for SL users for SL user and then the user which was searched so we say dollar craes that should be dollar not four dollar craes and then the username uted all right now let's head over to our browser and see if this actually works so back in our browser we just have to go to for/ search just like this and then let's try and search for a possible GitHub user let's try the name Jonathan I hit enter all right Jonathan does exist and then you see we have Jonathan's GitHub profile over here let's attempt a random name that might not exist so in here I'm just going to put random characters submit and as you can see we have our error message user does not exist two attempts remaining let's head back to our search user.js File we have a use effect hook inside of which we have an if statement that is meant to tell the user they out of attempts so inside of here we also want to redirect the user back to the homepage after a few seconds so when the user runs out of attempt instead of just saying too many attempts redirecting we want to actually redirect the user back to the homepage after a few seconds and for that we are going to use a timeout function so right below our set error over here we're just going to call a set timeout set timeout function and we're going to set this time out to 3 seconds so this is going to run after 3 seconds and inside here we can call our use navigate function to navigate the user back to the homepage when this is triggered again we we already initiate our use navigate hook over here so we can use that variable inside of our timeout function so here we simply say navigate and then we specify the URL we want to navigate the user to which is our homepage so we inut for slash over here let's also add the navigate variable as our user effect dependency so over here I'm just going to add it navigate just like this all right let's head over to our browser and see if this actually works so back in our browser I'm just going to refresh the page now let's attempt a random username we know can not be a username for a GitHub user all right I'm just going to inut random strings hit enter now as you can see user does not exist two attempts remaining submit the form again we now have one attempt remaining submit the form again too many attempts redirecting after 3 seconds as you can see we get redirected back to our homepage this is exactly what we wanted and that works now at the end of this course we will build a project that uses more complex navigation that is where you will solidify all of these Concepts and become a pro in react router so don't worry too much if you don't understand all of this concept at this time by the time we build more complex projects you will understand all of this concept pretty much easily in this lesson we are going to be talking about route guards route guards in the context of react router refers to a mechanism that allows us to control access to routes based on certain conditions or rules they are used to protect certain routes in your application and ensure that the user meets certain criteria before accessing those routes a typical use case of this are pages that hold sensitive data and requires a user to log in to access that page all right let's head back to our code and see how that works our o profile component is similar to the single user component but it has a bit more information and obviously shows the logged in users GitHub profile as we will see shortly whereas in the login.js component we have a login functionality with a Dy user object that redirect us to the Earth profile page when the user is successfully logged in so this is the dmy user object you can change it to whatever object you want and then this is what we're are going to be using to log in I just kind of used this to mimic a login scenario so we don't have to be playing around with any live apis all right if you want to change username just make sure it's actually a username that exists inside of GitHub so this doesn't return an error when we are working but you can just leave it at mine and we are going to work with that perfectly we'll see how we can protect the Earth profile component and make it only accessible when the user is authenticated now let's see how we can achieve that first of all let's head over to our app.js file and let's create individual routes for our login and Earth profile Pages again we will Nest it in inside of our Navar route and then here we can create another route just like this we set the first element to our login component and then we can set the path to Simply Be for slash login just like this I'm just going to copy and paste this and then we'll change the component to our o profile component obviously you have to import that above and then we can change the path to Earth profile just like this after that we need to define a few State values for our authentication to work we need a username State variable so still inside of our app.js we're just going to create a state variable say const username and then set username then we can set that to where you state just like this we also need an is loged State variable just like we have our username over here we just have to create another one and say const is logged set is logged and then we simply pleas set that to false this is going to be a Boolean that holds the state of the authentication all right so let's just put code over here all right now in our login route inside of our login component we need to pass a set is logged prop and a set username prop so let's just Define them here set is logged is equal to set is loged just like this and then we also pass set you username as the set username prop just like this now for our o profile we only need to add the username prop so in here we're just going to say username and then we put our username as the value all right now let's test this component and see if they actually work before we got the route if we head back to our browser and go to for/ login First and then in our login.js file you can see that the dmy user object we have is set to username colosa and then password 1 2 3 4 5 so make sure this is the exact username and password you inut if not this is not going to work all right so here I'm just going to say colao and then our password will be 1 2 3 4 5 if I hit submit as you can see it takes us to the Earth profile page over here and it says your profile and it has my GitHub profile information all right that works perfectly now let's Implement route guarding so whenever we come to this component actually let's refresh and see what happens you see we have nothing displaying here which means the user is not authenticated and we don't actually know which user to grab from GitHub because there's no authenticated user so we need to guide this route so whenever a user attempts to come to this route without being authenticated they get you directed back to the login page I hope that makes sense let's head back to our code and see how that works all right so react shter offers a component called navigate this is different from the used navigate hook the navigate component prevents a page from showing up and redirect to another page based on our application logic let's see how that works still inside of our app.js file let's import the navigate from react router d so up here just where we have the route and routes from react rout adom we're just going to add a comma and call the navigate just like this or this is supposed to be a comma not a full stop all right now as we've important the navigate components let's see how we can use that to protect our route so obviously the route you want to protect is the earth profile route and the way we do that inside of our element prop we are going to add a condition to check if the user is logged or not and if the user is logged we want to display this Earth profile component if not we'll use the navigate component to redirect the user back to the login page inside of our element prop of the earth profile route we are just going to add a condition here and say so we use a tary expression so we say it's logged and then a comma and this simply means if it's logged do this and then at the end we are going to add a column else we need to do something else and this is where we are going to use our navigate component so we call the navigate just like this so first of all what this logic basically does is it checks if the user is logged and if that is true it's going to show the Earth profile component if not this navigate component is going to trigger now inside this navigate component let's specify what pages to navigate back to if the user is not authenticated inside the navigate component let's pass a replace prop to it just like this and this basically means we want to replace this route with another route all right so after the replace and then we add a to prop and tell you what route to go to so we want to take the user to the login page if the user is not authenticated I think this is pretty intuitive so the navigate component replaces this route with the login route if the user is not logged that's basically what what this whole line of code does all right let's head back to our browser and see if this actually works so back in our browser Let's test that by simply trying to go to the off profile page from the URL if I hit enter you see we keep getting redirected back to the login page and if I try that again as you can see if I hit enter we keep getting navigated back to our login page and that works now let's actually log in and see if we get redirected to the Earth profile page properly so we've seen one side of the coin now let's log in and see if it works colao and then password 1 2 3 4 5 if I hit submit now you can see we have our off profile page rendering for us that's because we logged in and the user is now authenticated and that's why this works if I try to reload this page we should get redirected back to our login route since our application state is going to restart all right let's reload and see as you can see see we get redirected back to the login page and again let's try to go to the Earth profile page dynamically from the URL if I hit enter we still get redirected so this is how you protect routes in react router using the navigate component again I can understand if this is a bit overwhelming for a start but just as I assume you now know perfectly how to create a route and use the link component to navigate between Pages you will get enough practice to grasp every other concept regarding react router as we move into building project in the later sections of this course all right guys welcome to this lesson in this lesson we'll reconstruct our nav bar and add a few links to it so just code along with me so we are going to add two more links our search our search link so we just say link so we create a link component and we set the path for/ search and you should have a closing tag actually and the value is going to be search just like this I'm just going to copy and paste this and then we'll create one for our o our o user profile so that should be o profile and then we are just going to see profile and last we need to add a link to the login page but what we want to do is we only want the login link to appear when the user is not logged in so to do that we are going to take an is logged prop so we say it's logged and then we'll use that to check if the user is logged and that is the only time we want to display our login button or link all right so we add the logic here and say if not it's logged so if it's logged is false that is the only time we want the login button to appear so in here we just copy and paste this oh we need to use the and Operator just like this so if the button is logged this will happen so we want to log in the path will be loging and the value will be loging all right so if I head back to the browser and refresh um now let's try and login we can see we have the buttons here we have the search profile and login so all of these should work we have the search button the profile button obviously we added the logic obviously we added the route guard that doesn't allow us to access the profile page unless we are logged in so that is why if we click on the profile link it brings us back to the login page all right now that we're in the login page let's actually login and see if the login link is going to disappear afterwards so the username is kosa and the password is 1 2 3 4 5 I hit submit or it takes us to the profile page but the login but the login link is still there that's because we forgot to pass the is logged prop back in our app.js file so over here um in the login in the Navar Ned route inside the Navar component we just add the prop is logged and then we'll grab this is logged value over here just like this now as you can see the login link has disappeared and if I refresh and if I refresh as you can see we now I have it if I log in again 1 2 3 4 5 I hit submit and login link disappears all right that's that's the only thing we wanted to do for this lesson and in the next section we'll move into more advanced topics on react router thank you so much for watching this lesson and I'll see you in the next one in this lesson we will explore using animations in react router for a better user experience all right we will use react transition group to achieve this you can use other libraries like frer motion or any other one you want as well I chose react transition group simply because it's easy and uses pcss for its animation so everyone should be able to follow along all right let's install react transition group in our project now let's head to our terminal and terminate the process and then we do npm install react transition group just like this we hit enter and allow that to install all right once that's done installing let's do npm start again so we have our project running throughout sorry for the noise in the background apparently my neighbor is having a construction all right we we have our project back up and running now let's head back to our app.js file and we need to import two components from react transition group we need the switch transition component so let's import switch transition component the switch transition components basically act as a wrapper for all elements or routes in this case that will inherits from the transition animation the other component we need from react transition is CSS transition so we say CSS transition as you can see we have a suggestion here so these are the two transition components we need from react transition to achieve our goal all right so in order for this to work we need to Nest our entire route component inside of our switch transition and CSS transition components so let's define them up here so we say switch transition and then inside of it we also create the CSS transition tag just like this then we cut our entire route component and everything inside of it and then we paste it inside our CSS transition component just like this so what we just did is we basically just wrapped our entire routes inside of switch transition and CSS transition components all right but before this can work we need to define the animation effect we want during the transition the time it should take and a value that tracks our navigation so the animation can always trigger when the route changes I hope that makes sense let's actually see how that works in code to give you a better understanding so back in our app. CSS file let's define the animation we want for our transition we are going to add a fade animation so just code along with me so we say dot fade so we say fade enter so this is the animation that will start so we want opacity to be zero and then we also want dot feed enter active this is the animation that happen during the transition so here we set the opacity not object F opacity back to one and let's define a transition let's define a transition group of opacity we want 300 seconds 300 milliseconds and then we want the ease in effect all right so this is the animation that will happen during the transition and this is the one that will happen when the transition begins I hope that makes sense then next we also need a fade exit as the name implies the animation that will happen whenever the transition is about to exit so we still want the opacity here to be one and then lastly we want the fade exit active so this is the last effect that will happen in the transition and here we want the opacity back to zero then the transition transition group of opacity want 300 milliseconds again and then is out I think this is pretty straightforward this is the animation that will trigger when the transition starts this is the animation that will trigger during the transition and this is the animation that will trigger when that when the transition is exiting and then finally we have the animation that will trigger at the end of our transition I hope that makes sense now that we've defined our CSS transition let's head back to our app.js and make use of it inside of our transition component we are going to give it a class name of fade now the fade class name we've given to the CSS transition will be able to track all the animations we defined in our app CSS please don't also forget to import your app. CSS in your app.js file if not this will not work all right now that we've defined our animation there are also a few things we need to do in order for this to work now let's add the timeout prop so we say timeout we want this to run under 300 milliseconds just as we defined in our CSS over here we set our transition property to run under 300 milliseconds and I think that makes sense to also Define the same inside of our timeout prop so in here we're just going to say 300 and then also we want to unmount our animation when it's done so we just add an unmount prop over here unmount unmount on exit this basically is going to remove our animation when it's done running so that means whenever this class is activated and done running we are going to unmount the animation so the user can view the page all right now we've defined our animation and its timeout and what happens when it's done running but we also need a way for our CSS transition component to track our navigations so it actually triggers whenever a user actually navigates and react router offers a used location hook that does exactly that so let's import used location from react router Dom up here where we imported other react router components and hooks we can just add it over here say use location just like that now let's initiate it into a variable so we say const location is equal to use location just like this so still inside our CSS transition component let's add our location to its key prop so we say key is equal to location so we say key is equal to location so we want the path name from our location hook so we say location do path path name all right I hope that makes sense so the last thing we need to do is actually pass our location hook to our route so it changes the location variable whenever the user navigates and that is how the CSS transition is going to be able to track our location and actually Implement our transition so inside of our route component we are just going to add the location prop so we say location is equal to location as simple as this now whenever the route changes the route component is going to change our location value which is going to be detected by our CSS transition and then the animation is going to activate I hope that makes sense and then before we head over to our browser inside our switch transition component at the head level we give it a component prop and this usually takes a component in the case where you have like a rapper component that has custom CSS but since we don't have a wrapper component we are just going to give it a value of null all right now let's finally head back to our browser and test this out let's refresh the page and then let's click on one of the links from the Navar if I click on the users link you can see the nav bar animat but if you look at our main component it doesn't animate upon transition let's go back to the user page pay closer attention and see see the Navar animate and then the component changes abruptly that is not what we want we want the entire page to animate not just the nfar so what's the problem so this is a problem with nested routes as you can see we nested all of our routes inside of our nafar route here the easier solution to this is to unest our routes and find a better way to display our nafar now since we want the nafar in all of our Pages we can head to our index.js file where we have our browser router component wrapping our app component and we can simply add our nav component above it so in here we can have our Navar component just like this this will do the exact same thing we wanted when we nested the component inside of our nav component now with this we can unest our component so let's actually delete our nav route just like this and with this we have unnested our component all of our components now sit right inside of our route component and this na component will now be able to track all of our navigations since all other routes are directly under it as well as this might seem this is the convention and it really does offer a more robust way to display our Navar let's actually head back to our browser and see if this works now back in our browser if I refresh you see we still have our nav exactly the way it used to be before we unnested the component now let's click on one of these links from our Navar and see if everything animates if I click on users you see we have a smooth animation all over our page if I click on login we have animation let's actually test our login and if we log in we still have our animation being displayed for us if we head back to our homepage you see our animation works perfectly the way we want it to it's okay if this lesson was confusing or overwhelming for you we just need more practice to grasp these Concepts as with everything in this industry and that practice you are going to get enough of it as we build more projects in the later part of this course all right guys welcome to this lesson in this lesson we are going to learn how to implement lazy loading for improved performance but what is lazy loading in simple terms lazy loading is a design pattern it allows you to load parts of your application on demand to reduce the initial load time for example you can initially load the component and modules in the homepage then you can load the rest of the components based on user navigation now let's see how we can Implement lazy loading in react router first we identified the routes and components that we need to Lazy load these are typically components that are not required immediately when the application loads so for us those will be all other components apart from our homepage components so that means we can lazy load all other routes and components apart from our homepage route then we replace the input statement of those components with Dynamic input using react lazy function let's see how that works we are going to start with our users's component and see how we can import that using react lazy so down here we are just going to say const users and this is going to clash with this component but eventually we are going to have to delete this so let's just see how that works for now so con users then is equal to so we are going to grab the lazy Hook from react so that will be react La just like this and this takes a fallback function as you can see for the component we want to import so in here we are just going to declare an arrow function and then import the component we want to import since this is for the users component we are simply going to import it here so we are just going to copy the import path from the direct UT we did copy and then we'll paste it in here that's all so this is basically how we lazy load a component we simply import it using react. La just like this and we're having this error because the users is already defined op here now let's clear the direct UT since we've imported it using react lazy all right now let's do the same for all of our component except for our homepage component since we want to Lazy load all other components as you can see we don't have react imported here so I'm just going to import now let's actually the structure lazy from react rather than having react. La we can simply have lazy so where we have our react input next to our use State we're just going to say lazy and then we can remove the react just like this to do this for the rest of the component I'm just going to copy and paste this code and then we simply start changing them one by one next let's do the same for our user profile page so I'm just going to copy the name user profile and then the path to the component paste it in here next I'll do for our search user component chck CH this and then we copy the path and then we update this also next we'll do the same for login component change this and then we copy the path and then we update that also oh sorry I I mistaken click contr C and then we we replace that also we still have a few other components to do so let's just copy and paste all of these again so you have like three we have our o profile copy the path and then we paste it in here so we'll do the same for about component so over here and then we copy the path and then update it so we are not going to Lazy load our homepage component because because that is the component we want to load immediately a user enters the application so it doesn't make sense to Lazy load that component we have an extra input here which is not needed can clear that and then all the components we've lazy loaded we can simply remove all their direct input so I'm just going to copy from o profile down to our user down to our user profile oops we forgot our not found component which we want to Lazy load also so I'm just going to create another one add our not found component and then we copy the path just like this and then we can remove that we no longer have our naar in the app.js file so we can also remove that and then yes we also Las loaded our about us page so that can go now instead of directly importing all components we've Las loaded some of them and those are the ones we don't need when the application initially loads so the home component that is needed when the application loads immediately is going to load way faster than it used to because all other components have been delayed all right as much as this offers a better performance for application if the application is big enough it can still mean that a user has to wait for a lazy loaded component to load when they try to access that component and they will see a white or blank page for a few seconds that is really not ideal for user experience well react offers a component called suspense and this component provides a solution to that problem let's import the suspense component and then see what it does so import suspense so the suspense component allows you to show a fall back UI while the lazy loaded component is being loaded so we can create a simple H1 that shows loading or some other components of our choice before the L loaded component finish loading let's see how that works actually now all we need to do is we need to wrap our route inside of our suspense component so I'm just going to cut the route over here and everything inside of it and then we declare our suspense component and inside of here we can paste our routes all right and then we can Define our fallback prop say fallback and here we can put in a component we want to show before the lazy loaded components actually show up so for this one we just want to show loading we can easily use a H1 tag H1 that shows loading just like this now now if we head back to our browser and test this we might not see the loading from the suspense component and that's because this application has relatively small component so they should be able to load up pretty quickly even when we are using lazy loading let's see for ourselves so let's go to the homepage so if we go to the homepage and refresh our application let's try navigating to another page and see if we will see our loading you see we don't see any loading this might be because of the animation we added or or this might also be the fact that our users page is a relatively small component so it doesn't need a lot of time to load up but by the time you have a complex and big application this is a real game Cher so if you don't get any errors as you are testing yours and everything seems to be working fine that's a great sign and you can just assume it works but by the time we build more complex applications you really see the power of lazy loading all right my friends welcome to this lesson in this lesson we'll learn about code splitting and Route configuration instead of defining routes in line you can create a separate configuration file to manage your route this approach allows for better organization and separation of code you can Define any array of Route objects that specify the path component and any other necessary properties for each route then you can map over this array to render the route dynamically let let's see how that works first back in our code let's create a route. JS file since this is not going to be a component we are not going to create this inside of our component folder so inside of our source folder rather we're going to create we're going to create the file routes.js and this is where we are going to dynamically Define our routes so this is going to be a list of objects containing all our routes so we say export const and then we are going to name it upout and this is going to be a list all right before we actually Define the object let's import all of our page components into this file so we can simply go back to our app.js file and copy all the lazy imported components over here first go back to our route. JS write above our routes then we paste that in just like this you can see we also need to import um lazy from react so we're just going to import lazy and that should be from react just like this so we're also going to import our home component as it's not part of these so home um we don't have a suggestion here import home from for SL component for slash home just like this now all of our components we need I imported over here now let's create the routes for them inside of our square bracket let's create object for them so each route needs a path and component property so let's define the path we're going to start with our hom page so the path for our homepage is obviously just a for slash because it's the index and then the component are going to define the component and we're going to set that to our home just like this now we can simply copy and paste this object and modify it for each route but before we actually do that I want to bring something to your attention there's one more property we need to add if we head back to our app.js file we have a guarded route over here which is our Earth profile route and this route is only going to be accessible to the user if the user is authenticated now if we Define our routes Mainely by having a path and component it's going to be difficult for us to render our guarded route so for that we are going to add another property which is requires which is requires o and we're going to Define this in all of our routes and set it to fals where it is not needed our homepage doesn't need the user to be authenticated to display so we are going to set that to false and when we get to our Earth profile we're obviously going to set that to true now let's copy and paste this object and modify it for each of our routes copy paste I'm just going to paste like five of it and then and change them one by one first now let's move to our login for/ login and that will take login component it doesn't require us now let's go to our users page for/ users and going to take the users component we not user profile now here is where we are going to add our o profile component o profile and this is the component that needs the user to be authenticated so the component is O profile and requires o is now going to be true this is what I was talking about all right what other Pages do we have um we have user profile and search user so we just going to say for/ search I think that's what we used that should be search user component it doesn't require off and then we need like three more um what else what else what else or profile user profile what did we what was the route for the user profile we defined let's check that um user profile is for SL user oh it's for SL user for SL okay this is our user profile path I just going to copy that um where is it okay I just space that in here all right so we just say user profile doesn't require authentication what other routes about us are not found so here we just want about about us doesn't require authentication and then for the last one so the last one is going to be our not found component and this is going to be the wild card symbol or Star I think we've explained this before so whenever the user goes to another page that is not defined within this um the not found component is going to display so let's actually change that not found it doesn't require authentication all right now we defined all of our routes inside of this route. JS file now let's head back to our app.js and implement this first of all let's import our rout so import up rout all right in the route wrapper over here we're going to clear all the route inside of it and then we are going to open col braces and use a map function to map through all of our U routes we defined in our routes.js file so that means we're just simply going to do app route map and then for each route we want to render and in here we are going to Define how each route is rendered all right if you recall we have a route that is guided which means the user can only access that route only if the user is authenticated I know I've said this a billion times before for so just bear with me so now we'll start by adding a condition that checks if a route needs authentication to render and then we'll put the logic there and if not we'll just display the route to the user so just code along with me so we say if route do requires if route does requires us and then not is logged so we want to check if the user is not authenticated for the route that requires authentic if that is the case we want to return the user to the login page just like we did before using the navigate component from react router all right so if this case is true we simply return so we are going to return a route and then in here we can simply pass the key property to it and this is going to be route do path and then we want this to be exact and then and then the path prop is going to be route. path just like this and this is where we Define the redirect component if you recall we use the navigate component to redirect the user back to the login page if the user is is not authenticated for pages that require authentication so this element prop is simply going to be our navigate navigate component is going to navigate it's going to replace this component and it's going to take the user to um for slash login should be for slash just like this so if this condition is false so we say else every other route will be accessible so simply we just render the rest of the route inside of our else statement so else want to return here we Define a route and inside the route we give it a key prop off Route do path we add the exact prop and then the pth prop is going to be route. path and then the element the element is going to be now the element over here obviously needs a react component so we can't just say route do component we have to declare that as an element by itself so here open angle bracket and you can see route do component just like this and this is how we add our rout in our element prop all right if we head back to our code you can see this works perfectly for our hom page but a problem might arise when we try to get to the authenticated user profile page you can see we have an error set username is not a function let's see what this is back in our components let's go to the login.js file you can see the login component takes props set is logged and set username and so does the Earth profile. JS file this component also takes a username prop and back in our route we didn't specify any prop for the route over here we can simply pass our props inside of our element property over here so inside react. component and if you also hover over it you are going to see the props some of the components need and that shows you that you can actually Define them inside of this place so where you have route. component we can simply pass our props set is logged come from set is logged which we already defined over here as you can see we also need the set username and username so we have set username set username and then username will be equal to username so when we Define the props like this whichever component needs one of them is just going to pick it up now let's head back to our code and see if this works now let's try and log in so the username is kosa and the password is 1 2 3 4 5 if I hit submit we have a page note found over here did we make a mistake in our routing let's go back to our rout and see oh the problem is that we set the path to app profile rather than off profile so let's change that going to change this to Earth profile just like this if I head back to our browser let's refresh let's try and login again 1 2 3 4 5 submit as you can see everything works fine let's refresh our page to see if the Earth profile route is still protected so if I click the profile we get redirected to our login page because the user is not authenticated so that functionality still works and again if I log in 1 2 3 4 5 you see the page is now accessible all right everything seems to be working perfect so if we head back to our code and go to our app.js you see our code looks more robust and whenever we want to add a new route we can just go to our routes.js file and then we can handle implementing that routing over here that's a lot more convenient than having everything clustered in your app.js file all right hello guys so I've been mentioning that there's going to be another project where we will solidify our knowledge of react router but I know that there will be a majority of you who are okay with what you've learned already and you don't need more to understand these concepts for that reason the course will end after one more lesson but in order to keep my promise for those of you who will want to build another project with me to understand Rea better I have uploaded the last project over at my YouTube channel and you can go ahead and watch it over there I want to congratulate you and thank you at the same time for watching the course till the end I really really hope you have become better using react router last but not the least if you like my teaching style and would like to see more and related courses from me I ask that you subscribe to my YouTube channel and stay tuned all right guys welcome to the final lesson of this section before we head over to building a project from scratch by ourselves which is where you solidify your knowledge of react router all right in this lesson we just want to make sure if we click on this button over here it takes us to the user detail page and also if you click on this it takes us to a repo Details page right now if you click on it it does nothing and it's actually a button inside of a button so we're going to fix that um and just see how everything works I just need you to code along with me so if we go back to the home. we first of all we need to tackle um this user button here to take us to the user Details page all right that should be this so this button we simply need to turn it should we turn it into a link or we should just use um a navigate I use a navigate function here let's see let's try turning this to a link first and see how it looks like so we're just going to say two and I should go to for/ users let me just check the UR let me just check the route name again user Details page user users user and then the username all right back to our homepage users user and then for slash oh we need to use back to um but that's okay I'm just going to remove this and this okay that should be user. login oh yeah this is it user. owner. login so we just copy that and paste in here just like that let's head over to our browser and test it okay it doesn't look like a button anymore we want it to look like that so I think it would be better we just use the button elements rather than the link elements um but if I click on it okay it works let's head back and try that again actually um now let's let's click on this guy over here all right it works but like we said we want we want it to be we want this to be button and not a link actually we can just leave this like this we don't really need to turn this to a button because if we turn into a button it would be quite the same as this I think it's better we just leave it at a as a link all right that one is done now we are just going to fix this can see it's kind of like we have um nested buttons in here we don't want that we want a single button that has an on click element or we can WRA we can wrap a link element inside of each rather so this is it here as you can see view repo it's a button inside of a button and we are simply just going to turn this into a link two so we won't be using any us navigate function over here so link that is going to link to um view repo okay the page we need to view the repo detail hasn't been created so we need to go ahead and create that let's head back to our route and add a path through it so we can just copy and paste this and then we can say repo detail repo detail and that's component and that should be repo detail just like that uh let's add it next to the repost okay that's the homepage let's just add it below before the not found Route so we'll copy the about route paste it in here and then we'll say this should be repo detail and this is supposed to take two parameters right so back back in our repo detail. JS file we have two parameters here we're expecting the name of the repo and the username of the repo owner so we are just going to copy that head back here put to for Slash and then column for the parameter you want we paste that in first we need the name parameter for slash column and then the next parameter this is how we do it so now um just need to use the repo detail does it need authentication no it doesn't all right let's refresh our code back in the browser see if we don't have any errors I refresh um yeah I think you see we don't have any errors now let's implement the functionality where if we click on this button it takes us to the new repo detail page we just created all right back to our homepage so this view repo link over here it should take us for SL repo detail that's just the um the new path we just created we can copy it also SL username and for Slash so back in our home we actually need to take turn this into a back tick since we're adding a variable to the path so we just copy that in here and then we can change them one by one so for the name dollar so this is the name of the repo um I think we use it up here all right so that should be repo name paste that and then the the username of the repo owner that should be repo owner. login you copy that our dollar craes and then we P that in there now I think that should be all let's head back to our browser and see if it works first I'm just going to give it a refresh all right now let's click on the first triple we should now see that it works now we actually added functionality to go to the user Details page when we click on this button so let's test that click on it right takes us to the user detail page everything simp to be working fine all right my friends um we've had to digest quite a lot for this course I know it's a lot for you guys but don't worry when we build the next project from scratch I think that is where you start to grasp this concept and when you also do your own projects afterwards that is when you solidify all the concept for react shter and always remember I'll be here to help you out whenever you need anything at all regarding this course thank you so much for watching this lesson and I'll see you in the next lesson