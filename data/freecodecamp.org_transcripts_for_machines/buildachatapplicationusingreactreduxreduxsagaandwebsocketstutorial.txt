in this tutorial we're going to build a chat app using react redux redux socket and websockets this is actually based on a tutorial by flavio copes and i'm going to link to that article in the description so in this basic chat room program every user that connects to the server is registered upon connection and they get a username and then they can write messages that are broadcast to every connected client this is going to be a distributed application built using a node.js server and a browser client written in react and then we're going to use redux to manage to manage the data and then manage the side effects using redux saga so it's good to have some experience with react and redux but you don't need to if if you need a refresher on react or if you've never used react before you should check out my my my introduction to react video so check the link in the description for that we're also going to handle the client server communication using websockets also you can see the entire source code on github in the link in the description so first we're just going to install create react app so i'm just going to npm install g create react app okay after that we get that installed we're just going to use the create react app quick starter so create react app chat okay now that's installed let me just clear my screen i'm going to cd into the app folder which is this chat so it's cd chat and then i'm going to do yarn start so over my web browser we can see on the local host we have the basic welcome to react screen so we have created our our basic template so our quick starter has worked once we finish our app we're going to have the basic layout where we're gonna have a users list on the side we have the message list up here and then at the bottom we're gonna have the the new message box to do this we're gonna create a static version of the chat using plain html and css so the code for that is pretty simple i'm in sublime text right now and you can see all the files on the side that were created with my create react app starter okay i'm going to start with the css i'm just going to go to the source directory and then this app.css file this was all just put here by default so i'm going to change this just for this section i'm just going to paste in the code all the rest i'm actually going to type on this tutorial but this is not really focused on css i do have a link to this exact css in the description of the video so you can go and grab that and then be able to paste it in so i'm going to save that and then i'm going to go into app js here so here's the default stuff but we're going to change this a little bit specifically everything in this return we are going to change i'm going to have an aside id equal sidebar and it's just going to have the users over in that sidebar and then we're going to have a section with an id of main let's get this here and inside that section we're going to have another section with an id of messages list it's just going to say messages list and then one more section i'm just going to duplicate that line and this is going to be called the new message section and then we just have to end this other section oh one more thing we do need to change this default up here so this is going to be id equals container that will work with our css a little better okay now back in our website i did zoom in on this website 300 so everything was a little bigger but you can see we have a user section a messages list section and then the new message section so this is what the basic layout of our app is going to look like okay we're going to use redux to manage the state of our app so that's how we're going to manage all the data in our app so we're first going to have to install redux so let's do yarn add redux react redux okay now that redux is installed we're just going to translate this basic html layout we added and just prepare it to fill in the components we'll create later so right up here i'm going to import some things i'm going to import sidebar now this is something that we haven't created yet i'm going to create it import it from containers slash sidebar and we'll create that in a little bit here i'm going to duplicate those two lines and now a sidebar will become messages list so i see i'm double clicking the word to select it and then i just do command d to select the next occurrence and then i can edit both at the same time by the way to duplicate a line i just said shift command d to duplicate and now i'm going to change this stuff down here instead of having this aside we're actually going to have the the sidebar container so i'm just going to put sidebar and then we still have the section id main but for this section it's now going to become messages list and then this section is going to become the add message now these three components are all going to have a presentational component which manages the user interface and a container component which manages its behavior and the data that the presentational component will show so let's go over to this index.js file and in this file we are going to initialize redux and then we are going to import the chat reducer and then create the store now reducers are just part of redux so this was all this code that was already created by the create react app we're just going to import a few more things we're going to import the provider from react redux and then we're going to import the create store from redux now the create store is where we're where we're going to store all the data for the app the only other thing we're going to import is chat from reducers and then i'm just going to create a const here const store equals create store and like i said that's going to be our our data that we're going to be using we're going to it's going to use this be stored all the data for app and we're going to import see we're going to pass in our reducer which we're still going to create this this chat reducer we still have to create but that's what is going to be able to really get in all the our all of our data into our our store it's just part of redux and then down here where it's rendering something we're going to mix things change things up a little bit okay i'm going to add a provider i'm going to use the provider and set what the store is it's going to equal store and then we have the app inside it and then provider now we're going to create the actions in redux whenever you're going to change the state you do it through an action because the the store the overall state for our application is read only we're never going to write directly to the state and when we're going to do all through an action so we're going to create a new folder in here i'm going to go to new folder and this is going to be called actions and inside this folder i'm going to do a new file index.js we are going to first import star as types from constants action types now this is another file we're so we're going to have to create we're going to bring in the types from this other file that we're going to create in just a second so i'm going to let next message id equal zero and const next user id equals zero so i'm just gonna set up some data we're gonna use in here and here's the first action we can do const add message equals message author so if we're going to add a message we're going to call this action add message and we're going to pass in the message and the author or who the message is from so we're going to send the message it's going to have a type of types dot add message actually let's go just go and create the types right now so that was in this file constant slash action types so i'm going to create a new directory here new folder constants and in constants i'm gonna have a new file called action types dot js sometimes you can do constants in the same file but when you're gonna have a bigger application it's gonna be better to break things up into different files so i'm just gonna do export const add message and this is going to be pretty basic it's just going to be add so the constant add message is just the string add message so i'm going to do do command shift duplicate and we're going to duplicate that four times and uh command d select the next occurrence message received i before e except after c okay so now we're going to do this add user and users list actually for a small app like this we don't even really need to have constants like this we could actually put this as a string right here instead of going to this constant but it's just good practice because when you get to a bigger app you're going to want to use constants like this just in case you want to change things later it makes things a lot easier to change okay let's continue adding our message so when you add a message it's going to have the type which is add message that's the type of the action we're going to have the id which is next message id plus plus so you can see up there that it starts at zero and then for each i'd for each message this gets added it will just increment the the message id and then we're going to include the message which is what was passed into this action and the author which was also passed into the action and now we're going to create another action export const we're only going to have four actions there's gonna be add message add user message received and populate users list so this one is going to be add user and i'm going to just pass in a name and the type is going to be types.add user and then the id that's why we we started the user id at the top is zero so this is just going to be next user id increment and then obviously we need the name that was passed into this action because that's going to be the user's name and the next action is going to be message received and so we're going to pass in the message and the author now it's going to be type types dot message received and then we're still the id is going to be just like the add message where it's going to be next message id plus plus now the reason why there's a oh oops this was supposed to be lower case the reason why we have the add message and the message received that the and they both have the same type of id the difference is add message is when the the current user like you are adding a message messages received is when the other user in the chat program is adding a message so you're receiving a message from someone else is message received but the message id is still going to increment both ways okay i was looking how the the colors uh like this wasn't green up here i think i need this um carrot here oh there we go so i need that more than sign to make this into an arrow up there okay back to here we're gonna pass in the message and the author and one more action export const populate users list equals users and the type is going to be types.users list and then we're going to pass in the users well those are our four actions you can add a new message a new user can be added to the chat a new message can be sent and the server will send updates the users list when a person joins or quits the chat now these are the actions but the actions don't actually change the state so this right here is showing that when you add a user it's basically creating almost this json object here but that's not actually changing anything that's what the reducers are for so the reducers take care of creating a new state when an action is dispatched so in particular when a message is added by us we're going to add it to the local list of messages when we receive a message from the server we add it to our list of messages when we add a user we put it in the users list and when we get an updated users list from the server we refresh so let's start creating those reducers that are actually going to change the state of our app so let me save that file and i'm going to create a new directory so in the source file i'm going to go to new folder and it's going to be called reducers and in here a new file and the first one is index.js uh let me just let's see let me make sure everything's saved i'm gonna close some of this stuff for now okay so i'm in the reducers index.js and we could put all of our reducers into one file but since we have both messages and users we are going to create this one file we're actually going to break it up into two files the messages reducer and then the the user's reducer and then this file index.js is going to combine the messages and user's reducer into one reducer so it will make more sense as as we go here but we're going to do combine reducers from redux and then we're going to import messages from messages and we're going to import users from users and then these messages and users are something we still have to create those but first we're just going to finish off this file cons chat equals combine reducers now and you can see about the combined reducers just comes from redux and we're going to pass in messages and and users so this is just combining two reducers into one reducer and we're going to export default chat oh i spoke export wrong there we go and save that so we're done with that file and i'm going to create another file in the reducers directory this one's going to be called messages dot js the reducer is what actually changes the the state of your application so this is going to change the state of the messages in our application so first we're going to const messages equals state in a reducer you always pass in this the current state and an action and you return the new state so when we call messages you always pass in the state and the action and if there is no state it's going to be set to an empty array but if there already is a state it will pass in whatever the state of the messages are if there are already messages you'll just pass in the current list of messages and the action and it's going to return a new state so let's figure out what we're going to do now so we have switch we're going to create a switch statement to figure out which which type of action is happening so we have action dot type so that's the action that was passed in and uh just to kind of make this more clear let's go back to our uh our action file so so this is an action that could be passed into our our reducer you can see there's a type an id a message and an author so we're passing in that action and so uh is the when the action right here is the action we passed in so the action.type for instance would be type dot add message that would be an example of one of the the types so let's finish this switch statement so if under the case of add message so if we pass in the type of the action of add message we are going to do something but actually we're going to do the same thing whether the case is add message or if the case is message uh received so we're just going to put two case statements together and we are going to return state dot concat so state.concat basically means we're going to take the current state and we're going to add this on to the end so we are going to let's see here we go yeah we're going to add a new message met the message is action dot message that's what we pass in with our action the author is going to be action.author and the id is going to be action dot id and change things change the indentation a little bit okay so now we're going to go back to to the default so the default is the default just means if wait a second if it's typing this first okay so we have these two cases if those cases we're going to add a message and return the state with the new message which is just the state with adding this new message on it if the action is not add message or message received we're just going to return the state with the state that was already there so so we're not going to change the state at all we're just going to return the current state and then down here we're just going to put export default messages and we're going to actually i'm just going to do some refactoring here see how i use the string we did make this this those constants over here these action type constants so i'm going to change this to use those action type constants so let's see i'm going to import star as types from constants action types and then here i'm going to just change this to types dot add message with without the quotation marks um types dot message received okay looks good i'm going to copy this top line so i'm going to use this in the next file i'm going to create i'm going to go to a new file and this time it's going to be users.js and in this file like i said i'm going to start with this importing the types because we're going to use those again and this is going to be pretty similar to the last file users equal we always pass in our state which if there isn't a state at all yet it'll become an empty array and we're going to pass in our action and then we're going to do something with that so again we're going to do a switch statement to find out what action was passed in action dot type now this time the different cases will not be exactly the same so if the case is types dot add user we're just going to return state.concat this is going to be pretty similar to the the messages one we're going to concat a new user onto here name action dot name and the id is going to equal action dot id now we're going to get the case of types dot users list and then we're just going to return action dot users basically instead of just adding a user to the list when we call the action users list that means we're getting in a entirely new users list so we're just going to return the so the state of the users just becomes the entire users list that was just passed in instead of adding one user onto the current users list and then the default is going to be return the default is always the same it's always return state if you didn't pass in users add user or users list then we're just going to return the state and then go down here export default users and we're done with that file if we go back into our original app.js file and then remember we import the sidebar messages add message these containers now it's actually time to create those containers now if we go back into our original app.js file we can see the components we're using a sidebar messages list add message now we're actually going to create those components so let's start with the add message components first i'm going to create the folder called containers because you can see we put them all into a folder called containers and in here a new file called add add message dot js so this is going to be a functional component that's pretty simple it's going to create an input field into the new message section of the page and when the enter is when the enter key is pressed we're going to dispatch the add message action passing the value of the input field so let's start that we're going to import react from react import prop types from prop types const add message equals props and we're gonna let input we're gonna create this input variable here and we're gonna just return the actual component here section id it's gonna equal new message and input on key press so if someone press the key into the input field we're going to do something here if e dot key equals equals equals enter so anytime you press the enter key we're going to props dot dispatch here we're going to dispatch an action and we're going to pass in the value of the the input field and then we are going to pass in the the user's name so the value is the the message that's being sent and then we want to know the user of the who is sending that message for now we're just going to set it as me me is sending the message and then we're going to set the the value to an empty string so that's the the value of the input field so it was whatever you typed in and now it's just going to be nothing because you've sent the message to make this props that dispatch work i'm going to go down to the bottom here and put add message dot prop types equals dispatch prop types dot font dot is required okay now we're going to go up here and we're going to add some more information to the input field here the type of this input field is going to be text and for the reference input equals node and then i'm just going to in this section here and i'm going to move this parenthesis to there and the last thing is export default add message so next up is going to be the message component which is going to render a single chat message by using the author message format so what i'm going to do is just duplicate this this add message and this is just going to be called message and i'm just going to change some of this stuff so instead of add messages message we're going to return something different here let's see we're not going to have the input we're going to pass in two things a message and the author okay i'm going to take out this whole section here and put parentheses and inside the message we're just gonna have a p tag and we're gonna have the author and the message from the message.prop types we're going to have message is a string author is also a string and then export default message okay i'm going to save that file so this message is going to be rendered by the message list component which iterates over the list of messages so instead of duplicating i'm just going to copy this beginning that i'm going to kind of reuse in my next file new file and this is going to be called messages list also in my containers folder dot js and put in the beginning thing here this is going to be called const messages list and and here it's we're just going to have the messages and we're going to have a section of id it's going to equal messages list and then this is just going to be an unordered list inside is messages.map and for each message in the messages list we're going to do the message the key is going to equal message.id dot dot message and then i'm just gonna end the unordered list tag and in the section tag and then i'm gonna declare the prop types here messages prop types dot array of so let's see what's gonna be in the messages we're gonna do prop type dot shape id prop types dot number dot is required and message prop types dot string dot is required and let's get a comma here duplicate author so we're gonna have an id a message and an author for for each message and just add another is required here and another is required final thing is just exporting this okay now we finish the messages list so we're going to create the sidebar component which instead of iterating over the messages is going to iterate over each user so i'm just going to do a new file and let's try that again new file and i'm going to do sidebar.js and just like from the messages list where um some of these things start the same so i'm just going to copy this first few lines we're going to import react and prop types instead of cons message list is going to be const sidebar and instead of messages we're going to put users we're going to have this aside here and with id equal sidebar and class name which is the same as class is going to equal sidebar then we're actually just going to make an unordered list of all the users so let's do users.map we're going to pass in or for each user i mean we're going to do a list item li the key is going to equal the user.id and then we're going to have user.name so it's going to show each user's name so that's the end of the list item and then that's also the end of the under list and that's the end of the aside now uh let's see we need a final parenthesis to end that and then we just need to set up what our prop types are so sidebar dot prop types equals the the users which is prop types dot array of new prop types dot shape so we're going to define the shape of this property we have the id which is just prop types dot it's gonna be a number is required and then i'm just gonna um copy this line and this is going to be name is prop types dot string is required and this whole thing is going to be dot is required and also this whoops what i do here i'm going to put that to the next line dot is required and then we just have to export the default sidebar okay we just finished that one now we're gonna make our containers and actually we already have this containers folder is because i lay i actually misnamed this this was actually supposed to be the components folder so i'm going to rename this containers folder components and now i'm going to make a new folder that's containers so containers basically we're going to generate the container components for the for the presentational components so in this components directory which i just renamed these are the presentational components and we have to make the container components and then we're going to use the connect function from react redux so this is something that we do for redux so i'm going to create a new file here and this is just going to be add message dot js so all the names are going to be the same from the the container for from these other components like we have this add message here now it's add message here and it's going to be a pretty simple file first we're just going to import connect and this will help us connect them together from react redux and then i'm going to import the add message component which is the one that we created from and i just have to put where it's located components slash add message and then i'm going to import one of our actions the add message the add message action from our action folder actions now we're going to const map dispatch to props it's going to equal dispatch and and here we're just going to find what dispatch is going to be dispatch we're going to pass in the message and the author and dispatch so this this dispatch right here is actually right from redux so message message and the author and i'm going to fix this here now i just have to export that const add message and here's where we use the connect so connect and we're going to pass in this empty object here oh a comma here map dispatch to props and message component so this is basically going to connect to the add message component so i'm just going to save that and i'm just going to re duplicate this but this time it's going to be called messages list we have to do this for for each of our components that we created so in messages list we're going to have connect we're going to have this time we're going to have messages component so i'm going to change this to messages component and oh actually it's message messages list component and then for instead of add message it's going to be messages list so messages list and we don't have to import this action because we are not going to do the action before we use this add messages action but we're not going to do that actually we're going to actually get rid of this whole thing here we don't need any of that so const instead of add message it's going to be messages list equals connect and here you know i'm just going to start this from scratch here so connect state i'm going to pass in the state and it's going to be messages state dot messages and this here then the messages list component and then one more this one's gonna this for the the sidebar sidebar components be very similar to this so again i'm going to well let me save this and then i'm going to duplicate this is going to be sidebar and then here it's just going to be sidebar component now i just did command d to select both and i'm going to put sidebar component and then just change this to the word sidebar and we change this to the word sidebar it could have done this all at once sidebar and here it's just going to be um instead of messages it's going to be users and see i just did this both these at once users and users and we're done with that one so i'm going to save that and at this point we've done enough to actually do some tests here so let me go back to my browser and fail to compile you know maybe i should have been checking this all along we're gonna there's probably a few things that i've had a mistake on it looks like i'm missing a closing tag let's wait what file that was on sidebar.js so let's go over here and i need a closing tag there now i'm just going to restart my server here and let's see what happens okay messages.js line 13 so let's try that in that reducer so let me go back to let's see the reducers messages.js line 13. i may not need this one okay can't resolve constant slash action types let's see let's go back to that users.js constant slash action types okay i see what i did wrong i um this this folder is spelled wrong so let's uh rename this uh constants done and let's now let's see what's we got going here okay we're gonna restart the server again okay can't resolve containers slash edge and message app.js container slash add message so let's see what's wrong there okay we have app.js containers slash add message let's go to containers slash add message and oh okay here's the problem we have the containers in the wrong spot so this should actually be in the source folder so i'm going to move this and it's just me chat slash src slash containers and now let's see what happens i'll save that and it's compiling okay we have another problem next user id is read only so let's see what we have to do um go with index.js that wasn't it uh oh actions index.js so let's go here oh this is gonna be a const this should be a let so let's save that and now let's see what happens let's see unexpected token oh i forgot the end thing again i think they copy and paste it so components add messages um right here finish that let's just check all these while i'm here um all those seem right so let's go see if it compiled okay unexpected token add message okay components add message line 17 okay my problem here they didn't have an equal sign so let's save that and compile again okay let's see components add message line 20 components at message line 20 right here oh i didn't i didn't close my input above there so let's do close the input okay expert message received and prototype was not found in constant action types let's see actions.index um this is this be e i let's see what happens now message list does not contain export name messages list let's see containers messages list okay the problem is i have a s here when there shouldn't be an s let's save that okay this is another one where there's a singular plural issue so let's see container slash messages list okay containers messages list oh again this should be singular and let's see if that works messages is not defined messages list line eight let's see components messages list messages is not defined i think we have to import import messages from message and i'm going to do import message let's see if that works okay can't resolve component slash sidebars containers you know i'm having part time with these uh plural things so um this should just be sidebar now let's check that oh spelled users wrong oh i'm in the wrong one line seven users compiled with warnings that means they actually compile and it's actually looking how it should look so let me put something in the bottom here hello and it appears hi so i put a message in there and it's going to show it above here so now you can see every time it says me serial is good so right now we only have one user me and it appears right up here from the messages so that's good we're getting somewhere now we have to add ourselves in the user list you can see there's no user on the side here and it should show the list of users since we're not actually talking into anyone yet we should at least see me in the sidebar later on we'll add additional people that join the chat we already have the add user redux action so it's a matter of calling in our index.js file after initializing the store so we already have the the add user redux action if you go into the actions you can see the add user here so it's a matter of calling in our index.js file after initializing the store so we're going to go over to index.js here and after we initialize the store here we're going to do store store dot dispatch and we'll dispatch the add user action and just going to add the user me and this is just how we are going to register ourselves as present in the chat and since we use this add user here i'm going to have to import that so import add user from and we're just going to import it from actions and i really should have paid attention to these warnings before expected to return a value in the arrow function and expect an assignment function call except so i think the problem here is that this should be a parenthesis instead of a bracket so let's change this to a bracket a parenthesis here and save that now let's see if this works good less warnings logo is defined but never used i'm not going to worry about that and now it just showed me there so that's the the user there hey do you want a marshmallow it's probably spelled wrong that's okay because in chat you can spell things wrong okay so let's go back over we just have a few more things to finish up okay i'm going to just close some of these files here um we're about to get started on the server side part a chat that is local and that does not communicate with the network is just not not super interesting so we need to be able to be able to talk with other people through a server so we're going to create a centralized server where users will log into and then they can lock they can talk to each other so we're going to go back to um at the chat folder up here and i'm going to create a new a new folder so this should be this is just me called server and it should be at the same level as the src folder so inside server i'm going to create a file and this file is called app.js so we're going to use the the native websocket object in the browser which is pretty widely supported and use the ws websocket library on the node.js server so so here's the server we're gonna do a const websocket equals require so that's the the ws websocket library we're going to create the the web the websocket server new websocket.server and then we just have to put in the port here we're going to use port 89.89 so that's the port we're going to connect to and we also want to keep a list of users on the server so we're just going to initialize the variable users empty as an empty array and we're going to finish creating the the server here we're gonna const broadcast uh data and we're gonna pass it so passing the data and the web server so for each client that's uh attached to the web server so if the the client is in if the client's ready state is is in the websocket that open and the client does not equal the websocket we're just going to do client dot send and send the data json dot stringify data okay let's go down here now here's where we the web server is going to send different things depending on what's going on so on connection pass in the websocket the index so the the websocket servers received some data and it's received a message so we're going to parse the the message into our data variable dot parse and then we're going to switch statement because depending on what the data actually is we're going to do something different so data dot type if the the data message is showing add user then index.users. wait index index equals user dot length and users.push we're going to actually just push the user onto here and the name is going to equal name or data dot name and the id is index plus one then ws.send we just send the user the user list here so json.stringify type users list and then we're going to send users so the list of users now for the next case which is oh wait we forgot one thing i go up here and broadcast type users type is users list and then users so to send it we have to do the ws that send this and then we also have to broadcast it and let's see and then also the the websocket and then break it so now we can go back to this case case add message this time we're just going to broadcast with type add message and then the message data.message and the author data.author and then also we have to pass in the websocket instance so then we break and the default is just going to be to break because there's only two things that the server does adds user and adds a message now up here we just showed what happens when there's a connection to the websocket server but now we have to show what happens when when things close so let's go down here so ws.on close users dot splice index one broadcast so when it says users.splice index one that's just removing that current user from the users list so if someone closes their browser it's just going to remove their their username from the users list so i put users list users and ws and and that's it that's it for this file so i'm just going to save that file so basically in this file as soon as the client connects we're going to start listening for the add users and the add message events so as soon as a client connects we start listening for the add user and then the add message event and when the client connects establishes a connection to the server it will send the add user event with the name and then see we just add it to the server side so here we're just going to add it to the server side list of users and then issue a broadcast to all the connected clients so when we add a message when that when the add message event is sent to the server we broadcast it to all the connected clients so everyone connected to the server will get that message and then on the connection close we remove the user's name from the list and broadcast the new users list so that's that's what i was saying here and then it broadcasts a new users list to everyone so they know that there's no use that user is not on the list anymore and so on the client side we now need to initialize the websocket object and send an ad user event when we connect to the client we're also going to have to set up where the client is going to listen for the add user and add message events from that are broadcast to the the client uh and just one more thing you can see we use the the strings here instead of the the constants it's because the server can't actually read this constants anything from the constants folder because the client and the server are completely separated so in the in the src folder that's the the client side i'm gonna create a new folder just called sockets and then inside that folder i'm going to create a new file called index.js so this will have our our sockets information obviously so first i'm just going to import the action types so it types from constance slash action types and then i'm going to import the the actions we're just going to import the exact actions we need so it's going to be add user message received populate users list and that's going to be from actions and then const set setup socket now put dispatch and username see passing in dispatch will allow us to dispatch events and now we're going to create a const the socket this is going to be their new websocket web socket we're going to set as localhost 89.89 which obviously this would be different depending on if you're running it locally or on an actual uh web server so now socket dot on open okay once we open the websocket connection let's we are going to send some information as soon as you you get on the server we're going to send you the username so socket dot send json.string so as soon as you connect you broadcast your username and then the server will receive that username and then send out to all the people that are connected to the server that there's been a new user added to the the chat room basically and socket dot on message okay and when we send a message we're gonna pass in an event object and now we have to be able to send this message to the server so first we're going to do const data equals json.parse and we're going to get the event.data and now a switch statement to figure out what where what the data actually is so data.type if the case is types.add message we're going to dispatch message received so on message is when we're we're receiving a message from the server so if that message is so if we're getting a message we're going to dispatch the message received and we're gonna do data.message data.author so we're getting this information right from the server the message and the author and we're dispatching this action so then we're gonna break and case types dot add user put that over there dispatch add user data dot name so we're receiving this new user from the server and we're just adding that user to our local a copy of the user and break and the last thing we can receive types dot users list so if we're getting a whole list of users dispatch populate users list and data dot users so all this information is coming directly from the server and our default is that we're going to break we're not going to do anything if we don't get one of those types which really should never happen so now we're going to return socket and finally export default setup socket and then i just have to go over to the main index file index.js and i'm going to import this setup sockets from from there so import setup socket from sockets and now we need to introduce a way to handle side effects into our code and to handle creating a websocket event when the user types a message so it can be broadcast to all the connected clients so to perform this operation in a clean way we're going to make use of redux saga which is a library that provides a good way to handle side effects and redux react so the reason why this is a side effect is because whenever you're getting an information from the server you're not sure exactly what's going to happen there could be an error you could get the the right information you could the server if you're not actually creating the server you may not know for sure what the server it like if it changed or something so in redux you always want things to happen right away but with redux saga it allows things to happen more asynchronously and account for for side effects that could happen where where your your function is changing something outside of the function so normally in redux every function your functions should be pure functions that don't change anything outside the function but if you're dealing with a server just by the very nature you're going to be dealing with something outside of your function so that's why it's good to use redux saga which can handle these side effects so we're actually going to have to install it so let me go over to my my console oh before i actually install maybe i should deal with some of these errors here so let's see unexpected token oh i forgot the word as import star as types actions that not contain user export name populate users list let's look at the actions here oh spelled this wrong so populate users list suck is defined but never use okay we are we are going to use that in a second so now we've dealt with all the errors i'm going to go to this other tab here clear that screen okay yarn add redux saga okay now we just have to initialize that so let's go back to our index.js let's let's move some of these around it's not important but um generally we're going to put the things that that don't start with a period first so see how the word react there's no period in front of it these aren't these are coming from libraries they're not from a local file but all these come from since it starts with appearing that means it's coming from a local file so i'm going to separate it like that put this together and then we're going to import create saga middleware from redux saga and then down here we're going to import something that we haven't created quite yet import handle new message from sagas we're going to create that soon and another thing we're going to create soon i'll just add it now is import username from utils slash name it's going to be how we're going to create the username for for the the user and now i'm going to create a new const which is just called saga middleware equals create saga middleware so we'll call that function now it says con store we're going to change this up a little bit so create store and said chat we're now going to call reducers or we're going to pass in reducers and that's actually going to come right from here instead of import chat we're going to change this in a second here but i'm going to call this reducers and so now we're going to pass in reducers here and then also apply middleware saga middleware comma okay now i'm going to get rid of the store.dispatch user add user me because now we're going to create a user in a different way through through the the sockets the start web sockets so here i'm going to do a const equal socket or i mean can't socket equals setup socket store.dispatch username so now i'm going to send over the username we're going to do something with the saga middleware sagal middleware.run handle new message socket username and at the very bottom after we register the service worker from redux i should do apply middleware so redux saga is a redux middleware so we need to initialize it during the store creation so that's why we have the apply middleware here and then the saga middleware and once we've initialized the redux saga middleware so then we're going to create the socket with the with setup socket by pi and passing the dispatch function the username and then we're going to run the middleware and pass the the handle new message function from the sagas and then the socket which has our dispatch function our username and then the username so after we initialize the the middleware with that apply apply middleware in the store creation we are going to initialize the socket so we can reference it inside the saga and then we just run the middleware and we have to pass in the the handle new message saga and then the socket which has the dispatch and the dispatch function of the username or before the user was called me but we want to actually have different names and not just me for all the users just for this example chat app we're just going to use a dynamic username generator we could make it so a user has to type in their username and that's just going to be a little more complicated than what we want to do for the app right now if you want to do that add that functionality on your own you can but we're just going to create this dynamic username generator using chance.js so let's create this file this utils.name so in the source i'm going to create a new folder called utils and then in utils i'm going to create a new file called name.js and i'm going to import chance from chance and const chance equals new chance export default chance dot first and i should have already installed this so we actually have to do an npm install for chance so let's go back to here npm install chance okay we got that installed the chance is just a random a random generator it can generate random strings numbers uh for instance this chance that first is just the a random first name chance that last would be random last name you could do chance.phone to get a random phone number so we're just going to create a random name for for this example so now let's we'll create the sagas so do a new folder in the src folder called sagas and then inside sagas new file index.js and then i'm going to import take every this is something directly from redux saga from redux saga slash effects i'm going to import star as types from these are just our constants slash action types so we're going to define our saga which is going to be a handle new message if you remember we already use this in our other file if we go back to our we use our handle new message here with the saga middleware so we're going to define that here so this is going to equal function now this function star is a generator function which basically means that whenever you run the function it could return something slightly different it's going to generate something new so that's what we're going to use that's for this saga handle new message params yield every time you a generator function you always have yield and it's going to yield this could do the next yield every time so i'm going to take every action action.author equals params.username and so so we're handling a new message from the server basically it can do this asynchronously and it can it can add the message with the author and the action so this saga is basically taking all the actions of type add message take every action of type add message and when this action occurs we're going to send a message to the websocket so here we're sending a message to the websocket and when this occurs we send a message to the websocket passing in the action and some details and so the the chat message sent by our user can be dispatched to all connected clients by the server okay and there are some things we don't need up here we don't need this import add user from actions we're not going to use that anymore and i have a spelling error so this handle new message there should be an e in here let me just restart the server okay let me try npm install again okay now let's try running the server again okay sockets does not contain export names set up socket let's just try taking these squirrelly squarely braces off around here okay export default imported as handle new message was not found in sagas okay so i'm in sagas i'm in index where it's just handling message i'm just going to say export default handle new message okay module not found can't resolve util slash name going back in this file and you know i probably need a slash here so let's try that okay um we don't we're not going to use a logo so what's this line expect an assignment or function call and instead saw an expression let's see index line six let's see what that is you'll take every okay let's try taking out this comma here okay it's compiled with warnings so let's see but maybe i should just take out that logo just to stop getting that warning so that was in app.js and i'm just gonna delete this line here okay compiled successfully as you know this app has a front end and back end so we're going to have to be running the backend server at the same time that we're running the front end so let's finish up setting up our server so we can get that to run first we just have to make the file uh runnable so we should do the sudo chmod zero seven seven seven dot server slash app.js so we can add the ability to run the server and also if you remember the server uses the ws library so i already did this i'm not going to do this again but you're going to have to put in npm install save ws to install that that that web websocket library okay now we just have to change directories into our server directory and we're going to run the server by just putting node app.js and looks like we do have an error so let's go back over to our our server file the app.js in the server directory and down here i just need to add a comma here and then also i've spelled client wrong uh you're probably getting kind of tired of my spelling errors so we have to fix this again i know i've have quite a few that you're probably noticing as i'm doing it so let's just run the server again nodeapp.js and it's working so let's try refreshing this and we have another mistake so given the action users list so let's go back over here again this is kind of another spelling error we have to add s to this this should be plural users okay let's run this again and the server is running there's no air so we know that it's actually working let's make sure our front end is still running correctly so in one tab in the terminal i have the server running and in the other tab in the terminal i have the the front end of the of it running so you need both of those running for this to work and let's test this out again and it's working it's adding my randomly generated name to the the users list and i'm going to try putting in a message hello yep so whenever i put in a message it lists me as the name but in the users list my name is clayton so let's try getting some more users here so i have another tab and i have a third tab and see as soon as i go into the website you can see the new users added to the list so now i have three users under three different tabs of three different windows hi everyone you can see it shows up on every tab hi clayton so now you can see how the chat app works we have we have all the features implemented i hope you learned a lot and thanks for watching my name is beau carnes don't forget to subscribe and remember use your code for good