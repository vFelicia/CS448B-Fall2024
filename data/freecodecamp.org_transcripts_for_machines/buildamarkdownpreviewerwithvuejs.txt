a coders and welcome back to another view Jas tutorial where I'm going to show you how to build a markdown previewer app so just to kind of show you what we're building on the left here we have a text area where we can type our markdown and if you're not familiar with markdown basically it's a hyper text language where it compiles down to HTML and in markdown you can do a bunch of different stuff such as create titles so this is going to make an h3 title I do one of them is going to make an h1 title and on the right this is kind of the HTML that the markdown is going to be rendered into after it compiles just show some of them we can do you know of course titles we can do bullet points so I'll say one two three we can do this random paragraph text copy and paste that a bunch of course we could do unordered lists here so one two three demonstrate links we could do something like this so I'll say Google comm and that's gonna be a hyperlink tool google.com fact I think I mixed that up let me this there we go that's the correct way to do it so you can do links you can do images I simply doing something like this and notice that we don't have an image here so let me just go to like Google Images and say view image go to images and I'm going to go here and just copy this image URL so copy images rest and then instead I'm going to paste this a view so that's just kind of showing off like what we're building we're not going to use any external markdown packages that exist or else this tutorial will probably be like five minutes we're going to try to create our own markdown directive and we're going to use regex to kind of PARs this text and rerender HTML on the right over here so this is a good tutorial to kind of practice writing directives practice writing view components that interact with each other etc so let's get started building out this preview I went ahead and just created a new project using view CLI origin 3 and using the generated code let's just go ahead and alter some stuff to make this work so inside app view I'm going to just remove our hello world stuff and we can just go ahead and get started one thing I will note that I already did is inside our index.html I went ahead and just brought in a Google web font in a bootstrap CSS file so that we can use the CSS grid to kind of lay out our application so nothing nothing too crazy going on in here and then also what I'm gonna do before we start going too much further is inside our assets folder I'm going to add a style that CSS file and I'm going to import that in our main J's file so I'm gonna say import dot assets style that CSS just so that we can kind of declare some toplevel assets if we need them so with that being said let's start by going into app dot view and in order to achieve what we saw with what we're going to build we need to kind of start laying out some Styles so the first thing I'm going to lay out is I'm going to say a class is equal to container which is a bootstrap class and that basically will just make sure that everything is wrapped and kind of centered on the page once we have a container class lined out we can then do class of row and inside your rose that's where you can declare your columns so on the first row we're just going to make this a class of column so make sure it takes up all the 12 grid locations and we're going to give this an h1 of markdown preview and if I save this we should see markdown preview pop up at the top one thing we also have in bootstrap is a text align so I'm going to say text Center just to make sure that is aligned in the center awesome so that is our first row for our second row we want to split that into two columns so as I call em d6 inside this each tag I'm going to say markdown and instead of h1 I'm gonna do h4 and then we're gonna have another column right next to that so this is our left column this is a right column and this is going to say preview and these are going to be textalign to left so these look pretty good of course we can do a little bit of style changes to make this you know have some margin at the top have this have some MT and for for margin at the top mmhmm nothing too crazy but before we start diving into laying out the text area in the preview section let's go back to that style dot CSS and just give the page a little bit more aesthetically pleasing styles so one I'm going to just copy and paste in is a linear gradient for the background and that is basically going to make it look a little bit nicer for background I don't know if that's a not a UX expert but it looks pretty nice I guess and I'm just gonna go ahead and just give like a hardcoded height to this just so that doesn't keep repeating and inside the body what I'm also going to do is I'm going to include that font family called libri Franklin which is granted from that Google web font that we've brought in just to make the font look a little bit nicer all right and then secondly inside the style I'm just gonna add a light clasp which is just going to be used for making the text white and maybe also adding some drop shadow to that text so basically light class is gonna have a text shadow and it's gonna be white so in here I could just go to all my H ones and just give it a class of light and make those look a little bit nicer cool so the first thing we want to do is if you remember in that example I showed on this left column we had a text area so let's just go ahead and add a text area here the user can type in their markdown that text area let's just go ahead and declare class info so we can style it so down at the bottom here I'm gonna say let's remove all the stuff was we don't need it time to scope this and I'm going to do class info and just give it a height of 400 pixels and a width of a hundred percent for now have a text area which again both of those styles are showing up hmm and then let's just go ahead and add a little bit of pasady to the background just so it's not so write up a white for the text area I don't want it to be resizable so resize is none and that'll get rid of that little resize icon at the bottom then additionally let's give it a orange order you'd be given like two pixels for that or something outline of nun so then we click on it's not outlined and I think that should be okay for the text area so on the right column what we want to do is declare a div which we're going to pretty much be putting our mark down in so I'm going to say div that's also going to be a class info I'll just in that dip right there and say this and we should get a nicelooking preview area now and basically what we want to do here is inside of this div let's just render out markdown and again we haven't defined this yet so let's go to our actual component script area and we're going to say data that's going to return a object that has a markdown property and I'll say that in basically it's just going to render out whatever markdown is next step is we want to kind of bind the text area to this markdown data property so what we can do is inside the text area a directive you can use in view is called vmodel and I'm just going to pass that markdown so now basically whatever I type into markdown it's going to be rendered on the right side so if I type in like hello world you that okay so we're making some good progress little baby steps now at this point we haven't really touched our mark down directives but that's what we're going to be doing now so if we go back to our main DJ s let's go ahead and just pretend that we have a directive already declare it so I'm gonna say import markdown from at slash directive slash markdown so we assume that there's a file called markdown there and we want to define that inside of our view app as a directive called markdown and just go ahead and pass down that markdown object and say that this should crash because we haven't created it yet and basically what this is doing is we're just telling view if you see the keyword be marked down anywhere just go ahead and use this markdown object that we're gonna declare so going back to our code let's make that folder called directives and let's make that file called markdown j/s and then in here inside this markdown J's file I can just do export default and object save that and now at this point we are still working and kind of the last piece of that puzzle is now that we have the ability to use that markdown directive let's use the directive so very similar to this V model which is a directive that's built in the view we just made a custom directive which we can declare just by putting V markdown so now this div the be marked on directive is going to be applied to O so for those who don't really understand what directives are basically again you bind them to your Dom elements and they're going to run some code when stuff happens so one of the Hooksett a directive provides us is the bind hook so inside here basically when the directive is bound to the B node slash the Dom element it's going to run and this is basically only going to run once when the component is kind of like mounted so if you notice here it printed out this info div now that we have this element we can do things to the text of the element you kind of modify it and just to kind of further demonstrate that let's go back to our app table view and I'm going to add some markdown text so hello world with a newline character at the end and if I save that now notice here it's printing out hello world in the side of this element more specifically if I want to do text content or something like that it's going to print out that text content of hello world cool so what are we doing or how are we planning to pars this markdown language and print out HTML one way we can do it now again I don't know if this is the best way is we can just use regex so basically we declare some rules we declare what we need to replace those strings that we find width and then we run it once over our element so the kind of show you a very basic example let's try to process this one with the four hash symbols alright I'll just make it six hash symbols for now so make it six save that so inside of our buying component what we want to do is we want to get the current text so L dot text content and we want to build up some HTML so hTML is a variable equal to an empty string for now and we want to kind of replace text with some regex expression so I'm going to say hTML is equal to text out replace give it a regex expression and then also give it some string you and then I'll explain this and then after we have this HTML where we've replaced our regex with Dom elements we can just say Elva inner HTML equals the HTML in fact let's just do let HTML here and we just get rid of that middleman okay so for those of you who aren't that familiar with regex let's just go ahead and move on to this red X tester online thing where we can play around with it to kind of understand what we're doing so if we have some test string that looks like this fact I have too many hash symbols in it so let me go back and remove that well we have some test string that looks like this how do we grab any string that starts with six hash symbols and then replace it with something else well first of all we need to write regex which is going to find six hash symbols and then that regex expression is going to be followed by a optional space then what we want to do is grab and group everything that's after that that pretty much we can use a character class here and say everything that's not a new line and then group that so we can grab it and then followed by a new line and that is going to be our regex mmm so again notice here we have six hashes of space we have any character that's not the newline one or more which is this we're grouping it so that we can actually extract it in our replace method and then finally we end with a newline so if I were to take this and just plop it down into our regex here and save it going back to our preview er notice that this is now replaced was kind of the demonstrate we found the correct regex here and we replaced it but we want to take that group and wrap it in an h6 right so instead we can do h6 and then inside these Dom elements or this at XML we could just do money sign one to grab the first grouping which is here so now when I say this notice that HelloWorld is printed out and in h6 tag so if I were to inspect this notice that h6 is here inside HTML and we are currently processing our first markdown rule cool so now at this point need to declare a bunch of different rules to be able to process all the different regex or markdown rules right so here I'm gonna say constant rolls is equal to an array of arrays and that first entry in the array is going to be our reg X I take this boom and our second entry is going to be what we're replacing it with so take this and boom let's try get rid of those extra things and what we can do is just loop over all of our rules and do the same logic here on line 9 so I'm going to say rules dot for each and roll template this is just a raid deconstructing and then I could just go ahead in basically run the same command but instead of hardcoding these I'm going to say role templates cool so if I say this you should get the same outcome but now we've abstracted our rules in such a way that we can simply just add some more so if we were to go back and go ahead and try to add like a role for just one hash symbol notice that this reg X is not being fixed because we have an editor roll forward so if I go here and just add one hash this is going to be h1 with h1 hmm notice that that it's gonna be an h1 now so before we type out all the different rules which is just basically knowing how they do regex and I'm not going to probably gonna go over all these since some of them get a little bit complicated one thing I'll notice is that as you type different stuff it's not updating in the preview and that is because this is only calling once when the directive binds and the Dom element is put into the page so it's never actually going to rerender this stuff so to kind of fix that I don't know if this is a proper solution I'm sure there's a way to make our directive a little bit more complicated to do this dynamically such as like watching port in fact this is maybe why you may want to use a prop instead I mean a component instead but I'm not sure if you can access the Dom from a component but anyway what we can do is we want to just basically re render this Dom element anytime markdown changes right so one thing we could do is just bind key to this and I think we could just give it markdown so basically anytime markdown changes this is going to rerender our preview over here if I save this as I type different stuff notice that it's rerender on the right at this point we can just go ahead and copy and make those other rules so H five four three two then over here we can save 5 4 3 2 1 save this verify that this is working one two three or five a b c e okay well so we have basically a preview are good to go the last step is just gonna be updating all these roles to UM support all the different markdown I don't know if I want to go through all the different rules because honestly it's just write checks so you may want to just take a tutorial on regex but it's basically going to be the very very similar logic so I'll do maybe like one or two so one regex you should be able to do is bold so what we could do here is we're gonna do find me a string which has stars let me just get rid of all this and try again so find me a string that has some stars inside the center of those we want any text that is not a star so slash star in fact I think I need to escape the stars and you one or more so I think this should work I save this and make sure I change this to a bold tag instead now and of course make sure you have the grouping there oh let me add that grouping you if I were the type stars are bold boom ok bulbs working now and I could easily just do that with like italics right so I'll just go and do just a single slash is going to be italics and save that file we have bold we have italics awesome that'd be nice to have is we want to make sure every newline character wrap something in a paragraph so if I just go back here and say wrap my content or my group in a paragraph if it is sandwiched between a newline character so I'm going to say give me the parentheses give me every character that is not a newline character like so give me one or more of those and then also give me the it has to end with the newline character and let's see that this works as indeed okay so basically it's going to grab the ends with the new line is gonna put on a new paragraph after it does all this stuff I don't know if this is the proper way to do it it's just one one solution so we could go through and basically do all the different styles but what I'm gonna do is I'm gonna I'm just gonna copy and paste the remaining roles in and we should just be able to kind of wrap up this tutorial cuz I don't wanna spend too much time doing regex in this tutorial hmm so now at this point we should have access to all those different the mark 10 that we saw before so as an example we can do the link you so now we have links which is this one down here like 20 images like we saw before we could do lists like we saw before awesome so that basically wraps up our markdown preview tutorial again if you have a better suggestion as to how I could be making this directive I know you can probably get super complicated using javascript and like changing Dom elements and whatnot but I wanted to keep it kind of simple as I could just using regex and simple binding method again like using this holing key maybe that's not the best approach to kind of rerender in this be sure to subscribe and also I'll put my Twitter link below which is also where I kind of give out updates and then the github repo is also going to be in the description below alright thank you so much for watching