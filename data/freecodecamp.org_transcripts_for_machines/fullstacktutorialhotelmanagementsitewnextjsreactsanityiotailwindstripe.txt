learn how to create a fully functional hotel management site with nextjs 13 react sanity iio tailwind and stripe Larry brgh created this course he will help you understand how to fit all of these Technologies together in a real world full stack project Hello friends and welcome to another project video where we are going to be building and deploying this hotel management system so let's have a demo of the application we are going to be building this application is going to be using the sanity CMS so if I copy over this URL and I open the new tab in my browser and I just go to/ Studio you see that we load our CMS so our CMS is embedded inside of our front end code here and we have this navigation um section we have the header we have the user profile and you can also switch between the light and dark team here and our application is fully responsive for mobile devices and also for desktop devices all right so let's have a demo here so over here we can search through a room and we list out a room so let's actually start in our CMS here in our um content management system let's try to create a hotel room so we can click on this hotel room section and here we click on this tab all right so we need to give this hotel room a name I'll just call it test hotel for now and I'm going to generate a slug and for the description I'm just going to copy and paste this description in here and for the price we can give this a aot of price of 1,000 and say we are currently on a 10% discount and for images I will click here and I will just fast forward and add so um images from unsplash here okay so once we have added these images for the cover image I'm also going to copy this um add URL from Splash or you can as well add a file and you see by default the room type is basic we can choose the different room types I'm just going to choose luxur and we have the special note um I'll leave the dimension for number of beds I will just say two and for off amenities we can choose an an amenity for the icon the icon has to be um a font or some icon so I'm just going to come here and add this icon fa bir and for the amenity I would just say king king sized bread like this and that should be it so it's saved we can obviously add more all right so after this I'm not going to make this U is not booked so by default a hotel room isn't booked and I will not make it to be a featured hotel room and we can go on to publish this hotel room so we gave this hotel room uh name of test hotel and if we come over here to the to our application we come over to our rooms section we see that we have our hotel room here in real time so as we make changes to our sanity Studio you see it reflects in our application and we can go on to book this hotel room so I'm going to click on this book now and these are the images that I uploaded for this and we have this nice looking model over here for the different images so that's the user can swipe and see it in full screen all right so you see what we chose here the Kings siiz bird the City View and the coffee maker with the respective icon I just happen to choose the wrong icon for the City View with we see the description we see here they offered amenities safety and hygiene and this hotel room doesn't have a review so let's go and book this hotel room and you have to be authenticated so if we click here you see this comes the user profile page and we can obviously sign out of the application and we are redirected back to the homepage and we need to authenticate so we can authenticate via um email and password or we can use GitHub or we can also use Google I'm going to click on Google over here and I'll sign in with my Google account and I should be redirected back to the application great so let's go and and book this our test hotel room that we just added so you see here we have this um filter here and we can filter by luxury and we see the hotel room because this falls under that category and I'll just click on this book now and here I'll choose a checking date so I can choose today as a checkin date and you see a later day as a checkout date and you see the price updates accordingly because there's a 10% discount we see that the price here is 900 bucks and if we choose a date that is way ahead of our checkout date we have this error so that the user cannot book you know a date that is where iead our checkout date now I'm going to choose this checking date and I'm going to go and book this hotel room now once this loads up stripe because we are going to have stripe for payment if we come over here so we see sessions that we have used now because this hotel room is following a payment first approach a booking is only going to be made if payment is successful so I'm going to fast forward through and fill out these details over here and once you fill out these details you can go on and click on pay and this is processing payment now on successful payment we can just come back to our stripe dashboard and let's let's reload this um sessions that we have here I'm just going to reload this and you should see our new web hook now this web Hook is called because so this is our new web hook that we just triggered now now because this event is called we go on to create a booking and if we come over here to our sanity studio and we come over to our booking section you will see here that we just booked this hotel room so this test hotel room here the number of days and all the details that we filled out wise we were booking this now if we come back to our hotel application you see here that we are redirected to the user profile page and here the user can see the current bookings and the user can also see the amount spent so this is the test hotel which was the highest amount spent at 900 bucks so if we come back to the current bookings and we click on rate we shall be able to leave a rating on this hotel room so we you can say great experience like this and click on submit now this is going to go on and submit the review and we come back to the test hotel room we should see our review here we're just going to reload this and our review should pop up so this review that we just gave on this hotel room and you see this hotel room is booked and the user cannot go on to book this hotel room so we can come back to the user profile page and here where we have this hotel room we just booked if we want to leave on that rating here and we click on submit and we come back to the test hotel room so here I'm just going to reload this and you should see that the hotel room you know updates so we have this functionality to leave a review and to also update a review and only customers that have booked a hotel room can go on to leave reviews on that hotel room so this is the application we are going to be building and the application is fully responsive now we have this crazy looking parenthesis here because we didn't provide a dimension so if we come back here to the test hotel room and here where is it this test hotel if we just leave a dimension over here so we can just say 30 or whatever and publish and if we come back here we should see here the updated just reload this we should see here 1 so for the dimension so this is the application we have our review and all aspect of this application is fully much responsive as you would expect and to achieve this we are going to be using Tailwind CSS here so this is the application we are going to be building together if you like this project please do go on and leave a subscribe it helps the channel and don't forget to give it a thumbs up as well and I have already left time stamps in the description so in case you come back for later you should be able to continue with the project and the source code is already in the description so you can get it on GitHub now let's get started building out this project together let's start our project and I'm navigated to my desktop from my terminal and I'm going to run the command to create a new nextjs project and the command is MPX create next app and I'm going to be using a template of typescript so I'll zoom out a bit so you see the entire command so MPX create next app with a template of typescript I'll execute this we are prompted to give our application a name and for this project I'll just give it the name of hotel management like this so I'll just add e so hotel management and say yes to all these promts and say no to customizing default input now once next GS CLI is done building our project I'm going to CD into the created project project which I called hotel management and go into Visual Studio code so this is the default files and folders that we get by default and if we run mpm run there so that we can just preview the application that we get um from nextjs as you can see we are running on next GS 13.5.3 so this is the current version of next GS we are working with and we come over to the browser and we just go to Local Host 3,000 you'll see the file or our homepage so Local Host 3,000 so let's go and make changes already to our application and I'll get started in our layout our layout. TSX which controls the entire layout of our nextjs application and for the title I'll give it the title tool of hotel management app and also update the description you can give this any title or any description of your choice but in this case I'll just say discover the best hotel rooms like this and this is going to update our header title and description for the font I'll be making use of font Poppins so I'll import Poppins from next phon Google and use it over here we have an error but before we come to that the in variable here I'll change it to popins all right popins with uh lower case P okay so configurations we can pass to this Popin font is the font weight so it can be a string in this case I'm going to pass an ARA of strings for the different font weights where Us in the application so we're going to making use of a font weight of 400 also a font weight of 500 and also a font weight of 700 and lastly you're going to make use of a font weight of 900 okay so I'll just type 900 like this and for The Styling I'm going to give this a style of italic as well as a style of normal so this style over here normal and lastly we need to pass also a variable okay so we're going to pass a variable and the convention is to go with double hyphone like this and then font another hphone and I'll just go with font Poppins as the variable and to fix the error that we have in our body tag over here right and go with inter class names we are going to go with poins do class names like this so popping do class name all right and I'm going to cut this children here and I'm going to wrap our layout in a main tag like this in the main tag so here we have a main which we can give um class name and the class name I'm going to give to this main tag is font normal so font normal like this and lat room in our application we're going to have a header component as well as a footer component so here I'm going to have header so this is a placeholder and I'll comment it out and just after it we're going to have children and after which we are going to have our footer component all right but before we go on and have our header component so before we go on and have the layout for our header component I would just like us to you know discuss briefly about the meta description so let's go over to the browser and here in the browser if I just reload and you see here we have hotel management app if I open the elements um tab over here so here where we have the elements Tab and I just collapsed the head so here if you check down so here you see here that we have the meta so description and we have the content and the same for the title so this object that we have over here so this uh metadata we just have the title and it renders it as we normally have in HTML in our head tag where we have the title and there we just write without the title of our application so this is the work of this meta data we can pass you know these headings that we would normal normally have in our HTML okay so I'm just going to rever the changes that I made here and we can go on and create a header component so in the source folder I'll create a new folder I'll call components and in here so inside here I'm going to create a folder I'll call header and then another file which I'll call header. TSX okay so I'm just going to boot strap this header component and remove the react input and we can already import this header component in our layout so here we have the placeholder I'll go and import header so header will be coming from component header header like this and I'll just rearrange the order of inputs here so for HTML semantics rather than use a div I'll be making use of um the header tag and obviously I'll be styling this header so I'll give it a padding on the Y AIS of 10 padding on the x axis of four give it container and to position the items in the center I would use m XX auto text XL flex Flex wrap and on medium devices I'm going to go with flex no wrap so flex no wrap here and after that we are also going to use uh position the items in center and justify between so I'll zoom out a bit so hopefully you can see the entire class names uh styles that we have applied here and I'll Zoom back in okay so inside this header tag we are going to have a div okay two two sections actually sorry about that we're going to have a div and we're also going to have an on that list so let's start with the div and this div I'll give it a class name of flex give it item center with full and medium devices we won't take the full width we're just going to take two3 of the width like this all right and inside this div we are going to have a link so this is where we are going to have uh a link that we pointing to our homepage so this link component we are going to go on and import it from next link okay and for the h we are going to go to slash which is our homepage and for the class name I'll give this a class name of font black and also um text let's see this um hex code this color I provided this hex code before now so F2 745 which is more like a an orange color and here I'll just give you the name of hotels like this okay so after this link we are going to have an on that list where we will have the icon to take us to the authentication page and also another icon to tole the team so here I'll give this another list a class name of flex item Center and margin left of five for the icons we are going to be using react icons so mpm install react icons like this I'll wait for it to install and I'll restart the application so mpm run Dev all right so let's use the before we can apply the um icon we're actually going to have a link okay so this link will take us to the user authentication page to the off page and for the icon I'm just going to use fa user ccle so fa user CLE and for the h RI of this link I'll just take this off yeah and for the h this link is going to be pointing to slash off all right so let me import the fle and let me uh give it a class name so for the class name I'm just going to give this a class name of C pointer so I allow the IDE help me with this input Noe it doesn't so I would have to import it manually so let's import buot the structure every us Circle coming from react icons for/ FAA great and actually this link that we have here we need to wrap it in the list item so in an Ali and this Ali needs some class names so I'm going to give this uh class name of flex items Center okay and then we're going to have another list item and the idea is for this other list item to hold the toggle so it's for our lights and dark team so I'll just give it a margin left of two to um have some space from the user Circle and for the icon I'll use this um MD dark mode like this okay okay and I'm just going to duplicate this so that I will D structure this coming from react icons MD okay for material design and also I'll give this a class name so I'm going to give this icon a class name of cross pointer here all right and for these other list items which would hold um links so I'll just give this a class name of flex over here also give it a class name of item Center justify between give it a width four and on medium devices I'll give this a width of 1/3 1/3 and then imine top of four and then we're going to have list items and for this AI I'm also going to give this um some animation on Hover so I'm going to translate this uh on the y axis so netive um 8 pixels and I'm also going to give this an animation duration of 500 and I'm going to transition all like this okay and inside this list item we are going to have a link so we already have this link component imported which will go to home so the hre is going to be pointing to slash okay and I'll bring this down let's say to more times we are going to have that link going to um slash rooms so we have this rooms here and the H will be pointing to slash rooms and this will just you go to the homepage is um contact so just have the link contact we don't have any contact page so we'll just leave it to go back to the home page like this and we going to save this file and then we can visit um the browser and I just quickly reload our application so that we can see our styling um take change our changes take place already yeah so we see our changes we see our link and we see our different icons you know and you see you see the animation that we have on this section okay so let's come back to the IDE and I'll just remove this so that we can take uh the full room and let's configure Tailwind CSS so I would come over to our Tailwind um config dots file and I'm going to get rid of this um background image we're not going to be configuring the background image we are going to configure first the different colors that we'll be using in our application okay so we're going to have our primary color and our primary color is going to be this hex code so hash 038 um c7f and this is our primary color and we are also going to have our secondary color okay and our secondary color is going to be this um hex code so F2 c641 and then we are going to have our tary color and our tary color we are going to have different variants we're going to have the dark variant and also the Light variant and the dark variant is going to be the um has code so F2 745 and the light variant is going to be this hex code so F2 c64 one okay so these for our colors and apart from the color we are also going to be configuring our font family and here we are going to use um Poppin name and we have this array and this variable has to match the variable we Define in our layout. TSX okay so this variable I'm going to copy it come to our layout it has to match you know this variable over here all right so come back to the T config and we also need to spread out the font family so I'm going to import the Fone family using the required statement so con Fone family is equal to require and this will come from telling CSS and default team so here we are going to spread out the fun family and access the sence property great so we can come back to our header. TSX and where we made use of the um the shary color so I'm just going to copy this and if we come over to our header. CSX I'll replace this so this this is going to be you know text and now we can use text T Shar DC and you see this U yellowish color this icon or we can use text tary light here we don't get the icon that means there should be you know a typo somewhere and we forgot to actually add the hash here so add this hash and there we see the preview great but I will go back to the dark um variant which we are using in this case and we see everything um works as fine so up next after the header we are going to be working on our footer component so I'm going to create another folder which I'll call footer and then another file for our footer. TSX okay so I'll get rid of the header and the telling config so I'll bootstrap uh put component and remove the react input and rather than us a div I'm going to make use of um the footer tag and let me style this um footer give it the class name and the class name is going to be margin top 16 okay and here we are going to have a div with the class name of container and MX Auto and for padding give it a padding of four on the x axis and then we're going to have a link which will import from next link and this link will still take us to the homepage so the hve is going to be slash and the class name is going to be font black and for the text we're going to go with text tary D here and we'll just have the makeup brand name hotels and then we're going to have a hphone a H4 that would say contact like this and for the class name of this um H4 I don't to give you the class name of font let's see font semi board and a text uh let's see I'm actually looking for 40 pixels do we have no so I'm going to use 40 PX like this and pattern on the Y AIS of six here okay so after this H4 we're going to have a div and this div I'll give with a class name of flex and give it um Flex wrap and give it a cap of 16 and position the items in center and justify between as well and inside this div we're going to have another div which we are just going to give Flex one with different paragraphs for this um madeup address which I'll give one two three Road and then we're going to have this div with a class name of flex and item Center give it a py of four and this div is going to have this icon so this icon BS f um send VI okay and after the icon we are going to have a paragraph and this paragraph would have a margin left of two and I'll just say code with Larry here and quickly import this BS send F BS F send F from react icons for slbs here okay so after this I'm actually going to copy and paste this um two more times we're going to have get rid of this py4 and for the icon we are going to use in this case another icon which is BS t phone um out Bond and I'll just have this made up um phone number here and after this we are going to have this and we'll still keep the brand name code with Larry but we are going to use uh a different icon so here we're going to use bi message detail and we need to import this from react icons forbi and I'll remove this BS send uh F send F okay and get rid of this um py rather use a p um padding top of four so after this div with this Flex one we're going to have another div and this other div we are still going to give Flex one and we are going to give uh from medium devices and above we're going to position the text to the right so align the text to the right and we're going to have a pattern a paragraph with a pattern bottom of for and here we see our story and I'll just bring it down and say get in touch and next we're going to have our um our privacy our privacy commitment I'll bring this down and next we're going to have our times of service and I'll bring it down one last time and here we are going to have uh customer assistant without any class name so this last one is not going to have um any class name here great okay so after this div we are going to have another div which we're going to give a class name of Flex one and on medium devices and above we're going to go with text right like this and this div we have different um paragraphs this paragraph we're going to give a pattern bottom of four and we just go with the text of dining experience and next we're going to have another text with Wellness bring it down for fitness and next we're going to have another with spots and we're going to have another one with events without any class name okay so after this div we are going to have another div this div actually is going to be um a self closing div because we're not going to have any content inside it's just for styling so I'll give this a background of background tary light give this a height of 10 and on medium devices and above I'll give this a height of 70 pixels and give it a margin to the top of 16 a width full and I'll give it a bottom of Zer left of Zer and we come over to the left layout I'm just going to import the footer component here okay so footer from our component footer footer go and save this file and we visit the browser we see our footer over here and let's see if our application is responsive I just going to you know test this out to see if it's responsive and use the response um points that we have here and we don't see our text that's because come over to our app and in our page. TSX I'm going to get rid of everything we have here okay so for now I'll just return return empty fragment with the text of home so I'll just type home in here and remove the input from next next image and I'm also going to use an arrow function so con home is going to be equal to this AR function so I'm going to save this and if we come back we have an error because we are not exporting this um home component actually we have to export it by default so export default home like this and if we come back to the browser we see our application and let's test out the responsiveness of the application and we see that our application is um responsive so we can just test this out here and I would also love to you know get rid of this background color that we have here and to get rid of it let's come over to our global. CSS and I'm just going to remove these predefined stylings that we got by default and yeah we have our white background up next we are going to be working on our teaming feature so I'm just going to close all and let's work on our teaming in the source folder I'll create a new folder I'll call context and here I'm going to create a new file for our team context so a file call it team contact. TS and let's import this patch from react we're also going to import set State action and we're also going to import the create context to create a context we're going to have this constant over here and we're going to call it team context and this is going to be equal to create context so to create a context we make use of create context from react and for typescript let's define the type that we are going to need for our context so the type for for our team context type is going to be equal to this object so we're going to have that team which is going to be of type bowling and we are also going to have set duct team and set du team is going to be of type dispatch so the type of action we're going to dispatch is a set State action which is of type bowling okay and I'm going to pass this type to create context we're going to have errors because now we have to Define some um um default values so for that team by default is going to be false and set that team the initial value is going to be this function that returns nothing all right so let's export our team context so we're going to export default this team context here so this is the first step we create our context and in the components folder I'm going to create another folder which I'll call team provider so we're going to wrap this team provider with our entire application and here we have our team provider. TSX so first I'll be making use of the use client directive that we get from nextjs and I will import use effect and I'll also import use state from react and I would also import the team context I actually want this to be and ope T So rename it here and also rename it in a team context file so this I'll use an uppercase t here and also export default team context like this and then I'll come back to the team provider okay so here let's have our component jsx so I'm going to have this Con team not context so team provide then which is going to be equal to this Arrow function here okay so for props this is going to receive children and the prop is going to be of type object where we have children and children is going to be of type react do react node like this okay so first we're going to have this Con where we set our state so t team and set du team which is going to be equal to UST State like this and UST state is a generic type that is going to hold a bulling value and for the initial value we're going to get this from local storage so we can call this team from local storage and first we need to check that we have local storage so we're going to check if type of local storage is not equal to undefined okay so if this is the case that local storage is set then we are going to get an item from local storage and local storage dog item the item we're going to get would have a name of Hotel team so Hotel team like this and we're going to check if we successfully get an item so if we have a value there then we are going to Json do pass that value okay cuz it will definitely be a string because we say string in local storage so we're going to pass json. get item Hotel team and I'm just going to have this exclamation sign here to tell typescript yes we are sure we're going to have this otherwise we are going to be using false okay so if um local storage is defined we get the hotel team and then we go to json. pass and once we json. pass we if we get it otherwise we use false so I'm going to pass this team from local storage and for typescript types this team. from local storage is going to be of type bowling and I'm going to pass this value as our default value to use States here okay so this is the first step in achieving our teaming and after this we are also going to go on and have our JSA for our team context and in our team context we access do provider okay and for values remember our team context will be holding a du te value which is the value from our set State and set du te which will be referencing this value from our use States sorry and in here we're going to have a div okay a div and we have um some conditions for the class name so we're going to be using uh uh brackets and then back tick so we're first of all going to check if D te so if D te is true then T CSS gives us this dark variant we're going to append it to this dark variant otherwise we are just going to use an empty string and then we're going to give this a minimum height of screen so in here we're going to have another div and this is the div where we check if D te is true we going to use uh apply some class names so here we're going to check if we have dark team we're going to give uh have a text white and if we have dark team so we have this dark variant we are going to give this a background of black and for the text by default it's going to be a black text okay so for the white team case where we don't have the black team so it's going to be 1 e 1 e one e and then in here we can just go on to return children that we receive from the props okay so this team provider let's go on and Export this as a default so export default team provider and we're going to add another state so we're going to have another state here and we're going to call this state um render component and this is useful so that we know we have some condition here for the class name so that nextjs will be able to pick this up on the client so we have render component set render component is going to be use state of false okay and I'll just close this off here and you're going to have our use effect okay so in our use effect we are sure that our component have been mounted to the screen we are going to go on to set um render component and set it to tr true okay so we're having this error because we forgot to have our return return statement so we're going to return return this and back in our use effect we're going to set render component and set it to a value of true like this so we can check over here if our component is not yet rendered we are going to go on end Reon and empty fragment great so we have our team provider now we are going to make use of this team provider in our layout so come over to the layout. TSX so in our app and here where we have layout. TSX we are going to wrap our entire application with this uh Team provider so I'll cut this and here we are going to have our team provider and we are going to return return our main tag okay so if we come over to the browser we would expect everything to work as know intended but actually it's not going to work okay I'll just reload the page and you know if we click on this button you see nothing happens so let's come back to our header because we haven't weared up the event yet so in our component header header. TSX here we're going to be importing um the D team and set that team from our context and to make it of our context we use the use context and here we are going to make use of our team context okay so I'll just bring this down here and we're going to D structure D team and also set D team here great so dark team we can use this um to configure the icon we're going to show so this icon here I'm going to cut this icon and here how first of all check if that te is true so if dtim is true here yep I have the question mark sign so if that is true actually want to return return a different icon so we are going to go and and import this icon and the icon is this MD outline light like this so light mode so I'll copy this and if do true I'm going to paste this otherwise I'll use this okay so we're actually going to use this as a self closing tag like this okay so next we're going to give this um class name of C pointer so I'll just paste this class name over here and next we need to wear up the click events so on click we're actually going to do two things so have this callback function you can Outsource it but I'll just write it in line here so on click we're going to first set um dark team to false and we also want to go and remove the from our local storage so we're going to remove item from our local storage Hotel team okay and I'll just copy this click event here on the dark mode we are going to do two things but this time around we're going to set dark team to true and rather than remove item you are going to be setting item okay and uh with this key of Hotel team and the value will be true but not like this as a string okay and to make our te feature to work we just need to go on to make this um header component uh use client component because now we are making use of context and not to have errors and lastly in uh taing config we just need to do one last thing so come over to our um TN config dots and just right above the content here we're going to check Set Dark mode yep so the dark mode we're going to set it to value of class okay so now if we come over to the browser so I'll just come over to the browser and if we click yep you see a teaming feature works as expected okay so up next if we click on this icon here you see that we are directed to SL off and for now this leads us to a 404 page so let's work on this page and in our app I'll create a new folder which I'll call off and then I'll create a file for page. TSX so in here I'm quickly going to bootstrap this component and I'll change from page to off and remove the react in and next I'm going to give this some class names and I'm going to give it a class name of container and then imagine on the x axis of Auto and I'll change this div to a section tag okay and in here we are going to have a div and this div is going to have uh a class name of pattern six and also a class name of space y4 and on medium devices this is going to have uh space Y6 and then on small devices is going to have a padding of it like this and we also going to give this a width of 80 and on medium devices I'll give this a width of 70% and make sure that I also go with MX Auto so that the form is in the center and then next we're going to have a div and this div is going to have a class name of flex a imin bottom of eight give it Flex call and on medium devices I'm going to give it a flex roll items Center and justify between and this div we are going to go on to have a H1 now this H1 that just going to say create an account and let's start this H1 I'm going to give it a class name of um text XL and also font bold leading um tight and also give it uh a tracking tight like this and the medium devices I'll give it a text of two Excel now just after this H1 we are going to have a paragraph which is going to say or and after this paragraph we're going to have a span and for the class names of the span and we're going to give it a class name of inline Flex item Center and in this pan we're going to have two icons first is this for GitHub so AI feel GitHub and we're going to give this a class name and the class name of this is going to be uh margin to the right of let's say three and then I'll just give this a text of 4 XL and the C of pointer and then text um black like this and then on dark mode we're going to give it a white text so here we are going to go on and have this pipe which is going to differentiate it or separate it from the Google icon so here we're going to have this um FC Google with the class names of um margin to the left so margin to the left of three and also give it a text of 4XL give it a c pointer and next we can import these icons so first I'm going to import um this AI F GitHub which will come from react icons for/ a and next I'm going to import FC Google which will come from react icons for slfc all right so next we are going to reload and if we check the browser and you see that we have this um create an account and we have everything working as expected all right great so after this div now we are going to be having our form so our form but without any action okay so I'm going to take the action and provide it to the class name and the class name is going to be let me um see so the class name is going to be space y4 and on medium devices I'm going to give this uh space Y6 like this and inside this form we're going to have different input so for the email password and also for the name so this input is going to be of type email and then we are also going to give this um a name and the name is going to be email and we're going to give it an ID the ID is also going to be email and for placeholder you can just go with name at no company.com and we are also going to make this required like this okay I think that will be all for this um input okay so that would be all and let's just style it for the class name the class name is actually going to reference a variable so we're going to call this input styles and we can Define this input styles here which is going to be this constants so input styles is going to be the string we are going to go with border and also give it a border gray of 300 and on small devices give it a text SM and a text black like this and we're going to give it rounded LG I'm just going to fix this yep so rounded LG and give it block and also give it a width of full um a padn 2.5 and on the focus States I'm just going to take up the outline by um saying outline none so there will be no um outline on the focus state so this input stes you can see the complete um class names and that's the input St we are passing to this input over here all right so we're going to have um more inputs so actually I'm just going to you know copy this two more times so we're going to use this for uh password so that will be the type and the name of this uh input field is going to be password the ID as well is going to be password and for placeholder the placeholder is also going to be password so let's have um password here and for validation apart from making it required we're going to give it a minimum length so this um password is going to have a minimum length of six like this and this is going to be for the uh for the name so it's going to be of type X so this other input over here and the name is going to be name for the username the ID is also going to be um John do and for placeholder so actually um the IDE is going to be name okay and then placeholder you can give it any placeholder I'll just go with um John do like this and I will change the placement of this input I'll cut this for the name and just place it right above the email like this and if we reload the browser you see we have uh different inputs and it also works fine with our teaming okay great so after this input we are going to have a button to submit the form so this button is going to be of type submit like this and it's going to um have the text of sign up okay and let's style this button so I'm just going to bring this um quot a single quot back and for the class name of this button this button is going to have um a width of full like this and this button is also going to have um a background tary deck and on the focus state so we're going to give this button outline known and also front media rounded LG text SM and also pad to the xais of five which I think is 20 and py 2.5 and also give it um the text of Center like this so this is the class name that we have on this button okay and just after this button I think that should be after this form we have another button and this button is going to have um a class name of text blue so we're going to give it the class name of text blue 700 and on the line and the text should just say login like this so we come back to the browser you see that we have a form and everything works fine with our team we can also check the responsiveness on how this form adjust to the different um viewports okay so everything seems to be working fine so far and you see how the form adjust great so next let's make sure that we are able to retrieve the user inputs from this form and at least log it to the console for now so to en for us to do this on the different input okay I'm actually going to um let's see uh I'm going to go and make this uh a use client component because now we are going to be managing State okay so here we are just going to define a state for the form data so we're going to have const form data and then set form data and this is going to be use State like this and we're going to Define um a default value so here I'm going to have this con which I'll call the default form data which is going to be equal to this object and the email is going to be an empty string by default and also the name is going to be an empty string and then the password is also going to be an empty string by default and I'll pass this over to this um use State over here great so next we can go to our different inputs and wire up the value okay so we can start with our email get rid of the ID since we're using um name so I'll get rid of the ID on all inputs and wire up the value so the value for the email is going to go to our form data. email and I'll just copy this and use this for our name so I'll change this from email to form dat. name and also for the password the password is going to be form data. password you can also have an unchange and on change we're going to call this function which we have not defined yet so handle input change and I'll pass this function to other inputs that we have sorry this unchange and we can go up and Define this handle input change function so somewhere around here we're going to have this const which we call handle input change which is going to be this aror function this function is going to automat automatically get the event which is going to be of type change event and it's a generic type which is going to be of type HTML inut M so here we're going to destructure some properties from the event Target so remember we have the name so we're going to D structure name and we're also going to D structure value from event Target so with this we can go on and update our form data so we call set form data and this is an object where we spread form data so just going to spread form data and we're going to use square bracket okay so that we can dynamically update the name with the value of the object great so this is our handle input change and we can also um Define our unsubmit function so our form here we can Define our own submit and this is going to be equal to a function we don't have yet we call this function handle submit so I'm going to copy this and just after the handleing F change say handle submit which is which is going to be an asynchronous function we get the event and this this time around is going to be of type form event which is a generic type and we said it's going to be for HTML form element and then we have our function declaration completed the first thing we do we're going to prevent default so event. prevent default and then we can have our TR catch block so this is going to be TR catch and we can also have our finally block just after the catch okay so for the let's see so for the tribe block we are going to go on and just log to the console for now so we're going to console.log um the different form data that we have so cons. log form data later on we are going to be obviously submitting the form and in case of any errors we are just going to log the error to the console and finally we're going to reset our form so we're going to set form data to our default form data okay so we have this and we're going to save and let's try it out back to the browser open the console let's see if we're going to see the form values for name I'll just go with the name of uh for email sorry test test.com for name I just go with name of test and for password I'll just go with 1 2 3 4 5 6 click on submit and great we are seeing our form details so we are correctly retrieving our form details so now we have this let's make sure that we have um sanity studio in our project and to integrate sanity studio in a project first I'm going to quit the terminal I'll clear and then I'm going to open the Explorer here and the idea is to move these different front end files and folders into a separate folder so I'm going to mark all actually first I'm going to create the new folder which I would call front end and then I'm going to Mark and move move the folders inside the front end folder and then I'll get rid of the next folder this folder is generated automatically for caching purposes by nextjs then I'll create a new folder called CMS and I'll navigate into the CMS folder so CD CMS and to integrate sanity studio in our project it's important that we first log out so MPX sanity at latest log out and I'm going to chain on that command and using mpm Create sanity at latest like this all right so this one word I'm just going to close the Explorer and fix the typo I have over here so it's meant to be one t so MPX sanity at latest log out do go and execute this command and let's keep an eye on the CMS folder first the C is going to install the packages and then we are going to be signed out so it's going to sign us out and we will'll say okay to proceed and we need to authenticate ourselves let's give it a second and to authenticate ourself you can use the keyboard arrow keys to navigate in this case I'll authenticate with Google and this opened up on my other screen so I'm just going to authenticate myself over there and if you had any previously existing projects you would see them here I had one from previously you can use the arrow keys to navigate but in this case I'll be creating a new project and give this a name of hotel management like this and go on to execute this command all right so let's give it a second and I would say yes to use the name production so the names I ually production or development for common names and I would say okay for the output path and for schema we're going to start clean and then I say yes to use typescript so this going to generate the files and then we can use npm to install the files that uh that get generated all right so once this is installed we now have sanity Studio here we can test it by running npm run Dev so that we have a local preview on Local Host 3333 so let's give it a second to build yep so Local Host 3333 I'm just going to visit this on the browser and this is sanity studio so let's go on and authenticate via Google and we are going to give it a second for it to load and this is our project now we don't have any schemas we are going to be creating schemas in the later up next we are going to integrate this sanity studio in our next project so that we use the same common domain rather than use different domains so CD out and then CD into the front end and now I'm inside the front end folder here so I am going to run the command to install these packages so npm install sanity and also next sanity like this so to go on and install these packages and we'll just wait for it to install let's give it a second and once it's um done installing next we are going to come into our CMS and copy our schema folder so I'm going to copy this folder and paste it inside our front end folder and come back to the CMS folder we are going to copy the sanity config dots file so I'll copy this and paste it inside the front end here great so up next we are going to go on now and if we come into uh if we come into our sanity config in here we going to see uh we need to add a property and that property we need to add is the base URL so just after this um data set here I'm going to add this base path and this base path I would go to slash Studio okay so here/ studio so this is going to be Local Host 3000 SL Studio to load the sanity Studio we have an error here because we need to install this package so mpm install at sanity for/ Vision so to go on and install this package and the error should be gone all right we are not done yet we need to add the path in our Pages folder so that this is going to be loaded up when we go to localhost 3000 SL studio so in the source folder and then inside the app folder I'll create a new folder and this folder I would call Studio like this not with a square bracket so studio and then inside the studio folder I'm going to create a special folder using double brackets like this and then I'll spread out index okay so once you create this folder do go and create the page. TSX file so I'll just expand this so you see it fully is studio and then the square brackets index and then page. TS so we're going to use the use client directive to make this a client component and in here we are going to also go on to import something which will be coming from the next it package that we installed and then for/ studio and that is the package so the next Studio package and with this package imported we are also going to import config and that is our sanity config so this is going to be coming from we're going to go one level up and still go up again and go up and lastly into our sanity config okay so now we're going to Define our jsx we're going to sport this as default and this function we are going to call Studio and here we are going to return our next config like this which is going to be a self closing tag and this is going to take in the config and the config is going to be our configuration from our sanity config now this is all we have to do okay so let's start our application running npm run Dev and then we can see if we have set it up correctly so I'll just wait for this to build and you can see our application is done and we can visit Local Host 3000 so we're no longer going to be going to Local Host 3333 SL Studio we would go to Local Host 3000 / studio and it's compiling we can confirm this if we go over to the IDE you can see is compiling SL studio and then the index and then the page so we're going to wait for read to compile we'll just um wait so here in the IDE you can see is compiling the page so it's done compiling and this page should be loaded up so now we can see our sanity studio living in our next JS project on Local Host 3 ,000 which is great okay and we just wait for it to load up lastly we can click on continue so that we can add course so this is going to take us for our project and all we have to do here is to just add course origin and we are redirected back to our application and everything works fine great so we see but you see we have our layout so we have our header component and we have our footer and that's because the studio is sharing this same layout as our entire application we can easily fix this if we come into our app and we create this folder so with parenthesis CMS and another folder called studio now this is Route grouping in nextjs it doesn't affect the URL is used for purposes like this where you want to have different layouts so I move the Earth folder inside the web move the studio folder inside the CMS folder and also I'm going to move everything we have here so the five icon and the homepage which is the page. TSX I'll move it into the web like this and we can go over to our CMS and you see we automatically had a layout. TSX so you can see it here in green that your page will had um a root layout so one root layout was created for us by default which is this root layout out um that was created by nextjs so if we go back to application you see that we don't have any root layout in our studio and if we reload our next J application to be sure everything is still working fine over there we just give it a second and we see that everything still works as expected so now we've done this we come over here before we create our schemers so we can actually delete this CMS folder we no longer need it and I am also I also going to now CD out of the front end and actually move all these files so I'm going to move them let's see actually doesn't work like this so I am going to again delete the cache so the next folder and I'll just move this down so I'll try to move it down here and I'll move so we can go on to have the setup we had initially and we can even delete the front end folder great so let's restart our application using npm run Dev all right so we just wait for it okay seems it's um seems it's ready so we can go back to and refresh our application so we can reload the studio and we see the studio loads up fine no issues and we can also reload our nextjs application actually they are both our nextjs application but we have our studio leaving in our front end so our nextjs application loads up as well great so before we create our before we create our schemas I would like to let's see so before we create our schemas which would leave inside this index if we come over to our config so our sanity config here I would like to move these into environment variables and to move this to environment variables I am going to come over to root folder here and I'll create a new file which which I'll call EnV and first let's get start with the project ID I'm going to create this key so nextore public uncore sanity uncore projector ID equal to and I'll just duplicate this and next I'll change underscore project ID to be data set so next public sanity data set for the project ID we'll copy or cut this value here here and I'll paste it in here and for the data set which is production I will also cut and paste it in here so I'll copy this value so in our sanity config we can reference this value so project ID is going to be equal to process. EnV do this and then I'll say as string and same for the data set so process. EnV and then do I'll copy this from uh EnV so data set and I am going to paste it in here and say as string great so now we have this you see in the schema we have the schema types which comes from our schema folder and if we visit the index here you see here we are going to be importing our schema types but before we continue let's verify our application works fine you see it's crashed so I'll quit and restart mpm runev that because we made changes in our EnV and it's always a nice practice to restart your server whenever you make changes so once it starts let's come here and reload both the um our web and also our CMS and here you see that it is you know actually compiling our CMS Studio index page so I'll just wait for this to compile all right so it's building up the page and once it's done we can go back to the browser okay so it is done compiling and here you see uh studio is loading up and also our front end so our studio is done and our front end is done and everything works as fine great so now we have this I actually close the terminal here we can go on to PCD documentation so here next up sanity which is the library we are going to be making use of so we're going to install this later and here you see we're going to making use of the um sanity adapter and we have to create our sanity schemas okay so this is one schema so the user schema which is required or you know if you go up you can see another way but actually I going to Define my own schema so that I can configure to our needs and you see all these FS that are required the password is only required if you use credentials provider which is our case in this project and we also need to create an account schema with all these fields and we also need to create verification token because we are using the email provider and then we have ways to configure it so let's come back to the IDE and let's get started first we are going to create our user schema so our user. TS file here and this is going to be an object so we're going to say con user is going to be equal to this object and let's not forget to export this object as the default so export default user so a user the way to go about it is by giving it a name and this name is going to be a string user this this name is for queries and this title user is for Stan studio and the type is going to be a document type so the type of this file is a document the schema and it's going to take different fields so these are the properties that we expect a user to have and to define a field I'm going to use this defined field which I'll import from sanity so that we can get T script autho completion and also correct Direction so a user is going to have an e admin property so that is the name of this field so the name is going to be is admin and the title for our Stan studio is also going to be is admin and the type is going to be bulying and we can also give a description now this is optional you can Define your schemas Fields without adding description or you can go on to define the description and for initial value I would say false because initially a user is not an admin and this field is actually going to be required so validation rule which is a function where we going to return our validation we're going to return row do required like this which is a method so you have to call required so this is one field which our user is going to have we can also make this read only so I'm going to actually comment this out so if you don't want this property to be able to change in your sanity Studio you can make it read only you can also make it hidden so hidden true but I'll just comment it out to let you know these options exist so let's define another field that the user would have the name of this field is going to be name and the title is going to be name okay so user is going to have a name property and the type of this is going to be string which is needs to be string like this and the user is also going to have a description and this is going to you know you can give this description the name of the user it is not um required so this description is just for your sanity studio and I'll make this read only so that we cannot change the name of a user and we also going to define a field for image and the type here is going the title sorry is going to be image and then we are going to have the type so the type is actually going to be uh URL for the user image okay and then we are going to Define another field for our user property and the name of this field is going to be uh password so user is going to have a password and the type of this is going to be of type string and we are also going to go on to make sure that this password is hidden so that we cannot um see the password of a user that's registered to in our application and let's go on and Define more Fields so we're going to Define another field and the name of this field is going to be about so a user is going to have an about and the title of this field is going to be about like this and the type because it's going to be a longer um string we can say it's of type text okay like this okay so you see here we can also add the description it is not um mandatory and in other schema types I may not even add this description field you just see it in your sanity Studio okay so this is just a brief uh description about the user that's the description I left here and I copy this validation rule so that we can apply it to other fields so I'll copy this and apply it to a name so that a user will always have a name and you can make all Fields required if you wish so let's import this schema in our schema types like this and if we come over to the browser to have a preview of this you see that we have a user here great which which is you know for now there is no user and you can try to create one but this should be created whenever a new user registered in our application so let's go on and create another schema type and the schema type we are going to be creating this time around is for account we saw this from the documentation is actually mandatory we create this so we have const account and we can already export this as the default so export default account and the name is going to be account like this and the title is also going to be account and then the type of this is going to be a document so we're going to give this a type of document and then we are going to go on to give this the different fields that the account is going to have so I'm going to make use of the defined field function from sanity and the name of one field we are going to have is the provider type okay so an account is going to have the provider type because we are going to be using different providers GitHub provider and Google provider even credentials provider okay so we are going to have another um field which is going to be provider id and this is going to be provide uh provider account ID and this over here is going to be the refresh token and I'm going to just go on to duplicate this and the next field user is going to have is the assess token like this and lastly the next field the user is going to have is the assess token expired expires and this is going to be of type number okay and we can go on to Define one more field and this field let's just give this field a name and the name of this field is going to be user so that we can have a reference to the user schema and the title is going to be user the type is going to be of type reference like this okay and then it needs to point to the user so reference to and then we're going to have the type the type is going to be user like this so this is the accounts and we are going to import this inside of our schema types so our accounts will come from our do/ account okay and let's create on the schema and this schema type is going to be book booking because we are going to be booking hotels and we want to have a booking type okay so the concept booking is going to be equal to object and we can already export this as the default so the name of this is going to be booking and also the title of this is going to be equal to booking and then we have the type which is going to be of type document and now let's go on to describe the different fields that uh booking is going to have in our application so we use the defined field method and this U the the name of one field the booking is going to have is user and then the title also is going to be user the type is going to be reference and then we need to add two so that this reference points to the user schema okay so two is an array of objects where it takes the type and the type is going to be user so a booking will also the user would also have this validation where we say the rule and here we say it is actually required like this so we're going to Define another field so Define field like this and the name of this field is going to be hotel room so I'm actually going to cut this and then add the name hotel room like this and also the title so the title is going to be equal to hotel room and the type of this is going to be a reference type and which is going to be pointing to the hotel room schema and we haven't created this um schema type yet it's okay we are going to be um creating this type type soon so we have an error and that's um let's see we'll come back to it for validation we just going to say this is required okay so Rule and here we say ru. required like this so let's inspect our error and let's see yeah so that's because it's meant to be an object so I'm going to cut this and put it in an object like this cool so let's duplicate this type and the next type you're going to have is for our checking date and the title is going to be checking date because the booking we want to keep track of when the user checks in and also when the user is going to check out and the type of this is going to be a type of date okay and I'm going to duplicate this for our checkout date so rather than checking this time around a checkout date and the title is also going to be checkout date and every other property Remains the Same so apart from checkout date uh booking is also going to have the number of um days so the number of days we expect the user to book this room and the title is also going to be number of days and the type is going to be of type number and the initial value is going to be one so once you create a booking you're going to have number of days which is minimum one and we we can change that mean here to be one like this and I'll duplicate this and here we can go on to add the discount so in case um a user booked a room that had a discount okay so this is going to be a title discount type number initial value zero and minimum zero like this and I'll just bring this down again and we're going to have another field to keep track of the number of adults so the title is going to be adults the name adults initial value is one and the minimum value is one for creating a booking okay and apart from adults we also need to keep track of the children and the title is going to be children type um number initial value zero the minimum also zero like this and let's um duplicate this and another field we want to keep track of is the total price so the name is total price the value is total price and the type remains of type number no initial value great so I'll zoom out a bit so that we can see the different fields here so for a booking hope and if you need more clarification please do make reference to the GitHub repo okay so in case you made a mistake please do reference the GitHub and here in index I'm going to import the booking okay so let's go on and create uh more schemers and the schema we're going to create is a hotel room now this is actually you know going to take a lot of schema so I ADV again that you go to the GitHub in case you know to just make sure everything works fine and the title of this hotel room is going to be hotel room and the type is also going to be of type document and then we can have the different fields okay so to get that script Auto completion I would make use of this defined field from sanity okay so let's uh a hotel room we definitely have a name so the name is name and the title is equal to title and the type of this hotel U the name sorry is going to be of type string and also for validation you can have more you know validation that than we have seen so far so we have a validation room and here we can go on to say that this is required and we can also go on to say that this should have um a maximum of let's just say 50 characters like this and while we having an error um actually let's see why we have okay yeah so we forgot to call the required like this so we have to call required and then we can go on to add our own custom error so like this and here we we can just go on to write any error message that we want to see in our sanity studio so maximum 50 characters okay so we have more Fields um for the hotel room so hotel room will will also have a slug and this doesn't actually no it doesn't have a title so I'll take this off and the type is going to be of type Slug and I will take off this um other validation Rule and we can have options so for slog and options is an object okay so options is an object where we can specify this source so this uh slug we want the source to be from the name field which we defined um above okay so let's define another field for our hotel room and a we have a description and the title is going to be equal to description and the type of this is going to be text because it's going to be u a much more longer um string and here we have this validation where we can make use of 100 characters 100 but rather than maximum you can SC with mean and update text to minimum 100 characters for the description so let's copy this here and Define another field for the price and the title is going to be price the type is going to be of type number and this is going to have a minimum of 100 so maybe 100 USD for our price everything Remains the Same and next we have a discount so that we can leave discounts on our various hotel rooms so the type is going to be number and the minimum this time around so we're going to have row. mean the minimum is zero so zero like this okay and we can also add add an initial value of zero so by default um a hotel room doesn't have a discount so the discount is zero and let's continue let's define more Fields so we're going to have this field for images and the title is going to be equal to images okay so the type this time around is going to differ it's going to be an array type and next we are going to have an array of what so it's an array again where we have an object here we can customize the type and say the type is going to be object like this okay and we have Fields actually this Fields needs to be defined inside this subject so erase it and come inside this object and Define the fields great so it's going to have fields which is an array we can pass the name and here the name needs to be in an object like this yep so we have the name which is going to be URL and we can also pass a type the type is going to be of type URL as well and then we can pass the title the title is also going to be URL great so I'm actually going to copy this object we have in here and I'll duplicate it this time around for file so the name is going to be file the type also is going to be file the title is going to be file like this we can also add validation rule to this um images which is an array so we have our rule function and here we are going to return return Ru do required okay and we can also go to um add a mean of three and also a costume error so this is an array that means it needs to be an array of minimum length of three okay so minimum of three so minimum of three images requ ired like this and then we can go on to Define more fields for our hotel room okay so let's add more the name of this field is going to be equal to the um cover image like this and the title is also going to be equal to cover image and the type is going to be of type object and next we have the field because it's an object so it's an array where we have the name and the name is going to be URL and the type is also going to be URL like this and then we have the title and the title is going to be URL so I'm just going to duplicate this where we are going to have the name so the name here and the name is going to be file and the type is going to be file as well and for the title we will also give it a title of file okay so let's add more uh let's add a validation before we continue and let's just go on to say that this cover image is required so we can have our rule and we are going to return our rule here and just say it's required and then let's not forget to call and also add our error we have our message and say cover image is required here next we're going to Define another field okay and this is an object so we have to add an object we have a name and the name of this field is going to be type and the title is also going to be room type but now just fix this typo in here like this and now we're going to have the type the type is going to be of type string okay but when it comes to options we need to Define these options because now we have list we're going to define the list up here okay so let's define the list by having this constant what that we call room types which is going to be equal to an array okay for title we're going to have our first room type which is going to be basic and then the value is going to be basic with a lower case b so basic like this and this has to be in an object so cut and wrap it around an object and then I'll bring this down two more times and the next type we're going to have is luxury for the title and also for the value but with a lower case L and the next is suit and the value is also going to be suit like this so we can pass the um room types as a value to this list over here so we're going to have a list and for validation we can have a validation ru rule so we have our function and here we are going to Reon our Ru that makes this required we can also add an initial value so the initial value is going to be basic so when we create a room it's going to be a basic room by default so I'll duplicate this and the next type um is going to be special notes that is the next field sorry and the title is going to be shall note the type is going to be of type text I'll get rid of the options and for initial value I'll just paste in this text over here not room types just paste in this text and zoom out so it just um a normal string you know just giving the user some information so this is the initial value and it is also um required so that's not all for the hotel room we still have more fields and the next field is going to have the name of Dimension this field is not going to be required the title is going to be Dimension and the type of this is going to be of type string so it's not going to be required and this configuration is actually okay for the dimension and let's define more Fields the next field is going to be number of um beds and the title is going to be number of bread the type is going to be of type number and here next we are going to let me just fix this up our validation where we have our validation Rule and we are going to return return a rule that makes this um required and have a minimum of one okay we can also give it an initial value in that case and give it an initial value of one as well and let's define more Fields the hotel room is going to go to have uh an offered amenities like this and the title is going to be equal to offer amenities and now let's have the type the type is going to be equal to where is it it's going to be of type array and next we're going to have an array off so we're going to have the off value which is also an array and we can configure it with this OB U object so the type is going to be object and then it's also going to have the different fields okay so the field is an array and we can also give it a name and the name is going to be icon so we intend to use Font aome icon so that we can integrate this seamlessly in our front end we'll get to that when we start fetching data and when we start creating a room so this is going to have another object and the name this time around is going to be the amenity okay no worries we will see how this works and this is going to have a title of amenity and it's also going to have a type and the type is going to be you know of type string here I'm not actually going to copy that we are going to Define another field for our hotel room and the next field for our hotel room is to find out if the auor room is booked and the title is going to be is booked like this the type is going to be of type bowling and we're going to have an initial value of false because initially this room is not booked so I'll bring this down I think two more times where we have the next one is featured so the name of this field is going to be featured and the title is also going to be is featured and every other values can remain the same so next we're going to have reviews because a hotel room is going to have reviews and the title is going to be reviews the type is not going to be bullying the type is going to be of type array and we are going to configure so we're going to have an array of words so I'm going to fix this typo here and it's going to be an array of type review so of type our review schema which we have not defined yet so let's put this hotel room schema in our index here actually we need to export it first so let's export default uh hotel room like this and now we can import it in our index.ts so let's take one last look of the hotel schema in case you missed anything please do refer to the GitHub where you would see um the code which we just wrote out together okay so this is the hotel schema let's create more schemas the next schema we're going to have is going to be a review schema okay so it's going to be pretty much straightforward so we have con review the name here is going to be a name of review title is going to be review and the type is going to be of type document docment like this and then we have the different fields for our review so this review needs to be linked to a hotel room and also to a user so one field we are going to have is the name user and also the the title is going to be equal to user and the type is going to be of type reference we are not getting Auto completion so I'm going to cut this object and make sure that I have it in the defined um the defined field method that comes from sanity then I'll past in this field and we have this error already because a reference type needs to point to a document so we're going to have this two and this two is going to be an array and this array of object here I will say the type is is going to be type user can have a validation room and here we are just going to receive our validation Rule and return return not here so we're going to return return the rule that make sure that this field is required like this so let's copy and paste it because next looks similar because next is also going to be a reference type that will be pointing to the hotel room and the title is going to be hotel room the type is um reference the type here is going to be hotel room like this and then our review just has um some more couple of fields so let's bring this down two more times and this is going to have a name of text which is the actual review text and the title is going to be review text the type is going to be text and the type here is sorry going to be reference and the type here sorry I'm just going to R this to text and get rid of this to here great so that fixes it and next is the user rating so this is the user rating which should be between 1 to five the title is going to be user rating the type is going to be of type number and I'll get rid of this two and apart from required I'm going to chain mean it's going to have a minimum of one and also a maximum of five and we can just have our costume eror so we just telling the user rating must be between not a so rating must be between one and five so this is our review schema let's not forget to export this as a default so export default review and we can already import this inside of our schema types so I'm just going to remove every other tabes that we have open and save this we are not done creating our schema actually we have one last schema to create and this is our verification um token so this is the last schema we will be creating and this is because we are making of the email provider so we have this con which is going to be we call verification token and let's not forget to export this already so the verification token schema is going to be um pretty much straightforward okay and this verification is going verification token is going to have a name of verification token like this and next is also going to have a title and the title is going to be equal to verification token okay and the type is going to be of type document okay like this and now let's have the different fields so field is an array we're going to use our defined Fields method and one field we are going to have is going to have the name of identifier so it token is going to have the name of identifier and the title is is going to be equal to identifier like this and the type is going to be of type string and I'll just bring this down two more times and next we are going to have a token so a sply token and the title is going to be equal to token and the type remains string and the next is expires and the title is going to be expires and the type is going to be date time like this and this is for our verification token so pretty straightforward and I'll fix this typo over here should be verification token like this and this is our verification token schema so we can import it inside of our index. TS so verification token and that's it for creating our schema pretty intense you can verify in the GitHub and we miss our verification token here so let's see the type if it's actually of type document yeah it's of type document so let's come back to the browser and we see our verification token so everything is fine pretty intense if you missed any please do check the GitHub now we can proceed with our authentication using next off so get started with next off here we are in the documentation and we see the command to install next or sanity but let's scroll further down to the example usage so here you see to use the GitHub provider you need the GitHub client ID and the client secret so what you do next you come over to your GitHub profile and click on your profile Avatar over here and you click on settings so once here you can click on developer settings and then click on or apps you create a new app I had an app from previous and you could give this um application name hotel management and the homepage URL we can take this from our application and paste it in here and same for the authorization callback URL so Local Host 3,000 and register application so here we have our client ID I'm going to copy our client ID and come over to the IDE and in our EnV I'll create a new key which I'll call GitHub uncore client _ ID and also create um GitHub client secret so GitHub uncore client andore Secret secret and we can get this from our repo so here we are going to generate a new client secret and you provide your password and then you click on confirm so now you have the client secret you can copy and before you go back to the uh IDE click on update application and next you can now P this in the IDE over here okay so we also need our Google client ID and our Google client secret so here we going to say Google client ID and equal to then we can also type our Google clients secret so let's go over for our Google client ID so come over to cloud.google.com and go over to the console okay so let's wait for this to load up and you would have to agree to the times of service and click on agree and continue okay so come over to this tab here where we have this drop down to select the project and we're going to click on new project so you can give this project a name I'm going to give this um project a name of hotel management like this and click on create okay to create this new application so take note of this Bell icon here so once the application is created we are going to be notified yep it's done and you can select the project now we in the project dashboard let's create our a AP keys so to do that you can come over to apis and services and here click on all off consent screen yeah so we click on off consent screen and it brings us to this um dashboard we'll just wait for it to load up and here for the user type please select external so that is available for anyone with a Google account and click on create and we need to give this application a name I would also give it the name of hotel management and this name is a name that is going to be visible on the um UI when Google is asking the user to authenticate so this could be your brand name and give the supports email and come down here and for developer address I will also go on to provide um the same email address over here so bright 2 which is the email address for this project sorry the Google account I created for this project so P Library 2 and click on Save and continue so the next step is copes we can actually skip this so just say save and continue for test users we would also say save and continue and here you can see the summary of the information you provided okay so this is the the summary and for us to proceed you can now come over to credentials and here in credentials tab you just click on create credentials and you choose all of client ID and for application type we'll choose web application you can leave every other thing here and then we come down here we are going to click cck on ADD URI for authorized redirect URI and this URI is going to be HTTP colum for/ localhost colum and then here we have 3,000 for/ API for/ off for/ callback for/ Google like this and you can okay I'll just delete this water one here so that's the URI and then once you have this URI you can come down and click on create so this has been created we have our client ID I'll copy this client ID and P this in the IDE and go over to copy our client secret so this client secret and I'll paste it in here as well and I'll just say okay over here so this is all we need at least to get started with uh authentication Google and GitHub okay so now we have all of this we can come over to next sanity and copy this installation command open our terminal and I'm going to create our terminal and paste this in here so mpm install next off sanity and we also need to install another package which is the next off package like this please do go on and install these packages and I'll just wait for it to install and once installation is completed we are going to start our development server with npm run Dev okay so in our source folder here in our source folder we are going to create an API folder which is a special folder in nextjs and here we're going to create an off and inside the off we are going to create this special folder with next off like this and here we are going to create a route. TSX sorry a route. TS so here it is API off next off and route. TS you can also see it over here okay and to create this we need to import the next off not from next off off so next off is just going to come from next off like this and here we are going to create our Handler so we say con Handler is going to be equal to next off so I will remove this inputs we have here and make this to be an uppercase n and we call this and you see it takes in some options we don't have yet and let's go on and Export this already so we export this as an object like this so we export Handler as get it all has to be open case and we'll also export Handler as post like this and we need to provide the options for this we are going to create a new folder in our source folder which will call lebs for library and here we are going to create our off. TS file okay and this off. TS file we can go on and export ort this constant which will call off options off options is going to be of type next off options which needs to be imported from next off and equal to this object so we can already import this other options inside of this uh route Handler here and I'll just rearrange the order so now we have this let's have our options defined in here so the first options we are going to provide is the providers which is an array and for GitHub we are going to have our GitHub provider like this which we need to import okay so this GitHub provider we are going to import this um GitHub provider coming from next off so next off for slash providers and for Slash GitHub okay and we can already import the Google provider coming from providers for/ Google and we're going to change the name here to Google provider so this GitHub provider as we saw documentation it takes in the client ID and this is going to come from our process. EnV and then do um let's go back to our NV file and copy this key so GitHub client ID and you say as string to avoid any errors and then for the client secret it will also be coming from our process EnV and then do we copy this GitHub client secret key and we use it in here and we say as string like this okay so now we have this we have this error so I'm just going to fix this typo here it should be string like this and next we can have our Google provider so I'll duplicate this and I'm going to use actually copy this Google provider and use here so I'll copy the client ID from EnV and replace this as well as the client secret so place this value over here okay so after this we also need to go on and provide the not this so we're going to provide the sanity credentials which needs to be imported from next of Sanity like this and this sanity credentials is going to take the client so we don't have the client yet we are going to create the client in a second and here the session is an object and we say the strategy is JWT like this okay so the next configuration is the adapter and the adapter we're going to be using is going to be our sanity adapter which also needs to be imported from next of sanity and we call this and it also needs a client we are going to provide the client in a second and next we want to get useful the buug consoles so here we're going to set this only if not EnV is equal to development so that means the bug is going to be true in that case and for the secret we can Define this in our process. EnV so here in our EMV file we're going to call this next oore secret and I'll just go in um word secrets you provide um much more hard word to guessing in your case and this secret would be coming from our process.env and then with this next of secret key and we also need to provide more configuration for now the Callback I will just leave this empty object we are going to revisit this callback so let's create our um let's create our credentials our sanity client to pass to our sanity credentials and to do this still in our lips folder I'm going to create a new file and this new file I would call sanity Dots here and let's go on and import the create client method which comes from next sanity here and we can have our sanity client variable which is going to be equal to this create client and this needs the project ID which we are going to get from our process and it also needs the data set we will come back to these and it also needs this use CDN all right so this ucn we are going to set it to be true only if we are in production so if process. env. notore EMV is equal to production like this okay and next we need to pass the token and for the token let's do that later and next we need to pass the API version and the API version is going to be 2021 iPhone 10 iPhone 21 like this so for the project ID we can copy this from uh EnV so next off sanity project ID so project. EnV and I'll P this key same for our data set which also be coming from our process. EnV next public sanity data set and for the token we can come to our application and here I'll just click on this Avatar and go over to manage project okay so now we are here we just wait for this to load up you can come over to the API section so click on the API section and click on token and we're going to click on ADD API token and we can give this API token and name we see some example names that we have up here and I'm just going to give this a name of read and write assess like this and I think we can space this okay read and WR access and most importantly you should make this editor like this so click on this checkbox and you see you need to have read and right access to our database our data set so I'm going to copy this token and come back to the ID here come to the EnV and I'll create a new EnV key for this token and this I'm going to call sanity like this underscore Studio underscore token and then I'm going to paste in this our token and copy this and come over to our sanity TS and the token is going to be coming from our process EnV and then sanity Studio token like this let's export our sanity client so we're going to export this as a default export so we can pass our San client to the San credentials and San adapter and I will let the IDE import this from our sanity file okay so this is what we have going in our off. TS file over here so these are the settings and now we are done with this I will just close all these tabs that we have here and we can come over to our components and in here I'm going to create an O provider so that we can provide this to our component so we have our off provider. TSX and I can already make this uh client component making of This use client directive and next I'm going to import session Provider from next o react and this is the jsx so I'll call this next o provider and this is going to be equal to this aror function and we're going to receive props so Props is an object where we dist structure children and we say this is going to be of type um props and we can Define the props up here so type props is going to be equal to this object where we take children and children is going to be of type react. react node like this and come down here we can have our return return where we return return the session provider and in here we are just going to wrap it with this children that we get from our props like this so we have this provider we need to make use of it in our layout okay so come over to the app and in here to the web and in here to the layout. TSX and I'm just going to cut and wrap everything with our next o provider which needs to be imported from our components Earth provider and Earth provider so this import over here so everything is fine um for now and now we have this we can go on and come over to uh o and then uh sign up our page so I come back to our app and here our Earth page. TSS and this is the handle submit function first I'm going to quit our terminal I'm going to restart our server okay so before we actually continue this page we are going to be sending some toast notification so for that I'll come over to our components and create a new folder which I'll call Toast TSX toast and create a new file which I'll call toast. TSX so in here we are going to import the react hot toast package so mpm install react hyphone hot hyphone toast like this and I'm going to make this a client component making use of the use client directive and then I'm going to import toaster which comes from react hot toast so this is pretty straightforward we are just going to have this toast GSX and here we are going to Reon toaster like this and we're going to export default toast now to make use of this Library we are going to first restart our development server and then come back to our layout where we import this um toast so here come over to the web and in the layout. TSX so just right above the main I'm going to import to that will come from our components toast SL toast and this file this component here okay so now in the page. TSX I'm just going to make sure that you know we are still getting our console.log so here I'm just going to open up the terminal and here I'll visit the off page so I'll click on this Avatar and this is going to take us to the authentication page and I don't see the bother around the input and to fix that I'm just going to Y have this hphone here and I'm just going to reload the page okay so that's we see our changes and once it reloads we get an error actually so if we see this error is because we have uh you see we have this uh where is it so you see Local Host 3000 API off is not found and if we come back to the IDE that means our API folder is outside of our app folder okay so you see our API folder actually this folder needs to be inside of our app folder and that's why we get this error message that this F for that that page canot be found okay and to fix this error we are just going to drag the API folder inside the app folder like this we're going to move it and this is the API folder actually inside the app folder okay so inside the app folder like this and if we come back to the browser and just reload this page now we don't get any errors so let's be sure that we are getting the values to the console so I'll just give it a name of test and give the password of one to six click on sign up and yep we are still retrieving so now let's work on this form submission and the first thing I'm going to do actually really rather than have this log to the console let's come here and have this user user we are going to await sign up and sign up needs to be imported so import sign up from next of Sanity for slash like this client so let's also import uh um sign in like this and also the use session hook and this will be coming from next off react so we're going to import this from next off for slash react like this and then we can come down here and call this sign up method and pass our form data which we just saw on the console not quite long and here we're going to check if we have a user like this then we are going to send a toast notification to the user using toast do success where we just go with the text of sign success and then tell the user to please sign in this is actually going to fail so by want us to say this error because we have not yet implemented one route Handler so we're not going to see the success over here in the conso log error we are going to set the error and let's to. error and say something went wrong so it's actually going to fail but I would like us to see it because we need to implement one last route and if we come over to the browser I'm just going to provide an email so test at test.com and uh username is going to be test and the password is going to be one to6 so we click on sign up yep so we see our error and let's inspect this here you see that we get this 404 not found so/ API SL sanity SL signup we don't have this API route implemented and that's why we get this error so next Earth sanity actually makes needs this API route so so inside of the API folder here we are going to create a new folder and this folder would call sanity so this sanity needs to be directly inside the API folder like this okay so inside here we are going to create a sign up folder and in here a sign up route so for request coming to/ API SL sanity SL signup okay so here we're going to import the sign up Handler and this sign up Handler needs to be coming from next Earth sanity and next we're going to export our post Handler so we're going to say export con post and this is going to be equal to sign up Handler like this and we're going to pass our sanity client okay so go on and save this file and actually this is all we need to do now for this to work so I will reload our browser and here for the email let's go again let's give there an email of test at test.com and for the name I'll just go to the name of test and provide the password of one to six so click on sign up and if sign up is successful yep we see success please sign in and if we come over to our sanity Studio we see the user here so this test user we just created and with those with these details so wait for this to load so we'll just give it a second and it actually crashes okay so nothing wrong here we are just going to inspect the terminal we see the terminal is fine we're just going to reload this um our studio okay we made changes to it and we haven't refreshed the studio in a while now so once the studio reloads you'll see that everything actually works fine okay and this is the user we just created so with this name with this image and we don't actually get the field email defined in our schema so let's visit our schema perhaps we missed out the user email so here inside of our schemas and go over to user. TS Let's see we actually missed the user email and know if it's also verified so the verified field so just after uh I'm going to create the email field and I'll Define this field just after our password so here Define field and the name of this field is going to be email so the name is going to be email and the type is also going to be email and then the title the title is going to be email and the type actually is going to be string so not email so the type is going to be string and I'll just duplicate this so that we know if the email is verified so here we're going to have email verified the type is going to be date time and it's actually not going to have a title because we are going to set this property as hidden so hidden through like this so let's come back to the browser and I'll just reload our sanity Studio to pick up the latest schema changes and now everything works as fine so you see we cannot type inside the to change the email the name and I'll just make this admin to be true and publish it was actually published um when we created a user so let's try um let's go back to the IDE and in the ID we are going to have all our login provider so somewhere here we have this signning imported already and this use session okay so let's get the data from our use session so we're going to D structure data and rame it to session coming from the use session hook and in here I would like us to console.log the session okay so I want to do this so that we can see how the session object changes as we log the user in so here we're going to have this login Handler which is going to be an async function like this and we're going to have our try catch block so in case of Errors we are going to log the error to the console so we're going to console. log error and next we're going to have this to. error and then we say something went wrong like this and in the tri block we are just going to await the sign in like this without passing any provider here okay and once we sign in upon successful signning we want to go on and push the user to the homepage so here I'll just leave a comment and say push the user to the homepage I want do this now so that we can see this uh console.log and the sign in the login Handler I'm going to pass it to the GitHub icon and I'll just copy this click on click here and pass this also to the Google and also pass this to our login button which is this button over here so let's save this and let's go on to try this out and we we expect to see our session and how our session updates so here I'll just close this and you see we see a bunch of null I'll just reload the application and now we have application reloaded let's try to to sign in the user so click on login and I'm going to log in with um credentials we already have the GitHub and Google wired up but first let's try to sign in with this user that we just created and once we click on signing with credentials let's keep an eye on this console and you see how we get the user object so this is our session object so we have our user email and our us user name so let's try to authenticate via Google I'll just clear this and now click on the Google icon and we're going to click on sign with Google here and I'm going to choose my email address okay so let's keep an eye on the console and over here you see we still get our user from our session object and if we come over to the um our studio I'll just reload because we still see the test user and actually we still see the test user because we we don't have any functionality to sign out yet so we have to just do this manually and but you come over to the account so if you just come over to the account you see we have a new property o and you see the provider id is Google and we see all these properties but the user is still the test user because we we didn't sign out that user okay so we still use um the same credentials as before but we see everything here so what I'm going to do actually I'm going to manually sign out by deleting the this um property we have here and come back to the user I'm actually going to delete uh this user as well so just come here and delete this user okay so come back to application I would come over to the application tab so that I just clear all the um storage that we cut from next off so clear the local storage and also clear the session storage in case we have any um things St there and come back to cookies and I'll also clear the cookies okay so now let's try this out I'll reload the our application and then I'll click on GitHub let's try sending in with GitHub and here I'll just click on authorize myself and if this is successful we should be redirected back to our application so let's wait for this and we are redirected back to our application and we see that we get our user and this time around you see the name ofd to my user name and I'll just make this user me to be null we see the image we see the email and I'll publish so if you come over to the accounts again you see we have o off and we still have our users so everything is working fine so we can click on the back to our application and I'm just going to sign out again manually I'll clear all the storage that we have and reload our application come back here and I'll delete this user so that we can try our Google authentication so delete anyway and is not successful because first this o we need to delete it so you see here this GitHub o we are just going to delete and now delete the user as well all right so next we can now try to sign in with Google I'll click on the signning with Google and you know we have already given this application permission and we should be sign in automatically so here we see our user object and now you see my name and we see the user property so everything is working fine and you see it was actually published and I'll just set this admin property to false okay and everything works fine even if we come over to the account tab over here so now we are making sure that the we are getting the session we can now make use of this to navigate the user to the homepage so in our use effect let's not forget to add our dependency array we need to push the user to the homepage and to do this first I'm going to just quickly have router which is going to be equal to the use router hook that the next GS team gives us so import use router from next navigation okay and here we can push the user to the homepage so router. push to slash and I'll copy this and come over to our use effect and first I'll going to check if we have session if that is true then push the user to the homepage and add our dependent array where we need to pass router and session like this so now we should be redirected to the homepage because we have a session great and we are redirected to the homepage so we have this page um done we see I'm just going to remove any console. logs that we have so all these I'll leave in case of any errors and now let's take a look at this callback object that we have here okay so this SC back object out come over to the header so here in the header component I'm just going to get access to the session as we did in the sign up page so somewhere here I'm going to have this Con right structure data which are rename to session and this is going to be equal to the use session hook which comes from next off react and I'll just re rearrange this and here I'm going to console.log session and if we come back to the browser you see the property that we have in our session so we have this user with email image and name we want to add an extra property to this session so if we come over to Earth TS we have this callback object have the session which can be an asynchronous function and here I'm just going to D structure session and token like this so inside this function I'll going to get the user email from our token so this is going to be equal to token. email like this and I'm going to have this user coming from our sanity client so I'm going to await sanity client. fetch let's try to f a user via this email so here I'm going to provide a query we're going to go more into this when we go over to data fetching but the query actually works like this with the star and then the cracket and we say theore type is equal to user and we want to get the user by email so where the email is equal to like this and there we have the dollar sign email so this dollar sign is to inject uh a parameter so we get to this and we want to structure the ID so we added this Z here because this returns an array and we want to just get the first matching elements and we can say this fetch is going to return an object so an object with the underscore ID property which is going to be of type string so remember here we are just getting the underscore ID now we have this user what we are going to do next we are going to return this object where we spread all the session and come down here where we update our user so in our user property we're going to have this object where we spread the session do user and most importantly now we want to add this ID property and the value is going to come from our user doore ID we are now making use of this email so this fetch takes in a second argument and the second argument is the query parameter so comea here and you say we have param of type Cod parameter and we'll pass email to be user email so this email needs to be this email with this dollar sign here so this email okay so now if we we get the user and we update I'm just going to log this this user to the console and check our terminal everything still works fine and we get our user so if we open this up now you see wa we have the user email the ID and other properties so from previously we didn't have the ID but now we have the ID of the user and here we have it on the console the user so I think we should update that because that is not actually the user that is the user ID so I'm going to change this to user ID and I would use it here so rather than user ID I actually call it user ID object and use this here okay so that's great now we're sure we have the ID we can make use of this in our header to correctly navigate the user to the user profile page okay so this link where we that goes to SL off I'm going to cut this and I'll have a check to check if we have session. user if that is true then I'll paste this link otherwise I would paste this link again I'll still repace the link but the navigation is going to be different so this link would go to the user profile and this link will go to the authentication page if we don't have uh an an authenticated user so the H is going to be dynamic I'm going to delete this and so that we can use this object here and back tick so we're going to go to/ users and then I'm going to use the last sign bracket session. user. ID now we get this error that we don't see the user property so user ID doesn't exist we know it actually exist because you know we just saw this in the console so to fix this error we are going to have another types so in our root folder I'm going to create another file and this file out call next hyphone off. types. TS like this so in here I'm going to import a type A type that will come from the next or Library which is the default session type so here we're going to declare a module in this module we're going to call the next alt module and here we have our bracket so we're going to have an interface for the session object and in here user and user is going to be coming from the default session we're going to D structure user like this so like this we are going to D structure user and we want to add an extra property so we say end here and we have this object where we add the ID and the ID is going to be of typ string so now you see this gets rid of the error that we had in our header and now um the property ID property has been added to our session and here I'm going to have another change so to show the user profile image so we're going to check if session. user. image if that is true we're going to return return a div not um fragment we're actually going to return return a div and here we say otherwise we'll just return this Avatar so in the case where the user doesn't have uh an image so we're going to give this a width of 10 a height of 10 rounded full and overflow hidden and inside this div we are going to have an image come from next image and inside this image we are going to have the source property which is going to come from our session do user. image and then we're going to have our art property which is going to come from our session. user.name okay and now just add this exclamation sign here all right so we're going to give this a width of 40 and a height of 40 like this okay so this is the settings we need if we save this and we come back to our application you see our application reloads and we have an error so we have an error for the host name so for the image host name so actually I'm going to copy this error and come over to our next config dots file so here I'm just going to come over to our next config.js and inside this object here I'm going to have images and images is an object where I have domains and domains is an array of string where I provide the string so if we open the terminal you see next off is trying to restart our server I'm actually going to quit it and restart it ourselves using npm runev and we come back to the browser I will just reload this okay I'll reload this and wait for our application to build so it loads up and we should see the aatar update great so now we s we see the user Avatar update to the user image which in this case is just this um a we have here so for GitHub if we have the errors do go on and have add the GitHub image in the domain so now we have this avat I want to add the um an animation and I'm going to do this inside of uh global. CSS file so first I'm going to give this a class name and in the app AP not API web and global. CSS I want to add a costume um class name for our image and also a scale animation so IMG I'm going to use the at apply directive and give this class name of object cover with full H full like this and I'll have this um styling for scale animation making use of the apply directive by taing CSS and on H like this I'm going to scale and I'm going to scale this by one to five and then I'm going to transition all and I'm going to give this a duration of 700 like this so I'm going to copy this scale animation class name we can now use it in our header and also the IMG class name okay so now those classes we wrote out here in the global. CSS is going to be applied and we come back to application you see we get this um hover animation on the image so this is the authentication in our application next let's continue with our hero section so back to uh app and in our page so web page. TSX here we are going to have a hero section okay so I'll just have this placeold here where I would have hero section and then we can go over to create the components so in the components folder I'll create a new folder called hero section and in here I'll create a new file heror section. TSX so let's Bo P STP this hero section and get rid of the reactjs input so import react from react we get rid of it and we can already import this hero section over here in our homepage so here I'm going to um import the hero section and we are going to be working in this file all right so I'll change this div to section and give it class names already so give it a display of flex I would also give this uh padding on the xaxis of four item Center and give it a capap of 12 and a container and then I'll position the items in the center using MX atho and inside this um section we are going to have this div with a py of 10 and the height of full and in here we are going to have what I would call The Heading so we're going to have more like like the heading inside this div and also inside this div we are going to have another section and this section I'm going to have this placeholder that I would just call the room description okay so here we just have the heading and inside this div we have the room description and outside we'll have the images okay so in let's get started with the heading so here we're going to have this H1 and I'll will give this a class name of font heading we don't have this costume font yet we are going to create it in a second and I'll give it a margin bottom of six and this text of explore just explore our Exquisite hotel and after this hron I would have this paragraph and this paragraph is going to have this um text color of # 4 a not 41 actually so 4 a 4 a 4 a and on that team I'll would give this uh text of this # FFF up to six places and then add this EA like this and I'm also going to give this a margin bottom of 12 and here I'll give this a Max width of LG and inside this paragraph We are going to have this text of x experience and exquisite like this so experience and exquisite Hotel immersed in Rich history immer in Rich history and also Timeless Elegance like this so I'll just have this text inside here and then I'll have this button that says get started this button is going to have the class name of button primary another custume um class that we haven't defined yet we're going to Define this font heading and button primary okay so if we have a look on the browser this is what we have going on okay so what we can do next we can come over to this uh to uh um Global do CSS and in here where we have the this class name I'm actually going to paste these other class names so we have new class names for the button primary the button tertiary the font heading and font noral so we're using this at apply directive and we apply these classes you can obviously find this class in the GitHub repo which I attached to the description okay so that's where you get these classes I don't just want to see you to see see me type all these classes from scratch and take our time so that's why I just provided these um classes here which you'll find again in the GitHub attached to this video so go on and save this file and if we have a preview of what we have now this is what we have updated with our heading and also our primary button so now we can write for our room description I'm going to get rid of this heading tag here and I'll also get rid of this room description okay and I'll give this have a div here which I'll display Flex justify between and I would also give this a margin top of 12 so inside this div we are going to have another div like this and this div I'll give it a class name of flex and I would also give this a gap of three give this a flex coal like this position the items in the center and justify Center all right so inside this div we are going to have a paragraph and the paragraph that would say basic room here and this class name for this paragraph is going to be Tex SM Xs and on large devices and above this is going to have a text LG and our position the text in the center So Below this paragraph we're going to have what I would call a counter so more like showing how many basic rooms that we have in our application and this is going to have a class name from medium devices I'm going to position this I'm going going to position give this a font bold and a font medium by default give it a text LG and on larger extra large devices I'll give a text of five XEL so in here we can have a count as I said we just go with plus 20 I'm just going to bring this down twice like this so after basic room next so we're going to have luxury room and after the luxury room we are going to have suits which are the three main kinds of room that we are supporting the application and this is what we have going for preview so next for the images we are going to have this um div and let's style this div by giving it these class names and on medium devices we are going to display this as a grid and this is going to be hidden on smaller devices by default and this is going to have a cap of eight and we're going to give this a grid Coe of one so inside here we are going to have this first div where which would give rounded 2 XL and give overflow of hidden we're going to give this a height of 48 and inside here we are going to render an image so we import image from next image and we get this image a source so this image source is going to be a string and we also give it an ALT which will be a string and we're going to give this a width of 300 and a height of 300 like this so for class name I'm just going to use our IMG class name and give it our scale animation remember all these are coming from our global. CSS and after this we are going to have an another div that will hold two images and this would have a class name of grid and now we're going to give this grid code to remember the first one was grid call one and we are going to give this u a height of 48 so we're going to give this um inner div arounded to excel overlow hidden like this and here I'm going to have an image I think we can actually copy this um image that we have from up here so I'm just going to copy this and paste this over here we have two images because we have grid code too so I'm going to copy this div and duplicate so if we go to the browser let's have a quick preview this is what we have for now okay so this is what we have and for the images I have actually provided us with images to use in our project so if you come over to the public which is where we save static asset I'll create an images folder and in here I'll paste these images which I got from on Splash so these are the three images which we'll be using in this project so let's um point to those images so here to point to it we don't go with SLU we actually go to slash images automatically nextjs is going to look in the public folder and the name of the file is hero one. JPEG and for the alt I would also go with the with an ALT of hero one so I'll copy this and use this here so the next image has a name of Hero 2 and the alt is hero2 and same for the third image so I'm going to paste it here and go with Hero 3 for the name and same for the O So once we have this let's save this and have a preview so this is what we have now for our application great so we have this and it works as fine with our teaming feature great so let's animate this counter that we have here so I'll zoom out a bit actually and this other section for the images is the section on the right where we display these images okay so and we have these images here okay and we have this first image and we have this D for the two images and in this other place the same thing applies so I would like us to animate the text and for that I'll create another component which I would call count so I'll zoom in a bit and call this count up number okay so I'll copy this and create a file count up number. TSX so let's have the jsx for this component I would first remove the reactjs input and this is going to be FC for functional component and we are going to be receiving props so but first I would like us to go on and manage state that is the count State and set count which is going to be equal to you states that we import from react and we're going to start at zero and this FC is going to be receiving props so here we are going to define a type for our props and this is going to be equal to this object and we have the N value which is of type number and we also have the duration this duration is going to be in MCS okay so this is going to be of type number okay so here we are going to be receiving the props or we can D structure directly that is the duration as well as the end value all right so here just below this our set State let's have our use effect that we UT from react and our use effect we have this um callback function and we should not forget our array of dependency okay so let's go and have this um function this update count function which is going to help us to achieve this animation so this update count is going to be called with a Tim stamp which is going to be of type number okay so to achieve this animation we are going to have this start time which is of type number like this so we are going to update this start time based on the time stamp that we have here so first we're going to check if there is no start time then the start time isal going to be equal to the time stamp that we pass across to this function and we're going to get um keep track of the progress and we're going to say this is equal to the Tim stamp do the start time so this is going to give um track of the progress we have and we say if progress is now less than the duration the duration that comes in Via props we are going to update our account and we're going to update our account by getting the minimum value so making use of math. mean we takes in the values and the value we are going to pass in here is going to be the N value and we're going to have this mathematical mathematical operation here here we say the progress divided by the duration and we multiply this by the end value okay okay so this is we going on to update our set count our count property and let's keep track of the animation and the reason we are keeping track of this animation frame ID here is so that we can unsubscribe and do some clean up okay so we have this animation frame ID and we are going to say this is going to be equal to request animation frame provided by JavaScript and we pass this function so this update count function here and that's the Callback we pass else we are just going to go on and say set our account to the end value okay that we get from props so let's pass our dependency arrays so in this array of dependency we are making use of the N value and also the duration okay so let's update our animation frame ID just after this update count so our animation frame ID is going to be equal to request animation frame ID and the Callback is going to be our update count okay like this and let's not forget our cleanup so we are going to Reon here and this return is going to take this callback function and this callback function we can cancel the animation frame and pass the animation frame ID okay they hand that to it so I'll just zoom out so you see the complete implementation and here we are not actually going to have a div we're going to have a paragraph and this paragraph needs to be the count so actually I'm going to copy this from the hero section so this paragraph we have here just copy one of these paragraphs and I'll use it in here I'll replace what we have here and we need to round it up so the counts I'm just going to have this brackets and we are going to use the math. round like this and we are going to pass the count to it okay so this is the implementation for this count of number functionality and we can already use this in our hero section remember we are managing States here so making use of this is going to give us errors but no worries I would just like us to see the error and we're going to fix the error so I'm going to import this component and in here we're going to pass the duration remember it's in milliseconds Out Pass 3,000 which means 3 seconds and the end value I'll just pass two U 200 you can play around with these figures okay so I'll pass it here like this and if we save and we go back we should see our error yeah so we see our error because we're using you state in this count up number component but to surpass or to suppress the error we can make this client component making of that use client directive we would come back to this okay so if we reload our application now you see the counter animation you can you know play with the different values so you can play with the duration maybe give it 5,000 for 5 seconds and also play with the you know with a different end values to just fit your application needs so we have this but I want to see something actually let's copy this text and if we right click and we view the page source so I'm just going to wrap this and we find this text we don't see it because this is a client component we made this of the use client directive if we copy this other text and we come back to the page Source we don't see this text in here okay and that is an issue that's an issue for SEO and we sometimes need this because this is our hero section you might need to you know render some part of your application on the on the server and some part on the client now to fix this first we can comment this out because this is what broke the code and get rid of this use client directive here and you see our application works as expected okay but now we don't have our animation and if we copy this and we view the P Source I'll wrap this again and find here you see we see our explor text because now this is a server component and it is rendered on the server but once we attach our use client directive it becomes a client um component and it's no longer rendered on the server so I actually want to render part of my application on the server and I'll get rid of the use client directive and this brings us back to our error and I'll come back and zoom out here okay so now now how do we achieve this so what's going to happen is I'm going to create two new components here I'm going to create a client component. TSX and I'm also going to create a server component. TSX so the client component can take in server components as props and this is what I want to do here so I want to pass props to this client component and these props are going to be the server component so the part of the application I want to render on the server so here in the server component we are going to bootstrap this component and I'll get rid of the react input and in the hero section I'm going to copy everything we have here so in here I'm just going to copy this entire section and we are going to paste it in into of our client component in here like this I'll get rid of the react input and make this a use client component like this we have the errors would fix it so I want to render this section where we have the H1 paragraph and button I actually want to render it on this server side if you want to handle click events on this button you have to handle it on the client because there's no clicking on the server so here I want to render this section on the server side and I'll cut it and here in the server component I'm actually going to change the structure here so I'll remove everything and I will export this constant and this constant I'm going to call heading one and it is going to be equal to this jsx here so it has to be this uh self closing tag like this so header one is going to be equal to this jsx and this header one is going to be passed down to this um component as prop so you can say this of type FC for functional components which is a generic type let's create a prop so we're going to say type prop is going to be equal to this object so we have heading one and heading one is going to be of type react. react node all right so we're going to pass props in here and here we can go on to receive props and here the structure The Heading one from the props so let's bring in the heading one and this heading one we are going to have it in the place where we had that text so in here we are going to have the heading one like this so this is a server component that we are expecting via props and I'll just import this count up number for the counter animation and I also want to render this section where we have these images so you know one of the advantage of having um a server component is is fast load time so I just want this images to be coming from the server so I'll call it section two and I will paste this and we have errors so I will try to import the image component okay so maybe I'll just import it manually I would import image from next image like this okay and the error should go away so this section two which contains our images we going to also receive it at props in this client component okay so in here let's go on and um customize our propes so that it expects this section two which is also going to be your type react. react node all right so here we are going to pass the section two over here where we had the section two previously like this so this section two doesn't have to come from our server component let's bring in bring it in Via props so here we are going to bring it in from the props so this is the setup we have now this is our client component and in our hero section we are going to import the client component like this so go on and import the client component and I'll remove these other inputs we have here now this client component needs the props so it needs the section two which is going to be equal to section two which will be coming from the server component and it also needs the heading one which is going to be called to this heading one from the server component so if we reload our application you see that our application works as fine and we get the best of both words so we have our client component which renders this counter over here so this section and we have this heading section coming from the server component and we can prove it if I copy this and I right click and view the page Source this time around and I find it you see that it is there so we have this text it wasn't there before when we made use of the use client directive but it is there now and then if we copy this other text and we check we are going to see it there so we have the section of our application rendered on the server side and we just have this counter section rendered on the client okay so you can play around with these figures this um counter animation we have here you can just play around with it give them different values just give this a value of 50 120 you know 60 you can change the duration anyhow as you wish all right so next we can go to have our other components so we can have our search component next so for our search feature our search feature is just going to be below this our hero section and let's come back to the application I'm going to close all these other sections and let's come over to our page so which is our homepage I'm just going to collapse all of these and in our page. CSX here we are going to have a page search section okay and we obviously have other sections next we're going to have our featured room section and next we are going to have our gallery and lastly we are going to have our newsletter section so let's get started with our page search um section so this section over here and I'm going to come over to the components and create a new component which I call Page search and inside um this folder I create another file which I'll call Page search. TSX like this so let's boostrap this page search component I'll get rid of the react input and this page search component is going to take a search component so in the components folder I'll create another um component for search and create a search. TSX and the reason why is because this search is going to be reusable across pages so that's why I'm putting in its own component rather than the Page search so we're going to import this search component inside the Page search component so that it can be customizable so we import the P search components inside the homepage like this and we can come to the browser to have a preview so this our search component let's come back to the browser and let's test the responsiveness of our application we didn't actually test this after working on the hero section so we see how responsive our our application is and everything works fine with our dark and white team feature okay so you see we can um scale and see how our application adjust to the different view Parts all right so we can go back and work on our search um component and this search components I'm going to change this to user section and the class name is going to have a background of tary Light which is our own tary light color this is going to have a px of four and the py of six and it's going to have a rounded LG and inside here we are going to have a div this div is going to have a class name of container and MX Auto we're going to display it as a flex give it a gap of four and give it Flex wrap and also justify between items Center like this and inside this div we are going to have another div this div is going to hold our um drop down so we're going to give it a width full and on medium devices we're going to give it 1/3 of the width and on large devices we are going to give the width Auto like this and give it a margin bottom of four and also on medium devices give it a margin bottom of zero so here we're going to have a B okay but there's not going to be any HTML 4 this is going to have a class name of block I'm going to display this as block and give this a text SM a font medium uh maging bottom of two and not to Black we are going to give this a text of black and in here we are going to go with the room type for the labo all right so after this label we are going to have this div we give the class name of relative and then we're going to have a select without any name or without any ID okay but we're going to style it obviously give this a class name of with full give this a padding X of four a padding y of two give this capitalize and give this rounded and give it leading tight and also not data Al the on on the dark mode like this I'm going to give this uh background of black and give this uh a font on the focus State give this an outline of none so that is class names for our select so a select always have options but first we are going to handle the give this the unchange Handler so in this select I'm going to pass this unchange and this unchange is going to be called to a function we haven't defined yet so we're going to reference this handle room name room type change function which we don't have yet okay and here for the value we are going to give this value of room type filter all this will be coming from props and this select is going to have these options okay and this option is going to have the text all and I will just bring this down and the next option is going to be for our different room so this is going to be basic for our basic room and this is going to be luxury I'll just copy this luxury and use this over here and the last one is going to have the tag of Suits which is the last type of our room like this okay so this is what we have going on and after this first section if we save yeah we get these errors So to avoid these errors I'm just going to comment these out until we have them from propes and this is what we have going on so after this we are going to have another section for our search input so we can style this we're going to give it all with our full hand on medium devices we're going to give it 1/3 of the width and on large devices I'm just going to give this a Max like this give this a with Auto and margin bottom of four and the medium devices a margin bottom of zero so here we're going to have the label without any HTML 4 and the class name for this is going to be display of block okay we're going to display this label as a block text font medium imagine bottom of two a text black and here we give this label search so outside this label we're going to have our input and the input type is not going to be text it is going to be search like this and here we are going to give this an ID of search and we are also going to come here and give this a placeholder of search dot dot dot just like this and here we can go on to handle the class name and before we continue with the class name let's give this a value which also come from prop so we're going to comment this out and the value is going to be search query and on change event which is going to point to a function we don't also have yet we're going to just call this handle search query like this change so handle set query change and I'll just comment them out since we don't have them to avoid errors now we can starty our input give it a with full a px of four a py of three give it rounded leading tight like this and on the dark mode I'm going to give this a background color of black and I'm going on the focus stage I'm going to remove the Outline by saying outline none like this and give this uh a place holder a text of black and also on the dark team we can style the placeholder and give this a text of white okay so this is the second section and next is going to be our button so we're going to have this button and this class name is going to be our button primary like this and the type is going to be equal to button okay and on click we are going to have a function which we don't have yet so handle filter click and I'll comment it out and give this button um the text of search like this so we can save this and this primary button remember is coming from uh um global. CSS that's why we have this button primier all right so I'm just going to close this off global. CSS and if we come back to the browser this is what we have going so we have this drop down we have our search and we over here we have our button and there's a typo there in our button which we can just quickly fix like this okay so I'm going to bring this back in because because now we are going to customize this search component by receiving props so here we are going to import FC from react like this and let's make this a client component so making use of the use client directive and this FC is a generic type which will Define up here so this type called props is going to be equal to this object and we going to rece the room type filter and this is going to be a string and then we are going to go and receive our search query like this and the sech query is also going to be of type string like this okay we also going to receive the function that would update these properties so the Set uh set room filter type filter and this is going to be a function that gets the value which is of type string and returns void like this and up next we are going to have the other function which we called set search query like this and now we can pass our prop to FC and we can just destructure these values from the prop so set room type filter and set search query like this so we have these types and we are going to Define some other functions here so this handle room type change which will make use of these properties coming in from props so handle room type change going to take the event remember this is a select drop down so if we see here it is a select and select is going to have the event the type of this event is going to be of type change event but this change event is a generic type and here we're going to say this is a type of HTML select element like this and what happens on change we are going to call set room typee filter and we're going to pass the event Target value like this okay so next prop that's this next function is this handle search query change which is being called on this input element okay so here I going to have this function that we call handle search query um change which is going to take the event which is also a change event but this time around is a change event on the HTML input element and in here we are going to update our query so we're going to set search query to the event Target value like this and lastly for this button so handle filter click we're going to have this Con here where we call handle filter click and this is just going to be this Arrow function and in here we are going to go and and call and navigate the user to the rooms page like this so with the query so in order for us to do this we need to import the router so here just up here I'm going to say con router is going to be equal to use router and use router needs to be imported from next navigation and you call this use router like this so here when the user clicks on the search we're going to call this router and we're going to push the user to the rooms page so the path is going to be dynamic and we use back th to go to/ rooms and we are going to construct a query where the room type is is going to be equal to the room type filter and we're going to add another property to this query where the search query is going to be equal to this Dynamic search query here like this and in Page search we are going to handle these props so we're going to say the search and also the set query we're also going to pass the set room type filter and all these props here so we're going to go on and set our state so we're going to set the room type filter and function so set room type filter is going to be equal to use state which calls from react and by default it's going to be an empty string so let's not forget to make this uh client component making use of the use client directive like this and we can set another state value here we're going to set another state value for the sech query and here we have set sech query is going to be equal to UST State and an empty string by default so the room type filter is going to be equal to this room type filter from States also the sech query and also the set room filter we're going to pass it here and then the set search query function is going to be passed here so if we save this and let's try this out already I'll just reload the application to see how it works on the light and dark team we can also test the responsiveness of this application and everything you know is working fine in that regards so let's try out the query and I'll just add any Dom search here and click on set so let's take a look at the URL so you see we are redirected to SL rooms and we have the query over here great we're going to make use of that information when we work on the rooms page so this is what we have going I just get rid of these components and next for the featured room we would come back to this because it involves some data fetching we can already work on the gallery components so here in the component folder I will create a new folder for the gallery like this and in here how to create a new file gallery. TSX so in here I'm going to paste this component that I already provided for us so I'm just going to paste this get rid of the react input and just you know I'm just going to remove everything we have here so the reason why again is because this is just a static component no data fetching or anything special going here and I don't just want you you to watch me type out all these class names and waste your time so see we're using the IMG and we are just using our hero images that we imported in our public folder so that's all that is going on in this Gallery page so come back to public images you will see there images where they are being referenced so that's all is going on here we can go on to make use of this Gallery component already and I'm going to import it in our page. TSX so here I will import the gallery component and if we go back to the browser we see our Gallery component and we can test the responsiveness of this component as well and we see that this component is equally responsive okay so it's responsive like this so we see the component is responsive and it works fine with our dark and white team okay so this is our application next let's go over to the newsletter component okay so over here we are going to paste in this components so come over to the components folder and I'll create a new folder for news letter and I'll create a new file for newsletter TSX and I'll paste it in again please you can find this code in the GitHub this is just static data and I don't want to waste your time for you to see me typ in all these H um jsx with all these class names but you can just copy and paste this code from the GitHub there's nothing special going on inside of this component it's just styling purposes okay so this is what is going on on in here so you can go on and save this component and please once again get a code from GitHub and I'm going to um import this newsletter component from the components we just created so this is the newsletter component with this input and we can go on to test that it is responsive as well so we see that the newsletter component is equally um responsive all right so we have this going on in our application now we can go into Data fretting and work on our featured room section okay so let's come over to our components and in here I'll create a new folder called featured room and I'll create a new file that I call featured room. TSX and have this react component here I also get rid of the react input and import this component inside of our page. TSX like this we can come over to the browser and here in the browser I'll just scroll down and you see our featured room so for us to continue we need some room rooms that we are going to play around with and let's come over to our sanity studio and I'll just reload this San studio all right so now we are here we can see this user which we created earlier and we are going to go over to the hotel room section so in here we are going to create a hotel room and we need to fill in all these details so I'm going to fill in the name and the name I'm going to call Deluxe suit which is a name I just made up and for the slog we can generate a slog based on of the name and the description I will paste in this description here and description needs to be minimum 100 S so in case you're having an error you can fix it and same for the price minimum 100 characters you see here if we choose 19 we have an error and the error says minimum 100 so the minimum cost follow room is 100 we set this together and discount I'll just go with a discount of eight and for images I'll come to unsplash.com and in unsplash.com I'm going to search for rooms here so sech for room and here I'm going to um copy the image address so any of these rooms I'll copy and use in our project so for every other room I'm just going to fast forward through so here I'll copy the image address and add item I will paste in the URL index it so next I'm going to fast forward and now for the cover image I'll would come back to Splash and choose an image here so maybe this image I'll copy the image address and I'll paste it in here the room type so by default we chose basic which is okay I'll change it to suit and in the dimension I'll give this a dimension of let's say 600 square ft you can give this any dimension of your choice for number of beds I would just go with two and for offer the many face let's add an icon so this has to be font awesome icon like this so fa and then bed and for the amenity you can give it any name so I'll just give this name of king sideb bird to match and I would add two more amenities okay so this is going to have an icon of fa WiFi so fonts awesome and The Amity we can just use a text like free WiFi or anything like that and I'm going to add one more so I'll add an icon and this icon is going to be f a coffee and the amenity is going to be coffee maker like this so by default it is not booked I will make this featured like this and go on to publish this hotel room so if we click on this um right hand corner here where we have these three dots just here we can inspect this and we're going to see all the properties the hotel room has so it has discover image this discover image has the URL it has the description it has these images so I added five images and I can just collapse them and each each image has it key and DRL okay and you can see here is featured and the offered amenities that comes with this room you can see the priz the slug has the underscore type and the current and then the special notes I am going to fast forward and Out Create four more hotel rooms at the background I have created these hotel rooms and now that we have this hotel rooms it's time for us to go into the world of data fetching so I created four more and we can see the H rooms here so let's come back to code and now we in the IDE I am going to create two new file okay so I'm going to create these files in our leaps folder and the first file I'm going to create is a sanity queries file so I'm going to call this file sanity queries. TS and our queries would leave inside of this file we would come back to this file we are going to create another file and this file we would call apis. TS and this is the file that will be discussing to our sanity client so let's export a function that we are going to use to fetch our featured um room so we'll call this function get featured room like this and here we are going to have a con which will call result and this result is going to await our sanity client and in sanity client we have this fetch method you see Tak in the query for now I will just pass in this empty string and I'm going to also pass an empty object for params because we don't have any params so we can create this query so let's come over to our sanity queries. TS file and in this file I'm going to export a constant which I would call get featured room query now this is going to be equal to Gro so Gro from santic L it has no spe special use case rather than maybe for AO completion or SS like that so we have the star and we have our Gro query here and we want to fetch a room where the type is equal to hotel room now if we come back to our sanity studio and we inspect one of these rooms here you see that theore type is hotel room that's why we can query by this type of hotel room and we see his featured is false so if I check the first room we both created we created together and I ECT you see here that is featured is true okay so this query is going to return an array and that's why we're going to take the first element so we're going to change it featured property and say Where It's featured is equal to true and I have this um array this structure here something like that where I taken the first element and here corly brackets I'm going to just take the properties that we need and we need the underscore ID we also need need the description we also need the discounts of the room we need the images and we need the is featured property we also need the name we need the price as well and we need a slug so this query we are going to import it in our API uh file so here just after this sanity um import I'm going to import everything so so using star like this as queries and this is going to be coming from the sanity queries file so this file Here and Now rather than an empty string we are going to pass our queries and then we can access the get featured room query like this now this fetch can take in an extra object for configuration and one configuration we can pass is cach and we see the options one option is no cash and and this just says we want to go on end disable any caching mechanism and always fetch data on every request now apart from this um from this cache we can also pass another configuration which is next and next is an object where we pass revalidate and we pass a number now this number is in seconds so for 1,800 we mean 30 minutes okay so 1,800 seconds and this validate is going to go on and fetch data on this interval so in this case every 30 minutes this function is going to get called automatically and refresh so this might be the use case in your application where you know your data doesn't change as often but in this case because I'm in development and I would like to see my changes happen I would just go back to cash no cash that's um this function gets called on every request and let's forget to also Reon the result that we get from our sanity client like this okay so now we have this query you you see fetch fetch is of type any so fetch is a generic type and we can pass in the type so in our app here I'm going to create a new folder which I would call models so here I'm going to create this folder which out call models like this and I'm going to create a room model so that we can um map how a room looks like in our application all right so let's export this type I would call it room equal to this object and the room is going to have an underscore ID which is of type string and it's also going to have a cover image a cover image is going to be its own type so here I'm going to have this type of cover image which is going to be equal to this object okay and here I'll just have the URL which is going to be of type string and pass this over to cover image and next uh room is going to have a description which is a string and the room is also going to have Dimension and dimension is going to be of type string we also have this discount which is of type number not string and we also have this images images is its own unique type so here I would have this type for images like this which is going to be equal to this object where each image will have the underscore key property which is a string and also have the URL which is a string like this and we can pass this image to this images so an array of this image property like this and next apart from images we can also have this is booked property which is of type Bing and we also have his feature which is also of type buing and we also have the name of the room the name of the room is a string and we have the number of beds that we have in the room which is of type number and we also have the offered amenities so offered amenities it is its own unique type so we're going to define a type for our amenity here so our amenity is going to be equal to this object and here we have the underscore key property and the underscore key is going to be of type string and here we also have the amenity the amenity is going to be of type string and we also have the icon which is also of type string so this amenity we are going to pass it here as an array of amenity like this and we also have the price of the room the price is of type number and we have the slog the slog is is its own unique type and here we can Define the type so all these types we saw it in our sanity Studio when we inspected a room so this log is of type uh the type is of type string and we also have the current property which is the actual slug of type string so I'm going to pass the slug to the slug over here like this and then we also have the special note the special note is of also a string and we have the type so the type of this property which is a string like this we have this room type we can now import it inside here and pass it over to fetch so if we go over to get featured room query if we come over here you see these properties are part of the properties that we are um expecting a room to have and fetch is going to be of type room and also this function resolves to a room okay so now we have this function we need to make use of this function in our page. TSX so in our homepage we are going to go on to make use of this and fetch a room so just here I'm going to have this called featured room this variable and this featured room variable like this is going to be equal to the result of awaiting our get featured room call from our lips we have an error because we can go on to mark this component as an async component so home here is going to be equal to this async component and already we can console. log this featured room so that we are sure of um if our query actually works as expected so let's open the terminal right here in the IDE because this is a server component and I am just going to save and here we see our featured room so we see our featured room with these properties here so with the price and all these properties that we set in our sanity studio so this is our featured room I will collapse the terminal and actually exit from this terminal so this featured room we are going to pass it as prop to our featured room component and this is going to lead to an error because in the featured room component we are not yet accepting the prope now is the time to change it we're going to mark this component as a functional component and here we're going to receive props so this prop type where let's define it here so we say type props is going to be equal to this object where we're going to get that featured room and we have seing this featured room is going to be of type room so let's import this room here and I'll just separate it from the react FC input so we have this end next this div I'm going to rename it to a section so just here I'm going to rename this to a section and I'll copy and paste it over to the closing div so let's style this component I'm going to give it a class name of flex so I'll display it as a flex and on medium devices I would say Flex roll and by default I would go with flex column give this a padding on the x axis of four and I also give us a padding on the Y AIS of 10 and give this item Center and give this a gap of 12 I would also give this container styling and then give it a margin on the xaxis of Auto Now inside this featured room we are going to have another div so another div with the class name on medium devices we display it as a gried and uh give this a gap of eight give this grid code one and in here we are going to have another div so this is div that holds one image okay it has a column of one and I'll give this um rounded 2XL overflow hidden give this a height of 48 like this and I'll also give this a margin bottom of four and on medium devices I will take off the margin button so in here we're going to have an image so we would import this image from from next image like this and in here this image property we're going to give it a source and the source we can already now get our props so that we are going to destructure the feature Dr from our props so here I'm going to destructure the featured room all right and now this image source is going to be pointing to the cover image of the featured room so here we're going to go with featured room and here do cover image URL okay and then we have the alt and the alt is going to go to the name so alt is going to be called to featured Dr do name like this okay so we can also pass the width and the width is going to be 300 same as the height so the height also is going to be equal to 300 pixel and we can give this our image class name and also our scale animation which we Define in our global. CSS so let's save this and let's see a first preview of what we have going on so come over to the browser and we have an error okay now this error is because we are not getting the cover image from the API so if we go back to our query get feature Dr query here we are not actually receiving the cover image so add this property and that should fix our error if we come back to the browser so I just come back to the browser here and let's see we have a different error and that's because images. unsplash is not configured so let's copy this host name and here we're going to come over to our sity config sorry we will come to our where is it so our next config and in here we are going to add this URL like this we would save this and we are going to quit our termin down and restart so I didn't actually save so I'll save I'll quit the terminal again and restart npm run Dev so this should fix our error let's just wait for it to load and let let's preview I'll just refresh our application and wait for it to load okay so this should fix our error so if we scroll down to take a look at our featured room so yeah so we now see um the cover image great so I'm going to close this and let's have um another div where we display two images Okay so this other div is going to be having a grid code to property so here in this div I'm going to give this div a class name of grid and give this grid grid C to and give this a gap of eight and I'll also give this a height of 48 so inside this div we are going to map through our featured image images so featured images we're going to First Slice spli sorry so spli we want to just get two so we're going to start from one two as our count and now we can map through the images and we'll get each image not room so I'll change this to image and I'm going to return return a div like this we have an error because in a map we need to provide a key so I'm going to provide a key and this key is going to be equal to the image URL so this image we have here dot key sorry not the URL and here I'm going to give this a class name and I'm going to give this rounded um 2XL I would also give it a class name of overflow hidden so here we're going to have a image component and the source property is going to be our image do um URL so our image. URL and the alt is going to be our image. key so I'll just use the key as the alt and let's also give this a we of 300 and the height of 300 pixel okay so copy this class name and attach it to this image here so let's have a preview and let's wait for it to load we have our two images okay so now let's have this other section where we display the text okay so the name and some other um information about our feat room so here I'm going to have this div and this div is going to have this class names so first I'm going to display on medium devices give this div uh padding y of 10 and on medium devices also give it a width of 50% and give this text of left so we're going to have this heading and here we'll just go with that featured room like this and the class name is going to be our font like this so our font heading okay and give it a margin bottom of 12 so after this heading we are going to have a paragraph So this paragraph is going to contain the description and we can style it already and here I'm going to give this a font normal so our font normal and give this a Max WI wi of MD and here I will just have a featured room description okay so after this we're going to have another div and this div is going to have the class name of flex Flex call um medium device 6 position it as a flex row and also medium devices give item and justify between and imagine top of five and in here we're going to have another div and this div is going to have the class name of flex a imin bom of three and medium devices no margin button and in here we are going to have this div and this div is going to have the class name of flex give it a gap of three and give this a flex coal and also give this items Center and justify the content Center and give this a margin right of four okay so in here we are going to have two paragraphs and the first paragraph is going to have these class names so text SS can I find it here so text not SM I'm looking for XS so extra small y so I'm looking for this and here on large um devices and above I'll give this uh text uh Excel position the text Center and I'll will say start Fir and in here I'm going to next I'm going to display the price so the price of the room in this paragraph so I'm going to give this a class name of um MD font B give this Flex give this font medium and give this a text of LG and on extra large devices I give this a text of 5 XL and in here I will have this dollar sign where will display the price so here we're going to display our featured room do price so I'm going to copy this so not this div I'm just going to copy this div here I'll duplicate it because next I want to show the discount of the hotel room so so here I'm going to have the text of discount and in here featured room do discount so let's save this and next we're going to have the link so just outside this div we're going to have a link that will take us to the featured room page so to the rooms page and here we just have the text more details and this link is going to be dynamic so the hre sorry I'll get rid of the class name and we start to the H so the HRA is going to go to backtick for slash rooms and here for slash we can inject the room slug so the featured room do slug like this and here we have the current property so now we can style this and this is going to have a class name of B and this is going to have a height of feet and it's also going to have the class name of text Center and we're going to give this border test of dck and also give it uh text tary of dck okay again give this a padding on the x axis of three and the padding on the y axis of two and on large devices give us a padding y of five and also on large devices give theel padding X of seven like this okay so we are also going to give this uh rounded to XL and I'll give it a font B so for the font weight and on large devices I'll give this a text of extra large so I'm going to save this and let's have a preview so yeah so first we see at uh link is out of place and actually the link needs to be inside of this so I zoom out and the the link needs to be inside of this div so this div just below the description so let's move it in I'm going to copy everything we have here and cut it actually so highlight and cut and I'll collapse this div so that I can have our link just in inside this div okay so let's save this and our styling is still um somewhat off let's see what we have going let's make this uh client component I think it has to do with the way we fetch data because we're fetching data from the server component and passing it here let's save this and let's reload and if we come here you see our component now renders uh as it should so here we have our featured room we have these images and we are displaying the description so we are done with our featured room and this is uh our first test of data fetching and I'll just zoom back in and this is the component and if we just uh have a few for everything we've done the code is in the GitHub if we go to the more details link We Go go to the to a 404 page you see so everything is working fine we don't have that page yet we will be working on it so up next I would like to add a loading State because if we are fetching data is likely to have some time where that data is been fetched so nextjs gives us a loading component we can use so in the web folder here I'm going to create a new file which I'll call loading. TSX so in here I'm going to show a spinner so let's Bo strap this react component I would say con loading spinner like this and loading spinner is going to be equal to this Arrow function and here I would WR a div and the class name is going to be Flex item Center justify Center and give this a height of screen okay so in here we're going to have the actual loading animation so we're going to have this div and I'll give this div a class name of Animation spin give this a rounded of full give this a height of 16 give it a width of 16 and also give it a b top width of Two and a border bottom width of two like this and I'll also give this a b gray 900 and this is our styling we can also go on to just make this a self closing tag like this and we should not forget to export this loaded spinner so I'm going to export it as the default export so we can already try it out if we reload our application we don't see it yet but I'm sure we're going to see cases where we're going to show the um loading animation and when fetching data you can also have have errors so I'm going to create another file here which I'll call error. TSX and these are actually special files that nextjs will call so this is an error boundary so this error. TSX and it has to be a client component okay so I'm going to export this as the default so export default function I'll call it error like this and this error component is going to receive some props so we're going to D structure error and we also going to the structure reset now for typescript to be happy let's set the types so this error property here is going to be of type error and it can also have uh an optional digest property which is of type string so string like this and then for reset reset is going to be of type function so let's spell reset correctly it's going to be of type function that return returns void okay so here let's have our jsx so we're going to return and here I'm going to have a div this div I'll give the class name of container like this and then margin to the xaxis of Auto so inside the div I'll have another div which I'll give the class name of font heading and I'll give this a text let's say red 800 now you can start this anyhow and I also give this a margin bottom of 10 so in here I would just say something went wrong like this okay so if we have an error this is going to show and actually I'll change this div to a H2 to so to a secondary heading and after this we're going to have a button and this button is going to have the class name of button primary like this and for the text I'll just tell the user to try again like this and on click of this button we're going to call a function the reset function and this reset function is just going to help the user to recover from the error and just going to go on to uh we render a particular segment of our application so where we have the error and if this reloads we don't see the error but we can actually create an error so we come over to our featured room I think I actually create this error in our homepage so here in our page. TSX I'm going to just throw an error so I'll throw a new error and this error I'm just going to say unable to fetch okay so that we see this um error boundary file come into action so now if we reload the application we see something went wrong okay and then we see the button try again okay so here this is the text something went wrong and the button here and if we click on this error here you see unable to fetch so this unable to fetch is coming from our page so here this unable to fetch we defined it like this so I'll take it off and I save and reload our application and now we are sure that whenever we have errors we are going to be catching the errors gracefully so up next let's go on and um try our query so I'm going to try this query and click on search which is obviously going to fail but you see we are redirected to the rooms page so the rooms page is the page we are going to be working on next so let's stop going to a 44 and let's go on and work on this rooms page okay so I'll come over to the IDE and here I will just close all of the tabs that I've got open and next I'm going to create this page so here in the web folder I'll create a new folder for rooms and then I'll create the page. TSX file now I'll boost STP the react component get rid of the page and rather name this rooms and then get rid of the react input and I can already make this uh client component making use of the use client directive now we've got this let's manage some states and I'm going to manage two states so the first is the room type filter and here set room type filter is going to be equal to you state with an empty string and next I'm going to set another state and this state is going to be the search query because I want to keep track of this search query to to apply my filter so con search query and here I have set search query is going to be equal to UST state with a default value of an empty string and also I'm going to initialize this constant and this constant I'm going to call search params so this is going to give me access to the sech params that the user is going to use and I'm making use of your States like this so next I would have the use effect and this use effect I would pass in the Callback function and the empty dependency array like this and first I want to go on and have this constant where I can have the different values of the search parameter so call this search query is going to be called to search par like this and we have do get all right so sorry this isn't your state this is use search param okay so use search param should be imported from next navigation and now if we come back here you see the dot get and we have atho completion so we want to get a value and the value name is search query okay so this name over here the search quy if we come over to the browser and let's try to fetch data so basic and I'll just give this test and search so up here the you aware but you see we have this rooms which is the rooms page and we have this query where we have the sech query and the value is test and we also have the room type and the value is basic so I want to get access to the test and basic and this gives me access to those values and apart from the search query I want to also have access to the room type and this is going to come from search pars doget and I'm going to get the with the key of room type like this okay so let's log these values to the console so I console. log the set query and also console.log the room type like this okay um let's see so search query not search params so I I would save this and come over to the browser and I will just reload the page and this is our rooms page so open the console and in here you see we are currently getting the values so basic and also test so we are correctly getting these values okay so let's come back to the browser to the IDE sorry and I'll get rid of these console. logs and have this if check so I'm going to check if we have room type then let's update the value here so I'm going to set room type filter to room type like this okay and we can also do the same for our search query so here I'm going to check if we have um search query then let's go and set search query to the set um search query value okay all right so let's um update the dependency array okay so now in our use effect if we have a value for our um typon filter and search query it will be updated accordingly okay so we can go into the world of data fetching and inside here actually I'm going to move our models fold out of the app and inside the source folder it's just a practice that I prefer and to fetch data for uh rooms I will come into the API folder not here actually so our lebs api. TS now we're going to have a function that will help us to get a room so let's export an async function and this function I'm going to call get room like this and we can have our result so const result is going to be equal to await our sanity CLI do Fetch and we'll call this method it needs a query now we can Define the query if we go into the sanity queries. TS file so I'm going to define a constant here which I would call get rooms query like this and this is going to be equal to groc and we're going to have a query so let's go get the hotel room so we're going to get room where the type soore type is equal to hotel room like this so no extra um check and let's get the parameters so we're going to get underscore ID we're also going to get the cover image we're also going to get the description let's also get the dimension of the room we're also going to get if the room is booked and also if it's a featured room so it's featured so all these properties also going to get the room name the room price the slug let's also get the type so these are the um parameters we'll be getting now we can call queries. get room query like this and the API folder and this should be all okay so let's return return our results now we have this get room function we can make use of this in a page so in our rooms page so I'm just going to come into the rooms page so here I'm going to create the server and run npm install s SWR and this is a hook that helps us handle things like errors loading State optimizations and stuff like that so let's restart our development s all right so let's have a look on how this s SW Arrow hook works so here I'm going to have the cons and we're going to destructure out some properties and we call the used s SW AR hook and this used s SW you see it's imported from s SWR and we call this hook like this and it needs a key so this is a unique key that it can use for caching data okay so it's a unique key and it's actually up to you what name you would give it here so I'm going to give this a name of get and then have this for/ hotel rooms like this and and next it needs a fetcher so see it needs a fetcher and the fetcher is a function okay so it's a function that is going to WR on the data so here we're going to have such function so it's an async function so let's have this asnc function and we can call it um fetch data you know any name of your choice like this and this is going to wron the call for our sanity studio so the function that we just wrote out our get rooms function like this which will be coming from our lebs and API folder okay so this get rooms function and see over here it Returns the result so in here let's not forget to call the get rooms function so it's going to return return our data and now we can take this fetch data function and pass it as the fetcher to this s SW hook so this is going to handle the loading State and we can get access to it here so we can get access to the data error and every other property so I'm going to D structure data error and it's loading and you know we still have more but these are the most commonly used um parameters so here let's first of all check if we have an error we are going to throw a new error like this which is going to be CAU by our error boundary and this new error we just going to make use of the text so say cannot fetch data and we are going to have another check so in case it is done loading and we don't have uh data so we're going to check if type of data is equal to undefined and like this we are not fetching so have this is is loading like this is false so if it's loading is false and we don't have any data we want to also go on and throw this error cannot fetch data so now we should have data and let's log data to the console so console. log data I'm going to save this and let's see what we have going so if we reload our browser and open the terminal we actually get an error so use effects change size so I think I think we can actually do without the dependency array and here the search params I'm actually going to take this off okay CU we're not going to be needing it and we can refresh our browser to see if everything works fine now so this was actually a warning not an error but I think we can just um do without the dependency array okay so we get on the find and yeah so we get our data okay so we get our data which is our rooms and if we expand this you see we have the different rooms with the property that we are quering from our sanity studio so so we have all these types over here for our rooms and it's great so now we have our room we can now make use of this data okay so here I'm first I'm going to get rid of the console. log and I have this function which is going to help us to apply our filters so this function I'm going to call filters room and it's going to take the rooms and this room is going to be a room array so an array of room and we're going to have our function body all right so if we come back to our apis and if we h on rooms you see it returns um any let's define the type for fetch so this fetch let's say is going to return return our room type so an array of room like this and re Over You See It returns our room array now we know that data is going to be of type room array like this rather than just of type any and we see it can also be undefined okay so we're going to have handle the undefined case later but now we want to filter through the rooms that we are going to receive so let's have all rooms and then we say filter and filter is a JavaScript method where we can apply to arrays an array method which we need to be done through a false Upon A Certain condition and then the rooms that reaches those condition is going to be written just going to leave these comments over here and then the second comment for our search query and these filter rooms we going to get in the end are the rooms we going to map through right than map through the room that we get because you know the room that we get from c. is the unfiltered room so we're going to have couple of checks first we're going to check if the room type filter so if we actually have a room type filter and then we're going to convert that room type filter to lower case like this and we're going to check if is not equal to the text of all so if this room type filter is not equal to all if that is true then we're going to go on and check again if the rooms do type so now the type that we have to lower case because now we know the F the user want to filter but the user doesn't want to actually filter all so if it's not equal to the room type filter to lower case again to avoid any casing confusion we are just going to go on and return false okay so room type filter is true then we are checking if the room type filter to lowercase if it's not equal to all now if that is true we want to also go and check if the room type lowercase is not equal to the room type filter to lowercase okay so if this doesn't match we are going to go on and Ron false like this so this is the filter for the room type we need to also apply the filter for the search query so again we're going to check if search query is true they want to check if the room name so if the room name doesn't include so if the room. name do to lowercase like this do includes so we're going to have this include and if it doesn't include the search query so this search query that the user provides from the URL and we shouldn't forget to also convert this to lower case so if this is the case we are also going to to return false and after all of these we shouldn't forget to return true okay so now we have this we have our function our filter room function we are going to use it and pass our rooms so up here we are going to have this Con filtered rooms because that's what we're going to get in the end we're going to get our filtered rooms so we'll call our filter rooms and we pass data so you know data data can be undefined so we'll pass or empty area like this so we are going to be mapping to our filter room let's log it to the console to sure that to be sure that our Filter Works as expected and here I need to get a valid room name so I'm going to come over to our sanity Studio rather than test I want to get a valid room room name so this room Delux suit I'm just going to copy Deluxe to use it as search query and let's also verify the type because here we have basic so you see let scroll down you see the type is suit okay so let's also filter by this room type like this and if we run this query take a look at the console for the data we get back so you see over here we get back this data so our filter is working with the name of the loog suit and all other properties now we are sure our Filter Works as expected we need to render this filter on the UI okay so I'll get rid of this console.log and map through our filtered rooms so first I'm going to give this some styling and here I'm going to give this the container styling and give it an MX Auto give it a pattern to the top of 10 and first I'm all just going to return our setch um components which will be coming from our components folder so this search over here and we already have the parameters that it needs so it needs this Prop Room type filter and room type filter is going to be equal to the room type filter and we're also going to pass the search query so the search query is going to be equal to the search query here and it also needs the room type filter so set room type filter is going to be equal to set room type filter and lastly it needs the set search query so we're going to set it to search search query so here we can now go on to map through our filtered rooms so this is what we have for our search component okay so I'm going to have this div and this div let's style it I'm going to give this a class name of flex imagin top of 20 and I'll also give it justify between I'm going to give this Flex wrap like this so in here we have the corly brackets and then our filter rooms map and map is going to map through each room so here we're going to have our room and that will just return return an empty fragment here at least for now we're going to return a card component but we'll come to that we are having this errors map okay all right so that's because this is I think because it's filter room it needs to be filtered rooms sorry about that so we need to match our filtered rooms that we just saw moments ago and now everything is working fine so rather than with on empty fragments I'm going to create a new component for our room card so in the component folder let's create a new folder I'll call this folder rooms card and create the jsx so room card. TSX file so I would make this a react component get rid of the react input and also go on to say this is an type FC and FC that will take in some props we don't have these prop types yet so let's quickly Define it here so type RS is going to be equal to object and this is going to take the room which is going to be our type room that comes from our model folder like this and here we are going to receive the props and we can go on to the structure the room from the props so the structure from the props like this this so here we get the room okay so in room we have different properties we're going to come back to those properties to the structure later and let's style this uh room card so I'm going to give it the class name of red XL also give it a width of let's say 72 which is 18 R give this a margin bottom of 10 give this an MX Auto I'm going to give this on medium devices a margin X of zero and an overflow of hidden give this a text of black like this and in here we are going to go to have another div and this is for more like our image container so I'm going to give this a height of 60 uh overflow of hidden like this and in here we are going to render our image component from next image so I'll just move this to the top like this just close that to the f input and this image is going to take in some properties we know so it's going to take in the image source and this source is going to come from our room so which is our cover image so remember our cover image has the URL property so it's going to be our cover image. URL and the out we can now go on to the structure the name also from our room so just after the cover image I'll bring in the name so let's also give this more properties for the width I'll just give this a width of 250 and the same for the height so also give this a height of 250 pixels let's not forget to style this image I'll just go with the IMG which is our own costume um class name and the scale animation so that we just have the scale when we overover on it all right so after this image we are going to have another div now this div is going to hold the the name of the room and also the price so this div over here and inside this div we are going to have another div so I'll give this div a class name of flex justify between and for the text I'll give it a text of 2XL and give this a font of semi bold like this and in here we're going to have paragraphs so this paragraph is more like for the name and the next paragraph is going to be for the price we don't have this price yet we are going to bring it in we're going to destructure it from the room so let's do that quickly let's just come over here and let's bring in the price so after this div which will show the name and the price we can go on to show the room type so let's have this paragraph I'm going to give you some padding to the top just to shift it slightly away from the name and the price and I'm just going to give this a very small text so text EXT extra small and in here we're going to have the type and then the room so inside this brackets let's have the type and we need to bring in this type from the room like this so I'm going to bring in the type all right and after the type we have the description okay so here I'm just going to have another paragraph which I'll give a pattern top of three and give this a pattern bottom of six and here I just want to show the description of the room and I would also destructure the description from the room like this and if we come down after the description we are going to have a button so this button is actually going to be a link so a link that will take us to the um page where we can see more about the room so the room Details page and for that we need to bring in this log so don't forget this log has the current property and one also bring in the is booked so here we're going to have this href and this HF is going to be dynamic so it's going to go to slash rooms and then the SL log. current so the um slug of the room which is the room Details page and inside this link we are going to have a check so if it's booked you want to display another text so we're going to display the text of booked in all uppercase and if it's not booked we are just going to display the text of book now like this okay so let's startle this text I'm going to give this text um this link sorry a class name of BG primary and then I'll give it an inline block like this position the text in the center and give this a withd full so we still have more class names I'll give it a pattern to the Y of four give it some border red so rounded XL give this a text of white so we have a white text in the in our green background and then I'm going to give this a text XL also give it a font bold and on over I just want to translate this to the Y AIS so Y2 I think is going to be perfect in this case all right so we also need to give this um Shadow so I'll give it a shadow LG on Hover and I'm going to trans all and give it some animation duration so give this a duration of 500 like this and this is what we have going so now we are going to use this component in here so rather than we turn empty fragments I'm going to return return that room card that we just um defined and we're going to pass in the key because we're in the map and the key is going to be the room ID so room doore ID and the room is going to be equal to this room room like this let's see what we have going I'm going to save and if we come back to the IDE we see this room which is looking good so we get this H animation and we have this book now we have the type we have the description I think the description is quite large we can you know try to reduce it if we come here to the room card component I will just try to slice it and get the first 50 characters so here I'm going to say the description slice so slice and or slice from 1 to 50 and just add dot dot dots yeah and let's preview what it looks like um I think that's quite small so I'll just Ram it up to 100 characters and I think this this makes more sense so we have our do Dot and then we have the first 100 so let's go back to the um homepage so that we don't have any queries we see our spner which is looking good and let's come over to the room space page so I'll come here and we see all other rooms here so the images are loading up like this um I think the name is quite distorted for some but it's looking good and let's fix this so let's fix the name and the price which is looking distorted so for fixing this I'll just come I'll just come back to the IDE and here this D where we have the name and the price so here in our room card not here where is it so here so I just missed it here so here I'm going to change it right than go with two XL I'll just go with XL okay so text XL like this let's save this and let's see what it looks like I think this looks way better than what we had previously okay so I think this looking good we see the different links you know and here we see this so if we try to filter you see we get suit already so we can also filter luxury we don't have any luxury room okay so let's go back to basic and I will just take this um executive room so I'll take this executive room I'll come over to our studio and I'll make this a LX room so that we just have one room of that type so let's look for where we have the room type I'm just going to scroll and check for where we have the room type where is it so this I'm going to choose Lux and publish and we can already come back to our application and give it a Reload so you see it's already left without even reloading so if we come over to luxur you see the luxur room here which is the executive room that we just added if we go to basic you see we now have three basic rooms so everything is working fine let's try to search so let's try to search by executive you see we don't get any search result but if we go to all you see we have our executive room and even if we go to suit we don't have any if we come to luxury you see the executive room here so everything seems to be working fine and if we cancel our search we see all other room results we can go to the homepage and now up next let's try to search here so we try to search basic and we just click search you see the basic is populated here but we don't have any search so you see set quer is empty and we have the different rooms okay so this is what we have going if we click on one of these rooms here we are redirected to a 4 for page so let's fix this room Details page and here where we have rooms I'm going to create this slug like this and in here I'm going to create this page. TSX so request coming to/ rooms SL log is going to come into this page so here we can have our jsx and I'll get rid of the react inputs and rather than page I'll call this room details and this room details is going to be receiving some props here and the props is going to be of type params now param is another object where we receive the slog property and this slog is going to be of type string and so that we see our console um this log in the console I'm going to make this uh client component making use of the use client directive and here let's D structure the slug from the props and to do that here we are going to first of all get params and from params we are going to get Slug and we can console.log slug here I'm going to save this and we have this errors are we spotting yep we are so now we see our hotel rooms component and if we open the terminal we should see the family suit so I just reload which is this slog SL SL rooms and this slog and here we see the slog great now we sure we getting this slog let's fetch data so to fetch data would come to our leavs a pi. TS and in here we are going to fetch our data so I'm going to export this async function like this and this function I'm going to call get room and it's going to be called with this slog because now we need to fetch a room that belongs to a specific Slug and we get our results and our results we're going to await our sanity client and here we call Fetch and fetch is going to return us a room like this and we can get it from our queries and we don't have such query yet so let's come to sanity queries and let's export this Con get rooms like this which is going to be equal to this Gro query so we want to get a room where the underscore type is equal to hotel room sorry hotel room and where the slog do current remember the slog has the current property is equal to the slug so use dollar sign slug here this will return an array so so we take the first element and here we can request the parameters that we need now this log is going to be passed as params so this log here it will come to api. TS and here we call the gets room and here you see when we pass params so this params we are going to pass this slug here and now this log is going to be used in here like this okay so let's continue here and in here we're going to receive the underscore ID the cover image we're also going to receive the description we're going to receive the dimension the discounts also the images is booked is featured we're also going to receive the name of the room the number of beds we're also going to receive the offer amenities the price the slug the special notes and we're going to reive the type so I'm going to save this and come back to uh apis I'm going to copy this cash no cash and actually use it here like this and also use it here like this we have our result we should not forget to return our results so I'm going to save this and let's be sure everything has been done properly so here in our page. TSX first I'm going to go on and have this um that we call our s SW AR hook so I use S SWR hook like this and it needs the key for the key I'll just pass SL API slash room and then it need the fetcher which I'll just Define up here as fetch room so I'll copy this fetro and Define it in here so fetro is going to be equal to this function I can make it a sync and here we're going to call get uh room that we just def find in our Libs and to this get room I'll pass in our Slug and now we can get data I'll just rename data to room we can also get error and we can also get is loading and then out come over to our page so our room page. TSX and I'm going to copy this check that we have over here and I will paste it in here like this sorry about that and rather than data I call this room and here we are just going to check if there is no room we are going to return return our loading spinner component okay and here we can just console. log room like this so if we save this and here we should see our room if we did everything fine and here we see our room so we see this family suit room we are currently looking at now we are sure we are having our room I'm going to get rid of this console.log and in here we are going to have our hotel Gallery component so let's define this component first in the component we're going to call this hotel photo gallery like this and I'm going to copy this and have the typescript file here and quickly have this here so get rid of the react input and import our hotel photo gallery from here and we can already pass the photos prop which is going to be to our room do images here I'm going to save this and now we are going to be working in here so we can already say this is going to be of type FC and here it's going to receive props and the props is going to be this object we would have photos and photos is going to be of type an array of images now we don't have this image Imes yet here we come all we do in so models room. TSX is over here we have this image type so let's export this type so we can make use of it so I'm going to save and here out export so this will be coming from our models like this so in here we are going to have this class name a class name of container and you're also going to give this MX Auto and in here we're going to have another div and the class name of this div is going to be greed and MD we're going to give it grid uh where is it grid call two give it position relative give it a cap of five and give it a px of three like this and inside this div we are going to have another div a div that will give the height of 540 pixels get this relative rounded to XL overflow hidden like this and in here we are going to have this div another div and I just give this D A Class name of hidden MD Flex give this justify Center item Center withth full and the height four like this so in here we are going to have this image now the idea of this div um is to have this section okay so we're going to have two sections here this is where we display other photo images and this is where we display more like the first image okay so inside this div we are going to have this image so import image from next image this will give an error so I'll change this to as image type over here and use this here now this image we are going to give it the source and the source is going to be equal to photos we haven't getting it here yet so I'm going to D structure photos like this and now we can make use of photos and take the first photo URL and for the alt the alt is going to be dynamic so here we're going to have the room photo and we're going to save some value in state so here we're going to have this um current photo index and here Set current photo index which is going to be equal to use State and have the default value of zero so it's important we do it like this and and I will not forget to make this a client component already isn't that use client directive so we're doing like this because we are going to be having a model and we want to keep track of the current photo we have so I'm just pass the current photo index plus one and we need the class name I'll give it a IMG class name with our scale animation class name and that also give this a c pointer yeah and for the width this will have a width of 150 pixels and the height of 150 pixels all right it will also have an unclick Handler and then click we uh once we click on this image so this image we have here we want to show a model so we're going to have this open model um function that is going to take in the index so here open model which is going to take in the index and here we can call do bind like this and we'll pass this and then we'll pass zero so as the index so the first image that's why we're passing zero here all right so we don't have this function let's define this function so here comes open model is going to take in the index which is going to be of type number like this and now we have this index we are going to use it in here to set the current photo index to this index and here we going to have this const that will say show model and here set show model like this which is going to be equal to use State and by default it's going to be false and here when we open the model we're going to set show model to true all right so after this image just here we are going to have another div now you see this div is going to be hidden by default and this is a div that shows on uh large devices and this are that div is for mobile devices so I'm actually going to duplicate this because they are very much alike and this other div is going to show the photo with the current photo index and URL like this this Remains the Same since we on mobile we're not going to have the C pointer and the um scale animation and this is going to call open model so if we save this and we have a first preview we see this image and we go on mo mobile we are going to see the other image so we don't see because we still have this hidden so we want it to be hidden from mum devices and on mobile is going to show now so this div over here all right so now we are done with this if we click on this you know we don't see our model we are going to be fixing that next but we can now come on to collapse this div so this div that we just worked on and to show the user count we're going to have this other div and this is only going to be visible on um mobile devices so here we're going to say empty hidden and display this as Flex justify between like this items Center and in here we are going to have this other div going give it a class name of flex space X2 like this and in here we're going to have fa Arrow left that we import from react icons for/ fa and we can already import fa Arrow right sorry like this and here we are going to make use of the fa AR right like this so for the click event here I'm going to give this a class name of C pointer and now for the click event we're going to have two functions so handle previous for the backward image so for the one that goes left and this is going to be handle next I'll come back to this um shortly because these are just going to help us to slide through the different images but here I'm going to have this span tag and here we want to display the current image count so here we're going to display our current photo index plus one and we're just going to have this where we display the photos that length like this okay just like this and here we can go on to define the handle previous and the handle next so that we can swipe through the different um images so here I'm going to have this Con handle previous which is going to be equal to this aror function here and in here we're going to set current photo index then we get the previous index and we're going to check our previous index that is equal to zero so we're going to say our photos. length minus one otherwise we minus one from the previous index so this is going to update our previous index okay and then we can have a handle next function to go to the next image so this is going to be equal to this AR function and here we're going to set our current photo index where we have the previous index we're going to return our previous index if this is equal to our photos. length minus one we use zero okay so we're going to set it to zero otherwise we have our previous index plus one so this is going to help us to navigate to the next photo and you see here this is going to be visible only on mobile devices so if we come here we don't see it yet and if we open and go to mobile you see here we now see this and if we click you see we are going to the different photo images so this is working great and that's expected so we need to we need to show show this other section on desktop I think we should work on it next so displaying this other section and we are going to map through the different images that we have so the rest of the photo images to display here and we want to also keep track of the counts so before we start um mapping we're going to have this Con here and this Con we're going to call it display photos and this is going to be equal to photos do slice not slice do slice and from one we need to know the maximum visible photos that we want to show so con we can have this Maxum visible photos and this is going to be let's say two like this and here we're going to start splicing from one to the maximum visible photos minus one just like this okay so actually I'm just going to make this three and here we're going to have our remaining photos count here which is going to be equal to our total photos and our total photos is just going to be our photos length here so here is going to be equal to our total photos and we're going to minus our maximum visible photos here so now we are going to show sorry now we're going to show our display photos so we're going to map through our display photos and this will show the remaining photos count so if we come down here we're going to have another div and let's Di itate we're going to give it a class name of hidden because we don't want it to show on mobile devices and on medium devices we will display it as a grid we also have grid C to here give it a height full and give this a gap of five so inside this div now we're going to go and map to our display photos do map where we get each photo and let's just have this call back because we also need the index and we are going to return this div like this because we are mapping we need to give this div a key and the key is going to be the index and let's style it I'll give the class name of C pointer give it a height of 64 give this red 2 XL and give this a overflow of hidden so now inside this div we can have our image component from next image to show the remaining images so this is going to have a width of 150 a height of 150 a source of uh photo. URL like this it's going to also have an alt and the alt is going to be dynamic so we're going to have a room for photos uh room photo and then we have our the last sign back tick where we display the index plus two like this and let's give it a class name so we're going to give it class name which is going to be IMG and scale animation all right so this is for the image and for the remaining photo counts just here so just after this here but still inside this div we have so here we're going to have our remaining photos count we want to check if this remaining photo count is greater than zero so if that is true we are going to show this div and this div is going to have the class name of C pointer relative a height of 64 rounded to XL and overflow of hidden like this and it's also going to have an onclick to open the model so here on click we're going to call open model and we use do bind and we'll just pass this and then we're going to pass the maximum visible photos here okay so now inside this div we can go on to show our image from next image and let's give this a width of 150 let's also give it a height of 150 let's give it the source and the source is going to be equal to our photos and here we have our maximum visible photos minus one and we can assess the URL property and for the alt we're going to give it this alt where we say uh room photo and here we have a maximum visible photos like this and let's give us a class name of IMG now this is the image but we don't just want to show the image so let's see if we have something like that let's go for a room where we have more images so let's see if we have more images here and let's check on room let's check executive we don't let's check the family suit we maybe don't let's check our featured room so it looks distorted here I just reload okay so let's check this and we wait for it to load um Let me let me just reload this okay so these are the images and let's see so let me change this to two and we see this okay so now we want to see this image but we don't want to actually see um just the image like this we want to show the count so to show the count just after this image we're going to have this div where will say plus uh remaining photos count so we just have the plus here and inside this div we're going to have this class name of absolute give it a c pointer give it a text of white give it insert Zer give it Flex justify Center give it a this background where we give it this R GBA and then 0 z0 0.5 give it a item Center and give it a text of two Excel so now if we save this and we come back here you see we see plus three okay so we see we have plus three images and we can say here so maximum visible images it we say four let's see what we have now we see plus one so one 1 two 3 and four okay so this is working as expected all right so after this we want to show the model because clicking on this now doesn't show any model and also clicking on you know this doesn't show any model all right so to fix this let's come just after this div I'm going to collapse and here we are going to have this div so it's more model open uh or what we call it show model so show model if show model is true then we want to have this div so this is going to have a class name of fixed a top of zero uh a width full uh height full uh Flex justify center items Center a BG black like this a BG opacity of 90 and a z index of 55 okay and inside this div we would have this other div and now this is the div that would have the image so let's give it a height of 75 viewport height and a width of let's say 320 pixels and on medium devices like this I'm going to give this a width of 700 pixels and give it position relative so now inside this div we are going to have our image and the source is going to be from our photos and here our current photo index. URL like this and the alt is going to be equal to uh room photo and here we have the current photo index plus one like this and it's going to have a width of 150 and the height of of 150 like this and we just give it a IMG class name because this is the model we not just add the scale animation so this is what we have next and after this we want to show two arrows and uh count so I think we had that before so where did we have it let's see so I want to show this so I want to show these two arrows and they count so I'm actually going to copy this div so I'll copy this div over here and I will use it here so it's not going to be hidden like this so I'll just give it Flex because we want to show the model on both um desktop and mobile and we're going to give item Center and just give it to pattering y of three and here we're going to give it Flex space X2 we can also position the items in the center and get this a text white like this and we have this Arrow now we have this other arrow and we have the span okay so this span we can style it and give it a text white okay and give it a text SM like this so we need to have a way to close the model and just outside this div so outside this div here here we're going to have another div sorry not on that div we are going to have a button and the div should be here and this button is just going to show the MD cancel from Material design okay react icons MD and for class name I'm going to give this a class name of font medium give it a text 2 XL and give it a text tertiary dark like this and on click of this button we are just going to call close model what did we call it so let's see model do we call this show model we don't have the close model functionality so let's define it so cons close model it's just going to be this function like this so we set show model to for and now we can call close model here like this and let's start this button I give it a class name of absolute give it a top of two a right of two not ring give this sorry give this a right of two give it a text white and give this set Tex LG like this and if we come back here now I'm just going to reload our application and if we click any of these images we should see our model displaying so I'll click on this we see a model it's a little bit distorted but let's see the functionality works yeah so it's a little bit distorted and let's fix that so here where do we have it so this our show model fix top zero and we should give it left zero like this so let's see if that fixes it we try again and yeah so this fixes it and we see our model but now the image isn't correctly positioned because this is should be 75 VH okay and now we see our model works fine so we can close our model and if we go to mobile device device and we click on this we see our model great and it's working fine and we can come over to other rooms so you see our rooms over here and if we click on another room so if we just click on this room we come to the room Details page and we see this the room images now we are done with this let's continue and next we are going to add more life to this section where we can Now show some deson or some details about this hotel room all right so and for this section let's come back to code and I'll get rid of everything we've got here and we can come over to our app web rooms the slug and then the slug page so this page over here and after this we are going to have this div and this is going to have the class name name of container and MX Auto and also Imagine to the top of 20 like this so inside here we're going to have this div and this div on medium devices we are going to display it as grid and the medium devices we are going to give this grid Cod 12 give this a gap of 10 and give it a p on the xaxis of three so now inside this div remember we gave this div um grid Cod 12 so now inside here we are going to have this div okay and this is going to have a class name of on medium devices we're going to go co span 8 and then on medium devices I would also give it the full width okay now this is going to have the hotel information and after this we are going to have another div and this other div here let's style it so this div is the is going to be our book room C here so our book room call to action component and we can already styled it so medium devices I'm going to give this uh Co span 4 so this is going to span eight and then this is going to span four giving a total of 12 okay and we're going to give it red XL Shadow LG and on du we'll just give it a lower Shadow so Shadow like this and on dark let's color the give the shadow a color of white so Shadow white like this we position it STI and then 10 pixels not 10 pixels I think that's 40 pixels so top 10 like this yep so that's 4 40 pixels from the top give it a height of feet to fit the content and an overflow of Auto all right so now we are going to be working in this hotel information section we don't see anything yet but this is where we are going to be working in so in here let's have this div so without any class name and now we're going to display the room name and the dimension so this H2 is going to have this class name of font bold text left and text LG and on medium devices text to XL like this and inside here we are going to have a room. name and just in parenthesis we are going to have our room do description and we save and we come back to application not description sorry uh Dimension so room. Dimension so we save and we come back to application now we see the room name and we see the dimension okay so here we're going to display the amenities next so after this H2 we are going to have this div and we're going to give the class name of flex and imagine y of 11 like this and in here we're going to have a room. offer amenities and we're going to map through each and then we get each amenity and we're going to return return this div here okay because we're in the map we need to provide a key and the key is going to be equal to The Amity doore key and for styling on medium devices I would give this uh width of 44 uh width sorry so a width of 44 like this I'm just trying to create more like a box where we can display a font aesome icon and also the Amity name then I'll give this width of fet give it a text Center give it a padding on the xaxis of two give it on medium devices a padding on the xaxis of zero give this a height of 20 and medium devices a height of 40 give this some margin on the right Axis of three and give it this BG so this slight gray color like this with this head code # e ff0 F2 and on that mode we are going to get this a BG gray of 800 we're going to give this red LG like this display this as a greed and place content Center like this so first we are going to have this icon it's not going to show up because we don't have the font aome CDN but the class name is going to be dynamic like this and here we're going to display fa a solid so font awesome solid and here we have our amenity do icon okay and we're also going to give this on medium devices a text to Excel and that's all for the icon and here we're going to have this paragraph where we are going to display the amenity name so I think we call it amenity so it's also going to be this an amenity we receive here and then we're going to assess the amenity property and we should also style this paragraph So this is going to have a class name of text extra small and the medium devices text base and give it a pattern to the top of three so if we check go back to application we're not going to see this font awesome icon so let's see if we come back here you see we don't see the font or some icon and in order for us to see it we will just come here and we need to add this CDN link so it we come to web and we come to our layout. TSX so in here we're just going to have the head tag and in the head tag we're going to add a link to point to CSS okay so the H I'm just going to replace this H here with this link that goes to um this link that goes to font awesome like this and we can also already have the cross origin and send this to Anonymous like this so if we save this and we come back here now we see we display the icons we don't see this icon for the private Garden so perhaps we must have you know missed this icon somewhere but at least we see our icon shop so why do we have because you see this actually look looks distorted so let's see what we are missing so we give the width um withd fet Tex Center PX of two and M medium devices PX of Z give a height of 20 and height M3 we give it this background yeah so this should be great like this now if we save this and we come back yeah so this looks better we don't see the icon here so maybe we chose the wrong icon so that's why I said it's always important to choose the correct icon so that you have the icons display okay so let's continue and after this section here we are going to have another section for the description okay so after this div just here we are going to have another that div and I'm going to give this a class name of margin botom 11 and in here we can have the H2 and this H2 we're going to give a class name of font bold we're also going to give a text 3 Excel and then imine bottom of two like this and here we can display the the text description like this so after this um H2 we are going to have this B tag where we then go to display the room do description so let's save and let's see if we see our description shop so this is our description like this and this is the text okay so after this so I'm just going to collapse this or maybe we just continue all right so after this div we're going to have this other div and we just give it a class of maging bottom 11 so just like this div here actually I'm going to collapse this div and also collapse this for the description and now we have this where we show the different amenities so here inside this div we are going to have this H2 and inside this H2 we say they offered amenities like this and in here I'm going to give this a class name of font bold and give this a text 3 XL like this and give us a imin bottom of two all right so inside this H2 we are going to have this div and I'm going to give this a class name of grid and give this grid code to like this and here I'm going to say our room do amenities off amenities and map just as we did previously and here we have each amenity and we are going to Reon this div here like this and we should give this a key and the key is going to be equal to the amenity doore key so inside this div we can display the icon and the amenity as we had before so I'm going to give this a class name of on medium devices I'll give this a class of text base sorry I just give it the class of flex as we had previously items Center and on medium devices I'll give this some margin y of Z and give it a margin y of one so in here we are going to display the icon as well as the text so I'm just going to copy this and paste it in here like this so this should be 1 M so that means we had the typo over this I'm going to save this and fix the typo that we just saw here okay so it should be one M like this and if we save let's see if we see this section okay we see this section and our styling looks to be off again so where did I miss the styling so here we display GD grid code to and then inside this div we give class Flex item Center so everything seems to be fine I'll get rid of this text size here and give this uh medium devices text base text uh right pattern top I'm going to give it a margin left of two so if I save this and we have another preview I think this looks better now we having this error with the cing because we don't have any icon so let's try to see another room just see the executive room and here we don't have this other icon so I chose icons that were not you know F awesome that's why we don't see the icons display so it's important to choose font a some icons so that it display okay so this room has you know all the icons great so we can continue working and after the offered amenities we can just go into display another section for safety and hygiene okay so I'm going to collapse this div and here I'll have another div and I'll give this a class name name of Marin bottom 11 and here I would have a H2 I say safety and hyene like this and quickly sty this font Bard and giv us a text 3 Excel and give this a imin bottom of two so after this we are going to have this div and I'll give you the class name of of grid and grid call two like this and in here I'm going to have this other div and the class name is going to be Flex item Center my of one and then on medium devices my Z like this and here we're going to have this MD outline um cleaning services like this and just after this we are going to have this paragraph so here we're going to have this paragraph okay just like this and inside this paragraph We just say daily cleaning okay so let's starty this paragraph I'm going to give this a class name of ml2 on medium devices get text base and give this uh text extra small like this text extra small okay so if we save this and we have a quick preview we should see this section here so our safety and hygiene and I'm just going to duplicate this so just this I'm going to bring it down couple of times and next we're going to have after um daily cleaning we can change this to fire extinguisher so I'm going to use this l i a and f i r e going to take this off so that I can get Auto comption so l i a f i r e we don't get so let's import it manually and this the opportunity to rearrange our order of inputs here so I'm going to import this coming from react icons for/ L A like this and this is going to be L fire extinguisher solid and we can also import from react icons for/ aai and this is going to be the AI outline medicine box and we can already import the from GI so here we're going to have this GI smoke um bomb great so let's come back here and now we're going to have our Auto completion so this is going to be L fire still don't get the auto comption so I have to copy it manually okay and paste it in here all right so this is for this and here I'm going to to have the text of fire gous okay so that's for that and this is going to be the AI outline medicine box and here we're going to have the text this infections and sterilizations steril iations like this l i a yeah r i sterilizations okay so after this we're going to have this where we just display the GI smoke bomb and this is going to go with the text of smoke detectors okay so let's save and let's see if everything came out clean did we save it yes we did and here we don't see so let's um reload our application to be sure that everything works fine it's taking some time to build okay yeah so this is it for this section and after this section next we are going to have a review section okay so I'm going to collapse this and now after this we are going to have a review section so we're not going to you know have this review but we can already map out the components we're going to have this div which I'll give the class name of Shadow give it uh on dark mode here give this a shadow white and give this red LG and give it a padding of six and in here we're going to have this this div and I'll give this class name of item Center and give it a margin bottom of four and in here we're going to have this text which we're going to just style and say on medium devices give it a large text and font semi bold like this and here we have customer reviews okay so after this div so after this we are going to have another div and this is a that is going to display the review component so I'll give this a class name of grid a grid calls let's say one and a medum devices get this grid C two and get this a capap of four so in here we are going to have our reviews so I'm going to cut this and paste this in here like this so if we save and we come back we should see the text yeah so we see this customiz reviews and we see this Shadow over here so I'm just going to go to our dark team and we see our customer review section here which is going now going to contain the different reviews but we don't have this yet so now we can focus on the booking section of our application we are going to first start with the we're going to first start with the component and then we're going to proceed to integrate strip payment so we can already create this component if we come to our component folder so here let's have this book room CTA component and have the jsx file and have this so I'm going to remove the react input and already make this a client component and then import this inside here so here uh book room C here should be imported so here all right so let's come back to this we check the browser now we see our book room sit here like this and we see the little Shadow we have and you see it's already sticky okay so you see because of the position sticky that we set on this book room all right so now we have this rest style it more so we're going to give this a class name of px7 and uh py of six and then we're going to have this heading so this heading isn't going to have any class name and then we're going to have this span now this span is going to have some class names and we need to have access to the discount to be able to style this properly so we need to calculate the discount and to calculate discount we need to also you know have the price so you're going to say this is an FC for functional component and we can have the props which is going to be equal to an object and we are just going to ask for the price at least for now which is of type number and we also going to add for ask for the discount which is of type number so I'm going to pass this props over to this here and here I'm going to get the props okay so we're going to D structure these values from our props like this and we are going to get our price and and also get our discount from here so to calculate our discount price so let's have our discount price is going to be equal to our price and here we're going to subtract our price divided by 100 and we're going to multiply this by the discount so this is going to give us our discount price and now inside the span we can show the discount price somewhere here but for styling purposes we are going to say if we have discount so here if discount is true if it's a true the value then we're going to have this text grade 400 otherwise we are just going to have an empty string like this and we always we always want to have this fonts B and then text extra LGE all right so now inside this pan we can go on to display the price so I'm going to have the the sign here and we would have the price here and after this we want to also show the discount so here we're going to check if discount is true then we're going to show this span and otherwise we would show nothing we'll just show an empty string so now this pan is going to show our discount price that we have calculated so here we are going to show our discount price and we're going to style this so this is going to have this font bold and it's going to have this text XL not left text X um LG sorry not LG extra large like this and we're going to have this text so after this P here we're going to have this pipe and then have discounts and display our discounts like this and show the percentage okay and then we can have some full stop and then we have now and in this now I'm just going to have another span okay and now inside the span that's where we are going to have this discount price okay I think it's going to make more sense when we interpret it so text test shary deck so this is more like showing the user the price in this pan and then if discount is true we want to then tell the user you know the discount price so the discount and then the price now we have errors because we need to provide the necessary props and for now it needs the discount and discount is going to be equal to uh room. discount and it also needs the price which is going to be called room. price like this so let's save come back to the browser and we see this so $100 and then we see the discount which was 8% and now is $92 so I want to give a gap between these dollars and this uh percentage this pipe here so where do we have the pipe um in our book room CTA just here so I'm going to give this space like this and save this and if we come back now we have the space so this $100 and now discount 8% is now 92 perc so if we check some other rooms I'll just check this family suit 300 it doesn't have a discount and we can confirm if Rec did we call it um I think we have an error here so let's reload this this is family suit so let's wait for our studio to reload Okay so let's see so family suit if we check we don't have any discount and that's why we don't see the discount TCH so it's already working and if we check this we have a discount yeah we have a 20% discount and that's why the price is now $400 so great it's working as expected so after this H3 we are going to have we going to have this div which is actually going to be self closing and now we can style this I'll give it to with P give this a border bottom so border bottom two give this a border bottom secondary and give a margin y of two and let's see what it looks like so so this over here and after this we are going to have our special notes so I have this div and here we'll just display our special notes which we need to bring in so rather than I think I'll use a H4 and I'll get this NY of8 so let's bring in this special notes so bring it in here and bring it in here which is going to be of type string and we can now request it from here so the special notes which is going to be equal to the room does special notes like this and let's have a preview so we see the special notes here and let's be sure this application is responsive and yes our application is fully responsive okay so after this special notes we are going to have a div where we display some date Piers so here we're going to give this uh class name of flex like this and in here we're going to have another div and this div is for the checkin date so to have a label and the HTML 4 is going to be check in dates and this D is going to have the styling so the class name of this div is going to be with 50% and it's going to have a pattern to the right of two and this label is going to display the text check in date like this and let's style this we are going to give this a class name of block give this a text xsm give this a font medium give a text Gray 9 100 yeah and on dark mode I'm going to give this a text Gray of 400 like this and here we display the check in date so now we need our date pier and I would open the terminal and I'll quit determiner now and npm install react date Pier like this so we will just wait for it to install or we could use it already so I would come here and in here I would import date Pier that would come from react date Pier Library we just installed since we need to install the types so mpm install save Dev this type out copy and paste this in here like this okay so while that's installing we can already import okay it's done so let's restart the application using npm rund Dev so we can already import the CSS file in here I'm just going to import the react date pier and there we have the this folder and there we have the react date picker. CSS file here so now this date picker we are going to use it here so after this label we are going to have this um so in in here we are going to display the date Pier component and it needs a prop and now it needs so many props so first selected we are going to come back to this it also needs the unchange we are going to come back to this and we can pass the date format so the date format Al go is day and here month and then the year and you we can also pass the disabled prop cuz I actually wanted to be disabled you know and so I'll get rid of disabled prop okay and we can also pass the minimum date okay we want the minimum date to be the current date so I'll set this to new date like this and here we can already give it an ID and the ID is going to be this checking date from the label so that that's going to be our ID and let's style it I'll give it a with full and give this a border and give this a text black give this a border gray 300 like this get this red LG give this speed 2.5 and focus like this give this ring primary 600 ring primary like this and on forus I'll give this border primary border primary like this I don't know we can have a variant no we can't so put that primary like this and we're going to have an error because we need to pass the unchange and we need to pass the select selected prop so selected is going to be the check in date okay and on change we need a function to update the setting um checking date so we can call uh we're going to get the date from this function and then we can call a function so set check in date like this and we're going to pass the date gosh okay so now we need to receive all of these uh from props as well so the checking date I am going to receive it here and this is going to be of type date or null like this okay and then we have the set check in dates which is going to be of type dispatch because it's going to be coming from State and here we're going to have the set State action and we're going to know have a type of date or null in our state that's the type of action we're going to dispatch and here we can now bring in checkin date and then set checkin date like this and let's save this and now we need to pass the props to this book now C here so so we need to handle them instead so I would just come just after this props and here I would have the checkin date and then I would have the set checkin date like this this is going to be equal to UST State and UST state is imported from react I'll just rearrange this and UST state is going to have a default value of null and for typescript this is going to be of type date or null like this okay so we can already have the state for the checkout date so check out dates like this and here we have set check out dates and every other value Remains the Same okay so let's pass the props here going to pass the checkin date to be called to checkin date and here the set checkin date to be called to set checkin dates like this so we can save and let's have a preview we don't see anything is the application up and running yes it is so I'm just going to reload the browser and we wait for it to reload let's be sure yep so application is up and running and now it loads up and nothing shows okay yeah so this is our application and we have our checkin dates okay and in user clicks here we have this okay so now we have this component here like this okay so next we can have a checkout date so just after this checkin date we are going to have our checkout date so I think I can just duplicate this here and bring this down so these are checkout dates and rather than give it a pattern um right of two this is going to have a pattern left of two and the HTML 4 is going to be checkout date and The Styling here Remains the Same and we're going to update this text to check out date and here we have the date picker so selected is going to to be check out date which we're going to bring in from props and on change is going to be set check out um date and this is the date format it's going to be disabled and it's going to be disabled if uh if there is no checking date so if the user hasn't provided any checking date the checkout date is going to be disabled and now we for the minimum date we are going to have a function that is going to calculate the minimum um checkout date so we're going to come back to this and for the ID I'm just going to copy this ID here and use it in here like this and for this other section I think everything you know Remains the Same okay so let's have this checkout date and set checkout date so here I think I'm going to duplicate this CU it's very much iik so just change the name to check out date and here set checkout date and then we can break it in from the props so checkout date and also set checkout date so we have an error to calculate the minimum date we'll come back to read let's just pass the prop so check out date is going to be called to check out date and then set checkout date is going to be equal to set checkout date so let's save this and here in the book room CTA let's have this function to calculate the minimum date so we can call this C minimum um checkout date like this and let's define this function and here this receive the function and here let's define it so this calculate minimum checkout date is going to be this function that is going to return the date or it's going to return no like this okay so here we are going to have the function so calculate minimum check out date is going to be equal to calculate minimum checkout date so let's define it somewhere where here um where so I think I'm just going to Define it here so going to have this Con calculate minimum check out date which is going going to be equal to this function and here we're going to check if we have a checkin date then we are going to calculate um the checkout date otherwise we would return M like this okay so so here we are going to first of all get access to the next day so the next day is going to be equal to new dates and then we we passing the checkin dates okay and then we want to set the day so we want to set the date of the next day so call the next day like this and then we want to set date and this date is going to be the next day and then do get date like this and we want to add one so we go and return return the next day like this so if there's no checking date we will just going to return null okay so they will calculate the minimum checkout date and we are going to use it here so let's see what we have now we have our checkout dates and you see is disabled okay so it disabled until we select uh checkin date so I'll select let's say tomorrow and you see I chose 11 and if we see the checkout date it starts at 12 okay so it starts at 12 and this you know starts at 11 now we enabled it the user can still now go on and select you know let's say 20 which is not um doesn't make sense so you can't check in on the 20 and then check out some days behind we are going to handle the logic to restrict such operation but for now everything is looking good let's continue so after this so after this um div we are going to have another div so after this here so here we're going to have this div and we're going to give a class name of flex and then Marin top of four and here let's have this other div I'll give the class name of we with um 1/2 and give this sub pattern to the right of two like this and in here we have this label and HTML for adults and let's give it this class name of block text SM font medium text Gray 900 like this and adducting text G 400 okay so inside this label we are just going to have the text of adults okay because the user would also have the chance to choose the number you know of adults and after this we're going to have this input and this input is going to be of type number and is going to have the ID of adults to match with the label and for Value this going to have the value of adults which we don't have yet we would come back to that and on change now we're going to have this function which takes the event and set adult which we don't have yet and we're going to set adult to the event do Target do value okay and we are going to give this a minimum of one so let's say we want to you know have minimum of one by default and let's want to have a maximum of five so give this a width full give this a border you just say B grade 300 like this get this run LG give this spe 2.5 and on Focus State get this ring I think we don't even need this on the focus State and all of that so I'll just get rid of it okay so we need the adult and set adults so here I'm just going to have const adults and also set adults is going to be equal to use State and have a default value of one we're also going to have for children so has a default value of zero children and here we can have set children like this and we can ask for this from the props so adults and also children like this okay and we can have this so I'll bring this down twice so this is going to be for set set adults and here we're going to dispatch type number and for this we're going to have set children and here we're going to dispatch of type number like this and to get rid of the errors we just bring it bring in these for our props so set adults set children and adults and also children because we're going to be needing children soon so here here we have set adults to event Target value we're having this error because this is going to be a string and we need number can just add a plus here and it gets rid of the error so I'll save this and here we can pass the prop so here we can pass um adults equal to adults we can pass children which is going to be equal to Children you can also pass set adults which is going to be called to to set set adults we can also pass set children which is going to be equal to set children like this so we have an error here um do not pass children as props instead n children okay so it doesn't know um okay so let's see we're just going to rename it to rather than children I just say number of children like this and here I would say set number of children okay so children is going to be number of children and here set number of children I'll use this here and I would use this here like this and update our book room CS so rather than children I'll call it number of children and use it here and then rather than set children I would say set number of children like this and bring this in here okay so this fixes it and we should see our input so if we check now we see adults and we don't see for children yet so let's add it so I will actually duplicate this so I will just duplicate this and this is going to have P to the left of two a label for children and the class name is actually going to remain the same and here I have the text of children the type is going to the number the ID is going to be children like this it's going to have the value of children so number of children and on change we're going to set um number of children like this to PR taret value the minimum is going to be zero and let's say the maximum is going to be three for our application and everything should be fine now so if we reload we see children here okay so that's working fine next let's have um this section that helps us to display the price to the user so we're going to have a function to calculate the number of days so somewhere here let's have this function I'm going to call c number of days like this and this is going to be equal to this function so we want to want to return return if there is no checkin date or there is no checkout dates okay so if there's none we are going to return return zero like this so first to calculate the number of days we're going to have the time difference and the time difference is going to be check out date going to Beal to check out date. get time and we're going to subtract this from our check in date like this do get time here and now we have the time difference we can now convert the time difference to days and here you can call this number of days and this is going to be called to mat. se and we're going to pass our time difference divided by 24 multip by 60 and multiply by 60 and multiply by 1,000 so this is going to give us the number of days and now we can return return the number of this so return return number of days like this so here I'm going to copy this and we can come below here and after this div so after this that displays the adults and children I'm going to collapse this so after this we are going to have this section where we call this calculate number of days it returns a number and we check if the number is zero then we want to go on and display this um P tag okay so we're going to display this paragraph tag and otherwise we are just going to display an empty fragment like this so let's start this I'm going to give this paragraph class name of margin top of three and in here I'll just have total price and the total price in dollars is going to be this calculate number of days like this and multiply it by a discount price so if we save this and we come over to the browser we don't see anything because we haven't chose the number of days so here I'll choose 10 and say I want to check out um on 13th and now we see our total price like this okay so we have 400 and we stay 3 days so that gives 1,200 all right so now let's have our book Now button so just after this we can have our button and this button is going to be having this class names so but Buton primary and it's going to have a width full a margin top of six and it's going to be disabled you know have this um color on the disabled States so BG gray uh 500 and if it's disabled we're going to have this cursor not allowed like this so this button if this hotel room is booked so we also need to receive this Pro so if it's booked we are going to display the text of booked like this otherwise we are going to show the text of book now like this so we have this error because we don't have this is booked property and it's going to be disabled if this room is booked like this and on click we're going to call a function the handle book now click like this all right so now we need to pass this is booked and also the handle book now click function so here we are going to receive is booked which is going to be of type bowling and we can bring it here to our props and we also need to bring in the handle book now click and this is going to be equal to a function that returns void so we can take this function and pass it in here so I'm going to save this and we come here we need to pass the two props so it's booked is going to be equal to Rooms or room do is booked like this and the handle book now click is going to be equal to handle book now click we don't have this yet and this is for our booking so just somewhere here I'm just going to have this function and it's not going to be doing anything at least for now okay so let's come back to the application and we see the textbook now because this room isn't booked so you see we have this um sticky and we can come to other rooms to test out the functionality let's see if our Filter Works so a basic room maybe this one and it doesn't have a discount so if we want to stay for you know two days the room should be 600 so because the unit price is 300 so everything is okay now we can work on before work on the booking Fe fature let's just test that when we call these functions we to to create a booking that we are getting the correct values so once we click on this function we are displaying the values that we need to create a booking so we don't have the API yet so for our sanity Studio we are going to be creating all of that so what we can do first is to just do some validation so if there is no checking date or if there is no check out date then we're going to wron a toast. error and then we can just say please provide um checkin slash checkouts dates like this okay and let's also check so now we're going to check if the checkin date is greater than the checkout date so so if that the case we're going to return toast. error and we're going to tell the user please choose a valid check in Period like this okay so after this check so this other check here we are going to calculate number of days again so con um number of days and number of days is going to be equal to a function that would calculate the number of days so we can have this c number I could just say C nor days like this and we already have the function so I'm just going to copy this function you know we can pass it via props but let's just Define here and I'll just get calculate nor days and here right than return zero I'll just return and here we have we get a time difference like this we get the number of days and we with so here we just calculate number of days and next we can get the hotel room slug and the hotel room slug is going to be the room do slug do current okay and next we can now integrate stripe okay so before we integrate stripe I won't talk about middle ways but before we get to Middle ways I also want to make sure that we have the API uh from sanity Studio ready to help us to create a booking so in our lebs and in our API folder now we're going to export this so export this constants and then we can call it create booking like this which is going to be equal to this asnc function like this okay so here we are going to um receive properties that we're going to use to create the booking and this properties is going to be of type so we don't have this type yet but we can call this create booking dto which stands for data transfer object and where do we have a models rooms so do we put it in here I'm just going to put it in here because it's related to a room even though it's now related to creating um a room okay and I'm going to export this type create booking D which is going to be equal to this function to create a booking we need the user which is of type string so the user ID we need the hotel room which is also of type string we need a check in dates and the checkin dates is going to be of type string we also need to check out dates and this is going to be of type string we need the number of days and the number of days is going to be of type number we need the adults which is going to be of type number we need the children which is going to be of type number like this we need the total price total price is going to be of type number and then we need the discount which is going to be of type number so we need to spell discount so to confirm if you come over to the schemas booking TS you would see the fields we need so we need the user ID we need the h hotel room ID so where is it that we show we pass the hotel room ID here so you see we need the hotel room we need the checkin date we need the checkout date we need the number of days we need the discount we need the adults children and the total price and that's all the field that are defined in here okay so now we are going to import this create booking dto coming from our models and in here we can now assess these properties so we can assess adult um the checkin date we can assess checkout date you can assess children um discounts hotel room number of days total price and user so these are the um values we need to create a booking and then we can have our mutation and our mutation is going to be an object we have mutations like this mutations is going to be an array okay so an array and here we have an object so we're going to have a create mutation and to be sure not to be sure I just want to show you where I'm getting it from so let's visit the documentation so I just Googled sanity mutation and we click on M mutations just wait for it to load and here if you click on create you see here you have mutations you have create and then you pass the values okay so this is what we're doing here so we create using a create mutation and then you see the URL so https the product ID API sanity.io you give the version data mutate and your data set name okay so this is the create mutation that we are know currently doing here in our application so we have this create and create is an object so it's an object so pass underscore type so the type of mutation or the type of where is it again if we come over to our schema booking the type of schema is booking so this booking schema and that's what we have here so apart from a type we're going to have the user so remember it needs the user and here theore type is going to be of type reference so please make sure there's no typo here else is not going to you know work as expected and we just have the underscore ref and the underscore ref is going to be this user so it's going to be this user ID here okay so after this um user so after this we are going to have another property which is a hotel room so hotel room like this and it's going to be an object so an object where we have the same underscore type and the type is going to be reference like this and we have the underscore R which is going to now point to hotel room okay so after this hotel room now we can have the other values so the checkin date the checkout date and the number of days also adults and then children and then we also have the total price and then we also have the discounts like this and after our mutation so after this our mutation constant we can now have or send the API request so we're going to be using ex I don't know if we have Exel installed so let's mpm install Exel like this and we're going to get our data which is going to be equal to our weight XS so I'm just going to restart our server so here we're going to await XS which we need to import so just here I'm going to import XS from XS like this and here we're going to await x. poost and the URL is going to be so we have backtick https and then we need to go to our project ID which is going to come from process. EnV and then do we just come to our EnV and we're going to copy our next public um next public sanity project ID I'll paste it here and then we also go to API sanity.io and we then specify the API version so V and then 2021 then 21 like this and then we go to slash dat slate and then we go to the data set so process EnV and then we come and copy this so net public sanity data set like this okay so after this we are going to pass another argument and the data is going to be our mutation and then we need to pass headers okay so here we're going to have headers and headers is an object like this then we have authorization and the authorization is going to be our BR token so BR and then the token is going to come from our process. EnV and then we have our sanity Studio token and that's why it was important to give read and write assess because now we want to write to our sanity studio and here we get our data we can now return our data here so we have our endpoint we have our p page setup now we're going to discuss um we are going to discuss middle ways okay because we only want authenticated users to be able to book a room okay by the way let's you know authenticate ourselves so I'll click here and it doesn't load up so I'll just reload our application you know we restarted our server so let's be sure it's up and running so is actually compiling and it was compiling our art page before we refreshed our page so let's just for it to compile and as we're saying we're going to integrate stripe so we're going to be integrating stripe next but I just want us to discuss about middleway a bit because we only want users that are authenticated to be able to call the rout okay so here let's authenticate so I'm just going to authenticate myself using the Google provider and that should be authenticated okay so we authenticated and we can come back to a room so any room we do and if we are not authenticated we don't want the user to go on and book um a hotel room so we don't want this book now to actually make a call okay so let's discuss middle ways now and the way middle Ways work if we come here so we come to the root of our source folder here and we create a file called middleware dots like this and we just just need to export theault like this and then we're going to export this from next off at least next off middleway for/ middleway now with just this line of code we are going to be blocking all our pages from request so we don't have a way to manually log out so we can't see this um working in action because we are currently authenticated but if we are not authenticated we would not have been able to visit this page we don't have the ability to log out yet so we can't you know test our functionality but we get this page cannot be found okay so we want to block two pages I want to block two routes actually so I want to block the user profile route and I also want to block the API route so I'm going to support conf fig which is going to be equal to this object and this object takes in the matcher and this match can be a string it can be a reject expression or it can be an array of path so I want to block request going to slash users and then slash the user route like this so any request going to SL users and then any other route is going to be protected if the user is not authenticated and same I want to do for our API folder so request going to SL API slash and then the path like this is not going to be um allowed to pass unless the user is authenticated so now we have this in place we can now work on our to make sure that we integrate our stripe payment to integrate stripe in our project first we need to install the stripe package I'm going to quit the development server and we we are going to start from the back end route so mpm install stripe like this and this is going to go on to install the stripe library and if we come up to our folder and in our app uh leaves and here not here sorry so our app and where we have our where is it our API folder and here we're going to create a new route for stripe so let's have our stripe route so we have stripe and here we have the stripe. TS so this is our stripe route and let me just restart our server here okay so what the first thing we need to do let's have this stripe constants so stripe is going to be equal to a new instance of stripe yep so we're going to import this Stripe from this stripe here and this stripe this new is going to need um an API key all right so we don't have that yet we are going to get it in a second but we can already reference it so process. EnV and we can call it stripe uncore secret and underscore key like this okay we still having error but we can say a string here and the other is an object so a config and here we're going to pass the API version and it already has an API version so this API version so let's get our secret key so our stripe secret key if you come to your browser and here this is the stripe dashboard you already um should create an account for stripe and then you come back to your dashboard you see that you have to be in test mode and even to activate um to go live you need to activate your account so in test mode you come here so you see we have our publishable key and we have our secret key but for now we need our secret key so I'm going to copy this secret key and if we come to application here in our EnV um first I'm just going to paste in the secret key here and for the value for the key I'm going to copy this and use here so our stripe secret key is going to be equal to this key we just copied okay so let's save this and next we are going to have our function so let's export a const function Asing function like this we're going to call it post this is going to be called the request which is going to be of type request and here we have our response which is going to be of type response like this so this is our function body and we're going to have some data that we're expecting from the front end okay so here let's have Co so we're going to get access to those data which is going to be equal to await request. Json like this and we can already Define the types for data so we're going to have our request data here and our request data is going to be this object so we have the checkin date and checkin date is going to be of type string and we're also going to have the checkout date which is going to be of type string and then we're going to have the adults which is going to be of type number children which is also going to be of type number we're going to have the number of days which is also going to be of type number and lastly we need a hotel rooms slog this is going to be of type string string like this so we have our request data we are going to use it here and say this is going to be of type request data like this and here we can get the checkin date we can also get the adults checkout date children hotel room log and also the number of days so we're going to get all of these from the request so the request like this and we need to call this like this all right so up next we can have some validation so we can check if these properties are not there then we're going to return a new next response and we're going to say please all fields are required like this and then we can set a status of 400 so what are we going to check here we're going to check if there's no checkin date or there's no checkout date if there is no checkout date if there is no other or hotel rooms slog or there is no number of days then we're going to return return this error so we meant to use all like this I not this so if there's no this or know this or we don't have adults or there are no hotel rooms like this and or you know number of days so if this properties are not set then we are going to Reon this error now we're not checking for children because children you know can be zero if the user don't pass know that's default that we are using in our page so here children is zero there is it so number of children is zero so if we check for children and you know we get zero value which we actually allow in our database then we're going to have an error so that's why I'm not checking for children here okay so after this we can go on and get to the request origin so C origin is going to be equal to our request. headers and here we can get and we're going to get with the key of origin like this so this is going to give us the request origin and after that let's have access to the session so session is going to be equal to await and then we await our get server session and this needs the O options so we're going to pass our o options here coming from our leaps folder so where is it so our Au options and here we're going to have our session we can have a check if there is no session then we are going to return return a new next response like this and we're going to say authentication required okay so now you know because of our middleway so this middle way we have here you know that only authenticated users would be able to visit this route so this check is not needed but I actually want to go and get access to the user ID okay so const user ID and we're going to get it from our session do user. ID like this so this gives us the user ID and we can also format the checkout date the date so formatted checkout date and this is going to be equal to our checkout date so not checking here our check out date and then we can split by T this capital T and get the first index now if you're not show these values please just log these to the console and you'll see the format of the checkout date and I'm just going to change this to formatted checkin date and then this is going to be our checking date do split all right so here after all of these let's have our TR catch block and in our catch Block in case of any errors let's first look to the console so we're just going going to have this um payment fied and have the error okay so let's WR on a new next response and the body is going to be empty and we can set the status of 500 like this or we can just send the error like this we have this error say this is going to be of type any and the error is gone now our Tri block let's try to first of all get a room because we want to get all the details about the room from our sanity Studio the only thing we want to get is the number of days okay so we need the hotel room slog to get the room and then the number of days we're going to use this number of days to then calculate the price ourselves okay and not um allow the user send any data to the front end so how do we go about it we are first going to get our room in our Tri block so here we're going to get our room and this is going to be equal to we await get room remember the get room from our leavs if we visit this get room you see here that this gets a room so it gets this query this get room query and it Returns the results okay so we are making use of this get room it needs this log and we're going to pass the hotel room slog so this hot room slog Okay so after getting the room let's get the discount price because you know we are leaving discount on some of the hotel rooms and this is going to be equal to the room price minus the room. price divided by 100 and we're going to multiply this value by the room discount so this is going to give us the discount price now okay so after this let's get the total price the total price is going to be the discount price which is the discount price per unit we're going to multiply it by the number of days so once we multiply the unit price by the number of days we are going to get the total price and now we are going to come over here and create a stripe payment okay so we're sure we have all that we need now to create a stripe payment so we're going to have this stripe session and this is going to be equal to a weight stripe that is the stripe instance that we formed here so this so we're going to await stripe and then we can call checkout and here we have sessions and then we have the create method and this is going to take a mode and the mode is payment it also takes the line items and the line items is this array okay so an array of object and first we're going to pass the quantity the quantity is one so the quantity is a mandatory field and here let's have the price data the price data is going to be this object so we can specify the currency and the currency will support is USD we going to have the product data the product data is this object where the name of the product is the hotel room name so I think it's the room. name okay and we need to provide images and images sorry images like this images is an array so you know that um our room images has the URL property so we're going to have our room and then have images we're going to map through each image like this and then this is going to give us each image and then we're going to return the image URL so map returns an array and automatically images is going to be an array all right so after the line items next we are going to send the payment method types so underscore payment underscore meore types and we support card payment and after this we have this we need the sucess URL and the success URL is going to be dynamic remember we have the origin which is where is it this origin over here so we're going to go to our origin and and here slash users and we want to go to the user ID so user ID like this remember this user ID is coming from our session here okay so now we have all of these we still have all these fields to create a booking we are not going to be creating a booking here all right because we want to only create a booking when this payment is successful so that's why we are not calling this route stripe gives us access to web hooks which is more like subscription events that we can subscribe to and these events are going to be called for us automatically by stripe when they occur so we're going to be looking at web hooks functionality next and how we can create an order only when a payment is successful but for now let's just test that our payment is working okay so after this we need to return a response so we're going to return a next response do Json and here we have the stripe session and we are going to have this side the status to 200 and then we can have a status text status text like this and the status text is just going to be payment say payment um session created okay so we can for us to test this out we need to wire up stripe on our front end so we just did the back end now we need to to have stripe in our front end and let's come over to uh Libs so we're going to have a for a file here for stripe. TS and to continue let's quit our development server and we need to import the stripe for the front end SL stripe for/ stripe hjs so we need to install this Library all right so we're going to import some properties from it so import all of these from at stripe stripe JS like this and let me restart sorry let me restart uh development server all right so what are we going to take we're going to take the stripe class and then we're also going to take the load stripe like this and we're going to have this variable which will call stripe promise which is going to be of type promise and This Promise can resolve to two values so sorry it's had to be here this per can resolve to stripe or it can resolve to null like this so here we are going to have this function that is going to help us to get stripe so we're going to export this con which we call get stripe and get stripe is going to be equal to this function and we are going to return this G get stripe function all right so what we want to do here first want to check if there is no stripe promise then we going to say our stripe promise is going to be equal to load stripe so this package that we import like this we're not going to return return here I'm sorry we already exporting and we need to return return inside so we're going to return return inside and that's here so call L stripe and L stripe is going to need a publishable key so we don't have this yet but we can say this is going to come from our process. env. nextcore public underscore stripe publishable key stripe publish shable key like this and we can say a string all right so so I'm going to copy this and load it in our EnV and get it from our stripe so this is the publishable key just copy this and I'll past this in here and save so whenever we make changes to our EnV it's always nice to restart our server so I'm going to create this and restart our development server okay so now we are done with this we would come back to our page so this room Details page and in here we have this function so to handle book now click this handle book now click function okay so what we can do here we have the number of days here where we are going to be integrating stripe I'm going to take this off and we have our TR catch block so first we're going to use exus to send our data so this is going to be equal to we're going to await exos do getet and we need to import exos from exos like this and here we are going to call A.G and the API is going the endpoint is going to be/ API slash strip so this Endo if you open this up sorry not this if we come to our API stripe this so this route over here and it has to be a get request sorry post request not get so this has to be post like this all right so after this because the post request we need to pass data and what data we need to pass the checkin date we also need to pass the checkout date we also need to pass adults we need to pass children and children is going to be a number of children like this we need to pass the number of days and we need to pass the hotel room slog like this having this error because we need to make this async all right so from this we are going to get our data and we can name this rame this to be stripe session okay so after this we're going to check if we have stripe that means we need to import our load stripe function like this and somewhere here we can just say con stripe is going to be equal to AWA get stripe and this is this get stripe here so we're going to import this to help us load stripe here and let's see so this is it okay so once we await this gu stripe we now have stripe like this and why we why are we having an error why do we have this error okay can have con results we have an error here which is saying an expression of type void cannot be tested for Trace it's a typescript issue and if we come back here to this um get stripe function that's because here we forgot to return we forgot to return our stripe promise and that's why I love typescript because it helps us to catch errors like this so we forgot to return a stripe promise and that's why we're having error here see the error is gone because it knows it's going to return stripe or no so comes result is going to be equal to we await stripe we always stripe like this and then we call redirect to to check out redirect to checkout here and this is going to take the session ID and the session ID is going to be what we get back as data so stripe session do ID okay and this strip session we are getting back here if we come to our route see here we are sending this back as a response so this strip session and there it has the ID property all right so here we have our results we can have to check so if inside here so if results. error we're just going to have a toast so we going to toast. error and say payment field and here if we have an error let let's log it to the console so we can cons that log error and here we have our error like this and then we can also toast. error and say and error or code here all right so this is the time that we going to test it out this is our page and we are calling this post request we pass the data so checkin date check out date adults children number of days which are all these data checking the check out the adult this children number of days and here even though we not making of um these properties yet because we're not creating a booking we are just um creating a payment and here we're not making of the total price and that that's because just here so in our price data so after product data we are going to add the unit amount so we forgot to add the unit amount so the unit amount we're going to pass in like this and we're going to have our total price and multiply by 100 because it has to be in sents and we can call to string like this and like this all right so let's try this out I save open the terminal to be sure everything is still up and running I'll just quit and reload so that we are just double double show I'll close this panel and if we come back to the browser here where we have our application let's just reload so let's see if our application is building so it's compiling the slog so that page and remember we have Middle where in place so if a user is not authenticated or if you're not authenticated maybe you're clicking on the book Now button and nothing is working you just have to authenticate yourself so if you're not authenticated you'll not be able to visit the API route we don't have a way to manually log in log out yet so you know once we Implement log out functionality you would see how this works so our page is compiling and I think it is ready now all right so this is our page let's choose a checkin date I'm going to choose 12 and a checkout date I'll just choose the next day you see the price is 92 because of the 8% discount and let's click on book now so let's see if this goes on to load uh stripe okay okay Sims is loading up stripe so great everything is working fine for now we have 92 we have the product image you can give this same name email I'll just go with test test.com for card information 42 424242 is the default that stripe gives us and for the month I'll just say 1123 and and you see I'll just say test name and click on pay so wait for this to load up it's successful and it should redirect us to the user so 44 page and you know we created this page here so if you come over to the routes here you have the success URL so it's origin which is for now our Local Host SL users and the user ID and that's how we get redirected to this page so for now we say 44 page but we'll be fixing that so if we come back to our local host and let's also come to our stripe and here if we click on payments so that we see our payments we should see this payment so this is it so we just did this payment now and payment is complete so a user is successfully booking a hotel room so fine now we need to create a booking so it's is paying but you know we are not actually creating a booking and that's where web hooks come into play so if we come back to home and here in home um where is it you come over to web hooks here you would see how web hook web hooks work so you can click on this link I'll just open this in a new tab and over here you're going to see an API documentation on how to go about using web hooks so let's scroll down and let's visit this it's going to give us uh a way to go about this and in here you see the first thing we need to do is to identify the event to monitor I already identified the event that we going to monitor for this web Hook and the web Hook is the checkout session completed so the checkout session completed is the web hook that I have identified or that we need to call whenever a checkout session is completed okay so we need to identify the stripe event so you can open this events in a new tab to see a list of the different events that stripe offers okay and here I'm going to search for stripe um sorry for checkout do session. completed like this and this is it so this event here where is it um where is it do completed I thought it's to C there let's see so checkout. session. completed okay checkout. session do yeah so this this web hook here it occurs when a checkout session has been completed so this is the um event we are going to be listening to like that and now we need to create a web hook endpoint function so this web hook endpoint function stripe is going to call for us okay so let's do this next and come back to see the next implementation and this gives us a sample code if you go back to the nodejs to see how it works injs so this/ web hook and all these things so let's do this um let's create this web hook endpoint function and to create this here so in our API route I'm going to create a new route and this route I'm going to call Web hook like this and here we are going to have sorry where is it we are going to have the route do TS file just inside the web hook okay so how is this going to work let's first of all have a checkout session completed so checkout underscore session underscore complete and this is going to be equal to check out underscore check out the session. completed we just saw this in the documentation so this is the event we are going to be listening to the checkout. session. completed event and we're going to get stripe again so I just come back here and copy this so here we are going to get stripe again and we need to import Stripe from stripe like this so after this let's we can now go on to export our async function async function and this is going to be a post request like this and this post request is going to be called with the request which is of type request and here we have the response which is going to be of type response like this and in here first we going to get access to the request body so con request body and request body is going to be equal to await like this request. text and next we need to get the signature and and this is going to be equal to request. headers do get and we're going to get the stripe signature okay so where am I seeing all of these from the documentation and if you scroll down you will see best practices where is it um I think that's the last step so after number four let's see somewhere here we should have for Best Practices let's see um test your web hook function register and secure your web hook okay so here we have best practices and you have um let's see SEC web hooks yeah so the web hooks best practices you can up this link and here you're going to see best practices to to integrate stripe inside of your project and here you see only listen to event types your integration requires that is one best practice and here you see you need to verify events that are sent from SC stripe and here you see ways to go about it having the signature getting from the request headers and here having the stripe web hooks construct event you pass the request body you pass the signature and you pass the end point secret okay so we're going to be doing all of this which is just best practices for us to secure our event listeners okay so for now we are still in the second step to create a web hook endpoint function all right so after the signature we are going to have our web hook secret which we don't have yet okay so we're going to get this when we integrate the um web hook but for now this is going to come from uh process. EnV and here we can call it stripe uncore web hook underscore secret like this and I'm going to copy this and have it in our EnV for now which is going to be empty and after getting our web hook secret we're going to have our event and this event is going to be of type stripe. event like this and after this we can have our TR catch block so in the catch Block in case of any error let's copy this and use here so the next response needs to be imported from next server and the error we can just say web hook error like like this and this is going to make it of back tick and we are going to have uh error do message like this and this is going to be of Type n so in our Tri block let's get our let's verify so if there's know signature or there is no web hook Secrets then the go on and return so if we have all these properties we're going to assign our event to be equal to stripe. web hook like this and here we have the construct event and this is going to take the request body and this also needs the signature and it needs the web hook secret so you see here need the secret and we pass the web hook secret here all right so we have this we can come over next after this try catch and this is where we um load our events load our event okay so in here we're going to have a switch case and we're going to switch by the event. type like this and we're going to hand do this case so this our case check out session completed like this and we're going to have our con session and this session is going to be the event data so event do data doob like this all right so for now we just going to console.log the session here so we are just going to log this um session to the console we can already have um a default case so we can already have a default and we we just con that log you know on handled event type and here we're going to send back the event do type like this okay so what do we do next we Lo the session to the console and after which we can go on to create a booking like this so we going to create a booking and we need to return a response so we're going to return a next response that Json and this response is just going to say booking successful and we set a status of 200 and a status text of booking successful so this return is under this case okay and this should be it so so we are going to try um this session type and let's come back to the you know to the documentation we have created a web hook endpoint so we have done this and you see here you have this switch and you have this case which is what we did we handle this case for when our session is completed and you see here there's a this default that we just log to the console and this response okay so I think we have't forgetting this so we need to return a response to acknowledge the receipt are we doing that we are not doing that okay so this needs to be copied and returned outside of of this switch here we need to make sure we return return this okay regardless and we need to return this while this whatever code we write inside here whatever logic is being um worked on okay we need to return return this which is what we have done and everything here um is fine we can change this status text rather than booking successful which isn't what happened you can just send event received like this okay so let's come back and after this we need to test our web hook function and how do we test this um we need to use the CLI so I'll just open this in a new tab and come over here so here we need to first of all install so I'm on the Mac and I installed with Brew you see you have different options for Windows in you know this is the way you would go about it you just need to download the file and you know follow this to download the stripe CLI so you can test this locally or Linux if you're on Mac you can you know have different ways to go about it but I just use Homebrew to install I advise if you're on Mac you should try this out it's just very much straightforward and when you install you need to log into your stripe dashboard and we should be doing this already so we going to go to our dashboard our terminal sorry and run this stripe login and where is it um okay so this is it okay so this is just all we need to do we need to log in so I'm going to open up my terminal and I will zoom in quite a bit so I'll paste this stripe login and this should be after you have um installed the stripe CLI all right the parent please enter the browser or visit this okay so I'm going to enter to open the browser and this opens up in the browser here and in here we should be authenticated let's just wait for this to load okay so we need to verify so let's come back to the IDE this s Valor know text and we need to verify so this is it so this is the pairing code so Snappy follow and here you just allow access like this and you know okay so once you authenticate I'm going to clear this and after that we need to listen to event to a local endpoint so I'm going to copy this stripe listen and fold to to here and we are going to add this Das Das skip verify flag here like this so inside here I'm going to paste this and we need to change the first let me add the D Dash skip uh verify flag let me be sure uh skip hyphone verify as one word like this and the end point is going to be Local Host 3000 slash API SL web hooks like this this is our end point and I'm going to enter this this is going to load and we have our stripe secret so you can copy your stripe secret and come in your EnV and paste this secret here and save okay since we have have changes in our EnV we are going to restart our server like this and you see if we come to this web hook section so this route we take the request body we take the signature from the header we have our web hook secret and we have our event and if there is no web signature or web hook secrets we return We assign a event and here we switch the event type and we just log to the console and here we send this response of events received so I'm going to change this to event received like this and for now here we are just logging this to the console so open up the console in case we see any logs and come back back to the browser and next we are going to trigger the web hook so if we come down you see here to forward events you know from the Endo you already reged on stripe use the load from web hooks API optional flag okay so if we come here you see this is the web hook that we have registered um and stripe so this web hook over here this endo and you see it's listening so if we come here we are going to um run this from our command line so where is it so listen to events I'm going to copy this um sorry this is what we just did so we need to forward and yeah so we need to trigger stripe trigger and we need to trigger the web hook so I'm going to copy this and I would open up another terminal I'm going to split um this terminal okay I did go on to split the terminal and here I'm going to paste this we're going to trigger our own we're going to trigger our own event and the event is this so check out session completed you can copy this event and if we come back here I'm going to paste in the event and send this so we should keep an eye here okay you see here we get this um 307 okay we get all of these and you see here that this was actually called okay so you see here we got trigger suceed and if we come back here we don't see our console.log to for the session which we are logging to the console here and we don't see this response here okay so let's see we are switching the event. type I'll do it again but here I'm just going to console.log the event going to save this and so we can have a look here and to be sure our application is still up and running I am just going to reload this page okay let's give it another shot I'm going to come here um I'm just waiting for this to load up okay okay seems it's done and I am going to come here actually before this I'm going to disable this middleware remember we have this middleware for the you know API route so I'm just going to duplicate this and comment this out and also get rid of this no because this go to the API route so that we're not blocking ourselves from that request even though we authenticated but we'll just end it and here I'm going to trigger this again and we should expect to see this here we get 44 so we get 44 and why are we having 44 SL web hooks okay so is it what we name it no that's what we're getting for for is meant to be web hook so that's the route and we're going to quate this yeah because we made a mistake in our endpoint is meant to be slash web hook like this okay and we'll send this okay we are going to get a new um I don't know if it's new but we going to get this secret we're going to copy it and use that here so I'll quit this again and paste this here in the EnV our offense was we were targeting this route but we added an S so it's meant to be SL API SL web hook like this and if we come back to our stripe the end point should have updated see it has updated as well and we can reload our application all right all right so without all way let's trigger this again so stripe trigger checkout. session do completed and let's see what happens next we get 200 which is good news and it means that we are sending back our response and we get this so this is the event that was triggered and now if we come back here great we see our console.log okay so we see our cons. log we actually logging two things to the console and that's why we are seeing quite a lot I'm going to get rid of the event because I don't need the event I'll save this and this time around in this other console. log I just want us to see this session object so I'm going to have this session name here so that we see that we are calling um this is the console. log for the actual session okay so let's try this again so we come here and we are going to trigger the event again we get our 200 and if we come to uh conso log in application now we should see this okay we see the session here which is good so this is the session ID we get the object and we got we get all these information great so we have all this information and I want you to take a look at this metadata so you see this metadata is going to be very much important and for now you see it is an empty object okay so we are successfully calling this so next let's continue to now create a booking the the question is when we want to to create a booking we are going to await our create booking function that is going to come from our lips okay so this um function here and if we just visit this function one last time you see this is it takes an argument and which is of this type and it goes on to create this uh mutation for us now the issue is stripe is the one that is calling this endpoint point so we need to pass this so the adults and all other information to this end points but how do we get it because stripe is calling this Endo so how do we get this information to create a booking now it's very much easy because I'll just remove this remember I told you to take a look at this metadata object this which is for now an empty string okay so it's very much useful for us to insert um metadata so here when we are creating this um payment so so when we are creating this payment in this um I'm just going to take this off in this um create stripe payment we have access to what stripe calls metadata and this metadata is an object and in here we can go to include metadata that we are going to use here so we're going to be able to destructure them here as you saw the metadata is an empty object we want to change it and we can have adults like this which is the metadata that we need so the checkin dates remember we have created all of these already and we can also pass the checkout date you can also pass the children can also pass the hotel room slug I think it's just um I think it's just the hotel room so if we come here like this to uh where is it where do we have the function so this create booking function if we come here you see we need adults checking date children hotel room user total priz and all of these so this is hotel room which is the ID and this is going to be our room ID and next it needs the number of days and it needs the what else it needs the user ID and the user ID is going to point to the user ID and it needs the discount not the discount price it needs the discount okay and discount is going to going to be the room do discount let's be sure if this is user ID or user actually I'm going to split this to avoid mistakes and that would also zoom out a bit and here where where is it um where do we have the create payment function so create booking function so we need the adults we need the checkin date they check out date the children we need a discount and the discount is the room discount we need the hotel room we need a number of days we also need a user so this is meant to be user like this and this is going to be pointing to our user ID we need the we need a total price like this so here we have total price and this should be it so adults checking dates children discounts hotel room number of days total price and user okay so we can save this and I'll just get rid of this and come back here so you see here we have added all of these um metadata here so we have added of these and if we come back here and we trigger this again so I'm going to trigger this again I'll just cleck this and call this stripe trigger and Trigger this we get out 200 but this time around if we come here and we take a look at our console.log our metadata object is still empty now I understand it's still empty and the reason why is because stripe is calling this for us and we are not calling it ourselves so we're going to call this ourselves in a second and we should see our metadata populated I think we can already call it by now call the Endo by ourself and to do that I will just try to create a payment and watch the Endo being triggered for us to buy stripe so I'm going to click on this room and in here just wait for this to load up I'm going to just choose a checkin date and choose a checkout date and book now so the idea is for this to call the web hook function on our behalf and then we can you know have this populated so I'm just going to quickly fill this all out say 1123 any cpv give a test name and this time around once payment is successful we should come back here and this end point should be triggered this Endo should be triggered for us by stripe and let's come here we see this we don't know if it was the previous or the latest but one way to know if we come here and take a look at this metadata now you see this metadata has been populated so we have adults which you you should take notice everything here is a string so we would need to convert this back to use an application but we have um the adults the hotel room the discount and every other property that we need to create a booking great so now in this web hook we are going to have access to those properties and I'll just get of this console.log and it's in the session object so we are going to have this where we say this is going to be equal to session and here we want to go and get the metad data like this this metadata is also an object now we're having this error okay it's compa typescript comp ability issues it doesn't know but we know it's there so we can just TS ignore and we don't have any errors and for this we want to get all the properties we just saw so the adults and basically all these properties that we added to our metadata so I'm going to copy this and bring them in here like this we're going to get the hotel room and we are also going to get the discount like this is all from uh metadata and we're also going to get the user okay so now we have this we can now call this um create booking and the adult remember this is going to be a string but we need to store of type number so this is going to be number adult like this we have the checkin date and next we're going to pass the checkout date we are also going to pass the children and this children also needs to be a number so we pass it like this we also need to pass the hotel room and this hotel room will just be like that we need to pass the number of days and this also needs to be a number and here we have our number of days we also need to pass our discount and discount is just going to to be a number like this and we have our discount and next we need to pass our total price which also needs to be a number and here we have our total price and lastly we need to pass our user so with all of these we are going to come here and we are going to ref our next responsejson okay which we have over here so booking successful and now we should go on to create a booking and not just creating a booking we want to also update a hotel room and change the status of that room to booked so here we need to update um hotel room and to do this we are going to come back to our apis folder and apart from creating a booking I'm going to zoom out so we see everything clearly and apart from creating a booking this we are going to be updating a hotel so you can export this Con and we call this um update hotel room like this which is going to be equal to this async function you're going to make yourself a our function like this and this is going to take the hotel room here and in here we are just going to have our mutation and our mutation is going to be equal to this object where we have our mutations and mutations is going to be this AA and here we are going to be using a patch mutation and this patch mutation is going to be this object we need to pass the ID and the ID is going to be this hotel room so we can actually call it hotel room ID which is going to be of type string so here the ID is going to be this hotel room ID and we want to go on and set like this is booked property to true so we want to go and set this to be true and every other thing we can copy from here so this data and we're going to return the data so I'm going to copy this and use this in here so this goes on to send the request and goes on to update our hotel room so we can save this and here we are going to call that function to update the hotel room so here we're going to await our update hotel room function and this needs the room ID and the room ID is our hotel room that we get from our metadata all right so now we are going to try out this booking and see if we have a booking here in uh just come back to Local Host 3,000 and see if we're going to have this booking in our sanity studio so I'm going to reload our sanity studio and wait for it to build okay so we can come here so let's say we try to book this featured room so I'm just going to come into this room and wait for it to load and I know our server is still if I bring this here you see it's still compiling our CMS and it's not done compiling our CMS and that's why perhaps it's blocking you know uh hotel management application that's why it's blocking or some Local Host 3,000 so we'll just wait for the CMS for the studio to build up and then we can resit this route here okay since it is now compiled and in here we are going to visit the booking section so in here we are going to come over to booking and here in Booking we don't have any booking yet so we are going to try and create one now so I'm going to choose my checkin date and let's say my checkout date here and number of adults one I'll just increase this checkout date and we see the price updates and let's say two adults maybe one children one child and and click on this book Now function okay so with this it should help us to connect to stripe and once we are connected to stripe I'm going to fit these details so test at test.com and uh email and this is going to just say 23 2 and I'll just say test and click on this now so with this we should create a booking once it is successful so everything successful like this and one way to be sure everything went well if we come here we should say booked so this hotel room should show booked and it should not show us the book now on the CTA great so we see booked because we see booked if we come here you see that our booking was successful and you you already see that this hotel room was updated so if we click on this booking let's see if it has everything so it say it has a user and has a checkin date everything is fine except for our date now why do we have issues with our date if we we don't get any errors but you know it was successful I don't know why we have this error um with our date perhaps is the format so is the format maybe we need to get rid of this and you know format the date properly so if we come back here to this web hook so our checkin date and our checkout date so we need to format it and I think we have done that already in this uh application I'm just going to look for where we for where we formatted our check in date and so so this is it we actually needed to make use of this format checkout date and checkin date which we didn't use so that's why we having those errors so for checkout date we are going to use our formatted checkout date and for checking date we are going to use our formatted uh check in date here so this should solve our problem and everything should be fine so for this we can get rid of this so we can you know delete this booking I'll just come here and delete this so that we try it um one more time and we would update we shouldn't forget to update the hotel room and which room is this um this is this Deluxe suit so here I'm going to come here and change the is booked property to false and publish this so now we're going to come over to our booking and we're going to create our booking so we see the book Now functionality here I'm going to choose the checkin and the checkout date and just say to adults and go on to book now okay so we shouldn't forget to bring in uh middleware after this so I'm going to give the email so test test.com and give this the this and this 1123 CV and give it test name and going to book this room again and once we're done we're going to be redirected to the user page which we don't have yet we're going to go to the 4 four page come back to Local Host 3000 we see our booking here and everything should be fine so everything is fine this time around we get our total price and if we come back to this room we should see that this room has been booked so we just wait for this to upload and you see this room has been booked so great now with all of this done we can come back to this page so the user profile page and we are going to be working on this page next so let's come back here first if we come back I'm just going to get rid of this so everything seems to be fine here so we have a web hook here and when we host rather than listen to Local Host 3000 we should don't forget to add uh end point here so they will end point for uh you know this URL so we're going to add this URL and everything should be fine but for now we are just going to be using Local Host and this should be up and running so this here listening for the request should always be up and running so now we are done with all of these we can go on to create the user slug page so openness I will get rid of everything we have here I'll just close all and here let me get rid of everything we have here and to have our page up and running here where we have our web I'm going to create a new page for our users and here the ID so this is going to be here where we have the ID like this and here we are going to have the page. TSX file and this is our component and I'll just call this page um user details all user Details page and get rid of this so if we save this now we shouldn't have a for for page here this is our user Details page so in this page we are going to be fetching data that belongs to this user so here let's come to our lebs and in our api. TS let's have two new functions so we're going to export a sync function and this function we can call get user bookings to fetch the user or the bookings of the user this is going to need the user ID which is of type string and this we're going to get our results which is going to be equal to await we need to await our sanity client. Fetch and this fetch is going to return a booking type which we don't have yet so we're going to have that and here we're going to have our queries dot get book user booking which we don't also have yet and in here we need to pass parms so let's create uh queries because we are missing our queries so here let me export this cons get user get user bookings which is going to be equal to this Gro like this and want to fetch a user booking rore type is equal to booking like this and where the user doore ref so the user ref is going to be equal to a param we would receive and that param we can call user ID so this user ID is going to be used here as Pam like this okay so here let's take in this elements where we have the underscore ID we also want the hotel room and from the hotel room we want to take these properties like this from the hotel room we want to take the hotel room ID we also want to get the name we also want to get the slug and the price okay and after this hotel room we are going to take the check in date and also the check out dates the number of days the adults children the total price and uh discounts Okay so so these are the properties we are going to take from the user so you know from the booking that is pointing to this user and the booking has all of these properties so now here our queries is going to go to get user bookings like this and we shouldn't forget to follow Convention of adding this query over here so get user booking query here okay so here we also let's we get our result I'm going to add this cach No cach Object so here I'm going to say cash and I will say no cash like this this is going to give us a result and we shouldn't forget to return return our result and here we're going to have a booking type so let's come over to our models and have one for our booking dots like this and we're going to export this type we call it booking which is going to be equal to this function where we get all these properties so all these properties from our sanity query so I'm going to copy them and use them here soore ID is going to be of type string so I'm going to copy this and our hotel room we are getting all these properties so it's going to be of type object like this where the ID is a string the name is a string remember this log is an object we have this current property which is a string like this and the price is going to be a number the checkin date is going to be a type string the check out out date is also going to be a string the number of days is going to be of type number and I'll just copy this because the rest of these is going to be of type number so this is our booking type and here in our API we can reference this booking type like this and apart from the user booking we also want to get the user data so here con export con export async function and we can call this get user data and the parms is going to just be the user ID and the type is going to be of type string like this so in here we're going to get our results which is going to be equal to we await sanity client and we call Fetch and here I don't pass the type so we have our queries and we don't have the query yet and after this for the parm we need to pass the user ID so let's go write out this query so here we're going to export const um get user data query let going to be equal to Gro like this and we want to get the type so the underscore type is equal to user like this so just user like this and this will return on average so we need to take the first matching element and here we have the underscore ID we also need the name we also need the email we also need a is admin property we also need uh about the user we also need the created ad which actually is going to be of type underscore we're going to have this image so these are the properties we are going to be getting from the user and we shouldn't forget so to add the ID so the type is going to be user and the ID is going to be equal to we have this param user ID like this all right so we can go into to save this and in the api. TS so get user where is it so get user data query like this and then we pass this and we can also say cash no cash like this all right so we have these two functions and now we are going to call these um end points so first if we come to the user page in here we are going to send the request so we're going to have this um I'm going to first make this uh client component making use of that use client hook like this and now we can fetch our data making of the use SW AR hook so this is going to be equal to use s WRR like this and it needs a key for key I'm going to call this go to slash API and slash user bookings like this and here we are going to have this fetcher so called Fetch user bookings and this is going to be equal to async Arrow function and here we are going to call get user booking it should be bookings like this I could be booking so get user bookings like this coming from our leaps and here we need to pass the user ID and the user ID is what we will be getting from the URL so here this is going to be receiving props props is going to be an object where we have a parms key and parms is an object where we have the ID and the ID is of type string so we can come here and destructure all of these from the props we can destructure params and inside prams we can D structure the user ID like this so we can rename this to be user ID so in here we are going to pass the user ID property and we going to pass this function over here to fetch user booking and here we are going to call this uh data we rename to user bookings like this and we're going to have error and is loading so as we did in our rooms here in our page. CSX I'm just going to I'm just going to sorry I am just going to copy this so where do we have it again yeah so I'm just going to copy this and we can use this over here like this so the data we renamed it to user bookings and if we l this to the console so user bookings which should see the bookings that belongs um to this user user so if we open up the terminal here we should see the user bookings here we don't see here we see on the find and here we see the user booking so this is the booking that was created by this user great so after this we want to F the user data as well so here I'm just going to have this Con and this I'm going to also make use of our use S W hook and I'm going to call this/ Api SL users because we are going to be fetching this in our back end and the fetcher can be defined here so con fetch user data and this is going to be equal to this async function we're going to use XS because we're going to send this to our API to Fred so we're going to AIT x.g and the URL is going to be slash API slash users like this and we have our data we are going to return this data here and we can already pass this over here like this and we can have data which will rename to user data and we can also get the is loading which we can name to loading user data and we can also get the error which is say error getting user data or anything like this okay so here we can still through if error so this error or we can just say if error or if you know error getting user data we would go to load this all right so now we should go to have this end points okay and we can also use um configure the type of data we are going to be receiving so if we come back to our models here going to create one for our user. TS like this we can export this type user and this is going to be called to this object theore ID is going to be of type string we also have the name which is going to be of type string string we have the email which is going to be of type string we have the is admin which is also going to be of type Bing we have the about and about is going to be of type string or null so you know a user is not mandatory to have an about and created that is going to be of type string is have an image which is going to be of type string so this is us type we are going to be using it here so we're going to import this from our Models All right so we can save this and now we need to have this API route SL API SL users I think we have that route already so where is it in our API no we don't so here going to have this SL users and we're going to have this route. CS like this okay so in here we're going to export a sync function and this function we just call get because say get request it's going to take the request which is of type request like this I also get the response which is of type response like this and let's get the session this is going to go to our get server session and this needs the Earth options like this I will just rearrange these inputs and we can say as always if there is no session we are going to return return a new next response and this new next response we are just going to say authentication required like this and pass a status of 500 so if we have a session we are going to continue we can get the user ID which is going to Beal to our session. user. ID and we can have our try catch like this and in case of Errors we're just going to return return a new next response that says unable to fetch and here we're going to have a status of let's say 400 and in the tri block we're going to have our data which is going to be equal to a get user data coming from our leavs it needs the user ID and we are going to pass the user ID so this is going to be con like this so if we have our data we're going to return a next response and we're going to pass our data we are going to have our status we're going to have our object we have our status why are we having error yeah because it needs to be next response adjacent like this here we pass the data and we have our object where we set the status to 200 and we can also set the status text to successful like this all right so let's try this out now we should have everything working fine and let's log user data to the conso so just after here I'm going to conso log um user data here all right so if we come back here um I'm just going to open this up okay and reload this all right and not forget to open the terminal and we get user data on the F so we are not actually able to fetch um user data and we having error and if we just reload this we are having errors fetching the user data all right so let's fix this um we have this where is it so here we have aing user data and it goes to/ API SL users and we come to this SL API SL users we have this get request which get the user ID and call this get user data so here we are not ronning our results okay so that was the issue we are not returning our results we have this queries do get user query we can just visit it one last time so where the type is user and the ID is going to be user ID like this okay so let's try this but now so let's reload and see if everything works fine now we get on the find and we get null okay this time around we are getting null and if we update our query to be sure that our query isn't the reason and we save this and we reload you see now we get this subject okay so we get this object and it had to be underscore ID not ID so here we need to bring this back in and change this to underscore ID okay so let's reload this and let's see if everything is fine this time around yeah so you see we now successfully fretch the user data so I'm going to come back to the page. TSX and here remove our console.log so now we are sure we are getting the user data we can have a jsx so this div I'll give it the class name of container MX or2 give this PX of two give this on medium devices a px of four and a py of 10 like this and inside here we are going to have this other div and we can display this as grid and um medium devices grid C 12 give this a gap of 10 and here we're going to have this addtive and give it this class name of hidden give this medium devices block like this and the medium devices go span four and here on large devices go span three like this give it Shadow LG give it a height of feet give it position sticky the top of 10 not 10% 10 give it this dark um grayish background so e ff0 F2 give it the test black uh Rand dead LG A px6 and A py4 like this okay so up next we are going to have this div for the user image and we can already import this image component from next image so here we are going to have this class name and give this on medium devices give this a width of let's say 43 pixels it is a width of 28 a height of 28 and on medium devices give us a height of 143 PX again give this MX Auto imagine bottom of five uh rounded full and an overflow of hidden like this and inside here let's say just copy the user data uh and I'll duplicate this so if type of user data is equal to onine and loading user data like this we're going to say cannot Fetch and here I would also duplicate this so if we are sorry I'm going to say if you know we are loading user data I would just return return uh spinner so I loading spinner component and if we are also fetching our user booking so if this is loading is true just going to return this and so here our source is going to be your user data do image so where do we have this if there is no user data H so we don't have it so I'll just say if there is no user data so if there is no user data I'm going to draw a new error cannot fetch data here okay so here I'm going to get rid of this and we also need the and the alt is going to be uh user data do name give it the width of 143 pixels and the height of 143 like this and give it a class name so our image class name our scale animation class name get this rounded full like this and if we save this we should see this section over here with the user details so we see this um session over here great and it's quite large so 143 pixels it's quite large okay and after this div we would have another div here to display the user details I'm going to give this a class name of font normal give it um py of four give this a text left like this and have this H6 here where we are going to display about the user so I'll give this a class name of text XL so text extra large this is a font bold and a pattern bottom of three like this and here we can have the text about so after this we would have this paragraph and here give this a class name of text SM like this and you know the user about can be undefined so we can just say user data doab if it's there it's going to use it otherwise we can just perhaps with an empty string okay so after this div we are going to have this other div and the class name is going to be front normal like this and text left we just want to display the user data do name so here we're going to have this H6 which would give text XL and also font B and we'll also give it a padding button of three and here we're going to have our user data do name like this and we can have our sign not functionality we have this div and this D we're going to give it a class name of flex items Center and here we are going to have this pattern with the text of sign out and just give this uh margin to the right of two and here we're going to have this fa sign out out like this and I'll get this a class name that's equal to text 3 XL give this a CER pointer and here and click we want to call sign out so we don't have this function yet we are going to bring it in so here we are going to call sign out and just rearrange these inputs here and going to import sign out which will be coming from next o react so here we are going to call call sign out and this sign out we can give it the call back URL and the call back URL we are going to point to slash like this so let's save this and come back to the browser and we should see all other details about the user so we see about we see the username and we have this button to sign out the user so if we click on this we should sign out and go back to our homepage great and that makes sense because now we are going to bring in our middleway so we come back to our middleway I'm going to remove this that we set when we testing stripe sorry I'll bring it back in and I'll get rid of this one here so that we cannot create a booking unless we are you know redirected so we can go on and authenticate ourself if we click here it should bring up the authentication screen for us and we should now authenticate I'll just authenticate again with Google here and I would come back to the user profile page so this page here so we have about the user the name and the ability to sign out now we are going to have this section over here so remember this section this section had this call span 4 so this section here and this other section is going to have these class names because on medium devices we want this to call span it like this and on large devices SC span 9 like this because that's what we did so this un large device SC Co span three so in here we are going to have um different section so first we are going to have this div and this is going to have a class name of flex we are going to give this items Center like this and here we're going to have this H five and we're going to give this a class name of text to XL we're going to give this font bold and imagine right of three and in here we can just say hello and here have the user data. name so user data or data set so your user data do name like this and we should see that here so this other section so hello and we see the username so after this we are going to have this other div and this div we want it to be hidden on medium devices here so we are going to have this other div and this div we can give it this class name and the class name is going to be MD hidden sorry sorry class name is going to be MD hidden uh with 14 a height of 14 red full overflow hiding and in here we're going to have the image components and here we can give this uh a class name and the class name is going to be IMG scale animation like this and here you can give it a width of let's say 56 and give it a height of let's say 56 and for the source property this is going to go to slash images and here our hero one. JPEG and for the alt the alt is just going to go with username like this so This hero one. jpeg it says hidden earn medium devices so if we come to our public folder and in our public folder if we open images this image here so that's the image we are displaying here so let's come back to application and if we toggle this on mobile we have this image I'm just going to reload this rather than use um rather than use this let not forget to give this R Dead full just going to save this rather use this um image let's make use of the user data do IMG do image like this and we should have the user image right there okay so here we're going to have more details so after this div we are going to have this paragraph and this we're going to display as block we're going to give it a with fit uh medium devices give it hidden like this and text SM and give it a py of two like this so here we're going to have the user data do about like this so we know it can be null so if it's not there we can just have this for empty string and after this we are going to have this user this par graph we just say join in and here we can have the user data doore created at and we're going to split this this by T and we are going to take that first element here and we're going to give this a class name of text extra small give this a py of two and we are going to give this um a font media like this so we can save this have a preview and we should be seeing that here great so after this paragraph We are going to have a div like this and we're going to give it this class name of MD hidden uh Flex items Center and a margin y of two so in here we want to keep have this paragraph on medium devices or we tell sorry yep on small to medium devices I will give this um imagine right of two so that the user can can sign out so the same sign out functionality that we had here I'm going to copy this and paste this in here so inside of this div like this so after this div so still inside this uh where is it so inside this Cod span 8 so here so still inside here and first let's see if we you know show this yeah so medium devices this is what the user can see to use to sign out so after this inside here we are going to have this nav which is going to have so many class names so going to give a class name of sticky a top of zero give it um PX of two give this a width fet like this give this MX Auto here on medium devices give this a WID full and on medium devices get this a px of five give this a py3 a margin bottom of 8 text Gray 700 give this border give this border grade 200 like this get this red LG get this LBG grade 50 like this and AAG top of seven like this so in here we are going to have an on that list okay and the idea is to show the current bookings and also show the you know the user spending so we're going to be managing some states and to manage the states here we are going to come let's say somewhere around here and we can have this property which is going to be called to you state and we're going to have this type for for our use State and we're going to have the default value so here we can call this current nav and here Set current nav like this and inside this UST State we going to have the type bookings and we also going to have the type amount like this and we're going to have the type of ratings like this and by default we want to give it bookings here so we can go back to our H that list so inside of this nav and for the class name we are going to have this backck the last sign so it's going to be dynamic here like this and in here we can say if current n is equal to and here we can check if it's equal to bookings then we are going to give this a text blue 600 otherwise we are going to give it a text Gray 700 so otherwise text Gray 700 like this so this should be text and that's not the only class name because we're going to give display this in line Flex imagine to the right of one and on medium devices and margin to the right of five item Center space x one so space X1 like this and on medium devices we're going to say space x three like this and now inside this on that list we're going to have some list items here and this list item let's give it the class name remember it's inside this nav and this class name is going to be inline Flex here items Center and cursor pointer like this and on click we are going to set our current nav and we're going to set our current nav to bookings and here we are going to have this function inside this Ali we're going to have an icon so this BS Journal bookmark fi icon and we're going to have this a tag here and this a tag is going to have this class name of inline Flex we're going to give it items Center like this and MX of one and then medium devices MX of three like this text extra small and medium devices text small like this and font medium and the text is just going to say current bookings so we want to display the current bookings you know of the user and we should see our navigation somewhere here so we see this uh current bookings like this looking good so after this um after this under list we are going to have another on that list so I'm just going to bring this down again and here now it's going to be if this is going to be equal to amount we're going to give this otherwise we would give this color and then we're going to set our current bookings to amount these class names remain the same and for the this um icon we are going to use this GI money stack like this which we need to import and this is going to have the class name of not the class name the text is going to say amount spent like this so if we come back we should see this other one displayed here for the amount spent so we don't see it yet y so we see it and if we click it now becomes the active one so I don't know if we're going to make use of the ratings so we're going to see if we need to add another tab from the ratings or if we just going to let the user book directly from here so just after this nav which you can move to another component but I'll just leave it in this component so after this nav we are going to have a table component that we only want to show if it's um if the current bookings is going to be the current nav is booking so here if current nav is equal to bookings like this if that's the case we want to have our user bookings so user bookings and want to check if it is true then if that's true for now we are going to have a table component could just say table like this otherwise we are just going to have an empty fragment so we check if current T is bookings I will just check if the user has some bookings then we are going to render this um component over here so this table component and we can go on to create the table component so I would come here and in our components folder I'm going to create a new component for table I'll copy this and here I'll create this table. CSX file and here have a reactjs component so this table is going to be receiving some props and it's going to be a client component so I'm going to mark it as such using the use client directive and here let's have the type props which is going to be equal to this object and we want to get the booking details like this which is going to be of type booking so do we have the book type yet if we come to a model this type over here so we are going to be making use of it so it's going to be of this booking type coming from our models like this we're going to handle rating and we would need to keep track of the room ID so we can already have this set room ID which is going to be of type thisp and this patch needs to come from um react and this not this this dispatch from react here and I'm just going to rearrange this order of input and here we have our set State action which is going to return of type string or no like this and in here we can say this F uh this table is going to be of type FC which we import from react and it's going to take in these props and here we can destructure the booking details and also the set room ID from the props so here we are going to have a div and this div is going to have this class name of overflow overflow X of Auto we going to have this Max width and this Max width is going to be 340 pixels we're going to have red LG MX Auto U medium devices give it a Max width of full give it Shadow MD and on small devices out go banded LG like this so here we have a table and for class names I'm going to give this a with full also give this a text SM give this a text left like this and give it a text grade 500 and inside this table we are going to have t head and give it a class name of text extra small text Gray 700 upper case like this and a BG gray of 50 and inside this T head we are going to have the TR and here we're going to have a CH for table headens and here let's give this some class names of PX um six and give it a py of three like this and we can have a room name okay and I'm just going to bring this down and here we have our unit price and here we would have our price we would have our discount and display in number of this books and here we would have a days left so that user can know um how many days left so after this T head we are going to have um our table body so our T body body and we want to map through our booking details so here we have our booking details map and here we have each booking and we are going to return a table R so here we're going to return this TR like this we have errors because first we need to have our ID sorry our key and the key is going to be the booking do _ ID and we can get this a BG white give this a border uh B bottom width and on Hover can get this a BG gray of 50 like this and inside here we can have this T heading and I'll give this a class name of PX six under line text blue 600 give is a cursor pointer like this a py4 of font medium and y space no WP like this and this T heading we can have a bin do hotel room. name to display the name of the hotel room and here when the user clicks on this we want to push the user to the hotel room slug okay so here we can have a router so inside this component we can have a router which is going to be called to use router that comes from next navigation so this use router hook and we can take this up top so here when the user clicks on this we're going to have a callor router and we'll push the user to these slash rooms and here go to slash and we are going to go to slash um booking do hotel room. slug do current so this is going to take us to the hotel room when the user clicks on this and after this we are going to have another table data so this TD and this is going to have this class name not class so this class name and this class name is going to be px6 and py4 like this and in here we are going to show the booking dot hotel room. price and I'll just bring this down and next is going to be booking do total price I'll bring this down and next is going to be booking do discount the next is going to be booking do number of days and this is going to be the checkout date uh we don't have this yet for now I'm just going to have this um zero because we want to calculate the number of days left so that the user can you know have an idea and we are going to have this CD same with this class name of px6 and py4 and this is going to have a button now this is going to display the text of rate room because we want these to be able to rate a room and this is going to have font medium and text blue 600 like this and on Hover we are going to underline this rate and inside this um this button we are going to have this on click and here we are going to do two things but for now we are going to set the room ID to the booking do hotel room do ID so I'm going to save this and import this table component if you missed out anything please do check the GitHub okay so inside this page here rather than show return table like this I'm going to bring in the table component coming from our component folder over there and in here we are going to pass the prop so booking details is going to be equal to the user bookings like this and where we have error type booking is so user bookings is of type booking okay and here let's not forget to also pass the set room ID and why are we having this error if we have on user bookings so where is it um user bookes it can be of type booking or undefined so I think that's why we are having the error but here we are training a new error if we don't have a user booking so I don't know why we still having that error but let's do the same here and see if we pass this do we still have our error we do so type booking is missing from type oh an array of booking okay so this is meant to be an array of booking and I'll just control Z this change we did here and that's because if we come here we see we are returning booking like this so this needs to be an array of booking and that's where the error is coming from so fetch user booking so if we come here so get user booking you know we are saying this is going to just Reon a booking so actually it's going to return the bookings that belong to a user so that's why we have this blue ra over here now the error should be gone yep the error is gone and we are getting this now for the set room ID so we're going to have this in state a state where we set the room ID so here where do we manage our state so here I'm going to have this other state we have our room ID and here set room ID is going to be equal to you state which by default is going to be null and this can be of type string or null like this so let's save this and go back here to see if we're going to see our table component display without any errors great so our table component displays and we are having this you know if I go over to dark team you see we are having this not look great and if we come back to our table I'm just going to have this empty TR here and this should be for rating get rid of the class name or maybe I leave the class name and if we come back now it's fixed okay so I'll just rever back to the white them so we have the unit price of this 100 and the price is this because the user got a discount of eight so when the user booked this there was a discount and that was why the total price was you know 552 and the user had the number of days booked so 6 days and for now we just hardcoded this to be you know this left to be zero okay so after this we can go to display the amount spent so we want to have a graph where we can Now display the amount spent so the user can also keep track of the amount um spent so far so I'm going to get rid of the table components and and we are going to have a new component that we can call chat so here in the component folder I'm going to create a chat component so I'll copy this and paste this in here so our chat. TSX so I'm going to have this components here and here so if we come here I'm going to get rid of the react input and here I'm going to make this a client component making use of the use client directive and we need to install chat JS so I'm going to quit our server and npm install chat JS Library like this and we'll need to import some things from the library so all of these will be coming from chat JS so we can restart our application using npm run Dev and I will just reload our browser so here I'm going to import chat as chat JS chat as chat JS like this I would also import um to tip import the category scale bring in the linear scale as well and bring in the bar elements okay so all of these brought in we need to register them so here we are going to say so our chats so chats Js like this and then we have just register we want to register the tool tip the category scale the linear scale and the bar elements so we want to register all of these and now here I'm going to also import so somewhere here uh I'm going to import bar and this bar is going to be coming from this another Library we don't have so it's going to be coming from react hyphone chjs hyphone to like this so I'm going to save this and install this package so npm install react chartjs to library like this we're going to import the back comp component from it so now it's done I'm going to restart our application using npm run Dev okay so let's have our options so export con options and this options is going to be this object we're going to set responsive to true because we want the graph to be responsive and we can have this plugins and this is going to be an object where we say Legend and Legend is going to be an object and here we say position top at least as con okay and next we're going to have our title and the title we just say display display true like this and we're going to have this text and this text is going to say charts.js bar chat so this is the title you know we can change this if we don't want to display we're going to change this later and this is going to receive props so we can say this is going to be of type FC which we import from react and the prop I'm just going to Define it here so it's going to have this user bookings which is going to be a booking array and this booking will be coming from our models folder so going to import this from our models folder and here we can destructure the user bookings and this booking is going to need some options and label so labels is going to be equal to our user bookings and here we can map through it and we get each booking and we want the r name to be the booking okay and we are going to return return the booking do hotel room. name so that's going to be the label and to get the amount spent on that room so we're going to have this Con amount spent and amount spent is going to be equal to user bookings do map we get each booking and we're going to return return the booking do total price like this so now we can have our bar so our bar chart which is this from cha js2 so we're going to have our bar and make it uh self closing component the options is going to be these options we just defined up here so I'm going to change this to options so these are the options responsive true and all of these to get Auto completion you can Define them here so this object and here you can pass that's different so you see these are your options okay so for this case just have this options and next it needs data so data is an object like this and data need labels so we're going to pass this labels that we just defined here and here it means data set and data set is an array so an array of object and the label of that data set is going to be um amount spent like this and and here we have data and data is going to be amount spent like this we can have our border WID and this is going to be equal to one I'll just say this to one and we can have our backround color so this hasht F2 not the last sign hashtag f27 45 like this we can give this color on Hover so on Hover background color which is just going to be this # f 2 C6 41 so let's save this and we need to make use of this chat component in our page so in here we need to make use of this chart component and give me a second and want to display it if our current now if our current na is equal to amount so if that is true then we want to display our chart component and our chart needs to be imported from our components like this and here we're going to pass the user bookings which is going to be the user bookings like this otherwise we are just going to pass an empty um string like this we having having error because type user booking or on the find okay so we can check just as we did here so have this extra check and if we have user bookings then to go to show our user booking components and this time around when application reloads if we come over to amount spend we should see our chat component so we don't see it yet okay our application is up and running we are just going to reload our application remember we installed some packages and you see our application just had to compile and once it's done we should now um see our chat component so here we have current booking and we see the amount spent we see that this was the amount the user spent on this now we see this because this is the you know only graph so here we see the amount spent and we see this theux suit here all right so this is working fine and we have this sticky we also have this sticky up here at the top where the user can switch to the you know current bookings and switch back to the amount spent so this is working fine and if we click on this we should go to the room page sorry yeah to the hotel room page so the user can see the hotel room that he booked okay so the hotel room that was booked and just give this a second to load and you see the user booked it that's why it had the label of booked and it's up to the admin to come back to this hotel room when the booking is done and update the is booked property to false so that other um customers can book this hotel room so now with these two functionality done we can go on to work on our rating feature okay so now for us to set up rating let's come back to our application and I am going to close all the these tabs and here in our table component that is where we have this button so this right button and which is here so on click of this button we are setting the room ID we want to also do something we want to toggle our rating model so here let's have in state we don't have any rating model yet we're going to create it in a second and we can say is rating visible like this and then set is rating visible it's going to Beal to US state and by default false so somewhere here so let's write it um maybe we can write it here and here comes toggle rating model is going to be equal to this function and here we are going to return set is rating visible we have the previous state and we want to return the inverse of this previous state so we can pass this over as prop to our table component so here we can receive this prop and this is going to be of type function that returns nothing so that returns void and here we can bring the toggle rating model from our prop and whenever we click on this button we are going to call this function I'm going to save this and come back here and over here I'm going to pass this toggle rating model is equal to toggle r in model like this so do go on and save now it's time for us to create the rating model so we're going to create a new component for that I we just collapse all of this so here we can have the rating model component and here we can have the type script definition so let's have our jsx I'm going to get get rid of this and obviously we are going to be receiving props so type props is going to be equal to this object and it's open is going to be of type bowling so this is one prop we need to toggle the visibility of this um model like this and we're going to pass the props here we receive props um sorry this needs to be props like this and so that we can dist structure these properties from our props so we can D structure is open like this okay so this is going to be dynamic here we're going to have this class name and here we're going to give it a position fixed give it a z index of 61 and then give it an inser of zero give it Flex it temps Center justify Center like this and in here we are going to say is open if this is true what do we have here is so if open is is open is true we are going to give this class names otherwise we would give this other class names so if this is open we want to give this an opacity of let's say 100 and P pointer event Auto like this and I will just copy this class name because it's similar so here the opacity is going to be zero and the pointer events is going to be known okay so this is this wrapping div we have here we can already um make use of this in uh page so somewhere here you know it doesn't matter where we place this so I'll just place this somewhere here and I would have the written model like this then we'll go and UT and it need is open prop which is going to be equal to is what did you call it is wrting visible like this so we can save this and if we we come here and once we click on the red button we expect to see this component so I'm going to come back here and once we click on this great so we see this rating model okay so it covers the whole screen we need a backdrop component for that so let's create it as well um here in the components we can have a backdrop components and here a backdrop. TSX file so I'm going to have this here and this also is going to be a functional component and here we going to receive props and props is going to be object and here you can also have the is open prop which is going to be of type bowling and we pass this prop over here this is the only prop this component we need so I will just D structure from here like this so let's go on to style this um backdrop in here I am just going to have this check so I'll check and we don't even need this um return return here so we can just select this if it's open it's true then we are going to show this div otherwise we return an empty fragment okay so let's starty this div it can be self closing because we're not going to have any um you know any word in between the div and this will have a class name of fixed I need to have a z index of 60 because we gave a Model A Z index of 60 61 I want the model to be on top why this deep is below I'm going to give this a top of zero give this a left of zero this is a width of screen a height of screen and give this background so this BG R GBA and here 0 z0 0.8 like this all right so I'm going to uh that's all for this um backdrop components and we can make it of it already here so I will just display the backdrop components here like this and it's also going to take this is open which is going to be equal to is rating visible like this so now we come back we should see our backdrop so we see our Dr backdrop show up here and we see our rating model great so let's define our rating model so let's continue here and after this we are going to have another div it is a class name of BG white a width of 96 a pattern of four and rounded LG Shadow LG like this and here we can just have this H2 which is going to say um rate your experi and for the class theme I'm going to give this a text XL so an extra large and on dark team I'm going to give this a text Gray 800 a font semi bold a margin bottom of two like this and then after this div this H2 we are going to have another div and this div we give it a margin bottom of four all right so this div is going to have the label and it's also going to have the input so if we save and we come back to our application we see this Tex experience so here we're going to have a label and it's not going to have this HTML 4 the class name is going to be block text SM give this a f medium and a text Gray of 700 like this and we can have the text rating after this label we are going to have this div and the class name is going to be Flex items Center like this and inside this div we are going to map through the different star values because we want to show the star value which is going to be um the rating so here you can have this cost we call Star values and star values is going to be equal to 1 2 3 4 5 like this this star values we are going to map through it so inside here we are going to have our star values map which is going to be our rating value like this and we're going to get each value and we want to return return a button inside this button we are going to show the BS St F like this and because we are in a map we need to give this a key and the key is going to be equal to the value we're just going to use the value as the key and what else we can give this uh button a click event so on click of this button we want to go and and call the this function so here we want to have this function I think we defined it already so set written value we don't have it so we want to set the rating value which is the value that are the Chooser chose for now I'll set this to null we are going to come back to this and let's give this some class name and the class name is going to width of six we're going to give this uh height of six and we have this so we need to use back tick here for the class name like this okay so we're going to update some value based on the rating value now if the rating value so here I'm just going to for now put um I'm just going to take this off so we see if we come back to the browser we should see our rating value update so these TS here so once we click on one of these TS we want to give it a color or something like that so here to keep track of the value which the user is clicking on I'm going to have this Con here call it um written value and then set written value is going to be called to US state and by default it's going to be zero so this is going to need a written value which is of type number and here set written value which is going to be of type dispatch and we're going to dispatch a set State action like this and this is going to dispatch of type number all right so we're going to pass this to this prop now so rating value is going to be rating value and then set written value is going to be equal to set written value so we can save this and now we can bring in these values so the rting value and also the set written value and in here we can now unclick we're going to set the written value to the value not value error to this value so now we are sure we are updating the value we can now update the style and here we're just going to check if the rating value is equal to the value so the current value we are looking at if that is true we are going to give it this text yellow 500 otherwise we will just give it an empty string so this is our check here and if we save this we come over to the browser we don't see anything yet if we click on rate this should update and rather than give nothing by default I'll just give it a text grade 300 so text grade 300 and now if you click on one of these you see the values update accordingly all right so that's what we have going on for that and now after this we are going to have another div and this div we're just going to give it a margin bottom of four and here we're going to have the label and I think the class names are like before so we can just copy these class names and reuse over here and in here we are going to have the text review text like this so this is going to be a text area not template a text area like this and I'm going to get rid of all these properties for now just leave rows and I'll set rows to four okay so this also needs a value and it needs um the unchange to set the value so we can call this um rating text so here in states where did we have the previous so we can call this wrting text and set rating text but by default it's going to be an empty string so here we can duplicate this and ask for the rating text which is going to be of type string and here set rating text which is going to be this type but not a number now it's going to be a string and we can bring in the rating text and the set rating text so here we shouldn't forget to give this component the props so the rating text is going to be called to the rating text and then set rating text is going to be call to set rating text like this so now if we come back here and here so in the text area the value is going to be equal to the wrting text and we also need to unchange we are going to call this function which gets called automatically with the event and we can set rating text to the event. target. value okay so let's style this I'll give you this class name of with full uh PX of two uh py of three border rounded MD and that should be it so here let's save and let's have a quick preview just click on this and we see our text area so that's looking good and after our text area so after this div we are going to have this other div and this div is going to have the class name of flex and justify end like this and here we going to have this button the class name is going to be PX4 py 2 uh PG primary text white and rounded MD so this button is going to have the unclick and this unclick is going to be the review submit Handler we don't have this yet but we can have this review sub MIT Handler and here let's define it so we can Define it somewhere on up here this is going to be called to an async function like this um yeah like this for now we don't do anything what will be coming here and if we over on this we can just copy this so it's a promise that returns void and we can assign it type here so review submit Handler and we can already bring this in like this so here we call this uh review submit Handler and we also want to disable this button if we are submitting the review so disabled is going to be equal to submitting review and this also has to come from the propes why are we having an error because we haven't passed that Pro it's fine so if we come here we can have this other one for submitting review and here is set is submitting review like this which is going to be false okay so here are we expecting the prop so here we should expect the prop so is submitting review which is going to be of type uh Bing like this so here let's pass these props so his submitting review is going to be equal to his um submitting review set is submitting review so did we make a mistake here so this should be um okay we can go with submitting review I just say is submitting since we are working with that already so we'll pass this here and next it needs the review submit Handler which is going to be called to the review submit Handler so everything should be fine and we'll just bring in this is submitting review from the props and we would update this to be is submitting review so inside this button if we have submitting the review is submitting review is true want to show the text of submitting otherwise we will show the text of submit and then we want to have another button and this button is for cancel cancellation of the model so when we want to get rid of the model and this is going to have this class name of ml2 PX4 give it a p y of two uh BG gray of 300 give us a text Gray of 700 rounded MD and on Hover I'll give this a BG grade 400 like this and here we will just have the text cancel so for the on click we are going to call our toggle rating model I don't think we have that here so toggle rtin model we are going to call it do we have it no so here we are going to bring this from the props and this is going to be a function that will return nothing so that returns void but here I'm sure we have the toggle written model so this we are now going to pass it as a prop here so to model is going to be called to toggle rating model so if we come back to application and everything um reloads correctly do we have any errors nope so I'm just going to reload our application and it should come up okay so let's wait for it so once we click on rate we see this so we see our cancel button which toles the model and we see this um submit that does nothing for now okay so we have uh created this and if we click on submit so where is the submit button here we come over to our rating model and we click on submit we call submit review Handler so let's log details to be to the console to be sure that we we are getting the details so we're going to look the review the rating value and uh so the rating text and the written value we're going to L this to the console and let's try it out to see if we are getting the values okay so I'm going to choose five star and say hello and click on submit great so we are currently getting this value here great and you see our application works as fine also on mobile and on desktop all right so next we are going to create our API to be able to create this review okay so to create this review we are going to come to our API folder and in here where we have users um the user route. TS we already have this get to get user data now we want to create a review that belongs to a user so we're going to export this async function and this function we can call it post it's going to be called with the request which is of type request and is also going to be called with the response which is of type response so again we are going to get our session I think we have done this here great so here we are just going to copy these and use this here so we get our session and then we check if there's no session we return return like that so we are going to request some properties from the request Json so here we need to await request. Json and what do we need to create a review we need a room ID we need the review text and we need a written value so once again we can just quickly take a look at our schemas and here our review so you see this is of type um has a name of review and it needs this user ID the hotel room ID the review text and the user rating so it needs this and we're going to get the user ID from our session okay so now we have all of these we can go on to get the user ID so Curr user ID is going to be equal to session do user do ID so this gives us the user ID you can go to apply validation you know for all of these values but just continue I'm sure is pretty straightforward to you know apply some validation we can just copy this and use this here so we can say if there is no you room ID or if there is no review text or if there is no rating value we can go and return return this text so all fields are required like this and with a status of 400 so all of these and now we have our user ID great so let's have our try catch block and before we create the review we want to check first I think I should just handle the error case I'll say this error is of typee any and I'll just cons that log the error so error updating and cons. log the error like this and here how return a new not to try return return a new next response which will say um unable so creates review and give this a status of 400 okay so let's have have all Tri block the first thing we want to do we want to check so check if um a review already exist so I want to check if a user has already left a review on that room so check if already exist all right I need to check this we we need to create um a function in our API folder that is in our lebs sanity TS so in our API we have these two update hotel room from previous we have this to get user bookings to get user data we are going to export an asnc function and then we can call this check VI exist like this and what do we need we need a user ID which is going to be of type string and we also need a hotel room ID which is going to be of type string so so in here we can also say this um is going to return a premise that is going to resolve to null or it can resolve to an object where we have the underscore ID property which is going to be of type string okay so for now we are not returning anything that's why we're having errors okay so this check is going to return null or it can return this object with the found um review so let's have our query and this is going to be equal to we can make it of back tick and we use St like this underscore type is going to be equal to review and the user doore R is going to be equal to now we can use param to inject the user ID and we have here so for the hotel room doore R this going to be equal to the ReUse perm again to have the hotel room ID and here we take the first matching element and here we can request for theore ID property so this is our query where the type is equal to review the user ref is going to be the user ID and the hotel room ref is going be the hotel room ID okay so we have our query we can also have our params which is going to be equal to this user ID and hotel room ID so here we're going to have our user ID which will get from this function and also our hot ID so we can get our results so con results and result is going to be equal to AWA our sanity client and we call fetch we get the query not queries query and we pass our pars here so this results for now we S type any but our function knows is going to be of type null or an object to the ID so if result is true we want to return return the result which is going to be this ID object otherwise you know we're just going to return null okay so now we have this function to perform the check if we come back to our route we can now check if uh a user already exist so we can call this already exist and this is going to be equal to await check review exist and here we pass the user ID and we also pass the room ID like this okay so what are we going to do next we're going to L to the console already exist to be sure everything is working fine at least up until this point so in our page. TSX here we're no longer going to be logging these values to the console we are going to have this check and check if there is no review text like this where is it uh rating text so if there is no written text. stream do length or there is no rate um ritten value like this in that case we are going to wron a toast do error and the error is going to say please provide uh review or WR test X and a string and the rating okay so why are we having this error review submit Handler okay because we are not string undefined is notable to type void okay it's because of the return type okay that's what rning so we are rning a string and that's why it is um complaining if we have on this now it can return string or undefined so copy this and if we come back to our rating model I'm just going to update this right than say return void we'll say return return promise or on the find like that okay so now we also going to check if there is no room ID we also want to toast an error so so we're going to copy this and tost an error if the user doesn't or if in some case there is no room ID we can just say ID not provided like this and now we sure we have our properties we can have uh try catch okay so in case of any error we can just log it to the console and have it toast so toast. and say you failed like this and in the tri block we can get our we can get our data by ating xs. poost and this is going to go to/ API slash users like this and it needs the data so it needs the data so let's verify if we come here what do we need we need the room ID the review text and the written value so copy this and here have the review text and we are going to have the written value I would also paste this in here and we also need the room ID and I will paste it in here we're having a um because this is rating test so revie test is going to be rating text like this okay so here we just going to log our data to the console and we going to toast do success let's say review submitted and and we need to do some clean up so in the finally block we are going to set a review where is it is it set our rating text I'm going to set it to an empty string to reset the values and then we're going to set written value to null we're also going to we have an error I'll will come back to that also set the room ID to n and also need to set the is set is is submitting review to false and what else we're going to set our rate close our backdrop and also uh model so we will set this to false like this so while having an error in set ready model because this can be of type number or no the error is gone but we have new errors here because you know if we hover on this so this can be number or null and this same can be number or null so let's quickly update here where is it so set written value can be number or null and written value can be number or null okay so now we can come back to our route and if we send this I just want to be sure that already exist is been printed so now remember this is going to be called on the server side so let's look out for for this on the server so I'm going to save this and I'm going to try to submit a review view I'll click on this and we already have this from previous and I'll just say hello again and submit and if we come here you see the review failed and the you know we see here the form got reset and everything which works fine we have an error which is okay but now you see already exist is null so you see the user hasn't left uh a rating on this great so since already exist is there I will just get rid of this and we show our logic is working we can have data so let data like this and now we want to be sure so if already exist is truthy we are going to do something so we want to go on in that case and update a review otherwise we want to create a new review so here we don't have these functions to update a review and to also create create a review now we are going to create them so backing our leaves api. TS here so after check review exist we're going to export another con to update review and this is going to be equal to a sync we're going to have the properties that we are going to need here so the review the review ID so also going to have the review text and we also need a user rating like this and this is going to be of type so a type that we don't have yet but we can already call this update um review dto so we don't have this type yet let's go on and Define it but before before we do let's complete our function body so let's define this update review dto here in our models we would have this review. TS and here I'm going to export this type and this is going to be update review dto this is going to be C to object we have the review ID which is going to be type string we also need a review text which is also going to be of type string and we need a user rating which is going to be of type number so now we are here let's also export on type create review D this is equal to this object so we have the hotel room ID this of type type string we need to review text which is also of type string the user rating which is of type number and we also need the user ID which is of type string so now we have all these values we can come back here and we can just import this from our models great so now we have these values let's have our mutation con mutation and mutation is going to be this object and in here we're going to have mutations which is an array of objects and here we want to have a patch operation and this patch is an object where we provide the ID and the ID needs to be the review ID and we're going to set the text to be the review text and we are also going to set the user rating which is going to be the user um rating so we don't actually need this like this okay so this is our mutation and I am just going to copy one of these uh where do we yeah this create booking I'll just copy one of these that we have here uh we collapse this and here just after this mutation I'm going to paste it in here so we have our x. post where we target our Endo every other Thing Remains the Same and we go on to with on our data so this is for you know updating every view so let's also have for creating um a review so here I'm going to export AC call this create review which is going to be equal to this async function like this which is going to be of type uh create review dto and we can have our function body so here we're going to get the hot room ID the review text the user ID and the user rating so all these typ type should match here so if we come to our schema and in our review schema it needs this so the user and if we come here we are going to have it as um um user okay where the ID so the ref is going to be pointing where is it the ref is going to be pointing to this to the user ID and same for for the hotel room which is of type reference and here we are going to have this um text so it's not going to be review text it's going to be of this name text and this is going to be of the name um user rating okay so we should make sure here we are using this um and this should be create review this should be user rating just as here and we're going to use text okay so let's create this we're going to have a mutation and mutation in this object so we have mutations mutations is an array of object and here we want to create um a create mutation which takes in thisor type and the type is going to be review and it needs the user which is going to have this underscore type which is of type reference and it needs the ref so where is it pointing to or what is it pointing to it's pointing to this user ID and after this user we also need a hotel room and the hotel room is going to be this object where we have the underscore type and the type is going to be reference like this and we also need the underscore ref and this is going to be pointing to the hotel room ID and after this we'll pass the user rating and we're going to pass the text and the text is going to be the review text like this so we have our mutation and we are just going to use this thing so this Remains the Same so after our mutation just here we are going to call this and return our data so so let's save this and then let's come back to our route and in here so if it already exist then we want to update we're going to assign data to be equal to our weight and then we call update review and update review need this object where will pass the review ID and this review ID is going to be already exist doore ID we are also going to pass the review text and we also need a user rating so this user rating what did we call it not get here written text do we have written text so written value like this so user rating is going to be written value okay but if it doesn't exist then we need to create we're going to assign data to await create review and create review we take this object so we have the hotel room ID which is going to be the room ID like this so this room ID is coming from our query parameter and we need a review text we need the user ID which is going from our session and the user rating which is a rating value you like this so after all of this we shouldn't forget to you know return return a response so we're going to return return uh next response do Json and this is going to be the data and we can have a status of 200 and the status text of successful like this okay so let's hit this and see if everything is working fine up until now so let's try to create this review okay so I will just um reload the application and I'll reload uh sanity studio so our review you see we don't have any review yet so we are going to try to create one review so in here I'm going to click on rate and let's say give this three star and say um normal experience and I submit so let's see what happens I don't see the text it's is submitting but we get review submitted so let's quickly take a look at that logic so here where we have our page um the we set is submitting to true we done so here we need to set is submitting to True okay so maybe somewhere here set is submit review to true and here we should set it to false okay so that will fix it for next time and we come back here and you know we left a review let's come back here and see if this updates great so we see this here and let's see if it's three St and everything that we defined so let's wait for it to load up okay so it's actually taking time I don't know okay so this is it uh this is the user this is the hotel room and this is our review text and we give it a three star rating so this is working fine as we expect so now let's rate again and see if our update is working I'll give this five star and say great like this and if I submit now we see it's submitting and if it's done it's cleared and if we come here we see great and we see five star so fantastic we are now able to write a review and if we come here to this um to the room so this room that the user just left a rating on let's see if we are able to um obviously we cannot see the review because we haven't wired up that connection but now we should be able to fetch the review so let's work on that I'm going to remove all of these so that I have some space and just easy for my eyes to know where I am looking at I'm just going to collapse all of these and next we are going to be working in our web our rooms this log and the page. TS so here what do we need we have this um reviews component so we actually need to work in that um review component so I'm going to create a new components so in the components folder I'm going to call this room review like this and I'll create this file so let's wire this up now I'm going to get rid of this and this is going to be of type FC because we are going to request for prop and that prop is going to be single we want to fetch the data the review that belongs to a particular room so here we're going to have room ID which is of type string and here we are going to maybe just D structure the room ID from the props like this so we are going to use our ex to fetch our room review so we can have this Con fetch room reviews and this is going to be equal to this async function like this and in here we're going to get our data from ating X dog and we are going to be going to SL API slash room review we don't have this yet we're going to create this and here slash Let's uh pass the room ID and once we're done we return data so here we are going to return data and data will be coming from here all right so after this we're going to be fetching our data making use of the US s SW Arrow hook and this is going to need a key so the key will be/ API SLR Infuse and now we're going to pass the fetch room reviews so here we're going to get data which we can rename to room reviews and also error and also is loading like this so for all these properties I will copy what we had in our web rooms in know room here I will copy this and make use of this here so if there's an error we try error if type of room reviews is undefined and it's not loading or also through this error okay so we haven't set up this API end points and then here we can cons that log data we don't have any data we actually named it um room reviews so here we log to the console so this is going to fail because we haven't set up this Endo so let's set it up now here in our API folder I'm going to create a new folder and this folder will we call room reviews so this room reviews to match with this not this sorry so to match with this is actually room reviews so here we shouldn't forget our s okay so here we are going to have our route. TS file and here is going to be pretty much straightforward we're going to have this async function we call it get and here we are going to have our request which is going to be of type request and we want to take the ID from the param okay so I want to take the ID from the param and to do that first this room review we need to have this uh ID here and have the route defined inside here like this so we're going to have the route inside this ID okay so I'll take this off and here we can have parms I think T script will comp play but we can say this is of type object so would have PMS and BMS is also going to be an object so have ID and ID is going to be of type string so now in here we can have a room ID which is going to be equal to params do ID and we can have our TR catch block and in case of error just L it to the console and say get in revie fi and here have the error and we a new next response not next request next response say unable to fetch and with State status of 400 like this so now in our Tri block we want to call a function to get a review so we can have here con reviews andews is going to be a function we are going to Define in our sity studio and we're going to return our next response. Json we return return the reviews can call it room reviews so here we are going to return return our room reviews and here we can set the status of 200 and we can also set the status text of let's um successful okay so let's go on to Define this function to get um the room review and if we come over to our leavs and in our api. TS it's going to be pretty much straightforward we're going to have this um export this async function we can call it get uh room reviews and this is going to take in the room ID which is of type string and here we can have a result and our result is going to be AWA our sanity client. fretch and we don't have the review type yet I'll come back to that in a second and here we are going to pass the query and we don't also have the query so we need to define the query and we also need to define the we also need to define the type so let's come over to our queries so our sanity queries here and we are going to export con get room reviews and this is going to be called to this Gro query we have our backtick and here we have the star where we set the called type so the type is going to be equal to review and the hotel room room doore R is the and here we have our room ID like this and in here we can take theore created at you can take the ID the text and the user who created this review and the user we just need a name you just need a name to display uh in our UI and after this we just need the user rating so the value so this is what we need and if we come back to our apis. Ts for the query we can have our queries dot um since we forgot to add query so get room reviews query like this so I will save this and here I'm going to have our reviews. get room reviews query and after that it's going to need this object for par so if we come back here you see we are having this par where is it yeah for the room ID okay so here we are going to pass the room ID as a param and after that we are going to pass another object for cache and here we say no cash like like this and once we're done we should go and return return the results so very much straightforward but for this we haven't defined the type of review so here we come to our models so in our models folder and here for our review we're going to export another type and this is going to be a type review and the you would have a text which is of type string we also have a user which is an object with a name property and the name is going to be a string we'll need a user rating the user rating is going to be a number we're going to need the underscore created at which is going to be of type dates and we need the underscore ID that's the review ID which is going to to be of type string so here we are going to say this is going to return like this an array of rating and we can come back to our route. TS so in our route here where we have our room reviews we are going to await uh get room reviews that's we just defined now in our lebs and it needs the room ID we just pass in the room ID okay so we are fetching the review so now we should see data because if we come to/ API SL room reviews SL ID we are going to be hitting this end point so SL API um room reviews and you know the ID in here we are going to to hit this route and here is going to get the params so the room ID and it's going to pass it to our get room reviews it receives the ID here and it passes it here as a par and we have no cash here so if you feel if you visit this get room review sare you see here we have the room ID so now if we come back to our application and I would open up the browser we see this object and if we open up this object we see we have results and this so we need to fetch data so are we loging this to the console I'm just going to reload and why does reloading I will come back to the room review and I don't expect it to work and why don't I expect it to work we are not mounting this in our page so if we come over to our web our rooms slog page we are not mounting it here so we need to have our room review components and now it should work what does it need it needs a room ID and the room ID is going to be the room no let's see here so let's see here so we are fetching the data from the room and here we'll just give it the room ID so room doore ID property so now we we save this and we come back to application we see an empt array okay so we see Mt let's just um let's go on to reload this to be sure you know everything works fine because we saw in our sanity Studio that this room you know the deluxe suit that's if the room if that's the room we are looking at let's verify yeah so we verify and we see our review so with is the user so now we are sure we are fetching our review we just need to display it here okay so what are we going to do we are displaying it here we have the text room review and that's because in the review component that's what we're showing room review so we need to go on and map okay so what we're going to do here I'm going to return fragment like this and in here I'm going to say if um room reviews so if this is true we going to have our room reviews and we're going to map through the review and this is going to give us each review and we are going to return return we are going to return this div okay so whatever is this um it has type any now if we over here we can come over here and say this is going to give us an array of room so a room area like this and I will just bring this down so if we come back here it should be fine yeah so it's fine and we can just need we just need to pass a key and we can say the key is going to be the review doore ID so let's stle this div let's give it some class names we're going to give this a BG um a BG G gray of let's say 100 I'm also going to give this on dark mode uh PG gray of 900 just give us some padding and lastly rounded LG like this and inside this div we have a H2 where we display the username so we can style it and say this is going to be font semi bold and mag bottom of two and display Flex like this so here we can have this um paragraph So having a paragraph inside the H2 I'll change this to a div and inside this paragraph I'm going to display the review do name like this um no so it's meant to be the username so why are we having this so you do user that name so what type did we set here we set room sorry it wasn't meant to be room it was meant to be review okay so it was meant to be review and now everything should be fine yep everything is fine and after this we're going to have another div and here we want to display the actual rating so here we're going to get this margin left of four Flex item Center text the sh lights um text sh lights and text LG like this and here we want to display the user rating we're going to display that in uh another component which we are going to create but for now we can just display the outright rating and after this div we are going to have this div and here we are just going to display the review text so now let's save this and let's come back to the browser and over here we see this so we see the username and we see the rating number okay so we don't see the text I think it's actually loading up so we can reload this and we should be seeing um the user text so we can just wait for this to load and here we should see the user text we don't see the user text so why don't we see the user text I'm just going to log this um console. log this room reviews I just log it to the console so that we will be sure of what property we used so this we sted it as um let's see so review dot text so this isn't this is text so we have an error here okay and did we what did we use here so we use if we inspect this so this is text okay so that's why we are having the issue to fix this I don't know where we made this issue where we had that typo maybe you noticed I will just search for it here and this should help so here we made a mistake this should be text and now we save it we should see the user we should see the user text I'm actually going to close all to have more room and this time around great we see the text which is also great so let's have this review component the rating components and if we come back to our just leave this open if we come back to our where is it leaves no our component we can have this rating and in here we can have this rating. TSX file okay so I will rename this and here we can have our react components I will get rid of this so This react component we'll need some props so I say this is of type FC and the prop is going to need even though is one you can still Define it here so type props is going to be this object so we take rating and rating is of type number so here we can bring in props and we can D structure rating like this and we need to know when to show a half star and when to show a fulla okay so before we return return we actually going to return return empty fragment here we are going to have this full Stars constants uh and this is going to be called to math. FL and rting like this and here we can have the decimal part this decimal part is going to be the rating we get minus full star so in casee there's any you know remainder so here we can have our full star elements and this is going to be an array so this array we are going to have our full stars and we want to fill it so what are we going to fill it with we're going to fill it with um a component so fa star where is it f star like this we going to import that so now we have our full element here I'm just going to render it so here full star elements like that and we can already have a half star elements and this is going to be equal to null and we can check if decimal if decimal part is greater than zero then our halfer element is no longer going to be n it's going to be our fa star half like this and here after this we are going to render uh half star element just in here all right so let's save this and now we're going to use this rating in uh room review component here where we just have this review. user rating we are going to have our own rating component and here we're going to pass the rating which is going to be equal to review dot user rating so now if we save this and we come back we should see five stars here so we just wait for this and we should see five Stars great so we see our five stars and everything is looking good both on our white and our dark team so this is the functionality we can go on to notbook this hotel and everything is working as expected and if we come back here and let's say we want to update the we want to update the review and actually this is quite loud why is it that big if we come back to the web users and page so where is it we have this and this should be 28 looking too big and there should be some padding button here so we save this and we come back we have our space and this is now little smaller so if we try to rate the room I'll just switch back to the light team and let's say we go back to two and then we say not so great and we click on submit it submits and once we come back to our room we should see this update automatically so not so great and we see this so that's it for this um functionality so this is the application we're building and congratulations if you've made it th far and now with this time we can go on to build to publish our application to the Internet so that we can share with our friends so far we have been working on our local machine on Local Host 3000 so let's go and publish our application and to do this I'm going to quate our terminal and we need to initialize git in our project so here let's just open this up we need to initialize get in our project we do that making of git in it so now git is initialized in our project and you see over here we have 76 changes okay but you see our EnV is not grade out the cach is grade out node modules this is grade out we want to also grade out gr out our EnV and that is or that means so that git is not tracking this file so to do that we can come to our G ignore and just somewhere here you can add en EnV like this and Save so take a look here you see that EnV is now grade out and git will not be tracking these files for changes and then we will not have all these our secret code pushed out all right so without out of the way let's configure our email so get config user. email I will put my email address here and get config user.name and and I will put my username okay so with this next we are going to add everything to staging so get add and Dot means add everything okay and after we need to commit our changes with take commit message and I'll just call this final build like this and now you see all our code file has been committed now we want to push this over to GitHub and to do that you see this doesn't mean anything actually if we reload you see our server is actually shut down we need to create uh new repository so here I will click on repositories like this and I'll click on new to create a new repo and I'll call this hotel management like this I'll make this public and create okay so once this is created we can come here so we have an already existing in repo from the command line we just need to get remote ad and push our changes so this we have done get in it get add but we added all so we added all our files we committed and this is where we at now and then we push so I'm going to come back here and paste this in so get remote add origin and then get push origin Master like this it access for my password I'll provide my password and this should push all our files to GitHub so once this is done if we come over to GitHub and we reload we should see all our files here all right we don't see yet so it's still right in and once it is done we should see all our files so it's done and now if we reload this we should see our file great now we have this we need to come over to Vel and here to go to log in or create a new project a new Vel um no sign up and here I'll click on add new I want to add a new project and I want to import this project so here you already see the project here if you don't see it you can configure Vel to sech for the product so here I'm just going to click on import I'll leave the name as theault and let's see what do we have here um do we have nextjs I would just choose nextjs as a framework and here I need to add environment variables so I would just come here and in the EnV I will copy everything we have here so I will just copy everything we have here so from here to here like this and if you copy this and you come back here and you just paste it here everything has been added automatically so that's great and next you can just click on deploy please take um a note of this stripe web hook okay because this is the this is the one we use for development and when we add this to our stripe we're going to get a new one so we need to come back and update but that's fine we can already go on to deploy our application and now you see our application is building and if you expand this we see the steps that the vasel CLI is running and first it went on to clone our project from GitHub so here you see it went to clone our project which is the master branch that was automatically synced to this Vel project that we created so this one and after cloning you it's now installing the dependencies by running Vel build this vasel build command goes on to install our dependencies and now you see it's running npm run build so next is running npm run build and now it's running next build so this mpm run build goes on to run the next build command and here we have couple of warning totally fine and once it is done we should see our application so we can just ignore this warning we see here and now it is finalizing page optimization and now it has successfully built our application and we should see the deployment summary so build completed here all right so we s our summary everything is fine and it's just completing the checks and it redirects us to this page okay so we see our application that we built so now we can continue to our dashboard and here in our dashboard we can visit our application this is definitely going to break because we need to add some things some files here so we can't even authenticate if we try to authenticate with Google we should have an error so if we try to authenticate with Google it should fail so you see this fail this fails all right so let's fix it I will copy this URL and come back here so where do we have let's start with uh sanity studio so I'll just open up a new tab and I'll p in this URL and I'll go to/ Studio which is where our CMS Lees so in the studio URL and this is going to open up next year so that we can add this to course else we're going to have issues and not working with this so I'll click on continue this will redirect us and here we are going to add course origin so once we do this we are going to have our project configured and you see we have all our hotel room and we can visit our application this is one we need to do more if we come over to Google so this is where we had our web client we can click here and if we do we need to add this authorized callback URL which for now just has Local Host so we're going to paste in our URL and we go to/ API slof SL callback SLG Google this so please do make sure you add this so this will be the domain you get from Vel and do attach API sl/ callback SLG gooogle and go on to save this so once you have this saved you're done with Google and next we can go on to our stripe so here we need to add an endpoint okay we need to add an endpoint here and the endpoint URL is going to be this and then slash API slash web hook so these endpoints we have here if you come over here we are pointing to this so in our source in our app API SL web hook this route here which is our web hook route okay so make sure you don't have any typle here else is not going to work you can add a description and here we're not going to select all of event we're going to click on event and let's see the event we are listening to so we are listening to this checkout session completed I'll copy this and search here and I'll paste it here and you know check this checkbox here okay and this just gives an example which we have done all through this uh project so I'm going to add this event and that should be it so here we click on ADD endpoint great now we have added endpoint you see here where we have this sign in secret I'll click on review and now we need to copy this so we're going to copy this and come back to Vel so where do we have our Vel here okay so here we will come over to the settings tab and in settings tab where do we have um environment variables here if we come over to where is it our stripe web hook secret so this we can view this web hook secret and I'll just come here and click on edit so I'm going to remove this value and paste in this new value that comes from stripe and click on save so now once we have saved this we need to redeploy so come back to redeploy um deployments tab here and click here click on redeploy all right we're not going to use existing build cache we're just going to redeploy this like this and now we're going to wait for this to build all fast forward and I'll be back once this is done building because we have already gone through the different steps that Vel goes through to build our project so I'll see you once this build is completed or maybe I would I wouldn't fast forward because we are actually leaving out one thing so remember we have um GitHub authentication so if you come here where do we have our project so if we come here and we come over to the settings tab and we come over to whether we have a developer settings whether we have the developer settings have I missed it somewhere all right so let's come here and let's come to settings and here we can come over to developer settings and developer settings you come over to O apps and here hotel management you choose your project we need to update this so This points to Local Host that means gith up authentication real definitely fail I will update this but not to this I will copy this URL that we get from Vel and paste it in here and also paste the Callback URL like this and update this application great so now we are going to be pointing to the correct URL and I will just remove this and if we come back here and let's see how application is doing it's it is done and we'll just wait for the deployment output to be done so that we can now revisit our application and test our flow one last time so it is done we can click on visit and this is going to take us to our application so let me go back and look for this I think I would still work with this URL we have here so I would copy this URL and work with it rather than this um new URL that we get okay so you see this here I would work with this actually and let's come here and let's try it out we're going to try our web hook and be sure that everything is working fine so I'll paste in this URL and let's try to shop a hotel room let's try to book actually so we'll come here this was one we booked from previously and now I will come over to book this room and next something went wrong so what happened because we are not authenticated okay I think so so let's authenticate I will click here and click here our authenticates with Google and wait for this so that's one logic you can handle if you're not authenticated and trying to protect those routes so now I'm going to click here again and you see doesn't crash so it works just as fine so in this room you can update the logic to make sure if you're not at you cannot visit this this route and I think this issue is um coming from here so I think it's coming from our middleway so what we just noticed I think it's coming from here but no worries we would keep an eye on this middleway as we test out our application and let's choose a checkin date and also a checkout date I'll just choose the next day so the price is 400 for the total price as we have a 20% discount okay and it's now 400 so if we choose to this it should be 800 great so the logic is working fine and if we choose um let's say if we come here and we choose you know a date that is way higher than the checkout date we should have this great so this is working fine and let's try to book now and we should be redirected over to stripe which we are and we have this eror check out session could not be found the error is usually caused by using the wrong API key so perhaps we using the wrong API key as tripe has told us so let's update our API key so to do that I will come back here and here if I come to developers and I come to API keys I'll copy this publishable key and I would have to edit this again and click here and where do I have to edit so I'll come here and here I'll click on settings click on environment variables and this is the publishable key so where do we have the stri publishable key this key over here if we visit this so publishable key I'm going to click on this click on edit and update this publishable key all right so I will save this and next we need to update the secret key to be sure we are using the correct Keys here so this is the stripe secret key I'll click here click on edit and I will also update that secret key and click on Save okay so if you didn't have the errors it's fine for some reason I got it so maybe I use the wrong keys and now I'll have to redeploy so come back to um deployment and in here I will redeploy and here click on redeploy all right so this is going to redeploy again so is totally fine when you're building application for production and you get one of these errors um you know missing keys and stuff like that so I would wait for this to build and once the build is complete I'll be back all right so our build is completed and now we can you know revisit our application so so this is the domain I'm going to copy this domain and let's try it out again so here so this is where we had error I'm just going to paste this back in and now let's see if everything works I'll come back to rooms and here I'll choose this room again and I'll try to book it like this and click on book now so we should be redirected back to stripe and now you see stripe doesn't crash so it was a case of using the wrong API keys I'll just provide a test email and this card information and give it this CVV and give it this test name and click on pay so let's keep an eye on where is it on web Hooks and see if if we have an event here that gets triggered so let's wait for this to process successfully and for now we don't have this yet let's see so this is done and we don't see the hotel that we booked all right so we see this is actually failing if we click on this and here I'm just going to reload this so that we you know we see if this was actually called and if we come over to our domain for/ Studio here I think is this no so if we come to our domain and we come over to bookings do we have an extra booking no we don't and if we come here we have this so we have this 307 temporary redirect and I think this has to do with the issue that we had initially where we were blocked from here because 307 is usually every Direct and that should be this Middle Way causing the issue so we need to update this I'm going to duplicate this and here I'm going to change this I'm going to get rid of the API because we are actually authenticating our API Pages we don't we're not going to be doing it here so we just going to be blocking the user route so this might have some effect on the API folder which it definitely does but I'll just leave this here or maybe I take it off so you know you don't see was not working and now I'm going to rebuild rep push our application so I'm going to save this and get add dot again get commit iPhone M I will say fix Middle Way error like this and now we're going to push get push origin Master like this and once we have this change pushed Vel should build autom ially because it's connected to our current branch which is our Master Branch so let's see if that's the case okay so I'm going to come back to Vel and I'll come to deployment and I will come back to our function first and you see it's building so automatically it's just deploying our application and I'm going to click here so we can inspect the build to be sure everything works just as fine fine and if you click here it's just doing what it did before so you know running mpm run build which NE runs the next build command and we have this warning from our rooms page regarding use effect it's just a warning and now it's generating our static pages and it's done so I don't know it was super fast so perhaps it used cash to build or it just builds the middle way the section it found out that needed to be fixed which is this so fix middleware error so just this change and that's why it's super fast all right so it's done already and let's retry so I'll come here to the application and I'll copy this because I want to load it again and I'm going to update our URL like this so let's try to build um we can come to our rooms we take a look at this room again and here I'm going to choose this and choose this as a checkout dates and book this again so now we should still keep an eye on this U middleway so we have these two failing and I'm going to provide this test at test.com and provide this card information three CVV and give this set name I would just say code with lbrary like this and I'll click on pay and this time around let's see if everything works and we don't get the 301 redirect now this works and we don't see it here which might be bad news but let's check here good news actually so we see our booking so it means it works this time around and this is the hotel room we booked and if it had this discount and everything here great and we see it here it just needed to reload all right so if we come back here and we reload our stripe and let's wait for it to reload and let's see if our web Hook is actually working in production and this was successful this time around great and that's why we had a booking so users are not able to book um a hotel room unless a payment is successful and that's why we have this code this code here running in the background and let's leave a rating on this room so we have this log V if we visit the room now we don't see any rating all right so let's try to leave a rating I would come back here click on rate I'll give this a five star and say great experience and click on submit so once it's successful you see review submitted we are going to come here and great experience we see our review and we see that this is booked and we can you know try again and again so here I'll click on rate it'll give it a five star I'll give four star and say um androoid my stay androoid my stay like this and click on submit now this is going to update and if we come back here we should check take a look at this we don't see any review yet so let's just reload perhaps it hasn't updated and here we see it so enjoyed my stay and we see this so great our application is working fantastic and this is the build and you see everything works as we you know we coded it out fine in um production and also in development so everything has been fine uh and everything is working great so this is the build if you enjoyed it please to go on and subscribe and you know I look forward to building more of these projects with you you can try out these filters and everything is working fine and try to remove the console.log that we have here all right great so see you in the next one and take care until then iind your boy Cod it Larry do take care and byebye