hey coders i'm cody seifert and welcome to another tutorial where i'm going to show you how to build a tree browser using view js so basically on the right this is what we're going to be building it's a very simple component which if given a tree like data structure it's going to render out different divs that you can expand and collapse to view the file system or whatnot and we're using a an external module to kind of color the files based on the file extension we're doing some cool little stuff inside the component um and then lastly if you click on one of these files it's going to invoke a callback where we simply just display an alert but if you think abstractly you could do whatever you want such as render something over on the right hand side maybe even show the file contents after you click on one of these files so this is what we're going to build let's just go ahead and start building it so i went ahead and just started up a project using the vue cli version 3. so over here on the left you can see the the bare bones project is ready to go on the right we have it running if we wanted to get started with this component though let's go ahead and create a new file called tree browser dot view i'm going to go ahead and just scaffold out a new view file here and of course we need to go in the app.view and include that so let's go ahead and just bring in tree browser wherever we plan to use it i'll get rid of this image here save this file and just to verify that this is working let's just go ahead and display some text so i'm going to say h1 hello and write that out cool so at this point we should be good to go to start developing our tree browser component the first thing i want to start with is let's look at how some json data may be represented to represent a tree structure like a file system right and we're going to define a json object and pass that down into our tree browser as a property so let's first inside our app component let's define a data function and let's return an object which has a root object on top of that or it has a root property and inside this root property basically a root is going to be a node which has children so if you know much about like graph theory or if you've done like computer science data structures and stuff we're basically just going to represent a tree using nodes that have children so in this case our root is going to have a name so in this case we'll do a slash and then our node will have children attached to it which is going to be an array and then inside that array we can have multiple other nodes so our first node could be let's say music and then of course that could have children keep doing a capital m and then that child node could be i don't know name of song.mp3 or something like that so that's one folder that could exist in our root directory if we wanted to make another child we could do name and we could say this is workspace that has children and inside our workspace we have multiple nodes and let's just say we have one called source.js so that's kind of the representation of what a file system looks like using javascript objects again we have a node which has a name and then inside that we have children which has nodes and names and nodes and names etc etc and that will go down to however deep your file system is so using that root data property let's go ahead and try to pass it into tree browser so the first thing i want to do is i'm going to go into tree browser i'm going to define a props object and again you could do a props array so i could do props as array of node in this case we're going to actually define some defaults for props in the future so i'm going to do a props object which is going to have node which is an object type and once you define this props property on your view component here you can use it so for example in our app.view i could simply just go over here i could bind node to my root property in my inside my data function and now inside of my tree browser i could simply do node.name to render out that first slash that we had to find in our root so hopefully that wasn't too confusing we have a good understanding of what the data structure is now we need to understand how to traverse it to display a file system so going back to our tree browser the first thing we kind of want to do is of course we're gonna have to wrap this in a div because view requires only one component which is exported in your template so i'm gonna wrap that in a div and just print out the name here and i'm gonna go ahead and split this out into two different sections so the first section is gonna be a div called node and that's where we're going to have like the the icons for if it was expanded or not and the name of the node etc so i'll put go ahead and put the h1 in that and then of course down here what we're going to do is we're going to call tree browser again and i'll i'll do this in one second in fact i'll just i'll just go ahead and do this now so if we take a step back and look at what we're trying to build it's a component which recursively renders itself multiple times so in order to recursively call yourself we can just say tree browser again but we need to make sure that we define a name over here on our component or else you're not you're not able to actually recursively render yourself it won't know what tree browser is let's take a step back and think about what we need to do so we already rendered out our name node but remember we have this children property which is an array that we need to loop over so inside view what we could do is just add a v4 on side that tree browser component and i'll say for node and node.children actually i'll name this um child not node and of course if you're doing a v4 in view you need to make sure you bind a key so for now i'll just do child.name um and that is basically going to loop over all the children of the node and create a new tree browser object and render out the name so the last step is we're looping over all the children and rendering a new trick browser component but remember we require a node property so over here i'm going to bind node equal to the child i'm going to go ahead and save that and notice here on the right it renders out all of our nodes and one thing to notice is that the indentation isn't really useful we can't tell like what is nested under other things so i'm going to go back to my style over here and just make it scoped and this will make sure that all the css inside the style is only scoped to this component that we're looking at and for node i'm going to say text align left and we're going to start working on some logic to be able to simply indent based on the level that we're at so notice we have everything along the left how do you think we could indent based on the depth right so if we're at the root level we don't want to add anything to the left but as we start going down the depth of the recursive calls we need to kind of indent so what we could do is as a property let's define yet another one called depth that's going to be a type of number and then we're going to default that to 0 for now and basically as we call tree browser we just want to pass depth of depth plus one so if we're on this first entry we're gonna be depth of zero music will be depth of one song will be depth of two workspace would be depth one and sources will be depth of two so now that we have the depth in incrementing by one every time we traverse down the recursive call stack how do we actually indent well we just have to use css right and in view we could simply just go over here and do a dynamic style binding so i'll say bind style is equal to an object and this is going to have a margin left of um the depth times some amount and i'm just going to go ahead and add pixel to it in fact if you want to be proper let's just go ahead and do string interpolation here like so so if i save this notice that now the entries or nodes are indented correctly based on the depth that we're at in fact i think the text is a little bit big so let me just make the font size like 18 pixels instead and i'm going to still seems kind of big let me look at it oh cause we're using h1 so instead of using h1 let's just go ahead and just get rid of that for now and we'll fix it up to make it a little bit better in the future okay so now we're making some progress now we need to move on to kind of the next step which is the ability to expand and collapse these different nodes depending on if they're clicked or none so of course let's go and add a new data property to keep track of if we've clicked the node and if it's expanded or not so if i go to data and return expanded is false we now have a property which is attached to the root level of all these different nodes and then we could just simply hide or show the children based on if that's true or not so over here i'm going to say v if expanded say that and notice that now we only see this slash and again vf is just a keyword in view where you can use it to hide or show dom elements based on a boolean value so the next step is how do we actually see or expand this view to see the children what we could do for right now is just add a click callback so say click and then we want to simply set expanded is equal to the opposite or negate of expanded that's basically going to toggle based on us clicking on stuff so just to show if i were to click on this now notice that it's toggling our different things but unfortunately it's hard to tell if something has been expanded or not so let's go ahead and add some icons to the node so we can tell if it's been expanded or not so let's add a span and i'm going to add the class of type and basically what i want to do is just display either the carrot to the downward position or carrot to the right depending on if we're expanded or not so in here i can do string interpolation and say expanded question mark and that's a ternary operator if you're not familiar with you know javascript's ternary operators so if expanded is true we simply want to display the string or the symbol 9660 and then otherwise we want to display 9658 and 658 and go ahead and save this and end the interpolation cool so now we have an actual icon which changes based on if we've clicked it or not and now that we've done that we notice that there's a bug right there's a there's a the icon is being rendered here for nodes that don't have any children so let's try to prevent that from happening so down here in our component i'm going to add a computed object and inside here we can add a has children property and that's just going to return this.node.children so if this is defined we have children if it's not we don't have children and what we can do is only display this stuff if we have children so here i'm going to do a v if we have children or has children and now when i save this i should be able to go down and the icon is hidden if we don't have any children the last thing i want to do is i want to add a little icon next to song for like just to kind of further indicate that it's not a folder it's more of a file so over here i'm going to add yet another span and i'm going to add a a symbol which is going to be a circle here and i want to display it if we don't have children so i'm going to just do v else here so basically now if we don't have any children it's going to show this little triangle icon so that's all cool and all but how do we actually figure out if we've interacted with clicking on one of these songs so what we could do is we could add a click callback here to the node and instead of doing expanded is equal to not equals expanded i could say node clicked of course pass that the node actually in fact i don't need to pass that anything um and then down here we can add yet another opera a property called methods and that's going to have a method name called node clicked which we're going to do that same logic so this dot expanded is equal to not expanded and let's save and just test that out to make sure we didn't break anything but also what we want to do is we want to check if the child has children we want to go ahead and just emit a event so that our app.view can kind of do something depending on what you clicked so over here i'm just going to say if this dot has children i'm going to simply this dot emit on click and i'm going to send back the node that was clicked so this dot node actually in fact we don't we want to do this when we don't have children so only when we click files so sorry about that just add a little negation there and we won't we wanted to check if we don't have children so this is another cool thing that is attached to view components the money sign emit and basically this is going to emit an event called on click and it's going to pass this as the data and it's going to bubble that up to any of the components that are listening so inside app.view which is our parent component which is kind of listening we could simply just do at on click and we could say i'll call some random functions so node was clicked and of course down here we could just say close my data and i'll say this is going to have a methods property and inside the methods we're going to say node was clicked and that's going to take a node as a parameter and we're going to simply just do alert node.name just to print out the name of what was clicked and don't forget hit your comma there so at this point let's go ahead and test it out and see if we're doing okay so we are getting a little error called this dot has children is not a function and because computed properties are not actually functions they're just booleans or they're just variables that you can use so instead i'll just go ahead and backspace those that function call i'll save that and make sure there's no errors in the console anymore so now when i click song.mp3 it should be saying this dynamite on click and sending out the node and then over here we're listening to it and calling node was clicked but for some reason it's not actually doing anything so let's go ahead and just log out we are clicked and save it here to see what's going on so that's not being called so i'm assuming that there's an issue here so over here i can say console.log we are here okay so we are indeed getting to this point and we are emitting a on click event um and the issue is is that remember we're doing recursive calls so here if we want to bubble that up all the way to app.view we need to remember to listen to the click call back here so i can say at on click and i'm going to simply just do omit i'm going to say on click and then i could pass the node that was clicked in fact i think i need to do something like this node okay so give it a callback function which is going to take the node that was clicked and just simply propagate it up and there may be a different way to do this in view if anyone has a suggestion as to a better way to actually do this or i just want to propagate propagate that event up the tree and not worry about having to declare an on click and doing that um let me know but for now i think this should work so let's go back and try to expand and click on song and and this cannot read property emit of undefined and that is because we don't need to use this here let me just go ahead and remove that and see if we can actually get this to work there we go so sorry about that you got a little debugging session didn't mean to um take that long but as a recap what was wrong was we are recursively creating these tree browsers so when we click on song it's going to propagate up to tree browser so we need to make sure we're listening to that on click event and just simply propagate it up until we finally hit the parents on click callback which is going to be this so again we'd add this because like let's say you want to change some other view depending on what the person clicked and the tree browser component shouldn't really be responsible for knowing how to interact with that or i mean a different way is you could probably just pass in a callback function here and call it when we click on a node but i think this way is a little bit more cleaner to actually emit an event and then do something when it happens all right so now that we've made this progress let's just go ahead and add a i went ahead and just generated a json object which has more realistic data so inside our source folder i'm going to add a root.json file and i'm just going to go ahead and copy some json that i already created by traversing my file system basically i just took like one of my projects and it traversed the node modules folder and all this other stuff so if i save this we should have a better example piece of data to play around with so going back to app.view we could simply import that some say import root from dot slash root.json and that's going to import that json object and then instead of using it here or instead of defining this here i could just simply delete what we got and save that so now when we refresh the page notice that we have a much much larger file system example with a lot more files so now i think most the functionality is basically done we could probably just spend a little bit more time changing up the styles and centering this and stuff to make it look like i did before so if i go back to app.view let's just add a title here i'll call this h1 tree browser or view tree browser i'll go ahead and save that okay so let's see if we can maybe style this a little bit more so i'm gonna do body background color i'm just gonna do a little bit of a gray and then i'm gonna add color as white for now should be setting this to white let me refresh uh i think it's oh that's why okay now we actually have a little bit nicer looking um sample application so as a little bonus um what i'm gonna do is i want to import a function which is going to take in a string and give us back a color hash basically i can set different string values depending on our different color values depending on what the extension is the javascript files may be red json objects may be like blue or something so in order to do that let's go ahead and go back to our terminal here i'll do an npm install and save there's a package called color hash which kind of gives us the opportunity to do something like that and while that's installing let's go back to tree browser and let's simply import that here so i can say import star as color hash from color hash and then once we've imported that we can say cons color hash is equal to new color hash and kind of ignore what's going on over here we're installing a node package so it's going to keep on refreshing until it's done but what we want to do is basically figure out the extension of the name if we're at a node that has like you know no children and what we want to do is change the style dynamically based on that hash so up here where we're rendering out the name here what i can do is simply wrap that in a span and i'm going to say bind that to style and it's going to call a it style for the node dot name actually i'll just do dot node and then down here we of course need to define a method right so over here i'm going to say get style i'm going to take a node and what we need to do is we need to first take the node if it has children so if no dot children then we need to return some style so i'm going to say return an object that has color of some hexadecimal so i'll just say like red for now and let's see what this does if we were to save this i'm going to try reinstalling my node modules i'm not sure what happened but uh something might have broken when i was doing my setup for this video so let's just reinstall everything and see what happens alright so now that that is done reinstalling let's try to set up our rerun our serve command and let's refresh this page cool so if you notice here if we have children it's going to be red so pretty much we can customize what we want our folder colors to be also one thing i'll notice is that the icon is really really close to the name so over here i'm going to just add a margin right of 10 pixels to these icons i don't know if i've actually added a style called type so over here i'm going to say oh class of type yep and add a class of type to this one too all right so that looks a little bit cleaner but back to what we're trying to do with that new package we imported is basically if we have children we want to return some hardcoded red for folders and else what we could do is we could simply call this method so i'm going to say return color of color hash dot x and then i'm going to get the extension of this file which i can do node node.name.split and then split it by the dot and just go ahead and give me the right side and this is probably not the safest way to do this um but it works for right now for this little simple tutorial that i'm giving let's go ahead and save that and see if this is working as expected so now you'll notice that all my different files depending on the extension will have a different type of color and it actually looks like it works for files that don't even have an extension so cool that's working pretty much exactly how we thought it was going to work and of course to kind of clean this up i feel like i could dry this up a little bit so here i'm just going to say let style is equal to red instead i'll say let color and then here what i'll simply do i'll say if node.children or if they don't have any children i'm going to say color is equal to that color hash logic and then down here i could just simply return color like so let's see if this works i'll do a hard refresh just in case awesome so that is working as we thought it would so there you have it there's how you build a tree browser using vue.js and really it wasn't too difficult feel free to um follow me on twitter or definitely subscribe to this channel if you thought this was a good tutorial and again i'm always open to feedbacks in the comments of how i can make my videos better and i'm also open to suggestions as to what other type of little modules or components i should try to build and record and demo for you all