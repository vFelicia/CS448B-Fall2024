Palm 2 is a powerful large language model from Google in this course you'll learn how to effectively use Palm 2 and its API to enhance your productivity and develop AI powered applications Ana Kubo teaches this course she is one of our most popular instructors so let's start learning hi everyone and welcome to this full course on Google's large language model Palm 2 my name is Anna Kuba and I'm a software developer as well as course creator here on free Camp as well on my own channel if you are new to the world of large language models this course is the perfect video for you we will be starting completely from scratch introducing you to this wonderful world that power some of the most powerful AI tools today such as Google's B for example by the end of this course you'll be able to confidently use the Palm 2 API as well as hopefully gain some knowledge about the world of AI in general in fact here's a whole list of the things that we we will be covering in the next hour or so so we will first look at why use Palm 2 followed by what is AI and large language models in general we will then get set up look at tokenization AI hallucinations authentication the models that come with p 2 and finally we're going to build our own AI chatboard so that's at the end I hope you're excited what are we waiting for let's do it first off why use pal 2 googus palom 2 is an advanced large l anguage model or llm designed to be more effective at a range of task than its predecessor P before we get to demystifying some of the words in that sentence such as llm let's actually understand why we would want to use something like Palm to in the first place if you are a developer here's some reasons you might think about using Palm 2 first up let's look at its multifunctionality Palm 2 is capable of various tasks including code generation this means you can use it for helping you code debug your code or explain code so imagine you have this component here written in JavaScript and suddenly the team decides they want to start using typescript you can literally ask Google's AI tool Bard built using Palm 2 to convert the code for you into typescript another thing you can ask it to do is literally write the code for you from scratch Palm 2 in comparison to its predecessor Palm has been pretrained on a broader range of data sources meaning it has better multilingual capabil ities and can handle diverse programming languages from popular ones like python to more specialized ones like foran however please do keep in mind that taking this code with a pinch assault is advised as some hallucinations or in other words guess workor could have been done and just like we did all of that with code you can also do various tasks with mathematical reasoning natural language generation question answering and translation heck with p 2 he even has been trained on data to make it better understanding nuances in human language such as idioms and riddles pretty sure it's good at sarcasm too Palm 2 just like Palm it predecessor also emphasizes safety in terms of responsible AI development Google has taken measures to ensure that Palm to is free from biases as much as possible and reduces harmful outputs it's done this by the removal of personally identifiable information filtering of duplicate data and Performing extensive evaluation s to measure potential harms and biases and finally Palm 2 also offers API access for developers developers can leverage the Palm 2's capabilities via the Palm API which we'll be using today making it easier to build applications requiring Advanced natural language processing capabilities this can be beneficial for Content generation chatbots summarization classification and more this is the API we'll be using to build out our project at the end in summary as a developer you can see pal 2 as a tool that offers a wide array of capabilities ranging from natural language processing to coding assistance I'm excited to use it via the API soon but first what is AI artificial intelligence is a simulation of human intelligence processes by machines I say simulation as artificial intelligence is not sentient at at least not yet anyways meaning it cannot think for itself as much as it may seem it does often and this is certainly the case with tools such as this one for example when we say AI we are simply referring to a term called machine learning machine learning works by using large amounts of training data that is then analyzed for correlations and patterns these patterns are then used to predict outcomes based on the training data provided so for example if I was to feed this training data basically summarizing what each paragraph is about so for example here we are feeding in data saying that a paragraph looks like this with this type of title should be categorized as international finance the second paragraph should be put in the category of earning reports and so on and with some code we should be able to train our AI model to correctly guess what future paragraphs are about and that's it of course that is a super basic example and we would need way more data than these five paragraphs right here but you get the idea if you want to build your own AI model and understand the con concepts of machine learning better as a total beginner please do check out my video on it on my channel code with ANUK kuo for now however let's not make our own model but use an existing model or large language model Palm 2 starting off with getting our API key in order to communicate with it first just like most apis the Palm 2 API uses API keys for authentication in this section I'm going to show you how to get your own API key when it comes to communicating with the API from the applications that we will be building remember make sure not to share or upload your API key anywhere public if you do someone might take it and use it for their own projects and use up all of your free tokens or rack up a huge credit card bill if you have a credit card attached this also includes exposing in any client side code by this I mean building an app without a backend and deploying onto the internet the code in this case will be visible simply by inspecting it like so someone will then be able to go and get it and take it from here for their own use to use this key safely request must be rooted through your own backend server where your API key can be securely loaded from an environment variable or Key Management Service okay so in order to get your API key make sure to visit this URL and then simply explore the API and then get your API key this is super simple all I'm going to do is click get my API key and agree to the terms of service and then simply create API key in new project so that's all you're going to do and here it is you can copy it and make sure to keep it somewhere safe as mentioned okay and then you can delete it if you don't want it anymore and create a new one as well that is totally up to you just make sure you have your API key ready for creating our projects but first let's have a look at the models available in Palm 2 next in Palm 2 we have many generative models we can use I'm going to take you through four of the more popular ones using the rest API please note there are many ways to interact with palm 2 including an SDK with no. JS as well as all these ways you can see here if you would like to play around with them please do so for the sake of making this tutorial as accessible to as many developers as possible I will stick to using the the rest API with a c command however so let's do it let's start with the generate text model first the generate text model generates a response from the model given an input message this means we can use it to ask pomp to a question to which you will return a response for example let's have a look at this step by step okay so we're going to write a call command we're going to go to a specific URL so let's get up our quote and I'm just going to paste it so it's htps generative language. googleapis.com we're going to use V1 beta 2 uh we're going to get the models and the models we're going to get it's going to be for text so we're going to use text bison one and then we're going to use the generate text model and we're going to put in our API key so just make sure to put in your API key we did get this in the last section so if you ski that please have a a look at how to get your own API key this is mine and this will be disabled soon okay and end quote next just make a space and now we're going to write our header and our header is going to say application Json for the content type once again this is a string so put it in these quote marks great make a space and next we're going to Define this as a post so I'm just going to put X post cuz it's a post request and as the data well I'm going to have an object I'm just going to paste it like so here is our object and as the prompt we have another object and it just going to be some text and this is essentially the text or the string we want to send over to the Palm to API in order to get a response so we wanted to write a story about a magic backpack okay and just hit enter and let it do its thing and and here we go so here we have it we received an object back and the output okay so this is an array and the output is a Story Once Upon a Time there's a young boy named Billy who love to go on adventures so this should be a story about a backpack we have some other stuff here we have safety rating as well we have a category and probability so I'm going to talk to you a little bit more about what else we going to send over with our request next with the generative text model as we saw we sent over a prompt this is an object as we saw so this right here this is an object that has text as an attribute and the text or string as a value okay so this is required however we have a bunch more things that we could to passed through with this which we did not these are safety settings stop sequences temperature and this controls the randomness of the output with zero being essentially less creative and values closer to one being more creative we also have a candidate count Max output tokens top p and top X I will not be using these in the tutorial okay this is a bit more advanced I'm just showing you a basic way in order to generate text however if you are interested in this please do pause here and make a note of these and have a read through them in your own time for now let's continue next up we have the generate message model this is us to have more of a conversation in which we feed in not just a string so just one question but a bunch of previous conversations that we've had with the llm okay so this just means that it can build on the previous conversation and build on the previous stuff that you told it I'm going to show you how to do this now so first off we're just going to write curl and then we're going to paste in the URL so once again let's make this a string and this time I'm just going to show you where this goes this goes to the generative language. googleapis.com V1 beta2 models chat this time bison instead of text and we're going to use the generate message model and we're just going to put in our API key so just like we did before okay great once again we need to put in the header this is going to be once again content type application Json so just like so as a string and then I'm going to Define this as a post request with the data and the data once again this is going to be an object it's going to have the property of prompt so just like so however this time it's going to take multiple messages so I've made an array in which we can put objects that will represent one one message so this one message essentially has the content of high that's going to be our first message and if I just go ahead and hit enter we get the response so this is what we sent over these are all our messages there's just one in there for now it says hi that's what we sent over and this is the response okay so the responses are going to be saved under candidates here's an array of them and the response essentially is high how can I help you today simple just like with a generate text model we can also have different parameters on this occasion we can have a temperature so again setting zero to be less random and one to be essentially more random or more creative we can also have a candid account and this can return multiple responses you can set the candid account to B1 for example and actually as a default it is one or you can choose a value between 1 and8 we also have top p and top K which we will not be covering in this tutorial however if you want to have a look at them please pause here and read through this documentation now great let's continue so let's go ahead and add some more messages in here right so I'm going to just get that back up again and we're going to send this over to this year URL to generate message okay but we're going to pass through a bunch more messages so here is our first message right so it's the first object that has content High I'm just going to essentially put a comma right after it and paste it and this time as the content I'm going to put the string of remember my name is Anna and ask me a question so I'm sending over two messages now hi and remember my name is Anna and ask me a question and let's see what we get back and great so here are the messages we sent over that's the full array that's the first message of hi and this is the second one of remember my name is Anna and ask me a question and then the response is hi Anna it's nice to meet you how can I help today great now let's have a look at how many tokens this cost us next so as we are making a request it is us ful to know that this is costing us tokens each word is tokenized okay and it can be hard to figure out exactly how many tokens are being used we can essentially use a HTTP request to find out exactly how many tokens are use for a message as well as text however we're just going to look at the messages for now so I'm going to use the count message tokens model so let's go ahead and do it I'm just going to get get up my terminal once more and in fact I'm just going to bring up the last thing that we did so here we have curl and this is generate message as well as our API key and then as the header we have content ey application Jason this is a post request and as the data again we have the prompt with messages the array of two messages okay and all I'm going to do is just switch out the URL so all I'm going to do is change this right here generate message token to count message token just like so and it should calculate exactly how many tokens these messages cost me okay so just say enter and the token count is 27 great okay so we're now really done I just want to touch on one topic and that is touch on the topic of creating text embeddings now this is a super interesting and advanced topic and I really recommend you watch my video on Vector embeddings in order to fully understand this because I cannot fit this it's outside of the scope of this tutorial but essentially the Palm to API will also allow us to create text embeddings or in other words Vector representations of words for us to be able to search large databases for similar words okay so I'm quickly going to show you how to do this we're going to use the curl command and then we're going to use the embedding text model along with our API key so once again this is the URL we're going to embedding Gecko and then we're going to use the embed text model and we're going to put in our API key so this one is mine please use your own finish off that string then we're going to put the header as content type application Jason just like we have been doing and once again this is a post request and as the data this time I'm simply going to put an object and it's going to have the text that we want to create into a text embedding so this time is just the string of say something nice and I'm going to hit enter and taada it's an array so this array of numbers essentially repres presents the text of say something nice which means that we can now use this array in order to search for similar texts in a large language model so this is something that is super interesting please go ahead and watch this video after this if you have time otherwise let's continue with building out our Palm to chatbot so we've learned about the models necessary to do this we've also leared how to get our API key so really we're ready to go okay so let's create a project I'm going to start off using my code editor of choice which is webstorm I'm going to save it in a direct called webstorm projects and in webstorm I can actually choose to essentially get the command npx create react app in order to spin up an react application so again this is going to be stored on my computer and webstorm project I'm going to go ahead and call this palom to chatbot just like so okay and I'm going to click create so there we go that is now doing its thing it's Sally spinning up all the files we need in this directory so here's one file and more will get added for those of you who aren't using webstorm you can also choose a directory I'm going to once again go into webstor projects and then run the command MPX create react app followed by whatever you would want to call the project so for example like this and hit enter and then this directory with all the files will be created in the directory webstorm projects on your computer but I'm not going to do it this way as I'm doing it this way and we're just going to wait for that to do its thing and great so here we have the directory with all the files as you can see here this is looking wonderful I'm just going to minimize that so first off I'm just going to clean this up a little bit uh we're not going to be using this app CSS file as it's a small project so I'm just going to delete this file there we go delete anyway we're not going to be writing any tests so that can go as well no test for this project of course you can add yours if you want at the end and I'm going to delete these three too so the logo and anything to do with testing or reporting web vitals will go wonderful so now if we look in the index JS again I'm just going to delete everything we don't need so we can get rid of that as well as this import I'm also going to get rid of the semicolons as I don't want to use them in this project so that is what the index.js file will look like at the moment then we've got the index CSS and I just want to start fresh so I've deleted all of that and then we have the appjs file so once again I'm just going to delete the logo as we're not importing that anymore we're not importing the app CSS file I'm going to change this to a functional expression as that is my preference so just like so just going to minimize that and again we're just going to stop fresh so I'm going to delete the content of all of this and just return a single a div and delete the semicolons okay so you should have the appjs file that looks like this the index CSS file which is empty and the index JS file which looks like this great and you will see that's all in The Source directory now as this is going to need a backend I am going to create a backend for this project I'm going to do it on the same level as the read me and the package Json so just go ahead and add a new file this is going to be a Javascript file so let's go ahead and make that I'm going to call it index JS or you can call it server JS just to be more clear it is up to you great so we'll go to this in a bit I just want to build out the UI of the but first this shouldn't be too complicated like I said it's super basic so let's do it first off I'm going to create a wrapping div and I'm going to give this the class name of chatbot so we can pick it out in our CSS next I'm going to actually have another div this is going to well we can make it a I'm just going to give it the class name of chat header notice I'm not putting it in a header element this is because I don't want to it's not a technical header to the document now in here what I'm going to do is also create another nested div and this is just going to contain some information so let's give this the class name of info container so we can style it up and I'm going to include the H3 element with chat with so that's a heading as well as a bigger title so that's why I'm using H2 and it's just going to say the Palm to B great so there we go under here so just under the info container I'm actually going to put an SVG but we'll come back to that and now that is it so that is our whole chat header under the chat header I'm going to make another div and this is actually going to be the feed so the feed of all the messages so let's go ahead and give this the class name I'm going to just do feed like so great and once in here I'm going to map messages I'm actually going to map onto two divs because we're going to have one div for the question bubble so let's give this the class name of question as this is going to be a question and this is also going to have the class name of bubble because I want both of these to essentially look like a bubble but be differentiated by the color so this is going to be for the question that we ask our chat Boot and this is going to be for the response Okay cool so that is our feed and under our feed we're going to have just a I think we should probably just have a text area Okay so this is essentially where we're going to ask the chatbot that question we're going to write it in and this is a self closing element uh and it's going to have a value which is going to be some text we're going to leave that blank for now and then and an onchange event because we want to essentially save the question to the state of this component so let's just comment that out for now and continue and finally I'm just going to have a button and this button is also going to have an onclick which is going to generate the response okay so essentially this is where all the Magic's going to happen we're going to write in some into our chatbot we're going to click on this button it's going to send it over to our server and essentially come back with the answer to our question from the Palm to API great on the button I'm also just going to use this text icon symbol okay it's this little arrow right here if you can't see it looks like that just make that a bit smaller and that's essentially a whole app at the moment if you want to find this text icon just go ahead and visit this URL right here in order to get get the same one and just copy it like so wonderful okay so now I think it's time to spin up our app so I'm just going to go ahead and spin this up by clicking this button right here and that should spin up our application so great I'm just going to comma this out for now in order to get this to work and wonderful there we go that's what we should see and I'm just going to go ahead and inspect this page in order to get up our console here so we can debug now for those of you not using webstorm I'm just going to stop this from running you can just go ahead and have a look at the package Json in order to spin this up we're just going to use this Command right here start this just means I'm just going to shut this down and get up our terminal that in here so just make sure that you're in the project you can do npm Run start and that will do the same thing it will essentially run the app and spin it up on Local Host 3000 you can do that there or you can do that on here too right so you can do CD and then whatever you saw the project CD pal to chatbot npm Run start and that will spin up the app so those three ways are all viable it's up to you whichever way you want to do it great so there we go we've spun up our app let's just get to styling up a little bit first I'm just going to minimize that for now so let's get up our index CSS files first off I'm just going to grab the whole body the whole body of the app and I'm going to start fresh by overriding the margin and padding to start off with zero and then I'm just going to change the background color of this app so background color and I pricked a color it's a kind of very light grayish 2 27 227 227 so that's what it should be and then I'm just going to make sure that the chatbot is aligned to a certain part of the browser so perhaps let's go ahead and actually start that chatbot first so let's grab the chatbot I'm literally looking for the element with the class name dot means class name of chatbot and I'm just going to give it a height of 500 pixels a width of 400 pixels let's give it a background color as well background color and I'm just going to go with white so that is the RGB for white great while we are here I'm just going to also uh give it a border radius and what I'm going to do is make sure that the top left hand corner is rounded by 20 pixels top right hand corner is also but the two bottom ones are zero now I am going to give it a margin as well okay just to space it out a little bit you will see why so I'm going to go 20 pixels at the top 20 pixels on the right zero at the bottom and 20 pixels on the left and finally I'm also just going to give it a box Shadow okay to kind of make it pop up from the background so again I'm using rgba cuz this time I want to add a transparent uh I guess argument into here so I'm going to give it 0.16 for transparency and the color black and now I'm going to do zero pixels xaxis 10 pixels ya AIS 36 pixels blur and zero spread so there we go and then we're going to do two box Shadows actually so rgba again this time it's going to be black but 0.06 is what I'm going to do for opacity and then essentially just have one pixel uh spread great so now if we look in here it looks kind of like this but we want to position this right I want to position it so it kind of moves with the browser and it's always here and for that I'm going to use display and then I'm going to initialize Flex box so flex and I'm going to justify content end okay so if we save that it's already here and I want to go to the bottom as as well you will see it's not exactly all the way here because we gave it a margin right we gave it a margin on all the three sides apart from the bottom so now let's move it to the bottom so and for this I actually need to assign a height to the body otherwise this will not work so I'm going 100% of the viewport height and I'm going to use align items end as well so now that will be here and no matter how much I move the brows and how big I make it it will always be there and amazing this is coming out well the other thing I want to do is to the whole body just add a font family so I'm going to actually use Ariel and then sand serif as a backup while we're here though I'm also going to add the H2 and H3 element in here for styling and I'm just going to apply a margin of five pixels to both okay just to space those out but also overwrite any preexisting margin great let's move on the next thing I want to actually grab is the info container so essentially stuff that holds this so let's go ahead and do that I'm going to grab the info container just like so give it a height of 60 pixels and a background of um I'm actually going to use a linear gradient for this so let's get the linear gradient method and I'm just going to pass through RGB so color into here I'm going to use 22 1 9741 and then RGB 6 12084 okay so at the moment it will look like this uh and then we're actually going to add an SVG here to the bottom but first off we need to essentially hide any overflow right because at the moment that box is overflowing what we set before in terms of the actual chat bot so I'm actually going to also on the chatbot do overflow hidden and that just means that any overflow is hidden wonderful uh let's also added padding to this so all the letters aren't so squashed up to the sides of the info container and I'm going to change the color of the text to be an off white so not exactly white and that is the color I'm going to choose so already is looking much better cool before we move on to the SVG or anything like that I'm just going to grab the text area as well so we've commented out the text area at the moment here it is so maybe let's in fact maybe let's put these back in but just get rid of these as that is why we are getting errors so here's our text area I'm just going to style it up so let's grab it this is super basic styling right this is a basic chat bot that you can take and you know make your own style it up and all that so position absolute I'm going to give it and it's going to be positioned to the chatbot which means this I'm going to need to give a position of relative to because we don't really want this to move but we do want this to move we want to be absolute based on where it is in the chatbot and this just means I can use bottom zero to place at the bottom zero of the chatbot element or its parent element and left zero so if we look in here it's going to be here bottom zero left zero right so that's where it would be and let's style it up a little bit further now I'm going to get rid of that border so I'm going to do border none and make sure the the width like I said is 100% width of the par which is the chatbot and the Box sizing I'm also going to give it border a box so there's no funky Behavior happening it's like inside the Box rather than over spilling and now I'm just going to give it some padic as well so 25 pixels on the top 70 pixels on the right because we're going to put a button there and 25 pixels on all the other sides so that's the pattering inside the text area one last thing I'm going to do is just add a border just to the top though I'm going to make it one pixel solid and a kind of off whitish color too so there we go that's looking good now I don't want the text area to be in Focus so to get rid of that this is easy you just grab the text area once more and when it's in Focus I just want the outline to be none so that will get rid of that if you are curious great now let's actually grab the Button as we're going to have to make it essentially go here so let's do it let's give it a height I'm going to give it a height of 40 pixels as well as a width of 40 pixels as I want it to be a circle which means that border radius uh I'm going to give it 50% uh the background color again let's pick this out I'm going to make it 62084 yes I did pick this out already it's a green and then the inside so the text inside which is the arrow is going to be 207 207 207 so kind of in line with the offwhite we saw before again I need to position it so I'm going to go a position of absolute um and this time from the bottom of the chat B I'm going to place it 21 pixels and to the right I'm going to make it 21 pixels so that it should appear essentially here cool now let's also start the bubbles so we're going to grab anything there should be two in there with a class of bubble and each bubble of text that appears is going to be in a bubble that is width 250 pixels let's Pat it out 20 pixels I'm going to get a margin from the top and bottom 10 pixels to space it out from any other Bubbles and 25 pixels from the left and right let's also round it off a little bit uh by 10 pixels so it's not so harsh it's not a rectangle and also give it a box shadow Shadow so this sticks out from the background I'm going to use rgba make it black and then for opacity I'm going to put 0.24 and then zero on the x axis three pixels on the Y AIS and 8 pixels blur in fact we don't really need that zero here either cuz the spread if you don't put anything is automatically zero great and then the color of the text in here it's not going to be black it's going to be an off black I don't want to be too harsh so that is the color that I'm going to choose so at the moment our two bubbles look like this but we want to give both of them a different color based on if it's a question or a response so let's pick out the question and the background color for this I'm actually going to make it 24 24 244 uh and then the response I'm going to maybe keep it white but what I will do is override the margin left and just make it 85 pixels okay so that it's going to look like that question response question response I mean we're pretty much done we just have the SV Gene last so I left this last so that you can just stick it in essentially what I did is went to SVG generator so this one right here by high and then I just made a wave so that's all I did essentially I'm going to start designing for free I've got the wave so that's essentially what it looks like and then I simply just kind of played around with it really so just play around with it yourself you can make it more or less of a wave it is up to you and then I just downloaded it so again do the same please obviously change the colors to be more in line with the colors that we have here so in other words you want the green here and then for it to go to White right so please do the same I've already done this and exported the SVG so that's what mine looks like you will see the fill here as well if you are struggling please feel free to take my code of course I'm not going to code this out because that path is just ridiculous so please do take this from the code that I've shared in the video description below or have a go at you know making this yourself here just like I told you so just make sure that the fill here is the same color green so let's have a look at what green this is is this one which is essentially this color code and the background I mean you can make it white or you can just hide it completely okay and then just download the SVG so wonderful of course you might need to flip this around so just make sure to do it by changing the direction as well okay let's move on I think we're now ready to actually get some of those messages coming through so let's do it so now on the server I'm just going to define a few things the first one is the port it's going to be Port 8,000 just going to make this bigger for you we're going to have con Express require Express cuz that's a package we're going to need for roting and then once we have this Okay so we've we're going to import the package express and we're going to save as the con Express and we're going to get Express and release all of its wonderfulness so that's us releasing it and save it under the const app okay so we can use it with all of its methods later on we're also going to need CES so that we can get rid of any pesky messages blocking us you know you see blocked by caes that will help us get around around that and we're also going to be working with variables secret variables and in order to do that we're going to also require another package is the EnV package uh and that is the code in order to be able to use it in this project okay also as I believe we are going to be using Json I'm just going to for safe measure use express Json here so we can pass it from the front end to the back end and then I'm just going to use cause as well so we can override and then I'm just going to use cause as well like I said so that essentially we can bypass when we are blocked by C great now let's go ahead and import those so I'm going do npmi and import Express C andv so just hit that right there and then in your package Json file you should see those popping up so there they are along with their versions so if you're watching this in the future and this doesn't work it could be the version you're using just revert back to this one right here so just changed it obviously I'm not going to and then do npmi again to reinstall those packages with those versions cool let's move on so now that we have those let's actually start up our back end first I'm just going to listen out to the port just to make sure that everything is working so app Listen port and then we're just going to do here console log listening on Port and then the port number so let's do it I need to get my package Json file up again and I'm going to write a script so I'm going to do start backend and then we're just going to do noden one we're going to listen out continuously so that's another package we need to install npmi noden one and this will continuously listen out for changes make sure to save this first NPA no Dem one maybe just cut that out first as it's causing errors and store that make sure that no Deon is there to listen out for constant changes and then just put that back in so no Deon I'm going to listen out to the file server JS so there we go okay making sure that is eight string while we're here I'm just going to change this script to start front end so it's more obvious and let's continue so now that we've done that let's start up our back end and this should start up on uh Port 8000 so I'm going do npm Run start backend this time I'm not going to restart the front end as it's already running so there we go so now if we go to I'm going to just shut these down Local Host 8000 there we go and it should say listening on P 8,000 and it is so everything is looking good our front end is running and our back end is running so now we're going to have to use a few things here uh we're going to have the language model API key that we're going to get from the pal to portal so con language model API key and yes I am going to store this in a EnV file and the other thing we're going to need is the URL that we're going to essentially quot so first off to access anything in a EnV file let's go ahead and make it that EnV file. file. EnV we of course as I mentioned need this required. EnV in order to use process. EnV and then look in the EnV file for something that that corresponds so if I literally maybe just copy this and Define it in here this is where we're going to save it okay great so process. env. language model API key we're going to look in here for that and grab whatever we put here in order to populate this and save it as the con language model API key so that's one thing we're going to have to do we're also going to get the language model URL and this again we're going to get from the documentation so let's do it let's go to the paltu page and let's get that API key okay so there is my API key please do generate your own I'm going to disable this it won't work make sure to get your own and keep it safe great now for the language model URL so we're going to be using the model URL here I however as of recent Palm 2 has also got some methods that you can get from certain packages if you install them so just keep that in mind I'm just going to go super basic like I said this is a very basic tutorial and use the model URL so the model URL for this is https and then we're going to go with generative language Google apis Thank You tab 9 it's completed it for us I'm checking if it's right goi.com V1 it's actually V1 beta 1 and then maybe let's just delete this as that is not correct models and we're going to get the chat by son 01 model generate message model and then we're just going to get the key which which is our API key and essentially pass it through so language model API key that is correct so that is the whole thing there we go I'm just making sure that it's correct again so models we're using the generate message model and there we go make sure that's in back ticks otherwise this code will not be picked up and we're telling our code editor that this is Code by since using the dollar sign and passing it through Kylie braces like so great so we've got our language model URL let's move on now we can write a request so what we're going to do is essentially send some text from the front end to our back end and then send it over to the pal to API so we can get a response right so we're going to ask a question and get a response so let's write our root we're going to use the get method for this and I'm going to say that if we go to Local Host 8,000 SL prompt slash and we're going to get the text from the URL so that is how you do it just zoomed in so you can see it a little bit better this is going to be an async method where we get the request and the response and then we're going to essentially get that text from you using request param text so we can Define it here yeah you can do it like this or you can do it like so it is up to to you so there's our text now let's define our payload pay load equals and this payload is actually taken from the documentation we're going to have to get the prompt and then Define the messages that are going through so we're going to pass through a whole array of them like I said each time we're just going to be sending through one message okay this is just one message that we're sending over and we're getting a response so let's send over that one message essentially an object and that object is going to have content and the content is literally going to be this text okay so that's what we're sending over to the API we can also set a temperature for this okay so here's our prompt object in fact maybe just to make it a little bit more readable I'm just going to make it all on one line like so so there's our prompt next we pass through the temperature I'm going to set it as 0.1 and the candidate count which is going to be a one as well now that we have that we can get the response so let's define the response this is going to use fetch which is an async method so we use use a wait and then we're going to pass through the URL that we're going to visit along with headers so let's set some headers we're going to do content type application Json and then as the body we're going to get the payload and just pass it through Json string ofi and this is going to be a post method so there we go so again what we're doing is we're sending this over so all of this with the text from the URL to pom 2 and essentially to this end point essentially right so it's going to this end point along with all of this stuff and then let's await that response so let's await the response let's get it Json but uhoh this is an async method so we use the await keyword and let's save it under data and once we have that data just going to send it back okay okay great so at the moment this will actually work uh I won't have to do much let's just console log this data at the moment too I can simply go SL prompt and then hello so this text of hello is the text po over into the URL right and there we go so once again the text was hello that's what we passed through to the back end and Center over to the Palm 2 API as you will see here so there's are messages there is just one message and this is the response that we are getting from Palm 2 hello how can I help you today so now let's display that here right so we got the question and the answer we've got the data let's display it we're also going to have to pass through this word from the front end so here rather than just typing it out like so so this should be relative L painless let's do it so let's go back to the app I'm going to have to import state so import use state from react we're not going to need use effect and next we're just going to save the state of the text so const text set text and new state is going to be an empty string to start off with and then we're also going to save the messages that come back so we're going to call it messages just to keep kind of in line with the messaging so far that has been used so messes set messages and this is going to be an empty array to start off with just like so so in order to get the response so cons get response this is going to be async method and when do we want to get the response well as soon as we click on this button so on click of this we're going to get the response and we're going to get the response by essentially using the value in the text area so here again I'm just going to make sure that the value is the text so currently that will be an empty string and then on change of anything in this text area I'm going to set the text so we're going to get the event and set text so we're essentially changing the state of text to be e Target value okay just in case you do not believe me that we are changing this I'm just going to console log it out console log text so you can see it so in the console log here now if I right hello that is text Cu we're conso logging out the con text and it's constantly changing so now that we have the text let's send it over to the back end so that we can get the response so I'm going to define the response I'm going to use await Fetch and we're going to pass through literally the back end so Local Host 8,000 make sure that says 8,000 use back ticks here as we're going to essentially write the end point which is this okay so you can just paste it like so I'm going to replace this with code so once again we get the dollar sign the curly braces and we're just going to use text so that is now the equivalent of us essentially writing this out essentially maybe let's get rid of that and what do we do with the response well we're going to grab the response get it Json like so let's await this as well and save this as data and then once we have the data we're actually going to set the messages right here so we're going to set messages and then we're going to essentially open up an array and whatever messages already exist okay so at the moment Nono we're going going to get those and then append a new object so we're going to make a new object just going to put it down here so maybe it's a little bit more readable for you and our objects are going to look like this well we're just going to have the author and we're going to get that data that comes back to us so we know what this looks like we saw it before go into the messages we're going to go into the first as it's always really going to be one message and we're going to get it content okay because we saw it before we had the messages content which is the messages that we sent over and then we also have data candidates content and that was what the API sent back to us and we'll save this under bot so we've constructed this object okay we've just made it up because this is what we're going to use in order to map onto our divs okay cool so let's try this out I'm also going to console log messages here so we can see what's going on and I'm also actually going to console log the data here just so again it's just really obvious what is going on so data messages and let's try this out so once again let's just stop Fresh So messages and States currently nothing however if I write hello okay still nothing this is our text and I send this over suddenly this is the data that comes back right like I said this is what it looks like we've got candidates and we've got an array at the moment it just has one item in there and it's essentially the response from the API hello hi can I help you and then we also have messages in here and this is the message that we sent over author that's us and the content hello okay cool and then once we get that dat to back I'm essentially using it to create our own object so this is the object that we created I've just got author and Bot and we've just taken the content from both of these and stuck it in our own object so we just stuck in a message in here and I'm going to map the content of this object onto these two so this is easy I'm just going to go down here let's comma this out for now I'm going to grab the messages and if they exist I'm going to map each m message we're going to have an index as well we're going to map it fact we don't need that on to all of this so just like so let's uncommon this out just like that so I'm just going to delete this and wrap this in something so let's make a new div this is actually going to hold our key as well so there we go just C cut that paste it in here and then for this I'm going to have a key and is just going to be the index great so now onto here as the text I'm going to go into the message and get the author so once again this is just from the object that we made we're going into the object getting author and then we need to do the same for bot so perhaps I'll just copy this and then write bot so if we save that we will be able to see it and if I write something else let's write how are you and send that over you will see now there are two messages in here however if you look in data okay it's still just the one message that comes back because we're not sending over all of that data to the API okay we're just sending over the text so essentially this text right here just keep that in mind as each question will be unrelated to another okay if you want to of course expand on this you're more than welcome to I'm just pointing that out that you know when you're having conversation it won't build on its previous knowledge it will treat each question as an individual question unrelated to the previous great so we're seeing all of that one last thing however because if you look in the feed uh we need to be able to scroll so let's go back to our CSS s so maybe let's grab the whole feed just like that I'm going to do position absolute bottom 82 pixels to kind of space it up on the bottom left positioning zero width I want it to be 100% of the parent and height I'm going to constrain it to be 250 pixels so we can scroll through it so I'm going to do overflow on the Y AIS scroll okay okay so now we should be able to scroll and this is looking great another thing we can do is if we are you know seeing some dodgy Behavior here maybe we need to also position the X AIS so it's always in front I'm just going to grab the header so the chat header right here and do position relative Z index one okay and that is now much better great so hopefully that makes sense I hope you found this useful and I hope that you can share your chat Bots with me please take them build them maybe use different models start them up I'd love to see what you have made please tag me on socials on Twitter and yeah I hope to see you again on another tutorial soon yeah