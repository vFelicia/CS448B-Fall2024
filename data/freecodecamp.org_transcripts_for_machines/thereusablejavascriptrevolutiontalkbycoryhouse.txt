the future is here it's just not evenly distributed look around the world and we know this to be true you're all here in this room chances are the vast majority of you got in a regular gasolinepowered vehicle and drove here to the venue today however we know that in the future many of us will be driving electric vehicles clean electric vehicles those electric vehicles may be using power that came from dirty coal so how clean is that electric vehicle well that's also becoming a salt problem in California today you could use a company like Solar City to go install solar panels on your roof that look like legitimate roofing this isn't an eyesore it's just your entire roof is a solar panel pretty amazing future that's already here if you're in California today completely off the grid we know that today if you go to the grocery store the vast majority of us have this as our reality we wait in line to check out however if you're lucky enough to be in Seattle near the very first Amazon go store there is no such thing as a line there's no such thing as a checkout you grab what you need and you walk out the door and sensors charge you accordingly the future is already here it's just not evenly distributed and this principle of course applies to JavaScript as well the future of JavaScript is here it's not evenly distributed and I'm going to ask you a few questions during this session that's going to make that clear with your fellow audience members so let's get started what I'm going to talk about is the last decade in JavaScript and three revolutions that began in the last decade and all three of these are still in progress now you might think this is a real talk through history but in fact what you're going to see is these three revolutions many of you have not embraced them yet despite the fact that they've been around for a while I find it pretty cool that today is exactly ten years since Jeff Atwood coined Atwoods law which says any application that can be written in JavaScript will be written in JavaScript now when outwards said this I thought it sounded pretty crazy despite being a guy that's really big into JavaScript this sounded nuts but today we live in a world where that really is a reality think about the web was the beginning of JavaScript we all know that that's where it started so yes I can write web applications using Jas but today I can write server side apps using node.js I can write native mobile apps using react native using native script using PhoneGap and I can even write desktop apps using things like electron it's crazy to me that my favorite editor today is vs code and that is written in HTML Javascript and CSS because it uses electron my favorite way to communicate and share gifts with my coworkers is slack that's again written there's some slack fans here there we go again that is written in plain old JavaScript using electron pretty amazing so at what's law has come to fruition JavaScript I like to say it's a lot like visa it's everywhere you want to be but it's interesting a lot of us are JavaScript developers not because we believe that javascript is the best language in the world we are in JavaScript because of where it is not what it is JavaScript continues to get better and I love seeing the fact that now every year right around June we get a new release of JavaScript with goodness but I'm certainly a JavaScript developer because I can write for any platform and that's pretty amazing so it's a really awesome future that we have ahead with our skill sets so anybody know what happened January 12 2010 this was the beginning of a key phase of the JavaScript revolution the reusable JavaScript revolution any guesses jQuery nope jQuery was not then it was actually earlier no it was drum roll drum roll drum roll NPM NPM was announced on 2010 that was the first release of NPM pretty big deal now at the time it didn't even make that big of a splash because he already had things like Bower that a lot of people we're using it was unclear whether who and when people would be using NPM but today NPM has swallowed the world as JavaScript's defacto package manager and this is a key piece of the reusable JavaScript revolution if you haven't embraced in PM yet then you're missing out on a lot of power now the thing is if you rewind just two years this was life as a developer this was how I was spending my time if ya read some of the script tags as part of fun but think about the pain that we went through in 2008 just 2008 wasn't that long ago I was dealing with all of this pain look at what would happen oh I want to go use someone else's work in JavaScript well what steps would I go through well I'd do something like this I would search the web I'd read the docs and go install this read the relevant install steps I download any relevant JavaScript and CSS I'd set up my script tags my style references and then I'd write some JavaScript that targets that HTML and I'd realize it wouldn't work I mean I'd wonder why didn't get a lot of help at that part then I'd realized that the Dom query that I wrote was wrong that was a common mistake that I'd make in this era and it still wouldn't work might fix it still wouldn't work I'd realize that the script order was wrong so I'd reorder a script tag because this needs load before this switch loads before this so I fixed that and it still wouldn't work then I'd read the docs some more and realize oh okay I'm running the wrong version of jQuery I found that buried down in here I need to run at least this version so I go ahead and update that and I would repeat all of these steps to go update jQuery there was no easy way for me to upgrade my dependencies once this finally worked I would typically drink heavily and that was my 14 step process for working with JavaScript in 2008 now if you want to stay updated imagine this I just went through all that work to get this going if I want to stay updated what would I do in that case I would repeat a lot of those steps again very very painful and what if I wanted to minify or bundle or test this code nope not gonna happen not practical in that era hardly any of us were because it was just too hard contrast that with today npm install lid import the library NPM update that's pretty cool that is vastly vastly simpler that is worth celebrating JavaScript doesn't have a base class library and because of that we're seeing NPM grow at an amazing rate NPM effectively has filled in this gap and it becomes growth has been unprecedented unprecedent you look at these lines here you want to guess which one is NPM come on y'all you're supposed to be the one on the top it's kind of baiting you there look at this so this number down here this green line down here that is dot Nets package manager which is nougat they add 66 packages per day how about Java's 139 per day NPM almost 500 packages are added every single day to NPM by the end of the day another 500 things are out there I mean that is amazing that's amazing unless you factor in sturgeons law it's always a caveat with growth we I don't want to pick on anybody but now I will say I think sturgeon was a bit of a pessimist because my take is even if sturgeons law is true this is also true I mean more is better ten percent of that crap is good so that's so wind yes I know I'm a child but this is my this is my justification now I I really think this is a glasshalffull mentality when you have that sort of view it's a bit of a first world problem kind of complaint oh no I can't keep up with all this awesome free stuff that people keep building for me I mean life as a JavaScript developer when we talk about JavaScript fatigue we sound a little it's hard to have a lot of sympathy for us it's a bit like going to a family reunion and complaining about how your inbox is full of recruiter emails oh another recruiter wanting me to interview it's hard being a developer your family will do not say this at a family reunion you think you're crazy so we're in a great place as JavaScript developers and my point is this the npm allows us to write our code once and then reuse it it's a very simple idea so a question for the audience we're gonna go through this cadence through this talk question for you how many of you are using NPM packages today so that is probably 70% of the room very good but I have a more interesting question I was expecting the majority of you to say that you do how about this how many of you will say my team has published in NPM packages my team or my company that's about ten fifteen percent of the room although a noisy one whoo yes we're excited about this so look at this everybody put your hands back up if you have published an NPM package and Zack you're partying back there that's cool so look around the room guys the future is here it's just not evenly distributed I believe that if I came back here in a couple years we would see the vast majority of hands up so ask yourself do I want to join the revolution because it is here now what what I share is a demo that shows how my team works with NPM packages my team maintains an NPM package called fusion the fusions of framework that we use for doing react development and Cox Automotive it adds many opinions in on exactly how we want to do react development so if I click over here I can go to our github repository and you can see that this NPM package of course has a package JSON and what makes this package interesting is all the dependencies that it holds inside our applications have a single dependency which is fusion but behind the scenes starting here at mine 27 and scrolling down these are all the dependencies that we're actually using to put our applications to work so developers don't have to make decisions on webpack or babel or what react dependencies they should be pulling in they just leverage all of these packages which are built in diffusion we also include some build scripts that start the application that configure our tests and that perform the production build we've also added some interesting extensions now behind the scenes we're actually using create react app but we've added a number of opinions on top to get this done but through the power of this single NPM package when we deploy applications this is the up dependency that our applications take on and in that way when we change directions when we need to do bug fixes or enhancements to our build process or deployments upgrade dependencies people have a single NPM package that they can update as necessary so that is the key point at the end we have at this point published at least a half dozen applications using a single NPM package that we call fusion so those applications you go into the package JSON you know what you find there one dependency because we've decided as a company that will bundle up all of our dependencies behind the scene it's about 75 NPM packages a number of build scripts all of that is contained through the power of NPM so I'd encourage you to consider that pattern so that was the first revolution which is the package revolution this is the very foundation of the reusable JavaScript revolution that I'm talking about today so you need to have accepted that before you move on to phase 2 phase 2 of the reusable JavaScript revolution I call starter kits or I also like to call this part do so if you were coding back in the day jQuery versus mootools versus prototype j/s which I did there was a funny site called vanilla Jas and you would go out to vanilla Jas and build your own custom download you could select things like ajax event system functions as firstclass objects do regular expressions i want those in an array library that sounds handy and then I could build a custom download of all these features in this vanilla Jas library and when I opened it in my editor what I would see is an empty file do you get the punchline vanilla Jas is using the platform and if you went through the vanilla GS website what they would do is contrast the performance of plain vanilla Jas versus using jQuery or mootools and they would point out vanilla J's was not surprisingly faster because it removed a layer of abstraction and this was funny at the time and caught some level of attention however I believe that vanilla GIS is malpractice and I believe that because today as developers if we're not leveraging each other's work we are wasting time we are reinventing the wheel we should be standing on the shoulders of giants and so many of us in here have done good work see today here's the story so many of us are expecting to publish an application to the web with a single minified bundle maybe tree shakin maybe that bundle is split in ways so that it loads from page to page that's not trivial you want things like explicit dependencies you want it to be Mart modular minified transpiled linton tested you want an automated build and you want automated updates I believe that file new project is malpractice and in my organization we do not do file new project when we start from scratch we are starting from a foundation with literally over 75 different opinions baked into it it is a huge number of opinions that we have think about some of the decisions that you make if you're gonna file new project right now as a JavaScript developer you as a team need to decide what editor are we going to use and how we standardize that configuration of tabs versus spaces line endings and as such what NPM package or I should say what package manager are we going to use because NPM isn't the only one but it's a pretty logical choice what development web server will we use what automation approach what transpiler what bundler what linter how about automated testing we need to choose a framework an assertion library helper libraries where to run our tests when to run them and where to place these files we need to choose a CI server if we're making HTTP calls Ajax that sort of thing we need to choose an HTTP call approach in fact if I lay all this out on a slide it's very difficult to fit it all and here's what's interesting you're gonna watch all these decisions fly by you here but ask yourself this if you did a file new project would you remember to ask yourself these question would you remember all of these concerns because as a group in here we know that testing is important we know that minification and bundling and transpiling are all important as JavaScript developers but it's really easy for a lot of these decisions to hit the floor it's easy to accidentally end up in production in a bad state if you don't automate it away so again I say vanilla JavaScript today is malpractice file new project is malpractice start from something more opinionated and so what I'm driven by is a level of dissatisfaction with the current state of affairs in JavaScript I can't get no satisfaction so here's where's what I'm dissatisfied with rework I don't want to start from scratch when I'm starting a new project I don't want a tedious setup just so I can get to a HelloWorld wiring up transpiling and bundling and minification all of these things is really tricky and I end up repeating mistakes how about this you read a blog post and this blog post goes oh man this is something I have to remember to do on my next project but how do you remember to do that later the way that you do that is to codify your opinions the solution that I am suggesting here is to codify your opinions now one way that you can codify your opinions is through a checklist if you've ever had the book checklist manifesto I highly recommend this to developers it's not a technical book but what it drives home is the benefits of writing down what you need to do see the checklist manifesto tells an interesting story about doctors we as developers we don't like checklist because we feel like I'm a professional I don't need a checklist I know what to do off the top of my head but doctors have been found that to need a checklist there was a study that found this you go in you have the nurses ask the doctors the steps that they need to perform before they cut a hole in your body and run a tube into it they're gonna run a lion into you you have to make sure that they sit down they wash their hands properly that they make the incision properly they cover their hands and gloves it's not very many steps but as a doctor in the heat of the moment it's really easy to forget a step and what they found was a percentage of the time that happened and what happens in that case is people die people die when you miss step now thankfully lives generally aren't in our hands but increasingly that is happening in software too they saw dramatic results by creating checklists what they saw was the 10 day line infection rate fell from 11% to zero because how could you miss it if you do the proper steps people don't get infections because you have protected yourself from it the checklist prevented 43 infections eight deaths and two million dollars in costs so in summary doctors know what to do but it's easy to overlook a step and in the same way we as developers also know what to do but I showed you that slide deck there were probably everything on that slide deck you thought yeah I'm generally familiar with that but do you ask yourself those 40 questions every time you start a new JavaScript project have you asked yourself that about your existing project today probably not so on my team we have honored this checklist idea we've created a file called pull request template MD here's a little pro tip if you use github create a file with this name and every time somebody creates a pull request it will generate this within the pull request so that way all of our pull requests have our code review checklist right there inside of it automatically that's us embracing the checklist manifesto so that we make sure we don't skip a step however you're a developer so an even better idea than this is to automate it strive to automate and I think this is a really important principle that the more things that you can take for granted the better off you are Society advances as we can take things for granted the fact that we came here today and we could take for granted that these lights would be on that my computer would be charged up that I could get in a car and drive here that's really important in the same way as developers we need to increase the list of things that we can take for granted see on my team there's a long list of things that we just don't think about anymore my team knows that they can use the latest version of JavaScript they know that it will just magically get transpiled they don't have to think about it in any way they know that every time that they hit save the tests will run automatically and when we push code it will end up running on the CI server and we'll know if any tests have failed we know in our code reviews that our code reviews go really fast now because most of the things that we look for are caught by linters and of manually on a casebycase basis we know that when we get to production we'll be able to use source maps to debug our code even though we're transpiling we'll be able to see our original code in production we can start our application with one command when somebody joins my team you clone the repository you say npm start and magic happens and you're seeing your code there's no special work there we know that we can run a build that's minified bundled ready for production by just saying npm run build and we know that to get to production you say npm run deploy all of this is taken for granted and when you can take all of this stuff for granted it's awesome because then you can focus on the hard problems and programming see this basics this plumbing that we're talking about here should not be burning your cycles it should be a solved problem for your team and I assert this that the more that we can take for granted the faster we will move and the higher the quality we'll be on our projects so I think of a starter kit as a living automated and interactive checklist and increases the number of things that you can for granted now a lot of you may feel like well I kind of have a starter kit I went out and I used create react app from Facebook or I use the angular CLI or I used ember CLI whatever maybe well I believe that that's not enough my recommendation to you go find a project like that for kit make it your own and then add your opinions in because I guarantee you your team has a number of other opinions on top of those tools and that's precisely what my team has done we use Create react app behind the scenes but we have added many many more opinions on top of it now this is a really big conversation I published a fivehour course on Pluralsight called building a JavaScript development environment where I talk through all of those 40 decisions and how you reason about those but my recommendation to you is really simple when you get back to your office on Monday I would suggest this to you just schedule a meeting schedule a meeting with your team and say I want to have a dolt conversation about the issues let's just sit together and talk this through and we'll come to an agreement on how we do JavaScript here at our company and I think it'll go well now often these conversations can get heated because typescript versus Babel is a big big deal people feel very very strongly we've been through this as well but I don't believe this I believe if you're having those kinds of tabs versus spaces conversations on every JavaScript project you're spending a lot of time in the wrong place as a team come together and agree and then you can move forward so I want to share another demo I want to show you our starter kit that we use at Cox Automotive this is my team starter kit which we call fusion the way that it works is you clone the repository just like you would any other github repo I already have it cloned over here after you have cloned it you run NPM run setup and setup helps you first install all the packages automatically and after those packages are installed then it will prompt you for the settings it will ask you if you want to delete the git repository I'm just going to leave it as is here and then it will prompt you for your project name as you can see it enforces a logical name for a package.json it'll ask you for whatever version you'd like to assign for the author of the project it will ask you for your production URL I'll just put my URL comm ask you for your license the project description just a demo and now that we're done our setup is complete if I come over to package.json then I can see that it added this information into the repository and we have a few scripts in here to get started the other thing that's interesting is that our starter kit has a single NPM package dependency so we can make changes over time and all any deployed applications need to do is pull a new version of fusion and they get all those bug fixes or new enhancements in the future now when you run our starter kit what you will see what you see is it starts up a demo application that says welcome to fusion gives you links to important information like our list of reusable components our style guide and some basic steps that you can run once you're done looking at this demo you can run this script to remove the demo but we also show people how to work with a Redux app so you can go behind the scenes and see how this simple demo application works that just calculates miles per gallon we show how our form validation story works in an interactive way and again you can see that many of our opinions on forms are all encapsulated within our reusable components we show how our mock API works so you can actually come into here and save your changes and when you save those changes you'll see that they're reflected even when you reload the page we show how to dynamically import libraries and we also show how to lazy load heavy react components you can see that this loaded after the fact now once I'm done and comfortable with this demo I can go ahead and remove it and get started coding to do that I come over here and say NPM run remove demo and when I do we can see that there's a lot fewer files over here now and if I rerun the application now it's simply a hello world so we have a simple starting point that is ready to run the app so that's how we do development on my team the nice thing is everybody knows that they start with Fusion starters what we've called it one thing I will recommend is choose a brand name for whatever you do I was recently out in San Jose consulting a team that went for the same model and they chose their own special name they called theirs preamp because they have a model where they're tied to videos and they like that idea of a preamp it went well with their branding had their own logo and everything now unfortunately what I just showed you isn't open source so you can't go out there and dig through it for more but a very very similar project that I published about a year and half ago was reactive slingshot so if you want to dig through the code and see how all this works check out react slingshot just yesterday it hit seven thousand stars so I was pretty excited about that it's gotten a lot of usage so I'm excited about this this is an opinionated way to work with react that said I'm a big fan of create react app too it's a awesome solution so question how many of you will say that my team are bini has its own JavaScript starter kit Wow so that is four percent not five four I'm that exact with my counter so that is a very very small number so again look around the room the future is here it's just not evenly distributed I believe that this is the future because starting with final new project is just too much work and your team has a large set of opinions there are over 40 decisions that you need to make when you file new project on JavaScript today and a starter kit operates as an automated checklist for your team so that you can codify your opinions and automate all the fatigue that people talk about away my team is not fatigued anymore we know when we start a project that's what it looks like and it just works we don't have conversations about the basics anymore all right so we have talked about two of the three reusable resolutions packages and starter kits I'm going to close out this talk with the final revolution which is reusable components all of these build upon one another now for those that aren't familiar with reasonable components it's a reusable piece of HTML Javascript and CSS and we know that these are the big reasons that we want consistency less code faster development fewer bugs the component model gives us these obvious benefits at Facebook they are heavily invested in the component model using react and they find that components helped hundreds of engineers work on the same codebase move between teams quickly ramp up and focus on products now this has happened all over the world I'm an I'm a car guy I work for an automotive software company in fact back in Kansas City and you look at this Mercedes this is a beautiful car and you think okay these are a bunch of special parts inside but in actuality there's all sorts of reusable pieces reusable components inside here the seat belt the button on the seat belt the airbag systems the transmissions the but the engines themselves in many cases are used across vehicles really large complicated components and this cuts their costs at speeds development and increases economies of scale as developers we have all this same power now we should be working with higher and higher level abstractions with better components as time goes on that's precisely what's happening on my team now we've created our basic component and now we're starting to build on top of those basic building blocks I will tell you this I believe that the future of development is going to be assembling finished components taking those components putting them together in novel ways we'll be thinking of ourselves more like working with LEGO pieces rather than having to build the Legos ourselves leverage higher pieces higher levels of abstraction now I wish I could claim this slide but I love how this slide encapsulates the mindset shift that you need to make today as a JavaScript developer for the longest time we've talked about separation of concerns as a separation of JavaScript HTML and CSS I don't believe that's a valid way to think about separation of concerns anymore because separation of concerns today is a matter of components so I want to separate my concern of this button from my concern of a date picker from my concern of this modal dialogue the component is the concern we're separating it's a powerful idea because you recognize that HTML and JavaScript were never separated concerns we thought they were back in the jQuery days I would write unobtrusive javascript here's my HTML here's my JavaScript the problem was if I ever changed my HTML I broke my application if I didn't also update my JavaScript because my JavaScript was hardcoded expecting a certain Dom to be there this is the important future for JavaScript developers is thinking about concerns in terms of reusable components and those components may be composed of multiple technologies but separating technologies doesn't necessarily separate concerns HTML and JavaScript are fundamentally intertwined now there's an interesting question someone might ask you though if I asked you hey can you share this HTML with me that's a surprisingly hard question to answer I don't know quite how I respond to it I love I will tell you this is the hardest thing about writing talks is getting distracted by stock photography and all the silliness that you see you guys couldn't turn the monitor on before you pointed at it yeah but this is a hard question can you share this HTML with me and the really the answer is we don't share raw HTML what we share instead is JavaScript that embeds HTML so if I want to share this div with you the way that I'm going to get it done is with JavaScript and this has been the case throughout history over the years we've seen a lot of ways to get this done and this brings us to the third and final revolution which actually occurred earlier but I'm introducing it last for specific reason that I'll explain in a moment now what happened on this date in 2006 no guesses web components nope that was later Gmail web app that's an interesting guess no although that's that's close that was that was in the ballpark jQuery there we go yes jQuery was launched in 2006 this was a very big deal this this is what kept me from ragequitting web development I was just about done with it because crossbrowser was so painful and jQuery wasn't really about components jQuery was about paving over inconsistencies in the Dom and giving you a really elegant API but very shortly after jQuery came about we saw this jQuery plugins and jQuery plugins were really the first popular way to build reusable components for the web however today you're likely not going to reach for jQuery plugins to get this done today we're all asking ourselves how should I build components now I obviously have an opinion on this matter and in fact I'm going to go ahead and share it but I want caveat why I believe that strong opinions are useful for others those who are undecided or ambivalent can just adopt your stance but those who disagree can solidify their stance by arguing against yours so I would totally encourage you tonight we're gonna have an after party I'd love for you to come up and say how I'm a dummy head and you feel like this other thing is better that's absolutely fine I'll share my opinion on this story right now because there is no really clear answer web components the web components standard is a compelling option to consider here now I'm a big fan of standardization if you're not familiar with web components it's this idea of four core technologies inert templates put some markup in there and it just works custom elements where you can define your own HTML elements shadow Dom which encapsulates your Styles so they don't leak out and imports being able to bundle HTML Javascript and CSS now I'm a big fan of standards and I even created a course on html5 web components on Pluralsight because I was really amped about this standard sad news is I can't stand up here and push you you might think that that's what I'm going to tell you right now is go ahead go use web components but the story really isn't that simple there's a few reasons that I'm not reaching for web components and many of you how many of you are using native web components one hand one hand out of I don't know how many that's definitely a less than one percent here's why spotty browser support so you have to pull in polyfills in those polyfills way a substantial amount yesterday I just learned I believe it was 27 K minified for the polyfills that you need for IE 11 for instance to be able to run the standard and that's because of browser support see the template tag is pretty well supported cross browser except for IE you'll need a polyfill there but the other three core technologies not so HTML imports a lot of read custom elements shadow dom and we have been waiting i've literally been waiting for years for browsers to implement these standards and we're still waiting so the question is when there are two other issues here this at the time I was really excited about web components because it enabled some new things the idea of the shadow Dom was really novel that I could write simple CSS selectors and not worry about leaking on to other components but today javascript libraries they keep on innovating so in fact I compared to react for instance react has answers to all these things JSX for templates react components are effectively your custom element you can use CSS modules or CSS and j/s to keep your Styles tied to that one component and we're all using bundlers and npm anyway so we don't really need the HTML import specification so my take on it is this don't wait around for the web standard to catch on instead just embrace modern JavaScript the real question is which framework so these are the four most popular although there are many more options out there that I'm not going to try to fit on a slide here's what I think you should be asking yourself though for things how stable is it how broadly is it adopted how much boilerplate am I putting in here that's specific to this library that's gonna make it hard to shift to something else later and how much does it weigh so I'm a big fan of react I'll be completely honest about that let's see how it scores here we react you do code mods when there's a code change a major release I just run a code mod that automates it for me and that's because Facebook has to do that they are dogfooding in a way that no one else can compare to facebook.com/ one of the biggest sites in the world uses 30,000 react components so Facebook can't afford to make a big braking change that requires manual changes they'd have to update 30,000 components fundamentally react is a function that returns HTML it is very low boilerplate and finally it's quite lightweight 43k gzipped now I may change my mind tomorrow and if you go see me talking at conferences on videos from previous years you'll find I've had different stickers on my laptop from year to year this is how my trajectory has been through history I was using angular not that long ago but now I'm enjoying react at the moment next year I may be somewhere else so you do have to ask yourself this what if I choose X and everybody moves to Y whether regardless of where you are chances are there's going to be some other new hotness coming soon my take on it is this if you choose a low boiler point a low boiler plate library then you can get started safely today migration really is practical see for instance here's react there's really very little boilerplate I've got I have an import at the top I have a function with a name that takes parameters and it returns HTML if you told my team hey Cory your team needs to go rewrite everything in view what you totally do that that's not a big deal it's mostly a syntactic change I don't burn the world to the ground because really this is what's hard component design is hard but coding isn't that big of a deal I'm convinced that my team it would be relatively straightforward for us to move to a new technology later when react is no longer the new hotness whatever that may be and it may very well be us moving to standardized web components once all of the browsers have really embraced the standard but I don't believe that you should sit around and wait because centralized and consistent is most certainly preferable to decentralized and inconsistent now that's not always true but in the aggregate repeating yourself through copy and paste is not a design pattern that scales very well now choosing a framework is just one of many decisions that you have to consider here I showed you something like this when you were thinking about building a starter kit there is a similarly ridiculously long list here and I'm is going to jump ahead so you don't have to watch it all go fifty decisions fifty decisions that you need to consider when you're going to create a reusable component library so that is huge again I went through the same thing I just published a course if you happen to be interested in react called creating reusable react components this is a six hour course I thought that I could get it done in two but it is a complicated conversation because there are this many decisions to consider fifty different ones so I want to show you quickly how we do reusable components at Cox Automotive this is our documentation for fusion UI components along the left hand side we have a alphabetized list of components I'm looking at the text input component right now which is an abstraction over a label a text input and error message and add some opinions around that down here we have a list of examples for each of these examples you can click on the examples header and see a snippet of code that you could copy and paste into an application down at the bottom we also have a list of props which you can change to oh I apologize I hit the trackpad so I will narrate this anyway just to save us some time but the thing that I want to emphasize is one of the harder parts is setting up your documentation setting it up in a way that is leveraging all your code and what we have is all the documentation that I'm showing you here is generated from the code we add these comments see the comments over there on the left it's kind of a j/s doc style comment that's what generates our documentation so every time we hit save in the code we see our documentation change and that way we don't have to worry about the two getting out of sync I show how to get this done in the Pluralsight course on react components really the patterns that I follow would apply just as well as an angular developer or view developer don't build your Docs by hand automate that process so final question how many of you have your own reusable component library more hands than I expected this is great that's probably 15% of the room that's pretty cool excellent how many of you are working in angular for that reusable component library okay how many in react okay how many of you any Wow so view and reactor neckandneck here that's very different than kids well I'll find out Kansas City next month to KCDC we'll see how much that is shifted I know view is getting a lot of attention okay so very very interesting so we just saw that again everybody with their hands raised that's an interesting take as we've gone through this progression fewer and fewer people are through these three revolutions because one revolution builds on another so let's go ahead and wrap up I want to clarify why I laid all of this talk out and the order that I did when you're gonna build a house with components are gonna go out and get a chimney component a door a window these sorts of things you want to you don't want to start from scratch and build your own window or your own door and this should be the story now today with your development story on your team but to be able to do this you need a foundation a house can't float in the air the foundation that I'm suggesting for you is a starter kit that starter kit encapsulates all the dependencies that your team needs and of course that starter kit gets hosted on NPM and that's precisely why I laid out the reusable revolution in the order that I did so if you're one of those people that likes to take pictures of slides at conferences your big chance just make sure your camera's not pointed at your face first was the NPM packages so the reusable revolution of packages my call to you is create your first package we just saw about 30% of the room has not created an NPM package before so that's a big first step in fact no I take that back it was more like 60% of the room but not starter kits my call to you is codify your decisions set up a meeting on Monday to say let's come to an agreement as a team here's how we do lending here's how we do bundling here's how we do transpiling etc automate the pain away and finally with comes to reusable components go pick a library and start sharing set up a centralized site and start documenting your work so if you're gonna take a picture here's your big chance right here so hopefully I've shared a vision that gets you as excited as I am I come into work each day and I'm just awesome I'm ready to go I am amped to be a JavaScript developer I really life is pretty good for us right now there's this reusable revolution is taking off I am HealthCorps on Twitter I'd love a tweet of feedback thank you all for listening