hey everyone it's Andrew Brown back again with another Cloud certification course and this time we're looking at the GitHub action certification this certification is going to teach you how to work with cicd pipelines uh specifically github's tool called GitHub actions um to show that you have devop skills and you'll be able to add that certification afterwards uh to your LinkedIn or resume um so you know you can make your way into your cloud or devops career now um I just want to point out that if you want to support more free courses like this one the best way is to purchase the additional uh study materials and practice exams and things that we produce over at exam Pro it greatly helps us um and I just want to point out that this is not my first certification course uh We've made certifications courses for GitHub before itos Azure gcp terraform kubernetes I'm sure a lot more so you're in really good hands um but yeah I'll see you shortly okay ciao hey everybody it's Andrew Brown and we're at the start of our journey asking the most important questions first which is what is the GitHub action certification and this is a programmatic focused certification so you're expected to know how to program to some degree uh creating cicd uh or build pipelines writing yamel that's basically the code that we're doing here creating custom GitHub actions configuring workflow environments securing securely passing data to workflows and The Unofficial course code for the certification is actions I got that from the GitHub uh website as and I've talked to them saying hey get course codes and they still don't have them um the GitHub actions is probably one of the most popular cicd tools uh this day I can't say for certain if it is the most popular as Jenkins is really hard to Dethrone um but uh it definitely is something that a lot of people are grav gravitating towards just because you already have a GitHub account and it's so easy to use um who's the certification for well consider this certification if you are new to cicd and you want to adopt some cicd tool for your technical projects you are a non devops uh you're not in a devops role but you're trying to get there so you're trying to add devop skills you want practical skills that focus on implementation rather than Theory but really that's this course not necessarily the exam and I'll talk about that when we get to uh the uh breakdown of the exam um so what would be a good road map for you uh I again strongly recommend you take the GitHub foundations before you take this certification but once you do this is a a straight path that you could uh go take um after the foundations if you're looking to become a cloud developer or devops or something like that then this is something that would be useful I want to point out that um these certifications uh do not necessarily test uh programming technically technical diagramming code management or any other technical skills that are required for obtaining the technical roles so you are going to see code on the exam but I'm just going to say that um uh it's extremely lacking so it's more about like the yes you have to know how to uh uh use GitHub actions and its syntax but then they have a lot of business scenario stuff and uh things like that that uh kind of dilute uh demonstrating that you actually have that knowledge again again remember this is multiple choice and multi select so they can't really check your code and make sure you know how to code uh how long should you study to pass this well uh the content for this exam I think or this course that I made is about 3 hours so if you're a beginner um I would think that would take you 12 hours like if you skip the GitHub foundations and you've never used GitHub actions before rid yaml or done devops or anything like that then 12 hours seems like a good amount of time if you're experienced uh you have to go through my content and do the labs um and then you need to do practice exams um and do some additional readings so you're probably looking at four hours so yeah someone with a strong devop background or cic knowledge you're you're not going to have a hard time here I would say average study time around eight hours I would split that time uh between lectures lab 5050 uh with your practice exams okay so once you're done uh the lecture in Labs assume that you're going to put the same amount of time or similar time uh with practice exams afterwards but you know for some people it might be a little bit faster because they can get through the lecture lab content faster by two times skiping some of the content uh recommended study time here is 1 to two hours a day for seven days what does it take to pass exam watch the lecture videos and do the HandsOn Labs especially for this one because um there's a huge section um in the exam guide where they just want you to know how to troubleshoot issues and I don't make separate videos for that I do them in the labs um and so some of my labs seem boring but uh the purpose is to purposely run into troubleshooting issues so that we can uh know how to solve those when we get exam questions on them uh there's also practice exams you absolutely absolutely want to do practice exams and we have a fre set and a bunch of sets here this one in particular because there was a big chunk of content that I could not find in the docs that I could not find uh practically working and we had to create practice exam questions to the best of our ability um and it's the only way that's going to really help you uh get a good score because um for whatever reason there's just internal content that is not dou umented um and it's the only way you're going to pass is really the practice exam so I want to point that out um the content outline has four domains so we have domain one author and maintain workflows domain two consume consume workflows domain three author and maintain actors domain four GitHub actions for the Enterprise um so these are the waiting that uh GitHub provides so in the GitHub foundations I said they didn't have waiting now they have added them as a response to the last one so that is great I just want to point out that in my experience the domain 4 which says 15% I had way more than 15% uh of questions on Enterprise it was more like 35% it really threw me off um so I do not trust this domain breakdown and um you're going to have to dig deep and try to pick up any kind of information you want or can with Enterprise um the other trick is like if you want to learn the Enterprise component you'll have to sign up for an Enterprise account I did not want to do that I'm trying to keep everything in the free here so I don't do that in this course um but if you want to just cover your bases then you might need to go ahead and do that um The Exam Center for uh taking this exam online is going to be with PSI so you can do that in person or online if you can do online do on or sorry not sorry if you can do in person do in person because it's a controlled environment it's so much less stressful and PSI in particular is brutal for their online experience um so there's Pearson View and PSI online and cran um and Pearson view is the better online experience than the two but like PSI I always have problems uh and you need to show up really early and if things aren't working you have to reach out to them because you could just be sitting there and you'll just miss your exam even though you're there uh so just understand that um it's a proctored experience uh meaning that there is somebody watching you to make sure that you're not cheating so uh be prepared for that and make sure you have a nice clean environment for them um the passing grade here is 75% I have a big aspect on that because GitHub officially does not provide you a passing score but unofficially I can tell you that it's 75% uh because I asked them and they they said unofficially 75% uh I think this has to do with the fact that they can't do a perfect score nobody does a perfect score but for whatever reason they just they don't feel comfortable giving a a finite number there even though it is 75% um the number of questions you have in the exam is 75 60 are scored 15 are unscored so you can afford to get 15 uh scored questions wrong there is no penalty uh for wrong questions um and this could have been my experience where I felt like I had 35% Enterprise questions on there but that doesn't explain the missing 5% anyway the format of the questions is multiple choice and multiple answer I'm going tell you right now there was a lot of multiple answer like an abnormal amount of them and it was very frustrating so just be prepared for that um that you're going to have a lot of multiple uh multiple answers um there uh again just more about the unscored questions there are 15 questions unscored they do not count towards your final score why do they have these um it's used uh to evaluate the introduction of new questions to determine if the exam is too easy and the pass and score the question difficulty needs to be increased or to discover users who are attempting to cheat the exam or steal dump exam questions if you encounter questions you've never study for that seem really hard keep your cool and remember they may be unscored questions let's talk about the duration of this exam it is 2 hours you get 1.6 minutes per question the exam time is 120 Minutes the seat time is 150 minutes SE time refers to the time you should allocate for the exam uh that includes uh the time to review instructions show uh the online Proctor your workspace re accept the NDA complete the exam provide feedback at the end so there you go hey this is Andrew Brown uh we're taking a look at the GitHub uh study guide and so you can get this over at the ghio g.o for certifications when you go to register for your exam you can download this uh it'll also point you to the um Microsoft learn and Linkedin learning um uh LinkedIn learning is paid so you can't just get that you have to like a premium account and if you have a premium account then go utilize that because it'll probably poly fill some of the things that I'm lacking on which is the Enterprise section in my experience my exam was more of domain four Focus which was bizarre because it says it's 15% maybe I it's just a fluke for me and this is the percentage if so my course is fine and you don't need to do any additional work uh but just in case you should probably read a little bit more about the Enterprise features even if you don't make an Enterprise account um I did not like a lot of the questions on this exam because I thought that they were unfair uh so for example um if we go to here we have author maintain workflows one thing we learn about is a configuring workflows to run scheduled events and in that we have to uh configure it using a Chron expression and so I said in the slide I'm like I don't think that they would expect you to know how to interpret a Chron expressing because that seems out of scope but you should know that you can do it and then I got an exam question that said pick the Chon expression I'm not kidding you cck click the Chron expression for this complex thing and I'm like are you kidding me that is not a fair question or um uh there was like another one where they wanted you to know an API action so we learn about um I think it's over here as well we learn about something called repository dispatch and they want you to know uh um a specific API to use that that makes sense but I didn't get that on the exam I got something else like an a like an API uh URL that I had to know for the GitHub CLI that had nothing to do with uh uh the GitHub the the GitHub certification but just whether you could know what the format of of the UR all was and I thought that's really unfair and so I had a lot of those okay um uh so I just want to prepare you that this is a frustrating exam it's not hard but you have to just take your best guess um to to pass it okay uh but yeah I mean I just wanted to show you where that resource was and I just wanted to tell you about some of my concerns about the certification experience and so you don't get too stressed out about it but just do your best to get through the materials but please please do practice exams because they'll make your life a 100 times easier for this one okay hey this is Andrew Brown and we are at the start of our journey asking the first important question first which is what is GitHub actions so GitHub actions is a cicd pipeline directly integrated with your GitHub repository and GitHub actions allow you to automate running test Suites Building images compiling static sites deploying to code servers and whatever you can think of because it's just compute that is automated so whatever you want to do with it uh you're going to find uh all the workflows that you run under the GitHub actions tab uh GitHub actions has templates which you can use to get started but for this course we are going to be creating our own um GitHub actions in a folder called GitHub forwork flow so on the right hand side is an example of a workflow uh you'll be seeing a lot of these as this course is very heavy with the programmatic side of GitHub actions you can have multiple workflows in a repo triggered by different events um yeah let's keep going here so the idea is that when you run a GitHub action we'll have a history of it in our uh our UI so here we can see multiple runs GitHub has a repo for example workflows you can use to get started so if you go here there is tons in here but to be honest once you learn the basics of GitHub actions you don't really need any of these samples because it's just very straightforward um there are different types of events that can trigger an action to run and we'll notice that on the on event there and so in this case if something was pushed to the repo it would trigger this to run the jobs and then those jobs will run the steps on the specifi compute good AC actions have uh 35 Plus event triggers examples of common triggers would be something like pushes pull requests issues releases schedule events manual triggers but there's a lot more than that um so anyway that is the intro to but we'll get into doing some some uh HandsOn here and then we'll get into the specifics of GitHub actions okay hey this is Andrew Brown and we are taking a look at GitHub actions and so I figured what we do is just explore the UI and I'll just tell you how you're going to set your stuff up for the rest of um of this project so what you'll need to do is you'll need to go ahead and Fork this repo because we need to run GitHub actions in the repo and I plan to run them all in GitHub example so I want you to go ahead um and do that now I'm not going to Fork it because I don't want to Fork of my Fork um but yeah just go ahead and do that and once you've done that let's continue on here and take a look at some of the settings we have for GitHub actions so the actions will show up under this actions tab and you can see that I've already ran a bunch and I actually have one here from earlier but if we go over to our settings tab uh and we go over here on the left hand side to actions we can look at some settings we have I don't really cover this stuff um much anywhere else so I figured it's a good opportunity just to get it out of the way in the start here you'll notice the first thing is that we have action permissions so we can uh determine um what is allowed for our actions so you can see that we have allow all actions and reusable workflows disable actions if we want to turn it off um allow it uh for all of exam Pro or non select actions and reusable users so things that are more uh specifically selected so that is inter ing there something that I was surprised is that if you go to the settings tab you don't have an option to turn off actions here you basically just disable them here on the left hand side um then we have our artifact and log retention which we'll come back to later when we look at artifacts but you can see here uh it says 90 days uh for Save then we have Fork pull request workflows from outside collaborators um so whether you want to do these things so just be aware that there are some settings here but let's go back to the actions tab uh and take a look what we can do so right now I have um a workflow set in here this is one we'll be doing in the future but I just want to show you where workflows exist so if you go over to code uh and you go into GitHub folder and into workflows this is where you'll put your workflows and a workflow file can be named whatever you want as long as it's yl or yml because these are yaml files okay and so here's a here's one that sets up a post crass image that allows us to run post crass and you can have as many as you want in here um what I have noticed is that you can have as many as you want but um over here on the left hand side this tab it'll only support so many so you can have I don't know was like 20 or something and then after that they'll be there but it's just hard to select them and see what's going on so uh you don't want to have too many workflows in here and there's not really a reason to have that many workflows but I just want to show you that you can have that many all right if we click into a workflow again we're just watching right now uh we'll do something here in a moment this workflow is disabled because I've uh I've disabled it just so that it doesn't run on push but if we go into here we can see information about it uh and how it ran so if I click into here I can see all the steps it ran through so it set up the job it initialized the container it checked out code all these steps so hopefully that gives you kind of a preview of um what it looks like to create a workflow but let's go ahead and make a new one so your screen might look a little bit different because they might be showing you templates let's go ahead and hit new workflow and so here we have a bunch of uh workflows that we can work with okay and so let's look for one that we could um try out so here we have something like greet users who are first time contributors to a repo so we can click into this and so now we have a template and so they're showing you um a template where and I'll just zoom this up here so we can have a closer look at what's going on but here we have the name of the template and you don't have to have a name but if you do have a name let's go back over here for a moment it will show up here and if you don't have a name there it'll just show the path to this file so it'll just show like do GitHub workflows greetings yaml then we have our on so on is saying um uh like what event will trigger this and so here if we have a pull request Target or an issue is opened then it's going to trigger this to run then we Define our jobs and we're we're calling this the job greeting we can name this whatever we want it's just that's what we call it this is saying it's going to run on Ubuntu uh latest okay so it's running Ubuntu we have some permissions which I don't think I really get into much in the course but uh maybe I'll I'll come back to that later on then down below we have steps and then we have this thing that says actions first interaction version one so the reason GitHub actions is called GitHub actions is because it has this modular component called actions which allows you to Define how these steps work and so what we can do is we can actually take a look of this I think this is a repo if I just type this in like this you'll notice github.com actions first interaction Maps up with this all right so go here and uh yeah it goes to here so we can actually see that this is an external repo um and they describe exactly how it's used and the cool thing is that you can create your own actions in git repos or GitHub repos um and then utilize them so the idea is that this is going to pass stuff into this and run it but anyway let's take a look here so we have uses action with repo token issue message and PR message so with is our inputs it's how we're inputting things into this action and so if we were to go over to here I've never looked at this action before but let's take a look and see if we can make sense of it so in here we have action. yaml and so in here should Define input so notice we'll go back here again repo token issue message PR message and we go here repo token Su message PR message and then down below here it says runs and it says we're going to run a uh using Docker and it's going to run this Docker image so I can go to here and we can click into this Docker file and we can see that it's running um Buster Slim So So node version uh node 20 Buster slim it's going to install um our node packages and it's going to run main JS and then we can go take a look at Main JS which is under lib here I wonder if this is like the compiled version so this is the compiled version so probably go to Source it's probably the same thing so it's typescript to JavaScript and we can take a look at what this thing does so here it runs a function so first of all it Imports core and then GitHub so we can utilize our actions there and then it's bringing in those inputs here as you can see if they're not there it's going to throw an error and then it's using um octokit which is the SDK for GitHub um and the idea is it's going to establish a client and then from there it looks like it's going to try to detect whether somebody has opened a ticket or not it's going to use the SDK to do that so hopefully that gives you kind of an idea of how things uh flow but my my point was is that if if you find this you can almost always look them up and dig dig deeper if you want to know how they exactly work but anyway um let's go ahead and I suppose go and deploy this one other thing I want to point out is that we have the secret stock GitHub token so the idea is that this is going to grab our GitHub token usually you'd set this in your secrets file so I'm not sure if this will work unless we set that let's go ahead and commit the changes and see if it works so I'm going to go ahead and commit that okay now notice that we have greetings. y yml so yaml file if we go over to our actions has it ran and so notice that it hasn't ran now if if this was to be triggered on a push let's go back over here for a moment to the code close out these tabs here for a moment so if we were to go back to here if this was to say on push and we went here it would have been triggered okay but it wasn't so what would cause this to run and if we go back to here we can see it's hard to get back to the code but um we'll go back sorry we'll click here again and it's expecting there we go it's expecting something with issues and so I'm assuming that what it's saying is like if you create an issue or use an issue I'm just guessing but we can go take a look and look up the documentation so we'll say GitHub actions um on events events that trigger workflows and then on the right hand side here we can take a look so we'll type it up here and look at issues says here um so web hook event payload is issues and then we have activity types so there's probably a way that we can narrow it down um I'm not sure if we could just put like a period here and then type the specific uh thing that'd probably be good to know but it seems like if any of these are triggered whether you open edit delete if it's the first time somebody's done something yeah here here it is okay so we can on open types open edit Milestone so we have to assume this is going to trigger for any thing that happens with an issue okay so what I'm going to do is going to go open a new issue and we'll say bug report doesn't matter what it is I want to report a bug I'm going to go down and create a new issue and I'm going to go back to actions and now notice that it's being triggered so we're going to click into this notice that it's queued up okay and if we click into here it's starting stting the job and it moves pretty fast but you can see here that um it's running the operating system 2022 04 LTS and then it gets the runner image all right notice it it gets our GitHub token which is interesting because I didn't set a secret so I guess it must just be already accessible and then we are uh it says download action repository so the idea is that these are uh again remember that that GitHub this repo here is a um this GitHub action is a repo and so it's going to download not clone but download this repo um where um uh into this compute and then we're going on to our build steps and so it's doing some build steps so let's just building the docker container and then it's running the interaction action so it's going to run this step here if we go down here so right we're on this step okay and then we see some logging and notice that it's running this doer container so remember that this repo here when we looked into it it's running a Docker file and so it's basically running this Docker container and passing all the stuff to it and it says checking if it's the user's first contribution so if we copy this I bet we could find this in the um typescript codee all right I search for it and so there it is that's what it's logging right there all right it says adding message message will be displayed on the user's first issue issue 13 so again if we search part of this it probably shows up probably not all of like this but we probably just take some of this out here okay not showing anything that's totally fine but anyway uh my point is that's how you can trace through through to it and having programmatic knowledge not just of gamble but coding knowledge is going to make it so much easier to work and understand with GitHub actions especially if something goes wrong all right um but for the most part when we want to create actions I don't really go to new workflows I just create what I what I want but it is nice to go in here you can click into this stuff and see what's going on so I can click in this ruon rails one and uh you know here I can see this one setting up Ruby on Rails and stuff like that and maybe we'll take a look at these later on but for the most part we will end up creating workflows manually um so now the next thing I want to do is I have this workflow but let's say I don't want to use this workflow anymore what we can do is we can go disable it so it doesn't run so if I was let's say I was to open another ticket um I wouldn't want well actually first of all would this even run again because if we were to open another ticket I don't think it would so it' only be the next person but let's just say I did not want it to run again we can go up here to the top right corner and disable the the workflow okay so now that's disabled let's say we don't want these workflows at all in here anymore um we would have to delete them out and then they would just vanish from here so let's go ahead and kind of simulate that so I've gone back to code here and what I'm going to do is press period on my keyboard period and what that's going to do is open this up in github.io name afterwards this is something we do a lot in the GitHub foundations course um this will not cost you anything to run because it is 100% free there is no compute running uh per se there's no um uh server attached to this let's say I'm done with these and I don't want to mess with these anymore I'm just going to take these and I'm going to drag them you just need to delete them but I'm going to drag them into my templates folder because I don't want to really get rid of them um okay and so now they're over here you can see I have a bunch of templates so we're going to have a lot of fun uh working through this I'm going to go ahead and just save these changes so just say move these to save them for later all right if we go back to actions no so it doesn't show them here anymore um I have these previous runs over here we can go in and uh we can delete this workflow run because personally it's a big mess so what I'm going to do here is I'm just going to clean this up so that everything looks really clean here so when I'm working through this just give me I'm going to pause and just delete them all okay all right there we go so I've cleaned everything up and yeah this is probably what it looked like for you when you first came into here and so probably what you would have to do is is click this button here of course probably would helped if I told you that earlier um but yeah so that is the experience um hopefully that gives you a a good start um to what GitHub actions is it's not very hard to use or learn um but we do need to do a lot of iterations here and so that's what we're going to do and look at all the features in particular and you'll find that you'll know how to use GitHub actions really well in a very short amount of time see you soon let's talk about workflows so a workflow is a configurable automated process that will run one or more jobs and workflows are defined by a yaml file checked in your repository these files are going to be located at GitHub forwork flows I think you know that by doing the lab now but just going to reinforce where this stuff is workflow triggers are events that are cause uh workflows to run so this could be when an event that occurs within your uh workflows repository events that occur outside of GitHub uh and this is generally with the repository dispatch you'll definitely want to remember that one as it will show up in your exams um and then we have schedule times or manual so those are the ones that we're going to be looking at and we'll definitely cover all of them uh a repo can contain multiple workflows as you saw we had like tens and tens of workflows so clearly we can uh have as many workflows as we want uh what one thing I want to point out with workflows is the name property so if you provide a name you don't have to it will show up here on the right hand side is a nice name if you do not provide it then it'll just show up like this so it's whatever you prefer uh to utilize okay hey this is Andrew Brown and we are taking a look at workflow components and so we're just basically saying what uh goes into a workflow and making sure we understand what all those components are the first are actions these are reusable tasks that perform specific jobs within a workflow we have workflows these are automated processes defined in your repo that coordinates one or more job triggered by events or on a schedule we have jobs these are groups of steps that execute on the same Runner typically running in parallel unless configured otherwise we have steps these are individual task within a job that run commands or actions sequentially we have runs these are instances of workflow execution triggered by events representing the complete run through of a workflow we have Runners these are the servers the host and the environment where the jobs are executed available as GitHub hosted selfhosted options we have the marketplace where you can uh find and share reusable actions uh with your community why do I have such a boring slide in this format because uh the certification asks you to know all these points I'm just trying to get them out of the way as quickly as possible but I do have this little diagram down below so you can see the contextual idea but we have a runner which is your compute uh the jobs which you see within your workflow and understand there is a workflow file here which I'm not showing here but that would be I don't know why I didn't do that should have been right there um and so then in there we have our steps and our actions right and then under our actions um our action steps are are connected together so hopefully all those components make sense it will make sense as we continue to work through um uh the files because workflow files are not that complex and you will understand definitely at the end of the course what all these components are so don't worry about memorizing any of this let's take a look at how we would trigger a scheduled event and the way it works is that you would use schedule as the event trigger uh and you would provide it a Chron expression to specify when you want that to trigger so here's an example um let me get my pen tool out to make this a little bit more clear so the idea is that we have this on which says what do we want to trigger this workflow on and we're going to uh do this on a schedule and the only option is Kon so Kon is an expression format and so this translates to something particular just so you know I've been using Kon for the entirety of my career I cannot remember KRON syntax because the frequency that you use it is so low so do not feel bad if you don't know how it works but I will definitely be referring to Chron tab. Guru which is a a quick way to um work with cron tabs of course we can use uh llms to help us get a time that we want but anyway the point is is that we have a cron Tab and then down below we have our job and our job's called test schedule and it's going to run an obuntu and if we look at the steps we'll notice we have this first one and this first one says not on a Monday or a Wednesday so it says GitHub which is a context get us the the event and the schedule and if it equals this or or does not equal this which would be this one up here then skip this step on Monday and Wednesday all right and then uh over here this will run every uh every time down below so hopefully that makes sense um but uh yeah again don't stress out about cron Chron logic just understand that it takes a Chron expression and we have a convenience tool okay hey everyone it's Andrew Brown in this lab we want to take a look at how to uh run a schedule event we saw that it's very straightforward but let's make sure we know how to do it I'm going to open this up in github.io on my keyboard before I do that I'm just going to right click and open the actions tab here as I want to quickly toggle between the two here notice I have nothing set up here so it is a clean slate um but what we'll do is wait for this to spin up and so in here I have um that scheduled uh template somewhere here here it is okay and so I just want to show you that if we look up scheduled uh workflows GitHub they have a lot of interesting examples um so mostly when you go to these event triggers you can always just go down here and say okay I want to know scheduled and we can see some options here they kind of explain explain Chron Expressions but let's take a look here at this uh schedule action so it says web hook event payload so there's no payload to pass to it there are no activity types um it's going to have the last Comm in on the default Branch for the Shaw and it only works on the default branch and it's important that you try to read these things because sometimes there are restrictions like this one says will only run on the default branch and things like that so just always take your time to do that now another thing I'd like to check uh is does this show up as a repo so I'm going to go ahead and just type in GitHub and I'm just going to take a guess and type in actions andin schedule because all these should be open source um so it doesn't show up there I'm going to just say actions uh schedule GitHub maybe I got the address wrong here because maybe so I don't the question is are they built in or are they always in a repo so I'm going to go ahead and try this again GitHub actions uh repo let's try this instead okay that is the repo and so I'm just curious does it show up so it doesn't show up anything like that so that's fine so it's probably built in but it would have been nice to know like can we look it up and see how it works but this one doesn't specify well sorry this is an event trigger it's not an action so that makes sense why it's not showing up there okay I got a little bit confused but anyway what we'll do is we'll go ahead and copy this file I'm going to go up here into our uh GitHub folder and I'm not sure why um but I guess our workflow folder vanished so what I'm going to do is create a new folder here called workflows and I'm going to create a dummy file called um trying to remember what we call it for the dummy file there there's actually a particular file that create when you want to oh keep because it keeps deleting that folder or removing it because it's gone but we'll go ahead and paste that in here and so now we have the schedule tab so the question is how does this work uh so this one is set to work on every uh five minutes so if we go over to let's say cron tab guru.com it tells us some stuff here down below so here it says at 405 next at uh this time okay so it's telling you the next time it will appear but if I go ahead and just move this here now it says at the minute at 5 and then if I do this and this then I get at every fifth minute so this means it'll repeat every fifth minute how do I know well I don't really know this too well but you know you can always just go over to chat gbt and whatever tool you want to do and say give me a Chron expression that only that occurs every 50 minutes only on Sunday and Tuesday and I wonder if it can make it for us there you go so my point is is that you don't have to really memorize Chon Expressions but there is logic behind it so uh that one here is every five minutes so what I'm going to do because I don't want to wait five minutes I'm going to just change this down to like two minutes or one minute we'll do two minutes and I'm going to save this and so we'll commit this all right and all this is going to do is run this every two minutes and then uh Echo out the current uh server time now since this is Ubuntu we we are just running a regular um command and date is something that is available on Ubuntu and that's why we'll print out the date there but we'll go ahead and just say uh add schedule workflow here and just a reminder if you haven't remember to Fork the repo and do this in your own repo Okay so we've committed that and now I'm going to over to the actions tab and so now it notices that the workflow is there notice it because I do not have a name it shows the full name I think we go back here yeah we don't have a name uh there sometimes I have it sometimes I don't but we're waiting for this to trigger so this should just trigger on its own so we're going to wait a few minutes I'm going to pause here and then come back okay all right I've been waiting a while here I don't see anything but let's give it a hard refresh and see if something shows up nothing as of yet this is one that you have to be really patient with because um I just know from experience that uh thought it didn't work and I just waited long enough and then it happened so there could be some time it takes for the server to spin up but generally it's really quick um so yeah again we'll just have patience here um and I'm sure it will appear okay there we go finally triggered it was definitely more than a couple minutes so I was getting a bit worried there but at least it appeared I'm so going to click into here and take a look and you can see it runs extremely quickly so duration 11 seconds um so we can go in here say set up the job so we can see it Echo the current time there it is and there's the job completion now we can wait and see it trigger again I'm not that interested in doing that but what I am going to do is go back here because imagine I want to stop this we can go up to the top right corner and disable the workflow we can programmatically do that as well but for now we're just going to keep it really simple and easy okay so um that covers that and we don't even have to move anything back we'll just leave it alone where it is uh if this becomes a mess then we'll clean it up later okay see you in the next one ciao let's take a look at triggering a single event versus multiple events so this is a single event where we are pushing on Main I do want to point out that I'm using this like expanded syntax or the most verbose syntax I generally use that because I don't have much luck with the uh more Shand syntax but understand you could have just done like you could have done on uh push here and then it would have worked the same because it would have defaulted to the main branch anyway so understand that that is an option you didn't have to do all of that but I'm going to try to use the expanded syntax as much as I can because I prefer it okay but anyway the point is is that when a push on Main occurs then it will trigger that job uh you can have multiple events so in this case we have Push Pull request and release so what happens when you have multiple events well if you specify multiple events only one of those event needs to occur to trigger your workflow however if multiple trigger events for your workflow occur at the same time m multiple workflow runs will be triggered okay so um hopefully that makes sense the idea is that if you did a push a request and releas you might see three runs okay hey everyone it's Andrew Brown and in this video we are going to take a look at multiple events so I'm going to press period on my keyboard and that's going to open this up in event one here uh that we can utilize and so what you can see here is we have on push branches Main and Dev pull request branches main so for this to work we're going to need um an additional branch which is what I want to uh do here today so what I'm going to do is go over here oh sorry that's not our repo uh we'll go back to GitHub here and I'm going to go to my repo you got to go to wherever yours is I'm going to see if I have any branches so I already have one existing I view all branches I'm just going to delete mine all right but the idea is that that uh you'll want to create your own so we'll go ahead and we'll make a new one and I'll call this one Dev and I'm making it off a main okay and so now we have that new branch and so what I want to do is I want to test multiple ends like the question is if we do a push uh to Dev will it work if we make a pull request what's going to happen so we just kind of want to observe what's going on here so I'm going to do is copy this template and I'm going to paste it into our workflows directory all right and the question is what's going to happen right away because we're pushing to main is it going to trigger a deploy right away that's what I want to find out so we'll say um multievent template all right and we'll commit that and I'm going go back over to here and we're going to actions and immediately we can see a run has occurred so we'll click into that and this has happened on push okay so understand that as soon as you have Push main it's going to occur and all this thing does it just says hello world I think there we go okay so now the next question is what happens if we do a pull request let's go ahead and try this um so in order to do this I'm going to need to make some kind of change so I'm going to I'm trying to think here um we'll need to switch branches and do something so I'm going to just go ahead and and close out this tab I'm going to switch over to Dev and I'm going to press period okay and then the next I'm going to do is just make any kind of change so I'm just going to go here and make a space character trigger workflow on dev all right and I'm going to go back to our repo if you click in the the hamburger menu you get back there quickly and we'll go back to our actions and we should expect to see that so I don't see anything yet give this a nice refresh here and what we'll do is we'll check our event so they say multi event we'll go here and I want to look at the code sorry I want to look at the code here and so if there's a push to Dev it should occur right because we have it there so I'm going to do is go back it says found a push 46 seconds ago okay but I don't see a run so the question is did it work is there delay why is it not working um and I don't know so I'm just going to wait wait a few seconds and see what happens maybe it will appear so one thought I had is does the file exist with our change like did we make the branch and then do it or what order did we do it in right so let's go over to our code base and let's go into Dev and let's see what's in here and we go to workflows and we have schedule so no it's not it's not in here so the question is will this template work even though it's not in the de directory and so it doesn't seem like it's going to work unless we merge it in so that's something that we should know because we wanted to work in our Branch I guess we have to have that template in there so what I'm going to do is I'm going to go ahead and make a poll request and I'm going to make a new PLL request and I'm going to go from Main to Dev and there clearly is a change right we've added this here so I'm going to go ahead and create this poll request right and we'll merge the poll request I'll confirm it and what we'll do is we'll go up to actions and we'll see what's happening so notice that it's happening now and this is happening on what so click into this and it's happening on this poll request right so notice we still don't have anything on Deb so now the question is if we make another change here I'm going to go ahead and refresh this okay just in case this is mucked up I'm just going to close this out and reopen it again making sure I'm on dev I'm going to press period And so what I'm going to do is I'm going to make another change trigger event on push of Dev okay and so we'll see inter our actions does it trigger now there we go so just understand that that the template in certain cases will have to be in the branch that you wanted to work on um sometimes what happens when you have multiple events is like I will see two pushes occur when there's only one and I've read that that can be a bug that was resolved but in my experience it sometimes happens so just understand that these workflows can run multiple times so make sure that you're whatever you're running can handle that okay but I say we are done here so what I'm going to do is go over to our code and I'm going to delete the dev Branch just so we don't have that stray Branch causing us any issues here so I'm going to go ahead and delete that which is here okay I think that's deleted yeah and uh we'll go back over uh to actions and I want to disable this multievent thing so we'll go ahead and disable it all right so now it's disabled and I'll see you in the next one one okay ciao hey this is Andrew Brown and we are taking a look at manual events so you can trigger a workflow manually via the GitHub UI uh GitHub CLI or git rest API um for the github's UI I didn't necessarily find a way to do that so I'm not 100% certain if that really is the case but the doc suggested that we could um but this is the way that we would do it uh programmatically so we would say uh we would use the uh CI in this case and we do GH workflow run and we'd have the file here and then we could specify Flags which are their inputs and here this is actually specifying a file for input if you want to do that um as you can see there so hopefully uh that is clear um in order for this to work we have to use the workflow dispatch because it will accept inputs if you are utilizing inputs to uh uh there so just going back here for a moment notice we have name greeting and data here we have name greeting and data and you can Define up to 10 inputs for a workflow dispatch event so there you go hey this is angrew brown in this video we're going to take a look at how to trigger an event manually for this one we are going to need some type of compute as I don't believe that we can trigger uh the event manually via the UI but we will see what we can do okay um just in case we actually can I think when they say triggering manually via the UI it might be from one of the uh predetermined templates but what we'll do here is we'll launch up GitHub Cod spaces it's been a little bit of time since I've used it I usually like using git pod but says this is a GitHub course let's use G GitHub code spaces and so I'm going to go ahead and create one on Main uh there are free tiers for this if you don't want to use this you can use your local machine I just want my life to be easy and I want to have a replicable replicable environment that you can utilize as well so we'll wait for COD spaces to spin up and then we will make sure that we are authenticated I can't remember if it comes preinstalled with the GitHub CLI but we'll find out here in just a moment okay all right so we have our uh code spaces up here I do not like this light theme I can barely see what I'm looking at so I'm just go ahead and change this out um it never seems to persist which is one thing I don't like about get a put Cod spases but than that everything's fine we'll just choose a dark theme does not matter which one and so my question is um do we have here terminal size increase that and I'll go back to command pallet here I you think I by now I know these hot Keys control shift p control shift p no control shift p I'm on a Windows machine with a Mac keyboard in a browser like what could it be uh but we'll go here and try just increase this font size again and again and again so you can just see what's going on here but I want to see if uh the gith hip C is installed it looks like it is um am I logged in I don't know I would think so I can't exactly remember what the test command is let me take a look here and see uh what we could do I really don't remember we say GH issue list maybe that is a command yeah so I'm already logged in so this is perfect if you're not logged in um I believe somewhere in here we have the login instructions somewhere in here I remember seeing it there is somewhere in here let me just find it for you I think it's in the crash course it's uh CLI whoops oh this doesn't use Vim mode yeah here it is so like there's instructions and it's not hard to install but uh again this comes preinstalled so you're going to figure that out yourself again if you're using a local machine but what I want to do is I want to um uh have that installed so that we can trigger uh the workflow so what we'll do is go into GitHub actions and in here we have templates and we should have one for manual there we go let's take a look at it first before we do anything just going to increase the font here so we have workflow dispatch and we have the inputs for name so here's the description and this one is required we have greeting and that is required and then some data now I guess we could do this and have a data file I don't really want to have a data file but if it needs it I guess I should do that so what I'm going to do is make a new file here and I'm going to call this um data. Json and I'll just say in here um hello Mars all right and so that will I suppose be our data file we'll go back here and I just want to make sure everything makes sense and if it references things clearly so I think that is fine I'm not sure what the data file should be I'm just going to take a look at my slides as I don't really remember what we pass into there I guess it's actually just a text file um but in this one in particular it's a base 64 thing so what we'll do is I'm going to change this just say uh my data and I'm going to get some data and we'll take this here for example copy this and we'll B 64 encode it so I think it's um what is it B 64 B 64 en code uh Linux because I can't remember what the command is I'm pretty sure the command is B 64 yeah something like that so I'm going to go here copy this go back I I could barely read that but that says uh this here we'll just say hello Mars in here hello Mars and so that's going to give us this value here I'm going to just copy that if I can copy and then we'll replace this and paste and so now we have our BAS 64 some other things that are going on in here is that um no nothing interesting but this is just using you can see the B 64 commands and things like that so I guess we have our file and and all that stuff is set up so I think we're in good shape let's go ahead and copy this and I will go up to our GitHub actions our GitHub folder here I'm going to go paste that in and you know what just so that you don't necessarily have this I'm going to go ahead and just uh refresh this here for a moment I guess that's fine I ever save this file I don't think so maybe it doesn't matter this one's untracked manual trigger let me go back here for a second so this one here is the same I guess we never Chang anything about this file sorry I thought I changed something about the file and so I I was just trying to make it so that um I wasn't taking out all the the learning out of it here okay but anyway so um that file is there let's go ahead and Commit This so we'll just say uh my or manual workflow I know I spelled it wrong I don't care if it bothers you tough luck and so that should be synced we'll go back over to here we'll give this a refresh and so I'm looking under our actions and I want to see that that is here so it's here notice because it has the name parameter so it says this workflow has a workflow dispatch and oh we can run it so I wasn't 100% certain because I couldn't find it before but I guess it's right here but how would it run this line so say uh hello you I I don't know what it wants there we'll run the workflow and those two ones are required so we'll wait and uh see what happens okay and let's see the contents of the file so notice that there it just says contents of the file because there was no file to be passed along but let's go ahead and now trigger this uh manually so I think I might have um in here have the command so we don't have to look for it here it is and so we have get GitHub workflow run greet yaml um this file is not called greet though it's called schedule or sorry manual and the file is called my data and so I'm going to copy this line here and what I want to do is CD into the correct directory because I'm going to assume that it's relative otherwise it's not going to find the file and so we'll go ahead and paste that in here and hopefully it will work could not create workflow dispatch resource not accessible uh by integration all right so it's not letting us do it this could be a permissions issue so let me go take a look okay yeah so there might be a workflow permission so what we're going to do is go over to here go to settings and on the left hand side we'll go down to actions into General and here says allow all actions and reusable workflows any action or reusable workflow can be used regardless of who authored it or where it's defined um any action or usable workflow defined in the repo uh with exam Pro can be used any action usable workflow that matches the specified criteria so I mean this is fine the actions permissions but then we have workflow permissions so it says choose the default permissions granted to the GitHub token which automatically gets passed we learn about that later on that it already gets passed um uh during during the run but when running workflows in the repository you can specify more granly permissions workflows have read and write permissions okay workflows have read read permissions and repository for Content so it makes me think that maybe we don't have permission so I'm going to go back over to here and what we'll do type in clear and type in uh GH because there probably is a way to add add permission just give me a moment to find out okay I didn't get any answers but I'm going to just assume that we don't have permission to do that let's go back and take a look I'm going to try this again and look at the command because usually the status code will be indicate it says 403 uh resource not accessible by integration uh so 403 I don't that's not not authorized right oh it is forbidden okay so if it is a forbidden one then likely that issues the GitHub token so I want to see if there is a GitHub token here so I'm just going to type in dollar sign G Hub token I'm not worried if you see it because it doesn't really matter um it's going to get replaced every time I think they are shortlived and so what we'll do is we will need to go into our account and I'm looking for that token so we'll go to settings and then somewhere here it's going to have access tokens usually developer settings and so we have personal access tokens so we have fine grin or classic kind of like the classic cuz it's easier to use but we'll use fine grain cuz we're supposed to um we'll generate a new token here and I got to log in so give me a moment to authenticate all right so we'll have to create a token this will be for uh workflows workflow token I want this to expire literally tomorrow whatever the date is we'll say tomorrow uh let's us use workflows and um so yeah public repos read only um I'm going to say for only select repos this will be for the good Hub examples oh I got to switch this over toam proo uh why can't I switch to my other one here I mean I am the resource owner so that makes sense and I'll try this again so let's say exam proo what the heck um and I'm trying again trying to get that token H maybe I can't create a token because it's in an or give me a second see I'm not 100% certain but um what I'm going to do is just say but I need more than read only I could say all repos it's not really what I want um and then we'll go to repository permissions and what I'm looking for here is workflows which is down below here so I think because I have this in an organizational count it's making it a little bit harder for me to uh do this um so what I'm going to do um just for this one I really didn't want to do this but I'm just going to Fork this so I'm going to create a fork um yep and we'll do copy the main branch exactly and what I'm going to do here is I'll have to get out of this so I'm just going to close this out and I can get this out out of here and this out of here and so I'm going to try this again so what I'll do is um I'll give this a refresh and I want to open this up in code spaces again now for my last one I want to make sure that other one's still not running so I'm going to go back to my original one here yeah see they're still running I'm just going to go ahead and I can't tell what's what now this one is reimagine sniffle so this is my old one I'm going to go ahead and delete this and we'll wait for this new one to open and while that is going um did I open this in the right repo see now I don't know okay I'm G to close this one out sorry I'm getting confused I'm G to go here and I'm going to stop this one as well delete it and I want to go over to the omen King repo which is my personal and I'm going to try this again I'm going to go ahead and open in code spaces and I'm go back over to here I'm going to go to settings since that repo now exists I create that personal access token uh specifically for this one and I'm going to go with fine grain permissions even though they're not that fun to create and so I'll wait for that to open and while that's open I'm generate this token we'll say uh workspaces token let me run workspaces another thing I'm wondering is that maybe because that's an organizational account that I might not been able to do that where it's in a personal account I might have been able to do that no problem so before I generate this out I will want to trigger this first um so what we'll do is we'll wait for this to to run here and then we'll try to run it okay all right so uh this environment's uh launched up and so what we'll do is go over back to our GitHub actions I'm going to CD into um that directory and uh what I need to do here is I need to uh run this file so go ahead and paste this in allow um and again the workflow here is called manual H this is fine the only thing that's changed is the data file so it's called my data and let's see what happens so says no default repo has been set for this directory okay that's fair enough uh GH repo set default um Omen King there we go I it's confused because there's two different ones but so now we have a 404 because I spelled it wrong and I realize the font is small let me just bump it up so you can see what's going on here um so say manual enter still a 404 oh you know because in this repo I don't think we copied it over here did we no it is right here um m n u a l m n m u m u let's go back um over to here let's go into our actions there's nothing in here so I have to enable it I guess by default maybe that's the reason why I didn't see it for the first time and so we have some in here um so I don't want uh this and this in here so I'm just going to get them out of here as I just don't want them to trigger I'll just uh push those changes okay so push those just so we're only dealing with one here uh yeah syn it push it come on you can do it there we go and we'll refresh this so now we only have the one right so we'll go back and hit up and try this again and so now it says 403 so we're still getting a 403 so that makes me think that we need a token so I'm going to make a token to have it expire tomorrow I'm going to select this particular repo now um and we'll say a GitHub examples we'll go to here we'll scroll on down we'll say read and write for workflows um whatever the default is I'd like to know what it is this is what I don't like about this it's like it should just tell us well hold on hold on we have update GitHub workflow files that's actually not what we want to do we want to run this but I'll put it on there anyway because we're doing workflows says workflows workflow run artifact so it's actually this that we want it's this that we want um I mean that's all I really want so I don't know if I need anything else to be honest we'll go count permissions everything else seems fine I'm going to generate this token and so I have this token and we're going to go over to here and I'm going to go and set it let's say um export GitHub uh GitHub token and we'll go and paste it in like this I'm going to make sure it's there so EMV GP GitHub and we can see the token is here 11 11aa yeah looks the same more or less I think 11k on the end yes and so now we'll go ahead and try and run this and see if that fixes our issue and now it runs okay so that's what it needed was needed the permissions and apparently we can see the run from here might as well try it if it will let us grab it enter and so we can see um the run in its current state oh I ran it twice oh boy I'm not even doing what I thought I was doing anymore okay great we'll refresh this so it ran twice which is fine but we can see that it trigger we'll click into this and I'm going to just expand this here and I'm really interested in this one to see if it um converted out the contents of the file and it did not oh no it's right here hello Mars never mind it worked great so this one is great we'll go here to actions and I'm just going to go ahead and tell this to disable even though this would only trigger in a manual event um and so we'll call this one done so I'm going to go ahead and stop this workspace uh we go to code here and I want to go ahead and say stop well we'll just delete it cuz I don't need it anymore and I will see you in the next one okay ciao hey this is Andrew Brown let's talk about web hook events so many of the listed GitHub workflows triggers uh are from a web hook because if you look at it they uh show this web hook event payload indicating that it is coming uh from the API so basically what's happening is that um particular API calls are triggering these web hooks if that makes sense what is a web hook a web Hook is a public facing URL that can be sent to an HTP request often requiring authorization to trigger events from external sources so most of these web hooks will be triggered within GitHub when users are interacting with GitHub which will in turn trigger API actions users generally don't have to directly call apis or rest apis to trigger the workflows you can but I'm just saying that it's just you're just going about your business and these are getting triggered uh but what we really want to know about are the external web hook events so if we just about web hook events we're probably talking about the external ones and in order to do this we have to use the repository dispatch uh there are some things we need to know so um in particular which is uh it will only trigger workflow run if the workflow file is on the default Branch so notice here we have repository dispatch and the type is set to uh uh to web hook okay um when you make the request to the web hook you must send a post request uh send the accept type to be application vnd I assume that s for vendor. GitHub plus Json provide authorization your with your personal access token uh pass the event type as web hook so here is an example of a curl and so hopefully we can uh emulate this simulate this using a curl and get this to work but there you go hey this is Andrew Brown in this video I want to um go ahead and Implement web hook events so what we're going to do is open this up in GitHub code spaces I'm going to make sure that I'm in my um I'm trying to decide here because we have the omen King repo because I had to create it to end up using um uh the API so what I'm going to do here just thinking about this I only need a token so I'm going to go over to exam Pro code because it doesn't really matter where I am then uh where I execute that I can use that token anywhere and we probably could have done that for the same for the other one but I'm going to go back to exam Pro C repo you go wherever yours is you're going to not have the same issue as me because you're probably using a personal account I'm going to go ahead and create a new code space all right and I think that I have the code for this already possibly uh most courses I just write this stuff out by hand but uh I was sick so I had all this time to prep everything uh ahead of time so we have something for web hook and I actually didn't run it so I don't know if it works so we're going to experience that together try to get some troubleshooting go here but we'll wait for this Cod space to be ready okay all right so our code space is open I'm going to go ahead and change the theme we're going to change it to dark I'm going to go over to GitHub actions into templates I'm going to go ahead and copy the web hook and we'll see allow we'll bring this over into workflows rightclick paste and I want to get rid of these other three so I don't have any conflicts I'll just delete those out and we'll take a look at what we have for our code here so we have repository dispatch types web hook and then it will uh print out that event so very straightforward we'll go ahead and commit that add web hook and we'll go and deploy that so we'll sync those changes there we go and we'll make our way over to the actions tab we'll make sure that workflow appears and so for us to oh it says ADD web hook why would it trigger if it's not on on the push huh that's interesting I thought it would only happen if we have the web hook in but apparently is still triggering I'm going to try I'm just going to do a test here I'm just curious what would happen if we put a read me in here or like a minor change so I'm just going to do this put a space right does this trigger and we'll give this a refresh uh oh sync the changes okay it triggered again why is it triggering that's really unusual so what I'm going to do is I just want to read up on this maybe it Triggers on push as well and we'll go here to repository Dispatch over here um this event will only trigger a workflow run if the workflow files on the default Branch you can um uh use the G Tye API to trigger an event called repository dispatch but it doesn't really make sense because we never specified well I guess the question is like is it on any web hook because if we say web hook does that mean any kind of web hook will trigger this let me read that for a second okay so here it says by default all repo dispatch activity triggers to a workflow will run oh so then I need a different type of name but I specified web hook so I would have thought that okay well let's make a change then and we'll just change this to whatever we want so we'll just call this Custom Custom web hook and so I'll save that so my question is if I do this custom web hook will this prevent it from triggering because I think that's kind of important to know and we'll give this a refresh here and it still is triggering I don't know if I trust it so I'm going to give it a space here we'll do that again we'll sync the changes and we'll check this again what the heck okay let me read this a bit more then so I would say this is actually very confusing I wouldn't expect this to trigger because it shouldn't but if this is the case I mean the way we could prevent that is by using an if statement so if we look up contexts maybe we can use one of those for GitHub contexts because maybe we can get information about what the name of the um web hook or type is here so I'm just checking here to see if there's a context specifically for um uh the the type that is being triggered so maybe we go into uh GitHub here I'm just going to open this up in a new tab and we have GitHub action so the name of the action currently running um h so there should be some way to do this activity types let me type in types here so I'm not sure exactly how we get that so I'm going to go ahead and ask jgpt how do I get the GitHub actions activity type via a context in GitHub workflows and maybe that will narrow that down for us because I'm not sure exactly which one it is is I don't have them memorized so we have GitHub event name might be the case let's take a look here and see what it gives us so you know maybe that might provide if we go back here oh we actually already have GitHub event name in here okay great so I guess the question is if we go into this and we take a look oh has this been failing oh this has been failing this entire time well that maybe is the reason why it's not working because if it's failing then it maybe this is not even detecting this at all you have error on line 14 I remember this happening to me before and it was like so hard to resolve the no the no problem here so what I'll do that's what's happening oh you know what it is there's a colon missing here okay so I think this probably does work how it's supposed to work I think in like our first video I had that issue or somewhere else and I don't know I had that problem but I must have missed the colon so say uh fix the syntax and so probably wasn't reading this file whatsoever okay so we'll go ahead and sync this and we'll go back and what we're expecting is this not to trigger and so I think yeah it is now not triggering that's what we want to happen okay great so let's go take a look at how we can run this uh so I'm going to go back to our uh readme file and I already have a corl set up so I'm going to go down here and I have to customize it the first thing is the repo so that is exam proo for yours it's going to be different right and then uh this one is GitHub examples assuming I spelled that right I'm using the lower H by accident that's totally fine we will swap that out and so this is what it's supposed to be uh what is missing here is the personal access token we'll go over here we'll generate a new token just for this use case and we'll go down to settings and developer settings and personal access tokens and fine grain access tokens and I apparently have that from last time I'll delete it we'll make a new token say uh web hook custom and this will expire seven days I'm just too tired to do anything about that um and I'm going to choose this repo um the problem is that this is in the exam proo repo that's why we use the other repo because I can't access it this way I can go get a um this token and see if this will work whoa I don't want to delete that that's my uh production one I'm going to go ahead here and generate a new token with the classic I just don't care um and I'm going to see if I can do that with workflows not sure if actions are in here at all think it's just workflows and we'll see if this one works don't care what it's called we'll go down below because I need something that's going to go across account I just need my life to be really easy here today I mean if you want to use the proper one you definitely know how because I showed you um in the last video but I'm going to go ahead and try this and see if that works so we go ahead and copy this and paste this in we'll hit enter and there must be a syntax a here because it's hanging see it's doing that so not sure what it is I'm just going to cancel it out you know what it is I'm missing a double quotation here on the end and we'll try this again I'm really hoping that we don't have to go back to our other repo okay so maybe it worked we'll go back over to here give us a refresh um well this failed a moment ago so I'm not sure if this is related maybe it's still not working there's still a syntax error saying okay so we'll go back to here and on line 16 it has a problem not sure what I don't need to check out the repo so what I'm going to do here is just take these two lines out we'll just say uh try again I only want this I don't want that this has my uh token and I don't want to commit that and so we'll sync this here I don't want to commit that are you not listening to me here today I'm going cut this out I just don't want this to compromise my key we'll discard this change here discard okay CU we always grab it from here um I just want to see what changes it's going to sync please sync the changes thank you um I'm just uh worried that I might have committed my keys I'm just going to double check here oh we changed that back at least and I mean is that do split here what is that what I just pushed oh no try again is the real commit there we go and yeah so that one's more simplified let's go take a look here in actions it's still failing okay great so what is our problem uh line 14 line 14 it's always line 14 let's go back over to our repo here and we'll take a look again and it has a problem with this line I cannot tell what's wrong with it but sometimes this happens so I'm just going to take all of that out try oh you know it's not indented one two try again times two and we'll commit that and we'll say yes we'll go back we'll go to actions and I'm hoping that it doesn't show up I'm going to just wait a minute or two here and we'll just make sure that it absolutely isn't triggering okay just give me a moment all right so I don't think it's uh triggering again so that that means maybe there's no syntax problem and so what I'm going to do is go back over to here we just get this out of here and uh did we not commit something here did I what I thought I committed the change all right um make sure we commit this like am I missing something here oh outo it hasn't even gone anywhere come on go go leave oh please tell me oh no no and you know the thing is like I could take this I could bring this over to something like uh yaml linter that's what they say take it over to yaml linter and try it again and it will tell you whether there's a problem now that That's Just Junk um I almost like entered it into some kind of junk site and we say format or validate oh it actually is showing an error oh uh incomplete mapping pair okay well what if I do this what if I do this what what if I do this why okay whatever if it fixes the syntax here that's all I care about but you've seen me do this multiple times having an echo not doing that but it must be having a hard time and it is not copying copy okay that's a frozen file try this again paste this commit should not trigger a deploy you can see a lot of the struggle with uh GitHub actions is just yaml but that's not a bad thing like it's so fast and responsive and so I'm not seeing it triggered now excellent okay great so now what I want to happen is to take this or just hit up I guess on my keyboard and try it again I want to go back and see if it triggered and it did excellent so I was able to use the classic token um which was a lot easier to work with sorry I know we're not supposed to use it but I did I'm going to go ahead and delete this one and uh go back here so that triggered no problem we'll go take a look at the response to dispatch my other thought that I had was like if we had the GitHub event name and we printed it out it didn't even print it out just printed out GitHub event name oh no it printed out here never mind right here okay great um maybe we could have used an if statement to limit it but apparently it just we had that syntax here but yeah that one was a little bit trickier but I guess we can call that done so what I'll do is go over here and I'll stop my code spaces and I will see you in the next one okay ciao let's take a look here at conditional keywords for steps so if you have a job you can have an if statement and it is a conditional that can be used to prevent a job from running unless the condition is m so in this example we are using the GitHub context GitHub and we're doing do repository and seeing if the repo equals the same um you always must use the dollar sign double curly expression syntax if you want to reverse the um statement so if you have an exclamation mark you can do that here we have a function which is for Expressions which we'll talk about separately but yeah there you go hey this is Andrew Brown this video we're going to take a look at conditionals uh so I'm going to hit period on my keyboard here and I'm just going to open this in another tab I meant to keep a tab open so we can make our way over to the actions tab and so what I want to do this time is run a conditional so I think I have one here all right so I'm going to go ahead and copy this one and we'll paste it into our workflows directory and it's very straightforward the idea is that if this repo equals this then say hello world if it's not say goodby Moon so we're going to launch this one even though this does not match our repo name and so we're expecting only goodby moon to execute right so we'll go ahead and say conditional and we will commit that we'll go back over to here and we will see if that run well it will run but the question is what will it run so usually it's pretty darn fast here and we'll expand it and we get good by Moon excellent so let's go ahead and type in exam proo GitHub examples we'll say uh conditional um uh modified and so we'll wait for that to complete all right let's take a look here to conditional uh modified and we'll see Hello World and goodby moon so they both ran as we adjust the name so that is all we wanted to do here I'm going to go ahead and go to this uh example which is example workflow that's a terrible name for this one we'll go ahead and disable that workflow but yeah because it should have been called conditional so we know what it is but uh there you go and I'll see next one okay ciao let's take a look here at Expressions which are uh basically functions that you can utilize uh within your workflows that are built in um there is other things besides just functions but I think these are the most important so that's what I want to show you the first are basically mostly string functions but we have contains starts with ends with uh format if you want to change the format join if you want to join the string to Json uh from Json hash files so all that stuff is pretty straightforward maybe except for hash files but that just makes a hash of files um and then you have status check functions whether things are successful or not uh so hopefully that is clear and we'll see you in the next one okay ciao hey this is Andrew Brown in this video we're going to take a look at Expressions so this should be pretty straightforward I'm going to open this up in a new tab I'm going to press period for uh GitHub action so we can see what they're talking about uh so I didn't cover everything there's like literals and operators U that stuff is pretty darn straightforward uh so I was mostly interested in the functions and check fun functions I don't think we talked about object filters as I didn't have much reason to utilize those but if I find that it's on the exam then I might come back and uh mention that but you can see it's pretty straightforward you just have a wild card and some other selectors there but anyway let's go back and take a look at our function so you can see these are all the ones I just pulled it in a list and showed it to you the ones that are kind of interesting are these status check functions uh where you can use them in the if statements and that's where they're going to be mostly valuable because it's whether it's success or cancelled or always or failured so anyway we'll go back over to here and I should have one I've never ran it but uh you can see why there's so much stuff in here but I've never ran it and we're going to experience together whether this thing works so go ahead and paste it um into here and before we do I just want to make make sure yeah those are disabled excellent um you know what I might do is I might just get rid of these other ones here for now we'll just go ahead and delete those and we'll go over to here and add them and we'll just say Express function example and this one here will happen on Main push and I don't know why I have these in here let's take those out cu I only really want them on this one just take that out and we'll give that a go oh didn't add it come on I don't like that because then it's like I might end up having two runs we'll go here we just have one run okay that's fine so we will wait for that to oh it already failed let me get syntax here of course there's a syntax here we'll go to line 25 and I think I kind of learned from last time a mistake so I'm just going to go ahead and copy this go to the yaml lter and let's go to one that is not a um spam spammy one and we'll paste it in here we'll say validate and it does have an issue here on this line on the labels part okay so at least we know there's something wrong with it what did it say which line uh issues label I guess that makes sense why I might have the issues in there but um this one here I guess I should put the issues back in here if we're going to do that but it has an issue with this line here what doesn't it like let's put the single quotations around it will that correct the issue sometimes it needs that oh still doesn't like it what's the issue now um bad initation of the sequence on line 27 well I wasn't wrapping it though line 27 so I think this one's fine we'll give this a go try this again still doesn't like it line 24 just give me a moment okay you know what I'm not really sure what its problem is but what I'm going to do is I'm just going to remove this issue one it's not like we need to run all of them I mean you have an idea of how this stuff works so we'll do that and I think that was the only one with issues and that's all I wanted that one for anyway so we'll go ahead and we'll just try and fix Expressions here notice like most debugging issues is going to be just yaml files there's something stastically I'm not picking up which is weird because I I know yaml really well um but uh I'm missing something and we still have a problem on line 24 I hate this line 24 nonsense um I'm noticing like like that these are are looking a little bit different so what I'm going to do I'm just going to do this on all of these here and see if that resolves our issue and I'm just going to keep doing this what is its problem there has to be something that's mucking it up and I'm thinking it has to do with the dollar sign double curlies is what I'm thinking so like if I was to take these three here or these four here and dump them on the bottom but these still need to be at the bottom because I want them to happen last right um this is frustrating this is really frustrating I wish we had a better linter um what I'm going to do I really don't have to install a linting tool here though can I let's see there's like uh yaml please tell me there's a yaml one in here this is yaml we'll try that I'm hoping that like maybe it will tell us if there's something wrong there we go now we're getting problems uh nested mappings are not allowed in compact mappings nested mappings okay so it's I think it's getting confused use what in what is happening I'm going to put doubles here I guess and then I'm going to try to put exclam uh like uh back for slashes like that and maybe that will fix our issue oh and then it even has them over here as well okay then we'll do this one and so I'm hoping that fixes the issue but uh let's see here name here missing property uses why does it need uses all right um oh I guess it should do something you know what we should say like I have to give it a run so just say uh we'll say Echo success or Echo failure uh we don't need a coal in there that makes no sense there we go and so maybe that will fix our issue expression function I'll go ahead and commit that and hopefully hopefully hopefully hopefully no syntax error fingers crossed there we go at ran we'll take a look here and we'll click into it and you can see all of them working so you know contain start with ends with echo or sorry um format whatever whatever pretty straightforward um if you want take a closer R of that but I'm going to call this one done we're going to go ahead over to our actions I'm going to go and disable this for now and I will see you in the next one okay ciao hey this is Andrew Brown and we are taking a look at Runners so Runners determine the under line compute and Os that the workflow will execute on the runner can be GitHub hosted where GitHub is providing a predefined runtime where they have standard size which comes with Ubuntu uh Windows Mac OS then there's the larger size this is only available for orgs and Enterprises using GitHub teams or GitHub Enterprise Cloud plans which we are not going to touch but I just want you to know that it's there they might even call it premium I don't know there's not cons doesn't see with the naming here but it has more RAM CPU and dis space and it comes with a static IP address and the ability to group Runners and auto scaling to support concurrent workflows then we have selfhosted this is external compute connected to GitHub using the GitHub action selfhosted Runner application you create custom Hardware configurations that meet your needs this is when you'd want that um the way you specify Runners is with the runs on command if you specify an array of strings or or variables your workflow will execute on any Runner that matches all the specified run on values is that confusing yes but apparently it works anyway let's go take a look at the a more direct comparison and I don't know why this one is like that sometimes PowerPoint just does this to me like this weird stuff but let's take a look at this uh comparison of these two all right so we have GitHub hosted Runners and selfhosted Runners and uh I'm stuck on my Eraser so let me just get back I don't want a pointer I just want nothing there we go okay great so let's look at the comparison so between setup and maintenance GitHub hosted Runners no setup required fully managed by GitHub selfhosted Runners requires manual setup maintenance because you are the one setting up the compute uh the cost is free with limits on usage uh charges for extra minutes for selfhosted runners no cost for runners infrastructure cost applies for scalability GitHub hosted Runners on ly scales based on demand selfhosted you manage the scaling CU you manage the compute the environment controls are predefined environments for GitHub Runners uh but they're limited with selfhosted Runners you can do whatever you want because you are running the compute guess what for OS is you have Windows Linux or Mac OS for selfhosted you can pretty much do whatever you want though I think that there's probably some limitations but um cuz I could have swore it was like Hey you have to do this but it's mostly the same thing Windows Linux Mac but I guess the other thing is like when you're using GitHub hosted Runners it's like Linux huntu but what if you want to use a different variant of Linux GitHub hosted Runners for security secure but but runs in a shared environment selfhosted uh it's whatever you're doing because you're the one running it performance fix performance capabilities for selfhosted it's whatever you choose it to be uh GitHub hosted Runners access to for internal resources limited uh unless using selfhosted Services um if it's self hosted it's in your network you can do whatever you want um uh customization is limited in the GitHub environments for GitHub hosted Runners for self hosted you can do whatever you want uses limits there are uh limits and quotas and then again selfhosted anything you want so hopefully that makes it clear selfhosted is do what you want for the most part okay hey this is Andrew Brown and in this video uh we're going to take a look at gith GitHub uh host Ed Runners so we're going to change it to be something that it normally isn't usually we use a bunto latest every single time um but I'm going to go ahead and press period before I do that I'm going to open up actions tab we'll press period and I'm going to want to copy over um to in here I have a Windows and a Mac one so somewhere in here we have Runner Mac OS Runner Windows cuz those are two that we have yet to do and we'll go ahead and paste them in uh lucky for for you I made sure that these work uh prior but um let's take a look at the Mac OS one so here we're saying Mac OS latest sorry I had a scam caller um so for Mac OS here we can see that we are checking out a repo we are creating a swift file we're installing Swift linter and we run the Swift linter and then we compile Swift Code because Swift is something that you would expect to be on Mac okay for the windows one we have um Windows latest I'm not sure why this is on the poll request we'll take that off of there it doesn't need to be on there not sure how that got there and so here we're installing um via Choco Choco is like Homebrew for for Mac we're installing Powershell if it's not there and then we have a Powershell program no it's actually dot I don't know installing well I guess it's specific to to um to Windows so it makes sense that we would use choco to test something here but anyway here we would um add content uh add content this is a net program that's what I meant to say a net program and then we run it and then over here we are using um poers shell they're running it so all this stuff is very particular the only thing that I'm noticing here that is a bit different is this here the shell command so I don't know if we actually ever cover that if I haven't I'll have to do that in a separate video shell GitHub command I don't know how I missed that but clearly that's changing the shell so oh yeah I think I actually skipped the slide for some reason but anyway um not this in particular but I'm thinking now that I probably missed that I'll have you won't notice it'll be in the course but um here it's changing the shell to be power shell that makes sense anyway so what we'll do is um we'll bring these two over all right so we'll just say runners or Mac OS and windows and hopefully they'll work the first time around and so we'll push that we'll go here so what could running Mac and windows ones be useful for well of course if you developing apps for either of those but like let's say You're Building yeah that's what it is like you're compiling apps uh like it could even be mobile apps I suppose but anyway we will wait for those to run and see what happens okay all right so let's take a look at these runs so we have the windows one and the Mac one actually I can't tell which is which because they look very similar um oh this is the windows this is the Mac okay so we'll go into here and we'll take a look and it's fine it passed great see it compiled it cool and we go into our Windows one and um you can see that it ran okay so everything is good and so that's all we want to do there so we'll just go ahead and disable these and that is our example for running Mac and windows and I will see you in the next one okay ciao hey this is is Andrew Brown and we are taking a look at selfhosted Runners we did talk about them but we didn't talk about how we'd actually utilize them so selfhosted Runners can be physical virtual in a container on premise in the cloud wherever you want them to be uh you can add selfhosted Runners at various levels in the management hierarchy at the repo level the org level the Enterprise level to set up selfhosted uh you need to add a runner and install the GitHub actions Runner to connect the external compute to the selfhosted runner so here uh when you go and create one they'll give you the steps here to do that and so we'll have to try that out if you want to know more about the runner itself the GitHub actions Runner they got a repo there that's this nice little logo but we'll actually take a look and see if we can make our own selfhosted Runner hey this is Andrew Browns and in this video we're going to take a look at selfhosted Runners so I'm going to go over to our repo and I feel like we're going to need compute for this one I can't remember if I have a template for this let's go take a look uh before we jump in and so I might have one self host I just want to see what we have in here um it's a very simple script so yeah it's something that we'll utilize um what I'm going to do here is go ahead to code and we will launch up code spaces for this one which opens up in another tab which is nice and we will wait for that to provision as that is going we we'll go here the left hand side and we'll go to Runners uh I think this wasn't here just a second ago so maybe they just added a feature while we've been working we go to self Runner we can add a new Runner and we'll go here I get to it took us over to our settings page here in our org and we'll go and set set new now I assume that this can be done at all levels if you don't see it then maybe it needs to be an or level sorry I don't know anyway the point is is that I'm going to just show you how to create that stuff frer and we have a few options we have Windows Linux and Mac OS I'm going to go with Linux here today and um so the question is can I run it in GitHub codes spaces I'd be really curious to see if that works what we'll do here is we'll just wait a little bit for this to provision and we'll try it out I'm expecting this not to work because we are in a codes spaces environment but uh if that doesn't work I can always try my local machine we'll figure something out okay and actually while we're waiting for that we can go over to the GitHub actions Runner it GitHub actions Runner uh GitHub and maybe we can just read about it a bit Yeah GitHub actions Runner the runner is an application etc etc um I'm just curious about the PRX because I don't think I looked into this so here it's supporting very specific uh distributions so we have a lot of options we have to install the net core Linux dependencies whoa um we need a full list uh dependency so it looks like it's pretty involved so I'm not sure how I'm going to install this in code spaces also it doesn't talk about like any kind of communicational things um the config sh will checknet core three times dependencies during the runtime so what we'll do we'll just try it I'm not saying it all work but we'll try it and we'll see what will happen if we uh go ahead and configure this it's not that important that we get a working um selfhosted Runner it's just more going through the process and learning it okay so if we quit here and it doesn't work that's totally fine so what we'll do is we'll go through each step and we'll see what happens so the first thing is we want to make a directory uh so we'll do that and I'm just going to CD it doesn't matter where we CD I was thinking like in we're in git pod but we're not yeah just to make it not a messl CD back One Directory all right so we ran that line and um I'll copy the next line here and hit enter and we'll go back over to here and I'll grab the next line use the copy button I guess and hit enter I mean see pretty straightforward and we'll copy this one and we'll hit enter is that going to work is that going to entire or is it just really big I guess it's working LS um yeah I guess it's doing something we'll go back here now we'll configure and notice that there's a token here so I'm assuming that's how it knows what to do is because of that token but you know again I'm going to assume that we don't have the PRX on this machine or oh connected to GitHub there we go enter the name of the grp uh runner group to add this to the runner we'll just hit enter to go to the default enter the name of the runner uh we'll call this um Enterprise I guess I don't know the runner will have the following labels as the default add any dictional labels we'll say Enterprise and so we uh enter the the name of the work folder what is the work folder is it where it's going to perform the work uh we'll just hit enter for work I suppose there we go um so that is done okay so we should be able to use it now it just seems like there should be more to it but apparently that's all we had to do if it works that's great if it does it I don't care we we at least saw the the setup for it so we'll go over to our GitHub actions and we will go into our templates and we'll go down below to selfhosted and this looks pretty straightforward uh this is set to selfhosted we'll go ahead and copy now we could probably also put the other label there if we don't want to have selfhost and say Enterprise I'm just going to have it as selfhosted we'll keep it simple and then we'll go here and paste this right in here paste paste paste paste paste and we'll go over to here and we'll just say commit selfhosted Runner still I'm not sure how this would work feel like it can't it can't be this easy there's no way it never is this easy but um I guess we'll find out so got to get back to our repo all right and we'll go over to actions and we'll go to commit selfhosted Runner and we'll click into this and this is what usually what happens it'll say waiting for a runner to pick up the job and so I don't see how this could work because none of the ports are open so I think that um if the ports were open and again it doesn't say what ports have to be open so I'll go ahead and say selfhosted networking Runner like how how would it you know what I mean Network yeah so we'll go to communication between selfhosted Runner um the cell phones that run connects to GitHub to receive jobs you must ensure the machine has appropriate network access to at least 70 kilobits uh connection between the cell phon and GitHub has to be open on Port 443 so I don't think this is going to work um but it is interesting to see that and I think we kind of satisfied what it is that we wanted to see you'll notice that it just it will never pick up the runner here so I'm going to go cancel it out feel like it be a lot of work to get this to work on my local machine another thing that we could do is we could go over to uh let's say AWS or anywhere and try it there um we could do that but then we might have to configure a bunch of stuff so I would just say for the scope of this exam I think that we learned what we need to know or certification um and if you really want to go full full on on this you can do that I'm just trying to make your life a bit easier here today but I'll see you in the next one okay ciao hey this is Andrew Brown and we're taking a look at workflow Cod command so actions can communicate with the runner machine to set in Nars output values used to buy other actions add debug messages to Output logs and other tasks so here is an example where we're using the Run command but what's interesting is the fact that we have this do GitHub uh path which we'll talk about next about these uh special envs um so the idea is that we have the set EnV vars which is if you have this GitHub EnV environment variable you you can add things to it um and then it'll be available in all your other steps we have um adding things to systems path so this will be in the GitHub path we have setting output parameters so here if we need to output something then you'll see it will show up as outputs and we have creating debugging messages so uh there is that uh what else do we have we have uh group log messaging uh we have masking values in logs so notice we at add the mass so if it echoes out the secret it won't show it um stopping and failing action so we can tell it to error out at this step so there you go hey it's Andrew Brown in this video we're going to take a look at some of the workflow commands that we can utilize I don't know if I have a script for this we'll hit period here and open up the GitHub examples repo I keep working with and uh what we'll do is take a look here and see maybe if I have one I could have one in here I didn't make uh something for everything here um I don't think so that's totally fine because it's our opportunity to finally uh create some scripts by hand so I'm going to go ahead and uh just delete these ones out of here I'm going to make a new workflow script I'm not going to give you this one so that you have to do a little bit work yourself as you should learn how to write this stuff by hand so we'll say name and we'll just say workflow command commands and then from there uh we have is IT jobs and we have our job already forgot what it's supposed to be jobs yeah the name of the job so we'll just say uh my job all right job and then we'll say runs on Ubuntu latest so we'll try a really easy one first and uh what I'm thinking here is that we can have a steps and and this will have a name and we'll just call this a group logging we'll try this one first so here we'll do this if you don't know this uh pipe this is when you want to have a multiline each line is treated as a new line in yaml that's not specific to get of actions it's just a yaml thing so we'll use this group say my group message and then we'll end the group down below and we'll say msg1 msg2 all right so we have um all of those in there it's not runs it's run and so I think that this will work as our initial one so we'll go ahead and try this and just say workflow command oh we actually have to tell it how it's going to do it so we go up here and just say on and uh we'll just put in push here yeah I like to use this expanded format but not always doesn't always matter so we'll go ahead and do this and we'll just say yeah workflow commands example and it looks all good to me and we'll go ahead and commit and push it and I think I can go here yeah open the repo here we'll go over to actions and then we'll see if that executes yep did group logging there we go here's our group cool whatever all right so we'll go back to here and I'm just trying to think of ones that are actually valuable that might come up um I think like set and bars is a really good one to have so what I'll do is um let's we'll have like a like one step here and another step there so this one's fine but we'll go here and just say uh you know step one and then we'll have step two and I'm just going to uh clear this out and clear this out you can always do that like if you always want to have on a new line you can always do it this way I like to do that quite often and we'll just say something like my uh Val hello and the idea is that we will then add that to our the the GitHub EnV so the idea is that this uh value my Val should be now accessible down here um so I would imagine uh we could probably do Echo and then say dollar sign my Val and we'll see what happens here so hopefully that works um but that looks fine to me GitHub EMV all spelled correctly so we'll test in nvar in other steps all right we'll commit that looks good we'll go back over to here and hopefully it works we'll just wait for that to work all right so we'll click into here and we'll go into my job and we'll check step one so we shouldn't really expect to see much here it shows that it ran that file go to step two and it echoes it out so I think that is sufficient uh for run commands obviously there is more than just those ones like GitHub path and output and other things but I think this is uh good enough um and so we'll call this one uh done okay so I'll see you in the next one ciao we are taking a look here at workflow contexts which are a way to access information about workflow runs variables Runner environments jobs and steps each context uh is an object that contains properties which can be strings or other objects in this example we have a context called secrets and it's giving us access to our uh sensitive uh variables that we want to pass to our workflow let's take a look at all the contexts that we have the first being GitHub this is information about the workflow run we have EnV or environment which is about environment variables that are available we have vars which are uh you can think of them like environment variables but they're variables that we were passing in to our function that might not be necessarily sensitive we have a job which is information about the current running job jobs and this is specifically for reusable jobs or workflows sorry uh information about steps a runner I'm not sure why I have a capital R in there but it's a runner secrets for Secrets strategy for the Matrix execution strategy which we'll talk about in another video and then Matrix which contains the Matrix properties defined in the workflow uh oh and needs and inputs and the difference between needs and inputs I don't know why they don't call this one outputs but needs is outputs and inputs are inputs but there you go hey this is Andrew Brown in this video we're going to take a look at context so uh what I want to do is just pull up context GitHub so you can see how you would look them up and so here they all are and if we want to know what we can extract out of them let's say uh the GitHub one we can click into it and it will tell us individually about the things that we can grab so what I figure we could do is just create a context and get some information so um I mean that's not really one that I want that's not a really good example but let's go ahead and uh write our own file so we actually haven't been really writing from scratch uh which is really unusual for me I usually almost do everything from scratch uh but uh any templates for for this but I'm going to go ahead into workflow here we'll make a new one we'll call this one context. yaml and in here we'll get set up so the first thing we'll need not that I remember how to do things from scratch we'll say name I'll just call this one uh context examples this will be on push all right and from here we'll say jobs and we'll just say my context doesn't really matter and we'll say runs on and we'll have this run on to buntu latest and then we'll have steps here and then fur this we'll just say my step and then we'll have our run and so the idea is that we need to uh get these contexts so what I'm thinking here is I think it's like Echo and we'll see hello world hello and then I think it's like cures and then it's GitHub dot action so normally like we used an if statement here you can see that it is used up there but I'm just trying to think of like how we would access it down here I'm just trying to think of like can we into interpolation like this give me a moment I'm not sure about that but in our example we have an EnV here and we set it this way so I'm going to try that and see what happens so what we'll do is we'll just say EnV I'll just say my action and then we will try it this way say GitHub doaction and then we' say my action and we'll see if this works before we uh test that let me just double check make sure we got it right there we go so I'm hoping that this might work um so we'll give that a go attempt context workflow and watch it's going to be like syntax error we did something wrong syntax error I'm just always getting syntax errors that's why uh the other thing is like this one appears under the run so I'm going to put this actually here sorry like in this step here so I think this is actually correct and yeah Stage IT yep and we'll do that did it already push it I didn't ask it to push it if it push pushed it it's totally fine but we'll go here I'm going to go to our exam Pro Co examples and we'll go over to actions and there's nothing in here what what you talking about I got two workflows in here examp examples oh sorry GitHub I don't want a new action we'll click here and so it is attempting to run which is good it shouldn't take that long to run so that's not a good sign uh so we'll click into here and we'll take a look and see what HP is happening waiting for a runner to pick up this job and so I think the issue yeah if this happens and it hangs it's because I have a problem with uh with this I I probably made a spelling mistake U buntu that doesn't look right to me looks like o boo new to so we'll go ahead and try this again by the way there are questions in the exam about debugging so that's why I leave this stuff in here and it's just kind of sprinkle through the court that's why I got to do all the labs and so I'll go here and uh because this is failed we'll just cancel this workflow it's never going to finish um and we'll go ahead and say fix the runner and we'll go ahead and commit that all right and we'll go back over to here um so that one was canceled obviously and so hopefully this one will run yeah it completed it says hello underscore uncore run I mean that seems right to me so I might want to pick a different context there GitHub uh GitHub context actions sorry I just want to have confidence that it's 100% right here so we'll go back into GitHub yes it says for the first example the first script you will run will have the name underscore run and the second script will have run to okay so that's probably right um the username of the user so I'll just do one more here just to have 100% uh confidence let's say my actor GitHub actor like that I don't know if it needs spaces in between here we'll just match the syntax we'll just say another attempt at context okay I spell context wrong totally fine they don't care and we'll wait for this to run and looks like it's ran excellent we'll go down to here uh well okay I'm sure this would have worked if I actually had add the echo in there so go down here and just say hold on so we'll go here and just fix this we'll just say action it will say actor my actor like this uh should echo or should print the fars or whatever we want to call that we'll go ahead and do that again we'll make our way back over to here to actions and we will wait for this to work okay and so I'm going to just drop this down here and so we have uh actor run actor it didn't show me the name of the actor oh you know what you have to spell it right for it to work this is frustrating I'm so sorry we'll try this one more time we'll just put some stuff in there and we'll go back to here and maybe this time it will work so it says it's done we'll take a look we'll click into here and yeah it has my username so that is now in great uh condition here so we are in great shape and I will see you in the next one before we do sorry I should uh just go ahead and we can go disable that by the way you can pin I'm not sure if that ever show an the exam but you can pin these workflows anyway see you in the next one okay ciao hey this is Andrew Brown and we're looking at dependent jobs so a workflow run is made up of one or more jobs which run in parallel by default to run sequentially you can Define dependencies on other jobs using uh the jobs. needs or if so here uh we have an example of us using the needs so it says job two needs job one to complete and then on the other side we have the if with the needs so you use it in combination to say um always uh if always which is not a really good job because that means it's always going to require that always needs job one and job two um so there you go all right so in this video we'll take a look at dependent job so what we'll do um I'll open this up in a second tab the actions tab we'll hit period And I think I have a template for this one I'm not sure if it's not good we can always rework it but I think there is one here four jobs I don't see one that's totally fine I don't care if we have one or not so we'll go ahead and just make our own so just say new file I'll call this one jobs yaml all right and we'll just say name job dep jobs example all right and so this shouldn't be too complicated uh we want you to say um on and we'll just make this on push as per usual I don't know if I disable the last one I just don't want to have a job on here and this one runs so I'm going to disable this there we go okay so um yeah that one's disabled we'll go back over to here and we now need to Define our job so we have jobs and we have job one and job two so the idea is that um uh job and we'll do them out of order just so that we can see how this if it'll do this in the order that we want so we'll do job two up here and job one down below and then the idea is it will say needs job one to complete and so now we need to uh put something in this so we'll say steps uh this will have steps and do we give steps names no it's just that okay great so we'll go ahead and type in Name colon we'll say uh step one and then over here I'll just say step a and step B step a step B and this will just be run and this will just be Echo hello and this one will be world and so well this one's the first steps I'm going to call this one hello this one world and so that should be okay I'm not sure why it's giving me a problem here runs on oh yes runs on so this would be within the job runs on on to latest and then this one would be down below here so let's go ahead and give that a test so jobs uh workflow example and we will push that we will make our way over to here and hopefully we don't have any issues so we'll wait for that to see if it works there we go and so that one has completed but did it do in the order that we want job one to job two so notice that it's showing uh the relationship between it so that is really cool I like that um so that is nice now the question is if we didn't have that depends so we see this visual with this this pipe in between but if we didn't have that depends what would we see right that's the question so go ahead and do this and try try again without the depends okay and just remember what this looks like job one to job two and then we'll go back to actions here and we'll take a look and see what happens and noce now just kind of group together we'll let it finish and see what happens there we go okay and so yeah uh that's pretty straightforward so you get kind of a visual thing and I suppose that could get pretty complex uh depending on what your setup looks like but I'd say that is good enough for now and um I'm going to go ahead and just disable this and I will see you in the next one okay ciao hey it's Andrew Brown and we are talking about encrypt secrets so encrypted secrets are variables that allow you to pass sensitive information to your GitHub action workflows secrets are access via the secrets context so that's Secrets do and then whatever you want your secret is and it has a few different levels we have the organizational level the repo level and the environment level what you need to understand is that the lower the level the more it overrides the ones from the top level so if you have a secret called hello at the organization level and one at the environment level called hello the one at the environment level value will overtake secret names can only contain alpha numeric characters underscores no spaces so that example there would be the the case you can't prefix it with GitHub in all caps with an underscore names must start with numbers sorry I felt like a rumble in my office and that's why I paused uh I think there was just a big train that went by anyway sorry about that um H there we go names are case insensitive names must be unique at the level they are created at people don't know I live right beside a train station and my office is in a shed uh behind my house and the idea is that I have multiple layers to avoid from the train but sometimes there's nothing you can do about it uh but anyway so we have passing Secrets as inputs so you can pass Secrets as inputs by using Secrets context so that is an example there um but I mean like the point is is that you know you could interpolate whatever you want there to pass it into a custom action and we'll talk about custom in another video you can pass Secrets as Nars so that is another way that you could uh do that and why would you do um inputs versus Nars it just really depends on uh your use case so maybe you have something that is uh a program you're using and it can only use nbars whereas uh with Secrets it's okay to do that on left hand side because of the the way it works but I just want to point out here we did this in another video but if you want to make that an Nar you'd have to map it like that I think we did that for something earlier but uh hopefully you know what that is talk about how you set a secret so you can use the GitHub CLI so we have GH secret set which is probably how we're going to do it then we have GH secret set for a specific environment or at the or level so depending on how you do a flag it's going to be different the default apparently is repository and you can also specify the repo which we have here you could do that up here as well if you want to uh but there you go hey this is Andrew Brown and we are taking a look at configuration variables these are variables that allow you uh to store nonsensitive information to your GitHub actions workflow so it's basically the same thing as Secrets except it's for nonsensitive information it uses the vars context so it's going to have very similar structure we have organization level repo level and environment level secrets uh and as per usual lower levels override the higher level ones um I wrote secrets in here but I meant to write in um uh right here vars or configuration variables because it basically has the exact same settings uh what's different is the CLI command so here you can see well it's get variable set I guess it's the same as Secrets you're just supplying the word variable instead of secret um at the time of this it says that this is a preview feature I guess that they might release it out um but I'm putting it in here because it seems like something that would happen in the future um and there there is a lot of content that it's preview but shows up on the exam so I imagine preview means they intend to uh release it so it's in here okay hey this is Andrew Brown and we are taking a look at default nbars so nvar obviously stands for environment variables these are ones that are going to be set for you uh by GitHub uh that you can access uh within your environments uh in your work workflows so we have CI the GitHub actions the G actors a bunch of these ones a bunch of those ones and you get the idea these are pretty straightforward but I just want to show you how many there are and then we Show an example of how you would go and access those and we already do use some of them in the course so it's pretty straightforward uh what those are okay hey this is Andrew Brown let's take a look here at setting custom andv bars so you can define environment variables in line with your GitHub actions workflow uh so you can set the workflow level the job level and the step level um when I took the exam they didn't call the top level work level or workflow level even though that's what the docs called it in fact they gave me a multi select where the three choices for the top level or workl level was top level uh runner level or environment level so I'm just going to tell you that the exam can be really frustrating and so you just have to take your best guess um and even I can't uh figure it out so it's just the nature of uh the way GitHub writes their exams Maybe will improve in the future um notice that if we are using bash uh with Linux we're just calling the environment variables because they're now available so hopefully that is clear um you can also uh use EnV contacts so let's say you had to make an if statement you could access it that way so there you go hey this is Andrew Brown we are still taking a look here at setting Nars but this time it's with workflow commands so you can dynamically set Nars during the execution of your workflow using GitHub EnV um so the idea is that you will uh pass the values you want I'll just get my pen tool so it's very clear but notice you'll using using Echo you're going to make a string and you're going to set uh the environment variable and this and the uh value you want and then you're going to send it over to here and then you'll be able to access it other places so uh there you go hey this is Andrew round we are taking a look at the GitHub token secret so at the start of each workflow job GitHub automatically creates a unique GitHub token secret to use in your workflow you can use the GI up token to authenticate uh in the workflow job uh sounds a bit repetitive there but let's take a look here and see what we're talking about so I'm going get my pen tool out so it's very clear um and what I want you to see is that we can say secrets. GitHub token and we can get that GitHub token I also believe that we can do dollar sign GitHub token for uh environment variables and it will show up as well um if not we can just map it over as we are doing here if you notice here we're doing that um when you enable GitHub actions GitHub installs a GitHub app on your repository the GitHub token secret is a GitHub app installation access token so hopefully that is clear you can also use it with the rest API so here's another example and notice we are calling Secrets GitHub token with uh this way of interpolating that um so there you go hey this is Andrew Brown let's take a look at how we'd run a script in a workflow when we're talking about scripts I'm talking about things like bash scripts I suppose if this was a Powershell and we're using Windows we could probably do that as well but I'm going to use the Linux example here but uh notice here that we um have a job we're going to run this on a buntu we have a uh a default over here of um of sending our run to the working directory of scripts so in our repo we have a scripts directory and in there we have Bas scripts and so the idea is that we can just execute them and they'll run and I just want to point that out that you can run bass scripts and that will uh save you time from writing a lot of inline code here so that's about it okay hey this is Andrew Brown let's take a look at what it looks like to publish a GitHub package using a workflow you so you can use a workflow to build a GitHub package um so all I'm going to do is get my pen tool out here so we can understand what is going on on the exam they might ask you um like what things you have to do in order uh to build a GitHub package they're not going to ask you like what's wrong with this why isn't this working there's no there's like next to no troubleshooting on the exam even though the exam guide asks you asks you a bunch for it but um if we look at this here okay so uh notice that we're going to set in our environment uh a registry uh some sorry environment variables for the registry in the image name so those are two things that we'll set here um and then we have our job so we have a few steps first thing we'll have to do is check out a repository okay and notice that this one it is utilizing Docker and it's using the docker login actions this is something that absolutely absolutely I saw my exam which was they're like which action can you use to check out your repo specifically for GitHub packages and it was this um which seems like a very random thing to remember but that's what it wanted notice we have the width remember width is a way to input things into an action so we're providing the register the username and the password then uh the next step is extracting metadata tags and labels all right and notice we have the docker meta actions um uh action there so make sure you remember that one then down below we want to build and push so we have the docker build and push actions all right so what you want to remember is the order of these things and what the actions are uh I don't like that as an exam question but that is the kind of exam questions they want to test you on so there you go hey this is Andrew Brown and we're taking a look at how to publish a Docker registry um to Docker registry using a workflow uh and again the reason I'm bringing these up is because on the exam they might ask you the order and the general idea of how they these things work um this one is more just to kind of reinforce the last one which is for um publishing to um get her packages but you'll notice that they are using the uh same uh action this one's Docker login action Docker metadata action uh Docker push action so understand that it's push it's like uh log into Docker uh extract your metadata build and push so you know similar steps hopefully that helps reinforce that okay hey this is Andrew Brown let's take a look at what it looks like to publish to GitHub container registry using workflow again this might appear on your exam where they're asking the order of steps and what is happening let's take a look at what we have so we have Docker login action so build and publish we have uh the push actions um and then down below uh I guess you can pull it to verify you don't necessarily need to do that but I'm just going showing you the repetition of those things so it should be pretty clear um the steps involved but there you go let's talk about publishing components as a GitHub release they talk about components they don't make it really clear what they're talking about uh so I had to take my best guess here uh the exams did not uh tell me otherwise let's just take a look at what we have here um so the idea is that we are building a project of some kind of component or code uh we create our release and then we uh update uh uh push our release because we can do releases and usually releases have something to do with components and so I'm thinking that this is what they want you to know is how to actually create um a GitHub release okay so these are the two things and that's pretty straightforward hey this is Andre Ram we're looking at how you deploy a release to a cloud provider so you can specify um releases out to spefic specific cloud service providers uh with GitHub they have a few they have Amazon uh elastic container service Google's kubernetes engine and then uh quite a few Azure Services which makes sense because GitHub is owned by Microsoft so they're going to have the most synergies for them and this example in particular is showing you uh for a static web app um I don't remember them ever asking on the exam anything about like actually being able to do this and there is a a bunch of variety of ways of doing this so if you did get a question it' be quite unfair cuz you'd have to cover every single uh uh scenario um but it's just worth noting that you can do this and they have direct Integrations for these particular Services um so I just wanted to make that clear okay hey this is Andrew Brown and we're taking a look at service containers so service containers are Docker containers that provide a simple and portable way for you to host services that you might need to test or operate your applications in a workflow you can configure service containers for each job and workflow GitHub creates a fresh Docker container for each service configure in the workflow and destroys the service container when the job completes steps in a job can communicate with all service containers that are part of the same job however you cannot create and use service containers inside a complicite action if your workflow uses Docker uh container actions job containers service containers and you must use a Linux Runner if you are using GitHub hosted Runners you must use an buntu Runner if you are using a self hosted a runner you must use a Linux machine as your Runner and Docker must be installed you can configure jobs in a workflow to run directly on a runner machine or in the docker container so if you're running jobs in a container using Docker uh with bridge mode uh is what you'll end up utilizing if it's on a runner it'll be host mode they'll never ask ask you this on the exam but it's just practical knowledge understand if it's in host mode you'll have to map the ports so uh let's look at an example of a reddest container uh which is a service and notice that this one we specify the image over here notice the container job specifies um a specific type of container so we have the runner uh or sorry the uh the type of container that it'll run which is node over here this one notice there is no specifi container so this is the key difference between um being able to tell if something is running in a container or on the on the host image because this one has no container um and you're mapping a port and this one you are not mapping a port but you are specifying the container okay uh here is a a more complex example so you can specify credentials for your service containers in case you need to authenticate with an image repo so notice that um under here we are providing our credentials so hopefully that is clear uh when running a post server as service container it is going to look like this um you can tell that it has a container um you know it's pretty darn straightforward if we take a look at what it looks like to connect to a service container um in a additional step here we are running our client JS we're providing the Nars and then over here we have our code so we will definitely run this one as an example so you have practical skills on how to run a service container um but yeah there you go hey this is Andrew Brown and we are taking a look at rout in workflows to Runners so a selfhosted runner automatically receives certain labels when it's added to GitHub actions what are labels it's these things over here on the right side of the runson and we have default labels uh these will are used to indicate its operating system and Hardware platform so we have selfhosted if we're specifying uh the default label for selfhosted and we have uh the the one specific for operating system like Linux Windows Mac OS we can also have ones that are specifying X8 x64 arm or arm64 architecture and you can have custom labels this is where you basically Define whatever you want the label to mean uh and they're going to map to a type of Runner I should point out that these Runners are cumulative so a a selfhosted runner must have all four labels in like that example to process that job so let's talk about Runner groups so these are used to collect sets of Runners and create a security boundary around them Enterprise accounts orgs o owned by Enterprise accounts and orgs using GitHub teams can manage and uh use additional Runner groups and so here's an example of us specifying a group under a runs on so that should be pretty straightforward you can also combine labels and groups together uh to narrow things down a bit further so hopefully uh that makes sense and we'll see you in the next one okay ciao hey this is Andrew BR and we're taking a look at executing code ql step this appears in the exam guide but I didn't get a question on it but I imagine that they just want you to know that you can execute code ql code ql is something we cover in the GitHub security certification course um which that can perform an analysis but what you want to notice is that there is a action called code ql action analyze and that's going to let you uh work with your code ql you can also we have the initialized action so those are really the two things that they want you to know if they were to ever ask you a question and the fact that you can use code ql step um within workflows okay hey this is Andre Brown and we are taking a look at caching package and dependency files so to make your workflows faster and more efficient you can create caches for dependencies and other commonly reused files and so workflows run uh often reuse the same outputs and download dependencies from one end to another so wouldn't be awesome we could cash those um so caching package and dependency management will greatly improve your performance and you can um uh package uh or sorry you can cash the following for package managers it says package manages and that's what threw me off it's supposed to say managers here okay managers and so we have for a few we have mpm uh for python for Gradle for ruby gems for for go so here's an example if there was a question they asked on the exam they're asking what is that you would use here so so notice here it says Ruby setups Ruby they're asking you what is the thing that you would use that would um create this uh caching to be performed uh and that's all you really need to know is like set up Ruby setup go setup Java just remember set up hyphen something when they're talking about uh package manager even if we did this it's not that uh easy to observe uh to see that the caching is occurring other than it is performing quickly but uh yeah there you go hey it's Andrew Brown and let's take a look here at cashing job dependencies and build output so we have this action get my pen tool out here uh called caches or Cache actions cache and the way it works is you provided an ID okay uh and then you can provide it values like the path and the the key you want to have here and then down below notice that we can reference the ID from up here uh and then we can grab the outputs um and then we can check whether there was a cash hit and then the idea is that we are able to then uh grab um uh that that value out later on and so that's a great way if you're going to utilize the same value in more than one place you notice we're using here and there I do want to point out that there is also um individualized action so if you want to use the save and restore action separately you absolutely can do that um as opposed to just using the caches value there but hopefully that is clear how we can uh cash job dependencies and build outputs hey this is Andrew Brown let's take a look at removing workflow artifacts uh from GitHub so the way you do that is in the UI you can press a button and delete it once you delete an artifact it cannot be restored by default GitHub stores build logs and artifacts for 90 days and the retention period can be customized so that's something that they want you to know I never saw on my exam I never needed to delete an artifact but that is an option there actually I do remember them asking about like ition period so um something like 90 days is something that you'd absolutely want to know they might also ask you something like practical like how what would you do if you ran out of space you just delete the artifacts but there you go hey this is Andrew Brown and we're taking a look at workflow status badges you can display a status badge in your repo to indicate the status of a workflow and this is what this badge looks like youve probably seen it before um and the way it works is that they have a special URL here uh that you can place in your read me file and then that way you can see it there are some parameters that you can provide like Branch feature event push uh workflow badges in a private repo are not accessible externally so you won't be able to embed them or link them to an external site I never got any questions on this in the exam but it is in the exam guide outline so there you go hey this is angre brown and we're taking a look at environment protection so you can configure environment with protection rules and reference an environment in your workflow job uh so each job in a workflow can reference a single environment any protection rules configured for environment must pass before a job referencing the environment is set to a runner the job can access the environment Secrets only after the job is set to a runner um and there you go hey this is Andrew Brown we're taking a look at Job Matrix configuration a matrix strategy lets you use variables in a single job definition to automatically create multiple jobs runs that are based on combination of variables so here's an example of a matrix with versions and Os and they'll produce that amount so basically end up with six job runs so there you go hey this is Andrew Brown let's compare the difference between disabling versus deleting a workflow so when you disable you temporarily stop it when you delete it it is gone uh disabling you can reverse it deleting you cannot uh when uh when it's disabled the idea here is you might do this when you need to do updates or maintenance um or you don't want the workflow to trigger as often deleting is you just want it gone you can disable uh workflow using the GitHub CLI uh you can only delete uh the the workflow through the UI uh I did get an exam question about like disabling workflows in the particular thing was why would you want to do it and main reasons is is this box here they might word it differently but the idea is that updates or maintenance or you just don't want it to trigger as often but there you go hey this is Andrew Brown we're taking a look at action types for actions so there are three kinds we have Docker container JavaScript and composite actions and depending on what kind you're using is going to limit the types of os's you can use if you're using Docker container you're limited a Linux for the rest it's all the same if you're wondering what the three action types are a Docker container runs your action code in a Docker container uh if it is Javascript it's going to run directly on the runner host OS if it's a composite action this is a combination of multiple workflow steps within one action actions require a metadata file to define the inputs and outputs and the main entry point of Your Action which we'll look at next hey this is Andrew brand and we're taking a look at inputs and outputs for actions so for inputs this is what we would Define that we'd expect our action to accept and then for outputs this is what we Define what we' expect the our action to uh output back for people to utilize and if you want to specify what kind of action type we're using we use the using command and so you can see here that this one is Javascript because it's using nodejs and the main is main JS it's a Javascript file if this was a Docker file then you'd expect it to accept um it' be using Docker it would AC a Docker file so hopefully that is clear and obviously if it's not any of those two then it's going to be a composite hey this is Andrew Brown we're taking a look at action version so GitHub recommends uh some strategies that you should apply when you are trying to release an action for public use the general recommendations is patch version to include necessary critical F fixes security patches while still remaining compatible with existing workflows consider releasing a new major version whenever your changes affect compatibility tell your users to specify a major version when using your action uh and only direct them to a more specific version if they encounter issues use um so here's an example of um if you have uh your actions and you are utilizing them with proper uh recommendations and we can specifically talk about tagging recommendations so the idea here is they say to create and validate a release on a release Branch before creating the release tag create a release using semantic versioning move the major version tag to point to the git reference of the current release introduce a new major version tag for changes that will break existing workflows um and major versions can be initially initially released with a beta tag to indicate the status uh for example V2 beta so um the exam did ask me about like best practices not exactly around this but this is something you should know and it was in the exam guide so you could get it as a question understand that exam is going to uh just want to know best practices so anything you can find about best practices read up on as uh it wasn't definitively defined in the docs um and I just had to like read a lot of stuff and then you know take my best guess on some questions because the docs just do not answer that stuff okay let's talk about how we would structure our um actions whether they are JavaScript or Docker I don't really get into composite but um the reason you need to know these structures is that it might ask you on the exam about key files to make custom actions uh so the idea is that you uh you have a directory structure um the should contain a root directory named after your action or something meaningful um so hopefully that is clear so notice here that your repo is named after your action um and that is one of the components to an action name the other part is obviously the tag as you've been using uh uh these actions you've probably seen that commonly uh there before here on the right hand side is our action uh action. yaml not it has our inputs and our outputs and are run we already talked about those previously so you should have an idea what those are let's talk about essential files so you have to have an action yaml file with the inputs outputs and Main entry uh defined the main entry here would be um here the main okay um in JavaScript you'd have to have an index.js though I imagine you could probably change the name of it but that's what it expected to be you have to have a package.json um and if there was a package Json you would know that this is a custom action I got a a question on my exam saying like how do you know that this action is a c like it's JavaScript action cu it has a package.json in it which is not a really good answer but it's the answer that they probably wanted and you have to have a read me to know how how it works if we're looking at a Docker container looks very similar notice that we have um uh we're specifying the docker file and Docker and we can pass it some arcs notice that it has an entry point sh and it has a Docker file so remember those two things as they asked me that on the exam as well and that will get you another Point okay hey this is Andrew Brown we're looking at Exit codes for GitHub actions you can use exit codes to set status for an action the first here would be with a bash script the second would be using a Docker file why would you want to set exit codes and the reason why is that um you can then raise your own errors that you want to have so notice here um uh yeah yeah so it says use the exit codes to set the status of an action so the idea is that um let's say we hit a zero or whatever then we can return back an echo uh of that and then provide uh that exit status code um again the point is to use it Pro programmatically in other cases and so that's all I wanted to show you here okay hey this is Andrew Brown and I have a weird little glitch in my slide this word's showing up it's not supposed to be there yet I can't seem to fix it let's talk about reusable templates uh workflow templates in an Enterprise is an Enterprise feature that allows you to create create reusable templates that other Enterprise members can use um users within uh users with right access to the enterprise. GitHub repo can create workflows with workflow templates uh you need to create a workflow file and metadata file in your git in your public g. GitHub repo within a directory called workflow templates the the workflow yaml file and metadata Json file need to have the same name um so here it's not clicking here we go so uh here's an example of the workflow file and here's an example of the metadata file so you have an idea of the relationship together um I'm not going to do a lab on this because the Enterprise um the Enterprise account requires you get a trial you have to enter credit card stuff like that and the only way you'll be able to do that is to go through that process and I don't think that's really fair um I don't feel that the exam is going to really test you uh deeply on its implementation um so I'm hoping that uh this will be clear I did get questions about reusing templates but the language that use about workflow templates and reasonable templates is uh uh varies um and that makes it hard to know if you if this is what they're talking about so if they're probably talking about reusing something they're probably talking about workflow templates and the key part to know is that they go into that dot GitHub directory all right and they have a meta metad metadata Json file okay hey this is Andrew Brown and we're taking a look at configuring sell hosted Runners for Enterprise so selfhosted Runners for GitHub Enterprise have additional configuration options that you're going to want to know the first is the proxy server so this allows you to set uh Nars within your environment to tell it to um uh to tell the environment to uh proxy uh to this secure virtual machine or or compute that allows you to then communicate out um and so you can actually provide multiple URLs if you want you can even tell it what not to use using the no proxy all these can be set mixed and matched the other thing is that you're allowed to do IP allow lists um in fact you have to do IP allow lists uh in order for selfhosted runners to communication to work that is absolutely an exam question in fact they might even ask you exactly how to configure it which to me was kind of ridiculous um uh because I couldn't find an easy way to do it because I'd have to make an Enterprise account and then even then it's even harder to even set up selfhosted Runners like I didn't even do in this course because it was just way too much work to do but um I just want you to know that read up a little bit about um how IP allow lists uh configuration works but know for sure that you have to have them configured because that will be an exam question okay hey this is Andrew Brown in this fall I want to take a look at how we can go ahead and create our own uh GitHub action so I've yet to do this I read all about it and and so I'm going to work with you together and we will troubleshoot through it um I'm very confident that I can get one working uh and they don't look particularly too difficult to do but uh we have our GitHub examples repo we're probably going to need another repo for this what I'm going to do is just go look up GitHub actions Uh custom and we'll just kind of follow through it and then come up with our own action that we might want to create or just work with the one that they have so under here um there's a few different kinds that we create we can create a Docker one or a JavaScript one so maybe we'll do a JavaScript one first because that might be easier to do um and so uh I guess they have an example one that we can utilize before you in download Nos and stuff like that let me just read a little bit ahead and then guide you through it okay all right so the first thing is that they're suggesting that there's a GitHub actions toolkit which is going to speed things up let's open up that repo and take a look at what we have going to scroll on down below provides a set of packages to make creating actions easier so we got the core package the executive package the glob package a lot of interesting packages here um so I mean that is good um and now that I'm thinking about it now that I'm thinking about it I remember it actually asking about whether the core package was an important package uh and the GitHub package was important to to have within your action so look out for that on the exam but yeah you can see these are all individualized uh packages and then down below it says illustrates how do you create a simple hell World action so yeah it looks pretty simple what I'm going to do is I'm going to go ahead and make a new rep and you have to do this as well right so um just going to go up here it'll say make a new repo and this one I'm going to make under my own personal account um and I want this action to be called some like hello Mars or baroon I think it's baroon baroon barsum if you don't know barsum is the word for Mars uh in the John Carter uh scifi Books Okay Barum so I'm going to call this Barum and it is available and I suppose I can make this a public repo I'm going to say add this REM me file um and this is going to be JavaScript so I'm just going to type in JavaScript or nodejs JS node there we go node um and I'll choose a license we'll just say apy too I don't care what happens to this repo and so we now have this repo next thing I'm going to do press period to open this up so we have something to work with I remember from uh my research that we need to have an index.js file so let's go ahead and add add that all right I'm just jumping in this uh without reading too much but I'm pretty confident and so they have this a very simple hello world example um sure okay but this is kind of I was expecting is like okay do we need the actions coure in here I'm not sure but uh and then that I guess that would get the input but then how you have to get the input from the core so I'm thinking the first thing we probably to do is import our core that's probably what has to happen Okay and then I would imagine that you would want to get an input like who you're greeting that kind of makes sense to me and you probably want to print that out so in theory this looks like what You' want it to do there's no outputs here maybe there's like a core. getet output so we could probably just go and investigate these individually let's open this one up and yeah let's look for output yeah there's like a set output so we can go here right and I'll just put name keep this simple name and name and then here we'd have name from baroon all right and so maybe that's our output value so I'm going to go here and just say uh const output value and we'll do that um and then here we'll just say greeting and then this would be our open value so in theory that's one of the most simplest ways we can do this we'll also need an action or an action yaml uh and we need to Define our inputs and our outputs and I believe how it runs okay so I'm going to go ahead and go find those references so I just scroll down down here to the metadata file and so yeah it has a description we can just grab this one so it's pretty close to it and we'll just say name say name name say Barum and actually we just take this part out here that way the idea is it's defaulting to that um and then the I guess time could be an output if you wanted to do that I would just say greeting we'll just change it to what we want to be uh how we greeted you okay and then we can see our our runtime is or is using node like we have we have node there right and then we have our main so that is pretty clear we probably should tell people how to use this but we will proceed forward here um and so there's suggesting we installed those two and that's what I thought that would be and again on the exam uh those are two I I noticed that were grouped together and so I I imagine that's what we need so I can't proceed any further here I'm going to have to open this up in GitHub code spaces just say uh initial files all right and we will commit that and then we will go back here to go to the repository and we'll open this up in GitHub code spaces I'll see you back here in just a moment all right so our environment is up I'm going to go ahead and just uh change the theme here all right so my my theme is changed um and we will go into our index JS uh there was a couple things we wanted to install I'm just going to bump this up a little bit um and we'll go back over to here and so we need to do the mpm install actions core um I would imagine that we want to generate out a uh package Json file so we'll go ahead and do that right now and then I'm just going to go ahead and install these it doesn't say this I'm just put in save because we actually want to have it in our package Json and that's usually what you do if you want to add them in there and we'll do a GitHub so we have those two in there I'm going to go to the top here oops I'm going to go to the top here and I want to include uh both the core uh and the GitHub it's kind of driving me crazy so you don't need to do this you shouldn't do this if you are not a Vim user but I'm just going to turn I'm going to install Vim here just so I have Vim key so I can code a little bit faster okay so just give me a second there we go so my cursor is a little bit different looking there I'm noticing here that they're wrapping everything in a try so we probably should do that as well um because then if there's an error uh it has an opportunity to return an error all right and so notice it's using the core set failed and then it does there so I guess that's the case that that I wonder if there be like a set success but I don't think so um and then I imagine the bulk of our code here should go into this one all right looking good um there they also do in here the output time and I guess we could do that I don't think there's anything interesting about that because it's just using regular JavaScript so we'll just ignore that um then they want us to create a read me so I'm going to go ahead and grab theirs as an example and we'll go over here and I'll paste this in all right um and it's pretty much the same except ours is going to be name um and this one is barsum okay I'm assuming what is that like the shaw or something because usually it's a tag and I imagine that here we could provide something else um so I'm not exactly sure what this is I'm sure we'll figure this out in just a moment okay there's nothing that says what that is but I'm assuming that's maybe like uh the shaw or the tag so it goes okay so GitHub downloads each time you run the workflow during Etc that's fine but I guess the question is like do we need to put anything else in here because um I'm not sure if these are just going to work right maybe they will but I thought we'd have to configure something additional so what I'll do is they must have like an example repo it doesn't seem like they do uh no not really so maybe that will just work I just keep expecting there to be something uh something more but um maybe there's not all right let me just read a bit I don't know so there's not really anything interesting there that they're saying so I'm going to go ahead and I'm just going to go and Commit This I'll just say initial version um we did install those packages so that is good um I actually didn't test it to see if this works and so the question is actually how would you test this out because if I try to do this right now and actually that was a question in the exam was like how would you test your JavaScript thing and I thought maybe like within a container um let's see what happens mpm start what would happen here and if we go here uh Missing script start so there is no start script here how would it even know to run that's a good point so I think that's what I should find out next is like how do we actually test this so I did some research and basically people said just mock it out with a mocking library and I'm like that's really how you test it um and then here they're just saying go run it they say yeah just go make it and then run it um and that also seems a little bit silly to me as well but I guess what they're saying is maybe making a private repo and then test it that way so um yeah I would just say that uh I find that a little bit disappointing but I guess that's the way that they would suggest it um but anyway what I'm going to do here is I'm going to go ahead and Commit This let say initial version and it says this to tell us to tag it so I guess I'll do that I'll say get tag uh 0.0.1 because this isn't a proper version and we'll say get push and we'll say get push tags and so now we have a tagged version so now what I want to do is I want to figure out how we can actually run this so I'm going to go to back to GitHub examples I'm going hit period I'm going to see if I can actually reference um that somehow so yeah like now how do we reference it they really don't make this easy um so public actions can be used by workflows in any repo when an action is in a private repo the repo setting determines we can do it so copy the following yaml file into a new. GitHub yaml uh uses the octocat Etc y one so I'm thinking that maybe I just give it my URL and it'll work I'm not sure why that has a v in front of it as that wouldn't be considered semantically correct by the semantic versioning which is they said that that's what they use but maybe not all of them are semantic semantically correct and it's just a recommendation so what we're going to do here I'm just going to take these ones out of here and drag them over to here yeah I don't care uh cancel I don't want to replace that one or I'll just delete them out just delete these and I'm just going to make it a new one here called custom action yaml uh um and then we'll go grab their example code from over where is it here so I'll just grab this one paste it in I'm going to tweak this uh for mine so mine is Omen King and I'm at um Barum and I'm at 01 001 that's what I would expect that that would work we'll say name and I'll just say brown it's weird that we set a default but it's required so I guess it would I don't know get the output we'll just say output uh greeting it says steps hello is that the name of our how would it know that that's the step oh maybe it's based on whatever we named it up in here this ISS uh my job say hello use the output from the hello step oh the ID is right here that's how it knows okay great so let's see if this works if it doesn't that's totally fine we'll figure it out but uh custom action I'm just seeing if it'll pick it up from a public repo that's what I'm curious okay so I don't want to install anything it's totally fine we're going to go to the repo and then we'll go to the actions tab and then we'll see what's happened there we go we have our failur so let's go and take a look what is its problem so this is where I thought I was going to run run into an issue where it's not going to be able to work with that import action because this usually uses a u more advanced syntax so um cannot use import statement outside of module oh were we supposed to modularize this so I think what I might want to do is just look at example so example custom action JavaScript and then we can maybe reverse engineer one that way oh man they keep bringing me back to here this is no good um maybe there's like the GitHub GitHub Marketplace actions and then we can just find one that's open Source was installed maybe this one how is this action used I just wanted to know like how do you include it it's over here and so I'm just looking for one I think this is a probably do ER Docker one yeah this one build with a Docker so that's not going to help us let's try super linter as an example one so we'll go here and this one's a Docker file I'm guessing lots of people don't like using JavaScript how about this one how about this one how about this one one of these are going to be JavaScript right they can't all be Docker files this one is a Docker one this one is a this one looks like JavaScript this one's JavaScript excellent so what I'm going to do is go into the index JS I'm just curious what the heck I want to be up here index oh you know it's not showing it to me here maybe it gets compiled out so we'll go to the source yeah it's a TS file all right this is uh not helpful because it's a typescript one all right uh let's try this one Docker file let's try this one this one looks like JavaScript but it looks like it's typescript again what is with people's obsession with typescript I just want to import this all right so give me a second I'll figure it out I was just thinking that we could just probably change this to be requires and it would still work also this is supposed to be GitHub uh we don't even use that in there so we just probably take that out but um well in case it wants it but I think we could just do the requires on this so require uh this work actions core I always forget how to do this so and it would be like constant core and then constant GitHub um and maybe be fine with that oh okay I'll fix it then I don't care convert it oh come on what is it what is it that I need to do here let's go back here um cannot use import statement outside of module all right whatever I'm just going to go ask chat GPT it's one of those days what do you want me to do just tell me how to fix it that's probably what it is I need to add type module to my uh package Json because I remember that was something I had to do before in another project I'm going to go over there and see if that makes any difference so we'll try this again type module like that uh why doesn't it like it type module okay and we will minor change I'm going to go ahead and tag this it's fine go push it I'm going to tag this with um 2 and push I'm going to go back over to here I'm going to change this to two try new version and we'll see if this fixes our problem so I'm going to go back over to here to actions and and we'll see if that works all right let's investigate and see what our issue is here uh that's not oh that's not what we wanted okay so I'll go back to wherever this was let's change it back to this what a mess uh we'll just go here change it back we'll commit it here yeah just commit it sync it Sy it push it stop telling me what's wrong with nothing and we'll tag this like that we'll do this we'll go back over to here we'll try this again uh we'll have a new version and we'll see if this one takes effect okay so we'll go back to here and we'll see if this one fails all right so this one failed as well of course uh let's take a look and see what it says probably the same thing right uh cannot find package actions core imported man this is a pain um let's go back over to here I mean they're in our lock files so what else would it want I mean we don't use the GitHub one I don't think I supposed to complain about so I guess I'll go read the docks more all right so here they're saying for us to use this tool um to compile the modules let's go ahead and see what that does so we'll install that and then we'll grab this one our license isn't called license.txt but I don't care and so now we have a node modules and we have a bunch of stuff in here but wouldn't that then bring all that stuff there does that mean that when we look at other actions they include their no modules so I know we were just looking at one may was like super linter okay if we go to this one does it have a node modules in here I don't see it in here is this a Docker file so we got to find another one that has no modules what a pain in the butt I am not enjoying making my own action just because like I feel they could provide a little bit more information that they are so I'm just going to open a few here and we'll see what we can find we'll try this one here this one is looks like JavaScript yeah it's going to go into here for a second this a composite one runs no JS it has a main JS notice there's like a post action here um how would it know to build it like is this in a source directory this what I don't understand is like this one has a source directory there's no index.js in this one so it clearly is compiling it but then I guess there's releases over here so what like what does it want it doesn't tell you I'm going to have to go research this I'll be back all right so I think the problem is is that this creates a distribution directory and um we don't see it because our G ignores is uh excluding it so I'm thinking if we go in here and look for the disc directory maybe that will there we go now we have this directory and there now we have our our single um because they said they would compile into a single file I'm not seeing it in here but it was saying that it did well anyway I don't know but um I definitely know that's what it's suggesting there so try this again try again and uh hopefully that will work it's just frustrating because I watched a bunch of different videos and like they don't cover all these parts or they're using typescript and so there's other things that are uh oh I didn't tag it right I bet they just tagged wrong um oh no we might be fine we'll try this again I'll just do I'll just do0 five here um and we'll do get push get push tags but anyway we'll see if this works I'm always good at figuring things out um but let's go ahead and try this and we'll just try try the newest version we'll Commit This and push this and we'll go back here and we'll see if hopefully we get a different error okay that's what I'm hoping for but I still understand I didn't see that package Json anywhere in there compiled to one so it makes me think this still won't work probably going to say the same thing isn't it couldn't find it okay well let's go back here for a moment and so here it says use the versell command compile your index JS file you'll see a new index.js file with your code and compiled modules you'll also see an accompany license.txt so I'm going to go back over to here I'm going to try this compile thing again I it's not compiling my libraries it doesn't look like it is okay uh you know let me try this again NCC not compiling libraries not compiling node modules like I I don't know what it wants it's not telling me um I don't know if it's because I changed it to the type to be module but I'm pretty sure it is module I'm take this out again and see what happens we'll just take this out like this and we'll try this again no it didn't change anything so I just put that back in there because I know that we probably need that in there to work so I'll go back and take a look at this again uh change the main keyword in your action to be dis uh all right we'll try that what a pain this is uh if you already checked in your no modules directory move it well I didn't because you said to compile it to one changing checking in your no module director can cause problems as an alternative you can use a tool called versel to compile your code and modules into one file used for distribution there whatever uh okay we'll try it again there I'm so excited for for this okay we will tag this again and we will push this again and we will go back over to here and we will check this again and we'll see that it fails and then we'll get upset because it just just never works all right so try this six run it again please please work please work I I don't how that could work there's no no no modules in there okay well whatever it works now uh do we get our output we do so there you go that's how you create a custom action with Java Script uh so hopefully you learned about the inputs the outputs the configuration of it how we could identify files and it seems like a lot of this debugging could have just been I could have redone this video and made it a lot cleaner but I tell on the exam they actually ask you how to debug so um we kind of answered all those things by me uh being frustrated here so that's totally fine um so yeah i' say we're done there and I'll see you in the next one okay ciao