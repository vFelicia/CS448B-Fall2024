hey guys wes here and we're going to build a simple image gallery where we can actually upload images to azure blob storage okay so here is a very brief look at the application that we'll be building over this series so we have a very simple image gallery application it's built completely in asp.net core 2.0 using asp.net core mvc and so you'll see that we have a gallery page here with just a few images in it at the moment and we can click on any one of these images and go to a simple detail view so for now that's what we have we have some metadata on each of these images including a title when the image was created as well as some tags that will actually build out a search feature to allow users to search for images so our application will grow beyond this point we'll also have the ability to upload new images and have those images stored in the cloud using azure blob storage so we'll be building out a complete mvc application with a service layer and a web layer and we'll use a sql server as our back end so you'll want to make sure that you have asp.net core 2.0 installed on your machine and sql server management studio with sql server express installed i'll be using visual studio 2017 to do all the coding for this series as well so if you'd like to follow along directly i would recommend just downloading the free version of visual studio 2017 as well start out by using some images that are hosted remotely just to kind of show how the web layer works and then we'll move on to hosting images locally on our own machine and then finally hosting images as i mentioned in the cloud on azure so we'll work our way there over the course the next several videos and yeah i hope you enjoy the series okay so let's go ahead and fire up visual studio and we're going to create a new project and we will select asp.net core web application and i'm just going to call this simple image gallery and just be sure to pick a location maybe with other development projects that you're working on and then we will create a directory for the solution and also create a git repository here so we'll select ok and then we'll have the option to choose from a number of different templates now that we're using asp.net core 2.0 so first of all make sure that we are using net core and that we're using specifically asp.net core 2.0 and then we're just going to select the web application which will be implementing the model view controller pattern and we're not going to worry about authentication for this particular version of the app so this will just take a moment and it is going to scaffold out a very simple mvc app for us which we'll see here in just a moment so we have a few different folders we have directories for our controllers models and views and if we just take a peek in here we can see that we have a simple home controller and this has got a few actions on it we have an index about and contact action and some corresponding views here it looks like and then one simple view model here looks like for an error view so that's all good we won't be really using any of the scaffolded out nvc stuff we'll just be writing our own here but we will use these directories you can see we have an appsettings.json file a power.json file and a bundle config and then we have our program.cs and startup.cs so you'll be familiar with these files if you're coming from asp.net core 1.0 there are some differences here if we take a look in program.cs you can see that we have a iwebhost build webhost method here and we're just calling createdefaultbuilder on it so there's a lot that's actually kind of packaged into this method which is something that's quite a bit different from asp.net core 1.0 so we won't go into all the details here in this particular series but just be aware that this is still the main entry point for our web app then if we take a look in our startup.cs class and we scroll down a bit you can see that we have the constructor here and we have this configure services method still this will be where we register services for dependency injection into our controllers and we'll have just probably one or two simple services for the series and then we have this configure method and this is where we configure our http request pipeline so our middleware here so you can see that we're saying things like use static files we'll take a look at those in a moment here use mvc and then we show how we actually are going to configure our routes and our routing for this application so in this case we will have like our app slash controller slash action and then some optional id you can also see that we have the ability to change change some things rather easily here depending on whether we're in a development environment or a production or a staging or environment however we'd like to configure that we have the ability here to do things like for example use developer exception page where we might do things like actually show the stack trace for a particular error that gets thrown in the browser otherwise we have some custom error page so we can do sorts of different types of configuration like that here and that's all handled in our configure method that's in the startup class okay so we'll be revisiting this soon for now let's go ahead and create our first controller so if we expand controllers here we won't worry about our home controller for now i'm going to do is go ahead and add a new controller and we'll select minimal dependencies so we'll go ahead and right click on controllers and we'll add a new controller and we'll just make it an empty mvc controller and we're going to call it image gallery controller or let's just call it actually a gallery controller and so this is going to scaffold out a very basic controller class for us so you can see that it's extending this controller base class this is coming from asb net core mvc and then we have a simple index action that's just returning an empty view so let's just kind of get right into it here we we're going to have a gallery and so we have to think about what we actually want to pass in terms of a model to the view that represents our gallery so we know for sure that we're going to store that in a view model so we'll save our model is equal to and we'll make a new gallery index model which of course we'll have to create and then we'll pass this to our view so let's go ahead and create this class we're going to create that in our models folder so this model's folder will contain all of our view models we'll go ahead and add a new class call it gallery index model and so now let's just think about the type of data that we'd like the user to see or interact with on our gallery index page so first of all we'll have a series of images of course for the user to perhaps click on so we'll have an enumerable collection of gallery images and this will be another type that we need to create we'll call this property images and then we'll write our auto property here okay and then the next thing that i'd like to provide on our gallery index view is a search box that a user could perhaps write a query and get images that have you know some metadata associated with whatever the user's queried returned back to this view so we can do is go ahead and create a string search query and we'll use this particular property to store that user's input okay so now clearly we need to create a gallery image model but in this case i'd like this to actually be a domain model or an entity model rather than a view model so this will map directly to a record in in our database perhaps in like a gallery images table so for that i'm actually going to create a new project in our solution so we'll go ahead and right click here and we'll add a new project and in this case it's just going to be a.net core class library and we're going to call it simple image gallery dot data and you can see that it's going to create a simple class here just called class 1 and we'll use this class as our db context so let's call it simple image gallery tv context and we'll extend db context so we'll actually need to add a few packages here now to set this up so if we right click on simple image gallery.data so our data project and we're going to select manage new get packages and then we'll select browse and first of all we need to bring in microsoft dot entity framework core so we'll go ahead and install that and we'll accept the terms next we're going to install entity framework core.tools this should allow us to actually run database migrations from our package manager console which we'll look at in just a little while and then we'll also install entity framework core dot sql server we'll use sql server as our back end for this project okay with those dependencies installed i'm just going to go ahead and close this tab and now we should import microsoft entity framework core.db context here the other thing i'm going to do is actually rename this file from class 1 to simple image gallery db context okay so we can kind of think of our db context as our database and the particular database that will be the backend for this application and so what we need to do here is actually create a constructor so we'll just say public simple image gallery db context and we'll instantiate that with some db context options and then we'll call base options to ensure that this gets passed to adb contextbased class and so here's our simple constructor and then in our db context class so in this class we're actually going to define some db sets and these will represent in a sense the tables that will be in our simple image gallery database and so we're going to have a public db set of gallery images and we'll call this table gallery images and then write our outer property here and so this gallery image is the same entity model that we would then also like to use at some point in one of our views in our gallery index view here so if we come back what i'm going to do is now actually create a new folder in our data project called models and then here we'll add our class for our gallery image okay so make this class public and now we have to think a little bit about what particular properties we would like to have on an instance of a gallery image so first of all let's just go ahead and give each of our images a simple title and then perhaps we'll have a date time for when that image was created and since we'll be storing the images in the cloud what i'm going to do is create a url string that we can use to actually point to you know the location of that image on the web that we can then you know use that to create things like image tags and links when we actually start building out our views so each gallery image will have a specific url where it's hosted and then maybe finally we'll have this collection of strings and this will represent the tags that are on that particular image so we'll provide the ability for users to actually tag images with some metadata that we can then use to search on in our gallery okay cool so we're actually almost ready to run our first database migration at which point our gallery image table will be created with columns for the title created url and tags and that reminds me we should also provide an int id we could also make it a long but yeah we'll have an id and that will of course be the primary key on each of our gallery image objects okay so what i'd like to do next is to actually go back up into our web project here and let's take a look at our appsettings.json file so you can see we have a simple json object here that specifies this logging object which has sort of key value pairs for some some things that we'd like to configure perhaps regarding logging we have this appsettings.development.json file that looks like it logs some additional information here with the the default way that our application gets built and we only currently have this development environment but what it's going to do is it's actually going to load you know whatever is in our app settings.json and then whatever is in our app settings for that particular environment.json file for this series we're not going to be worrying about configuring different types of environments we're just going to be building a simple version of this application with a single environment and so in our appsettings.json base you know configuration file what i'm going to do is create a new object for our connection strings and then we're just going to give this connection string a name and i'm just going to call it default connection and then we're going to provide a connection string to a sql database so you want to make sure that you have microsoft sql server installed on your machine and you should also make sure that you have an instance of local db running so let's go ahead and check that out very quickly so i'm going to fire up commander here and if i just type in sql local db info we can see that i have microsoft sql localdb running mine's called ms sql localdb so if we go back into our default connection here what i'm going to do is set the server equal to localdb and then escape the backslash and we'll have microsoft or ms sql localdb and then we can name our database which i'm just going to call simple image gallery and we'll set this trusted connection equal to true and then we'll set multiple active results that's equal to true as well so this is a pretty standard connection string to a sql database which you you know you may have used something like this before if you've developed any other asp.net applications in the past and so now that we have a connection string set up what i'm going to do is go back into our gallery controller and we need to import our gallery index model and now i'm going to right click on simple image gallery and we're going to add a reference to our data project so we'll go ahead and do that okay so let's go ahead and just build the project and it looks like we have a few errors to clean up here so let's go to the first one which is in our data project in the db context and we need to make sure that we import the gallery image model that we just created and so let's go ahead and rebuild our solution again and we have one more error to fix here this is in our gallery index model class and we should go ahead and bring in the using here as well so then if i control period at the top of this file i can remove the unused directives and we'll go ahead and rebuild the solution okay so everything's looking pretty good so now let's head back up into our web project and into the startup class here and what i'm going to do is down in our configure services method i'm going to go ahead and say services dot add db context and here we need to specify our simple image gallery db context and then we can pass it some options here on this lambda and we'll say use sql server and then we need to actually pass it a particular connection string that we'd like it to connect to so say configuration dot get connection string this is all provided for us it's kind of nice and then we just pass it the name you know the key in our json file that we were just working with a few moments ago which is default connection oops and i have an extra parents here as well so i'm just going to move this down to another line so you can kind of see it a little bit better and so this connection string default connection again corresponds in our appsettings.json here to this default connection in our connection strings so it's kind of nice how simple that is to point our application to the particular database that we'll be interacting with okay and actually we need to go back and take a quick look at our gallery image object and what i'm going to do here on our tags is rather than make this a collection of strings what i'm going to do is make this a virtual enumerable of tag and we'll actually create another domain model for tags that images might have otherwise when any framework tries to create this gallery image table it's not really going to understand how to map just a collection of strings to you know this object and so we could specify it as unmapped but on the other hand i would like to actually use the tags to query for objects in our database so i'm going to represent that as this tag type so in our models we'll go ahead and create another class called tag and actually let's call it image tag make it public and we'll very simply just give it an int id and then a string description okay so then back in our gallery image class we're going to rename this image tag and so now we'll have a collection of image tag objects that may correspond to a particular gallery image so we have a sort of onetomany relationship here where a single image may have many different image tags and i'll just go ahead and clean up the single unused using here and now finally we'll head back into simple image gallery db context and we'll add a db set here for our image tags as well okay so we're going to go ahead and try to run our first database migration for our application here so to do that we need to head to the package manager console and we can get there from view other windows package manager console and we'll just be sure that the default project is set to simple image gallery.data and then we'll add migration and then in quotes initial migration so we'll try to run this and you can see that it has now run it's created a migrations folder in our data project and then we have a simple initial migration csharp file here and you can see what it's it's essentially doing so entity framework has taken a look at our db context class and the gallery image and image tag db sets that we've created here and what it's going to do is look into these classes and check and see if it has a table on a particular database you know if the database even exists at first it's then going to check to see if it has tables mapped to either of these classes if not it's going to go ahead and create them and it's going to create columns corresponding to each of the properties that are on these classes and you can kind of see that happening here if you just take a peek at this the code that was generated here in our migration class you can see we have this migration builder object and then we have methods like create table on it and we're specifying a name for the table and some columns you could of course manually edit these migration files too if you want to make some kind of change i wouldn't necessarily recommend it and you can also see that it is setting the primary keys that are getting mapped to the id property on each of our objects and also this foreign key relationship is getting created that is linking our gallery images over to the image tags so that looks pretty good now all we need to do is actually run the command update database and so what this is going to do is essentially make a connection to sql server that's running locally here and it's going to go ahead and create this new database for us and do our first our first migration here so we'll have a schema with these two tables in it okay it looks like i'm getting an error here that says there's an error occurred while establishing a connection to sql server the server was not found or was not accessible verify that the instance name is correct and that sql server is configured to allow remote connections the specified local db instance does not exist so what i'm going to do to troubleshoot here is to just go ahead and open up sql server management studio and we're just going to connect to local db slash ms sql local db and go ahead and see if we can connect okay so that's looking good we have a number of different databases that i've created in the past here so i know that we have a connection so let's go ahead and just check our connection string just kind of double check and make sure that we have set that up correctly so we'll head back to appsettings.json so i'm going to move this off to one side here and then we'll take a look at sql server management studio uh and i see our typo here so this should be ms sql localdb so i'm going to go ahead and maximize this again and be sure you get your connection string right i typed mine in incorrectly here but we should be trying to connect to localdb in parens and then an escaped backslash ms sql localdb with two s's here and i had previously just provided one s so let's go ahead and try to rerun update database and so it's making a connection to our local db instance and it's going to go ahead and create the simple image gallery database and you can see that it says done so if we head back into microsoft sql server management studio and then i'm just going to click refresh here on our local db instance and then expand databases and now we can see this simple image gallery database among the list of databases that you may already have on your machine if we expand this and then expand tables we can also see now that we have a gallery image table with an id created title and url and an image tags table here that just has an id and a description and then a foreign key back to a particular gallery image id okay so that's looking pretty good let me just go ahead and minimize sql server management studio for right now and i'll close my app settings and we can also close the package manager console for the time being i'm just going to go ahead and also close all the tabs and if you're tracking this project using git then this may be a good time perhaps a bit late but this may be a good time to make a commitment okay so back in our project here we had started building this gallery controller before we created the data layer for application and ran our first database migration so we had decided that we were going to have a gallery index where we would actually use the gallery index view model to display some images and the ability to post a search query on this page so let's go ahead and before we actually use our our back end here and some services to either push or pull our own data onto the page here let's just go ahead and create a sort of mock some mock data that we can use just just to demonstrate how the controller and the view model and the view are all working together so you can see that anytime we have this gallery index model we need to supply some images as a list of our gallery image object and potentially a search query here that the user could use in like a search form and so what i'll do is probably just have three sort of mock images that we can then pass to our image list so we'll say images is equal to some image list that we'll actually go ahead and create so we'll do that just above here our image list is equal to a new list of gallery images oops and we don't need the semicolon here and here we can just go ahead and build that out so we'll specify a title and let's just go ahead and build out three images for our sort of mock implementation so our first image will have a title of say like hiking trip or something the url we will provide in just a little while here created we can have datetime.now and then tags we'll just mock out a quick like hiking image tags collection that we will specify above here so this would be a new list of image tags and let's go ahead and create another set of tags here and we'll call this city image tags and so what we'll do is we'll create two more gallery images in our sort of demonstration here so we have one for hiking trip one title will say you know on the trail we'll provide a url here in a moment and again we'll we'll hook it up with the hiking image tags and then for our third gallery image we'll just title it downtown and for the tags here we can provide the city image tags okay so if we head back up here into our tags we'll do is we'll just have some sort of mock objects here we'll say tag one there's a new image tag and the description will be like adventure and we'll make the id 0. and i'll create just three different tags here so we'll have adventure and then maybe we'll have one called urban and we'll create a third tag here and we'll make the description like new york with an id of two so these are just sort of mock objects again that will eventually be provided back by our own data and then we'll have a service that actually you know handles passing these these particular instances around so for now we'll just go ahead and create three mock tags with descriptions and ids so i'm just gonna go ahead and fold these and then we have a new image list here that has three gallery images in it each with a title and empty url for the moment created on of datetime.now and one of our image tag collections so one thing that we forgot to do here is we'll say hunting image tags.add tag one and then cityimagetags.adrange and we'll just go ahead and add range tag two and tag three and here we need to say new list of image tag okay so now we have a collection of hiking image tags that contains the single tag here adventure and then our city image tags contain the urban tag and the new york tag as well and then in each of our gallery images i assign one of these collection of tags to map to this tags property that is on our each of our gallery image objects okay so that's looking pretty good i'm gonna go ahead and collapse each of these so we'll have an image list of three gallery images each of which should have all their properties except for the urls and then we have our viewmodel here in which this image's property gets set to the image list that we just constructed and our search query will just make an empty string for the time being now let's go ahead and again just for demo purposes fill out the urls here so we'll provide some urls now that you know won't be hosted ourselves but will be hosted remotely so what i'm going to do is i'm going to head over to pixels and we'll just find a few images to use very briefly so i'll just search for hiking and we'll scroll around until we find a nice image that we might want to use so this one looks pretty good if we select download we can see the url for this particular file you definitely don't want to have a reference to someone else's hosted image if you're using it on your own website again this is just strictly for demo purposes so we'll go ahead and paste that in our url here and shortly after we demonstrate this we will be replacing it with our own images that the user can then upload to our application so then we have another hiking image so we'll go back and just select something else likewise we'll get the url for this image and then we have one more image to grab here and we'll go ahead and grab this url all right very good let's go ahead and save this and so we have a sort of mocked out index action here well the view model that will actually pass down is mocked out so let's go ahead and create our view now so i'll open up the solution explorer and just go ahead and pin it and then in views i'm going to open this up and we'll collapse home i'm just going to right click here and add a new folder and we'll call this gallery and then in gallery we'll add a new item and we'll make it an mvc view page called index.cshtml i like to just create a vanilla view without having visual studio scaffold it out because sometimes it provides more than we actually need and so at the top of our view here we'll be using razer syntax to specify the model that we'll be using on this view so we'll do that with a spiral model with lowercase m and then here we need to provide the actual model so we'll go into our model's namespace and then gallery index model will be what we're using here so what i'm going to do is just go ahead and create a simple div of class container body content and then we'll make a div of gallery content and then what i'm going to say is just at for each of our image in capital m model dot images we are going to create a new div of class gallery dash image and we'll just have this be an empty div for the time being now we need to go define some of these classes in our css so we can do that if you expand this www root directory here this is where all the static files for our application are getting served up from and then we have this css folder that contains our site.css so you can see that we have just a minimal amount of css defined for us here we could create a new to specify some custom css but in our case i'm just going to go ahead and create it in this file so i just need to define a few new classes here we have this gallery content and gallery image the remaining classes here are coming from what's been defined in our application already note also that because we use the template we also have bootstrap available to us so let's go ahead and create a gallery content and gallery image class and what i'm going to say here for gallery image is we'll specify some padding of say 8 pixels and then for our and then we'll specify a default background color of white a tiny border radius of two pixels will display inline block and we'll specify an explicit width and height of 300 pixels i'm going to give just a little bit of margin as well maybe we'll make this 12 pixels and position relative i'm just going to supply a little bit of box shadow on this element fairly transparent here okay so let's kind of specify sort of the little container that each of our images will be contained in and then our gallery content container will specify a bit of padding as well and we can make additional modifications to that if we need so let's go back into our view so we now have definitions for both of our css classes that we're implementing here and then we have a for each loop where we're actually looping through each of the images that will pass you know whatever model gets passed this this view and though we may not want to put it out on the screen you know in the final application just to kind of demonstrate how this is working we can also just throw out the title we'll wrap in a span onto the page two just to show some of that data and then maybe in another for each we can say var tag in image.tags we can create an unordered list oops and the ul's obviously need to go outside of this for each of our tag.description and so now we have a sort of nested for each loop here so we'll have the set of gallery images and then on each of those images for each of that images tag we'll put the tag description out to the page as well again just kind of a simple version to demonstrate how we can get this working let's go ahead and build our solution and i'm going to go ahead and make a commit as well all right so let's go ahead and just fire up is express and we don't have a link in our app yet to the gallery controller so we can just at the url provide slash gallery and so you can see already that we are getting three of our images out to the page here so we don't actually have the images themselves we're getting the tags out and then it looks like we have a slight issue here with a title so let's go ahead and fix that here we need to provide a spiral for image dot title if we go back and refresh now we can see the titles so let's go ahead and get these images out to each of their sort of containers here and the way that i'm going to do that is provide some inline css here on our gallery image div so provide a background image and set the url equal to at image.url okay so we'll save that and go ahead and refresh our page so now we're getting an unresized version of each of the images what we'll do in the future for our own images is actually implement some image magic here to actually crop the images that a user would upload to their application but for now we could also just you know resize this using a little bit of css it's not ideal because the user still is actually accessing that large version of the image and then just getting it styled down to size but let's go ahead and do that for now anyway back in our css and our site.css what i can do is say background size 100 background repeat no repeat and background position center and so if we refresh the page now you can see that our images aren't square so we're not actually cropping them but they are now fitting within each of our containers we could say if we wanted it to look a little bit perhaps nicer without doing any actual cropping here we could say 100 to 100 and then if i refresh now the image is sort of sized to the entire cell but you can see that there's some distortion going on as the image is stretched there's perhaps even a better way rather than do background size 100 at all we could just say cover and if we refresh now we can see that the images just essentially fill the maximum amount of area they have in their div of course some of the image gets cut off but we don't have any distortion and what i'd like to do now is maybe to put a little bit of just a tiny border around each of the image containers it's the way that i'm going to do that is i'm actually going to nest the gallery image in a gallery image container and the gallery image container will be what contains many of the properties that are currently on our gallery image so for instance the padding background border radius display height with margin position and box shadow and so now this padding if we nest a gallery image div inside of our container should provide us with that little bit of white space around each of the images so let's go back into our index view and just go ahead and wrap this div in a div of class gallery image container and then i'll move the span with the title and the list of tags outside of the container and i'll just clean up some of this a little bit and just double check our css go ahead and save this and now go ahead and refresh the page and we're not actually seeing our images here so let's see what the issue is uh we need to specify actually a height and a width on our gallery image as well so we'll make these 280 by 280 pixels and so yeah we get the images out to their containers now so the styling isn't perfect but it just gives us kind of a very quick and dirty starting point next thing that i'll do is go back into index here and to our gallery content i will also make this a row so just kind of like a bootstrap row here and then now that we understand that we are indeed passing the title and the collection of tags out with our model i'll go ahead and remove those as well and then refresh the page and this should give us kind of more of a gallery look here okay so we have our images out to our gallery view so now what i'd like to do is to go ahead and first of all make a commit because we didn't make a commit in the last video and now what i'm going to do is create a new project here for our services so we need to stop the server and then i'll go ahead and create it here so we'll add a project and i'm going to call it simple image gallery dot services and again we can rename the default class here so the first service that we'll create will be our image service so let's just go ahead and rename class 1 to image service and we wanted to implement an interface i image so first of all let's rename the actual file to image service and then in our data project will be where we actually specify this interface so we'll go ahead and create a new class and we'll make it an interface and we'll call it i image okay we'll make this interface public and then over in our image service you can see that we now need to actually provide a reference to our data projects let's go ahead and do that we'll add a new reference we'll select our data project and select ok and now we can go ahead and import that namespace so let's go ahead and decide what methods we would like to define on this image interface so we have a relatively simple idea for this application so i don't want to over complicate things we'll just have a few different methods in this service that we could actually implement later on in our controller so maybe we'll provide the ability for whatever implements this interface to return a collection of our images and for this we need to import the correct name space for this as well and we can just have a method that gets all of the images we'll have a method that returns a particular image by its id and then maybe we'll also have the ability to return a collection of images by a particular query that corresponds to some tags that might be on that image and so we'll have a method that we can pass a string that will then return a collection of gallery images that contain a tag whose description corresponds with the tag that we pass this get with tag method and this will be enough to start with we could definitely either refactor or create new methods or change the overload for this method as we develop the application but this should be enough to get us started so if we go down to our image service we can then control period to implement that interface that we just created and if you're using resharper you'll see some options here otherwise it should just go ahead and populate the methods that are required to implement this interface and so what we're going to do now is create a constructor for our service and we'll provide it with our db contacts and then we'll create a field here private readonly field and then in the constructor we'll just go ahead and set it and so we can do now is in our get all method we have a reference to this db context and so we can simply return ctx dot gallery images and we can call include here bringing in entity framework core and just go ahead and conclude and include the image tags along with our query so now anytime we invoke this method to get all the gallery images from our database we will also have their tags with them so that's good let's go ahead and fill out this get by id method next in fact i'd like to go ahead and just move this perhaps just below get all and here we can return ctx.gallery images and we want to pass it in id so we need to pass an id to our get by id method so we need to head back into our interface and actually pass that in to the method here okay so we can go back now to our service and so this will return the instance of the gallery image that corresponds to the id that we pass our get by id method and then finally in our get with tag method we can simply call get all dot where the image pitch.tags dot any tag tag.description is equal to the tag description that will pass this method and in fact we should not name this tag since we're actually using that here as well as the parameter that we pass this method and of course we need to go ahead and return this also and just clean it up a bit here okay so here we should get all of the images where the tags on that image contain a description that matches this string that we pass our get with tag method so we'll be using this shortly in the future when we actually build out our our search box that we can use to query our own images with for now let's go ahead and implement this get all in order to actually get all of the images that might be in our database and display them in our gallery view so head back up into our web project and then in our gallery controller what i'm going to do is we can go ahead and remove some of this sample data that we created so i'll minimize image list collapse it and go ahead and just delete it likewise with our tags so we'll create a new image list and what we're going to want to do is invoke an instance of this image service that we just created the get all method on that instance and so what we need to do is actually we're going to be using dependency injection to inject the service into our controller so what we'll do just the top of our controller class is have a private readonly i image i'll call it image service and then we'll create a constructor for this class which will actually have an eye image on it so we'll call it our image service and then we can set the field so the controller doesn't really care about our service class per se the controller only cares that it receives some class that implements the interface that we defined with these methods of course our service implements this interface and so now we just need to tell the application what to actually pass its controllers when it asks for a specific you know purpose in this case our image interface so we can actually do that in our web project in the startup.cs file so if you recall down in our configure services method we can now add a scoped service to this method so we can say is services.add scoped to our image service class and for this of course now we're going to need to provide a reference in our web project to our service layer so let's go ahead and right click on the project and we'll add a reference to our services layer and now i should be able to control period here and go ahead and import the missing reference okay awesome so now this is kind of nice again leveraging dependency injection here our gallery controller once again is completely decoupled from our database it just says hey i need some methods that do the following i expect to be able to get all the images get with a particular tag and get with you know get by id i don't care what class is implementing it and our startup here when we configure services we say well we're using our image service to actually implement this interface and so anytime a controller or any other class here is asking for an implementation of our image service it's going to get mapped to the concrete image service class that we just created okay so now down in our index action here i need to correct some spelling here so now we're actually invoking that image service and we're going to call get all and use that to actually set the value of this images property that's on our view model so our view model here has this images property and it just takes this collection of gallery image which is an entity model that can get returned from our database and it's going to use that again to set this image's property so that we can use the same view that we just constructed this time instead of having those mock objects we'll actually be using whatever records are in our database which is of course currently nothing we just have an empty database with our schema so i'll go ahead and make a commit here you can see what we did with git status and we'll go ahead and get add everything and git commit create service layer implement image service in controller so back in our gallery controller this should work but we should essentially return a page with some empty results so let's go ahead and just fire up the server and confirm that's the case and we'll just visit gallery and so yeah you can see we just have an empty page because we don't actually have any records in our database so let's fix that we'll work locally first before we eventually wire things up with azure blob storage what i'm going to do is i'm going to revisit pixels and we'll search for some people skateboarding and so let's just go ahead and download a small version of this image and we'll go back and we'll download a small version of this image and perhaps one more here we'll download a small version of this image and then what i'll do is i'll search for images of boats oops i search for bore which is not a boat you could use poor images as well if you like we'll go ahead and download this picture and we'll do one more for our demo we'll go ahead and grab this one it looks like a pretty cool boat all right so we've got five images downloaded and now what we're going to do is we're going to move those downloads into our static files here in the www root directory so under the images folder which should be created for you since we use the template i'm just going to delete these banners i can go ahead and just up stop the server first and then just go ahead and as i said delete these banners and then what i'm going to do is just navigate to my downloads where we just downloaded these images and we'll go ahead and grab the five that we just downloaded and i'm just going to drag those directly into this images directory and i'm going to go ahead and rename them as well so we have a couple boots and then the rest of them are of people skating so we'll have boat one and two and then skate one two and three okay so what i'm going to do just to create some mock data for us is to actually run a sql insert on our gallery image table so let's go ahead and do that we can just right click on the database and run a new query here and if we select star from gallery images now you can see that we have an empty table first of all also make sure that you are running it against the database simple image gallery or whatever you name the database for this particular series so what we're going to do is we're going to insert into gallery images created title and url and you can see that url is a keyword so i'm just going to wrap that for safety in square brackets here values and now we need to write an insert here for each of the five images that we just dropped in our static files directory so for created we can just say get date and then for title we'll have like my new boat and so you can see that it's going to be here under images slash boat1.jpg and so if we just provide the url as slash images but 1.j jpeg that should work and then we'll do the same for the other images here so we had five you can say out sailing this will be about two and then we'll say skate park skateboarding and whatever else skating so not being very creative here with the titles but just to show you how you could first run a manual insert to create some data to start working with just to verify the functionality of your service layer so we'll go ahead and run this insert and i'll say five rows affected so if we select from gallery images now we can see those five rows and so that's looking pretty good go ahead and minimize sql server and so now when get all gets called from our image service it's going to use the db contacts to actually query our database for all of our images we don't have any tags yet but that shouldn't matter at this point let's go ahead and just fire up the server and so we'll just go ahead and visit slash gallery and so you can see that indeed we are getting those images back from our database so these are getting served up directly from our static files directory so that's pretty cool um looks pretty good so i'm going to go ahead and fix up the the nav bar now so that we can just visit gallery by clicking on let's say like the sort of like the home link here so i'm going to go ahead and minimize this and stop the server you'll notice in the web project here in views we have a shared directory and then we have this layout folder or layout file here and it's got a bunch of stuff scaffolded out for us this actually represents the you know the entire wrapper for all the views in this simple application they get injected right here where we have this spiral render body method getting called so this is razor syntax once again to in a sense render any of the views in our application right here in this div you can also see some other things in this file we won't get into all the details for this simple series in our case all i'm going to do is just go ahead and for our purposes i'm just going to delete the div that contains the links at the top of the page and we'll call the gallery controller index action here you can see we're using asp tag helpers here which is really nice so we're constructing an anchor tag here a link with the asp controller set to gallery asp action set to index and i'm just using it you know sort of as a standard anchor tag with this kind of nice syntax so it's just a basic anchor tag here but razer will actually interpret it and essentially provide you with the route that corresponds to this controller and action combination so that's kind of nice and that's fine our app can still be called simple image gallery that's cool i'm going to go ahead and remove this button and the other thing that i'll do is in our startup class if we scroll down we can say that the we can see that we're setting the default controller to home let's set the default controller to the gallery index so this way when our application starts we will just immediately hit the gallery index let's go ahead and try this out now okay cool so you can see that you know even though we're in the root of our application it is serving up the gallery index action and if we click on simple image gallery this is where we get taken so we don't have any other views in the system right now we need to create two of them we need to create a detail view so that when we click on an image we actually visit a detail view of that image and we'll need to also create a form page so that we can actually upload new images from our computer to get displayed here so what i'd like to do is to go ahead and wrap these in links so that when we click on them we can then be taken over to a detail view where we can see a larger version of the image as well as its description and perhaps its tags as well so let's go ahead and do that so yeah so here's our layout and actually while we're here in this layout page that i have open so this is our our layout.cshtml file and if you need to find that again that is once again in our shared directory inside of our views in our web project here and while i have this open what i'm going to do is just go ahead and actually create a link here in the nav bar to an upload page which of course we haven't created yet but it will serve as kind of a placeholder for that and we might as well add it while we're here in the layout so directly after this div of class navbar header where we have the title of our application and go ahead and create another div and we're going to just give it a navvar collapse collapse and then we're going to create an unordered list here with just a single item for now but we'll go ahead and give ul a class of nav and then the snapbar nav class as well and then here we'll just have upload and then we're going to go ahead and wrap this in some tag helpers here so this will be the asp controller and if you recall the controllers that we currently have are just the gallery controller and the home controller so what i'm going to go ahead and do is create an image controller that will then have an upload action so we'll say asp action is equal to upload and yeah we just need upload to be inside of this anchor tag and the list element should wrap the anchor tag since there's only one of them here i'm just going to go ahead and put this out a separate line if we take a look at the page and refresh it we should now see this upload link which currently leads nowhere because we don't have an image controller or an upload action okay so now let's get back to the task of creating links around each of the images that appear in our gallery and then having those take us over to a detailed view so for that we need to go into our views and then the gallery our index view here and you can see that we have this for each we're iterating over the collection of images that's on our view model and we're currently just putting out this div of class gallery image container and then we have a container for the image itself where we're setting the background image url equal to the url property that's on any particular image and so quite simply here i can just create another tag helper and we're going to use the gallery controller in this case we could use the image controller as well and have like an image slash detail action i don't mind putting this in the gallery controller we have a pretty minimal application as it is so then we'll say asp action is equal to detail and then we are going to need to tell the controller action which image in our collection to display on the detail page so what we can do is just go ahead and say asp route id is equal to at image dot id okay so if we just save that and then if i go refresh the page here you can see now that these are clickable elements and if you take a look down and at the bottom of your browser where these are leading you can now see that they will be corresponding to the id that's on each of these images so if i click it you know we're currently getting taken nowhere because we need to go ahead and create this action now so i'm going to go back and i'll minimize the browser and now i'm just going to go ahead and stop the server and i'm going to make a quick commit bring this over and now i'll mention this also in the comments below but between the third video in this video i had done a recording and then i lost some of the video files and so i had to kind of work backwards and so i'm on a separate branch here because i had been a little bit further along in the code so that's why this is on a different branch here and why you don't see master any case just a minor note in case you're wondering so we can go ahead and say that we added these and we can commit add upload link to navbar links around gallery images and we'll just go ahead and push those okay so now let's go into our gallery controller and as you recall we have this image service that we have injected into our controller this allows us to grab the images we can also use it to grab an instance of an image in a particular image by its id which is exactly what we'll do for our detail view so currently we have this index action let's go ahead and create an action action result detail and we'll have an int id which will be the id that corresponds to the the image that we want to visit and so we'll go ahead and store a reference to that image in a variable here so we'll just call it the image and we can invoke our image service to get by id the id that we pass this detail method and so you can see that this is going to pull back an instance of one of our gallery image objects and we're just going to push that into viewmodel we could pass the entity object itself sort of you know as a domain model to this page but i like to make view models for each of my pages so we'll say that the model is equal to a new gallery detail model and let's go ahead and actually create this model so this again is a view model and it's going to be here in our web project in the models namespace and our models folder here so i'm going to right click and just simply add a new class gallery detail model and what we'll do is this is essentially for now just for this simple app here it's really going to map one to one to our domain model so we'll have an id property that we need and something that someone has mentioned in the comments recently which is um you know kind of nice if if you prefer to use it it's a little shortcut here where you can type prop and it's a code snippet i'm in visual studio if you're coding in visual studio then if i hit tab twice here then this kind of scaffolds out a simple property for us here i'm using vim and so it's just about as fast or at least as comfortable for me to just type it or to copy and paste a bunch of properties at once too so you know whatever suits your personal preference but just to know i'm just a little code snippet that you may want to be aware of particularly if you are building larger pogo classes out so we'll go ahead and create the title property for our image and we can also create like a list of strings for the image tags and for that we need to go ahead and bring in collections all right so if we just recall the actual image model in our data project here where we actually specify the entity model gallery image we also have a created on we have this uh you know enumerable collection of image tags in our case if we have f12 here we can see that a tag is just an id and a description for our view model the tags for you know as far as the viewer is concerned are just strings and so we're just going to simplify that in our view model when when the user clicks on the clicks on the image detail view they can just see a list of strings regarding the image tags okay and the url here is the url which represents the path on disk whether locally or remotely to the image itself so let's go back to our view model that we were just working on and i think i will also here include the date time for the created and of course the url so this maps as i said almost one to one to our entity model i just prefer to keep it separate just because we're using view models in other places in the application and i just tend to like to keep my entity model separate and use them strictly for the purpose of designing the overall architecture for the application and then things like our view models basically consume some of their properties and then can maybe be any number of different combination of of properties on any number of those models but if you're building something extremely simple which in fact we are then you may even just consider using the entity models here in the views okay so let's head back into our gallery controller and so now let's populate our model so the id will clearly be the image id the title will be the image title created on likewise actually i caught it created in the entity model that's fine url is equal to image.url and then for our tags so what we have here on our viewmodel again is a collection of strings or more specifically a list of strings but the tags that are on our image object are actually a collection of our tag model so this image tag entitymodel and so what we can do is just simply call like select here and we'll say like t dot description not to list and so we could put this in a separate method if we want to kind of clean up the construction of this view model but it's pretty simple so we're just basically getting all the descriptions for each of the images that are in this tags collection and then dumping them into a list and then setting the tags property on our detail model to that list so it's pretty straightforward so we can just go ahead and return the model to our view and just fix my typo here so this is an extremely simple action result basically just getting an image by id from our database by means of our image service that we've injected into this controller and then mapping all the properties that we get back from that image from our database onto properties that we define in this specific view model so now what we need to do is to go ahead and create a corresponding view for this so in our views folder here under gallery we're going to go ahead and create a new view and i like to do this manually so we'll just do mvc view page here and this we have to call it detail and i'm just going to go ahead and clean this up and we'll define our model as our gallery detail model that we just created and remember that our views get rendered inside of our layout so if we revisit our layout here and we see this render body method this razor method that's getting called here inside of this container body content so anything um just as a reminder here anything that we're creating in our detail view here is already getting rendered in our view directly here okay so back in our detail view what i'm going to do is go ahead and create a div of class container body content again this could could and may very well already be on the outside of of our view but um just because i recall using it here on the index page will just be consistent i'm gonna go ahead and create a row and now we just need to display our image you know a large version of this image on the page so i'm going to create a css class here called image detail container which we have yet to define but we will and then we have a div of class image detail and here's where we'll actually put an image tag so the image tag will be the url on the model and then we can also specify alternate text here with alt model.title and so that way when the user hovers the mouse over the image they get this alternate text which will correspond to the title okay and then i'll create another row here div class row and we'll have a span where we can say title model.title again and then below it here we'll have a second span where we can say uploaded and here we'll have our model not created on okay and i'm just going to have a final row here and here i'm just going to provide a link back to the gallery so we'll style it as a button and we can use bootstrap's button primary asp controller is equal to gallery asp action is equal to index and we can just say back to gallery okay and i'll create custom css class here call let's see just controls maybe and then here we'll have one called um image metadata or something maybe image detail meta okay so with that let's just go ahead and fire up the server and check it out all right so if we click on an image looks like we are hitting something in our code here and we're getting a null reference exception here let's see where we're getting that so image.tags is null our url is populated created title and id are all populated but our image tags are null so let's go ahead and fix that so what we need to do first of all we need to stop the server but then we need to head into our image service and before we do that i'm also going to clean up these usings okay so now we need to head into our image service which is which implements this interface but if you just f12 here you'll just be taken to the interface that our service implements so we need to head into our service project and then click image service here okay so what i need to do is to actually call include here when we find this image so what's happening is that this image is getting found but its navigation property tags is not actually getting populated and so we need to explicitly include those tags here in our query so rather than find by id what i'm simply going to do here is actually return get all and then i'll say where the image imaged it dot id is equal to this id and then we can call first and so what this is doing is it's just reusing this get all method here that we have already where we already have this include called otherwise we'll just be repeating some code here where the image id is equal to the id that we passed the get id method and then just grabbing the first from that collection so even though there's only one id in our database which corresponds to the id that we would pass here because it's a primary key where is always going to return a collection of objects and so since we need this method to return an instance of a gallery image and not a collection of it we just call first and grab the only element in that collection okay so let's go ahead and start the server again all right so we'll click on an image and so yeah this is looking a little bit better already so i'll leave it to you if you'd like to do some additional styling on this page but for now we can confirm that functionally it does appear to be working okay and i had to reload some styles here so sorry about that okay and i'm sorry about that i just had to reload some of my css styles here so if you've been following along since the beginning of this series then your image calories should be styled like this as well with each of these images inside a container if you will with this drop shadow so likewise the style on your gallery detail page may look something more like this as i said you may want to add some additional styles here just to clean things up so what i'd like to do now is to go ahead and create an upload form so that we can actually upload images and then store them remotely on azure so the first thing that we need to do is to just go ahead and well first of all stop the server here if it's running and we're going to create a new controller but first i'm going to go ahead and make a commit here and normally i don't like to store images in source control but just for the purposes of this video i'll leave them here so we added the gallery detail model and the detail view and we also included tags and get by id that's in our image service okay so with that taken care of we can just go ahead and head back into the code here i'm just going to close a bunch of these open windows here so we're just going to close all documents and minimize some of this as well in fact if you just click this collapse all button that makes it a lot easier and now we'll head into our controllers and what i'm going to do is create a new image controller here so we're going to add a controller and we'll make it an empty mvc controller called image controller so control parade to remove some of these usings and then if you recall actually in our layout so here in the shared directory in our views i created a link to our upload view here and i specified that it would be in the uh image controller and then the upload action so let's just go ahead and create an upload action here and we'll create a new view model and then we know we're going to return this model ultimately to the view so let's go ahead and create our view model and we'll add it to our model's namespace and we're just going to call it as we did here upload image model and it's going to be a pretty small model we'll have a string for the images title and just call it title and then we'll have some tags which we'll represent as a string here and what we'll do is we'll have a user who'd like to upload an image specify some tags like comma separated in a form text field and then we'll have some logic in our controller or in a service layer somewhere where we'll actually parse out each of the tags that are separated by commas and then we can apply those the new image object that we create and then the next thing that we'll have here is an iform file image upload and this is going to be a really useful type it's going to come from microsoft asp net core http and so we can bring that in and then back in our image controller we don't actually need um to set anything on this upload image model so we're going to be presenting the user with an empty form and then it will be actually up to the user to fill that form out and then actually post it back to another action result that we can we could place our controller here which is going to handle all of the assigning of the properties that the user provides to the new object that will get created and so for that we'll need to create a post method http post so we can use this attribute here and we'll call this upload new image and for now we can just return okay we are going to actually put all the logic of handling what happens after the user posts an image here in this http post method what i'd like to do very quickly is to now just go ahead and create the view that we can hit that will contain our form where we can upload an image so here in views i'm going to create a new folder actually called image and then inside image here we'll go ahead and create our view and this we'll call upload so that it matches our upload action result okay so here we'll specify the model again this will be our upload image model and again we'll keep it quite simple like our other views in this app so we'll have a row and we'll call this an upload container that'll be a custom css class we can use and then we'll have a div of class form actually i'm just going to call this upload form and we'll apply our drop shadow and now we'll actually place our form element here so what we can do is we can actually specify tag helpers here as well so we can have an asp action is equal to upload new and then we need to specify a method of post so that it can submit this form as a post request and just double check on the image controller yeah we call this action upload new image and we supply the http post attribute here the next thing that i need to do is specify this encoding type here or ink type and here we need to declare it as multipart form data so the end type attribute here just specifies the content type that's used to submit the form and so like the value of our method is post and so now we can provide a specific type and so multipart form data is what you would use whenever you want to submit something like a file up through a form from the client side so that's why we'll be using multiport multipart slash form data with our post request if you didn't have this here then the image wouldn't actually get sent with the request okay and finally i'm going to give this form an id as well and we'll just call it upload form okay i'm gonna go ahead and clean this up just a bit as well and here we'll have a div class form group oops farm group from bootstrap and let's create a label for so this would be label asp for title and so you pass asp4 here just one of the property one of the properties on your model and then we can provide our input and do the save and i'm going to give this a class form control here as well okay i'm going to create a second form group here so just copy and paste this and then what i can do instead of title here is just to leave both these and then we will create a label and input for our tags and then finally we need to be able to actually allow the user to upload an image so i'm going to create a third div here and we're going to specify a label with class button button default and button file which will be a custom css class and here we'll say like browse for image and then here we'll specify our input so we can say type is equal to file name is equal to file and then here's a little trick we can actually set this an inline style here of display none just because the default input for uploading files to a form doesn't really look that good and so instead we'll just kind of hide it and provide um this button to allow users to click and browse for the image okay and then finally here we'll have a div of class submit and we'll have a button of type submit id will be our upload button or button upload and the class will be a bootstrap button button info okay so let's take a look at what this looks like now so we'll fire up the server and if we click upload we can see our simple form here again we don't have any custom styling on it and i think in this case i might like to add just a little bit so let's go ahead and do that now so we need to head over into our css and one thing i'm going to do is i i created this um box shadow let's move uh this over here so we can kind of take a look at the code or the markup and the css at the same time so i specified this drop shadow css class here um and so what i'm going to do is take the box shadow out of our gallery image container create a new class called drop shadow and then and then just paste in the box shadow that i'd already specified here inside of this dedicated drop shadow property and then what i can do is i'll just view the solution explorer again and if we head back into our gallery index so if we go here to views and then our gallery index this div class gallery image container i'm also just now going to add our drop shadow class too because the drop shadow is something that i would probably like to use on more than one element throughout the application so we'll just have a dedicated css class for it here okay so we'll unpin our solution explorer again and the other thing that i'll do while we're in here editing css is first of all correct this typo but i'll also go ahead and add styles for the css classes that i declared on our image detail view as well so we'll have this image detail container just with some really simple stuff here so we'll just do text align left and then we had an image detail class where i'm just going to provide a little bit of padding and border radius and then we had this metadata row on our detail page which included the image title or description if you will and then the credit on date or uploaded date so we'll provide a bit of padding there as well okay so now on our upload page here let's kind of work i guess from bottom to top here so we have this submit button so we had a class submit and here i'm just going to provide a tiny bit of padding this button file i think i'll just provide a little bit of margin around it so we'll say margin of like 6 pixels then our upload form here or we can see that this is a form element and we had an id of upload form so we can say upload form provide some padding will provide auto margins and a width of 50 so that's going to kind of keep things centered and then finally i had this all inside of this row of class upload container where i'll just provide another little bit of padding here so i realize that there's some duplicate css here i'm just going to leave this here that you can then go through and further customize to your liking so come here and just reload yeah and that's not it's not really necessarily beautiful or anything but it does start to slightly clean things up so you can see that we can provide a title like sample image let's say that we were going to upload images of like mountains so we might say like mountain camping hiking and then we could browse for the image um we could select one and then we could submit our form so we obviously don't have anything happening yet inside of our post method so let's go ahead and start to wire that up so i'll go ahead and close the css for now and we'll pin the solution explorer back so we'll head into our image controller and let's go ahead and just set a breakpoint here on our post method of upload new image all it's going to do is just return like a you know http 200 response back just just to say that everything is working but of course we don't have anything happening in this method nonetheless let's just set up a breakpoint here and what i'll do is just go ahead and submit the form and so you can see we hit a breakpoint here so the http post is indeed working if we just hit f5 to go through we obviously have an empty response here next we will actually complete this http post upload new image method and wire it up so that we can actually post the file contents from that form up to azure in order to store it in blob storage so i've got the server running here and we're just going to take a look at the page this was the upload page that we had worked on so we're going to be able to supply a title as well as perhaps some comma separated tags and then we can browse for an image on our computer and then submit it and what we'd like to do is to actually have this submit to file storage on azure so let's go ahead and take a look at how we can get all that set up so what i'm going to do now is head over to the azure portal as it looks today and i believe you can sign up for a free account and the free account will give you access to some services for a limited period of time or within a certain budget that microsoft will provide you if you're signing up for the first time so i've got an actual paid azure account here but like i said this should be free to get started if you don't yet have an account so go ahead and create an account if you don't have one yet and once you do head over to portal.azure.com get logged in and at the time of this recording the dashboard should look something like you see here and what we're going to do is go over to storage accounts and we're going to go ahead and create a new storage account so i'm just going to click add here and this is going to take you through a little wizard here where we can just supply some information about the storage account we'd like to create so i'm just going to go ahead and create mine here we're just going to call it dev image gallery we'll keep the deployment model as resource manager and the account kind as general purpose we're going to make the performance standard and for replication we're also just going to use the default read access georedundant storage we won't require secure transfer for this demo and i'm going to use the pay as you go subscription but like i said if you have a free account on then be sure to take advantage of that here you should see some option to use your free subscription go ahead and create a new resource group and i'll leave my location as central us so at the very bottom i'm also going to select pin to dashboard and then we'll go ahead and create it so this should just take a few seconds so once the form submits you should get this little animation here letting you know that the storage account is currently being deployed and this will take a few seconds to a minute or so to complete okay so once it's complete you should see an icon here on your dashboard if you didn't click pin to dashboard then you can also access it from the storage accounts link here and you should see it in the table so i'm just going to go ahead and click here and now you can see some information about your account the resource group the status and the location that sort of thing and so now we want to check out our access keys so go ahead and select access keys from settings and what we're after here is our connection string so we're just going to go ahead and grab the first connection string that we have here and we're going to copy it to the clipboard so you're going to want to make sure you keep these keys secure what i'm going to do is actually store these in user secrets so we're going to use this connection string to have our application connect to our new storage account but what we can do is actually use something called user secrets with asp.net in order to keep our connection string out of our code base so let's go ahead and take a look at how we'll do that so i'm going to leave this window open i'm just going to minimize it and what we're going to do first is actually just install the secret manager tool in our application so we're just going to right click on the web project here in this case simple image gallery and we're going to go ahead and edit the cs praj now among the item groups where we have cli tool references i'm just going to add another tool reference here so the string for our include will be microsoft.extensions secret manager dot tools and at the time of this video i'll be using version 2.0.0 i'm just going to go ahead and save and then i'm going to go ahead and rebuild the solution i mean for that we should stop debugging of course and so the first thing that happens here is the nuget packages are getting restored including the new package that we've added here to our cs proj for managing user secrets so now we should be able to do is if we right click on the web project again we should have the option to manage user secrets so let me go ahead and select this and what we see here now is a secrets.json file that's currently empty well we have the opening and closing curly brackets but otherwise we don't have any key value pairs for our user secrets here so what i'm going to do is go ahead and add my connection string for my storage account here has a key value pair in this json file so i'm going to go ahead and just call this azure storage connection string and then here i'm going to go ahead and paste that connection string so be sure to generate your own and as i mentioned don't share it with anyone i'm going to go ahead and remove this connection string as soon as i'm done with this part of the video if we head back into the cs proj you'll also notice that what we've done has generated this user secrets id node and sort of auto generated something like a grid here but this could really be anything so the way this is working is that the secret manager tool is basically storing this json file not with our solution anywhere but actually on our system so on windows this is going to be somewhere in our app data folder and then in like the microsoft folder and then there's a folder called user secrets so it's not related to our solution the user secrets tool will handle all the implementation details regarding using the connection string that we specified here so as long as we have the key value pair stored here what i can do is basically reference the azure storage connection string key here whenever i'm looking for the connection string we're going to go ahead and close our secrets.json again the user secrets id here is actually just going to be the name of the folder in our app data directory where that user secret is stored on our system you could rename it here and have it be something completely different but i'm just going to leave it as it is and we'll go ahead and close rcs proj now if we head back into our image controller we're going to use our applications configuration to simply access our new user secret so what i'm going to do is create a private field at the top of our image controller class and it'll be of type i configuration and so for this we need to bring in microsoft extensions that configuration and i'm just going to call this field underscore config and i'm also going to create a field which is just a string called our azure connection string and this we just need to have an accessor for so we're just going to actually get this and now we'll go ahead and create our constructor so that we can use our leverage dependency injection to get the configuration for our application okay azure connection string is equal to underscore config and then we just need to pass it the string that we named the key in our secrets.json file which was just azure storage connection string okay so now we can just make use of that here in our image controller class so we're going to need to actually perform a series of steps here to actually get access to our dev image gallery if we head down where we see blob service here and we have this option to see various containers that we might create for our storage account we don't have any containers yet and you can see that it's going to say click plus container to get started here so let's go ahead and add one and we're going to call this images and for the public access level i'm just going to go ahead and set this to blob and we'll say okay so now we have this new images container on our storage account so let's go ahead and minimize here and let's start to write the various methods that we need to actually connect to that blob storage from our controller action so i'm going to store our container in a var here and i'm actually going to delegate this responsibility to our image service and we're going to have a method on it called get blob container which is going to take our connection string and the name of the storage container that we just created which was images so let's go ahead and use dependency injection to inject an instance of our image service so we'll go ahead and bring in the using for that from our services namespace create the private field here and we'll set it in our constructor okay so now we have access to a valid image service and so we just need to write this method get blob container so i'm going to go ahead and control period here to go ahead and just generate that method and we can f12 to go over to it so the way this is going to work is we're just going to go ahead and store a var for our storage account so we'll have this cloud storage account and we can go ahead and bring this in by adding a reference to microsoft dot windows azure dot storage and here we should be able to simply call.parse and pass it our connection string next we're going to store our blob client in a var so we'll use our storage account and we're just going to go ahead and create a cloud blob client now we need to return a reference to that container that we just created so we'll return blob client dot get container reference and we're going to pass the string v here which was just named automatically if we go back into our image controller here that string v actually corresponds to the name of the container that we'd like a reference to so what i'm going to do is head back here and we're going to call this container name and we're going to go ahead and use it to get our container reference and more specifically than just an object this will return a cloud blob container object so we for this we need to bring in windows azure.storage.blob and so all this method is doing is returning a reference the particular blob container that we're after or in order to get that container reference we need to have a valid storage account which we can access using our connection string and then we use this cloud blob client object in order to get a direct reference to the container of the name that we specified so let's go back into our image controller now now we're going to be uploading an image so the next thing that we want to do is to actually parse what's called the content disposition response header so let's store the content disposition in a var we'll just call this content and for this we can use content disposition header value and we'll need to go ahead and bring in http headers and here we can parse the file that we're uploading oops and of course upload new image needs to actually take that so as an argument so we're going to go ahead and use iform file for this and we need to bring in asp.net core http and now contentdispositionheadervalue.parse will take our files content disposition now from this we should be able to grab the file name that's being uploaded note that we have other properties that we can access here as well including just simply the name we have file name star we have the size and the read date a few other things here creation date that might be useful depending on the structure of your application in our case we're just going to go ahead and grab the file name and you'll notice that when it comes back it's going to come back with some quotes around it so we need to do is to actually trim those quotes so we've got our container we're grabbing the file name from the upload that's coming from our form now we need to do a few other things here first of all we need to get a reference to a black blob and we can grab that off of our container object so we'll just use the method get block blob reference go ahead and pass it our file name and then we can simply upload it so to do that we can call on our black blob upload from stream async and we're going to allow all this to happen asynchronously so we'll go ahead and await this we're going to make this instead of an i action result we're going to make it an async task action result type and we won't return ok and of course to use task we need to also bring in system.threading and upload from stream async is a method that we need to go ahead and pass our file and we can call open read stream on our file to pass it the stream that it requires to be uploaded and the other thing that i'm going to do here is also go ahead and use our image service to set our image and we're going to go ahead and pass it the title from our form the tags as well as the location that has been reserved for our image in blob storage and for that we can grab block blob dot uri and then finally we're going to return redirect to action index and then we'll just return back to our gallery so now we need to go ahead and write this set image method on our image service so let's head into our image service so let's go ahead and control period here to generate that method then we'll head into our image service and check it out so this is actually going to receive a string title and then a string tags that we'll need to basically parse based on like a comma delimiter and then the uri values if we go back in addition to the file in upload new image we're also passing in those tags and we're passing in the title of the gallery image okay so f12 to get back to set image and what we need this to do is to basically create a reference to that new image in our sql database so whereas previously if we select star from images oops sorry select star from gallery images you can see that the urls were all these relative paths some local image that we had in our www root folder we now need this url to point to the url where we now need this url to point to the location where the images are hosted in our azure blob storage database so let's go ahead and minimize this so what we're going to say is var image is equal to a new gallery image object where the title is simply the title string the tags we're going to create a new method for parse tags and we'll pass it the string tags the url will be the uri created will be just daytime.now just to keep things relatively simple and uri we actually need to go ahead and grab the absolute uri value okay so once we've built up this new gallery image object we can simply call our on our context and go ahead and add this object and then save changes and we'll save changes async here and go ahead and await it so we'll make our task async and now all we have left to do is to parse these tags that we pass as a string and we're going to pass this from the form as simply a comma separated list of image tags so we're going to create a public list of image tags and it's going to take as an argument obviously our string tags this should be pretty simple all that we need to do is to create a tag list and we'll basically say tags that split on the comma and we'll call that to list here and then what we can do is iterate over that list we can say for each of our tag in tag list we're going to add that to a list of image tag objects so let's new up an empty list of image tags and so what we can do is say image tags.add and we're going to add a new image tag where the description is simply the tag and now we can return our image tags list we can also refactor this into something a little bit simpler using link on our to list here we could select a new image tag for each of them where we just set the description equal to tag this should also work and that makes things a little bit simpler and now we can actually just return this and rather than two lists called here what i'll do is call two lists at the end here that should make it happy okay so pretty simple method to parse tags given a string of comma separated tags provided by our user and so that should take care of setting the image in our database we head back into our image controller we can kind of see how this is going to work our user will submit a form that passes up a file in the form of this iform file object the form is also going to contain fields for some tags and an image title and we're going to use our image service to get a reference to our images container using our azure connection string we need to go ahead and parse the content disposition of the file that we're passing up so that we can grab the file name we trim off some unnecessary quotations then we get a reference to a what's called a block blob here we get that reference by passing it the file name that we grabbed off of the file that's getting uploaded and then we call upload from stream async there to actually pass that file up to our azure storage we also take care of things in our own database here which simply creates a reference to that image using the uri that's coming back from azure as well as the title and the tags that the user has set using the form and we handle all that in our image service with the set image method that we were just looking at so finally we redirect to the index action on our gallery controller so the next thing i want to do is just go ahead and set a breakpoint here and we're going to start the application so i'm gonna head over to our upload form and we're gonna get an exception here that says invalid operation exception unable to resolve service for type simple image gallery services image service when attempting to activate our image controller so what's happening here is we need to make sure that we actually register our service in our startup class so let's go ahead and do that we'll head over to startup.cs if we scroll down to where we have configure services it looks like we are adding a scoped service of type image service and so yeah i actually wrote the constructor wrong in our image controller so we'll scroll up we need this to get past an eye image service so we're going to go ahead and stop this and so this takes the interface i image and so we'll go ahead and control period to bring in a reference to that interface and we'll do the same here for our fields that we can set the value and we'll do the same here for our field private field so that it can be set properly and so as you can see in our startup class when we're using dependency injection anytime our controllers are asking for something that implements the methods that are defined on this image interface it's going to inject a scoped image service and since we've configured our services this way we need to make sure that we are using the interface here in our constructor just like we used in our gallery controller as well if we head back there you can see that in the constructor for our gallery controller we are indeed also using the image interface here okay so let's go ahead and try to start the server up again and so now i can also remove the reference to simple image gallery.services and now that we're passing in an interface we need to go ahead and make sure that the methods that we created on the service are also defined on the interface we kind of did that backwards where i did it backwards so our image service has three new methods on it got this cloud blob container type kit blob container which takes a string connection string and for this we just need to make sure that we bring in once again microsoft windows azure storage.dll so we actually need to add a reference to that we've got we've got a task set image which takes a string title string tags and uri we need to go ahead and bring in our system namespace and we'll also bring in system.threading and then finally we also have a method that returns a list of image tags called parse tags which just takes in the string of tags okay with that we have now defined the new methods that we provided on our image service which implements this interface and so that should now be satisfied and i'm just going to go ahead and bring this back into a single pane and it's looking like it's saying that we're not implementing the interface member get blob container string oh i see we also need to modify i image to pass in our container name as well as a string okay so if we go back into our image service that's looking pretty good so we'll head into our image controller and we've got our break point set here on the post method so i'm just going to go ahead and start the server back up again okay so let's head over to our upload form and we're just going to call this test image and for tags we'll say hiking and adventure we'll go ahead and browse for an image select this one and we'll just go ahead and click submit so now you can see that we have a reference to our file as an iform file see that we have the file name and the content type as well as this content disposition we've got our tags being sent up here as this string and we have the title as well so let's hit f10 and we try to implement our image service to get a reference to the blob container so now we have this container object you can see the storage uri which contains the uri to our storage account that we'd set up i'm going to hit f10 here to get the content and then f10 again to get the file name so you can see the file name is hike.jpg now we're going to get a reference to a block blob and so we can see that object here and then we'll call upload from stream async here now we're going to use our image service to actually set that image in our database and then finally we'll redirect to the gallery so i'm just going to hit f5 and now we're back in our gallery and indeed you can see the new image that we have here in our gallery is the one that we just uploaded so we can click on it we can see it full size we can go back to the gallery and note that if we inspect this we can see that the image source is now coming from devicegallery.blob.cor.windows.net which is indeed hosted on azure whereas these other images here are hosted locally so if we go into our database and we select star from gallery images again we can see that indeed the url for our test image here is pointing to our blob storage on azure so that's pretty cool we can also now select star from image tags and we can see that we have some new records for the tags that we parsed i can see that we have a slight bug in that we're including a space here so we also need to go ahead and trim out spaces when we parse tags so yeah that's looking pretty good note also something pretty important here is that we don't have the connection string that we used to connect to azure anywhere in source code so that's currently just stored locally on the development machine that we're working on and so we don't need to actually worry about having that checked into source control if you were deploying this to a server somewhere say a separate dev environment or like staging or production and you were running your app on one of those machines then you might have secrets stored specifically on those servers either as environment variables or through some other means but for development purposes this is really nice that we can actually use cloud storage and not share our connection string publicly so that's it for this video thanks for watching and i'll see you next time