no not another javascript framework please don't we have enough of those but what if i told you that this isn't actually a framework it's a compiler mind blow all right hello class and welcome to this video where we learn about what's felt is and then use it to create an app that implements full credit functionality by using an api that i created a while ago for a video to which a link is in the description and the link for that api as well will be in the description more on that later so what is felt and what makes it different to the other ones so like angular react and view svelte is a ui framework for creating component based single page applications the catch is that svelt takes a different approach in that it doesn't have framework code that's actually bundled with your application it actually goes over your code in build time and then compiles all of your code into instructions in written in purely javascript leading to a very lean bundle size because later your bundle wouldn't have any code that's relevant to svelte itself it's just your own code that you have and svelte as well takes a reactive approach when rerendering your uh dom and it doesn't have a virtual dom so it doesn't work by com rather comparing a virtual dom to an actual dom and then seeing the difference and then rerendering the difference instead it watches over a couple of variables that you define and then whenever any of those change it actually rerenders the dom so they take great pride in that it takes less code doing the same thing you could do the same thing in react and do it in felt and you will be less code when you write it ins felt you can actually go here to learn more and write less code and you will see a couple of examples they show that for example this is with these two fields and calculating the sum between them this is what it would look like if you would write it in react uh using hooks and then this is what it would look like if you write it in svelte and uh i've i've played the round with svelte and it's actually pretty cool how how less code you get to write and even like the template syntax itself is very minimal and it's got some really cool features now this doesn't mean it's gonna replace react or anything uh react still has a lot of like improvements during the runtime and some other cool features that are in the bundle itself uh so yeah i guess it's up to your preference now if you are saying now i want to learn more about uh svelte you can go to svel.dev rather and learn more about it and if you want to like understand like this the idea behind it and the philosophy behind it i highly recommend this talk by rich harris the guy that made the framework himself uh this talk is called rethink and reactivity i'll put a link to this as well in the description it's a really cool talk that kind of explains why it's felt was made all right so this is the application that we're going to build in this video so it's got these posts it's pulling them from the api so it's fetching these posts and showing them here and we can add some more new posts so we can click add here using that form and we'll actually submit it to to a server and fetch the um the response back and if we reload it's still there because of the way the api works we can as well edit these like just type some other gibberish here and click update and it will be edited and we can delete these posts we can limit the number of posts and we have the snapbar right here and we have like two pages that we can navigate between just to show you like how to do a routing in svelte so the idea behind uh this app is that you get to learn some of the core things that you would do in a in most frontend applications like handling forms uh consuming a full credit api and routing as well so let's actually jump into the code all right so on the is felt main page let's go down and get this mpx command from here let's copy this and i'll go to my desktop and open up a terminal window and paste this command and we don't have to name it my spell project we can name it anything i'll just name it felt for now and hit enter and then now we need to see the internet also i'll say cds felt and here we need to run npm install because it hasn't installed the dependencies yet and i'll open it using vs code and let it install so if we look at the package.json we notice that we have a couple of scripts and we're going to use the dev script to build and run the app on a development server and if you notice here there isn't any dependencies it's just dev dependencies because it doesn't need any dependencies in production it only needs them in build time to compile the app so here i think it's done installing it has let's run mpm run dev and see what our application looks like all right it started already so let's go to port 5000 yeah and there we go we just get a purple hello world so let's look at our app so we go to the source folder and we have this main js that instantiates the new uh sfelt app and passes some props to the apps felt just to show you how props work they did that and here we get the prop and here we put the prop inside the markup saying hello name if you notice we if you change this name to hello youtube or just youtube it will now say hello youtube all right so let's get rid of these props because we're not going to use them and let's get rid of this export let name and this style as well and by the way ins felt um if you've worked with vue you're familiar with this um with this uh kind of syntax you have a script tag where you put your logic you have a style tag where you put your styling and you have your markup the only difference here you don't have a template tag you just put your markup down here and the cool thing is if you're um using prettier and by the way uh i recommend you get the svelt where is it right here the svelt vs code extension to have syntax highlighting inside of your app or i mean inside of your dots felt files all right let me close that close this now before we write any markup i want to grab a materialized css which is a cool css implementation of google material material design standards let's go to get started and here it tells us to install materialize css at next so let's do that so here i'll stop the development server and say npm install materialize css at next like this okay now we need to link the css uh we could link it here we will but by default the build tool for the bundling tool for svelte is roll up instead of webpack and it comes with very minimal uh setup so we need to actually install a plugin for this for it to actually recognize css files inside of the sveld files and bundle them into a css file in production so here i'm going to install the roller plugin so here i'll say npm install rollup plugin css only and say dash capital d for it to be a dev dependency all right now in the rollup config i'm going to add this import let's import that plugin so let's say import css from rollup plugin css only and then here underneath this svelt uh call we're gonna say css we call that uh namespace that we imported that function and here for the options we just pass output and here we will pass a css file that would be all the bundled css that we passed to our app so here i'll say public slash extra dot css so what this plugin now will do it will find any css that we inject into sveld files and unbundle all of it into this extra.css file and it will be in the public right here so we need to link it in our index html so here let's uh link it before our actual css so here we'll say link and we say the href will be extra dot css even though it doesn't exist yet but it will let's change the title here so it says felt tutorial and let's save this and let's go back to our apps felt now we can actually import css into this spelled file so here we'll say import now that we have materialized installed we can say import we go back one level to node modules oops node modules slash materialize css slash dist slash css slash materialize css dot min actually materialize dot min dot css like this and we can just copy this to get the the javascript and here we'll say slash js and here will be dot min dot js like this now let's let's save everything and let's run our app again let's say npm run dev and now we see that it created this extra css and it's got materialized stuff as you see here and it's actually linked materialize and if we would look at our app where is it right here if we reload we get that it's the header is now styled with materialized css header 1 styling cool so we have materialized linked i want to start by putting a navbar at the top of the page to link to different pages now of course the about page is empty i'm just using it to show you how to do routing in svelt so we're going to use this as felt routing library because by default the routing library doesn't come with felt so this is how to use it we need to run this command right here so let's copy that and let's open up a new window terminal window and paste that command so if we look at the library here it tells us how to use it it tells us to import these things from routing so we can we can copy this and let's go to our app uh app.felt we can close these we don't need them anymore so here we will import these um router and link and route from svelt routing and now we can set up our router here so here we'll say router and then here we will start to put our routes but the way i want to do it i want to put them in a nav but i don't want to put them right here i want to put the navbar in its own component so let's go to actually close that let's go to materialize css go to components and right here navbar let's grab this nav tag and let's go back copy that and let's click uh here let's create rather a new component and i'm going to put this in a folder called layout so i'll say layout slash navbar dot svelt and here we'll just paste that let's change logo to say spelled tutorial and let's change these let's just have two pages so one would be the home page and one would be the about page and we need to create these components as well and now these shouldn't be a tags they need to be links for our spell router to work so here we'll change this anchor tag to link like this link of course we need to import it so here we need to put our script tag and here we will say import link from svelte dash routing like this now we can use that so we can change as well the the brand to link like this we need to add a to attribute instead of href and this is the home so we'll say to slash and now we have this home link here as well so we'll say to slash like this and we will change this to a link and this is the about page so we'll say two slash about and change this here to a link as well now let's go back to our app here we need to put our navbar so we need to import it so let's go here and say import navbar from and on the same level we go to the layout folder and we get this nav bar and here of course we have to add svelte because um it's not a javascript file we need to explicitly say what the extension is now that we have navbar we can actually use it in our markup so let's put it inside the router so let's say like this nav navbar oops apparently i didn't copy that so i can just say now bar like this and underneath here i want to put a container to push everything into the middle this is by the way just materialize stuff and here we need to put our routes and if we would look at the page for the package our routes are like this and by the way you can ignore this url uh thing this is only if you're using server side rendering so don't worry about that and let's copy one of these routes let's copy the second one actually and let's go back here we need to put routes so let's put the home route the path will be just slash and the component will be home and by the way you can use the syntax but you can as well emit these um quotation marks they're not important so they're not necessary so let's put another one here and say slash about and this will be to the about component let's create these two pages i'll create another folder call it pages this is what a convention that i like to separate pages from components this is not a svelte com convention so here i'll say home that's felt and i'll create another one as well call it about dot svelt and in the about i'm just going to put a header one saying about page just to differentiate between them and here for now let's put a home page and we'll come back to it of course and populate it more and here we don't need links so we can remove it because the links are in the nav bar and we need to import these two components so here let's say import home from same level pages slash home home.felt and then we can copy that paste it one more time select home and ctrl d and say about all right let's save all files and let's look at our terminal everything is running fine if we look at our app right where is it right here for reload cool we get this now bar and uh it's linking between the pages but it looks kind of weird let's look at our app i think it's got to do with the uh the global styles yeah there are some global styles here i'm just going to delete all of them and let's look back to our app because we're going to use the materialized styling all right let's put a container actually to push these buttons in and for some reason this brand isn't the font size is tiny on that so actually let me check that to inspect it's actually not applying the class to it so and let's go back here to the navbar the brand logo class is not being applied so what we can do we can just wrap this as full tutorial with a span with this class so we'll give that class brand logo and then take that put it inside of here and then wrap everything here so let's cut everything inside of this nav wrapper and put a dot container tab and then paste back those links and let's save and there we go now the the the navbar logo class is applied so the text is bigger there and the links are pushed in inside so the routing is working now we can start to work on the content on the home page let's start to uh hit our api and fetch the posts and show them here so let's go to our app let's go to the home.feld file and we can close this close the global css and app and everything else and here i'll put a row and inside of here we want to show our posts but of course we need to hit the api first and fetch these posts so here i'll open the script tag let me close this terminal here inside the script tag what we want to do we want to fetch these posts when the component loads or mounts so we need to import this lifecycle method called on mount so let's say import on mount this is in the documentation of course from svelt and here let's let's bring our api base url so here i'll say const api base url because we'll need this to call the api this is in the description um in the video description and here let's initialize our posts object as an empty array at the beginning so now let's call this on mount method and say on mount and this takes a callback that happens when the component is mounted and this is going to reach for for this is going to hit the api so i'm going to make it an async callback so here i'll say async oops and here it's going to be an arrow function and inside of here i'll say const result or rest equals a weight await fetch i'm going to use fetch api and i'm going to give it the api base url plus slash posts like this this is the route that gives us all the posts and here we'll say posts our so this variable right here equals um a weight a weight res dot oops dot json like this so the way fetch works is that you need to as well return response.json and this returns a promise with the data that's got from that uh request and now when we assign a value to post our component will actually rerender now let's use these posts to display them on the template here i want to loop through these posts so first i want to do a conditional because if we're still fetching the post i want to show um loading posts so here we'll open curly braces and do hash if and this is felt template syntax and we'll say posts dot length equals zero so if the length of post equals zero that means we haven't got post yet so i'll do a header three and say loading posts dot dot dot so you can put a spinner here if you want and here we'll say colon else so else if we have any posts if it's not zero the length we want to loop through them so we'll open another javascript expression and say hash each or just an expression and say posts as post like this the this is kind of similar to php if you've worked with it this syntax post as post so here we'll say div dot call dot s6 this is materialized stuff i want each post to take half the width of the um the viewport of or like the width of the container and here i'm going to put a card so dot card and inside the card uh we need card content so dot card content and inside that div i'm going to start with the title so that will say paragraph p dot card title and inside of here we'll do curly braces to put dynamic values and now that we have access to this post we can use what comes inside of the post by the way you can um call credit this api on postman or something and you'll find that posts have a body a created ad a user id and and a title so here we'll need to say the title because this is the card title so we'll say post dot title like this i want to show as well the created ad so here we'll say p and i'll say curly brace post dot created at like this and let's put the body of the post so here paragraph another one and say post dot body like this here we need to close the each tag so here we'll say we open curly braces and we say slash each and this will close that tag and here we need to close as well this if uh statement so he'll he will say curly brace slash if like this all right let's save this and see what this looks like let's go to our app and there we go we're getting three posts which are all the posts are in the database right now if we reload we'll see loading posts for like a brief second before the actual posts load all right so let's add the two buttons for editing and deleting and i want to style this a bit to make it look better than that all right let's go back so underneath this div this card content div i'm going to add dot card action and here we'll have two links so one anchor tag with doesn't go anywhere and this is going to be the edit post so here we'll say edit and i'm just going to copy this and add another one which is going to be delete and i'll give this a class to later style it so i'll give it a class of delete btn let's save let's see what these look like all right they look okay and i want to style this the delete button so here let's open up a style tag and by the way these styles are scoped to these components so any style i write here will not go to any other component even if the component is inside of here so here we'll style the um the delete button so i'll say dot delete btn i just want to give it like a a color of red and i'm going to give this important for it to apply and i want to style the cards title so i'll say dot card dot card content dot card title to target that and i just want to there's this syntax completion is a bit weird with this uh extension right now but i guess that will be fixed in the near future because this is fairly new so here we'll say uh margin bottom i want to give it a margin bottom with zero and i want to style as well the uh this date the creator that so i'm gonna give it a class where is this right here and give it a class of time stamp and here we'll say so we can just copy this instead of card title this will be p dot uh time stamp and i'll just oops i'll just give this a color of like a gray like hash 999 and i'll give it some margin bottom so it separates itself from the body so margin bottom of 10 pixels all right let's see what this looks like all right it looks better so let's go back now we can make these into a component by itself but we're going to make some other components so i'll show you how to make components anyways here let's give these two buttons a call back like like a function that will be triggered when they're clicked and for this we're going to use the on directive so here we'll say on colon and now we give the type of the event so here we're going to give the event click and then say equal and open an expression and here we can pass a function that will be triggered once this button is clicked so here i'll pass a callback because otherwise it will uh trigger it right when the the component is rendered and here i'll say edit post and pass it this post and here as well we're going to give a delete another event so here i'll say on colon click equals and here i'll give a callback to delete post and i'm going to pass the post id and we're going to implement these later but for now i'm just going to have them print something to the console okay there's a mistake here all right like this let's go up here in the script tag let's create these two functions so here we'll have edit oops edit post we'll take a post and for now it's just going to console.log it so we'll just console.log post like this actually i need to use the keyword function let's create the uh the delete post as well so function delete post will take an id and for now i'm just going to say deleting post with id and just concatenate that id let's save let's see if these are running properly so let's open the developer tools the console and i'm going to put this side by side and here if i press edit on this actually it doesn't do anything let's go back okay i made a mistake here let's save that let's go back to our app refresh and here if i click edit there we go it's printing that post that we clicked on edit and if i click delete it says deleting post with id something something which is the idea of this post all right cool so let's go back to our app let's uh create the form that we will use to submit a post to the server so on top of the uh this row i'm gonna add another row at the top here and say dot row and here i'm to have it take half the width so i'll say call dot s6 tab and inside of here don't worry about that prettier formatter i'm going to put the form but i'm not going to put the whole form here i'm going to just put the component and make it into into its own component so here i'll say post form and then just leave it like this and let's import that and then create it so here i'll say import post form from i'm going to create a folder called components and actually here we're inside pages so we have to go back one level and then say component slash post form dot svelt like this and here let's create this uh folder components and inside of components i'm going to create the post form dot svelt so here we'll write our form we'll say oops we'll say form i don't know why form doesn't work i'll just say form like this and this will have an uh submit event so we'll say on and the uh the event will be submit submit oops mint equals and we will call a function that will call on submit like this and let's close this form and inside the form we'll have a div with the class input field and this is materialized stuff just to style it with materialize here we'll have two fields one field for the title and one for the body so here we'll put a label for a title and it will say title like this and here we'll put the input for that title of type text and this here what we need to do is we need to bind the value of this input with a value in our component with a variable so svelt has twoway binding meaning that we can use the directive called bind and then give say colon value equals now we want to give the name of the value that we're going to use which we'll call title which we haven't created yet but we will so now whenever title this input changes it will change title in our component and if title as well changes the value of the input will change this is what twoway binding means so let's copy this entire input field and paste it here and here we'll change this is the label for body and this will say body and this variable here as well will be called body let's add a submit button so say button type submit so call and submit and click tab and we'll give it some classes to style it with materialized css styling we'll say waves effect waves light and btn as well and this button will say add because it adds a post and here let's open a script tag and i don't know if it's the felt extension or if it's prettier it's probably this felt extension but you can put the script tag underneath the the the markup and if you save the script tag will go up to the top which is pretty cool and the same thing with style because logically styles should be before before the html because that's how cascading style sheets work and if i save the style tag will go up above the template which is pretty cool all right so let's go to the script so here we'll declare these two variables the title and the body so we'll say let title equals an empty string and let body equals an empty string all right now we don't have any red squiggly lines but we have this green squiggly line telling us that it's not the on submit is not defined so let's fix that here we'll say function on submit and we'll say it takes an event and of course first thing we do we say event dot prevent default like this i don't know why i added that underscore prevent default like that and here i'll do like a very basic uh validation and say if title dot trim equals i don't know why it's replacing these functions equals an empty string or body dot trim i don't know why it's changing this trim is a javascript function this is a bit weird but let's bear with it if if any of these two is an empty string then we just return because we don't want to submit this because this is invalid data uh you can of course show some validation errors but uh that's kind of javascript i want to focus on svelt more for this tutorial so if not we have these fields then let's form this post and send it to our server so here we'll say const new post is a an object which will have a title of the value of title so we can just say title like this and body like this now let's bring our base url from here let's copy this and put it right here and now we need to send a request a post request to our database to persist this post so we'll say actually we'll use async await so here we can make this an async function we add the async keyword and here we'll say const response equals await fetch and we do backticks and here we'll say dollar sign curly brace api base url and we concatenate slash post because this is the router that we post to here we'll say comma and we pass some options including the method so the method will be a post so method post like this and the body of the request will be json.stringify or actually string of stringify like this stringify and we pass it the new post that we just created so now when we get that data now we need to get the post from that data so we'll say const post equals await res.json oops i don't know why it's changing this variable is a bit annoying it's very strange okay let's save all files and let's look at our app and we broke it onsubmit is not defined okay okay because he this is a capital s i want to submit like this all right so we get our form and if we type anything here so let's say post from svelt if we leave this empty it shouldn't submit anything and it doesn't and if we type some gibberish here we click add i think it does send a request if we look at network post all right so it sends a request and the status code is 201 so it's been created of course we're not adding any codes to show it here but if we refresh we see that that post has indeed been posted uh i want to do something here i want to have a loading boolean and when we send a post it will actually show us a spinner bar that that indicates that we're actually communicating to a backend so here i'll create another variable call it loading so let loading equals initially it will be false and here when we submit the form if it's valid then first thing we want to do we want to set the loading to true so we'll say loading equals true this is as simple as that just the fact that we change this variable and this variable is used in the markup just the fact that we reassign it to a different value it's actually going to rerender our our markup so we set the loading to true and then we communicate to our server and once everything is done we set the loading back to false so we say loading equals false false like this now in our markup we let's cut this form and here let's do curly braces hash if and we'll say if not loading then we want to show this form and then here let's say else so colon else and here else if we're loading let's do dot progress and this is materialize css stuff and here we'll say dot in determinate and this will give us like um an indeterminate uh loading bar or progress bar so here we'll finish close that if statement we'll say slash if like this and let's save let's go back to our app now if we put some stuff here and we hit add there we go we see that loading bar for a second and then it goes away once the loading stops uh let's actually make that loading bar go a bit in the middle and give this some padding so that it looks a bit better so let's go back here and what's cool about this felt is that we don't have to give this a class and style it just because this is in just in this component we can just say form and then style uh style this form and none of the other forms in any other page will get the style because this is scoped this component so here i'm just going to give it some margin on all sides of 50 pixels and here we'll say i want to start the progress bar so i'll say progress and i'll give this a margin top and bottom of a hundred pixels and left and right of zero so let's save this let's look at our app so all right cool the form looks much better now and if we submit something else that bar is in the middle here all right let's work on actually adding this post to our uh post list now if by the way of course i'm getting all of this from the documentation uh svelt has some really cool documentation we go to examples you can even fiddle with the code and change uh the examples and how they work and there's this thing right here called event forwarding which is what we're going to use to communicate between the inner and the outer components that we have so if you see here it actually dispatches an event from inside of a component that's nested inside this component and then based on that event the outer component will perform some action so let's copy this import from here this create event dispatcher let's copy that actually let's copy both of these because we need that let's go here let's paste this at the top and yeah i can keep that there and then after we get the post we want to dispatch this event so let's dispatch an event and we just say dispatch like this and let's call this event post created and we can pass a payload so the payload will actually be this post now we can listen to this event on any other component and then catch that and then get this payload and do whatever we want with it so where we want it we want it in the home page so here in the home page i'm going to go down here where we uh add our form and i'm going to listen to that event so i'll say on and here put the name of our custom event and say post created so on this event we're going to call a function i'm going to call this add post simple as that let's go up here and create this add post now we want to create a function that adds that post that we got to this post array that we have so here i'll say function add post and if you look at the documentation you will see that the event right here actually if we look at app.felt the event has this property detail which holds our payload so here in our add post we will we can destructure it straight away so we will destructure detail and we can do colon and give it another name because it's because it makes more sense to call it post here instead of detail because it's actually a post so here now that we have that data we just want to add it to our post so we can simply say posts equals and we do an array and we want to put it at the top so we'll say post comma and then we spread our existing posts like this now be careful with this you don't want to do a post dot push or unshift because when you do that you're not assigning a new value you're changing the variable but you're not assigning a new value so that wouldn't actually cause a rerender you want to do post equal and then you actually add your data so let's save all files and let's look at our app and see if this is working so it's right here let's refresh just in case and we can say post to be added add this post and we click enter and there we go our post is actually added to our front end but our form is not resetting so let's fix that let's go here so in our form uh when we submit that and we dispatch the event we can simply say um title equals an empty string and body as well or we can say title equals body equals empty string so we reset both of them all right let's look at our app reload just in case and let's put some gibberish that gets added and the fields are reset sweet let's now implement this delete button i mean give it some actual functionality so let's go here in the home so we have or we already created this delete post function but it doesn't do anything so here we'll say fetch and the way our api works we want to send uh to the url slash post slash uh the id of that post and we want to send it as a delete request so here we'll want to concatenate or we'll say a curly brace dollar sign curly brace api base url and close that curly braces slash post slash and then concatenate the id as well and then here we want to pass some options and in the options we only want to say that the method is a delete method and here we can use the the dot then syntax and then here we say response and by the way just because i'm using async there and the dot then here i wouldn't do it in a project i'm just showing you that there are multiple ways of doing this in one of my projects i'll still stick to one way of doing things to maintain readability so here with the response i want to return rest.json like this and then chain another dot then where we get uh actually we don't need any of the result that's returned nothing gets returned so we we just want to actually remove that post from our front end so here we'll say posts equals and we'll say post.filter to remove that post and our filter will be post where post dot actually post dot id does not equal this id which will now remove all the posts that don't have this id i mean keep just the posts that don't have this id meaning that it will only remove that post so let's save that let's look at our app it's really low just in case if we delete this it actually goes away if we delete this it goes away let's add a uh a popup like a confirm popup that you know just in case people don't delete everything by mistake so let's copy all of this here we'll say uh if confirm and the confirm will say are you sure so if they click ok on that we actually want to send that post that i mean that request and now if you click delete it asks us are you sure if we click ok it actually deletes it all right let's now work on the edit button so let's go here so this is called from the post form or actually no from the home so what we want to do now is that we want to when we click on edit we want to pass the details of that post down to this form and then populate the fields of that form with those details so here when we um edit a post we're going to set a new property here i'll call it um editing post and initially this will be we will have a body that's an empty string a title that's an empty string and an id that's null because the way our api works when we want to edit a post we want to send the body and the title and the id as well to know which post to edit on the database so now we want to when we edit post we want to set this editing post to this post that we clicked to edit so we will say editing post equals this post that we got here simple as that but we want to pass this editing post to the to the post form as a prop we can do post editing post equals editing post like this but when we save it's going to change it to like some really nice minimal syntax that i've been wishing that it would happen on react a while ago which is just doing curly braces editing post which was which is going to give that prop with that name and that value to our post form as well now we want to use that in this component and display those details so let's go up here now what we can do we can say um title equals editing post.title up here so we can say let title equals editing post dot title and do the same thing for body actually i haven't tested this i don't think it will update once we yeah we won't update actually there's a problem it says editing post is not defined okay i know why because i we need to declare editing post as a prop that we can that we can get from outside so we need to say export let remember like that that was on the the app as well for the property name so we need to say the same thing for editing post when i say export let editing post this will tell this component that we can receive this as a prop so let's save now if we look at our app so that's fine but the problem now they're set to an empty string but if we click edit it will not change because it's not tracking any changes the way we fix that we can just use this syntax we can say dollar colon and we can do the same thing for body here and this what we will tell our component will be like look we will assign this value but whenever editing post post.title changes then assign that value again to title so this is reactive to editing post so if we save this now that should fix it so here if we click edit there we go we get the details from this component i mean from this post to our form right here so if click here we get those and we click here we get those that's pretty cool uh i wanna as well change the button from add to update once we are in actually editing mode so there's a simple trick so right here once our editing post has some value when we click here it will also have an id because by default it's null so we can use that as a conditional so down here instead of just add we will put an expression so we'll do curly braces and we'll say editing post dot id question mark so if this is not null uh we will say update else if this is null that means we're an ad or we're in creating mode we'll say add let's save that let's look at our app so by default it says add when the id is null but when we click on edit it becomes update cool let's now add the logic for actually reaching to our server and updating this post all right let's go back so this will happen through the on submit as well of course but now what we need to do we need to add a new thing here we will say because if we have an id we'll actually send the post request to api slash post slash that id and then it will be a put request to edit that post with that id so here we can just say uh condition and we'll say if editing post dot id so if it's not null then we're gonna actually update a post we're gonna form a url let's say uh actually uh here we can say actually we need to declare these outside because we will need them later so we'll say let we'll create these two variables url and method as well because the method could be either a post or a put so here we'll say url equals let's do backticks and form our url would be api base url like this slash post slash this id so we can do dollar sign curly brace and we can just copy and paste that inside so that's our url and of course now the method will be put because we're in edit mode so we'll say put like this else if the id is null that means we're trying to create a post so the url will be backticks and we'll say curly brace and we'll say api base url slash post and the method will be post and now we can say we can send the same request but instead we can send it to url because this could be different and the method is just method so we can just omit this and send the same body so here let's save and this should work so let's look at our app let's put these side by side and let's look at our network tab let's clear that and now if we just i'm going to refresh just in case now if we just submit a post i'll put i can't type in these fields uh okay i can't type in these fields because i didn't change these values now these values should actually be editing from editing posts so here i'll say editing post dot title and dot body this should fix that let's go back all right now i can post i mean i can type all right so here if i just send this this should be a post request okay here it says url is not defined see that okay this is url i don't know why the autocorrect is changing my variable names that's very weird i hope they fix this um extension all right now it should work if i put some gibberish and click add and if i look at the network tab it sent a post request to slash post but now if i click on edit the same one and give it just like a bunch of v's like this and click update and if we go back it's right uh right here okay so this is the a put request and it's gone successfully but of course the problem now it's actually added it because we didn't change the logic to add post in the home component so let's do that so let's go to the home component so here in add post we want to check if we already have that post then we just want to edit it we just want to replace it so we'll do if posts dot find post where post dot id equals this post that we got the id so if this is truthy that means we already have this post that means this post was probably being edited so we just want to find the index of it and replace it in our existing posts so we'll say const index equals posts dot find index and we want to find the index of post where postal id is the same condition that equals this poster id now that we have this index we need to declare a new array and say let posts updated equal posts so we're just making a copy of it right now that we will assign later and now we want to edit this post updated so post updated dot splice and we remove starting from the index we remove only one and then we replace it with this post now we can simply say posts so our post equals posts updated which will uh rerender else else we just do this all right let's save and let's see what this looks like so now i want to edit all i want to edit this one as well and change it to like like all x's like this click update there we go it changes to all x's and it doesn't add a new one let's reset the form now the form should be reset from here we can't reset it from inside and this title and body don't exist anymore so we can remove that and here we can just assign it again to this so we can just copy that and after either of these happen we'll just do this paste this here all right let's go back now let's edit these from v's to w's like this and we click update and the form resets cool let's add the post limiter that limits the number of posts right here so let's go back here let's go down to the markup and after the form here i'm going to add a column with the width s3 and here i'll put some text say limit number of posts and after this i'll put an input input of type number and this will have no name i'll bind it to some value and i'll call this value post limit and it won't have any id close that tag and after this we'll have a button and this will have a click event so on colon click i want to call this set limit and let's give it some materialized classes waves effect and waves light and btn let's close that button and it will say set all right let's create this method uh this function and this post limit and the set limit so we go up here say let post limit and we'll create that function set limit let's go down here and say function set limit we'll send a fetch we'll say fetch to send a request and we can just copy this so to the base url or url slash post slash that number so we'll put the post limit right here and it's a get request and we don't need to say anything we just change then and when we get a result uh we wanna return res.json and here we chain another then and we will get to the posts and here we'll say actually again i want to give it a different name to not conflict with the posts that we already have and we'll say post equal equals posts uh data like this all right let's save everything let's look at our app let's give it a default value so it doesn't look empty like that and let's give it like some margin on all sides i'm just going to give it some inline styling right where is it so it's this i'm just going to say style equals margin 50 pixels like that and we want to give this post limit a default value of 6. all right let's save all right it looks much better now if i want only two posts we click set it doesn't work it's curse reference posts oh i made a typo my bad so right here this is post snap sorts let's save let's go here i want to get two we set we get two three we get three if we put a massive number we get all of them all right cool actually i forgot to show you something let's actually build this app to see the bundle size of it so here we're going to stop this development server what does it mpm run build yeah it's npm run build so let's say npm run build hit enter okay it's built let's open this open revealing explorer so look at the public the bundle is 196. okay that's unfair because that's most of it is coming from this materialized js all right i'm going to just comment that for now and build it so npm run build just to show you the actual bundle size of svelt itself all right cool so if we look at public now it's 21 kilobytes which is absurdly low and 10 kilobytes or 11 kilobytes of this is actually coming from spell routing so svelte itself is only 10 kilobytes um i mean this app itself of course there's no spelled code inside of this bundle it's just some javascript instructions with our own code which is this is insanely small and very efficient so yeah i hope this gave you uh like a good start with felt um i hope that you're excited about this felt and you want to use it and learn more about it thank you very much and i hope to see you soon bye