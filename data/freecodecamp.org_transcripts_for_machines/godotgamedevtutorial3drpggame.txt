learn how to use gdau to build a 3D RPG game in this series Omar from coding Quest will guide you through four main components creating the player designing the AI skeleton monster building the guey with a profile and inventory system and adding stunning VFX to enhance your game by the end of this course you'll have the skills to create a dynamic and engaging 3D RPG game with gdau complete with Advanced features and interactive elements for skipping me just hold on real quick is I'm going to give you a quick overview of this course and what you'll get out of it my name is Omar and I run the channel coding Quest and if you guys enjoy this free course definitely check out my channel as well as my site as I'll also have this course up for free on there in a more comfortable format now the first thing that we're going to do in this course uh is understand that this course is split up into four sections the first section is going to be focusing on the player specifically the player will be able to have several different features like moving uh animating attacking uh stuff like that the next section we'll have a monster which will be a relatively simple AI that will just have some different state machines it'll be able to go from idle to run to attack Etc so it'll be able to detect all those different things in this course after the monster we'll be going into the GUI which will involve an inventory system with an equipment system with it a profile system to just represent and show our stats and finally a shop so this will allow us to buy items and stuff like that the last section of this course will have VFX this will kind of I'll kind of introduce you to what it how we do this with a very simple fire effect then we're going to have a guest instructor who's going to come in and he's much much more talented than I am with the shaders and particle effects inside of good he's going to kind of walk you through a lot of that stuff lastly as I mentioned short mentioned before if you guys don't prefer the YouTube format with one super long video I have this course up uh split up more comfortably on my site at quing quest.com we go check it out without but without further Ado good luck with this course and I hope to see you all at the end all right welcome everyone to our beginning uh part of this RPG course now in order to get started I'm going to assume that you have downloaded the starter project files now do keep in mind that if yours is zipped meaning it is a ZIP file and it ends with Z zip you need to unzip it here I have the unzipped version and now we can click the gdo engine and open it up here you will see the project manager now there is something to note at the moment of this recording the stable version is on 4.2 in fact I can open it up and you will see the version is 4.22 now the the version I'm going to be using is 4. three as this is kind of in beta or in Dev at the moment uh it is still not buggy per se but it is just not stable yet but um I'm going to be recording this and hopefully by the time you're watching this and following along it will be in 4.3 stable however just to basically note this if you are using a different version if you doubleclick the project you will see that it wants to upgrade it and it will do this automatically and it's very good at it it will upgrade whatever it needs to uh and it just does it all on its own now all I need to do to actually get started is I'm going to take my file here the 3D action RPG starter project files and drag it into my uh project manager now I will find it by finding the name of it 3D action RPG and if I double click it whether you needs to convert convert it or not you just open it and it might reort some assets if it needs to it will do whatever needs to do to get started so hopefully by the time it's done importing and whatever you see something like this you see no scenes you see a bunch of asset packs here you see a bunch of folders and let's just take a look at what we have first so we have a few asset packs that essentially here we have some uh 2D pixel art we have the kkit adventure which we'll be using for a character we have the Kut dungeon remastered which is going to be for a dungeon we have the skeleton which will be for our monsters and we have this sfx which will be for our sound we also have the VFX these are um these will be made outside of kind of the engine and and course but we'll have a introductory uh instructor kind of come in and you know do these on our own but here I have them just already finished as I'll be showing you how to actually Implement them into our game later we also have our default uh resource here or our theme and if I click it you will see it already kind of filled in but I will show you how to do this from scratch now kind of following that if I go to my 2D scene on the top you will see the UI that I'm using this is the UI template we're going to use some of these panels we're going to use some of these for armor stuff like that so this was something that we're going to use for a little later and then lastly of course we have our font this is going to be our font our custom font inside of the engine and that is already in the default function as font as well you can see here that I've already loaded it in all right so this is our starter project and now from here let's get started and create our grid map so we want to actually get started by going to the 3D part and we'll get started in here in just a second okay so let's get started with our grid map now our grid map is essentially Our World Builder it's our environment scene level to do this what we'll do is first we'll create two new folders we'll create a new folder called scenes and we'll create one more folder called scripts this is just to organize all our like scenes and scripts and things into these three main folders now one cool feature inside of gdau is if I rightclick one of these I can set the color folder of course you can kind of set it to whatever you'd like I'll just set it to random colors uh I'm not too picky about the colors so just kind of set them in order like this now in the scenes folder I'm going to create a new folder called levels and this is where you can create more than one level and anything level related I'll put it in here so first let's create our level so let's hit node 3D as our base scene I will save this in my scenes folder my levels I'm going to rename it right here I will rename this to level one and hit save and this will be our main scene at the moment if I hit play I can select current and you will see our game has launched this is our first game congratulations now let's rename this to level one on the top left and now I want to add something called a grid map this is going to be where I can actually put tiles down in a 3D environment now you can see that I can put stuff but there's nothing to put in order to put things in our game we need a mesh Library however in order to create a mesh Library I can't just create one like this I can't can't just click into this and do that this is something that you would you would do in a 2d scene or could do but in 3D unfortunately it's not that easy but don't worry it's still pretty easy just done a different way now to do this we will create a new scene here a 3D scene we'll rename this to mesh Library I'll contrl s to save this I'll put it in this level scene now what I'll do is I want to find a floor on uh our dungeon assets here so if I search up floor you will find some floors now do feel free to you know pick whatever you'd like I'm going to pick the floor P large I'm going to pick this guy and if I just drag it here and I turn on the pixel snap or the uh snap here it will snap to the next pixel now what I'm going to do is I'm going to reset the transform to 0 and now I can snap it kind of nicely to this corner right here now don't worry it doesn't look beautiful and there is a reason for that but we'll get to that later at the moment all we need to do is hit make local I will drag this mesh out out of that thing I will delete this guy and now what I want to do is I want to click the mesh make sure the mesh is selected I'm going to go to mesh right here I'm going to create a collision shape and here we have a few uh options but I'm just going to leave it as it is and I will create and now you see here that I've created a collision shape now in my floor tile you want to make sure that it is the uh body where we have a static body 3D and then a collision shape now make sure it's in this order like so and now if we zoom in here you can actually kind of see that blue outline that is the Collision shape of our tiles now it's it's kind of hard to test this right now because we don't have a player yet but just trust me this will add Collision for our game now if you're using good 4.2 it is a similar process but I think it just has fewer options essentially and you will see something similar to this so if you're also using like 4.4 or whatever in the future it should relatively be the same if it's not search it up um for that respective version so if you're on 4.4 or whatever version in the future just search it up on YouTube you might find a short 1 to 2 minute video explaining how to do that in fact I might actually update this in the future as well so okay now what we want to do is we want to repeat that process for one more of these I'm going to do this for this guy I will add a well I actually want to make this local first we'll drag this out I'm going to delete this node and I'm going to do the same thing at a static body click the mesh click create Collision shape and create and just drag that in and now you can see it's a little more accurate but yeah that's about it now all we want to do is we want to do two more things I'm going to add a wall now if you're wondering how to kind of navigate our 3D scene here all I need to do is hold shift and middle click and I can kind of drag my scene a little bit or my camera to the right or left now one other uh thing we'll add is a wall arched I'll drag this out I want this guy I want a wall doorway this is going to represent our door kind of and then I want a wall corner there we go and here you can see that it's just going to represent a corner now the last thing we'll have is a uh stairs this will be called uh stairs walled here we go and if I drag this out you will see it just has stairs or it is stairs okay so now we'll repeat the same process for each of these now a cool trick is if I select all of these and I right click and there should be a make local unless they took that out it seems like they took it out so we'll have to do it one by one that's okay so we'll make this local for each of these and again a cool trick is we'll control and select all the meshes and I'll simply drag them out of this now I can just delete all of these again I'll do the same thing now I have all these meshes I want to essentially add now for each of these I will just create a collision shape and you can see it's creating a pretty accurate Collision shape for each of these now we'll actually skip the uh stairwell and I'm going to delete the doorway door so here I don't want a door I'm just going to delete that now for each of these I'm going to just drag in the Collision shape but again I need a static body 3D for each of these to make sure we essentially add a static body 3D for each of these meshes and drag in the Collision shape for that corresponding mesh or static body now you might kind of Imagine an issue here for this stairs stairs don't exactly uh Collide well with our player and you'll see why later when we add our player but for now what we'll do is we will actually add a static body 3D I will add my own Collision shape a searching up Collision shape and I'm going to give it a shape of a to a box here we go and now I'm going to kind of just drag this box out and what I'll do is I'll rotate it and basically extend it to be the size of the stairwell and I'm going to turn off the snap so I can make this a little more accurate here and I'm going to just drag this up a tiny bit until I kind of see it pop out now I want to rotate it just slightly downwards like this and I'm going to just try to basically match it up with the stairs as much as I possibly can and this will allow us to basically smoothly run on the stairs all right so that looks kind of okay I'll just shorten this slightly so it doesn't pop out of the top there and now we'll save and finally we can go to our scene on the top left we can export as mesh Library we can go into our scenes levels all this Library hit save and now if we head over to a level one I will find the asset that I just found or just made I going into our levels and now here we have a mesh Library I can drag this in and now you can see that I have all my libraries or all my floors now what I can do here is I can hold shift drag and then crlf this will allow me to fill in my scene very quickly and very nicely now if I hit play nothing will happen or I won't see anything and that is for a very good reason that is because I do not have a camera 3D in order to make our 3D scene work I need a camera 3D inside of a 3D scene in order for it to play and so I can see our 3D environment now this does not look very well or very good in fact it looks horrible in fact we can't even see the outline of our files so uh in the next part we will look at adding our environment and seeing how we can add some light in World environment and stuff like that all right so I'll see you in the next part all right now that we have our scene here I want to add some World environments and stuff now let's take a look at what that even is if we add a new node here to our level one I'm going to add a world environment and immediately you can see man it looks so much better and if I hit play you will see no difference now why is that well we need to actually add an environment we need to add a new environment here when we do we will go into into this environment and we can start fiddling with its uh things here now let's take a look at a kind of short intro to what we can actually do here the first thing is the background now the background here this is where we can actually decide if we want a dungeon or a Overworld kind of a sky based thing let's take a look at the sky first so let's add a sky add a new sky over here we'll go to procedural Sky material and yeah that's kind of it in here you can of course adjust the colors but we're not going to do that we're going to hit play and now we can see a much nicer scene we can even see the tiles uh properly you know you can see the actual stuff of it now what we'll do is I'll add something called a directional light this allows me to add light that is directional and you can see by default it is pointing uh this way to my right I suppose for the negative Zed index now here I can point it downwards and if I hit play you will see now it's our scene is just more has more light now we're going to be making a dungeon so obviously we're not going to use any of this so let's reset all this as instead of mode or in our mode instead of color or Sky sorry we're going to use a custom color now in here when I click the custom color this is where it's kind of up to you be a little creative on this as I'm going to adjust the color 100 100 and 100 this will give my world kind of a grade out effect and when I hit play it looks a little dark but it's not completely black so if I were to reset the color here play again you'll see it's completely black which of course you probably don't want so it's kind of up to you you know be a little creative on the coloring um if you are creative I suppose um but I'm going to just do 100 100 100 and now I'm going to head over to the fog and volum metric fog now I'm going to just enable both of these now in order to play around with this I would kind of just suggest you know play around with some of these one by one and change the values and see what happens that is essentially the idea of this change some of the light energy values you know change the density Etc and see what your scene looks like for me what I'm going to do is in my volumetric fog I'm going to change the density to 0.02 and leave the rest as it is for the fog I'm going to change the density to 0.2 the light energy to 0.1 and that's it now if I hit play we get kind of a similar effect to what I have for my original kind of game all right so we're actually not going to enable glow just leave it off for now as we might actually come back to it um once we add more light and stuff to our world and scenes and stuff okay so now that we have our world scene set up here we want to actually start with our player so our player will be our next part and I will see you all in the next part where we actually get started with our player scene adding our player and you know making it work so see you in the next part all right so to get started here what we're going to do is create a new Scene by adding a new scene here we will add a new node called a sorry not static uh character body 3D I'm going to add a collision shape and what we're going to do now is add our character we add our character or the character that we'll add is inside of the assets folder in our K Adventures we'll find the fbx that we want and here if we find uh just one of these guys sorry not the assets the characters here we go we'll find these characters we will use a barbarian or no sorry we'll use a knight as our base and now we can drag our Knight here here we go I will make this local and now I can reset the Knight the position to 0 0 right there now the Collision shape I'm going to give it a collision shape of a capsule and just move this up to be around the same size as my player can make it a little smaller and just make it at the base of its feet all right so there we go there's our capsule for a player now we'll save this as player or lowercase maybe and I'll go up into my scenes folder create a new folder called player hit play and save and here we go now in here we'll rename our player to player I will now attach a script with the template character body 3D I will move this script into my scripts folder adding a new character uh script here called player open create and now we have our script now we'll just hit play uh actually before we hit play let's add our player to our scene here so let's add our player like so it might kind of lag out or it might just move it now that happens so I'll move it back into the uh player scen or player files sometimes that happens and it's kind of annoying but that's okay um it's just because the project files are so I might have to hold and drag it until I see the actual image there there we go so now I'll add my character body as a child of the level one I'll rename this to player hit save and now I'll hit play and when I hit play you will see my character body and in fact you can even start moving with your joystick or with your uh keyboard now obviously though you might notice that this doesn't actually really work the the way might want it to the arrow keys might not be the same way we actually need it to now that is because our uh camera is not attached to our player and we don't have Direction based movement well based on where our camera is looking so let's take a look at how we can do that inside of our player next but first to get this started though let's just close the mesh library and now I will actually get into my player and we'll take a look at how we can do this inside of our player all right to get started with our ler and camera control and movement and stuff what we're going to do is we'll set up the camera first and then we'll take a look at the script because we added a script but we don't know what any of it does yet so first what we'll do is I'm going to add a node 3D I'm going to add a new node called spring arm 3D I'll add one more node inside of the spring arm called camera 3D oops that's not camera 3D add a new node one more time M 3D and this guy I'm going to actually add one more node 3D and put all of this inside of that one now this one I'm going to rename it to M root this next one I will rename it to H and this one to V this essentially represents my horizontal movement and this represents my vertical movement and then this will be my actual camera right okay let's take a look though at what I want the setup to look like for the spring arm I'm going to take this and set it to negative five now you can change the length later but at the moment I'm just going to leave this as five now this is the actual length away from the camera the player you'll kind of see it will be away five uh pixels or meters away from the camera now the camera itself I'm going to rotate it in the transform on the Y AIS to 180 and on the X to 10 this will just make it Point downwards ever so slightly next in my um am rout sorry no in my V right here we can now move this guy up uh a little bit kind of up to you I'm going to move it up to 2.9 this will be above my player's head all right now lastly we'll go back to our script and just a kind of tip here and this is what I will be doing for this series of course I'm going to be making my float or my script float this will make it come out of my actual scen or act out of gdau and into its own window this allows me to just show the code a little nicer and you can actually see everything without it being all crumpled up so I can zoom in and it might look a little nicer for you but of course you feel free to do whatever you'd like all right now in the code here we can see that we have a speed a jump velocity as our two variables now if you're using another version you might have gravity fact in vo 4.2 there was another one called variable gravity that might be what You' be using now don't worry it might yours might look slightly different but it's still the same the general idea here is first we're going to add gravity and we do that by adding the velocity on the Y AIS and here the gravity will add it to the y axis times Delta here we'll jump the same idea so here we jump by clicking the UI accept which is actually spacebar or enter on by default inside of gdo we'll also use a function called is on floor to make sure we're actually on the floor and then we jump now here the jump velocity is actually positive and the reason is because the positive is upwards not NE uh the other way around now here we will get the input Direction by getting Vector between these four Keys it will give us a input Direction based on what I click with these four Keys next it will give us our Direction with the transform. basis and multiply it by the Direction X and Direction y now the reason we don't do the Zed is because that's we don't need that right we just need X and Y for the kind of Pop down movement if that makes sense now we'll normalize it this will kind of just essentially round our number to a nice number so it's not completely weird every time I click and then we'll check to see if direction is valid if it is this means I'm moving and if I am moving then I want to actually move I move by multiplying my velocity or making my velocity dox equal to Direction dox time speed which up here is 5.0 now here this is essentially the same as setting my velocity to zero but here it's just using a function called move towards uh it's just basically taking our current velocity and moving moving it to zero over the times of speed so don't worry too much about it it's pretty much the same as doing this now lastly we'll have a move and slide function this will allow us to actually move and slide or move our player so this allows us to actually utilize velocity now I do have a video on my channel uh explaining transform and basis and how General things inside of a 3D environment work at least in the simplistic manner so if you're curious about how the basis and transform works terms of our player do check out that video on my channel um it is on coding quests again that's so lastly let's close our script here as I want to set up my camera now in order to do this I'm going to create a new script here by going to scripts player and I'll actually add it through the cam rot here we'll add a new script by going to the top left by adding a new script I'll uh call this camera controller I'll add this script to my player scene for scripts here open create and here we go here's our script now in this script what I want to do is I'm going to delete all this and add some new variables the first variable will be cam root H this is going to be an integer this will be equal to zero we'll do the same thing but for the V we'll say cam root B and we'll say int equal Z next we want to get the or have a maximum and a minimum for both of these uh specifically for the V so what we'll do is I'm going to use something called export variable h v uh V root and this will be an integer and we'll make it equal to 75 by default now I'm going to duplicate this but I'm going to actually change this to be Max and this to be Min so the minimum value I want it to be 55 at least for me and the max I want it to be 75 now you'll see what this kind of looks like in code when I actually start using it now what I'm going to do is I'm going to make two more variables for sensitivity to kind of adjust our sensitivity based on this variable I'll make one for sensitivity maybe I'll just copy this number right here or this word sensitivity this will be a float and I'll make this equal to 0.1 let me just copy paste this and we're going to change this to V one last thing we'll do is we will add a acceleration variable H acceleration this will be a float as well so we'll make it equal to .0 copy this one more time but this one will be for the V all right so now let's take a look at the actual logic of our code so the first thing we'll do is we'll create a function called input this will allow us to get a event input that essentially has things in it now what are these things well if I print event and I close this and hit my play button um we'll actually have to adjust something in a second but if I start moving my mouse around you'll see it says input event Mouse motion if I click you will see right above here it says event Mouse button this means I clicked right so this allows me to check to see if there's any sort of input with my mouse now what I need to do here just to make sure we set this up I need to delete my old camera 3D in my level one so now that this guy can actually take over and enable in this camera as this is the camera I want to look out of when I play Let's Open Up Our script here again and now let's take a look at what I can do to actually make this camera work what I can do is I can say if event is input event Mouse oops Mouse motion then I want to actually do something what do I want to do well I want to change my cam rot H and add the event the negative event uh do relative dox multiplied by the H sensitivity now I'll do the same thing but for the V oops copy paste this I'll change this to V I'm going to remove the negative here this will be do y and this of course will be V sensitivity this will allow us of course these AR the same number but this will allow us to you know adjust these movement based on sensitivity all right now this won't actually do anything so let's make this these numbers do something so we'll add a physics process function what we'll do here is we'll say cam root B is equal to clamp which is a math function we're going to clamp this form cam root V to degree to Radiance of our cam V Min to whoops outside of that to degree to radians one more time but this time we'll do the cam B Max all right so this will essentially clamp our vot between 55° and 75° you'll see what this looks like in just a second when we actually make this work so what we need to do to make this work is get node H and this will be our horizontal so we'll take the rotation of our Y and we'll make it equal to lur F the lur float from its float from so the float that we want it to rotate is going to be its current rotation so what I'll do is I'll copy this right here so I want to get its current rotation and then rotate it to mun H there we go over a time of Delta times H acceleration I think I spelled Delta wrong there so Delta there we go all right now that that's right now what I want to do is I want to actually copy paste this and now I'll do the same thing for the V but obviously the rotation for this will be on the X AIS because if I'm rotating the vertical I want to be doing the xaxis all right so here I'm going to do the same thing so instead of the H rotation I want the V rotation of course here I want the X rotation and then here I want the v v and then the V acceleration all right so now when I hit play Let's just test this out sometimes it can be buggy let's see if I can now move all right so now you can see when I move around my mouse not perfect but it is working slightly okay so let's take a look at what's going on as this doesn't seem to be working out 100% let's read through our code here and see if it makes sense first we're adding to our H rotation in the negative event. relative dox times H sensitivity next we're doing the same thing but on the y axis which is right time the V sensitivity okay that looks right then we're taking our cam rot camot V and we're going to clamp it between its current uh count CL rot and between the minimum and the maximum okay that looks right okay now here we have the rotation doy we're going to lurp it from its H rotation so it's current rotation to cam root H right by the speed of Delta time acceleration and then same thing here but for the V this should be V that's right and then get node V okay so let's take a look at one more thing this all looks right but maybe one more thing that we can do is we can make our input here do set Mouse mode to input dot oops Mouse mode captured here we go we'll close this and this should capture our Mouse so now when I move it should allow us to move around smoothly but it's not I'll be right back and figure out why it's not letting us move all right so one small mistake I made actually is these two numbers are actually going to be floats not integers that is why we had that weird clunky sound is because it was trying to round our float number basically to a whole number and now we have a nice smooth motion there we go so now we have nice camera rotation now on the next part we're going to see how we can make our Player move in its corresponding well Direction because here you can see it's not exactly moving how we want it to Right Moving in well kind of this way or I guess this way as if it's looking this way but we need it to move whenever I move my camera in the corresponding Direction so let's take a look at the next part to see how we can do that all right so get started with our player what we're going to do is head over to the script I'm just going to stop the game here and this may seem annoying but what we're going to do is actually delete everything we're going to start everything completely from scratch the first thing we're going to do is we're going to start with um all the variables that we'll be adding eventually hopefully some of these will make sense uh right now and eventually some of them might not right now but some eventually they will make sense as we actually start to use them so let's just start with uh all the forces so the first thing on the forces is we'll export a few Val variables first we'll export a variable called gravity this will be a float equal to 9.8 next we'll export our jump Force this will be an integer equal to 9 will export a walk speed this will be an int equal to three and lastly we'll have a run speed as eventually we want to uh create a shift uh hold right where we can actually go from walking to running so this will be our speed that we actually run at now this will probably have to be greater than three so in my case I'm going to do 10 which may seem like a lot but you'll see notice or you'll notice later that it doesn't actually impact it that much you'll kind of uh play around with the values yourself hopefully next we're going to create a few um animation nodes so these are going to be the animation node names so what we'll do here is we'll say variable Idol node name which is a string will be equal to idle and what I'm going to do here is I'm just going to duplicate this a few times and now I'll just change the name of these this one will be walk this one will be run this one will be jump this one will be attack one and this one will be death now for each of these we'll say death or we kind of give it the corresponding one so walk here this one will be run this will be jump and attack one now you'll see what these kind of are for a little later but essentially they just represent the name of the animation that we'll be playing for each corresponding node all right so next we'll create some variables and these variables will be called our four for our state machine condition State whoops State machine conditions so what this will look like is is attacking and this will be a Boolean we'll also have a variable let's just duplicate this for now four times we'll have another one called is walking this will tell us if we're walking or not we'll have another one for is running and the last one for is dying each of these variables are going to true or false variables that will essentially tell us if we're dying or not if we're running or not if we're walking or not and if we're attacking or not all right so next up what we'll do is We'll add some Physics values so this will be the or the first one we have is Direction which will be a vector 3 next we'll have a horizontal velocity this will be a vector 3 next we'll have an aim turn and this will be a float this will allow us to aim uh for our turn when next we'll have a movement something called movement which will be a vector 3 next we'll have vertical velocity like so and this will be a vector 3 next we'll create a variable movement feed this will be an INT and last or not lastly we have two more we have an angular acceleration this will be an INT and next we'll have acceleration for actual movement will also be an INT and lastly we'll say variable uh there we go just hit and this will be a Boolean this is going to be for a little later uh in our series but this will allow us to detect if I just got hit or not so we kind of see what that's for much later but don't worry too much about it just now next I'm going to load or on ready load my cam rot or my cam rotation into as a variable or as a node and we'll do that by saying get node Hamot H I want to get access to the horizontal rotation of my node and I do that by saying get node uh rotation cam rot H and this will allow me to just get access to the node much quicker all right next what I want to do is I want to add a ready function and for now I'll just pass then I also want to add a physics process function this will allow me to actually Implement a lot of the physics process now in between this I'm going to add an input event and this will allow me to well input event just as we did in our camera rotation controller now in here is where we'll actually rotate or aim turn so here I'm going to say if event is input event uh Mouse motion then I'm going to whoops change my aim turn to be equal to negative event. relative dox time 0.015 all right now after this now we don't have this just yet but we'll write it anyways we're going to say if event is action pressed aim then I'm going to take my direction and make it equal to my cam rotation do Global transformation or transform basis. Z now this is going to actually allow me to change my direction that my player is looking at now this aim that I have that I don't have actually right now is going to be a left click or kind of whatever you want to be honest it might be control so if you want to aim your player in a certain direction whenever you hit this button this is how you do it so we'll add this a little later but don't worry too much about it right now but now we understand and see how we can kind of add this okay in our physics process function we want a few things the first thing we'll add is a variable called on floor this is going to be a variable that just checks to see is on floor so this will allow us to detect if we're on the floor or not but using a variable instead next what I'll do is I'll say if is not dying then I want to actually do the logic that I would do if I were not dying the first thing we'll do is we'll check to see or sorry not check but I'm going to actually uh add gravity now what I can say is if not on floor what I'll do here is I'm going to say Vertical Velocity plus equals Vector 3 dot down time gravity * 2 * Delta Delta so this will actually allow me to add our gravity now otherwise what I'm going to do here is I'm going to just copy this and I'm going to make this equal to a down time gravity instead of all this I'm just going to divide it by 10 and not multiply but divide by 10 all right okay so next what I want to do is I want to jump to jump similarly to what we had before I can say if input do is action just pressed I'm going to create a new variable or a new input called jump which we haven't added to our game yet but don't worry we'll add it soon and we'll say and is not is attacking because I don't want to jump while I'm attacking I also want to be able to jump when I'm also well you probably guessed it uh on floor so we'll use that variable that I just created to check if I'm on the floor or not now if I do what I'll do is very similar to the vertical velocity I can just take my Vertical Velocity and make it equal to Vector 3 dot up though this time times jump force all right so that is how I jump similar to what I had before next up I'm going to update my angular acceleration to 10 I'm going to update my movement speed to zero and then I'm going to update my acceleration to 15 all right next what we want to do is actually add our rotation so to do that or a camera rotation and apply it to do that what we'll do is we'll say h rotation is equal to cam rotation. h we'll get access to the node that we just created above we'll get its Global transformation transform basis and then oops basis and then we'll get .y hopefully this doesn't error there we go all right next what I want to do is I want to say direction is equal to its current direction rotated to our Vector oops Vector up Vector 3 dot up with the H rotation as its angle then we'll normalize this this will essentially take its current direction take its current rotation and rotate it to the direction that I want it to be rotated to which is the AG rotation okay so now that we have that I want to actually get our Direction because this adjusts our Direction based on the rotation of our camera but what about the direction of our Mouse or not our Mouse but our keyboard well this isn't too hard what I can do is first I'll check to see if I'm actually pressing anything now to do that it's not too hard I can say if input is action pressed I can say forward or now in order to do the or command I can just do this which is shift and then the button right above your Enter key if you hold shift and press that weird straight button above your enter ke key that is how you do that now you can do or but I just prefer this way next what I'll do is I'm going to copy paste this right here and now what I'm going to do this might seem a little long but I'm going to now copy paste this two more times because now what I want to do is I want to check to see if I'm moving forward backwards I want to check to see if I'm moving left and you guessed it the last one is going to be to check if I'm moving right now if I'm doing any of these three actions or four actions sorry then what I'll do is I'll say direction is equal to in Vector 3 and then inside of this Vector 3 we're going to do something called input dot getaction strength this will allow me to essentially detect and get the action strength of a certain key now the key that I want here is going to be left for the X but here I'll sa left now what I want to do is I want to subtract so I'm going to copy this I want to subtract the right so here I'm going to subtract the left to the right and this will essentially allow me to see if I'm clicking left I will get one if I'm clicking right I will get negative 1 and that is what I want now here for the Z Axis or sorry for the Y I'll put zero and then for the Zed axis I want to just copy this right here this in the X uh or sorry the Zed axis then here I'm going to put forward and then for the last one I'm going to put backward and then lastly I need this guy on this line I believe and now we should not error unless I do because I probably have a missing thing somewhere so saying expected closing that right here we need to close this I believe nope that is not range but right here I need a comma that's why okay there we go so make sure there's a comma after each line except for the last one okay so this allows me to take my direction based on input so hopefully this kind of makes sense and if I zoom out here kind of get a full view of what the code should look like next I'm going to make sure that this direction is only updated if I'm clicking something all right so now I have my direction being updated on its current direction and rotating based on where I'm moving now the question is how do I actually move how do I actually rotate now the rotation that we're going to do is going to be rotation on the mesh not the actual player so on the very top of our script we're going to up here we're going to say on ready variable player mesh and we're going to load our mesh and we can do that by getting the KN so the Knight is going to be our player mesh all right next we'll head back to the bottom of our script here and in here uh sorry outside of this if check checking here we're going to check and now see if the input is action rest aim then what we'll do is I'll say player mesh. rotation doy is equal to lur angle to its current player mesh angle so what we'll do is we'll get its current rotation doy and we're going to rotate it to the cam rotation H or sorry cam rote H like that and we want to get that rotations y so we do that by saying rotation doy and lastly we'll do this at a speed of Delta time angular acceleration and that's it next we'll go down a little bit let me just go a few lines below next what I want to add here is an else statement and I'm going to actually copy this into this else statement but here what I'm going to do is I'm going to change this guy to the a tan two of its direction dox and direction do Z then I'm going to subtract it's rotation doy so this is the same as saying self. rotation okay and then the speed is also going to be Delta times acceleration all right this is how we do that now of course this isn't complete though because now we still have a few other things now the last parts we need are going to be right here I believe in this line so here we'll say velocity do Z is equal to horizontal velocity do Z Plus vertical velocity. Z and essentially we want to duplicate this three times we'll change this to Y this to Y and change this or sorry to x x and x now for the Y I'm going to change this to Y and change this by deleting this and only having the vertical doy lastly on the next line we'll move and slide this will allow us to actually use the velocity now the question is what if what about the horizontal velocity well here I can say if is attacking then what I want to do is I actually want to lurp my velocity to zero so I can do that by saying horizontal velocity is equal to horizontal velocity lurp and we'll lurp it to direction. normalized time 0.1 we'll do this at a speed of acceleration now I'll copy this now what if I'm not attacking which at the moment probably not going to be for a while well I'm going to copy paste it in the L statement but for this I'm going to remove the0 Z and instead I'll put movement speed uh movement speed and then that's it so now uh let's give this a try and see what we get well let's actually now import our functionalities here because I've added a few things but none of this actually does anything right now because well I haven't added it so let's close this go to our project settings our project settings here we'll go to input map and here where I want to add or can add new function input mapping now in the add action what I'll do is I'm going to add a new uh action called right left backward forward dump attack Sprint aim and pause these are all the inputs that we'll need eventually now for all of these you can add whatever you'd like for the right I'm going to add the left left I'm going to add a backwards I'm going to add s and forward I'm going to add a so ASW basically now for the jump I'm going to add the space bar attack I'm going to add the left button the left Mouse button and I can do that by going to Mouse buttons going up and selecting the M left Mouse button that's a attack now for Sprint I want shift for aim I want control for pause I'm going to add Escape now I can close this and now let's give it a try now most likely it probably won't work first try that's okay okay cool so we got something wrong right away because I spelled basis wrong so let's fix that right away and see what we get all right so we got a bunch of errors but we do have something working we do see that our mesh is working based on our rotation which is nice so we can see that some of these are actually working quite nicely and the aim is working so we now know that the aim is working we just aren't moving properly so let's take a look at what's happening and I'll be right back okay so one quick fix I think hopefully you probably realized this is on line 62 I spelled forward wrong but let's continue as uh we actually have a bit more to do because what was happening and the reasoning this wasn't working is because the is walking and is false we need to now have a way of keeping track of what is true and what is false so the first thing we'll do is when I'm not clicking anything here I'm going to add an else statement if I'm not moving forward backwards or whatever I'm going to now say is oops oh my gosh is walking that's not is walking is walking is equal to false I'll also say is running is also false now what I'm going to do is inside of the direction I'm going to check to see if input dot is action press hopefully you can guess I'm going to check to see if I'm sprinting I'm also going to check to see if is walking is true now if it is what I'll do is I'll say movement speed movement speed is equal to run speed and then I'll say is running is equal to True next I'll say else is walking is equal to true and movement speed is equal to walk speed there we go now the reason that we need this mostly specifically this is because here I was I had a movement speed of zero so that's why so now what I can do is if I hit close when I test this you will now see when I hit play I can now move around rotate my camera and see that my player is moving now I can even hit control to aim my player as I'm moving but obviously this still looks you know it looks okay but it's not perfect because well we need animation we have a lot of Swords of stuff as well let me actually what we'll do is we'll go to the rig here and I'm going to hide a few of these swords so what I'll do is I'll just hide the bone so I'll find just minimize these and you can of course hide whatever you'd like I'm going to show or hide everything except for the twohanded sword uh so this one hide everything above it and the shield where's the shield this guy right here find the shield and there we go so this is our twohanded sword I'll keep this guy in my hand as I'm going to use that as my sword later okay so now I actually have a nice equi uh night here okay in the next part we'll take a look at how we can start animating things all right so I'll see you in the next part okay so in this next part we're going to set up our animation now to get started we need to start with our animation tree so let's add a new node here called animation tree we'll go to the tree root on the top right and we will add a state machine we'll assign the animation player right here by clicking it and we can assign the animation player we'll hit okay and now what we can do is we can start adding some states now in our tree route here we'll click this and on the bottom you should see animation tree let's click into this as this is our actual State machine next what we want to do is rightclick and start adding things now we could add a either the animation itself or a blend tree now let's add some animations and then we go for blent tree in the attack so first We'll add a idle animation and if you're wondering you can just click the first letter so for example I will give you the idol um but now we'll add a blend tree and we'll rename this to attack one this will click into this and now you can see a blend tree now the cool part about this and the reason we might do this is because now I can add an animation and this would work similarly and I can connect this and it would output that animation but the cool part is that I can rightclick go to time scale and this will allow me to adjust the scale of the time depending on what I want want so if I want it to be two times as fast I can click two and this will animate the attack that I want two times as fast now I'm going to find the twohanded melee attack spinning and use that as my attack we head back here and I'm going to put my attack on the top just do it like this now I'm going to organize the rest of my notes I'm going to add a death animation a walk animation a run animation so you can pick whichever one you'd like and lastly a jump animation we'll do the jump full long do that one next I will connect all of these with a uh transition now the first thing we'll do is connect start to idle we'll connect idle to walk walk to run run to jump and idle to jump jump back to walking and walking back to jump now you might notice that all of these are automatic and that's okay because right now what we're going to do is we're going to add conditions for each of these now for each of these so the first one that we can add um well actually first let's finish the transition so here we can go from walking to death running to death and idle to death we should also be able to go from idle to attack and attack back to idle now let's take a look at what I meant by conditions okay now in each of these transitions let's take a look at our idle first idle to jump in this you can see the switch and the advanced the switch mode is on immediate the mode is automatic now I do want it on automatic however I want a condition with this and that condition is going to be called is in air now what I can do is start adding these conditions for whatever I want so for example the jump we'll actually rename this to jump from jump to walking I want the advanced condition to be is on floor from walking to Jump we're going to do the same thing as here so I'm going to copy this go into my Advan and sometimes it doesn't actually copy so I'm just going to be having type it in okay and we'll just go from each of these transitions to jump will be is is in here from walking to running the condition to go from walking to running will be is running we'll say is running now we also need a condition from running to walking and walking back to Idol now the condition from running to walking will be is not running from idle to walking the condition will be is walking now from walking to Idol the condition will be is not walking is not walking now the attack will be a little unique so the uh this one from going from Attack to idle we're actually going to switch it to at end and that's it we're not going to have a condition we're just going to switch it actually sorry I lied we're going to have a condition but it's going to be is on floor because I should only be able to transition if I'm on the floor now from idle to attack we're going to actually not have a condition for this one and we're going to turn off the automatic the reason is because we're going to transfer or kind of travel from idle to attack manually now just make sure that in each of these I actually remove um some of these and rename it to walk this one I'll rename it to run and this one I'll rename it to death now the condition from all of these to death we'll need is going to be is dying sorry oops need that on auto and then is dying like this let's say is dying for each of these and lastly is dying all right now that we have our animation tree we actually want this to work so let's head over to our script and pop out the code now do remember that here this is where the idle names are do make sure that the animations that we've added are the same here okay so these should look familiar jump capital J Attack One death Etc okay so do make sure that these are all the same otherwise it won't really work properly okay so now what we can do is in order to make the animation work we can actually load our animation Tree on the top so what we'll do is at the very top I'm going to on ready load that's not on ready on ready variable animation three I'll say get node animation tree we also on ready variable playback and this will be equal to animation uh tree do get I get parameters parameters SL layback this is essentially the actual playback of the current animation so now we just have it as a uh variable instead of having to access it every time okay so let's take a look on the bottom how we would do this at the very bottom under the move and slide this is actually where I'm going to set the conditions whether it's true or not to do this all I need to do is access my animation tree I'll get the parameters the conditions and then the is on floor so these are the conditions that I want to edit now the variable I'll edit it to is going to be this one of course on floor now what I can do is I can copy paste this a few times and change some of these to be what I need the first one or the second one will be is in air third one will be is walking the one after that is is not walking this one will be is is running this one will be is not running and lastly is dying now for each of these we can kind of change them this one will be is not on floor this one will be is walking this one is is not walking this one will be is is running you can probably guess this one will be is not running uh running running there we go and then the last one is dying and we don't know need and not is dying because well I mean if I'm dying then I'm dying right so okay so now let's take a look at how I might animate these in the actual code okay so the first thing I will do is I want to uh do the attacking for the attacking what I'll do is I'm going to scroll up right here and I'll do the attacking right here now to do this I'll do an statement called if attack one uh node name is in the playback. getet current node this will allow me to check to see if I'm attacking or not and this is where I can just say is attacking is equal to True otherwise we'll add an else statement here otherwise I'll say is attacking is equal to false all right now what I can do is I can also add a new function at the very top right under the is not dying called attack one and this will be a function I create that will allow me to check to see if I'm attacking okay so on the bottom we'll create a new function by saying Funk one back one we'll say inside of here if idle node name is in the playback node dot get current node or now this is kind of optional in a sense or what I'll do here is I'll say we go instead of idle I'll also add to see if I can walk or if uh if I'm walking or if I'm idle now here's another option duplicate this and do the running as well if you want to be able to attack while running or walking this is where you would do it but you can check to see if you're walking idle or running if you're doing any of those things what we'll do now is first I need to check to see if I'm actually attacking to do that I can say is action just pressed attack if I attack using my mouse I will check to see if I'm not is attacking then if I'm not doing any of that I will just say playback. travel to back one this will allow me to manually travel to this node all right so now what I can do is hit close on this hit play and let's take a look at what we have but here you can see when I'm walking and running I now play these animations there is an issue that it doesn't Loop but will change that in just a second if I attack and now see that I attack and if I jump and now see I jump okay now but what about the uh looping well that's not too hard in our animation here our animation tab let's find The Walking a that I'm using and make sure it's looped we'll find the running make sure it's looped and lastly the idle make sure that's looped now when I hit play you should see my player is playing the an idle animation and now I can walk with a loop and run infinitely all right so here we go here is our player I can attack whenever I am running walking or whatever and there we go so that is our player animation pretty cool I'll see you all in the next part all right so now that we have our player relatively working what we need to do next is we need to think about how this player is going to interact with other things but before we do that need those other things right we can't interact with a monster we can't kill a monster there is no monster so let's let's get started with our monster so what we'll do here is I'm going to create a new folder in our seams folder new folder and we'll say monsters we're going to create a new scene here we're going to create a character body 3D as our base this is going to be our call it our skeleton Warrior monster we'll add a new node here called Collision shape and now we can find skeletons we'll find the characters we'll use the skeleton Warrior drag this out and here we go here's our Warrior we can just make this local and pop this our actual monster I will transform it to 0 and here we go here's our monster now now the problem is right away we need to give it a collision shape pop this up a little smaller go and maybe I'll make it a little fatter that's good we'll save this in my monster scene there we go now I can add this to my main scene here I'll find our Warrior I'll add this in drag it in like so it might take a second like before and now we have a monster when I hit play I can see that I can kind of interact with it in a sense where I can kind of run up to it and pack it but nothing happens so what we want to do is I want to actually add functionality to it first what I'll do I'll add a new script can use the template it's okay I'll make this in my scripts folder make a new folder called monsters open and create create in here what we'll do is we want to now think about our state machine and how we're going to actually make our monster with its own different state machine now this guy is going to have uh gravity in actual monster so what we can do is we can just delete all this input the jump input and leave the gravity as well we're going to be adding gravity now what we can do actually just not going to use th we're going to create our own uh speed things later we'll close this and now when I hit play though like and when I hit play you'll see that my monster does fall to the ground as now he has gravity all right that is our player setup in the next part we'll take a look at how we can start setting up our state machines and how State machines work uh and you know how we'll do this with a monster all right so in this we'll be taking look at the concept and idea of State machines before going into classes and custom nodes inside of Gau so the general idea of finite State machines right so finite State machines now the word finite right means the well kind of the opposite of infinite right so it's something that eventually ends so we have a finite State machine now let's say for the sake of uh a small small example we have the idle State this is kind of a circle that encompasses things that happen inside of the idol state so for example play idle right remember that play idle animation that would probably go in here right now that's one thing now let's say we have another state called move right we would have well again this the functionality of the move state in here right so anything that I want to do that should involve movement should be inside of this so for example well obviously we would play the move animation for example right now another one that is common but we actually won't have is an attack State uh this is a very common one I'm just going to put it in here because uh it's just an example now obviously you would play the attack animation or do whatever else is in there right now the general idea of State machines is that we want a kind of uh imaginary state right or imaginary idea where we hold States so we need something to keep track of what state we're in and usually that can be used using a variable let's say current state right so keep some way to keep track of what the current state is now you can keep track of the current state whatever way you want you can use a name a string a number it doesn't matter it's up to you now what's another concept of State machines now this is an important one in fact this is probably going to take up most of your uh States or the most of the code inside of your script of your states that is the conditions to move from one state to another in order to go from idle to move I need some sort of condition now usually it's an if statement it doesn't have to be but usually it is well because it's an if statement right now I can say if input blah blah blah right let's say left right if I move left then whoops left like that then I want to move to the idle State or the move state right well because I'm starting to move if I'm moving I should probably go to the move state but I need an if statement in a condition in the idle state that allows me to move to the move State now that is important to understand you need to understand that there is conditions from each state to another now from the move State I can go to the idle State as well I need conditions from the move to the idle I also should have some sort of condition to go from the idle to the attack now ideally you would probably go from Attack to idle you would also be able to go from move to attack and from Attack to move right now the condition from Attack to Idol or attack to move is not always input right think about it when you attack or finish attacking when do you go back to Idol well when you finish attacking you usually or sometimes I would say most of the time it's after the attack animation finishes or some other condition so those are things to think about about when do I want the condition to happen when do I want it to attack when do I want it to fall stuff like that right so these the basic idea of finite State machines is essentially the idea of having the states themselves having the functionality inside of them having a way to keep track of what our current state is and then we also want a condition inside of the states to be able to go away from that state to to kind of change States right so okay that is pretty much it for the finite State machine concept video uh I will see you all in the next lecture okay so now that we understand State machine what I want to do is go to my monsters create a new folder and call this States we'll actually call this one AI melee and we'll put our skeleton in here as well and it might take a second to just drag and drop it there we go all right now in here we'll create a few new scripts the first script we'll have is called attack State we will duplicate this and call this one uh death State have one more called uh ideal State quite a few but you know let's do these all together so one more time and we will create Run State duplicate and lastly one more called State machine uh just State machine actually this will be our state machine will kind of help us control and hold all these states okay so let's take a look at how to do this now in each of these states what we want to do uh we'll open them up first so let's open up our Idol let's pop out the script uh we'll actually close this for now again open them all that way they are all open right here and we'll just make sure these are all open now in our state Machine controller here what I'm going to do is I'm going to uh preload all our States now to do that what I'll do is I'll create a dictionary called variable States state equal to this curly bracket this is States we'll have a key called idle here will preload our idle script we can do that by just typing in Idol State and here you can see that I preloaded our idle script now alternatively if you don't know how to do that you can just drag in the idle State path like this and it will give you the path another way to do this is right click idle a script and copy path right here and it will copy the path all right next what we'll do is we'll copy paste this put a comma right here copy it times uh three times I'll have one called run one called attack and one called Death there we go okay and we'll just change all of these to the corresponding script so this is death this is attack and this is run run there we go okay now that we have all the scripts we need a helper function called change State this is a function that will allow us to pass through a new state which is going to be a string make sure that this is spelled correctly State and this will allow us to change our state now how do we do this what we'll do is we're going to say get child count we will see if it's equal to zero or not if it's not what we'll do is I want to get current child zero and Q3 however I don't want to do this if I'm in the death state so I'm going to see if death not in the get child z. name this will essentially check to see if the state I'm trying to Q free is death I don't want to Q free if I'm death I don't want to change States now what I'll do I'll say if state has uh dot has there we go new state then that means my dictionary has this state if I do I'll say State uh State m is equal to State new state. new this will allow me to create a new object or a new node using this preloaded script now we'll see why we can do this in just a second but for now let's continue we can now say State temp is equal do name equal to New State we'll set the name of that new node equal to the well state that we're trying to change into then we will just add child State M this will allow us to change States so this gets rid of our old State and this adds our new state okay now in our idle State we can get started with our idle state that's usually the easiest you can see here that we extend node this is a script but it extends node now this essentially allows us to create a new node or a new object using the node as a base now what we're going to do here is we're going to call or make a new variable called AI controller and this will essentially reference the uh skeleton Warrior script so to do this what we'll do is in the function uh ready we will say AI controller is equal to get parent. get parent now the reason we do this twice is because here we'll actually add our state machine uh we'll actually do that by adding a node here we go and we'll attach the state machine script and this is going to be our state Machine controller so let's rename this to State machine or state Machine controller whatever you'd like now in here this will be adding a child in this state machine this is where I can now in my idle State get parent to get to the saate machine and then get parent one more time to get to this script this will allow me to access the a roller okay so now that we have our state machine set up we actually need to take a step back and set up our animation tree so in the next uh video FL part we will now set up our animation tree okay so to get started with our animation we need to add our animation tree so let's add an animation tree node we'll go to the inspector tab add a DAT machine assign the animation player and now we head over to the animation tree and we will add a few notes and the animations will add the first one instead of just an idol we're actually going to add uh let's just add the death FR first so I'll have that kind on the top the idol what I'm going to do is I'm going to add a Sit floor Idol and this will if I play it he's just sitting down on the floor essentially now the next one I'm going to add is a awaken State now this awaken state if I search up skeleton or type in SSS whatever you'll find the skeleton awaken floor long this one will or sorry not this one we will add the uh awaken standing where is that there we go this one this one will pop up as if he's standing and then we will add a running and then an attacking now the attacking uh you can kind of pick whichever one you'd like I'm going to pick the attack slice and then I'm going to add one more called idle combat there we go and now we want to add transitions to all of these so from awaken back to Idol from standing and running back and forth Etc and then we also want from running to Idol we want from Attack to idle then we want from Idol to death and from Attack to death we'll also want from idle combat to attack and now let's rename all these to kind of an easier name here this will be idle this will be awaken this will be run and this will be attack this will be we'll leave it as Idle combat that makes sense and this one we'll just say death now for all of these transitions I'm going to take off the automatic and just uncheck this for each of these transitions because we're going to be transitioning from state to state through our actual code all right so let's make sure that we just do this for each of these for the Run go to idle combat now from the attack right here we'll turn this off but from the attack to the idle combat we're going to actually leave the automatic on and sync it at the end of this attack animation because I wanted to automatically idle combat like this when it one every time it finishes attacking so that way it's kind of like a cool down every time it attacks so it doesn't just attack right after attacking right so it kind of Waits a little bit and then attacks again okay so here we go here is our uh animation tree setup and now what I need to do is we'll head into our scripts and we'll start getting things to work all right so next we'll go to our actual uh script here for our monster and I'm going to start adding the variables that we'll need in this script to make our cler work so we'll add it one by one the first thing we'll add is a speed this is going to be a float and we'll make it equal speed 1.0 for now we'll add a on red ready variable which will be our state controller this will just say get node and we'll get access to the uh State machine we'll create another variable this one will export it and we'll say export variable player and this one will be a character body 3D this will essentially represent a variable as our player now to get access to it we'll do that in a bit but for now let's just say variable Direction and we will set this to Vector 3 this is going to be the direction from our player or from our s the monster to the player so which direction is the player we'll create another variable called Awakening and this is going to be a Boolean we'll set it to false by default we create another one called attacking a Boolean false another one called hell be an INT which will make equal to four create a variable damage intal to two we'll create a variable dying will be a Boolean equal to false we'll create another variable called just hit will be a Boolean equal to false all right now that we've done all this we're going to add a ready function and we're going to get access to our state controller we're going to change states to idle on the ready when our scene essentially uh is ready ready and this player loads or this monster loads now this is all nice and handy and stuff but what about our Direction well I want to get access to our direction or get the direction by saying direction is equal to player I'll put it like this player do Global transform do origin minus self. Global transform. origin we can also uh normalize this number now this is cool but this isn't something we want to do unless the player is valid if the player is not valid meaning it doesn't exist then well I don't want to do anything right so here we'll only get the direction if the player is valid all right now let's head over to our state machine for sorry idle State and we'll take a look at how we can get this to work here we can say if AI controller. Awakening then what we'll do is we're going to await for that animation to finish what I can do is say AI uh controller dot get node animation three do animation finished so what the await function does is it will wait for a signal a wait essentially stops the code and waits for a certain signal to kind of happen before continuing the signal that we're going to wait for is the animation tree animation finished if I head over to my animation tree in the node section you will see the animation finished signal right here okay so that is how that works now after this though what I want to now do is say AI controller. getet node animation 3.get parameters SL playback and then I want to travel to the idle animation now in my physics process which I don't have so let me add that physics process I will ask if the AI controller is valid first then what I'll do is if this AI controller is valid meaning it exists I have access to the monster then I will just AI controller veloc X is equal to Z similarly I'll just copy paste this and change this to Z in the idle State all I need to do is just set the velocity to zero now what I'm going to do is I'm going to copy paste this into each of my States so that way I have a rough outline to get started with in each of these states let's take a look at the Run state next as this one isn't too complicated and it's not too different in our Run state I'm going to create a variable though called run and this will essentially kind of help me run or not in the ready first so I don't want to start running until I've awakened basically so what I want to do first is instead of checking for awaking I'm going to check for attacking first if I am attacking I will wait for the animation finish and what I'll say is AI controller. attacking is equal to false because after this I've waited for the animation to finish and then I stop attacking L statement where I'll say run is equal to false I'll say AI controller. getet node animation tree actually I'll just copy paste this right here so we'll just copy that and instead of traveling to Idol I will travel to awaken after that I will say AI controller. Awakening is equal to True after that I can now wait one more time but once I start playing the awaken I want to wait for this and then uh now here I want to once all this is finished I want to now say running is equal to uh true and then I can set the Awakening to false now lastly here I want to travel to run because I'm not idle in my run animation or my run State I want to you know run that would make more sense now here I'm going to check for if running is also valid because here I'm not only just I'm not going to run zero anymore I'm going to actually run right so to do that I will get my AI controller. Direction dox and multiply it by the AI controller. speed so this is it this is all I need to move my monster towards my player now this one I'll copy paste it but change it to the Z index and then lastly I'm going to get access to my AI controller and we're going to use a function called look at and this will essentially allow me to look at my player this is kind of a rotation function so I'll pass through the global transform. origin then add the AI controller. Direction all right and then we'll pass through the vector 3 01 0 like so all right so that's it for the Run function hopefully this works out nicely all right let me just zoom out here just a little bit so you can see everything and this is the Run State all right so now let's take a look at our attack State now in the attack State this is actually a little easier because we don't have to change this because I don't want to move when I'm attacking now here I can actually keep this because if I'm Awakening while I'm trying to attack I want to wait now the only difference is when I uh after this I want to get the a controller and set the attacking to true because at this point this is probably when I'm going to start attacking now I want to actually travel to the attack node and then I'm actually going to go to my run State and copy paste this here I want to look at my player only in the attack ready obviously this is kind of up to you if you want to add it in the physics process that's totally fine I'm going to add it in the ready function so imagine my monster is going to only look at me when it's starting to attack instead of all the time all right now in my death animation this is where uh some things are going to get funky so here I'm going to say AI controller do dying is equal to true and then here all I need to do is say death and that's it now uh this is pretty much it so now what we can do is give this a try we'll test this out and see what we get okay now if we go to our main scene here and we assign the player right here on the skeleton sign the player we'll actually see if we hit play nothing will happen the reason is because we don't have a way of changing states but we do see that it is working it is playing the idle State actually in fact if we go to the remote we will find under the state machine that it is playing Idol now in our skeleton we now need some sort of condition some automatic condition to allow us to detect if I want to go into well whichever State I need it to be so to do this I'm going to add an area 3D I'm going to duplicate it and adds a collision shaped 3D both of these I'll duplicate this as well and put this in here just kind of rename it so it's the same now this one will be the chase layer detection this one will be the attack layer detection now for both both of these I'm going to essentially give an area so that it does what I need it to do for both of these I'll use a sphere but for the chase player I'll make it a little bigger here the attack player this needs to be a doesn't need to be a cylinder but I'll make it a cylinder and this essentially will be my attack range this will be the range that I want my monster to be able to attack in so now what I'm going to do is in both of these I'm going to go to the chase first and enter body entered and connect these to my monster I'll do this for the body entered and then the body exited I will then do this for the attack and lastly the exited now one more thing that is kind of important before we continue here is grouping now inside of gdau there is something called grouping and this might vary depending on your version but uh here in good 4.3 all you need to do is add a filter here we will add a group called Monster and then we'll add one more called uh player now we'll uncheck the player here in the monster because well this isn't a player this is a monster in our player though we'll head to our our node here and so here we'll actually have to add the player here again and here we can actually just remove the player we don't need that and now if we go here we will see that these are groups now the cool part about this is that inside of these signals I can check to see if this body is a part of a specific group now I can do this essentially let's say the chase detection let me zoom in a little bit I can say if body is in group Player then I can do whatever I want now in all of these I don't want to change States unless I it's a player and if I'm not is dying right if I'm dying then I probably shouldn't change States I should probably stay in the dying state so now what I can do is I can say state controller do change state to run in this case so if I enter the chase state I want to start running okay so the is dying is not a thing it should be just dying there we go all right so now what I can do is copy paste this into each of these but obviously I'm going to change the state to the course responding one now for the attack exited or for the chase exited this one will go back to idle for the attack entered this one will probably go to attack and this one is actually correct because if I leave the attack player detection I want to go back to running and Chase the player okay now there's one more thing I need to do before I kind of test this is in our animation tree I'm going to actually connect whoops the signal signals animation finished and I'm going to connect this and in here I'm going to check for a few things the first thing I'm going to do is I'm going to check to see if the awaken the word awaken is in the anim name if it is what I'll do is I can just say Awakening is equal to false here I'll add an L if statement I'll copy this I'll change this to attack and then I'll have an if statement saying if the player is in the get node attack detection uh dot get overlapping bodies and not dying then this is where I will uh change to attack again so if I finished one attack so this will kind of allow me to so this right here let me kind of explain this piece of code will essentially allow me to Loop my animation for attacking if I finish one attack this will check to see if my player is still in the current detection uh bodies so this will check oh I SP wrong if it is in the area attack then I will just attack again now I can do that by just saying State controller. change state to attack all right now lastly oops lastly I want to say l if uh death so I'll do this again but here I'm going to say death and if I am playing the death animation or I finished playing the death animation I'm going to call a function Called Death now this function uh doesn't exist yet so let's actually create it and for now what I'll do is I'm actually just going to say self. Q free now here is where we'll play animations and stuff and blah blah blah but uh for now this will just kind of be good enough all right now what we'll do is close the script and let's hit play Let's see what we get let's see if we get any crazy bugs that we might have to debug together okay so here we see that it is facing and there's already a few bugs and that's okay we can actually fix these quite easily but we do see that direction is working and the attack is working quite nicely the only issue is that he's facing the wrong way now this is actually a very easy fix all I need to do is go to my skelet Warrior and I will rotate this guy by 180 I will also add a weapon because he doesn't have a weapon so let's actually go to our assets here in our skeletons go to fvx and we'll find a skeleton blade and in our rig here I might actually need to add a new bone because here we have a bone helmet but we don't have a bone for our hand so what I'm going to do is I'm going to search up bone attachment which is bone and we should find a bone attachment 3D I'll add this I'll select the hand slot right you can do left if you'd like but now you can see that the hand slot is kind of on our hand now I can take my bone my skeleton blade here and I'll just make this local and drag out the dash I need and now I can reset its position and rotation 3 0 like so and now if I hit play on on one of my animations I play the attack you'll see he kind of plays the attack but it's a little funky that might be because I need to rotate the blade I do so I need to rotate the blade Itself by 180 or just 180 and now when I hit play one more time okay so it kind of still looks a little funky let's make sure that this is the right hand slot B3 yeah okay so what we'll do is I'm going to play the T pose find the T pose here oops and this guy should be looking this way so we'll get this rotate like so so this will probably be90 and 180 so whatever your rotation is it should be facing this way outside of the T pose now let's try one more time go to the animation tree and there we go now we have a nice smooth attack all right let's hit play and see what we get okay so here we go he's chasing us there's no Loop but we can change that in a second but we do see that the attack does uh actually Loop which is nice now there is few issues right so the first one is in the walking or I believe in the running actually where is the running we go running a we'll Loop that now another one is the idol which is going to be the sit floor idle I think is this one right let's take a look so this one doesn't need to Loop this one will need to Loop so the FL sit four idle and running a that's good all right so yeah there we go there is our monster so it should now Loop if we pick play one one more time here we go so he's running and he's looping if I leave he goes to the idle animation now one thing that I like to do is inside of our animation tree I'm going to actually blend uh some of the animations now what does that look like well in our run to Idol what I can do here is I can change the X fade time I'm going to change it to 2 and this will allow us to have a smoother animation between our transitions now I'll do this for all of them 0.2 so let me just make sure that all of these are 0.2 and you can of course do these for all of them it's kind of optional but of course if you don't it might look a little chunky so it is up to you whether or not you want to try this or if you want to try something else of course you can also try the xade perve that is also a nice thing but it's more so just kind of how how fast it curves into this uh time now if we try one more time though should see it'll do that and then it'll kind of sit back down right away yeah so there we go it doesn't kind of just chunk back down to the idle it kind of Fades back into the idle animation all right so there we go there's our monster it works pretty nicely now in the next part we'll need need to now actually add some functionality to hit it we need to hit the monster and the monster needs to be able to hit us we'll do this in the next section right so now that we have the player and the skeleton working all we need to do now is well make them interact with each other and this isn't actually that hard all we need to do is add some things into each scene so the things We'll add the general idea of this is we're going to add some sort of detection area in well specifically The Sword and then every time I attack I'll be able to detect whether or not I can hit the other monster and if I do I'll send kind of a signal that will allow me to hit the other person so let's start with the monster to start what we'll do is we need to find the right hand now usually you would do this in a sword now this could work and you could you're more than welcome to add uh the area to this sword specifically but a better way to do this is if we add a new bone attachment just like we did with the monster we can attach a right hand slot right and we can just add the area to this right because this will apply for any sword because in the future what if you want to hi this and show this whatever you may want right it'll be kind of more dynamic in this sense so what we can do is we can rename this to right hand slot we will add a new uh node called area 3D this is going to be our detector we add a collision shape and now we need to set the Collision shape I we'll put a capsule we need to zoom in here and essentially make this the same size as the sword so we'll just kind of zoom out just a little bit like this and there we go now what we can do is rename this to damage detector and there we go that is our uh sword right so now when I attack so if I go to my animation tree and throw this I mean it's a little fast but you can see that the area 2D or 3D sorry follows the sword so every time I play well I gu I would have to play idol first yeah I mean even honestly even in the idol you can see that it's following the idol right as I walk it's following the sword so this is perfect so this is exactly what we want now what we can do is uh reference or connect the signal will connect the body entered signal to the player now in here you might recall that we cre grouping so this is where we can first check to see in fact actually this is where I want you to pause the video and try seeing if you can detect if this body that is entering this area is a monster or not see if you can figure it out using a similar uh thing that we used before so to do this hopefully tried it yourself first what we need to do is say if body is in group monster because if you recall from before in our monster here we have created a group called Monster so here now in our player back in our script again we can simply check to see if it's in that group and if it is that means well I'm hitting a monster and if I am what do I want to do well I actually want to just call hit on it so in order to do this the monster needs a function called Hit first otherwise it doesn't really make sense like how can I hit it without having a function inside of it now I could just Q free so for example I could just do free like this and this could totally work this would just destroy the monster however I'm going to call a function called Hit and the cool part about this is that I can now put in a amount of damage in like like one or two right so if I want to do a certain amount of damage to its Health this is where I can do it okay now one more thing we'll do though is in the body is in group whatever what we want to also check for is is attacking I don't want to damage the monster if I'm not attacking because let's say I'm just walking right my player's walking and I just walk past a monster and the monster enters this area obviously that's not very good I don't want that that's a pretty terrible interaction right I don't want that in my game I only want to interact uh when I'm attacking now there is actually a better way to do this um but I'll show you that in the monster so it's going to be kind of two different ways to detect whether or not I'm attacking or not and this will be a nice way to for you to kind of learn different ways of doing something similar that we need to achieve so let's head back to our script and what we need to do now is now that we've created this hit function or called this hit function we need to create it we don't have a hit function in our monster so in this body right this is the body that we would be calling but I mean I'm not going to ask you do you guys see a h function I don't see a h function here so what we need to do is create it we'll create a h function will pass through an amount of damage that will be an integer and then all I need to do is say health minus equal damage and then we can check to see if the health is less than zero if it is we'll say self. Q free now here's the issue that well the main issue is Q free doesn't exactly do what I want right I don't want to just Q3 you probably guessed it I want to change states to death so all I need to do is change states to death because we should already have this set up okay so now that we have our hit function um all we another thing I want to do is I want to start detecting the just hit function what this means is if I just got hit I actually don't want to do any of this so I will only reduce my damage I'll only die etc etc if I wasn't just hit now this is a variable that we created uh kind of a while ago and this will essentially allow to detect if I was just hit or not now here's the kicker is I want to set this to True inside of here just hit is equal to true but here's another issue is how do I set it to false well what we're going to do is I'm going to close our script here head to our Warrior and I'm going to add a new node called the timer this timer is going to allow us to essentially start when I just get hit and I'll connect a signal called Timeout on our monster here and every time it times out I will set the just hit to false now the issue is oops false not the issue but how do we start this timer right because this timer doesn't just start like magically we need to start it so how do we do that well it's pretty easy we just say get node just hit it's the timer that we just created and then just start it this will automatically start our timer well not automatically but it'll start our timer and yeah so that'll allow us to actually do that okay so now what do we need to do well uh in our just hit function or sorry our hit function we now need to uh not need to but one other thing that we can add is a knockback this is something that I like to do in a lot of my games um it's just a very very simple way of adding a knockback and that is by something doing something called tweening tweening is a very simplistic way of animating so think of how we might want to animate a knockback well one way we could do it is doing it through the animation player right if we go into our animation player if you understand how it works if you don't that's okay the basic idea of it is that there's something called key frames and essentially and we'll actually use this for a monster later in the next part uh is see let's go to our skeleton monster we have keys here and I can key one of these and it will kind of put that position in this key frame and then if I key another one at another position it will kind of animate between those two frames now I don't want to give an example because I'm actually going to give an example a little later but the basic idea of tweening is that it's done in code it's the same thing but just done in code so let's take a look at how we can do this first I need to create a tween you know just a fun fact G in G 3 and previous tweening used to be an actual node but they removed it and now we only can create it through code but that's okay okay we can still utilize it quite nicely so here we'll just say twe property and the property that we want to twe first we'll look at the object well the object is going to be our self okay now what property do we want to adjust well I want to adjust the uh Global position what I essentially want to do is take our Global position and then the final value will be its Global position minus the direction divided by 1.5 this essentially will act as a knockback now I want to do this over a period of2 and this is going to basically be how long this tween takes so 0 2 seconds is very quickly right you'll not really not notice it but it's it's just very quick okay now that we have our hit function Let's test it out let's see if this works so let's take a look first at our health here we have four health and we should be doing in our player script two damage it should take two hits to kill our monster let's take a look play we go and our Monster's chasing us and you can even see that there's a little knock back and eventually it dies and we even saw that that second attack didn't go through because it just got hit so I couldn't it was invulnerable essentially I couldn't keep hitting it I wasn't allowed so there we go that's our know detection that's our monster attacking that's pretty neat in the next part we'll take a look at how we can now do the opposite I would suggest actually with this next part you try it on your own first try making it doing exactly what we just did adding the area 3D to the monster and then allowing it to hit the player adding a hit function inside the player Etc but that's what we'll do in the next part so we'll be able to have the monster now attack the player right so in our next part like I said um we now need to make it so our monster can hit our player now to do this actually a little not easier but per say but we already have our bone attachment here and I'm going to rename this to right and Slot just like I did for the player and I'll attach an area 3D again and similarly a collision shape now I'm going to go to my animation player and select the key pose just so it's a little easier to add it or you know adjust the sword here I'll add a cylinder capsule make it much smaller as you can tell make it skinnier order and there we go here's our sword I might actually extend it a little outwards just so it can actually hit the player okay so now what we can do is you need to make sure and me uh we need to make sure that we take a look at which attack we're using here I'm using the twohanded melee attack slice so now what we'll do is we'll head into our animation player with animation on the bottom we will head into the twohanded attack slice one that we're using now what I want to do is I want to turn off the animation tree so that way I can look at my animation uh for this animation as it actually happens now here's the thing I want this area 3D only be uh disabled and enabled whenever this Frame is kind of like right here like in between the attacks so right maybe right here and in between here after that I want want to disable it so what do we do well this is actually quite easy this is the key part that I was talking about so here what I can do is make sure that it's disabled is off I'll key here like so and then right here I'll check this on and then key it again now if we scroll all the way to the bottom you will now see this new Collision shape 3D with enabled and disabled so this will essentially enable the Collision shape or yeah Collision shape and then disable it after a certain frame now here's the kicker is we want to find that reset track and make sure that this is enabled so by default this should be enabled right so this will automatically kind of happen like this is the reset this is what will reset every time I play the game kind of it's almost like a ready function now let's rename this similarly to damage detector I will go into this area 3D add it into our body entered and connect so just kind of uh an ad if you recall from our last part uh like just 10 minutes ago this is how uh that animation player that's another way of detecting if I'm currently attacking or not because here I I could check for the state so let me actually pop this out I could check for the state controller I could just check for the name or whatever see if I'm in the attack State and that could work that's totally fine but this is kind of a more Accurate Way of detecting for a specific frame it's it's just a bit more accurate I would say okay now here in the damage detector this is from the monsters to the player but as a reference I can actually just copy paste this into here and change this to player and then remove this I want I'm not going to need that now for the body do hit instead of two you recall I already have this damage right here so I'll just pass that through now I can always change the damage that I want uh you know to whatever I want okay so now on the bottom uh now if you recall you know we have this hit function we're calling it but again we don't have a hit function inside the player so let's create it um in fact actually as a good reference to create it I'll just copy paste this copy this here and now we have a good amount of stuff now of course we don't have health I don't have damage or actually we do have damage um and we were going to add our I was going to add the health um a global variable but for now we can just add a health variable here as int equals say five and then uh instead of State Controller here I'll say self. do free for now okay um actually we could just play the death animation so why don't we just do that actually so instead of uh self talk Q free what we can do is we can actually say is dying oops is is dying is equal to true and then uh here we'll just copy this right here and instead of traveling to attack node one the attack to the death node name here we'll just travel to the death now here's the thing is after my death animation I want to die I want to like end the game and little later we'll add a game over overlay but for now what we can do is I'll close the script and in my animation tree here I've already connected uh oops in my player here in my animation tree I don't have this so I'll connect the animation finished connect it pop this out and now I can check for the death animation see if I just played the death animation I'll say if death in random name then what I'll do is I'll say self. Q free this will allow me to just Q free and in the future if we ever want to add a game over overlay we'll just add it here okay all right so here we have the uhing however this might not work because we have a direction we have a direction this direction is facing wherever I am which I think will work fine okay so we have the just hit being started but I don't have that timer so we need to add it but let's add our new timer our player here and we'll rename this to just hit okay so we should be able to to give this a try Okay so let's see if we can oh okay so our monster needs to turn on the animation tree again go back to the inspector it close the game okay back to Output here we go all right so here's our monster should be able to attack us now and even knock back all right so it seems that I'm Invincible now because I never connected the just hit uh timeout so that would make sense I would probably need to be able to turn just hit to false so here I turned it to true and then I never turned it to false again so that would make sense all right so let's H play one more time test this out so he's waking up going to hit all right cool so there we go and then eventually I die and then IQ free and the reason this is happening is because I don't have a camera 3D anymore because if you remember camera 3D is in our player and we already destroyed our player so uh that's probably not the best way to do it but it works out quite nicely so in the future we'll add a game over overlay and it will be able to restart the level and stuff this is pretty good so far so I'll see you in the next part all right now that we've pretty much completed the player and monster we now want to head into our assets and I'm going to now show you how to create this custom theme because we're going to kind of uh I'm actually going to close these guys we're going to now head into creating GUI so for example um we'll actually create a canvas item canvas layer as our base here I'll save this as GUI and I'll put this in my scenes in my player and save and just kind of show you what this might look like if I create a panel you will see here this is the default theme of gdau now this default theme if I pop this into the themes right here you will see it turns into this nice pretty thing now in order to create this though what we'll do is create a new resource search up theme save and we can create default 2.0 of course if you don't want to do this you can of course skip it I've already set all the default themes you'll need but I want to show you how to do this uh you know ourselves now okay the font very easy just drag and drop the font into the default font done super simple now what about the rest because here you can see in this default theme we have button panel progress bar but here I have nothing well I go to manage items go to import items and we can now import the things I want I'm going to import panel I'll find the panel I'll find button I want the button here and let's import these first close C okay and I forgot the last one progress bar right okay we'll go to the thing over here manage items and progress progress bar there we go import selected and now we can see uh in my edit items you can even see it here but I'll close Okay and now we have our our things that I want to give now okay we'll start one by one we'll start with the panel as this one's probably the easiest we'll go to the Styles we're going to select this down button and select the texture we'll take our UI big piece and drop it nowhere because I need to click this first then I'll drag it into the texture now you can see in the background I have this texture now I'm going to go to the sub region edit region and now I'm going to select this guy now I could also try pixel snap sometimes it's not perfect but it's not too bad here we go now I can move these dotted lines be kind of below where I want it to be and essentially what this does is let me actually move all these first and it might be easier to explain it it will use the middle of this as the middle of the entire panel so this side corner will always be consistent so now when I close this and I add a panel here more time and I set this theme as the theme 2.0 you will see if I zoom in here we have these dots always no matter how big the panel is so essentially everything else gets stretched that is kind of the advantage you can see that these Corners don't get stretched they get uh they stay the same size okay so that's the panel finished we'll close the panel here in our custom theme let's H over to the styles of our button the buttons are going to be a little more difficult but uh just more of a drag I would say let's head over to the normal one because that one's probably the easiest but we'll drag in the UI piece go to sub region edit region zoom out and here we can find our buttons so this one is going to be our normal button this is pressed and this is hover for Focus as well so let's just do the normal first so we'll drag this and I can just down just a little bit and I can move the dotted line in the middle like so and just bring this up a tiny bit all right we'll close and now if I add a button it would should look like this but let's finish the rest so what I'll do is I'm going to drag this guy into the rest of them now here's the thing though is that if I edit one of these it will edit the rest you're more than welcome to give it a try but I'm just going to make unique on all of these so that way I don't mess anything up do make sure that you just make each of these unique right now for the Pressed we'll go to the sub region and select the Pressed here we go looks pretty good I'll just move this I'll just leave it there that's fine close and we'll go to the hover sub region edit region and hover we can select this one we go and just select the entire thing make sure that the inside is kind of what you want close and we'll go to the focus the focus we can leave as the default and then the disabled uh we'll select the Pressed one for the disabled if we want ever disable the buttons which we actually will at for our item or our inventory system kind of then we'll select this as our disabled okay so that's our buttons and lastly the progress bar this one's going to be a little easier because if you actually notice in the default one that I gave you in here the background is empty and there's a good reason for this but the fill is going to be our texture so let's do this for our um guy here so background I'll set this to empty and then the fill I'll set it to texture and pop in the texture that I want I'll go to sub region edit region and I've created this guy so I've edited it I've basically just moved these all together because that's what we need so here we go select the red like this uh I think it's supposed to be like that there we go and I'll just move this guy one corner like this that's not what I wanted to do I want to move this guy up and this guy down like so I'll use this as my stretch essentially okay so there we go there's our theme completed now to actually load this into our game I need to go to Project settings go to General search up theme go to theme and add in our custom uh theme here so here I'll just add in my uh default 2.0 or you can add the default and I'll save and restart and I'll see you in the next part right so our next step is to actually create a game over overlay this will be a little easier so we'll start with this as our kind of initial GUI set up so to do this we'll create a new scene and this new node will be a canvas layer base now I know I haven't explained what a canvas layer is but let's kind of take a look at what it is and what it does so to do this we'll add a panel and we'll increase this panel here and I'm going to actually turn on this grid snap and this will just allow me to more accur accurately assess how big I want this to be so I want it to be this big now inside of this inside of my panel specifically I'll add a label and I'll add a button okay so this button let me make it a little bigger here me just do it like so I'll type in retry put this kind of in the middle and then the label I'll make it a little bigger here and I'll type in game over try again now if I want this to be bigger that's easy all I need to do is go to the theme overrides you could of course uh edit the actual theme in here right I believe you should be able to edit the default size but I'm not going to do that I usually like to edit the size manually every time I add a label um the font size here I can actually just overwrite it and make it much bigger as I want it to be now what I can do is I can just Center it in the alignment there we go I can maybe just press enter so that way it says game over try again on two lines like so and even more what's cool about this is I can go to the constants and give it line spacing outline size uh you know make it look pretty whatever you really want right so you can kind of start making your text a little nicer we'll save this as a game game over overlay We'll add this to our scenes our player I'll make a new folder here called GUI H save and in our level I'm going to now add our game over overlay now when I hit play the way this works is a canvas layer essentially follows the screen no matter where it is so here you can see the label in on top of our gameplay because in our game over overlay here the canvas layer is Within These blue lines so that is how we canvas layer Works anything within these lines will show up on our screen so you can kind of see or imagine why this would be useful specifically for uh you know gii and stuff so let's rename this to game over overlay we will add a script because well I'm going to need a script for this guy but I'll put it into my scripts folder put into my player create a new folder UI open create now in here what I'm going to do is I'm going to on ready the self. hiide I want to hide this game over overlay now I want another function that we're going to call when the game is over meaning like I'm dead this is the function I'm going to call one of my player dies now in here what I'm going to do is I'm going to take my input Mouse and make it so that it's captured or visible right because before it was captured but now I want it to be visible so we're going to say mouse mode is equal to visible next I'm going to say self. show because I want to show this overlay that would make sense because it's hidden right now right and then lastly I want to pause the scene to do this all I need to do is say get tree do pause is equal to true and then uh that's pretty much it now this is it but there's kind of an issue um that issue is that here let's actually let me actually show you so let's go to our player and in our player here instead of the q3e here what we're going to do is we're going to call the game overlay to do this I need to get node and get the path now to get the path it's actually not that hard let's go to our level here go to our player script and it might be a little cramped but all I need to do is now drag in uh maybe I'll actually rename this to game over overlay and then now I just need to drag it in and this will give me the path here I can just say get node overlay and now I can call that game over function that I created so this will do that for us now one thing I want to do though is before I call this I'm actually going to wait one second to kind of have that to show the effect that oh you're dead and we played the death animation but now we're going to you know uh wait one second kind of it just kind of adds a bit more player to our game I'll say so here I'll say get tree create timer one uh yeah so one second and then we'll wait for the timeout uh signal if you recall a wait allows us to you know wait for a certain signal and this is the signal we'll wait for so here I'm just going to get tree to create a timer once I create the timer I'll wait for the timeout signal now the seconds it's up to you whether you want one or two seconds or whatever I'm going to do one second I find that it's not bad so let's hit play and you're going to see something happen so let's just try to die here so get hit once twice here we go I died after a second this pops up but nothing happens now I could kind of click but it doesn't actually work the reason why this wouldn't work is because in my game overlay the process inside the node is called or it's on inherit now inherit essentially is inheriting the scene or the project uh pause scene right so the mode and the mode is currently paused right we pause the scene so this scene is also paused meaning I can't click anything so what I need to do is go to this mode and turn it on always so that way I can always interact with this script and these no nodes here no matter whether or not the scene is paused so okay let's rename this button to retry and I'm going to connect this node by going to press connect and here now all I need to do is a few things first I'm going to unpause the scene I'm going to say pause uh get Tre is equal to false and then I'm going to say get parent dot uh reload parent see oh not get parent what am I doing could be get tree that would make much more sense that's why we didn't have it complete so get current tree there we go so now we just we just reload the current scene from our get tree so now let's hit play and see if this works now we should be able to just go to our monster here eventually I'll die there we go 1 second later I can retry and here we go we restart our scene there we go that's our game over overlay in the next part we'll get started with our GUI and you our pause menu and stuff like that so see you in the next part all right so the next part is going to be in our GUI but first we need to actually make sure we add our GUI into our main scene here let's just make sure we add this guy in and I'm going to rename it to VII so this is our general VII for our inventory our profile that kind of thing so let's make this panel a little bigger just like I did for the game over and I'll rename it to gy and before I start adding things let's add a new script here add a new script to our scripts folder player gy open create now okay in this script there's a few things I'm going to do the first thing I'll do is I'm going to go into my function physics process I'm going to check for the input of my paused function or my uh input sorry I'm going to check for it just pressed and pause here this is where I will start pausing things and doing things so the first thing I'll do is I'm going to get tree. paused and instead of saying true or false there's a kind of trick here I can do that's just to get it to be the opposite of what it currently is and then the cool part about this is that now I can just say uh get node container which we don't have yet uh Dot visible is equal to the get tree. pause so if this becomes true I will set the visible to true it becomes false I'll set the visibility to false now okay let's add this container because well I don't have it so we'll probably want it now the reason we're doing this um I'm going to add a control node by the way so that's our container let's rename this to container okay let me explain why I'm doing this the reason is because I'm G to add a panel into this this is where my profile will be this is where my inventory will be but the question is what about the HP bar the progress bar that I add so let's add a progress bar for now and here I zoom in I can kind of move it to the top left extend it a little bit and here I can give it a value of let's say 50 I'll turn off the show percentage and here I don't want to hide or show this guy depending on if I pause or not right I always want to have the HP bar showing let me just rename it to HP bar and now the advantage is I can show or hide the container specifically this guy depending on if I'm POS or not the HP bar I want it to always show now before we continue one other thing I need to do is make sure the process mode is on always for my GUI because otherwise I'm not going to be able to unpause My Scene if I pause it right that would be kind of silly I won't be able to do anything if I pause it now okay here's the the fun part though or the unfun part is we need to match the paused uh scene so here I'm going to match whether or not I'm paused and if it's true what I'm going to do is I'm going to say input. mouse mode is equal to Mouse visible Mouse visible and if it's false which is pretty much the only other option here I'm going to set it to Mouse captured this will allow me to just be more dynamic in whether or not I pause the scene this kind of comes more into play when I add my shop uh well we'll add our shop later um because this is just kind of it becomes a little buggy because our our shop is going to pause the scene it's going to show and hide some GUI that will'll add later but this will just allow us to avoid any weird issues where if I go into a shop and then try pausing or whatever it just avoids all that so let's close the script now and let's hit play just to test this out here our is paused now you can see here that first of all nothing's working so let's actually just make sure that the pause is right so let's go to our project settings input okay so here I don't even have anything so let's add a Escape okay so now uh we have our pause but there's an issue is that this is still showing on the default now this should actually fix itself if I hit play and I pause my scene it will show and then I unpause it it'll hide but by default I should probably show it so let's add a ready function and we'll just take the visibility here and we can just do hide instead so that way we can hide it uh by default okay okay so now when I hit play here we go our container is hidden but if I hit Escape we pause the scene and uh we have our GUI so this is quite nice now from here we can start adding our inventory and things and whatever we want so let's just set up the general things that we need um first I'm going to Ren the panel here to BG for background I'm going to add two containers I'll duplicate it or two control nodes I'm going to add a vbox container and in this vbox container I'm going to add two buttons one will be the inventory inventory button I'll duplicate this and this will be the profile button now in my vbox container the cool part about this is if I extend it the buttons will automatic Al kind of resize a little bit here I can just type in inventory and then here I can type in profile now the spacing is a little weird and that is because in my custom theme I didn't really space it out too well so let me just fix that real quick we'll go to our style or normal here sub region here you can see that this is not spaced out nicely so we need to just kind of Center it again we'll close that and now we can see it's centered a little nicer alternatively you can just use this guy I think this guy was set up a little better so I spent a bit more time setting this up properly okay so here we have our inventory item and our profile button sorry and now what we can do is connect a signal for pressed in our GUI for both of these now what we'll do when we press these buttons is I want to show and hide these control nodes but these control nodes I need to rename them to the proper thing so let's rename this to inventory and this one to profile so what we'll do now is inside of this script we're going to show and hide depending on what I want so okay what we'll do here is for the inventory press I'm going to say get node container bbox inventory button disabled is equal to true because now I'm kind of showing that I'm in the inventory I do that by disabling this button now what I can do is duplicate this and just change this to profile and then enable the uh profile button because if I were in here right if I were to actually copy paste this I would do the opposite so here I would set the disabled to true and set the in disable to false on the but on this one so we're kind of just doing the opposite essentially now what I want to do is I want to show the inventory right so this guy I'm going to show this but then I'm going to hide the profile so here I'll get the profile and then hide this now I'll just copy this one more time the profile but do the opposite so here I'll hide the inventory and then show the profile yeah that's pretty much it now we won't have much of a visual effect um because there's nothing in our inventory or profile right now um but in the next part we'll start filling it in so we'll add in our inventory first uh so this might actually take a bit of time maybe an hour or so the next part um but we'll fill in the inventory we'll add a bunch of logic to it we'll add some items etc etc um and it'll be quite fun we'll start using the item pack here that we have and yeah so it'll be fun and we'll fill it in and yeah so I'll see you all in the next part all right so let's get started with our inventory first um and to do this what we're going to do here is we're going to right click our inventory and Save branch as scene this will allow us to create a new scene basically just as an inventory so you'll see what I mean in just a second we'll save this in rgi I'm going to create a new folder here called inventory and save and now you can should be able to see this kind of YouTube looking button here you can click into it and it opens a new scene let me just close the game overlay we'll open this inventory and here we go okay so what we need to do first is set up um our scripts so let's go to our GUI here create a new folder inventory and in this folder we're going to set up a bunch of our scripts now okay this next part this these next few parts that we're going to be watching and maybe the next hour or so will be not hard per se but try to keep up as there's quite a bit of logic to understand and learn so first we're just going to set up these scripts that we need so the first one is going to be inventory item this will be the actual item I'll duplicate this okay sometimes uh okay here we go sometimes it doesn't like when I have something else selected to control D which will allow me to duplicate it we'll say inventory main this will go into this inventory okay one more time we'll say inventory slot duplicate one more time and we will say um item data then we will have no that's actually for our for now at least we will have one more but that will be a little later so the first thing we'll start with is the item data the reason we're going to start with this is because we're going to create something called a resource we're also going to create something called a class now a class resource is something slightly specific um but we'll kind of go into it one one step at a time so let's create a class name here called item data this will essentially be our item information data right the information that will go into it we here we're going to extend a resource and a resource is something inside of gdau it's a builtin feature that essentially allows us to add uh GUI into a information packet now you'll see what I mean in just a second so let's close all these scripts and just open this up again and for example we can export a variable called item name and this can be a string now let's take a look inside of our 2D here let me just make this a little bigger now what I'm going to do now is go to my scenes that's not my scenes here we go inventory scenes I'll create a new resource and we'll use the default resource at the top I'll create a item uh now the item I will create is let's say a sword um we'll say iron sword so now uh what I can do is take this iron sword double click it go to the inspector Tab and you can see here I have the iron resource I have resource don't worry about this we have a script now the script we want to attach the item data and now you can see the item data the class name you can see the item name with a string now here I can just say iron sword so this is where I can start filling in information that I want inside of my resource so this is the kind of the advantage is that there's a nice uh property tab or a inspector tab for this now think of resources and um the script basically as an extension or a different way of doing a dictionary so a dictionary would look something like this so if I created a dictionary say item data right I can say it's a dictionary it would look like this where we have curly brackets we can have the item name and then this is the key so inside this item name we would have another string we would say iron sword right and then we have to do comma and then we would put in item damage Etc right so this is kind of how we do this dictionary but this is kind of messy right and imagine this is just one item so this I wouldn't even name item data I would name sword iron iron sword right and then I would have to create several dictionaries inside of another dictionary inside of an array inside of different things now this is kind of messy and there's just no point to that so instead we'll use res resources now in our resource we'll have a few things here so the first thing will be a type this is the type of item it is so in our types we will have weapon we'll have head body legs beat we'll have misk MK is miscellaneous so things like um potions and you know things you eat or things that aren't usable depends on what it is um you can kind of make this actually different to what you want our miscellaneous that I'm going to code in our game is going to be a usable item so specifically we're going to use a potion the two items that we're going to kind of look at in this are going to be some sort of equipment item so a weapon probably and then a miscellaneous item so like a potion that way you'll see how we can kind of differentiate between the two and then lastly we'll have main main is going to represent the uh inventory system so the actual main inventory all right so next we want to export the type and we can do this by saying lowercase type and then type which is the type that we just created so this is the enumerator that we just created now what I'm going to do is I'm going to copy paste this a few times and I'm going to change some of these do uh we have item name we have item damage that we want we have item Health we have item defense of course you can kind of Pi and choose whichever ones you want want um I'm going to just do the ones that I'm going to need um the ones that I'm going to implement here we're going to have a stackable item whether or it's going to be a Boolean I'll change the types in just a second um but this is a Boolean that is going to tell us whether or not it's stackable and if it is we'll have a count right next to it and then after that we're going to have a ex export multiline and this is going to be our description and this is also a string but it's just going to be exported as a multiline so you'll see the difference in just a second and then lastly we're going to need a texture so this is going to be a texture 2D texture 3 this one will be a integer the item defense an integer the item Health an integer the item damage also an integer so this is a Boolean okay actually now that we're done what we can do is head over to our item new item resource iron uh sword and we can start filling things in so we can see the type by default is weapon so that's cool the item damage we can give it damage like five the item health and defense I'm not going to fill that in if you're wondering what the item health is this is kind of the healing that I was going to implement so for the potions this is where I would do that now the description you can see the multiline is more of a multiline description so here what I can do is I can now I can kind of just do whatever I want I can write in this is a iron sword and this is not a stackable item I'm going to leave it unchecked I'm going to scroll up to my item pack and I can just kind of drag in one of these whichever one you'd like I don't know I'll just drag in maybe this one actually iight highlight again we'll use the first one um I'm going to use two different ones just to represent two different items so we'll have a iron sword I'll duplicate this and say long sword now in my long sword I'll go into this and you can see on the top right it says long sword so this is not an iron sword anymore we'll change this to long sword we can change the damage to maybe three this is maybe a slightly weaker item can say long sword scroll up and select a different thing maybe this one yeah this one kind of looks long I don't know yeah so you can kind of Select uh look through these and select whichone you'd like I'll now make a potion because well we'll make a small potion let's say so this small potion we rename it to small potion this is going to be a miscellaneous item the item damage will be zero the health we can change it to five so it'll heal five you can say this is a small ocean that heals heals you the count will change to one and this is a stackable item so we'll check that on so next what we can do is find a small potion and fill the texture in okay so we have a few items which is nice now one more thing I'm going to do is I'm going to actually create a new folder here called default stats this will be for a little later and for now what I'll do is I'm going to duplicate this and call this default sword I'll drag this guy into the default stats folder pop this out duplicate one more time and make a uh oops default body armor uh body armor like this. trust duplicate now these guys will be our default stats so for the iron sword or for the iron body I'm going to actually reset everything and here I'll just say default armor the default sword I'll say default Sword and the Damage I'll say is one by default or actually let's say two now the rest doesn't really matter we can just say the default sword because this isn't an actual item we'll have in the game it's just to represent our stats you'll see why we do this a little later okay so now that we have everything set up uh we need to actually start setting up our scene now the scene setup is not going to be actually too complicated here all I need to do is set or add my inventory main to my inventory uh scene here next I'm going to add a grid uh scroll scroll up grid container this is going to be our grid container so I'll rename this to grid this is going to be where I put my inventory slots now next what we want to do is we want to add equipment but our equipment is going to be our own node that we create now what I mean by this is inside of our inventory slot here what we're going to start doing in the next part is we're going to take a look at how we can create our own node from scratch because here we extend node but we want to create our own node and we'll take a look at how that what that looks like in just a second all right so now that we have our inventory slot here to create a new node using this script what we can do is create something called a class name now we already did this but this time we're using an extend node so let's take a look at how this might work we're going to create this class name called inventory slot and instead of extending node we're going to extend panel container so now what we can do is if I close the script just as an example well it is an example but we're actually going to use this if I search up inventory or uh slot okay I'm going to have to actually save so here I need to make sure I contrl S and then try one more time here we go we have our inventory slot I can create this as its own item or is its own node now this slot is technically a panel container right but here it says inventory slot just because it has the script attached to it now the coolest part about this is in my inventory here what I could do now is let's say I create a ready function so that's not a ready function the cool part is if I say create a variable slot is equal to inventory slot because now it's a class that I can call and then say New I can add a child slot now the cool part is let me hit play Within this scene this will add a new slot but if I go to the remote section you will see I now have two slots whereas here I only had one so this is how we will actually fill our inventory slot grid through this now kind of extend on this example you can also do this using any already prebuilt node inside of gdau so here I could create a label right so here let's add a label let's go to our REM section and here I now have a label additionally we can also start editing some things and properties from this label obviously here it's called slot but I'm going to call slot. text equal to I my name is coding quests and if I hit play you will see a label on the top left that has that property so this is kind of the advantage to what we're going to be using we're going to essentially create some slots just control Z here and fill in our inventory slot now let's complete our inventory slot first because we'll kind of be confused on what we're doing in here and what we're filling in until I actually do this so in our inventory slot here we're going to start filling in some things now the first thing we'll need is an on uh sorry export variable called variable type and there's a reason we're going to export this I'll show you in just a second we're going to get the item data type so we'll export all the types of the uh item data right so now if I actually close this you will see here I can now pick what sort of item this is now the advantage of this specifically the reason we're exporting it is because now I can create equipment system using this same slot and we'll do that a little later so let's just go back to our script and we'll continue this next we need to initialize our um slot here to do that we'll say in it P item data. type we initialize the item data CMS and then Vector 2 this is the size that will actually have our uh oops this is going to return void so here we go we say void this is the size of our actual inventory panel slot here I can say type is equal to T and then I can say CMS or sorry custom minimum size is equal to DMS the custom minimum size right so this custom minimum size what this is is if I close this real quick is in my layout so if I add this to my grid you will see that my inventory slot disappeared and that is because even though well I guess technically now it's just 0 0 this I can't actually edit the size of my panel or my inventory panel here I can change the size of this to 64x 64 or 32 by 32 whatever I want so here I need to make sure I change my minimum size all right let's uh make sure that we just have that outside for now let's head back to our script here all right next we're going to add a function called function and drop item data this is going to allow us to have a true or false it's going to return true or false and tell us whether or not we can uh drop data or not at a certain position now if we can right we're going to call another function called drop data and this is going to return void so here we can actually pass here I'll just return false for now so that way we get rid of that error next we're going to have a fun physics process function which we'll actually return to a little later but this is where I'm going to check for equipment and adjust stats this is something we'll do a little later but for now we'll just have it in so that way we remember that we're going to need it next we're going to add a GUI input now a GUI input is a function that allows us to detect some sort of input only within not only the script but only within this actual item so what do I mean by this well if here I actually print event and I hit play let's say if you tried this before right event should print like Mouse motion and stuff but the cool part about this is because this is a control node specifically right a panel container is part of the control node family here you can see it says control this I head back to my game here let me just play again will only print if my mouse is within this control so here you can see there's motion I can click and you will see the mouse button here we go and we can detect things only Within the specific uh script so this is going to allow us to check for a very specific thing within this specific slot okay all right so and this is where we're going to be using a lot of um using buttons and uh sorry using like our items and stuff like that so this specifically will actually be using our items okay let's get started with our handrop function so here we're returning false by default which is actually correct but well it's correct and not correct what we want to do here is we want to first check to see if the data is inventory slot uh sorry inventory item now inventory item is another class that we're going to need to make but let's actually make that before we continue so I don't eror here here I'm going to create a class name inventory item and this is going to extend let me extend just double check the texture rectangle texture rect so this is going to essentially represent uh our Sprite think of it as kind of a Sprite but this texture rectangle specifically is a uh control node uh sorry so texture wct you can see here that it inherits the control node properties so it's just to display a texture but it's also a control node so that's kind of why we're using it okay so let's pop this back out go back to our inventory slot and now we can continue this so here what else I need to do or check for is if the type is equal to the item data. type. main I want to check to see if this is our main inventory slot if it is we'll also check to see if the child count is zero and what this is this is to check to see if we have an item or not so what we're going to end up doing is when we drop the data or drop an item in an in a slot we're going to actually add a physical item into that slot so it's going to be an actual node that gets dropped into that filed so if I do that the child count will be one not zero if it is zero this means that I can return this means that there is space to return on the inventory slot otherwise I will return get child z. dat type equal to data do dat. type now the data is something that we'll have to adjust later so don't worry too much about understanding this because we haven't finished it just yet but next we'll create a if statement here or check an if statement we'll say if type is equal to data. getet parent do type there we go Ty if it is then we'll return true now lastly we'll say if else here and then we'll return false on the else okay so here I might have to make sure that this gets saved in order for this to actually work and I'm going to close my game here so I don't get an error so hopefully okay so we're missing some things okay so right here this is missing an else statement so over here we'll need an else statement here so here we'll return the data do dat. type equal equal to type so this is going to return a true or false depending on if this is true or not right okay so this is our can drop now if we can drop something I want to drop something to do that I will first check to see if the child count is bigger than zero if it is that means there's an item that we're currently dropping into this item or into this slot so what we'll say is variable item is equal to get child we'll get the item that is kind of in the slot right now now and then we'll say if item is equal to data we'll just return this basically means item this means that I'm trying to replace a slot with a with the same item so then I can just return I don't have to actually change anything next I can just item reparent data. get parent then outside of this if statement I will say data. reparent uh self here we'll reparent our self the item that is kind of currently in our hand into the uh inventory slot but if there is an inventory or if there's an item already in that slot will reparent the item there into the previous um slot that we were in okay so now this is kind of our general Logic for our inventory slot let's take a look at our inventory item as this is where some of the things actually happen for actual item all right next up in our inventory item we're going to start editing some things in here first we will export our data now this is the data that we've been talking about this entire time right this is where the data will be stored now the data that's storing or that's being stored is an item data resource now we can create a ready function and say if data we'll start to fill in some things that we need first we'll say expand mode is equal to texture Direct rect expand mode ignore size here we go we'll also say stretch mode is equal to uh okay there we go error is gone texture re do stretch mode aspect centered next we will say texture is equal to data. item texture next we'll fill in the tool tip the tool tip is a very cool thing it essentially allows us to cover an item and some text will appear so this is kind of where the description will become so here we can fill in a name we'll put in percent s we'll fill in that information in just a second we'll say new line percent s maybe I'll just copy this so it's a little easier to put new line and then we'll say stats actually no space there stats space new line or sorry uh contr s and then damage then defense and then maybe the health as well so now what we can do on this line we'll put our percent and then an array with the information we want to fill that information is going to be the item name the data Dot uh description and the data do uh item defense or damage and I'll just copy this so this one will be item defense and then this one is item Health hopefully that should be right okay so let's go to the new line all right so now what we can check for is if the item is stackable if it is stackable that means I want to create a count number right below to do this what we can do is create a new label to do that we actually already kind of went through an example I just create a new label like so next I can just start adjusting its uh properties the text I'll add is a string of the data. count the position of this I'm going to set it to be Vector 2 24 and 16 now this you can adjust to whatever you'd like later this is kind of something I found it works kind of good enough it's in a decent position next I'll just add child and then add the label okay so this is our ready function complete next I'm going to initialize our function here now make sure that when you initialize you do not have the underscore the underscore is a very is not very different but it is different than having this um here I'm going to initialize the item data and this is going to return void and we'll just say data is equal to D okay next we'll create a function called get uh drag data here we'll just pass for now and we'll create one more function called make drag review uh preview there we go preview um it's going to be at position and I'm actually just going to copy this but here I'm going to return a control node next in here uh we'll do this part first because this is the preview and then this is the get preview uh so here in the make preview I'm going to create two new nodes the First new node is to represent the actual image that I have so to do that I'll create a texture rectangle a new oops new like so we'll get the texture and we'll say texture is equal to self. texture we'll get the expand mode and I'm actually going to just copy this right here and then after that I will say t. custom minimum size is equal to self. size we'll say t. modulate a equal to 0.5 now if you're wondering what this is this is the modulation a so what that is is let's go to our inventory slot go to visibility modulate and if we look at the a this is kind of the invisibility tab the 05 would be in the middle and this just makes it slightly transparent so this will kind of give it that effect that I'm dragging my item okay next I want to say p. position is equal to Vector 2 minus F position next I want to create a control node because I'm supposed to return a control node here I'll create a control do new I'll say c. addchild I'm going to add that texture that I created and then return C now for the get preview I'll just say get uh set drag preview oops preview do the make drag preview which I just created and pass through the position then I will return self all right so this should be it this is my entire inventory item script next we will head back to our inventory Main and start filling in our inventory because we don't have any slots right now to test anything with and before we continue actually we now need to create a our Global script This Global script will create a new folder for it for Global if anything if we ever add anything Global it will be in here we'll add a new script in here new script we'll call this game now this the reason we're doing this is because we want to essentially globalize a lot of our things the one thing we're going to globalize first is is um player heal we're going to default this as an INT to let's say five we'll create a player health max this will be well five by default as well can't be bigger than or smaller than the player Health we'll create a right hand equipped for item data now this is kind of where we start to go into uh the reason we created the default resource so we also create a body equipped uh item data next we'll create a uh variable player damage this will keep track of how much damage we do to zero variable player defense as an in to zero and we'll say variable uh oh that's it for now uh next we'll actually load our items though globally so we'll also create an items tab here whoops going to be a dictionary not an array here I can actually say dictionary and then here I will say long sword and then I'll load or preload the long sword so here I should be able to say long sword okay maybe not if it doesn't pop up that's okay what we can do here is we'll close thisor Scripts and we now want to find that long sword I've created over here so now I will pop this into the new row we'll load in all our items that we have so we have a long sword we have an iron sword we also have a small potion okay here we'll just load in the small potion make sure that this is correct we go iron sword here we go we load in all these items okay uh we'll delete that there we go so now we have our items globally accessible now what we can do is actually one more thing we'll create is a gold variable here I'll just default this to 100 uh this will be for a little later but we'll just add it now for why not okay so now let's head back to our inventory main here and this is where I'm going to start adding my inventory items first I'm going to export a variable called inventory size and equal to 24 I'm going to on ready variable grid and I'm going to get a node grid this will just allow me to access the grid inventory a little faster now what I'm going to do here is I'm going to for I in range of our inventory size so I want to Loop 24 times every time I do I'm going to create a new slot now every time I create this new slot though I need to initialize it because if you remember we created an initialize function so in it and then we're going to pass through item data. type main we're going to initialize every single inventory uh to Main and then we're going to give it a size of 32x 32 then I'm going to get my grid and then add the child there now that's it so now if I hit play I should be able to just hit play and here is my inventory now this obviously isn't perfect because I need to now head back to my inventory grid here and go to columns and search either do four or six the four would give you a 4X six and six would give you well a 6x4 right so it's up to you now let's play one more time and now here we go so I kind of think I'll do a 6x4 instead I think that might look a little nicer I'll kind of move this right here and now we can start um we can actually delete this guy I'll add it a little later but for now let's hit play one more time and now we have our items now the issue is we need to now add items so to add an item we'll create a new function called add item this will pass through the item name as a string and will return void so what to to do what we need to do sorry is create a new inventory item we say inventory item. new we initialize this item so we'll in it we'll say initialize with the game. items items that we just globalized we'll call in the item name okay so the game is not Global because I haven't globalized it let's head to our project settings go to autoload and we need to autoload our script so let's add it and this has enabled our Global variable you can even see global variable and if we close this head back to our script this will now be globalized all right so sometimes you still have an error but that's okay it'll go away eventually now what we can do there you go see it's gone away already so now what we can do is check to see if the item is stackable the reason is because if this item is stackable there's something else we need to do now if it's not stackable the answer is actually quite easy all we need to do is for I in the inventory size and you can probably guess why we're doing this we need to find an empty slot If an item is not stackable like a sword and I want to put it in my inventory well I need to find an empty inventory slot to put it in so this is actually quite easy all I'll do is for Loop through the inventory and then I'll check to see if the grid. getchild child I and get child count of that child is equal to zero if it is that means the inventory uh or that slot specifically is empty so what I can do is say grid. getchild I do addchild item now if I do find it I will just break and no longer need to continue looping through my inventory now here it's a little more complicated because now I need to find if the item is stackable I need to First find if I have this item or not so similarly I will for Loop through the inventory first then I will check to see I'll just copy this right here I'll check to see another way we can do this is to see if it's greater than zero that means there is an inventory uh in that slot so if there is an item right or if the child count is greater than zero that means there is an item in that said slot now if there is an item well you can probably guess what I want to do is now uh see if that item is equal to the item I'm trying to add so here what I can do is check to see if the grid. get child i. getet child zero this is the uh data and we'll check to see if the item. DAT is equal to that we'll see if the data is equal to the item data meaning it's just the same item right now if it is then that means we found our item in our inventory so what we'll do is we'll update the counter then we'll update oops update the label counter now at this point this is where I don't actually need to add child this is I just need to do this I just need to update the counter and update the label so to do this I will just get grid here I'll just get all this copy this and then dot data and then count plus equals 1 next I can copy paste it again but instead of child I'll get child one more time because this is my label so now I have access to my label I'll edit the text now I can just make it equal to uh the item I'll copy this part right here I'll get the string of this I'll copy the count into the text now once I do that what I'll do is I'll go to the next line here I will just break if I this means I have found our item and I've just added it now what I can do here is add an lse statement and I will add the item if I can't find it if I can't find the item I will simply add the item right that means I don't have it and then here I can break again okay so now that we've created our ad item function we can just add an item and then we can say long sword we can add an item small potion now do make sure that the name here has to be the same as this so here it has to be capital S maybe I'll just make sure that these are all the same small potion Etc we'll hit close we'll hit play and now you can see I've added my items and I should be able to drag and drop them okay cool so this is very neat now the question is what if I want to use this item specifically the misk item what if I want to right click and use this and obviously okay you can also see here when I hover it you see the description which is very cool so okay now let's head into our um inventory slot I believe yeah so this is where we will actually be checking for equipment we'll be also be able to use the equipment let's take a look at how we'll do that all right so back in our inventory slot here what we're going to do is we're going to do our gii input first so this is to use a misk item so to do this we'll check the event first we want to check to see if the event is an input event Mouse button if we're clicking and I now want to check what sort of clicking we're doing well what I can do here is I can check to see the button Index this is to check if I'm clicking left or right clicking or middle click technically but here I'm going to check for right click specifically now if you want left click I believe it's zero if you want middle click I think it's one but don't putote me on that I might be wrong uh here we can say event and event button mask is equal to zero this button mask will check to see if I'm clicking up or down this will be like it's kind of like a release or press down right so here this is uh release so now if I am left right clicking and I'm releasing my button then I will say get child count greater than zero oops greater than Z then that means there's an item in that slot that I'm clicking in if the get child get filed zero is data. type is an item data. type. MK that means it's a miscellaneous item and I want to use it so to use it what I'll do is I'll say game dot heal player so this is a functional call with the uh game dot or sorry not game dot we'll get the child hero do data. item help here I'm going to use the item Health to heal myself now this function I need to create otherwise I'll airor so let's go to game and create this function and for now we'll just pass and here I need to pass through uh Health this will be an INT we'll pass through at health and we'll return void I believe the moment okay so now that we have that function hopefully we don't error next we will get child zero we want to update the count so to do this we say data. count minus equals 1 because we're using one right next I want to update the counter the label to do that we can say get child. get child Z again text is equal to the new data I'll just copy paste this string of that data and then after that I want to check to see if this data count is less than or equal to zero if it is that means I mean I'm out of items right so now oop now I want to get child dot do free because this means that the item I'm using is all used up right get child zero there we go there we go this is our usable item so in fact we can actually test this out by hitting play and here we should be able to right click and use our item now of course nothing happens because we haven't used or implemented our deal functionality yet but we'll do that a little later okay next for the equipment what we'll do is actually not too hard here what we'll say is if get child count get Childs child count is greater than zero that means we have an item in this slot if we do we'll get the item we'll just assign it a variable by saying get child zero we will match the type right so the type in this slot itself to the item that is equipped we'll match the type the item that's equipped so we'll say item data. type weapon weapon here we go if it is a weapon then what I want to do is I want to fill in the game. right hand equipped with the item. DAT this will whoops dat there we go so this will fill in my game right hand with the item that is equipped so essentially if I have this item or if this inventory slot is a equipment item right or an equipment slot and I have this certain type of data inside of it then I'm going to fill in my right hand equipped with this data now alternatively we might have uh now this is kind of up to you so you can start implementing the body the right hand left hand Etc I'm only going to do the weapon and the body um so here in the body. equipped I will say body equipped item data now otherwise so this is almost like saying else if it's else what I'm going to do here is I'm going to load in the AUD equipped and the right hand data with the default stats so this is going to be my default stats here I have default SW so this one should actually be on the next one s right let's load this for our right hand and then this one I'm going to load in the default armor so here we now have our default armor and our default sword being equipped if I don't have this equipped or this equipped and this will work for each slot independently so now if I close this we now need to set up our inventory equipment stuff so let's take a look at how we can do that it's actually not too hard all I need to do is search up inventory slot add my inventory slot here and now I need to just assign each one of these what I can do here is I can zoom in here a little bit I can duplicate this a few times and now now I can rename this to what I need so first I'll rename one to right hand I'll rename this to body I'll rename this to head I'll rename this to legs and this to feet and this one we won't need so I'll delete that now I can start moving everything around as I want it this is my head this is my right hand so I'll put that over here these are my legs so I'll put that right there this is my body so I'll put that there my head and this is my right hand but here's my kind of equipment system now if I hit play uh actually sorry before we do that let's just close one more time and now we need to make sure that the type is all correct so here this is a weapon so that's correct the body type I need to select body the head I need to select uh head here we go the legs I need to select legs and feet I need to select feet all right so now if I hit play I should be able to go into my inventory and drag this into my weapon system but not my body or head now if I drop this in you will see in my remote section in my game you will now see the right hand is equipped with the long sword. tress however if I head back to my game and unequip this you will see a returns to the default sword so that is our equipment system our equipment system now essentially works and inside of this we have all these stats that I might need okay now in the next part we'll take a look at how we can continue our gii system because here I don't believe we're completely finished so we'll kind of continue our whole gii system all right next we're going to start filling in our profile because right now if I hit play and I head into my system here go to profile nothing's here and I go back to inventory here's my inventory equip stuff but I want to be able to see my stats now okay what we'll do is we will create our profile by right clicking our profile Save branch as seen and we can save it in our VII group save we'll head into our profile here I will add a script I'll save the script in my scripts folder player GUI open create I will uh now we want to add some things in this to all I'm going to do is add a label now this label I'm just going to test some things this is a test text yeah and now I can just dag this out and I want to just put this where it would be in my profile here if I actually hit uh save I'm going to close my inventory go to my gu so this is where the text will show here I'm going to Center the text and I'll just kind of drag it where I would want it to be in my GUI and there we go of course alternatively you could just use this profile and move this around uh but I'm just going to do it in my profile it's really up to you now here I'm going to rename this to Stats label and into my script here and now I'm going to pop this out and we're going to create a process function now I'm just going to say this uh even though I probably shouldn't this is not good practice to do you don't want to just add everything into a process function you would ideally want to update the text every time you hit Escape so ideally you would have a function instead that updates the text and then you would call it through here whenever you hit play so um this is not good practice but I'm just going to do it anyways because it's quick and easy what we'll do is we'll say get node stats label we'll edit the text equal to a string uh not Delta we'll hit uh enter we'll say player healths player health is space I will put in uh percent s and now I'm going to hit enter copy this and paste it a few times this I'm going to remove or replace with attack this is going to be defense this is going to be level and this is going to be XP now these obviously don't exist yet or some of these don't so let's head back to our game script here and let's start adding in some of the things that we'll need eventually so here I'm going to create a variable called current XP this will be an integer equal to zero next I'm going to have a variable XP to Next Level as an INT be equal to 100 by default we'll have our player level as an INT equal to one by default now lastly we have another thing called shopping this will be a Boolean that we'll use a little later so don't worry too much about this when we add our shop we'll you'll see why we need this okay let's head back to our profile and now I need to fill in the information so let's uh hit percent array and now we want to fill in the game. player L we want to add our game uh do player damage right for the attack we want the game. player defense and we want the game. player uh level then came do current XP and then game dot XP to Next Level now back over here we're actually going to have to add a flash percent so this will just show us how much xp we need to get to the next level let's hit close and see if this works so let's hit play and immediately should air if we don't okay so cool it works here we go now we can go in and out now if I equip something you will not see anything happen and the reason is because we don't actually update the player damage uh depending on where we need it to be so the player damage think of the player damage and all that stuff as the total player damage now we want to have a total that we add to it um with our stats so let's take a look at how we can do that right so in our script here we're going to head over to our game script and pop this out and at the very bottom we're going to actually in between this we'll create a function process and in here what I'm going to do is I'm going to say player damage is equal to right hand equipped do item damage and this is now where you would add other things so for example I can add the body equipped do item damage obviously my body equi doesn't have damage but we'll change it in just a second to test this out now here I can change the item defense similarly but the item defense here I'm going to take item defense very same thing for the body equipped and now this will essentially give me a total of well all my player damage and all my player defense let's take a look at how this might work let's go to my iron well I should probably add a body so let's say iron body let's go into this iron body here change this to iron body we will scroll up find some armor uh we'll go over here here we go we'll change the type to body we'll change the defense to five as well and this is an iron body armor I'm going to need to load this in my game script so over here I will Control Paste body uh iron armor and then I need to load the body iron body there we go all right so that's our added now let's add this in my main uh slot here here I'm just going to add it so uh I'll say iron body we'll add this item we'll hit play and now when I hit Escape okay so here we have an error because iron body doesn't exist so here I said iron armor so let say iron body play one more time here if I uh sorry go to here pop this in pop this in and if we can go to profile and we can see the t is two which is doesn't seem right so let's go to over here okay so here we can see that the long sword is equipped and the iron body is equipped so that's correct now here if we go into this it says item defense five and here we have zero we should have a total of five so this is not being updated which is weird now now we also have the player Health which is correct the attack should be okay so the attack should be 3 + 5 so it should be eight but it's two let's take a look at why this is not working here we have player damage is equal to right hand equipped do item damage this doesn't seem to be working so okay I see the problem the problem is the this script is not being updated so actually if I hit escape and then try it again you'll see that it works but what was happening is the script the game script is being paused because I'm in pausing my screen so what I want to do is on function ready I'm going to say self. process mode is equal to mode process always okay this will allow my script to always run even when my game is paused so now when I hit play now it should work properly so hit play pop this in and you can see the stats being changed okay now um what we want to do now is before we kind of head to the next part is I want to fix our GUI so let's go into our GUI here and in the ready function I want to hide a few things so first I'm going to get node um I'm going to say get node profile here we go this guy and I'll hide this by default so by default I will have the Prof uh the inventory selected so to do that as well I will also disable the uh inventory button by default so this kind of gives it that effect that I'm by default looking into my uh inventory slot okay so now what we can do is we'll also get node um we will get the HP bar and we'll say. max value is equal to game. layer Max Health now we'll also start implementing the health in just a minute but this will just allow us to fill in the HP bar okay so let's hit play to double check this works all right there we go we can see our inventory slot is selected I can unselect or whatever and there we go now everything works pretty nicely all right okay next we want want to start doing a bit of weird stuff because we want to implement the health and stuff but we also want to start Implement damage now let's close our GUI close our profile now we'll head back to our player in our script here and if you recall in our uh hit thing we here we we're doing two but now I want to say game do player damage now this will do the amount of damage I should be doing now at the very top we can delete the health at the very bottom we can now go over here and change this to game. player Health now here's the thing though is I want to now also apply the defense that I you know added right so how do I do that well it's kind of up to you in this sense that you can kind of create your own calculations whether or not you want to uh have like some weird calculations I'm going to do a very flat damage what I'm going to do here is I'm going to say or check to see um I'm going to create a damage uh done this is going to be equal to damage minus the game. player defense and then I'm going to check to see if Damage Done is greater than zero then this is where I will actually do damage okay now uh here the Damage Done though will be reduced here this is the amount of damage I will do to my health only if it's greater than zero uh now here I want to check to see if it's less than or equal to zero if it is then we die just the same way we just did now I'm only going to get hit though if this goes off so here I can say just hit is equal to True okay now that is pretty much it um here is our damage done now what else do we want to do we also want to uh Implement our health system our health system player to do this we're going to create a custom signal now custom signals are pretty cool let me show you an example first before we head into this so if I create a new node here create a random node it doesn't really matter I'll make a builin script and I'm going to create before I do that actually let me show you the signals so here on the top right in the node section I select the node you will see a bunch of signals now the question is what if I want my own signal not too hard I can create a signal called custom signal it's save uh I don't have to save the scene because now we see it here custom signal and this is how we create a custom signal now if I want to pass through some sort of variable you can now see that it says damage variant of course I can uh initialize it to an INT and there we go now the damage is an INT so this is how I create a custom signal let me close this going to discard it that was just an example now in my game script I'm going to create a global variable called Health changed this is going to pass through a damage variable I'm going to have one more for later called level up and this is going to be a level up signal now in order to make these work we're going to go to the bottom we're going to in our heal player I'm going to say self. emit signal Health changed when I emit the signal I'm going to pass through the negative amount the reason is because this is to heal the player now I'm going to have another function um let me actually let's finish this one first first and then we'll do the other one here what I'll say is player Health Plus equals okay so here I actually need to change this to amount there player Health Plus equal amount and then I'll check to see if the player health is greater than the player max Health if it is I want to set the player Health to the max the reason we do this is well because I don't want to overheal right unless that is something you want to do but now what I'll do is I'm going to copy paste this function and rename this one to damage player and this will say will emit the signal damage changed here we'll do the same thing the amount now here I'm going to remove this because here I'm going to be subtracting damage okay so these are our functions that we want to add now the question is well what about the Damage Done or damage player sorry well uh in our player script we can go to player and we want to uh damage the player if uh here we go in the hit function here we go so instead of Damage Done Right here where we subtract the Damage Done Now I can just all the function that I just created called damage ler damage layer and pass through damage done now the reason we're doing all this by the way is specifically for our GUI so let's open our GUI one more time let's open this guy up and now this is where I want to uh create a new function on the bottom called on node Health changed we're going to pass through a damage as a int pass through an INT and this is going to be a function where we tween the HP bar so we're going to Tween so TW we need to create a tween we will twe Dot uh between property okay so there we go uh the thing that we're going to TW is going to be the HP bar which we don't have so let's actually on ready variable this at the top we'll say on ready variable HP bar is equal to get node now I can call the HP bar here and at the bottom we can call the HP bar we can twe the value the value I'll set it to HP bar do value minus the damage done and we'll do this over a period of2 seconds okay now what we want to do is at the very top we want to connect the signal to do this we will say variable game node is equal to get node game. get path this will get us the to the game script globally now we have access to the game as a variable now what we'll do the reason we do this is because now I want to say game. node do elf changed dot connect to callable and here we'll say self then we will copy this new thing that we just created and pass it as a string and this will pass through the signal every time I change my health every time this signal is uh shot at basically through the game we will connect it here and we'll pick it up we'll pick up that signal through this script and then every time I lose damage or gain health or whatever it will change my HP bar now here when I hit play I should be able to take damage now and it doesn't seem to be updated so let's take a look at What's happen happening let's go to my inspector here player health is one so it should have changed so something is going on something not good is going on so let's take a look the damage player is not working so let's take a look at if I'm actually damaging the player here what we can do to kind of debug this in a sense I will well here actually I should be adding the amount Maybe that's why so here let's try one more time okay there we go so now it should be working functionally all right there we go and we lost all our health game over and there we go so now actually let's try the health uh potion as well so let me just lose damage okay so I lost some health let me right click and you can see here that I added some health now it was pretty immediate so let's take a look as to why that is here heal player their amount amount negative okay uh it should be working um but one thing we're going to add here is a background for our image because this looks nice but we want to make it a little better now the reason I didn't add a image for this before for from our texture is let's find our UI big piece here drag this in and I'm going to go to region enable and edit region and now I can select the health bar that I want and I will select this one this is the health bar I'm going to select close and now I can move this in put this behind my HP bar and just drag it to be a little bigger let me fill this in 100 so I know how much it should have here I can just start dragging this guy to be a little bigger like so and then I can turn off the grid snap if I need and now here I can just drag this in to fit the HP bar like so I'll just drag it in like this maybe all the way right there and right there I believe okay so there we go there's our HQ bar it's not perfect but should now look a little nicer visually now if we hit play I lose some health now it actually looks like I lost some health and if I right click okay so it does animate it was just really quick there we go okay so there there's our system there's quite a bit and it looks quite nice so let's take a look at what we're going to do next right next now that we have a nice system here and everything is working relatively well we're now going to implement a way to drop items from our monster right now I can walk up to him kill him uh hopefully without dying well I died kind of tried to bug out the game there uh let's actually equip some stuff see if I can kill him okay there we go one shot him but he doesn't drop anything so we want to make a way so that he drops stuff and I can pick it up or whatever now of course you could just have the monster die and then drop them right away but I want a more visual effect so let's create an area 3D as our base here now what I'm going to do is I'm going to search up some items now the first one I'm going to have is a sword let's find a sword and here in the K kit we can find some swords now it's kind of up to you um you can use the twohanded you can use this um whatever you'd like I'm going to put put this guy in then there's also a body armor now to get the armor don't think we actually have it so we what we'll have to do is we're going to cheat a little bit and we're going to find the Knight drag him in we're going to make it local and then we're going to steal his uht body armor there we go he Knight body going to steal this guy all right so let's make this local as well we'll drag this in and we'll rename this to sword rename this to body and one more item we'll have is a beer we search a beer a beer other one was called don't remember what was called but let's go into the fbx here and we can probably just find it oh mug here we go so mug full we'll make this local and I'll rename this to potion I'll use this as the potion obviously I don't have a mesh of a a potion but this is going to work fine now I'm going to reset everything to 00 here we go set everything to Z now the ocean I'm just going to move it up a little bit that way it doesn't go into the floor now I'm going to add a new uh thing here called Collision shape 3D this is going to be the Collision that I use to pick up our item I'll make this little higher here I'll rename this to item object I'll save this into my scenes I'll save this into my maybe I'll make a new object here or actually I'll just save it right here here as we're going to have this be slightly Dynamic now we'll add a new script We'll add this as nonb builtin script or script folder uh player UI inventory We'll add it here create I will delete this code and I'm just going to connect our body enters uh node here I'll pop this out now what I want to do is a few things first let's do the pickup the pickup is not too hard all I need to do is check to see if it's in the group Player right because hopefully it's oops a player that's picking up this item not a monster now what we'll do here is I'm going to match RNG now the reason we're doing this is because I'm going to randomize the item so I'm going to create a new variable called RNG outside of this if it's zero what I'll do I'll get node and I want to add the item uh long sword probably so what we'll do is we need to get access to our monster or to our inventory now to do this we need to First figure out how am I going to do this pathing so I'm going to close this go to level one and I'm going to create a few new nodes here node 3DS I'm going to duplicate this a few times I'm going to rename this to monsters monsters going to rename this one to code projectiles going to rename this one to objects and this one to items so the objects will be things like torches and kind of environmental things now the items is where I'm going to add my item so what I'll do here I'm going to add my item object into my scene make sure it's a child of this make sure I save this so I can see the script here now I will drag in my GUI this will give me the path to my GUI I can copy paste is here but now we're not done because now what we need to do is get the path of the inventory right so back to my item object I need to say slash container slash inventory and now I have access to my inventory script which in here I have the add item now just remember in order to add an item I need to make sure that the name is the right name in here I can say long sword but it has to be the same one okay now we'll head back to the script and what we'll do is we'll match uh the other numbers so here this actually has to be on the next line we'll do one uh we'll copy paste this one more time two copy paste and then outside of this I'm going to say self. hiide actually sorry I'm going to say self. VI three for now there we go so no matter what I pick up obviously I should self. Q free outside of the match function sorry now here I'm going to change these so one will be the small potion small potion the third one we can make it the the iron body copy paste that iron body and now what I want to do is I want to make my RNG work though so to do this I will make sure this is an INT I will say ready function uh what we'll do is we will say RNG is equal to Randy range from 0 to2 we'll get node ocean oops do hiide we get node sword do hiide we're just hiding all the uh meshes right now the body do hiide then what I'm going to do is I'm going to uh match the RNG just like I did before I'll match zero so zero should be the sword so I'll get the sword and show it if it's one that should be the small potion so I'll get the small potion I'll hide this or sorry I'll show this if it's two that means it's the body it is the body I'll show the body and that should be it now this is pretty much General uh our general object now one thing I want to do is I want to kind of create a floating effect with our object so to do this what I'll do is or not a floating effect sorry a randomized spawning position so to do this I'll create a tween that's not a twe create TW I'll say variable RNG position this is going to be a vector 3 we're going to randomize the X range from1 to one we're going to randomize the Z we're going to say Randy range from one to one and the Y needs to be one so by default the Y needs to be one otherwise if it's zero it'll be in the floor if it's two it'll be too high Etc right now we can tween the property of self we're going to twe the position to position plus plus the RNG position that I just made over a time of 0.5 this has to be side of a string like so so there we go all right so now I'll close this I'll head into my monster so let's find our monster here I'll pop this into the monsters tab go over here and now what I can do is I can load the uh item object that I just created so to do that what I'll do is at the very top I will maybe right here I'll say on ready variable item object be is equal to preload item object and now what I want to do is I want to find uh where I die so where do I die well in my death function so in the death function right here this is where I'm going to add this so to do this I will randomize the object by saying RNG Randy uh Randy range and essentially this is going to be a random number between two and four is going to be how many items I spawn we'll for loop I in RNG we'll create the item object M as the item object scene do instantiated this is going to create a new object for us let me actually pop this out so it's a bit easier to see we get access to this temp you will say. global position equal to self. globble position and then all we need to do is get access to the items tab so this guy right here I need to get access to this so I I'll remove that and say get node items so I'll make sure the path is correct and then I will just add the child so I'm going to add this guy by saying ADD child add item object temp and that's pretty much it now one more thing since we're here we'll also gain XP here so I'm going to add a function called gain XP and here I'll just say 100 now here I need to create this in my game uh script we will create it but for now we'll just uh pass we'll say gain XP uh amount and we'll pass through an INT and we'll return void and pass for now now let's close our script here let's hit play and we should be able to going to equip my items here so I can onot him we should be able to kill him and he spawns some items now we can pick these items up and it should add it to my inventory all right there we go we even got some potions we got some armor should be able to switch it out Etc so obviously if you have a different item it would visually make more sense but since these items are the same you don't really notice a difference but yeah so that's pretty much it for the item object we've now also created it so we can spawn some items so let's delete this guy we don't need it so in the next part we'll take a look at how we can create our shop all right so let's move into our shop now to start our shop we're going to create a new scene called canvas item or layer we're going to go to level one open up our GUI as this is kind of going to be where our shop is so let's make sure we rename this first to shop I'll save this in my leri save it in here in here I will just drag in the shop that I just created and now head back to my shop sure we're in a 2d scene of course and now I want to start filling in the things I need for my shop let's fill in all the nodes that we'll need so first I'm going to add a panel I'm going to add a Rd painter going to add a control node and this control node will actually contain two labels so let's create a label duplicate it and then add a Sprite uh sorry not Sprite 3D just a regular Sprite 3D then our shop we will add two buttons one is going to be our buy button we name this to buy we'll duplicate this we name this to buy button and this is going to be close button so close the shop Okay so let's rename this to close and let's start organizing things let's make our panel a little bigger here I'll put it same size as I do for everything I'll take our clothes let me actually lock in the panel by clicking the lock button right there take our close button I'll move it to the bottom right or bottom right up right whatever you want I'll move my buy button kind of right there maybe in the middle I'll take my control node here here and I'm going to uh take my label and I'm just going to move everything uh to where I want it to be so this is going to be our item name this is going to be the item description and this is going to be the item uh Sprite this is going to be the item info node here I'm going to make sure that this is right around here so here I can give it a default name by like sword I'll Center everything going to take the theme override make it a little bit bigger be 40 41 whatever you'd like and I'll just kind of Center it like this this is where my item will show the item description I'm going to move this down here where the description will go say this is a item description blah blah blah and then I can turn on the auto wrap word smart can Center everything and I'll leave the text size the same the item Sprite what I'm going to do here is I'm going to search up for a PNG file find my random item and I'm going to scale it to be as big as I want it to be I'm going to try to keep it consistent so here maybe I'll do 13 by3 and just leave it around there maybe I'll move that down move this to the right and just readjust things as how you want it to be the grid container I'm going to rename it to shop items I'll move this to the right hand side right over here this is where all my shop items will appear okay now I want to fill this in and so to fill this in I need to First have a script let's add a shop script we put this in our scripts folder player GUI and open create now in here we're going to have a few things so to get started what we're going to do is we're going to create a current item Cent item like so and this is going to be an item data now before we continue we need to now create our uh packed scene that is going to represent our item slot kind of like we did for our inventory but this time we're going to create it a a bit more manually so to do this we'll create a new scene here we will create a panel as the default zoom in we will add uh we can just drag in one of these guys we can make the scale three move this here move the panel to be a little bigger here move this in the middle the panel a little bigger once more we can make the layout to be 64x 64 and we can move this item in the middle and then lastly we can add a button I'm going to cheat a little bit because what I'm going to do I'm going to take this button take its theme I'm going to take it theme override go to style and I'm going to go to press empty box I'm going to go to visibility self modulate and make it invisible and here um going actually scale it so going to remove the theme I don't really care about the theme I'm just going to scale it so I'm going to cheat a little bit and make this button a bit smaller on the x axis I'll make this point 75 and there we go there we have our uh button so this will act as our shop button I'm going to save this as a shop item save it in here I'm going to rename this to shop item I can rename this to image I'll add a script this guy add a script to the scripts folder player DUI uh we'll put in here now in this script it's not too difficult what we'll do is I'll just create and I'll pop this out and I'll just close other tabs for now so I have it a bit more organized I'm going to create a variable item info this is going to be a item data and then I'm going to close this one real quick and connect the Pressed button if I press this all I need to do is fill in information in my shop so what I'm going to do here is I'm going to click a item and then fill in this information okay to do that all I'm going to do I'm going to say uh go to our item shop here to our press button I'll say get node get parent get parent and we'll say do curent item is equal to item info next I will say get node uh well actually just copy this right here but instead of this I'm going to say get the item info and I'm going to show this and this this thing right here is this guy so this is going to let us show or hide this so if I do click something obviously I want to show it right I want to show that item that is being presented in my shop next I'm just going to copy paste this a few times I'll change this or I'm going to add to it I'm going to say item name is going to be equal to the text is going to be equal to the item info do item name the next one is going to be the item description that one is going to be a text as well for this one I can actually what we'll do is I'm going to close my script I'm going to hit control shift F I'm going to find the thing that says stats and in here I'm just going to copy this so here I'll just copy from stats and after that go back to my shop item it pop this out and paste this but here I need to make sure that there's a string here I'm just going to show the stats the damage defense and health here I don't need the item name I don't need the description I could add the description actually so here why don't I add the percent s here for the description and then new line with stats we'll have the item damage item defense and item Health lastly we'll do the uh this is actually an invalid path so item info item description text is equal to that uh here it's saying data is not a thing which makes sense because here I have item info instead of data make sure to replace the data with item info and lastly uh the item info here this one is going to be the item Sprite and hopefully you can guess how we do this all we need to do is set the texture for this guy equal to the item info. item texture there we go now we filled in the information with uh the sword right so now what we need to do is actually create those items though we need to create those shop items that I just created to do that all we need to do is preload at shop item so I'll say on ready variable shop item scene it's a this is a packed scene this is going to be equal to a preload um shop item we'll preload that script that I just made going to save we go to function ready I'll for loop I in game items so I'm going to for Loop through all the items I have in my game that exist I'll say if I uh don't need that we'll say variable shop item temp is equal to shop item scene. instantiate we want to create this scene and then start adding them so before we start adding them or we'll just add it and then see what we need to do before that next we'll get our shop items which is going to be our grid and we'll just add child item Temp and before we add them we need to fill in the information which is not too hard because we're for looping here so we can just say this item info is equal to game do items at position I next we can just get the item temp. get node uh image and then fill in the texture for that then make it equal to game. items at I the item texture just double check that's right so item texture we're filling in the shop item texture so this guy right here the image let's actually make sure I said that right yes image okay and lastly what we'll do is I'm going to get in the ready function I'm going to get this guy not this guy actually I'm going to get the item info and hide it I don't want to show an item in here unless I'm clicking an item so let's hit play and see what we get all right so we get an error right away um it is because item texture okay so saying the key item texture doesn't exist so let's take a look in our resource for item data let's find our inventory so the item data called item texture so it should be working something is going on let's just make sure I copy paste it right texture is equal to game texture okay I see so we can't be filling it in with anything empty so let me make sure here if I hit play okay let me figure out what's going on and I'll be right back okay so in case you were getting that error or not um generally those kind of errors are kind of annoying uh and what I ended up just doing is reloading the project and sometimes the resources kind of don't load fully unless you restart the project so just reload the project and make sure that all the textures have a texture otherwise you might get some weird errors so let's continue um now if I hit play you will see that I have my shop filled with the items that I have now obviously the shop isn't functioning fully because I need to actually make this work a bit nicer right so let's just continue and we'll kind of implement this a bit so first let's make sure our buy is connected and our close so here what we're going to do for the close is actually quite easy just pop this out all I need to do is get tree paused is equal to false we'll say oops that's not false we'll say game. shopping is equal to false I'm going to say input input Dot Mouse mode is equal to input mous mode captured self. hiide this will basically close my shop now on the buy this is actually pretty easy all I need to do is say get node go up one I'm going to get container inventory and then add child now at this point the child that we want to add is the string of the current item do item name now here's where things might get a bit iffy if the item name that I'm trying to add is different than the like child then this might not work okay that doesn't make oh add uh item there we go add item and then string so what I mean by that is in my iron body for example this needs to be the same thing as my game here it says iron body and it's the same here same thing for the iron sword it needs to be the exact same long sword uh so this one's called iron sword so let's change that to long sword and small potion small potion needs to be capitalized okay everything has to be the exact same otherwise it won't work with this right okay now to give this uh go in our 3D scene here we're going to add a AI or a kind of NPC guy this NPC is going to allow us to interact with our shop okay so to do this we'll create a new scene we'll create an area 3D we'll add a adventure just a random guy you can go up to the top and find a adventure we can find a maybe a mage pop this guy in make it local and I'll hide the Spellbook open onehanded wand agage hat I'll show that and I'll show the rest now for the animation player I'll just play the idle by default I'll play this like so and then Loop this okay so I can't Loop this so uh what I'll do is I'll let's add a collision first add a collision shape hit play We'll add a c we're not going to add a capsule we're going to add a circle here or maybe a cylinder make this a little higher a little bigger we'll save this in our scene here we'll save it in here why not and we'll save this as NPC Mage now what we can do is head over to level one and find our NPC I I called it npv so let's rename it new npt all right let's pop this guy in put him right behind us and I'll just rename him to NPC We'll add script to this guy go add a script the script I'm going to add it into the folder we'll just add it right here create and what I want to do is connect the uh body entered and you might imagine we need to check to see if this body is in group layer if it is what we'll do is we will uh do the things that we need to do so what do we need to do well first I need to say game. shopping is equal to True next I'm going to pause the scene and get paused or get free paused is equal to True next I'll get node go up one go up one ui/ shop and then show the shop next I'm going to make sure my input Mouse mode is equal to um visible right so I want to be able to show my mouse here now what I'm going to do because I couldn't Loop this animation all I'm going to do is I'm going to go to animation finished connect this and every time that animation finishes I'll just say get this animation player then play the idle animation again it has to be the same name as this right now that's pretty much it this is our NPC see let's hit save let's hit play now we should be able to test our game here okay so let's let's just go okay let's let's go to our shop we'll go into here and we'll say self hide hit play all right now that our shop is hidden we can go into here and see that we get an error okay so it's saying that this path doesn't exist and that is because this guy needs to be in the objects tab let's H play one more time over here okay here we go here's our shop I should be able to now interact with it now oddly enough I might actually not be able to uh seemly enough I can buy stuff but just in case I'm going to go over here and set the process to all on the shop that way I can interact with it hit play one more time and just make sure that I can actually buy something so here I don't have any items let's buy this iron sword and now you can see I have an iron sword and I can even use it and hover it and it says iron sword and it has the stats that I need here I should be able to replace this with the other item and it has uh I guess the same stat so let's actually change this to 10 and the iron sword should be five okay let's double test one more time here we go okay so here is our iron sword this is our long sword it says stat 10 damage so that's good let's buy it and here we go here's our sword and this one should do 10 damage whereas if I buy the other one so this one this one is only five okay cool let's just make sure it works in the profile yep all right there we go so there we go we can see it works all right so that's our shop that's pretty good all right so in the next part we'll Implement our level up system all right the last thing we need to do before we head into the environmental things is the level up system this one is not too difficult as we already have a lot of things for it already set up let's head over to our script go to our game and pop this out now if you recall we created this level up signal but we're not using it so let's figure out if we can do something with it now to gain XP it's really easy right all we need to do is take our current XP and add the XP amount uh we'll change we'll say XP amount like this and we will change the amount to XP amount like that now what we need to do here is say while press enter a few times while the current Uh current XP is greater than or equal to X P to the next level then we're going to start leveling up so the first thing we'll do is well we'll level up we'll level up we will take our player health max and add the player level time 10 so that's just like one example of a stat adjustment essentially we can full heal ourself by saying player health is equal to player health max we can take now take our current XP and subtract the amount of XP I I was supposed to add or I can subtract the XP to Next Level now the advantage of this is if I want to level up more than once while I'm kind of doing this and this is how we do it inside of a while loop now I'm going to take my XP to the next level and I'm going to round it to the XP to the next level time 1.3 and then I'm going to take it again and then I'm going to multiply it multiply Itself by the power of 1.2 with the player level minus one this is kind of the previous level because over here I already added it so this is the previous level okay so this kind of gives me an exponential growth for my XP so now what I can do the last thing that we will add but we're not going to use just yet is we're going to emit the signal level up so that signal that we created we're going to emit it but we're not going to use it just yet because uh this is kind of where we'll go into our uh bfx a little later so we're going to actually Implement um some of the logic for it specifically our level up animation so um we can connect it right now so let's actually do that let's head over to our level one go to our player we will go to the script open this up and similarly to before when we connected our signal I'm going to just uh kind of Pop all these down so that way I can see my code a little nicer now in my ready function if you remember we need to get access to the node the game node we can do that by saying game node is equal to get node game G game. get path then we can to say game node do level up that signal that we created connect followable we will connect it to the self self and then we'll connect it to a signal that we can create we can say on level up uh level up like this then of course we need to put this in a string and that's pretty much it now we need to create this function on the bottom and here we we go this is our function that we've created now this function will trigger uh when the signal is called right so here I can just print uh yeah let's print the game. player level just to make sure this works let's hit close here and let's hit play and now if you remember we should be able to gain 100 XP when I kill the monster so let me just equip some things here and let's kill it and now we go to profile we should see level two and we see level one the reason it's one is because it's emitting the uh previous level basically so we'll need to it doesn't really matter because the signal is more so for an animation that will add later anyway so we don't really care about the level that's being printed we just care that this is being updated right here which it is and the XP is being updated which is perfect so um we're pretty much good to go and even see that the health is being increased so that is pretty much it for most of the logic in our game in next few sections we're going to be taking a look at our environmental things how we can make sure our environment looks good uh we're going to start playing around with our world environment again as you might have noticed we have been getting errors depending on whether or not set things up similarly to what I did but yeah so let's get started into the next part which is the Environmental section right the first thing we need to do is we need to actually fix our engine now what do I mean by that well on the top right we will see a compatibility now do make sure that you have it on forward plus I'm going to select forward plus and I'm going to save and restart right once you've launched the game again you might have noticed a few errors but don't worry just okay andore them and if you hit play you will immediately notice a very big difference scene you will already notice that the scene is very thick kind of just a very different environment okay now what we can do is head over to our EnV environment node we're going to enable the glow now as now we have the proper things that we'll need in here I'm going to turn on the normalized go to blend mode and select ad dative ad dative um and yeah so that's pretty much it for the glow and make sure the settings for all these are the same of course at this point remember you can always just adjust these accordingly to whatever you'd like make it thicker thinner whatever you'd like right so now uh that's pretty much it for the world environment now for the grid map I'm going to set the cell size over here four four and four now we can see here though that the air is under the ground so what I'll do is I will take my grid map and I could either pull this down or I can actually just go to level one and that is where I'll paint my ground here I'm going to go back to level zero and remove my ground by pressing delete to floor Z or sorry1 I will draw my floor here by control fill uh let's just make sure I'm doing it right in order to fill we should be saying uh well I actually actually select a thing so that would make sense so let's select a tile and fill in an area that I want there we go now I should be able to fill it in properly and now we have our ground it works the exact same but this just allows us to properly distance things now here's our issue is that when I start adding walls it's going to remove the floor I don't want that so what I'll do is I'm going to rename this grid to floor and I'll duplicate this and what I'm going to do is in my I'm going to make the floor invisible and delete make sure floor two is selected and delete this floor I'm going to rename this two walls and now I'll show the floor and now what I can do is start drawing on the wall section and of course we can make sure we're on1 and at this point we can start kind of going wherever I'd like so here what I'll do is I'll draw right here and I can just whoops select like this and contrl F and fill in a large wall and at this point I can just start be adjusting everything so in order to rotate this you just click s to rotate it so that way we can have it rotated to that way I want to rotate this wall this way I'll fill it in like this and at this point you can just start moving around the scene and just fill in uh the walls that you want keep those two walls and here we go I'll kind of do this together with you so at this point you can either skip or you know just kind of zoom in and do do yourself but I'm just going to keep doing this together so that way we don't skip any big steps here lastly we'll have that wall there and I'll just Wall go all the way and we can delete this wall and put a corner wall instead all right so there we go we have a fully encased dungeon here so what I'm going to do now is I'm going to put a wall right here so or I can just put it right there and fill in wall section in the middle like that I'll put a door kind of maybe right there and one right there then I can kind of just start doing whatever I'd like at this point now we do notice that there is this Gap so at this point you can either duplicate again which is actually what I'm going to do because this is a bit quicker here I'll just duplicate and start filling in the sections that I want and here of course it doesn't look perfect so this is where you would probably need to uh finish the mesh library and start adding in the walls that you might need if you search up wall you might be able to find the wall that you'll need um it might be it's probably one of these um I know it is one of these I have seen it it's just uh I don't have it complete so we're not going to do that in this series that's more of a level design um as we're just going to kind of continue this level so here we now have our level so we can just start drawing make sure I'm on the walls wall to I can just keep drawing whatever I like I'll just kind of draw out a few levels here or areas if that makes sense and I'll put in this guy maybe I'll put that like here and yeah so you can kind of fill in the rest of the level I'm going to now move my player over here to the kind of corner over here so this is the starting area now when I hit play we will see my level here is my level I can start running around and it's my Mage and my monster obviously the Mage will have to readjust to make sure he's on the floor so let's do that let's take our NPC uh and we'll drag him to the right side and we can just B him down and we'll maybe rotate him and of face the corner and we can make sure he's kind of looking like he's on the floor put him right there maybe floating a tiny bit now when I hit play one more time we can now walk up to him and he looks like he's standing there walk up to him interact with the shop close it and keep running around okay cool now what we'll do is I'm going to now head into or we're going to head into the torch section so we're going to take a look at how we can create a torch and add some lighting into our scene let's take a look at how we can do that okay so to get started with our torch I'm just going to close everything from the level right click close tabs to right make a new scene here and I'll create a uh node 3D as the base I'm going to search up TCH and find the lit torch actually sorry not the lit torch just the mounted torch here we go I'm going to reset this 0 make it local bring in the torch delete this guy I'll add two things an omn light and a GPU particles this is where all the magic will happen Okay so in this guy this is where we're going to actually add and uh start adjusting all the particles I'll try to go slow and we'll try to do as much as we can together to make this as pretty as possible so to start what we need to do is we need a draw pass and process material this is where we will add the draw pass so meaning let's actually just do this so if I go to path one I will add a ash plane where is that plane and now uh we want to or sorry not plane uh quad mesh where is that quad mesh there we go now you can see that we have this quad mesh here now it's not moving because there's no gravity there's no things being adjusted to it but that's okay first we're just G to make sure this guy is pretty and do it make it material wise what we want it to be so we'll go to the material we're going to select new standard material we'll go into this and now we can start coloring it to be what I want it to be we'll go to transparency I'm going to uh select the alpha make it transparent between uh the things just okay on that I'm going to go to blend and go to add and we'll just C okay uh you might have to restart your project if I keep getting that we'll do that a little later go to shade unshaded and then we will select the vertex color going to turn on the albo and we will go to Alo and now we will actually select the color we want now at this point you can do whatever you'd like I'm going to select kind of a dark orangish color so maybe kind of right around here maybe a bright orange kind of like this um something like that okay so kind of pick whatever you'd like all right so now for the billboard on the bottom we'll go to mode article billboard okay and then we're going to turn on the scale keep scale on okay I'm getting annoyed by this I'm just going to restart my project and make sure that airor doesn't pop up I'll be right back all right so I've restarted my project and no more errors okay let's scroll up a little bit we're going to go to the process material now this is where the magic will happen this is where I'm going to actually essentially start of adding the particles well here we'll go to new particle material and you can see right away when I add this it's already doing something now what we want to do first is we want to uh adjust certain things the first thing we're going to do is go into spawn we're going to go into the uh angle and we're going to change this to 360 for the Max and that's it now you can see that it is rotating kind of randomly next we'll go into the velocity right under it we will go into the direction we'll set this to zero the Z we set it to 042 five and then the spread I'm going to set it to zero type in zero and the initial velocity we will set the max to three and now we have a bit more of a jump for our particles here all right so that's our velocity next next we want to go to out of Spawn into animated velocity we will go into the angular velocity and in here we're going to set the max to uh 40 or 30 we can do 40 though all right so that's the angular velocity next we're going to go to the acceleration gravity and we're going to turn off the gravity and put it to zero now at this point you can kind of mess around with some of these obviously you can see that now it's kind of being pushed to the right but of course you can push it to whatever you'd like all right so now we want to head over to the linear acceleration in the linear acceleration I'll set this to one and five it accelerates a bit more we'll go to the scale which is going to be in the display in the display we're going to go to scale we're going to go to the scale itself and set this to 0.01 and 0.5 this will just make the actual particles much smaller next we're going to go to the color curves and this will allow us to kind of curve the initial ramp here we'll add a new uh initial ramp here go down sorry I guess it went up a little bit for no reason we'll go into here into the gradient and at this point this is where you can kind of start picking your colors I'm going to pick the left one into making it a red one kind of a dark redish so and then the middle one I'll make it kind of a uh grayish color like so and then the very right I'll make this a orange color something like this and now we have just kind of a different uh color and radiant now if I click out of it you'll see kind of that okay so now that's the color curves let's undo that or go out of it we'll go to the Hue variations and inside of this I'm going to set this to 0.2 and this to positive2 we're going to go to the curve texture create a new curve texture go into the curve and I'm going to add a point right here and drag this down and drag this around the middle like so now I'll just do that hit save contrl s and lastly I'm going to go to turbulence turn this on and it might lag a tiny bit there we go now it's kind of going upwards a tiny bit and now I can kind of adjust some of these back down to turbulence and I'm going to adjust the noise speed to 07 just a little less than what it currently is and now what we want to do is go to the very top and turn up the amount to 500 and now you can see we have fire now this isn't perfect but another another thing or another issue I'll say is that it's upside down so of course we can rotate it if we'd like like so um or we can actually not can but we're going to actually have to do this in the direction so let's just reset the rotation here and we'll head over to so now we see that it's going in the right direction for some reason that's perfect now we'll move it into the mounted area kind of and there we go now we'll go into our level one we'll go into our objects we'll find our torch that we hopefully saved and pop this in now I'll take my torch here and just kind of move it to be on the side of the wall here so kind of put it right there and if I zoom in a tiny bit you'll see that and just move it in ever so slightly maybe move it to the side and just kind of move it to wherever you'd like it to be and now what I could do is I can turn on snap and I'll just snap this over here I'll duplicate this just snap it a few pixels over snap snap and just duplicate a few of these now what I can do is I can duplicate all of these rotate it by about 180 and then I can move this guy all the way to the other side of the wall now obviously this guy right here I don't want this so I'll delete this and now when I hit play we should be able to see the Torches in the game all right here we go there's our torches now I do suggest you play around with some of the values in fact I'll probably do that as well to make it a little less but this is not bad so far so yeah it's pretty good maybe we can reduce the amount that it's being expected um in fact actually this one is not on a wall so let's just delete this one and another thing that you can take a look at is in the world environment in the glow you can go to the uh some of these settings and increase or decrease some of these so if you look at the intensity you can decrease the glow of the fire if you increase it obviously that's probably too much you can look at the strength of it and go to the bloom I don't really suggest the bloom too much Bloom is kind of a weird threshold we can look at the HDR threshold and just play around with some of these values uh they're pretty fun to play around with you can also play around with soft light maybe some of the other ones um I find ad dative to be I wouldn't say the best but it's probably the nicest in a sense to kind of add to our game so yeah so this is pretty nice um if you want to get rid of that like random Direction you can turn off the turbulence which I think I'll actually do here so I'm going to turn off the turbulence and here we have the direction kind of going in a weird angle so let's go to the Gravity the directional velocity here spawn velocity here we can kind of adjust the velocity a little bit to whatever we'd like or sorry the direction but here maybe I can set it to 0.2 the random Direction 01 and this one I'll do yeah that's not bad okay and we can kind of adjust some of these maybe the initial velocity I want it to max out at two and now if we hit play we have maybe a more consistent fire right so there we go it's pretty long but that's okay um I like this it's not too bad it looks pretty wonky but looks pretty nice okay so there's our environmental flame now in our next section we'll be introducing a new instructor to introduce you to some much better GPU particles some better uh articles in general and some cool Shader stuff so let's take a look at who's going to be your instructor for the next hour all right so introducing lelu lelu will be um your next instructor for the next about 45 to 50 minutes um he will be showing you some cool effects some puff effect a level up effect Etc and a hit effect as well so um definitely check out his channel as well he makes really cool uh just Shader videos in general he has some beam effects better fire effect than what we made so if you want a much better fire effect there is one right there for you I'm basically just I just introduced you to the GPU particles and how and what we can do with it but of course you can definitely check out his channel he will have his uh videos up as there as well so the puff effect that we'll be making here and the level up effect and once he's finished though we will be uh implementing them all into our game and of course we do already have the project files so here at the very top in our assets we have the VFX files so if you don't want this and you want to do everything from scratch you can of course just delete this but it is here in the starter project so um let's take a look at how we can get started so I'll see you all in about an hour hello guys I am Leu and today we are going to see how to create two important effects that you can see in almost every RPG games level of effects and pop effects these effects will improve a lot the atmosphere in this game and helps the player to really feel a progress in the game rather by leveling up or the killing monsters we will use the Goot particle system and some visual shaders to create these effects so let's start with the level of effect this tutorial will be the divided into three parts first let's create a basic Aura effect using particles and a visual Shader then let's improve this effect adding an expansive wave and finally let's add some extra details and coordinate all the effects okay let's go ahead and start creating the basic Aura effect so for the level up effect we first need to create a very simple mesh so let's go to blender and let's delete this and shift a to create a new cylinder mesh I want this cylinder to be on field so set the this option to nothing so let's go to edit mode by pressing T move this cylinder up and stretch it a little bit and finally press W and select shade smooth okay so this is the cylinder it's a simple long cylinder the only difference is that the pivot point is at the bottom of the cylinder so let's export this file export OBG and let's name this cyinder there long okay so we are back in Goot let's import our cylinder mesh and I want to go ahead and create a new particle system a GPU particle system and in order for these particles to work we first need to create a new particle process material and also in draw passes assigned a mesh to be used for the particle system in this case I will use the cylinder and as you can see we have a lot of cylinder meshes falling down this is because of the gravity so let's go to the particle system into accelerations and set the gravity to zero also I only need one cylinder so set the amount to one and let's change the size so let's go to display scale and set a scale of four cool this will be the area effect for the level of effect oh by the way I don't want this cylinder to cast Shadows so let's close this and let's go to geometry and set cast Shadow to off also we need a material for the cylinder so let's create a new Shader material here in material override and let's create a new Shader I want this Shader to be a visual Shader let's name it Shader cylinder houra so let's open the Shader and I want to do some changes for example I want this Shader to be the cool mode to be disabled so we can see both sides of the cylinder also I want this material to be unshaded and disable Shadows cool so let's start creating the Shader for this Shader first I want to add a gradient so right click and create a new texture 2D set it to color and select gradient texture 2D so let's edit this gradient I will pick these little points because I want this gradient to be vertical and yeah let's now now connect the gradient into the alpha Channel and we can see this little line up here so in order to fix this let's modify the gradient a little bit like so yeah this is perfect cool so we now have this gradient connected to the alpha Channel we also need a color so right click and create a new color fragment let's connect the color and also let's connect the Alpha from the color oh we cannot connect it here so let's multiply the alpha channel from the color with the gradient cool so now if we go to the particle system we go to display in color curves we can pick any color we want for the gradient let's pick for example a yellow with a row value of 2.5 2 and 0.5 a very strong yellow also I want this cylinder to disappear over the time so let's go to Alpha curve let's create a new curve and I want this cylinder to be transparent at the beginning and at the end like this or maybe something like this it goes from transparent to full opaque to transparent again at the the end of the cylinder cool so we have this interesting effect but we can make it look even more cool by adding some special textures so for example here I have a lot of textures you can use any texture you want the important part is that the texture needs to be repetitive so let's pick for example this this noise texture and I want to add this texture to the gradient so in order to do that let's pick the texture this is a black and white texture so we don't need to pick a full color just one channel and multiply this texture with the gradient like this so now we have this special texture attached to the gradient we can also move this texture over over the time so in order to do that we need to create a UV panning note with this we can move the texture and we also need to create a Time note and if we connect the time node into the offset see how the texture is moving very simple I also want to control the speed of this of this texture so let's create a new Vector 2 parameter let's name it for example speed and let's multiply the speed parameter with the time node and nothing changes and this is because we created a new parameter so let's go to the particle system let's go to the material now we have these Shader parameters and here we have the speed option let's put a speed for example of 1.5 into the x axis and three into the y axis let's do one more change let's say instead of using this noise texture we want to use any texture we want so let's delete this noise texture and instead of that let's create a new texture 2D parameter let's name it our texture set it to color and in order to use this texture we need to sample it so let's sample this and connect this texture so now if we go to the material we have the our texture property and here we can set any texture we want let's see for example this noise texture or maybe this one so feel free to try using different textures any texture you want just make sure that the texture is repetitive I will also upload these textures here in the description in case you want to use them but anyways the Shader is completed let's go back to the particle system and let's do one last change here let's go to scale and create a new curve XYZ and I want this cylinder to grow slowly up so let's go to the curve of the y axis of the scale and I want this cylinder to slowly grow from zero to one so we have this interesting effect cool the overa effect is completed now let's create the expansive wave okay so let's name this particle system for example Aura cylinder one and I want to duplicate this cylinder so contrl D now we have the ARA cylinder 2 and I want to do some changes to this new cylinder so let's go to the particle process material and because this is a new particle system we need to right click and make unique and do the same for the material right click make unique so we can change only this new cylinder let's go to display scale and I want this in there to be even bigger than the last one so let's set a scale of eight also we can go to the material into Shader parameters and change the texture for this cylinder for example let's use maybe this text T and set a speed of one and three Also let's go to scale and I don't want this cylinder to grow up instead I want it to grow into the from the center and go small so let's change the scale and because we want to change this new cylinder scale we need to right click and make unique do the same for all the properties of these particles make unique make unique now we can edit the properties so for example I want this cylinder to grow in all the directions but instead of growing up in the in the Y AIS I want it to go to to shrink down so let's change this curve so the cylinder goes from Big to small into the y axis something like like this I guess it's okay excellent we have done the AA effect with a nice expansive wave now we only need to add some extra details and coordinate everything together cool so finally let's go to photoshop or any painting program you want in this case I will use Photoshop and let's create a new image and put a text here level up let's move it to the center of the image and I want this text to be white also maybe we can give it some effects so let me see let's go to blending options maybe we can give it a a glow or maybe a contour or something like that let's try with a bevel effect okay save it as a PNG so let's go back to go and I want to create a new particle system let's create this time a CPU particle system and name it for example level up text so in order for this particles to work we need to assign a mesh so let's go to drawing and let's select a quad mesh so now we have a lot of quad meshes falling down let's also go to geometry and create a new standard material let's set the shading to be unshaded let's go to alido and here we can assign the level of text we just created in Photoshop so let's pick the text over here now we can see oh by the way because this is a transparent texture we need to go to transparency and set the transparency to Alpha let's also go to billboard and set the billboard to be particle billboard so now these particles are always facing the camera as you can see which is really cool finally for the material let's go to vertex color and enable these options so with this options we can now edit the color in the particle system cool let's close the material and go back to the particle system let's go to gravity and set it to zero set the amount to one also I want this to be this is maybe too small so let's go to scale and set a scale of four and maybe we can make this like go from small to big to small again so let's go to the scale option and create a new scale curve I want this particle to be very small at the beginning and then grow up and then go small again cool also I want this particle to go up so let's go to Direction and set the direction into the y axis 0 1 0 and let's go to Velocity and set velocity of 2.5 set the sprit to zero let's go to color and we can give it any color we want here in my case I want to use a row value of 2.5 2 and 0.5 excellent also I want this level up to disappear over the time so let's go to color ramp create a new gradient and delete this I want it to be transparent at the beginning like so and transparent at the end finally let's go to dumping and let's set a value of 0.8 and 1 now in order to keep everything organized I will create a new node 3D and put everything inside the the node 3D and we can name it for example VFX level up and right click and create a new Branch scene let's open the scene and create a new animation player so we can coordinate all the timing for the effects using the animation player let's create a new animation name it default let's put a time of two seconds and let's go to the cylinder one set it to one shot and key the emitting option let's do the same for every particle let's go to the cylinder 2 enable one shot and key do the same for this one shot key cool so for this effect let's say we want to emit all the effects at the beginning of the animation let's play so as you can see now everything is coordinated maybe we can put the level up effect a little bit later like this let's see let's play the effect okay so let's see how this final effect looks with the character so let's go to the level one and let's make this VFX editable children so we can play the animation and let's play excellent as you can see I added these little particles it's just some quad meshes similar to the text OP but yeah it it this adds a special touch to the effect cool our level up effect is is completed remember you can download all of these files for free in case you want to use them or story up close now let's go ahead and let's create the puff effects this tutorial is divided into three parts let's start creating some nice particles using a simple sphere then let's convert those spheres into some nice animated clouds using a visual Shader and finally let's customize the effect so we can use it in our game so let's start with the particle system so let's create the puff effect for this effect I want to go ahead and create a new GPU particle system and in order for this particle to work we need to create a new particle process material and also assign a mesh this time I will select the sphere mesh and as you can see now we have a lot of spheres falling down so let's go to accelerations and set the gravity to zero instead of using gravity I want to use a radial velocity so let's go to radial velocity and set a velocity between 1 and two cool now let's create a material for the for the Spheres so let's go to Geometry material override let's create a new Shader material new Shader select visual Shader maybe we can name it for example Shader puff now let's open the puff Shader and let's create some stuff here first we need to add a color so let's right click and create a new color fragment connect the color and the transparency also there's one more thing if I move the the Spheres you can see how it gets this hard Edge when it intercepts with the floor I don't want that so in order to fix this we can create a proximity fade node and let's multiply this node with the alpha channel so now as you can see if we get closer to the floor the Spheres disappear it fades we can also control the value here maybe we can create a float parameter let's name it um distance faith and give it a default value of 0.3 cool excellent um let's do some changes to the particle system for example let's go to the particle process material and I want these particles to scale down so let let's go to scale and let's put a random scale between one and three and let's create a new curve and I want these particles to start big and then go small like this maybe too much maybe something like this perfect and I also want this particle to disappear over the time so let's go to color curves and let's create a new Alpha curve so I want these particles to be full opaque at the beginning and then I want them to disappear slowly we can also give it any color which want but for now I will leave them white okay so the particle system is already prepared now let's make these spheres look like a clouds using a visual Shader okay so here's the interesting part let's convert this sphere into a cloud we can do that using a Shader let me show you let's go to the Shader and let's go to the vertex option here we can control the vertices or the vertex of this sphere this can be quite confusing so I will quickly open my drawing board presentation so as we know a 3D sphere is composed by many little points or vertices and let's say all of these points has a perpendicular Vector like this so the idea is to being able to take a black and white texture and put that texture into a sphere until all these points to move depending of if the point is covered by white for example if it's white that's equal to one if it's black equals to zero gray 0.5 so we can move the point depending on the texture over the sphere okay so with that being said let's go back to go do let's go back to the Shader to the vertex section and let's do some stuff first right click and create the vertex here we have all the vertices of the sphere and to this vertices I want to add a normal Vector right click and look for normal so look what happen when I connect this node here now as you can see all the vertices or all the points of the sphere move in the normal direction of the vector we can also control the like the vector of the normal and reduce the size so we can for example multiply this normal Vector for the value let's create a float constant for example 03 so now we reduce the size of the normal Vector 0.3 units and as you can see we get a small a sphere excellent but now let's do something interesting I will take a texture let's pick for example this texture set it to color and we don't need a full color because this is a black and white texture we only need to use one channel so I will pick this and I want to multiply this texture with the normal Vector excellent now we get this interesting shape and this is the result of this text controlling the vertices of the of the sphere we can also change the intensity here using this note let's try with one so we get this crazy shape but for the clouds let's put a value of minus 0.6 so now this looks more like a cloud right also I want these clouds to be dynamic to move so we need to move the texture and for moving the texture I will create a UV buning note Also let's create a Time node and multiply the time with uh Vector 2 constant and let's give it a value for example of 0.1 and 1 now you can see how the texture is moving so the vertices of the sphere are moving with the texture which is moving using these um values cool so I think this is cool I think this this looks really nice already but there's one more thing I want to do I would like this clouds to look more stylized more tuny so I want to change the way the light interacts with the clouds and for doing that I want to once again modify this Shader and this time I want to go to the light section of the Shader in this section we can control like the way this sphere interacts with the light in this case I want this to look more anime style more tuny style so I want to make sure that the light hits like in the hard way the and also I want to give it a nice shadow Contour to the to the clouds for doing that I am going to create a normal vector and I want to dot product this multiply this normal Vector with a DOT product with the frel node let's set this forel to to through in inverted and connect to the diffuse Channel and I know this is this might look a bit confusing I am planning to explain this quite better in a in the future I want to do a a video about anime style in in 3D games but for now let's just follow these steps I am doing in the video create a smooth step note and create a float constant another float constant that goes between 0 and 0.1 with this we can control the hardness of the edges and now let's create a clamp note and give it a value between 0.1 and one so with this we can control how dark are the shadows and how bright are the this this brightness cool so yeah this is this is the the light note so yeah that's that was it we have the Shader with all done already we can close the Shader and let's do some final adjustments to this puff effect set the amount to 12 and the explosiveness to 0.85 also I want to give it a random angle between minus 180 and 180 let's go to position I want I want this clouds to spawn in a ring position with a value of one in the y axis and a height of zero and a radius of one also I want to set a velocity in the Y AIS between 0.5 and 1 and finally we can give it a nice color this time I want to use a color ramp let's create a new gradient texture enable hdri and I want to start with a really intense strong purple with a row value of 0.4 0.05 and 1.2 and I want it to go to a full black color at the end also we can give it another color over here with a row value of 0.2 0.05 and 1 that's it we get this really nice puff effect finally if we want we can set it to one shot and when we need to use it we can just emit the effect one time here by clicking here I have also added some extra details to the puff effect as you can see I will not dive too much into details about this since I have already done this in the past in my heat effect tutorial if you haven't seen my tutorial please check it out basically here I have two particle systems one is a big quad mesh with a texture that scales down with this curve and I did another particle system which add a bunch of quad meshes with a simple billboard texture and this simply helps to add some more impact to this puff effect as for the step puff effect it's almost the same I just Tweed some parameters for example I have changed the color to a white color and change the amount to two particles also I have set a simple velocity into the x axis only the puff effect is completed and now we can customize it as we want and of course the possibilities are a lot but at least you have the basics done and you can work from there so that's it for this tutorial guys I hope you have learned something new today and if you want to learn more about visual effects in thought please check out my YouTube channel thank you for watching bye all right so now that we have all our FFX or now that you kind of figure out how to make them we already have them whatever you may have done me scratch or you already have them here from the started project whatever let's take a look at what we have and what we'll implement the first thing we're going to implement is in our player so let's open up our player here and we're going to now add the VFX that are in our player which are the level up scene so this one we pop that in we also will need the puff puff run the puff run this one we that in pop it in there we go and we'll just make sure that both of these are reset to 0 go okay so for the level up I'm going to have to make this local and now I have access to the animation player so here I don't want this to play by default I'm going to uncheck that no and now I'll actually rename this to I'm not going to rename it I'm just going to go into my script and remember this level up function that we created well this is where I will get node get this animation player here and we will play the initialize function so uh in it this is my level up and we can test this out play and if we go find a monster to kill which we'll have to spawn them in in just a minute here we go okay maybe I'll uh oh he died okay there we go there's our level up there we go we saw that we leveled up and we even got the signal and we played the animation there we go now what about the puff well this is not too hard because all we need to do is emit this every time I run now of course there's a few options either I can emit this while I'm running in my code or whatever I'm going to do this through the animation Tree in my animation tree in my night here pop my animation fee up I will find the running a which is the one I'm using and every time I I run so maybe like kind of one step maybe one right there I can go to my puff here and turn this on or I'll just kind of re track that and here I'll have to click into this and turn this on so now when I play this you'll see the puff so there we go now when I hit play you will see that when I run I have that puff effect there we go so it's at The First beginning of that animation track right okay so that's our puff run now we need to implement our puff monster death effect so here we will add add our big puff we'll pop this in our scene here we'll make sure that this is at position Z and now uh we want to out we want to make local and here we have the hit effect so this is cool but this is the entire puff effect so here we want this entire puff effect to hit play but I'll uncheck this oops so I want this entire animation to play right here when I die so here in my uh script here when I die my death function all I need to do is play this play uh hit there we go that's pretty much it here I'll just say get node instead because I like to use a consistent way of getting nodes all right there we go we played this animation now instead of queing free I'm going to hide ourself or I'm actually going to hide the skeleton Warrior okay and then I'm going to wait for this to finish connect the animation finished once it's finished then I will self duct Q free but now what I can do here is let's head back to level one and I'm actually going to move my monster here to be right in front of my player that way I don't have to uh wait for him to run all the way there let me just equip some weapons stuff here kill this guy he dies pu effect shows up and eventually he'll you free there we go that is a cool way that we can do that now of course you can also um here in the death of course hide so here this is when the death happens so here we'll hide the Sprite and here I'll just say get node instead skon Warrior there we go all right so that is pretty much it for our effects um we do have the hit effect left so let's take a look at our hit effect here we go the VFX hit we can pop this in uh we can pop this in realistically anywhere we want I'll pop this into my uh player here and if I make this local we'll find the spark effect and this I wanted to happen on my sword so what I can do is I can find my sword here in my right hand slot pop this in my hand slot I will take the position and reset it and I'm going to take my animation player here uh for the Knight play the T pose real quick this guy let's play the T pose that way I can move the spark effect I want to move it kind of right around there that's probably where I will hit something that's where I'll actually um you know hit something so here I'm going to turn off the hit by default in my functions here when something enters this area so I can actually just go over here go to node double click this and this will take me to where it needs to be I can take this this is my path for my hit animation I will say get node animation player and then play hit so here we go go we now have that hit effect being played every time I hit something so let's take a look if this works now if I play we now see that full hit effect every time I hit something more specifically a Monster yeah there we go there's our game with some sound effects or some effects now next we'll add some sound effects let's take a look at how we can do that all right so we're going to add three different sound effects which doesn't sound like much but that's okay here in our player we're going to add a audio stream player 3D we create we'll rename this to damage we'll duplicate it D we rename this one to hit and these two effects are pretty easy we just need to find the hit effect so can find either sword attack human maybe we can put this one for our damage and then for the hit we can find one that gets hit maybe the sword hit and we can play this by going to playing you should be able to hear it it's pretty cool now what we can do is head over to our script this is actually not too hard because all we need to do is in our hit function I just need to get node hit and then dot play so it's that easy I'll just copy this and then every time I get hit or I hit something this is where I'll damage it so I'll say damage stop play all right so that's our sound effects for a player one more thing we'll add is our item object over here we'll add a audio stream player we'll rename this to pickup we're going to connect the finished to this uh the signal to the node or to the script uh let's actually fill this in with a thing first so let's find whichever one we want we can maybe do crate open realistically it doesn't actually matter maybe stack open that might sound decent so let's say that is our pickup sound effect and the reason I'm doing this is because here we're queuing free now this is kind of a different way of doing this is here I'm going to ceue free once the sound is finished but until then I'm just going to hide self it's going to look as if I destroyed it but really it's just hiding so now now when I hit play I create my game here I can po this in there we go and go and kill it you can see we have some sound effects which was nice and then when I pick these up nothing happens uh probably because I'm never playing it so that makes sense so when I enter this I need to play it so let's get node pick up play and let's hit play one more time hopefully you caught on to that what I just did there I made a small mistake it's okay though all right so there we go there's our sound effect you should be able to hear it being picked up all right so there we go that is how we create um some sound effects and that's pretty much it so in the next part I think all we have left is to um have our monster spawn in our world so here I want to spawn our monster but I don't want to spawn it in a wall right so we're going to have to figure out how we can do that all right so now what we're going to do is in our level one we're going to create a new script attach this to our script level one we'll put this in our level or script system here hit create and pop this out now I'm going to on ready variable our Warrior scene we're going to pack this scene and I'm going to reload it here a skeleton Warrior we go and now I'm also going to load the grid map grid map to get node grid map now this isn't going to 100% work uh sorry floor because renamed it uh and I'll kind of show you why in a second we'll kind of look through this together so first let's create a function a ready function and we're going to say while the get node monsters. getchild count count is less than 10 I'm going to start adding monsters until I get 10 monsters now what we can do is I'm going to get a x position and randomize it by saying Randy range from 40 uh 240 I'll do the same thing for the Zed and then I'm going to create a monster temp variable now monster temp now here's the thing is this monster temp we need to instantiate it so here we'll just say warrior scene do instantiate done now we need to check to see if the grid map. get cell cell item at Vector 3 I at The X 3 I at The X position that I'm trying to add at 1 at The Zed position that I'm trying to add as well is equal to Z Now is it zero let's find out let's close this and head over to our walls and floor now if we go to the library the item and zero this is the one we're looking for here I need to make sure I'm adding my monster on a floor cell and not a uh all wall arched right so what I can do here is I can do two things first I can check to see if I'm on a floor and then I can also check to see if I'm not in a wall and I can do that by saying grid map walls here I can maybe rename this one to flor of course here I'll have to this to grid map floor now here I'm checking to see if I'm on a floor if I am on a floor I now want to check to see if I'm on a wall so I can do that by also checking for the same thing I'll just say copy this except this one I don't want it to be zero I want it to be the this one wall arched so I have to find which position that it is in here it is going to be two now you might have a different one maybe you have yeah maybe you have something else I don't know you'll have to check them and the number here is corresponding to the number we need so here I'm going to make sure it's not not equal to two then if it is or if it's not equal to two meaning I'm on a floor and I'm not on a wall then I will add the monster to do that I'll say monster temp position is equal to Vector 3 at X position at position let's say three just so it kind of starts in the air and then Z position then we'll say monster 10 player is equal to get node player because we need to assign the player uh to our monster right because before we have exported it close this remember here we had it exported but now we need to assign it manually the code okay so now we need to actually add the monst to our scene so that's not too hard we can over here we can say get node monsters monsters go do add child monster ATT all right so there we go now now we will pray that this does not crash because we added a while loop so hopefully this works out nicely all right here we go we have not crashed and we have some monsters that have been added to our game and none of them are in the wall so obviously all of them were added to this side um that might be because the positioning was over here um you can change the range that they get uh spawn in right here right depending on what you want for the X and Y position it really is up to you I just did 40 to 40 I think that will cover a wide range um it might be more it might be less not 100% sure actually no that should cover most of it so here you can see that this is 30 and this is around 30 probably on the other side Etc so this should cover the entire map that we have and it will only spawn 10 monsters in our map okay so that is how we make sure that things don't spawn in our walls we make sure that they spawn in our map Etc so and it's a relatively randomized position so pretty neat all right so that is it for this section believe we're done but we'll find out congratulations on completing this course course was not very easy pretty long but got through it and good job so we actually created a pretty neat game in the end we have a relatively good working player with a monster and an inventory system that's pretty neat and all that good stuff so congratulations completed this course and H yourself on the back all right so now what do we do next what is the next step well first of all I'll just kind of encourage you to check out my channel of course and hit that sub button there um but what about what else what else can I offer you to help you along well I have weekly challenges and the point of the weekly challenges is terms of practice so this is kind of you going forward you need to probably practice if you want to learn gdau or game development you will probably need to practice now I offer free weekly challenges every Sunday I'll be offering uh and sending out a weekly challenge and the next week I'll be sending out the solution to that challenge every week I'll essentially send out the challenge and the solution to the previous week right so I've been doing this for about three months now and uh everybody has been enjoying it on my channel so far so I'm going to keep doing it for a while to access it all you need to do is join my email list for my patreon as well email list is completely free so all you need to do is just hit subscribe and you will be added to the email list for that and yeah that's it so what else can you do well of course there are courses as well I have several other courses on my website that you can check out um some are free some are paid but of course you can also access all of it um if you're a membership or if you buy a membership sorry um so definitely check that out as well now the advantages of my courses specifically is that I try to structure my courses slightly differently than many other people might and it's more specific in the sense that I split it up into kind of two or three different sections the first section is essentially teaching you the concept and idea of what we're going to do and what we're going to learn to apply then in the middle I give you an assignment and That assignment will hopefully help you guide uh guide you into creating the game that we need to make and then the third section or the second part of that course will be kind of like what we just did in this course where I kind of just do a follow along a code along tutorial where you follow me and we kind of look through the solution of doing the assignment and the project together so if you if you're interested in that sort of format definitely check it out on my channel I have a few courses up for free and I have a few courses up that are paid definitely check it out and hopefully I'll see you guys around