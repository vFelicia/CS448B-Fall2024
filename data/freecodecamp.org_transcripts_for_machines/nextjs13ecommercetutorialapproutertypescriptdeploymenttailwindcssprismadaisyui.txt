this comprehensive course guides you through crafting a robust ecommerce website similar to amazon.com using nexjs 13.4 and its new app router Master next.js server actions database intricacies with Prisma seamless authentication via next auth and mongodb and create a stellar UI using Tailwind CSS and Daisy UI Beyond building you'll also dive into deploying your project on versel optimizing metadata for each page duplicating Prisma requests and setting up essential tools like prettier and eslint for a streamlined development experience Florian Walther created this course he is an experienced developer and popular teacher hola Muchachos in this tutorial we will build an amazing ecommerce website using next.js13 to get a ref react server components and silver actions which are still in Alpha right now for the styling of our website we will use 10 a win CSS together with a really nice component Library called Daisy UI we will store our data in mongodb and to connect to our database we will use the Prisma orm which works really nicely together with nexjs and we will even Implement authentication into our website so that a user can log in and for this we will use next auth so this is a full stack project where we build both the front end and the back end right in next.js and we are really using The Cutting Edge technology right now in this tutorial the latest of the latest some of these features are still in Alpha so this tutorial will really equip you for the future if you want to be an xjs developer okay so without further Ado let's take a look at the project we will be building here so our website is called flomazon and it's a place where you can spend all your money and as you can see on the front page we see the list of products available on our eCommerce website they are ordered in descending order with the newest product and top and this is completely Dynamic so this featured product here at the top which is displayed in this large box is not hard coded if we added a new product to the database the new product would be shown at the top and the pen would be shown here as the second product but the featured product is only shown on the first page so if we navigate to Page tour we don't have this featured product at the top anymore so we Implement pagination as well the cool thing is the way next.js renders and caches Pages makes them open really fast so if I click on a product the page is there instantly there is no loading time because this data is prerendered and then cached we can of course add items to our cart and this is executed in a server action server actions are a next JS feature that's still in Alpha right now and they are basically a way to execute post requests on our server like adding an item to the card as we just did without having to set up a separate endpoint so this happens all directly in our components server actions are still in Alpha right now and you will learn how they work throughout this tutorial let's add a few more items to our card maybe a banana and the Game Boy here we can see how many items we have in the card and when we click on it we even see the subtotal so the current total price for all items we can navigate to the cart page where we see a list of all items in our account here we can also change the quantity of each item similar to how it works on Amazon and again this is executed in a server action and when we change the quantity of an item of course the subtotal updates as well our navbar updates and everything just works now the checkout button is just the dummy it doesn't actually do anything when we click it I know that many of you would like to see a tutorial with stripe implementation but I think stripe should be covered in a separate tutorial to not make one tutorial too bloated with too many different topics so if you want to see a stripe tutorial by me then leave a comment below if there is enough interest I might make one and of course leave a like on this video because only this way I know that there's actually more interest in tutorials like this but I haven't shown you the coolest feature of this project right now so I really wanted to make the shopping cart professional I wanted to have it work like in a real production website like Amazon and every professional ecommerce website should have an anonymous shopping cart in my example and I've implemented this so if I sign out I still have a shopping cart which right now is empty because I'm not logged into my account anymore but I can still add items to this Anonymous shopping cart so here comes the cool thing when I now log into my account again which we can do via Google login but you can also add other authentication providers if you want if I log into my account which was this one here it now merges the anonymous shopping cart with the shopping cart of this user account so previously we had six items in our shopping cart in this account but now we have seven why because it merged this mouse we added to the anonymous shopping cart into this authenticated shopping cart and now when I log out again the anonymous shopping cart is emptier so maybe let's repeat this one more time to really see that this works so remember we had seven items in our account I add another item or let's add tour to this Anonymous shopping cart so now when we log into our account we should have nine items in there right so we log in again it merges the shopping carts and there are our nine items so this is really professional also all these pages are servers at Renault which doesn't only make them great for SEO search engine optimization but this also allows us to have all the data available when we open the web page so if I refresh this page you will notice that there is no moment where the shopping cart is emptier with zero items or not shown at all instead when we refresh the page we see the number nine here immediately when the page is opened and this again in my opinion feels really professional because there is no glitch in the UI and this is also how it looks on Amazon when you refresh the page there is no loading time for the shopping cart because we are not loading the shopping cart client side like in a classic react App instead we loaded server side so the data is there as soon as the page is visible on the screen we even Implement a search functionality which again is executed through server actions so let's try this out maybe let's search for fun let's see what we find we are searching in the title and in the description of the product so somewhere in here is probably word fun let's also search for pen I know that we have at least one pen there's our pen and somewhere in here is the word pen as well but you can fine tune the search the way you want to only show exact matches for example that's up to you and of course our website is also responsive so this grid here on the front page for example adapts to the screen size and shows a different amount of items everything moves around at the correct time and even our pagination bar here at the bottom is responsive so if the screen is too small there will not be enough place to show a 10 page numbers for example instead it changes to a another kind of view which looks like this now we have this right button that we can click and the current page number and also this left button and again this changes with the screen size really cool the enough but is of course responsive as well so this moves below and yeah we will learn how to do this with Tailwind okay so this is an amazing project we will be building here and the focus of one of the main focuses of this tutorial is next.js server actions because they haven't really been covered in any tutorial in detail so far because they are still an alpha right now and we will use them extensively throughout this tutorial in different forms we will use them from Silver components and from client components so you will see how you can cut them and work with them correctly but there are some prerequisites for this tutorial because this is not a complete beginner tutorial if you have never worked with nexjs before then you should first watch my nexjs 13 beginner tutorial here on YouTube which I will link in the top right corner of this video in the info card box because next.js does some magic under the hood especially when it comes to a caching pages and you should understand this when building an xjs project and I explain all of this in detail in the linked tutorial alright then I wish you a lot of fun with this tutorial and please don't forget to like this video this is a signal to me that I should make more videos like this in the future have fun now it's time to set up our project and not only will we set up a next JS project we will also add some extensions that make it Pleasant to work with one such extension is prettier which is a code formatting tool which is especially useful together with Tailwind CSS because there's a Tailwind plugin that helps you order your classes properly otherwise working with tailoring classes can get really messy really quickly so we will learn how to set this up properly I will show you how to set up all of this manually but I will also put a link in the video description below to the starting code that you can download from GitHub the reason is that of course these different packages that we use get updates over time and sometimes these updates break existing features and to make sure that you can still watch and follow this tutorial one year or two years in the future you can download the starting code from GitHub where all the packages and other configuration is already set up so it's up to you if you want to create the project manually or download the starting code just know that if you watch this tutorial in the future and you do it manually then you might have to fix some code throughout this project all right to create a next.js project manually we open the folder where we want to put it and then we have to open the command line here on Windows we can do this by holding shift down right clicking inside this folder and click on open Powershell window here this might say open zmd or command line here this is also fine we just need a command line window if you are on Mac or Linux then yeah open the command line there as well and navigate to the folder where you want to initialize the project again you can skip this whole part if you downloaded the starting code from GitHub then you don't have to set up a new project just clone the repository into the folder where you want to put it if you worked with react or next JS before then you already have node installed but just to make sure we can check it we can type in node minus minus version and it should show a number here and it should also show a number if you type in npm minus minus version which is the node package manager that we use to install packages then as usual the easiest way to set up a newer next.js project is to use the create Next Step command which looks like this we write npx not npm but npx and then create minus next minus app and then add latest and then we run this we confirmed this year with yes with a wire and then we have to answer some questions we have to give our project a name I'm gonna call this next.js ecommerce enter would you like to use typescript with this project yes we always use typescript would you like the excellent eslint helps us find problems in our code and you always want to use this as well so again we select yes would you like to use Tailwind CSS with this project we select yes here as well which is really cool because this way we don't have to configure Tailwind CSS ourselves it's already set up would you like to use the srz directory and this is just for organization I prefer this so I select yes here as well use the app router recommended yes this way we use the new index.js13 app router instead of the old Pages directory again if you have never worked with the app router before you can follow my next.js beginner tutorial where we use the app router so we select yes here as well and this is really important because otherwise the project structure will be completely different so make sure to select yes would you like to customize the default import areas no and then we have answered all questions we have to wait a few seconds and this sets up a newer next.js project okay when this has finished we can close the command line and now we should see our new project here next.js ecommerce we want to open this in vs code so I right click open encode if you don't have this option here then you can also just open the S code manually and drag and drop the folder in there we'll open it over the menu you will know how to open a project I would assume and if you don't know that the starting project then open the starting project instead as usual this gives us a project with a lot of configuration already set up and we can open the command line which you can do overviewer terminal or use the shortcut next to it and then we run this project in development mode with npm run Dev we type this into the terminal down here which starts this project on localhost 3000. so now we can open a browser window navigate to localhost 3000 and we should see this default template here but this is not so interesting for us right now so we can close this again and we also stopped the execution of our npm run Dev by pressing Ctrl Z while our cursor is in the terminal down here and then we confirm this with wire because now we want to install some packages again this is only necessary if you have not downloaded the starting code because in the starting code I already installed all the packages to make sure that you have the same version number as me in the future so you can skip this part if you don't know that the starting code from GitHub alright and we need quite a few packages in this project and we will install them all at once now at the beginning with npmi which is short for install and then we type in a few different packages and you have to make sure that you spell all of them correctly because otherwise it will not install the correct run ok so Tailwind CSS is already set up we should actually zeal the dependency here in the package.json file because we selected Taiwan CSS when we run the create Next Step command so this is already installed typescript as well and some other configuration so the first package we install here is Daisy UI in our lowercase like this which is a component library for Tailwind CSS I will show you how this looks in a moment the second dependency is Prisma and between each of these packages we are at the space the next one is ADD Prisma slash client space the next one is next minus of space then we have ADD of Slash Prisma minus adapter space prettier the space and we are almost done eslint minus config minus prettier space and one more prettier minus plug in minus tail wind CSS so you can pause the video and type this out by hand if you haven't downloaded The Styling code and then we install all of them by pressing enter which we take away and where did I get all these install commands from well from the documentation of each of these packages they will tell you exactly what you have to install but I prepared all of this for you already and so you can just follow my instructions and now all these dependencies are added here to the dependencies Block in the package.json now in case you're wondering why do we install all of them in the dependencies and not in Dev dependencies because some things like eslint or typescript are only used in development so usually we install them in depth dependencies so that we don't upload our project in production but in xjs this is actually not necessary you can install everything in dependencies because the packages that we don't use in production will automatically be stripped away when we build a project so there's no reason to use the dev dependencies block okay and then I said that we also want to install some extensions that make working with our project more comfortable again all of the setup is explained in the documentation of each of these packages but I prepared all of this for you already so you just have to follow my instructions so this is how you normally set up Tailwind CSS in a project you have to install some stuff and you have to add some configuration files but this is already done for us when we use the create next app command it already takes care of all of this for example you can see these directives here we can actually look into our project and they are set up in the globals.css file up here but we still have to improve our editor setup which you can find here under editor setup in detailing documentation here they recommend that we install this intellisense extension which we will do and also that we set up Tailwind with predia which is this chord formatting package that we installed we will do both of this again most of this is already done in the starting code on GitHub but you still have to install the extensions so you should still follow my instructions even if you were downloaded The Styling code so back into our project we go to the extensions tab which is this button here and research for Tailwind and then we want this one here the official Taiwan CSS intellisense plugin we installed this and this gives us Auto completion for Tailwind classes which is very useful working without this is really really almost impossible in my opinion so we need is extension and they also recommend some configuration down here which you may do as well so they recommend this file Association setting and to change the editor quick suggestions so let's go into the settings which we find under file preferences and then here settings in the settings search up here we type in files Association we don't have to type it out completely we just want to find this setting here here we click on add item entry type in a star dot CSS and for the value we type in Taiwan CSS our lowercase like this okay and this way Tailwind syntax Works in CSS files so now when we open Global CSS again this quickly lines up here again if you remember there was quickly lines under these lines up here but not anymore with the setting and we want to change another setting as well which is really useful we search for editor quick suggestions and they are off for Strings by default we want to change this to a on because this way we get other completion inside strings and Tailwind CSS classes are strings and we want Auto completion for them to pop up automatically so we change this to on and these steps you have to do even if you downloaded the starting code from GitHub because I can't change your IDE settings for you you have to do this yourself then we also need a little bit of configuration for this UI which is this component library that we installed earlier we already did this step up here when we installed the dependence here but we have to add something to the Tailwind config file so we go back into our project and open the Tailwind config.js file and then we go into this plugins array here and then we want to enter this part here require there's a UI you can type this out by hand we can also delete this whole theme block here because this sets this background image that we don't need anymore we will set our own background color later and then I want to configure the daisy UI theme so again this UI is a component Library so we have different components here that are already styled like buttons for example in different colors model dialogues that we can use are kinds of stuff so that we don't have to set up all of this ourselves progress bars whatever and this comes with a custom theme but we can configure this theme appears actually a really cool theme generator you can find this under daisyui.com the docs tell you how you can customize the theme and they also have this random generator which is really cool so this lets you generate a random theme and you can just copy paste this into your Tailwind config file so if you want you can generate your own theme on this ui.com you can also keep the default theme I have prepared a theme which I put in the Tailwind config file again this is already added to the starting code I'm gonna copy paste this in here I will also add a link to this file under the video so you can copy paste it from there again you can skip this step or you can generate your own theme if you want but this is the theme I will use it sets different colors like the primary color accent color background color and so on and I also set a background color in here in this body block this is not mentioned here in the docs because this is not part of the default theme but this way we can change the background color we could also do this in the global CSS file the benefit of doing this here inside the theme is that we could later create a different theme like a Dark theme for example with a different background color instead of hard coding this into our globals.css file again you can copy paste this from the link under the video if you're not using the starting code okay we save the changes to this file then we go into the globals.css file and here we want to delete everything except for these three Tailwind lines here at the top they are necessary for the Tailwind configuration and the classes that we can use in our code but we already set up our own background color so we don't need this and we also don't need any of these CSS variables here so we delete this and save this file next we want to configure prettier for Tailwind CSS so we have this automatic class ordering I was talking about this is also very useful we already have prettier installed and we also installed this prettier pluginterian CSS earlier when we installed all the packages but we have to add a little bit of configuration as mentioned here so back into our project we want to open our Explorer here so we click on this icon and here in the root folder we create a new file with this execut name prettier Dot config.js and in here we insert this you can pause the video and type this out by hand or copy paste it from the GitHub Link in the description I know setting up all of these tweets is a bit tedious but it really makes it easier to work with our project later prettier also has an extension that we should install otherwise we can only execute it over the terminal but it's much more convenient to execute this with a shortcut with a keyboard shortcut so in the extension search we type in prettier entry one installed this extension here click on install then we want to make this the default format on so that when we click the formatting shortcut on our keyboard it uses pretty on instead of another formatter so again we open the settings over file preferences settings and research for default formatter and we want to change this from none to prettier which should be somewhere in this list you probably already thought yeah right here so now we can use the formatting shortcut which is alt shift F on Windows by default to use prettier to format our files and I just did this and as you can see I changed the intendation because prettier is very opinionated formatter they don't give us a lot of customization options instead they have a lot of rules that will automatically be applied when we use prettier to format the file like using two spaces for intendation for example pretty or is very useful because it also automatically adds semicolons in the correct places it adds line breaks when necessary it's really much better than the default formatter and we are almost done with our configuration but we still have to set up prettier to work properly together with eslant otherwise they can conflict again this is described in the next JS documentation we already installed eslint config prettier earlier now we have to go into this eslint RZ Json file and make a little change down so we search for Json what we do is we turn this value here into an array by surrounding this with scrap brackets entry at the second string in here which just stays prettier we saved us and this little change makes sure that eslint and prettier don't conflict with each other there are two more extensions that I want to install that are very useful for one eslint has an extension I already installed this one I recommend that you install this as well because this way we see our eslint warnings directly in our code editor and we don't have to execute a terminal command all the time and one more Prisma which is the orm that we will use with our mongodb database also has an extension this one is also incredibly useful because later when we set up our schema file we get syntax highlighting there we get Auto completion and this also helps us format this file properly so I recommend that you install this as well that's it for all the configuration and extensions we have to set up I just want to install one more package that I forgot earlier so again we open the terminal and type in npmi sort Cod again I will put this one in the starting code as well this is just another package that we will need later so make sure to install this and it should be added to the package.json down here okay we can close all of these tabs here all the packages and extensions are installed and configured I also set up a few images for this project again I added them to the starting code but if you set up the project manually I will also link these images in the description under the video so you can download them from there I added these images to this project for one I replaced the fluff icon here I use this logo instead of the default fav icon I also downloaded this open graph minus image into the app folder this is the social media preview image which will be shown when via copy paste a link to our website on social media on Twitter or Facebook for example this file needs this exact name and it has to be added right in the app folder again you can download it and put it in there if you're not using the starting code and two more images that we will use throughout this project are inside this assets folder so you can create a new folder inside the app folder here colored assets and put these two images in there for one it's the logo we will use for this website and then this profile pic placeholder in the case a user is logged in but they don't have a profile picture okay again I will take the project as it is right now I will push it to GitHub I will call this Branch starting code or starting point and I will link it under the video description so you can download this whole thing without having to set it up manually but it's still useful to know how to set up all of this yourself manually alright and in the next section we will set up our mongodb database and then we can start coding all right next we want to set up our mongodb database and the easiest way to do this is to use mongodb Atlas which is a cloud hosting service for mongodb and they also have a free tier available that we can use to build our project so you can search for mongodb Atlas on Google and then just click on the link you'll find here we have to create an account and log in you can click here and start create the website probably looks a bit different in the future just create a free account log into this account I already have an account and here I want to set up a new project I already have a project but that's from my next JS course I create a new project here again the UI might look a bit different on your side just find a button that says create a new project then we give this project a name again I'm gonna call this next.js ecommerce you can give this any name you want we click on next yeah this is already set our automatically then we click on create project and we have to wait a moment and then we want to create a database in this new project here we can select m0 which is the free tier but this is more than enough to build a little practice project you can even use this for a small production websites by the way we can select where our database is stored and in what region we can keep the default settings here you can change the name of this cluster but you can also keep it as cluster zero we don't have to change anything else and we click on Create and now we have to select mountains or Hills okay this is a hill this is a here I don't know if this right here is a here let's see here we are we are a human then we have to set up a username and a password to later log into our database I want to set the username to a Florian I keep the passport here and we click on create user then we have to add the IP address from where we want to connect to this database in development we are connecting from our local machine from our computer right so we have to add our current IP address with this button but this is already done down here and we have set up a user and everything then we can click on finish and close and then on go to a databases and now we have a hosted mongodb database I like mongodb Atlas because they take care of a lot of stuff for you and that you otherwise have to configure yourself like for example replica sets which as far as I know are additional observers that contain the exact same data as your database just in different locations in case one of them goes down at least this is how I understand it but this is already set up in mongodb Atlas by default okay and now what I want to do is I want to go to our collections which we can do over this button you can also click on data services here and of course we don't have any data in our database yet but I want to add some data manually I want to add some products here to work with and later we will add the page to our website where we can add products over a form but for now we add them manually we have to give the database a name I'm going to call it ecommerce we want to create a collection called products and we don't want to change any of these additional preferences we click on create and now we have this products collection here and here we want to add one product which we can do over in the document okay and for now we will just use some dummy data but the names of the fields are important because we will create our Prisma schema from the documentary Creator so we have to decide what fields we want to have in a product document we want each product to have a name right just gonna call this product name again this is just dummy data for now then we add another field this one will be the description product description each product we have in image URL which I spell in camera case like this and for now I just write hdps colon slash slash um product minus image Dot come whatever this is the URL and this is just a placeholder for now doesn't matter then we add the field for the price and all of these fields are strings by default but we want to change the price to Aint 32 so this is a number and again we put the placeholder in here 999 doesn't matter but we store the price as an integer not as a float even though a price can have decimals for cents but you can't store prices as floats because floats are not exact if you want to know why floats are not exact you can Google this but you should store prices in zense this way we always have the exact number so this is why we don't select double or decimal here but the normal int okay and we insert this dummy product into our database and now it's here in our products collection and as I already mentioned we use Prisma to work with our mongodb database this is a library that we can use in next.js or also in node.js and this just makes it easier to work with our database because it gives us a nice client on which we call these different functions for the different database operations it gives us types and everything and Prisma is a very popular one especially for next Js again the installation and set up for Prisma is described in the Prisma documentation but I will show you each step in this video so we go back into our project and we already installed the package for Prisma now we open the command line again entry execute npx again not npn but npx Prisma in it spell it out exactly like this we execute this and this does two things for one it created this dot end file with the database URL here inside it but this is not the correct connection string as you can see this is just a placeholder we get the correct connection string out of our Atlas backend here somewhere here is a button that says connect I think we see it when we click on data services here's the connect button and here on drivers we can find this connection string we can ignore these other instructions because we don't use the native mongodb driver we use Prisma to work with our database but we need this part here so we copy this into our project entry replace this part here in the string then we also have to replace this part here with the angle brackets for the actual password so we paste this in here and we also have to insert the database name here after the slash this is the name we gave our mongodb database so let's see here I think I call this just ecommerce right you can see this in the collections here this is the name we care about we enter this same name here after the slash otherwise this creates a newer database but we want to use the database that we already set up then we can delete these commands up here they are a bit confusing and unnecessary and then we also want to add this dot end file to the git ignore so that we don't push our database credentials to GitHub so we open the dot get ignore can scroll all the way to the bottom and add dot end here and now this is grayed out which indicates that this file is not pushed to GitHub now normally in the next JS project you put your credentials into this dot NF dot local files and project configuration goes into the dot end file the problem is Prisma by default doesn't look into this inf.logger file it looks into the normal end file so the easiest way to handle this is to just put our credentials directly into dot nth this is the same what we also do in a normal node.js project because otherwise we have to add additional packages and configuration to make Prisma look into this dot local file but I don't want to do this here and it's also not necessary because putting credentials into the normal.n file is totally fine you just have to make sure that you put it into the git ignore file so you don't push it to GitHub okay and the second thing that the press my Inlet command that we executed earlier did is it created this Prisma folder here with this schema.prisma file inside it here we want to change the provider inside data source DB not appear in the client but down here from broadcast SQL to a mongodb because we are using a mongodb database and you can also use Prisma with SQL databases and this is the part here that makes Prisma look in the end file for this database URL here that contains the connection string so the spelling of this variable has to be the same as whatever is entered in here and as you can see we also have syntax highlighting in here just like a normal typescript code for example but this only works because we installed the Prisma extension earlier this gives a syntax highlighting Auto completion formatting and so on otherwise the escort would handle this like a plain text file okay and here's a very cool thing we can do we already added the damier product to our database right and we added the name of the database to the connection string Ecommerce now we can tell Prisma to pull the data that we added to our collection and generate a schema from this data so we don't have to set us up ourselves so remember we have a name description image URL which are all strings and this price which is a number now in the command line we can type npx Prisma this is the exact command we execute this this shows an error because I haven't saved the changes to the schema.press modifier yet so we save this file and execute this again now it should work it opens this window here because we have to allow this to execute on windows so yeah just click on allow access and you won't have to do this again in the future here it says introspected one model and wrote it to a schema.prisma and as you can see now we have our products model here with the name description image URL and price the correct types and the idea is set up as a mongodb object idea this is called introspection this way you can invert the Prisma schema from the data you already have in the database but you can also do it the other way around you can also make changes to the schema and push these changes to a mongodb and we actually want to do this now because I want to add some more stuff in here that we can't really generate through introspection we want to add this created add timestamp which will be of type date time and again we get Auto completion because we installed the Prisma extension and then afterwards you write dot add default and in here we pass now which is a function this means when we create a new product it will automatically set the created timestamp to the correct time and then we also add an updated ad timestamp which again is date time until we add this updated ads annotation which takes care that this timestamp is automatically updated when we modify a product and now we have the formatting keyboard shortcut which on Windows is shift alt F we can format this file but they want us to configure a default formatter let's see here yeah here we select Prisma which is the Prisma extension and now it formats this file properly I don't know what the keyboard shortcut to format is on Linux and Mac but you can Google this if you don't know it there's one more thing I want to do on so our collection is called products right this is the same name our collection SEO and you usually call this the plural of the word because this contains multiple products but when we work with our data in our app we want the operations to be called on dot product and not DOT products for example I want to call product.create or product.find and not products.create because the program is a bit misleading and I also want the model name to be capitalized so we change the model name to a product singular but now we have to tear Prisma to what collection this is connected right because this collection is called products the name is different we can do this by going down here below the last field and then we write two ads map and here we can add the name of the collection lowercase products and plural now this model is connected to this collection and this way the model and the collection can have different names and now instead of pulling the changes from the database into the schema we want to push the changes from the schema into the database so instead of DB pull we execute npx Prisma DB push so that these changes will be applied to our mongodb database let's execute this okay it says that the database is already in sync so it seems like the changes we made in our schema doesn't require any changes in Atlas but it also doesn't hurt to execute this throughout this tutorial we will make some more changes to our schema here so this is not the last time we have modified this and we want to execute one more command npx Prisma generate make sure to spell it correctly and then we run this this generates the Prisma client which you can use to call our different database operations on and whenever you make changes to your schema like we changed the name of the model here then you have to regenerate as Prisma client so that you can use this new model in your code and you get Auto completion and everything but again we will do this a few more times throughout this tutorial so you will understand when you have to do this next we need to initialize this Prisma client like it is shown down here by calling the press my client Constructor and we want to make this prismaclient reusable throughout our app so we put this into a separate file for this we go into the srz folder here where all our project source code is in in here we create a new folder called lib lib is just a naming convention for a folder where people usually put like utility functions for example or functions that use other packages like Prisma in our case but it's up to you what folder structure you follow in lib I want to put another folder called DB just for organization DB obviously stands for database and in here we put a file which we call prisma.ts this is a typescript file to use Prisma in development mode and xjs we need a little bit of special configuration which is described in the Prisma documentation because when we save a project the app is restarted right and we don't want to set up a new Prisma client every time this happens so we use the code that is described down here this sets up a new Prisma client and adds it to This Global this object which is just a way to make this client globally available as a Singleton throughout our app and only if the Prisma client doesn't exist on This Global this object then we instantiate a new one and this is only executed in development in production this is not necessary so back into our project I paste the code we just saw you can pause the video and type this out by hand or again copy it from the GitHub repository and then I press the shortcut again to format this file you don't have to do this but the cool thing is that since we have pretty uninstalled it automatically adds semicolons for example and it also replace the Zinger chords for double quotes because again prettier is an opinionated chord format so they make some decisions for you like not using single chords for example but again if you use this or not it's up to you I recommend that you use it and now we are ready to use Prisma in our project and our database is already set up so now the fun part can begin now we write actual code just one more thing I want to delete our dummy product here we only needed this for introspection but we will later add actual products through our app so let's delete this document and in the next section we will add our first page to our website a page where we can add a newer product and for this we will use next.js server actions so this will be really interesting okay so back in our project we open the terminal again and we want to start this project in development mode with npm run Dev then we open localhost 3000 to see our website and I put this in split screen so that we can make changes to our website and see these changes live I want to add a new page to our website over which we can add a newer product because without products we don't have anything to display right so we open the right bar here and then in the app folder we create a new folder called add minus product and in here we put a fire page dot TSX this way we can create a page under localhost 3000 slash add minus product if you don't know how routing works in the next js13 app router then I highly recommend that you watch my Nexus 13 beginner tutorial first because there I explain all of this why we have to create a page.tsx file how we can create nested subroads and so on in this tutorial here I will assume that you already know this stuff okay and in here we can write the code for this component for this page so we export a default function entry carlet at product page as usual the name of this component does not matter the only thing that matters is that we export it from a page.tsx file and from this component we want to return some UI right so let's put a div in here and let's put in H1 in here a headline that says add product let's save this and now we should be able to navigate to a localhost 3000 slash add product which is the name we gave this folder where we put this page file in and there's our headline and now we can style this headline using class names and if you haven't used or heard of Tailwind CSS before the way this works is that we don't set up CSS files instead we write our CSS directly in here by using different utility classes that each fulfill a single purpose for example we want to make this text a bit bigger so we can type in and now we get Auto completion because remember we earlier set up Auto completion inside strings in the settings and together with the tailband we escort extension we get this Auto completion here which is really useful for example we have text LG and here you can see what this actually does which CSS attributes this actually changes this sets the font size to this 1.125 Ram so when we add this and save our changes the font gets a bit bigger you can also hover over one of these Tailwind classes to see the CSS that this applies it changes the font size and the line height as well again this only works if you have the Tailwind extension installed where do I get these classes from well either you can just see what other completion suggests to you and sometimes this is enough but often you just have to look in the Tailwind documentation so they describe all these different classes that you can use at first this can seem overwhelming but you actually get used to this very fast and you don't have to read all of this you can just Google for Tailwind box Shadow for example or you can search in the quick search here and then you will find the necessary classes you have to use to apply a box Shadow for example so let's add some more we want to make the text bigger we want to add the margin bottom for which we have this MB minus classes we use MB minus three this adds a bit of margin to the next element below but we can't see it yet we also want to make the text bold which we can do with font minus bold and since we set up the prettier extension for Tailwind earlier we can now reformat this code with our formatting shortcut again on Windows this is shift IDF and it will automatically reorder these classes here to the appropriate order as you can see it put the margin button to the front Tailwind has a special convention for the order of these classes I don't know what the rules exactly they follow but the prettier extension makes sure that the same order is applied everywhere which really makes it easier to keep an overview over these Clauses then below the H1 I want to put a form and in this form we will later enter the product information to create a new product in our database so this is a normal HTML form tag and in here we put an input which we can give a selfclosing tag with a slash and a closing angle bracket and we want to add some props to this input when we save this I think we should already see something here we have this very not good looking unstyled input here we can style this again with K1 classes by adding the class name prop so I want to add some Merchant bottom to this input and I want to set the width to 100 for which we have this W of foil table class when we save this the input field gets the margin and the full width now one downside of raw Tailwind is that you start with completely unstyled elements right and you have to Define all this yes as yourself this can be a bit overwhelming because you often have to add a lot of classes to create a UI that looks good this is why we also use Daisy UI in this project this UI basically adds more convenience classes that we can use to style different components for example somewhere here is a text input this is what we want to add to our project and this one here looks better than the one we have right now right and let's say we want to use text input with border here we can see the jsx we already have an input and here are the class names and this input and input border classes are coming from this UI they simply combine multiple Tailwind classes into a single one so that we don't have to install all of this from zero so let's try this out input and input boiler let's add them here import let's hover over this and as you can see it contains quite a lot of CSS and we want input bordered when we save this our input now looks much better of course we still need some padding here so that's the input field doesn't go all the way to the edges of the screen but we will take care of this in a moment and again we can use the formatting shortcuts to reorder these classes properly so input border moves to the front followed by the remaining classes okay but we still want to add some more props to the input field here for one we want to make it required so that we have to type something in before we can send this form this is taken care of by the browser we have to set a name this way we can get the value out of this input field later and the name will also be named because this field will contain the product name let's also set the placeholder let's set it to name as well and when we save this we get this placeholder here we can type something in and later we will get the product name out of this input field again I use the formatting shortcut to format this properly and it also puts the closing tag into a new line I really like prettier for this reason it also does stuff like adding parentheses automatically so if we remove these parentheses here from the return statement and put it like this instead and use the formatting shortcut again it adds these parentheses automatically and I really like this because it helps you keep your formatting consistent throughout the whole project okay and below our first input field we put another input field for the product description but since the description is usually longer we don't use an input field we use a text area which is basically a big input field where we can put in larger amounts of text over multiple lines we make this required as well reset the name to description and the placeholder as well just with an uppercase deal which by default looks like this we can change the size of this which is really cool but of course the one is stylus using Daisy UI and Tailwind classes Daisy UI gives us text area and text area border and then again mb3 and W foil and now it looks like this with rounded corners and some highlighting then we need two more input Fields below for the image URL and the price so let's copy the input field that we already have paste it two times because the styling will be the same we change the name of the third one to image URL like this we change the placeholder to image URL as well in readable form and then we can set the type of this input field to URL this way the browser checks that we actually put something in here that looks like a URL with https and so on otherwise the browser will not accept our input which is really useful and this down here is of course the price we set a placeholder to price as well entries that the type to number because this way we can only type numbers in here and no other characters now one thing that happens when you use Tailwind is that you often have repetition between classes for example all our input Fields here have the same margin bottom and width class applied to them right now you might be inclined to try to get rid of this by creating abstractions like separate components that already include these classes but this is actually not necessary and you shouldn't do this too earlier the Taiwan documentation actually talks about this and one thing they recommend is to just use multicursor editing for example if we want to change the margin of all our input Fields here we can just click on the first one and then in vs chord we can press Ctrl D or command D on Mac to select the next occurrence of this word now we have all four Merchant bottom three selected and we can change all of them at once to a different value if you want so this is how you can work efficiently with Tailwind classes even if you have to repeat yourself below the last input field but still inside the form we add a button which was there at product then we go into the opening tag of the button and we set the type to submit and when we have a button with type submit inside the form it will automatically submit this form when we click this button this is just default HTML behavior and this down here is our Button as you can see entailment by default nothing has any style applied to it so right now it just looks like normal text so let's add some class names to style this button we use the daisy button class BTN which Styles this like a gray button we can add some color with BTM primary and I also want this button to take up the full width so we also set this to BTN block which I think just sets a width here of 100. and now it looks much better is our form is ready but again we need some padding on the edges of the screen it looks a bit weird right now but instead of doing this inside this page I want to do it in the layout TSX file remember from my next JS beginner tutorial that this is the root layout it's located directly inside the app folder and this wraps all pages throughout our whole website to be more exact our pages are inside this children component here and this is rendered inside this HTML body and in this layout we can add styling that we want to have applied throughout our whole website for example by default this Intel font from Google fonts is applied to the whole body be at this class name here and this body wraps all pages right now I wanna wrap children into another attack the HTML main tag because each page contains the main content of the page and we will later put enough bar Above This main tag and the footer below for now I want to apply some styling to this main tag again this styling will wrap all pages for example I want to add some padding which we can do with this P minus 4 class now it already looks much better I also want to have some Max and Min width applied to all pages because as you can see this takes up the full width of the screen no matter how big the screen is I want to constrain this for this again we have different Tailwind classes available next minus W lets us set a Max width and I want to use the largest one here which is 7xl and we can see how big this is when I zoom out a bit because when I record my videos I always increase the size on the screen of everything so it's easier to read this is to realize this page and form have and this is also the size it should have on your side so now our Pages don't get bigger than this anymore so this is a 1920 pixel Monitor and Max w7xl is 2080 pixels but of course you can play around with this and use another value if you want but of course I want to have this part here Zen dot on the screen right we can do this with margin order which we set with M minus Auto now it is ascended on the screen and I also want to set a Min width which we can do with Min minus W1 but here we don't have as many different options available there aren't any classes by default for different screen sizes like we have for Max width but we can actually set an arbitrary size and this also works with Max width this also works with other attributes when you want to do this in Tailwind CSS we can add the value in square brackets like this after another minus and in here we can write 300 PX for example for 300 pixels now we set the main width to this arbitrary value of 300 pixels and now when I make the screen very small the page itself never gets smaller than 300 pixels because we don't want to scratch it too much but again you can play around with these values and use other values if you want as usual we can press our formatting shortcuts to have pretty uh realign everything properly and then I also want to change the meta data here in this metadata object we change the title from this default create next app to a flomazon I explain metadata in my nextjs 13 beginner tutorial this will now be the title of the page when we save this we can see a flowmason appear in the tab and this will also show up for example when we paste a link to our website on social media let's also change the description and I set this to our tagline which is we make your wallet cry because we are in ecommerce app so this way we change the metadata throughout our whole website so all pages now have this flomas on as the title and this description which shows up on social media but we can also modify the metadata for specific Pages like for our ads product page for example we go all the way to the top above our component and we export this const metadata here as well you have to make sure that the spelling is correct are lowercase otherwise next.js will not recognize this and here we just want to overwrite the title to the name of the page add product minus and then again the flomas on and when we save this we change the title but only for this page on all other Pages we still have the default flowmas on title and as a reminder as long as we don't use the use client directive at the top of the file this whole component is rendered on the server if we were fetching any data in this component then this data would also be fetched server side and the client would only receive the finished page with the data inside it but here we don't fetch any data it's just static HTML and now when we submit this form we want to store a new product in our database right one way to handle this would be to turn this into a client component so that we can interact with this form clientside and execute JavaScript we could take the input of this form and send it via a fetch request to our own server endpoint which then adds the product to the database this is the usual flow why do we need a server endpoint where we can't make database operation on the client why because this requires us to connect to our database so we need our database credentials and we can't expose our database credentials on the client otherwise the user would be able to do anything they want with our database this is where we have to Route requests like this over our own server so the server actually has the connection to the database and the user can just request to add this object but they can't mess around with our database so again normally we would set up an API endpoint here in our next JS project which we can do with route handlers alternatively you could also set up a separate server like an Express server for example that runs on a completely different project then we would turn our page into a client component so that we can execute JavaScript which is necessary to make a fetch request to our server we would send the product data there and the server would then insert this data into the database but as you already see there are a lot of steps involved and next.js recently introduced other actions which are still in Alpha right now and in a nutshell they are basically a way to do a server mutations directly in our components without having to set up an end point so this is just more concise because we basically just put a function into our component and we can call this function it's very intuitive and it's less work than setting up a separate endpoint so let's go back into our project and see how this works we can declare such a server function directly in a server component if we had the US client directive at the top of the file we could not put it in here but since we don't have any clientside features in this component we can put our server action directly into this file it will be an async function because we make a database operation and let's call it add product we can call the server action from a server component via this form here by adding the action attribute this way we still don't need any JavaScript this fully Works in a server component and here we simply pass our ads product function now when we call this function we get sent the data as form data so we create a parameter form data and it will be of type form data then at the top of this function we add this string that says use server this is very similar to the use client directive that we have to put in a client component this states next.js that this is a server action otherwise this will just not work and in here we can do a database operation so we can cut a weight then we use Prisma which we import from our libdb folder that we set up earlier then when we click dot with the product here where is this coming from this is coming from our schema because we call the model product and this is connected to the products collection in our database if you don't see product then make sure that you executed this npx Prisma generate command that we run earlier because this generates this Prisma client and whenever you make changes to your personal schema you have to recreate the client with the new functions available I want to start this again with npm run Dev and on here we can call functions like create for example to create a new document and we add the data of this document as an argument Within calibrases now in the server function we are allowed to call prisma.create which again does a database operation if you try to call Prisma create in a client component for example when we click a button then this will not work because again database operations can only be done on the server even if you try this you will get an error message because Prisma protects you from accidentally exposing your database credentials on their client so it will throw an error if you try to do this but inside a server action we can do this because this will only be executed on the server this code here never gets to the client so again this is the same as if we would have set up an API route in next.js or a server endpoint in Express for example this is a little server endpoint to make pulse requests on and inside create we can pass data another pair of curly braces and in here we put the actual data of the product we want to create so the name the price description and so on but of course we first have to get the data out of this from data object here so let's go above we can get our values out of the form data by their name we gave this input fields it looks like this we create a cons name equals from data dot get and here we pass the name of this field which in this case is name and this value is now of type form data entry value we can get the actual input by calling to a string on it now the input can be empty so this adds the save call Operator so name is string or undefined later we will also learn how we can call these server actions from client components this is actually possible and then we get the data not passed as form data but as normal arguments you will see all of this later when we call a server action from a server component then we basically have to do it over a form action because this doesn't require any JavaScript and this passes us the data in form of form data okay let's get the other values out of here as well cons description equals form data.get description and again recall to a string then we do this for the image URL and for a price but the price is a number so we wrap this into this number Constructor which passes the number string into an actual number so in here again we pass form data get the name of this field is price we don't have to cut to a string because number can actually handle this value but again from data get can return undefined in which case the number will throw an error so we add a fallback value here with two vertical bars and then we add the zero so this will be the fallback value in case the price input is empty just so that we don't get an error but since we made all these fields here required with this required prop I also want to check in This Server action that we actually got these values otherwise we will throw an error because we don't expect any of these inputs to be empty so let's check if exclamation mark name or exclamation mark description or the image URL is missing or the price is missing then this is invalid input so we will throw an error which was a missing required Fields or whatever you want us to say so now since we checked that these values are defined down here they are guaranteed to be defined so now we can pass the name the description the image URL and the price to Prisma and this will create a new product document with this data and after we added the product I want to redirect to the front page so we call this redirect function but this import here is wrong when we select this it adds the import like this but we want to import this from next slash navigation this is the correct one and then we want to redirect to the front page which we can do like this so now we have some very simple validation here if I try to send this without typing anything in then the browser shows us a message here and it should even detect when this is not a valid URL those are the native browser validation methods that we are using down here with required and the type prop if you want to use something like react hook form here for validation then this is also possible but for this you have to make this a client component because this requires JavaScript but I want to keep this page a server component to show you how you can use server actions from server components later we will also learn how to cut server actions from client components and then you can do everything that requires JavaScript but again in the server component you use this form action here and this simply sends the form data to the server action and later we will also protect this route so that we can only add a new product if we are logged in but we haven't implemented authentication yet we will do this later now one more thing we have to change before we can try this out since server actions are still in Alpha we have to enable them explicitly which we do in the next config file here we go into this next config block we add this experimental block colon curly braces and then here we have this server actions field which we set to true this way we can use server actions in this project one more thing we will have images in our app that we will load from unsplash.com this is just a nice website where you can find free images and we'll use this for our product images if you watch my next JS beginner tutorial then you know that we have to allow the URLs where we want to load images from and we do this also inside the next config you can put it above or below experimental doesn't matter I'm gonna put it above we have this images field again colon curly braces we add a comma here and in here we have this remote patterns value to which we pass an array repairs an array of JavaScript objects so square brackets curly braces and in here we can define a hostname you can add multiple of these if you want to load images from multiple sources and the Base address where we load these images from we add this as a string as images Dot unsplash.com if we don't do this then we will get an error later when we try to load these images so we'll save this and then we have to restart our Dev server it stopped automatically if it didn't press Ctrl Z confirm with wire and execute NP and run Dev again otherwise the changes of next config will not be applied okay now let's add some products and to show you that this works with our JavaScript let's actually disable JavaScript you don't have to do this I just want to show this to you so in the Chrome Dev tools I can press Ctrl shift p can search for disabled JavaScript and just to make sure that this is applied I refresh the page but we have to keep the Chrome Dev tools open when we close the JavaScript will be enabled again again you can get product images from unsplash just go to unsplash.com and search for I don't know product images and use any of these here just open them right click copy image address and then you can use this here as the image URL for the name description and price you can write anything you want I have already prepared some data so this is the title just gonna copy paste this here a description and by the way I use chat gbt to come up with funnier product titles and product descriptions so I didn't come up with this myself so the image here is coming from unsplash again you can copy the image URL from there and I set the price for example to 999 which is 9.99 remember that JavaScript is still disabled but when we click add product all of this should work we don't see a loading indicator yet we will add this later but we get redirected to the front page so it seems that this worked let's check our database so in Atlas in our products collection we should now see one entry with this data we inserted and it automatically generates the created ad and updated ad timestamps so this worked and we executed this over our server action here without having to set up a separate server endpoint and without any JavaScript but when we added the product we didn't have a loading indicator right which is not great because we usually want to see that some request is running right now we also want to disable the button so that we can't click it twice now we can't put a loading State into our server component here because the loading State requires JavaScript and state and those are client component features but in a client component we can't put a server action at least not directly in there like we did here but what we can do is we can make only the loading indicator a client component and we can use a special hook to hook into the loading state of this form here even if the form itself is in a server component this is a new hook their introduce just recently it's also still experimental but I want to show you how this works so you know all these different apis that we have available so I want to put the loading indicator directly into this button so we extract this button into a separate component and make it the client component so that we can put the loading state in there to make this button reusable let's put it into a separate components folder not into our app folder here so I right click on sr0 entry Creator components folder in here we put a new file which we call from submit button.tsx but of course the name is up to you this will be a client component so we add the use client directive at the top again I explained this in my next JS beginner tutorial then we want to export a component function from here form submit button we want to add some props to this form submit button so we create a type that we call form submit button props equal sign curly braces now if you watched my other next.js and react to turrets then you know that I usually make these props in interface and not the type because it's generally recommended to use interfaces until you need a type but here we do need a type wire because I want to extend this type and you can't do this with interfaces I want to go down here after the closing curly brace right ampersand component props which is then import from react like this and then we add a type to component props which we do with angle brackets and then here we press button as a string component props is a really cool convenience type that we can use and react this way our form submit button will not only accept the props that we put into the form submit button props but also all the props a normal button accepts for example you can disable a normal HTML button with the disabled prop right and instead of putting this value in here directly we can just say okay we want to accept all the same props in normal button expects and this is what component props does again this only works with type and not with interface this is why I made the props a type this time okay but we still want to add two or more values right in our form submit button props the first one is the children prop of type react dot react node in case you don't know what the children prop is this allows us to pass a component between the opening and the closing tag of another component so in the normal button we enter the text inside the opening and the closing tag right like add product for example and we can do the same with our form submit button via this children prop so whatever we pass in here between the opening and the closing tag of our form submit button will be passed via this children prop this means that the name of this prop has to be spelled like this if you change this then this will not be recognized as the children prop anymore and we also want to be able to pass some styling to this button from the outside so we pass a class name but we make this optional with a question mark so we don't have to pass one and this will be of type string this way whenever we call this from submit button component and use it somewhere we can pass classes from the outside if we want but we don't have to okay and then we add these props here inside the parentheses of our form submit button so we wanted to structure them with curly braces as usual colon we set the type to form the mid button props and now between the curly braces we have children and class name and then we want to return some UI in this block down here right let's keep it simple for now just to see that this works we just add a normal button here between the opening and the closing tag we add the children because we want to render the children that we pass to the form submit Button as the children of the button we render in here let's save this and see if this works we go back to our page entry replace this button here for our form submit button save this again so it seems to work because we still have a button that says add product but it's unstyled again because we haven't added any styling to this button in here yet so let's finish this let's go in the opening tag of the button and add a class name here but we remove the quotation marks and put curly braces here instead because this way we can put a back text string in here a back tech string allows us to use normal string classes like BTN and BTM primary but we can also put our class name in here additionally because in the backtake string we can put a variable with a dollar sign and curly braces this way both the button classes but also our optional class name String are applied to this button let's try this out as well let's save this and you can immediately see that the styling changes but this also means that we don't need the BTN and the BTM primary class on our page anymore because they are hardcoded on this from a bit button but we don't want to hard code the button block value because I want to keep this optional so we pass this from the outside as the class name prop instead okay cool then I also want to set the type of this button to submit which of course again means we don't need this prop here anymore okay so now our button works the same as before with the same styling and now we want to get the loading state in here and as I already said there is an experimental new hook that we can use to get the loading state of this form here where the storm submit button is placed in even if the form itself is in a server component it's enough if the submit button is a client component so we have to add another import curly braces from reacts done so this is not coming from next.js this is actually coming from react 18 and in here we should find experimental U.S form status but afterwards we also add s and we rename this so that we don't have to use this awkward long name here in our code we rename this to just use form status then we can use this hook in our component so again we destructure a const and we call this use form status this automatically hooks into the parent form of this button and in here we have different values we care about pending which is the loading state so when we submit our form until our server action here has returned its pending will be set to true and we can show a loading indicator I also want to disable the button while this is loading so we set disabled to a pending and I also want to show a loading spinner here right next to the text inside this button and for this again we have Daisy UI classes that we can use somewhere here should be a a loading indicator and they are different ones available you can choose whatever you like I want to use this one here so back in our code I put this inside the button tag so between the opening and the closing tag above the children we add an expression in curly braces if pending is true so pending to Amazon science then we want to render this band with this loading indicator so this is a span with a safe closing tag which gets the class names loading and loading spinner we let prettier we format this properly so this loading spinner will be shown while pending is true and pending is coming from the form status one more thing we have to do we accept these component props from the button right but right now we don't apply them to our button here in order to do this we go right here where we are destructure our props and we write dot dot dot props this way catch all the remaining props that we pass to our form submit button which don't have explicit names so all the props that we pass for the button component props basically this is this syntax we have to use for this and we also want to apply them to our button here right so we go in the button tag again and we do this all the way at the top as the first prop this way the other props that we pass below will overwrite these props because we usually want these ones to have priority over whatever button props we pass so we pass the rest props as the very first argument curly braces again we write dot dot dot props now all these props that we pass here will be applied to our button tag okay let's save everything and then try this out again so now in this page we are using our form submit button it should still work the same but it should have a loading indicator and it should also be disabled while the server action is in progress so again I'm gonna copy some data over again you can insert anything you want here I already have a title and a description and an image URL prepared and I'm going to set the price to 19.99 and now when we click this add product button it should be disabled and should show a loading spinner and this works and after it's done we get redirected to the front page and we should see our new data in the database and there it is okay let's add another product and let's check what actually happens in the network tab when we execute the server action so I want to go to the ads products page again add a new product again I'm gonna copy paste all of this over price five dollar and maybe it's a good idea to disable the redirect for a moment so that we keep the data in the network tab so I'm going to comment this out but I will add this back later let's run this with the network tab open and here we have our add product call and in the headers tab we can see that this actually makes a post request to the same page but this is basically treated like a server endpoint a post endpoint so this works just like a normal server endpoint where we send a post request tool just like this endpoint is not on a separate address it's on the same address as this page okay let's confirm that this newer product is also in our database yeah that is let's add the redirect back in and lastly for this section of the tutorial I want to send up an error page which will be shown if something goes wrong in here and we actually throw an error this should usually not happen because we have input validation clientside and Prisma database operations also don't fail unless the database is actually down but we should still have a custom error page and if you watch my next JS beginner tutorial then you already know how this works we put a file with a special name into the app folder so right click we have to call it error.tsx this way next.js automatically turns this into the error page which will be shown when something goes wrong for example if a fetch fails in a server component or a server action the error page has to be a client component so we add the US client directive at the top and this is always the case for error TSX and xjs they always have to be in client components I'm not sure why I think because of the way the error is passed to them but they have to be client components export default function let's call it error page again the name is up to you and here we just want to return some very simple UI a div that says something went wrong please refresh the page of course you can make this more sophisticated if you want let's actually try this out so let's say here in our server action we just pass a test around buzzinga we also have to comment out this part just for a moment and now when we send something here we should see our error page something went wrong now I think they are also planning to add an error field to the use form status hook so that we can get the arrow in here and handle it clientside instead of redirecting to this error page which can be a bit of a jarring user experience but right now we only have the loading state in here there is no error state in here yet so the easiest way to handle errors clientside and server actions is just to file back to this error page but again usually the user shouldn't get there so let's remove this again and now that we have some data in our database we can change our front page and render our products here right so let's do that next okay let's go to the home page which is the page TSX file that's the direct child of the app folder this one here that contains the home component and then let's remove all of this crap here and set it up from scratch so we added div and the return block and then we make this an async function Remember by default pages in the app directory are server components unless we add the use client directive meaning that we can do a database operations and all kinds of asynchronous stuff right inside this component because this will be executed on the server not on the client and just like any server action making database requests and using credentials and here is also save because they will not be leaked to the client this means we can just call Prisma here so let's create a const products to fetch all the products from our database and assign this to await Prisma which again we import from our lip folder dot product dot find menu parentheses curly braces and here we can add a filter or a sort order entry wanna order products buyer colon curly braces and I want to order the products in descending order so that we have the newest one at the top now we could order this by the created ads timestamp right but it's actually better to use the idea why because the ID also contains a timestamp but the ID is unique reverse theoretically two products could have the exact same time stamp so when you want to order documents in mongodb by that timestamp it's better to use the idea colon and then in here we pass the ESC for descending as a string so now we order these products by the idea in descending order with the newest one at the top and then we want to render our cards for each of these products right and for this again we use Daisy UI which contains this card component that we can use so let's go back into our project let's put it in the components folder because we want to reuse this in different places let's call it product card dot TSX we export default function as usual with the same name this product card will also take a prop so let's create an interface again you can use a type or an interface it doesn't matter but it's usually recommended to use interface unless you will need a type we needed to type earlier tour combine it with component props but here an interface is enough let's call it product card props and each product card will take one product as input and the type of this is product with a capital P we didn't get other completion but we can get the product type from our database through an import from Prisma so import we destructure this from at Prisma client and in here should be the product type that's coming from our Prisma schema the whip has one of these products to our product card read this structure this here so that we can render the information of this product in this card for now let's save this and let's render one of these product cards in our div just a single one for now so that we can see the card on the screen while we are building the UI so in here I'm gonna put a product card and for the product for now we just hardcore the products at the index 0 so the first element here again just so that we can see it in the UI where we are building it we saved us but we still have to return UIL from the product card so let's put a return statement here I want to make the outer element of this card a link and next link so that when we click this card we get forwarded to the product page so we are at the next link here we set the href to a string to the page where we will see the details of this product we haven't set up this page yet but we will do so later we will put the URL at slash products slash and then we append the product idea so Auto completion or product idea and to this link we add the class names that style this card and I think we also have to refresh the page here to show our changes okay the development server isn't running right now so I restart this refresh the page again and we don't see anything yet but we will see something in a moment so this link gets the card class which is coming from this UI we said W minus full to make the card take up the full available width we will later display this card in a grid we said BG and base 100 this is the background color will be a light whitish color I also want to set hover colon Shadow XL this is the class name implies adds a shadow to our card but we have this modifier here have a colon it only applies the shadow when we hover over the card with the mouse you will see this in a moment and then we can also add a transition for the Shadow with the transition Shadow class okay let's close this link tag and in here we render the contents of the card let's see how this looks if we just put some text in here for now this is the card we have our Harbor Shadow effect but of course this doesn't look great yet so let's remove text and instead we add another diff in here inside the link with the contents of the cards we add a class name to this Auto diff called card minus body this adds the appropriate padding and everything to a stylus card body and in here we put an H2 headline but again in Tailwind CSS all components are unstyled by default including buttons and headlines so to style this properly we add the card minus title class and in here we want to render the name of the product which we get from the product object that we pass to this card okay let's save this see how this looks already looks better right and we have the square hover Shadow effect with a transition you can play around with this you can try out different styling different Shadow values but this is fine for our card here below the H2 I want to put some more text with the paragraph tag in here I want to render product dot description which looks like this this is coming from our database and then I also want to add a price tag for this first of all we need to set up a function that formats the price properly because remember the price is just stored in zens but we want to show it as dollar we can put this function into the lip folder here so let's right click on lip new file let's call it format.ts and from here we export a function that we call format price and to this we will pass the price as a number then we want to return the formatted value on so what we do is we turn the zens into a dollars first by simply dividing price by 100. then we want to format this value in US dollar which we can do by calling dots to a local string as the first argument we have to pass the local so basically the language to which we want to format this and we want to format this to en minus OS in uppercase like this so we formatted the string in American English then we pass a comma and the block of curly braces where we can do some configuration and here we can set the style to one currency entries that currency tour USD this will take care of formatting this price properly in US dollar with the US dollar symbol and the correct decimal point and whatever I think this is a bit better than doing it manually zombies lifters we can also reformat it with prettier then I want to create another component in the components folder called price tag.tsx again we will reuse this component in different places in here we export a default function price tag which will call our format price function that we just set up but to this component we are past the price tag props which needs the price which again is a number and again I want to be able to style this price tag from the outside so again I add this optional class name String here that we already saw earlier and then we pass these props to the price tag component and destructure them here and then down here I want to return S Pen which contains the format its price so between curly braces I call our format price function which we export from our lib folder and to this we simply pass our price and then we also want to style the span again with class names from this UI again we add the back text string here with curly braces and two back ticks this UI has this batch class yeah which states this like a little badge like a price tag and then we also want to put our optional class name in here and that's it for this component okay let's go back into our product card and here below the description I want to render a price tag and for the price prop we pass product dot price okay let's see the product costs five dollars and this is rendered by our format function with the dollar symbol and the decimal point but of course we also want to render the image of the product right we do this above the cardboard here still inside the card link and in the days the UI documentation they wrap this image into a figure I'm not 100 sure wire but it's best to follow this but in here we don't use one of these normal HTML images because in xjs we should usually use the next image which is an import from next slash image because these images are optimized they are automatically resized by next.js to the appropriate size and they have some other cool features that the normal HTML image doesn't have so for the sr0 so for the image source we pass product.image URL this is the image we want to show for the alt text we can pass product.name when we use the next image we have to set the width and height so next JS knows at which size it has to load this image we set this to 800 width and 400 height now since our cards are responsive the final dimensions of the image will actually be defined by CSS and not by these values here so our images might not be shown in 800 times 400. this is just the size at which we load this image so no matter how big the image is even if it's 4000 pixels next JS Ray resides it to 800 times 400 pixels and I picked this value because those are the largest dimensions in which this image will be shown later if we would make these Dimensions smaller then the image would be blurry if we would make them bigger then we will load in unnecessarily a large image and to style this image properly we again add class names h48 that's the height of this image in the cards we want each card and each card image to have the same height and then to not make our image distorted because the dimensions of the image inside the cards might be different of the intrinsic Dimensions that the image file has and to not distort this image with that object cover which basically xender crops the image so if the image is too big or has the wrong dimensions then it will just be cut off so it fits into our card image okay let's save this and there's our image and again this image changes depending on the screen size and here you can see the object cover in action there's one more thing I want to do in this product card if the product is newer I want to add a little batch that saves newer because this looks cool so above the return statement in the product count we create a const is newer and here we simply check if date dot now which is the current timestamp minus we want to compare it to the created ads timestamp of the product but this is a string and to turn this into a date we have to create a new date and to this new date Constructor we pass product dot created at which turns this into an actual date and to get the timestamp out of the state we call Dot get time and now we can compare to date dot now which also returns a timestamp and if the difference between these two is seven days you can of course also pick another value then I want to show this its newer batch so if date.now minus the date of the created add timestamp is less than seven days but those values are milliseconds so we have to calculate the days 1000 milliseconds times 60 seconds or one minute times 60 seconds or one hour times 24 hours are one there times seven for seven days so now it's newer will be truer if our product is less than seven days old and when this is newer we want to render a little batch which I want to put into the H2 attack here after the product name here we put an expression if it's new is true to Amazon science then we want to render another div in here that just stays new in all uppercase and we style this div to a batch with the batch and the batch secondary class name which gives it the secondary color that we set in our theme let's save this and there's the batch our secondary color is this yellow but now that I see it maybe it would be better if we don't place it inside the title right but rather below it maybe here I think this looks better so I put it below the H2O attack so our product card itself is done but we still want to render these products in a proper grid right so let's remove this hardcoded product card here and I want to render our product as a grid but I want to render the first product in the special hero view here that you saw in the beginning with this background and this button it just looks a bit cooler again this is coming from this UI so let's do it in here in this first diff we put another div for this hero viewer this inner div gets the class names hero rounded XL which gives this whole element rounded corners and BG based 200 for the background color and in here we put the next image which will load the image for the first product so again products at the first index dot image URL similarly at the IELTS text will contain the first products name we set the width to 400 and the height to 800 but again the final dimensions of the image will be defined by a CSS those are just the dimensions to which we resize the image before we load it to style this image we add the class names W foil we set the max width to SM so that the image at most has a width of 24 Ram we make the corners of the image rounded with rounded LG to LG and XL and so on are just the different values for the Border radius the rounded XL has a border radius of 0.75 RAM and LG has 0.5 Ram this is just up to your personal preference and I want to set Shadow 2XL to give this image a drop shadow and since this is the first image that we see on the screen above the fold and the most important image we add this priority prop which signals to next.js that it should load this image first you should use this on the yeah the largest image basically that is shown on the screen so let's save this and look what we see here where it doesn't look great yet we still need to show the product information and align this properly what we do is we wrap this image into another div so a third diff right here we put a closing tag below the image and restyle this div here with the class names hero minus content Flex call to make this a flexbox column where the elements are aligned below each other but then we also write LG colon Flex row and this is how you create responsive layouts in Tailwind CSS because this means on small screens this will be a flex column so the elements will be aligned below each other but as soon as we get to the LG break point which is a screen break point so a certain size of our screen then we use a flex row instead meaning that the elements will be a aligned horizontally instead of vertically so again whatever modifier we use here will be applied on larger screens and upwards and whatever we use with auto modifier will be used on small screens and we don't have to add a modifier for small screens here because this LG modifier basically means greater than or equal to one so if the screen is greater than or equal to LG then we will always use a flex row and if it's below that then we will use a flex call this needs a bit getting used to but this is how you create responsive layouts in Tailwind and then right below the image but inside this inner div we put another div for the text of this hero item this doesn't need any styling but in here we put in H1 that we start with text5 XL which sets the text size we use Font bold which is selfexplaining and in this H1 we want to render the name of the first product right so again products at the index 0 dot name and there's the title of this hero element and since the screen is so small right now and we are zoomed in this Flex coil is applied right but if I make this window big then Flex row is applied and these elements are aligned horizontally and on small screens they are aligned vertically you can also see this switch here when we reach this breakpoint and again this breakpoint is defined by this LG colon you can see in the Tailwind documentation what exact pixel its value this breakpoint has you can also modify this but this is not necessary for us okay let's finish the diff down here below the H1 we put a P tag which we give some vertical padding which we can do with py minus six why is the vertical axis for horizontal padding you can use PX and again and here we render products at the index 0 Dot description and there it is and then I want to add a button that brings us to the product page below the paragraph tag we put the next link make sure it Imports the next link we set the href of the slink tour slash products the same UI we used earlier slash and then the ID of this first product so products at the index 0 dot idea and we want to render this link like a button but you shouldn't make it a button first of all because this is a server component and we can't handle Clicks in a server component but also when we link to another page then we should actually render a link and not a button element it can look like a button but it should be a link which is important for accessibility you always want to use the correct HTML element but again we can style this as a button with BTN and BTN primary and then we close this link and here the link of course doesn't contain any text yet which we add between the linked tags check it out for example okay so this is now a link that looks like a button which brings us to the product page that we haven't set up yet and again this is responsive so on larger screens it looks like this on smaller screens it looks like this and below this hero item we want to render the grid with the remaining items just have to see in which diff we want to put this we want to put this below the hero diff here so below this one inside the outer div in here we put another div which we render as CSS grid again with Tailwind class names first off I will set my 4 which is a vertical margin again m stands for margin and y stands for the vertical axis so top and bottom we want to render a grid Drifter grid class and then we Define how many columns the squared should have and again this depends on the screen size right so we use different breakpoints we start with grit coils 1 for one column which will be applied on small screens on a medium sized screens MD colon we want to set create calls to Tool so we show two columns on slightly larger screens and then we add the third breakpoint XL and I figure this out by just playing around with different break points and see when it looks good on Notch screens we want to show three columns and to add some space between the Zinger cards in the script we can add the gap for our class so those are all the classes we add here then we close this div and render the actual product cards in here we already have the product card component set up right so here we can now put an expression we want to render all our products in here except for the first one because we already rendered the first one here in this hero view so what we do is we call products dot slice and pass the index one this way we turn a new array without the first element and then we want to take each of these product objects and map them to a product card right so in here we get past each product not produced but product and after the right arrow we add parentheses and in here we want to render a product card for each product if you don't know what map does then you probably haven't worked with react before and you have to watch a beginner tutorial first but this way we turn each of these products in the array into a product card that we can then render in the UI the product card expects the product object which we get passed by the map function and when we render a list we also have to set the keyer this is required for react to a rerender lists efficiently and here we have to set a unique value for which we can use the unique idea of the product and then we close this and when we save this there's our grid right now we only have three products in total so let's add some more over the edge products page so I'm gonna go ahead and add a few more products but I will skip this part in this video because you already know how this works just go ahead and add a few more products so that we can show something in our grid so I went ahead and added some more products and now we can see our full grid doesn't it look beautiful and each card has a hover Shadow and when we click the card we get to The Details page of this product which doesn't exist yet and this grid is fully responsive so on larger screens we have three columns when we make the screen smaller we get to two columns and eventually to one and this is the largest width at which our card images are displayed and this is around 700 something pixels as you can see up here this is why I set the width of the image in the product card to 800. this way we make sure that we always have an image that is large enough but not too large when we open one of these images in a new tab you can see that the width is approximately 800 pixels which again is the largest size at which we need this image which is shown when we only have one column okay later we will also add pagination to this page so that we download all products at once and as a reminder by default server components in react are statically cached meaning that all these products are fetched when we compile the project here in our server component and then even if we reload the page after we added new products we won't show these new products at least not in production in order to always show the newest products we have to revalidate this page but this will not be necessary when we later add the search param for the page that we are currently on because as soon as we add search params to a server component in xjs it's automatically dynamically rendered but don't worry if this is confusing to you right now you will see how this works later okay since we are already linking to our products detail page through our cards here let's set up this product detail page next so we go into our project and remember the URL for our products page was Slash products slash and then the ID of the product so in the app folder we create a new folder and again I explain how this routing structure works in my next js13 beginner tutorial we want to have a folder called products and then here we want another folder where we put the ID of the product because this is part of the URL so slash products slash idea and finally in here we put a file page.tsx to render a page at this path so let's set up the props for this page product page props and in here we want to get the ID out of the URL so that we can use this idea to load the correct product from our database right and we get this over the params value because params will contain the ID placeholder that we put into our path here suprams is another object which contains the idea which is a string and then we can pass this to our page component which then loads the product so we export a default async function here which we call product page and it takes the product page props in which we can find the params and we destructure this further with a colon and a pair of curly braces and in here is the idea right and this is a normal server component so we can make our database requests directly in here we create a const product we call await Prisma dot product dot find unique and this allows us to find a product by its idea in parentheses and curly braces we write real colon add another pair of curly braces and in here we pass the idea so we want to find a single product where the idea is the same as the ID we pass in the URL now the product we get back from this find card can be null because it might be the case that the product with this ID doesn't exist right and in this case we don't want to render an empty page instead we want to forward the user to do 404 not found page we already saw this not found the page earlier when we just enter any road that doesn't exist by default it looks like this but this is not great for one it's not styled at all but also no elements that we put into our root layout is shown on this 404 page so when we later put enough bar in the footer in here this navbar and folder will not be shown on the 404 page and it's a really bad user experience because they don't have anything to click they just see this empty page but if you watched my next.js 13 beginner tutorial then you know that we can overwrite this not found page and show our own one which will be rendered inside our root layout here so let's do that next for this we are add another file to the app folder which we call not minus found.tsx and again as for IDs special files the naming of the file is important because only this way next.js will recognize this as the 404 page this page will be very simple we export a simple component that we call not found or not found page the name of the component itself doesn't matter and here we simply return a div that says page not found again you can make this more sophisticated but I want to keep it simple here now when we open a page that doesn't exist it renders our own not found page and later our navbar in our photo will also be shown here so I know with this note found page in place we can also redirect to it dynamically which we want to do if our product is now for this we check if exclamation mark product so that's now undefined then we call this not found function which is an import from next slash navigation again this redirects us to the not found page the same one we see here on the left side but only if product is null and Below we can now render our products page because we know that the product now has a value so in the return block we render a div and we add some class names to this diff we want to make this a flexbox we want to render a flex column by default but again on LG screens and larger we want to render a flex row instead to make this responsive and inside the div we put the product image and then the name and the description so in here we put a next image make sure it's adding the correct import we set sr0 to the image URL of the product we loaded up here similarly we set the alt text to the name of the product we set the width and the height above to 500. but 10 CSS actually that's the final height of the image to the intrinsic height the image file has for example if the image has a width of 500 and a height of 200 then the image we see on the screen will also be 500 times 200 and when next.js resizes an image I think it only takes the width into account the height doesn't really matter only to reserve space so even if the real height of the image is larger than 500 then this will still work it will only resize it to have the appropriate width anyway if you just use these values here then it will work and I want to add some rounded Corners to this image because this looks better which we do a rounded LG again and again this is the largest image and the only image shown on this page so we set the priority attribute and below this image still inside this div we put another div for the product text we set the H1 to the product name and we style this H1 with text 5 XL which again that's the font size and we make it bold again below the product name I want to render a price tag instead we already set up this component earlier and for the price we pass product.price right and to the price tag we can pass an optional class name which we want to do now because I also want to add some Mulch and top with mt minus 4 to this price tag and Below we put the product description which is just a paragraph tag products dot description entry at the p y minus 6 class name to add some vertical padding okay let's save this and let's navigate to a product page there it is responsive but we still need some gap between the text and the image but we already move between a flex column and a flex row at the appropriate break point to get some room between the image and the text we use Gap 4 and GAP is better to use than a margin here because a gap will work no matter if it's a flex column or a flex row this way we don't have to decide between a margin top or a margin and for example so now we get some space here which also works on larger screens and I also want to send out this text here but only when we have a flex row right so only on larger screens so we add LG colon items sender item Center is the class for a line item Center in CSS and now it should look good now it looks like this on larger screens but it's responsive and it even gets smaller on small screens until we reach the Min width which we set with 300 pixels earlier okay and I also want to set the metadata of this page by this time I don't want to hot coat the title and the description instead I want the title to contain the product name and the description to contain the description of the product if we want to generate the metadata dynamically we don't export this metadata value that we used earlier instead we have to export another function outside of the products page component function we export another async function called generate metadata and the spelling of the function name has to be correct again otherwise next.js were not recognized as this will return a metadata object which is an import from next again and by defining the return value here we get Auto completion when we later construct this metadata object but since this is an async function we have to wrap this return value into a promise because all async functions return the promise why do I make this an async function well we actually have to fetch the same product from the database in this function here as well in order to get the name and the description of the product we actually can't share data between the page and generate metadata we have to fetch the product in both places but now you might say isn't it wasteful to fetch the data from the database trials and of course it's wasteful this is why we have to Cache this product that we get from our database so that we only fetch it once this is done for you automatically only if you use the fetch function that we have in JavaScript if you use fetch to fetch data from some API then this is cached and deduplicated for you automatically however if we use something like Prisma or XC yours or anything else to fetch our data then we have to Cache it manually if you don't do this then we actually do a two database operations and this of course is very wasteful if you want to confirm this then you can try out fetching the data here twice and lock your database operations which we can do by passing lock to our Prisma client here but I don't remember what you have to pass for the value you have to look this up in the documentation this allows you to lock all your database operations and then you can see that this is executed twice but I already did this so I can confirm it for you in order to deduplicate this request we have a cache function from react which is also pretty new so what we do is we create a const that we can get product and then we call this cache function here which is coming from react to Cache we can pass another async function and the return value of this async function repairs here will be cached and here we basically want to execute this part we want to fetch our product from the database and then return it and for this we need the ID of the product right so in here this editing function that we pass will take one argument the IDS string and then we create an error function like this with a right arrow and a block of curly braces so now we pass this function to the react cache function and in here we can simply cut out this part put it in here and then we simply return this product and now down here where we had this function before we create a const product again but this time we call a weight get product which is this cached function up here and we pass the product ID into this function now we still get the same product but it's coming from this cached value here and now we can do the same and generate metadata and this way this will only be executed once and this value will be shared between these two functions we still need a product ID and generate metadata right and this can actually take the same props as the page so we pass this in here and then we only have to return the metadata that we now can generate from this product information okay so we return a JavaScript object and again since we added this return value here we now get Auto completion for example we can set the title just as we did before but now we can generate the title from the product name and then I want to append this Dash flomas on that's behind it like this I also want to set the meta description to the product description and again we can see this later when we post a link to our website on social media and we will actually do this we will actually deploy our project and then I will show you these previews and I also want to overwrite the open craft image so the image that is shown on social media by default that's this open graph image file that I put in the starting code but we can overwrite this dynamically for a specific page and I want to show the product image instead for this we can add this open graph value to the metadata which again takes a JavaScript object and here we can pass images colon we pass an array this array contains another block of curly braces and here we can set the URL to a product dot image URL again we can't see this right now because yeah only the title is shown here in the browser we have to refresh the page and that does Thornhill slices but you will later see these other values after we have deployed our project okay on this product page I also want to put the button that allows us to add this product to the cart but before we do this I want to create the loading page again I explain this in my next JS beginner tutorial the loading page will be shown when we open a server component and it's still loading because we are fetching all this data before we actually show this page on the screen right this is Alf hatched server side not clientside which means that it can take a while before the page is shown and to not make it feel unresponsive to the user we can add the loading page that will be shown while a page is loading we put this right in the app folder and again the name has to be exact loading.tsx and in here we export a simple component again which we call loading page or loading and from here I want to return another spell with the class names loading which again is coming from this UI loading dots is a different kind of loading indicator then the size loading LG M Oro which send us this loading indicator horizontally on the screen and the last class I want to set is block which sets this to display block this is necessary for M order to work and then we close this and then we have our loading page we should see this in action if we go to the front page again yeah there it was for a short moment but when we click a product we should also see the loading page while the product is loading it wasn't there yeah I think we don't see it because nextjs prefetches these pages but you see it when we refresh the front page right but this will also be shown sometimes when we open a product page or another page okay and the next step is to create the actual shopping cart in our database and add a button with which we can add products to our cart really exciting okay the next step is to add our shopping cart model to our database so that we can actually put products in there so let's go into our schema.prisma file again and we could make the changes in the database first and then use introspection again to change the schema here but it's actually easier to do it the other way around to modify the schema and then push the changes to our database so below our product model we create a new model which we call a card so model card curly braces each model in our database needs an idea so let's copy the ID line from the product model and paste it here this does the same it creates an idea automatically for us of type object idea and we can also copy these two timestamps here so that we know when we created and last updated a card and for the items we put in the cards we create yet another model model which we call card item and we ignore this error message here for now now we could also put the card items as an array directly into the card document but this makes it harder to work with because then we always have to fetch the whole array when we want to modify it even if we just want to change the quantity of a single item also documents in mongodb have a size constraint meaning that we can't make this card item array grow indefinitely now in practice this is probably not a problem but it's still good practice to put these card items into a separate collection in my opinion so again each card item needs an idea so we copy paste this line This is the ID of the document itself and each card item also needs the ID of the product it references right so we know which product is in the card so we create another field below product idea and don't worry about the alignment right now we will reformat this file at the end this is also of type string and it's a mongodb object idea so we write the same as here at the end of the ID line at DB Dot object idea but this product ID is not order generated like the ID of the document itself this is just the ID of the product we put in there then we also need the quantity so we know how many of these products we put into the card which will be of type int and we need the ID of the cards that this card item belongs to and a card then belongs to a user so we add another field below card idea which again is a string that contains a DB dot object ID okay let's format the document to align everything properly again on the nose that's shift IDF if you are on Mac or Linux you can also search for the format document shortcut here but right now we are just storing these ideas it's also useful if we tell Prisma what model these IDs belong to because this makes it easier later to work with for this we can use relations so what we do is below the product idea we also write product which will be of type product and product is our product model up here then we write add relation and between the parentheses we write Fields colon pair of scrap brackets and then we pass our product ID on which is this field up here that contains the idea of the product after the closing square bracket we write comma references let me make this big idea that's the ID field of the product here so that we know that one product idea is connected to a the ID of the product and now when we press the formatting shortcut I think Prisma should add something to the product model as well and of course reformat our code so shift IDF and it added this card item array to our product model this is the counterparts to this line down here so they always belong together because now that each card item references a product we can also fetch all card items that contain a product through the product model and if we deleted this line then we actually get an error because they always belong together and then we want to do the same for the card so we store the card ID here which belongs to a card document in our database So Below we write card off type card and again add relation which Fields does it reference the card idea which belongs to the idea in the card model again we press the formatting shortcut and it adds this line to the card model and this one here is especially useful because this allows us to fetch all the card items with all their product information that belong to a particular card this is important later to fetch the whole card with arlet's data but I want to rename this field I want to color adjust items and put it here above the timestamps and I also want to rename the collections again lowercase and plural because that's convention for mongodb so again below we write add add map and the name of the collection which will be cards and the same for the card items here since they are their own model they live in their own collection card items in our lowercase one more thing we go to our product relation in the card item again after the references field write comma on delete in camera case like this and then Cascade with an uppercase C what this does is if we delete a product all the card items that contain this product will also automatically be deleted because we can't have an item in our cards for a product that doesn't exist anymore right that's it with the changes in our model for now so again let's reformat this let's save it and then we have to push the changes to our database so we open the terminal and stop the execution of our Dev environment then again as I mentioned in the beginning we run npx Prisma DB push which pushes these new changes to our database here you can see what it does it created two new collections for the cards and the card items so let's take a look into our database here here we have two new collections and if we set up any special indexes also in our model then this will also push to the database with npxdb push but right now of course these collections are emptier so let's go back into our project and then we also run npx Prisma generate to regenerate our Prisma client so that we have our new models available on the Prisma object and can make database operations so now when we take a look at the place where we use our Prisma client like here for example and use all the completion we now have the card and the card item here available as well this is what Prisma generate does it creates a newer Prisma client with the correct schema inside it okay let's run the development environment again and then we want to add a button to our product detail page to add this product to our cart and then we want to put this button on our product detail page here below the description but this time I also want to have a success message so after we added a product to the card I won't have a little text that there's a product edit or something like that but the use form status that we are used in our form submit button here only contains this loading state it doesn't contain a success State at least not yet they might add this in the future but for now we have to handle the success State ourselves and since this is State we can only do this in a client component because only a client component can contain State this is why this time we can't execute our server action in a server component but what we can do is we can wrap all of this logic into the button itself so that only the button has to be a client component and the product page itself can stay a server component because again server components are more efficient since we will only use this button on this page let's put it not in the components folder but right here in the product ID folder right next to the page itself because in the next JS app router we can colocate these files with the pages we call it adds tour card button dot TSX and then in here we create a client component with the same name to this add to cards button we will add the ID of the product that this button belongs to so we create an interface for the props and in here we put the product idea in form of a string and then we pass this to the component and then let's set up the layout of this button so we put the return block here we wrap this all into a diff because next to the button will be the success message and to align them properly we set the class name to flex items Center and GAP tour for some spacing and into the diff we put the button itself which we Style with BTN BTN primary we set an onclick Handler on this button but for now we just pass an empty Arrow function like this because we will take care of this later then we close this button tag and set the text to add to cart before we continue let's save this and put this button into our layout to see how it looks so on the product ID page we put the button below the description add to a card button and for the product idea we pass the ID of the product that we load on this page and there's our button I also want to put an icon in here a shopping cart icon and I have to copy paste this because this is an SVG there it is again I will link this in the description below and you can copy it from there you can also leave this out for now it doesn't matter the text here is enough and now again we want to handle this action via a server component because this way we don't have to set up an API route Handler and instead we can just call a function in our code right here but we can't declare server actions inside client components so we can't put the action directly here into this file however you can still import server actions into Clan components that's possible you just have to declare the server action in a separate file so let's put this file into the same folder here in the products idea route new file and the naming convention for this is usually just actions but you can give this any name you want and here we put the server actions that belong to this route remember when we created the server action on the add product page we use this use server directive here at the start of the function since this file will only contain the other actions we can put this all the way at the top this way we only have to declare at one time and not in each function if we added multiple functions to this file okay and then we export an async function let's call it increment product quantity because this is what this function does right and it takes the product idea as an argument and I have a very nastier typo here at product quantity No it should be correct in here we want to fetch the cards or create one if it doesn't exist yet but we haven't set up functions that let us create or modify a card yet and since we want to work with our cards from different places we don't put these database functions right in here we put them into a separate file so that we can reuse them this time we put them into the lip folder and here into a Debian let's create a new file called card.ts so here we put database operations on our card that we want to reuse in different places but those are not server actions those are just functions we use in our server actions so we don't have to put the your server directive here at the top let's start with the function that creates a new account so export async function create card doesn't take any arguments and in here we create a const new card and then we call away to Prisma which again we import from the Prisma file in the lib folder Dot card dot create I think this is safe explaining and we want to create an empty cart so for data we just pass an emptier pair of curly braces because we don't want to put any data in there yet we just want to create an empty cart but it will contain the timestamps now later when the user is logged in we can connect our cards to a user account but if the user is not logged in we also want to support Anonymous cards right but how do we later find this card in the database how do we know that the user belongs to a certain card if they are not logged in for this we will store the ID of the card in a cookie in the browser of the user and later we can read this cookie to get the correct card again and we can do this with this cookies function from next.js we can call this with parentheses and then we have this set function there and then we give this cookie a name I'm gonna call it local card idea but you can give it any name you want and in here we want to store newcart.id and as simple as that we can set a cookie now in production you should make this more secure you should encrypt the card idea because a user can modify the cookies and this way they could just guess the idea of another card and if they are successful they could change the contents of the card of another user theoretically of course the damage of doing this is lower but in a real production app you should take care of this and the cookie itself also needs some additional security settings but I skipped this step here for Simplicity because it doesn't really add anything to this tutorial and it only matters if you really want to deploy this eCommerce website to production otherwise this here is enough and I will leave a comment as a reminder so if you are interested in this you can look this up and Google those are just some additional steps you have to do but it shouldn't be too complicated and then we also want to create a function that gets the card from the database you can put it above or below does metal export async function get card again it doesn't take any arguments here we want to get the card idea out of the cookie because we are still working with Anonymous cards so let's create a const local card idea cookies dot get this time and we of course pass the same cookie name as a string and out of this we can get a value this can be undefined because the cookie might not exist this is where it adds the safe call operator and Below we create a const card equals we can only fetch the card if we have the local card idea so if it is defined it's a rewrite local cut idea question mark to use the ternary operator if the local card ID is defined we want to assign the cars to a weight make our database operation so press my DOT card dot find unique to find the card by its idea then we add the swear clause where idea colon is the same as the local cut idea from the cookie and then we can do something really cool so by default the card doesn't contain the card items right because we don't store them as an array in the card model they are in a separate collection similarly the card items don't store the product information the products are also in their own collection and this is really important because if we update the information of a product for example the price or the description then we also want these changes to be reflected in the card items and in the card right we don't want any stale data in our card because this would be a terrible user experience instead we fetch this product information only when we need it but when we make our query here we can tell Prisma to put the card item information into the cards that we fetch from the database and put the product information into the card items and it works like this after where we put a comma and then we add include colon curly braces then in here we have items which refers to items field here in the cards model now we could write column true this way we would put the card items into the card that we fetch from the database but remember that the card items don't contain the product information yet only the product idea to go one level deeper we don't pass through instead we pass another block of curly braces and in here we can write include again to include the product information into the cut items so again include colon and in here we have the product and then we set this to true this might look a bit complicated at first but other completion helps you here so just press Ctrl space or command space and you will see what you can include and what operators you can use but again this way we don't only fetch the cards with the ID and the timestamp we also put the card item information in there and we put the product information into the cut items so now we have our full card with all the latest product information inside but we are using the ternary operator here so we also need a colon afterwards let's put it here if the local card ID is missing we want to return null here because then we can't fetch a card this is below we check if exclamation mark card if it's null then we want to return null from this function and if the card exists we want to return the card but I don't only want to return the card I also want to return some additional meta information I want to return how many items there are in the cart right now and what's the current subtotal of all the prices combined so we don't just return the cart we return a block of curly braces to create a new JavaScript object and here we first of all spread the card to put all the card information in there and then we add additional Fields one is the desires and for this we have to do a little calculation because we can't just use cuts.length because we don't store a separate card item for each item we put into our cart instead we always have a product and a quantity so we have to calculate the size we can do this with cart dot items dot reduce is just a JavaScript function and this takes another function as an argument where we get the accumulated value and the next item in the list and then we can calculate the total quantity for this we take azzm but this is just a naming convention you can name this anything you want plus item dot quantity so it goes through each element in our array and it adds the quantity to the accumulated value so that we get the total quantity at the end and that's the second argument after a comma we have to pass the starting value I think which is zero okay so again reduce is just a normal JavaScript function that you can use for stuff like this and then we also want to add the subtotal for which again we use the reduce function card dot items dot reduce again we get the accumulated value and the next item and then we want to make our calculation acz Plus item dot quantity and we want to multiply this with the price of the product right to get the total price item dot product dot price and again comma and zero as the starting value now it would be cool if we had a type for this object because we want to return an empty card from create card as well with the same structure and it's always good to set up a type so that we get Auto completion and we know what Fields belong in there right we can create the type above we could also put it in another file but it's closely connected to these functions so I think it makes sense to put them here we don't use an interface we use a type because again I want to combine two types with an intersection and I'm going to call it shopping count shopping cart and not just cards because card is already the name of the card model in the database we want to use this card and combine it with the size and the subtotal that we add down here so we add an Amazon sign to create this intersection type and then a block of curly braces and then here we put the size of type number and subtotal of type number there's just one problem this card type here only contains the data that is in the card model the ID and the timestamps it doesn't contain the card item or product information and by default press my doesn't give us this populated type we have card item but this is not populated with the product information but we can create these types ourselves and Prisma has convenience functions that we can use for that so above the shopping carts type we export another type and we export them so that we can use them in different files later let's call it card with products because that's the card with all the product information in there and then we can use Prisma with an uppercase Pier we have to import this dots can't get payload and then we add a pair of angle brackets like this in between the angle brackets we put a block of curly braces and then we add the same include query that we also have down here and we paste them between these curly braces and this creates this type from this Caribbean so now we have a card with all the populated items in there that contain the product information and then we can use this down here as the type for our shopping cart and now we have a shopping cart with all the data inside it and this additional size and subtotal value and this is the same structure of the object we return here so let's add an explicit return type to get card this is just a good convention so that you make sure that you always return the correct object so after I get card rewrite colon and again we have to wrap this into a promise because this is an async function and we return a shopping cart or another if the cookie is missing and then as I said we also want to return an empty shopping cart from create card so that we can work with it so we add a return type here as well again a promise of type shopping cart and we get an error because we are not returning anything yet we will do that below after we set the cookie we return an object and now since we defined this return type we get Auto completion here which is really useful the card information so the ID of the card and the timestamps are contained in this new card object right so we spread this in here just like we did for the other card above for the size we simply pass zero because the new card is emptier and for subtotal as well just so that we have a cut to work with in our app but this day complains because the data of this card is emptier so for items we just add an empty array okay let's format and save those and then we can use these functions in our server action file in increment product quantity here we want to fetch the card from the database so that we can modify it so we create a const card equals a weight get card which is the new function we just created but if we get back now here we want to create a new card because a card might not exist yet if we open the website we don't create a card immediately we only create it when we actually modify the card so that we don't bloat our database with empty Anonymous cards so we add two question marks which means that the right side will be executed if get card returns null or undefined then we want to await create card and this also gives us a new card back right just an empty card when we reformat this file prettier automatically adds parentheses around these cards but I think they should not be necessary the logic should be the same this is probably just for readability so now we have our card and when we click our add to cart button we either want to add this product to the card if it doesn't exist or if it's already in the card we want to increase the quantity so we check if the article is already in the card let's create a const article in cart equals and then we want to find this item in card.items so we can use the find function which again is just a normal JavaScript function this passes us each item in this array and then we can check if an item with this product ID is already in the card so we check item dot product ID which remember is part of this schema so each card item contains the product ID and that it references if this product idea is the same as the product idea that we passed to this increment quantity function then we know that this item is already in the card and then we want to increase its quantity if not we want to put a newer item into the card So Below we check if article in cut we want to update the quantity of the existing card item so we call a weight Prisma which again we have to import Dot card item dot update to which as usual we pass curly braces here we first have to type Prisma which item we want to update with this where keyer to which again repairs curly braces and in here we have the idea that we compare to an article and cut dot idea because this is the one we want to update right comma and as the second value we pass the data of this update as usual we get Auto completion here we want to update the quantity again curly braces and then we have this increment value that we can use we want to increment this by one now we could also update it with the current quantity plus one this would have the same effect however I think increment avoids race conditions if you updated from relatively places but this shouldn't make any difference here because no user will update their card from many different places at once right but if we have this increment function available then we might as well use it okay so we increment the product quantity of the existing cards in the else block if the item is not in the card yet then we want to create a new card item so we call a weight Prisma Dot card item dot create this time and here we only have to pass the data we want to set the card idea to the idea of the cards that we are fetched again the card ideas part of our card item model here so that we know which card this item belongs to so we set a card idea then we want to set the product idea of the product we are adding now instead of writing product ID column product idea we can also use the short syntax if the value has the same name as the key and we want to set the quantity to one but there's one more thing we want to do here after this operation is done we want to refresh the screen so that we see the latest number of items in our cards in Enough by later for example but we are working mostly with server components so we don't have any state in there that we can update instead we can refresh the whole screen basically and the way this works in server actions is you call revalidate path with the path that you want to refresh which will fetch the latest data string off the path we want to update we want to update the slash products slash scrap records and the idea like this this is the path of the product page right we have app products and ID and scrap records and this is the path we want to refresh notice that this string contains the path and not the URL so we put the same ID between square brackets and here as we also have in the folder name because this is not the actual URL this is the path it has in our file structure and later when we use this server action this line here will take care that the screen refreshes with the latest data and we want to call This Server action in our add to cart button right now normally we could just import the server action here and use it in here this works even when this is a client component however there is currently a bug that makes this approach not work with next off that we will later Implement later we will not only have the anonymous card right we will also fetch the current user session when we get the card from the database and this currently doesn't work in server components that you import directly into client components this is a bug they will eventually fix this but for us right now this means that we can't import our server action right here in this adds to cut button component but what we can do instead is we can import it in the server component so the page itself and then we can pass the server action as a prop to the adds to cart button so we just pass it as another argument just like the product idea so let's do it like this let's add another argument to the props which we give the same name as The Silver function we just set up increment product quantity the name doesn't have to match but it makes sense because this is what we expect right so this is a function that takes in the product idea and it doesn't return anything so we write it like this colon product idea of type string and the return value of the function is a promise of type void promise again because it's an async function then we'll add this function down here where we destructure the props and then we want to call those when we click the button right so inside this on click block now the documentation about server actions state that when you call them from a client component you should wrap them into a use transition use transition is a relatively newer react hook which you can look up if you want but they don't really expand in the documentation why we have to use that here it's not really clear they just explained that we have to use it I spend a lot of time trying to figure out why because this is not really explained anywhere yet at the moment but I eventually got an answer on Twitter so I asked here and Tim is part of the next JS team so he should know start transition bounds the error that happened in the transition to the component where your card use transition this ensures that server actions when cut manually Do Not Crash the entire page so in a nutshell this means that we have to wrap this into a stats transition so that any error that happens in the server action is forwarded to our own error page which I think we haven't set up yet but we will do this later in other words the error is handled properly and doesn't crash our app and also when we use start transition we get this loading State here that we can use to show a loading indicator so let's go back into our project and implement this so we need this use transition hook that we can initialize here at the top so const and it returns a topic just like you said the first value is usually called is pending which is true while this transition is running and the second argument is usually called start transition you can give this any name you want but those are naming conventions and then we initialize this with this us transition hook which is a react import normally the purpose of use transition is to not block the UI when we do a state updates but this doesn't really have anything to do with our server actions here again in our case this use transition is necessary because we call a server action from a client component and this takes care of handling the error and the loading State properly this is what I showed you a moment ago but I also want to create a second state when our operation was successful we want to show a little message right so we create another toolbar that contains the success and set success and we assign this to a U.S state not use transition this time but use State make sure that it adds the correct import and reinitialize your state with faults which automatically infers this as a Boolean and then in the onclick Handler of our button first of all we want to set success back to false to hide the success message when we click the add to cart button again then we want to call the server action and again we have to wrap this into a start transition which is this part that we get here this is a function that takes another function as an argument in here we write async and add another arrow function like this async because we want to await our increment product quantity function which is an async function this one here we call it weight increment product quantity and pass the ID of the product so this is our server action that we pass to the clan component and then after this is done we want to set success to true to show the success message this is all happening inside start transition okay so now we have a loading stage through its pending and we have a success date from our use date now let's render a loading spinner and a success message in the UI when these values are true we do this below the button but still inside the stiff and we already styled this div to a flexbox that centers the items so this should be aligned correctly and here we put an expression with curly braces and first we check if s pending is true then we want to render a loading indicator which again we do with a span that gets a safe closing tag and for the class name we use Daisy UI classes as we did earlier loading to turn this into a loading indicator and loading spinner yeah to make it a loading spinner and we can set the size with loading minus MD and then another one below this time we want to check if success is true to show the success message but success will actually be true before we have revalidated the path so before we reloaded the page which remember we do in our server action we can't revalidate path here and this happens after the server action has finished however this is pending value will be true until the revalidation finished so what we do is we combine these two values down here we check that is pending is back to false with exclamation mark is pending and success is true only then we want to render the success message which again we put into a spin it will say added to cart you can add any text you want and reset the class name to attack success which again is a this UI class that just gives us a green color okay and now we only have to pass our server action from our page to our add to cart button and one more time to recap normally we can import server actions in client components this is not a problem but here we have to pass it as an argument because there's currently a little bug that happens when we later use next off to get the locked in user session this is where we passed the server action as an argument instead so to add to cart button we have to pass increment product quantity which we import from the actions file and then we should be all set up to try this out let's refresh the page just to make sure when we click the add to cart button we should see a loading spinner for a short moment and then we should see a success message right add to cart as the loading spinner added to card now there was a little glitch when the page reloaded but this glitch only happens in development because it's reloading the font for some reason but in production there is no glitch so it doesn't look as if we just refresh the page instead the image and the text will just stay in place and only the parts that have to be updated will refresh with the latest data but there is no glitch in the UI it will look as if we just updated some State and now we should see this item in our database right let's look in the card items collection and refresh this and there's now one product in here with a quantity of one and it also contains the ID of the card where this is added to us so 901 were the last digits and it's the same idea that the card in the card collection has let's try adding the same item again and see if we increase the quantity instead of adding a new entry here so again we click this button we see our loading spinner and let's refresh the database quantity to a perfect there should also now be a cookie set in our browser with the same card idea so this ends with 901 let's remember this open the Chrome Dev tools with F12 and we can see the cookies here in the application tab we can click here on cookies and on localhost and there's the local card ID that contains our current card ID and this cookie will still be there when we close the page and open it again and this allows us to fetch our Anonymous card even if we are not locked in so this is really professional this is also how big eCommerce website actually do it they store the identifier for the card in a cookie if we delete this cookie and add another item to the card then it should create a new card right because then the identifier for the card is missing let's try this out let's delete this code here just with the delete button and Let me refresh the page just to be sure that the changes are applied and click add to cart again and then in our database we should see a new card and there it is and now we have a cookie for this card ID instead now later I will also explain to you how you can delete cards automatically if they haven't been updated for a while so that we don't accumulate a lot of abandoned cards in our database right but for now let's ignore this now of course we could also get rid of this loading State here and let the database operation run in the background but for something like a shopping cart it's actually better to have a loading spinner and then a success message so that the user has a confirmation that the item was successfully added to the card because if they click add to cart and then navigate away and then the item wasn't actually added to the cards for some reason maybe it through an error maybe there was some other problem then it's a bad user experience if they don't actually see the item in the card this is why for an ecommerce app it's actually better if there's a loading spinner and a success message after the operation has finished and this is also how Amazon does it by the way let's also add another item just to see that this works as well a green bottle for example again adds to cart edit let's check the card items collection and now we have one of these bottles in here which would be this one this has the product idea 588a which should also be the idea of the bottle here here 88a now at first I was worried about race conditions when we click this button multiple times in a row because this also creates a new card when we don't have one yet right and we want to avoid accidentally creating multiple cards because we hammered this button multiple times in a row but when you try this out you will actually notice that these server actions are executed in succession so even if we click the add to cut button multiple times it will first execute the first server action and after this has finished it will execute the second one which then increments the quantity so there is no raise condition at least this is how it works in the moment again server actions are in Alpha maybe they are changing this behavior in the future but at least for now this works exactly like it should work let's actually try this out as well let's delete our cards for a moment we can just delete the whole collection it will be recreated when we create a new card and let's do the same for the card items gonna refresh the pitch and then I click adds to cut fast two times in a row and it should create only one card and then increment the quantity of the existing item to two so click click two times let's check our database let's refresh this zor there should be one card and one card item with a quantity of two so this works there is no race condition and our app works fine okay cool later we will add our card page where we can change the quantity of the existing items so then we will use another server action but for now let's add enough bar and the photo to our page so that we can navigate between our different pages and also show our cards and navigate to our card later okay before we set up our navbar I want to make one more little change to our schema file I want to add on delete Cascade not only to the product but also to the card here in the card item model so again comma on delete colon Cascade with the spelling because now when we delete a card all the corresponding card items will be deleted as well which I think makes sense all right and then we want to set up the navbar that we put at the top of our page so that we can navigate between different pages and we don't have to type in the URL all the time we could put enough bar into the components folder but since we use it throughout our whole app I like to put it directly into the app folder here in here we create a new folder called navbar because we need multiple files in there and the first file we put in there is navbar.tsx of course we used the navbar provided by a Tailwind UI you can find it in the documentation there are different variations you can find the code of it but the one we are building here combines different elements of this page into one we use the shopping cart item we use the search box so let's go back into our project and Export a default function foreign statement let's start building the UI of the snuff bar we start with a div which we give a background color with the class BG minus base minus 100. before we continue let's save this and then put it in the UI and we want the snuff bar to be a visible on all pages throughout our website so we put this in the root layout it's part of the HTML body but not part of the main tag so above the main tag we just render our navbar and save it let's see if we can already see something in the UI not yet but we will see something when we put content in here into this order diff we put another div to which again we add some class names so the first one is navbar which is coming from this uium and this adds some CSS attributes to a style dislike enough bar then I want to give the snapbar the same Max squid as the content of our pages so that the elements of the navbar don't stretch out throughout the whole screen so again we use max w7xl that's also what the value that we used here in our layout for the main container we use the same one here and this is why I wrap this into this order div which applies the background color of the navbar because I want the background color to take up the forward but the contents of the navbar be constrained within this Max squared field and to send that is on the screen we add a margin Auto then we make this nuff bar a flex column the flex class is not necessary because that's already included in the navbar here Flex color means the elements will be aligned below each other but we only want this to be the case on small screens so we add a break point here as M so on small screens and higher the only value below as m is XS so Flex coil will be applied on XS screens so on very small screens and on slightly larger screens SM and larger we want to set this to a flex row so the elements are aligned horizontally and then we also add the gap of tool to get some space between the items you will see how this looks in a moment after we added items to our enough bar so the first item I want to put in the navbar is the logo and the name of the website which we wrap into another div which we give the class name Flex 1 this adds this Flex one one zero percent attribute which defines how these items stretch over the available space of the navbar then in here we put a next link so that we can click this item and navigate to the front page so we set the edge ref to just slash as a string to get to the home page and inside this link we put a next image that will contain the logo of the website again make sure the import is correct we set the sr0 to the logo which I already included in the starting project if you are not using the starting project then you can get the logo out of the project on GitHub twin srz should be an assets folder and in here is the logo which I prepared we have to import this here so import the logo from at which is the root folder in here is the assets folder and in there is logo.png that's what we want to use for the image source and then we want to resize this to a 40 pixels times 40 pixels entries that the alt text to A flomazon logo and then we close this okay let's save this and see how this looks so now we'll see our enough bar with this logo in there and I also want to put some text next to this logo so still inside the link but below the image we write flomazon but I want to style this properly else we add some class names directly to the link we make this a button or rather with status as a button it's still a link button ghost gives this a certain styling that looks like this looks pretty cool we make all the text in here larger with text XL but the button automatically makes this all uppercase we can revert this with normal minus case and those are all tailwind and Desi UI classes so now we have this link here with the logo and the name and when we click this we get to the front page really cool okay below this diff here so the flex one div we put another div which will contain the search field and the shopping cart button but those will be aligned on the right side whereas the logo is aligned on the left side so Flex 1 basically makes this part here grow to all the available space and it pushes these elements that we put into this div to the right side to this diff below we add the class names Flex none and GAP 2 as well to get some spacing in here then in here we want to put the search field for which we use a form so we put a form in here and we will use Observer action to execute the search again into this form we pass a div with the class name form control and again I'm getting these class names from the Desi UI documentation we close this div and add an input field in here which gets a safe closing tag as usual we give this input the name search query we set the placeholder to search entry status like we did earlier on the ads product page we make this an input with the input Borat styling then I want this input field to take up the full available width with W minus four but the width will still be constrained by the text that wrap this input field and then I also want to set a Min width of 200 pixels so that we can't shrink the input fields to a very tiny size where we can't use it anymore and again we can use an arbitrary pixel value like this and when we saved us we see our input field and the snuff bar should now also be responsive right so at a certain size they should move below it and it works but the input Fields doesn't get too small at a certain size it will just say no I don't want to shrink any further and this happens at 100 pixels and to execute the search we will use a server action again and since this file is not a client's component we can just declare the server action directly in here so we create an async function cut search products and the same as on the add product page this takes form data and at the top of this function we add the use server directive then we want to get the search query out of the form data so we create a const the search query and we have done this before we call formdata.get past the name of this input field which is search query and then recode to a string to turn this into a string and then below we check if search query has a value because we only want to execute a search if there's actually something typed into the input field then we call redirect which we import from next navigation make sure the import is correct and we want to navigate to the search page which we haven't set up yet but we do this later the URL will be a slash search and we will pass the search query as a URL query param so we add a question mark query equals without the space and then we append the search query value the cool thing is that redirect also works in server components and server actions so we can execute this in here and it doesn't require any JavaScript so our search will work even if JavaScript is disabled which is always nice to have and to execute this when we submit our form we do the same as we did earlier we set the action to the name of our server action search products now if you are experienced with HTML then you might think we could also just pass the URL that we want to navigate tour to the form action instead of doing this detour through the server action so we could just put this part here directly down here and remove the whole server action altogether however this would reload the page which is a very jarring user experience with our approach here we are not reloading the page we have this very resolved navigation we had enough bar and everything stays in place and this just looks and feels better than using the normal URL action okay but the button that shows the shopping cart will have to be a client component because it shows a popup menu and in order to show and close this popup menu we need JavaScript we don't get around this so to not make this whole enough bar a client component we put this into a separate file and we put this into the same love buff holder here let's color it a shopping cart button and Export a component with the same name as usual now to this shopping cart button we will pass the card itself so the shopping cart that contains the data of the card but we will fetch the card in our navbar because this way we can fetch it server side and we don't have to use a state or anything like that we just pass it to our client component here so at the top we create an interface the shopping cart button props which will contain the card which is offtype shopping cart that's the type we created earlier with all the card item and product information inside account so we import those from the lib folder but this can also be neither because we might not have created a card yet okay and then we pass this card to the component so here shopping cart button props Andrea destructure the card out of there and then rear return some UI here the order element is a div which we give the class names drop down and drop down and which again are these UI classes for now let's save this and let's put this shopping cart button into our navbar so first we have to fetch the shopping cart right we can do this right here because this is a server component but we have to make this an async function then we can create a const card and call await get card from our lib folder and now we have the card data and we can pass it to our shopping cart button we put a shopping cart button here right below the form opening angle bracket shopping cart button and it expects the card which we already fetched then let's finish the shopping cart button so back into this component and most of the mark up here is coming from the daisy UI documentation I just copied this for the most part in here we put a label which we give the tab index 0. the top index is necessary so that we can use tab to navigate between items which is necessary for accessibility we style those with BTN ghost and BTN Circle which makes this round yeah and the normal BTN class which is the base button styling we close this label tag then we wrap this into another diff to which we add the class name indicator because this way we can have a little batch on our cards button that shows the current number of items in the card then in here we copy paste the same card icon that we also use on the add to cart button here so you can either copy paste it from there or copy paste it from the GitHub repository when we save this we already see a discount I can hear and to add some number to this indicator here we go below the SVG but still inside the stuff and add another spin which contains the number that we want to put in there so we add an expression with curly braces what do we want to put in here we want to put the card size in there which is part of the shopping cart type right so when we fetch a card we return the size that we calculated earlier and we want to display the size here if this value is undefined because a card doesn't exist yet then we want to file back to a zero and when we left us it's not styled properly yet we have to add the class name to this pen as well the first one is batch then batch s m for the size and indicator minus item now when we save this this is styled properly and looks really cool doesn't it and this always reflects the actual number of items in our card so when we are add another item this will switch to a three after this has finished loading and number three but we also want to show a drop down menu when we click this item so we go below this label here and add another div again the stiff gets this Tap index zero value and some class names to style this the drop down will be stayed like a card then we have drop down content and again you can find instructions on how to style these elements properly and the devs the UI documentation then we add cards compact which adds some size styling we need a margin top we need a width which we set to a w minus 50 to 1 this is just the width of this drop down menu we need a background color with BG base 100 and we can add a drop shadow with the shadow class and one more class Z minus 30m this sets the Z Index this takes care that this drop down menu is not hidden behind other elements so it's on the foreground okay then we go inside this div and put the contents of this drop down menu in here again we need another div this is just unfortunately how HTML works it's stiff within divs within divs we style this with the card body class and in here again I want to show the size of the cards and also the subtotal so the total dollar amount of our items combined right now so inside the stiff we put a spin with the class names text LG for the text size and font bold and this was there number of items so we add an expression and then items behind an index expression we want to show the card size again or file back to zero if we don't have a card yet and when we click our button here we already see our drop down menu now let's add a subtotal below as another spin which we give the class name text info this changes the text color and in here we write subtotal colon and then we want to show the price which we want to format remember for this we have this format price function that we created earlier to this we want to pass card dot subtotal which again we calculate when we return the call again this might be undefined in this case we want to file back to zero again okay save this now we have this value in here as well and it's actually the correct value so this is correctly calculated one more thing I also want to have a button in here that brings us to the cart page where we can then modify our account right So Below the subtotal span we put another div with the class name card actions this is for buttons that we put into this menu but we don't use a button we use a next link again because we are linking to another URL but this import here is wrong we don't want to import it from this dist folder we want to import it from next slash link sometimes Auto Import doesn't work for whatever reason but the curly braces are wrong we have to remove them because this is the default export okay so this link will lead us to a slash code again we haven't set up this page yet but we will do so later we'll style this link like a button with BTN a primary button with BTN primary and to take up the full width we add BTN block and this button was there viewer card so now we have this button here that brings us to the cut page which doesn't exist yet now since this page doesn't exist this drop down menu closes when this page is loaded for some reason but if we adjust for a moment change this to a page that does exist and click this button again then you can see that the drop down does not close automatically we actually have to handle this ourselves this is why we need JavaScript unfortunately we can't close this drop down menu without JavaScript so make sure you set the href back to slash card and then we add another prop to the link we want to set the on click Handler here and we want to call close drop down and we put this function here above the return statement so we create a function that we give the same name and what we want to do is we want to remove the focus from this button here because this is what opens this drop down menu the way we do this is we get the currently focused element like this document DOT active element and you have to do this with these days UI elements you have to handle closing this drop down menus yourself then we have to cast this to an HTML element then we have to check if we found an element we want to remove the focus which we do with lm.blur now when we save this we will get an error because on click requires this to be a client component because onclick needs JavaScript so at the top we make this whole shopping cart button a client component saved us and then it should work again just for testing purposes I let this link us to the home page but I set this back to the card page in a moment and now when we click this button we get to the home page and the drop down menu closest okay revert the spec okay our enough bar is finished this is really cool because now we see the actual shopping cart data in here next we want to set up the cards page where this links us to but before we do this I also want to add a simple photo to our website just so that it looks more complete so let's put the folder into the app folder as well because it wraps the whole website photo.tsx and this time I'm just going to copy paste this whole thing because this is just some dummy markup I actually copied this right from the Desi UI documentation and I will put a link to this file in the description below as well so you can copy paste it from there but again this is just some placeholder and then reporters into our root layout below the main content we render the photo here safety and there's our beautiful professional photo that's also responsive by the way this looks really a like right out of amazon.com okay there's one more bug I want to mention right now again these server actions are still in Alpha so they have some bugs we have to wait until they are fixed right now while a server action is running we can actually not navigate to another page over a link to try this out for a moment I want to edit the layer to our increment quantity action again I will remove this in a moment so here I await a new promise and I'm trying to remember the syntax of this you don't have to write this this is just to show you something I just want to create an artificiality layer which we can do by a wedding a timeout so let's say we delay this for three seconds just for testing purposes now when I click this add to cart button this will take over three seconds to finish and while this is loading we can actually not navigate to the front page over this link so this is loading and I click this link and nothing happens but the short work we only navigate to the front page after this has finished but this is a bug in server actions right now so we just have to ignore this for the moment there are discussions about this on GitHub and I'm sure they will fix this eventually but just that you know that this bug exists so I want to remove This Promise here again and then we want to set up our cart page all right let's set up our cut page so we navigate to a slash cart when we click our view cards button here this means we need a folder in our app folder with this name card and in here we put a page.tsx and then we export a default async function entry colored card page then rear return the UI rewrap this whole page into a div and in here we put the headline that says shopping cart or your card or whatever you want to put in here entry style this we set the text to a 3XL we make it bold and add some margin bottom let's see how this looks view card and there's the title we can also add some metadata to this page as usual by exporting a const metadata static metadata here is enough we don't need Dynamic metadata and we set the title tool your card Dash and this changes the title here in the tab okay so the card is a server component meaning that we can fetch data in here we want to fetch the card so that we can show it on the screen right get card from our lip folder and then I want to list all the card items as a vertical list here on this page with the price and the subtotal and the image and everything so here we put an expression we take cut dot items which remember contains also the product information because we return our populated shopping cart so all the data is contained in this items field and then we want to map each card item into a UI element this UI element will also contain the server action which allows us to change the quantity of an existing card item Zoo for organization let's put this into a separate file and we can colocate this with the card page here let's call it card entry dot TSX again this will be a client component because we need JavaScript in here and then we export a default function with the same name now to this component I want to pass a Zinger card item so one of these card item entries here but I want the product information to be inside it right this is already taken care of by returning the shopping cart here from the get card function but we don't yet have a type that we can use for this argument so let's go back into the card file in our lib folder again where we created this card ref products type we also want the type only for this part here for a single item that contains the product information so let's add a second type below that we create in the same way we export a type that we call a card item with product again we create it with Prisma this time card item get payload not cart get payload but card item then again angle brackets curly braces and in here we put the query that is required to populate a card item which is include colon and to even get out the completion product colon draw so we want one card item with the product information inside it okay we saved this we export this type and then we can use it in our cart entry here we create an interface for the props as usual card entry props we need one card item which is of type card item with product that we just created so this is one card item with the quantity but also the populated product then we add this prop down here card entry props and 3D structure the card item out of it and then we can show this card item in the UI so let's return a div in which we put another div because below the card entry we also want to put a divider which is just a vertical line So Below this inner diff we put another div with a selfclosing tag that gets the class name divider which again is coming from Daisy UI and above in the stiff we put the actual product information so this div here at the top needs some classes Flex wrap which is required for responsiveness so if there's not enough room then the elements will automatically move below each other we want to Center the items and give it a gap of three then in here we put the product image as usual as the next image we set the sr0 to the image of the product but we don't want to write card item dot product dot all the time so we can destructure this card item further with colon curly braces and we care about the product and the quantity that's the data we need in here and then down here in the image source we can just write product dot image URL for the alt text we use the product name again we set the width and the highest to a 200 pixels and we make the corners of this image rounded with rounded LG then we close this before we continue let's save this and add it to our map function here so we map each card item to one of these card entries to which we have to pass the card item of the snap function and again since this is a list we also have to add a keyer with a unique identifier which is we can use the ID or the product idea shouldn't matter and then we already see our product here really cool let's finish the cut entry layout and add the remaining information So Below the image we put another div then we add a link here because the name of the product will also be a link to the product detail page but Auto Import didn't work so we have to import this manually import link from next slash link we set the href of this link to a slash products slash and product idea because this brings us to the detail page and I want to set a class name to font bold and then this link will just contain the product name and the others right below this link I want to render the price of the product of a single item so in a different rate price column again we use our format price function to which repairs product dot price there it is that's the price for a single green bottle then below the stiff I also want to show the total price so the price of one item multiplied by the quantity so we add another div here with the class names Flex item Center and GAP tool and here we write total column and again we want to format the price but this time it's product dot Prius multiply it by the quantity it's not a product or quantity it's just quantity because that's part of the card item so the total price is 15.96 which is also shown in our card drop down okay and I want to show the current quantity between these two diffs here but I also want to add a drop down manual with which we can change the quantity so we go below the price but above the total and here we add another div but we are almost done again we need some class names we need some vertical margin my one we make this a flex box with item Center and a gap of tool okay then this was a quantity column and in here we put the select which creates a drop down menu in HTML then we need options for this drop down manual I want to have the numbers 1 to 99 in there so that we can change the quantity for this we need an array that contains the numbers 1 to 99 we create this array above the return statement we create a const quantity of options this will be of type jsx element but an array of jsx elements and we initialize this with an empty array yjsx element because we want to put these option tags in there which are HTML elements and we can put them into a jsx array but we want to do so in a loop that goes from 1 to 99 so we'll write 4 and create a normal for Loop let I equals one that's the number we start with I less than or equal to 99 semicolon I plus plus this is just a normal for Loop in JavaScript and for each iteration we want to take our quantity options and push a newer element in here as I already said we want to put such an option tag in there option tag contains a text with the number so we just render iron here so number 1 to 99 and then we also have to set the value of this option tag to the same number and since this is an array we also have to set it here for which again we use I so this Loop here creates a list of these option tags from number 1 to 99 that's all this does and now we can render these options in our select tag here so between the opening and the closing tag we put in expression and we want to render our quantity options here and this is how it looks it's not styled properly yet so let's do that next we add class names to the select tag select which is a daisy UI class select board W foil and a Max width of 80 pixels this way this input field stays responsive and it can shrink but it will not be bigger than 80 pixels because that's enough and this is how it looks we can also set the default value to the current quantity because when we open the page we don't want this to show one if we have four green bottles in our card right so we can add the default value prop entry simply set this to the quantity of this current card item so now when we save this and refresh the page this shows four and now when we change the quantity by selecting a different one we want to execute a server action that changes the quantity of this item in the database so we add the unchange prop here which will be called whenever we'll select something in this drop down and here it gets past this ear argument which is the drop down menu itself so we add the function body here and then we can get this value out of the drop down menu and call our server action and JavaScript is required to execute on change this doesn't work in the server component unfortunately this is why we have to make this a client component but as we already learned we can still cause over actions in client components so let's set up this new Observer action next again we put it into the same folder again we colored actions.ts just like we did for the increment product quantity action just that this function here will allow us to set an arbitrary quantity and it will also revalidate a different path it will revalidate the Scout page to update it but besides of that we are not doing anything new in here so we make this file a server action file then we export in async function that we call set product quantity to which repairs the product idea but also the quantity in form of a number so this will look very similar to the other actions file we already have just that here we only needed a product idea because we always incremented by one but we also need a card in this other file and create one if it doesn't exist yet so we copy this line here paste it here we have to import these functions from the lip folder again we want to check if this article is already in the card so let's copy this line here as well put it here and then we want to do one of three things if we set the quantity to zero we want to remove this item from the card completely if we set a positive value and the article is already in the cards then we want to update this item with the new quantity and if the item is not in the card then we want to create a new one now with our current UI this third case is not actually possible because we can't set the quantity if the item is not in the card already but maybe you want to change the UI later so we will take care of this possibility as well so we check if quantity on that we pass to this function is equal to zero then we want to check if the article is in the count only then we can delete it right then we call Prisma dot cut item dot delete we want to delete the item where just follow along the idea is equal to the article and card idea that we just found we want to delete this card item else if the quantity is not zero but the positive number then again we want to check if the article is already in the card in this case we call a weight Prisma Dot card item dot update to change the quantity we want to update the same item as we used up here with the article and card idea so we can reuse the same where clause but this time we also want to set the data we want to pass the new quantity and again since the field and the variable name are the same we can use the short syntax here okay and then we add an ads block to this inner F here so if article and card is not defined if we don't already have this item in the card then we want to await press my DOT card item dot create and we set the data like this this will look similar to how we created the card item here so we can actually copy paste this over the data is the card idea the product idea but we don't want to set the quantity to one we want to set it to the quantity value that we pass to this function and at the end of our Z product quantity function out of this outer if block here we wanna revalidate the page again right with revalidate path this time we want to revalidate slash card which again refreshes the page and fetches the latest data and now we want to cut the server action in our card entry file but remember this is a client component and because of this one bug we can't import a server action directly in the client component because this will not work with next off later so again we have to import the server action in the page which is a server component and then pass it to the card entry but we haven't added the arguments to the card entry yet so over into the card entry again into the card entry props here we expect the Z product quantity tier that's a difficult word function which is this over action and again it gets the same signature as the job actually just set up it takes the product ID and form of a string and the quantity and form of a number oops and it returns a promise of type White and then we are edit down here as well but again we import the server action in our page and pass it to the component so let's go into the card entry tag here pass set product quantity for which we import our newer server action okay we save this go back into the card entry down to our unchanged function here first of all we want to get the selection out of this field here which we can do the following way we create a variable I'm gonna call it newer quantity equals pulse int because this contains a string and we want to pass this into a number and the value is contained in this ear value that we get here dot current Target dot value and there's the selection of this drop down field and then we want to execute our server action and pass this quantity to it remember we need a transition to execute the server action in a client component to get the appropriate loading and error handling so we scroll to the top of the card entry file again here inside the function at the top again we create this cons is pending comma start transition the same one we used in our adds to cut button and we assign this to a US transition back down into it the on change Handler we have this new quantity here now we start the transition to which we pass this async Arrow function again and in here we can call and await set product quantity which is the server action to which we pass the idea of the product comma and the newer quantity that we just selected and again to have some feedback I want to show a loading spinner while the server action is running we put it here below the total price we don't need a success tax this time because we see the uptodate value in the drop down so a loading state is enough we add an expression here check if is pending is true and if this is true we want to render a span again that contains the loading spinner so spend with the class names loading loading spinner and loading SM for the size okay and when receive this this should not work let me select the different quantity three it loads and it changed the quantity also up here in the navbar and also the total price this all gets refreshed because we call revalidate perfume which revalidates this whole page and fetches the latest data but I put this loading spinner in the wrong place I actually want to have it inside the stiff here so that it's shown right next to the total price so now it looks like this just one more addition I also won't have an option for zero right so that we can remove an item we put this above the quantity options I don't make it part of the loop because the text will be a bit different so we add another option here and the text will not only contain the number zero but also remove in parentheses this is also how Amazon does it and the value will be zero and remember in our server action zero means that the item will be completely deleted from the card so let's try this out let's refresh this so we see the correct data again now we have zero remove which removes this item from the card completely by then it also makes sense to have some text here when our card is emptier right so it doesn't just look like this and the user might be confused so let's go into the cut page once again and go below the map function here inside the div we add another expression we want to check if exclamation mark cart dot items dot length which means that it's either undefined or zero if this is the case we want to render a text so we can use a paragraph tag for this or a div doesn't really matter because it's unstyled and Tailwind anyway your card is emptier there's the text and then I also want to put the total price of all card items at the bottom and the checkout button So Below this expression we put another div in here we put another paragraph tag to which we add the class name mb3 for our margin and font bold this will contain the total price just like we show in the navbar so this is total colon curly braces format price and to this repairs card dot subtotal and again if this is undefined because we don't have a card yet we file back to zero that's the total value at zero right now and Below we put the checkout button which will start with BTN and BTN primary and this was a checkout again we don't add functionality to this checkout button here if you want stripe integration then let me know in the comments below it then I will make a separate tutorial about stripe I also want to Center these items so we add a class name to this div we make this a flex box and a flex column and what I want to do is on very small screens I want the button and the total amount will be on the right side because that's usually easier to click when you are on your phone and you want to use your thumb and on larger screens I want to align this in the middle also I just think it looks cool for responsiveness so again we can use breakpoints for this we use items and to align the items on the right side and then on small screens and larger we use items Center instead one more thing I also want to change the size of the checkout button but only on this SM breakpoint so here we add SM colon and then I want to set the width of this button to a hardcoded 200 pixels which makes it a bit wider so now the button and the total amount are centered like this but on very small screens it moves to the right side and the button gets a bit smaller I think this just looks better and it's great for usability I think okay let's format this and just try it out one more time with different card items to make sure this works so some headphones add to cart again this glitch where the font flashes for a moment will not be in production this only happens in development so maybe let's add two cameras and maybe one boss to wear go to the card we see our subtotal here we also see it here at the bottom and we see the correct quantities right which we can also change it updates all these values and again if we change the price for example of a product in the database and the user comes back to their cart then these changes will be reflected in the UI the way we fetch our data they will always see the latest price and the latest product information so this works really cool and professionally in my opinion okay cool then the next step is to add user authentication into our website so that the user can log in and can also connect the shopping cart to their account it's a very exciting stuff you don't want to miss this to handle authentication we'll be used next off which is an authentication Library specifically for next.js it works with different authentication strategies we have a lot of different providers available in our app here we will only implement the Google provider to have Google log in but you can easily add additional login providers later if you want and it also has different database adapters that we can use there is an adapter for Prisma and mongodbir which makes it very easy to store user information and also session data in our mongodb database using Prisma here you can see that we have some stuff that we have to add to the Prisma schema but I will show you exactly how this works in a moment to implement Google authentication we need a project in the Google Cloud console so you can either go to a console.cloud.google.com or click on the link in the video description and then we want to set up a project here this is free to use if you already have a Google account then you should also be logged in automatically and here we can create a new project I'm going to call it next Js ecommerce and then we click on create this takes a moment to create this new project and then when this is done we click on select project which selects this project up here on the drop down okay and then in the sites bar we want to go to a credentials which is part of apis and services here we have credentials but we have to go to the O of content screen first because we have to set this up first okay let's go through these steps user type external because we want to make this website available to all kinds of users at least in theory create we have to give this app a name um next JS ecommerce user support email for this we can select the email address of this Google account we don't have to upload a logo I think we can leave this stuff here empty for now as well develop a contact information again I'm going to use the same address here coding and flow recording at gmail.com and then we click on Save and continue here we can select Scopes we only need the user profile info and the email address this doesn't require access to any specific Google servers and we also don't need any special permissions to get these values we click here on update we don't need any sensitive or restricted Scopes so we click on Save and continue we can set up test users while this app is not in production that are allowed to log in again I'm going to use the recording email address and maybe at the second one here infrared coding and floorpongs.com add save and continue okay now we can confirm this external we have a project name email address and so on Scopes test users yeah then we click back to dashboard so this app is now in testing mode if you ever want to publish your website then you also have to publish this Google app to make it available in production but for testing purposes this is now working and then we want to set up credentials so we click on credential C under sidebar and then on create credentials and we need an oauth client idea the application type is a web application name maybe let's call this next JS app or whatever then for authorized redirect Uris we add the URL to localhost 3000 with HTTP colon in front of it that's not https or localhost it's just HTTP and then we need this executive path here because this is what next of expects this is where Google will redirect us to after the login was successful and this is where next off reads the data out of the Google profile and gives it to us basically so this has to point to slash API slash off slash callback slash Google we add this here and of course later in production you have to add a second redirect URL with the actual deployment domain okay we click on create and then we get the client ID and the client secret and we want to put both of them into our end file in our project where we already have our database credentials so here we are at the Google client idea and then we are copy paste this value over here from your Google Cloud console and a Google client secret which was the second string that we got we paste it here as well then we can close the Google Cloud console because we shouldn't need this anymore now our client is set up and we can use this to look in via Google there are two more environmental variables that we need for next off the first one is next of underscore URL which contains the base URL of our website and you have to give this variable this exact name with the same spelling because next off expects a variable with this name so we set this to the base URL again HTTP colon slash slash localhost colon 3000. and then we also need the next of underscore Secret this is just a random string so you can type any letters in here that you want that is used to encrypt the session cookie later this is just needed for security and this is basically a password you can add any string you want here this next off secret is only required in production later we will deploy this website and then we will get an error if we don't have this value set okay let's save this and then the way next off works is that we have to set up a route Handler so an API endpoint and next.js under a very specific URL and every authentication request will then go to this URL and next off will handle this this is also where we pointed the redirect URL in the Google Cloud console to earlier so we go in the sites bar here in the app folder we create a new folder called API and we have to put this folder in here with this exact name because next off expects a very specific route in here we put another folder called off then another folder called scrap records dot dot dot next off as one word and in here finally we put the route Handler which we call road.ts route handlers are how you set up API endpoints so server endpoints in the next js13 app when you use the app order and this part here with the dot dot dot is a socalled catch R segment this allows next off to handle different routes under this endpoint and not just a single one okay and in this route dot TS file we export const of options and this time the name is arbitrary again so this doesn't have to be called off options and this will be of type next of options which is an import from next off and this will just contain the next of configuration the reason I put this configuration into a separate variable and Export it from this file is because we also need this object later in other places in our app okay and we set the adapter to Prisma adapter this is available in next off by default and this allows us to save user information and session data in our mongodb database using Prisma so this works together really well and to the Prisma adapter we pass our Prisma client now this complains because there's a typescript problem that requires us to also cast this to an adapter to a next off adapter so that this error message disappears sometimes there are some typescript shenanigans that you have to work around comma and then reset providers to an array here you can add multiple providers but again in this video we only add Google login so here we pass a Google provider okay autocomplete doesn't work the import is import Google Provider from next off slash providers slash Google there it is now we can use the Google provider down here and configure it with curly braces this expects the client ID and the client secret that we already have right in our environment variables so we can get them with process.enth Dot we need the same name Google client idea and client secret is process.nf Dot Google client Secret now this complaints we will get rid of this error in a moment but first let's finish this file here so we have our off options and Below we create a constantly again this is explained in the next of documentation here we call this next of function to which we pass the off options and this sets up next off with this configuration here with our Prisma adapter and the Google provider and then we have to export it the following way export curly braces Handler ascat comma Handler as post this weird syntax is necessary because right now next off is the configured to work with the old Pages directory and next.js and not with the app directory that we are using and this is why we have to write the special syntax to make this work with route handlers but this is totally valid this is also described in the documentation now this your complaints because an environment variable can always be undefined because we might have forgot to reset it but the Google provider expects defined values for client ID and client secret now one simple way to get around us would be to just add the nonnet assertion operator here with exclamation marks but this is actually not great because if we actually forget to set these environment variables then we will continue with undefined values and this will just misbehave it's better to actually check if all our environment variables are set and throw an error if this is not the case this is why we also installed the zot Library here we can use this to validate the values for example our environment variables this is a very useful thing to do in your next JS projects so that you can always work with the find Environment variables and I will show you how you can set this up we want to go into our lib folder again and put another file in here which we just call nf.ts here we want to import sort of from sort then we create a validation schema for our environment variables const I'm going to call it INF schema and then we can create such a sort object in the sort object we can pass validation rules and then here we want to add the same variables that we also have in our normal.n file so we want to copy all these five names and paste them in here and now we can add validation words to all of them and they all have the same rules they are strings that are not emptier so behind each of them we write a colon and by the way you can duplicate the cursor by pressing somewhere then you hold Ctrl alt I guess on Mac this is command alt I'm not sure and then you press the down arrow and then we press the end button on the keyboard to get to the end of the line but you can also handle each line manually if you want okay as one each of them will be a sort dot string which is a function and then we also call nonemptier to guarantee that this trend contains something and the comma at the end of each line now below we export the cons that we call enf and we assign this to end schema dot pulse this way we can pass a value to the schema and validate it and what do we want to pass well we want to pass all our environment variables to it because we expect our environment variables to adhere to this exact schema we should have these five keys that are nonempty strings and now if one of them is missing or emptier then search will throw an arrow with a readable error message instead of just giving us an undefined value and now we go back into our route file and instead of process.enth we just use nth entry importers from our lib folder the file we just set up and now since we validated this with sort this is guaranteed to be a string if it's missing we will get an error okay next we go into our root layout and we have to wrap our whole layout into a session provider what this does is it makes the session so our locked in user basically available to our components throughout our app this is actually only necessary to get a session in client components because in server components it works differently entry would not need this in our app because we fetch all our session data server side but it's still good to add this because if you need a session clientside then you need this wrapper okay autocomplete doesn't work so we have to import this manually import destructure from next off slash react and in here we can find this session provider entry wanna wrap our navbar our main tag and the photo into the session provider again to make the session available to all our pages but when we save and refresh this I think we should get an error yeah there it is because this uses react context internally and this requires a client component but the root layout is a server component now we could make the whole root layout a client component to fix this but there's actually a better way to fix this basically what we want we want the session provider to have to use client directive at the top just like our own client components the problem is many of these libraries haven't added this yet because react server components are still newer and we can't go into the source code of the session provider and add use clients there ourselves right but there is an easy workaround for this we just have to export these thirdparty components that we want to turn into client components from our own client file so we go into our app folder and put a new file here which we give the same name session provider dot TSX we make this file a client component and then we simply reexport the session provider from next off so we add the same package here but this time we write export instead of import so again next off slash react and here we have the session provider but we want to make this the default export which we can do with this syntax then we go back into our root layout and we want to change the impulse statement here we don't want to import it from next off anymore but our own file so dot to get into the parent folder slash a session provider and since this is Now the default export we can delete this Cali braces and now the should work because we turned the session provider into a client component we can still use all the features of it no problem but now we can also use it inside a server component next we have to add some newer models to our Prisma schema this is described in the next of documentation they have instructions for the different adapters and we are using the Prisma adapter we have to add these models here the account and user version and so on and then we also have to make some modifications to make this work with mongodb but I already prepared all of this let's go back into our project and into the schema.prisma file and at the bottom below the card item model we have to copy paste a bunch of new models I will put a link to this schema file into the video description below so you can copy paste this from there so this includes the user account this contains the username email address and the image which we get from Google when the user signs in then the Google account information is stored as well in a separate collection there is some stuff in here that we don't actually need but we might need this in the future if we change our authentication strategy so it's good to add all of this then we also store a session in the database when the user is logged in sessions are alternative to JWT authentication when you connect next off to a database using one of these adapters the Prisma adapter in our case then authentication will automatically be handled with sessions session means that when a user logs in the association entry created in our database that contains the user ID and an expiration date sessions are easier to use correctly than Jade label your tears because you can invalidate sessions simply by deleting them from the database so if the user changes their password for example a and you want to lock them out everywhere else then you can just delete their sessions whereas this is not possible with jwts by default because they are selfcontained in order to implement jwts properly you have to implement the complex refresh token mechanism this is also possible it's also possible with next auth but sessions are much easier to use correctly but again next off handles these sessions automatically for us we don't have to create them next off dusters and then we also have this verification token model as far as I know it these are only used if you implement login with an email link which we are not using here but again it's still good to add all of these models at once in case you want to add additional authentication strategies okay and then we also want to be able to connect a shopping cart to a user right so that we don't only have Anonymous shopping carts where we store the card ID in a Kobe instead we can also store a user ID on a card and this way know which user this belongs to the zoo on the card model and I put this above the timestamps we add a user idea which will be of type string this will contain an object idea but we make this value optional with a question mark after string because Anonymous shopping carts don't have a user ID right and then we also need this object ID annotation because this contains a mongodb object ID then we also add the relation below like we also did for the product and the cards on the card item we call this one just user it will be of type user which is our user model that we just copy pasted it's optional again because it's connected to the user ID which is also optional because a card could not belong to a user account yeah and then we add the same line as here basically just that we change this to a user idea we press the formatting shortcut to align this properly and the counterpart to this user field here is on the user model discard array I think if we delete this and press the formatting shortcut again yeah it gets added back automatically because this belongs to this user relation with that up here this relation basically allows us to do two things first of all when we delete a user we can automatically delete their accounts and for an existing user we can fetch all their cards if we allow multiple cards per user but again this whole file is linked in the video description below so we can copy paste it from there it's so good to understand what is going on here okay and then we want to push these changes to our database to create these new collections so we open the terminal stop the execution and run npx Prisma DB push again as you can see it created and configured a bunch of new collections which we should Now find in our Atlas backend sessions verification tokens users and so on they are empty right now and then we want to regenerate our Prisma client to have these new methods available I think this actually happens automatically when you run DB push but just to be sure we run npx Prisma generate again which generates this new updated Prisma client and then real npm run Dev again okay and then I want to put a newer button into our enough bar that shows the profile picture of the user when they are logged in and also contains a drop down menu to log out this button needs to be a client component because we need to handle button clicks there and the same as we did for the shopping cart button let's put it into its own file so that we can keep the navbar itself as a server component so we have the shopping cart button we create a new file which we call user menu button so then we export a default function user menu button and here we are return a div we also add props interface user menu button props we want to show the currently locked in user in this user button and we can get the user out of the session and we get the session from next off so we add session colon as a prop entry set the type to session from next off this one here so this is the import statement but the user might not be logged in so we add a vertical bar and now so that we can also pass null for the session now we could also fetch the session directly in here with this us session Hook from next off this fetches decision clientside but I want to fetch the session server side in our navbar which is a server component because this way decision data is available as soon as our Pages opened there is no short moment when the user is not authenticated instead the user is logged in right array and this is also how we set up our shopping cart right I want there to be a no loading time instead I want all the data to be there as soon as the page is opened again because I think this feels more professional and this is also how it works on websites like Amazon this is why we don't get the session directly in here because this has to be a client component we also add the use client directive at the top because we later need to handle on click events here and this is only possible in a client component then we destructure our props as usual here in the function user menu props and in here is our session and then the first line of this function we want to get the user object out of the session which we can do with session dot user and it adds the save call Operator because the session can be null okay and then we finish the layout itself we add some class names to the outer diff again we use drop down and drop down end which we also used before for the shopping cart button again we put a label with this tab index 0 in here and we add some class names to the label as well BTN BTN ghost and BTN Circle again the same classes we used on the shopping cart button okay and then in this button I want to show something different depending if the user is logged in or not so we add an expression that checks if the user is defined we use the ternary operator with a question mark if the user is defined I want to render the user image in the next image before we set up this image let's also add the second part of the ternary operator colon if the user is not defined I want to render yeah three little dotsier which indicate that this is a drop down menu for this we use an SVG again and again I will link this file in the video description so you can copy paste it from there we can't get around this because yeah we can't type this out by hand we can only copy paste these svgs let's press the formatting shortcut so this gets aligned properly and again prettier automatically adds these parentheses which are very useful for the source of the image we want to pass user.image and again we get this from Google when we log in this will automatically be filled with the image of the Google account of the user but user can be undefined right so we have to add a safe cut operator here and we want to use something else as a fallback for this I prepared this profile pic placeholder image which is in the assets foil this one here I want to import this and use this as a fileback so at the top we import profile pic placeholder from at slash assets slash Prof epic placeholder PNG and then we can use it as the file back here profile pic placeholder in case the user or the image is undefined we set the alt text to just profile picture I think this is enough we set the width and height both to 40 pixels and then we also want to style this with W10 which sets the width of the image but in CSS to the same 40 pixels as we also loaded because again the final dimensions are dictated by CSS not by these values we are using here at least when we use this component and then we want to make this a circle which we can do with rounded foil this adds the Border radius to over 9000 and this creates a round image okay so if the user is logged in we see their profile picture if they are not logged in we see this SVG which is three little dots basically you will see this in a moment and outside of this label but still inside the stiff inside the drop down menu we add the drop down menu items so in here we put a ul and unordered list this is just a normal HTML tag and to the opening tag of UL we add this tab index 0 again again this is necessary for accessibility so that we can use tab to navigate between our menus and again this needs a class name which are drop down content manual rounded box and again I got all of them from this URL menu minus SM then we need this c Index again to make sure that this menu is in the foreground we add the match on top with mt3 we set the width to a w52 let me make this bigger we set the background color with BG base 100 then we need some padding and lastly we also want to give this a shadow not SM but just normal shadow and into the UL we put list items for the Zinger buttons in our drop down menu you can put multiple once in there we actually only need one but the contents of this item are different depending if we are locked in or locked out if we are logged in we wanna show the log out button and if we are logged out we want to show the login button right so we add an expression here again with a ternary operator if we have a user then we want to render a button that says sign out if the user is not logged in then we want to render a button that says sign in and then we give both of these buttons on click handlers this is why we had to make this a client component because we can only use on click with JavaScript and in here we pass an error function like this and in order to sign out we can call this sign out function which is coming from next off so we add this import here entry code this function we can also configure this between curly braces and we can zero when we are locked out we want to be redirected back to the front page so we can set the Callback URL to the home page and to sign in we also passing on click Handler with an anonymous function which simply calls sign in now instead of these functions we could also use links because they are specific URLs where we can navigate the user tool so they also get to the next of login screen the benefit of using design and function rather than design in url endpoint is that this automatically redirects us to the previous page after signing in so if we are on a product page and we sign in we get redirected to the product page and not to the home page and the same is the case for sign out by default but here we have changed this Behavior by setting the Callback URL explicitly you can remove this if you want okay let's format and save this and now we only have to add this user menu button to our love bar and then log in short work I just realized one little mistake I want this not to be a BG Bluer but BG base 100 this is the correct value okay then we open the NAFTA TSX file and we want to put the user menu button right next to the shopping cart button and it's already styled correctly but this expects the session as input right which we want to fetch here in our enough bar because again the navbar is a server component and this way we can fetch the session before the page is actually opened so here at the top we create a const session we cut a weight get a server session this is a function from next off that we can use in server components to get the session of the logged in user from the database now to this get server session we also have to pass the off options where is this coming from those are the next half options that we set up in our route Handler earlier this is why we export them here because we have to pass them to get server session otherwise this will not work okay so this way we get the session of the currently locked in user from the database and the way this works is that next offsets an encrypted cookie in the browser of the user to identify the correct session in the database and know if they are locked in or not and then we simply pass the session to our user menu button and save this and now on our website when we refresh the page we should see our user menu button and the other days we are currently not logged in so we see these three little dots which are the SVG we pasted and now let's try this out let's log in by clicking the sign and by default we get to this screen here you can customize this screen or replace it for a completely different one this is explained in the next of documentation but for our project here this is fine sign in with Google and then I want to sign in with one of my accounts then we get redirected back to the page and this error happens because we are trying to load the profile picture from googleusercontent.com but this will only work if we allow this address in our next config file so we go into our project open nextconfig.js and here we already allow images from unsplash.com right so here we want to add a second entry this will comma another pair of curly braces and we set the host name to this one here let's actually copy this put it here maybe the address is different for you copy whatever you see here as the host name this entry restart the development server with npm rundev but we should still be locked in I think so let's refresh the page and there we are and this is the profile picture of my Google account which you can also see up here and this user information is now stored in the database let's refresh this here we have the user florianwalter with the image from Google and in the accounts collection there's all the information about this Google account now right now a user account doesn't have their own shopping cart yet we still have our Anonymous shopping cart that's connected to the kogi we will set up user shopping carts in the next section and then we will also merge the anonymous card with the user's card when we log in let's check if logout works as well so I click on sign out entry are locked out let's log in again sign in with Google recording account and we are logged in really cool and again since we fetched the user server side and our enough bar when we refresh the page the user is there immediately there is no glitch in the UI there is no loading State we have the user and the shopping cart both available as soon as the page is opened but to see that we are actually authenticated let's add some protection to our ads product page we make it so that not anyone can open this page instead we have to be logged in to add a product of course in a real app you probably want to make this available only for an administ trailer but here we will just add simple authentication protection so the ads product page is a server component right this means we can fetch our session with get server session again to which again we have to pass the off options we also have to make this an async function and then we can simply check if possession is undefined on Nile then we want to redirect the user and we already have this import here from next navigation tool design in endpoint which we find under slash API slash off slash design in and as I explained earlier by default when we use the URL instead of design in function this doesn't redirect us to the page where we were previously at it redirects us to the front page instead but we can configure this manually and by adding the Callback URL param so question mark URL in camera case spelling like this and then we want to redirect tool slash at minus product so that we get back to this ad product page so let's try this out while we are logged in we should be able to access the add product page but if we logged out we should be redirected to the login page when we try to access the Edge product page we get to the login page we log in and then we should be redirected to the ads product page so this works it also makes sense to add a protection to the server action itself in case we are trying to call this while we are not logged in so here at the top after us server we fetch the session here as well with a weight get server sessions to which again we pass the off options now we basically want to do the exact same thing as here if the session is now we want to redirect the user but this happens when we click the add product button while we are not logged in okay before we go on let's also check if our nth validation here works so when I remove an environment variable from the dot nth file for example the Google client idea and then restart the development server we should see an error message because this will not be able to fetch the user information let's try this out we refresh the page the session is now and we get the sort error which is caused because it's trying to pass the nth schema with the process.n files but since the Google client ID is missing this throws an error with a very readable error message we immediately see what is wrong and we don't accidentally continue with an undefined value so this works as well let's add the Google client ID back restart the development server and open our page again okay now let's go into our cut TS file in the lip folder again and adapt our get card and create card functions to our newer user authentication let's start with create cards right now we only create an anonymous card that's not connected to a specific user right so in here let's fetch the session concession equals a weight get server session we can use get server session here because we only calculate card from server components again we have to pass the off options here and then instead of creating the new cards variable here we delete the const and instead above recreator let a new card which is of type card that's the type coming from the Prisma client this is the same type we get back when we call cards.create it's an unpopulated card okay then below we want to check if we are logged in so we check if session has a value if it doesn't have a value then we want to create our Anonymous card as before so we paste in this part and we also paste in the code that creates the cookie if we are locked in we also want to create a new card but this one will be tied to a user account so again a way to Prisma Dot card dot create then we pass data and here we want to set the user idea to a session dot user dot idea now the ID is by default not content in the user object because next off doesn't return it to us by default we have to add this ourselves so let's just write ID here for now this gives us an error we go into our route Handler so this next of Route file we created earlier and here we can change what data we want to return in the user object by adding a callback so under providers we add this callbacks field to which repairs curly braces and in here we get Auto completion we can use this session callback which will be triggered whenever we return a session from the database and here we can hook into this process and modify what data we get back we can also destructure this paramsion so we remove params and add curly braces instead and in here we want to have the session and the user object and then we can there we want to set a session Dot user.id to the idea that's contained in this user object this way we take the ID of the user in our database and add it to the version so that we can access it here but typescript doesn't recognize that there is an ID field on this session user in JavaScript this will just work but in typescript we also have to configure this type here before we do this let's finish this function at the entry have to return the session so that we can use it in our app to fix this problem here we have to extend this user type for this we go into our folder and outside of srz this time so right here with all these configuration files we want to create a new folder which we call adds types this is a naming convention for type files in here we put a new file that we call next of dot d dot TS D dot TS files are typescript declaration files and here we can make changes to existing types and in here we write declare module and as a string we write next off because this is the library where we want to make changes to a type curly braces and we want to change the session interface this is what we want to change this session object which contains the user but the user doesn't have an idea so in interface Obsession we write user column again a pair of curly braces and in here we put the ID value that we want to add to this user it's of type string but we also want to have all the other values that are on the user available by default because when we write it this way now the user only has an idea to also add these other values back to the user we go after the closing curly brace here write an Amazon sign to create an intersection type and then we use default session from next off to which we add scrap records and then here we write user as a string so this way we extend this next off user and add this idea field to it let's reformat this and save it and now our arrows here disappeared and now in our card file in the lip folder we also don't have an error anymore now the idea of the user is added to the user in the session when we return a session okay so now when we calculate cards it checks if the user is logged in if yes it creates a card connected to this user if not it creates an anonymous card like before now let's scroll up to create cards and do the same here as well in the first line we want to retrieve the session then we want to create a variable for this card here so we remove the const here instead we create a lead card by this card we've had here is populated with the product information right with these include options we used here so the return type of this is card with products the type that we created earlier so let card cartridge products or null if we don't have a card yet and we initialize this with Naya then again we check if we have a session or not if we don't have a session we want to do the same as before we want to fetch the cook here with the local card idea and fetch this Anonymous card if we have a session we want to fetch the card of this user so cart equates a weight Prisma dot cart dot find first this time it's not find unique because a user can have multiple cards but here we only support one card so we use find First and in curly braces we add the photos we want to fetch the card well the user idea in the card that's part of the schema that we modified earlier so a cardinal has a user ID which is optional we want to find the card where the user idea is the idea of the currently locked in user comma and of course we want to include the same populated card item data and the rest stays the same right so let's try this out when I refresh the page we should see an empty card because there is no card connected to this user account yet right so I have to start the development server again refresh the page and the card is emptier now we should be able to add an item to the card it creates a card for this particular user when we log out we should see the anonymous card again so that's the anonymous card and when we log in we should see this user's card again and we should also see two cards in our database there they are one has a user ID and the other doesn't Okay cool so this is working now let's implement the logic that merges the anonymous card with the user's card when we log in this is also how it works on Amazon so you are logged out you add some items to your cart and then you log into your account these items are moved into your user card for this let's create a new function here in our lib folder and our card TS file let's put it at the bottom export async function and I'm gonna call it merge Anonymous card into a user card it's a very long name but it's very descriptive and to this function we pass the ideal of the user that we want to merge the card into and here we have to write a little bit of logic the first step is we want to fetch the local card F1 access first we need a cookie just like in get cards let's copy this line put it here okay and we also want to get the local card from the database right so let's copy this part here as well where we assign logo card we create a const card where we assign this tool and we need to populate the items because we want to merge these items together so we need to know which items are in the cart but we don't need the product information because this is not necessary to merge these cards so what we do is we remove this part here include product rule and just write true instead this populates the items field but it doesn't populate the card items with the product information instead they will only contain the quantity and the product ID let's also rename this variable to local card and if there is no local card then there's nothing to merge right So Below we check if exclamation mark local card we just run a return if there is a local card then next we need the users card so we create a const user card equals await Prisma Dot card dot finder first again because a user can have multiple cards so this doesn't work with find unique well the user IDs match with the user ID value we passed to this function and again we want to include the card items in here but we don't need the product information okay and then we want to merge the items of the user card with the anonymous card then we want to delete all the currently existing items in the user card and replace them for these merged items and then finally we also want to delete the anonymous card so that it's empty again so we have to do a zeroa database operations now what we have to keep in mind is what happens if we get an arrow somewhere in the middle for example what happens if we delete the items from the user card but we get an error before we insert the new items and then the user card is suddenly emptier this is why we want to execute all of this in a transaction a database transaction is a process where you can do multiple operations but if one of them fails the whole transaction will be rolled back and none of the changes will be applied and I think pretty much all types of databases support transactions including mongodb and to execute the transaction with Prisma we go below and we write await Prisma dot transaction and it starts with a dollar sign this is the function name to this function we can pass an async function where we execute the actual transaction and this async function gets passed in argument which is again a Prisma client but every operation we call on this Prisma client and here will be part of the transaction and in the documentation they call this TX which I guess stands for transaction so we add this argument here and again TX is just a Prisma client on which we can do our usual operations now before we set up this transaction we have to create another function below outside of merge Anonymous card into user card this function will contain the actual logic that merges the items in these two cards so we colored merge card items and to this function we pass the user card and the anonymous card right but I wrote a function in a way that we can pass any arbitrary number of cards to it so if you want to merge three cards for whatever reason in the future then this will work as well for this we use this syntax where we start the argument with three dots this way we create socalled bar arcs meaning that we can pass as many of these arguments to this function as we want and we cut this arguments card items and the type of the swag argument is an array of card items from the Prisma client but then we add another array because we can pass as many of these card item arrays as we want as I just explained so this is an array of array of card items and in here we want to take each entry of these two cards and combine them together so if one has a quantity of one and one has a quantity of two then we want the quantity of three and if the anonymous card contains items that are not in the user card yet then we want to add them but instead of writing this out by hand I just copy paste this here you can pause the video and type this out this is nothing new it's just a bit complicated it uses the reduce function and for each Loop to go through each of the card items and then combine the quantities to be honest I had GitHub copilot write this Logic for me GitHub copilot in case you don't know is an AI plugin for vs code it's very useful to create boilerplate code like this automatically but all of this still makes sense so if you go through this step by step then you will understand what exactly is happening here again just take a moment type this out and then we can continue our transaction here so in the transaction we want to check if the user card exists if it exists we want to merge it with the anonymous card if it doesn't exist we want to create a completely newer user account right so we check if user account we do this inside the transaction and let's also add the ads block white array so we don't get confused by the nesting later if there is a user card we want to use our merge card items function to merge the anonymous card with the user card so we create a const let's call it merged with a deal card items and for this we call our merge card items function to which repairs local cards dot items comma and user card dot items again since we made this a one Arc we can pass as many of these card item arrays as we want so this now contains the merged card items the next step is to delete the existing items in the user card and then put this newer merged card items in there instead so we call a weight TX which is this Prisma client on which we do the transaction operations card item dot delete menu and in the filter we Define which ones we want to delete with this where value and in here we want to compare the card idea to the user card.id because we want to delete our card items that belong to this user card and then put our newer merge card items in there So Below we write a wait TX Dot card item dot create menu and for the data we want to pass the merged card items not merge card items because that's the name of the function merged card items which is our new array up here now each of these merged card items also contains the idea of this card item in the database it had before but we are making new database entries here and we want a new auto generated idea so we want to ignore this ID field we only care about these other three fields we can do this by mapping these merged card items so again in the map function we get past each item we add parentheses and curly braces because these curly braces are not the block of this function they are the return value the JavaScript object that we want to return this is why we have to wrap this into parentheses and as I said in here we want to put the card idea which is user card dot idea we want to set a product idea to item dot product idea and we want to set a quantity to item.quantity so now we put this much card items in here but we ignore the IDS to create a completely new idea and we also set the card ID of all of these items to the user card idea which is important because the anonymous items didn't have a card ID before right so we have to set this here and that's the ID of the card we found in the database the existing card and in the else block it means we don't have an existing user card yet and we want to create one so await tx.card.create in here we pass the data as usual curly braces we want to set the user ID of this cards to the user ID we pass to this function so we pass this as the first argument again this is a shorthand for writing user ID column user idea but the value and the key have the same name so we can use the short syntax selectors then we want to put the items in here items colon and this is a socalled relation query in Prisma this way we can create a card in the card collection but at the same time we can create card items in the card items collection in one operation and they will automatically be connected together by adding the card idea to these items then in here we calculate menu to create serverware card items and I know that this can look complicated at first but you just have to work through this because this is how you write these database operations and here we have to pass data again for which we want to pass the local card dot items this time it's not the merged card items because in this ads block a user card doesn't exist yet meaning there are no user card items they are only local card items but again we want to map this into the correct structure again we get past each item and we return a new JavaScript object for each of them now since we do this relation query where we do the operation over the card and not the card item we don't have to set the card ID this time this is automatically handled by this operation instead this time we only need the product idea and the quantity and the card ID will be set automatically okay and after merging the cards has completed we want to delete the local card and also delete the cookie so we do this below this whole F block here still inside the transaction so if user card else and below this else block we write a weight TX we are still inside the transaction Dot card dot delete we want to delete the card well the ID of the card is the logo card idea the local cards that we fetched from our cookie we want to delete this one and then we want to remove the cookie which we do with cookies dot set the same name look a card idea and then we set this to an empty string this is how you delete a cookie in xjs okay maybe let's recap this whole function one more time we fetch the local card from this cookie if there is no local cards then we return because there is no data that we have to merge into the user card if there is a local card then we fetch the user card from the database if there is no user card in the database yet then we just have to create a new one with the items contained in the logo card and if there's already a user card and a logo card then we merge these items and add them all to the user card and at the end we delete the local cards because we don't need it anymore we have merged it into the users card okay this function is ready but now the question is where do we call our merge function here we want to call dust right after we have logged in so before the pages open the merging already happened and as usual when we see the page all the data is already displayed correctly and there's no loading state so let's go into our next of Route Handler again we have the skull back here that will be called every time we return a session and Below callbacks we can also add this events field and in here we can get cult every time we did a certain off operation for example we have this signed in function here and this is the perfect place to merge our cards because this will be called right after we have signed in but before we are returned to our home page we want to make this an async function because our merge card functions makes database operations and we want to destructure this argument here we need this user value to get the user ID and then here we simply call a weight merge Anonymous Cards into user account which expects the user idea that we can get out of this user this is the user that just signed in okay let's try this out the locked end user has one item in the cart right now these shoes for 95 bucks let's sign out in the anonymous card we have the headphones and this boss duel and now when we log in these cards should be merged and we should have three items in there let's try this out sign in to our account now design and callback is fired which merges the cards and there we are we have our user card with the three items in there and when we log out again we should see an empty cart because we cleared the anonymous card this is by the way also how Amazon handles it let's try this one more time let's put something into the anonymous card maybe two of these plants here and again this real glitch doesn't happen in production it only happens in development so now we have two of these plants in here again we log in and these items will be merged into the user card and this eye works isn't this cool now let's also try if our transaction works properly as I explained if we have an error here somewhere inside this transaction none of these operations should be applied let's try this out by throwing an error here at the very end of the transaction throw error test just for a moment obviously we will remove this ladder so now I do the same process again I log out I add this card to the shopping cart but now when we log in and execute our merge function it will fail because of this error but the error is thrown at the very end after all these operations but since these operations are part of a transaction they shouldn't be applied when this error occurs within the transaction so let's see we log in again we should see this error in the console that is error test our user card still only has five items because this merging failed and this one item is still in our Anonymous card so the website still works but these cards are not merged but they are also not left in an inconsistent state so this is a really professional setup all right let's not forget to remove this error here maybe I will leave this as a comment one more thing I want to mention is whenever we fetch cookies like we do when we either get the anonymous card or also inside get server session then the route that uses this function is automatically dynamically rendered this is important because when we show the card of the user this data is different for each individual user right so we don't want to Cache this page on our backend and serve the exact same page to each user every user has their own card but we don't have to configure this cache ourselves because again whenever we get cookies which we do here but which is also done inside get server session then the page is rendered dynamically automatically so it fetches new data whenever we open the page and it's not cached between users this is where we don't have to add revalidate 0 to our cart page for example this happens automatically because we retrieve the card here and to verify this we can actually build the project with npm run built which takes a moment this builds this project for production mode and here we can see from these icons how these pages are rendered and cached so this Lambda symbol here means that the page is not cached instead it's created every time the page is opened and when we look at the cut route here we see this Lambda symbol so this page is not statically cached which is good okay this was a tough part but I think we learned a lot and in the next section we will Implement pagination here for our front page so that we don't show our products at once okay so to have enough items that we can actually page in it let's go to the ads product page again which now requires authentication that's good and then let's add a bunch of newer products but let's do so in a loop so that we don't have to repeat this process like 50 times let's go to the add product page code and then just for this one operation I will put a loop in here so let's say for I and let's just put I don't know 50 items in here and then I want to repeat this process here and create the exact same item in the database 50 times just so that we can later see our full page generation bar with many pages in action so let's save this then we need an image again as usual we take this from unsplash I'm going to use this Clone Trooper here because what would be more fitting for 50 items with the exact same data and then a clone trooper so I paste the image URL here called this clone trooper description this is a cooler controller bar we have many of them of course this data here doesn't matter and the price will be I don't know 19.99 now we should execute this in this Loop and add the same item 50 times right so this will take a moment to complete okay let's refresh the page and now we have this Clone Trooper in here 50 times let's also remove the for loop again because obviously we don't want to keep this and then we want to paginate this front page here because if we have a lot of items in our database we don't want to show all of them at once we want to show them in pages so let's go into our project and set up a pagination bar we will put this into the components folder because you will likely reuse this in different places pagination bar dot TSX as usual The Styling of this component is coming from Daisy UI this is how it looks and in this fire we export a default function which we also call pagination Bar and this component also needs props pagination bar props we need the current page so that we can highlight this element in the pagination bar and also make it not clickable which will be a number and we of course need a total number of pages so that we know how many items to show in this pagination bar then we add this propstone here and destructure them current page total pages now in this pagination bar I don't want to show all pages at once because if we have 100 Pages for example then we don't want to show all the numbers from 1 to 100 here right we only want to show a subset of these numbers for this we will write some logic that calculates these page numbers you can just follow along we create a const Max page that's the largest page number that will be shown in our pagination bar we assign this to math.min which Returns the smallest of the values we pass to this function to this we pass total Pages comma and then math.nex which is the opposite of math.min and here repairs current Page Plus 4 comma 10. so the max page will be the current Page Plus 4. so if we are on page 13 for example the largest page number will be 17. however if we are on page 1 for example then there will be no pages to the left of page 1 right because there are no smaller pages in this case I want to show all the page numbers all the way up to 10 otherwise the pagination bar would be very small also if there is no current Page Plus 4 because we are on page 17 for example and there are only 18 total Pages then we want to use the total pages instead this is where we wrap this into math.min I know this is a bit complicated at first but you can just play around with this and see how this behaves then we also create a const Min page for which we use nav dot Max 1 comma math dot min and to math.min we pass current page 5 or next page minus nine like this again this calculates an appropriate value for the Min page that is not smaller than one and I just came up with this by playing around and zero what looks good and then we want to generate page items from the Min page all the way up to the next page we do this in a loop so we create another for Loop let's call the index page we start at Min page so we replace the zero for Min page entry one renders until page is less than or equal to the max page and then inside this Loop we want to add page items to an array so above the loop let's create this array cons numbered page items this will be of type jsx element array because this contains jsx elements and we initialize this with an empty array and then in the loop for each round we can say numbered page items dot push to put a new element in here and each page item will be a link so we use a next link here the text of the link will be the current page number which is the index of the loop and then we configure the link itself so we add an href and what we do is we navigate to the current page but we append this page URL query param with a question mark page equals plus the current page number so this adds this page query param to the current destination and we can read the page from the URL in our server component and then since we are in the loop we also have to add a key to each element for which we can just use the page number and then we also want to add the class name to each link we make this an expression with curly braces and add a back text string in here the first class we need for all of these items is this join item class which is used in Daisy uif for these pagination bar items and we also use the button class BTN then we put an expression in here with a dollar design and curly braces and what I want to do is I want to disable the currently selected page item so that we can't even click it so it has a different styling but we will also not make it clickable we can do this with a class but we want to apply this class conditionally so in this expression we check if the current page is equal to the page of this item then question mark ternary operator we want to apply another class in quotation marks we want to apply BTN active which changes the highlighting color of this item and then I also want to make this element unclickable for which we can use the pointer minus events minus none class which is coming from Tailwind then we add the second half of the ternary operator colon if this item is not the current page we don't want to add an additional class so we just pass an empty string here okay and then we create the pagination bar itself in the return statement so in here we put a div to which we add the class name join that's the counterpart of join item this connects these items visually and in the stuff we want to render our numbered page items right let's see how this looks let's go to our front page and before we actually fetch the count of pages and items we have let's just hard code This pagination Bar in here for now just to see how it looks so we have our pagination bar let's set the current page to three and the total pages to earn a large number 99 and then see how this looks there it is let's Center this on the screen by adding some class names to the outer diff we add Flex color and item Center which would send everything including the patronation bar so we see the pages from 1 to 10 if I set the current page to 13. you can see the responsive page numbers in action now the smallest value is 8 the largest one is 17 and we never show all 99 Pages at once because that would be too many but our pagination bar is still not fully responsive if the screen width is too small then this will not all fit on the screen so let's make this responsive by switching to a different kind of view what I want to do is when the screen is small I want to switch to this kind of pagination bar where we just have the current page and a button for left and right so let's go back into our pagination bar component and what we can do is we can hide this div on small screens or rather on very small screens by setting this to Hidden by default and then on the SM breakpoint which are small screens and larger we want to set the display back to a block so we show it on this screen size and larger and on this very small screen it's very hides these page numbers we want to show a different element instead and to put multiple elements into this return block we can wrap this into such a fragment because there always has to be one parent element and there's no reason to make this a div because only one of these will be shown a diff would work as well as the wrapper but I think a fragment is more semantically correct So Below the first diff we put executive and here we add the class name join again on gravy small screens we set this to display block by default and on small screens and larger this one will be hidden so only one of these two will be shown depending on the screen size and in here we put these elements from this UI I just showed you earlier so we have this left button which we only want to show if current page is larger than one because otherwise there is no previous page that we can navigate to right so if the current page is larger than one we want to render a link The Edge ref again will point to a question mark page equals and we append current page 1 and we wrap this into parentheses and this link needs the same join item and BTN classes as we used for our numbered page items so we add the class name here as well BTN and join item we close this link tag and as the text we use this left Arrow here which I just copied from Days UI I have no idea how to enter this in a normal keyboard but I will link this pagination bar again in the video description below so you can copy it from there but you can also just use any other icon here okay then we want the button for the current page right and then this right arrow zor below this expression here where we checked current page larger than one we add a button this doesn't have to be a link because this will be disabled anyway it will not be clickable so to this button we add the class names again join item BTN and pointer events none to make this unclickable and this was a page and the current page number then below the white Arrow we check if current page is less than total Pages because if we are on the last page then we don't need the right button in here again we put the link just like this one so let's actually copy this just that we wanna go to a current Page Plus One and the text in here will be a right arrow okay let's save this and see how this looks so this is the full pagination bar and if I make this small enough eventually it turns into this pagination bar but we can't try it out yet because we haven't set up pagination here yet so let's do that next let's go to the front page which is the page TSX in the app folder first of all we need to read the current page out of the URL because the pagination bar adds this as a UL param right so in our page here we can get the search params from the props for this we create an interface called home props and in here we add this search params field and you have to spell it exactly like this in camera case because this is how we get the search params out of the URL in xjs we need this exact prop name and this will contain an object with the different search params and in here we expect our page which will be a string this number page is coming from the pagination bar because this is how we are cult this search param value here this has to match and then we can destructure this page here in the component home props and this is actually not the page yet it contains the search params and the search params contain the page so this is how we destructure this what we can also do is we can give this a default value of 1 like this as a string because such params are strings this way we have a page number to work with even if no query param is added to the URL and in this case of course we want to load the first page so next we have to turn this page param into a number so we create the const current page and then we call Path int to which we pass the page param and even if we don't pass one it will be Z to A one as the fallback value then we also need to define a page size and let's store this value in a variable as well that's good practice because this way we avoid magic numbers where we just have numbers in our codes that we might not remember what the meaning was so let's create a const page size and let's set this to this you can also make this larger if you want to deploy this app but for testing purposes a small page size is easier to work with and then we also want to create a number for the hero item count the hero item is this element here at the top we have to take this into account when we paginate our results because we will only show this on the first page and again to avoid magic numbers in our code I store this value in a variable as well and maybe in the future you want to have more than one of these hero items then you have to change this number then we need the total number of items in our database so that we can calculate the largest page so we create a const total item count and we can get this through Prisma by calling a wedge Prisma dot product because this is what we want to count and then we have discount function here which Returns the total number of products in our database and from this we can calculate the number of total Pages we have right so we created const total pages equals this would be a total item count divided by a page size but since we have this additional hero item on the first page we subtract this from the total item count so minus zero item count of course we have to wrap this part into parentheses because division takes precedence over subtraction and this can return a decimal value so it can return something like 4.5 pages but we always want to round this up because if we have four and a half page then we need five pages in our pagination bar right so we wrap this into another pair of parentheses and before it we add math.co which rounds this number we pass in here up so 4.5 for example will be rounded up to a 5. okay now we have the number of pages and now we want to modify our Prisma query to only return the current page so we keep the order by we still want to order this with the newest product at the top and after this we add the skip field where we can Define how many items you want to skip because if we are on page 2 we want to skip all the items of the first page so we want to skip current page minus one so if we are on Page tour we want to skip one fully page that's the first page times the page size right now again since we have this hero item on the first page we want to add something to this page size in parentheses we want to check if the current page is equal to one if we are on the first page then we don't want to skip any additional items because we show the hero item so after a question mark we write 0. but if we are not on the first page we want to skip one which is the hero item actually we don't want to skip one we want to skip here or item count first of all this makes it more readable because again we avoid this magic number but this can also now adapt to a two or more hero items so now we have defined how many items we want to skip after this we add another comma and also adds this take field which tells Prisma how many items to return for this page this is obviously the page size but again we have to account for this hero item so we add plus if the current page is the first page question mark then we want to add hero item count to the patreon size otherwise we don't want to add this okay now we have all our values here so we can use them down here on our pagination bar but I want to render this pagination bar only if we have more than one page otherwise it's a bit unnecessary so we check if total pages is greater than one only then we want to render This pagination Bar then for current page we pass the current page that we passed from the URL and for total Pages we pass the total pages that we calculated so now when we save this we only see six items and we are on page one right what happens if we click Page tour we still render our hero item at the top so down here we only have five items now so we want to hide this hero item if we are not on page one so let's scroll up to our hero item right here and render this only if current page is equal to 1. to Amazon science and we wrap this all around this hero item but now we still only have five items here because we are sliced the products and we remove the first item that's the one we were showing in the hero item so what we do is we remove this whole part and instead we add parentheses and here we check if current page is equal to 1 then we want a map from products.slice.1 as we did before but if we are not on the first page colon we want to take the whole products array we don't want to remove the first item if we are on page 2 upwards so now when we save this we see six items let's refresh the page just to make sure that the changes are applied correctly on page three we still see the same six items and eventually we should get to our old items here these ones all of them show six items except for the first page which shows this additional hero item at the top so this works correctly and the currently selected page is content in the URL this is basically how you can maintain state in server components server components don't have real estate they can't use your state but they can put information in the URL like the page number and when you use search params in a server component like we are doing here then this page is automatically dynamically rendered meaning every time we open this page or refresh it we get the latest data and it's not cached this is because next.js recognizes that we are reading the search params which are Dynamic nextges can't know in advance which search params we are passing here for example it can't know which page we are trying to open so if we added newer products to our database they will always be shown here even if we don't compile the project again in production this has the same effect as adding export const we validate equal 0 which I explain in my next.js beginner course this also makes this page dynamically rendered but again search param status automatically and this is also to be heavier we want here usually because when you add new products to your database you usually want to show these changes immediately right okay so our page is already very professional next I want to implement this search functionality here so the search field itself already works right we have already implemented this so if I search for Trooper for example we get redirected to the search page and we add this query as a query param we just haven't set up the page itself yet so let's do that next so we create a new page in the app directory first we have to create a folder search that's the relative URL that we navigate to and then here we put the page TSX as usual and then we export the default function which we call search page and just like on the front page we want to get the search params out of the URL because this contains the search query so we create an interface search page props and here again we need the search params with this exact spelling and this time in here we expect the query which is a string and then here we want to get the search programs out of the props and out of these search params we want to get the query and then we want to fetch these results out of the database so we turn this into an async function this is just a normal server component and in here we create the const products and call await Prisma dot product dot find menu we want to return mailable products and then we add our filter here where colon curly braces and I want to search in both the name and the description of the product so we can use this or operator in our uppercase to which we can pass an array with multiple queries and only one of these queries has to match so we add them between curly braces first we want to search in the name of the product so we write Name colon curly braces and then we have this contents comparator here we want to find this if the name contains the query and the query is the search query that we get out of the URL and then after contains query we add the comma and we set the mode to insensitive which is a string this makes the search case insensitive so it doesn't matter if our query contains uppercase or lowercase letters this will always find the same results then we add a comma at the end and we duplicate this line to add another entry to our or array here just that this time we want to search in the description and again since this is wrapped into or only one of these has to match and I also want to order these results so after the wear down here we add order buyer colon curly braces again we want to order by idea in descending order again the ID contains a timestamp so we have our data and now we want to render this in the UI first of all I want to check if products.length is equal to zero then we want to return a div that says no products found and I want to send that this text on the screen so I add a class name text sender which again is coming from Tailwind so this is an early return in case there are no products that match this query if there are products we want to return them in the list so below we add another return statement we wrap this intuitive inside this diff we want to map our products products.map as usual we get past each product and we want to render the same product cards that we also use on the front page so to this product card we have to pass the product and the key with the product idea we also want to install the script properly so we can copy these class names here from the front page product card grid except for the mi41 we can copy this you can also type them out by hand if you prefer and we add them to this div here so let's save this and see how this looks we are still on the search page right let's refresh this just to be sure and here are our results you can paginate them as well if you want I didn't bother implementing pagination here but you already know how this works let's search for something else like store and it finds our bar stool of course you can customize the search to your preferences okay I also want to add a title to this page and I want this title to depend on the search query so to make this dynamic we export the function generate meta data again the spelling has to be exact as we already know this can take the same props as the page itself so we pass the search page props and get a query out of here this function will return metadata this time we don't have to wrap this into a promise because this will not be a fetched asynchronously we don't need to do a database operation here we just want to use the query itself in the title so I want to set the title tool back text string search column then I put the query in here and then our usual Dash flomas on at the end yeah of course there should be no colon after return so now this says search colon then the query we typed in and then flowmason really cool so featurewise our app is finished but we still have to deploy it and there are some additional steps we have to take but there's one other thing I want to change first and this will require us to implement a Prisma extension Prisma extension is a brand new feature that just became available and this is a very interesting topic that you don't want to skip here so make sure to watch this tutorial all the way to the end the fact that we can create Anonymous shopping carts is really cool but one problem this creates is that we might accumulate a lot of abandoned shopping carts in our database because a user can create an anonymous shopping cart but then delete the cookie for example or maybe they were using the incognito tab which doesn't store cookies across sessions and once this cookie is deleted there is no connection to the shopping cart in the database anymore and also no way for the user to retrieve it anymore instead the next time they add an item to their cards they create a completely newer shopping cart so it might be a good idea to delete these abandoned shopping carts from the database from time to time for this we can check the updated ads timestamp of the card together with the user idea we can for example say okay if a card doesn't belong to a use also if it doesn't have a user idea and it hasn't been updated in a while then we want it deleted and then you can also go through the card items and delete all card items and that belong to the card that you just deleted the problem is right now when we update our card items in our server actions the updated add timestamp of the card is not updated because we are doing these updates directly over the card item model now we can change this and use a relation query as we already did before we use a relation query in our merge cut function down here where we create a card and the card items in one operation this is a socalled relation query because we create card items over this card model here so we create two models at the same time in our server actions we can do the same instead of doing the operation on the card item we change this query so let's start with card item dot delete in the server action file of the shopping cart page so instead of card item delete we can write await Prisma and do it over the card model but we don't want to delete a card we want to delete the card items so on the card itself we are doing an update parentheses curly braces we have fetched the cards that we are updating so we can say we want to update the cartwheel ideal is equal to the card idea and then we add this data field that contains the actual update values and in here we want to update the items which are the card items that belong to the card with this idea so this will find the items with this card idea in the card items collection and in here we can add the delete operation and an idea colon article and car dot idea article in card is what we've filtered up here so this now does the same thing as this operation down here it's a bit longer but now this delete operation is routed over our card model and this later allows us to update the updated add timestamp of the shopping cart of which we change the card items to the latest date so that we always know when was the last time we made changes to the items of this card so now we also delete this operation down here we don't need it anymore and we replace the other two as well so here we are updating card items to do it over the card we write a rate Prisma Dot cards dot update again we use this wear filter and for the data we pass items colon curly braces again this time we want to do an update operation again we need our filter in here well idea is article and cut dot idea again comma and again data with the update values and we want to update the quantity just like we did down here so let's delete this operation as well because we have replaced it and one more below again a weight Prisma Dot cards dot update again with the same filter data this time we're going to create card items so again items colon curly braces create and then they create body which contains the same values as down here the product idea and the quantity and then we delete this operation now let's also do the same in the auto server actions file where we have these two operations let's replace them as well so a weight Prisma Dot card dot update again we paste our wear filter and add the data here we want to update the items and on the items we want to do an update operation with the same filters as shown here so we can copy this part and paste it here and then we delete this old operation and one more then we should be done await Prisma Dot cards dot update where the card idea is this one and then data items and in the future you want to do all your card item updates over the card model to keep this updated as timestamp up to date and in here we write create and then we can copy paste this payload here and delete this operation let's save it or there's one more in the card TS file in the lib folder we have these two operations here but since we do them one after another in a transaction it's enough if we make one of them an update on the card model so let's keep card item delete menu and replace card item create menu so I wait this time it's this TX Prisma client dot cut dot update where the idea is the user card dot idea that's the one we are updating and the local card gets deleted data colon we want to update the card items we want to execute the create many operation and you get Auto completion here by the way this helps you with coming up with these operations and then we want to copy this part down here but we can delete the line with the card idea since we are doing this operation over the cut model this will be set automatically in this nested update and then we can delete to create menu operation below so now we are doing all our card item updates over the card model unfortunately this still doesn't update the updated ads timestamp because this by default is only updated if we actually make changes to a card's document so to a value in here there is an active discussion on GitHub about updating this updated ad timestamp of the parent document when we do a nested query like we are doing here so in the future there might be a setting that you can change to enable this so that the updated ads timestamp of the card is updated automatically even when we only update the card items but right now this doesn't work yet and we have to find our own workaround now one way to handle this would be to just add the updated add timestamp to our update operation and set this to our dates dot now to the current timestamp but of course this is very tedious because we have to remember to do this in every single update operation and we might forget this somewhere now a solution I came up with to fix this is to use a Prisma client extension this is a brand new feature available for Prisma client extensions allow us to hook into our queries for example and then do something in there which will be executed every time we do an operation for this let's go into our prisma.ts file where we initialize our Prisma client and then let's use such an extension to automatically update the updated ads timestamp whenever we do an update operation on the card so what we do is we remove this export from the default Prisma client and we rename it with f2l to press my base and down here we also assign prisoner base to Global for Prisma but the Prisma client that we want to export from this file is the extended one so below we write export const Prisma then we take our Prisma base and call this dollar sign extends a function on there with which we can create a client extension in here we have this query here with which we can hook into the query operations so colon curly braces we want to hook into the queries of the cards so card colon curly braces and in here we want to make a change to the update query because update is what we use in all our server actions when we make changes to the card items and this argument here should be an async function so we write async update parentheses curly braces and in here we can destructure arguments and other competition should help us we need the arcs and the query the arcs contain the actual body of the update so the data that we are passing and to this we want to add the updated Earth timestamp so in here we can make changes to arcs.data then we assign this to a JavaScript object in here we spread the existing arcs.data to keep all the update operations in here comma and additionally we also want to update the updated as timestamp and we want to set this to a newer date which gives us the current timestamp and then below we have to return the query to which we pass these updated arcs okay and this is how we create a Prisma client extension let's format this let's save it and then our route Handler here complaints that's our next off Route Handler it doesn't recognize our extended client as a Prisma client anymore they will probably fix this typing in the future again this is a very new feature but we can get around those by casting this to a Prisma client from Express my slash client like this this way we tell type script relax this is a normal Prisma client again in the future it might not be necessary to use a client extension if they add an option to automatically update the updated ads timestamp even if we don't make a change to the cards document itself but right now we have to go this detour so let's try this out in our database we have this one card right the updated ad timestamp is currently still the same as the created ads timestamp because we haven't changed anything in this document even though we added and we updated card items the updated ads timestamp still has the default value but now with our new changes when I make an update to the card this updated AD timestamp should change so I change the quantity of an item for example let's update this and you can see the newer timestamp let's try it one more time maybe let's add a new item a clone trooper and again right now this is 650 18. and after refreshing this this updates to the current time so now what you can do is you can set up a current job so a task that runs after a certain time interval regularly for this you can use vessel Crown jobs because we will deploy this project to Brazil and this way you can execute a route Handler so a server endpoint from time to time which then checks all your Anonymous cards it checks when they were last updated and if they haven't been updated for a while it deletes the card and the card items that belong to this card and the cards that have a user idea belong to a user so you usually don't want to delete them at all because they are tied to a user account we won't implement this in this tutorial you can figure this out yourself you can also keep the abandoned card items in the database if you want I just wanted to show you how you can update the updated ad timestamp so that you know which cards to delete okay now it's time to deploy our project to production so that we can actually open our website over the internet and as usual the easiest way to deploy an xjs project is via Versa which is a hosting provider and also the company that created and maintains next.js so as you can imagine this is really optimized to deploy an xjs project and all these features like server components and server actions will just work to deploy our project we first have to push it to GitHub you can do this right in vs code over the source control tab here you want to push your project to a GitHub repository this repository can be private doesn't have to be public and then you want to sign up on the sale and connect it to your GitHub account because then we can just click on ADD newer and add a new project and this shows us all our projects on our GitHub account right now I'm logged into coding and flow and here I can just click on import and add the next.js eCommerce project however before we deploy this we have to make a few more preparations first of all we go back into our project and open the package.json here we have to add a post and style script this is described in the Prisma documentation otherwise if we try to deploy this project on bezel we will get an error this is explained here it happens because of the way that they catches the Prisma client we have to add this post install script here in our package.json so this goes into the scripts block like this then we want to push this change to our main branch so add Prisma post install script commit and push then we also go into our Atlas backend go to the network access tab where right now we only allow connections from our localhost right so we click on ADD IP address and in order to be able to connect from Brazil we have to allow access from anywhere which adds this zero IP address because the cell uses serverless functions we don't have our own server machine with a single IP address and Status IP address can change so we have to allow access from anywhere but our database is still protected by the password so this doesn't mean anyone can make changes to our database we still need the correct password so we confirmed this then let's go back to Brazil and import our project here so we click on import it automatically recognizes that this is an xjs project we don't have to change any build and output settings but we need to add our environment variables so in here we put the same and for variables that we have in our DOT end file the database URL which is the same as here then we click on ADD and then we can add another one Google client idea add client Secret we don't have a next half URL yet because we don't know our URL in advance the cell actually gives us a Freer URL under dot the cell dot app but I don't know this one in advance so I'm gonna add a placeholder here HTTP colon slash slash and I'm just gonna write placeholder.com I think this will work we will later replace this for the actual URL we get from USA and the next of the secret which again is just any random combination of characters so I just type in a new one here click on ADD and then we click on deployer and hope that this works this will take a minute or so that's me in the corner that's me and the spot light oh and it worked nice congratulations you just deployed a new project to Brazil and we even get confetti okay let's click on continue to dashboard and then we get different domains for Freon and we have a separate domain for each commit basically that's this one here we have a domain for this main branch and then we have this domain here which basically just references the project so as you can see it has the project name next.js ecommerce recording coding and floor dotzel.deb let's open this one here because this one will stay the same even if we deploy more changes we copy this URL because we still have to edit as the redirect URL to our Google Cloud project so let's edit our oauth client and add this new redirect URL with our desire domain and then the same endpoint here after the slash because this is what next off requires we saved us and now we should be able to log in on our bezel domain as well so let's see if this works we are still locked out right now let's see if we can add an item to the card this seems to work let me close the website and open it again and see if the card is still intact refresh the page this seems to work let's take a look into our database where we should find a newer card without a user idea that's this one here and we should have the same card idea in our cookie so let's check the application tab and here is the local card idea that ends with 597 so this works just like in development let's see if we can log into our Google account yeah and it works and it merged this new Clone Trooper into our shopping cart and whenever you make a change to your project you only have to push these changes to the main branch and they will automatically be deployed by Brazil you don't even have to click anything every change that you push to the main branch will automatically be deployed and then a minute later it will be available on your website let's also check if the social media preview works for this we can use this social share preview.com website and here we can add our domain and then see if we see our open craft image so flomazon we make your wallet cry and there's our OG image as I explained this is this open craft image in our app folder I added this to the starting project but for a single product page on slash products slash idea we use the product image as the OG image so let's see if this works as well so I go to a single product I copy this URL and then we should see our Clone Trooper instead Clone Trooper flomas on and the description of the product and this is what you will see if you post a link to our website on Facebook Twitter or any of these social media websites really cool congratulations you built your own Ecommerce website and deployed it to production now you could buy a domain for example a real domain connected to your project and then put Amazon out of business if this tutorial was any helpful please do me a favor and leave a like on this video this shows me that there's more interest into turrets like this and also leave a comment what kind of project tutorials you want to see in the future and lastly I would be happy if you'll follow me on Twitter because there are a release regular little coding tips that I figure out while I'm preparing these projects my Twitter handle is coding and Flow and then I wish you a nice rest of the day happy coding take care