so this is gonna be Tetris in Python with PI game now this is a pretty advanced tutorial a lot of the stuff I do in here assumes that you already have a basic knowledge of Python and you kind of know some of the syntax and you're not a complete beginner that being said if you are a complete beginner feel free to watch through see what you might understand you're probably gonna learn something along the way it just might be a little bit confusing because I'm kind of gonna speed through a few things that are I would consider like trivial right now okay so first step for this tutorial series is you guys have to download and install Pi game because that's the module we're gonna be using so I will put a link in the description and a card in the top right hand corner here to go and do that I have a video it's pretty quick and it kind of goes through any areas you might run through when installing PI game so watch that first and then come back here okay so let just give a quick preview of what our game is going to look like so this is Tetris I didn't go too fancy with the graphics I pretty much just want to make sure that we get everything functional here and then you guys can play around and change stuff later on if you want to but yeah this is a fully functioning game you can see it's just like standard Tetris we have different colors shapes are falling down the screen shows us our next shape and there we go the road just cleared so that's all I'm going to show you for right now because I want to get into actually coding okay so pretty much what we're gonna be doing in this first tutorial is we're gonna be working a bit in the main function we're gonna be creating the grid we're gonna be talking about formatting shapes all the basics of just setting up for the rest of the tutorials so the first step and what I need you guys to do is you're gonna download kind of like a starter file okay and that's just because if you see here I scroll through my file I got a lot of lists I got a few things set up here and you know what I could go through and type them all out but that's just a waste of the video because it takes a long time so to save yourself time and to save me some time what I'm gonna do is just put a link in the description it's a pastebin link click that link and download this code it's just gonna be all this it just has all the functions that we're gonna need for this and then it has these shape formats which I'm going to talk about in just a minute so go do that if for some reason paceman is not working let me know in the comments and I'll find another way to give it to you but I'm also gonna put it in the pinned comment so that you can just copy and paste it from there as well I do recommend you check the indentation on it though because sometimes it messes up on paste bin and in the comments okay so now that you've got that downloaded we're working on that I'm gonna be working in PI term if you don't know about PI term don't worry about it you can just use ID ideally but it's just gonna save me a bit of time because it autocompletes variables it does some cool stuff so that's what I'm gonna be working in feel free to work in PyCharm feel free to work in whatever text editor you want just know that that's what I'm using it doesn't make a difference but some of the stuff I do in here you might not be able to do in ideally or sublime text or whatever you guys are gonna use okay so we've got that all the way we've got everything set up and now we're ready to actually start coding and understanding what's gonna be going on so tetris is a fairly complex game you have shapes moving down the screen they're rotating around they're moving left and right when they hit the bottom they freeze in whatever position they're in and then if you have a full row complete like cubes they're not real clear and you keep going and obviously you lose the game if you stack up too many blocks and it goes up or above the top of the screen okay so this first variable is we need to set up is our screen width and our screen height so we got eight hundred seven hundred here the next ones are play with and play height now this is the actual red box that you guys saw that's what these are representing so since in Tetris we have a ten by twenty grid we need to make sure that our play with is exactly half of our play height so that we have perfect squares right so doing the math here that makes it 30 width and 30 height per block so that's our block size of 30 okay so now this top left and top left X and top left Y this represents the top left position of our actual play area that's so when we start drawing blocks and we start checking for like collision and stuff like that we just have these already set up and we don't have to deal with that so the math is pretty straightforward you guys could probably figure that out you don't need me to explain that okay shape formats so these and this is the longest part is why I got you guys to copy everything is this is what's gonna represent our shapes in Tetris now you see that I have multiple lists inside of lists in most case says this is because each shape has possibly more than one rotation right so this is the standard rotation of the S shape and that's actually what they're called in Tetris like S said I oh whatever and this is the second rotation and these are the only two rotations or whatever that s can have so that's why we have them in here we have a 5x5 grid of periods and then whatever there's a zero that represents where the block actually exists okay so Zed you can scroll through you can kind of look at them and you can see for some of them for example the square well it doesn't have any rotation if you flip it it's gonna look the same so we only have one list here for jafe however though we have four right because we can rotate it in different ways l we also have four t we have four as well okay after this I create a list and it just holds all of my shapes so s said I just so that that way I can really easily select shapes just by indexing them in the list like 0 through 6 and shape colors here is the same thing it just corresponds like for example if I did shape 0 and I did shape color 0 then that's gonna be the color of shape 0 okay same thing with like 6 so shape 6 well color list our shape colors 6 is the color of that shape so just makes it really easy we don't have to deal with dictionaries or anything like that ok alright so now we've kind of gone through the like starter file I'd say and you can scroll down here you can look at the function names I'm not gonna explain them because most of them are pretty straightforward and I'll talk about them when we start coding them anyways but we do have a class here now this class is gonna be the main kind of data structure if you want to call it for our game and this is gonna represent or this class is going to represent different pieces so the reason we have the class is because we're gonna call this a bunch of times and it's pretty much just gonna hold the information like X Y width height for our piece so let's actually start coding this now so I'm just gonna create my initialization function or method and this is actually the only method that I'm going to have so I need another underscore just butchered that and pretty much what this is gonna have is gonna have an X of Y and then it's gonna have a shaker okay and let's see on the information we need for this and I'll show you why so we'll say selfthought x equals selfthought Y is equal to Y self dot shape is equal to shape and then what we're gonna do here now is we want the color and we want the rotation so a self dot cover well I was already talking about this selfdoubt color is just equal to whatever the index of this shape is in this color list so what we can do is we can do shape under short colors square brackets and then shapes dot index and whatever shape we were given so if we're given the shape s well let's just find it in the shape list whatever index that is well that's the color of our shape pretty straightforward and then we're gonna do a rotation so rotation this is going to be set default to zero and this is so that whenever we click the up arrow key we can just add one to this rotation and that will represent what shape were actually gonna be showing because again remember this shape list is a multidimensional list it has you can see here in this case four lists within it okay all right create grid I don't know if we want to do this one yet you know what actually let's go let's go ahead and do this one it's not too complicated so the way that I'm gonna represent the grid in Tetris so that ten by twenty grid is just by creating a list full of colors okay so we're gonna have a two dimensional list and within that second dimension it's gonna represent a bunch of colors okay so I'll show you just by coding and kind of talking about after say grid is equal to and then another square bracket here for X and range 20 and or I'll explain this in one second and I will save for X and range ten okay except here let's go to zero zero zero okay so what I've just done here this is pretty this is like the Python way to create list K list comprehension we're gonna create one list for every row in our grid so since we have 20 rows we want to create 20 sub lists and each of these like sub lists or whatever twodimensional list is going to have a bunch of colors in it how many colors is gonna handle it's going to have ten colors because we have ten squares in each row we have 20 rows so that's the way it works these X's you could replace with underscores because we don't really care about the actual variable we just need to do this that many times now zero zero zero zero or zero zero zero yeah I think that's right anyways that's just black it stands for block and the way we're gonna draw the grid is simply by looping through this grid which we're going to return and just drawing each color so it makes it pretty straightforward okay now the only thing that we have to do here though is we have this locked position argument now locked position well right now we've created a blank grid what if there's already blocks that have been placed in our grades like they've already fallen they're static now they're not moving well we need to also draw those so to draw those we're gonna check if any of the positions in locked position are not like or whatever positions are in locked position we're gonna get that color and we're gonna change the corresponding value in the grid I'll show that just by kind of cooking it here so for I in range undo the length of grid and again this is gonna give us 20 because the length of grid well that it's 20 of these right okay so for I in range Len of grid for J in range and then we'll say the Len of grid I because now we're in this list so now we're gonna do whatever the length of that list is okay I say if this so if J comma I because J is our x value I is our Y value because rows are represented by I and the columns are represented by J in locked position and just you know locked pause it stands for locked position it's also a dictionary so you can see that it's a blank dictionary here and each position so like for example if I had like 1 1 is gonna be set equal to a color and the color could be something like 255 0 0 okay and we're gonna talk about that and create that later but that's just somebody needs to know for now okay so J I in locked position so if that key exists let's figure out what that key is so that key is gonna be equal to well locked position and what the value is sorry associated with that key ji now we're gonna change whatever the current grid position is here so for grid I a is equal to C okay I know this might seem kind of complicated but pretty much we're just looking through this grid and we're gonna find the corresponding position to the locked position and just change that color in the grid so later when we draw it we get an accurate grid okay and you guys will see how this all is kind of plays out later if it seems a bit confusing now okay and then we're gonna return that grid to wherever we're calling okay so that that's one part done now we can move down and we can go into draw window which is then actually let's do get shape this one's really easy okay so this is literally a oneliner return randomdot actually what is it called here I gotta have a look I think it's random dot choose random duck choice that's where this random dot choice and then we're gonna be given a shapeless so say shape actually let's just I'm gonna cold up here sorry guys shape random dot choice shapes all this is gonna do is is gonna pick one of these shapes and it's just gonna give it to us so that one we need to create like a new shape falling down the screen ever ever that that's all we have to do okay so get shape random dot choice that one's really easy okay next one draw a grid all right so what we're gonna do is we're gonna be passed a surface and the surface is obviously what we're gonna be drawing on so we're gonna start by just changing the surface surface don't win servicedog fill with color this case the color is gonna be black okay sir just not fill as yours ever do all right next thing we're gonna do is we're just gonna draw like a title on the thing so the way we have to do this we first have to start by initializing the font objects when we do that pie game font dot an it okay this just means we're setting up font and we're getting ready to draw to the screen we're gonna create a font it's got escape font is equal to PI game taunt font dot sys capital SOS font and then we need the font name I'm the Comic Sans guy so I'm gonna use that Comic Sans size of the font I believe ya size of the font Randy's sixty okay so the way you want to set up your own font you want to change this just change this to any font you can look up fonts on the PI game website and then just give it a size if you know the name of the font type it in here it probably exists in Impa game alright so now we're gonna need to set up a label so I say label is equal to font render and then in here we need the text that we're gonna render in this case I mean Cola Tetris you need our antialiasing of one and I believe we need a color in this case I'm gonna make it white okay so text antialiasing just set this one I don't know why you need to set this one but just set it one and then whatever color you want your label to be okay now that we've got the label we need to draw this label on the screen so lets blend it now when i'm used to typing when surface double it and then in this case we're gonna pull it the label where do we want to put it well now we want to figure out where the middle of the screen is so we could just hard code this in but if we ever want to change the dimensions of our screen we want this just automatically kind of adapt to that so we're gonna do top left X plus play with / okay and that's gonna give us the middle of the screen if you don't understand that let me know and I can explain it to you in the comments down below okay now we're gonna subtract this sorry this isn't actually done yet by the width of the label because this is gonna matter uhhuh depending on how long that the label is we it's going to determine where we place it on the screen so we're gonna get the width of the label and we're gonna divide that by two okay so now we have to do the Y well the Y is pretty easy we can just statically type this in because it's from the top of the screen so I'm just gonna give it and click 50 is what I typed in 30 okay and that should put it in the middle the screen and I can explain that to any of you guys it might not understand it if you just leave a comment because I don't want to waste too much time because I love people might understand that so for I in range now the Len of grid because now we're gonna start drawing all the great objects onto the screen so we created a grid we know how that kind of format works we're going to say for J in range the Len of grid I same as before and we're gonna do PI game dot draw dot rectangle and then this guy's been drawn the surface and then we're gonna go career i J okay and then top underscore left I need to put this in what do you call it brackets your top underscore left so just need to scroll over top left underscore X plus j x 30 and i'll talk about this one in just a second how this works and then top left y + i' x 30 another bracket and there we go now we just got to deal with this grid thing so that means that we just now need to past grid as well into our draw grid okay way this works we're gonna loop through every color within our grid so this is the color grid I J alright this is the surface we're drawing it on to you and this is the position in which it's being drawn now we also just need to add two things here that I realize I forgot because we need the XY we need a width and we need height so for width and height well that's go to the block size and block size once again and you know we can even multiply this instead of by 30 by block size in case we ever decide to change that so let's do that just to keep this nice and dynamic and then if we keep going over here the last thing we need is a fill so we're just going to put comma zero to make sure that we fill in the shape we don't just draw like a border for it okay way this works we add our top left X and we're gonna figure out wherever we are so which column were in multiply that by block size and that's our x position same thing works for the y with the starting Y position plus whatever row we're in x the block size will give us the correct position to draw our Cuban okay after we've done all that we just need to update the screen so pygame don't display the update and there we go so there's actually one last thing we want to draw and it's that red rectangle that you guys saw in that right kind of represent it like the play area so to draw the a video pie game dot draw dot rect and then surface and then in this case we're just gonna actually let's see here do we want do I want to dynamically type this in or do I want to statically draw it so let's give it a color first of all of red sea zerozero okay and we're actually gonna type it in dynamic just in case we decide to change anything later so top left X and top left Y and then the width oh we actually already have all these variables so we have the play underscore width and you play underscore height and in this case we're gonna give it a border size four okay and that's all for drawing the grid we might come back to this later but for now that's it okay so this just draws the actual grid ah draw a grid and I've added this okay we're just gonna copy this part of you guys that says draw a grid so serve first up lit this label and I'm just gonna move this in because I realize I have another function called draw window so in draw window what I'm gonna do is surface top fill whatever okay so I take surface and a grid so I just copied some of it from there and then instead of updating the screen here we're gonna update the screen over here and we're just gonna call our draw grid what do you call function like this okay so now what if we want to draw the grid and we want to use the same another program we could just copy and paste this function we would enough to kind of take it out of here we have enough like dissected alright okay subtract rid again this takes surface and this takes grid and there we go I believe that's working well okay now that we've done that we're gonna start coding in the main and in main menu and this is what we're gonna finish off with this tutorial because I know we're almost at the 20 minute mark right so what we're gonna do in Maine now is we're gonna set up a few variables so the first variable we need is this locked position locked positions again and again this is what we're passing up here in to create grid it's equal to a blank dictionary just a set in case we don't pass it then we don't need it okay so locked positions equals blank we ready to say grid is now equal to well create grid because we already created that function with locked positions passed to it can't create a variable called change underscored piece it's gonna be equal to false we're gonna make run equal to true this is just for our while loop that we're gonna use we're going to say current piece is equal to get underscore shape okay we're going to say next piece is equal to get shape as well where I set up a clock object and clock is equal to PI game time dot clock and we're going to set a variable called fall time equal to 0 and those are all the variables that we need in our main function already coded for us ok so now we're gonna set up our while loop that's our main game like you're say well run first thing we need to do in our loop is sorry for event in in PI game dot event dog gets let me say if event dot type equals equals PI game dot quit well that means we need to quit the program so the way that we can do that just simply hitting run equals false it's gonna break us out of our raw loop and then we can deal with that afterwards we're also gonna add another event this is a keydown event so if event type egos equals PI game dot keydown like that then we're gonna check what specific key is actually hit so let's go ahead and do this now I can I get it over with so I'm just gonna type all the different keys and then we'll go in and code that after so we'll say if what do you call it PI game key equals equals I believe that's what it is art event key not probably ended up keep my bad guys event key equals equals PI game dot K underscore capital K okay underscore left let me say if event donkey equals equals PI game dot K underscore right like that and then same thing up and down so if events don't key equals equals I get him done ok hundreds go down and last one okay I'm screw up okay okay I don't know why that keeps happening okay okay underscore up like that okay so painfully after typing that left right down up now we can go in here and we can kind of code what each of these is gonna do so if we're hitting left we want to move our block left if we're coding right well if we're hitting right we want to move our block right and we're going down we're gonna move down we want to rotate our shape that's what the main things are gonna do in here so if we want to move our piece left well we should change the wat the x value left wise okay so the way that we can do that inside current piece dot X minus equals one now I know you guys are looking at this right now you're saying okay well what what the heck man so current piece is equal to get shape and that's all it's equal to get shape well what is get shape and it's just returning random choice shapes now this actually just made me realize the fact that our get shape thing needs to change a bit that's because we need to actually create a piece in here so we set up this lovely class up here we've already been using it so piece random dot choice shapes is the last argument takes it also takes an x and a y value right so for the X and the y well the Y is pretty straight forward is just going to be 0 the X has to be the middle of the screen so we're gonna give it 5 and for y we're gonna give it zero okay and actually for y we'll leave it 0 for now but we might want to make it negative so that it kind of starts above the screen and then starts falling down okay so we have let's make sure this works it looks right X Y shape yep okay great okay so that makes sense now on how we can change this x value same thing for right I'm gonna do current piece Y dot X plus equals one like that and for down we're actually just gonna take this in for now but this is not exactly what's gonna work y plus equals one to move downwards and for up well we need to rotate the shape so to rotate the shape this is actually pretty easy over and each state is current piece rotation plus equals one okay because when we change that rotation well that changes the actual image of the shape okay now this is all great but the thing is what if we're moving off the screen or what if this is not a valid position well that's why we have a function called valid space now valid space we haven't yet coded but I do have it in here somewhere valid space and what valid space is gonna do is it's simply in a return if the current position that we're in is a valid space so the way that I do since just make life a lot easier if we're moving left let's simply just change the pieces ex move it left one and then check if that's a valid position and if it's not well then we can just add one and move it back to where it was so I say if not and then valid space and valid space again take two arguments you can take the current piece it's gonna take the grid okay then let's just simply subtract or add one to our piece so all this is saying is we're gonna move left but if for some reason moving left results in not a valid space well let's just add one and pretend like we didn't even move there so we're not drawing it we're not changing anything so this is perfectly fine and it's actually a really easy way to check things so they're having two checking if if it's below this or above this or whatever okay so now next next one here gonna say if not valid space and same thing current piece with grid well now in here instead of adding one we're gonna subtract one because we were trying to move right and there we go same thing with moving down okay so we're literally just gonna take the exact same thing if not valid space current piece and grid well now let instead of adding one we're just gonna subtract one and this is from the Y value this time so it's like current piece dot y equals one okay so now for up so when we change the rotation we are changing the shape okay so it doesn't show this yeah yeah right now like how we change the shape we're gonna do that later so we can actually just call the exact same thing on rotation because think about it if we're fully on the right side with like the straight piece and we try to rotate well that could result in our piece being moved to the left or to the right or like there could be positions where it's on the left or it's on the right and it's not in the grid so we do have to check for rotation if it is a valid space we'll say current piece and then what else are we doing great here okay and then in this case again we'll just we'll just subtract one from rotation so minus equals one and that should all work pretty well okay so after we do that we're gonna make sure that we remember to draw the grid so in this while loop we'll say actually draw window I'm gonna give it surface and we're gonna give it grid now this reminds me that I haven't yet created a PI game surface that's great so let's do that so here I'm gonna say win equals PI game dot display don't set underscore mode in this case I'm gonna give it what is their screen width and screen height so s width and s underscore height and that's it for a display you want to give this a caption though so we'll say a PI game dot display dot set underscore caption yep so let's just call this Tetris like that and now we're gonna just pass when into our main menu we'll put one here and then in main menu we're gonna call me okay and we'll deal with main menu later I don't feel like coding it right now and it's not really important to like the main functionality of a game so we can simply just do this okay main win like this and if I put win here then everything should work out this has surface change this to say when in low cases okay so now you've effectively done draw a grid or draw window draw a grid get shape create grid we've created a piece we've gone through what all this stuff and the starter file does and we are now at 27 minutes hey guys and welcome back to part two of coding Tetris in Python with Pi game so let's get right into it in this video we're gonna be finishing a few other functions we're gonna be doing valid space convert shape format we're gonna be coding a bit in the main and we're also gonna be fixing a small mistake I made in the last video so this code right here in draw a grid yes this does draw our grid but this is not what I intended this function to do and I kind of just realize this when I was looking over the video and looking over the codes we're just gonna copy this code from draw a grid okay delete it out of there and we're gonna paste it down here at the bottom of a draw window okay so now we just have this after we're bleeding the label we have whatever code we had within draw a grid okay because draw a grid would this actually was supposed to do is draw deep lines for the grid so I kind of got this mixed up while I was going through the tutorial so we're gonna finish draw a grid now and what this is gonna do it's gonna draw those grey lines over top of all of our different colors so we can kind of see where each block is that we can see the actual grid structure so let's get started with this say SX which stands for start X is equal to when you call it top left X okay and then s Phi is equal to top left Y like that all right and this is just so I don't have to keep typing top left X top left Y just makes it a little bit shorter for us okay now I'm just gonna say I'm going to set it before Luke when I say for I in range and this is gonna be the length of the grid so how many rows we have let's say for J in range and this one is now gonna be a deal n of grid I so how many columns in each row and then here we're gonna be drawing lines okay so for every row we're gonna draw a line so pygame draw dot line we need a surface give it a surface we need to cover this case is gonna be gray so gray color code standard is 128 128 128 and then we need two positions okay so the start position is going to be equal to SX all right and then sy + what do you call it I I believe x blocksize and I think that is actually correct okay now for the end position well it's gonna be the same xvalue because we're just drawing or actually it's gonna be let me just check here yeah it's gonna be a x value that is just equal to the width so SX plus whatever to play with this and then the y value is going to be the same here because if you think about it we're gonna be at the same y value each time we're doing like we're drawing a horizontal line every horizontal lines can have the same two Y values and the X values just gonna be changed okay so I'm just gonna copy this and paste it in here now okay uhoh all right I don't know why that did that but we'll just go back like that okay so now what we're gonna do is we're gonna do this K so x sx plus j x blocksize okay sy can't actually just stay like this okay and then for X same thing s x+ j x block size and js again as our current column and then this one s y plus play underscore oops we need a plus sign here plus play underscore height like that okay and that should be drawing us what do you call it xx vertical lines and then 10 horizontal lines down the screen giving us a grid and kind of the way that works is every time we loop through a new row we're simply changing the Y value of what line we're drawing and then these X values are gonna stay static just at the left side and the right side of the screen and then the way that we do it here is we have the X values that constantly are changing every column and the y values are staying static being the top of the screen and the bottom of the screen to draw the vertical lines and that's what I wanted to do within this drunk grid function so now that's all kind of sorted out and we fixed like a small mistake don't get me wrong you can still have that other code up here it still works fine but just in terms of what I actually wanted to do with these functions that's the way we needed to fix it okay so now that we've done that what I want to start doing is getting into this convert shape format okay now this is probably the most complicated function I want to say within our program and what this is going to take as an argument or a parameter is just the shape now this is what I was talking about before so when we have a shape it looks something like this right so we have zeros that we have periods now this looks nice to us like we can tell what kind of shape this is but the computer has no idea so how can we get this into a form that the computer can read and ideally want to give it we want it to give us positions within the grid of where blocks exist and then we're not going to give position if the block doesn't exist so if there's a period like this okay and you'll see what I mean as we start coding this function and that's what the goal is function is to do to take that information and put it into something that's actually useful to us so we want a bunch of positions that's the goal because from these like lists we want to generate a list of positions and then based on those positions we can do things we can check them we can draw them and so on so I'm just gonna create a list called format don't worry if it's a keyword it'll just override it we're gonna say when we're giving a shape we're actually given a piece object so I don't know why I'm calling shape but whatever it's fine so shape dot shape and then we can just do is equal to and I'll talk about this in a second shape dot rotation modulus the length of shape dot shape okay so what this does is actually gives us the sub list that we need so needs to be spelled correctly I don't know how I butcher that so bad okay shape touch shape so if we look again here whenever we're passed a shape we're actually passed something like this right surpassed the shape object and its shape property so right here is look something like this looks like the variable T which would have a list full of lists so we want to get the actual sub list so which one this list right that's the one we want so the way we do that is by getting the shape rotation modulus the length of the shape so for example if our current rotation is zero like we haven't rotated yet then what's gonna happen is we're gonna have zero modulus the length of shape in this case the length would be four so we get zero so we're given this first shape now if we have one we're given this if we have two or given this if we have three were given this and if we have four then we go back and we get this one okay and it just keeps going and keeps going because modulus simply just gives us the remainder so that's how we can tell what the actual current shape is within that main list okay hope that makes sense so now that we've done that what we're going to do is want to set up a loop and because we want to look through every row and every column and then based on if there's a zero or a period we're gonna do something so we're gonna say 4i comma and because we want the line as well in enumerate right and then format okay because format is the list that contains like the actual zeros in once okay we're just gonna say Rho is equal to list of line this just gives us a nice list format that we can deal with making it easier for us I'm gonna say for J in or J comma column sorry in enumerate and now row so now every row we're getting the current line and then we're going to loop through the line and look for either a zero or a period I'm going to say if column which is going to be for example if we have some like this it's gonna look like zero zero okay so this is what our row is gonna look like so when we start looping J will be zero and column will be a period okay just just in case you're kind of confused there okay so before if column equals equals and it's gonna be string zero then we know that we've hit like a position like this cube exists here so what we want to do is want to add the position to our positions list now it's not so simple as just add the current I and J value we actually have to add something else I'll show you right now I'm just gonna type it out and kind of talk about okay so shape dot X plus J and then shape dot y plus I okay so this is our x value it's the current value of the shape because if the shape is already moving down the screen or moving left and right well we need to add that to whatever the J value is whatever column were in within this list okay and then same thing for with the Y value so whatever the current Y value is of our shape we're gonna add whatever column or whatever row sorry we're now in as for the Y value okay and that is the positions that we need in these positions list okay so now that we've done that we just have to modify these positions slightly we just have to give them an offset okay and I'll talk about why this allows you to do this so for I pause in enumerate positions okay then we're going to say positions I is equal to and then it's gonna be the current position okay so we just need to put this in a tuple cuz that's way we're gonna give it pause 0 minus 2 and pause 1 minus 4 okay so now let's break this down and kind of talk about exactly what's going on so we started off blank list positions we're just getting the actual shape within this list so for example we get something like this okay and then we're looping through it and where am i sorry and we're pretty much just checking if a 0 exists in each position of that shape okay if that exists then we're gonna add that position into our list and the way we do that is simply by getting the X plus whatever the current column is that we're looping through and whatever the current row is plus y okay now that we've got that the issue is that if we look here we're gonna get something like for a position list here we'll get something like 3 1 and then we'll get 3 2 we've got 3 3 and we'll get 3 4 ok now the issue with that is we're adding the current X value plus these two periods and the O so we need to remove these kind of trailing periods right because that's gonna result in our positions being offset it to the right by 2 much same thing with these Y values okay because when we're counting this row we're saying well this is 1 lower than this row so our current Y value say it was 0 and we're adding to it now instead of just adding 1 we're gonna be adding 2 so what's gonna everything's gonna be offset down so the way that we can kind of fix this is just by offsetting by constant by offsetting I'm just gonna take every x value that we've added and subtract 2 from it and every Y value that we've added and subtract 4 from it now what this is gonna do is simply just move everything to the left and up so that when we are displaying it it's just more accurate to the screen okay you guys can see what's gonna happen if you don't offset this and you'll notice that you kind of run into a few errors so just run with me on this area and just kind of you should see how this works later on ok ok so now that we've converted this shape format I want to go in code valid space now okay so valid space is gonna take two parameters shape and grid all right now we're gonna check the grid to see if we're moving into a valid space so what I'm gonna do here is I'm going to create two liske I'm gonna say accepted how do you spell accepted accepted underscore pause so these are just gonna be the positions that are actually valid okay is equal to and just flow with me on this we'll talk about in a second for J I and then within this list for J in range 10 system Li what we did in the last tutorial and then for I in range 20 okay so this is really similar to the way that we created the grid we're just getting every single possible position for a 10 by 20 grid okay and we're just adding it in a tupple in accepted position it's gay that's great but the thing is I want to convert this into a 1 dimensional list so this is the way we can do this and make other positions but now how do we flatten this list so this is actually how you do this okay so accept it cause it's gonna be equal to and this is one way there's many J for sub in accepted positions and then one more for J in sub okay so what this is actually doing now is it's pretty much taking all the positions in our list and just adding it into a one dimensional list and we're just overriding this list with that so see if you guys can understand that if not don't worry about it just know that all this does is simply flatten this list so we go from looking something like this we wouldn't call it like 0 1 and then having another list embedded just trying to show an example here 2 3 so we go from that to something that kind of looks like this and we just have two positions in it now so we don't have those sub lists and this just makes it a lot easier to loop through ok so now we just have 0 1 2 3 rather than having these embedded lists full of other tuples ok that's all we're doing with this line ok so after we do that what we want to do is we want to get all these positions um and we're gonna get the shape and we're gonna convert it into our positions right because remember whenever we get a shape it looks something like this it means nothing to us we need to first convert it into positions before we can compare it against other positions in our grid so we're gonna use this convert shape format grid our convert shape format we're gonna pass it to the shape and we're just gonna store this in a variable and I guess we're gonna call it what should we call it formatted okay because I guess that makes sense we formatted our shape so now we can use this and kind of compare it against accepted positions so here we're gonna have a list that looks like something with a bunch of positions in it and then this one we're gonna have a list that has a bunch of positions in it so you might see where we're going here in terms of how to compare these things ok ok so now that we've done that we've kind of got all our data ready to check this is the really easy part where I'm just going to say for position in format it and all we're gonna do now is just check if this position exists within excepted positions because accepted position is every position that were allowed to have right so we're say if paws not in accepted position and this is an important part pause one is greater than a negative one return false and then otherwise so if we make it through that loop that means we had all our positions accepted we can return true okay so let's talk about this really quickly the reason I have this if pause once the Y value is greater than negative one is because when we give this offset of four what ends up happening is we get some when we spawn in our shapes they're gonna spawn above the screen and then we actually want this because we don't want our shape to show up on the screen we want to start falling before it's actually seen so typically this means a Y position is going to start out like negative 1 or negative 2 so the thing is while it's falling we're checking if it's in a valid position right but the thing is it's not going to be in a valid position if it's negative so we just want to make sure that we're only asking if it's in a valid position if the y value is greater than negative 1 so greater than or equal to 0 okay and this is a really easy way to tell us well are we on the grid or not so let's give an example say we're trying to move left and we're already at the edge of the screen so that means we're gonna have an x value of negative 1 well that position of negative 1 whatever Y value is not going to be in this accepted position great way to code list so when we try this we're gonna return false and it's not going to allow us to move left and that is the whole point of that and now okay what am I doing here ok so I also just want to modify this part up here so I haven't for ji and range for J and range if I in range 20 I want to just change something here okay so what I'm gonna do actually let me say if grid I J equals equals and then the color 0 0 0 okay so this is an important part I was kind of waiting I was kind of thinking about this so pretty much we're only gonna add this position into our accepted position if it's empty which actually makes a lot of sense because think about it if we already have a color in that position then that's not a valid position we can't move into where a piece already exists so what this conduct condition does it says okay we're only adding this position now if this is true so if IJ is true then / code we can add the position if it's not zero zero zero that means something exists in there so that's why we're not gonna add it into our excepted positions okay so I know this looks kind of confusing so I'm doing like a bunch of embed in for loops this just saves us a few lines it's kind of a cool way to create a list in oneliner it's like the Python anyway so I figured I'd do that for most of the stuff in here okay so now that we've done that what else can we code well you know what while we're here we can code check lost all right this one's a really easy function this is just simply going to check if any of the positions are what do you call it above the screen so if we hit Y value zero then we know that we're above the screen and we've actually lost so the way to do this very site for pause be in positions because what this is gonna do is we're gonna pass a list of positions so we're gonna get every pause now in the position we're going to say X Y is equal to pause which simply you're splitting up the tupple because we know we're gonna get something looks in the form of like three four okay and we're gonna say if Y is less than one so equal to zero or greater then we return true else okay we don't even need no say return false down here so if every position is less than or greater than Y or whatever one then we will return false because we haven't lost yet otherwise we return true okay so we're almost getting there now I want to go down to the mean and I want to finish coding up some stuff in here so last time we kind of just left it at this like moving pieces around whatever but we have these variables okay so change piece next piece o'clock fall time that we're not using so what I'm gonna do now is I'm going to show you guys how we can actually move our shape down our screen at like a regular time interval so I'm gonna create a variable here actually called false speed and this is how long it's going to take before each shape starts falling okay so we'll talk about how to do this I'm gonna start coding it now so pretty much we're gonna say up here and I didn't do this before which fall along grid equals create grid based on locked positions the reason we're doing this I know we already created grid up here is because every time that we move we have a chance to be adding something to locked positions we're gonna do that later because for example if we hit the bottom of the screen will now lock the position it's gonna be equal to something else because it's gonna have a new shape in it shouldn't we need to constantly update the grid so that when we're drawing it to the screen we get like an updated version so that's why I'm doing that up here okay I also need to actually I don't think I need to do that here we need to add to fall time okay so the way we're gonna add to fall time because this is gonna track would he call it how long since like the last loop ran is by using this clock object that I set up here okay so before I add to that after here I'm gonna do clock dot tick and then I'm going to add this and I'll talk about this after I do it so clock get underscore raw time like that okay so the way that this works is this wrong time actually gets the amount of time since this last clock tick so when I first add it's gonna be zero because we haven't yet ticked the clock and the next iteration it's gonna see how long it took this while loop to run and then it's going to simply add that amount okay so it's actually going to give us real time this means this should technically run at the exact same speed on everyone's computer in every one machine because I know when I use fps FPS is dependent on kind of the speed of what do you call it on your actual computer sometimes like the way I did it in other games so this is a better way to do it so now what I'm gonna do is since I've now incremented the fall time and this is gonna be given to us in milliseconds so like one second would be a thousand that's that number and our fall speed is in well zero point two seven so what I need to do is I have to say if fall time divided by a thousand is greater than false speed then we're going to do is really reset fall time equal to zero and if we're going to add one to the current Y value so which means we're script we're moving down the piece one so this is gonna automatically now move our piece down another thing is what if our piece will hit the bottom the screen or what if it's moving into position we can't move into so this is the same thing we've kind of done in here what we're gonna do is going to say again if not valid position or valid space whatever given the current piece and our grid I believe at least grid okay then and actually we're gonna check one other condition and our current piece dot y is greater than zero this means that we're not at like the top of the screen because the same thing with negative values all right is greater than zero then what we're gonna do is were gonna subtract one from the current piece so y minus equal one because that means will we moved into an invalid position so let's move back up one and pretend like that never happened and we're just gonna say change piece is equal to true now the reason I'm setting change piece equal to true because think of it right if we're moving down and we move into position that's not valid well we know we didn't move left or right off the screen because we were moving down that means we must have either hit the bottom of the screen or hit another piece so in that instance we need to stop moving this piece and we need to change it and what changing piece is gonna do we're gonna do that later is simply gonna lock all the positions what they're currently in and then it's gonna make this next piece generate down the screen and I'll show you that in a second but this is kind of the way to check it and it's the easier way then you don't have to check like the Y values and and all that stuff okay alright so now that we've done that let's move down here to the bottom of main and let's start adding a few things ok so what I want to do down here now I want to say shape positions so shape underscore pause is equal to convert shape format current piece because what we're gonna do now is we're going to check all the positions of the piece moving down to see if what we've hit the ground or see if we need to lock it okay so and we're gonna add all that color to the grid so that when we're drawing it we actually see the piece cuz right now we have the piece but we don't add its color into the grid so we're not actually gonna see it show up so I mean first need to add it to the grid so we can draw it and we can see it moving so to do that we're gonna say for I and range the blend of shape positions okay we're going to here going to say XY equals shape positions of Ikes that's the current iteration the current one we're looking through and say if Y is greater than negative one so this means that we're not above the screen then we say grid Y x equals current piece dot color okay because remember the grid stores a bunch of different colors so while we're doing the greatest giving different colors and based on that position in the grid so Y X which is going to be this shape the all the shape positions we're gonna draw that color now the reason I'm gonna have this negative one is because imagine that we're at the top of the screen and we try to draw it or we're above the screen we have a position with a negative Y value so if we throw negative we're not actually gonna get an error in grid here but it's gonna end up looking like it's at the bottom of the screen and then moving to the top and it's just gonna look weird if you guys want to see what it looks like this just removed this condition and you'll see that why I haven't added in okay so now what we're gonna do is we're gonna check this change piece variable so I put it up here change piece this means that we've hit the bottom or we've hit something what we're gonna do now is we're gonna update locked positions and this one I'm gonna start talking about locked positions okay so for pause actually in shape positions all right we're going to say P is equal to posi row pause one alright I don't know why I do this but I think there's a reason for it so let's just run with it and when I said locked positions P is equal to current piece don't covered okay so what is this well locked positions is gonna be a dictionary in a form like this right it's gonna have a top one here that's gonna have a positions like 1 2 and then we're gonna have a color and the color is gonna be another tuple but RGB values okay so for example to 5500 the reason we have this is so that when we past locked positions into our grid like this right we can get each of those positions in the grid and then update the color of great so every time that we have like a locked position in a locked position as simply means our piece is no longer moving it's hit the bottom of the screen and we're on to a new piece we can get the position and we can get the color and then we can update the grid based on that and we can keep that in there okay and that's the way that locked position works so it's a dictionary with the key of a position and the value of a color all right that's kind of like the data structure for now what we're gonna do after this after we update our locked positions and we add positions to it when I say current piece equals next piece okay so we're just gonna change that and now since we've said current piece is now equal the next piece what we need to update next piece so let's get a new shape because we're just moving forward with the game and now of course we got to say change piece equals false because we're on to a new piece that's gonna spawn at the top of the screen okay and I think that is about it what we also want to do actually is we're gonna check if we lost the game and I think I do this after the draw window I don't think it really matters but where should I say if check lost based on what do you call it locked positions okay so these are all the positions of the shapes then we're gonna say run is equal to false and that's gonna break us out of this wall up and you know what while we're here let's indent out nope I game dot what is it I think it's not display doc quit or something yeah don't display dot quit so we're actually just exiting out of our game now up until this point I actually have not tested my code now I know some of you probably think I'm insane because we've already written like three enter lines of code we haven't tested any of it the reason I haven't done this is because I wanted to test this in between videos figure out what the errors were so that I didn't waste too much time fixing all of them so I'm gonna go through a few errors that we have now and show you what happens when I run the code so I'm just complete that cuz that was the fix that I made and pretty much you can see it'll be crashed right away and we actually get a 4iron range none type has no length now the reason we get this and this happens down in the main it's because in convert shaped formats somehow I managed to forget to return position this is really important because the whole goal of this function well was to generate this list of positions and we did that fine but we forgot to return them so uh pretty easy error to fix or return positions now again we run this way ok everything looks good no there's another issue all right so just watch if I try to go off the screen you can see that we get a unsupported operant for current piece because I forgot to put a Y or an X here so let's go down to main let's fix this what line are we on 260 to 262 current px yeah that would be important okay now I know there's a few other errors so this one current piece mimes equals let's change this to an X current piece equals wow I really messed up on this a lot ok dot rotation minus equal 1 okay so this is rotation and let's see anything else let's run the program see ok we're getting another issue here so if we have valid spacecraft ok so I just messed up and a bracket here so let's go lying 265 here we are so we're gonna take this quotation mark or what I'm saying edition might bracket and just put it there and all should be good now let's see we go down to the bottom the screen ok we got another and let's just play this for one sec see if we can run into any errors okay so we're rotating fine we can't move off the screen and all looks to be doing ok all right so that's a good sign for now let's leave that so it doesn't look like there's any issues if you find any I'd probably end up fixing them in future videos so don't stress about it ok so now that we've done all this what we need to do next is a few things alright so we need to deal with this draw next shape clear rows draw text middle what other functions to have and I think that's about it and we're also gonna deal with main menu kind of starting the game finishing the game and all that stuff so what I first want to do actually is I want to deal with draw next shape then I'm gonna do clear roads just cuz clear rows is kind of complicated so draw next shape what this is gonna do is they're just gonna draw the next shape kind of off the screen and show us what it is because in tetris typically it shows you like the next shape the next few shapes so yeah now this seems pretty straightforward like just draw the shape it's actually kind of long because we have to once again get this list turn it into positions that we can use and yeah it just it gets a bit complicated so what we're going to do is we're also gonna set up a font in here it's gonna say font equals PI game thought font dot sys font here we're gonna do Comic Sans again because you guys know I love Comic Sans Comic Sans sighs stick 30 and let's render this font okay so label equals font don't render text for this is gonna be next shape okay feel free to add a colon or something if you guys want antialiasing one text color white 255 to productivity feel okay basically already been through that okay now we need to figure out where we're gonna draw this this label okay so let's see the same thing we've done before you say s X is equal to top left X plus the play width and I'm going to say s Y is equal to top left Y plus the play underscore Heights actually I'm gonna play a hundred we're gonna say play height divided by two okay now what we're gonna do is this is gonna give us like to the right maybe I can just run this and show you guys it's gonna give us where my mouse is right here like a position kind of similar to here so we are actually here so what we want to do is we want to add a constant to this so we move to the right a bit so this constant we're just gonna hard code in and we can change this and play with it if we want it to be like moved more to the right or more to the left so to move more to the right rear now add 50 and then to kind of make this look a little bit better where you can actually subtract a hundred from the site so we can move a bit higher up on the screen play with these constants if you guys want it to look a bit different okay so now we've got that what we're going to do is we're gonna once again we're gonna format are in say format is equal to shape.com thing we need the actual shape so not just like that mean a shape talk rotation modulus the length of shape dot shaped like that okay so this is the exact same thing that we did in format whatever you guys know is know what function I'm talking about and I've lost myself here okay just to get the actual like sub list that we need okay so now on you might say well what do you what are you doing here we already have like a function that does this for us don't worry about it just follow along because this is a bit different the way that I'm gonna do think a so I'm gonna say for I comma line in enumerate all right and then row or actually before I'm not sorry I'm gonna do the same thing here we're gonna convert row it into list is really similar to the other function except we're going to do one major change and you'll see that for row equals list line we're gonna say for J comma what do you want to call it column in enumerate row this time and exact same condition if column equals equals zero what we're gonna do here instead of adding some position to list is we're gonna draw something and this is why I didn't want to use the other function that gives us list of positions because I don't care about the position within the grid I just care when we should draw something or not because this doesn't matter it's not gonna be moving we just want to draw like a constant image on the right side of this or a static image on the right side of the screen that we can just look at okay so what we do here is we're gonna say pygame draw rect so don't draw rect I need surface we pass the surface in we need a color it's gonna be the shape color okay and then we need our position of drawings for SX and then in this case we're gonna have to since we're drawing each cube right we're not dressed drawing the whole shape plus J multiply it by 30 and then we're gonna do the same thing with y so sy + I multiplied by 30 and we actually just changed this to let's change the block size to be a bit more dynamic okay so it's a 30 block so it's just in case we decide to change the dimensions of our screen later on and then we new width and height and that is gonna be a block size and block size and we want this filled in so comma 0 okay so what we've done here is really similar to what we've already done we're just gonna be drawing these blocks according to where they show up like in this list based on the initial exposition plus like a changed kind of position or whatever okay anyways I think that's about it for this oh we need to actually blitt the label now so we created this label we have actually drawn on the screen yet so let's do this so we say surface dot bullets label change this to a period okay and then we need a position what's our position going to be well we're actually going to SX plus 10 and sy minus 30 okay again play around with these constants guys if you want your thing to look a bit different be more centered whatever I again I don't go like too crazy on cosmetics here I just want everything to work and look decent I assume you guys can mess around that I right okay so now we've done that we've drawn the next shape well we actually need to call this function so within draw window we're gonna call draw next shape as well so where should we call this let's see what's called before we draw a grid draw an X shape or actually we can't call it in here where we need to call this in the main because we only have next shape within the main symbol right when we're drawing draw window we're actually just gonna call draw next shape because we need to give it the next shape so it's gonna be next piece and then the grid does that it takes it takes a surface yeah surface okay so let me just go check this to make sure and our surface is not called surfaces it it's called win okay so in draw next shape you haven't take a pen surface okay so that that should work fine you know what let's actually just test this now and see this working and we're not showing up we're not drawing this surface hmm I believe it is because ah draw a windowed Renick okay so what we need to do actually it's this draw next shape we're gonna draw after draw it now and we're just gonna update the display in here so pygame dot disability dot update and then if we go to draw window just remove this display update and this should work there we go so now we're getting next shape on the side the reason that wasn't working is because we were pretty much drawn over top of the next shape every time that we drew the window so now that's working fine we have our next shape showing up and what else do we need to do I'm really delaying trying to go to this clear rose function because it's really complicated but I think we're gonna have to do this next okay so clear rose and tetris obviously if we create a full row we need to clear that row and then so that's the only way the user can win obviously yeah so the way to do this is probably a lot easier than the way I'm gonna do it but try to follow along because this is the only way I could kind of get to work and this is probably the hardest part of the actual game okay so we're gonna take grid we're going to take locked positions and we're going to do is we're gonna set up a few things here just follow along if they'll try to explain as I go so I'm gonna say Inc which is an increment 0 for I in range the Len of grid negative 1 negative 1 ok and we're actually just going to subtract 1 from this to what this is gonna do is go loop through our grid backwards so it's going to start at the twentieth row and it's gonna move up to the nineteenth row okay I'm gonna say the current row is equal to grid I all right now we're going to say if the color zero zero zero is not in our row let's clear okay so we're gonna add one to ink don't worry I'm gonna explain this after that just follow along okay say IND equals I I'm going to say for J in range the length of row what we're gonna do is we're gonna try to delete locked square brackets current position there's gonna be J I and then if this doesn't work and I accept and continue okay okay so let's just talk about what I just did here because I kind of went fast and there's another part of this function door so the way this is gonna work these we're gonna say we're gonna look through the grid backwards we're gonna set row equal to every bulb row in agreed so what that really pig do and the way that we know if the bro should be cleared is if zero zero zero doesn't exists because if zero zero zero to success that means there's no plaque squares in our row which means it's completely filled with shapes are completely filled with cube objects or whatever okay so we know we can clear it so the way to clear it now and don't worry about these variables I'll talk about that a second is to get every position in that rail to do that we need to loop through J in the row and we're already out the current row so we know that I is just gonna stay static change J and try to delete this from locked positions because now what we're doing is the locked positions need to be removed so when mandela bees since locked position is a dictionary and it's mutable we can I should just change it within here and that's how we delete those keys and those colors from the grid okay so after we delete that all what we need to do is we need to shift every row so what's happening now and I think I'm actually just gonna pull out a little I have a drawing tablet and just start using this to kind of explain some things because it's pretty complex so just give me one second all right so what we need to do is we need to shift every row so if we delete like a the bottom row we every rule above that row needs to move down by one so if I go to let's see this and delete this okay so you can see if I have a grid alright and it looks something like this we're just gonna do like a very basic like 3x3 grid okay just to save us some time let's say that we want to clear this road down here so these are full of colors right so if we clear this row and what happens is we get rid of all these and that any positions that were above it so let's draw something like this now this is here well currently this is floating right because if we've cleared all these positions down here so we got rid of those this is floating so this needs to move down one so how can we go about doing that and the thing is every other row needs to shift down by one as well but now let's talk about like a potential issue we might run into so if I delete all that and let's say we have a grid that looks like this okay and there's a color here if we delete this row the grid actually now in our memory only looks like this all right it's only this top portion because we've deleted an entire row out of the grid so yeah we can shift everything down by one but now we're left with the grid that's one less than the other one so what we want to do is you need to add another row at the top here so that our grid stays the same size because if you delete an entire row well you're deleting row right so you need to add back the other positions at the top because everything's shifting down by one so really the way it works is you delete this and then this whole thing moves down and then you add a row at a talk like this okay so that you're back to your continual grid I hope that makes sense that's kind of the only way I can really explain it to you guys in terms of how we shift things and I mean to do it in code right okay so leave a comment if you guys confused about that cuz I'll try to explain it in a better way but it's just kind of like a confusing topic in general okay so now we're gonna do say if I NC is greater than zero okay we're going to say so this means that we've shifted and we've removed at least one row and I'll talk about the case in which we moved two rows in one second okay let's say four key in and just follow what this is this is gonna be kind of confusing list of locked positions so locked because we're just we just pass in Lock there okay and then when you say key because lambda I'll explain what this does in a second x x1 and I think that's about it and we're actually just gonna reverse this negative okay so for every key in our sorted list of locked positions based on the Y value is what this does so given a list that looks like this if you have like zero one zero zero okay give it a this a very basic list this could be a of locked positions list okay what we're gonna do is want to sort this list and the way we sort it is based on this number here this Y value and this is what this key equals lambda x x1 does you don't have to understand that this is just a really kind of complex way to sort of list what we're gonna do is we're gonna now make it look like this is your zero zeroone the way we do that is so that we get all the positions that have the same y value in like the correct order okay and you'll see why we need that when we start coding okay so I'm gonna say X y equals key because you can remember key is a tupple and I'm gonna say if Y is less than I and D we're gonna say new key is equal to X comma y plus AMC and then locked new key equals lock dot pop key okay let's dissect this now alright because this is I told you guys this was kind of confusing so what we're doing now if we want to shift every single position in the grid down because when we delete a row everything above that needs to move down so the first part is pretty straightforward okay so XY equals key so we're simply getting the x and y position of each key in locked positions and remember locked positions as a key and then a corresponding with that is a color okay straightforward now what we're gonna do is we're gonna say if Y is less than int and what that means is if Y is if the Y value of our key is above the current index of the row that we removed so if we remove for example row 17 then only things that are above that are gonna move down we don't need to move anything below row 17 down because we didn't remove anything after row 17 right and I'm gonna show this in a drawing in just a second okay so if that happens what we're gonna do is we're gonna change a key we're gonna get a new key we say it's igloo the current x value but we're gonna increment this by a certain value so we're gonna add I had to the Y value to shift it down and then we're gonna do is we're going to rewrite we're gonna create a new key in locked position which gonna have the same color value as the last key B on this one this gives us the lost current color value but it's equal to this position right so I'll explain why this works now kind of withdrawing and why I needed to look at this backwards okay because when we're looking at from bottom to top there's there's a reason for that alright and I might butcher the explanation but just kind of bear with me here for a second because this is important to understand why this works and this is the most complex thing and this is actually very useful you might want to use this a lot like shifting positions in a dictionary or in a list okay so if I go back to my little drawing thing here and I go like this okay so let's create a grid over here let's make it a few more rows this time just for a better explanation so one two three four okay I make it a four by four okay do you guys can see my fancy drawing skills let's make this a row so let's say we have a row like this guy so it's green make orange the orange didn't work okay so green can stay there orange like this like this and like this and then we'll add some more colors let's do like blue up here and up here okay so obviously this is the row that needs to be clear that my mouse going over right now okay so this is the road that needs to be clear what happens when we clear this room okay so we've looked from the bottom of the list up and we found if we're looking at row like for now looking at Row three and we say Row three it needs to be clear okay so it's cleared so we delete everything out of Row three right this row is now gone so our grid in memory just looks like this and this so what we need to do now seem to shift these position positions down but we don't want to shift these positions so that's why we're getting that int so we know which position push the positions in our grid to shift so we delete that row and then what we're doing is we're adding one and shifting all these positions down okay that's the straightforward example let's get rid of this and let's do this okay so let's say when we add our I don't know shape whatever to our grid we end up getting something that looks like this okay two rows that need to be shifted down now what we have to do is we have to delete this row and this row now here's the thing we delete this row we delete this row how many rows does this now need to move down well this needs to move down to Rose so how do we know how many rows to move this down how how many rows to move everything else above it down well that is based on our what do you call it increment here and that's why whenever we delete a row we add one to increment because we know that we have to now shifted down another row okay and that's kind of the way that this works if that makes sense now the reason when we go through and we look at things backwards so we don't overwrite existing rows now this is another complex thing okay you probably don't have to really understand this that much but anyways okay so let's just it's not gonna let me undo okay that's fine so we have this right now here's the thing we started looking at it from the top down to the bottom what would happen is we would so let's actually have to add another row for this example to make sense okay so if I add another row and I say well okay mmm it's out of color let's pick yellow all right let's say we have a position here and we have a position here alright so that means this position this position and this position I'll need to move down so here's the thing if I move this one down by two alright or if I move it down by one or whatever it could possibly overwrite this existing position and we don't want that to happen so why why we have to start looking at it from the bottom it's that when we start moving everything down we move the lowest most things down first so that way when we then change this there's no possible way we're gonna overwrite this right here okay because remember if you in a dictionary if you change a key and the key already exists well you're just gonna overwrite that key so that's why we started looking at it from the bottom if that doesn't make sense don't worry just that's for any of you that's why okay because I want to make sure I explain everything and you guys understand at least on some level why I'm doing what I'm doing okay so that's it for the explanation of clear rows now let's call it function so when are we gonna call clear rows now this is actually an interesting call we could call this function every loop but we're only gonna call this when our change piece hits the ground now the reason for this because you could possibly be moving down the screen and at some point the grid would have a full row before your shape actually hit the ground now we obviously know the way in Tetris when you're moving down the grid until you like lands or you stay static we're not clearing anything so that's why we're only gonna call this if we are about to change the piece so clear rows what does clear rows take again I'd say it probably takes grid and locked positions maybe yeah grand and locked positions okay so path of the grid will pass it lock positions okay so then we're checking whenever we're changing the piece if we should clear a row and this can clear multiple rows at once okay I'm gonna be showing you guys a few different things so in the last video I mentioned I was gonna be doing more cosmetic stuff so that is true in this video I'm gonna be showing you how to do the main menu screen how to draw text in the middle the screen how to make things look a little bit better and I'm also gonna be adding a little bit of functionality to the game in terms of making the piece fall faster as it moves or as time moves forward so obviously you want the game to get more difficult as time goes on so what we're gonna do to do that is increase the speed at which the piece falls down the screen it's pretty easy I'll show you how to do that I'm going to be adding score and we're gonna be displaying that score and that's probably about it for this game so the first thing I want to show you is how to add the piece following faster so to do this we need to create a variable in our main here and I'm just gonna make this equal to what are we going to say fall all right let's say level underscore time okay and this is gonna just represent how much time has passed and it's gonna be similar to full time and level is just because as we increase speed like the level is going up kind of whatever okay so say level time plus equals clock dot get underscore wrong time and we're gonna do exactly what we did with making the piece move down the screen except we're just gonna change the speed at which it moves down the screen so what I'm gonna do here is when I make another if statement I'm just simply going to say if level underscore time divided by a thousand is greater than and then you can put in whatever time you want here now I'm gonna do five seconds so every five seconds we increase the speed okay and then we can decide what we want to increase the speed by so I'm going to say a level underscore time we need to first reset this back to zero so that we continue to do this and then what I'm gonna actually do here is gonna say if level underscore time is greater than and we want to put like a terminal velocity here so at what speed do we stop increasing the time because we obviously we can't get to a negative fall speed otherwise you're just gonna instantly fall and we don't want it to get too fast that the game's unplayable so we need to pick a speed now a good speed that I kind of found was 0.12 because anything faster than that is like pretty fast but I mean you guys can play with that and change that around it's really easy number just to fix right and then if we're greater than that we're just simply gonna subtract a value from level underscore time now this value the magnitude to the size of this value that you're subtracting is gonna determine like how quickly you increase the speed as well as obviously the time so I put originally 0.01 and I mean depending on how long it takes you to play a Tetris game this is pretty fast because that means after 50 seconds you're already gonna be down to zero point one seven which is very quick and almost at terminal velocity so I recommend you do 0.005 that means it'll take about a minute and 40 seconds before you're gonna be close to reaching this terminal velocity which might be good if you're playing touches for a decent amount of time okay so you guys can play with those numbers but that is going to move it down faster I would show you but it's gonna take like a decent amount of time for it to continue moving faster to just play with that okay just trust me all right the next thing we want to do is add score so we need to first create a score variable and as a score is equal to zero like that and incrementing score is pretty simple I'm gonna say and you guys can make this whatever you want whenever we clear a row I'm gonna add ten to our score because you had ten pieces or ten cubes or whatever that you cleared okay so actually the way that we need to do this is we're gonna return a value from clear rows which is gonna be equal to score now I'm gonna go to clear rows and in here I'm simply just gonna return i NC okay and I NC is the increment so how many rows that we actually ended up clearing so if we clear more than one row we're gonna get a value of two we can multiply that by whatever our score increments gonna be and then yeah we can just add that to the score so this is pretty straightforward if we go to clear rows we're gonna say score is equal to clear rows multiplied by ten all right or actually not equal to we're gonna have to say plus equal to clear rows plus ten now what we need to do is we need to display this score on the screen somewhere the user can see then we're actually gonna save this score as well when we lose the game okay so the way that we can display this is we're gonna have to do it in draw window but we're gonna have to pass this score to draw window so after our grid object we're gonna pass score like that and we're gonna go to draw window and we're simply going to add another parameter here score like that now I'm just gonna set it equal to zero as a default parameter so in case we call it somewhere else and we forget to add that score that's fine we don't need that so what I'm gonna do now is I'm actually gonna go to draw next shape and at draw next shape you can see if I run the program quickly here it shows us like a little text object okay now I want to get this similar text object so I'm just gonna copy this fall into the label SX sy and I'm just bring it down here into draw window now it doesn't really matter where you draw it I'm just gonna plop it in the middle here and obviously I'm gonna change this from next shape to be score now we need to obviously display what the actual score is so we can just say a plus STR score like that and that should be displaying for us okay so now we have SX and sy which is giving us the play area I believe or no this is actually the position in which we wanted to draw it okay so what I'm gonna do is I'm gonna say wind dot blitz or is it surface surface dog blitz our text object which is D label and then where do we want to draw it to and draw SX sy now I'm just gonna have a look up here to see where I did it here so SX plus 10 sy minus 30 so what I might want to do is we can add +10 to this so it's aligned but then we're gonna subtract we're actually add to the Y so it's lower so I'm gonna add let's say like 80 like that so let's test this out and see if it's working score so it's not low enough so we'll add this I do 120 and see where we're getting an escort again not low enough it's go 160 and again you guys can play with these numbers score equals zero perfect and then maybe we'll just add 10 more pixels here so it's more in the center and you know whatever that's good enough for me okay good so that is working well so we've got the score and we were moving down faster now what else do we need to do what we need to do now is work in main menu and figure out what happens when we actually lose the game so we have this check lost and all this simply does is just quit the game for us when that happens but we want to do something else when we lose and we want to display something to the screen so actually before I go in main menu I'm gonna go up here to a function that I told you guys I need to get rid of that that I was going to finish which is draw a text in middle now this is gonna take a service text and what else do we want say size and color okay so surface text size color this way you can use this in another function or sorry and another program and you can use it multiple times with whatever text size and color you want so we're gonna set up a font trans a font equals PI game dot font dot sys fonts by now you probably know this I'm just gonna pick Comic Sans we're gonna make it equal to size and bold is gonna be equal to true now you can make this false if you want or just omit it completely and then it won't make it bold pretty straightforward make a label label is equal to again phone dot render and then we're gonna say text one for antialiasing and color like this okay now we'll just simply draw this in the middle of the screen so to do this will say surface double its label comma and now we're gonna do a little bit of math here so talk underscore left under short X plus play underscore width divided by 2 not 3 minus and we're gonna get the label width and the way we do this I don't believe I've actually done this yet is get underscore width I think I'm just gonna check yeah get width and then the reason I have this in brackets because I'm gonna divide this by 2 as well and this will essentially give us the middle position where we should be drawing in terms of xcoordinate okay so now I'm gonna give top underscore left y plus play underscore height divide it by 2 okay and now same thing label dot get underscore height in brackets and divided by 2 I don't know why kids tab over here okay / and that should hopefully be working for us okay so we can test that in just a second so we've got this it's bleeding now whatever text we want to the screen so this makes it really easy for us to draw anything to the middle of the screen so the first thing I want to draw it to the middle of the screen is like a you lost message so when it says you've lost what I want to do is draw obviously you lost and tell them that so let's say draw text middle and then what do we want to draw well let's simply draw what surface first actually that we need so we'll say win and then we're going to pass it text and in this case we're gonna say you lost exclamation point sighs let's go or a and color let's go wait and you obviously you guys can play around that now after I draw that and I display the screen or update this screen PI games display update just because we haven't called the window yet draw window when we do this then what we're gonna do is we're just gonna delay so whereas a PI game dot time delay and I'm just gonna delay one and a half seconds just so once this comes up the user has a second to look at it because then we're gonna move back into our main menu screen which you'll see okay so I'm just gonna fast forward this until I lose and then you guys can see that it's working and there we go so we got you lost and then it's late and then just quit because I have this PI game dot displayed up quick here okay so now we're gonna move to is main menu everything else is working I told you guys it's not like super difficult all this stuff and in main menu what we're gonna do now is we're just gonna make it pop up whenever you start the game and whatever you lose and just gonna say hit any key to like move forward to continue okay so I'm just gonna use up another game loop in here so we're gonna say run it was true well run and this is gonna be really similar to the loop we've done above it's just up just a lot shorter we're and we're gonna just draw in here without using a different function just because we're not drawing very much so it's not important that we wouldn't call it like update the screen with a defined function so I'm just gonna fill with block just we kind of are getting rid of everything we're gonna draw text middle and what I'm gonna do here is I'm gonna say press any key to play okay and then we'll give this a size of 60 and a color of white once again okay so that's being drawn in the middle will update the display so pi end up display dot update like that and then we're gonna say for event and PI game dot event type gets a similar to what we've already typed up top we're gonna say if event type equals equals PI game dot quit we always want one of these not quick cue then we are simply going to say run oops run is equal to false and then we can tap out here and we can just make sure that we are actually quitting the display so don't quit and we'll get rid of this pygame dot display dot quit and then we're gonna add one more event and this event is gonna be a key down so whenever they press any key on the keyboard then that is going to move this forward and we're simply gonna call this main function where we'll play and I'll explain how this kind of flows in just a second because it's really nice okay so if event dot type equals equals PI game dot all capitals key down so if they hit any key then what we're gonna do is we're gonna say main like that okay and I believe that is about it okay yeah so let's see here pi game dot display dot quit looks correct okay so the way this is gonna work pretty much is when we run the game we start by running main menu so we run main menu and then we could go into this main loop where all its gonna do is just say press any key to play and that's gonna be drawn in the middle of the screen once that happens we're gonna check if they're hitting any key if they hit any key we're gonna call main in which case sir let me close this so it's easier to see if we hit main then we go into the main game loop and we go and we do this loop until eventually we lose once we lose it displays you lost on the screen makes this loop equal to false which means it brings us back into this main menu loop and we can play again by hitting any key pretty straightforward okay so let's test this out to make sure this is working draw text missing one potential argument color ah because I didn't give a surface my bad so let's just do win and there we go okay so press any key to play press space missing one protect mate okay sorry guys and this is why we test our perfect okay win and now let's try there we go and now we're playing it shows the score and you guys can mess around it I haven't actually tested the score so I'll just do this really quickly and see if I can clear row without having to fast forward which we may be able to do not use it okay let's see there you go and score is equal to 10 so the score systems working as well and that's relief because I hadn't even tested that before I put this in the video okay perfect oh when you press the X brings you to press any key to play you press it again you can do that so if we wanted to change it so when you hit the X key and the main thing and you want to close the game then in the main loop here sorry what are you gonna do is sort of saying run equals false just to high game display dot quit so you can do both you and say run equals false and then you can quit the display as well okay so what's next so I said we were going to save the score and potentially display that so if we want to save the score we're gonna have to do something when we lose so we're gonna have to update like the current score and we're gonna use a text file to do this so that you can play multiple times so what I'm gonna do now say new file just create a new text file and it's gonna call this scores dot txt okay and here I'm just gonna put a zero as a default value it's really important you put a default value to start otherwise you might run into some issues so just create a new text file make sure it's in your directory with the main with the script okay now what I'm gonna do is I'm gonna create another function doesn't really matter where it goes so I'm gonna say define update underscore score and we're gonna give it to score okay now in here what I'm gonna do is I'm gonna say with open and this is how we're gonna open our text file and it's like update and display with open scores text in our so in read mode and this action needs to be in quotation marks as well we are going to say F yeah I have to do this as F sorry I say F dot read lines like this okay and that'll be equal to lines is equal to F dot read lines so that means our score is going to be well the first line so score is equal to lines zero and we're gonna add this dot strip so that we remove any like backslash ends because if you don't know in a text file when you hit the next line the way that it actually tracks that you have another line is it puts a character that looks like this on the line it's invisible to you in the text file when you're viewing it but when you read it in with code you actually read in this character we just want to make sure we strip that off in case it is there I'm gonna say square equals this and then we'll just say okay so we've done that and since we're topping out now at all it's gonna automatically close our file what we're gonna do now is we are going to open the file again except in this time we're going to open it right mode which means we're gonna overwrite whatever is in the file and we're simply gonna say if score is I guess I'm gonna change this to end score standing for new score if score is greater than n score then we'll say F dot and we'll say write lines actually right I think and we'll simply put in STR of score which is this updated score otherwise so if that's not true we just have to write back the other score because we're clearing it when we open this with W mode okay so rinse it F dot right and then sorry this is gonna be what am i doing N and score yeah sorry so I kind of messed up in this way it should be the other way around but whatever we're just checking if the original score is greater than the new score if it is we'll write the original score otherwise we'll write the new score so this works still it just not the way that I was thinking about it when I was kind of talking about that okay so update score should work and then you know you can actually returned let's just return actually a naught we don't need to return anything so I haven't prewritten this yet so I'm kind of still just going through how I want it to work okay what we'll do here after we start round equal to false we'll say update score and we'll give it whatever the current score is and then this should be working in the scores dot txt file so let's run this I'll fast forward through and make sure things working okay so we got here not support it between instance of string and int okay so if score greater than end stress which mean we have to convert the student int so if we go back up to score and where did I make this okay score is going to be int score like that okay and that's hopefully work because score comes in as an int and we'll run it one more time one more fast forward sorry without guys okay and another issue lines zero Linda list index range okay I'm gonna have a look at this and come back okay so this code is actually working just fine the issue was that since the last time when I crashed we didn't end up writing anything into the file so we had a blank file and then we were going lines to zero where is it here and obviously there was no line 0 so that crashed but if you just add any numbers so if I add 0 back in here two squares dot txt and save it then this works fine okay so that's it for saving scores now we need to display those saved scores so I'm kind of gonna leave this up to you guys where you want to display it I don't really know where I want to put my saved score like high score maybe on the left side of the screen doesn't really matter so if I want to draw it on the left side of the screen then I can do something like we're gonna have to first get this max score right so I'm gonna have to make a new function called define max score or last score or whatever you want to call it and if you call max score what we're gonna do is we're just gonna do the exact same thing we did here so we can say it with open square set text score 0 epsilon 0 dot strip accepting this time we're gonna return score like that okay now we actually do here to is we could just simply replace this whole line with max score and just say score equals max score be the efficient way to do it and I mean feel free to do that if you want or leave it the other way okay so now we have something that's getting us max score so how we gonna use this well when we call main I guess when we call me or we can call main menu does it like you guys if you want to draw it in the main menu can do that otherwise draw it in the main to draw it in the main all you're gonna do is gonna say like last score is equal to u max score which is gonna be whatever is stored in that text file and then to draw this well we're gonna have to pass this again into when we're redrawing window so in draw window I'm just gonna say last score we can go up to draw window again say last underscore score equal to zero and you're pretty much it gonna copy exactly what we have here with this font and the split so let me just comment this and say this is current score just so I could remember you know how to comment and say loss score or high score whatever you want to say here and then we can just say score and we actually get rid of this font because we already defined it we'll say high score equals and in this case last underscore score okay draw that to the screen this is probably not where you want to draw it you probably want to draw it top left X minus like some value minus 30 top left Y maybe plus I don't know like 300 or something so now we can see where this is actually gonna draw if we check this out so let's run this press any key so it's not obviously showing up where we want to so we have to subtract more from this so let's subtract like I don't know 100 and then this was plus too much let's do plus 200 and high score so again like you got to move it over more so we'll move over 200 this time and hopefully this works okay so high score zero scores here and that's obviously because at the current moment we have no our score is just zero in that text file okay so I think that is pretty much it for this video if you guys have any questions any errors anything that I did in this video that you weren't sure about leave a comment down below we'll be sure to get back to you