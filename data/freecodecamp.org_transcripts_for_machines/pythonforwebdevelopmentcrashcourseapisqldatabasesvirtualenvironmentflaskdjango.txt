learn the basics of using python for web development in this crash course from popular Creator Tommy Toco Tomi will teach you different concepts through a series of short projects hey guys welcome to this tutorial so in this tutorial we're going to be learning python for web development so I'm going to be teaching you the major skills you need to know to get started with web development using python I'm going to be teaching you steps like using SQL with python using apis with python and some other fun stuff that we need to get started with web development in Python now everything that is going to be covered in this video is going to be shown in here right now so as you can see we talk about everything from SQL to apis to web scraping and even virtual environments and I hope you enjoy this course now I have some free resources like a jungle roadmap uh python data structure cheat sheet a Django cheat sheet and plenty more free resources in which I compiled into a PDF and you can download that PDF for free using the link in the description below and before we get straight into the video if you like more tutorials like this please don't forget to check out my Channel at code with Tommy where I teach more on Python and web development in general so let's get straight into this course now we're going to be looking at connecting SQL with python so we can create and use databases in whatever application that we're trying to build so for example let's say we want to build just a demo application that stores like customers details and we want to save that to an actual database we can use SQL with python to make that possible now when building a proper web application if you're using a framework for example like Django Django actually uses something called orm so you don't actually have to write SQL code to do this but that's only if you are using like specific Frameworks that adds those features but imagine you are using let's say you are building everything by yourself the old server and you actually need to code in SQL or there isn't a framework that requires you to you know code SQL by yourself then this will come in handy so this is why I'm adding this part to this old course so what we're going to do now I'm just going to show you how to you know use sqlite to create database update the database get response from it and all of that stuff and we're going to be using SQL Lite so sqlite allows us to easily create database using SQL and if you have python installed on your computer sqlite comes with it automatically so when you have python installed what you just need to do is to just first of all say import SQL lights three let me make this a little bigger so now when you say import sqlite3 what this does is that it's just going to use the SQL light library that comes with python so now when you when we do this the next thing that I'm just going to do Straight is to show you how to create a new database now when you're creating a database it always has the extension.db just the way python has the extension.py and you know other programming languages like JavaScript as dot Js when you're creating a database file it needs to have the DB so before we actually continue coding or start coding let me tell you more about what this is and what we're going to do first of all you need to have basic knowledge of SQL because what we're actually doing is we are connecting Python and SQL together as I said but that means we're going to be running some SQL commands in our python code so for example let's say we want to create a database that is called you know um like customer database.db right we need we might need to use uh for that we might just need to use a python code to create a database but to actually create a table in that database like customer table then we need to like write the SQL commands that you will use normally so if you're familiar with SQL which I suggest you should be then you understand website like we're going to run basic command like create table then the name of the you know the table we want to create but to do that we're going to use SQL to create that but in our python code so without making any confusion let me just get straight into what I'm talking about so before we even start creating any table or inserting any data we need to connect to our database so as I said database always has the Five Dot DB so we actually need to create our database file where we're going to be you know creating all our tables and all our you know data in it so what I'm going to do is to say SQL Lite dot connect so what this is going to do let's just say something like customer dot DB so let's say that is the name of the database right of the database file this can just be like test.database this can just be like let's let's just say this is data.database right let's leave it like this what this is going to do is that it's going to connect to uh data.db file in this particular directory so as you can see I'm in this direction in Python cheats if I come in here this is the directory and the only file that's there is app.py so as I said this is going to try to connect to a database file name data.db but in that folder there's no data like that there's no database file named data.db what it's going to do is that if there's no database file like that it's first going to create a database file name data.db before it tries to connect to it so what I'm going to do now I'm going to store all of this connection into like uh so I'm just going to remove this into a variable and name it let's say connect equals to this so once I hit connect equals to this it's going to try to connect to this I want to create a table so for me to create a table I'm just going to do the basic you know the basic syntax that we always use to create a table and I'm going to say connect dot execute right so what I want to execute now is a command that I'm going to use to create a table now to execute an xql command we need to use this triple parenthesis this triple quote or whatever you call it so in there in here this is where uh you know SQL command is going to go so what I'm gonna do is to say create and everything has to be in caps of course because it's SQL create table and let's just say something like customer and once we have this customer table created then I want to have all the you know parameters that you should have all the attributes of that table and let me just give this some space in and put it right here so what I'm going to do now is to say I want to give it an ID a customer ID and I'm going to say ID and when you give it the ID you're going to give it the data type so I'm going to say integer and then I'm going to say primary key so again if you are familiar with SQL and relational database in general you should understand what this primary key means so if you don't I'm just going to go through it quickly so what primary key is is basically just represent you know this entity or this particular data that we're going to create so for example each customer that we're going to create is going to have an ID and that is the primary key of that particular customer so that means that if we have the ID of that customer we can have access to all other details of that customer so that's just a basic explanation of what primary key is it's like it gives it the identifier that we need to identify a particular customer so you want to give it not no I was saying not no because we want there to be you know uh a value it needs to have a value it cannot be no so we're going to do the same thing I was just going to say name I'm going to say text and then when I say not snow now you can see the difference the only difference is that we have the name which is the name of the you know attribute we have the data type which is text but we don't have nothing like primary key because this is not a primary key we only have one primary key in a particular table and then we just have not know so we're going to do the same thing now and say h and it should be an integer and also not no and you put your comma and I think that should be enough for now and let's just you know leave that like that and then what we can just do is to put after year a column so we don't need a comma because that's the last one so after that we can just put a column to like end that and I'm just going to bring this back here so this is a basic SQL command to create a table name customer and give it three you know all these values all this attribute which is ID name and age so what I'm gonna do is to just close the connection after so let me say connect Dot close so what I'm doing is that after I have connected to this and executed this command I just want to close that connection so as you can see what I did here is very basic I just created this customer table this is pure SQL command but then I'm executing it in Python now let's run this now now if I run this Okay cool so as you can see the database file was created in this in my default user so apparently what you need to do is to specify the directory to where you want the database to be created if you're on a Mac and you just put database.db or whatever the name is dot DB and you don't specify what it is what it's just going to do is going to go to the user in my case which is told me and it's just going to create database.db right data.db or the file right there so as you can see let me bring that here so that's what you just do it so that makes sense so what we can do now as you can see we executed this table and now we know that we have a table created like this but you know how can we see that we've created a table now there are different ways we could first of all just insert values into it and then get return those values to know that we actually created the table or what I do I downloaded this application called DB browser for SQL Lite now once I run this browser what it's going to do is that it's going to allow me to import an sqlite database in it so if I say open database and then I go to tell me and I say allow and I say database.db now you're going to see that in these tables it actually creates that customer table in that database.db file and now we have ID name and age so that is good because that that is good because that is what we need and now we have the confirmation that we've created this database table in this data.db now what we can just do the next thing we can do is to insert like data into it so to do this is very easy we can actually remove this database right this execute because we already created that table or what we can just do is to add a line and we can say something like we want a drop table if exists so what we want to do is that before this is run we want to we can say something like we can have a command and just say connect dot execute and then we can just execute drop table if accessed and then the table we want to drop is customer so what this is doing is that before he tries to create the table he's first gonna look if there is any table name customer is going to drop it that is going to remove it or delete it and then create this table so this means that every time we run this is you know deleting the customer table and then creating a new one we can easily do that but we can also just remove this let's say just put it as a comment because we already know that in this database file there's already a table name customer so what we can just try to do now is to access that table so what I'm just going to do I'm going to come in here and I'm gonna say connect dot execute and what I want to do now is to just try to insert values into this customer table so I'm just going to try to insert just one value you must write write all your commands before closing it because after closing it you can access it again so what I'm just going to do in this execute I'm going to have my quotes and I'm going to say insert into customer since we already know that there's a customer database right and then what I want to insert I want to insert in the ID so I'm just going to copy ID I'm going to insert in the name I'm going to copy name and it only set in the age and I want to copy age so what I'm doing is I'm inserting into customer in this attributes I want to insert I'm just going to have the backwards slash and I'm going to insert these values let me just put here and save values and the values I want to insert for ID I'm just going to say one right and then for name I can just do something like tell me and then for the age let me just say something like 99. so I'm I can write all of this so as you can see it gives us an error what we can just do is because of the spacing that's why it gives us an error but since you know what I wrote I can bring that back so as you can see once we try to execute this command what he's doing this is also a basic SQL command is inserting or creating a new data under this customer under the ID name and age and it's giving you the values of one told me at 99. so the other in which you put it is how it's going to do it is how it's going to insert it so for the ID is going to take the value of one name is going to take the value of Tomi and age is going to take the value of 99. so now we're gonna run this and so again the unrecognized talking error which is this right here so actually we can just get rid of that it doesn't really make a difference yeah we're just inserting these values into this customer table so once I run this I get no response but I know that this has worked right but to actually see that it has worked what I need to do is to get all the values or or all the data in this customer database so what I can do to do that I can say something like all data a variable and I can say connect dot execute and I want to execute a SQL command so I'm just going to do is to say select star from student so actually this in this case is customer so once I say let's start from customer and this basically has all the database in this particular data right now all the data in the database so I can just do is say for Row in data so for every single row I just want to print the row so once I print the row this is all data and I save it now let's see where it prints us so as you can see if I scroll up right here it gives us one tell me and 99. so as you can see we successfully know that these values were inserted into this customer database so what I can just do now is to create another you know another data in there I just copied that line and pasted it again and I can give you a key of two and I can say team and I can say 29. once I save this right and then I run this as you can see it gives us that we have one Tomia 99 we have two team and 29. now this is very good this is how you can easily use uh SQL database in your python project wherever you're working on so that is what I'm going to show you for this section of this particular tutorial or in this tutorial now as you can see this is just the basics of you know SQL with python there's still a lot if you know SQL is basically the same thing whatever you want to do let's say you want to delete a database or you know you just want to get a particular data that has a particular ID what you can just do is to just you know get with you know filter with ID once you know SQL commands you basically know how to use this just input your SQL command here and execute it and it's gonna work so that's going to be all for this tutorial in this tutorial I'm going to be talking about using apis in Python so if you don't know what an API is it is an acronym that stands for application programming interface so what it does is that it's a server that allows you to receive and send data using Code so for example using python in this case so for in the most most of the time you actually use an API to basically retrieve data let's say from another web application or maybe to even send data and then get a response after so for example let's say I'm gonna give you a new stars of an API so let's say we have an application that has been built and you want to access the data in the application let's say like you want to access data like the amount of views the application gets or the amount of customers the application has the owner of the application can create an API that allows you to access those data if the owner of the application wants so they are you know various apis on the internet and you can also create your own API but in this tutorial we're going to be talking about how to use API so how to basically get responses and retrieve data from an API so right here I have this demo API that I created a while ago and what it does is that it just has data about you know different names and their age so this says team and age 27 it says Tom and age 16 this is Jim and 19. so he just has this data and that's what it is there are of course more advanced apis out there but for this tutorial this is what we're going to be using so I'm going to show you how to access this you know this API that we have right here so to do this we need a python Library called requests so you need to go into your terminal and type just going to open up my terminal right yes I'm going to run this to open up a terminal and then delete this and let's say we want to run P3 install requests once you run this it's gonna install requests for you for me it says requirement already satisfied that's because I have requests installed already so once you run that it's going to install requests for you and you're going to use request to actually send a request to the API that you want to retrieve so what we're going to do now is to First import requests and is written s and then what we're just going to do is to send a get request to this particular API so as you can see this is built using the Django rest framework you don't need to know about that for now but it basically just allows us to you know have this good looking interface that has details about the API so you can see that it uses a get method what we can do now is to say request dot get or is in the get method let's just close this and we want to send a request two so I'm just gonna get out of that you open a bracket and then you have codes and in there you're going to send a request to the link of that particular API or we call it the you can say is the API endpoint that's the URL that has all the details we need so this is the end point that I will send in a request to you and let's get the let's store whatever we you know get as a response in a variable named response I'm gonna say all of this is equals to response so this is very easy very straightforward and how to create a request then what you can just do now is to just say response dot status code so once you say response does status code let's actually print this it's going to show us the status code of this and I'm going to tell you what that means right here you can see that it shows 200. so each recipe each status code as its meaning so if we get 200 this means that you know everything went okay and then we've gotten a response if there was any response we've gotten that response there there is um 301 there is you know 400 that is 401 there's 403 there is 404 which you might have known because it's a popular error code and I think there's 503 also so each of these has their meaning the 301 means that the server is kind of taking you to another endpoint that's what it means and for this um this is 400 not 100 so 400 basically means that we made a bad request so this means maybe we're not sending the right data that we need well it just means we made a bad request and 401 this happens when you require when it requires authentication it requires you to be authenticated but you are not dedicated so that's when we get a 401 error and 403 it basically doesn't give you access access to you know doesn't give you access to access this particular API basically it means like you're forbidden and you don't have the right to access that data that's what it means and 404 just means that the end point or the URL that we're trying to send a request to does not exist so that's what it just means so it wasn't found and 503 means that if the server is not ready to undo your request so maybe it's getting too much request or you're just down for that point so it means it's not ready to handle that request so that is what all of this means but as you can see we got 200 and as I explained 200 means that everything is okay and we got the response that we actually need so once we have that what I can just do next is to actually you know print the response that we got so as you know this is what is being contained in this particular API so once we print the response we should get that means we print the data of the response we should get that data right there so to do this is very easy what I can't just do is to say print and I'm just going to say response I'm just going to get out of that the text so once I print response.text and run this you're going to see that it prints all of this in like a list so it says name team age 27 that is one data name term h16 that is another data and as you can see Team 27 Tom 16 so that is a basic way of you know just printing this so let's say you know we want to go for that we want to be able to use this data because right now it just sees it as a string let me show you what I mean so let's say we do something like for res in response dot text right and then we just say print res so because it's a list you're going to expect that it prints each of these separately but no it's not going to do that see what's going to print let me comment this out and once I run this you see that it prints every single character every single letter separately now this is because it sees this as just one string so it see prints everything as one like every single character separately but what we want to do is to change this response into a Json format so we can actually use it as a recognized data type so for me to do this I need to import the Json library that is preinstalled with python I'm just gonna say import Json and once I import Json what we need to do is to say the right here I'm actually going to get rid of this print it's going to get rid of that and I'm going to say something like response no I'm going to say res equals respond.txt right but I'm gonna say Json dot loads so what this is doing is that it loads this response or it loads this text that I get and it kind of converts it into a Json format so now that we know we have this in the Json format let me just comment this out for a bit and I can just print res now once I print rest and run this if I come here you can see you don't really see the difference yet because it still looks similar to how it shows before but the difference now is that once I try to Loop through it so let me just comment this out so just remove this and I can say for data in res print data so I'm going to remove this now once I'm looping through this rest and I run this you cannot see that it doesn't print every single character separately it prints every data separately now this is just a basic way of you know getting data retrieving data from a particular API so as you can see what we did was import request and import Json then we sent a request to this particular API endpoint and then yeah we're just printing the status code to see if everything went good if everything was successful and we got the text from that response which is the data that we retrieved and we converted it into a Json format and then we Loop through all the data because now it's in a Json format it's in a recognizable data type and then we printed every single data so this is a basic intro to using apis in Python so in this tutorial we're going to be looking deep into oop so oop stands for object oriented programming and in op we are going to be talking more about classes and objects so whenever you're building web applications you're going to use something called a framework so let's say you're building a web app with python you have to use a framework to do that for you and the Frameworks a framework allows you to you know skip a lot of setup process and just go straight to the point like setting up a server you know basically setting up your database from scratch the framework already does all of that for you and what you just need to do is to create your project and get going with the main coding now the thing is most of these python Frameworks used for building web application they use something called orm which is known as object relational mapping and what this does is that it uses oop the concept of object oriented programming to create database for you so for you to be able to use database in your web application you need to have strong a strong knowledge of objectoriented programming so for example Django which is the most popular web framework for python uses this orm which means that using classes and objects you can easily create a database even a relational database in your web application now so all this breaks down to classes and objects so we're going to be looking deeper into that and we're going to be talking about everything you need to know so you know to have enough skills for you to start building web applications with python now the first thing we're actually going to talk about is just a basic class so first you just you know have a basic class of course uh we should just say class and let's just say something like person this is just a simple class and we can say the person name is Tommy I can say the person uh age is 12. and what we can just do is to in here we can have a simple method saying Dev we can have a function and that function can just be something let's just give it a round of let's just say random right I'm just gonna give itself now what we can do is to just say print something like my name is and we can just say self Dot name now we can do the same thing and print my name this time we say my age is or we can just say self.h so as you can see that's what this does of course if we run it nothing is going to show right here so let's delete this old terminal and run this nothing is going to show that's because we're just creating this class but we're not actually using you know running it or implementing any data with it so what I can just do now is to just create an object on this class so what I'm just doing is refreshing on the basic stuff you should already know with python so what I'm just going to do now is to say something like demo present this is just a random data now I'm creating an object of this pressing class I'm just going to say person this is how I create an object and I'm storing it in this variable name demo person so what I can just do now is to just say I can print demo person dot name now once I print demo person.name if I run this you see that it just prints to me if I print demo person.h once I run this it prints 12. good everything is fine and what I could just do I could call this function under the class and I could just say print no I cannot I could just say demo person dot render and what you're just gonna do is that it's gonna come into this demo person it's going to go into the class and it's going to look for this function name random and whatever is being done in this function is what it's going to do so once I run this now again you see that it says my name is tell me my age is 12. that is what I told you to do my name is self.name which is self dot this and my age which is this age so that is you know the basics of classes now what I want to talk more about is the init method so what I'm just going to do now is to come back in here and right here where we have this gonna remove all of this and I'm gonna do Def underscore and I'm gonna write in it and I'm gonna put two underscores now I'm going to have self right and I'm gonna have you know the parameters I want you to have I want you to have name and I want it to have age very basic so what this is doing is that allows you to have your own parameters and like it allows you to you know call your this particular class outside here so for example when I was creating this object I didn't give it any parameter of my own because there was already a parameter there but this allows you to create like Dynamic parameters so different parameters oh sorry different objects of this particular person so I'm going to show you what I mean now so if I say self dot name equals name I'm gonna do the same thing by saying self.h equals H once I say self.h equals H and did that I could also leave this at random and I could just you know leave these two as it is but the difference here is that when I'm creating this demo person what I can now do now is to say person I need to give you the parameters of name and age so I could say the name is Tommy and I could say the age is 13. so this is what I could do if I run this all of this is going to be exactly the same thing but now we are giving you the parameters we want outside the class so if I run this now you can see it says my name is Tommy my age is 13. good that is what we need but the good thing to do is to having the init method is that we can create more than one object of this particular class for example I could say demo person and I could say two to say the exact same thing as a person now I could say Tim and let's say 15. now what I could just do is to change this demo person to demo person 2.h so I wanted to print this demo person to you and I wanted to run the function demo person to the random so let's trace this back logically if I'm running this function demo person 2. random it's going to go into the demo person to variable and then it's going to see the class that has been called and it's going to go into that class in that class it's going to look for the function in random which is this function and it's going to do whatever is being done here so now let's run this and see as you can see now it's just the same thing but for the data of demo person 2. so this is how you can basically use the init method and this is why it is helpful in here so this is basically uh the basics of you know what we need of course there are multi these days multidis like for example I could have let's say more than one function for defining the data so what I mean by this if I come in here I could have an instance variable so I could come in here and say after death in it I could say death and I could say something like um let's just say School right and this cook will also take self and it could just take School okay let's do something like set screw right so if I say set screw and in here or I could just say self dot School is equal to screw now I could easily just add screw to this yeah and do the same thing but what I'm doing now is I'm basically adding an instance variable so what I could do is to get the color sorry get the screw so I could just have another function that basically gets so I could say get screw and I could just say self and right here I could just return self dot School now let me let's try this out so what I could do now to basically create a new one right here where I'm giving it the these values this is the required parameters that I need but for me to set a school let me just get rid of this what I'm going to do now is a demo person and I'm going to call this function but I'm going to have to give you a parameter which is cool so demo pressing dot set screw and then I'm gonna give you something like Oxford so I've said that's good and then what let me remove two let me remove two and then what I could just do is to let's say run demo person let me run this get screw Emma pressing dot get screw but because I'm returning a value I need to print all of this line so I'll say print demo press into get screw now let's see if I run this you can now see that it prints Oxford so everything is working that is the basic way of you know doing that the only difference we what I just did is that I created a whole new function it's called an instance variable just for this school just to set this cool we can create another function to get the screw that is how you can basically do that so the next thing I'm going to talk about is Constructors in Python so this in it right here that I used is a Constructor so it's basically the default Constructor right so a default Constructor is a simple Constructor that doesn't you know take any argument now for example if I say something like let's say I remove this right here right and then I remove all of this and then I just say you know self dot name is equals Tomy so this is just a default Constructor and that is the value that it has as a default now if I try to you know run it and print self.name of course it's going to do that or what I could just do I'm going to get rid of all of this actually I'm just gonna get rid of this and this and I'm going to use this particular function right here and I'm going to say return name and then I could just basically print and in this print function where I'm going to print is self.name so what I'm doing right now is this is I'm showing you an example of a default you know Constructor so this means that we don't pass any parameter in here but right here you can see that we have self.name and we just have it as tell me so that's just the static data and that's what it's going to be so what I can do now is to just you know run so I could remove all of this and let me just say demo person is equals to an object of pressing right and then if I just say demo person dot return name I'm just going to see that it's going to return that name that we put in there which is Tommy but now let's say I want to have a parameter rise Constructor this means I want to have a Constructor with parameters then I'm gonna use parameters right here so now it takes parameters like name it takes age and all of that so that's basically what you know we can do with that it's very easy it's very straightforward and as you can see you know it doesn't waste any time depending on whatever you want to use it to do so let me just show you a basic example of this parameter rights with to be honest we've just done it earlier on what we did when we add name and age passed in here that is a parameterized Constructor so this is you know the basics of classes and these are the basic stuff that you need when you're building web applications with python mostly Django if you are pointing directly to Django you just need to know how to create classes how to create objects and you just need to know your functions and all of that stuff to be able to you know filter and get results from your database using this oop right here so this is also just an intro to classes and objects and if you want to you know go deeper into it of course I'll suggest to take a full course on it but this is basic you know concept around classes and objects and this is basically what you might need when you're building web applications with python in this tutorial we're going to be talking about web scraping so what web scraping is it's basically also known as data harvesting or web crawling so what this means that it allows us to get data from a particular site that is on the web so if a website is present on the internet you can scrape data from it so for example if I come in here and let's say I just go to my site could we told me.com I can basically get the data of all the names of every post on this website using web scraping so there are a lot of use cases for web scraping like for example search engines using this is web scraping to you know crawl through sites and analyze the content and know you know what to what response or what is retrieved whenever someone searches for something or you could be building a price comparison sites that uses like a bot to fetch the prices on different products on the web so those are just simple use of web scraping it could be a lot but now I'm just going to show you how to actually you know code a web scraper or be the simple web scraper using python the first to do this we need two libraries and these libraries are called requests and beautiful ship so make sure that you go into your terminal I'm just going to run this to pop up my terminal so right here I'm just going to say pip 3 install request and this is going to make sure I have requests installed so it says requirement already satisfied which means I have it installed and I'm also going to say peep free install PS4 for me to install beautiful sweep I need to install bs4 so once I say that because I have it installed also it says requirement already satisfied I'm just going to close that and what I can just do is to go ahead and import requests and because we already know we're going to use beautiful soup so I'm going to say from bs4 import beautiful tube now I'm going to show you what these two libraries does so what we can just do first of all just similar to you know when you're sending a request to an API that is also how you do this so you can do something like res and just say request dot get and in here we're going to put the link that we want to scrape so in this case it's called retomi.com just going to copy that and put it with https and everything now once we have this done well we can just do is to print res dot text so if I print res dot text you're going to see what it prints for me so as you can see it basically prints all the code used to build this website all the HTML code so it doesn't show everything because this is vs code terminal and it just cuts out after a particular one length so as you can see it just gives me this HTML you know code this means I can get data that is present on this page so as you can see that's a very simple way for me to do that now of course I could just print rest and it's going to give me if I run this so let's say I run this right here it's going to give me the response so response 200 simply means that everything has worked successfully so now that we know that we have raised.txt what that does as you saw is that it basically allows us to get all the HTML code present on that website on that web page so now but as you can see that code wasn't like in a readable format or it wasn't in a in a format where I could edit some stuff and get data now for me to do that that's when I use soup so we use this beautiful tube to pass the data so I could say soup is equals to I'm going to use beautiful soup and I'm gonna say res dot content right but I could say raise or text well content is preferable and in here we're going to type HTML dot parser so we want to pass the HTML of that you know request of that response so what we can just instead of printing Reds I could print soup so if I print soup and I run this it still prints me the HTML but if you could see everything well it's going to print it in a more you know good format so in a more good looking formats you and you're going to see the difference so now that we have that I could just play around with the data for a bit and I could do something like super titu and this is just going to return to me the title of the page which is called returning let's run this and see what it returns as you can see it returns tied to code with Tommy now I could just say soup that you know type 2 dot name and this was going to return the name of that particular tag which is title I could also say name zoop.titude.parent dot name and once I run this it's going to give me add and this is because uh the title is under the is under the tag ad so it's basically printing the parent of that title and it's giving me the name I could get rid of this and run this and as you see it gives me everything represented in the head basically in the head tag so that is a simple way of doing that and that is just what we need or we could just also go further so for example in here where we have soup I could just say something like s is equals to ship dot find now let me see for example let's say we just want to get this particular you know I can right click on this and click on inspect now when I click on inspect it's going to open the HTML code of this and then I can see all the you know the tags that it uses so now I know that this is an H2 tag and it has the class post title so what I could just do is to say soup dot find find the content that has an H2 tag and it has a class it has a class of and in here we can see that the class is post Titus just gonna copy that and paste it in there this needs an underscore whenever you are doing that in Python so as you can see we have that now let's say I print s let's see what it's going to give us and I run this you see that it basically gives us H2 post ID which is the first one built and publish a vs code extension so it just gives us the first one right now if I change this to find underscore all and I run this you're gonna see that it gives me all the titles in this particular page so as you can see if you use Django this is one type to build and publish the difference between find and find or is I find Returns the first one it sees so the first one you saw was this but find all returns everything that belongs to that particular class that particular tag and class now that is the difference that's the difference so what I could just do now is you know I could just print something like I could say s dot you know text so I could say s dot text right here and if I run this so it gives us an error and it says that that is not so it says what do you mean by fine so let's say find and run this so you can see that we have built it basically gives us the you know the title as you can see here build and publish a vs code extension with JavaScript if you just the title without the tag which is good which is what we want but as you can see before when we add find all we add an error now the reason why we add an error is because we are trying to do this for a whole list what I just need to do is to say for data in s right then I'm just going to print data your text now if I run this you can now see that it prints every single title without the tags or without the HTML code which is good now the reason why we had an error before was because we were trying to do s dot text so we're trying to do all of this all the old lists dot text which is impossible but if we do every single title you know every single title tag in there dot text then it gives us the text that we are looking for so there's a lot we can do like for example we could still go further and just try to you know get the it's let's say under here we could try to get this a tag this link or we could bring this up here and try to get let's see the author or we could try to get whatever we want to get let's say we're using a P tag I was saying Co spin it so let's try this and let's say we want to say A P tag right that has a class post peanut if you say post spinach we're just going to remove it like this baseball spinet nothing is going to change the only thing that's going to change is the actual data we're getting back so as you can see it says in this post I will show you how to build a vs code extension which is what we basically have here so that is how to get data that you want using python it's called Web scraping and it's very powerful and useful tool whenever you're building not just web applications but programs in general with python so I hope you understood what we did in this tutorial now I'm going to briefly talk about virtual environments a virtual environment is used to manage python packages for different projects using a virtual environment it basically allows you to avoid installing python packages globally in your computer which could break the system tools or it could affect other projects so for example let's say you are building a new project like a social media application it is advisable to create a virtual environment just for the application so that every single package you install in that virtual environment belongs to just that particular application now let me show you what I mean first of all let me show you how to create a virtual environment before we create this virtual environment let me run this command and say pip 3. install Django so if I try to install this package called Django you can see that it tells me that requirements already satisfied which means that I already have Django installed I'm going to clear this I'm going to create a new virtual environment now and to create a virtual environment in part in on a Mac what you just need to do is say Python 3 m V and V and you're going to say the name of your environment I can just say new EnV now this is going to create an environment named the new EMV in whatever folder you're in now to you be able to you know use this environment you have to activate it to activate it you're also going to use this command source and then you're going to say new underscore EnV which is the name of the environment slash bin slash activate now you're gonna see that right here we have this new EMV which shows that we are in this new EMV environment and it has been activated now if I try to run peep free install Django you're now going to see that it's going to go ahead to install Django for us now the reason why is installing Django now is basically because Django has not been installed on this particular environment before we might have Django installed on our computer globally but that doesn't mean that this environment is going to have it installed now this is good so that when we create a new project we're going to create an environment with it so that means that for particular projects all the packages will install everything we use is going to belong to just that project and that environment today is the basic understanding of virtual environments in this tutorial I'm going to show you how to set up a flask project so what I'm going to do is to show you how to install flask on your computer and then create a new flask project and run that project so flask is a web framework so it's a python web framework and this means that using flux you can create or build web applications with the Python programming language so what it does is that it helps you use your python skills to build web applications so without wasting any time let's get straight into this so what I'm going to do is to actually show you how to install python first so to do this I'm on a Mac and you're going to have to open up your terminal so I'm in vs code and I could just open up a new terminal from vs code and I'm going to have to say pip 3 install flask so install flask we say P3 install Flash and this is going to install flask on your computer for me I have installed that's why it says requirement already satisfied if you're on the windows open your command prompt and type pip install flask you don't need to type pip3 just type pip so once we have that you know installed then we are good to go so before we even create like a new project what I always recommend to do is to create an environment a virtual environment for your project so I recommend that every single project you have you know a different virtual environment just so you don't mix up libraries and other stuffs with different projects so to create a virtual environment we're going to run this command we're going to say python 3. once again if you're on a Windows just type python you don't need to type python3 you don't say m v e n v and let's say my underscore EnV so this is creating a virtual environment named my EMV so once I run that that is going to create the virtual environment named my EnV and what we actually want to do is to activate this virtual environment so we're going to save my underscore EnV slash bin slash activate but we need to say source so we're sourcing into this particular folder they source that and as you can see right here I have the brackets that I say in my EMV this means that this virtual environment has been successfully created now once we have our virtual environment created we actually need to install flask again I'm going to tell you why we're installing this again Now by studying this again because we installed flask earlier on our computer in general but for this particular project we want to install flask in this virtual environment let's say it's like a subset or sub environment from our computer so if I install flask and I say P3 install flask you're going to see that it doesn't say requirement already satisfied it actually goes ahead to download and install everything I need this is because we're in a new environment that is separate from our computer so now that we know that we have flask installed the next thing that we just want to do is to create a new flask project now I'm going to close this for a bit and to create a flash project all you just need to do is to First create a file so right here I just created a file named app.py and once we created that file in there we're going to have to say from flask import flask so we're using the flask you know library in our python file so I had to specify you must create a python file so that's why it is apt of Pi so now that we've imported flask what we cannot do is to say app equals flask underscore underscore and then what we're going to do is to just say name right so what we can just do is to say in this name we can change it to like so right here we should have name so in this name we can change this name to like the name of our module which can be like up but we're just going to leave that blank for now and what I'm going to have to do is to say that at app dot root I'm going to explain what this does and we're going to say slash and then we're going to have to say function let's just say hello and then for this function we want to return basic HTTP response we're just going to have like an H2 that says welcome to my web app and we're gonna have to close our h2 tag so it's a basic HTML code so what this is doing is saying that when we go to this app and we go to this route so whenever we have this slash without any root this means the home page so it means that whenever we're going to this home page we want to run this function below it so what is happening in this function we're just returning a basic text that says welcome to my web app but it has its HTML tags so that's why the text is going to be a little big I'm going to show you that in a second now that we have all of this set up the next thing we need to do is to open our terminal again and in our terminal we want to so I'm just gonna open a new terminal in our terminal what we're going to run I just came back to that terminal and what we want to run in here is because we are in that particular environment so I'm going to say flask underscore app is equals to app.pi so specify the file name and the next thing I'm going to do is to say flask underscore e and V now we want to tell flags that we are still in development so um we specify that as development with the T so we're telling flowers that are still in development so we can use the debugger to catch errors and now what we can just do is to say flask right so as you can see once we run this it says this is a development server it's not in production so now it tells us the application is running on this particular URL now once I copy this URL and come into my browser and paste it in there you can see that it just gives us this text that says welcome to my web app so if I make that large a little bit you can see it perfectly there so that has successfully run that is how you can install flask and create a new project and run it on your computer in this tutorial I'm going to show you how to set up a Django project so I'm going to show you how to install Django create a new project and then run that project so without wasting any time let's get straight into it so the first thing we want to do is to actually make sure that Django is installed on our computer but before we do that since we are creating a new project let's go ahead and create a new virtual environment for our project so what I'm going to do is to open a new terminal and in this terminal I want to create a virtual environment so for me to create a virtual environment I need to run this command I'm going to say python3 m v e n v and I'm going to say the virtual environment right here let me just say Django EMV now this is going to create a virtual environment in Django EnV and it's going to create that in a second what I'm not going to do is to activate this particular environment so I'm going to say source Django underscore EnV slash bin slash activate so as you can see Django EnV is currently activated now I'm going to have to make sure that Django is installed in this particular environment so I'm going to say peep 3 install Django it's that easy to install Django so that is 8.1 MB and it should take a few seconds a couple seconds to install so as you can see boom everything has been stored successfully now that we know that everything is installed just clear that up what we can now do is to create a new Django project in this particular folder so to create a new Jungle project we're going to have to run Django iPhone admin starts project and we can name the project something like new project so what we can do is to say LS if we say LS we can see that we have a new folder that has been created named new project now we want to go into that folder I'm going to say CD new project if I say LS again now you can see that we're in a new folder that has two that's a file named manage.py and a folder named new project now whenever we create a new Django project this is how easy it is to create it what I'm going to do now is to open up this particular project in vs code right here so I'm going to say command o and I'm going to go into this and say new project and I just want to open it up right here so this is how I created let me just make the little bit smaller and this area is a trust so I can cancel this and right here this is everything we have when we create a new Jungle project so these are the files that comes with it now there's a junk you can create the jungle project you can create a jungle app but we're not going to go into those details for now I'm just going to show you how to run this project that you just created so I'm going to open up a terminal let me just create a new one and let me press command B to close that up and since the terminal was removed let me create let's we have to activate that particular environment again we're going to say source Django underscore EnV slash bin flash activate so it says there is no file as this okay so what just happened is because we basically opened a new directory right that is in this new project directory so if I come into file and open now it open this directory called new project and it's trying to run that particular environment but it's not in this directory so what we need to do is to go to that directory that it is in if I say LS you can see there is no in that directory so because this directory is not there what we can just do is to open up terminal and when we open up terminal this is in the default directory and we can just run that so we can say source and we can say Django underscore EnV slash pin slash activate now you can see that this is activated right here now everything is working but let's actually run the Django project so to run you are going to say Python 3 manage dot Pi run server that's how easy it is if you are on a let's say you are on a Windows you have to run python so as you can see it gives us it gave us an error that it can open money.pi that is because we are not in the folder where this project is so note that you want to create your virtual environment in the same folder as your project so you don't have this directory error so what we can just do is to CD into new project and we press LS now we can see that we have manage.pi if I try to run that command again python3 manage.pi run server everything should be working successfully so it says that the development server has been started at this particular port or this URL if I copy this now and I go into my browser and I paste this you can see that it's just going to give me the default Django page saying that my install Works successfully congratulations and you know it's just saying that this project is now running of course if you want to learn more about jungle and go in depth I would advise you to take a course on Django and I have a ton on my channel so to learn more about how to change this page to your own HTML page and build your own web application but this is just an intro to Jungle how to install it set it up and then run the project now in this tutorial I'm going to be showing you how to build a very basic calculator in Django so it's going to be a basic calculator app where you can input two different numbers and input the operation you want to carry out on those numbers you can improve whether you want to add the numbers subtract divide or multiply so we're going to do that right now the first thing we want to do is to open up the project we created so we created this new project right here and what I'm just going to do is to open it up so to create a new Jungle project you just need to run the jungle command and I already done that I already created this project so what I'm just going to do is to open up this project that I created in my vs code so I'm going to come into vs code and I'm going to go into files and click on open folder so in open folder I'm just going to go to where it is so this is where it is and if you open that up for me so I'm just going to press command B to bring that open so as you can see the project has been opened everything is working so the first thing that we want to do is to you know just first of all run this and just make sure everything is working so I'm going to open up a new terminal and I'm going to say python 3. manage dot Pi run server now this is going to open it's going to run this application on this particular Port so I'm just going to come into our browser and paste that in there so good as you can see Django is successfully working the installation has worked now what I'm just gonna do I'm going to walk you through all the basics of Django by building this app so I'm going to close this terminal right here I'm not deleting the terminal I'm just minimizing it now what I'm going to do is to First create a new python a new Jungle application so whenever I create a Django project it is advisable to create an application that you can use in that project so I'm going to explain the difference between a jungle project and a jungle application so the jungle project is like let's say let's think about jungle application as a subset of a particular jungle project so for example if we have facebook.com which is like a social network project so let's say Facebook can be the project and then let's say the messages section of Facebook can be one app the you know the marketplace section of Facebook can be another app so different sections of that particular project can be dealt with by having different apps so when you have like a very big project normally you're going to have multiple apps but for a very basic project like what we're going to build now we just need one app so I'm going to show you how to create an app under this jungle project so I'm just going to bring back the terminal I'm gonna bring that back I'm just going to just come here and see a new terminal so this is the terminal where we are running our project but we're just going to run our commands here so to create an app I'm going to say Django admin start app and I can just say my app so what this does is Django admin startup creates an app and then my app should be the name of the app you want to create so if this is for messaging just say messages if this is for Marketplace just a Marketplace whatever app that is you should do it here and if you come back into the directory of the particular project you can see that my app has been created so there's a folder named my app that has been created now this is good and this is what we want so now I'm going to show you how we can build this basic project that I'm talking about so the first thing that we want to do is to come into the project and in URLs we're going to come back here to configure something but before we even come here the app that we created um let me just close this real quick in the app we want to create a new file named urls.pi so I'm just going to click on the app I see urls.pi so this urls.pi file is where all the URLs in our project is going to go or where we're going to you know configure all the URLs now what I mean by URLs is for example my website code with tommy.com so this is the base URL of my website let's say I have something like slash newsletter slash newsletter is this is one URL well let's say I have another URL that says login this is another URL so all of these URLs this all of them are going to be configured in these urls.py file so first to start configuring anything I'm going to show you what you need to do first of all you need to say from django.urls import path so when we say from django.urls import path we're going to create a new python list so I'm just gonna get rid of all of this so what I just did was that I'm using the path module from Django dot URLs that jangos gives us and what I'm just going to do is to create a new list and name it URL patterns so this list is going to take a list of all the URLs that's going to be in our web application so I'm going to say path we use pass to create a new URL and I'm going to have these codes and if I leave this code blank this specifies the base URL so for example I'm going to use my site again code retomi.com if I leave it blank it specifies code with tommy.com if I want to have a URL that says login I'm just going to say login so this specifies code you told me.com login so I'm going to leave it blank to specify the home URL and I'm going to say go to views.com I'm gonna give it a name of ohm so what I just did was that I'm saying that whenever a user tries to visit the home URL go into a views file right and I'm going to explain this views file in a bit and run the ohm function and they were just giving this a name of ohm so that's the name of this particular URL now let me explain what this views file is if you come back into this app you're going to see that you have a file named views.pi so this views.pi is basically where all the function happens all the you know back end of our website happens so for example whenever a user comes to the home URL it's going to go into the views dot Pi file and it's going to look for a function named om now whatever we do in that function is what is going to be rendered whenever a user goes to the home URL so we have to create that function named om and it's going to take a request and for now let's just pass we're going to come back to this so what this is doing is that is whenever he's not coming to the home page it's going to go into views and look for the function named om whatever has been done in ohm is what's going to be rendered so we need to fix some stuff the first thing is that it's not saying these views so I need to do from dot import views so what this is saying is that from the current directory import the views file so it's important views now we can use anything from that views file but now if we come into views you can see that we are we're not only rendering anything we're just passing so what I'm going to do is to return an HTTP response so I'm just gonna say HTTP response and right I'm just going to say return HTTP response and I can just give a simple response and say I so everything should work except one thing so if I come back in my project and I hit refresh you're gonna see that it still doesn't show us this eye that we input here the reason is because we were configuring everything for our app but we haven't told our project which is the main application where to you know what to do when user coming to the home URL we just told that to our app so what I'm going to do is that I'm going to come into my project URLs file and I'm going to say that whenever a user goes to the home URL go into this app and look for the home URL whatever is being done here is what you should do now for me to do that I need to import something called include so include is going to allow me to do that and I'm going to say path I'm going to leave that blank which specifies the home URL and then I'm going to say include so when I say include I'm going to see my app dot URLs now what this is doing is that it's saying that whenever a user goes into the home URL go into my app.urls and then look for this same URL pattern that is blank which is this and include that so whoever has been done here is what it's going to do right here also I'm going to save that and let's see if we have any change so he says sight can be reached now let's see let's bring back our terminal right here so I'm just gonna come here and create a new terminal I'll come back to that terminal so it says my app.urls okay okay so as you can see what this is saying is that it doesn't see my app.urls and the reason why it doesn't see my app does URLs is because it says it does not appear to have any patterns in it but okay so as you can see it says it doesn't appear to have any patterns in it the reason why is because right here where we are specifying URL patterns there was a typographical error so it is meant to have buttons erns so once we have that as you can see we don't have any error again so I'm going to come back in here and hit refresh boom as you can see now we have I that is working successfully so if I come back to views I'm just going to close this a little bit right here if I come back to views in this HTTP response you can just have a basic HTML tag or HTML code here and that is going to work successfully now instead of having just this basic HTTP response I'm going to show you how to use a template file for example an HTML file so an HTML file is just a file that we can allow us to actually design our web page the way we want it so for me to include this file I'm going to have to use or configure something name templates I'm going to walk you through all these steps right now so what we're going to do at the end is that instead of returning an HTTP response we're just going to return that HTML file so I'm going to collapse all of this and in the root directory so whenever I say root directory of my jungle project it means the directory that contains the manager.py file so now in the root directory I want to create a new folder and I want to name it template so in this template folder I'm just going to create a new HTML file I'm just going to say om.html now what I want to do I'm just going to have something like H2 welcome so what I want to do is that whenever a user comes into the home page I want to render this HTML you know file instead of rendering an HTTP response for me to do this I'm going to now use the settings so I'm going to come into our project and I'm going to look for a file name settings.pi and what I'm going to do is to go all the way to where I see templates and in templates I'm going to have to configure something in theirs so I'm gonna say base de slash template so what this is doing is that it's saying whenever we try to get let's remove this whenever we try to render let's say or we try to use any HTML file it should go into this template folder now let me explain that logically so what this is saying is that we want to tell Django that any template file we want to get or use is stored in this folder named templates for me to do that I have to come into the settings.py file in my project folder I'm going to scroll down to this templates list and in there I'm going to look for where I have theirs and I'm going to specify that in here so what this is saying is that in the base directory which is same thing as a root directory which was what I explained earlier go into the template folder to look for any template file so now that that is done I can just easily come into views and instead of returning an HTTP response I could say return render and I could just easily render I'm gonna say request this is how we render an HTML file om.html now let's save it and then let me call me and hit refresh boom you can now see that it says welcome so this is what we want and this is working successfully if I come in here now and let's say I have another HQ and I say a if I save this file that is what is going to be updated in here now this is super sick this is what we want to work now I'm going to show you how to create a very basic calculator so I'm just going to have a simple form that takes you know two different values and then let's say it's going to add those values and give you the response of those values so what we're going to do is that I'm going to say I'm going to have to create another URL so let me show you how to create a new URL so this URL is where the form is going to be but when we click on submit the the page that you know that's going to show us the answer or the result of that addition is going to be have to be a new URL so I have to create that URL right here just going to say comma and let's just say result doesn't want to name this URL on the name result so I'm going to say go interviews or results and give it a name or result so now in views I'm going to have to create a new function named result take a request and for now let's pass and I can quit these settings so what I want to do now is I want to have a basic HTML form in here so I'm going to say form and in this form what I'm just going to do is to say input type number and I can just say play solder input number input number one I'm going to do the same thing input type number you're gonna have a placeholder and say input number two and then I'm going to have a submit button so I'm just gonna say button type submit so if I save this and I come in here so we don't it gives us an error and this is because it says views has no attribute results so let's save the views file so that can update that is working and now if I hit refresh good so we have this input number one input number two but the submit button doesn't show nothing actually what we need to do let's change this button to input instead of submit I mean I mean instead of button now if I hit refresh that is working what I want to do now is I want to you know send all these values to this particular URL named result so if you know St HTML you know that we need to specify what is called action and then in Django you're just going to specify the URL name of that particular URL so we're sending it to the results URL so now if I come back in here and hit refresh let's say I have two I have three if I hit submit it goes to this particular URL which is good so this gives us a few errors now we're going to take care of this in a bit what we want to do is to come into views now and we want to get the values that has been sent from this page into this result URL so to get those values I'm going to say request dot get dot get and we need to specify something in here what we need to specify is the name of each of this input now this inputs I need to have a name which can stand like as an identification for it so if I say name I say number one India can also say name and say number two now the reason why we need this name is so that we can get the value that a user inputs in each of this particular input so for example right here when I try to say request.get.get what I'm doing is saying get the value of a form that has been submitted to this particular URL but we don't know what value we want to get but if we know the name of that particular input then we can easily just say get the name get the value of the input with this name so this stores the value now and we can just say this is number one and we can do the same thing to say number two equals request dot get dot get and we can just easily say number two so that is what we just need to do and then we can just say answer equals to number one plus number two and now we can return render requests I want to say something that results dot HTML right but we don't have any page name result.html so we need to create that let's just copy the name to make it faster gonna come into templates create new file let's paste that name in now in here we have a file that will be loaded whenever a user basically whenever a user tries to load this page now let's run what we have and let's see I'm gonna go back it refresh so let's say we have three we have six and each submit so as you can see it now takes us to this results page and if you look well into the URL you can see that we have no number one equals three number two equals six so that's the values that's been inserted in each of these and it also send those values to this particular page that is what we want now for us to get these values that is exactly what we did here we sell request.get.get number one so when we say get number one it's going to get the value which is three when we say get number two which is what we did here it's going to get the value which is six and since we have those values we store them in a variable and now we're just gonna add those two values together right but the only thing now is that how can we show this value that we've added together in our HTML in this page right here now what I'm going to do is I'm going to have to send this data from my function here into my template View to do this I'm going to have a comma in here and I'm going to say answer so I'm going to have a simple dictionary and to give you a value of answer so what I'm doing is I'm sending a dictionary to this result.html page I'm giving it a key of answer and I'm giving it a value of answer which is basically this addition that we performed right so this is what we want what I can now do is to save this if I come into result.html since we sent this dictionary in here that means we can access this value in the result.html but how do I access it I'm going to come in here and to access it I'm just going to have two curly braces and in that Curly braces I'm going to write the name of that particular key so this is what I'm writing and it's going to print the answer of that let me save this and let's try it out I'm gonna eat refresh as you can see it prints 36. so first of all a lot of errors I'm going to explain and what I just want to do is to first put this into like an H1 tag just so we can see it clearly hit a paste that good so now if I come back here again you can see it says 36. so let me explain what just happened so what I did was that I sent this answer into this result.html using a dictionary so now once I say print answer which is basically what I'm doing here for me to say print answer in my template is I need to use these curly braces so it's going to come in here and look for Answer and the value of answer is this answer variable and the value of that answer variable is the addition of both of these variables so that is why we get the addition of three and six but we must have spotted an error and the error is that it is just combining the two numbers together it's not actually performing an arithmetic addition operation on it so we should have 9 as the answer not 36. now let's fix that the reason why is because when we were adding we didn't convert these two integers what we can do is to either convert this to integers here or convert it to integers right here so python initially sees this as a normal string because we didn't tell it is an integer we didn't tell you none of that so what I can do is to just say int and everything is going to go into the int wrapper gonna do the same for this integer everything is going to go into that integer wrapper so now we are performing this addition on non1 and num2 as you can see it now sees it as an integer which is what you see right here if I remove that let's say I do this now if I say no to you can see that the data type is any it's not integer so I'm gonna bring that back and now we have integer now let's come back in here and test it so let's say I have 55 and 44. if I hit submit boom you now see that I have 99 as the value which is very good this is what we want so as you can see this is basically working now to this point you can you know make this better you can add whatever you want let's say we want to perform subtraction instead I can just change this to minus and if I come back in here if I just refresh this page automatically it performs a subtraction operation on these values which is 55 and 44. I can just go back to you know to retest it so I can do seven and let's say I do nine seven minus nine is going to give us negative 2 which is what we have right there you can do the same thing for multiplication we can basically do anything that python supports let's save that file the community and it refresh is doing 7 times 9 which is 63 if I do the same thing for division save that file but each refresh it gives us that results in decimal so this is very good you could take this further by let's say adding another form in this ohm.html let's say like a a drop down so in here we could just have another form and say what operation do you want to carry do you want to do do you want to add you want to subtract divide or multiply then depending on whatever the users say if the user picks addition subtraction division notification then you can just come in here and do something like if if let's say operation is equals to add then we want to do answer equals to know one plus node two evaporation equals to minus we want to do answer equals no one minus node two if you get the concept of what I'm trying to say so that is the basic way you know of getting your head around with Django that was the main purpose of this particular tutorial is just to introduce it to you this python web framework for building web applications called Django now I hope you are a bit comfortable or at least you've been introduced to how Django works and hopefully you can build this project now on your own using Django and that's gonna be the end of this video and thank you guys for watching to the end I hope you found this course useful or this tutorial helpful and if you did please don't forget to smash the like button and subscribe and I'll see you in the next one