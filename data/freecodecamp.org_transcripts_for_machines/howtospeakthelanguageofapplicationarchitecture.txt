right look that way I appreciate today's help me out here at night so topic tonight it's going to be a discussion around how to speak the language of application we're going to touch upon quite a few things here tonight so a little bit of an intro we'll talk about the software architect well that thing seems to have different things morphing with it we'll talk about continuous design and application architecture design principles we'll go over some things it waited to generic models and we'll talk more about modeling your software a little bit about design patterns and something called an architecture architecture framework centered around it so further ado let's go ahead and jump into this so let's mention my name's Brad Biermann I work for a startup downtown it's called Kapow you get both with corporate events management the advantages that stack sequin the funny other fun stuff to know to make it work technology night brick is he a dragon technology I've been there for two years absolutely what's that called professor string website I have for about 10 years or so it's dedicated to guitar strings and so I also had wined them and have a company up in Wisconsin that helps me do it and so we've long strings for celebrities and Carrie Underwood's guitarist some strings for prints user oh yeah well the fun stuff that goes on with it so professor string props check that out so that's enough company that and so little bit about the pal again we're in the corporate event space we've been thousands to murrs we've done five thousand events different experiences well we kind of bring to the table is instead of going to just the hotel for a large sales event or just doing the regular steak house come on for some different experiences as ice on the rise so one of the things we've got is do you have a corporate event that you want to do it's a little different now for something that was extra archery pizza to us we even have adults a tricycle we've partnered up with companies such as Nike which you can go to a Nike store and have a corporate event hosted it and Nike absolutely loves it because you can walk in to just a shoe store be wine cheese food presentation everything is set up and so what's that really great we've really established quite a platform before that but the big news for us really came about it a month ago and this was the head of it right here so we actually just got bought cement which is the largest company in this space they're about 1.8 billion dollars in size and they came in and bought us and we were about 50 employees and so a very exciting time about six years ago or so many we're actually have to look at for additional funding and see what it says man you guys got a great thing going you got the number two office space and Chicago that's actually a picture of our office everything yeah we like to capture what an event it looks like so you better lose bargaining that everything else so anyway let's get into this stuff okay so Software Architect well this is an interesting role because it's it's changed a little bit over the years and it's it's often broad and what it encompasses have four buckets it really captures and so we've got things that focus on applications so really the designs and structure of applications this is where you'll see something to stop our architect app architect or framework check all right and so and then we've got folks that are sales and support one time I worked as vice president for Oracle and I had close to 30 what they call solution architects according to me we would go out and feel the architects and helped sell who I shouldn't say so assist customers with the implementation of the other right I think so as a solution architect sometimes also knows I feel architects so very popular in the licensed software area and of course the system's skilled an infrastructure design this is the big one right now cloud architect okay so we've made a lot of changes from infrastructure architected System Architect of course operations let's go than the operations a Enterprise Architect integration architect so those are just common some of the roles I know everybody's going to seen those over the years and that but they they take different shapes and forms that we're going to focus on these two and the discipline that's around so what are the essential skills to really become a Software Architect so to speak it's so familiar with architectural modeling language is a key piece so I'm creating diagrams visual feature representations got the old it do that I never get with a framework like toga Sackman ITIL we'll get into those a little bit we'll also talk a little bit about his comfort amount of code base it might not necessarily be a developer as an architect but you could be around the coalface it varies depending what you do but you've definitely got some experience is that walking into that so your key thing here will be to present a vision of how something is built in an in a holistic way and also derive a costeffectiveness designs in options mates for the symptoms this is kind of interesting talk here because growing and mentoring architects it's not really happening at the level today but that we see probably some years ago particularly as things were more waterfall work their design period and that they were going on there so that rauru became more prominent today's an architect well they don't see a lot of that happening but hey how do you grow that rope or something there because now we're just doing our work of little snippets low releases this thing called agile came along so well it took a little bit of a different turn there on how it was growth and the other thing too is you know it's kind of hard to measure design as an investment is I got a friend of mine that it sells architectural rules he said you know it's really not much different than selling vitamins okay so it's something we know we should do we know we should put design and things there are no rush to be agile we'll get right in another cup and do this small oneweek spread there's two weeks back or something we really haven't put down anything diagrammatically we haven't put anything visually you maybe just did some a vision in code starts coming out week after week after week after week year after year after year now you've got its massive codebase perhaps pasta there's no design that can that's rounded at all everything so that's a sticky wicket and why is it that way what some folks think design slows develop okay I got to take time after this I'm the to slow me down or other marketeer in my favor the codes are documentation it just says just go really you know what it does okay there's there's what run so it really doesn't describe things we'll get into that okay in agile development yeah the engine envisioning step really not being done correctly the way the least it was intended the original manifesto the design discipline guidelines principle number eleven very loosely defined by design that's the way we wanted we didn't want to dictate how people should design stuff but it also has kind of manifested itself into that step for me somewhat skipped or a bit just a little bit of a discussion between you and I it's how we're gonna do it okay let's go and boom that that's how it starts so code delivery in Geneva prioritized over design and so what we never there's a complete abandonment more architectural skills that we really had a waterfall and then so oftentimes I find a lot of developers that I'm just basic you about principles around that how to diagram things will get again more into this this is an interesting thing here so I almost took this for my sign of braces it's an industry sacrilege to say anything bad about the agile manifesto but it has some okay going from a developer to an application architect so as I've worked with developers you know I have a group that reports to me and I have folks that come in here and I'd like to be an architect I've been in development for a long time I'd like to go more into that raw so well there's a bit of a mind shift that goes on with this so as a developer make sure your work is more instant gratification I write something they maybe runs and renders and I get see the results right there it's them it's it clear application success it is measurable okay your product is a compass as a developer the code is viewable you can actually see recovered as a developer right it's low in abstraction there it is in front look different as an architect so the nature the markets mark we did wave gratification the success of architecture is Hargett measure your product as a vision the product is a vision of waiting something that's being put together is it is something that is somewhat invisible to us but it's omnipresent even in this room just from construction we've got architecture here how does it put together from our architect perspective and that it's something that's not really physical we see the end product of the building but what was down on the boot prevalence of thinking that's a little bit of a vision that God is here to what this architecture the being so bit about higher higher abstraction in this room okay so where do you start it's all right detective we'll start by thinking about being design room okay design girls where do you want to go except to yeah we design driven start there ease into it don't rush this is a discipline this is a discipline of being an architect think about how something business consumer words and the strategy behind this is the kind of thinking loads of strategy take a lot about how we're going to build something resists the area's just to draw something a rush into patterns I've seen folks getting this is let me just look feel like I got to draw something I'm the architect I gotta get up at the border throw me a dry erase marker right now I gotta do something thank your time man it's a vision that's the product and this takes a little while to evolve that so again little bit of discipline going from I'm writing code right now boom Airlines type of thing look bit of a delay gratification that goes on there so very strategic in nature and it involves articulation it's easy to overwhelm an audience and it's the cartel okay no GMO criticism no worry no more detail think big think big let's start small little pieces kind of look at the Amana fester those violent agile suck get the big picture you get the holistic view but let's start in small pieces here and then start to second the composition so coming first of strategy our comb tells us what is being done the code is really set of instructions that's what it is okay architecture tells us why something is being done and how it is being done the architecture is a vision of strategy again so for folks I'd like to say hey cog that's our documentation that's our base well it really doesn't address why are we doing this or how is this to be done anything so against just the code is and it said instructions for the process yes so again thinking of those higher levels here so one of the things that we started focusing on here this says I come up worried about something called continuous design it'll go a little bit into this those of you they were around during the dotcom boom you think about around like 1999 or so there was something that came around that was called extreme program okay very popular at the time and this was starting to come right after agile okay so it had this thing in it called continuous design and this is the practice of creating and modifying the design the system as its develop rather than reporting a specific it to specify the system completely before it starts that's the whole genesis of we're really agile there was an interview with our Father so where did you guys really start with this when you worked in the ski lodge 17 million it says well we were having this year's ayah about extreme program we just need to really get this into some type of quantification here we're two years in the extreme programming and as really were skunk angel was the extreme programming part in heaven this continuous design okay continuous design was popularized by extreme programming continuous design also uses Testament moment which we use a lot today the refactoring processes okay so that's part of it where that piece came from back in 99 when this guy started a manifesto came around in 2001 yes so we've seen where this connect today that's so that's kind of Genesis before this comes from today we see different companies taking on say oh we're 100% agile some companies are saying oh we're on the move from waterfall in the agile okay so they're right now it might be scrum for our water scrub who knows whatever you call it it's a mix of the two some folks have come from waterfall they tried to go 100 percent and Rome may be good as far as and Linda said you know what this thing's got some gaps I I'd like to hydrate this thing and that's what we're starting to see is Angela's now but we're kind of approaching 20 years on this type of thing so it's it's been with us for a while now so people are really starting to embrace a lot of that hybrid let me frame it so it's a mix really of both we still love the things that we saw in designs in waterfall we still love the things that were analysis in there but it doesn't work to spend the next couple months working on that we still want to keep this practice but yet we still like our agility the ability of coding small releases quick deployments and things like that so how do you get this to work together with each other this is how it kind of works okay so as you've seen this this is actually our lifecycle eight Capel when I first came to capella is a oneweek sprint okay that's kind of tough and as I came in seventy percent of the points would roll over the following week sound for mayor yeah we've created a new waterfall so it was a problem and as I brought in younger engineers people have less experience onboarding an absolute nightmare because there was no documentation around the code here's a code base I've been going out for four years not one single document I had two developers lead developers it's all up here oh oh okay just go talk to person X person Y well person X a person why I'm managing him I know this was about relief so there goes stuff out the door we've got to do something to get on top of this right here and so continuous design let's bar that chapter out of extreme programming I put it right here stretching out to express so that allows us to start thinking about this it's called design just enough to get through the spring in fact there's a popular book out by Simon Brown we'll talk about one of his models here a little bit it's a book called just enough and that's what it's kind of dressing just enough to zone to get through the sprint but now you've got a running document we've now got a running already so what we do in this is will create a crushed in four plus one you might do a little bit of you'll know Marlon you might do a c4 well a couple of things it continuously lives with the code okay we could just write the code and that do this but what I found is this we start doing these we're going to start to build in getting some money on our morning man did that become a lot easier because I just put some diagrams rephrase see here's how this process for iterative sequence diagram here's a crutch tomorrow we'll go into that a little bit that's what that B's huge absolutely huge help as a big success I think for a lot of junior programmers what a challenge is we've got today as an industry so you go out to have look the job boards 90 percent we're usually once and they it's a senior developer what I'm gonna do have a lot to join during work these code best code bases have become so complex and things and I'm not everybody has documentation right you've now backed yourself to that kind of corner I'm going this is so complicated I've got big ball I really get into so we gotta find some way to nurture these folks and so this is kind of a cycle we spend just like maybe a day or two putnis and we'll go through we'll do our sprint planning to do our grooming around those things do the development and you know if you guys have seen this if you've been in the agile ok the typical rest of the cycle events so that's how we're kind of working in the two weeks making sure that that continuous design piece is in there that's really the focus of what we're talking about as I started working with the team I found a lot of folks that are I'm gonna say from that we're not around during the.com that we're not around kind of it early days paydays of waterfall things like you don't know those disciplines really aren't taught anymore and so we've kind of lost the team us design principles so incremental design design just enough again build this brand but build upon the cave applications holistic view that's what you end up with is you keep going down your sprints and building up your design dock with it pretty soon over time nonid have a built up codebase you've also got the design built up with it too and so one of the key successes for us this is I push this forward in December we were getting audited I didn't know it was really an honor but it's called diligence phase when we're out there trying to get funding for free Kapow they came in and wanted to see hey how did you put this together and what they were fully expecting was to see no documentation it's a reject button as what they've done with ninetyeight percent of folks out looking for funding when they came inertia guess what I had them ready for all these design dives have to him I just handed over right there but we've passed right through then they said we want to talk pretty soon a couple weeks later we want to buy and that's a huge difference because that allowed an investor to come in and see oh yeah I get it there's some discipline around this thing and I visually see what's going on with it so build confidence in your funding cycle build the change instead of going to last that's that's key part of obvious of being agile but not to say we're going to go out there and spend all this time on design but again just an incremental piece and it's always going to be changing so nobody has to stay up on these diagrams either just get the latest one we've created it's always continuously going ok model to analyze and reduce risk use design so I've identified key engineering decisions it's helps with cost obviously maintenance whatever else recognizes the way gratification that's really in the design ok and use these models and visualizations as a communication and collaboration tool that's key for your continuous design principles ok I first started to have some engineering people come up and say all right well I guess we'll get the board and draw a picture of what this kind of looks like for any like wait a minute we're gonna talk picture we're gonna do Chuck draw a diagram just even the lexicon has been lost a picture this is the picture it's worth a thousand words this is a diagram diagrams are right to the point and often should be a few words boom succinct focused on one thing right there we don't want it to be interpret there's got to be a specific segment and get to a point of what it is that's really kind one of the things we want to look at here and so Simon Brown I've said this guy's name a couple of times this is really interesting far too many teams a lot of their code bases to grow without having an insight into the structure of the code as well as is often the proverbial big ball of my code base it's tangled hard to understand hard to work with harder to change this is the key phrase right here visualizing the structure of your code is the first step towards improving the editor if you can't visualize it where you go stuff where you gonna start yeah it's tough and so one of the things Simon Brown does is he goes out consults as he adds he goes out to these big fortune 500 companies and takes the lead engineer or lead architect please draw me what your codebase is running out these are actual drawings it gets one of these is actually from I'm not gonna call you something from Baxter I said there's a Baxter for really kinda heads up a lot of development this I don't think it's what is his there's actually somebody from a couple it's just interests I'm not going to say these folks are but look at this this is somebody trying to communicate to maybe somebody like you what their system is I mean these are some real masterpieces like what is this this one here is actually my favorite it looks like it's structured what the hell is a functional view I've never heard of that as an architect there's no formalized thing call the function view there's nothing functional about it there's no communication is just some boxes or whatever this one was actually drawn by the company's CTO okay and so okay there it is so what's going on here again our ability to visually communicate our code structure we kind of lost some of that right there and so I'm gonna show you a few tools few miles that you can use to start into this length okay so I request we come at it there's possibilities you can visually communicate our code right so let's talk about some generic models what can I dig right into just make this a little bit easier so there's been an evolution of these models languages and notations so if you've been an architect for four years or been around it you'll notice you'll recognize some of these things going back and yeah this has been talked about since the 60s even when the invention of things such as small talk beautiful little objectoriented language object during a design came around Sharmila this was also one of the first modeling techniques that came along that was based on how Victorian design for those of you familiar with Grady boots you know who that is but this is one of the things we would serve first started seeing the idea of the use cases come around OMT one which is object modeling technique one and two that was introduced by Jim rumba out of MIT he was also a friend of greedy pooches and so there was some competition between these two about how to model something and then somebody else jumps in the game creates boozy objectoriented software engineering in 1992 and then this company called rational Shilla they create a product called rational rules okay thanks people have been familiar with that yeah okay awesome so it stands for it stands for pretty much software package that's rational object software engineering and what they've done here is these guys got together along with another guy called I've already got cups an eye bar is often known as the father of the use case is where we actually first saw a use case come up he is actually someone this time frame to these guys get together and create something column you'll know okay and then we saw the release of you about 1.0 and then as we started going to the data I'm sorry calm movement you started to see a lot of people using this language it stands for unified modeling language it really takes the summation of these roles it up right here in this standard it's really ingenious it really has a lot of great intention behind it the toilet you use is rows you create your diagrams in this you guys are very close you know how it works but some things started to change as time went on because this whole thing here on this business gets complicated there's a lot of diagrams and today there's 17 diagrams in UML okay that's a lot whether that was going on with it it's it's kind of crazy but it worked at the time because we were still very much waterfall right it's so worked in the design period so then we started seeing extreme programming come about so there was this first notion of just doing incremental pieces of stuff and making the design continuous thing with it and then probably home those guys got together and created the manifesto and then we started seeing serviceoriented architecture and then in 2003 IBM close advisor a show and then somehow I know the party kind of came to an end at that point is rub on those guys we're fabulously wealthy after that point says man that was great wait maybe you just changed the damn industry right there and now some my zit and now just kinda puts it off to the side because that was a pet right there so we started that was really kind of the last hurrah that we saw as far as the marketing publications daily stories about modeling languages it's kind of a shame because we've kind of lost it since that time here different things have happened but you'll now continue to evolve as a standard but the two of rows kind of disappeared there's an expensive thing to I remember I was at March first we paid a quarter million dollars in our license for it absolutely insane and they were making money over handoverfist but we had some beautiful design walls covered with it we invested a lot of money in it and after two months of no code and beautiful design we'd had it that's it okay so it's time to look at something else but what it got there would have got for us is if you take a look at this right here the arrival of modern frameworks this is when we started seeing something like rails spring Django symphony where are those those are frameworks of popular programming languages you know PHP Ruby Java all that a lot of the design behind that came through a lot of the design pieces here in this language it's a builder and now we've got something we can let to quickly build with we don't have to put together all these complicated components in it so now that enable us to go fast really fast in our architecture in our work and so we kind of left that behind and just boom now we're now we're cutting out where we're going today we're going to talk a little bit about seaport modeling business process notation and what's going on with the latest but now we've also got the arrival of micro services which is kind of a new design paradigm so we'll kind of talk a little bit more about that okay so right now we're going to focus on question 4 +1 and the sea floor model anybody familiar with what those are aside from breeding the syllabus on this talk ok it's always interesting when I bring this up this crutch did think because when I brought it up to my team is this all blank faces and I had also asked him to get up to the board and draw something and it wasn't much different what you saw earlier so this is a useful thing here because they've really bricen we've spent things up we're gonna do more points in our sprints because this by the way so what is this so this was a model developed by Philip Gretchen weren't irrational for a while he was kinda with a sales people out there there was so many damn diagrams and you know he just wanted to distill this down to just a few so he could go out there and sell rose but what he ended up doing here is creating a really nice abbreviated model that a lot of people latched onto and that's why they're called the four plus one model it's a rather generic the other thing so it's it's several things this scenario considers to be a new space or a story and around it I'm going to go ahead and create a logical view process view both of you in a physical view okay so I'm going to find out structurally go it's my code what's the process to behavior and as user uses it the implementation view which is awesome how I view it from one component wait wait interacts with third parties and stuff and then this is my infrastructure field but what's this stuff running okay cloud wise server wise stuff like that so I good nice 360 around what's this use case or something and it's great it has been really good for describing a lot of different things so the scenarios really helping you capture the requirements for all the stakeholders think of this your stories it makes everything is around the same and it's really key for putting together all these views because the logical view it's designed to really address it the end users are concerned about what's being used in the system if you're familiar with UML in that logical view we call that a class diagram in the class diagram you just list out the classes of your system of what you're using so we've captured what the class is up process view for people are designing a whole system those of you familiar with UML it's called sequence diagram I'll walk everybody through your monitor in just a little bit just to see several diagram okay so long know what this says but just for this review for me this map is over to you about development view and say you know component diagram okay this shows how the modules are organized reusability physical view again this could be our network diagram and everything so what we do is we take a crunched in every time we start our spread we'll do a crunch and say okay for these group of stories here what do we need them out of this okay we'll start looking at the process for you so some have looked at we're starting out sequence diagram for that okay after we've already got with the use cases then somebody might go back and draw the developer view oh here's the api's i need to kind of connect with this thing over here you know brain trade you get my payment all this other stuff so what kind of straight to show that then we'll start to extracting and what classes are we using in our current code base and start putting together a class diagram or something new around that and what we do that maybe from a conceptual diagram first just give a holistic view of what it is and then finally my devops guy is always standing it says we're gonna run this on the ec2 instance or it's such a sensitive yes cloud right there so we just got a rain gauge set and we got a visually mapped right there and now people are gonna go back to get this reference and they had this vision of what this looks ok one other model i want to point out to the Seaforth it's not explosive c4 developed by Simon Brown this was he started using a little bit around 2006 but really published in 2011 his inspiration was crunched in and youma this guy was huge in the Oh mom I remember it back in the day he really was in the UML and stuff and then as we saw the evolution go on with it he felt hey there needs to be something a little different here too so the sea floor model it's generic just like the crush tomorrow it's visual non notational when I say non notational I'm speaking in terms of like a language like you know Melos notational bpmn is notational we don't have to learn notations it's just a model okay and c4 consists of a high got a feel sub software diagrams context containers components code that's really what this looks like this inspiration was Google Maps for this thing and when we talk about context we're talking about you know a holistic view of something when we're talking about code we're talking about the street level view so if we want to work our way backwards on the sea floor mom if I started at the at the street view this is my code this is most granular piece I know where it's in okay and if I send out a lot farther here I see that this road here is his name maybe at KFC or limited car parts or something that water works about okay so i zoom out even farther and I'm sort of looking containers okay this is code components containers and then we're gonna work our way over to context those are the four C's it's a zoom model if you will okay it was interesting and Simon went through this yeah the words this wrote it it's almost like you're going into code Basin where is this what is the section code represent explain it to me without the context of what the whole system is without any type of representation visually how do you get a good accurate picture it is really tough not only tell you aren't they working with that code base for quite a while do you know what it is okay and so we need to have some type of context around this and so we start looking and zooming out here as he started using this example this street said where does this F we started thinking oh it's by a KFC remedy car parts it's over by fern Valley right here in the United States right as we zoom that it's in Jersey you can stop by and say I just lucky but as we look at this fun that we found out no I need more context in it's actually in France it's an island off of France same thing with the code I need to zoom out find out where I'm at so that's how we do this with the model the model starts out is this take a look at what the overall software system is put your container in another resist your clientside web app server web side console applications mobile apps micro services all those things go in in canteen okay then we start to polarize that and take that down to a code level is essentially where you had with that okay I'm not going to go into the details of how to do it but definitely check out the sea floor model okay also check out correction for +1 I didn't mind make the intent is to teach everyone had but it's become more of awareness of how to do it okay modeling your software threeways architecture design often happens ad hoc no method at all just start going just just evolves I'm Circle right code I should just start going or we go with an industry standard of modeling hey I might use a c4 might use a crutch tin might use some notation I'm just gonna roll my arm just get out there and you say dope I'm gonna draw it on the board this is kind of what it should do and then let's start writing something around it not everybody might understand that but those are kind of the three but again it's to show that architectures are omnipresent but not always visible okay let's focus now on your mouth your mouth was a quite an evolution and along with that turn today you showed there's many things that actually contribute it to your mouth and Moses is so many open or now there was different things that contributed to so what we saw here in the early stages many different types of modeling techniques many different types of models you really need to stand at a price on this thing and that's really what came together and that's what grandma that's what Boosh that's what Jakob sent all got together and they were known as the three amigos really sister though on putting out and this was something that was accepted by the object modeling group and that was a standard and since that time we've kind of seen new releases of you know but there really hasn't been anything else around it and then until we started to see Sisson out which is a good derivation that it allows me to do system architecture model I've started seeing some people use that in their cloud architectures and that's so very handy notation for that in the business process modeling glue tape notation a lot of people ask me Hank about which version of you how are you use it it's a good question reusing 1.00 it's it's just it's just a real simple thing I'll point out Anatole we're using is Gliffy that's an assassin confluence you can use Visio do you use any tool like that what's interesting about those tools is if you go take a look at they're actually based on um I won't point out there's a reason for this as you monster become more complex and things thing that they were trying to do with UML is if I could create enough diagrams that depict the whole system I can generate software with it and that's what Road Rose was essentially trying to do okay so if I put all these diagrams together in your mouth it would generate the building it sure enough you'd see that in the demo it's interesting what you crate was I had two paths of the MVC okay you want to see exception handling in that car yeah there's always one of the things I want to see is that color bus is that and there's where they wanted to start taking about well let's capture the rest set now they bloated this thing out to just complete nonsense it's just too much it could become so complicated it's a gym but there are key pieces you want to learn how to do sequence diagram last day then component diagram those are the three right there okay she's where crunch time I'll get you to a question you can also use that with the c4 as well that's one thing Simon Brown advocates it says hey you know those use that your motto as well so it's just a notation it's a visual one other than language place of Mahalo we need systems juice for expressing artifacts based on a Victorian paradigm so that works well for ever or languages but by the three amigos I've mentioned these guys okay now for some again known as father abuse cases and so what is your my own when is that it's not a visual programming language it's a modeling language it's what you're doing your architecture your modeling stuff okay it's not at or repository specification it's a modeling language specification you'll know at one point oh you know about point five there's a specifications for this modeling language it's not a process in enables processes okay sequence diagram we'll see what that looks like here in a second we're enabling things with it okay today's um how this was just published that's a lot of just a neighbor is I so agree with this with you reading for a good seventy percent of the amount was a useless part to sell overpriced clunky tools looking at irrational rows don't learn you how to go around and repeat with useless cast class diagrams doing the basic so you can read a sequence day again and learn to think this way and so that's some pretty sound advice actually yeah don't go through and try to learn whole thing don't boil the ocean just a few diagrams is just enough to hit you a structure and we can talk in a common modeling language together as we got acquired by cement they have eight different platforms running it's even 13 different languages there's I believe Lee said it a dozen different frameworks going on like how on earth are you able to talk to each a says we're kind of screwed right now I'm like that was a real gun with an admission of guilt I think but I just got tight because he already saw our presentation I said it says that was one of our main interests sake this discipline we got to get our arms right because it's a big thing for us we have a lot of people that are on Java but they can't talk to folks over on Rozier how do you get it to a universal language I sit right there and let's make it in so that's that's kind of what Oliver is getting at here to say just learn a few Lisa it's not human anyway you can have this communication tool and send stuff back and forth with each other makes a huge difference okay Brian I spend our time on these diagrams you know try to keep them up today I think it's just a tool so we can avoid what we saw in those whiteboards earlier is just oh my god so use cases an end end process description the opposite will kind of came up with this idea includes many steps or transitions it's not normally an individual step or activity identified by the actor can login the actor can print a document printed documents a use case logon is a use case I'm just identifying by saying the actor can't what's an actor that's what's causing UML so we've also known as a user okay but the formal way is an actor why wouldn't they call it a user why the court an actor sounds kind of interesting when I design it why is that it just was not they call it meet where it doesn't necessarily yeah have to be a person there could be some something playing the role in fact I just worked for for a Quaker Oats some years ago when we get our use case model for them we were doing some things with pet food and the actor was a pet who's a dog you know that's trying out this taste system and it would register and suffer so yeah good case right there doesn't have to necessarily use case as a precondition and action in the pros conditions so precondition is this is something in a system okay so logging precondition I'm waiting and greeted by a prompt waiting for my user ID and my login password that's a precondition what's the action type it and I hit enter what's the post condition I'm logged in to see confirmation nurse to log in use case right there how many said everybody's been involved that system right it's the most common one around is that a design pattern you bet it's used everywhere and when I'm at see event no matter where I'm at no matter what platform that design pattern exists I could go and represent it by this I just draw that login okay common language so there's this thing called essential and real use versus real use cases so in essential use case it's a very abstract less detailed use case real use case very concrete more detail when I write up this thing more information about so you can get as detailed as you want about your use case when you write that thing up okay so that's the difference between a central use case real use cases this is a very summarized highlevel the example I just gave there there's kind of more of an essential these case so long and I didn't go to the details about do I get remember this session yeah should be encrypted should I show the password we're trying to get in more details okay so that's more about very real let's suppose that I'm just essential news thank you buddy seen these before yeah okay nothing new you haven't but okay so this is what it looks like so after I identify use cases I start to put together use taste dieter so I might have my use cases by stop supervise store staff my actor is a manager my other actor is store staff they're gonna be status in my inventory report you start to get an idea of what's going on in this system okay this box around here is called a system boundary and it's where all these use cases play into we call it the inventory system in this example so what we're modeling here is use cases that make up an inventory system can use cases extend each other and including to it you bet all right buy stock I get payment that includes that type of functionality buy stock can extend the poor quality issues the supplier can also include returning damaged goods I'm using some type of notation here to show what the heck this systems supposed to do we do this today and add till we call them stories but the challenge we get there's when we're using a tool like JIRA we put all this stuff in a backlog how do I don't get this you know it's only as if you're doing storage Andy okay anybody doing storing anything that they're agile today a lot of people skip that and that's it's also one of the challenges out there so that's also one of the other quests I find a product management has really done well that easier is is keeping some type of backbone of what's going on with this so we want to also think of this in terms of a conceptual model so the quintessential objectoriented analysis where investigation is the decomposition of the problem into individual steps things we are aware we call this a conceptual model the focus on conception male show concepts Association into concepts attributes of concept I gave you two examples down again this is relate to a flight system so yes a flight actual that has a date and a time rope or concept not a software a class or artifact so my conceptual diagram my conceptual model that's what I want something real not abstract ledges flight database date/time this is a software effect not a realworld concept when you're abstract when you're adding some type of conceptual diagram deal with your real work of what does start thinking of your software yet that's one of the things I see is people are starting to come from the software developer role in our architect Amelie when I start like this no no no you want to talk like this here because what is that we're trying to learn it for the business what is it about to user there's a user focus here it's product management speaks like this business speaks like this get to that low they don't care about flight databases a record buried somewhere in my soup okay okay it's important we'll get that later but not this face okay so that's how you wanna start with you a distraction decomposition into classes and so we all know a classic description of set of things that share some attributes methods relationships and then you already know that drop object during programming operation is service second request an object different behavior here we go let's compare the two alright so this is my the conceptual monitor I've got a flight of the date number of time it flies to airport and a name those are two potential classes right want to get a little more concrete with this wanting to get more stuff where it oriented at this point so call out your classes operation well I've got a flight class it does have a date and time it's described by a flight description what is this right here we call these multiplicities that's your notation so for every flight I have many flights about one description okay I can also have a flight description many fight description then Emily flies to one Airport okay so that's how you multiplicity early on is you're putting this together what are you essentially getting right here your day tomorrow right off this day again it's coming right off did you identify your classes how they relate from your class diagram this is that they memorize it I could pilot first time I had put this up to his conceptual diagram right my lead software guy had he's really Sheriff he looked at that and he he knew what these were right there he says after we got everything done up there as far as a conceptual Isis pretty gun with data model just like that and a reference for the thing who's able to go sit down and take this thing and run with it and start putting in a crutch tip okay and so it was great right there and we also got to communicate this and find out from a business level does this logic makes sense why decomposition into a conceptual Momo decomposition is it is really an intermediary step going straight to classes is tough I've seen some people try to go directly into classes as they're talking to their product manager I think again don't don't think like that get your object and kind of how do you keep it in a world with terms put that into a model and then you want a decomposition into classes then you can divide that we plan time to do that with your engineering team or yourself or whatever okay keep it at this real level and then decompose later okay tip if you're struggling to find your classes or distraction go back to the conceptual model because you might have missed something okay that's where it comes from I keep mentioning this thing about sequence diagram and you mom it's real simple thing shows a particular course of events within a use case shows external actors and interact directly the system shows the system events that deactivate and the ordinate events should they follow you over the news case so actually right here I have some type of actor and send a message this class fires off of it this is called a lifeline each class has one these are probably what methods that are in that class I'm calling okay and so we see the interaction between classes how my actor uses the system this is a sequence diagram you know it doesn't matter what language I'm in doesn't matter what framework I'm in but we can all talk this language this is one of the key things this was what was so nice about it you know we had a lot of people cognizant of notations okay so getting back to this discipline it's huge it makes a huge impact on things so basic sample right here cash here use cases what buy items in our item there's my method UPC quantity how's that how's that have to work with the system and it in sale make payment amount we're starting to see how this all is enabled by what the cashier okay so I've got a visual representation of what's going on with this thing one of the things we've got in our system is is check out my people that check out in their system modeling that in a Cygnus diagram in ours who's just jake onson was a lot of stuff but what's interesting about it was just one single method they called a whole bunch of stuff going on in the background had to verify had to go through a payment and go there's if code I mean there's all kinds of stuff related to making it payment and then at the very end there was a return method that came out success also works for front end one things that's become more complicated here's our front end we didn't used to have some of the front end complexities for a while I mean some of the frontend frameworks you guys got all the react angler view and burst and for what century change Allah every eighteen months or sometimes it's just drive me crazy it's so JavaScript at the end of day but why some a friendly you got to look on NPM it's a wild OLS there's a bunch of stuff going on out there wouldn't be nice if you could actually model the front end on this and kind of reduce some of the complexity and make it work with your framework that's how that the sequence diagram will also do so I gave you an example of your to of of how we can essentially have the user piece going in with this and then communicate with the backend application whatever's going on here I could expand this out to multiple classes words check login validate login all this is coming back from this is probably what JavaScript right here okay what's going on so I'm modeling the front end at the end of it yeah say these databases again same guy at the same time pad area sequence diagram okay let's talk about this other diagram class diagram so it illustrates the specification for our software classes shows definitions for the classes identifies the classes participating in software solution and shows the class relationships that's an interesting thing when I take a look at ways large code bases that's like my first things you're kind of going after it's like what is this class what's it about this is also point where you see some the worst design software like what was it thought bi creating this class and look what it's evolved into some monstrosity I came together fagala without a visual representation to tell me what the heck is going on that is damn difficult well particularly can you imagine coming out of a 12week dev bootcamp and your background was originally I know archaeology that's what you got your degree in you don't have much of a systems background and yet you're wanting to get into rural the software you love it so you did this bootcamp that you paid if I go through boot camp okay don't you pay 20 grand for and it's still tough to find you once you land the job you get put in this huge codebase and now you try to figure out these classes that you figured out your dev bootcamp in it just doesn't make any sense at all for a long time you always having to go to help because who knows this who knows hello this is running let's probably they've been the guy or gal that has been in this code base for a number of years it's go working with it they've travel to all the different places in the code base it's still upward in their head because they haven't created any of this stuff yet is their job secure who cares how secure is the company at that point is that person walks it out you're just now doubled your butt my own money you're gonna spend here to try to get some people up to speed trying to figure out what's going on this is an investment over time this is your vitamins right are you taking your vitamins remember then I said at the beginning it's almost as if you just ended up on the alert a was that person walked out the door on the outbreak days oh man we should have invested our vitamins I hope that makes sense it's kind of goofy analogy using X or scenario and the crutch to write buy items look what all is involved with buy items I got a store class I got a post class they're gonna sail try to Kerala class what makes them use each other what looks in what houses is showing interactions it shows the multiplicities this is the class diagram and you'll know for buy items I'm also showing instances variables methods all these different things what is it about that that's interesting about this class it's got methods but it doesn't have any did it yeah nothing no same thing with this one product catalog it's got a method for specification than that day how about this one product specification it's only got feelings yeah but no methods I can do that just maybe you looked at the code kit and now I know that I really don't have too much about prio what language is in I immediately got that from this extrapolation their huge help new job but know what's going on this code base okay so that's kind of the power of this thing remember the statement I showed earlier says don't like I was saying don't waste all your time with all these useless class diagrams in a way he was kind of right because when you Mel was out it was not uncommon that I would see a class diagram with over 300 classes on it and it looked like the biggest spidering whatever I couldn't begin a follower that was some way that did not say I'm not just kind of oh yeah I did this and just start writing up everything you got to do it in chunks you gotta do a small pieces and that's where the iterative process comes today it's back to the Simon book called just enough just enough to get through this right you have to do that great big thing component diagram this is the last one we're going to cover it's useful because it gives us a highlevel architecture of what will be built doesn't wreck addictive verify that systems require functionality is being implemented as a video about to play next components are now strictly logical design type constructs they actually call this constructs now but since we're on 1.0 I like calling component diagrams if you use Gliffy or Visio guess what the little maybes going to have one for you know it's gonna call component diagram I'm gonna go back to that use case diagram that you saw with the actor and says use case ding what version you go metal is that one anybody else the answer is it's all but that's where it came from this one yeah yeah yeah one covers so much from the beginning and everything what was added later are Nemo's additional diagrams he gives that to that generative software for to generate code base and everything so we have relationship diagrams we had class split diagrams they got insane everything to gloated no we just need the basics okay just the basics of this okay an artifact would be a physical unit and final gym modules yeah we're on a run or else and so it's not common for me just to put some gems up in a component a graph show me how this gem this is what the internationalization gem which shows how it works with my home page okay so that's why I Jim does 18 in similar things that you jump some other things in PHP so this is a component diagram and in the Kapow world we have something called vendor portal application so if I'm Nikki I'm a vendor I've got it place you can come and have your event if I'm Regal theater I've got a place she didn't have your event I'm considered a vendor so I will go into the portal entering name information one of our key customers that we've got is Regal theaters a lot of people last December for the release of star wars wanting to have their office sales price associated with that so we partnered up with regal because it's really tough to get people in the theaters on a Monday afternoon or Tuesday afternoon or theaters empty so when we show up saying hey we got a deal for you we got people looking for space but they would love to go to during that time of day and had to business me this hell let's let's hook up and so on the release of steroids we had 92 events across the country all booked at the same time for that release party that's what it's going on I've been there portals you can sign up for this thing so you created you can almost describe what's going on with our software right here so yeah you go in and create a group this is a form you submit there's a can you can jam anybody familiar with rails that's your authentication okay get your authorization that's what allows authorization and gentes kind of agenda controls that used to be called can't can't jam the first version I was caught can't we're all placing bets on what version floor is going to be I'm saying quadcam salesforce.com yeah it's also part of this Google Maps well yeah where's your where's your venue at yeah Italian to Google Maps with this too right that's what I'm showing this I'm using the API and group information how Salesforce you signed up as a vendor with this you have a master service agreement yep connected here that's also part of the form that I'm sitting right there so yeah there's a whole flow about component wise I'm talking API is here I'm talking gems I'm talking difficult points ok ok so what are the three diagrams again sequence class component those are three need to know that gichan's were approached it basically what a use case says you're use stories today same type of thing ok in that question diagramming a physical view there's a is anybody using a cloud craft cloud craft is used for modeling your AWS infrastructure you can actually have like a threedimensional thing it shows all the components you're using on AWS and each compiled and we'll show you a costing of how much it's costing you each month you can make the entire drawing of your a tennis system on cloud craft ok we've taken cloud craft and we put that in a crushed in physical model we just take a snippet oh this one's running on the ec2 instance for Gemini listening where search pop it in there that's associated we know where this coding money that's another thing coming into a large code base where's all this stuff aligned we've got seven different instances out of AWS it's splitting up this application right give it like why are they all there and the guy starts to drop me one of these dash lines couldn't be a follow what's going on show me this no it's a show me a physical view boom right there when I've just hired an engineer a few weeks ago to come on board you just look that's what I said describe the system for me after 800 it's reviewing these things he said so we've got seven instances we've got redundancy because they repeat these went through whole thing so how did you know that this is when it's all in crushes like you like you mean like physical data this is it again this is what I'm trying for infrastructure we've got Jenkins and ec2 that we've also got a zip file that's uploaded here to our s3 bucket AWS elastic Beanstalk for my load balancing okay how it triggers those are all part of physical deployment diagram okay so let's talk a little bit about time okay so design patterns this is this was something that is very popular early years and on that timeline you'd see it start to evolve somewhere in the 80s and then 90s patterns became very popular and then priests in is a turn of century came around y2k or so we'd start to hear components being used these were all the things we knew about building software free soon as we put a bunch of components together the diagrams you start to see an entire framework that was a genesis that we we've got general rails and things like that that's how it came about so patterns is what we used to work with and today we still use pattern pretty different way there's the very simplified so in software engineering a design pattern is a general reusable solution to a commonly occurring problem in software design design pattern is not a finished design that we transform directly in a code rather than it is a description of template try to solve a problem I can be used in many different situation it's this repeatability okay that Japan I can use them in different areas logon right there's a pattern okay that occurs in many different places okay patterns originate is an architectural concept by Christopher Alexander around late 70s that's where this came about okay gof what does that stand for Ganga Florence and some of you guys are familiar with that so this is well these things again back to earlier years of objectoriented design designers they they gained popularity through this book actually called design patterns it's really about making objectoriented software and this kind of reusable type of thing but this socalled Gang of Four and so the books and authors are gamma how Johnson and I'd always see students say yeah those are the game for this book became very popular and it's still reference today it contains a lot of the software patterns that are in our systems to be quite frankly we don't have to worry about it's baked into the framework but that's how like systems got put together so every once a while here some a reference a gang and for patterns a nice guy interesting slate somebody understands this and I've really studied it I saw patterns are an interesting thing because there's touring that's involved with this their supporters know why do patterns okay design patterns can speed up the development process and predicting by providing tested proven development paradigms seems pretty simple in concept critics why not do better well they're viewed as workarounds for core features missing in a language language where sometimes viewed as a lack of good abstraction and a barrier to creativity well if I keep using this same paradigm Goethe am I kind of stuck in that design type of thinking do I necessarily have to think of login as login all right I just walk up to it you start using somehow or another I'm already good I'm authenticated I didn't have to log yeah it's stretching your mind to a different type of thing yes the argument with it I myself I still I think I walk up tonight keyless car yeah that's a nice practice and I'm student keep okay ha ha something that turning it in there but that's that's the idea I think most sites have a better liking that with it this here is saying hey productivity it ok but I want to create stuff right now and I'm going to use the components that are available to me there is somebody saying I want to think outside the box I don't we get stuck into say they're against without yes which I don't think we'll need a bigger argument for patterns as communication definitely alright cuz you know if you're all using the same terminology you don't have to go to the white cottages you can just say what really pumps up they have the system's talk to each other okay I now know immediately what you need if you know what the parents are right versus well I'm gonna open the socket and we'll some of us will negotiate right you could that's the anti pattern because you have to go through the description you know the drug as a good point you really bring up because think about 2001 that's when we had the 17 guys getting the ski lodge have come up with the manifesto what was popular at that time patterns gang before this it was it came for that that was it those guys were thinking in terms of time and they did exactly what you were you're talking about right there there's ability to communicate with that fast forward eighteen years different kind of thinking going on now yeah it's just we don't think really in terms of so much of that if we do I hear the term pattern almost being abused at some times somebody calls something impediments it's not it's just a programming paradigm or something so anyway three pattern types so there's creational pattern structural patterns behavior crash there's a really the main three may be familiar with creational patterns at once created they create object for you rather than having to instantiate objects directly this gives you program a bit more flexibility in designing which object you need to be created for a particular case structural patterns this is getting back to our class and object composition how inheritance is use behavioral planners specifically concerned with the communication between objects those are the main three pattern types I'm paying so creational patterns structural patterns behavior patterns logging which kind is that which one would that be you got it yeah behavior that's something I'm interacting with its going with the system that's a behavioral pattern its architectural review board any you guys have a record textual review board furtive it okay person saying yes why do an ARB Architectural Review well ultimately we want out the line design with the company business global strategies and objectives for the quality of our products find the technical design standards policies and principles for the company overall something I started at Capel was in ARB Architectural Review Board when I came in on a grooming session went for three hours I think my gosh that is crazy I'm a grooming session it what are we talking about in here now you've served as soon as I started listening in there's a lot of discussion about architecture and design going by they're kind of blending grooming with envisioning and it was a just a whole melting pot of stuff going on with it right there so I said let's pull that dialogue out in something as a focus group and let's think about our overall holistic view of system architecture and application in architecture you call sis art in that part for short so when we get our architectural review board together we meet once a month and charlie we've got a few developers that are in it I got one person for QA I got one person from DevOps these folks all are interested in architecture it's part of their career roadmap and I've worked out with them they want to talk about sis art and a part and what we can do to guide the direction of our system design it so we don't have to talk about this just abstractly and some grooming and a July everything so gets focus too but this is not just me putting this together there's actually a format around the saying this is where arabes became very popular MIT is probably the most popular one and this is the format we follow there's a couple links to this all I have in the presentation for this really good mit European guidelines but this one I was at I work for bright star as well we also have a review about companies have these they put some of that focus on this omnipresent but not visible type of thing it's a little bit focus on this thing so we can start to guide how our design is done anything that's great we also part of this we have an issues long they were always reviewing to something structurally comes up it was put that in here be reading this month or hey I want to talk about something a sea floor model right as we call board with C then they're using scaled agile framework safe that has something called architectural runway were you doing in a blurs and you do functions built just enough design consume built design consumed that's called architectural runway it's safe and that's why the things we introduced in the area that was new for a lot of folks right there it's getting back to that pencil principle of design just enough for that not really well spelled out in the original manifesto but certainly the skill of agile framework we're starting to see that spell that they want that piece in their big question mark is what are you doing during on it that's a lot of stuff we just talked about these are already out because they kind of sound a little corporate issue but these are really actually just taken right out of the MIT portion their short term goals or you still want to create this with your lines that create architectural roadmaps its support your business long time prevent framework love achieve a platform that can be easily you know maintenance okay being strategic being visionary with okay reduce a long term technical debt that's also something that just because two is like at what point do we need to take another technical how come I avoided one thing I've noticed is we started doing this for the past six months put that smaller design piece in there I've no see the amount of debt that piles on man is that really shrunk because we're being very strategic in thinking ahead about our design and putting it out there we don't have to just patchwork something along just to get to another place okay so we can think about a plan ahead on the thing right there and say nope it's out for the spread cuz we don't have enough design along okay cool we have to patchwork and say well we'll catch up on that later just call it technical debt let's go ahead and build it safe oh my god it just builds up and it's just crazy crazy so and this keeps our technology costs in line that's a big thing with the air beat we have everybody but you guys haven't awsm you running on a DBS you gotta eat it yes bill is your go google bill what's the other Vemma I think is for the healthcare one or they hate to be pricey we need to be pricey you could spend easily hundreds of thousands of dollars millions of dollars out there in the cloud but how do you know you you're not purchasing too much how do you make sure it's right make sure it's lined up this is one thing that you're everybody can do find out this is re always big my my sister and it's it's a key thing because you start small or plan big you don't turn it up the wall the ocean focus on quick wins show the results really and often with the end of mine and they create a maturity roadmap it's probably okay we're talking enterprise architecture and frameworks when you think in terms of enterprise frameworks like cities think of enterprise and architecture is a city portfolio architectures of street system architecture is the Builder okay so it's okay the architecture will continue that's one way of framing this in terms of that enterprise architecture enterprise architectures are strategy to minimize ITM business mistakes many competing perspectives approaches RTA here to keep me it's really no single agreed upon enterprise architecture standard like we do in a park and park we got um oh we've got some models out there since aren't not quite the same way with enterprise architecture so this is a key period you want to focus upon and so that's why we've got these things called architecture frameworks and so just like software frameworks that are enterprise architecture frameworks and these frameworks help us be productive and creating and managing our designs main frameworks to choose from we used to talk up I really like talk specifically toga idiom the stands for in the Open Group architectural framework application design model okay I'll show what that looks like here a little bit some folks with ITA ITIL Zachman was popular in the early 90s or something it's more like a grid a 12piece grid and shows you a make your decisions based on your enterprise somebody had asked me what this one is this is Department of Defense architectural framework this is for software as they write it so they follow that framework or as well so there's a milspec on their enterprise architecture and a lot of the older systems even that the the missile systems are built in or base their software follow this type of enterprise architecture so we use toga milkman group architectural framework with Cartland version 9.1 with this anybody from a moment they might use Intel Gough just first first time you've heard of it yeah why this doesn't get the airplane should they this back today so it's key because it's the goto framework for enterprise architecture and this group kind of maintains it what you do with this thing this is how we run it in the air be is women I start the architectural review board session we've got I have a simplified version of this because by these Gators still kind of knew this so I take it out of Peters things but we start with an architectural vision of a slide on that said what do we want to work on well have something called current state future state technology vision governance you can just walk through those and that's what you're reviewing in your he would say hey here's a hot state of the system here's what we need to address here's future state should we scale what are we expanding to say all these reviewing this in every ARB we go through this thing it's called the togepi and architectural design every time it makes a big difference because well yeah governances we've got here is actually coming out of Europe which is the GDP are okay from here with that one yep right there part G Toyota that's where you want to address that okay so standards like that are key so we always keep those in the highlights any time somebody wants to bring him a new technology introduce it into our stack it goes through this whole thing right there let's let's run through the gamut let's see what happens if it makes sense for it and we what we end up doing with our stories is actually making design of required artifacts they would just get scheduled in they get pointed in schedule so we stayed on the 1 week sprint but you wouldn't maybe consume that artifact until the next the next press right and I'm wondering it said reasons against that or as you just decided to kind of in some way will make up spent two weeks and your front loader those tasks in the early party scene early party yeah and for that reason so we give ourselves some architectural runway is it caught in and said you know scaled agile chocolate so you want to create runway so we're actually planning after well got things going on for the very first one we did I put in the design for put in and then we started from there itself as we go to the next sprint the design work that we're doing we already did it in the previous so that helps with product management to plant what's coming out and that's these everything that's just way I kind of decided to do it there I noticed in the one week's rent it was on a lot of time to discuss and get it arms right and the chunks ended up being so small just forward I had I wanted people to also learn this too so it gave some time to adapt to this because this was something kind of quick and given how much points were rolling over each week it became apparent to me what we're trying to bite stuffing this but too large a chunk so we didn't know how to decomposition we didn't do my addy cop stuff that's because we really didn't know how to design really did not it chump this up into a visual representation of children oh let's just do this put a crunched in around this thing and let's see where that ends up right there find out the dependencies officer find out what happens and oftentimes see a story map okay so the dependencies on the story minute big story mapping is a cyclic backbone in it a backlog is holistic view of things and this is where your stories come out of instead of suit of cards does we're just guys some of the reason it's no one particular thing but you know if it's working for your growth now if you if you feel that's enough time you get depends what your deliveries is to be but we've had to split things up but I've gotten away from I'll tell you that because I don't like having some partially completely because that's only a partially design I'll first ask that we can design a good chunk of it in this in this sprint let's not start going until we got a good feel of it we're going to the next branch and continue on with the design that would pick up it might be just enough right there okay let's go for it let's go ahead and build it at that point there were you know good left hanging in the middle of something where we didn't get to all of our design thinking oh and then there's no requirement that comes in change your mind so they've kind of prevented that so that's why I stretch the out of it for others so given what that more women didn't want to go three weeks or four weeks we're cousins my anxiety for people that are coming over one week for one but it's it also I think that week just seems to work just right for them for what are that company was doing did you think where's that bread store we had a three three week we start with a four weeks bread there's a lot of people coming out for waterfall to say oh my god that's that it's like I can't will you make it go longer are you trying to get to this well yeah okay I have people with in the sprint do cover if I have something I'll split out into a couple says it seems like we've got one area that's just for a project really called project intake and then another it was vendor portal if that team on vendor portal wants to work as a comment cuz you already know what the work is gonna be in everything you know confident your time management as well as what's coming up and what's expected then that's fine you're working but you're still working in the context of it and release date on things the biggest issue I I find with doing the Kanban really comes down to time management does that find some people will just crank I mean just give him work and then go back to the clock give me more give me more anymore I've also found it's just a perfect weight for a slacker to be in there just yeah I did mine and it just it depends I've had developers in fact not just development well side of the factory floor where you've seen combat implement when I first came into engineering like they came in as a design engineer working in manufacturing and we'd have people on the factory floor it was a Kanban system I'd see people out there taking breaks galore not really getting the work done but you know I'd see some people out there cranking and running out of parts and stuff so it became a management issue of really can you manage the time to make sure that that's effective in terms of the design around Kanban yeah design as much as you can for however far we want to go no mind you I don't want you designing for the next couple of weeks on it no how far do you up do you want to meet her the combat that's going out so think ahead then so as I work with those guys in the on the Kanban piece it's really metering the designer you're still thinking in terms of releases there's something in terms of the releases so maybe I'm grouping of a function as you put it together in your story mapping ok I want to take this segment here and what Kanban all for that how much design do I have on it ok you can still segment it and then you just don't have this formalize we're gonna release on this date you know have a retro and because that nature so again time management kind of the key piece on that one things I I work with Artie Buccos remember the comedy the 7 Habits of Highly Effective People very popular series right there the time management tool in there still very popular today it's the four quadrants what is it important not important Virgen not urgent you want to work on things that poor good a virgin you want to move things that are pretty and important stay on that this mismanagement by crisis continue to move them in two important but not urgent some folks just really struggle it's a time management think so just giving a mentor right there help prioritize the stories and kitchen earlier about you know getting your team together and I might go out to the board because that one you or one you don't ever think that and then the other one come up no he said is it an architect know what what does the steep would have been for example of developers coming in and taking on some of those responsibilities or is this design work primarily handled by architecture and then unset word good question yeah it's really good question because where is this architectural role at today what do we call an architect today so I come in I'd see people that have got that title architect how I asked him about question tow God okay well tell me what architecture is to you and for some of them as we're looking at Rao's well instead of creating everything in this one particular folder we decided to add another structuring here so we can put our config files into this section here so we've changed the overall architecture of how we work with rails Megan hits architecture are you again so yeah thank you okay but no so when I started with is when we do career pool when I do Career Planning with folks like what does it be wanting to be I'll pick out the developers say I'm interested in being an architect and then I'll sit down with them and won't go over at least these two of these guys it's like what we did here that this presentation was a very first one I gave to them right there and so there's head exploded I think I said let's just go into some baby steps so let's first start off we're doing a sequence diagram so one day I had him who's been there a while he knows a lot of software and his head he's a he's offering to be the one talking since I I just go up to the board can you put a sequence diagram I hope walk you through so it's parent it's architectural appearing so I'm I'm kind of instructing how do you do the sequence diagram kind of do the component diagram and then getting this in the classes and what's interesting that is you know when we're changing something in the code base hearing those words classes are there he already knows the structure there a message down I'm putting getting on board in a language it the rest of the developers can understand so what I'm doing is I'm picking up somebody who has an interest in this discipline going farther than it they don't know it right off the bat so there's some coach or a contemporary coach it goes on with it it doesn't take long it doesn't take long and if they're really interested though do it and I still have to prod someone to get to the board because there's and I'm real confident in a couple of things one is still getting comfortable with just the two trying to figure out the problem itself because here's this big ball of mud of color just and then there's a lot to juggle everything so as we continue to keep one it's something you're building it's a living thing just like your cookies your design is a living thing you're building upon it now you're going to create a moment a day just little pieces yeah after a year you look back on this and collect all this yeah pretty good view what's going on you've also got better I heard his hearing chops without a diagram something everybody on my team knows what the question is that we had yesterday the weekly team meeting I had and I'm gonna be hiring more engineers them we're looking at bringing on eight more engineers for our team because we're gonna scale the power to a fit and sea level 1500 customers we've got scale to 25,000 one of those customers spent almost as much as all those 15 minutes over 25,000 so we got a scale people and so they bring people on board there would be a key piece and so silence I need to get spectators to just look for individuals that you know that see this is a potential your career path or maybe even not that but just show up a desire to think a little bit differently in other words you can be a coder and it just kind of encouraged an adventure that is that's what I'm gonna say right now a lot of times I think people are comfortable just having everything handed to do that without dude you'll be part of the analysis so that how do you be part of the ownership of that product that you're building understand it yeah it's like this the statement and Simon drama yeah if I can't visualize visualize it then hunters am I going to be able to improve it and along those lines at some point you can't have every developer in here in your bar and work at the architectural meetings right so yeah if that mechanism for disseminating what you've what your group comes up was to the masses so it's bacon I was curious about and I know I asked you this before but last for this group do you put things into motion to make sure like this the end the source code is somehow linked back to the architecture as you know like is it hidden in handy if you make him put stuff in the heaviness this this this this piece of code was was generated based off of this you amount allow or that sort of thing or in another thing along those lines is if you're programming in a world where you you have to you have to conform the specifications like they data transmission specification and stuff like that do you include those engineer diagrams and you just someone you know if you provide an automatic anism for actually linking it to the source code it's questioning the fact yeah I'm done that's like those those are all good and they're relevant and related to each other because it it's an important piece how it manages what's to it for this so I would go about it is juror okay that's that's our main nail into all right application lifecycle management tool we've also got confluence I meant we were using Griffey so those diagrams that she's some of the ones that you see up did I did those in glyphic and so after we go to the board I'll take a picture I'll take a picture of thing then I'll go ahead and enter it in a Gliffy by using the amount notation that's English now create that into the digitized thing it's just something I'm trying to get some guys up to speed where they can do they're able to draw it up in the whiteboard so we've got to get to where they can use on i'm glyph and why don't when he sees he's got to be pretty good with it so that's that's one step so get in get it into Gliffy now once it's in Gliffy i can tie that into journal because it's it's the same platform right it's pretty by asking stack so i can put a link to the Gliffy diagram in the story right there so as i'm looking and reading the straight okay i'll click on the diagram i did maybe the architects went through and now see how this is designed so it's it's carried with it same thing with the UX guy to his comps are also in the story too we use figma for aux so we have a cops in there sila what's being followed in history is this really center and juror okay so i've made a link to my Gliffy diagram which has a crunch tune in it okay it's got my ux gems and if you've got standards in there then that's gonna be part of the story right that's in there and I could put a link into something that's probably a confluence that I've got linked up and I know that that's how we kind of tight together I don't know if you guys saw that was it to through heinous three with someone or two and three weeks ago Atlassian released a product called Gliffy project basically an announcement this has gotta be the coolest things I've seen in let us think it's they understand this gap quick talk to him I don't go to these engineers I feel like where you going with your prices we're going after design say because IBM's going after we see this gap and so they came out with glyphic project what glyphic project is doing is you can take a diagram that you created and Gliffy or a picture then I took a whiteboard just a JPEG create a hotspot on the diagram or the JPEG then hotspot I can tie to a car to a story injuries it's drag and drop right on to the visual right there and so as I've got my use case diagram cuz they've got my class diagram whatever I'm going to be work on any type of diagram up there I can put a hotspot on that diagram I literally drag is spread number card so that the story number on top of that thing so what I got there is something to visually tie it together right there which is kind of cool the weight which really tell me about with lastly did this is when you read the literature about what they released we try and dress at o4 for project management then they show this flowchart I an amazing the project okay I feel business flow chart shows how you're dragging your stories over into your the project but when you go watch the video that the promoting this singlet there's the real telling thing it's only a minute it doesn't shine it it shows a system architecture diagram system architecture day mind you this is a physical view in a crunch they took the sis art diagram of somebody that's got their eight mes diagram and showing that as the diagram that they're dragging their spread stories into and it's pretty cool because my DevOps person is gonna be sitting there sin oh jeez hurt might ask for what we're building right there and he continues to build up on that diet for future state but what we identified the toga at then so he's got his diagram he's got a sprint with all the stories visually tied to the hot spots in the thing and then the product manager can look like this st. Tuesday oh this were all that's running it the whole thing ties together like that pretty cool stuff that's the only a are meant to allow now that has it to where you a couple together visual with the actual assignments on top of it and it carries it through itself is a great pride gets up my it was able to talk my management into saying look let's get let's make a pilot on this and assist sometimes we're gonna get a shot see what happens here I've also tried pushed for a backlog too and that the story exactly so what's the documentation yeah that's the question what's the documentation so is it is the documentation a diagram that we created as a documentation a story that we previously worked on what's tying all this together towards not dated we all have to stay up on the maintenance is that is that the angle injera when you do your code okay you can link to the release right to the vena Jenkins the repository so you can tie right to the reef on it and see where that's head I don't get up so it's really such Angus but it's it's get up so you can tie in to get and see what's the code attached to that story that's got that design diagram and there this guy's maybe the UX portion on there now as time goes on before updating stuff then go back to them yeah I can go back to it if it changes in a big way that I don't want to go back to redo that thing that's fine I'm just going to go to the most recent there and I can still put a link in reference to prior so they're always linked some way so you can always go back into the higher in the history but I think that's really what we want to see we're just saying originated from who's the Genesis or the thinking that got us to this code base that's something we don't have right okay nice big ball of mud I don't have a let me he's decided to go this path as time goes on you start to see the linkages for each one of those things it's the most recent one that said today my UX person that does our UI state he's he was pretty excited that this acquittee project because he said I got components I reuse all the time and we've got a lot of repetition here I'd love to be able to call those out on this thing so I can find one a new one isn't it everything so and as one becomes obsolete you can start to flag those things I met right on his actual comps that's that's the system I would recommend also taking like that Simon Brown book just enough he also has some good ideas there's no this point one way of doing the same anything that we're going back to what we were doing waterfall that is we made these beautiful diagrams for the past two three months everything and they were gonna keep up on this thing because we're not going to touch this is good we're gonna make code from that's three plus everything and it's all day to know it's continuous of living breathing thing with it so your ALM tool is what's key JIRA confluence get all these are key things Italian I said so just to be clear as they're providing me some like if you're writing in JavaScript it's given you a header you can actually plant in that piece of source code that said this is them that you know here here's your architecture documents that support why this was written this way and there's many under code it's all related through Dale that's right it's related through your JIRA ticket that you used to create that JavaScript oh it still cheap I came against that ticket that's so you know all the disks that when you're referencing the ticket in in a gif transaction so yeah yeah that's it and you can go back and they get reap on see what was deleted what was added that's a great tool to I think the last thing had a competing product and biggest after it's about fish I competed against the repo you could see what was changed but giving up doesn't know yes but for me and never solve the designs are from using JIRA I'm still the thing that's the question you were kind of getting it's the doc just lives in the Jura tickets you can never find them again and as soon as you add new features where's it at we're you can't go didn't you work on this code somewhere over here what was the ticket number there's the guy who knows all the absolutely right in which are you gonna go is all right keep mentioning story mapping it's creating that thing called a backbone mystery matter there's a guy named Pat they come up with this thing and you guys got to go back there because you'll see where we're at with it that's a product management future that's going after its product management do you know what to find build on that I work in like a very larger soft board we're gonna see if in Seoul you know there's like hundreds of thousands of git repositories and different software artifacts in life I don't like I guess is how how do you maybe have to put already enterprise architecture functional organs helping keep that we're gonna ask is it especially if you're a new person part of the first immediate problem is just understand what are the different software artifacts and which one is relevant to the particular problem I'm supposed to be solving right now just like even begin to discover where documentation is or of what I need to know or Pauline interacts with all their artifacts it sounds like just a pretty goodsized team that came up with that much so it's that's it a good sense engineering development group or is that something that's going to accumulate over time yeah well I work at it so there is like both novice engineer it's both it's good over time and this team as well so how are you managing the scrums how you managing attacks that are you keeping him y'all in just so as you do your scrubs I know that I benched the scaled agile framework there's less dad there's a couple of these others thanks guys a friendly property because it's using this architectural runway keep managing it so as you have been doing a scrum of scrums yeah varying results where the tools they use how they managing that pieces are working with total product management and is it kind of points out there a lot if it's something it's worth you only as Goods what you're gonna be getting in that's what it is with all this the real week's fighting in here is I don't have good requirements behemoths are they extremely vague how far am I gonna get yeah but it's also good to cuz I'm not gonna start going so I don't know enough about it is much more difficult to write software first for something that's just generic as opposed to something that's very specific yeah if I know the details on it then it's a heck of a lot easier to write thing it gets back to the Mona Lisa versus diagram picture versus Daggett very explicit what is this view showing me everything that's what the diagram is going to be attacked yeah but managing it that whole repository of those decorative as you want to call them design documents if you're working with stories for what are those coming from is there some type of a master document that or no Boone Rd business requirements document that the Krait management's working with and that's kind of coming from there in I always curious to see how to manage it yet there is a notation if you notice that was on that framework called BPMN business process notation business process modeling notation there's a notation actually coincides with you'll know and so that was one one of the ways they wanted to tie together you about with product management say Frank management's got its own notation stick that ties in and I can marry all this together with this they're having product managers time for that thank Kalman this many fingers it just says it's a discipline very real problem I don't have a quick answer for ya one of other questions that it is I guess some of the friction that I always felt when I was studying in the mountains a little bit and then later is an immediate assist to get you in on specific problems like a lot of the notation seem very coupled to like a classical inheritance based like objectoriented programming paradigm works offered oh yeah and it as soon as you sort of get outside that mapping the design actually your translating design sniffing kind of starts to break down a little bit or even if it even if you can follow through it doesn't really necessarily need like a clear simple and connotation so I'm curious sort of like how that how you would address that are going are your keys I'm trying to see if I sign I understand how that's been asked so what you saw was something I was coming out of an objectoriented nature right what if you're not dealing with an object or any things let's say it's no functional program like like the elixir there's something okay you are in Phoenix spring so the elixir being a function I'm typing how's this stuff work because the attorney things based on objects how does that go forward you don't have this notion classes well what is it that we have a functional program it functions right that's one thing so yeah that allows we can absolutely break this down into functions as well if you don't want to call it class I took a notation it's any elixir modeling that I've done I didn't tell the class I just put it as a function then here's all the things with it so that's that's how I adjusted it we're trying think so functionally I get SIA that sits put together all this was a genesis out of as you saw the timeline from small talk that's how we package stuff up but that paradigm you know that's not the only matter it's a great example what are you doing something I get how you can adapt it it's still a structure it's still a notation you're still trying to convey an idea because the game game back to the very beginning of it what is your product is an architect provision the vision of where it is and you're just trying to communicate that's all the diagram is done no more that's it so just communicate what that is as you can see from all the scribbles on the board really struggle with that yeah so just try to standardize yeah good question very good question yeah so what's the next language going to look like if it's not function or either you know will it still it still had to go about solving a problem visually capturing yet yeah no probably a good opportunity to start another technical modeling language if you're interested give me a call if you think that's important for that cuz those got really wealthy small small and they noticed a couple of the slides you mentioned out of it ddaddy yeah yeah so and triple da dee dee dee whatever the guys says designdriven the main driven design and then what you were referring to was what we call it conceptual diagram so no decomposition it it's before I go into thinking about code before I go into thinking that assistant it's getting that thought process of what's the problem I'm trying to solve here because it's a customer or something like that and that's really where the our best developers come from it's it's best sorry I promise I want us to be up speaking that language so if I can get up there and start putting it you know some type of composition or diagram that speaks to business terms and how I kind of reach it oh yeah there's a flight there's a date there's a location well I don't have to say it's flight you know whatever I want to name the method is or the class person don't think like that it's getting yourself out in into that thing that was one of the challenges I would say that I had was with an engineer not at this particular company better another one was pull on him that I that he was really heavy into spring and really thought in every way of end I said don't reference to that when we're only at the business said just strip it down what does this class mean pretty soon he started kind of meaning this relationship he's trying to kind of thinking a different name for the class as he was talking been to the that's how he's kind of translating it into a business term and pretty soon he started to see the code in a different perspectives but after you get done with all the businesses she goes she goes like I had to be put classes in this why they do it this way say and you start to see how to decouple this was from the original thinking so you don't want to be reversing from I need code to get to my business program now I want my business problem to work its way to R&D car position down into something packaged in a classes functions or whatever offs I try to reverse it I came on board kapow everybody talked about in terms of servers Gemini Apollo they name it was this minute art and I still have people reference it oh that's that's that's Minotaur what about Minotaur what is it that's a server that's where the code lies I don't know anything about that oh I fell due respect it's something in this person's right because they know what's out there Minotaur that's some instance on an ec2 I don't know a thing about it well menator is the front end piece that's kind of expense you're good and then they've got one called Jemma these are these are cute names everything but it's doing nothing for me from a visual standpoint okay why not just call it vendor portal I don't first caller I am portal meaningful names but it's cool when you're this hipster there's just a few of us do it let's call it you know SpongeBob SquarePants I don't care you know it's it's a goofy thing yeah and that's just part of maturity this is part of maturity getting it there getting those people to think in terms of I don't think about from the server perspective don't think that from the core perspective it's a function and it really helps the business I must say when we get service tickets and that helps them big way cuz somebody's thinking like that right there no cuz it's real tempting to think that we're at the code is this happening no I don't think that where's that person trying to do cuz you might end up finding it there's none do if the code is hurry live did that function just don't exist yeah and it helps into communication with the business too big can write both both directions uzuki are you actually using the same nouns writing exactly is here or not if you're not talking controller controller controller and it's nothing to them to the business at all of you're saying of the user or janken can the poor whatever is no can't can't can't oh that's it can't can't can't oh honey that's inside that was hilarious kick in Kansas it's just getting out of it but that's it that's okay that's just part of the tour nation curve that's what differentiates how you might have learned something to think in terms of song a this is that's what we look for so you mentioned that you know you use the correction and the c4 so when in the two weeks sprint would you put those together very good well you guys entrants appear in the bloody meeting or first couple days or and who's involved in creating notes yeah making the call when I happen to get your scrum master that's a scratch so scrum masters gonna be all kinds it so I've had to work with them and we scaled our team down to 50 people and the scrum master will is rotate it's not a dedicated person and so people that have also become a scrum master my not necessarily not design anything so I'll go up and ask them is engineering you know the director you're saying do we need design on this oh ask it right up front do we need design on this know kind of the cases I don't know do we understand what we've got to do here and then somebody starts thinking about from a system or something so I think back from that like well I'm not sure and I say okay I explained to me what we're gonna do there we have to start thinking and if it's if it's a deer in the headlights or that it's there's nothing at that point because you can't go up and articulate it right doing I may have my most experienced you know Jerry shaken it's like that's probably how we yeah I know exactly how that's kind of good good for you about the rest of us perfect that person is gonna be yeah and it's great because that person loves the growing to because of the judgment call if I don't have my hand well then if I don't watch that they will go right ahead without design and we can do the color everything so it is it had to be an intentional thing it's not a high as 100 brand wants us to decide I've got seats yeah they they wanna they get banished and that debt is an investment they've seen the merits I got two of those guys come as I said we are now doing was he said 12 more points and each spec that we did before because we got it we can go farther with it I know the depth of what's going on here so we're more efficient you can listen so there's other stuff coming on us right I got a junior developer she's always asking I do we gonna do a design like I know what she's I know why they're asking well yeah they don't understand it's big but they want that visual that helps them so there's other people driving as you get farther on it presumably just which is part of our our cadence and there but gangster that take some things and you have to have some people that genuinely wanted to come work it I haven't won engineer as he got to be familiar with this he kinda said that you know this this really isn't for me I can't expand my carpets I like doing that that piece of it that's fine too it's cool that's actually cool a problem we're small team so it's like seven people yeah just really agree bring on even qi2 because weathered when they got they got our test scripts I'll just say hey what's this thing supposed to do hey Johnny I thought we had we should wrap it be right back okay alright we're good so thank you I appreciate it offensive for at me my great questions