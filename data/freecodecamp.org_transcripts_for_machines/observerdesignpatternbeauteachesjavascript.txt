with the Observer design pattern if an object is modified it broadcasts to dependent objects that a change has occurred one example is the model view controller architecture when the view updates the model changes event handlers are another example of the Observer design pattern these are functions that will be notified when a certain event fires when you use the ad event listener function in JavaScript you would basically using the Observer pattern this is very similar to the publication subscription pattern now here is a a uml diagram from Wikipedia that kind of explains the pattern so we have a subject right here now a subject maintains a list of observers and facilitates adding or removing observers so you can register new observers you can unregister or subscribe and unsubscribe you can also uh notify The Observers and when you notify The Observers it's going to you look down here to the function definition for Observer and observer collection call observer. notify so it's going to call notified for each Observer this is the the overall Observer and then you you can make instances of the Observer concrete Observer a concrete Observer B and so then on the subject when you call notify observers it's going to call this function so each Observer is notified let's go back and look at some actual code so here's the definition of the subject and we are going to create an observer array there's four different functions in the in the subject we have subscribe Observer where we're just going to pass s an observer object and then push that Observer object onto the array then we have unsubscribe Observer where basically we just um find The Observer object try to find the index of the Observer object that you passed in and then we're going to um splice the or this is basically just taking out the Observer from the array we notify observers this is where we can just notify one Observer we pass in The Observer we find the index and then we're going to call the the observer. notify on the index number of of the The Observer we passed in so only one Observer is being notified then we have notify all observers where we're basically going to notify every observer in that array observers do length it's a for for Loop and we're going to go through each um each observer in the array and notify so let's go down and look at what the observer looks like now this is a pretty basic example of an observer and the main thing about the Observer is that you need to have a notify function in this case we're just going to conso log Observer and then the number of the Observer is notified but obviously in a real example you'll probably do something a little more detail than this but let's go down to where we create the objects so we're going to create a new subject object that was the first we reviewed up there and then VAR Observer one equals new Observer one now here we're just we can pass in things when we're creating the Observer here we're just passing in the number of the Observer and the main reason for that is so you can see in the console what number is being notified so we're creating the four observers now we're going to Subs all these observers are going to subscribe so subject. subscribe The Observer and observer 1 2 3 4 and I'm going to take off the the comment for this so we have subject. notify Observer Observer 2 so if we run that you can see just Observer 2 is notified and now I'm going to do something else we're going to subject. unsubscribe now Observer 2 has been unsubscribed and now we're going to take off this comment subject. notify all observers and we run that so this was the first thing we got from the notify Observer Observer 2 and then this is what happened with the notify all observers we have Observer 1 three and four you can see Observer two is not notified because it's been unsubscribed well that's just a basic example of the Observer pattern thanks for watching my name is Bo KS don't forget to subscribe and remember use your code for good