proxies the proxy object is used to define custom behavior when the properties of a target object are accessed this will make more sense once i give you an example but before i give you an example let me just show you the syntax we got var p equals new proxy and then you pass in the target and the handler a target is just an object you're passing in any object and the handler explains how it's going to be different than usual when you access the object so you can make things a little different than than what would normally happen when you try to do things with the object with the handler and the methods that are in the handler are called traps let me give you an example in this example i'm going to explain the handler first and in this handler we're going to define a new get method now normally the get method um is just a normal method it's part of any object like if you look at this example if we um if our p was just a normal object and then we tried to did p dot a equals one the a is is the key and then the one is the value so then if you just console that log p a it's just going to print one because we've assigned one to two a so now instead of doing just giving you the normal value out normally if you did p to a there'll be a get to get one we're going to find something else to happen when you try to access that that val that key within the object so it says return key so it's going to say if key is in the target so if we're searching for a key that's actually part of the object if that's true this is a ternary operator so it's it's if it's true this is going to happen if it's false this is going to happen so if the key isn't the target we are going to return that key else we are going to return 37. so look down here we have the the variable p and then we're going to make it a proxy we're going to pass in this empty object and then we're going to put in this handler so we can now assign things to just like a normal object p a equals 1 p b equals undefined and now if we consult dot log this things p to a and p that b well p a is one so it should give us one p that b is undefined so it should give us undefined but then look at this next section of the log c and p well there is no c and p so and then we're going to do p dot c there is no c so let's see what happens let's run them and you can see um it is get for p to a it's giving the one and then p b is giving the undefined and c is c it's checking to see if c is in p there is no cmp so we get false but then when we try to access c dot p uh it's going to give us 37 because of the the proxy handler up here now just to kind of make this just to show you one more thing if i um comment that out and i'm going to put bar p equals and now i'm just going to make an object without the proxy and if i run that so it's going to give you undefined so without without the proxy when i do p.c it gives you undefined but with the proxy instead of giving you undefined it's going to give you 37 so proxies just allow you to to make it so other things can happen instead of what would normally happen when you're working with objects let me give you just one more example i'm going to scroll down here to example two and proxies can be used to help validate data that you're passing in to the object so before i look at this validator which is the equivalent of the handler up here let's look at how we're creating the the object let person equal new proxy with an empty object validator and let's see how it validates because we're actually trying to make an object called a person so and we're trying to set the age of the person so before we were using the method the get method now it's the set method so when you try to set a value of the object first it's going to see if the property you're trying to set is the age and then if the type of the the value that means if the what you're pushing into the age property is not a number or if it's not a value console.log age must be a number and if the value is less than or equal to zero console.log h must be a positive number let's just make that less than zero because we'll your age can equal zero and then after that happens it's going to assign um the object which is person the property which would be age the value of what you set that and that's going to return true so let me um put in some more code and give you this example so if we try to assign person.age to equal yang let's see what happens it says age must be a number because that's not a number if we try to make it negative 30 let's see what happens we just look at the bottom age must be a positive number because that's a negative number however if we do person.age equals 100 which is something that that it can be um it's going to say agency a number h must be a positive number but it doesn't give you any extra warning when you put h equals 100 and then i'm just going to do console.log person.age i'm going to clear the console really quick and run that and then it's going to console.log the 100. now in this specific example even it's still assigning the the proper to the value so like for instance if right under it says personal age if i say console.log person.age and i run that see it's still going to log the word young but instead of in an actual program you wouldn't put console.log here you would make this an error and then it would never get to the line down here where it assigns the value but i just did consult along so you can see what i was doing here thanks for watching my name is beau carnes check the description for links more information please subscribe and remember use your code for good