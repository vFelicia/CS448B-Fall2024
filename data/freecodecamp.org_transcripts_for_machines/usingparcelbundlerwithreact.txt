hi this is nick karnick today we're going to talk about using parcel which is a web application bundler that offers blazing fast performance with zero configuration let's talk about some of the features parcel provides parcels blazing fast bundle times are accomplished via worker processes that use multiple cpu cores during builds rebuilds on the other hand are even faster because it uses the file system cache it can automatically bundle all your assets and has support for javascript css html file assets and more all without the need for plugins it also supports automatic code transformation using babel post css and post html parcel can split your code without any configuration it uses the dynamic import syntax to split the output bundles and you end up loading only files that are needed during the initial load it also supports hot module replacement without any configuration parcel will automatically update the modules in the browser as you make changes to your code another useful feature it provides is friendly error logging parcel prints syntax highlighted code frames when it encounters errors so you can pinpoint the problem let's dive into some code first let's create a new npm project then we're going to install the react in react dom packages followed by parcel bundler notice that the name of the library is parcelbundler we need to install it as a dev dependency in addition you also should consider installing it as a global dependency with the dash g attribute so that you can run the parcel command from the command line i'm not going to do it on my machine because it's already installed globally but once that's ready what we could do is create a source folder with an app.js file and create a functional react component here first i need to import react from react followed by the react dom module then i'm going to create my app component as a functional component and return a div with an h1 tag with hello world as part of the text there i use the emmet syntax to generate this next we're going to render the app in the dom using react dom dot render and we're going to pass it app followed by a link to the root element which we will create next in the index.html file i'm gonna give this a title real quick and then let's create a div element with the root tag again i'm using the emmet syntax and we're going to create a script element with the source attribute that points to app.js all right let's go ahead and run this i'm going to clear the console and type in parcel and point it to my index.html file notice that it starts building some of the internal dependencies and packaging it and it's done in about three and a half seconds it runs on the default port one two three four on localhost so i'm going to open that link in the browser and there you go we have our hello world react application running in a matter of minutes using parcel with no configuration now let's go back to the app.js file and update our title here and call it hello parcel world and i'm going to save this and the moment i save it the application gets rebuilt much faster this time and hello parcel world shows up on the right as well that's using the hot module replacement feature in parcel now notice a couple of folders that have been created here there is a cache folder with a bunch of files that parcel uses internally so that it can rebuild much quicker in addition it creates a dist folder by default which contains everything that is public facing so our index.html file is present there with a slight modification parcel replaced the pointer to app.js with the bundled app.js file in addition there's also a map file which is useful for debugging purposes and as used by the browser so parcel has done all that work for us with zero configuration next let's go ahead and add an app.css file in our source folder and we'll give our h1 tag a color gray i'm going to save that go back to app.js i simply need to import app.css and when i save notice that parcel built it and if i were to refresh the project here i don't see my changes here and that's because when you add new files you need to restart parcel so i'm going to kill this and then rerun parcel source index html and it rebuilds everything and it doesn't connect to the browser automatically so you have to go back and hit refresh but the moment i hit refresh notice that the text shows up in gray let's go ahead and add an app.scss file i'm going to define a variable called color and give it a value black then we are going to set this value on the body background color by referencing dollar color and i'm going to save this followed by referencing it under the app.js file and notice that parcel is installing node sas and it's pulling in all the dependencies that it needs automatically and it's going to build that scss file for us and since it's set up to integrate with css we should see the background color change on on the right and that worked this time without a restart because internally parcel had integrated with the css loader now let's add a reference to a logo real quick i'm going to pull in a logo file from my other screen all right we're going to copy it under source and let's reference that file as logo from dot slash parcel logo svg now the moment i save it project rebuilds and nothing happens that's because we haven't added a reference here i'm going to add the image tag and point the source to the logo file that was referenced above and hit save here and voila we have the svg logo loading without any configuration we have created a very basic react application with a reference to a css file an scss file an svg logo and we're using the es6 syntax and we did all of that within a matter of minutes without any configuration that's the power of parcel and it's going to make webpack obsolete before we wrap up here i want to show you one more thing let's say we wanted to use the destructuring operator for props that are passed in and we assign it to rest if i were to save this notice a couple of things are going on here first we have an error message to the right where parcel is telling us that it does not understand what those three dots represent that's because babel does not support the spread operator by default so we need to import one of the plugins for babel so i'm going to install as a dev dependency babel plugin spable dash plugin transform dash object dash rest that spread that's pretty long for a package name so let's hope that works now that's going to import the package and the next thing we need to do is we're going to create a dot babel rc file parcel will read that file if it's available and we want to set the plugin plugins property to utilize the transform object rest spread plugin so i'm going to go ahead and save that let me clear the console here and we're going to restart parcel and notice that it's built now because we stopped parcel we need to refresh the page here and voila now we have the ability to use the destructuring operator so that's how you would introduce configurations as needed all right that brings us to the end of the video hope you enjoyed it if you have any questions or comments write them below and subscribe to my channel to be notified of future videos thank you