learn how to use next.js to create full stack web apps in this course you will create a project that also uses mongodb and apprite a test chowdery developed this course hitesh is a software engineer and a popular technical course creator let's get started hey there everyone my name is hitesh and I'll be your instructor for this really long and very uptodate next JS course nextges is an amazing framework which actually helps you to build a full stack application yes you write your backend in the next JS you write your front end in the next JS and don't you worry your back end is just because it is written in JavaScript it doesn't get exposed to the client side all the backend that you write in next.js is rendered only on the servers and all the front end that you write it that is getting rendered on the client side it's a fantastic framework to work with it it's growing rapidly like anything I'll walk you through with that but before we go further you need to know some things first of all I'll be your instructor my name is Satish and I make tons of videos on YouTube do consider checking out my channel as well in case you get some time otherwise no problem at all now the way I have designed this entire series of next year's videos is because next year's got a revamp there is now a new app directory the API folders and how we write the things so I wanted to keep everything up to date if you're watching any past tutorials they are either being made outdated or they'll not no longer good so we need to work on that now apart from this there are some prerequisite that you should be aware of it and there's a mindset also that you also need to be aware nexius is a framework so first of all understand that there are certain rules and regulation that you have to follow that comes up with every single framework and especially the file names how the directories are being structured how the file names are structured next.js is a file based routing system that it uses behind the scene so every single file name and everything which I've walked you through with quite in detail with the diagrams and everything so make sure you take care of that another important thing is next year since it's a framework built on top of react.js definitely it uses react so your react Foundation should be decent I'm not saying you need to be expert in that you will learn a lot of things on the go as well but yeah it's built on react so obviously you need a basics of react since it's a full stack framework I also expect that you have worked a little bit on the API building as well I don't expect you to be an expert in that but make sure you have decent basics in it because we'll be writing some apis we'll be creating some apis as well so a little bit Foundation is expected but do I don't expect too much you will understand everything every single code that I'm writing now along with this uh one more request that I have the way I have built this entire project is actually divided into two phases first we understand the next shares and do everything HandsOn means we'll be writing our own uh back end we'll be using mongodb and all of that and the second portion is dependent on some service we'll be using one service known as apprite which is totally open source and will be using their Cloud to actually see that how when their backend is being written by somewhere else how you can utilize those things in this case we are using app right but your backend might be in Java maybe Django fast API anything so that portion covers that now I expect and I also see that make sure you understand that authentication is really amazing thing and it's not like we are only learning authentication in this entire series see in the authentication you collect some data from the user and then you send this data to to the to the back end your database this is exactly what you do when you're building any other model your product category everything so a lot of people think that authentication is different to do app is different in this case I have merged it all I've gone through with all the complicated cases that how you'll be collecting the user data in this case the sign up data I will be sending it and making a connection on the mongodb send the data make some queries filter out the data collect this so this is fantastic also there are two videos which are optional but in case you are not aware of it I'll also walk you through with that so make sure you understand that part so in this entire series I haven't actually walked you through with like apps absolute scratch because we already did a live stream here I don't know an xjs live stream which was almost around a one hour of live stream where we went into the documentation of next year's how to read the documentation how to study it how the file rest file based routing works the error files how you can have the middlewares and all of that so this actually covers all of that in the series itself I have actually skipped that part that's one thing the second thing is since it's next year's there are some Basics that you need to know especially like what is CSR SSR the clientside rendering server side rendering incremental rendering there's some jargons which are absolutely hundred percent Theory so I've already created a video about it so make sure you simply go ahead and check it out this one here I have not included them in the series because I thought that's too optional for this one and we'll be starting the series fresh every single code is available on GitHub as well so make sure you check it out as well so that's it now let's get started with the very first video let's start the Journey of the latest next.js hey there everyone hitesh here back again with another video and I would like to welcome all of you into this really long and hopefully really long next JS course I wouldn't be calling it as the next year's crash course because it's not a crash course it doesn't just give you overview but it's a real world production grade application that you can deploy and can use in the real world this application is specially designed in such a way that it provides you a path to learn nexjs absolutely from scratch I'll give you the prerequisite as well but the goal was not to just teach next years but to teach it in certain way that you feel absolutely confident about building application using nexjs I want to lay down the entire architecture of nexgs in such an easy manner that you feel that it's like a walk in the park no longer afraid of being app directory and Source directory and all those jargons you will be able to dive deep into the actual documentation of the next shares if you find any problem you will be able to tweak it out now this application is decently complex so we need to pick up a tech stack I will choose that I will also give you the prerequisites and everything that is required I'm pretty sure you are excited to build this application with me this application one more very important thing this application will lay as a foundational block of some of my upcoming tutorials in the future as well as if you are trying to make any application which is really really complex in next year's this will lay down a solid foundation for you so everything is all set up and I'm pretty sure you are all excited about getting started with the next shares along with me this is going to be one of the best ride and again trust me you will have so much of confidence that's my goal bring confidence in you so that you can build application and again even if you are not that much confidence in building a full stack application no worries I'm here I'll walk you through with each and every word that we are going to write no copy pasting of the code we'll be writing everything down and I'll explain you every single logic that is required for that so I hope you are excited for that now first let me tell you what are the tech stack and what are the prerequisite for that let's start with the prerequisite now this entire next.js application is built in typescript but again if you are not much familiar with the typescript that is totally okay I am not using any a crucial part of the typescript which is making it just for typescript people if you know JavaScript that is also fine you will be able to understand hundred percent of the code so there is no too much higher dependency of the typescript if you know it that's great otherwise I do have a series on typescript as well you can watch that otherwise it's not that much of a hard and fast requirement on top of that nexjs is a framework which is built on top of a library known as react.js everybody's favorite now react.js is amazing but I don't expect that you have 100 knowledge of react.js if you know how to just use a simple user State use effect and just can write some buttons in next year in the react.js that is all that is all but if you don't know even that much that's also totally fine I'll still try to explain you some of the bits and pieces of it but I would certainly say that the experience of react.js would be super helpful in this series and that is it now I don't expect you to have too much knowledge on the back end part I just expect you have heard about some of the backends and stuff this would be also a great starting guide for you to understand about the database that we will be using which will be mongodb in this case everything that we are writing in this in this entire example and this entire app is fully productionable so you will be able to put all of your application into the cloud and you will be able to serve the users and everything not only that that this application will be available to you on the GitHub not just to Simply watch and see it but actually to contribute in that I am deliberately not touching too much on the styling part of this application I'm keeping it very raw so that you can bring in your Tailwind experience and can contribute in this repository you can the functionality of this app will be 100 working but the UI part you can modify it as much as you like I'll keep it openended so that you can focus more on this remember this is a Nexus course not a Tailwind course so I'll keep your Tailwind aside on totally you so that you can bring your knowledge and can contribute in this application remember don't fall into the tutorial hell you need to contribute something in this as well all right I hope you're excited now bringing in about the tech stack side that what is the text tag that we'll be using let me walk you through with that so the text tag that we'll be using is absolutely simple there is nothing too much to be scared about that first thing we obviously will be using next.js together we'll be reading a lot of documentation so that you can actually learn that what it takes to read the documentation bring the code from documentation and write along with it so this is the first thing that we'll be doing and we'll be using App router absolutely latest as modern as possible we'll be firing up an npx create next app later so we can pull in the latest of the next JS apart from this for the database side we'll be using mongodb and we'll be using mongodb in the cloud the only thing that I don't like about it it's too white it should have a dark mode but sadly I couldn't find it so we'll be using and creating a new cluster I'll walk you through from the scratch that how to create a database and how to use it and apart from this since we are building up an authentication system I'll walk you through what we are building in a minute but we will be needing some kind of a mail service now one of the production grade mail service is a mail trap I'm not affiliated with them but I have been using them for a while for teaching purposes I found it pretty interesting instead of just exposing your Gmail and firing up email from that that's not a good idea use professional tools and mail trap is one of of the many such tool that you can use so I'll be using this one so apart from this I'll be using a little bit of excally draw everybody's favorite to just draw some diagrams and explain you the stuff all right so this is all what we'll be doing first let's dive into the theoretical part and what we are about to build so what we're about to build is pretty simple so first and foremost we will be having at this screen and this one is going to be a simple sign up screen now this is not going to be any ordinary sign up screen in the world of next year so you obviously cannot just rely on the frontend part we surely will have frontend part we need a backend part as well I'll talk about that in a second so now apart from this we'll be having a simple login screen as well so what we're building basically is a user authentication system now since in the latest a lot of upcoming tutorials will require this authentication system so we have a proper course here which explains you everything about what happens what goes in the authentication system as much as in the core way possible all right so we have a sign of have a login and apart from this once we have this sign up and the login we will also have a profile section now this profile section will have a couple of pages again we'll not focus about what we are serving on the profile we are more concerned about how we can actually reach through the profile if there is a unique ID with the user associated with that how can I grab that unique ID from the URL there's so much to explore about this so this is going to be a basic application where user will be able to sign up login and profile that's all but there are also cases where user might also request you couple of more features so we'll be designing them I'll walk you through with the scenario of how we can actually go ahead and reset the password or maybe also verify so user account needs to verify as well so we'll be working on the functionality of reset and verify once you understand even one part of it the next part is super easy to understand I'll walk you through with that scenario as well how to reset the password how to verify the user so all of this functionality will be taking it down it's absolutely a core of any application that you'll be building so we'll be working on that part and after this I'll keep it a little bit openended so that there is enough space that you can contribute in that part all right so hope that is good and I'll just write the tech stack here as well so that we don't uh get any troubles or problem in it so we'll be using next year's I know that's very small I don't like even the small fonts and stuff I always keep them Big Easy to watch in the tutorial for the back end part we'll be using uh mongodb so we'll be going with the mongodb now of course we'll be needing a few of the stuff since we are on the mongodb we'll be going with the Mongoose we'll be going with the node mailer as well and couple of more things will be there like I'll be using react hot toast and all these things I'll not configure them properly I'll leave them as a simple exercise for you but don't worry we'll get the enough of the messages and everything for us so again it will be super fun to work on with that all right so this is majorly The Tick stack that we'll be going through so I think that is it that is all what will be going of course I'll walk you through how we can configure the mail trap and stuff now let's first start not not by creating anything but actually to understand the theory about it now the theory is actually very very amazing here so let me just walk you through so first and foremost just understand that everything in nexjs has changed any tutorial that you're watching which is older is no longer going to work so you need to really understand this part now everything that you work on with this now actually goes inside the source directory so consider this as this is my source directory so this is the source directory where you will be working inside the source you are going to find that there is a directory known as app so this is our app let's explore this so this app directory has a couple of things inside it the first part in fact if I bring this app directory here and try to explain it that how does this app directory actually goes this app directory can easily be divided into two portions of it the first portion goes here second portion goes here the first part you can easily call this one as backend and yes there will be a lot of people who will try to explain it with the meaning of this is a server component is it a client component yes we'll go through with that we'll understand the difference of it but not right now they are much more easier to understand in this way and context so we have this back end and we have got this front end so this is all that goes into this app directory and this app directory is obviously a part of this source so go ahead and just let's just go ahead and have an arrow just like this so we have this Source but apart from this app you will also find that it's not just everything goes into the app directory some things goes outside of the app directory as well for example most of the time when I design my models you can absolutely place these models outside of the app directory not just the models I will also keep some of our helper files for example I want to shoot an email I want to verify my tokens JWT tokens yes we'll be using them so how that works we'll be keeping them outside as well all right this is the whole gist of everything let me summarize that quickly now in the latest of next.js you'll find everything is inside the source directory and inside the source directory you have this app app has two portions of it the back end part and the frontend part of it but it's not like everything goes inside the app directory there are other files you can obviously create it like models helpers components there's so many of the files that you can create which can rely and reside outside the app directory now more notoriously you will see not notoriously but yeah more of the time you'll see that the backend portion is actually written inside the API folder and yes the naming convention is super super important in the next JS even a slightest wrong thing in the next in the naming convention will just create a havoc in the folder remember this is a framework whenever we talk about framework There are rules and regulation you have to follow usually these rules and regulation comes with the variables names or maybe uh how the process needs to work how the response needs to send how the app directory should work out so all these things need to go hand in hand now you'll find a common thing as well that whenever you are writing most of the part in the apis in the back end you are using file name as route and in case of the frontend part you are actually using the file name with the name of page it could be page.tsx it could be page.ts usually TSX and Route is usually route dot either JS or either TS whatever you are using will be using typescript so we'll be calling it as a route dot TS and here the page so I have now this diagram makes it so much clear that how things are going to go and how things actually work now apart from this there are certain files which also needs to be inside this app directory and how this actually goes and work on now one of the most important thing that you'll be looking up for is notice this this is what the meaning of app but hey there is a very common file which you'll be using a lot which is known as middleware where does the middleware looks like it's inside the source directory but it's not inside the app directory yep that's how usually the configuration is there are other files and folders you can have middleware just like the middleware is here you can have your customized error Pages lots of other Pages which I'll walk you through with the documentation as well you need to put it a little bit outside so let me walk you through with the documentation as well so let's just say we want to understand about the middleware right now we don't understand too much the working part of it but if I go ahead and look for it notice here this is the middleware and here's the convention use the middle page and notice here for example the same level as page or app or inside the source if applicable so as I told you it's actually inside the source everything is inside the source but it doesn't need to be inside the app directory this is where it confuses a lot of people but don't worry I'll walk you through with every single thing how to read the docs and everything how to even see and utilize will be utilizing this exact piece of code so you don't have to worry even a tiny bit for that part all right so this is all the basics that we have done and we have understood the basics meanings of how the things are being done let's go ahead and create with that I have already created an account on mongodb Atlas you also need to do this so let's go ahead and start I have actually removed everything from scratch we are going to be getting with there so just click on build a database and I'll be using AWS but I'll be using free one I'll not pay money this is YouTube I'm teaching for free so I think this should also be free uh so I'll be choosing a location which is nearby to me and where is nearby to me I think Mumbai is the nearest looking for me and yes I am from India so I think that's it and create this this usually takes a couple of minutes to spin so go ahead and be a little patient about that I also want to create a user and a password so I'll actually do this later on and connect from IP address and all of this so we'll be doing that manually so I think we'll not use this quick start of the security guide I'll just walk you through this is actually way better to explain if I go ahead and explain everything in a much precise and easier way so there we go our cluster is created now first thing that you have to do is go up here and let me just go ahead and show you this so all right I'll just shrink myself a little bit move here all right so uh first thing that you have to do is look up into this security thing so this security thing is super important first go ahead and click on network access here this network access simply means to say that from where your application should be available your application is maybe Universal your database might be in AWS should they talk to each other or not so in this case I have given access to all of this so you can just go ahead and also click on ADD IP address you can either add your current IP address but since you are not on a permanent IP your IP as soon as your router shutdowns and reboots it might change so in this case just for an example this is not a production level setting we can go ahead and say 0.0 dot 0.0 and slash 0 which means I want everybody to be able to access my database if they have correct ID and password again there is one more layer which is ID and password so that needs to be there I can confirm this and this will add there's nothing to add then go ahead and click on database access that who can access your database right now we don't have any user so I'll click on add user and I'll add a simple sample user with the name of YouTube and I'll enter a password and again you really need to be careful about what you are using as your password if you use any special character that might be URL encoded or might create some issues in that so be careful about that the usual practice is to use numbers and letters that's all and what we're going to do is we will be also adding a builtin role so click on that drop down and we'll be selecting read and write to any database right now and I'll just click on add user so this will simply add a user which can actually talk to any of the database now that is it that is all you have to do now click on the database and all you have to do is click on this connect and it will give you this Compass click on the compass again and this is the URL that you want to copy so just click up here it will copy it now notice here carefully that if you go ahead and carefully look onto this one this actually gives you the username but doesn't gives you the password so password is something that you have already given there so go ahead and use that one I'll just close this one that is all the requirement here for having this now let's just go ahead and move on to the next JS home page and we'll be creating a new project here so I'll just go ahead and open up a folder so this is the folder that we are using I already built this app obviously otherwise why would I be recording the tutorial so I'll be calling this one as auth next JS and this one is for YouTube so I'll be just grabbing this one let me fire up my vs code there we go vs code here we are and I'll just go ahead and just fire this up here and let's create an xjs app all right so this looks good full real estate all right let me go ahead back up here and just click on this small command which says npx create next app very nicely hidden there I'll just go on to vs code and we'll start that so I'll just go ahead and open this up and just paste it up here and I guess the dot command still works if I want to install everything here let's go ahead and try this out and I'll just put up a DOT to just create a project in this same directory and it will ask us a couple of things do you want to use typescript obviously I want to use it let me also move myself a little bit on to the perfect place all right looks good looks good okay do you want to use es linting for this one so obviously I want to use es linting so I'll just go ahead move it up here and let me just all right just give me a second all right so we want to use eslinting uh yes we want to use eslinting uh do you want to Tailwind yes maybe you can contribute with the Tailwind a little bit so I'll just go ahead and yes do you want to use the source directory with this project uh we want to use the source directory or we want to use the app directory now this is where a lot of people get confused yes we want to use Source directory because as I mentioned up here the source directory is now everything remember the source yep source is everything and this will also give you the app directory so moving back yes we want to use it you want to use app router a 100 you want to use app router this is the way forward so anything that you're learning from now onwards you want to use app router I'll just hit enter would you like to customize the default import Alias I usually no but I'll show you that if you write yes what actually happens if you go ahead and select yes it gives you two options you can use at the rate or you can use or asterisk for showing where is the home of this home directory so we'll be using at the rate which is also the default and then it will just create a simple project in your application in your folder not your application so this doesn't usually take much of the time should be really really fast and yeah mostly other things are installed all right so there we go okay let's clean this up first let's understand the directory structure which I was telling you so notice here in the source we can see there is the app directory and inside this all the files are there we have the page.tsx which is always the common file there is also a layout which is also a wrapper and inside the layout we actually get the page so notice here if I just show you this is wrapper so everything that you are passing in as a children the whole job of this is to just render this if I go ahead and move it to next line it's much more easier to understand so this layout is nothing it's just a wrapper maybe you have a common navigation bar maybe you have a common footer so all this can be actually injected into the layout and then children whatever is being passed on it just renders it as it is so that's the basic meaning of how the layout actually works base.ts is the way how we deal with the frontend part of it and most of the client side or the client rendering will be doing through this I'll show you the difference between the client side and the server side in the next JS you don't have to worry in that part absolutely simple and basic I will go with that so we'll close this one this is the basics of it now inside this app directory there is so much that you can go ahead and work on with this and we will surely be doing that in just a second first let's open the package.json and you can see in order to run this we have to say npm run Dev which will run the next Dev which is let me tell you is painful low painfully slow not low painfully slow application to run so if I go ahead and say npm run Dev this looks like it it's faster but it's not so I'll just copy this and go back on to the browser and I'll start this and you will notice every time it takes build the first build is painfully slow but this is how you get your application all right now it's not just that we will be just working with these dependencies only we actually have some of our own dependencies as well which will be super helpful for us in the future so we'll be first installing them installing them is super easy you can just go ahead and say npm install the first package that we'll be using is xeos yes you can use fetch as well but I want to give you the taste of how things actually work in the production but feel free to use fetch there is no such hard fast rule then we have decrypt decrypt JS now bcrypt JS is a library which use is used commonly to encrypt the stuff I will be encrypting our password obviously we don't want to store the clear text password in our database not only that for creating the tokens as well if you remember I told you just a few minutes ago that hey we'll be using this middleware models and helpers and they will be useful to reset and verify the tokens we don't want to send ABCD we want to send a really long strings which is encrypted to the user so for that we'll be using the bcrypt JS it's a super simple and amazing library for this one now apart from this we'll be sending the tokens and securely we'll be sending it not to be stored in the local storage but we'll be sending and securing the cookies from the server side so that it doesn't get manipulated on the frontend side for this we'll be needing a Json web token so Json web token this is the library that we use for that now after that we'll be using node mailer this is one of the most simplest library to shoot out an email either you want to send it or shoot it out from the Gmail or if you have something else like AWS maybe Bluehost whatever you're using you can just go ahead and use the node mailer for that now another Library which I'll not be setting it up but I'll give it to you for as an exercise is this react uh hot dose this is one of my favorite Library which works really amazingly well it actually gives you small popup messages that hey just a user successfully signed up a user didn't sign up so we'll be using that I'll not be using it so you can skip it at this moment but it will be super good for you to contribute further down the road all right so I guess this is all that we need as of now if we'll be needing something else we can just oh I forgot one guy which is Mongoose how we are going to talk to the database now Mongoose is a library which helps you to talk to mongodb it's a wrapper around mongodb drivers makes our life a little easier so we'll be using that now one thing a lot of you who are coming from the backend development might be noticing I'm not using Express you don't need it you don't need it in the next years this is all what we'll be using so go ahead and install that if we'll need any more Library we can go ahead and use it later on I think this is more than enough for as of now and further down the road let's go ahead and work on with this okay so a couple of things I'll mention it straight forward I'll be creating couple of directories first and foremost so that you get a feel of how the directories and all of this is layout because notice already you can see the source and then app then all the things are inside that but it is too difficult to see I'll show you in the part here so if I go ahead into next.js notice inside the source everything is inside the app but here the structure the directory structure of the vs code might confuse some of the people so everything is inside the app all right I'll show you more of this as well now let's go ahead and create couple of more folders and directories and stuff like that first and foremost now click on the source very carefully click on the source and create a new folder and we want to create a folder known as model or you can say models both are the same so it helps us now to actually see that oh now we can see that everything is inside the app and there is a model directory as well we obviously will need some helper as well to shoot email and stuff like that so it's a good idea that we create these helpers as well again this was not going to crash your app or anything it's just a folder in directory structure all right now we have these application there's a lot more that you can go ahead and create like that so we'll be using that part as well now one of the most important thing that we'll be using is the environment variables obviously our database strings cannot go in the clear text format they need to go somewhere secure so that when we deploy them in the production they actually are secure there as well so one neat trick is you can come here into the vs code and just double click here and it will automatically create a file in the root of the directory that's where we want it it is dot EnV these are your environment variables and you can access them easily and in the production as well in every single hosting these environment positions are there that where you have to inject them in the digitalocean AWS everybody has these secret managers we'll come back on to this one right now we don't want to add anything like that I'm just creating a folder structure which can help you to do all these things all right so this is the basics that we have that everything now notice here everything is still inside the source as I mentioned then we have this app and then all the things are here now one more interesting thing which confuses a lot of people is majority of your file will go into the app and I told you just here that inside this app somewhere here it is your backend also goes your front end also goes so we need it's time that we verify that that how does that works so inside this app I'm going to go ahead and create a new folder and I'm going to call this one as login so login is going to be first now I have to ask myself before creating these folders am I creating it for backend or front end I am creating it for frontend so if I'm creating it for front end I know I have to call it as page yeah that's that's the page we talked about so I'll go back and inside this I'm going to go ahead and create a new file and I have to call it as page dot TSX the name is super super important call it something else and it will crash up everything here that's how it works so now that we have this page.tsx now it's time that we simply go ahead and just simply have the basics of a simple hello world kind of a thing or just have it a simple test or something like that so I'm going to go ahead and say export and default export default function and we'll call it as login page just like this now inside this login page obviously you want to return something to just say hello world or something like that right now I'm not worried about the functionality so I'll just go ahead and say hey return and what do I want to return a simple div and which will say login and a Dev close that's it that's all what we are doing now obviously I would love to just properly align this this is really really bad I'll enable my uh oh there we go so I need to just have this now no Auto prettier is coming in I'll make sure I enable that so that doesn't bother you that much but I have to just save it now the moment I save it that is it I don't have to worry about any route or anything I can go back on to my next app and I can simply go ahead and say slash login and that's it probably I didn't started my server yeah my bad so we'll just go ahead and say npm run Dev and there we go our server is up and running all right looks good looks good let's go back on to the browser and hit a login route again and this is painfully long so we can see that this is a login of course you can use go ahead and use your skills like you can go ahead and add a class name then you can go ahead and say Hey I want to have something suggestions please Flex okay no suggestions I'll just leave it I'll just add a simple classes here so class name we'll just go with the text Dash Center text Dash white I was expecting that it will give me all these suggestions and we'll just also say text Dash 2 Excel yep so that at least we can see that there is a nice login there should be text Center as well align Center yeah there should be text Center all right anyways we'll just figure out the CSS part little bit later on but as we can see now can I go ahead and use a sign up here nope I cannot this is a 404 page by the way you can customize your 404 page as well you can read the documentation a little bit and you can customize just read about hey I want to learn about 404 not found.js so you can create a new file there with the name of just not found as you can see app blog not found so wherever your app is inside the blog and this is where you can just create a file and customize this one I'll not do that as of now I just want to show you the basics of how things are working now let's try to crash this app so let's just say I understood the basics of it but I didn't understood truly of it so I'll just go ahead and again click on the app create a new folder you always have to create a folder for every single route I'll just go ahead and say sign up and obviously it's engineering that we try and fail the stuff as well so let's just say I call this one instead of the page I just call it as login dot TSX what happens in that case again we are going to go ahead and say export uh default command suggestions and we'll call this one as we should call it as sign up page that would be more cool to crash because we are in the sign up so let's just call this one as signup.tsx so now we have export default and I'll not call it as login page sign up page there we go and inside this we're going to go ahead and say We'll return what do we want to return a simple div with the flex it's probably not we'll also have a simple sign up and we'll have a div just like that and again of course this needs to be there all right so we're returning this now let's just save this there is no problem here it says compiled successfully no problem there but if I go up here instead of hitting the sign up now if I let's try login First login works and then I try sign up nope it doesn't work so now we understand the importance of the file and naming convention because it's a naming based routing so I'll go ahead and turn it up into page.tsx and what you're going to notice as soon as it compiles all you got to do you don't even need to hit the reload so it works out of the box so this is how the naming convention and everything works up here all right let's go back and try to explore a tiny bit more into that how the things are going to work all right so as I told you everything is inside the app and there's one major portion of it so we have talked about how the front end part will look like and I told you you can also work with the back end part of it but the back end part needs to be inside the folder of API let's go ahead and do that so inside the app we'll create a new folder naming convention cannot emphasize it more API and inside this API this is way how you actually Define your routes so for example let's take this API and in this API the way how you're going to make your folder is going to be your API route so for example if further inside this API you create a folder or maybe a couple of folders let's go ahead and work on with that so you created a folder named as users maybe for an example and you also created a folder name as a what else home so you can go ahead and create and this will Define that how the routes are going to work so API slash users and similarly API slash home so this is how it actually works absolute basic there is nothing too much complex about it but this is how it actually goes I'll go back and now inside the apis I want a new folder structure to be followed which is known as users so obviously my route is now not just the API directly but API slash users and then whatever the file folder how am I creating and as I mentioned inside this API just like in the front end it is exactly almost copy paste but the file name is just route so what we learned here is if we want to create a sign up we have to create a signup folder first and inside that folder we have this page.tsx similarly in the users also we need to create a folder first now this folder can be anything sign up anything whatever you like so I'll just go ahead and create a sign up and once I have this sign up now inside the sign up you have to create a route that is Route dot TS of course it's not X because it's not a component now just to make sure you understand it more proper inside the users I'll create one more folder that will be login because obviously anyhow I have to create login route and I'll just create a new file and that will be route dot TS so this is now a proper folders and structure that we have that we have this login API route we have this sign up API route as well this is now finally a complete guide that how actually the folder structure and everything is is laid out this is absolute basic uh but there's couple of things I cannot just go ahead and work on with sign up I cannot go ahead and work on with login because these apis needs database connection and this next.js is an edge run framework so there's always edged runtime so it doesn't stay connected with your database every single time there is a database call you have to actually call your database make a connection with it and then you talk to a database send some file receive some file all these things actually go ahead and work through that now in order to actually have this you need to have some configurations so I'll just close this app notice here we have helpers outside we have models outside just like this we can also have our database connections outside as well and there are a lot of ways how you can go ahead and do this so at least let's go ahead and connect the database I'll first go into EnV and I'll create couple of environment variables so that they are helpful for us and later on we can use them so first and foremost we'll be having this underscore URL or URI whatever the way you prefer I'll also be using a token underscore secret that could be any secret I'll be using something like next Js YouTube whatever and we'll also have a domain this will also be useful later on so I'll just use an HTTP local 3000 that's my domain name this will be helpful for me when I'll be shooting some emails so I obviously want to click on the and have the localhost so this will be useful later on now let's go back on to getting the string so let's go ahead and connect compass and just literally copy this come back here paste it up here and all you have to do is add your password here so obviously I'll be adding my password but behind the scenes so once this video gets over this part of the video gets over I'll add my password so I'll just say add my password so obviously I'll not add it in front of you otherwise I don't want to mess up anyways it's a test database but still okay so I'll just save it and we'll try to connect with the database I'll walk you through with the connection at least the code part of it now notice here we have app helper modules so similarly we'll have the DB config whatever the name you want to give it I'll give it a name of dbconfig I think that makes sense so DB config yeah that sounds good to me now again inside the DB config I would love to keep uh I can just actually close all this close others yeah close everything all right so inside the DB config come on yeah now inside the DB config I will just have a dbconfig.ts file let's go ahead and create so DB config.ts in this part the naming convention doesn't really matter much so you can just call it whatever you like it is not going to bother you anything at all in order to connect with the database let's get some more screens real estate the first thing is who actually is capable of connecting or talking to mongodb it's Mongoose so we're going to go ahead and have Mongoose and that Mongoose will be coming up from Mongoose and then we'll be exporting this method as well and it obviously needs to be a sync we are talking to database and as I always say database is always in another continent so things needs to be a sync so I'll just go ahead and have a function just like this connect we'll call this one as absolutely simple connect and we'll wrap this up into try catch block so I'll just go ahead and have the try try catch there we go the catch part is the easiest one so first we are going to handle that part it's really simple we're going to have a oops console dot wrong and we'll say the classic the most horrific error which is something went wrong but we'll also go ahead and use the console log for displaying the error you can go ahead and use error.messages as well that's totally up to you no problem at all in that case let's try to get a string of mongoose connections so Mongoose dot connect obviously dot connect and this requires you to have just the URL now I'll not give the URL which is suggested me by the copilot I'll be using my own string and that you will see quite a lot in this entire Series so process.env dot um and again make sure you take the URL and name of the variable pretty accurately it is URL I'm using I should be using all uppercase to make it actually all underscore URI this one should also be domain so everything is consistent there I'll I'll simply copy this and we'll say manga URI now here's the interesting thing since we are using typescript there is no guarantee that this URI will always resolve but I know it will always so I'll just put an exclamation to make sure that hey I take care of it you don't worry it will always be available and that's it so all you have to do is this much now once you have done this much then you can actually grab a connection so we can go ahead and grab a connection and actually let's hold this into a variable so connection will be given to you by Mongoose dot connection once Mongoose has connected it will give you Mongoose dot connection the string will be available and based on this you can actually listen to variety of events for example one such event is a connection and every event is being listened by the word dot on now inside this you can go ahead and try the connected connected this is the one event and it fires a callback obviously so once I have this call back and I'll just go ahead and use it like this and we'll remove this yep sometimes these Auto suggestions are just painful but bear with me so we'll just simply have a mongodb connected successfully successfully yeah I would love that okay so this part is all done you can also listen to some of the errors in case you wish to so similar to that connection dot errors and you can just go ahead and listen to these errors just like this I'll come back here if there is any error you can just go ahead and say hey mongodb connection error please make sure mongodb is running then we can pass on error as a post process string and we can exit gracefully here so this is all that is required to go ahead and get connected with that and I'll save this one as well so there we go so this is the basics of it now the most important part is this connect needs to come in in almost every single place in the API because without the connect you cannot talk to database and every single time an API call is there you have to have to connect with the database there is no exception there is no option that is available for you this is how it works so there is no exception on that part all right so I think this is a really really a good progress that we have made about this application so far all right so this looks okay this looks good okay what else we can do uh next up now next up I want to do is actually I want to prepare my at least a sign up screen so that I know that there is a sign up screen and how things are actually going on working on with this all right so let's go into again I don't want to go into API backend part I'm not handling I'm handling first the front end part so this is my sign up screen I'll go into page.tsx and I will obviously import few of the things now one thing important that you need to understand from the front end part I need to grab some data and send it to the backend just like we do in a regular application in react application or maybe there's a backend in Django spring wherever that is you collect the information and make an xcos request or fetch request to that the same thing I have to do but there is a problem in the recent version of the next JS everything is a server component and server component don't have access to anything that is on the frontend side it's on server so the most crucial thing that you need to understand here is that whenever there is this dilemma between the front end part or the back end part you need to understand it very clearly that anything that's on server needs can access everything on the server side file system anything that's on the server frontend part if you want to take advantage of you state use effect anything that's on the front end part of it Windows location maybe you want to access the location the URL anything that's on the page that's on the client side and you have to explicitly make make your application as a client side cut it no confusion absolutely simple anything that's on the back end here's a simple hint most of the things in the API folder yep that's on the back end side that's default server component so that is that but anything that's usually outside not always but outside is usually a client component if you want to take some data in this case the sign up form we want to take some data from the user and send it on the back end so obviously that is going to be on the frontend side so let me walk you through how we can convert any component into the front end or the client component it's super super simple let's go ahead and go up here all you have to do is simply say use client just like we have used strict we can go ahead and say use client that is it one decorator and it is now a client component you can use all of your window object you can use all of your use date you can use all of your use effect everything yeah how cool is this all right so now we'll be needing some of the libraries and stuff so obviously I'll be needing something to redirect the thing so I'll be just going ahead and say Hey I want to import the link this is the next link okay I'll be also needing react as well so I'll be saying that hey let's go ahead and bring in react and from the react we'll be saying we'll be using a couple of stuff but as of now let's bring in react only I don't know what we'll be using and we will be using because once the user is successfully signed up I want him to redirect or get redirected to the home page for this I need to use router here's a common thing which a lot of people are going to make mistake the router is changed in Nexus in case you are coming up from the previous routers I'll go ahead and say I want to use router so this is the way how you bring in use router and this router actually notice your suggestion it's absolutely wrong this suggestion doesn't work you cannot bring it like this and let me show you how you actually bring it you have to actually bring it from next come on I can write it next slash again this suggestion is also Wrong by default even your GitHub copilot every suggestions these are all wrong because this is the latest version of it this one is now coming up from navigation yep use router not user router use router this is the one I want to bring in use router is actually coming up from navigation and I tried it while building the application every single time the suggestion I relied on it it gave me the wrong suggestion so maybe it will take some time and last but not least we'll be using xeos so I think we need to bring it like this xeos and these suggestions are usually correct not this time again suggestions are good but they always don't work always so we'll be just going xcos all right so this is the basics now you'll also get these squiggly line because a lot of time a lot of models Mongoose xios this is perfect installation there is no problem in the installation but typescript is one such thing which requires type definitions as well and since the axios types are not defined we have to actually explicitly install it I don't remember them always so always remember this you can click up here and then you'll get this bulb icon and you can click on it and you can say that hey uh right now it's for error for the unused input but it will also give you that hey install the dependencies or the types for it so I usually click on that that's how I actually go for it right now we are not using Xeo so that's why it's getting a little bit bothered so no no worries on that part okay how we are going to get a sign up now first and foremost we haven't designed our model yet but I'll do that very very soon so first let's go ahead and try on the front end part what user data you want to accumulate so I'll go ahead and say I will grab a user so so it will give me a suggestion hopefully set user react use date and I'll just go ahead and close it like that now what all information I'm looking up for uh maybe I'm looking up for an email maybe I'm looking up for a password of course and also maybe username so let's just say username that is all that is all the information I'm looking up for as of now and of course once a user actually gives me this all information there should be a method which does all the sign up thing so we'll be just going ahead and say const and I'll say on sign up and this method obviously will be talking to database so this needs to be a sync and there we go right now I have no clue that how this will work so I'll just keep a method as it is I'm not worried on that part so I'll just keep it as a test all right now right now there is nothing uh more in my mind I just want to have a simple divs here so that I can just go ahead and place it up here so I'll just use a little bit of my CSS that I have prewritten here so I'll just use that instead of this login and stuff so I'll just go ahead and give it to you directly there's nothing basic all right now inside this we are going to first have in simple H1 which says login and I think that should work a tiny bit decent let's see that if we are crashing our app or it's going good and we should be ah we should be in the sign up page so we should not be saying login we should be saying sign up that's better all right so our looks sing up all right sign up there we go all right looks very tiny but I'm okay with that now after this I'll be creating a couple of input forms for this I'll be starting with the label we just need to create one and then after that we'll be just copying and pasting so have some line break then let's go ahead and have a label this one is going to be HTML for not for email but I'll I'll edit that this one will be for username I'll First grab the username this one will be for username all right by the way we have we have all lower case that's nice we have this label up here and let's see how does that look yeah username not the best but I'll I'll work with that all right next up is we need an input now input field will have some other things ID username okay I'm fine with that type is text and the value is user dot username yep absolutely correct and on change absolutely perfect in case you didn't got it we are grabbing the event we are calling this set user which is a method a function responsible for updating my variable user so that's why I'm using here is set user and set user in which we are keeping existing user everything same and the username only is getting updated with the E dot Target dot value which is coming up from here absolutely simple uh no problem uh we'll also grab a couple of modes like for example it is not suggesting me anything but all right I want placeholders as well placeholder and I'll say username let's see how does that look decent not the best but I'll just work with that in case you want you can go ahead and add a class name we can add a little bit of padding of four there's some suggestion let's see if that suggestion uh okay not the best not the bad all right I think padding four is too much I'll just go ahead and padding one is uh two we'll go with the two we'll go with the two all right okay so this is just a decent as I told you you can use your Tailwind skills and just uh design this much better now the best thing about this is now I have to grab email and password so I can just go ahead and copy paste this so I'll just grab from here I'll make a duplicate of this one and obviously they made a mistake yep we shouldn't be copying and pasting till the div my bad and we'll just copy from the label to the input now we'll copy and paste better so we'll just go ahead and use multicursors username username username username username this needs to go on email let's see if we have made any mistake should be okay and then let's copy and duplicate this and this one this time will be password so command D command d control D also multicursor I love that password the text should also be password password and that should be it for majority of the portion username email password horrific form but it will work it will work now let's go ahead and grab a button as well so we'll just go ahead and say button just like this and this button will have class name ah I love that and what we're going to do is just have this button and we'll call this one as sign up suck sign up all right sign up button sign up here well right here okay a couple of more things we need in this one is first and foremost this signup needs to go uh somewhere so obviously we cannot just go like this so we need to have an on click suggestions please no suggestions on click yeah on click sign up so I'm referring to this method which I created above I don't know how this method works but right now this is all the basics also apart from this I'll use a link so link will go to a login and will say something like this this page will go like visit login I'm not interested about login page yeah that's basics so there we go now we have a sign up page looks decent and we have this username email password uh so right now I don't want this email okay so we got this one so password sign up everything is working nice we are happy with this this also is taking us to the login page which is not yet design but we can actually quickly design that very very uh Basics all part of it so nothing too much worried on that part as of now we are going absolutely good with that let's also try and do login also in this same video Also let's let's try that okay so I'll just go up here and we'll go to vs code okay this part looks good notice here how easy it was for us to actually Design This I'll go ahead and create copy all of this so copy this let's go into the login and page and let's go ahead and paste it obviously we want to change first the sign up page to login page that's the most important thing login page okay let's analyze this from top to bottom uh this needs to be client okay link is there react is there use router is there we are not using it but we'll be using it very soon to forcefully push the user to slash profile or something like that all right so this is what we have as a user we'll be grabbing only the email and password so this time it's a login so I don't need this field all right no suggestion please thank you this one is on login makes sense on login and then we are returning this sign up no it should be login and login all right and then we have this username is not here we are just email and password so I think we can just get rid of this very first and should be all okay yep all okay so there we go email is there nice and easy password is there nice and easy uh this one is obviously going to be on login did we ported anything else yep we don't want this on so this one is good we have got this one password is getting password value good good login here and what we can see uh visit sign up here we are not too much worried about providing a proper message to the this is not what we are going to do all right now notice here though all the error is because of axios but this is not going to bother anything this is just because of we are not using it right now notice here XC has declared but it's never used so don't worry don't bother this is just squiggly line warning I'm not going to do anything all right save this and let's see if I go ahead and there we go sign up is good and our login page is not good now it's good take some time some reloads common so we have some email and password and that's nice and we can visit the sign up page and yeah it takes a little time did we properly linked it looks like not yeah not this one is sign up so there we go small debuggings sign up there we go login sign up all right so at least we are able to do this much of the thing now not this much is not enough we need to do a tiny bit more tiny bit more uh I want to walk you through with One More Concept which will act as a foundational for a lot of upcoming things don't worry about these Reds I know these are bothering you but these are okay okay just like we have studied about these logins and everything we need to study about one more thing which will also be super super helpful for us which is known as how we can grab and build a profile for the user now notice here this profile is not in the API this is not in the backend part I'm talking about the front end part only so I'll just go ahead and say that hey app I'll create one more folder for you which will be profile and as you know in the profile I obviously have to create a page.tsx so page.tsx and we'll just go ahead and say export suggest me please suggestions no no suggestions hate that export default yeah now suggestions ah good I like that and we can just go ahead and say return give me something yep nice and easy and a profile and an HR and what else profile page okay I'll take that now I'm not going to take this much I'll just go with this and I'll just go ahead and wrap this up this div isions are good as long as you know what you are doing or what your application is trying to do otherwise you'll fall into the crap okay I'll just indent this a little bit so that it doesn't bother you that much all right so this is my profile page and as you all know this is super easy to work on with this later on we'll learn how to protect these profile Pages as well so I can go ahead and work on the profile okay profile page works absolutely fine but what about if I go ahead and move into the profile and type slash One how can I grab this one because this is a very crucial part of building the application how can I grab not just one but if I go ahead and write ABC here this is a common syntax you'll be doing this thousands of time there's a special syntax of how you do this in the next year so let's go back on to the code there we go so in any folder or any route where you want to grab this ID there is a special syntax in next.js right click on this create a new folder yeah folder not file all right and make sure you put this into square brackets in the square bracket whatever you want to extract whatever the object named remember we have this request.body similar we have request.params in case you worked somewhere in the next.js not next year's express.js similar to that you have to grab your ID it could be user ID it could be ID whatever you want it could be anything but it needs to be in the square bracket but for example if I go ahead and say ID ID this is not alone enough this since is a folder and every folder on the front end needs a page known as page.tsx you have to create that so I'll just right click and create a new file and I'll call this one as page not a page page dot TSX there we go now inside this page.tx you will be able to grab it how first I'll go into outside page because we have this already created for us I'll copy this and I'll go into this page.tsx inside the square ID yep the square id1 so this is going to be the page where I'll actually grab everything now notice here this is not my client component I haven't said use client or something like this I'll just go ahead and call it something different because profile page there's already profile page although it's not going to bother me anything but I don't like it I'll probably call it as user profile not even page user profile whatever the name you want to give it's not going to bother you all right so how can we grab these parameters really simple you have to Simply say I want to grab some params that's it this prompts needs to be of type any but if you know the exact type strings whatever you're passing on you can get that type but since I'm not focusing too much on the typescript so that everybody can understand next.js so we'll simply go like that now how we can actually grab this so just here in the profile page we'll first add some classes here so that it can be easily visible so we'll just grab text Dash 2 not to 4XL we need we need big one for Excel text is already white yeah I think that's enough now just go ahead and inject your variable and all you have to go ahead and say is params.whatever you are grabbing in this case we are grabbing ID so just grab the ID that's it now let's go back and probably we have got some errors I know it is compiling successfully let's go ahead and kill this probably I saved it at the wrong time all right compiled successfully now let's go ahead and grab this come on take so much time so we can see the profile and ABC I think we should actually span this up all right to show you in a little bit better manner although it doesn't really matter but I'll just go ahead and do this I'll cut this out and I'll go ahead and say span just like this paste it up here and I'll add some classes onto this one and we can close this down and we can say hey what do you want I want first of all padding off two and I want it to be rounded I want a PG Dash golden do you have golden yeah they don't have golden we have to go through with the orange and the text is going to be black I guess text Dash black you can use your own CSS of Tailwind there we go we got it we just need a tiny bit of margin on left we'll just grow with the two there we go so although it was not intended to make it look like that I know what you're thinking don't think that it's not that uh so I will go ABC and we can go one one two two three three whatever you're grabbing it's gonna grab it from there so this solves a lot of our future problem that we'll be having looks nice absolutely gorgeous there and simply if I go on to just the profile one page is also getting served there but that is this page this page that right now here this is a different page and once you have this uh some IDs after this like 9988 whatever this is a difference page that is being served so this actually sums up your Basics about nexius I know this is a really really long video but again uh we'll be having a really long short videos about discussing about next years and everything now we are in a perfect position that we have our folder structure ready everything is almost ready that how we want it to be our DB connection is also ready now in the next video or if you're watching in continuation that means just to skip forward what I'm going to do is now first we'll create an API how we can create a back end I'll just close a lot of things here okay so let me just walk you through what we are going to do next up in this one so the next plan is really simple we simply want to work with the back end now we have worked quite a lot on the frontend part handle the parameters file structure directory structure client component server component a lot of things we have discussed now the next goal is how I can design apis that will make me a full stack developer almost so in in the next video or just a fraction after if you're watching in continuation next up we are going to take an attack on building the apis we'll start obviously with the sign up API the most basic will extract the data and we'll sign up a user and throw up into the database that is all what we want to do and that would be a fantastic start and then eventually we'll do login then mailing verify tokens and all of that but slowly slowly we want to take enough of the gradual that it's enjoyable it's fun and all of this so I hope you have enjoyed this one and in case you are watching it along with me then hey let's catch up in next video if you're watching it in the next one just the moment of pause and let's catch up on the other side all right hey there everyone hitesh here and welcome to another video or another part of the video in case you're watching in sequence and it's a next year's complete full stack course that you're watching on YouTube of course so in this video I'll walk you through with the next step now this video is almost a part two so in case you have in case you haven't watched the part one go try that or in case you are jumping directly on this portion please don't it's not a good idea so we have seen that how we can handle the front and part a little bit more like a file structure we haven't learned how we can make a web request from the front end to our backend because our backend was not ready in this particular section we are going to learn that how we can create models which can talk to a database we have already configured our database we have already injected our environment variables learned that how we can have a database connection file which can which needs to be called in every single API call because edge cases not edge cases Edge functions which actually run so they don't have a constant database Connection in this we'll start by creating a simple model and that model will be a structure of our database and there's a lot of ways how you can design it I'll walk you through with some of the quirky things and interesting things about it you'll definitely enjoy that part and then we'll directly jump into the sign up portion so that we can write a simple apis which can or basically controllers for API which can do the logical part take all the data and send it to the database that's our first goal then we'll figure out what to do next up so that is how we'll be going now let me take you on my screen first so this is our screen that's where we have been enjoying so notice here the models is right now totally empty we have almost nothing in our model so it's a good idea good time to create a new file into it and feel free to call it whatever you like and why is it not listening to me why is it not listening to me so just give me a second probably my keyboard is not working yeah should be working now yep and we'll be calling it as user model M should be capital or not I'll keep it capital user model dot again this would be a simple JS you can make it TS as well I'll make it JS usermodel.js because there is nothing too much sensitive going into this one first question who can talk to my database obviously Mongoose so go ahead import Mongoose that will be coming up from Mongoose now how do we create it simple const let's call this one as user schema and that is going to be simply new Mongoose dot schema and there we go basic just like this now before we go ahead and work about rest of the things let me tell you something really interesting now there is a special way of how you export your models from a mongoose in case of nexjs because there are chances that the model might already be created in the database so in most of the cases in the express and all that the model file doesn't run again and again automatically but here we need to actually import this file quite a lot of time and we need to take care of the cases if it is already created then use that if it is not created just create that so there's a lot of ways how we do that one of the very common user built syntax is just go ahead and take a user and simply go ahead and say Mongoose dot models and then create this users because remember in the mongodb even if you call this in the Mongoose or the model file as user with a capital u everything is lowercased and is pluralized that's a mongodb thing it does it for everything so that is the first thing if it is already created use that otherwise we are going to create our own model so we're going to go ahead and say Mongoose a DOT model demo model and then we will be creating this is going to be a simple model which takes two parameter what do you want to call it in the database and how does it look now usually you'll see that something look like this and again that's totally fine and you can go ahead and call it like this as well there is absolutely no problem in that case why is it giving it like that there we go why is it bothering me this much there we go or if you wish you can go ahead and call it as lowercase users that is also totally fine anyhow end of the day it is going to get created as users lowercase and once you are done with this then you can go ahead and Export it as a default so export default user that's what I prefer that whenever I'm taking this user I always call it as uppercase because it has a lot of superpower it's not any ordinary variable it's coming from from Mongoose so dot save method find one there's a lot of features that comes up as a builtin now apart from this I'll not talk too much about the Mongoose superpower because Mongoose definitely itself deserves a course but I'll just go with the basics for example I'll just go ahead and say hey I'll be having a username and that will be of type string and we're going to go ahead and required it true and provide a customized message of hey and we'll also keep this you username as unique so that will be nice and easy we probably can have a trim but I'm not interested in that already too much and then we'll be having email will be having a type of string and required true please provide an email and let's keep emails as unique as well that is it this much is already more than enough all right now next up we'll be having the password which will be a type of string and require true please provide a password that's it don't want to do any further into the password category now apart from this you'll see that in these kinds of model there are common fields which are there for example uh usually I go with the role because I bring my roles from an enum file constant file from where I can bring the enums like is admin manager student teacher there's a lot of roles with that in this case I'll drill it little bit down so that it doesn't create that much of confusion all the introduction grade application I usually keep it as a role but I'm going to go ahead and use this one here first of all is verified so is the user verified by default no it is not type Boolean of course default is false so my user is by default not verified I will send him an email in which all he'll click a link and once you click the link then only he'll get verified similarly as I was talking about the role I'll just go ahead and call this one as is admin and is admin will be like type Boolean default will be false and probably that's it now again as I mentioned I usually don't go with the is admin I usually go with the role because that's a better approach but again will not go about the better approach or data modeling in this case that's uh very basic now comes up the interesting part now what a lot of people does is they try to keep their tokens as a separate model itself I don't do that usually I try to keep them all separate because I think somehow that they are part of user itself and mongodb is a document database so I think this is a better approach again I could be wrong you could be right so there's a lot of debate about it so the way how I do it is I keep a couple of string like forgot password token and this forgot password token is usually a type of string and I keep on updating the values now along with the forgot password I keep the forgot password token expiry so forgot password pass word token expire nah not happy with expire I go with expiry expiry which is a type of date similar to that I do have a verify token as well very no no suggestions please give me a suggestion there verify token that is also a type of string and similar to that verify token expiry now how does this token works there's a lot of mechanics into that and I would love to share this but this is the whole our model is now complete now let me take you back on our excali draw and show you that how actually the token part and everything works so for this we need to understand what are the three parts of our application so the three part of our application uh the first one being the first one is the user wherever or it would be better to write browser or I'll just write user slash browser so whatever makes sense to you so this is our user and browser so this is first part of it the second part of the application is our controllers or you can say our apis uh I think API would be a greater name but obviously I would love to call it as controller but I think in this case API is also fine and the third part is actually our database where all of these things are stored so if I go back all this data about is admin forgot password token and all these things are actually kept up there now how does this forgot password token or verify token works that is also a very interesting use case so I'll just walk you through so this thing known as your verify token this is nothing it's just a field which holds some string values now obviously these string values are encrypted that's why we brought in the B crypt.js and we love to store the complex things the way how it works is in your API call if somebody makes a call to your let's just say user slash verify so you simply generate this verify token and this verify token is going to be long gibberish string something like this this is how it usually goes so this is let's just say a long gibberish thing now this is generated by API now there are two portions of it now this only alone is not generated this thing is actually one portion of it is updated into the user's database now our this model has something inside us right now it is empty but as soon as somebody hits that API call that long generated string is actually copied and is saved into database of that users now one portion of this is actually sent to the user as well all right now API doesn't keep anything it's just a business logic it doesn't have the capability to save anything it just simply goes ahead and sent one copy to the database one copy to the user now what next now what next is once somebody actually verifies that this token actually comes back to you now how it comes back that's we'll study in this lecture but this might come up into a URL you can extract it from a URL we know how to do it it might come up into a request body as well that's okay we can also handle that part but the whole idea is this token actually comes back to you now once this token comes back to you in the database we have to find that where this token is just like we can find a user based on email just like we can find a user based on ID we can also find the user based on this token yep we can do that now once that particular user is actually being found and let's just say you have found this and there is this user now this user information comes to your API based on this token now once this is actually being done you actually invoke the API Logics and simply go ahead and certain Fields into it for example we are talking about verify you go ahead and update verify as true so now this is a verified user so this is how the basic logic of how verification works somebody clicked on it you know the request is coming up from that token now apart from this you might have noticed that I also keep the verify expiry as well because I want to give the user only a certain time duration when this verification can happen I don't want it the verification that I send an email today it happens 30 days after that so I'll definitely don't want that that's why I keep that expiration I always bring back the user only basis on that the token should match and the time should be certain limit in under certain limits I'll walk you through with that as well so this is the base case of it now with a similar way your forgot password token also work I'll walk you through with that scenario as well because I can understand this can be complex so I'll again retrade that part it will be a revision as well so I'll just go ahead and remove this this this and we'll just get back to this one all right so what happens in this forgot password token we can now remove this part okay so we have a forgot password token again what is the forgot password token nothing it just encrypted a long string a hashed value that's it so this hash value looks something like this this can be something like this with few numbers really long strings something like that and what's the job of the API is to send the copies simply it takes one copy send it to the database I'm going out there we go and this one copy is sent to the user browser it doesn't keep anything for itself it just removes it API cannot hold it so now user had this has this token of forgot password and the DB also has this token or the forgot password again this is sent to the user or the browser or you can say to the email that is also a good word to have here so now this is being sent to the email now what next obviously we have to search it so now this token will come to you from the user side so user will hit a route maybe forgot password whatever the route is it will give you that a particular long token again I repeat this token might come up into the URL in the request body it doesn't really matter in this case we are talking about this forgot password so obviously with forgot password I need this token and I also need what is the password that you want to update so that I can add the us into my field with my logic so that is there the logic is same for verify and the forgot password now what I have to do next I have to take this long string and I have to search it here in the database just like I can search for email I can also search with the token and this will return you an user entire user who is having this token when this user actually comes to the API the API is perfectly capable after matching the token and the expiry that hey the token is valid the expiry is also valid then it simply goes and update one field so I can simply go ahead and say hey update user dot password that gets a new value whatever the new encrypted value user has given you a value you encrypt that and you update that so you simply go ahead and simply say updated password password if I can write that updated password so that that is all you have to do that's it you have updated your password so this is behind the scene logic of how the verify password Works how the forgot password work or any other token based mechanism that you are used to this is how all of them works quite a lot of theory isn't it uh yeah but I hope that you are enjoying this I hope that I'm able to explain this so much Basics to you and you are enjoying that all right so now that my models are all done now it's time to open another file my models are there my database connection is there notice here the database connection I can just call this connect and connect to any time with the database now what's interesting is go into the app and inside the API we have users and inside that we have the sign up and we have this route now this route is actually empty right now in this case but you might be wondering can I create only just one file in the sign up yep there is no other file you can create and this might be bringing to your question another question so I'll bring this up a lot of notes Here that I also handle a lot of things so for example if it is slash API slash users slash sign up if this is the case then I have a lot of things that I handle here for example uh on the same route how do I handle the get request or the post request or the put request or the delete request so how do I handle all of these cases now there is a nice way of how you handle this the standardization of the apis I'll not talk about too much of the standardization of API that again requires a separate course in itself but the ideal is that you handle all these things via the request method a lot of time when we actually teach the tutorial it's okay then we go ahead and simply ask them to Simply create routes with a different controllers like for example create user or maybe something like we asked to create update user but the whole idea is this is not a standardization approach it's okay for tutorial part there is no harm in that but if I go ahead and say simply user then if it is a get request I should be getting a user if it is a post request I should be adding a user if it is a request I should be updating a user delete request then I should be deleting a user so this is a standardized approach and this exactly is being followed in the next JS as well a lot of behind the scene details so all we got to do is simply write the functions for the Post method get method and all of that now the syntax is a little bit you have to first get it and understand it once you get one syntax all of them are exactly same so first we're going to go ahead and simply bring the connect that's the most important thing so connect and the first time you'll be seeing the default import statement so yeah this is the first time you'll be seeing it from if I can write that from and this will be coming up notice here you can write at the rate yep that's your root directory and then you can simply go ahead and say Hey I want to go where should I go what's the name dbconfig okay DB config and inside the dbconfig there is this DB config file okay this is dbconfig.js I guess let me just check this uh dbconfig.ts although you don't need to import the TS but sometimes I have seen that there are some issues in bug because I didn't mention a DOT TS a very rare very rare sometimes it even gives you problems but it has happened to me couple of times okay the first thing that you have to do is simply go ahead and connect that's it that is it don't need to do anything no then catch it just needs to connect but we need couple of more things as well the first obvious thing is user we need model so that we can add things into the database and that will be coming up import user and that will be coming up from at the rate app models and users make sure you double check this because I had noticed this this actually creates a lot of problem just now you have seen because our model is not coming up from App model user our model is sitting somewhere else and that's totally allowed you can keep it here as well there's no problem in the app models and user that is also one way but we're keeping it all totally outside so in the models and then we are getting in notice here this is still going to give you a problem the reason for that is you need to give the file name so inside the model we are calling it as user model so make sure you are cautious about that user model that should be happy okay now the next thing is you need to grab request and response so in case you have worked with Express or anything of a backend you notice everything actually is dependent on request and the response you need to take something send something in the next JS you actually work with it a little bit different we go ahead and First grab next request yeah come on so just me yeah there we go next request and we also get next response so these are the two things which actually helps you to do all of this they all comes from the next server just like this we'll be encrypting some of the passwords so let's go ahead and import decrypt Js and that's coming up from B crypt.js and what else I guess that's it uh this one we don't need JWT because we are just talking about sign up so that's not required uh it's declared but never used we'll use that no problem there all right so now this connection and everything is done so I'll just keep it there outside so all the connection everything is done now the way how you define a syntax of handling a post request because data is coming to us so we'll first say export and then we'll be using a sync because obviously talking to database database is another continent it takes time and then simply write the function and then what request you want to handle is it a post request is it a get request is it a delete request so whatever that is you just handle that in my case post makes sense so I'll just use that then you simply go ahead and say that hey I will be handling a request you can handle both request and response but there is no need of handling everything here in the first parameter you can just say I'll handle the request and then say hey I'll get the next request just like this and there we go that's it that is how you handle and if you want more things to be handled just create another function which is post which is get you get the idea you get the idea now in here the simplest part is to handle the try catch via the try catch so I'll just go ahead and have the try catch and the error is going to be of type error type any by the way not ideal case of handling everything with any now how we're going to return a response that's also super easy you simply go ahead and say next response and we will not be handling the errors like this although you can there is no hard and fast rule but I prefer to send a Json response with the error message and status code I think that's that's a better approach so that's the first part of it how we'll be handling now the next question is how we're going to grab data from the body in case you have worked with Express or something request.body was our friend which actually does that it is almost similar to that but in here you actually have to await a little bit so await a request it's not body.json don't go with these suggestions it's Json just like this and we can hold this into a variable let's call this one as request body just like this and lot of example you'll see calling it as request.body I also picked it up from the dark so yeah all right notice here it's request.json just like how it works now further down this you can actually extract all the variables that are coming in so we'll be doing a little bit of the destructuring so from request body we need to extract some stuff and what we'll be extracting is const let's grab some stuff from request.body I know that from frontend side I'll be getting a user name I'll also get an email and I also get a password because this is the first time I'm registering a user now again it makes sense that you first go ahead and do all the kinds of check if email is not there if username is not there if password is not there then go ahead and throw this response although we have handled a lot of these error cases required and all of that in the Mongoose itself so in the error response they'll be getting a good message and all thanks to the custom messages that we have written here so it is handled a lot but not entirely so I highly recommend you do on your own validation I'll just move on to the basic validation but before that I'll also do a console log of uh entire request body so that we can see that what is happening not ideal for the production grade so remove these console logs but I'll just keep it to check things now I'll go ahead and first check check if user already exists very simple basic check all I have to do is use the superpower of this user remember this user is coming up from the Mongoose so this has a lot of superpower and can find a lot of things for us so for example it will say find one and what do I want to find I want to find an email so I'll just go ahead and say email and that's it I want to find most important thing is this will return you a query if you don't put up in a weight so this is a common mistake that a lot of people are doing these days posting them on every single platform so put up in a weight because it's a database call and we'll just say simply user now if this returns me something that means user already exists so all I have to do is if user is there then simply go ahead and suggestions please no suggestions we're going to go ahead and simply say return next response come on now suggestion there we go Json that user already exists so this is nice and easy so there we go again you can make more checks onto this one I'll not do more I'll just go ahead and hash the password now hash password again this is what the basics will be doing so we'll be first creating a salt which is the basic and after the salt we need to create a hashed password just like this uh feel free to use any number of rounds that you want to have uh so the B Crypt JS library is responsible for creating the salt and if you'll read the documentation you'll find it exactly same the Gen salt will generate a salt with the 10 rounds and again different Frameworks and libraries use different rounds for example Ruby on Rails use 12 rounds nexius and react not react Express and Mongoose mostly use 10 so again it's totally up to you a hashed password we are hashing password we have to provide two parameter to bcrip.j Hash the first is the password which we are grabbing from the request body and then the salt value so absolutely simple there is nothing too much Panic about it now we want to save a user in the database so we have to create a user accordingly so all we're going to do is create a new user just like this this will have a username this will have an email and this will have a password but not the password that we're getting from request body but the password that we have encrypted the hashed password so we'll be going like this so we'll be saying hey let's just go ahead and go like that all right now we'll be storing this into a variable first so let's just call this one as const new user because it's actually our user to be saved new user whatever you like now this is nice and easy now all we have to do is save this to the database you can do it in one line as well but I prefer to have more uh explainable approach of this thing so I'll just go ahead and say await new user dot save that's it it's going to save let's store the response into a variable maybe you want to save it have a look on it so I'll just say save the user again this is a little bit of a verbose approach but you can do this All by shortcut as well but it's a tutorial I need to explain the things so I'm just keeping it a little bit more verbose now after this maybe you want to do a console log of the saved user that's totally up to you I just keep it so that I can show you more things and that's it now apart from this all we have to do is simply return a response maybe in the response I'll just go ahead and hit and enter here and one more okay okay let's just go ahead command Z because I think that is messing it up a little bit yep it's messing it up I'll just remove it like this and there we go so I'll say message is created user successfully then we'll get no not like that success is true and maybe I want to throw in the saved user totally up to you how you want to deal it with this I just want to go like this all right so this is my Approach of saving the user and as you saw that it's not really that difficult now we understand how this is going to be all taken here in the database and absolutely but one thing that is still missing is we are not able to send any data to the page we have to actually work on this page as well because it's right now not going to be doing anything at all so let's go ahead and take care of this so right now this is the basic page that we designed a moment ago now a couple of variables that needs to come once the user will be signed up I need to push it to the login page for this I will be using a router so notice here this use router now it will come in handy so I'll say const router use router I'll use that in a minute I've already created my state so that I can actually go ahead and use it but I'll be creating couple of more states which will be helpful okay but again you can optimize this a lot more and a whole lot of things can go on so I'll just go ahead and create one more which will be button disabled so there we go I'll keep it by default as false button will not be disabled I'll not do much here I'll just change the name of the button on our front end so if you remember on the localhost we have the sign up uh my hopefully my server is not running I guess yeah it's not running I just push the code on the git that's it so by default it will be saying just sign up so I'll be changing the text only based on whether the button is disabled or not so I'll not do too much but you can go all fancy with it so that's all the basics we'll be doing all right now coming up onto the part that how the things are going to work now this button state is all just a fun that we are doing to understand a little bit more about the react use States and all of that now this button will be changed on like usually what how you want to utilize this button disabled so this will add some classes on the button so nobody is able to press it but as soon as the button disabled is gone that means somebody can press it one ideal case is when there is some values in our field so one case one a hook that you can use for this is use effect so what is going to happen in the use effect if there is a user uh I'll just first enter end it so there we go it is dependent on this user so this is a dependency array that how should I how how often should I run this use effect and I'm able to do all of this because I have actually enabled use client and I'm doing this just to show you that I can do it so this is all dependent on this user as soon as something change in that that will run this use effect or whatever the code you write inside this use effect callback so I'll just go ahead and write the very basic of it so I'll just go ahead and say if user dot email so there are a lot of fields into it email email and I'll just check the length of it if the length is greater than 0 and wow suggestions I love that then I'll check the user.password length is greater than 0 and the username length is greater than zero then I'll set the button as disabled as false because if the length is greater than 0 the set button should be default to false let me just check that quickly all right and in other cases it should be enabled yeah because it is set button disabled if it is true the button is disabled ah get it sometimes you need to evaluate yourself as well all right so set button disable to true in other cases all right so there we go we can run this and again this use effect is not available so I need to go to react and say hey we will be bringing use effect and there we go now we can do it and based on this we can check out some fun stuff here as well so I'll just go ahead and change up the text here sign up here and I'll just cut this out and inject my variables and based on button disabled I'll check that if there is a button disabled then I'm gonna go ahead and do something otherwise I'll do something else so if disable button is true that means button is disabled so I'll just say no sign up and if the button disabled is false that means button is enabled that means this time I can do sign up so there we go just really basic so we can go ahead and save this let's try to run that server it's been a while so npm oops npm run Dev and let's see how many crashes we are going to see always expecting the crashes all right looks good decent all right so yeah take some time okay so we'll do a sign up and there we go so it says no sign up all right that's good because right now there is no value so if I go ahead and say a oh man the reason why you are not able to see it is because there's a text color so in all of this come on I have to do this for all of them yeah okay no no other option we'll just go ahead and say text Dash black there we go we have to do this for everyone text Dash black one more one more not that much of a big problem text Dash black there we go so as soon as I save this there we go now I can see a and no sign up still then I go ahead and a and then I go ahead and a and it changes to sign up now I can sign up definitely I'm not checking much of these fields neither on the backhand side or frontend side that what should be the minimum length of password we can do a lot of validation but this video is little bit beyond the validations all right so this is the basic that we have gone through with it now let's learn that how we can actually utilize the sign up method because we haven't talked about it we have this xios giving us red squiggly line but we haven't worked on that all right the basic and the most easiest way is first have the try catch handle the catch part and that's the basic sometimes people actually get this uh on loading as well maybe you want to show some loading let's go ahead and do this loading as well let's go ahead and have a loading text as well so const and we'll have a loading set loading by default it's false So based on this we can actually render some variable as well uh maybe in place of sign up we'll just go ahead and cut this out inject a variable again and we'll just check for loading if loading is true we'll if loading is true we'll do something otherwise we'll do something so we can just go ahead and say sign up and in this we can say processing you can have better Spinners and loaders but my goal is not to have you parked down with 1000 different libraries but to show you more about next year's we can see this is processing right now because loading is true somehow uh loading all right why this is loading okay let's check if loading is true oh my bad if loading is true this should be processing processing and if it is not true that means loading is not happening that means user can sign up all right so at least this also gives us a check that you can flip the switch all right good good enough good enough so let's go back here in the try catch and let's also add a finally here you rarely see the implementation of finally but in this case finally makes sense because no matter what happens loading needs to go away this is the common syntax now as soon as you go first let's handle the catch part because it's easy and in case you remember I actually asked you to do something we'll actually handle that part as well so if you remember I asked you to have this react hot toast this is your assignment you have to take care of how this Library actually works so the way how it works is you simply go ahead and say toast and then error and you can just give it error message that's how the basically it works now in here it says hey I know I have no guarantee that error will have a message so I'll just go ahead and write in any here so that it gets away the errors but also I love to get a console log because I know I have I have not perfectly implemented react hot toast it's assignment for you but just for the sake of so in this case we'll just go ahead and say sign up failed and we'll also get the error Dot message in the logs now this log message will be available to you on the user side in the browser because it's a use client all the console log messages in the API will be available in the bottom section the terminal because it's on the server side that's one difference as well now let's come back on to the tripod what do you want to try first and foremost what I want to try is set the loading that's the basic set loading as true all right now I want to make a request so I'll just use xeos and I want to make a post request from the xeos now make sure you provide this URL very carefully you don't need to provide the entire URL the next JS is already configured for hitting your own route so slash API slash users the folder you have defined let's check it one more time API slash users so there's an S and then you can simply go ahead and hit a sign up route so I'll just go ahead and hit the sign up now I'm also taking along with me all the data which is user which is stored in here so I'm just taking all of this and obviously once this is being done this will take some time so I'll just go ahead and await for this one and I'll hold the response in some variables so I'll just go ahead and say response the punch response there we go all right so this looks okay now I also want to see that what kind of response is coming up so it would be properly better for me if I go ahead and say sign up success and I just go ahead and say response.data I should be getting a response.data.message as well but let's just say I want to get a response data only and then the most important thing is I need to push the user onto a new page and that is exactly why I have this router sitting behind sitting idle doing nothing so I'll just go ahead and say hey router just go ahead and push the user to slash login make sense all right so that is it that is it if we haven't mistake done any typo attempted import error xeost did we made any mistake typos and why is it having an issue because it shouldn't be like that there we go now it should be happy why did it added these extra curly braces no idea about that all right so this should be all let's hit a refresh just for the sake of selfsatisfaction I'll just go ahead and add a username with the name of one email will be one at the rate gmail.com and the password will be one two three four five six and let's try a sign up processing working nice we have been redirected that is also nice let's go ahead and check out in the database in the database and oops uh so let me go ahead give me a second I'll just go ahead and sign in again probably just redirected me I need to actually use my emails so I'll just keep you up here till the meantime you can just hang out with me chit chat with me no worries it will just take a seconds I'm just logging it into my detail I don't want to expose that email so that is the only reason I'm just having this ah didn't bother it much so let's go back up here and going back all right so this is where we are and we'll just go into the database and there we go we can browse the collection what did we name this project and there we go this one we named it as test all right we should be naming it better but anyways this is also going to work so we can see we have one one at the rate gmail.com is it visible yep little bit is verified as false is admin is false the rest of the fields since they don't have any value they are not being displayed here let's try with one more user so I want to go with the sign up page let's sign up to as well two this will be two two two at the rate gmail.com at least we need two users one two three four five six nice very secure password sign up this time it's quick because obviously first time it takes time and you get the idea it is always like that let's hit a refresh and it should be getting us two users hopefully there we go so we can see that it is not that much difficult to actually get the data into the database let me go on to code base there we go and we can see that some of the users that we are getting these users are actually on the backend side so we are getting that but not only that we must be getting some of the users in response on the console as well there we go we can see sign up success which gives us an object and this object has a message which is coming up our own message from the backend user created successfully then we said saved user is getting us that's nice and then we have success true they can be in any order so it doesn't really matter so there we go it's working nice and we can also see the difference between the messages that are coming up some are being read on the backend side some are on the frontend side if it is a console log in the use client obviously it will be in the browser otherwise if it is in the API route usually that will be on the back end part of it or the back end side of it so this is how we can actually go ahead and and create a simple uh sign up you can say uh now the next thing that I want to do is uh similarly take down the route for the login as well the login is almost similar you'll find so much of similarity there but I'll still do it in front of you so that you get more idea I will grab all of this because yeah we'll be a little bit uh lazy you can say there's no good word of putting it all right so I'll just paste it so we have all the things make sure use client is the most important thing again this is all happening in the route not in the front end part we are still in the route of login so the first thing we have to do is connect with the database every single time we have to connect I have spent a little bit good amount of time in debugging when all I was doing is missing disconnect all right so connect who said to bring it to you from HTTP 2. I am bringing this from ah why oh my bad we actually brought this in from the wrong place my bad my bad we should be bringing in from the sign up this is where the real stuff is so copy this and paste it there we go okay so now notice here this is the B Crypt this saying uh cannot find a declaration file for module the whole idea this is saying is I don't know the types about it so all you can do is click on this bulb and say install the types about the big crypt.js once you do this it actually install additional types for you and get rid of the error no need to worry about that part in case this red squiggly line is bothering you too much get with that or fix your linting okay uh this is good all right so now we can go ahead and connect there we go connect in with the database again this is my login route so async export a sync function uh post is good request header looks great suggestions love them it increases my speed of explaining and writing the things so much okay all right the basic starts again so there is a try catch the catch is any and in here we can just go ahead and send any response that you want we want to Simply return a next response so return suggestions no suggestions requestresponse dot Json error message status 500 happy with that done with the catch part now coming up on to the tripart most of this is going to be very similar what we have seen But there are some changes not too much first is how we can get data from the request so it's really same request dot Json this will be giving you all the data so how we can grab this we can grab request body from it and we'll be destructuring some values so let's go ahead and restructure email and password from request.body uh basic so there we go why are you bothered again all these structure elements are unused come on let me type first too much aggressive let's go ahead and do a console log and we'll be saying request.body that's fine okay to give us just the detail that whether it is working or not now obviously when we are logging uh into this one so we have to check whether the user exists or not so check if user exists or not otherwise we'll throw him in some error so we'll be saying that hey how can I do it again the user which has all the superpower I can go ahead and say find one and this is bad find one and I want to find it based on the email that's it that is all I want to do if I found it I'll just go ahead and store that into a user variable but since this is a database call make sure that is awaited all right looks nice and if I don't find any user then I'll just request send a response that user doesn't exist so much time is being saved all right but don't rely totally on suggestion they are horribly wrong sometimes all right so what I want to do next this is a login so I've checked the user now I want to check the password all right so I'll just go up here why are you bothered I have used the email just here email does not exist on Typecast it exists I know the email is coming up and I think we need to handle an await yep my bad almost missed that okay sometimes the linting is good okay now we want to check if the password is correct that is super easy we can simply go ahead and validate the password based on the B crypt.js it has a method which says dot compare and we can compare the password which is coming up from the request.body and if you remember this user is coming up from the database this is also bringing the password there is a field in the model user dot password so I don't have to do any magical thing becrypt.js can compare it it knows the stuff how much the default values and everything so it will handle the stuff I don't have to worry about that now if the password is not valid I have to send a response that hey you have an invalid password I won't be doing that now in case that is all done now let's prepare the data because the way how it works is it's actually really really simple if you have never done this kind of a thing it's actually super easy to work on with now once everything is verified that your user exists your password is correct then we actually create a token this token is created by uh simply Json web token we encrypt that obviously it's not just a plain token and we send this token into users cookies not in the user local storage because you can manipulate the token there but we can send the secure cookie to the user and then later on whenever we wish we can access those cookies as well so it helps as a Bridger to verify whenever the user we want to verify it just has the ID of the user but it can have a lot of payload into that you can send a user ID email admin type whatever you wish you can send all this data as a payload to that that's exactly what we'll be doing next all right so moving up here first of all what we're going to do is create this token data so I'll just go ahead and say create token data now how we are going to do this is we'll be first having this ID and one more important thing whenever you look into this notice this uh every single time a user is created it's with underscore ID that's what the ID is there so this is what exactly I'm bringing in although every single detail you can bring in from with this ID again you just have to type in this uh find one that's it based on ID you can find anything but it is no harm that if you want to send extra things like user dot a username or maybe you want to send his email I'll just send this much but you can definitely send a lot more than this now once you have done this then obviously it's time to Simply go ahead and create the token and send this token as well so first and foremost let's this is token data only we haven't created the token now we are going to go ahead and create the token the token this is how it is created all we have to do again notice here there's a problem why because suggestions don't always rely on them you have to actually import this so I have to say import JWT and that's going to come up from Json web token again and could not find the Declaration so I'll just click here where's the bulb here it is and install all the types don't want to see the Reds quickly lines okay so all it does is obviously uh the process.env JWT secret key that's not my key my data is actually stored I have actually created a sample file for you so that I don't have to Peak it again and again where it is somewhere here uh sample.env uh so hitesh subscribe app you should do that my token secret is here so I'll just copy this go back here this is not my this is how it works but still it will give you some of the issues that hey what is this and all of that I'm 100 sure that this is coming in so I'll just put an exclamation That hey I know this is coming in so all you have to do is this takes some time to create the token so make sure there is an await here JWT has a method of DOT sign to create signed token it takes the token data this is all the data that we have you can directly inject a object here there is no problem and then process.env.token dot secret how long you want it to stay there expire in one hour I'll not do one hour I'll stay for one day at least totally up to you how you want to do that now all we have to do is token is created but this token is not yet set into the user's cookie the way how we do it first there are a couple of steps involved is we have to create a next response so we'll be just going ahead and say hey we want to have a response we are not sending this response yet we are just creating it and the way how we create it is simply uh next response and it will be dot Json there we go I have an object like this there we go and in here we'll say messages login successful that's a nice message and success true I think that is enough but now the great advantage of this is if you have this response this response right now is a type of next response which can actually go ahead and access your cookies not your the user's cookie so I'll just go ahead and say hey response did I mistyped it yeah response response response come on too many suggestions response dot cookies there is a s here don't go with the suggestion bad suggestion here response dot cookies and you can set the cookie similarly you can also get the cookies so I'll just use a set here and for this I'll be using token token HTTP only yeah that's that's fine I would love to have it on to a separate line I think that will make sense for me at least there we go we don't need to set even the path that is obviously cookies yeah Escape that escape that don't need that all right so this is what we have now we have response dot cookies being set now this response has already sent the cookies and everything now you can return the response back return response now as you'll be returning the response it will be doing all the things it will be sending the message it will be handling the cookies all the things are being done so that is how it is being done ah quite a lot quite a lot but I think that's good now just like we did here uh we need to now go into the login page .tsx yep we haven't actually worked a little bit onto this page so uh now we need to do exactly all the same kind of thing that we did in the past yeah Basics just like that all right so we'll start this time we'll do it a little faster because I think we have studied a lot all right so first thing uh router because we'll be pushing it to some different page so const router use router there we go first thing done we have got the state we'll be getting the button disabled and the loading as well so we can copy this all suggestions I love that don't need to even copy paste that loading there we go okay all right this is all done very quickly on login okay how do we want to handle the login part first what we want to do is exactly same use effect hook we want to actually use that and since this is a use client or the client side or the client component we can actually do this so use effect and I'll just close it first and then the user it's dependent on the user and it's not available so react please give me use effect there we go and in here we'll be using the exact same logic so let's just go ahead and use it like this if user dot email now it's suggesting me nicely there we go and we can also have an else part and we can have set button disabled to true button disabled is true that means button is disabled okay that's correct and sometimes confused in that so yeah reevaluating yourself is not a bad idea okay although it is giving me the entire bunch of code but I'll prefer to write it so try catch catch error would be any and all I have to do is simple assignment for you but first I'll do a console log so that I also know that what is happening so console.log login failed error.message that's nice but we'll also do the toast so that you can verify the toast messages and stuff right now the toasting is not working I have not properly Incorporated it but hey and we'll also go with the finally how can we forget that finally set loading uh bad there we go es like this and a suggestion no suggestion there we go okay so we have finally this set loading as false that's nice okay Meat part the how we're going to handle this request super simple first start your loading there we go and keep it as true so that we know something is happening then we have to use a weight because it might take some time and then we have xeos axios will make a post request here so super simple where it is going to make a post request slash API slash users slash login that's the route it will also take the users with them so that is nice and easy and there we go and looks like there's an extra yep there we go we also want to store that response so we'll be saying const response and again you can dump down this response into console log you can post up a toast message whatever you like I'll do a console log because this is important and we should be seeing this data as of now learning phase learning phase and then obviously we can hope first before we do router push this is great suggestion by the way but we'll be doing a toast dot Success login success you can Implement that just a few lines of code and then we're going to go ahead and router.push we don't want to push it we will be pushing it on to slash profile Maybe yeah do we have profile pages did I taught you that uh yep I I taught you that yeah profile page so we'll be redirecting into profile all right so let's see if this actually works in action or how many errors we are going to get okay okay xcos is not exported this is again xcos problem there we go save this hopefully things are okay expect errors that's the only advice I can give okay now we are on to the login page just to refresh can I go into sign up yep visit login yeah working nice so the email is one uh my bad email also needs to go ahead and work with this nobody is able to see this because of my bad CSS text Dash black and the password is also going to have a text Dash black should be okay now also let's since we are here let's also change the thing so login will be based on not like this we'll be having a loading so if loading is true that means processing otherwise we are doing what we are login okay and button disabled I'll not do this you can do this all right so I'll just go ahead and say one at the rate gmail.com and we'll be having one two three four five six the securest password ever let's try login and no I don't want to save it did we call it even uh there we go on click login on click login so all right so this should be working do we have any data okay so we are receiving the data till here that is nice but it's not getting redirected okay we should be getting a redirection log in don't want to save this let's check out and let's see what are the mistakes that we're doing console log okay the server is okay so we are getting a lot of Errors probably we should be going back onto the code file there is a lot of okay uh we need to check out what is going on wrong API slash user slash login that seems to be correct and since we are receiving the data on the backend side that means at least this one two three four five six one at the red gmail.com do we have one at the rate gmail.com and the passwords are coming in okay at least we are getting this on the backend side so now the problem is technically on the backend side so two times we have requested the body and we were able to encrypt that and we were able to actually get this saved user as well okay oh I'm checking on to the sign up route I should be checking into the login route I should be in the login route did I made a mistake okay so here is this this is coming up from here so we are getting this request.body and now we are getting this so we should be actually checking this token data we are getting the user no user here we are getting the user again this debugging will take some time so this is the real world development that's how it happens and let's see if the user is actually getting some tokens so let's see in the application and here in the localhost we don't get any token all right so this is going to take a little while to debug so let me go ahead and quickly debug this and will tell you what is actually happening here Welcome to the Real World development this is how it happens and Yes actually I found the bug it was nothing I just forgot to save the file there was a big white dot I couldn't see it and that actually turned out and notice here I didn't change anything I was just logging out a few things to check out whether user exist or not not even a single line changed but yes I made a couple of requests then I realized I need to actually restart the server that is all that is all I did and nothing changed and it works nicely now I'll I don't have a log out route yet we'll do that soon but this is how we have I can go into my application now just after restarting I can see there is a token being included up here and I'm also getting redirected to profile but there is a problem there's a lot of problem here I can still go back to my login route this shouldn't be happening and I can directly access these profile which shouldn't be happening if I'm not logged out so there is no controlling mechanism right now also there is no log out mechanism right now now I'll obviously push this code so let's do it right now in fact so I'll just go ahead and push all of this yep all of this and we'll say sign up and login complete good I'll just complete this commit this and obviously I'll push it why don't you use command line I don't it's just easier it's fun so I'm just going with that so uh what we have done right now and what position we are that's the most important to evaluate right now so let's just go ahead and quickly evaluate this so we are at a position now our front end is working our back end is working we are able to register a user in the database we have tried that couple of times it works and we are also able to log in a user there was a small hiccup where I paused for a minute but again it was nothing more I just had to save and restart the server so once I restarted it worked absolutely fine also I'm pushing the code in the GitHub as well so that you can also see and check out what is happening how is it happening and all of that now there are a couple of challenges in front of us first of all there is no logout button so we need to design that we also don't have any kind of a mechanism to stop the user from visiting the profile if they are not authenticated and if they are authenticated they have the token we have no way to stop them and protect the routes that the logged in user should not be seeing the sign up and the login page he should be seeing just the profile and all of these pages so we need to find a way and of course I'm talking about middleware so we'll be talking about Dem so this is all what we will be doing in the upcoming videos I hope you are enjoying them I'll take a small pause it's already like four o'clock in the night or in the morning so I'll record the rest of the videos tomorrow so just stay tuned hit that subscribe I would be super super helpful if you drop me a tag note on Twitter or LinkedIn there's so much effort that is going on in that so in case you wish you can do that otherwise it's totally fine let's catch up in the next video or after a break and finish up our middleware and remaining of the part let's see you in the other side of the video or the next video whatever that is all right hey there everyone hitesh here one more time into the next year's Series so what we were doing in the next year series it's tough to remember just kidding just kidding I exactly know what we were doing in the last video and yes in this video we'll be taking this a step further so we have achieved the goal of signing up the user logging in the user even producing a token and storing that token into the user cookies but right now there are a couple of issues that we want to take down the first one being some of my pages are not protected I want to protect them and obviously the middleware will kick in here the middleware how it works in nexgs is little different so you need to understand that part as well other couple of other use cases as well which I'll discuss in this video and on top of that we want to Simply achieve a route where we can have slash me or something where anybody can get their own information from the database right now we don't have ton of information but whatever the information is we would love to extract that and obviously we need to click up with the log out route as well we haven't worked on that so we'll be working on that as well I think that's enough for this video and uh we will see if there is a little bit more to explore or something we'll definitely go ahead and do that as well all right so let's share the screen here so this is what we have been doing now let's run this first and foremost npm run Dev so that we can see what is happening how is it happening and is it all okay so if I just go ahead and refresh this hopefully this is booking Yep this is working let's try to change the number with some name yeah bits working but this is nothing is protected I can still go ahead and visit the login page as well so everything is just back and pass and forth let's also see let's also try to log in again let me see the database we have two at the rate gmail.com so let's go ahead and try to log in with that so we'll just go with the two two at the rate gmail.com because I set up the expiry time for one day it's it is not here 24 hours but still I would love to just set it up password very secure one one two three four five six very very secure one let's login it's processing nice and we are redirected to the profile page let's right click inspect is there a shortcut of going directly into the application just let me know if you know in the comment section so I have the token so that is all clear that is that part is still working nicely so let's go back and let's see how we can do that now first thing that I would like to take down is a log out button that how we can actually have a log out so for this I have to create a log out route should be fairly simple obviously we need to First create a backend portion of it then we need to call that log out button or that method or that API route from the front end part of it so let's start with the backend in the apis we have user slash login sign up we'll create another one which is for logout so let's create another folder and obviously without any thought we'll just call it as log out we know this is a back end so we know this is going to be route dot TS there we go now basics of this logout is going to remain same we don't need to create any post requests for that because the way how this is going to do a log out is simply just clear out the token that you have there are a lot of ways how people do it some people actually create a token and save the token expiration time as well refresh token there are a lot of ways I will be going with the basic I want to just clear out the token now in order to clear out the token there is nothing too much to worry about I'll just first bring the next response because that will be doing this and we will be using next response majorly requests no not request okay let's go ahead and do this export obviously this will be a sync uh function I'll just use the get request for that get and we don't need any of this here so we anybody can just make a get request just directly that's that's it all right so how we are going to log out first and foremost is go ahead and work on with the try catch the catch part is easy so we'll do that so let's try with the try catch catch and then we'll be saying error that could be any suggestion please no suggestion there we go so and we'll be saying next response we won't be dealing up with the errors suggestions are good but they're not always the best I will be having a Json error response just like that and we are having an extra dot all right so that part is done now only thing that's remaining is create a response which is capable of removing the cookies why this is giving me a problem is it extra yeah this one was extra all right so let's create a response how do we create a response response if I can write that and we simply go ahead and use the next response and with this we want to create a Json remember we are not returning the response yet we are just trying to create a response object so with this I'll hit an enter just like this we'll create a message of logout successful and a success of true also I want to send success of true and that is it now this is my response this response now since it's a response of type next response this can actually interact with my cookies so I can go ahead and say hey response go ahead and interact with cookies there is an S at the end of it and then we can go ahead and use a set and that's it so what we are doing here is a response now this should be a smaller response so token we are setting the cookie token as empty and we are also setting some of the options here which are HTTP true and expire we are just expiring it right now immediately although there is no need of this expiration because just HTTP true will actually do the job but anyways if we are just doing it that's also don't forget to return the response because right now we have done a lot of work but we haven't returned the response and that is it now you are completely capable of logging out the user but the point is how you are going to do this log out because there is right now no place where this logout actually works so you need to find a place where this logout actually works so I'll walk you through that you can just choose any page and can do a log out there the logout that we'll be doing is going to be simply on which page we should be doing it that's a confusing statement I'll be doing it in the profile not into the ID so in case you remember we have this profile and we have the slash ID wherever you wish you can do this I'll actually do this directly into the profile again there is no strong Choice there you can definitely inject a header a navigation bar can put a button there that's not my goal my goal is to get you familiarized and comfortable with next shares so a button wherever that is you know now you now know how that is going to work so in this profile page let's go ahead and add a button first we're going to do is simple an HR so there we go and after this let's go ahead and add a button so we'll just go ahead and say hey Button this button is going to say logout all right and we'll add couple of classes here as well so that button at least looks decent so we'll be having uh I'll happy I'll be happy with the suggestion whatever they provide us all right let's see if that actually works I'll say yeah that's a decent button if I can just add a little bit of the margin on the top margin top four yep I'm happy with this button now this button alone is not going to work definitely we need to set up an on click on that so on click we'll be calling this one as log out this reverse approach is always good because first when you actually click this or declare this method on click automatically the suggestions are improved so that's why I love this all right so let's create a method of this so const log out and we'll be showing like this all right now before we do this obviously we need to make this because right now this is a client not a client component this is a server component so let's go ahead and create this as a client how do we do this a simple uh decorator decoratorish I will be saying use client there we go now this is a client component what do we need in this we need xeos for that so we'll be saying axios from axios that's the first part we'll be also redirecting the user or probably providing some linking as well so we'll be using this next link there we go and what else I think that is it I think that is it all that we need all right so how do we log out a user really simple just go ahead and simply have a try catch we have done this many times so that should be all easy for you now and for the error part we'll be doing a console log of the error Dot message but I'll also give you an assignment as well we also need to provide an any here and after this we'll be having a message which will be a toast Dot error suggestions please no suggestions and here we can say error.message obviously we haven't brought in the toast so I'll just bring in the toast you decide how the properly how is the proper way to bring it up so toast and that is from react toastify not reactors if I react hot toast there we go this is obviously not a proper implementation but I'll just leave this as a simple exercise for you now how do we do this make a simple uh get request that's it so we'll be saying axios uh dot get request because that's what we are handling where does this get request go it into slash API slash users slash log out this is where it goes and again this is asynchronous Operation so we need to provide an await as well this logout is also not a synchronous so let's go ahead and add this a sync so that it's happy you can actually trap the response as well in case you wish but I don't think that is required so if you wish you can actually provide better messages with that but I'll go ahead and say toast or successful obviously this is not going to print it anywhere but I also want to push the router somewhere so we haven't used the router because once user is logged out he should be pushed back to login page so we'll be saying import use router from next router okay I'm happy with this and let's go ahead and say I want to create router from use router nice and this router will be capable of pushing to slash login all right so looks okay to me let's try let's test this out and see how many bugs and errors we have got all right so okay next router not mounted all right why the next router is not mounted that's ah my bad because this used router is not from router this is from navigation I told you we actually got this bug many many times let's go all right looks happy now let's go ahead and try ah is there some video recording issue let's see if we have this token uh do we have the token token token token and I don't have a token that's good that's good that means I'm properly logged out so our logout functionality is working that's that's good to know all right so now that our logout functionality is working uh let's go ahead and work on that how the middleware actually works for this we have to actually study a little bit we have to close all of this and this let's study the middleware and here it is this is file not found so I'm going to go ahead and say I want to study middleware thanks for understanding my typos so now it says that middleware allows you to run code before a request is completed so obviously this is exactly what I want to do is before when my request is completed I want to run something the advantage of this my request doesn't reach to the completion phase it actually is being checked intermediately in between so if somebody is not authorized to visit the profile page it will stop it before doing that if somebody is not authorized to visit the login page the user who is already logged in so I can just stop him before visiting that page and I can redirect him to some other page so that's the goal of it so that's a nice one before completing a request and let me Zoom this again then based on incoming request you can modify the response by rewriting redirecting modify the request or response headers sometimes we inject some things in the headers as well for example maybe user ID so some things you want to inject in the response headers or the request header you can do that or you can redirect this modify this however you'll go with that a middleware run before the cached content and routes are matched so this is what they say I use the file middleware.ts now this is a really important word here you have to have to use this as middleware.ts there is no exception in that there is no other file name that you can use it needs to go into I'll show you where it needs to exactly go and how it runs so don't worry on that part although it is mentioned that it goes the same level as Pages app or source so we obviously need to put it inside the source we are talking everything about the source if applicable yes source is applicable for us so we need to put it into the root of source not the root of project remember this okay and now how does the middleware looks this is how it looks in fact instead of talking about it here we can just copy it that would be great and we can simply go up and talk about it so let me go back my code editor here it is again as I told you it is inside the app directory just to show you again Yep this is inside the source so not in the app inside the source all right so we'll just right click on the source create a new file this will be middle middleware dot TS or JS whatever you're using I'm using TS obviously I'll be using the TS you can copy and paste the code which we just copied here just a moments ago and this is exactly how your middleware looks like now there are two parts of the middleware the first portion of it is the logic part and the second part is the matching part that on what route you want to match and you want to run your middleware so you can define a lot of things here so what I'll do is instead of giving it as a string like this you can actually give it an array and it will match all of this that is what I found in the documentation and I found it much more useful so the route that I want to match is Slash and by the way there is also something more interesting in the darks so there is a pattern matching as well so you can match the file patterns as well for example here you can say slash about Slash colon path and whatever the path comes of asterisk means anything you can also match the paths like this like this so this there is a regex that you can involve there's a lot of this so you can see somewhere here let me zoom out so somewhere here they actually mentioned that hey you can match a lot of paths a lot of these details so all of them are mentioned up here I'll just go with the basics that I want to match so I want to match uh this one I also want to match slash profile you can match slash profile slash anything as well that comes up I also want to match if somebody is visiting slash login login and I also want to match slash sign up okay uh these are the paths that I'm worried as of now if I have more I can come back in the middleware and can just simply write the code for that super easy so this part is a matcher I hope that is clear now now let's go back on to this part I'll just remove this comment somehow they're bothering me a little okay so we have this function middleware and right now it's redirecting just the response and we'll just remove everything what is it is returning because we want to write our own logic now what do we want to do now we have couple of paths which are public paths for example login and your sign up these are public paths if somebody has the token he should not be able to access those public paths all right and there are some parts which are protected path so somebody who is not allowed or who is not logged in he should not be seeing profile so something like that so first we need to find out that how we can find out what are the paths because right now we have no access to the paths and luckily for us this next request actually gives us a lot of thing uh next request by the term next request I mean to say this request so this will be helping us in finding on what path you are so you can go ahead and declare a simple path variable just like this and this request has access to this next URL dot path name yep that is that is so simple and no it is not a client side or a client component this is how it always needs to be so once you have this now you can match that what is your path name so we'll be declaring that some of the paths are public and some of the paths are not public so we just need to find out which one are public so const is public but and for the public path what we're going to do is we'll just check if the path is equals to login or the path equals to sign up I think these are the two public paths we are worried about login and sign up so this should not be visible to somebody who has token all right so it's public path again if it is login then it will be true if it is sign up then also it will be true now next thing is we need to extract the token now this is very common we have already seen that while injecting the token that this request is completely capable of going into the user's cookie and we can extract the token from it super simple we can go ahead and say hey request just access the cookies and from that just like we were using set we can actually use the get method of this and we can grab the token now this token might be there might not be there but if it is there so optionally it might be there that's why the optional we can extract the value or we can just provide the empty one so in any case there is a variable known as token which has some value either the actual token value or completely empty that's that's fine okay now I have two variables here and I can decide based on them that whether should somebody should be able to access a path or not so if the path is public and you are having the token that means you should not visit the login you should not be able to visit sign up so let's go ahead and code out that so we're going to go ahead and say if the path is public is public path and you have token then I would love to redirect you now the redirect response is is like that but there are a couple of other ways as well how you can actually provide that this is also good there is no problem in it and you'll also see some of the documentation code that is written somewhat a little bit different in this there you can directly use the redirect there is no problem I haven't found any if you find any let me know in the comment section but you can actually create a new URL that is what I found and new URL no suggestions are not good so I'll just go ahead and say hey this guy needs to redirect somewhere we need to redirect him somewhere because he's trying to access a sign up and login so I don't want that so let's redirect him on to slash that's it and then the second is you have to request use request and then we can say dot next URL so I found this is a little bit tiny better this one needs to be request request come on can't I write request all right so again you can directly use a redirect and can work with that there is no problem with that I found this one a little bit more reliable but again I'll check out documentation as in the next years things are evolving so I'm just also learning as as we go so this is first path we have handled we have rededucted the authenticated users to the slash of the application or in case you want to redirect him to slash profile uh that's your choice totally your choice maybe dashboard whatever it is that's up to you now what if the URL is not public and token is not there so in that case obviously you should log in first so we'll just go with that if uh there is no public path and there is no token so in that case we'll be just redirecting him to login and then again we'll be using the same format request dot next URL so that it automatically moves to the next URL and it looks like we are having some issues with the curly braces should be happy now yeah the indentation is messed up it shouldn't be like that I think this one can go here and that will do a little bit cleanup yeah I think better all right so now we can see that this is all there and let's see if we can still visit the profile let's save this and let's see how many errors we got uh looks like a good day no errors and let's go back to our application okay let's try to visit profile okay I'm not able to visit profile uh what if I visit profile and Slash hitesh I can still visit it because I haven't mentioned that after the profile am I looking for all the path remember we saw in the documentation we can use Asterix and all those rejects to do so but I'm happy with this this is a simple assignment for you but I cannot visit the profile because that is now protected now let's see the login version of it so I'll just go ahead and say 2 at the rate gmail.com password secure one you know it one two three four five six uh login processing and now we are on the login page can I still visit the login uh no I'm redirected to the slash which is home uh but I can actually go ahead and visit the profile as well we should get a profile link here on the home page as well but anyways ah it's fine it's fine we Now understand that how we can extract and write a middleware as well so that's that's a good start now one more thing is notice here that we are able to grab the token as well can we extract some data from the token as well because yes it was us who actually designed this token so we can definitely uh 100 get some uh data from the token as well let's go ahead and try this out let's go ahead and create an API route for it so inside the API users and let's create a new folder what should I call it a user a me user and me yeah whatever the naming convention you want to follow you can go with that I'll probably go with me I think that's okay and then here we'll have a new file so we'll be having route dot TS there we go now how we can grab this information all right now this grabbing the information is going to be done probably multiple times because we will have the token now we know how we can extract the cookies and token and token if you remember if you forgot that let me remind you again at the time of login we actually injected a lot of information in this token I'll just close this one this is the token data so I can technically extract all this information if I know this token secret which I know because I created it so I can actually do this now I can do it directly here as well or I can create a helper method which can help me to extract this token so maybe later on at some point if I want to use it I can call this method so time to go into helpers let's go up here and in the helpers we have this we have no helpers as of now that's so sad we should be having some more helpers so let's create a new file and let's call this one as why it's not writing ah there we go now it's writing so we can say get data from token very liberative dot TS of course okay how we can grab the token data now get token data is super super simple just a few lines of codes I'll do that quickly again this requires the next request otherwise how we will be doing it all right and also we'll be needing JWT JWT suggestions from Json web token now let's go ahead and simply export a function which we'll be calling it as get data from token very liberative I like that and we can have requests just like this and we'll close this all right how we can get that obviously we'll do a try catch the catch part is super easy super simple we can go ahead and get any and we can say throw not like that throw come on I can write that and throw a new error and we'll be throwing an error message all right that's all we'll be doing now how we can grab this we can simply go ahead and say hey request you can access the cookie you can get the token value just like this or there might be a case where it is empty so we'll just go ahead and use this and we'll store this uh token into a variable or you can call this as encoded token because right now the value is encoded now we need to get a decoded token as well so for that I can use this JWT and this JWT has the option of dot verify not only it verifies the token but it also actually extracted the information as a response of this function so I can just go ahead and say process token and then process.env this is not my variable I have created a sample EnV for you so that we can actually grab this variable from here I'll not open mine one because there's a password in that so I'll just go ahead and paste this make sure you follow this exclamation as well if you are in the typescript now as I told you this actually contains a lot of information so you can call this one as d coded token because it is now having this information and you can extract this information now it's up to you what do you want to return you can return the entire decoded token or you can just extract the ID from it now we have to check that what we actually injected into this one in order to extract this so I need to go into my app API and login route Let's see we injected this ID which is actually user.underscore ID okay so we are happy with this all the keys that you are setting that needs to remain same ID username email so this key is really important so we'll be simply going ahead and getting it like that now this is going to give you a problem because there is no surety that the ID will be here because it doesn't know the data type of it I'll not declare any types here that's not my goal so I'll just inject an any here not a good idea I explicitly say do this in my typescript series but we'll do it here all right so now that this method is available for me which is uh get get data from token now we can actually go back into the me route again I'll just close this login one so that we don't get confused let's import this method and simply work with that so we'll just say get data from token so there we go we got this method here and we'll be needing the request and response because this method is dependent on this request somebody needs to send it there so we'll be saying hey import give me uh not like that yeah give me next request and response from the next server uh we'll also be needing the user user and that user will come up from Models user model I think that's correct let me check that so we are having this models and inside the models user models okay that's correct that's correct and we'll be needing the database connectivity as well so let's go ahead and simply say connect there we go obviously the connection needs to establish so first and foremost let's do this now let's create a simple a method don't go with the suggestion in this case you will explicitly make it go wrong so let's go ahead and say export async I'll accept that and then let's call it as a function this will be a get method a get yeah we are not getting any data so get method is fine and we'll be saying request that request will be type of next request and we can have it like this all right next up obviously our try catch so we'll go ahead with the try catch the catch part is easy so we'll just go ahead and say any here and then we'll be returning a next response not like that next response Dot Json I want to return a Json yeah that's what I like now what do we want to do in the try catch part simple just call this get data from token and pass on a request to it that is it it will give you a return response we coded it like that return the decoded it gives me a ID so I can just store that into a variable now and obviously this will take some time so let's just go ahead and await that and that is why we created a sync and this will give me a user ID that is my variable so I can call it as user ID underscore ID whatever you like that's totally up to you and then it's time to find a user based on this user ID so user has the superpower to query with the database and I can go ahead and say find by ID or find one whichever you like both of them are gonna serve same in this situation so I'll just use the find one and I'll just give you that hey find based on underscore ID and I'll give you the ID user ID so a space would be nice okay I made it all caps now I just want eye caps not the T I'm happy with this okay so now when this is done uh what more we need to do await because that's a database operation database is another content and we'll store this as a user so you have given me back a user now this will give you everything I don't want everything because if you check out the database it has ID username email password verified is admin so you can select your fields which one you want and you can deselect the fields which you don't want so I'll just say hey I will go ahead and set select and the password that is what I don't want so you can put a negative sign there by putting a space sadly there is no comma I think the comma would make more sense but sadly there's no comma if you want that I don't want maybe is admin so you can go ahead and put that as well but I'm happy with this one only all right so now I have a user now what can I do with this user I can return a response that hey here's your user now do whatever you like it's an object so I'll just go ahead and say return next response the next response response come on and we'll have a Json just like this and in here we'll be saying a message first and foremost come on message user found and then the data will be sending the data like this so we'll be sending user all right looks good you can send the data directly as well in case you wish that's okay and now we can simply have a save on this one all right so now we have designed a route which can actually help us to Simply go ahead and work with this so it's totally up to you that how you want to utilize it maybe you want to make another request let's do it let's have fun so in this slash profile let's actually grab the user's ID now we know how to do this so as soon as somebody lands here I want to fire an xeos request to me and I want to grab that user let's try that let's try if we can do this and inside the profile will go into page now obviously I want to have this get details method and this get details method uh will run let's just run it on a button click you can run it with the use effect as well as soon as the page loads but I want this one to run it on a method call so we'll go up here we'll design the method so I'll just minimize this log out not interested in that let's call this as get user details like this and obviously this will be a sync just like this now how do we do this pretty simple we need xtos it will fire a get request to slash user slash me ah nice I like that this will await because it's a request and we'll grab a user out of it or a response out of it first not the user now with this we can go ahead and say a console log first and we'll say res dot data all right and since this is a res dot data we actually need a state as well where we can pass on this information without this it's it's not going to be very helpful but again it's up to you I need a I need a state so I'll call this one as data you can call it as user as well I'll call this one as data no I don't need this I don't need this either I'll have a string which says nothing just for fun U state is not available why is it not available it should be here react and we'll be having you state from react okay now once we have this now I can use this set data method to actually use this so set data what is happening no I don't want Mongoose set why unobvious suggestions so we'll be having set data and that data will get res dot data but the problem is the data is not inside the res dot data it's actually inside since we have passed our information like this so let me show you this if we are passing the data so res dot data has all of this data so res dot data dot data dot user will have the information Yeah we actually accidentally made it more messy so further down the data and then further I can extract this underscore ID yeah that's that's messy and what we're going to do is just below this profile page we will get an H2 and this H2 will get some data so if the data is there do something do get available just like this uh probably not we'll just first get the strings otherwise do something else so what is happening so if there is nothing inside the data so what we can do is we can write some of the things let's actually evaluate this that would be better if data equals nothing because that's the default State remember nothing so if data is nothing then we'll be saying hey this is nothing so let's just go ahead and inject nothing here just like this and if there is some data then we can actually go ahead and inject instead of this string let's go ahead and give it a link as well so I'll just go ahead and say link just like this okay and why is it giving me this problem here that oh href is missing okay I can I can add that no problem and I'll move it to the next line now I'll do it here okay href okay where do I want this one to go so I'll use the back tech I'll say slash profile okay but since I have extraction of the ID now I can go ahead and Slash and put this data although we should be calling it as ID but I think that is good all right now uh one more thing who will be calling this uh there is no button to call it all right so let's create another button who can actually call this so I'll just duplicate this one and I'll say that hey you will be responsible for get user details so yep get user details ah I don't think you will be happy as a blue so we'll just go ahead and say you will be what a violet purple you you get purple a little darker shade of purple 900 no I'm not happy with this okay uh what else colors uh green yeah will will go green 800 cream okay I know okay so this still says logout this shouldn't be saying log out this will be get user details all right ah right now it says nothing which is good I also want to actually highlight this nothing as a little bit so we'll say class and we'll be having a little bit of padding rounded and we'll be having a BG Dash I'll use green this time not the orange you made a lot of fun of that and we'll be saying 500. and padding not padding like this what am I doing padding Dash three let's go yeah better okay so let's see get user details and there we go right now we are having an empty that means we are not getting any user details let's see what we are going doing wrong it says a message user found and then we have this data and username and email okay so this is coming up into the rest or data so what we have to do is rest.data and then inside that we need to go inside the data and then we need to grab the underscore ID and then we actually can grab the ID so I think this is correct why it is not mentioning the details here so let's check what we are doing wrong in this case okay okay my bad my bad I actually didn't set up anything inside this link my bad we never injected the variables so my bad so we need to inject this data here so the URL was there but the value was never there ah there we go totally a small bug so now we can actually click on this and there we go not looking good this profile should be a little bit above but anyways you get the idea that how we are able to grab the user so now any user we are able to track him down so that's nice and the log out middleware that's working nice get user details we get this and now we can actually click this we can actually grab all of this so instead of running this method on a button click just like we're doing here we can actually use a used effect hook and just whenever somebody visits this page we can load his information there and can directly just display there so I think that's a that's a great start that we have done so that's really nice and I think this is wrapping up our application quite a lot that we are able to do so much in this one I'm super happy that we are actually on this phase that it's working nicely now a couple of more things what we can do is we haven't talked about how we can utilize the mail trap which I actually discussed it's probably logged out so we haven't discussed that I'll close this one I'll close this one I need to push this on to GitHub as well so let's go ahead and do this and I'll go ahead and say hey let's add every things like this and we'll be saying added middleware come on added middleware and what else we have done we have added middleware we have also worked on me route okay Commit This and of course we want to push it all right so that you can see the repository is available on my GitHub account it's pretty easy to find you can definitely easily find that all right so I think that is uh what we'll be doing in this video but there is little bit more that we need to have an action plan so we have gone through with quite a lot of details in this one we have gone through with the middlewares I showed you how the how to protect some pages routes and all of that from the server side grabbing the cookies and all of that couple of more things which are easier things now is how we can first and foremost shoot an email so obviously we'll be creating a helper file for that and once the email is being shot how now the values are there in the database so I want to update the values in the database that's my concern now get this token into the database as well and send this token to the user email as well that's what my action plan is right now and obviously we'll figure out the plan as we go we make a lot of mistakes and all of that so that's that's a part of the things I hope you are enjoying this series if you want more details or more projects or something let me know in the comment section I'll definitely love to do that for you guys and consider hitting subscribe there's a lot of effort going on I would appreciate that let's go ahead and catch up in the next video or if you're watching all in continuation just a small break and catch up on the other side hey there everyone ate here and welcome to almost the finalish video of the series I'm saying almost because I'm not sure I will be able to do all of this or we'll be extending this series depends on you just let me know the comments so the one of the last thing that's remaining almost last is how we can actually retrieve the user update some data in the database as well as send an email now sending the email has a lot of issues and a lot of good ways okay shways and the bad ways of doing it I found that luckily we are in this typescript JavaScript environment where things are super easy for us to work on with that we have this package known as node mailer which helps us to do almost everything that we want to do but there are new players which are coming around in the market which are handling these mailing into a new and creative way I'll talk more about them in probably some another video this time we'll be going with the core node mailer way also there is an exception that I have taken in this particular video that is usually I keep my mailing helper as just to send email nothing else it doesn't do anything it doesn't generate any token or anything like that it's a special helping file which helps me to send an email that's it but in this case I'm actually generating my tokens within the mailer as well because in this use case it actually makes sense to generate these tokens within the mail itself and I'll show you the walkthrough as well and again I always say there is no good practice bad practice it depends on what the project is what scale is and is it the maintainable code is it not so that's all it is in this project since it's not very scale we are not talking about like making thousands and thousands of files into it so we'll keep our mail and we'll keep it in such a way that we are able to generate the token within the mail itself the mail helper file and based on whether the user is requesting to verify an email or forgot the password I'll walk you through with a couple of scenarios of how you can do it that's the one part the second part is how do you want to verify the user that's up to you there are a couple of ways you can do it all in the back end you can do a mix of backend and frontend that is also totally doable it's totally your approach again there is no good right and wrong here it's totally approachable whichever you feel you can do that in case I talk about just the back end approach then the URL formatting needs to be in that way and if you are looking for the frontend part of it then obviously you need to have a frontend page of it both have their advantage if you do it totally on the back end then there is nothing much you can just redirect the user onto a home page or something but if you bring the user on some page and then the verification happens then we can provide a message to the user that hey verification was successful that's totally up to you how you want to do it it's totally up to you I'll show you and walk you through with the boasted approach that it makes you comfortable with both the approaches all right so first this is the service that I'll be using known as mail trap the one good thing I like about the mail trap is again go ahead do a sign up they have a free tier I'm on the free tier I'm not buying it because it's a good service but I'm happy with without buying it for testing we'll be using this email and as soon as you go ahead and create ad inbox it was empty so I added an inbox and simply go ahead and click on this inbox after this and what you'll notice that on the left hand side you get all the Inbox and you get all your Integrations here so you can go ahead and integrate it directly with the curb I'll really like that how thoroughly and deeply they are working on almost every single thing is available for E for us we are using the node Mailer in case you are using play mailer or something for Java or something you can still use it so I'll go with the node mailer and all you have to do is copy this and the good thing is while copying it also copies your password so obviously I'll resetting this one so again this will obviously expose my password as well but again this is just a test account I can reset this reset the credential just a one click not going to be bothering it much now one more thing that you should really know about it is let me show you this by opening up the Google and try to search for JS and this will be useful information notice here the URL let's say search question mark Q equals and something now this is a classic JavaScript there is nothing in like too much import important in this case what I'm asking you is how you can actually grab this information how you can grab the URL information now grabbing the URL information requires a couple of things you can grab it from the back end we have already seen that by creating a square bracket ID we can directly prick the params.id that's one way but if you're having this question mark or something like this you can still go ahead and click on inspect and in the console clean this up and we can just go ahead and say window dot location if I can write that and then you can go ahead and look for a search and this gives you the search parameter everything after question mark Q equals and I can go ahead and later on split this up and divide it based on the question marks everything before the question mark after the question mark I can grab all of this data so this is basic that we have now coming back why I'm showing you all of this yes that's a good question that's a very good question let me go back into my helpers where are my helpers and here are my helpers I'll create a new file and feel free to call it Alan thing I'll just call this one as mailer dot TS of course now the reason why I'm showing you this is there are a couple of ways how you can do this for example if you have a domain.com ah come on don't do this domain.com there we go you can go ahead and write something like a verify token and then slash and the token name so whatever you want to write so that's the one way of doing the thing another way of doing the exact same thing is how you craft your emails it will be whole dependent on that and which approach to take another approach is having this again domain.com why are you doing this to me domain.com and then you can write something like this slash verify token and then you can have simply a token question mark token equals whatever the token is now again there are some easier way of doing the things if you do it with the first the first way this is almost looking like domain.com profile and then send this so we can extract it directly with the params params ID so we have the square bracket syntax we studied about it and this is also the syntax which we just studied that we can actually grab it anything that's a question mark and then token equals all of that we can extract that by using window.location.search this second approach is better for me if I am actually using a client component this approach is better for me if you're if I'm doing everything from the server component there is no right and wrong in this one so again make sure you choose whatever you are choosing a little bit wisely will make your life easier and again it's it's not like that hey this approach is not possible in the printed it is possible but easier way and making yourself an extra travel that's up to you all right so we have already installed the package of node mailer we actually talked about that in the earlier so we'll be just grabbing the node mailer we also need to grab the user I usually don't do this because I like to send the token and everything and update the information directly from the controller where I'm writing but in this case we'll be actually doing a little bit different so just bear with me for a minute all right so we'll be getting the user come on from and we'll be using command at the rate slash come on no suggestions models and then this is slash user model there we go this is the file name and also we'll be encrypting this so we'll be needing be correct Js that's coming up from B group J so these are the libraries that we'll be needing now first of all let's learn how we can send an email now sending the email is actually super easy if you'll go on to the node mailer website you'll see that hey is it that simple yeah it's actually that simple so if I go ahead into npm install node mailer we already did that and all it takes here is example so in this example you can see we create a transporter which actually is nodemiller.create transport in this you provide your host Port secure authentication which will grab all the details uh from our SMTP host which is mail trap and then you simply go ahead and provide some options in the send mail so these are all options we'll actually create these options outside so it's much more easier from to subject text HTML so you can just provide everything and that's it that's await dot send mail that is all provide the option so two lines of code first is provide the create transport and then this transport can just send the email with the options yeah literally that simple so this is all what we have as of now let's go back and see that how we can try this let's create a simple function and call this one as send email which is perfect in this case and obviously this is going to be a sync and what information you will be taking from the user that is a big big question now what information do I expect from the user first and foremost I expect that he'll be sending me the email where do I want to send this email obviously I need to know that then optionally you might use the same file for sending the email for verify token for forgot password as well so both the tokens can be sent and right now we'll talk only about the verify but I'll still walk you through with the code that can be there for detecting the email type and all of that in this case we have just two but otherwise I prefer to have an enum for that and based on that I like to check that so I'm telling you what approach I usually use and what I'm using in this case so I'll just have this email type and then also send me the user ID as well without this I won't be able to do much and I'll just go ahead and type any here so that it doesn't bother me much and there we go so this is my basic it's all right email to send where should I send this email email type that is it a verify email forgot password token email or something else like that and the user ID because obviously I need to grab some information from that user so I'll actually use this one as well again it's not super required but I'll actually use it to get some encrypted token all right first and foremost let's go ahead and have the simple try catch the catch part is always the easy so I always take down this one super easy just cast this as any I don't know what the error type is and then simply go ahead and say Throw new and we'll be saying error.air message not much worried not much bothered about it the first step is now if you remember from our excalib draw if we have this yeah here we have if you remember I told you that we need this hashed value now this hashed value can be generated by a variety of means and variety of encryption rounds as well decrypt.js helps us to do all of this but right now we don't have this so how we can actually go ahead and get the value so it's super simple we are using the user ID So based on the user ID we have to provide some string that can be encrypted around so obviously there is a requirement for this you can go ahead and give him any gibberish which doesn't really make sense but you can you can there is nothing which is stopping you so all you have to do is simply ask becrypt JS that hey bcrypt.js I need a hash value yep that's it and in the hash value you have to provide that hey uh what should I use to do the hash value like what am I encrypting what is the string that I'm encrypting you can give any string because it doesn't have a meaning it just in the database we want to match it but in this case I want to actually provide the user ID and then you have to provide what number of rounds that you want to go so I will just go ahead and go with the 10 rounds and that's it that is all I'm doing now I don't have a guarantee that this user ID is going to be string or not because there is a chance that user might throw up directly me uh mongodb bson ID almost like Json but bson so I'll just go ahead and just use a simple two string method on top of it so that I'm 100 sure of it now let's go ahead obviously this will take some time because we are using 10 rounds of encryption so let's await this and call this one as const hashed token all right so the token generation part was super easy there is nothing I'll just write the comment here as well that will be create a hashed token all right so this part was super easy now the next part is actually tricky now I want to update the user I want to find a user and in case you forgot that let me go ahead and open the model for you we have this uh thing forgot password token verify token and all these so I want to add these things into the token all right so how am I going to do this again this is super super simple there is nothing to be worried but there is something known as email type and based on this I want to update so first let's update with regardless of what the email type is so I'm going to go ahead and await this obviously a database operation database is another card to then so I'll go ahead and say user and then user can actually run a find by ID and update for this I have to provide the ID so I do have the user IDs so super helpful here as well and then I can put up a comma and then I can just use the verify token so what I'll do is the next thing is actually suggestion is really nice here okay uh so what I can do is let me just go ahead and hit and enter here this is fine so I am first of all having this reset password token no I'm not as uh I don't want this I want the verify token to be updated first so I'll just go ahead and update the values so this is my verify token and obviously if the time is for that expiry time should be for the verify token time as well so I have this so the verified token that we have is getting this hash token that's exactly what I want first make sure you understand this part find by ID looks for an ID and update the values and user ID is the ID which you will be looking for hunting the record in the database and then only these fields will be updated not all the fields so verify token will get this new hash token verify token expiry will get the date dot now and then these values if you don't understand this that's okay it's nothing much more we are giving it 36 so it's in milliseconds or you know 36 hours and all of that so in case you want that you can just do it uh like how many hours 24 hours into converted into minutes and hours and all of that I'll not go into that much of detail in depth that's very basic now you can actually go ahead and say new equals to true and all of this we don't need this third parameter although that's nice but I'll talk more about that in some another day right now that's not important for us this will do the job for us and we are happy with this okay now this is all happening when I'm assuming that my tokens are getting updated for verify token but what if the email type is for another one which is forgot password token obviously this is the token part of it you need to grab the password from the request body and have to submit that as well that's that's a different case but actually I can just entirely cut this out and just write a simple if Case to understand that what type of email you are sending me up so if the email type and again I usually do that with the enum but in this case I'll just go ahead and do capitalize of that if the email type is verify then I'm going to do all of this now in case else if the email type is actually other one which is the reset password or I'll just use the reset reset then in this case I'm going to paste this again but I have to change the values in that case I'll just go ahead and use forgot password token forgot password token and of course the expiry will also be the forgot password token expiry again really simple code but again we have just modified this now this email is usable for both the context and we can just we are just generating the token based on that so that's super simple now next part is this is all the settings that we are doing already in the database so the value by the time this method is called the value should be there in the database now again there are lots of good approaches of handling this scenario maybe you don't want to send an email until unless all the values are set in the database there are a lot of use cases of that I'll not go into that one then the next step that we saw is use this node mailer and create a transport so node mailer dot create transport create transport there we go and we'll store that into a variable as well we'll call this one as transporter just like this and there we go we'll just end it like this there we go now what are all the options that are required here notice here it says Service Gmail we won't be using Gmail instead what we're going to do is go on to mail trap and we'll just copy all of this so all this transport in fact we could have copied this earlier and grab all of this so I'll just go ahead and paste it like this notice here all of the password and everything are there these are random password doesn't really bother much but similarly you can have these host and everything for other domains as well like for Gmail there's different port number obviously the author and password I don't want to display my password here again you can put this into your process.env file as well that's totally you usually we go ahead and put this so I'm going to go ahead and put up a todo here and add these uh credentials to EnV files so that's a todo for you you can actually go ahead and do this now this is ready now the next option that we saw in studies was creating a mail options you can create it on the go as well but I'll just go ahead and create these mail options just like this now in the mail options we have couple of things that we can get first is from email so whatever Reserve from email you can go ahead and do that I'll just go ahead and say hitesh at the rate gmail.com which is not my email come on there we go and I'll just put up a comma Now the next is two emails so two is email whom to send email we are already taking that as an input in the parameter so I'll just go with that and then after this we also need to have a subject now the subject can be just directly verify your email or you can actually go ahead and use that what kind of email is actually coming in so I'll just cut this out and I'll test it based on the email type so email type if email type is verify we'll say verify your email otherwise we'll say reset your password so again we can just use these smaller variables now how the email is being crafted actually I have written it already so that we can discuss this so there we go so as we saw uh directly we don't have hash token hush oh hashed token hashed we missed an edge almost all replace I'll update this hashed token small typo there we go and we need to use hash token or we have hash token here and I think here also and now it should be happy here as well okay so what we are doing is we are simply providing an email which is saying click on this domain to verify your email or to reset your password and notice here this is going to process.env.domain the domain name we have already set in environment variable so it will be directly like uh HTTP colon slash localhost colon 3000 in case you deploy it on the domain just environment variable needs to be updated and then verify email question mark token equals to Hash token so this will be our email that we'll be having all right that is all what we need the last thing is to Simply send email with these mail options so that's all again this takes some time so transporter will send an email with all the mail options and you can go ahead and store this mail response just like this and after this you can simply go ahead and return this if you wish totally up to you uh so we got this one let's see what all so this one is also saying hey cannot find a declaration file of this one we'll just probably install this types as well so that we get rid of these errors all right so quite a lot of detail talked about the mailer and how the mailer is going to work now once the mailer is done all we have to do is first create a page or we can first ah now that's a confusion should we take down first the apis or should we first take down the frontend page let's take the apis first I think that makes sense so in this inside the user we will be simply now again based on where you are landing the user your route should be according that but in this case now my bad I'll take that back so in this case the route doesn't really matter it can be any route we need to just create a frontend for verify email for that in the back end my API request could be anywhere because once I land there then I'll use a use effect hook to fire a request okay I'll do it that way so I'll just right click and create a new folder and this folder will be simply verify email verify email verify token yeah totally up to you I'll just right click create a new file and we'll just go ahead and say route dot TS now inside the route.ts we'll have just the request response we have to connect with database as well because we'll be updating some fields in the database as well and uh already things are there in my database so I need to extract the values by searching through the token all right so I'll first and foremost will be connecting to connect connect no option for Connect nope don't want that add the rate slash and this one is config dbconfig slash dbconfig all right so no matter what happens this needs to connect so I'll say that hey you connect so database is connected now we don't need any async or anything like that we'll be needing the next response and request all of that so we'll be saying next request and next response and we'll be needing user as well because I want to perform a search so I'll just go ahead and say hey give me the user from model user model all right that's great now once the database is connected then I can go ahead and Export My Method so I'll say export async uh no not like that a sync function come on if I can write that that would be great function and this will be a post method obviously because we are retrieving some data or not request that will be of type of next request and there we go all right first try catch we should have created a wrapper around it because this is too many try cash in the entire but again what can we do now after this I'll just scroll this a little there we go let's return uh next response with again dot dot Json come on response.json there we go error messages and there should be a status code as well yeah that is the one that I'm looking up for and now next up is first and foremost let's grab some of the tokens so we'll be grabbing the token from request.body so const and request body and await request.body.json app that's request.json directly there we go okay now once this is there I know that there will be a token coming up for me so I'll just go ahead and extract this token now this is an approach where I'm using that there will be a frontend call who will be making a call to the API and will be able to handle this again this could have taken a different route if in the verify email I directly create a ID the square brackets an ID or maybe a token with the name of token so I can directly extract a colon token there so again both approaches are correct there is nothing wrong or right like that I would also like to see if this token is actually coming into this it helps me to debug that later on so there we go now I can see whether the token is coming it or not I have to find a user based on the token just like I can find a user based on email I can find a user based on the token as well so I'll say find one yeah find one that is fine and this one this time will be finding based on the token and whose time is greater than now so obviously if the token time has expired in the past whatever the time I have set there I don't want that so two condition needs to be true now I have to find the token as well and verify token expiry should be like that so verify token expiry comes from the model itself so if I go ahead verify token expiry this should be greater than what's the current time is so obviously in the future I can verify if it is already in the past I cannot sorry uh little cold here but again don't mind that sorry I cannot edit them out all right so now if it is there obviously that needs to be a weight and what else we will be storing that into a user all right all right good and nice now what else I can do if I don't find any user in that case I need to take care of that scenario so if there is no user then in that case return a next response Json error invalid token yeah that that's a good response or we can say invalid token or we can say user not found yeah that's the debate but we will not go in that debate and now here I would like to do a console log that whether I'm getting this user or not because it will help me to debug later on I can remove them but I'll just keep it here for you to Simply have this now there are a lot of ways how you can actually now update this since you have this user actually you can utilize this user but in case you want to make another database call you have verified it now now you can make another database call to update this you can use this Capital user but I will not do it because I already have a reference of this user which is a return from this user object so it also has some of the superpower so I can go ahead and simply say user dot is verified so I found the token I found the user everything is okay so I need to update it not only that I have to flush out my verify token as well as the time as well otherwise the time will always be there there's no point of keeping the unnecessary data and after that I'll just say a weight and then user.save this await is super important because it will take some time to update this and now we can actually be all happy now once this is done we can simply go ahead and say return next response and we can probably redirect no I don't want to redirect the redirection should be a job of frontend guys so I'll not do this next response will just send a Json response he can actually do things based on the response so message email verified status is success I'll actually use different messages and I'll say message email verified and success suggestions success true there we go forgot the comma there we go all right so in theory now it actually works everything works in theory all right so this should be all okay now we should be able to send and fire an email okay so how you are going to send an email now that's that's a big question so I think the email should be a part when somebody is actually signing up when somebody sign up we can actually give him a message or we can give him a button as well that hey get your email send write your email and we can provide another page for it but I think in this case I'll just send him an email whenever he signs up so that makes sense otherwise we have to write another page button don't want to do that okay where it should be it should be a last job so user is saved in the database before sending a response we have saved the user here before sending the response let's send him an email send verification email so how do we do that now we can bring this send email so I'll just wait for it and we'll say send email so we can bring this up hopefully the import is done send email helper Sim mailers okay that's good and there we go we can send an email so already this is the email we have extracted from the user body so this will be used as to whom I want to send email the email type is verify so it's it's really bad to see this string in the all caps here there should be an environment variable or an enumeration or a constant file for that but anyways I'll be just happy with this and what would be the user ID so now we have saved the user so this is now useful for us and we can extract and underscore ID from it and I think that is it now in theory at least it should be saving uh sending me an email all right how many errors ah nothing so far surprising let's see how we can actually register another user so I think this is it yeah let's go ahead and go and visit the profile if we still have a user yep nothing okay oh we have to get the user details and we'll log out so now there is nobody let's try to sign up another user how many users we have we have one we have two time for three so this will be three this will be three at gmail.com and this will be one two three four five six we can put some a validation for password as well but we will not do it right now let's try to sign up processing command do it the first time it's little bit slower ah there we go now in theory we should have something in the mail trap there we go three gmail.com all right so these are testing email now notice here when I click on this uh verify email I can actually right click and ah there should be a link oh there is a link but this link is blocked probably that's really bad we need to gra get this email directly so that somebody can copy paste in the browser as well uh we need to try it again in the mailer as well let's go in the mailer this might happen to you as well so nothing wrong okay so this is email this is somebody writing up here so we'll just enter here and we'll say r copy paste the link below in your browser I think that's good and we'll add a br and there we go so now I think it should be much better so that somebody at least can copy and paste the link uh this way okay uh I need to sign it up again I saw this this doesn't expose any email or something like that so we'll just do this now in the meantime where we are here we are we can actually delete this ah how do we delete it we can delete this confirm I want to delete it let's go back here and we have three time for four time for registration of the four okay we don't need this we can come back here sign up sign up the four four and we'll get 4 at the rate gmail.com and one two three four five six sign up and taking some time that's ok we got the processing here all right now let's see where we have this mail trap okay forgot here and this time hopefully we'll get better and Yep this is much better oh we got some issues here which was saying your browser dot undefined then verifies so probably because it was a local host that's why it's creating some issues because I think process.env ah my bad my bad my bad actually I know I know why it is giving us an issue because if I go ahead and check out my sample EnV the domain is all caps so it's not an issue it's actually an issue but anyways it's good to have the text link as well so it should be domain my bad I'm referencing the wrong variable there uh that's good all right save this and this should be all good this is how real world development works it breaks it fails uh let's let's go ahead and register another user now sign up it's time for five five and then we will have five at the rate gmail.com and one two three four five six sign up processing at least our emails are shooting that's we're happy but we have limited emails as well we cannot just go all crazy so five and five Where You Are okay there we go all right good and now we can click even on that I'll not click on this but I can actually copy paste this entire thing we have the token and everything nice but if I'll do this we don't have a page which goes on to slash verify email and again now you can see I can just provide a link of Slash verify email slash and whatever the long string and I can extract that that's easy but we don't have we don't have the front end part of it so it's time and by the way everything is also dumping down here as well so that's also nice that we have got all the five four all the emails email is going there username everything let's also verify in the database as well refresh where are you where is the refresh option there is somewhere refresh here it is refresh option so I want to check whether this tokens and everything is getting to my database also here we can see verify token and expire is also getting up here all happy all good that's good that's good okay now what we can do is next up is okay we need to create a front end for it so apis you can go minimize and I now need to create a a simple route on the front end or the pages which can actually do this so I'll just close everything that's already too confusing all right sign up verify this is inside the API I need to create a route for the pages which will be verify email and again it needs to be exactly same as what you are crafting your url so I am crafting this verify email so somebody will land up here I'll copy this go back and inside the app I'll create a new folder the name of the folder will be verify email that's exactly and of course I know what will I be creating the file name with this which will be page dot TSX okay now this is a little bit tricky that how we are going to create this verify page there is a little bit involvement here first and foremost this will be use client that I know for sure use client there we go we need couple of imports so axios obviously will be there xeos from xcos and we'll be needing the link to redirect the user as well probably not I will still get this so we'll have this link from next link and we'll be needing some use effect Hooks and stuff like that so let's import them so this will be coming up from react and we'll be needing use effect is the one that I am looking up for first use effect I'll anyway I'll be using reuse State as well so let's bring that and I think that's that's all majorly I'll be needing router will be needing it probably not anyways so let's go ahead and Define export default function verify email page we don't need any props in here we can just go ahead and just close it like that verify email page we don't have props otherwise it would have any props we can just extract it like this params IDs just like that basics okay we don't have it right now so we'll just go ahead and escape this and now first of all I will grab some tokens so I need to store that token somewhere so we need a state for that so we'll just say token set token and this will not be a string will not use the typescript functionality here we'll just keep it empty you state that's like and then based on user is verified or not I'll show him some messages as well so either I can just create a message like this or I can create a variables like booleans I can use them to verify not verified or I can use a message for the same so it's totally your choice I think I'm going to choose with the verify email so I'll just say verified set verified and by default it will be false also we can grab some errors as well maybe there are some errors on the page so we'll just grab them as well error set error I'll just use the booleans for that as well right now there is no error all right so these are my data now how can I verify this obviously in order to verify I'll need a method and I'll call this one as verify user verify user email that's fine it will obviously be a sync so there is no doubt about that we need to set up an request to an API so let's go ahead and do a try catch for that and in the catch part we'll just set the error with the error or true yeah true because we are using Boolean and then we can just do a console log as well so that we can at least see what's going on wrong so error we can actually go ahead and get error Dot response because it will be because this is going to get an XTO so xeos might throw up some depth so response.data all right for this we need to cast this error as any otherwise it will not work okay now next up is sending a request from xcos okay all right axios will send a post request did we made it post did we made it post let me verify that again yeah we made it post we made it post so axials.post and where do you want to send this request slash API slash users slash notice here the suggestions are absolutely horribly wrong we need to get the verify token I'll verify email what is happening to my memory and this is what we have what we are expecting we are expecting a token there and the request is obviously verify email should have seen that already verify emails what we are bringing along with us a token so let's go ahead and grab this token this token is given to us directly by this estate so that's nice let's go ahead and wait for this a wait for this one and that's it once everything is all done then we can go ahead and simply say set verified to be true otherwise it is already false so that is all my method is going to be doing all right so now the problem is when you will be running this thing and I'll write some of the controversial code here okay so how you'll be or when you'll be running this obviously we'll be using use effect for this and for this we are dependent on nothing so we want to as soon as somebody lands on this we will be running this but I'll just do a small check whether there is a token or not and all of that so if uh I'll just check if the token dot length because it's a string so I can access its length is greater than 0 then go ahead and run this verify user I actually don't like this way because it's less readable I prefer this whenever students actually watch this they find it more easy readable so I'll go with that okay there is another use effect that I am going to run again you can write this yeah that's Advantage you can go a little bit sloppy with the next JS it actually do all the optimization do duping a lot of things of the request I don't have to worry too much okay so this is what we'll be doing another thing which I want to do is going to be dependent on the token so any change in the token will actually no I'm actually bad any change in the token should actually run this one okay this one we'll talk about that in a second I'll just go ahead and remove this so let me tell you what is happening here this is the dependency array of use effect so use effect is a hook which automatically runs it runs first time when the page loads there are a couple of other ways but will not go into that much it actually automatically runs as soon as somebody comes on the page but if somebody comes on the page and there is any manipulation in the token then also it will run now right now nobody is filling up my token notice here there is no code here which is actually filling up my token the token is empty will always remain empty so I need to grab the information from the URL and update my token as soon as my token is Disturbed that's when this dependency array is going to say hey something is Disturbed which is mentioned in the dependency array and I'll run this piece of code that's the whole flow now I'll come back here I need to actually grab as soon as somebody lands on my page I want to extract the URL so I'm going to go ahead and say I'll just grab URL token and this URL token we saw this already window.location and then again window dot location dot this will be on based on search once somebody is searching on that I'll just go ahead and split it nice and easy based on equals to and then the left portion will be all zeroth value of the array right portion is my token so I'll be able to extract that not only that I have to set this into the token so set token will get this URL token now as soon as somebody lands on this he will be giving me the token I'll set this token into this this will create a chain of events the token will be updated here this will notify that hey one of your dependencies got updated so run this method so this is obviously going to run this method and that's it so I'll just shrink this I'll shrink this and I'll shrink this the only problem is right now we are not returning anything so there is no page so return and there we go now what do we want to return okay we'll actually return and I have this already with me in my notes yeah I have actually saved this div class it brings everything to the center easy for me okay what do I want to have first of all most I want to have an H1 which will have a class name and we'll be going with the text dash for suggestions please yeah for excel for Excel this will say just the verify email verify email or verify your email now in the H2 I also want to display the token so that I can see whether the token is actually coming in or not so I'll just go ahead and grab an H2 now inside the H2 we'll start our JavaScript and based on whether we have token or not we'll do something if we have token we'll write something otherwise we'll write something that's something we'll write no token okay what do we want to do when oh my bad what do we want to do when the token is there we want to Simply display the token so what we're going to do is instead of this let's use packticks and let's go ahead and dump the token directly and token all right now also let's stylize it a little bit it's class name this one is going to be a little bit of padding padding two uh BG Dash value is orange I like that color orange 500 and the text is going to be black okay that's good now based on whether the user is verified or not we want to show him some text as well so what we're going to do is let's inject the JavaScript directly and we can just go ahead and say verified if he is verified then obviously I want to display this so what do we want to display in that case we'll just go ahead and have a div and in the div we'll just say nice and easy email verified and you can log in I like that I like that and all we need to do is close this div all right that is already good I love these suggestions so in this case if the user is verified then we'll optionally display him that email verified now you can go ahead and proceed to the login page so slash login is there text blue I think that's that's good enough I think what can give us an issue is this a tag because I think this is a wrong usage of a tag this will definitely crash our application so we'll just remove this a tag usage of a tag and the link tag is actually very very dangerous so I'll just go ahead and just clean it up like this that is all good now we can similarly make a copy of this and now we can actually go ahead and paste on the error we can display this so we'll just display that there was an error and then we can just ask him to do nothing we don't want to show him anything the text is to Excel and the color will be BG Dash red 500 and yeah the text is default going to be white but that is ok I'll I'll convert that to Black okay so I think that is it now we can actually verify and go on to this page if it works in theory at least so now can I go to the verify page oh by the way by the way one thing I forgot almost I I think we need to actually do something more verify email and if I go ahead and look onto this notice here I go and go back so notice it says I cannot read the property of undefined so if token length is 0 we shouldn't be running this so obviously we need to verify there are some of the steps undefined reading lengths so let's go back so what we are doing is the token is right now empty string so that is creating some of the problems and issues on this page all right so let us take care of this you state is empty and at the token length here we have the token length is less greater than zero then only run this okay this should be okay verify user email and what in the case we are not able to grab this token all right so in that case right now this is setting it to undefined that is the problem so let's use an or statement to set it as back to the empty string come on all right so this should be much better approach okay there we go now we have fixed this small bug happens so right now there is no token ah but there is a problem we should actually fix that up into the middleware also because remember you always and always will forget about the middleware that hey where the things are actually matching so go back onto the code part open up your middleware and also add this URL here although we are not matching it up with anything but I think I'll add this one verify email now as of now this is okay I'll just save this but later on maybe I want to add this to public pay so that everybody can actually access this otherwise if I add this here it will not be verifiable I'm not tracking this if you don't add it here that's not being tracked so I want to call this as public page so even if you don't have token you can actually go ahead and access this so I'll just add that hey path dot verify email that is also allowed to be visited without the token so so if the path is there so this is the public path let me just check this again public path and token so redirect here if there is not public path and the token is not there if the public path is not there in the token so I think this is good all right I am reevaluating the things so let's go back can I still access this yes I can still access this okay now it's time that we verify the email our verification should happen now I can just go ahead and click on this in theory and it should verify this and we are not actually bringing the tokens so sometimes what happens is when you click on this in the URL and stuff your question mark token all these things are not being traversed via the browser that is why this issue actually happens that's why a lot of companies give you this or you can actually provide a better URL notice here there is a dollar and all of that so that sometimes gets into spam so you can go ahead and use this as link I can go ahead and use this so I'm not able to grab the token so why is it happening okay so I'm going on to the verify verify email uh my bad so I'm just saying verify email question mark token uh now we got the token this is a common issue that you are going to see that when you are actually doing the development in the next JS this is a common issue the development is so slow that sometimes it takes time so yeah this happens now let's see if we are able to verify the user ah let us refresh this and whether everything got clean got a clean up or not let's see let's see come on give me that okay I can see that the 5 is verified is false uh is verified is still false for the five and we're actually verifying which email let's just check okay so probably there is some issue in the mail trap we are verifying the five so five I think the rest of the things are going great let's see is verified false okay so we got the password is verified false the token verify token everything got here nicely let's see that if we grab the token what we are doing in our apis so this is the job of our API to actually say user dot is verified and let's grab it from the model and is verified I'll just copy it probably I'm making a mistake here I'll just open this up verify routes and this should be oh my bad there is a typo here it's is verified so bad anyways anyways no problem no problem we can just create a fresh user and try this again one more time this is how the debugging works so it's everywhere is verified oh goodness and the token names are token names are good should have paid more attention but anyways these are small bugs this is how you fix them let's try with a new user this time I'll open this up here and let's try we're here and we'll try with the sign up let's try it's time for six 6 and this one will be 6 at the rate gmail.com password will be one two three four five six sign up the user processing slow but only in the dev in the production it goes like ridiculously fast The Edge functions are always up almost always up and there we go we got the six and again this is also painfully slow I'll just copy this this time whether this extra dot is there horrible the dots should not be there but this actually creates a problem so we should actually use better approach of generating the tokens uh I'll just have this one the start definitely is going to create issues and again this again why is it having the issues probably with the dot now we have this this dot is definitely creating the issues so we can notice there is little bit wrong in our approach that we are generating The Tokens The Token should be just a mix and match of letters and numbers uppercase lower case that's fine but these special characters and these dots especially that is creating so much of the issue also in the development environment uh serving the page actually takes some time so you will notice that when it actually serves the page compiled successfully and all of that so this actually creates a problem so possible emitter memory Leak Detection will actually take care of that but anyways now we have this is verified false here so that is we are getting all of this now let's check whether we are actually having this properly there all right let's see so we have the user six there we go we can see that the is verified is true verified that is true in this case so we are actually able to grab it now this is really a very thorough example of understanding a whole lot of things that's happening it's really a decently complex project we have worked on a lot of things now I'll not actually do the spoon feeding to you yes that is one of the bad thing that a lot of people do on the online codings and tutorials and all of that now we have seen thoroughly that how you can actually shoot an email the verification of the email we have also seen how we can extract the data from the body as well there was a reason why I did it this way the reason is because I want to have you an assignment the assignment is really simple we have worked on our verify emails verify accounts as well now we also want to work with the forgot password the mechanism is simple that again we'll be using our mailer and mailer can shoot an email so you have to first create a page where you can simply say hey send me a a male for for getting the password so you have to create an API for that as well as soon as somebody sends their email and a submit button is being clicked now it makes an xcos request use your node mailer to send a token to him and also send this token into a database as well now when somebody visits this page as well now you can take that token in another API call and based on this you can actually give him a simple thing on the token on the URL you'll be grabbing the token and in the body just get here the password and the confirm password and submit Button as soon as you click on submit button he'll be sending you the token he'll be sending you the password and the confirm password based on that first verify whether the token is actually valid or not if the token is valid now grab the user again based on the token and update the password field for the password field you have to actually encrypt the things again so there's a lot of things you can learn and do the things and again I would highly highly recommend that once you do this do let me know on LinkedIn on Twitter or anywhere that I have completed the project this will be your Learning Journey just watching the tutorial is not going to be cut through it now you know everything the only thing that's lagging and missing in you is the confidence so if you face any trouble just reach me out on Discord Twitter I'll help you in understanding the code or seeing a code or something like that as I get time but again the goal is improve or implement the functionality of the forgot password it's super simple if you are not able to do it if enough of requests are coming in I'll do that no problem at all but again I take this as take this as a simple assignment I highly highly recommend that you should be actually doing this so this was all about an introduction of nexjs I think this was quite an indepth introduction of next shares definitely in the future I'll be rolling out more of fullfledged more complex projects in next year's if you want that do let me know in the comment section I would really really love to have this one so that's it for this video let's go ahead and catch up in another such video it was great and fantastic for teaching all of you I enjoyed it thoroughly do let me know in the comment section if you are enjoying such videos I'll make them more interactive more like just like you're sitting next to me and learning everything I'll make them more engaging so that's it let's catch up in the next one hit that subscribe hey there everyone hitesh here back again with another video and welcome to this another video on xjs I thought we have done so much why not to show you the deployment part and some assignment part as well so I've added some of the assignments for you we'll first talk about that and then we are going to talk about how we can take this and Deploy on the varsal Warsaw is one of the great platform where you can host your nexjs application our database is already online in manga DB so we'll utilize that let's go ahead and try this out let me share my screen uh with you so this is what I've added in the next JS readme file you might have already seen that in the repo it's nothing it says a detailed course on xjs we can just actually move this here a little and I have added what are the tech Stacks that we have uses mail trap Nexus typescript Basics nothing much big deal and here's my YouTube channel link as well so I've added a YouTube I'm pretty sure you're watching this on YouTube if you're watching it somewhere else hey I have a YouTube channel uh apart from this there is assignment the first assignment is improve the UI of the application right now we were focused too much on implementing uh the functionality part and the bare minimum basics of UI so that you can understand the flow of the application now definitely integrating too much of the Tailwind we could have done that we could have just copied and pasted that that I'll surely do that in the upcoming videos but it doesn't really add any much value if you request me enough in the comment section I would definitely add some of the videos which are focused purely and purely on Tailwind skills so I can do that if you wish want to have it let me know in the comment section but anyways in this one I have skipped that so that's your assignment to add more beautiful UI maybe make button mode beautiful maybe use a theme for it or maybe have better inputs so something like that you can have it and also add a feature of forgot password we have done exactly same thing in the verify email and again just watching the video is no benefit for you and in case somebody's saying hey why didn't you do it you should have done that this is an incomplete tutorial I would say probably you will never learn programming if you'll just watch the videos and expect me to do 100 of it uh you won't be learning programming so I'm not bothered about you those who are bothered about learning the programming now is the time that you achieve it now if anybody is actually completing the entire thing just let me know your GitHub repository or you can send me a kind of a request here pull request but make sure your pull request is not merging your code in my code I don't want that I want user to see only the code which I have written I don't want other people otherwise people will be confused that hey from where this code came in so only after the hint just try to add or I can just add it just in front of you that we can go ahead instead of the hints up here so we'll just add your completed repositories so we'll just go ahead and say something like this uh your completed assignments assignments and you can just add your links up here so we can add here something like this uh add your repo so if you have completed everything so you can add up your repo link here I'll just push it again so you can just go ahead and add a repo link here that hey here is my completed version of it or probably a deployed version of it so go ahead and add it that kind of a pull request only I'll be accepting if your pull request is going to make any kind of a mess then I'll not accept it if there is a conflict I'll not accept it make sure you actually update the conflict take the proper poll and everything so go ahead and do that that's your contribution in here all right so that's the basic of how you can do that I have even written your forgot password hints as well that what user needs to do it's a fivestep process I have given it here so that it will help you to learn all of that all right now this whole thing is being pushed so let's go ahead and actually push this final readme as well I'll just add this changes add your contribution here gear here and I'll just Commit This and we're going to push this so that this also this is also available there so all right so now everything is being pushed onto the GitHub it's time that we actually go ahead and take it on to the next JS uh versal actually deployment part but before that we need to actually create another user I have actually removed all the previous users so I'll just create another one just for the testing this user will be I'll just call this one hitesh hitesh123 really bad uh show the password h123 add a builtin role of write and write any database not a good idea but we'll still do it I'm just uh making this up all here so that you understand that what are the security issues and concern which you should be having so we'll just go into database and we will be connecting with the strings so I'll just copy this so that I can actually inject this in here so I'll just copy this go back up here and let's go ahead and deploy this so virtual and we need to bring up on our all of our environment variables here so I'll just click on project and this one is react not react It's actually an xjs next JS full stack auth yeah we want to import this this whole thing is good here is our environment variable this is where we actually inject all of this so let's go ahead and open up our environment variables since I have deleted everything so I'll just go ahead and open up the sample.env hey I can just close all of this we don't need this sample.env I'll just paste this into sample link so the username that we are using is hitesh and the password is hitesh123 and what you need to do further is add up your database name so we'll just call this as next YouTube auth yeah that's good so the first variable that we have is URI copy that enter into your domain variable just like this you had your environment variables and you don't have to do even a single thing paste copy its value paste the value here add this up we have one more how can I get here here it has one more we'll have the token secret make sure your token secret is oops make sure your token secret is way better than mine I'll just add some complex token yeah that that's good enough I'll add this and we can also go ahead and add a domain uh domain yeah that's that's a crucial one because right now the domain is we have no idea what domain we have so we need to come back here and add this after the deployment because we will get a URL if we would be having our own domain then there would be no problem I can just go ahead and do this but we need to add the environment variable little bit later this domain part I will just click on deploy and that is it that is it all it takes to deploy your application it will start building and if we don't have any bugs or issues we will be able to deploy it if we have some issues or something like that obviously we have to debug that part but again there is nothing much it will just give me a URL and all I'm looking for is a word cell app URL so that I can add it into my domain as we can see this is the domain that we have we don't have to have ports and stuff like that so this is taking us some time in building the build phase actually takes some time yeah okay maybe we should pause the video here there is no point of unnecessarily staring the screen here okay so let me pause the video all right so you just missed the confetti there is a confetti that actually comes up here so right now notice here it says add your domain I don't have my domain that's why I missed out that environment variable so again so let's continue the dashboard of it where this is so I can see my application is up and running and this is the deployment URL so that is what I'm looking up for so I need to actually copy all of this uh next year's full stack auth then some random variable Dash My username.versal.app I think that is a better way of actually domains let's just click on it and we can edit this to have a better URL so let's just have this next year's full stack auth versal app yeah we'll just copy all of this and now we need to actually add this into environment variable so there is environment variable without this the thing is not going to work so we have our token secret we need to actually provide domain and then the value of it so whatever the domain wherever you are deploying it needs that this is what we are using in our mailing services so make sure you actually get that and also there is a issue here that in the if you go into the source and inside the helpers and in the mailer I have actually deployed my own user ID and password here but I have actually deleted that account so it doesn't really work anymore but still make sure you actually use this to do add these into the credential and EnV that's a security concern here but anyways so I'll just go ahead and say that hey this is add another one no Adam save this one so please define the name for environment variable ah accidentally added that one so we have all these domains and tokens and everything now our app should be there so now in theory at least we should be having this being deployed and it takes some time so there we go we can sign up and we can log in that's good and we'll just grab hitesh and we'll be saying hitesh at the rate google.com which is not true and we'll be saying one two three four five six very secure password uh we'll do the sign up obviously our mail will fail because that doesn't exist so that part of the code is not going to work it's saying processing taking some time and we got the sign up because our mailing is actually failing otherwise we would have got redirected there but in theory at least we should be getting some of the users in the documentation here or the document so there we go so there we go obviously we didn't got properly redirected everything but we are getting this the reason for that is because in this portion we are having a bug which is intentional I didn't want to expose my credentials otherwise we would have seen that the everything is going nice and easy so now one more assignment for you is extract these user ID and password put that into environment variable so that we can actually inject them there that would be really really nice but now you know that how you can actually have your application and stuff like that we can log in and we can go ahead and say hitesh at the rate google.com and we should be able to get this so one two three four five six we should be able to log in processing login and the login now we are getting this so get user details I'm able to get my user details hopefully there we go and I can visit the profile as well this is working fine I can go back and hit the log out button let me see that if we are getting this token as well inside this and application and cookie and there we go we got the token this is how the real world application works and we can hit the log out and this should be taking us back only thing that's not working is our mail and we know why it is not working in the code part as I always say it's important to know how your code is working but it's also important to know that why your code is not working which is the part of the flow that might be broken this actually helps you to understand and debugging debug a lot faster because you understand your code in and out and that's what I always Focus that please go ahead and understand the part that it's not always about working code it's also about the ability to understand that which portion of my code is causing the bug or issue as the application will grow larger which shortly we'll see later on you'll understand that hey there's so much more to learn and so much more to understand but this was a fun deployment part told you deployment is super easy it's actually fun so in this video you have learned how you can deploy use your net environment variables some of the issues that we have that you can fix up there and can actually make a pull request that hey my repository is now all good and perfect at the age can you add this into the readme again I repeat this all those people who will be sending an unmindfully these pull request which actually merge your code I will not accept that I'll write a comment below that that hey you didn't understood the video but those will be just sending me the pull request where there is a link of your repo in the readme file only I'll happily accept that and maybe thousands and thousands of people will be able to check out your repository that what's your version and your implementation of the assignments that we have done so be cautious don't just mindlessly send the pull request be cautious about that and in case I miss you uh miss your pull request or something let me know on the LinkedIn or Instagram or Twitter wherever you like that's it for this one let's call this one as the end for the series officially I'll definitely make more videos so do check out and subscribe to the channel I'll catch you up in another such video hey there everyone here and welcome back to another video if you're watching in continuation then no it's okay so welcome back and I'm really happy that you have shared so much of the series on the LinkedIn on Twitter I'm really super thankful for you for doing that there are only handful of people who actually promote the educational content and you're one of them thank you so much so I've decided that I'll continue this series further on and I'll walk you through with more scenarios where you can understand next year's in a little bit more depth and you can enjoy that now one scenario that we have already gone through is a full stack application using the next JS we built our own apis we send it Up all In the mongodb and work with that now another scenario is that maybe your backend is already cooked up maybe in another language or maybe you're using already cooked up back end now your your backend might be in fast API or maybe in the spring boot so you'll get a lot of idea that how to handle these scenarios so I'll be using a already cooked up backend which is known as apprite and apprite is is a 100 percent open source you can deploy it on your own servers or you can use their Cloud I prefer to use their Cloud it's easy to set up so in this entire series not series but a couple of videos that it will take I'll walk you through with one such application so let me first show you the application so that in case you want to try it before me you can go ahead because you have a lot of knowledge now so let me show you what we are about to build so this is what we'll be building and I would agree and say that hey upright I actually borrowed your color scheme and themes because it was so nice so sorry for that it was beautiful so I couldn't resist myself so we actually borrowed some of your theme sorry for that but hey you are a good platform so what we're going to be doing is in this one we'll be using this nexjs meets uh app right so I've already created app or account on the app right so if you go up into this one so it's a free account anybody can create that there is no limitation or something like that I have created this next test we'll be creating a fresh account fresh project for the app when we'll be walk through doing the walkthrough now we can click on this and all that I'm using here is the auth now notice here they give you nice bandwidths and API keys and whatnot so everything is pretty cool about them go into the auth we have got couple of users just like you know me one at the red Gmail today at the regime mail it takes a couple of users to actually register and do it properly so we'll be doing exactly that now this is the application that we'll be building there are couple of routes which are protected so in case you don't know about that so we'll be doing the route protection as well so there's a profile route which it doesn't allow me to visit I have to be logged in user for that so it's tracking all of that now if I go ahead and click on the sign up obviously I can do a sign up let's try with the three so we'll go with the three at the rate gmail.com uh that's that's a full name so I'll copy this I'll paste it up here and I'll remove this one we don't want that and the one of the best thing about using the apprite is all the authentication validation that is being set as a default in apprite day comes in so there's a minimum criteria of having your password you cannot just set it one two three four the needs of eight characters so that is a default of app right so you have to follow that as well that automatically comes you can obviously overwrite its open source but I don't want to having a security and password that's that's good so I'll just go ahead and okay did I type it wrong so one two three four five six seven eight the most secure password in the world we are using that let's create an account as soon as you create an account it actually the way we have set it up is uh we have actually directly redirected the user created an account and redirected the user onto the profile page so we are bringing in this three and the email ID from the app right itself and these are hardcoded so these are just taking few values but you can definitely take more values I'll just hit on logout and show you the login flow as well this is our login screen so I can just go ahead and say hey this is uh three if I can write that three at the rate gmail.com looks like my keyboard is not at perfect place and we can have one two three four five six seven eight that's that's basic and I'll just do the sign in and there we go the same information I can hit a log out as well there's no problem now one of the thing that is absolutely amazing about this project is that we are maintaining the state of the user so there is a state management also involved in this project now that's not Redux if you want me to do the Redux part so let me know in the comments section I'll do a proper separate video probably an hour hour long or two hour long video just on explaining what the Redux is and what the state management is in this one we are using the context that is it the context API in the react as well as next.js is so much like Underdog it I would say that I would not hesitate to say that it's so much more powerful that you always don't need to take out your big guns of Redux you can just do everything with the context API and that's exactly what you're doing here as well I'll walk you through with the context API how we'll create our own custom providers and custom hooks so that you can manage the user authentication and States as well on the frontend side as well and back end is all cooked up on the app right so we won't be touching too much on the back end part this project is going to be serving a lot of other knowledge as well which you should be having with the upright uh not apprite the next JS as well so there are a couple of routing information parenthesis folder name structure which are also there in the yes I'll walk you through with that but hey uh go ahead and try this application on your own first I'll definitely give you the link in the GitHub repo for that as well but it's always a good idea to at least try out something on your own otherwise I'm always here so in the next video or in the sequence of the next video I will just walk you through we'll start with a fresh project we won't be using the previous one so let's go ahead and get started with this one all right so let's go ahead and get started with the app right and the next.js we'll create a fresh new project and we'll understand that how we can inject app right into an xjs project we have to work on something known as parenthesis there are some routes which you can create with the parenthesis we have worked on the square brackets and there's a difference but in thesis square brackets curly braces so we'll be talking about how we can utilize parenthesis and something known as layout and can take advantage of this so all of this in this video without a further Ado let's go ahead and get started because things are easier to understand if we go directly on the code part I'll just copy this here and I'll just click and copy first we'll be generating a simple nexius project so let me go ahead and fire this up a new Fresh vs code instance and let me go ahead and get a project as well just like this so I'll just actually move this for a second and we'll be bringing this all up here so that's nice and let's create a new folder a fresh new project and we'll be calling this one as simply the next JS Dash app right because that's what it is and obviously it's a YouTube Project so let's Trail it with the YouTube as well drag and drop this should be absolutely easy open up the terminal that we have so if it can open that so there we go and paste the command simply and I'll at the end of it I'll just add a DOT so that it generates everything in the same project folder do you want to use typescript of course let linting I'm not a big fan but I'll still use it Tailwind CSS yes please give it to us Source directory do you want to use it yeah I'll take the source directory app router yes of course would you like to customize the default uh I'll not customize it I'll use the basic at the rate which is the default one and that's it now it generates a fresh project for me now here's the idea will not be working too much in the app folder in this video or in this section of the video if you're watching it all in one go we'll be first working on configuration of the app right because that's the logic part that's the difficult part how we build the pages and how we can transform the data that's that's easy part there is nothing too much difficult for that one all right so looks great and looks okay now let's go back on to the upright and see how that we can configure it I've already created an account on Earth but we'll create a fresh project for this one because I have no shortage of creating the apps I'll create this one and let's call this one as YouTube next JS yeah that's that's good enough name go ahead and create this and there we go now you don't need to find any project ID or anything here you can just simply click on the ADD web app because that's what it is and let's call this one as next JS with app right that's my app name the host that I'm using for this one is actually localhost so no worries on that part now as soon as you click on next it will give you that what should I do I should actually do npm install app right first so I'll just copy this and we'll go up onto my code editor and first and foremost I'll just go ahead and do npm install app right it's not really that much of a big package comparatively very very small and that's majorly what we need and then you can just ignore this because I'll walk you through how to do this with the web SDK we just need the app right and just click on the next and this is something that we'll be needing so let's go back here into the root of directory just create a DOT EnV I'll create a sample EnV for as well so that I can give you all of these files as well so I'll just go ahead and say sample dot EnV so that I can push it onto the GitHub I'll be working with this mainly so let's go ahead and First grab the EnV file in the EnV file you need these two things so endpoint which is actually your next year's public URL and the endpoint which is a project ID so let's go ahead and add this one so I'll just go ahead and lower this down so this one for me is next underscore public underscore app right and URL all right and then simply have an equal to sign and this is where you grab it copy this entirely without the codes that's the first part of it and next part that we need is Project ID so notice here that's that's a funny one we won't be using that we'll be using the actual one so go ahead and copy this and that's it now we don't need to come back and again by the time you'll be watching it I might have already deleted that but I'll still copy this and paste it up here so that you know which URLs to actually work on with this one so this one is saying the top one we are not worried about that part here I'll just add the classic one 5c 5c 5c5 see that whatever that is so that it actually remains for you so that you can work on with that now let's also take a look on to our package.json as well that what all we have in this one we have actually very less we don't want to kind of overburden with this one we'll be having just the app right that's where the focus is I won't be even installing the xeos and anything that that will go with the classic so that is it if we need anything else we can just go ahead and just create it at the go and that is all we can just hit the next here and take me to the dashboard we don't need anything else the advantage is when you actually work on with authentication and the auth part you don't have to worry anything in case you wish you can go into the settings and add all these things probably we can talk about them later right now I'm just worried about email and password that is enabled for me by default so that is it that is all I need one good idea is to once you have done all of this it's actually good idea that we go ahead and say npm run Dev which we have already learned and see so at least I can see that whether my project is actually up and running or I need to debug at this point also all right initially it takes a little bit time to load and there we go we can see now the project is all good done will be just changing a lot of this a lot of this this time but don't you worry I'll give you the exact CSS and the code files of the tailwind and all of that so that you don't worry on that part now first and foremost inside the source we can see there is this app folder and there's so much more going on we'll discuss about the app little bit later right now we just want to go ahead and create couple of other folders now one of the more approach that I will walk you through in this one is first create a new folder into this one and let's go ahead and call this one as conf for config or maybe something else I'll just go ahead and shrink down this app because I'm not interested in app as of now I'll just right click on this create a new file and let's just call this one as conf.ts now one of the common thing that you might have already seen that when we were importing these environment variables we had to put an exclamatory sign to say that hey this is always there I'm pretty sure of it one of the other alternative that you'll see especially in the production is actually to use a config file or some other thirdparty libraries as well which can get you a surety that it is there one of the way of doing that is you'll see this a lot is actually create a simple conf variable just like this or config I'll just call it as conf that's much better and we can simply go ahead and create an object and here we can simply say export default conf now this config will be responsible of having this so we'll just go ahead and say Hey I want a app write URL and that URL will be coming to me in a string so that I know the format that it's coming in and in here I can just go ahead and say process dot e and V Dot and the name of it which is next suggestions app right public URL hopefully that's the same if I'm not making any mistake all right the next one is app write project ID and we'll just go with the next public app right project ID so now that we have exported it that's actually considered as a far better approach instead of just directly calling them and calling them hey that's a string and that's an exclamatory sign there are a couple of packages around it as well which are also considered quite a lot with the dignity in the community as well so I will say that if you want you can go ahead and have that one as well now let's go ahead and talk about the app right because that's the major ingredient here so let's in the source we'll create a new folder and we'll just call this one as app right so that later on somebody comes up he just knows exactly that hey this is the app right folder and all the configuration related to apprite belongs here I'll create a new file into this one and let's call this one as config.ts now this is the one file which we'll be talking to your app right now the way how you talk to the upright it's not really difficult it's actually easy app right from the upright package module gives you everything your client your account your ID anything that you need will be provided just directly by that so let's go ahead and try this first I need the config so I'll just go ahead and say hey bring me the conf from the config then I'll say that hey I need some stuff from upright app right so what are the stuff anything that you want to deal with that in this case I obviously want to deal with the client so client is one which will be talking to that giving me the user details and everything we are specifically working on account so that's why we need that and we'll also be smallly handling the ID part so that's also important in case you need more this is exactly the place you actually write so in case you want database or something you just go with that right now we are not playing around with the database we'll do that in some another video right now we're just this much important now we'll be creating some types as well so far we haven't created any type and we have always written any that's that's also an approach but in this case we'll just write the type so at the time of creating the user or at the time of logging in the user we know exactly what type to expect in that that's the typescript specific feature we have talked quite a lot about typescript so I think that's a good idea in this case so we'll first create a type which simply go ahead and say create user create user account and we'll be creating a type for it as well now similar to this we'll also create another type so let's go ahead and say the login user account login user account we'll be creating a time all you have to do in this since these are type specification just mention what are the variables and what's their data type is so in this case I'll grab an email I'll grab a password and I'll also grab a name that all string type that's it in the case of log in a user I'll just grab email and I'll grab a password as a string that's it so this is my type again you can skip this part in case you wish to but all you have to do is just write the simple any in that case now step one how do we deal with that this client is responsible for talking to app right so let's create an object from this client all we have to do is simply say new and client this actually gives you a reference to it let's store this reference into a variable and call this one as app right client there we go now storing the reference this is going to be super helpful for us this client actually talks to your app right but it doesn't know how to talk to it it doesn't know the URL it doesn't know the project ID so yes you get it right you have to exactly tell it that hey I need this so upright client has a lot of methods into it called config headers and all of that we are interested in this set endpoint this is the first one as soon as you do this then you have to say that hey config or conf I want to use apprite endpoint it does not know that endpoint so obviously you have to go into the conf and look for that hey what is giving you that URL so in this case app right URL so I'll just go ahead and copy this app right URL because it knows that variable on top of this once you have mentioned the URL then you have to set the project ID so on top of this let's change it and then we'll say that hey I want to set a project and the project also needs to go ahead and say upright project ID and again we'll be borrowing this one from here so that I don't make any mistake here there we go that's exactly the same now at this moment you specifically know that what project you are talking about and how you are talking about and all of that now on top of that we have used this client now also we want to take a reference from the account in case you are working with the database you have to take the reference from database as well but in this case we are talking with the account so just like we have taken the reference here with the client for setting up the connection let's take a reference of the account as well super easy so again the the idea is same we want to have a new account reference and we can provide the upright client so we know how to talk to it let's store that into a variable so let's go ahead and call this one as account with a small one just like that not only that I would love to export this as well because I'll be using it in a lot of other places so just write a export here so anybody can talk to the account wherever they want we don't want to export it at the end we just want to have it like this now this is all basic now whenever we work with the upright client in case you have watched my other videos on the react native and stuff I always recommend to create a class out of it simply the simple reason is as soon as the class Constructor is it actually does a lot of job for you not only that you can create a lot of methods a synchronous method which are responsible for creating the account logging in the account log out the account so that at the time when you're actually doing the work you don't have to do the work there you can just call these methods and it's a singular place where everything is being mentioned this file is for just for just the authentication but I usually prefer to create separate classes all for authentication all for database all for storage and just like that this is my workflow that I usually like to do so let's export this class so that anybody can use this so we'll just go ahead and say I won't have a class which will be app write service this is one of the best practice that you can utilize now in this the first one that we are going to go ahead and say create a new user or rather better will be create a new record of user inside app right probably that's that's a better name all right then what we are going to do is start with a sync async create user account I think that that's a good suggestion that's a good suggestion and I'll just go ahead and close this like this so all we are doing here is we are simply naming this as create user account so we'll be using this method instead of the app rights account dot create method uh we'll be just taking email password and name that are given to me and these are of type create user account remember the type that we have exactly created so these are of type so now instead of writing any here I can just route this write the specific type now since it's a database connection it's no different than a mongodb it can fail so we go ahead and wrap this up into the try catch we won't be doing too much we'll be just throwing the errors so let's just go ahead and say Hey I want to throw the error through the error that's it in case you want to do console log or something more you can go ahead and do that in the Tripod I would love to just go ahead and create a connect account so I'll await this one because it can take some time and I'll just go ahead and say account dot create again for creating all of these accounts the thing which is responsible is this account not only it actually creates the account it actually gives me some more details about the user that whether it is logged in session is there or not so I can use it later in later Point as well once that is being done all I'm going to do is ah will will be just creating this but I think we can do a tiny bit better just instead of saying uh email password and name we also need to put a unique ID for this one because this is an this is a new record in the entry so obviously you have to do it uh it sometimes I have to check the docs to actually make a comment I'll put that in the comments if I have something in my mind but again in this case I'll just use the ID directly which already we have and we have a method on this which is known as unique so oops unique just like that so there we go now still we are creating this now notice here we are not taking this from the user so anybody who creates or call this method I don't have to worry about this ID we are directly bringing up from the app right it gives us this ID and you don't have to use any uuid or something like that so let's go ahead and store that into a variable call this one as user account there we go nice and easy once this is all done then let's check if the user account was created or not so simply go ahead and ask for it that hey do you have this user account if you have it just return this user account based on this user can do that if you found sir account redirect him and to log in or keep him on the page or something like this I think if the user account is created then I'll go ahead and simply log in so I'll just say this again Dot Login feature doesn't exist right now I have to actually go ahead and create this one remember it doesn't exist right now just like the create user account is responsible for creating it I'll create my own login feature so that I immediately log in the user I already have the access of email and password so I can directly pass on to this one and it's the job of my method which I'm about to create that hey go ahead and log in the user and in the else case I'll just return whatever is being given to me so I'll just go ahead and say hey you want to return this user account now there are chances that you have nothing in the user account so I'll check on the frontend part that if user account is nothing I'll just accordingly proceed and if there's something into it I don't have to worry I'm not returning that I'm just returning the login so I'm directly going inside this all right now well the issue is that this whole thing looks great the try catch and everything but I don't have this thing the login which is creating a problem so immediately the first thing that I'll do is just go ahead and create this so that it stops giving me these errors so go ahead and say a sync a login and there we go now this should be all happy and it says async login login account why are you giving okay property password so we don't have this password let's see we have this password in the login user account so I think there is some issue all right shouldn't be that much login user account we have this one should be all okay let's try this one more time or probably we are missing some of these so where is this shrinking in all right so let's expand this probably I'm missing out some of this one so this is whole part of it and now here we can actually do the login is this extra looks like this yeah this is probably extra so I have this create user account so yeah I think now let's go ahead and try in a sync login email just like this and have this yeah this one was extra all right anyways so now obviously this is where we are catching the errors so this is giving us some issues here let's go ahead and expand this why are having you having some issue okay error is not of Define type so we can go ahead and say any still there is an issue there is an issue all right let me check this I'm pretty sure the issue is of these curly braces let's try this all right catch finally ah there is something there is something issue this is the try block else let me just quickly check and find out that I'm pretty sure this is an issue of a curly braces so let me just quickly figure out that ah I really hate these indentation issues I thought somehow that I'm in yaml file or something but yes finally I have fixed it it's actually not that bad I was just missing this one here and this one is here so now we have this async login which is also resolving the issues that all we were having this is still not in the best indentation where I want it to be but okay okay I'll get that it sometime happens and it's it's not the best of the work all right let's just close this one let's close this one now it's in the better position I prefer it to be on this line a little bit indentation like this but we'll keep it there all right so now we have this login method as well which is accepting email and password how it is doing the login that's not our concern but since if I'm here and I know this kind of mistakes will happen I'll just first declare rest of the other method as well so another method that will be going with that is going to be to finding out whether it's logged in or not so we'll just go ahead and say is logged n so if is it logged in or not and this is going to be a promise but we will worry about that in a second first let's go ahead and get is logged in this will give us a promise that whether the user is there or not if it is a user it will give me the user data otherwise it will just return me a false and similar to this we might need to get the current user as well so a sync and we'll be saying get current user again you can design as many methods as you like and finally last but not the least we'll be giving it a log out as well a sync logout that's it now it's time to implement them implementation is super super simple we can go ahead and work on with that so let me try with the login First again the most easiest one to go with that hopefully I don't do the typos or the try catch the error that's any and we can simply go ahead and simply do a through error throw suggestions throw error that's it in the try part of the login it's actually one of the simplest of all login all you have to do is simply say account and it just creates an email session so again create email session not the session so we'll be using Create come on three too many suggestions create email session that's the one I want to use and I'll just pass on email and password just like that and we'll be awaiting this because it takes some time and we'll be returning this so as soon as the session is being created I'll just return that session directly so return await just like that told you it's super simple it's a backend prewritten so there is nothing too much to discuss on that now this is logged in is actually an event which will happen in the future as well so this is going to return me a user itself so it's the best idea that you actually go ahead and make it a promise again you can just go with the try catch it might take some time and all of that but actually giving it a Boolean value and promise a Boolean value that's actually better because it's an event that will happen in the future Boolean there we go and again looks okay why are you having this issue a function whose declare type is neither undefined void must return a value yes I will return a value don't you worry I'll go ahead and return that in all the other case just go ahead and return a false so that should actually get rid of this now let's go ahead and try catch this so in the catch we'll just go ahead and say hey I don't want to do anything so we'll just keep it as it is so there is nothing that we are doing because if you don't do anything in the catch phase that's okay because we are anyhow returning the false that I couldn't get the user so that's that makes sense but in case you want to do that in the catchphase as well that's okay and all we're going to do is returning a Boolean data so what this actually does I can just go ahead and say await and then I can find this dot get current user so this is a method which actually gets you the current user and we can just hold this into a data now in this case you can return the data there is no problem for it but we have actually created a separate method which is get current user this is just checking whether you are logged in or not this will be super helpful a later phase now one of the hack that you can do here is you can just go ahead and simply return something like this and then you can say hey I want to return a Boolean variable Based on data if the data is present it will return a true if the data is not present it doesn't get anything it automatically returns a false very tricky but it happens in case you don't want to do that that's okay you can try if and else if the data is present return it true if data is not present return of false that's also valid no worries at all all right so this part is all easy now we are done with is logged in now this is the point where we'll be doing almost the same uh this dot get current user there is a better way of getting the current user again both of them returns you the data so we'll be working with that in the get current user we can actually get the current users simple absolutely simple just go ahead and have a try catch and in the error part uh we'll be doing a simple error so just like this let's go ahead and do a console log and in the console log we'll be simply saying that hey I want this error and I'll also want that get current user actually provided that error so get current user actually gave me this error and I'll just go ahead and work with the error yeah that's that's it all right why are you having issue this is having an issue which is having an unexpected colon just like this why are you having an issue get current user error do you need this one yeah it needs this one and now why are you having an issue all right this is bad this is bad why is it having an issue all right so if this is not working first and foremost I want to return a null so there we go that is happy ah man sometimes it's difficult to even read the errors that why is it giving me these errors let's try it one more time ah my bad this this one shouldn't be there yeah this one is happy now all right okay so now this part is handled and if we are able to get the current user current user getting there are two ways of getting the current user the first one is this dot get current user remember uh this is the instance of this entire thing so remember here we are creating this app right and hold this so I want to get the user of this but there is another way in case this is confusing to you you can go ahead and use this account remember we have account just simply get it that's it that's all it takes to get all the details about the current user since we are getting this let's go ahead and return this as it is in the front end side or in the pages side we'll see that what this current user actually gets us you can do a console log here as well but we'll just return this and in all the other cases we are returning the null you can read the documentation of apprite as well it's yes it's that ridiculously simple and also in the log out it's again simple there are a couple of ways how you can do the log out you can delete multiple sessions as well or you can delete the session as well so there are multiple ways of handling this I'll just go ahead and do a try catch and there we go suggestions are really really nice in this case okay so what it's doing is it's returning in a weight where it says account dot delete session and we can just provide the current this is the string yes this is a string where it actually removes the current session and then you can simply go ahead and catch the errors thrown out so this is the basics of how this is being done now if you remember this is the class we are not we can export this class as well but nobody needs this entire class we can actually make it kind of a onetime usable and we can do something like this let me show you we can go ahead and say hey app right service I'll create an object from this class and then I'll go ahead and Export a default app right service that's it now again you can directly get this class and just create an object there then run with this but since I can make my life a little easier I can just go ahead and create an object directly here from the class and Export that object and have a default of it so that I can import this and work on with that I also have an access of account so in case I need something more I can do this but I think everything that is probably usable I'll do this I'll prefer that to do in my class itself so that is what the wrap up of the app right configuration that we have here now let's also work a little bit of how we will be using the context as well because that's also important let's go ahead and save this so we'll be just removing this now since we have all of this now you'll be super happy that how we are working with the context part of it the context is nothing it's just a wrapper which will be wrapping up a lot of components and will tell these components whether the user is logged in or not so if he is not logged in we'll be protecting some of the pages if his uh logged in we'll be allowing him to access the certain pages that's that's all it is so let's go ahead and do this we'll be creating our own context so let's go into the source create a new folder and call this as context there we go the context will have just the two file the first one is use auth which is our own custom hook that we'll be writing and we'll be creating first a new file to provide this auth context auth context and Dot TS of course the way how you write the context is it's super simple if you know the react you will be just doing this like this but in case you don't know about the react as well that's also okay creating the context mainly includes creating a provider provider is something which provides you the information that's all it is that is all so let's go ahead and do this the step one of doing this is first go ahead and import a create context just like this and now we don't want it to film from the when we want it from react come on react there we go once we have this then we have to export couple of things first is auth context and the second one is auth provider okay how do we do that first is export const auth context which will be created by this create context there we go and we go like this that's it it actually does that but how is it going to tell me that somebody is logged in or not that's the job of the context it gives me the information right now it's going to tell me just a Boolean information and a way to update that Boolean information but you can pass on so much of the information here so again this will be responsible for just two things giving me a Boolean value and the ability to update that Boolean value otherwise what's the point of it it will always give you the same information so what we're going to do is after this context that we have we'll first declare the data type here so how we do that we simply go ahead and use this and inside this we can have a curly braces this is a type declaration you can avoid that skip that that's no big deal but I'll still declare that the first one is auth status the auth status obviously is going to be a Boolean and then a method or a way how I can update this so I'll just call this one as set odd status and this status obviously is a Boolean type but I am declaring a method here so notice here this is a callback not callback It's actually an arrow function so it doesn't do anything it returns you void but now I have mentioned my data type that hey there would be a value which will be true and false and I have the ability to update this value why are the context as well so by default dot status will be false so nobody is logged in and I'll also give that that hey right now this is the empty method but since I am expecting or accepting a method you can go ahead and provide me a value and since I'm also providing out States using this method you can actually change this that's the whole idea and that's how you always actually do this you can provide more information here an entire object as well but it's really simple now this is the half part this is the half part that's the context you also have to have a provider see this is the informational part of it context and in when I'll be creating component I'll show you that I can actually just like I create user State I can create a simpler hook like that which will give me direct information whether user is logged in or not and I'll I'll actually ask the use for this provider is something which wraps all these components because otherwise uh there is a prop Drilling and a whole lot of things in the react itself so what I'll be doing is I'll be creating a provider which will act as a wrapping box where I can put my components and anytime my component need an information I can just directly grab it so this is how I do it export const auth provider auth context.provider now since this auth context is Created from this create context it has the ability of that for more information read the react docs that's the basic once we have all of this let's go ahead and Export this so we are going to go ahead and say export and did we export it no export const auth provider let's go ahead and Export default as well although not required but I prefer to have a default so that I don't use curly braces and all of that I'll just have this one all right that's the part one of it now also let's go ahead and make a hook from it now how do you design the custom hooks that's that's an interesting one let's go ahead and design a hook it will be not as powerful as a use State use effect something like that but it's it's our hook we'll call this one as use auth there's no such thing in the react which is known as use auth so we'll be creating our own how can I create such hook on my own you can you can you can do this really simple steps so first and foremost you have to use the context so use context from react that's the first part also bring in that auth context that you have created so now it's super simple just go ahead and say const use auth is my hook just like this and there we go what does this hook does every single time you use this hook it just provides you the data which is there in this auth context what's the data Yep this exact data and all I'm looking up for is this auth context and Status so all the data will be given to you so now I can just go ahead and say hey give me the data and the data will be coming up from use context auth context that's it this is classic react 101 again this can be a little bit confusing but this is what we have and after this you can just go ahead and simply say return data and the data will be returned to you now what's inside this data that's very very crucial uh question I'll surely answer that but it's easier to answer all of this when I'll actually show you directly in the console log that's that's much easier so there we go finally we'll be exporting this now I highly highly recommend that you go ahead and read a little bit so in case you are confused about this part of the code go ahead and say that hey I want to study more about this let me show you this so This use context and the react is actually available directly so just search for this use context and in the react and I'm pretty sure they'll redirect to best official documentation yeah here it is notice here this is why it's saying use context is a react hook that lets you to read and subscribe to the context from your component context is something that we are creating and it reads And subscribe to our contacts so that anytime there is a change and all of that it actually automatically gets to know that and then it's actually used to passing the data deeply into the tree whatever that's exactly what you are using and notice here they are exactly saying that hey how to use it caveats and all of that and we're using exactly what they are doing so notice here we have created this provider something like this will be using almost exactly like this theme context or provider something like this so read the documentation a little bit that how they are doing it that's the basic in case you don't understand it much I do have a video on the context as well on my channel if you want a newer one just let me know in the comment section I'll try to do that as well all right so a lot of work that we have done in this one video we have created a lot of things upright connection is all done uh configurations is all done context is all done these are major portion of it we have to spend a little bit time in creating the component since this app looks beautiful and beautiful takes time so the next video is all about creating the components don't worry I'll not waste a lot of your time in just the CSS part of it I'll give you directly there because there's no sense of it uh we are not on the Tailwind side we are on the next year's side and I highly highly recommend to read a little bit more about it because I can understand already this context part if your react Basics and Foundations are not that great you will struggle here either brush of them or just ask me I'll do that so go ahead understand it if you got this one you know it's basic one so that's it for this video I hope you have enjoyed this one let's go ahead and catch up in the next one hey there everyone hitesh here and welcome to another video or another section of the video if you're watching it in the long run so in this section of the entire training that we're doing we'll be focusing a little bit on building the components now components are not very crucial apart from login and sign up rest of them are just for the beautification the Avatar that we are getting is just holding the images the profile card it's not doing much just checking available and If the variable is present display this if it does not present display that I will not be wasting your time in just giving you these CSS classes or the Tailwind classes it just is a wastage of your valuable time so since we are focusing on next year's and upright I'll be skipping that part I'll give you these code Snippets via my GitHub repository and I'll be just copying and pasting them via my coding notes that I have already with me but I will be still writing the important portion of it the logical portion where it's required only the return statement where it returns an input box and the buttons and all of that will be bringing them up from my notes itself so this section is wholly divided just in just four uh coming up with the components and finishing them up with so that's the plan for this particular section let's go up here in the uh this portion on my code editor and let's try to have this one so inside the source we are still not going into the app directory we are still into the new directory which is known as uh components components there we go now this component let's first take down the most important one the signups and the login because rest of them are just copy and paste so let's start with the sign up component so we'll be going with the sign up and of course dot TSX because it's a component itself now first and foremost this is going to be a client component so I'll just go ahead and declare this like this let me just move my keyboard a little bit so we have this use client once we have this we'll be needing the app right so first bring that so how we are going to bring the app right that's the most important question it's pretty simple if you remember we have this app right service that we created an object from the upright class file and we exported that this is exactly what we'll be going through and working with that uh also thanks to our uh at the rate symbols so that we can actually reference it from any files anywhere directly from the reference of this one okay another thing is in the sign up we'll be actually taking some advantage of our hook as well so let's go ahead and bring that one as well so we'll be saying import and I don't want to import this using the curly braces because if you go ahead and look into the context and use auth we actually exported that as a default as well so we don't need to do this we can just go ahead and directly Say Hey I want to use this use auth and I can directly bring this up now we'll be needing some link as well uh in a minute but let's go ahead and first import them so next link oops not like that from next link there we go and we'll be needing the router as well so let's go ahead and bring router and here's a common mistake that is there in all of the suggestion so don't just bring this from the router itself we want to bring it from the navigation itself so let's go ahead bring this up and say navigation nothing else okay so one more thing one more important thing how we are going to be submitting the form that's that's important one so let's ring in react and uh we will be using use state for sure uh but in the react now you have actually this uh form event that we'll be using now what happens with the form event is uh we can do a lot of tracking of what's the form how it is being filled up all these data so we can actually take advantage of it and we'll be taking one that one all right so first and foremost let's create a simple sign up so we'll be saying con sign up just like this and there we go now obviously once the sign up is there I want to export that as well so export default sign up that part is easy we will be returning something from here so let's go ahead and First Take Care Of The Return part as well so there we go we are returning nothing as of now but let's just say we return a simple div that says a sign up and we just go ahead and close it up just like that so that now we are not worried about that what we are returning back it's obviously going to be a sign of form but first let's take out the logical part okay going like this first I need this form data to be somewhere because I'm collecting name email and password so let's go ahead and do that so I'll say that hey I'll be collecting that into the form data and set form data this will be a object just like this so I'll come back here and I'll say I'm collecting email for sure I'm collecting the password for sure and I'm collecting the name so that's all I'm collecting now obviously to show some errors I will need a state which actually tracks my errors as well so I'll just go ahead and say hey here is what is keeping track of errors and set error right now the error is nothing so that's okay now coming up on the most important part how the signup will know that whether somebody is logged in or not and how it is going to do all of that for this we are going to take advantage of this use auth and there is a similarity here lots of similarity let me show you that how this is so what we're going to do is we are going to go ahead and extract so we'll be extracting just one this which is set let me just go ahead and open this and will be opening up not this one we need this one so set auth status copy that this is the one that I need not both of them or all of them this is the one I need and by destructuring I can extract the one information which I really need so in this case I'll be using this use auth there we go just like how I do it there we go forgot the equal sign there now you might be noticing a striking similarity because let's just say we are also having this use router you use the use router almost similar to this one so you go ahead and say const router and that is use router just like this exactly similar so there is no difference in the hooks that we are using so this is exactly like that whatever the coding of the router is behind the scene we actually get all the information in this and you get all the methods like router.push and all that all that that you need similarly in this I use auth it provides me just two things one is auth State status I can actually import that or I can just go ahead and use this auth status which is a method responsible for changing this this one here so it's totally up to you whichever one to go with the path uh that's totally okay okay next up we want to Simply go ahead and have a method which actually creates a user so let's go ahead and create that so we'll be saying hey this one is going to be create or create user however you want to call this one this one is going to be async and then we'll be capturing an event which will be a form event just like this and not only this you can actually go ahead and specifically mention that hey what kind of elements are going to be coming in not really required but in case you want to go too much into the typescript part of it you can actually go ahead and do this you can go ahead and say that hey there will be HTML form Element no suggestion form element so I can explicitly mention that these are the data that will be coming to me in this case the first thing whenever there's a form you don't want to submit it you want to prevent the default basic JavaScript 101 so prevent default so that's the one part of it so I'll just go ahead and say prevent default after this I'll just run the try catch so try catch the catch part is easy I'll just cast this one as error that will be of any I don't know I really don't care too much and I'll be simply setting the error because I have a state for tracking it and I'll be just saying error.message that's basic now in the try part I need to go ahead and create a user for this I'll be using a weight and then I have a service already written for it which is apprite service and this has a method I don't need to use dot account.create I can because there is an account export as well but I don't need to do this if I go ahead and open up my app right notice here I'm actually exporting this one here which is app right I'm definitely exporting the account as well I can use that but since I have all these methods which are actually doing everything for me so I'll just go ahead and use that one rather one of the method that I created was this create a user account and I can pass on all the information directly here and I don't need to do it like this I can just go ahead and simply pass on my form data because my form data is actually a state just like here all these information and my method is also expecting the same information so email password all of this so this is being passed on to it that's it and you just simply go ahead and create an account now let's also hold this into a variable so we'll just go ahead and call this one as user data just like this and let's hold this one now once the information is in my user variable I can actually check whether the user I actually got a user or not and at this point I highly recommend to Simply go ahead and console log the user data so that you find out whether things were okay or they were a little shaky I'll use a simple if else statement I'll say if the user data is there then go ahead and set this one set all status that hey we are authorizing it so let's just set it to true and let's also push the user since we are using the router so router.push we want to push it to profile right now we don't have this but we'll definitely create this one in the else case we do nothing so simply by default the status is false so I don't have to worry anything about it and that is majorly what my logical part is now obviously in this one as well I'll give you some of the code as well so don't you worry in that part but I'll explain you that part directly so this is a long piece of code and again don't worry you'll be finding everything inside of the GitHub repository all we are doing this is all just gibberish the CSS of the Tailwind so we don't even bother much about it if it is there that's great if it doesn't there that's okay fine you can create a bare minimum forms as well now first and foremost there are a couple of links which are going on to the login as well we haven't created that but we'll surely create that now most important thing here is if I go back here this one value which is form data dot name this is where we are capturing the name this is the on change event which actually pass on the information from the form to my state that is the most important and the email is exactly same the password is exactly same I could have written that but that would simply waste your time and here we are simply saying hey this is the type submit so as soon as the submit is being done uh we actually capture all of this and we can just simply go ahead and work with that so nothing in case you are little panicky about that that hey how this is all have happening and all of this you probably don't need to worry too much about it you can just simply go ahead and simply call a method that hey what happens on click as well totally up to you how you submit the form data that's totally up to you how you work with that and how you feel comfortable with that we can definitely come back and debug obviously that's a part of the life so we can actually go ahead and work with that so this is a form event if any form event happens we'll just simply say create if it doesn't work I'll just come back and set it to on click all right so that's the basic of it let's just save this all right hope there is no issue into this one let's go ahead and now create the login form or the login component as well and yes one more thing I would like to mention here is that a notice here in this portion I'm not checking whether my data is actually properly set or not so form data if email is present or not I'm not checking that uh usually this can be done automatically by the app right they check it and provides you better error messages and all of that but in case you want to do it go ahead do it there is no harm in that let's create another component almost exactly similar to this rest of them are just boilerplates they are no logical components they don't have their brain they are just display components so let's go ahead and create another one which will be login and again since I have predefined some of the things in this one so go ahead and make them named exactly so this one is TSX just like that now one of the important thing let me mention this already in advance you'll notice that here we are actually redirecting it so notice here this link says slash login so right now we are creating components not the pages at the time of when we'll be creating Pages I'll walk you through but these are important so just keep that in mind let's go into the sign up and log in and first let's go into sign up and bring all of this copy paste into the login that's the basic and now let's create a method so this one will be login and that login is going to be just like this and we'll be saying export default login so that part is handled all right now the logic part again exactly same we'll be needing a router so that we can push the user onto the new page so let's just go ahead and say hey router let's go ahead and do a use router just like that we obviously need somebody who can change my auth state because my provider will be providing all information from there so let's go ahead and say hey we want this set all status that will be coming up from our own designed hook which is use auth and we'll be needing the form data so the form data just like this and there we go we'll be needing some information email and password that's it nothing much more we'll be setting the errors as well so let's go ahead and set the error as default now let's go ahead and create a method now again you can create a method on click you can create a method on when some events are triggered I know which event I'm looking up for so I'll just go ahead and directly go for that so this one is login so notice here it is async it is looking for an event which is a form event which actually gives me all the HTML form element again not comfortable with this totally okay you can just go ahead and say on submit on login on click whatever makes sense and whatever makes you comfortable there is no right and wrong in this particular portion okay uh first thing just like always we'll be preventing the defaults so e dot suggestions prevent default once the default is prevented let's go ahead and have uh simply held over the try catch and here we'll be saying that set error set error error.message that's fine and simply here we can just go ahead and await for the that we created the did we have this one yep we have the app right service so apprite Service uh login form and I can just pass on the data directly to it that's it and if it is all successful first let's hold this into variable because what we'll be checking without that so const and let's call this one this will be creating a session just like this if it is all good let's check this if we have a session which actually upright creates it for us we'll be simply saying uh set auth status probably this one is extra yep a set out status is true and will be pushing the router to the profile that's it really really basic couldn't be much more simpler than this I'll shrink this and I'll just go here because obviously we need to return something again return part is exactly same so that's why I'm not focusing much on that part I'll walk you through with that still so notice here this is all just the form designing and all of that sign in actually goes on to the link which says sign in sign up and basic like that and simply after that we have this email address important parts are here that the value is form data.email on change is also handled here nicely and set form data previous values expanding the previous one getting the email as Target email so very basic nothing too much extraordinary there if you know even your basic job script you can actually figure it out Simply we have this submit as form as soon as the form is being submitted we'll be capturing it while the event trigger which is for form data and we can actually do all of this so really really basic so these were the most logical one complex one after this is just a copy and paste but I'll still do it because obviously we need to completion we need a completion on this one let's go ahead and do one by one so we'll first go ahead and say Avatar ta and why is it not typing yeah little slow when you record the videos it's actually a little slow the system is otherwise it's really Beast fast okay what we're doing in this Avatar uh nothing really much we'll be importing the react there we go I will be creating a type because we'll be injecting uh some of the images into it that's what Avatar is let's go ahead and have this type props are we importing something yeah we are importing type from OS now we don't need this so we'll be having some props and inside this will be saying image is going to be and string and there will be some alt text if somebody gives me but I'll keep this one as optional if they give it to me that's nice otherwise it's okay and here we need actually column because we are defining types so sometimes the suggestions are really bad okay and we'll be saying type props is declared but never used I'll be using that in a second don't worry now let's go ahead and say const Avatar somebody will be giving me these props just like this and let's go ahead and have it just like this and then I have my code base which is returning me as CSS class CSS object basically so there we go we have this class rounded all of that we will be having these images why are you having issues because this doesn't need to be like this these are not a prop declaration like this uh the way how this is being done is whenever somebody calls this this will be returning a react component so react functional component basically and the data type that it is expecting is actually inside the props and this should actually do the job so let's go ahead and have it like this react functional component props equals looks okay to me what is your issue now it says type playlist can be used in the typescript file ah I named it as jsx my bad I don't edit these out because these are most important thing to understand TSX now it's happy okay so there we go now the Avatar is done another such component is also almost similar to that so I'll be just directly creating that again these are copy paste I know this is very boring so speed it up 2X or something like that this blog is not doing any blog it's it's just very simple dumb component it doesn't even accept anything somebody just runs it uh gets me a Boolean value and there we go so I'll just go ahead and have it it just has this simple color a blur a Blog at the back it's just a Blog blog doesn't mean those article writing blogs are simple circular blog blob yeah so that that's one I'll show you what's the use case of it it's nothing it just has this uh SVG file into it nothing else so based on true and false you can pass it on and make it enable and disable for the mobile responsive and all of that after that almost similar to this we have a header file as well so I'll just walk you through with that one as well so we'll be saying header dot TSX and I'll be just copying and pasting this one again because literally there is nothing here that is new and we have discussed everything here so what we have is we need to actually bring this auth from Context use auth why is it having an issue we don't have a logo yet but we'll be creating it very soon so let me just try that why the import of use auth probably there is some typos probably missed there and Logo will be creating in a minute what it is having is a menu items so we have home about us and the contact they are going nowhere so it just is helping us to get the visualize there and notice here we have this use auth status as well based on user is logged in or Not So based on that we are checking some things this is where we are looping through the menu items and we are creating simple navigation bar and whether the user is on profile or not so based on that we are saying in a slash profile or slash sign up based on this auth very basic ternary operator if you have reached so far in the course itself you are pretty much aware of this one similarly we are saying hey we should show him the sign up or we should show him profile show him a log out route or a login route based on that so very basic there is nothing too much to be worried about all right so let's save this obviously there is an error here because we don't have this component log logo let's see if it allows me to create this directly from here uh probably not I have to create it manually and let's right click and let's go ahead and Logo dot TSX logo is exactly same uh it just gets you a logo so we actually love the logo here so we are directly using an SVG path here again nothing much logo is just an SVG so this is your SVG it returns your logo uh that's it and you simply go ahead and use this one so should be should be all happy okay let's try to are we exporting the logo as well yeah we are exporting but why this is having an issue let's try this one more time so I want to bring the logo from dot slash logo now it's all happy just want me to rewrite the thing similar to this we have just one more rest of all are done I know very patient I'm testing your patience out okay the next one is profile card and this is having no much information so let's right click and create a profile and the profile card dot TSX let me bring this again profile card from my notes itself because we are doing nothing much here but uh still I'll just walk you through with some of the important Concept in the profile card so this is very basic uh why are we having issue in Avatar TSX okay shouldn't be having an issue just like this dot slash Avatar are we not exporting this Avatar yeah we are not exporting this export default Avatar should be all good so that's also a testing all right now uh the most important thing here is if we go ahead and declare a simple const like profile card and we'll be having react functional component just like this go like this and of course export this as well export default profile card now this is not going to do any return type like that so we can just go ahead and get rid of this there we go the most important thing in here is that as soon as this component loads up we want some states to come into the picture and as soon as this one loads up that means I need to use use effect to figure out that whether somebody is logged in or not if he is logged in I can grab some data and in case you remember we actually wrote a script for it as soon as I call this one method here which says uh get current user it actually gives me the user details so we'll be actually taking advantage of this one so first and foremost let's create a simple a state so const user user set user just like this so really basic and a couple of interesting stuff here notice here we don't have this model so why there is suggestion of this and yes you can actually go ahead and completely get rid of this so this will be absolutely happy this will work this will 100 work but let me show you one more interesting stuff about the app right if you go ahead and simply say models.user because uh what you are about to inject into this is not going to be a regular string it is something that is coming up from the app right itself and apprite actually gives you these types as well and the one of the great advantages you can go anywhere here and you can just actually import these models from the app right and simply work with that now right now this is complaining let's see the complaint that generic type user requires one argument and we haven't passed on to this one so right now this is all null and let's go ahead and use this so let me just quickly check this that why is it still crying all right had to look into the documentation a little bit uh with this error so exactly let me show you what I found out when I say model.user it's saying that hey it requires generic type user requires one argument so after looking a little bit into this models by the app right I find out that hey this one is saying that hey uh give me another type so just like with the angular brackets typescript we actually need to provide it one here which is also given to us by model so no need of further includance of this and they say that hey if you go ahead and set it up as preferences it will just get rid of this again if this is something which is too much for you can cut this out but we are not taking advantage of the typescript in that case we are simply saying that hey this is a user right now there is a null there could be something else into it or you can just set it up with empty string whatever you like but we want to be little bit more explicit and take advantage of the typescript so that's why we are doing it after this is super simple we have already seen this so many times so we'll be saying Hey I want to have a use effect just like this and we'll be saying hey use effect this will be dependent on nothing as soon as this component loads I want to take advantage of this one go ahead and execute a method you can name a method outside and then call it or maybe just call an Fe here and that's it if we immediately invoked function we'll be calling it as an async if we and there we go that's it this one takes no parameter nothing is needed I'll go inside in here and say that hey I will be awaiting and this app right service can actually call the get current user the method that I created it doesn't take any parameter if the user will be there then it will be doing the job and that's it let's hold this into a variable so let's just call this one as user data again if the user data is there then we'll be setting the user that's it let's go ahead and say that hey if there is user data user data then uh suggestion could have used that set user as user data that's it otherwise let's keep it null and we'll be checking all of our condition based on that so I'll just copy and paste the conditions that we have already checked so I'll just go up here and paste it now all we are doing is we are rendering a component based on whether the user is there or not if user is not there we are not rendering it so null yeah you get that very basic JavaScript and in this case we are just rendering a profile and notice here there are some information that I'm getting so this user is an object model that is coming up from upright it has all the information that you are storing for a user and we're not storing much we're just storing name and email so that's why you see that in the place of name we are saying simply user dot name we could have done it better in case you don't like this approach you want to always show the card then you can check if user is there then show the username otherwise show the null very basic ternary operator you can go ahead and do that that's basics of it so all right too much of the basic some values are hard coded obviously because we are not taking that data simply then it says log out button and that's it we are just doing the profile card so all right so all of the components are ready and let's evaluate the situation where we are right now in the app right so let me summarize this this will be a super helpful summary station first we haven't talked about the app yet everything here is absolute basic we haven't touched it this was all the preparation ground so first we created a service which is config.ts and before even creating that config service we went into the config this is nothing we are just setting up our configuration variable which are given to us by the app right itself once we are done with this then we simply go ahead and create a upright config now you can create all these methods into separate files and folders but I think that's not a very scalable approach I want to keep all this in one file at least the odds1 file database related stuff in one file and maybe storage in one file and we can go with that then we created and worked on with this so we created couple of types after that we set it up the end point and create an account out of this app right then we simply created a class and created a couple of methods so that we can reuse them we created a create user this is not a original method for creating the user in upright the original method is account.create so we actually wrapped them up as a wrapper so that our code is more reusable and then we created a login we created a log out we created a get user to check the at least check that whether the user is there or not and then we created a log out and all these so it's logged in to check the user is logged in or not and get user to get the actual information after that we worked on to the context API we don't want to use Redux or anything so we simply used auth context provider we created our own hook which actually gets two values one is auth status and set auth status set odd status is capable of manipulating the auth status and the auth status is all status it's a Boolean value true and false then we created a hook based on this provider so auth context and we simply says anybody now should be able to use this context and should be able to get the data so anybody who uses it we return the data to it that is it that is all that we are doing in this one then after that we created a few components the most important components for us were login and sign up there is nothing too much into that just like we created the use router we simply also use the set all status which can manipulate our status that's it and as we will be wrapping our other components in the pages all of my components will be aware that the state of the user is logged in or not based on the context provider so that's all what we have done here we are just tracking for an event which is a form event if that event is triggered we are preventing the default trying to either sign up the user or log in the user rest of the components like logos these are nothing just filler elements there is literally nothing into it and similarly for headers and all this thing there is nothing too much going into that the next thing is super important for us that is handling the app right now I'll show you some of the interesting things about this app folder as well there is one more way how you can create your folders which is by the parenthesis so far we have seen with the square brackets but now I'll show you how you can do that with the parenthesis and what's the importance of this layout this layout can be directory level and for the global level as well I'll walk you through and we'll show you that as well but I think we need a small break as well in case you are watching in continuation that's great another segment is breaking out here if you're watching in the videos itself it will be catched up in the next video let's go ahead and see you there all right hey there everyone hitesh here and welcome back to the series if you're watching in continuation then that's great uh but in this video we'll try to finish up and wrap up this project because there is nothing too much to discuss and uh discuss in this video uh we have prepared everything our services are prepared for app right our components are prepared now we just need to do is bind up everything that's what the thing is but I don't want to repeat The Binding process as you have seen in the previous video where we discussed about how we can make a mongodb call and all of that I want to show you a different approach of that otherwise that would be a repetition of the things and it doesn't add value to your life and that's what my goal is add a value so let me show you one interesting thing which will be super helpful for you and again there is no right and wrong there are different approaches of doing the things sometimes you find more value in this approach sometimes you find Value in this approach more so I'll show you one such approach maybe there you can find some of the values all right let's go ahead and get started with that so uh this is the directory structure this is one of the project that we built in the earlier in this series or in the video wherever you are so notice here we were going into the source directory and we were keeping all the files here our app directory was important so we actually went into this the API is the backend which we kept into users and then we have a lot of folders inside it but if I go outside this API is a backend rest of all the things are front end so I hope you can imagine as the pages will like expand there will be so much of these directories which some of you might get panicked that hey this is a problematic structure directly here we are having our backend organized in just one folder why don't we have something which can organize our front end as well uh yep I'll explain you how you can do that just in this video that's exactly why I've opened this up so I'll walk you through that how we can do that in a minute I'll tell you that but first this is a different approach that we're using we won't be using any middleware or something because you have already knowledge of that so I won't be focusing on that I'll walk you through with a different approach of how you can do the things now first here let's take an example of this layout we haven't discussed it in much I did created a video earlier which is not a part of this series where we discussed the file structure a lot in details in case you want that go ahead and watch that live stream I was discussing that in the live YouTube video but I'll still give you a brief approach so notice here this is a layout this layout is actually right now inside my app directory so this is considered as a global layout what is the layout nothing much more it is a wrapper this will be a wrapper around all of the things and which are happening inside that directory so notice here in the app directory right now there is one thing only which is Page and this wrapper is actually a wrapper around the page itself so for example notice here there is a title here which says create next app so we'll just go ahead and say that this time we are not creating just an app so we are going to go ahead and say create next and app right app something like that and we we're gonna say description is generated by create next app uh now you are learning uh learning it on YouTube so we'll just get that now not only this what I want to show you is that notice here this component actually is a root layout component that means it's on root level so obviously that's where this is it accepts children and it renders the children the whole job of this component is to do nothing the whole job and idea is to just render the component but right now if I just save this and go back on to my code files and this is how it looks like but somehow if I actually want to modify all the pages that I have I can actually come here and every single page is going to render this I'll go inside the body I'll just say hey I want an H1 tag and this one is going to say this is uh all render element something like this and we'll add some classes so that we can actually see it much more easier so we'll just go ahead and say uh we'll just get a width of 100 we'll just get a background of a white maybe and the text is going to be black and the text is going to be 3XL just basic classes so what you'll notice now that every single page has this render element and maybe we can actually try something more fun in case you are enjoying these classes so text Dash Center if I can write that properly text Center so this is a render element now no matter what page you go this element will be present in every single element and that's the whole idea behind having this layout now if you amend anything so notice here we are since injecting this metadata this metadata will be presented in every single page that we have all right so now that you understand the importance of the layout it's not like that this is the only layout that you can go ahead and create there are other other layouts also that you can go ahead and create that and I'll walk you through that how you can actually go ahead and do that I'll show you in a minute all right so what we're going to do is notice here how interestingly we are going to modify everything we can just save this we are not worried about changing things here inside the app I'm going to create a new folder notice the syntax of how I'm actually creating these folders I'll create a folder I'll start with a parenthesis not the square bracket square bracket has a different meaning and it's a framework everything has a different meaning in here and I'll call this one as Pages now in the next JS still you can actually use this parenthesis to denote a special thing for you it will not affect anything inside the framework itself but it will help you to organize your files and directories and folders everything quite a lot so now inside this pages I can create a lot of things the first thing that I'm going to do is I'll create a page so I'm going to go ahead and say hey this will be page dot TSX just like this now why I'm creating this page only now this is a page which will be saying that hey what should I log in should I render this will act as a home page and I'll show you how it is being actually done because right now there is no other page so we'll be actually redirecting our home page that hey this is the children I'll do that now the first thing that I want to do here is that should I be rendering a home element or should I be rendering a profile card because if the user is logged in he should be seeing a profile card so for this we'll be using something like this so first and foremost I'm going to go ahead and say use client I'll surely inject some of the CSS as well that I'll directly give you I'm going to go ahead and simply say hey use auth is the one thing which is telling me whether I should be having this or not everything is designed there obviously we'll be needing a react and that react is going to come up from react and we'll be importing the profile card as well so profile card comes up and we'll also grab the login component as well so let's go ahead and say hey let's go ahead and bring in login that comes up as a component that's it let's call this one as const and we'll be calling it as home this home will go like this and there we go now I can do conditional rendering based on just one thing I can just go ahead and bring something from the use auth and you know what what I'm about to build and I'll just go ahead and say auth status all right now as soon as I do this now where should I access this that's that's a big question if I go ahead and reload this there's nothing if I go ahead and say slash Pages which I just mentioned up here there is nothing so what's the point of having this Pages if I'm actually not able to do all of this and we have created a component right now this component doesn't return anything but let's just say for some the sake of rendering so I'll just go ahead and say hey return and this will not do anything I'll just shift it a little come on not like that I'll shift it here and I'll say return and we'll be returning just a simple home so just like this and I'll say give me an H1 and we'll be saying home page that's all and again you'll be seeing there is nothing literally nothing so how do I actually grab anything from there that's that's the question so let me answer that first all right so now let's address the issue which is bothering us so again we have created all this we are super happy but one thing is still bothering us how can I get these Pages this is a million dollar question right now in front of me and if you look into the documentation it's actually a little bit confusing there as well so I don't have these Pages that's for sure but also I don't know how can I actually bring the home page as home here so this is my home page I want it to redirect here this is where the directory structure fallback comes in so let me just tell you a theory here again Theory not a whole hard proof up here so notice here everything is inside the pages and I'm not directly defaulting to serving this page here what if this page doesn't exist this has so many things right now all that next.js and stuff like that what happens if this page doesn't exist let's go ahead and delete this and try this out if I go ahead and move it to trash ah now this page is gone does my app crash so let's go ahead and look at the refresh ah my page is hey received a promise that resolved to undefined lazy element and all of that so what is actually happening how this is not working if I don't have a page it doesn't really work let's go ahead and try to refresh but but but here couple of things here interesting one I'll just close this and we'll restart this and there we go we don't have anything so this is not yet giving us the error now hit a refresh and this will take still some time and now the thing is that if that page doesn't exist we get an error we know this already now let me just resolve this error all right so I'm back after a small phone call yes things happen and this is life and this is how we run all right so everywhere uh we were just trying to explore that okay we have this home page we haven't yet exported it so let's go ahead and simply go ahead and Export default home so that's nice uh but this is not going to resolve the problem but what we have done is a foundational change in the next JS project which is everything is dependent on the page uh this and this layout is also expecting that okay I'm a rapper but you need to provide me some children so that I can render them out and you have deleted this entire page thing what are you doing are you in your right mind or not and that is the reason why nothing is getting served and nothing is going to be served here even if you get this page this page is right inside the pages uh that's great that's great but there is the issue of the layout here again after couple of hit research you'll find that this error is a little bit trickier because next year's is still in very development phase aggressive development so sometimes you'll get this error sometimes they're not and all there are asking is that hey what you're missing is okay you have this pages but you should also have a layout inside the pages as well this is the structure of what the next GS follows yes layout inside a layout and there can be one more every directory can have its own layout and that that's crazy here and that actually solves a lot of issues in here so let's inside the pages I'll right click and create a new file and we're going to call this one as layout what you export method inside it doesn't really bother you much but the file name should be layout.tsx just having a layout is not going to solve the issue if I go ahead and save this layout but at least it resolves the issue giving us that now there is not that much of problem uh the nexgs is decently happy but not too happy because it needs all of this now layouts are exactly same so you can just either copy and paste this whole layout or you can just actually write it along with me I'll prefer to rewrite it so that it builds some habit for you now this layout is also going to be a cloud client layout because I want to pull in some information this is everything happening client side I would definitely need app right service so I'll just say app right service let's bring it up here I will be needing some of the blog from the component to just display some fancy stuff nothing much there we'll also be needing header because header will be every single place and the way how we have designed the header in case you forgot that it's actually automatically uh rendering Things based on conditions so notice here so here it is based on the auth status our header is displaying either the profile or signup so header is a good information that we want to have it now one of the most important thing that we'll be bringing here is actually the auth provider so if you notice that auth provider this auth provider will help us to display conditionally whether we should be displaying something or not and all of that not only that since it's a provider I told you that provider actually wraps up everything and this layout actually wraps up everything so this solves our issue that I can use my auth provider and this provider can send information to all of my component what they need there otherwise there will be prop Drilling and I really don't want that so I'll after this I'll be having a react and then two famous guys of the react which is use effect and use state will be bringing it up the way how this layout is designed you can call this method anything but first let's study this layout that how this layout is designed so rest of the things are pretty boring so after this export default function root layout this root layout takes the children and that children is of type react dot react node and then we simply go ahead and render these children this is the basic I repeat this again probably that was the first name your function whatever you like I usually use the word layout that's a good idea but again the naming of the file is important not the methods it accepts children that's one thing this children is of type react.react node and then simply you go ahead and render it so that's what exactly we'll be doing in this case let's go ahead and say hey we are going to call this one as protected uh layout and protected layout takes a parameter as children again remember children's are of type react dot react node so we'll be giving this type as well and let's go ahead and say that this will be of type react Dot react node I'll copy this otherwise I'll probably make a mistake so I'll copy this and we'll paste it up here that's better all right that is good enough now let's go ahead and have it like this this will complain obviously because you are not rendering the children you are not returning the type as well we'll deal with this error in a minute but first let's go ahead and grab our auth status so we'll be saying hey I'll probably use a tab indentation here there we go so we'll simply have that's a wrong one I'll actually bring in mine so I'll be saying that hey I need a state which will be auth auth status that's my variable set out status and we'll be setting the states just like this so that's fine I'll also introduce a loader I probably would love to have a loader which is more of a a spinning wheel or something but in this case I'll just uh settle up with a simple loader which is just a text a set loaders initially it's true so that's okay now before I return anything obviously as soon as this layout but end of the day we are calling it as a layout but end of the day this is just a react component and react components can use use effect we'll do that so I'll just simply Say Hey I want to use the use effect and there we go I have nothing inside as a render so it renders only the first time as soon as this comes up I want that my app right service should actually ask that the weather is somebody is logged in or not and since this actually returns a promise the way how we have designed it we can actually go ahead and say hey Dot then if actually it results then we're going to go ahead and say Seth odd status and as soon as I call this this is going to set it because notice here what we are returning this we are passing it on here so this set auth status is going to set it up and if it is not then will not do the catch we'll simply go ahead and run the finally because anyhow we need this one in this case we'll set it up false so if you just call it this is obviously going to set it up to true in case you are not happy with this one I will just go with this otherwise we'll set the loader false this set auth status is default false it will remain as it is all right now after this we'll just go ahead and simply use The Return part of it in the return I'll use this auth provider yep the value of the auth provider is going to be auth status and auth set auth status so both of them are being provided to us and we'll simply go ahead and in this one first and foremost we need to cloth close this auth provider so I'll just say auth provider and not like that we'll be having a slash there we go should be all happy all right so now we have this one now inside this auth provider I told you this auth provider is nothing come on why are you doing this escape and hit a tab escape and hit a tab okay so now what this auth provider is is a wrapper so it will pass on the information every single place where I'm just asking it uh but based on the loader is done or not we'll be providing the information so first I'll check if there is no loader and not leader loader and we don't need all status and stuff we'll just go ahead and put the M percent Escape that we'll just render an element what that element is going to be a simple fragment just like this and inside this I do have some classes which will help you to have a proper display so uh div dot text Dash primary I'll give you these assets and some of the files as well so don't you worry come on no suggestions div dot primary just like that and I'll actually give you directly this so that actually helps you copy that and I'll paste this again nothing more there are some CSS files which actually include this blog nothing to be worried these are just the background elements so nothing much more than that after this we'll be having this header so just like this we'll be having header come on what is happening there we go we have this header and after this we'll be having a simple main class which will be rendering the children so that is all what we are doing and let's hit enter main class all right so this was all fancy with stuff so this whole div is a fancy stuff nothing to be worried this header is also almost fancy stuff the Meat part is here the main which is rendering the children so auth provider will be responsible that whatever the children comes up here I can pass on information and can query directly the auth provider hey what's the current value of it so as soon as I save this now let's go ahead and try to hit a refresh now notice here we have couple of errors that did hey elements are of lazy type there are some issues with that probably we are not exporting this yeah we are not exporting the protected layout so let's go ahead and do that first and we'll be saying export default protected layout so now things should be different and there we go now we are having this app right home about contact and home pages rendering so what we have learned with this that is the most important thing and what we have learned into this is although I don't have a page.tsx directly inside the main I really don't need it but what I need 100 is a layout if that file goes yeah the project is Bonkers but inside the pages I can have this layout and Pages dot TSX and this can actually serves as a home page yeah that's that's a new information all right let's see where we are having this issue so this children why are we having a property protected layers all right so I think this is bothering a little bit shouldn't be bothering that much let me just quickly check that why this is bothering us let me quickly take a look on this all right got it there are some syntax issues so it's actually better if I go ahead and take this one as a structure so I'll just copy this till the above this one so I'll copy this directly these syntax and structures are sometimes problematic so I'll just go ahead and copy it here and there we go and probably we copied an extra colon and I think we shouldn't be doing that and now this is giving a colon just like this there we go hopefully things are okay now okay let's check it out all right so at least uh this is working and we have so this blog yeah this is exactly the background elements and all that so this is what we are having now so here is the interesting part now that you have understood this much part now can you understand that we can instead of doing this home page we can actually go ahead and do a conditional rendering here and that is exactly what we are about to do so based on this auth status we'll be doing some conditional rendering let me just go ahead and tell you that directly so instead of this return we'll be pasting this one here so notice the top part is just nothing it's just centering the element on the left side next JS and blah blah nothing to be worried the whole thing is actually here this is the piece and this is very basic minimum we have already discussed in the previous part of it that if the auth status is present then go ahead and render the profile card otherwise just load the login component that we have if I save this notice here this is what we have again we don't have this Global some of the style sheets are still missing I'll just go ahead and add this a little bit in a minute but notice here this is all what we are having and if this is what we are logged in let me quickly check that if I can quickly fix the styling part otherwise we'll just move with this one all right it's not a big issue I actually forgot to customize some of the theme elements as well so I'm actually configuring a little bit of the Tailwind team nothing too much but I'll still show you so this is how the project is looking like because it's not able to find these primary colors and all of that I'll just go ahead and do that so inside this extended all I can do is actually provide some of the custom colors that we are using so I'll just go ahead and wrap this up first and put up a comma so that it doesn't give us any error and all I'm doing is setting up some of the primary and secondary colors so I'll just give you we actually picked up the colors from the app right itself so I'll just give that so that is it and should be all happy now save this and there we go so most of the colors are there uh but yeah I know this is not the best styling work I don't want to focus too much on the styling part so that is it okay let's just let's just close it right there all right now that we understand that okay this is again a cool way of having the elements and layouts and you understand the importance of layout there is little more that we can do with this layout and I'll walk you through with that but first what we're going to do is do close the sign up and all these Pages as well because there is nothing too much in that it's actually very basic right now this is the home page but if I go ahead and do the sign up that doesn't exist because we don't have nothing here there so I think that's the easy part now let's quickly do that and how we do that because right now we are seeing everything is outside of this now inside the pages I'll create a folder and I'll call this one folder as sign up and inside this I'll create a page.tsx again this is because it's a frontend page.tsx and there is nothing much into this one all I have to do is simply say hey use Client First use client just like that and let's import our classic things uh use auth and all of that we don't need to import service here we can just go ahead and work with the use auth here everything We'll be asking with the use auth let's also go ahead and import router as well use router this one is coming from navigation navigation there we go and we'll be needing react of course so we'll be saying hey react and that will be coming up from react and we'll be needing a sign up component as well and we'll be saying give me sign up component sign up from sign up component sign up okay now again basic uh sign up page yeah that's good enough and let's export this as well export default sign up in here we'll be first asking that hey let's give us a router routers will be coming up from user router will also be having one more which is auth status based on this I'll be rendering the stuff so I can just simply ask if the auth status is true then I can simply go ahead and simply say hey router let's actually replace the stuff instead of router.push we are going to replace the entire page so router dot replace and we'll be replacing it to a page or a URL that is Slash profile because if the user is already logged in I don't want to show him the sign up page really simple there is nothing much and what you're going to see I think that is already uh that's it but uh what we found out while working on this is sometimes you want to actually return an empty fragment why this because of the layout layout needs sometimes this to actually avoid this is the issue which I am still researching a little bit like how we can do the basics so again I'm also in a Learning Journey so please if you find some better alternative or solution like that just give me that I'll actually take that otherwise if the user is not logged in then that block will not run so I'll just go ahead come here what I'll return is just a sign up component wrapped around it that's all but I have actually a wrapper so I have actually written some CSS here so we can simply have the sign up component here so this is just a sign up and that's it now if I save this and hopefully if I go ahead and refresh this and we have the sign up page there we go so this is what we built up again you don't have to worry about the CSS part even if you have the basic CSS that is also totally fine all right similarly we need to build up a login page as well and a log out page as well so let's go ahead and build the login page we can close this inside the pages we are having a folder which will be login and we'll be having this page.tsx this is for a lot of people a better approach again I don't judge people based on what approach they are following I think this is all is required so I'll copy this paste it up there and we don't need signup we actually need login in this one and actually just directly write it that would be better import login from login all right const login page there we go we simply go ahead and Export default login page inside this the same stuff will happen we'll first ask that hey whether you are logged in or not and all of that so I'll just copy this it actually makes sense to copy all of this and paste it up here so we'll say let's read this again so router is there auth status is there if the auth status is there I want to redirect him to on the profile this is still on the research phase if it is not working then obviously I want to mount the login all right so the login page is done what's interesting is that how we are actually dealing up with the log out that's interesting because if actually you see the component part the way how we have designed it so in the login also and also let me show you the login as well now the login actually Avatar yeah here it is if I open up this Avatar component not the Avatar actually profile card yep my bad profile card we have this log out and this is directly a link so what I want to do is I want to create this log out in such a way that if anybody visits this lockout automatically I have couple of options as soon as I could have done this directly here as well that I could have requested a route could created a method here but I don't want to do this I will create a component of logout as soon as somebody visits slash logout so there will be a page of logout there I'll use my use effect hook because I can and there I'll call my app right service that hey just do the log out so that's my flow again if you don't like this flow simply go ahead and create a method here that's that's it so how we are going to do this is create a page for the logout so let's right click on the pages create a new folder we'll be calling this one as log out make sure you call it exactly lockout because that's what we have mentioned in the profile card right click new file page.tsx nothing too much in this one we don't need all of this but I'll still grab all of this copy this we can close this we can close this paste this we don't need to bring in any components so that is fine but obviously I know that I'll be using use effect so it's better to have the use effect just like this okay very simple log out page there we go we simply go ahead and say export default logout page that's the basic absolute basic okay now I need couple of things we need router to push to some somewhere else so let's go ahead and create a router router use router there we go we obviously need the auth states so we'll be saying const I need set auth status because I'm pretty sure I don't need the status to verify I just want the method so that I can just do the false here there we go and I'll simply go ahead and first return so I don't need to return anything but since there is a layout if you don't return an even an empty fragment it will crash we have seen that so just giving you Advanced heads up there all you have to do is provide an empty fragment and this actually saves your life there we go and yes our team struggled really hard in understanding that that why is it crashing then we realized oh that's a layout it needs to render a react component and that's we injected uh the tail the typescript that hey we need this so yeah just sharing the experience how we actually build it use effect and there we go Basics just like this in here I'll use the app right are we bringing the app right here no we're not bringing the app right so we should be bringing the upright service where should I bring probably top is good app right service now we have this so app right service you go ahead and just do the log out we created a method here is the log out and again the logout is also a promise so you can just run the method and once you have this method you can actually go ahead and use a DOT then and if the dot then is there then we can have a call back so let's go ahead and have first let's close the then then we can have a callback just like this there we go now inside the Callback I'll say set auth status to false and router is going to push you to the home page home page will take care of itself and that's it so I hope you understand the logic that we are doing with the log out super simple nothing complex there okay now we have let's check out we have the sign up happy with this we have log out we are happy with this login we are happy with this but what about profile hitesh that's that's the major question we have been wondering so far now again something interesting about this one as well now notice here inside the pages I'll create a new folder notice the naming convention again I am creating a parenthesis again yeah parenthesis means there's a lot of stuff that is going to happen I'll call this one as protected so all the pages inside this one are going to be protected Pages since I'm not creating a middleware I can go with the middleware approach as well but actually a lot of thing can be taken care by the use context itself so just like I have used this couple of other places as well inside the protected also I can have other pages and all of this so again you know what's the syntax and how the structure goes protected the page inside the protected is not that important so let's just say I don't have this one so I'll directly create a folder I'll say that hey there will be a profile here which will be protected so inside the profile I'll create a new file which will be page.tsx or there could be hundreds of other protected one not the TS right click and what is happening I want to rename this and this one will be page dot TSX why is it not working page.tsx because it's a component and this protected itself the most important thing is this protected should have a layout layout.tsx all right so I hope this is now very repeatable so you can have as many protected routes and this layout will be common for all the directory yes that is where you actually uh include or enjoy the directory structure so in the directory structure we'll be working through so again remember this uh this layout will be for all this directory structure and this layout will be for all the directory structure at this so the level actually matters and we have one more here this layout will be for everyone so layout inside layout inside layout yeah we are going crazy with that but we'll go with that all right so let's first handle this layout this is actually a relatively simple to handle let's go ahead and do that all we are doing is predicting if the user is logged in that's okay we'll be rendering the children if it is not then we'll be sending email on to some other place again this is again use client suggestions no suggestion no suggestion hate that okay once we have this client let's go ahead and first bring the use auth so we'll be saying hey I'll be saying give me use auth that will be context all right I will be needing the router as well to redirect ah next navigation I like that import react from react that's there again we'll be saying const I'll actually copy paste this time I don't want to get into the mess of fixing this so I'll be just saying that hey this is a product let's name it exactly same there is no point of changing the name so let's go ahead and do this there we go all I thing that I don't want to do is this whole stuff so I'll be just closing it like that and we also don't need to return it like that I'll just remove everything here that's it so it's much more we don't have a use effect here we don't want to do that and I'll also clean this one as well I don't understand what status what I have to do is as long as I return the children this will be super happy so I'm done I'm done with the layout but I don't want to do it like that since this is a protected route every single page on every single page if this is getting mounted then I can check something I don't need middleware just a simple line what middleware is it just is a checker you can inject this is on your own custom way of implementing the middleware so what I'll do is first I'll grab a router so let's go ahead and say hey router use router and also use our status and that's it and let's just check it simple if and else if there is an auth state if there is no auth State then hey redirect him onto the login page return this because crash yeah you get that and in that case return the children too much space and then we can simply have this protected now that's it the page is every single page is protected that that's all I'm saying yeah and now let's go ahead and try this out save this and inside the profile we have this page don't have to write a single line of code I can freely just say that hey this will be protected because of the layout so I'll just say hey let's bring in the profile cards now and once we have the profile card let's also bring in the link we'll be needing that this will be from next link okay and let's also import react from come on suggestion from react and we'll be having a profile command suggestions no suggestion the app profile page just like this export this as well export default profile page in here whatever you want to display you can just go ahead and display that I know that I I'm not going to be bothering you with much of it I have told you the concept now you display here the Account Details you display the profile card whatever you want you can just go ahead and do that we are also not doing a drilling we are just getting a profile card and we are getting the information directly in the component itself so whatever that is we can actually bring it up here and that's the magic that's coming up here and now let's see if I can actually visit the profile so instead of the sign up let's try this if I go ahead and say Hey I want to visit uh profile no I don't I don't visit it because I am redirected back to the login so that is what is now this is again a different way of understanding and learning let me summarize this because this is again a really really interesting take on the next JS I'm super happy about it uh but let me show you and walk you through with that so how this entire thing happened and how this is all working so we learned that if we don't even have the pages we can still make the layout of the next JS work but what's more important than the pages is the layout because layout is the thing which is rendering everything and it needs something to actually display that's what the whole goal is what approach we are using here inside the app is we were worried that if we will have too many of the frontend page that might get scary uh scattered here so now our API can have dot app can have dot API and there we can write the backend logic if we have if we don't have it we can create a pages with the parenthesis this doesn't need to have its own page itself we can have and can just be worried about the layout itself so inside the pages we created this layout which is the most important thing and inside this we have this page here and now this page is conditionally rendering this layout is effective on all the pages that we are having all right so this is what the directory structure means in one Pages we will have just one layout and this will be rendered in all the pages that we are having further if we know this we use this technique inside the protected as well that hey again a directory structure that means inside this also I can have one more layout and in this layout I have checked it so before rendering any component I'm checking this out so this is another approach in case you don't want to have this middleware or the back end or anything related to the back end you can simply check this with the component level as well because end of the day this is react this is how we used to do this react so there are different approaches there is no right and wrong whichever feels good to you you use that whichever your company says hey this is better approach use that I've walked you through with the cases of middleware as well I've worked you with the cases of context API as well in case you need something more just let me know I'll present that scenario as well in case you want to have a research or a discussion with me hey which one is better which scenarios are good for which one we can do that in our Saturday live surely but I think this is it and I'll also push this entire source code in my GitHub repository as well so that you can see this all of that that's basic and again if there is a small bug or something like that I'll definitely go ahead and tweak that out as well but majorly whatever I wanted to share with you I've done that so I think that's a good start of uh there's a really lot in depth start of the react.js and we are just talking about authentication how amazing is that really I'm enjoying this teaching part so I hope you understand the efforts as well that we are putting in so a subscribe is kind of you can get that you can give that that is it for this video I hope you have enjoyed that and let's go ahead and catch up in another such video all right so you have gone through with a really really long course I don't know how many of you will be reaching into this section or this portion of the video a really long video but the good news is now your basics of nexgs is absolutely Rock Solid you understand every portion of it how we are dependent on the client side how we can do everything on the server side but of course there are use cases where we actually can use some of the just the client side just the server side or mix of it incremental updates and all of that for this we need to create more tutorials and obviously I'll be doing it I'm already planning to create more tutorials which uses nexjs and show you some of the use cases we're already trying to build some of the Clones which are not just the look wise clone like Amazon or something their functionality clones so complex functionalities are being included I'm already working on that since these videos take time so obviously I'll work a little bit more on to this then recording process will begin but rest rest assured that I will be bringing up more tutorials on next JS and some more stuff as well just like we always do so thank you so much here spend so much time with me I hope you have enjoyed this and I'm pretty sure that I was able to add some value to your life that was the goal and if I was able to successfully do that then drop me a note on Twitter Instagram threads yeah that's the new one just drop me a tank note and that will be my piece from your side that's it so let's go ahead and catch up in another such video