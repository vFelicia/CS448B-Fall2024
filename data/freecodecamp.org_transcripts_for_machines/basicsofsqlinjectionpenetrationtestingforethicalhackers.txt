let's see what you're going to cover in this course so there are five sections in which this course has been divided in the fundamentals the basics attack techniques the industry tools and defending sqli in fundamentals i'll cover the what when where why and how of sql injections and i'll show you the lab setup that you will need for this course the basics will cover the basics of sql again it's not basic sql injection it's basic of sql and then types of sql injection after that we'll move on to the attack techniques where i'll show you various adapt techniques that you can implement in this world and it's completely handson finally i'll show you how to use industry specific tools to use sql injections and to leverage them efficiently and effectively and we'll wrap up this with the lecture on defending sql injections where i'll show you the best practices that you should be following and again i'm not a programmer so don't worry i'll not show you the coding practices i'll show you what the real stuff is let me go ahead and quickly introduce myself experience wise i worked with multiple fortune 500 companies and government bodies on highly complex and confidential projects saving them over 25 million dollars every year last year we saved over 72 million dollars if we combine everything i have authored multiple international bestselling programs as well as i am the author of the book called penta secrets which is an amazon's global bestseller i have trained over 35 000 cso's who are today leading the world's infosec economy i hold the ccso lpt master ecsa ceh chfi cei as some of my ec council credentials i have been a former board member for ces governance board for india middle east and africa region and kvm board members of ec council in asia pacific region my core expertise is in managing doubleblind penetration tests which are budgeted at least hundred thousand dollars or above here's the disclaimer sagar bunsel sagar pencil group of companies our partners ad affiliates youtube its partners and affiliates are not responsible for any of the actions you take after completing this course or watching this video any numbers claimed within this video are for reference purposes only any trademarks used in this video are the intellectual property of their respective owners and the video contains professional penetration testing knowledge and everything has been done in a controlled simulated environment what are sql injections and why do they occur it's an interesting question because sql injection is one of the top 10 vulnerabilities as per or wasp and it's been there for years and still we see it let me tell you a story before i get started so this year in february we bought this car on my birthday now it's a mercedesbenz cclass and there is no bench showroom in my city so we had to take the delivery from another city however when we were taking it out of showroom there was a checkpoint on the checkpoint there was a camera which scans the number plate of the car on the number plate it scans that number and compares that number in the database and if the car is involved in some kind of fraud or if there is some ticket pending or if there is some criminal charges it will not open however we just bought this card five minutes ago it doesn't even has a number plate that was completely blank now here i have two options i could even wait there for a whole day get a number plate maybe a temporary one and then pass through the checkpoint or what i did is i wrote the special characters which is sagar single quote or one equals one now this is a special query when you put this in any database it will always return true and the checkpoint compared this thing in the database and checkpoint said yeah allow this color and it just opened and i took my curve and that's how i passed that checkpoint by putting in a scale injection now let me explain how the statement bypasses any checkpoint you see think about a login page how does a login page looks like there is a username there is a password and there is a login button right at the front end but think about the back end in the back end there is a lot of code as you can see on your screen right now you don't need to learn coding but try to focus on that red part of the code that is the code which is responsible to check if your password and username is true or not let me make it more easier so this is the simplified version of the core in this code it's asking select start from login where username equals something password equals something so there is the field username there is the field password in a login form you fill these fields and it goes to the database and it checks hey is there any user in the login table which has the username of sagar and password as pencil if there is it will return a result if there is not it will not return result so the parameter here we can choose any of these let's say password this is the expected input password equals x y z but a hacker like me will not give x y z i will give x single chord y z now do you see what just happened here that x was supposed to be closing with xyz and then that single quote however i just added a single quote and now i have two statements password equals x and then there is another statement which is y z and single court now once i am able to do that i can write an exploit like select star from login where username equals sagar and password equal x or one equals one so the system will check okay is there any user which is sagger and is the password x or just check if 1 is equal to 1 which is always true that is a tautology 1 is always equal to 1 which means that the result will be true and it will return a true statement and i will be able to log in this is the reason sql injection occurs when you are able to control the database put some data and manipulate it according to your wish that's a skill injection becomes so deadly of course we'll be talking about how to make these queries how to write this code in later lectures but this is the concept that is how sql injection works this is the reason of sql injections to exist when user is able to give certain data and control the database with that data that is where sql injection comes into the picture in this lecture we will go ahead and configure our lab which will be using for this course for that i want to download xampp for windows if you're using linux then download them for linux or if you're using os x then use xampp for osx the php version which i would recommend should be 7.2.33 just go ahead download this and install it's a simple next next next install so i'll not show that right now once you have installed this just go ahead and search for xampp control panel that is the software which you will use to control this now here you have apache which is your web server in mysql which will be using as a database so go ahead and start both of these processes once you're done with that you can close this window you don't need it and now go to your installation folder of sam in my case that's installed in c drive here you'll find mysql in mysql you have something called bin and here you have all the files for mysql open the command prompt or a terminal window in this location and type mysql dash u space root we want to log in as root and there is no password by default once you do that you will be able to log into the database now here you have to create a database so say create database and give it a name the name should be spva once you do that it should say ok query one row affected you can show databases query to see if the database exists or not once this is done you can close the terminal and now you need the web application you can download this web application from my website sagrobinso.com here you can go to sbva which is sagar princess vulnerable application and you can click on download now to download this application this is the spva folder let's open it copy everything again go to your xampp installation folder this time find a folder called httpdocs this one by default if there are some files in this folder delete everything that's all good if this folder is empty just go ahead and paste this it's the same thing you delete it make it empty and paste all the files which you downloaded from my website now once this is done you just need to go ahead and open in your browser localhost slash setup.php once you do that the application will be ready to install you don't have to do any other configuration you can go ahead click on this login page and try to exploit this login page that is how you set up this environment however in this course i will also be using an online application called test php once you search test php on google it'll say home of acunetix r this website is owned by a kinetics company and it's a testing website as you can see testphp.worldweb.com on this website there is browse categories in that there is paintings this sometimes gives you an error because someone else in some other country is trying to hack this website as this is made for hacking that's all good just refresh the website it will load eventually and this is the page which we will be exploiting in the course so this page and sbba application both of the things that makes up our lab the basics of mysql it's really important for you to understand basics of writing sql queries of course i will not be teaching you all the sql language in one shot and of course it's not an advanced sql class but you need to know very basic language so that you can use them to understand the sql injection queries for that i need you to log into your mysql console now the first command is show databases which will give you all the databases that you have next event is create databases and you can create any database in this case i'm creating a database called x and you see query one row effector if you run the show database again you will see you got a new database next command is to select the database so you say use and the database name which is use x now we are in the x which is determined by this column here now let's see if there is any table in this show tables for that however it's an empty set because there is no table let's create and table them so i'm going to create a table called users now the reason i have these braces here is because i will be putting what kind of data will be stored in this users the data will be first of all name now the name is the name of the column okay that's the name of the column where the data will be stored but what type of data there are certain types in sql and it depends on the product that you're using in my case i'm using mario db implementation of sql so the type which i have to use is wirecare and in wirecare i have to tell it how many characters the name can be let's go 100 characters so someone can type a name which will be stored in the name which will be of varchar type which is characters and that'll be 100 characters let's press enter and you see query okay zero rows affected let me show you the tables now you can see we got a table called users if i select everything from users by using the select query where star means everything so select everything that's there in the user show me everything that's there in the users you will see it says empty set however i can go ahead and add something here by putting insert into values so i can use insert into table name which is users i can insert into this users table values and i need to give the values since i only have one column which is name i'll give the values here if i'm using name i have to use double cards and i can give a name like sagger i can press enter and you see one row affected if i do select star you will see there is a column name and there is a value which is in server similarly i can add more users by using the same query and saying second user as alice and third user as bob and if we try to see the users and you can see there are three records which are these which are in the column of name which are in the table of users which are in the database called x i can delete some stuff let's say the whole database by saying drop database x you can do the same for tables as well drop table and the table name as soon as i do drop database x you can see it says none here and there is no database now so if i just show you the databases you can see we don't have x anymore that's how you delete the database now there are three functions that i want to explain the function of user so i can say select user you can see it gives us the output of user running on the server so we are running this as root there is another function called version which is going to give us the version number of the database and there is another function called database which will throw us null because we are not using any database however if an application is using a database like uses pva now my application is using sbba database if i do select database you will see that it gives the database as the result so these three functions can be really helpful while gathering data in sql injections this is the core basic that you need to understand there are many things like ore and where order by group by but this is not an sql class though i will be explaining all of these things in the course whenever i can but you can always use google as your friend the classic injection bypass well the classic injection bypass can occur at any place for this example i will be using an application that i developed it's called spva sagger benzel's one rebel application so you can go to this login page and this is the place where i'll show you how to do a classic injection bypass because this is the easiest to understand now it's a simple login page if i do anything like admin admin which is a wrong username and password it will not throw any error and not even say that the username is wrong or the password is wrong it's completely disabled with the errors however if i use a correct username which is sagger and if i use a correct password which is bunsel i'll go ahead and log me in and you can see now i can log out and this is the place where i'll try to do a classic ejection bypass first of all we need to understand how the code of this application is working to make it easy for you let me show you the command line and i'm going to show you the tables here there are two tables we will use login table i can see in the login table there are just three entries id username password id is one username is sagar password is pencil now what do you think the backend of that website is using as php the query might be select start from login where username equals sagar and password equals pencil let me show you how so this might be the query that the website is using select start from login your username equals sagar now you control this sagger by putting it in the website over here in username field and you also control this bundle by putting it again in this field which is password field the ability to be able to control these fields which are being directly used as an input in an sql query is very dangerous and that is where you can do a classic injection bypass let's look at it carefully since i am the one who controls what i will put in the sagar can i not go ahead and put s a g in a double cards space now do you see what just happened i just created sag as the variable and i have got the ability to write some code here and this all is an additional thing it was not supposed to exist right this was never supposed to exist it was supposed to be and here well i just break this double quotes by putting a double quotes and that's where the classic injection bypass works so instead of this thing i may put sagger and a double quotes to break and then or one equals one which is basically that check if username is sagar or one equals one that is a classic injection bypass however there is a small problem in this this cork is never supposed to be here and this code is never supposed to be here in such a case we may go ahead and utilize this court by putting one code here one here and one here and similarly we may use it by putting it one here one here and one here now this is a perfect sql statement select start from login where username equals sagger or one equals one and password equals bunsel or one equals one so basically i can go ahead and press enter and this will work however even if i give it a wrong username and password like admin this time this will still work because the statement of where clause is being nullified by the statement of or clause in both of the cases this password and this username doesn't matters until 1 is equal to 1 and this will always be equal to 1 because this is a tautology so that is how you do an sql injection bypass there are many other ways to do that maybe you cannot put these double quotes in certain situations then how do you do that so for an example if you're breaking it from here and you're typing or one equals one then you may want to go ahead and remove the whole part from here by commenting it out comments in sql depends on the product in mysql you can use a hash sign or a minus minus sign or minus minus space minus sign or a slash asterisk sign there are many ways to comments and some will work some will not work so you have to try all of them let's try with hash as soon as i press hash all of the preceding code will be marked as a comment so my query is select start from login where username equals sagar or one equals one that's it everything else is being ignored now let me try to press enter and let's see this works and here you go it's asking you for a semicolon because the semicolon is getting ignored so there should be a semicolon before this comment sign i'm going to press this i'll work however a good query will be putting a semicolon over here before this sql sign and i see it works perfectly so i can go ahead and try another type of comment like minus minus that works as well i may try minus minus space minus in certain cases minus minus doesn't works so minus minus space minus may work however here you may say that you know what this is just getting commented out so it doesn't matter whatever i press here and you know i can even write this thing it will all get commented out however as i said in certain cases minus minus doesn't works minus minus space minus vertex so you may want to keep that in mind it works i may want to try with a with a slash asterisk this also works and here you can see suddenly something has changed in my database and it doesn't looks correct so it is asking me for a star slash you know to close the comment it's a multiline comment you can comment multiple lines by writing slash asterisk and then asterisk slash to close the comment and it'll keep asking me for it until i close it now i am back in my database console so we will not close it because if we close it then this statement will not get commented out hence in certain cases we just keep it open and the system automatically ignores this part sometimes this one is risky but works now that you know how it's working let's go ahead and try to bypass the website itself so i will put a username it double quotes or one equals one and then a hash sign i will copy the same thing and put it in password though it doesn't matter so we're just commenting out the rest of the thing oh we just forgot a semicolon here now let's try the login well that didn't work what just happened let me tell you one thing in certain cases this double quotes can be replaced by single quotes it completely depends on what the developer has decided to use so in this case the website is not using a double quote the website is using a single code which is a common practice so the website is using the single quotes instead of double hence to break out from it i need to put a single quote here not a double quote and then i can press or one equals one so in the website i will put a single code here not a double and now i can press login and you can see i was able to log in without putting any password that is how a classic injection bypass works types of sql injection there are multiple types of sql injections which you should be aware of because depending upon the target and the situation you may have to switch between one type and another there are two major categories of vascular injections first one is inband sql injection and second is inferential scale injection imbalance conjunction occurs when you are able to get the response from the website it can be some data or it can be some error so think about a database a database containing a lot of paintings you are able to get those paintings depending upon your searches you're searching for painting which has an id of one which has an id of two which has an id of three or you're searching that on the basis of price any painting which is costing less than five thousand dollars any painting which is worth more than twenty thousand dollars depending upon this you'll be getting some data from the database those are data based sql injections there you can use a technique called union based sql injection technique where you will use the union command of sql i know it's being a little confusing don't worry i'll be explaining what is union and how to do that in a whole separate lecture but just understand when you are able to get data from the application you will most probably go with the union based technique the second one is errorbased injection in certain website you might have seen that when you do a search or you click on a button it sometimes throws an error that error is coming because there is some problem in the database and when we are able to take advantage of the errors to inject our sql that is where we use the error based injection techniques again i'll have a separate lecture on this so till now you understood that there are two categories inband sql injections and inferential skill injections in inband you have the database technique called union based injection and the errorbased technique called errorbased injection now coming on the inferential injection in certain cases you will not get the error neither the data there you have to analyze the behavior of the application either you are logging in or you are not logging in it's not throwing any error that password is wrong username is wrong it's not giving you an error it's just letting you log in or you're not able to log in that's where you analyze the behavior am i able to log in that is a true statement is it not allowing me to log in that is a false statement this true and false is called as boolean injection technique similarly you can observe the time taken by the server when you request a page it may take five seconds to open that whole page in certain cases it may take 20 seconds to open the same page that is where you can analyze the time taken by the server to process some requests and that is known as the time based injection techniques so as a recap in inferential we do not rely on data or errors rather than the behavior of the application either we will get true or false behavior which will lead to the boolean injection technique or we'll get some time differentiations which will lead to timebased injection techniques well there even exists a third type of technique which is called as outofband injections the reason i'm not discussing this and we will not even be covering this in the course is that out of band is a very rare situation it is not even applicable in every sql product for an example this normally is found on databases which are from a brand called oracle there is a special package in that called utl underscore http with which we can get the response in our netcat listener so you can set up a netcat listener and you can get response of your queries in your listener it's highly rare situation and will not fit the scope of this course that's the reason we will ignore out of the ban but in a nutshell out of bad skill injections are the injections which do not occur on the application rather in the background they occur somewhere else like a netcat listener being hosted by you so these are the three categories of sql injections and we will be covering the first two in the following lectures in detail union based sql injection well a union based sql injection occurs when we are able to use the union operator to combine the output of two select statements as you can see in the following screen this first image which has some lot of some text and has an author name with a link and actually an image is the result of the website's default code however i was able to create a virtual image which you can see right here which doesn't exist which has a name as the database user instead of the description it has the database itself and instead of the painter name it has the version information of the database so i was able to create a virtual row and extract data to that seems complicated right let me make it easy for you i have two tables in this database first one is login if we see the login table there are three columns id username password ids one username is sagar password is sponsor just wondercore now if i use union operator and i try to combine one two three i will be able to combine another row which has the value one two three let me show you how that works as you can see i just typed select star from login union select one two three and there is certainly another row which has the value one two three this will only work when you are giving the exact number of columns if i try to give only one and two it'll throw an error because the third column will not have a value to put in as you can see when i try to give only select 1 and 2 it says the select statement have a different number of columns so it should always be the same number of columns which are putting here now i can go ahead and extract data instead of three i can put version and i'll throw up the version number instead of one i can put username i'll throw the user instead of one i can put the database i'll throw the database name seems easy right so i can just copy this thing and take it to this website and run it and it will work will it well no it won't it'll throw an error let me show you what you can see it says the select statement has different number of columns you cannot expect them using three number of columns right so they might be using four columns or five columns or six columns there are two ways to find columns first is brute forcing where you can try select one that doesn't works then you can try select one and two that also doesn't work and you can then try select one two three that will also not work but this method may take a lot of time hence we can use an efficient method which is order by clause instead of putting select statement i can put order by and i can say order by 20 and it says unknown column 20 in order clause this means that the number of column is less than 20. if i try 10 now it works which means the number of columns is either 10 or more than 10. so now i know they are in the range of 10 to 20. i can use a middle range which is 15 and that throws an error so unknown column 15 it means our columns are in between the range of 10 and 15. now i can put 13. it still throws an error which means our number of columns is either 10 11 or 12. i can put 11 that works so either 11 or 12. well 12 throws another which means the number of columns in this application are 11 which gives us the output so i can say now select 1 2 3 4 5 6 7 8 9 10 11. now you can see it creates a virtual table but point to understand here is not every column is accessible i can see 7 here i can see 2 here i can see 9 here so i can extract information through column number 7 through column number 2 and through column number 9. these are three columns where i'm getting the information hence i can put my database let's say in column number two in column number seven i can put the user and in column number nine i can put diversion and you can see we were successfully able to find the username the database name and the version can we take it forward of course you can find any information that you like can you find other database yes it depends on how deep you understand sql language so in order to find all the databases there is a special table called information schemas kimata you can find that using this there is a column called schema name in a table called schemata in a database called information schema as you can see here the first database is always information schema which contains this table schemata which has a table column called schema name which has all of these entries so if you query schema name from information schema dot it'll show you all the databases can i take this thing from here and can i put it on the website and now you can see we got first database information schema second database acquired and there are no other entries which means this specific website only has two databases information schema and acquired i can go on and on with multiple examples just to give you one more example on how to find the table names so the query for that will be select table name from information schema.tables where table schema equals x where x is the database which you want to find in this case i found the x where there is just one table called users can i take the same thing and put it on the website of course as you can see i just found the table names the query i used was table name from information schema.table where table schema equals acquired because i wanted to find the tables in the database called acquired and the table names are artists cards k tech feature guest book and so on there is an interesting function that you can use here which is group concat now when you use this function called group can cad and in that i am asking for table name you can see it doesn't gives me a lot of results it just groups all of them together over here painted by artists cats catac feature guest book pictures products users so everything in one line super clean stuff and that's how you do unionbased sql injections errorbased sql injection well an errorbased sql injection occurs when you are able to trigger certain bug in the product which leads to some errors and you have the ability to control those errors to extract data in the following screen you can see that i was able to create an error which is about a duplicate entry in the group key but in this error you can see i was also able to extract the version number of the database the database name and the user of the database this is what an error based skill injection is all about now as i just said this depends on the product and a bug in that product you can see that this version is 5.1.7 let me show you a page here you can see 5.7 so i'm using a much older version on that website however this bug id 82544 this bug is valid in all the latest versions in 2020 as well it was published in 2016 but even after four years this has not been patched and looking at the history i don't think so it's going to be patched soon so the bug is about a duplicate entry in the group key while doing a group by clause if you go ahead and scroll down you will see that you can create this error by selecting something counting it concatenating the stuff with rand function concatenating with floor function from certain table and grouping it by some value sounds complicated right don't worry i'll break all of this for you so i'm going to show you all of this in my test environment i do have the following databases i will use x for this specific test there is just one table in this database called users in this specific table there is one column called name and there are three rows sagar alice paul now this error occurs when we are able to associate a random pattern for that the first step is to associate a random value for each of the results to do that we use the rand function as you can see when i select this column which is name it returns three rows but i also selected a random function which is creating three random values in front of these since it is a random function anytime i create this again and again it will create all new values you can see when i type this again all the values have changed if i type it once more all the values have changed again these values are completely generated random and they will range from 0 to 1. the next step to trigger this bug is to control the output of the random function but i just told you it's completely random you can use a seed value here i will put a seed value like zero now once i put a seed value the result will always be same this is what comes when i run it once this is what comes when i run it twice this is what comes when i write thrice you can see all the times it's generating the same three values now the next step is to create a duplicate entry but my question is do you think this number has any probability to come on this place or on this place these are billions of combinations so the probability of this is almost impossible for that we will use a rounding function let me tell you how that works so in the following example i just added a round function on top of our rand function hence it is rounding the values to the closest zero or one and now there is a hundred percent probability that our value will repeat and there will be a duplicate entry since it will always be 0 1 1. it doesn't matter how many times i try this it will always be 0 1 1. you can see it never changes now that we are able to generate random values which are still controlled by us and we know that is going to create 0 1 1 and this one is a duplicate entry of the above one we can use the group by clause now you can see when i use group by and around rand the results are not three but rather two because this bob is also having the value of 1 and alice is also having the value of 1 hence they have been grouped together finally to trigger the bug we just need to put having min 0 and you can see duplicate entry 1 for the key group key that's the bug another approach which the official guide says instead of putting having min you can put count so the count will come here and if i remove the having thing i will still trigger the bug because bug is coming from count now this may sounds interesting that this count is able to create the bug but it's almost useless when using errorbased injections the reason is that most of the times this select something from something statement is locked and we can only modify this part just to give you an example it may be select name from users where name equals sagger and then we can modify the group by round function you can see this is a standard database query select name from users where name equals and we put this name in some search box the problem of this is it is always going to give you one result however we need at least three results for this bug to trigger hence we can put or one equal one to nullify this where statement so think about it select name from users where name equals sagar or one equal one which is always true hence it will select all the names giving the whole table as you can see it dumps the whole table so now we can put our group by rand having min equals zero and this triggers the bug and this is the final output which we want as our payload so i can copy this i can go on this website and you can see it normally takes a parameter called cat when it gives a parameter called cad it comes up with all these images if i give a parameter of cat equals 2 you can see it comes up with only one result so let me try to bypass this one cat equals 2 since we already have or 1 equal 1 this will bypass the situation of cat and it'll give us all the rows in the table and we'll group them by rand function having min equal zero i'll put a comment here to ignore the other stuff and you can see we get the error duplicate entry one key group key this one is the result of our duplicate entry and it's the result of our rand function which is over here so can we use it to extract data of course let me show you that how we can do it now you can see what i just did is i did a select name round rand and then i did a concat version round ran so the output of round round is 0 1 1 which you can see over here 0 1 1 and i concatenated this with the version of the application hence you can see since the origin is constant and round rand is changing we still have a perfect duplicate copy of two and three these are perfect duplicates because the version is constant and this part is changing hence in the same way we can concatenate whatever we want and we can extract data a good example here will be you can see we got the database version then we got x which is the database name as you can see over here then we got a root at the left local host which is the user we can even put spaces in between and this will just make it easier for us to identify that this is one thing this is second and this is third and this is finally the rand so i can just take this whole concatenation string here and put it instead of this round run function and we got the version number the database name and the user at direct localhost that is how error based sql injection works and this is how we exfiltrate data through errorbased sql injections boolean based sql injection well a boolean is a situation of zero or one which is false or true there will be many cases where you will find these kind of situations it can be a simple login page if your password is correct you will log in if it's wrong you will not so it's 1 or 0 or 0 or 1. in this specific example you can see if i try this specific command which is cat equals to and database equals acquired so i am putting a condition here this application may be taking select star from something where cath equals 2 which should give me this image what i'm saying and database is equal to acquired so i'm giving it a database name if my database name is correct this application will show me the result as you can see over here however if i change this aqua to account 1 which is not the database name it will not show me the result as you can see this is where the boolean injection can be used to get data now how do you get data out of it you can put a lot of conditions here and you can use patterns like like pattern length pattern substring let me show you with examples here i have this table called login this table has an entry which is id1 username sagar and password bunsel now a standard query will be select start from login where id equals 1 and this will throw the table if we say id equals 2 which doesn't exist in the database it'll say empty set which means it will not show me anything so instead of putting id 2 i can say id1 and i know that the statement is true and i can say and database equal sbba which is the name of this specific database and since the statement is true you can see we get the result i can get the result even if the statement of first parameter is wrong if it is where id equals 2 i can use the command or instead of putting and so select star from login where id equals to or database equals spva now database is equal to spva for every single of them hence it shows us the same table so if the statement is false you can use or to get the data if the statement is true you can use and to get the data but the question is how do you get the data how do you know that the database name is sbva it's pretty simple you can use the length function to find the length first of all so i can say select star from login where id equals to or length of the database is equal to one and it says empty set i can try two it again says empty set i can try three it against his empty set but when i try four it gives me the result this tells me that the length of the database is 4. now we have to see what is the first character in this length for that we can use substring we can say select star from login with id equals to or substring of the database function check the first character and only check one character and see if it is a however if we are checking one character and if you are checking the first character it is not a it is s because the database name is sbba if i check s here you can see we get the result so you can brute force from a to z by putting this kind of pattern also you can check for the second character by replacing the first one this will not give me any result but if i change this s to b this time it gives me the result so the first character is s and the second character is p similarly i can try for the third character which is v and i can try for the fourth character which will give me a result on a i can even try combinations so instead of just one character i can try two characters at the same time i'm going to try two characters starting from first which is s and b you can see it gives me the result i can try from second character two characters which should be b and a in sbva so b and a if i try s b it won't give me the result but if i try b and a i'll give me the result well that doesn't works because it is not ba it is bv and you can see sbva i can try the whole database itself by putting one and four which means start from first character and select four characters in the string which is sbva and that gives me the output i can even use the like function here to speed up the process you can see in this command i'm using select stuff on login where id equals 2 or database like percent a percent now what this percent means it's a wild card it means check if there is a in the database name it can be at any place so any places before it any places after it you're just checking that i can say check a b that certainly isn't works but if i check v a that gives me the output because s b v a are the last terms i can remove the first percentage if i need to we will make it va but we will not get any result because we are saying see if the database is like va and then something which is wrong because the database is like sbva not va something it's not v a n v a b it's sbba instead i can do is i can replace the last percentage and i can say check if database is like something which ends with va and this gives me the result and that is how you can use the like function to find stuff i can even say s underscore va which means i don't know what will be there in between this but there is just one character which should give me the result or i can just put a percentage when i don't know the number of characters which should again give me the result it's all about pattern matching let's try to do the same thing on the website so cath equals 2 and because we know that cat statement is true the length of the database as 1 which is not true and we don't get any output length of database has two doesn't works length has four doesn't work length has six certainly works because the database name is acquired a c u a r t which is six characters and in this way you can go ahead and try a lot of combinations and try to extract data bit by bit using boolean based sql injections timebased sql injections well there will be certain cases where you will not be able to see any output on the screen it will be the screen which is same in case of a valid statement or an invalid statement in certain cases instead of looking at the output we can look at the time which the server takes to process the request or to send the response in the following case i am trying to ask the server that check if the database name is acquired if it is then sleep for 10 seconds so if i press enter i don't get anything on my screen but you can see the server is taking 10 seconds to give me the response it's sleeping right now and after 10 seconds it'll send some response to me which is again the same page so on my response nothing changes but it took complete 10 seconds to show me the page instead if i just put some random name here it'll not take more than two seconds to give me the response that is where i can justify if the statement is true or false just by looking at how much time the server is taking to give me the result just to make it simpler for you i'm going to show you a few examples there is a table called users and you can see in this table there are three users sagar alice and bob however let us assume that we do not have the ability to play with these users every time the output is just these three users what can we do in such case we can use sleep statement by combining it with and select start from users and if and here you will put your sleep statements however please note this depends on product to product in case of this database which is a mariadb implementation of mysql the function works in condition comma true comma false which means you put your condition if the condition is true then this will happen if the condition is false that this will happen so if the condition is false sleep for five seconds if the condition is true sleep for two seconds and the condition is database equals a if i try to run this it throws an error and the error occurs because there is no logical condition in this you see to use time based injections you need a logical condition like where which you cannot control so if the application instead of this is using where name equals sagger now the application is checking for a logic select star from users very name equals sagar this is something which the application is checking it's a logic condition and then we are putting and also check if database equals a then sleep for 2 seconds or 5 seconds this will work and you can see the database is sleeping but how much 2 or 5. you can see it slept for 5 seconds which means database name is not a because it is x so can i show you with the x of course when i do it with the correct database name it sleeps only for 2.002 seconds two seconds because of the sleep function zero zero two seconds to process the request again five seconds because of the sleep function 0.009 seconds to process the request similarly we can use different patterns like length and now we are comparing if the length of the database is 1 or not and in this case the length is 1. if we see if the length is true or not it'll say no because it'll sleep for five seconds giving me the confirmation that the length is not equal to two i can even use a greater than sign here so if length is greater than two then sleep for two seconds if not then slip for five seconds as you can see length is not greater than two it is less than two so i can say length is less than 2 and this will sleep only for 2 seconds as you can see so by such techniques you can analyze the time of the database and conclude if a situation is true or false i can even do length calculation here so in this following example i am checking if the length of the database equals 5 then sleep for 5 seconds otherwise sleep for 10 seconds 1 2 and it throws an error let's see what the error is length okay did we did some mistake yes we forgot to close the lens function so let's close it and let's try now 1 2 3 4 5 6 7 8 9 10 11 12 13 14 and maybe i'm counting too fast and it just comes up with the result and you know i can conclude that that was definitely not five seconds however if i try it with a number of six which is actually the length a c u a r t one two three four five so do we get the output yes we get the output right that is kind of how it works let me go ahead and start a stopwatch instead this should be easy so i'm going to say and do we get the result here here we go we got the result in almost four seconds but still because i started it and it took one second to you know come from browser to stopwatch it took one second over there if i do a wrong statement like five and if i reset that and if i press enter then let's see we got the output in 11.51 seconds and assume it was taking somewhere 12 seconds because i came from the browser to here this was one more second so roughly 12 seconds instead of 10 so that is the processing time it is taking but it is definitely clear that if the request is true it comes somewhere around five if the request is wrong it comes somewhere around 10 because i am giving that in my assumptions right that is how you get to know if it is true or if it is false and just like you use the length function you can use the substring function to calculate the name of the database or to get any kind of information from this database it all depends on how well you understand sql but that is how the timebased sql injections work using semiautomated tools for sql injection well there will be certain situations which will be humanly impossible for you to test thousands and thousands of payloads with think about a login page if you're bypassing a login page and they have used certain filters it will not be easy for you to try all the possible combinations that is where semiautomated tools come into the picture again remember these are just semiautomated they are not fully automated you still need to understand why a skill injection occurs where do they occur how do they occur and what is the reasoning behind everything and accordingly you can use them to automate the heavy lifting one of the tools which i personally like is called burp suite there are alternatives like os zap however burp swede is a good and reputed tool you can download it from portswigger.net just download the community edition and install it it's available for all the operating systems it's a simple next next next install so i will not cover that part in community edition you cannot save the data so you always have to start a temporary project that's fine with us you can start with the default of verbs that's also okay just started and now verb has started now there are many ways to use it everyone has a preference however in these new versions they have started to make a builtin browser if you go to this proxy you will see there's a browser here open browser this is a chromanium browser and it's a specially configured one because it works with burp suite out of the box now here just make sure you do turn off this intercept because you can see it automatically starts capturing a lot of requests and we don't really need this just turn this off now go to your browser and open whatever you want to open so i'll open my target which is localhost and here i'll go to login and here i'll put certain username and password like sagar as username and mypass as password nicely it doesn't really works of course the password was wrong so we were not able to log in that is fine we can go to burp and if you go to http history you will see all the requests that have passed through burp using this specific browser it may be hard to find that request in these much requests so you can go to the target tab and it's the graphical tree view we are using a localhost and we are using login.php it is interesting that this is not the right request however there is one more login.php which has certain percent 20 in that but this is the right request you can see username equals sagar password equal mypass this is what i typed so this is our request again there are two requests login.php login.php 20 something that is fine with us we can send this request to repeater now you can see the repeater highlights and now you can do whatever you want with this request and send it from here and the response will come over in this window so first of all let me try instead of my pass let me try the right password which is bunzo let's try to send it now let's click on render to see how it works in the browser and we were able to log in as you can see login if i use a wrong password we're still able to log in which is interesting the reason behind that is because this website uses cookies once you're logged in the next request which you send doesn't matter is because you have never pressed this logout button so instead of pressing the logout button which is practically not possible since it's just the response i can go ahead and remove this cookie at all once there is no cookie the website doesn't recognize me that i am logged in or not it just processes the request let's try again now i can see i'm not logged in if i type the right password if i press send i am logged in if i again type the wrong password i am not logged in though the request is working fine however i would suggest that you remove these additional characters from it it doesn't really matters and it won't affect your testing but the file name is login.php not login.php and these characters so due to some processing it certainly picks up these characters in the request that is fine you can safely remove them and now this is a perfect post request going to login.php using http 1.1 again if you didn't know this if you didn't remove that still the request is working fine and you can use it but i like to be a professional now we know that this request is working so instead of using the right password and username i'm just going to give a invalid username and a invalid password again let's send it once more to confirm it's working fine now we can send this thing to intruder so send to intruder you see the intruder tab highlights i'll go here and it tells me what are you attacking i am attacking localhost that's correct on port 80 that's correct because i'm not using https if i'm using https then i have to put port 443 here or some other port depending on the configurations but since i'm using http so i'll make sure this is untick here now let's go to positions and the great thing about burp is it automatically positions everything you see these things are marked in green and they have been positioned automatically that's the auto mode of burp suite you see the auto here however in certain cases you may want to add something like if i want to add a position myself where i want to do a sql injection i may want to go ahead and select this and i'll say add here and now this is also marked as a position i can clear all of these by pressing the clear button and i can again just say auto to automatically select the right positions which perhaps we does very well there are four modes sniper battery ram pitch fork and cluster bomb all of them have different purposes sniper for instead will try two payloads right it's trying payload number one here which will be my sql injection code here and then my code over here but sniper will do that one by one so for example it will try mysql injection here and keep the password as bansa whatever we have given in the input in the request so it will only change one payload at a time then once that works it will keep this as it is and it will change the password which is the payload two so it will change payload one keep the second as it is then it will keep the first as it is and change the payload to so it's one by one that is what sniper is again all of these four have different purposes battery ram uses both of them together so if i use battery ram it will change both of the payloads at the same time you can study more about this on ports bigger website is irrelevant for this lesson i'll just go with sniper in payloads you can select the position since sniper uses just one position you can use one and there are single list and other stuff here one of them is brute forcer where you can specify a brute forcing combination we can specify a character list minimum length and maximum length but we are not brute forcing a password right technically we are but not through a brute forcer we are doing it through sql injections so instead let's go with a simple list and you can load a list of test cases or you can add a list here now i already have a list so i'll click on load and then load my payloads and you see we have certain payloads in this list you can create your own list that's just a txt file or you can just go ahead and add something like here i can just click on add and that will add it to the list but i'll just stick with my list which i just loaded now there are 10 payloads in my list and since sniper uses one payload at a time for both of the positions there will be 20 requests and 21 to be precise because it will even generate a baseline request which will be using both of the parameters that we provided so it will just go ahead and send this request as it is that will be the baseline request you can go ahead and click on start attack and it gives you the warning it's the free version the community one it will be slow that's fine we just have 21 requests now you can see the first one is always the baseline request there is no position used it's like the blank request you see the one which we give and then there are all the payloads that it has tried for the position one it has tried this then for the position to let us try this over here but how do you define which one worked and which one didn't well you may go ahead and see what is the difference in these requests all of them are having the same response code i don't see any error or timeouts but here in length you see all of the lengths are different you can go ahead and click on response and render and you can see what was the response of the request none of these worked however if we see these four thousands you see it has worked so now these four thousand requests are all working but there is much cleaner way to do that i'll just close this and instead there is fourth tab here which is options i'll click on this and options there are many but you can set this grep match option just clear all of these make sure this flag is ticked and add something like welcome press add and now it is set the reason i have added welcome is i want to flag all those requests which have the word welcome so basically when i start this attack now you will see it'll start flagging the requests which have the word welcome just like this one and this one and this one now once the attack is finished which just happened i can go ahead and filter it with the flags so all of these four requests are the one which are resulting in a successful sql injection i can see if i give it a response and render and render this is the word which i just filtered for when there is successful login it says welcome back so i just flagged any response which has welcome word in it that is why we are getting these flags and now you know that these four payloads will work for your sql injections that is how you use semiautomated tools to uplift the hard work and do sql injections using fully automated tools for sql injections well there are certain cases when you have to test an application which has thousands and thousands of pages even semiautomated tools cannot work for you in those cases you may want to run some fully automated tools just like sql map you can go to sqlmap.org and download the zip file once you have the file extract it to any location you want in my case i have extracted this file on my c drive directly here you can see a folder sql map and there are all the files which you get in this zip which you just downloaded now just go ahead open the command prompt or a terminal in case of unix in the same folder and now you can just type python sqlmap dot py since i am using python command make sure python is already installed in your system if not go on google download python and install that you can even do that from microsoft store in case of windows so i assume you can do that let's press enter and you will see it loads sql map and then gives me an error missing mandatory options dulmrgc and all the other stuff that's all fine just click enter and now instead of sql map just give it an option called dash hh which is extended help as soon as you press that you will see a lot a lot of options which you can use in a skill map to do fully automated sql injections the first one which you need to understand is of course the url there are a lot of options right there you go dash u dash url to give a specific target then the second which you need to understand a minimum one is the risk level where you see the level level of tests to perform one to five and default is one when you want to do complete testing you would use the level five not level one the reason of having these levels is that maybe we just want to test something in a low level and we have a low bandwidth on our database so if we use all the tests we may crash the database same thing applies to risk when you want to keep the risk of crashing the database corrupting the tables and and even getting caught while doing a pen test you don't want to do all of that keep it on one however you can increase it on three if it is a crystal ball test just like we are doing right now there are many other options you can even choose the technique which is dash test technique and you can choose between all the techniques like a boolean based injection error based injection union based injection etc etc other options are also here you can extract data if you want using database table column user to select the things and dash does dbs dash dash tables dash dash columns and dump to extract the data let me show you an example here in practice so i'll go ahead and use dash u http localhost slash login dot php and i'll give it a risk rating of three and level as 5. let's press enter now you can see you have not declared cookies while server wants to set it on cookie this one so do you want to continue yes that's fine we can take this cookie nice testing sql injection ore based you see boolean based actions are being tested first then once it is done with boolean it will start with some other tests like from union based so it's going to do all the testing for us automatically as testing is the mysql is less than this more than this using boolean and postgresql says testing the version of the database right now it's going to take some time let's leave it till then and you can see it is asking us it is recommended to perform only basic union tests if there is not at least one parameter one potential other technique found do you want to reduce the number of requests well this is going to reduce the number of tests which we are doing by reducing the number of level and in this case i'm going to allow this because i don't want to wait for such a long time when i know there is any skill injection in a real life situation you may not want to allow this and reduce the number of your tests now you can see a skill map ends up with an error saying nothing is injectable it was not able to find any skill injections with our current setup that is fine it happens there are many things which you can do to fix it you can provide it with the fields to inject so if i show you the help again you will see there are certain fields which you can inject by putting dash dash data so let me see where they are here you go dash data you can tell it that go ahead and inject it in this specific field by selecting dash data this can be complicated for some people who do not know html css javascript because you will have to find which field are we injecting the data in in our case we are injecting the data in these fields username and password but you need to know the name of these fields so you may have to inspect the element and you may have to find that in this html or you may want to intercept the request and find it there an easy version will be just use burp suite go ahead and start a temporary project open your proxy start your browser go to localhost go to login and here go ahead and give it something like sagar sagar1 i don't need the browser now i will go to http history or in the target and i'll take this request send it to repeater and i'll just clean this request a little bit because these characters may cause problems so this is login.php request which is taking two parameters this one and this one instead of these parameters press a asterisk sign now once you add this ester is sign this is called sql map payload marking now i can just save this to a file i'll save it in my c drive in my sql map the same directory where i'm running it i'll save it for example any name like request dot txt and this is save i'll close the burp suite i don't need it now and if you go ahead and run this this time instead of giving it a url you can specify the request file you created by dash r request.txt and you can go ahead and give it the levels and risk let's go with the default this time because that will be faster and it'll say custom injection marker found do you want to process it of course that's why we created it and it says redirecting to this do you want to do that yes we want to use http localhost bird at login.php yes that's what we are testing the result is a post request do you want to resend the original post data in the new location yes we want to send the original data in this new location which is login.php okay it looks like the backend database is mysql wow it just found that right do you want to skip testing payloads for specific other databases of course we don't want to test others because if it is mysql then yes let's just test for mysql for the remaining test do you want to include all the tests for mysql extending the level one and the risk one well you can do that in this case i'm skipping it to make sure we complete this lecture on time let's see if it gets us the result this time now you can see over here custom post parameter number one so the number one marker which we put in the user name it is testing that right now and it says post parameter number one is vulnerable you want to keep testing others you know in the life situation you can test it and the second parameter is also vulnerable in our case but i'm going to skip it right now because i found a one parameter so that's all good now these were the payloads that it has used for number one you can see user name and then a single quotes and then select something something something we are something sub select something from sub select count it's a long payload i don't think i would be ever able to write this kind of complex payload from my hand and that's where the automated s conjections really stands out you can copy this as it is and take it and find whatever data you want in the real website or you can use a skill map to do that work for you as well so this time i'll say you know what find me the databases dbs it'll find me the databases this time and say do you want to use the marker yes i want to use the marker and we gotta redirect that's fine yes use the data and now it'll just give me the databases because it knows that the first parameter is vulnerable it has already saved all the data and here are all the databases i can find let's see i can select the database sbba and i can find the tables again yes yes yes and you see we got the tables and these are the payloads that it is using starting from here ending here again super complex stuff i cannot write that now let's select the table let's say login and let's say you can find the columns but i'll just dump it as it is so yes yes yes and here we go we just dumped the whole table as it does instead of finding one column at a time item the whole table if you want to find the columns also you could have done that by pushing dash dash columns and then it'll just you know go ahead and find each column for you okay invalid character columns there you go now it finds the columns and you can select a column and dump that so you know really depends like dash c and you know like id and dash dash dump so in this case it'll only dump the column or you can just dump the whole table by just ignoring this column thing and just say dump over here itself so it really depends you know if the table is too big you may want to do column wise and here this will only dump the first column as i said but again you can always dump the whole table no need to dump column wise if you know that the table is small so that is how you use sql map to do automated sql injections defending sql injections is not an easy task that is the reason this old technique is still prevalent in the market there are so many websites which daily get attacked due to a skill injection there are many methods to do that most of the security practitioners will go with code sanitization which will include things like input validation parameterized queries stored procedures escaping avoiding administrative privileges those kind of secure coding practices since this is not a coding course i will not cover how all of these actually works i can give you a reference to ptsecurity.com and they have a really good guide explaining how to securely code all of these things which i just mentioned you can see input validation they talk about it and the code which you have to put and how do you have to put that parameterized queries the code and how you have to put that however i will tell you my specific approach which is also one of the best industry practices instead of just focusing on the code and focusing on the development side you should focus on a multilayer defense now the multilayer defense works in minimum of three different layers the first layer of course is the one which you see right now which is the code all of these techniques you put that you do secure recording that is your multilayer defense layer one secure coding practices layer two is including a web application firewall this is a vaf which runs on wordpress cms you can scroll down and i'll show you all the available attacks which you are defending against in my case sql injection is set on enable mode so this valve is going to stop any sql injection attack that occurs on my website let me show you my logs which will reveal a lot of ips who have been attacking my site every single second you can see there are number of ips and this is the current date and i believe it's like eight minutes ago someone got blocked 10 minutes ago someone got blocked 10 minutes ago 12 minutes ago 14 minutes ago this happens when you have a huge website and actually a network of websites just like mine so all of these are being blocked due to certain reasons and the vaf is protecting that well that's your second layer of defense the third layer of defense is having a vaf placed on the edge which is normally the dns in this case i use cloudflare on cloudflare you can add a new site by clicking on this button and configuring the dns and in this i will open my site here i can go on firewall and i can go and manage rules now again this web application firewall is a paid product it's not available in the free version but i'm still showing you because that's how you have to do it in the real industry i can go ahead and see these rule sets and you can see i have selected some of them which applies on me so because my website runs on php i have applied this rule and you can see over here all of these rules are being protected against then i have applied wordpress specific configurations which are all of these rules being applied on my website similarly there are flash rules and there are other stuffs as well you can see it goes on and on and on this is how you protect a device in a multilayer defense there are many more layers you can add you can add an intrusion detection system intrusion prevention system an application delivery controller a security orchestration automation response system a managed monitor automation response system and much more depending upon how much your organization is ready to spend and what level of security you are looking for let me show you an example i'm going to go on my website and go to the search and i will search sagar quotes or one equals one and comment and let's see what happens here you go i just got blocked by cloudflare which is sitting on the edge side of my server it doesn't even crosses this layer let's say someone was able to bypass this they will have to face word fence and if they were able to bypass that then my secure coding will stop the attacks so i may even survive an attack where my code is vulnerable but if i have the right security devices placed then also majority of hackers won't be able to exploit anything and that is how you protect against sql injection attacks you