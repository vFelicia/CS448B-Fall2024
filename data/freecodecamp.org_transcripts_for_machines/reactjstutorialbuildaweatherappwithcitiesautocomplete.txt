in this course you will learn how to build a weather application using react and the open weather api with locations that autocomplete you will learn how to use two apis to get and display the weather for anywhere in the world slobodan teaches this course he is a senior frontend developer and experienced course creator make sure to leave a comment with something you learn in this course let's jump right in let me share my screen okay first uh i want to explain where you can get the api keys for both of these apis and what you need to install what you need to register first for because under my previous tutorials there were a couple of apis tutorials where you guys were struggling to find api keys so the first one that we want to use is on the rapid api website the links will be in the description so don't worry about that you need to to create account here on this website and go to the to this uh specific api the link is going to be in the description again and you need to subscribe to to this api in order to test it once you subscribe to it you can choose what what you want to test so you can click on the cities because we will need the series for our web application then you can choose what code you want to be generated for you you can i i choose javascript and fetch so you get the fetch method here and you get the options uh parameters which are required so the first one is the key and here you get the generated key which is for your account and the host and then the the full url and how you retrieve and map the data so it's really useful here are all the parameters that you can use optional ones and the required ones so yeah it's very useful so this is the first api the second one is the the actual uh weather api so you need to go open weather website link again in the description you need to sign up here everything is free you don't have to pay for anything so just go to your account you can click on your account here and you can go to my services to check what apis you have available for free and you can go and open api keys and here you can get your api key please register for your account and use my mine probably i'm going to blur this anyways but yeah you should use your api key now that now we can go and create our application so these are the things that you need to do beforehand so i open up the d drive and here i'm going to create our react application so run the command mpx create react react app and name of the application uh let's name it react weather app weather app and this is going to take a couple of minutes to finish so uh stay around with me and finally our application has been installed and created so we can open that in your editor of choice for me it's visual studio code it's in on drive d dev folder react feather app that one select formula uh first i want to install two packages that will need in order to create this application the first one is the accordion that we need for the days forecast so npm install react uh accessible accord accordion that's the name of it okay added one package there are some warnings but you can ignore that the second one is npm install react uh select async paginate uh this one this one has some warning issues or compatibility issues actually because it's optimized for the older version of react it's going to be updated eventually i try this library it works uh as expected so but don't worry if you get the warnings and you will most likely if you if you're installing this on your new versions of react just use the force flag in order to be able to install it but don't worry yeah you can use other this is like a wrapper library for react react select package it gives you some additional options so that's why i'm using this and that's it now we can npm run start and start start our application it starts the development server localhost 3000 and we have our application up and running that's nice okay so the first thing is first to explain you what we are going to have on this website on these applications we will have three components the first one is going to be search on very top and we have two widgets one is for the current weather and the second one or the third one is for the forecast so let's create a new folder here new folder and name it components components cool and the first one let's build the search new folder call it search okay and in the search let's add new file search.js okay so this is going to be a component that is going to be using the async paginate package that we just installed okay so create const search and let's just create a dummy component to integrate it so return hello and export default search okay and we can use this component inside of our address component let's remove this boilerplate code and we need to import our search component let's remove the logo so import search component here okay and we have our hello okay nice so i want to add some of the global styles to to our application so let's create a container here for the class name container and i just want to add some maximum width so it's not full width of the of the window so i can go to app.css remove all this boilerplate code and just add the container container and add max width of 1080. and add a margin so it's centered so margin is uh 20 pixels and auto so top and bottom 20 pixels left and right auto so it centers the the container okay nice now i want to add couple of global files so global styles so that we don't have to worry about that later so for the font family i want to remove this default one and let's add roboto and there's a fallback ariel and set that as important also i want to add a background color i don't want i don't like the white one so use the uh d d5 uh d4 d4 yes that's the one let's just preview that nice okay this looks like it's cloudy okay so we can proceed to build our search component so let's close the app index everything so inside of the of this search let's import the only component that we're going to use which is asympaginate so async page this is the name of the component and this component is going to have couple parameters so first one let's put the placeholder the placeholder is going to be search for city because we want to search for cities to show to display the weather for it now the second parameter is the bounce time uh we don't want to fetch the api uh and call the back and every time that we press the key so we want i mean we want but you know if somebody's pressing very fast it's gonna send a bunch of requests so here we are adding some d bounds for 600 milliseconds then for the value we're gonna add search but we will create the search variable using geostate hook so const search and set search this is for updating that variable set search okay and we'll use use statehook for it okay and the initial state of this variable is going to be null okay then on on change method we want to update this value and we want to emit that to the parent to the app.js where we will fetch you know the weather weather data and pass that to two other two widgets so on change we'll call candle on change okay let's create that one okay console on change this will retrieve search data the data that we entered into as inpaginate component and what we want to do this is going to be very simple we will use the set search method to update our search and we will use search data for it and then we will we will have the the event the function actually which which is passed from the parent component let's call it uh on search change and we will just call that and pass the data that we got from the input okay cool now what we need to do is we need to go and to add that that event so go to app.js and on the search add the on search change and add the handle on search change okay so this can be static right now so we don't we can implement that later so just add const candle on search change and it will receive search data it needs to be fed error function okay and just we can just close a log that for now okay search data okay cool we can continue implementing the things that yeah so as you can see we have built already uh this uh this autocomplete search but it doesn't work because we haven't implemented anything yet so what you need to do is when we start searching we need to fetch the fetch the data and how we can do that is uh we first okay so how we do that is let me see uh we need to call uh the method for loading the options so here we have an additional load options property and because we are adding because we are loading the the properties for the input uh through async request so we don't have anything downloaded uh previously and we when we type in some some characters like for example we are searching for london we type in lond and then it's searching this api to find all the cities with that prefix so we need to code that so the name of the of the method is going to be load options and now let's create a const the name of the method is load options and this one it will retrieve the input value so this is the value that we are typing into the input and we will use that value to pass into the to the fetch method to the url and to get the data okay uh so this is the this is the uh this is the api that we use to search the cities so here what we can do is we can go and copy copy all this uh code and paste into our application but let's create a additional file for this we don't want to store it inside of this search component so let's place it in the source folder new file and call it api.js like like so okay so what we can do is we can just copy the options and the fetch method and we will extract the url so inside of the api let's export the options and call the options as geo api api options so what is inside of these options is the method that we use for the fetch and like i said uh in the headers there is a key and host so the key is the one that you need to get into your account and the host is uh same for for for this api for everybody now we can what we can do is we can create a constant export const geo api url and use this one schwann geo and paste it here okay now we can use this fetch we can save this file go to search and now we can use that to fetch so what we need to do is we need to return new fetch and we can import now the url so this url and we can import the geoapi options so import from from api okay from api and we need to import uh url and geoapi options so these are the parameters that we need to pass into the fetch method okay so here i can add the backticks so it's easier to to implement the variables so first is the api url then we use cities and then what i want to do is if you go to to the api itself and if you check the parameters you have the mean population parameter which is optional but with this parameter we can limit and filter out the small places if you're going to search for bigger cities you can enter like a million uh people in in the city and it will give us much better search so that's something which i'm which i'm which i want to do so set the mean population to a million users 90 users million uh million population okay and then we want to add a name prefix so for this one we want to enter whatever we get from this search change so okay actually from this input value let me format document so it's nice and okay so that's it series we get the mean population the name prefix okay and once we get the fetch then we want to map our response to the json because we get the uh we don't get the mapped when we're using fetch we don't get mapped right away using the json and then we're just logging out response and we can see what we get uh later on we can map this uh to to to match the format that we need for the async paginate component so let's test it out if i open up our app okay let's see option is not defined yes because we haven't implemented the options here okay these are the options again these are the options for the fetch method cool and now if i open up the console okay if i type in belgrade let's say uh we get the data but we also get some errors let me just see one one at a time so we get the data the actual data uh yeah okay this is the initial data uh let me see what is the error a load option should be an object with an options prop okay yeah the issue with this is uh that we are not providing the correct format to the to this input so that's why it's giving the error and it's giving us this loader but if i check the network i can see that the fetch is actually actually successful so we fetch let's see the headers in the headers we said we said uh this is the url prefix is belgrade and for the pale for the preview if i open the data we got two results and the first one is belgrade serbia and the second one is belgrade district so it works but the format for this input is not correct so let let us fix that the format that it requires is an object array array of objects with the value and label properties so inside of this second then we can format that so return an object which actually has an options parameter and this options parameter needs to have a array of objects so we will use response.data and we can map that okay we don't need a semicolon so what we get here is name of the location or city however you want to call it city and then we will return an object here we will have a value and a label and for the value what we need we need latitude and longitude in order to implement the weather api let me show you so if i go to to the services and for the apis let me just show you what is the required uh for the current feather let's say if we check the api call we need to pass in the api key the one that we got when we registered and we need to pass the latitude and long longitude so these two parameters we get from the geo api so that's why we need to store let me close that so that's why we need to store the value of latitude and longitude and we get that if i open up the console again and open up the network tab again let's type in belgrade let me open up uh you have exceeded the limit per second okay i have basic plans so you need sometimes to type in slower build grade let's let's type in again okay let me refresh now let me open up the network okay now we got it because i'm on free plan so it's limited you cannot send unlimited number of requests per minute but if we open up uh this data we can see that latitude and long longitude we have these parameters so let's let's copy them so for the value we got the we can use backticks and we will use city dot latitude and add a space and the second one is city city dot longitude it's hard to pronounce for me okay so and later on we can extract this from this value and the label is something that user can see or you whoever is using the application so again use the backticks and use the city let's use the city dot we can use the name of the city so here belgrade and the country code city dot name comma city.country code okay see and that should be now correct format let me format the document okay let's try now let me clear the console if i type in belgrade it's searching let me refresh again and as you can see finally we get the name of the city and the code of the country so if we select that uh we have selected the first value and as you can see on our in our code we are calling the on change unchanged we are calling the handle on change we are passing the data we are setting the new value and then we are calling the answer change which has been passed from the app.js file and that method is just logging out the the the value that we're getting here so that's pretty much what we wanted to to get from from the search just to get the latitude and long longitude from uh from the cities that we want now we can create new applica a new component and the first one can be the current feather so we'll have like i said two two components two widgets the first one is gonna show the current feather and the second one is gonna show uh the forecast for uh seven days if available so let's create new components so add new folder name it current current dash weather okay cool and then add a new file current weather dot js and we will have a style file here as well new file current dot css okay now let's import this the style first import current feather.css okay and let's create a dummy component so that we can integrate that into import that inside of the app.js file and start building so const currents rather equals header function and then just export we need to return something here return just hello and then export default export default current weather okay now we can import that into app.js file import current weather from from the components current weather and then just place that component in the return okay so we should get hello yes here it is so here uh we will use a little bit of css in order to style this nicely but stick around with me if you if you hate styling you you probably shouldn't be doing a front end so yeah there's going to be more a little bit more of css so let's remove uh hello so this is basically going to be like a box small box and it will just display uh the you know the details for the current uh weather so let's add let it div which is going to be a wrapper and add a class name of weather right there okay and here uh we'll have two sections the first one with the temperature and the second one the bottom one uh with other details so add a div on top and that one will have class name exactly like that top okay so here on top you will have uh two paragraphs actually two paragraphs the first one you'll have the name of the city let's call it let's build now static and then we can implement the api belgrade and description sunny and let's add the classes as well so let's have the class name for city and a class name for weather description okay and then on the right side we will have an image that will represent what is the uh the weather like so it's nice and it has nice graphical representation so let's place an image and let's add an alt weather you need to to be careful about the accessibility add a class name of weather weather icon and for the source uh we need actually uh i have downloaded of icons for for this open weather api and this will be available in the folder along with uh on github with the complete code base so you can download there and follow along with me so and this needs to be included into the public folder so let me do that so for me that's in downloads let me show you it's in downloads so i will copy this folder and go to the public folder open that in file explorer and just paste so this folder contains all the all the states that we have for the weather so it will be available in the github repository so you can download and use this exactly the same ones but you can use different ones as long as you follow the naming convention here you know when when it's sunny it's 0 1 d dot png and so on so we can use that one for a static one okay so the source is icon icons slash 01d dot png okay okay let me see and yes we got that cool and i think i think that's it so we get we have the name of the city description we have the weather yeah now let's apply some styles to it so let me close all others and let me open up the css so the first one let's add some styles to the weather this is a this is a wrapper so let me just make sure it's spelled correctly okay so add a width of 300 pixels and let me just see if it's connected properly i always like to you know uh to make sure that everything works correctly before i get too far into developing right uh border radius set the border radius to 6 pixels so this should be a nice dark box so set the box let's add a little bit of box shadow so set 10 pixels this is uh these are the parameters for the box shadow minus 2 pixels 20 pixels set here to 2 pixels and set the rgb we want it to be transparent black so 0 0 0 and 30 this is a standard value for the box shadow and you can see it adds a little bit of separation add a color this is going to be a dark dark box so add a color which is white and the background color 333 okay nice let's add a little bit of margin so it's centered margin 20 pixels on top so it's separated from the input and auto on the right side zero on the bottom and the auto on the left side yeah so now it's on the center of the page okay now let's style the the top top of the of the um oh let me just see if like this top actually needs to image needs to be inside of the top so yeah okay and we need to have a div around the paragraphs because i want to use the flexbox in order to you know to align them so use a div or you can use a span whatever you want okay let's format the document cool okay so for top i want to display that as flex display flex justify content space between so they are on the edges and align them in center line center okay okay nice we'll add a little bit of padding here uh on the weather so it's not like that so add a padding and a padding uh zero on top 20 pixels 20 pixels and 20 pixels okay that's more like it okay now let's try style the city that's the name of the class city so for the city let's leave it let's leave it white everything should be white on this dark background so font weight 600 so it's it's bold one size 18 pixels line height set it to one so it's really close to the bottom the bottom description and uh margin reset to zero so it's one next to each other letter spacing set the layer spacing to one pixel okay let's see the result okay that's nice now for the description let me copy paste the class name okay now set the font weight here to be a little bit slimmer so 400 one size this should be smaller supporting pixels 40 pixels line height to be one same as the city and for the margin against that reset it to zero so there is no space on top or the bottom okay so they are next to each other okay uh now let's style the weather icon we just need to set the height i mean the size here so set the width to be 100 pixels 100 pixels and yeah that should do it okay let's now continue on building so let's build now so this is the top part let's build the bottom part bottom actually add a class name of bottom and here add a paragraph with a class name of temperature so this one will uh will be showing the actual temperature so 18 degrees of celsius so i don't have i don't know how to write a degree so degree celsius so so use so let me just google that and copy paste okay i can copy the symbol here okay nice temperature uh then below the temperature i mean next to the temperature on the left side is going to be temperature on the right side there are going to be details so add a div with a class name of details and here let's add div and we will have rows so we will have label and then the value so add a class name of parameter row and inside of the row you will have a label and then we'll have a value so for the first one the very top one we will just have uh the label so span class name parameter label parameter dash label and here we will say say details then create another row in the second row for the label i'm going to create fields like and for the fields like we want to add a value to it so parameter label and the second one is parameter value value and the feels like could be anything like 22 degrees of celsius so let's copy this because i know how you write this character okay let me let me preview that okay nice feels like we need uh we actually uh we will actually separate this this will be styled using the flex so it will be separate right now it looks like it's uh it needs spacing so but let's leave it until we use the css to fix this so now we'll we will just copy paste uh this exact row and add additional fields so what i want to display next so i want to display basically almost all the fields that are necessary that we have available on the open weather api so add a wind and i mean wind can be anything i don't know two meters per second then add another one uh the humidity humidity goes in percentages so i don't know 15 percent add another row and for this one let's add the pressure pressure at a value it goes in pascals i think yeah now what you want to do is we want to style this so let me just see what we have yeah this looks solid but we need to style it looks more much more nicer okay okay so let me first before i proceed for my document i like everything to be nice and nicely formatted okay so here the first one is the uh actually i think we can use the bottom one sorry i i think we can use the bottom styling to apply that to top top styling to apply that to bottom as well because i want it also to be display flex to justify content space between and to line them centrally so yeah and as you can see it looks better so i just want to make this much bigger and this a little bit smaller and separated so let's do that okay the first one is temperature temperature so set the font weight to be bolder 600 font size to be real really large so 7 not 707 to the auto okay a letter spacing minus 5 pixels i want this to be really really dense and margin 10 pixels on top and bottom and the left right to be zero and this is uh this is very noticeable so that's something that you want the first the first thing that that everybody who's looking for the temperature details is looking for uh temperature that's the most important thing so that's why it's the largest here and it's most noticeable okay so for the details i think yeah it's name details set the width to be a hundred percent so to take the rest the rest of the uh the rest of the space and add a little bit of padding to the left side to 20 pixels okay nice now let's start style the rows so the class name is parameter row so we want to display that as well flex and to justify content space between so that we have separation between the labels and the values like that okay now let's style the labels and the values parameter label and for the label align them to left font weight to 400 this is a default just reset that and font size to be a little bit smaller to 12 pixels okay that's much more nicer then for the parameter value okay align them to right right okay font way this one this needs to be a little bit bolder so it's more noticeable the value and the font size to 12 pixels okay that's nice and the last thing is which i want to do is i want to add a little uh border border on the details so on the top one so what about what i can do is i can go to details on top add a class here for this one save that and then what i can do is i can go and add a border bottom two parameter what is the name of it parameter label okay parameter label dot top and border bottom so it's separated one pixel solid white let's see how that looks uh yeah i mean we can remove it we can leave it however we want it but maybe i don't like it so let's remove that let's remove the top i think without the border is much nicer like like so okay so now we have static uh current weather widget now what we want to do is we want to implement the real data and once we select something from this input search we want to see that so let's do that so what we want to do is we want to go into adjacent file and on the address file and start searching here for the data that we have so what we need to do first is we we need to use the search data but if you if you check the console let me see if you check the console we get the object and here we get the label and we get the value so we need to split the value and get the uh we need to get these two values in order to search this is the location value yes let latitude and longitude so what we can do is we can search data dot value and we can split that so split that with the space character and store that in two variables the first one is let me see what we are storing the first one is the latitude and the second one is the long longitude so first one is it's going to be a lat uh latitude and second longitude okay so now we have the values for the location and we need to fetch it so let's check the api to see what is the url so we need to go to open weather api we can go to the current feather and we can just copy the url let me open the app here so because we are gonna fetch the two uh two api calls the first one is going to be for the current feather and the second one is going to be for the forecast we're going to use the promisol in order to fetch the both of these so how we're going to do that so let's create just two fetches and store them into variables and pass that to the array of the promise at all so first one call the current weather patch and use the fetch method and here we need to pass we need to pass the url that we just created so but i think the smarter thing would be to create a constant in our folder for the api and export this so go to api and export const weather api url okay and we will need key as well so let's go take the key go to my api keys and take the key so x export const weather api key okay nice you can save that and now we can use here so we can we need to import that first on top import the driver url from api let me just see oh actually it's in the same folder so it's from api and we need to import the api key api key here okay then instead of this api key we can replace and put our api key weather api key and then instead of this latitude we can put our actual uh variables that we got latitude and longitude and that should form our fetch so first we have the base url then we have the weather then we have latitude longitude and the a uh ape app id actually this is a shorthand work app id and that's the first uh fetch the second one needs to be for the forecast so let's go and take that one so let me open up uh my plan my plans and the second one is the forecast and we can take api call here as well can close this we don't need it anymore and okay let me see and i can paste it here i can use this one to create another variable and this one is going to be uh for forecast fetch and we're fetching the same url uh different is that we are using forecast now instead of the weather everything else is the same okay and now what we can do is we can use promise promise dot all and pass an array of these two so let's pass the first current weather the order is important here because in order that we are sending the promises uh the return is going to be in that same order because we are going to get back the array as well and the second one is going to be a forecast fetch and then inside of then we we need to call async function we will get response here we need to map what you're getting and we'll get in the first one we will get response zero dot json we need to call the json method in order to to map the response so we need to use a weight and store it inside of the variable so use whether no but the response name of the of the constant and we can copy paste that to create a second one but we will use the thus the second or the index one and for that one is going to be forecast response for cast response okay that's cool now what i want to do is uh i want to create uh hooks two hooks to store these two so get a hook named current weather okay i see that i have a typo current widow fat it needs to be fetch fetch and current feather fetch here okay this is the right one okay so current feather and the set current weather set current weather this is the first hook you state okay and that imports use state let me see yeah it implied here and the value of the initial value is going to be now and let's copy paste that the second one is going to be the forecast and the method for updating that variable is going to be set forecast forecast okay now what we can do is we can update once we get the responses and once they are mapped to a json we can update them so set current weather set current weather to the weather response okay and set the forecast to the forecast response the only thing which i want to add i want to extend the data that we're that we are sending and saving here because uh the data that we're getting from the api doesn't contain the label that we're displaying displaying displaying here like abu dhabi ae so we are just getting like the city uh the country sorry so but i want to display exactly the same as it's here so in order to do that we can use the information that we got from geo uh api uh database so and extend our our objects to pass that so what we can do is we can just add a city parameter and use the search data search data dot label and this label is coming from this search here so here we are creating this label where we add a city name and city country code actually country code not city country code but country code code of the country so let's extend it like like so and here just let me use a spread operator to create a new object from from these two and now we have the city for both of these okay and we want to at the end if this fails we want to catch and we want to cancel log okay and that's it uh in order to test if this works let's just log these two variables to see do we get the information that we need so we need to get the current weather and the forecast console.log current weather and console.log forecast okay and let's go and search okay for now it's now let me refresh okay let's type in again belgrade let's select belgrade and as you can see uh we get to get back the first one is from the line 28 which is the current weather so we get the current weather as you can see we get all this feels like feels like humidity temperature and all that and the second one contains the list which is the which is the forecast for the future days so it works correctly okay now what i want to do is i want to pass the data to to our current weather and then display that instead of this dummy data okay so here we can add uh data and pass in for the current feather is going to be this current feather variable and we can check if that exists then show the the widget it doesn't exist don't show anything so so that we are sure that if we are inside of the component that we don't have any errors so we can do this like this so inside of the current feather we need to huh we need to get a data like like so you can save this you can save this and now we can now we should go and uh replace replace the things that we have there so okay let me just format the document before proceed and yeah now we can work so let's first do the top part okay uh for the top part we actually are adding this city uh label which which could be a location but yeah so call it data.city and for the weather description let's check the api we can check the network as well and actually network has been clear cleaned off so for the description let me see it's inside of the weather zero and description broken clouds okay that's the current weather here so go to data dot weather zero dot description okay let's save that up and let's see we have broken clouds even though uh the image is not changed yet so let's change that as well so we get the icon as you can see here which we can use to load the image so here let's add the expression let's add the backticks remove the double double quotes and then instead of this name we want to have this dynamic and this is going to be data dot same as here just the last property is going to be uh icon yeah and now as you can see we get the cloud as well so if we type a different city like london london okay it took some time to you can see that actually london is the same weather as well so let's see miami it's it's nicer there so yeah cool so yeah let's back to belgrade let's implement the rest of the properties so that's uh that completes the top part now we go to details let's open up the bottom part okay for the bottom part first one and most important one is the temperature so what we need to do is go to data dot let me see what was the name of it name and the temperature okay uh i think that one thing so one thing i forgot as you can see uh the units here are not in celsius are in fahrenheit so how you can do that is you can you you can go to the urls and here after the api you can add the units that you want to have so you just you would just add units equals metric and here also units equal metric okay now we should get uh the units in different formats so let's see open up here main temperature okay let me refresh everything okay upgrade open up as you can see it's 21 now we need to round this because we don't want to show it like that so but yeah it's so it's in main and temperature go to data dot main dot temp and i want to use the method round in order to to round that value so use the math.round okay let's see okay that's 21 now and for the details feels like so it's in the same main so basically the same as we did here math.round okay data.main dot feels like just replace the temperature it feels like and that's feels like it's 22. the next one is the wind so data dot let me see where is the data for wind it's here wind.speed data.wind.speed okay it's nice uh for community data dot i think the community is on the main as well yes main humidity the main dot humidity and the last one is pressure i think it's also under domain beta dot mean dot pressure probably pressure that's that's right and if i say that it should give me all the informations okay nice so let's let's test it out so if i go and search for paris i recently been into paris so unfortunately it's broken clouds so let's try barcelona okay i'm trying to find something where is uh sunny but yeah it looks like it's it's cloudy everywhere in europe yeah but you can see it feels like it's 30 so it's updating everything and this looks correctly this looks nice so what we want to do next is we want to uh we want to build the second widget uh if i go to the app.js file here we are we build the search bar we build the current weather and the next thing which which i want to do is i want to build the forecast okay so let's do that let's create new components inside of the components folder new folder name that forecast and add a new file forecast okay actually the file needs to have the js extension shares and i think for this one we will also have a little bit of styles so add new file forecast dot css cool so let's build the dummy component so that we can implement that into api into the app uh component sorry a const forecast and it's just export default for default forecast and just return something like hello okay now import that in the abjs file below the current weather so just call the forecast and import forecast next to the search so import forecast like so let's test if it works yes it works it's here so here in this component we will have a days like and uh accordions and you can click on the accordion on the on the box and it expands and show you the more information more details about a specific date and what are the details of the weather so let me close all the all the other components all the other files and open up a forecast.js file okay so let me remove the hello and here we will use that that accordion component that we installed oops let's remove that at an empty tabs and first thing on top i want to add a label which will say uh daily so daily forecast placement either add a class name of title and add a daily label okay i forgot to add here parentheses okay so and then below that add accordion accordion it auto imports it for me from react accessible accordion on top and uh i want to pass a property which is called allow zero expanded so this one uh allows allows uh all the accordion to be closed if you allow zero expanded so it means basically all according can be closed otherwise one of the accordion needs to be opened up okay uh so for the forecast uh we are already getting the data we can pass that in so here we get the forecast data and we can implement right data right away so we don't have to do the dummy data so what we can do is we can check if the forecast data is there we can pass in the data otherwise don't display that that component and inside of the forecast we will receive the data okay cool now inside of the accordion uh we need to loop through that data to the through the list that we are getting so let me just open up so we are getting the list and these are the days of the forecast and we need to look through these uh days and get the details similar like we are doing here but this is just the forecast you know okay so on the top uh open up the accordion korean item okay so and we want to use the data that we got and loop through the list data.list dot and we want to just display the seven days that's it so use the splice zero seven okay nothing else and we want to map that here we will have item and index because we don't have index for the list and we need to use the index for the keys okay okay so here we need first to add item heading so it's called accordion item heading let me see if it's yeah it's or imports it so the first one we need we need to have the two items inside of the accordion the first one is according item heading and the second one is accordion item panel so this is something that you see when the recording is not collapsed when it's collapsed uh when you click on it you get the expanded part which is uh according item panel so the second one is accordion item panel let me see this one okay heading but we need to have one parent that's what it says so one parent item so we can use the according item as a parent okay here and then we can place these two inside of it okay nice coding item uh but we don't have coding item imported so let me import that uh it should be up imported from the from this one imports so it doesn't have to be separated separately imported so according item is here actually it's not accordion has been imported according item heading according item and according accordion item panel as well okay cool here let me format that okay nice now for the according item we need to add a key and again i'm gonna use the index idx and for the heading we need to place accordion item button that is the name this is required to do you cannot do it without it accordion item button uh item button let me just see okay let me import that as well including item button and then here you can just add a hello just for testing so let me just test it if i have imported everything correctly and there's no errors yes as you can see it's uh it gives us this daily okay i have a typo here used to be daily we have this label and we have uh seven hellos for seven days one two three four five six seven okay nice uh now what what i want to do is i want to create here uh the title basically the the day name and uh the show the the image of a day and show the weather the the temperature the max and minimum temperature and once you expand the accordion you we will show the deplete uh details like like pressure uh and you know wind uh and all the humidity you know and all other properties so here create a div add a class name of daily item okay and then on the left side we'll have an image again add an else with a weather string add a class name icon small and add a source which is the most important one right so uh and the source is going to be again in the icons and it's going to be the same as we did there as we did in the in the current weather so but here we are accessing that from item item let me just open up we can we can reuse some of the code weather zero icon.png okay we can reuse this one so item dot dot weather okay let's save that okay we get the broken image let me just check again icons item icons weather zero and here is the icon okay let me just log to see if we get if you are getting the right data so inside of the weather forecast we have the weather i'm going to actually have the main main and no it's inside of the weather weather and inside of the icon okay and what we are getting see it's 10 and okay maybe you don't have that icon for barcelona let me see 10n uh let me open up the icons we have that actually oh let me see what's happening and let's see what is the url maybe the url is wrong icon stand png okay yeah we have these curly braces curly brace actually so this one that's broken our url okay let's try now again belgrade inside belgrade because belgrade never let us down nice we get the images okay i'll open up the console so we can reference to it the second thing which i want to add i want to add the forecast you know which is the days so add a label and a class name so it it will say friday saturday sunday and so on last class name day and i want to create a array of days so here let's create an array call it a week days and add an array and let's call first monday it is tuesday with wednesday third thursday friday saturday and sunday okay that's nice now we need to first determine what is the day in a week so if we are on wednesday if today is wednesday we want to get the forecast for thursday friday saturday sunday and so on so first create a variable day in a week and we get that by new date dot get day method okay that's cool and then what we want to do is we want to determine day in a week so and get a number so this returns a number so if it's a wednesday it will return like three and then we want to cut off this part the first part and append it concatenate on the on here so we will have uh array with thursday friday saturday sunday monday tuesday wednesday that's what we want to do so how to achieve that is we use weekdays dot slice slice doesn't uh doesn't change the original array and we want to take uh the first the starting point is date we have a typo here day in a week the in a week okay so first uh the starting point is day a week and the second one is the length of this array so weekdays dot land and then we want to concatenate that and use the again weekdays so concatenate the first part weekdays dot slice zero day in a week okay and that that should do it for my document and we can log in you can log that to see if it works so console. but we haven't created variables so create a variable cost of forecast days let's say and assign there and let's log the forecast days so today is thursday so let's see if if it works correctly so friday saturday sunday monday tuesday wednesday thursday so it works correctly so the next day tomorrow is friday yeah happy day okay so now we can implement the days here label day and we can call the array user rate that we just created one that we just created so forecast days and oops forecast days and add the index the index from the from the map okay cool here then let me see how it works how it looks okay friday saturday nice the next one we want to add a description so add another label add a class name of description and here we are accessing that via item dot oh let me see here uh weather description okay here save that okay let's try again let's try abu dhabi okay clear sky we don't have any space separation but this will be style using css so don't worry about that and we will have another label call it min max so it will show the minimum and the maximum temperature for that day and uh let me see how we get the temperature so main.temp this is how we get the temperature so uh so item i mean temp but we need we don't want the temperature just we want minimum and the maximum so let's open the main and we have the minimum is here and let's copy the celsius okay and we want to round that round okay and we want to display maximum as well maximum should be max i think temp max okay okay and again add the celsius here and let's format that again and let's preview that okay yeah now we get the values uh for some reason i see that maximum and minimum are the same values so yeah something is wrong with the api but i guess they will fix that or not but yeah we use the data that we got it's not our fault but yeah you know this is these are the maximum and the minimum values so we get the the icon we get the day we get the description we get the minimum and the maximum value so what i want to do now is i want to style apply some styles so i make this a little bit nicer let open up the forecast.css now let's start first from the style from the title uh how we get pedal close the other files for the title i just want to increase font size set it to 23 pixels and a little bit bolder so font font weight to 700 okay uh it doesn't work because probably we haven't imported the css yes we haven't so import import forecast for cast.css okay okay now it should work oh actually it's in the same directory so okay okay now daily works okay what i want to do next is i want to style uh the first one is the title the second one is daily item okay so let me copy paste that here okay daily item so set the background color to f5 f5 f5 so uh the daily item is going to be uh is going to be like i said the panel uh which shows you the state when it's not clicked when it's not expanded so it's gonna be white almost white but once you expand it's gonna be it's gonna have the same uh it's gonna have transparent background you will see set the border radius to 15 pixels i like border radius set the height of 40 pixels height to 40 pixels margin to 5 pixels so we separate the panels okay much nicer yeah the image is breaking the layout but yeah you can see how the panels are going to be uh displayed align item center yeah but before that we need to create it uh to add a display flags okay uh create a course add a cursor as a pointer so so that the user knows that they need to click set the font size so 14 pixels and add a little bit of padding 5 pixels on top and bottom and 20 pixels on left and right yeah that looks much better okay i don't want to save anything so let me style the icons now so that it's inside of the box so use the icon and set the width to be 40 pixels okay as you can see now it's much better okay so now let me see what's next next is the day so the day in a week so set the color two two one two one two one okay the dark one uh for flex set the one one so what i want uh i want the the name of the day and the description to take the uh the equal amount of uh the space and for the icon and for the temperature to go on the sides so that's why i'm gonna uh set the friday day and the description to one in one flex so it you know spreads around set the font weight to 600 and the margin left to 15 pixels so it's separated from the icon like so so you can see right now it takes all the space but once we set that to the description it will split okay so let's take the description description okay set the flex to 1 1 and let's see and now you can see it takes uh it takes the weight of it flex 1 1 margin right 15 so it's moved on the right and text align to the right okay that's more like it yeah let me just format the document and let's proceed so now let's style the mini max the temperatures i just want to change the color so it's a little bit different nothing else uh color two seven five seven five seven five five okay and this will give this gray color okay cool that's already much nicer okay and let's see i think that completes that now we need to create the accordion panel so this is the part uh once we click on the panel it will expand and show show us the more details so inside of the accordion panel uh let's add a grid so we'll have again like rows and the labels so add a div and call it daily actually give it a class name first class name daily details grid okay cool and inside of it add another deal and this div is gonna have a class name uh daily details uh grid item let's call it like that and here we have two labels one is going to be uh the actual label in the second one is going to be the value so label and this one is going to be the first one is going to be pressure and second one we're gonna display the pressure so we're getting that from item dot uh let me just see item.name.pressure okay main dot pressure okay let me just test this so we're going to re reload page if it doesn't let's click something else so in right now you can see if we expand any of the these collapsible sidebars now sidebars but accordion sorry we get the pressure so let's enter all the rest of the details and let's style them so what i want to add is i can just copy paste discrete items and just change the the labels and the properties so the second one humidity and it's i think it's in the same object okay it's community yes just change the community okay let's copy paste again the next one is clouds so the clouds are in let me see okay they have separate property clouds at all cool okay then the next one is wind speed speed and we can take the wind speed from wind dot speed okay cool items.wind dot speed and it's meter per second is the unit there then the next one is the sea level c level and the sea level is inside of main sea level okay mean dot c level and the units is in in meters so okay meters and let's add another one feels like this one is most important i think so feels like how you feel so it's from maine i think i think it's from maine uh feels like yes and i want to round this round and this one is in celsius so we can remove this we can remove this yeah i don't need that okay let's try now so we can get the pressure humidity the clouds okay clouds yeah clouds going percentage nine dollars percent percentages um pressure also goes goes in past calls i think i'm not sure what is dna for pressure but yeah um pressure here and the humidity uh in percentage as well okay okay now we have all the information that i want but we need we need just to style it so let's again let's let's type in belgrade why not okay all the information feels like sea level wind speed clouds humidity and the pressure okay now let's open up the styles so what is the name of the class that we added a daily detail script let me just copy paste that why not that is the easiest way to do though to do so without making any errors so add a grid row gap zero okay and uh grid column this is the gap obviously between the columns column grid column gap 15 pixels okay so the gap between the the rows is going to be zero and between the columns is going to be you know 15 pixels okay so add a column gap 15. cool display as grid in order this to work right add a flex 1 1 grid template columns to auto auto okay let me see how that looks okay so we have the grid right now and add a little bit of padding padding to five pieces on top and bottom and 15 pixels left and right and add a little bit of uh no for the roll gap that's it row gap should be zero yeah okay now the next one should i think it should be item oh yes daily item so let's copy paste that one and align items to center display as flex set the height to 30 pixels high to 30 pixels and justify content space between space between okay cool let me check how it looks okay we have some separation much nicer and i think that's pretty much it we just want to apply some of the some of these styles uh yeah to the labels so i want this one to be a little bit lighter and this one to be a little bit darker so the labels should be you know lighter and the values should be a little bit darker and that should you know that should do it so how we can do it is we can target it using the first child selector so we're targeting the class name the first child is this label the the last child is this one so so first child and the last child but i mean for the label okay label and for the first child set the color to be again seven five seven five seven five seven five and for this one should be a little bit darker two one two one two one color okay let's add a semicolon there as well and yeah here we have a little bit uh little oh here we go a little bit darker and here a little bit lighter so and i think that completes let me just a formatted document format this one as well and let's review what we got and what we built so if i refresh the application let me close the console what you can do is obviously remove the all the console logs you don't want to to leave that so right now we can search for the city once we load the page you don't you don't get any of the widgets because we don't have any information uh if you search belgrade because belgrade is the closest city to me we get details on very top like we like we built on the first component and the second one we get the forecast for the friday saturday for the seven days ahead and if you click on the on the accordion it gets expanded and we get the additional information so we can open up all the accordions depending on the day which we want to see the information then if you want to check for another city let's say we want to fly to the paris and we want to see what's where they're going to be like there and boom it gets up updated right away so we can see that he's going to be very cloudy in next day for the paris and that's it that sums up we built this awesome application i hope you guys enjoy it it took quite some time to develop this and i hope you enjoyed it like i said and you learned a couple of things here and there so yeah that's it well that's all for this react video thanks for stopping by and don't forget to subscribe code with slova thank you for watching the entire video to see more react tutorials click here you