learn how to build a sales management application in this comprehensive sync fusion course from gavin lawn gavin has decades of experience that he brings to his courses and think fusion provided a grant that made this course possible hi i'm gavin lon i've been developing software professionally for over 20 years and i'm especially excited to bring you this free course where we are going to use the sophisticated sync fusion components and we are going to build a blazer server application on net six the components are highly customizable and are finetuned for performance when dealing with high volumes of data so please join me as we develop a blazer application where we'll integrate the sophisticated syncfusion components into our application and we'll also integrate microsoft identity into our application syncfusion provides a ui component suite for building powerful web desktop and mobile apps essential studio is a software package provided by syncfusion that provides stateoftheart solutions for startups and enterprises it includes more than 1700 components and frameworks for winforms wpf asp.net web forms mvc core uwp win ui xamarin flutter blazer javascript angular vue and react that make developers work easier please join me in this free course where we are going to build a real world sales management application using blazer during this course we are going to integrate some of the most popular syncfusion components in our blazer application like the data grid the list view the charts the diagram the scheduler and more laser is a web framework for building web ui components razer components that can be hosted in different ways razer components can run server side in asp.net core blazer server versus client side in the browser on a web assembly for the application that we are going to develop we are going to use the blazer server hosting model we will first develop the logic for each razor component where we will learn how we are able to harness the power and sophistication of the sync fusion components that we'll integrate into our application through the implementation of minimal amounts of code toward the end of the course we'll integrate login registration authentication and authorization functionality into our blazer server application using microsoft identity when an employee logs on to the sales management application they'll be able to access a personalized dashboard where these beautiful sync fusion charts will be displayed presenting the user with data of relevance to the logged on employee for example a sales manager will see sales metrics related to overall performance for the sales department a team leader will see sales metrics related to the sales performance of each of the team leaders team members the sales rep will see metrics related to the sales reps personal sales performance so if you go through this course with me i can guarantee you you are going to learn a tremendous amount about creating a sophisticated web application using blazer sync fusion components and microsoft identity so let me tell you more about the application that we are going to build using blazer server and the sync fusion components i've created a fictional company that i've named outdoor excellence or oexl for short this company sells outdoor and sporting goods to retail outlets situated around the united states the application is specifically for the sales department that consists of a sales manager team leaders that report to the sales manager and sales reps that report to their team leader the sales reps are on the road most of the time visiting clients and facilitating orders made by the clients for products sold by outdoor excellence our application will provide an ordering facility where a sales rep can for example order multiple products from the outdoor excellence product catalog displayed through our blazer application using the sync fusion list view component the sales rep could for example order multiple products through our application using a mobile device while in a meeting with a client a team leader or the sales manager can view their own personal dashboards and view analytical data displayed using syncfusion charts through our application so bob jones the sales manager could log in for example from his office on his desktop computer and view metrics beautifully displayed to him in the relevant sync fusion charts that have been integrated into our application bob jones can then use these sales metrics for decision making and strategic planning if for example olivia mills a sales rep places a large order through the system bob jones can see in real time the effect that the order has on current sales metrics through his personalized dashboard each sales rep can view their own personal dashboard when they log on to the system custom reports regarding their personal performance is available through the data expressed on these sophisticated charts provided by syncfusion a team leader is interested in the performance of the team leaders team members and is able to log on to the application perhaps at a desktop computer in the team leader's office and can see in real time how each team member is performing these charts communicate at a glance how the team is performing overall as well as how each individual team member is performing relative to the other team members bob jones the sales manager has administrative permissions and is able to perform crud create read update delete operations on employee data this functionality is facilitated using the syncfusion data grid bob jones is also able to view the employee organizational hierarchy of his sales department this display is facilitated through the use of the syncfusion diagram component so through the system bob jones can for example using the syncfusion data grid change which team leader a sales rep reports to and the change is reflected immediately within the syncfusion diagram depicting the employee organizational hierarchy bob can of course also add new employees to the system using this facility you can also change basic information associated with employees like for example changing someone's last name if for example the relevant employee gets married the data grid provides bob with conveniences like for example a search facility sorting functionality for each column and he can also easily export the data displayed on the data grid into other common application formats for example he can export the relevant data to an excel spreadsheet or a pdf document each employee is able to create appointments within the sales management application using this functionality implemented through the integration of the sync fusion scheduler component for example a sales rep can create an appointment in the system to meet a new client at a specific date and time and for a specific duration extra information about the meeting can also be saved for each appointment a team leader for example is able to create appointments within the application for meetings with team members as with all the syncfusion components the scheduler is highly customizable all of the technologies that we'll use to build our sales management application for outdoor excellence can be downloaded free of charge links have been included in the description of this video to the locations of where you can download and install the relevant technologies we'll be using visual studio 2022 community edition for windows as our ide integrated development environment to develop the application we'll develop the application on.net 6. you can download and install visual studio from this location free of charge we'll be using sql server 2019 as our backend storage facility you can download sql server 2019 from this location on occasion we'll be using sql server management studio or ssms to update our data and you are able to download ssms from this location note that even if you don't have a sync fusion license you'll be able to follow along with this course but if you want to use the syncfusion components to develop commercial applications you will need a valid license you are able to claim a free syncfusion community license by clicking this link here and then following the appropriate steps in order to claim your free community license you'll need to have a valid linkedin or zing account the community license allows you to use syncfusion's entire product line free of charge in your commercial applications if you own the intellectual property of the relevant applications the community license is a complimentary license model that is reserved for organizations earning up to 1 million us dollars in revenue and employing fewer than 5 developers if this does not apply to you you will need to get a paid license please navigate to this url to learn more about syncfusion's hasslefree licensing model in order to install the syncfusion components during the development of our application we'll use the new get package manager from within visual studio to download and install the relevant syncfusion packages when we are ready to integrate the relevant syncfusion components into our application although we are developing the application on a windows os our application will be crossplatform and we'll be able to run on most browsers i will be using the chrome browser for running the code interactively through visual studio so let's fire up visual studio 2022 and get started with the development of our sales management blazer application let's click the create new project option here so we can already see the project template we are going to use but visual studio does allow us to filter our project templates if we need to search for a specific project template so for our purposes we are going to select blazer server app let's name our project sales management app and make sure we are saving our project to an appropriate local directory let's click the next button here we have dot net 6 already selected as our version of dot net so we don't have to change the setting for the authentication type we could at this point choose for example individual accounts and at this stage in the development of our project integrate microsoft identity into our application for the purpose of the facilitation of login registration authentication and authorization functionality for now we are going to leave this setting at none and toward the end of the development of our application we'll integrate microsoft identity into our blazer server application we are going to start with the integration of the datagrid syncfusion component into our blazer server application we can use the sophisticated functionality within this component to perform crowd operations paging grouping sorting filtering searching exporting the data displayed in the data grid to an excel spreadsheet and much more so let's install the syncfusion data grid component we can do this by installing the appropriate new get package like this so let's rightclick the dependencies node within our solution explorer window click manage new get packages we can then enter text that will help the search facility find the sync fusion grid nuget package that we can install for a blazer application this package contains the syncfusion data grid component and there it is the package that we want to install syncfusion.blazer.grid so at the time of the creation of this video for this section of the course the latest version of the syncfusion.blazer component is version 20.1.0.58 so let's click the install button and we have successfully installed the syncfusion.blazer.grid new get package excellent if you'd like to read more about getting started with the syncfusion blazer data grid component please navigate to this url where syncfusion provides comprehensive information regarding getting started with the syncfusion blazer datagrid component i will of course also take you through the getting started process step by step in this course we also need to install the syncfusion.laser dot themes new get package so let's do this and the other new get package that we need to install is the syncfusion.blazer.core nuget package excellent so next let's open the program.cs file within our sales management app project and let's include the necessary registration code here for using blazer sync fusion components within our blazer application we have a red squiggly line under add sync fusion blazer to get rid of this let's bring in the syncfusion.blazer namespace great we can register our community sync fusion license using this line of code within the program.cs class like this you will need to of course replace the your license text here with your personal license key note that you will be able to follow along with this course without a license but in order to use the syncfusion products commercially you will need a valid license so next we need to open our underscorelayout.cshtml file that resides within the pages folder we need to add this line of code that references a bootstrap 5 css file and we also need to add this line of code that references a javascript file so we are ready to use the syncfusion blazer datagrid component within our blazer application as stated syncfusion provides comprehensive documentation for example the getting started section of the documentation pertaining to the syncfusion blazer data grid contains the instructions that we have just carried out for the integration of the syncfusion blazer datagrid component on.net 6. instructions regarding other versions of net are also available within the pages directory let's create a new razer component named employeemanagement.razer let's provide routing information at the top of our razer file using the add page directive within this shared directory let's open the nav menu razer component which houses the functionality for our applications main menu the nav menu razer component is provided to us by default through the blazer server app project template let's add a navigation link to our application's main menu that when clicked invokes our employee management razer component and of course now when we run our code interactively through visual studio we are able to invoke the employee management razer component by clicking the appropriate link that we have created within the nav menu razer component let's create a using directive at the top of our file that references the syncfusion.blazer.grids namespace we can now directly reference the types that reside within this namespace within our razor component without flagging a compile time error so let's include the data that we are going to wire up to our syncfusion datagrid component to quickly get started using the datagrid i've prepared a list of employee records that we can include within our razer component in a bit we'll create a sql database through ef core code first migrations and then we'll wire up the relevant data retrieved from the relevant database table to our syncfusion datagrid component let's first create a class named employee model that represents the shape of the data for an employee record to save time i've prepared this class off screen you can either type out the class or to save time you can simply navigate to this url where you can copy the employee model class from the relevant github web page and paste the class into your razer file a link to the relevant github web page is available in the description of this video so the employee model class consists of seven properties id as integer first name as string last name as string job title as string gender as string date of birth as date time and reports to empid as a nullable integer the question mark at the end of the int data type definition denotes that this integer property can store a null value let's declare a private variable to store a generic list that is strongly typed with our employee model userdefined type let's override the blazer builtin lifecycle event handler method named uninitialized this method is invoked when the component is ready to start having received its initial parameters from its parent in the render tree so off screen i've prepared the code for populating our list of employee model data you can copy the code that populates the relevant list of employee records from the relevant github web page as stated a link to this github web page is available below in the description of this video the data consists of made up employee records so now we are ready to create the code for displaying our data to the screen from within our razer component so let's create the bare minimum code we need to achieve this so let's include a syncfusion data grid component within our razor component by adding a sf grid element that represents our data grid here now all we need to do is wire up the data in our employee data list to the sf grid component to do this we can include a property within the sf grid element named datasource and set its value to the variable named employee data that has been assigned the list of employee model data let's run the code and look at that right out of the box our employee data is neatly displayed within our syncfusion datagrid component it is that simple we have achieved this through a tiny amount of code that is both easy to implement and easy to read and the datagrid component adapts its size based on the html element in which it is contained we can include or exclude the properties we want displayed on our data grid by including the grid columns element within the sf grid parent element and then including certain grid column elements within the grid columns element each grid column element represents a property within the class that represents an employee record i.e denoted by the employee model class we can use the field property within each grid column element to map employee model properties to their appropriate grid column element so the data grid will now only include those fields within the relevant data source that have an appropriate grid column element declared as a child element within the grid column's parent element so you can already get a feel for how easy it is to customize the sync fusion data grid we can set the width of each column by adjusting the width property of the relevant grid column element we can then customize the heading text for each column by appropriately including a header text property within the relevant grid column elements excellent we can customize our sync fusion datagrid component so that the data displayed is displayed over a number of pages to achieve this we simply set the sf grid elements allow paging property to true and include a reference to the grid page settings element within the sf grid element like this we can then assign a value representing the number of rows per page we want displayed within our data grid by assigning the relevant value to the page size property like this so we are telling the syncfusion data grid as it were that we want to display five rows of data per page on our data grid the sophisticated functionality is created with a few lines of declarative code that is innately easy to read to customize the maximum amount of rows we want displayed on each page it is as simple as appropriately assigning our custom page size value to the relevant page size property excellent if we had for example thousands of rows of data we would definitely need a way to search the relevant data we just need to tell the syncfusion data grid component as it were to include search functionality in order to achieve this we simply create a list which contains the string value of search so let's create a private variable named toolbar then assign the private variable a list of objects of course a string is an object so we can include a list item that is the string value search we can then let the datagrid component know as it were what functionality we wish to include on the datagrids toolbar to do this we can assign our list of objects stored in our toolbar variable to a property named toolbar within the sf grid element it's that simple we now have search functionality excellent if we want to allow the user the ability to group by any column all we need to do is set the allow grouping property within the sf grid element to true in order to group by a particular field the user can simply drag the column header that represents the column by which the user wishes to group the data grid to this panel that is now available on the data grid and our data is appropriately grouped by our chosen column and look at that we have grouped by the reports column and the data grid shows who each employee reports to in the organizational structure you can group by many columns so let's also group the data by gender great we are able to filter each column by appropriately setting the allow filtering property to true we could run the code and we would be able to filter each column by a text input field provided for each column we can include more sophisticated filtering functionality for each column by including a grid filter settings element within the sf grid element we can then include a type property within the grid filter settings element and set the type property to for example syncfusion.blazer.grids.filtertype.menu this provides a user the ability to filter each column using a variety of different types of criteria for example a user can filter a column by a value that the user specifies for field values that start with a userspecified string value a user can specify that the user wishes to filter the data based on field values that are equal to a value that the user specifies a user can filter the data based on values in the data that are greater in value than the user's specified value for example the user may wish to filter the data by employees born after 1990. with this functionality the user can filter the data in a variety of different ways where a combination of filters can be applied to multiple columns the user is able to clear filters from certain columns and try various combinations of userspecified filtering criteria very powerful indeed and look at how simple the code is for achieving such powerful results in order for the user to be able to sort by the columns in descending or ascending order all we need to do is set the allow sorting property within the sf grid element to true like this we are going to delve deeper into using the syncfusion data grid to facilitate crowd operations but at this point i'll demonstrate the very basics of how to customize the syncfusion data grid so that it provides the user with a facility whereby the user is able to perform crowd operations on the relevant data of course we haven't yet created a database in which we can store our data so we are not able to persist data to a database we can however at this point superficially demonstrate the relevant crud operations within memory data so to allow for the facilitation of crowd operations using our syncfusion data grid component let's include the grid edit settings element within the sf grid element like this to allow for add operations or in crud terminology create functionality we set a property within the grid edit settings element named allow adding to true then to include the appropriate toolbar buttons we can add the appropriate items to our toolbar like this so here we are telling the syncfusion datagrid component as it were that we wish to include the add update and cancel buttons within the datagrids toolbar and we can now add records to our data grid by clicking the add button the user is then able to enter the relevant data for the fields for the record that the user wishes to add to the data grid then the user can press the update button to save the data to the data grid and we can now see that a new row containing the data that we have just added is present within the data grid of course we are only dealing with inmemory data at this stage so if for example we navigate to another component and then back to our employee management component the data that we added to the data grid is no longer present within the data grid to achieve the functionality of persisting the added data to a database through the data grid we will need to further customize the data grid and of course implement code to save the data to a data storage facility like for example sql server and this is exactly what we are going to do in just a bit once we have pressed the add button the update button and the cancel button are enabled so we could press the cancel button to cancel the add operation or once we have entered valid data into the relevant fields we can press the update button to save the relevant data to the data grid we can allow the records denoted by the rows of employee data in our data grid to be edited by including the allow editing property within the grid edit settings element and setting the allow editing property to true let's also include an appropriate edit item within the toolbar list so a user can now select the row in the data grid that the user wishes to edit then press the edit button on the toolbar carry out the relevant edit operations and then press the update button to save the relevant changes to the data grid and the update functionality is currently not working in order for the edit operation to run correctly we need to ensure that one of the columns serves as a primary key value so let's add the is primary key property to the grid column element that is wired up to the id field and let's set the is primary key property to true this allows for each record to be uniquely identifiable within the data grid note that the user is also able to put a particular row within the data grid into edit mode by simply double clicking on the relevant row we can also as it were tell the sync fusion data grid to include delete functionality within the syncfusion data grid by including the allow deleting property within the grid edit settings element and setting the allow deleting property to true we can then include a delete button within the datagrids toolbar by including the delete item within the toolbar list like this right so let's build the sales management application let's take a brief look at a depiction of the relational database design for our applications database i've designed the structure of this database based on a process called normalization let's look at a brief explanation of what normalization is here is a brief description provided by wikipedia regarding the process of normalization database normalization is the process of structuring a relational database in accordance with a series of socalled normal forms in order to reduce data redundancy and improve data integrity a link has been included below in the description if you'd like to learn more about database normalization so if we look at a relational database design depiction for our sales management application you can see that our database will contain the following database tables our database will contain the employees table the employee job titles table a products table a product categories table an orders table and order items table a clients table a retail outlets table and lastly we have a table named sales order reports the sales order reports table will be the table that is used for storing analytical data the data stored in this table will be used for the charts that will be presented to the users of our application on their dashboards in terms of design this table can be seen as different from the other tables because this table has been deliberately denormalized i discuss why this table is denormalized and what it means for a database table to be denormalized when we write the syncfusion charts related functionality very basically denormalized database tables are often used to store analytical data and normalize database tables are used to store transactional data transactional database tables are generally written to more often than the tables used to store analytical data the denormalized tables are designed to increase the retrieval speed of the data stored within them this increased speed is made possible because of the elimination of the need to join tables together when retrieving the relevant data so a major part of the denormalization process is eliminating the need for joins so let's look at the normalized tables and their relationships the employees table has a manytoone relationship with the employee job titles table many employees can have a particular job title for example many employees can have a job title of sales rep the products table has a many to one relationship with the product categories table many products can fall under a particular product category for example a tent falls under the camping product category and an air mattress also falls under the camping product category the orders table has a onetomany relationship with the order items table and order consists of many order items the orders table has a manytoone relationship with the employees table each order is created through a sales rep a particular sales rep can create many orders the orders table has a many to one relationship with the clients table many orders can be made by a particular client the clients table has a onetoone relationship with the retail outlets table the retail outlets table contains details about the retail outlet itself for example information about the retail outlets location each retail outlet has a person who serves as a contact within the relevant retail outlet the clients table contains information like for example contact information about the person that serves as a sales reps contact a particular product can be associated with many orders so that was just a brief explanation of my thinking behind the design for the database that we are going to use for our sales management application as we get further into building our application more details regarding how the database design underpins the logic for our application will emerge so we are going to use ef core code first migrations to build our database at this stage we are focusing on integrating the syncfusion datagrid component for the purpose of facilitating cred operations so at this stage we only need to create the employees table and the employee job titles table so let's create a folder to house the entities that will represent our database tables let's name the new folder entities let's add a csharp class to this new folder named employee this employee class can be viewed as a template that represents a row in the employee's database table each property that is defined within the employee class and each property's data type will correspond to a column within the employees database table let's create an auto implemented property named id an easy way to create a property within visual studio is to type prop then hit the tab key twice and a default property definition is generated for us by visual studio we can then adjust the property definition for example the properties data type and the property's name according to our requirement for convenience you are able to navigate to the elements of the property definition using the tab key so we are able to for example change the property type and then use the tab key to move the cursor to the property name and we are then able to modify the property name so id as int first name as string last name as string email as string gender as string date of birth as date time and reports to empid as a nullable integer the question mark character following the ins data type definition means that this property can store a null value the employees table supports a parent child relationship the reports to empid field will contain either a null value or one of the values stored in the id field which is the primary key for the employees database table the relationship between the id field and the reports to empid denotes the following if for example an employee with an id of 2 has a report to empid value of 1 this means the employee with the id value of 2 reports directly to the employee with an id value of 1. this denotes that the employee with the id of 1 is the immediate boss of the employee with the id of two within the organizational structure an employee with a report to empid of null does not report to any other employee and is therefore at the top of the organizational structure in this case that employee is the sales manager bob jones team leaders reports directly to bob jones and sales reps report to a team leader so we are able to express the hierarchical structure of the organization for the employee data stored in our employees table by including a column that can store a null value and can also store a value that corresponds to the table's primary key which in this case is the id field if this concept is not clear to you don't worry this will become clearer to you when we integrate the syncfusion diagram into our application later on in this course in order to express our employee data in a hierarchical depiction i.e a structure that represents the organizational structure of our fictional sales department let's create a string property named image path its corresponding field in the database will store a path to a profile image of the relevant employee i've prepared a profile image for each employee i'll supply the relevant details of where you can download the profile images a little bit later when necessary we'll add data for each employee to the employees database table and employee job titles database table a little bit later lastly let's create an integer property named employee job title id this field will serve as the foreign key field from the employee job titles database table the employee job titles for our application are as follows the sales manager or sm for short the team leader or tl for short and the sales rep or sr for short so each employee will have one of these three job titles in our fictional sales department let's create a class that will correspond to the employee job titles database table let's name this class employee job title let's create the first field which must be named employee job title id this is the primary key field that joins this table with the foreign key field of the same name in the employees table let's create a string property named name and let's create a string property named description great right let's create our database using entity framework core code first migrations in order to do this through visual studio we need to install two nuget packages let's include the nuget package named microsoft dot entity framework core dot sql server great and let's install the new get package named microsoft dot entity framework core dot tools by installing the microsoft dot entity framework core.tools nuget package we'll be able to for example create our database migrations by running the relevant commands within the new get package manager console window from within visual studio we wouldn't need to install this package if we were to run the relevant migration commands through the.net sdk note that when using the.net sdk for running ef core migration commands the commands are different to when running the commands for the same purpose through visual studio for this course we are going to run the relevant migration commands directly through visual studio which means an installation of the microsoft dot entity framework core.tools new get package is necessary in order to build our database using ef core we must include a db context class within our application this dbcontext class is essential for when we need to retrieve or modify data in our database using code within our application so let's create a class to represent our db context within the data folder let's name our class sales management db context this class must inherit from the db context base class the red squiggly line under db context is visual studio indicating to us that we are missing a using directive an easy way to include the relevant namespace directive is to press ctrl period and then visual studio presents us with a context menu we can select the top menu item in this case and the relevant using directive is added to the top of our code so the db context type resides within the microsoft dot entity framework core namespace great let's create a constructor for our dbcontext class an easy way to generate a default definition for a constructor for a csharp class from within visual studio is to type in ctor and then press the tab key twice this constructor must accept an argument of the generic type db context options that is strongly typed with our sales management db context type we must pass this argument down to a constructor within the db context base class by using the base keyword like this and now all we need to do is tell ef core as it were about the classes that we wish to use as definitions for our database tables so to do this we include a property of the generic data type db set for each table that we wish to generate within our database we must strongly type each db set property with the appropriate user defined type that we have used to define the relevant database tables in our entities folder so the first property is defined with the generic db set type that has the employee user defined type passed to it as a type argument so the second property is defined with the generic db set type that has the employee job title userdefined type passed to it as a type argument each of these property names will be used as the database table names for the corresponding tables in the database so when we create a migration and update the database the database will be created and two database tables will be created within our database one named employees and the other named employee job titles the next step is to ensure that we have an appropriate connection string defined within the appsettings.json file so to do this let's create a connection string setting within our appsettings.json file and create a connection string named sales management db connection so we need to set the server property of our connection string to the server name on which our database will be created my server name is gavinlon's pc we must then set the database property of the connection string to the name of the database we wish to create sales management db seems like a sensible name then set the trusted underscore connection property to true this basically means that the windows account under which our application runs will be authenticated against the relevant sql server database great the next step is to register our sales management db context type for dependency injection we can do this by including the appropriate code within the program.cs file so let's open the program.cs file let's first write code to read the relevant connection string from our appsettings.json configuration file into memory let's then use the add db context method to register our db context class ie our sales management db context type for dependency injection here we are configuring our db context type to use a sql server database and the necessary details of the relevant sql server database have been defined within the relevant connection string that we are passing to the use sql server method here great so we are now ready to run the relevant ef core commands to generate our database to do this let's invoke the package manager console window like this to create a migration we can type the add dash migration command and then follow this command with the name of our migration class let's name this migration initial create let's press the enter key to run the command and our migration class has been generated for us you can see that the up method contains code that builds the database and the database tables that we have defined within the sales management db context class the down method contains code to undo the effects of the code that resides within the up method so we have created our migration but we have not yet run the code within the up method that will generate our sql server database with the database tables that we have defined within our sales management db context class ie through the properties defined as the db set generic type so in order to run our migration we must type in the update database command let's open sql server management studio to see if our database has been created excellent our sales management db database has been created successfully and we can see that the employees database table has been created and the employee job titles database table has also been created within the sales management db sql server database so i've prepared data for our employees and employee job titles tables off screen we are going to seed these database tables by using the code that i've prepared off screen to do this let's create a static class within the data folder named seed data let's create a static void method within our seed data static class named add employee data as stated i've prepared code that will add the relevant employee data and employee job title data to the relevant database tables and this code can be copied from a github web page at this url let's copy the code from the relevant github web page and paste the code within our add employee data method let's bring in the sales management app dot entities namespace let's include a parameter within the add employee data method named model builder which is of the type model builder we must also bring in the microsoft.entity framework namespace which is where the model builder type resides so in order to seed our employees table and employee job titles table with the data we have defined within the seeddata.addemployeedata method we must first override a method defined in the dbcontext base class an easy way to override a method within visual studio is to type override then hit the spacebar key a list of overrideable methods is presented to us by visual studio and on model creating is the list item we want so let's select on model creating then within the on model creating method let's call the seed data dash add employee data method and pass in the relevant model builder object to the add employee data method like this great so to seed our database tables with data we can now open the package manager console window we can clear the screen by typing the clear command and pressing enter and we can then type in the add dash migration command followed by a sensible name for our migration so let's name our migration seed employee data and you can see ef core has generated the code for seeding our database tables so to run the code against our database we can type in the update database command and press enter let's look at our data in sql server management studio excellent let's create functionality to retrieve data from within our employees database table and return the relevant data to eraser component we don't want to expose our entity classes directly to the razer components that are responsible for presenting the relevant data to the user so we are going to create appropriate model classes that will store the data that is directly handled from within the relevant razer components so by doing this we are creating a separation of concerns the entity classes interact directly with the database the ef core functionality the model classes are only concerned with the presentation layer and are handled by code within the relevant razer components so let's create a folder named models let's create a class named employee model let's copy the properties from the employee entity class and paste the properties into our employee model class so at this stage we could implement the repository pattern and wrap our database related functionality in specially created repository classes in the interests of simplicity for this code example we are going to abstract the database handling code in our service classes we are not going to implement the repository pattern in this course you can of course implement the repository pattern if you'd prefer i do encourage creating distinct separation of concerns and code but this course is focused on the integration of syncfusion components into a blazer application so in the interest of time i want to keep the backend related code fairly simple let's create a new folder named services so let's create our first service class which will be responsible for handling employee data within the services folder let's create a folder named contracts let's create an interface within the contracts folder named i employee management service let's create a definition for an asynchronous method named get employees that will be responsible for returning a generic list that is strongly typed with our employee model userdefined type let's write code to implement the i employee management service interface so we need to bring in the sales management app dot services dot contracts namespace then with our mouse pointers positioned appropriately we can press control period again and generate code stubs for the methods that must be implemented like this so at this point we only need to implement code for one method the get employees method before we do this let's create a constructor for our employee service class let's add a parameter to the constructor of type sales management db context to indicate to.net as it were that we want an object of type sales management db context injected into this constructor at runtime so whenever an object is instantiated from our employee management service class an object of type sales management db context will be injected into the relevant employee management service object so let's position our mouse pointers appropriately press ctrl period and select create and assign field sales management db context from the menu that is presented to us within visual studio and this action results in visual studio generating an appropriate private member variable to store the object of type sales management's db context that will be injected into this constructor at runtime during the instantiation process of the employee service class we can now use the relevance dbcontext object to retrieve employee data from our database with this line of code so we have a red squiggly line so we must bring in the microsoft dot entity framework core namespace so that we can include the to list async extension method within our code here but we still have a red squiggly line this is because we want our method to return a list of employee model objects but we are currently attempting to return a collection of employee objects through our get employees method so to solve this we could write link transform code that converts our collection of employee objects to a collection of employee model objects within the get employees method and that would be fine but in the interests of cleaner code let's create a convert extension method for this purpose this means that we will be able to call a method named convert on the code that returns a collection of employee entities and the code we are about to implement for the convert extension method will perform the appropriate conversion functionality so let's first create a folder named extensions within the extensions folder let's create a static class named conversions within the conversions static class let's create a static async method named convert that returns a list of employee model objects in order to make this method an extension method that can be called on an object of type i queryable that is strongly typed as employee we need to include a parameter that is of type i queryable that is strongly typed with the employee type and this parameter must be preceded by this keyword an extension method must contain at least one parameter and the first parameter in an extension method must be of the type on which the extension method is called the first parameter must also be preceded by the this keyword if this isn't clear to you at this point this will become clearer when we call the extension method on the i queryable object returned by our efcor code in the get employees method so let's implement the code for our convert extension method so we can now use the employee's object passed as an argument to the convert method and through a link query we can perform the appropriate transform operation ie where we convert the i queryable object that is strongly typed with the employee type i.e this is a collection of employee objects returned from the database into a list that is strongly typed with the employee model type this is the list that we want to return to the relevant razor component that we'll create in a bit and now that our extension method is created we can perform the necessary conversion operation within our get employees method cleanly like this and of course we have a red squiggly line because we need to bring in the sales management app dot extensions namespace and that's it our get employees method is ready for use excellent so now we want to write codes to wire up our syncfusion datagrid component to the employee data returned from our database so let's open the employeemanagement.razer file let's remove the code related to the static data that is currently wired up to our sync fusion datagrid component we now have a red squiggly line under the employee model type because that was a reference to the employee model class that has now been removed from our razor file so let's bring in our newly defined employee model type by pressing control period and selecting the appropriate menu item represented to us by visual studio great and we need to change the field property value within our syncfusion data grid code here because the name in the newly defined employee model for the job title field is not job title but is employee job title id and for now let's remove code from our data grid relating to crud operations data filtering sorting grouping and paging and for now we also don't need our data grid to have a toolbar let's write code to override blazers builtin uninitialized async lifecycle event handler method within our uninitialized async method let's include code that gets the employee data from our database using our employee management service class and we must first write code so that an object of type employee management service is injected into our razor component at runtime great so let's write code to call the get employees method on our employee management service object and assign the returned list of employee model objects to our variable that we have named employee data the employee data variable is the data source for our data grid syncfusion component let's run the code and we have an error okay and i know exactly what has caused that exception it is because we haven't registered the employee management service type for dependency injection so let's open the program.cs class and write the code to register the employee management service type for dependency ejection so to do this we can simply include this line of code within the program.cs class let's run the code again and now the data stored within the employees table within our newly created sql server database is being neatly displayed within our syncfusion data grid component excellent let's explore the datagrid component further so we don't want the integer value displayed for the employee job title id field like it is being displayed at the moment within our data grid the employee job title id value is great for the unique identification of job titles but is not ideal for presentation purposes we want the name of the job title to be displayed here because it is more human readable than the employee job title id value we also want an administrator to be able to change the job title for an employee if necessary so we want this field to be able to display a drop down list containing all job titles as list items when an administrator puts a row displayed within the data grid in edit mode so when in read mode we want the name of the job title displayed to the user but when an administrator needs to change the job title for a particular employee we need the administrator to have access to a dropdown list containing all employee job title names the job titles that exist in the system at the moment are sales manager team leader and sales rep in the name field in the employee job titles table we are storing an abbreviation of these job titles sm for sales manager tl for team leader and sr for sales rep so for example if a sales rep is promoted to a team leader we want an administrator to be able to change the employee's job title from sr to tl from within a drop down list in the appropriate row in our data grid so to achieve this let's first go to our i employee management service interface let's create a definition for a method that returns a list of employee job title objects in the interests of time i'm going to use the employee job title class for the model and not create a model dedicated for presentation purposes like we did with the employee model class so let's go to the employee management service class and implement the code for our get job titles method great let's go to our employee management.razer file let's create a variable to store a list of employee job title objects let's write code to call our get job titles method on the employee management service object from within our override method of the uninitialized async blazer lifecycle method handler and we are assigning the returned value to our employee job title data variable so the employee job titles table has a onetomany relationship with the employees table and we are able to as it were let the sync fusion data grid component know about the relationship through appropriate declarative code that we are about to create the employee job title id field within the employees table is a foreign key from the employee job titles table the employee job titles table has a field that serves as its primary key named employee job title id we can as it were let the syncfusion data grid component know about this relationship between the employee job title id primary key field in the employee job title data data source and the employee data data source through appropriate declarative code that we are about to write so to establish the relationship between the employee data data source that we have already wired up to our data grid and the employee job title data data source that we are going to wire up to the relevant drop down list we are going to appropriately include a component within the data grid named grid foreign column instead of using the grid column component that we are currently using to represent our columns so this will mean that when a user selects a new value from within the employee job titles drop down list that the employee job title id foreign key value will automatically be changed appropriately in the employee data data source so when the user changes an item within the employee job titles drop down list the employee job title id value mapped to the selected drop dropdown list will become the value reflected in the employee data data source which is the data source wired up to our data grid through the declarative code that we are implementing for our data grid we are telling the syncfusion data grid as it were about the onetomany relationship between the employee job titles data source wired up to the relevant dropdown list and the employees data source wired up to the sf grid component so let's create the code for this let's delete the grid column component that is currently implemented to represent the employee job title id field let's include a component named grid foreign column to represent the employee job title id field as well as include the relevant dropdown list that will contain the employee job titles let's set the header text property value to designation let's set the t value property to employee job title we are doing this because we want the relevant drop down list to contain items of type employee job title we want the value of each item in the dropdown list to have its primary key value employee job title id mapped to the foreign key value also named employee job title id which is a foreign key field included in the employee model class we must set the foreign data source property to the data stored within the employee job title data variable this variable stores a list of employee job title objects we can then set the foreign key value property to the property that we want displayed to the user within the drop down list which is the name property let's make the fields width 100 pixels so when a row is in edit mode we want our drop down list to appear to the user to let the sync fusion grid component as it were know about this we must appropriately include the edit template component in our code like this within the edit template element we must include the sf dropdown list component let's bring in the appropriate namespace for the sf dropdown list type which resides in the syncfusion.blazer.dropdowns namespace let's use the at bind dash value attribute to bind the appropriate employee model object's employee job title id value to the value selected within the relevant dropdown list each row in the data grid corresponds to a list item of type employee model stored within the employee data data source for the data grid we are able to access each rows list item object through an object named context provided to us by the sync fusion data grid we can type cost the context object into its underlying type in this case the employee model type using the c sharp as keyword like this and then we can access the property that we wish to bind to let's set the id property of the sf dropdown list component to employee job title id let's set the data source property to the variable that stores the relevant list of type employee job title let's set the t item property to the employee job title type the relevant data source for our drop down list contains a list of items of type employee job title the value that will be bound to the employee data data sources employee job title id property must be of type int so let's set the t value property to end and then within the sf drop down list element let's include a component named drop down list field settings let's set its text property to name and its value property to employee job title id so the name property of the selected item will be displayed to the user in the drop dropdown list and the value of the selected item in the dropdown list will be the selected objects which is of type employee job title employee job title id value let's run the code great so the name of the employee job title is now appropriately displayed within the relevant column so we need to indicate that we want to allow for a user to be able to edit rows within the data grid so to do this we simply include the grid edit settings component within the sf grid element and include a property within the grid edit settings element named allow editing and set its value to true let's run the code and now when we double click a row within our data grid which puts the relevant row into edit mode we are able to change the value for an employee's job title through the use of an appropriate drop down list excellent you'll see later when we perform certain cred operations on the data that the drop down list values are automatically mapped to the employee data data source through the relationship between the employee job titles employee job title id field the employee job titles database tables primary key and the employees employee job title id foreign key field so let's also create a drop down list for the gender field we can implement the code for this using an enum so for this field we don't need to bind a primary key value from one data source to a foreign key value of another data source as we have done for the employee job title id field let's create an enum named gender val and include the appropriate enum list items let's modify the grid column component for the gender field so that a drop down list containing the gender items can be accessed from within the data grid when a row is in edit mode so let's first include the edit template element within the relevant grid column element so before we set the data source property for the relevant sf dropdown list element let's write code that converts the gender enum list items to an array of string values we can use the enum types get names method for this purpose like this then we can set the data source for the relevant sf dropdown list component to the variable that stores the appropriate string array values we can then tell the sync fusion data grid as it were about the type of collection that we want contained within the relevant dropdown list so in this case each item contained within the dropdown list is of type string so we set the t item property to string and the value for each item will also be a string so we can set the t value property to string as well lastly we must set the at bind value attribute to the correct property within the employee model type which is of course the gender property we can access the relevant employee model object pertaining to the relevant edited row through the context object that is made accessible to us by the sync fusion datagrid component let's run the code great we also want to include a drop down list for the report to emp id field in the relevant dropdown list for this field we want to present a list of employees that are either a team leader or the sales manager so in effect we are excluding sales reps from this list because no one in the organization reports to the sales reps firstly let's create a special model within the models folder that represents an employee that can be reported to as it were let's name the csharp class report2model so the first property is named report to amp id and is a nullable integer the reason this field is nullable is because an employee might not necessarily report to another employee like for example bob jones who is the sales manager and is the head of the sales department therefore doesn't report to anyone in the sales department then let's include a string property named report to name let's create a method definition for a method named get report to employee within the i employee management service interface for an asynchronous method that will be responsible for retrieving a list of objects of type report to model let's implement the code for the get reports to employee method within our employee management service class so let's create a link query that returns a list of employee objects so to do this we can join the employee entities employee job title id foreign key field to the employee job title entities employee job title id primary key field so that we can explicitly filter the data based on the names of the relevant job titles in this case the names of the job titles are sm and tl yes we could just use the report to id key for this purpose but i want it to be explicit regarding the employees that need to be included in the returned list based on their job title then we can assign the relevant returned values to the appropriate properties of the report to model type so i'm assigning the report to name property the employee's first name followed by the first character of the employee's last name just for clarity then the way we wire up the code so that the drop down list appropriately appears for our reports to empid field is very similar to the way in which we implemented the code for the employee job title id field so let's first write the code to retrieve the relevant data now let's comment out the code for the current grid column element that is currently representing the report to empid field let's make a copy of the grid foreign column element that we created for the employee job title id field and paste it appropriately above the code that we have just commented out then let's change the settings appropriately for our new grid foreign column element let's run the code and we have an exception thrown and why is that it's because our scenario here is slightly different to the implementation for the employee job title id field with the employee job title id field the value can never be null so the t value property here must be set to end for the report to empi d field the value can be null which means we need to let the syncfusion data grid know as it were that this field can be null so we need to set the appropriate t value property here to nullable end like this remember employees don't necessarily report to anyone as is the case with bob jones who reports to no one he is the sales manager the head of the department so we must make this field nullable so this field can either be set to null or an integer value so that is why we are setting the t value property here to c sharp's nullable end data type let's run the code and that's great but how does an administrator set the drop down list to a null value so to achieve this we want to make a slight modification for this special case so let's go to the get report to employees method within the employee management service class and add a list item that represents a null value to the list of report 2 model items returned from this method let's ensure that the null item appears as the first option in our drop down list so let's order the list by the report to empid property let's run the code excellent so the null value is represented by the text none which is wrapped in angle brackets great the syncfusion data grid is highly customizable for example we can include an image for each employee record that can be displayed within the data grid we can also style the image appropriately using css so i've prepared some image files for this part of the course the image path field in the employees table of our database has been seeded with the appropriate image path for each employee add points to the appropriate image which must reside within the www root slash images slash profile folder so let's create the images folder within our www root folder and then let's create the profile folder within the images folder please download the images from this location on github and then copy the images into the www root slash images slash profile folder great so to include the employees profile image within the data grid let's add a grid column element let's set the header text for our column to profile and let's set the width of our column to 120 pixels we can include an image within this grid column using the template element like this we are now able to appropriately include html code within the template element that will in effect display the appropriate image within the relevant data grid column note how we are able to use razor code here to access the employee model object for each row in the data grid we are able to access the context object for this purpose we can then include the image path field for the relevant employee model object as the value for the src attribute of the image html element that we are including within the template element and that's great the image is displayed within the data grid but it could look a lot better we are able to customize the images displayed within the relevant grid column of our data grid using css so you can see that i've included a css class within the div element that wraps the image element that is used for displaying the relevant employee profile image here we are able to style the image appropriately with basic css code so to do this let's create a style tag here and let's add the dot profile dash image dash container class here let's set the width of the image container div element to 80 pixels and let's also set its height to 80 pixels let's target the image element that is responsible for displaying the profile image and set its width and height properties so that the image fills its container 100 percent let's say that we want our image to be displayed within a circle we can achieve this by setting the image elements border radius property to 50 pixels let's run the code excellent and when we put a row in edit mode our image does not display which is what we want great this is because we haven't wired up the relevant grid column responsible for displaying the employee profile image using the field property to a property within the employee model type we are only displaying a small amount of data within our data grid but if we were displaying thousands of records it is a good idea to display a spinner to the user while the records are loading this provides a better user experience ux to the users of our application to achieve this we can appropriately add the sf spinner component to our data grid like this we can set the spinner components at bind dash visible attribute to a boolean property that we will create in a bit then we can control through this property that we have named visible prop when the spinner is displayed to the user and when the spinner disappears let's set the visible prop property to true before code runs to retrieve relevant data and then to false once the execution of the relevant code has completed our code here is only retrieving a small amount of data so let's introduce an appropriate amount of latency to simulate the delay for the retrieval of a much larger amount of data so let's create a delay of two thousand milliseconds or two seconds great we are just using the default spinner style here but please check out the sync fusion documentation regarding the sf spinner component and you can see how you are able to customize the style of the spinner in many ways to suit your requirement so we can now remove the artificial latency that we have introduced within the uninitialized async method so earlier on in this course we looked at the performance of crud create read update delete operations facilitated by the sync fusion data grid component we can include such functionality by simply adding a toolbar to the data grid like this we must also ensure that we have included the grid edit settings element within the sf grid element then we can set the allow adding property to true so that a user can add employee records to the system through the use of the data grid the allow editing property has already been appropriately included and is already set to true which will enable a user to edit employee records through the use of the data grid we must also appropriately include the allow deleting property and set its value to true so that a user can delete employee records from the system through the data grid so a user can now perform crowd operations through the use of our data grid but as we demonstrated earlier on in this course when we were only dealing with inmemory data we were able to perform the relevant crat operations and the changes made through our crud operations were reflected in the data grid which is excellent but in order to sustain the changes that a user makes through the relevant crud operations done through the use of the data grid we need to customize our data grid a bit further so for example when a user adds a new employee record to the data grid we want the new employee record to be inserted into the employees database table so we have now created our database so we are now working with persistent data which means we can create functionality for our application so that when a user performs crowd operations through the use of the data grid the effects of the crad operations are both reflected in the data grid as well as appropriately persisted to our database sync fusion makes it easy for us to hook into events that are triggered by user actions performed on the data grid and therefore we are able to include our own custom code appropriately within relevant event handlers so that changes made by the user through the use of the data grid are appropriately saved to our database so for example if a user clicks the add button on the data grids toolbar then fills in values for the relevant fields and then clicks the update button on the toolbar which means the user is saving the relevant data to the data grid our custom code can run at this point and save the relevant data to a database table so how do we hook into the relevant data grid events firstly let's create the custom code necessary for adding a new record to our database so let's go to the i employee management service interface and add a definition for a method that will be responsible for adding a record to the employees database table let's implement the logic for this method within our employee management service class so before we do that let's create a convert extension method so that the employee model object passed into our add method can easily be converted into the employee type that can then be added to our employees database table using appropriate ef call functionality notice here for the image path field i'm setting the image for a newly added employee to a default image which is based on the employee's gender then we can simply call the convert method on the employee model object passed into our add method we can then use entity framework core functionality to save the newly created record to our employees database table excellent so now how can we run our code that we have just created to add a new employee to the employees database table based on a user's action performed to add a new employee record to the data grid to achieve this we are able to include a component named grid events within the sf grid element then within the grid events element we can set the on action begin property to an event handler method that we'll create in a bit where we can implement code to call the add functionality that we have just created within the employee management service class so let's create the method that will run when a user performs an action on our data grid note that we are able to use intellisense like this where we can see the method signature or method definition if you like that we need to implement for our action begin handler method ie the method that we have assigned to the onactionbegin property we are able to use the args argument passed to our event handler method when a relevant action is performed by the user on the data grid to assess the exact nature of the user's action so we want to capture the event as it were when a user clicks the update button on the toolbar in order to save new data to the data grid so we can do this by checking the data available in the args argument like this we can check the request type value on the args object we also want to further evaluate the args data to check if the save action occurred after the user performed an ad operation we can do this with this line of code where we are checking if the args argument action value is equal to add so if these two conditions are met our code knows as it were that the user is performing a create operation the user is adding data to the data grid so we can include our create functionality here where we can save a newly added employee record to the employees database table so let's use our employee management service functionality appropriately to add a new record to the employees database table note that the data inputted by the user is accessible through the args arguments data value here so we can pass this value to our add employee method like this before we act as a user and add a record to the database let's include the email field within our data grid we have not allowed this field to store null values in our employees database table so a value for the email field must be supplied when adding a new employee record to the employee's database table so let's adjust the data grid size to accommodate our new column so let's add a record to our database through the data grid so let's say a new sales rep named greg ross has just joined the company so let's add his details to the system and he will report to team leader jenny marks great and greg ross has been successfully added to the system notice that the id value is zero at the moment and no image is displayed for greg ross at present this is because we need to refresh the data in the grid in order for the id value related to the new employee greg ross to be appropriately displayed on the data grid this is also true for greg ross's profile image to make sure our data grid is refreshed with the latest data saved to the database we can hook into another event that fires once the code to add an employee record has completed so to achieve this let's set the on action complete property to a method handler that we are going to create in just a bit let's name our event handler method action complete handler you can use intellisense to see what the method signature or method definition of our event handler method must be so let's create the relevant event handler method we only want our custom code in this case to execute when the user has added a new record let's use the appropriate if statements to check the nature of the user's actions i am currently just checking the request type value for the save action here but we should also include code to check that the action value is set to the literal text add as we have done in the action begin handler method we only want the grid to refresh as it were once a user has added a new employee record through the use of the data grid for the functionality of refreshing the data grid we need to reference our sync fusion datagrid component in our code to do this we can use the at ref attribute and set its value to a property that will store a reference to our syncfusion datagrid component so let's create the property that will reference the data grid in our code here let's apply code to refresh the datagrid's data source with the latest employee data saved to the database by assigning the data source property a list of employee model objects returned by the get employees method that is called on the injected employee management service object and we can call the refresh method on the property that references our syncfusion data grid component like this so currently when we put the data grid into add mode the id field is editable we can explicitly disable this field by including the allow adding property within the appropriate grid column element and set its value to false this is an autoincremented field and we don't want the user to edit this field let's enable sorting for our data grid we can achieve this by including the allow sorting property within the sf grid element and setting its property to true so if we add a new employee named david brown to the system the record has been added and because our code is now refreshing the data once the record has been added the id for the employee that we have just added will have the highest id value in the data grid so the data grid is currently being sorted by id in ascending order the newly added employee record for david brown will currently occupy the last row in the data grid so because we have enabled sorting the user can sort the id column in descending order so we can now see the newly added record at the top of the data grid the employee id saved to the employee's database table is displayed in the data grid and a default image is also displayed for the newly added mail employee and you can see here that i've added a few other records to the system offscreen so let's create the data handling functionality for when a user updates details for an employee record within the data grid and let's also create the functionality for deleting an employee within our employee management service class let's create a method named update employee and implement the logic like this let's create the logic for the delete employee method like this if at any point you get stuck and are struggling to follow along please reference the code on github you are of course welcome to copy the code from the relevant github page great so within the action begin handler method we can include a check to see if an edit has occurred and then apply our database related code appropriately here so for the scenario where a user action triggered the action begin handler method and a save has not been initiated by the user but rather a delete has been initiated by the user we can include an appropriate else if condition in the top if block to check for a delete action we can then apply the appropriate code to delete the relevant record from the database like this we only need the refresh functionality to run when an ad action occurs so please make sure that an if condition is appropriately included within the action complete handler method to check that an ad action has been initiated so that the data is only refreshed within the data grid when a create operation has been completed let's run the code and test that our update functionality has been implemented correctly excellent and we are now able to create employee records within the system and update employee records within the system using our sync fusion data grid we can also delete records from the system like this the effects on the employee data caused by user cred related actions are now not only reflected in the data grid but are also persisted to the employees database table great so one thing of course we need to discuss along with the subject of credit operations is validation so how can we enforce validation rules for the fields of our data grid for when a user is either attempting to add a new record to the system or update an already existing record in the system this is very simple to do those of you familiar with asp.net core razer pages or mvc will no doubt already be familiar with the code that can be implemented here for this purpose to enforce a specific validation rule on a model's property a developer is able to decorate the relevant models property with a specific attribute that indicates to.net as it were which validation rule should be applied to the relevant models property so let's look at this with an example so each row of data in our data grid is of type employee model so if we go to the employee model class we can for example apply the required attribute and therefore the required validation rule to the first name property like this the validation attributes reside within the system.component model dot data annotations namespace so we must ensure we include an appropriate using directive at the top of our code and if when we edit this field in our data grid and we violate the required rule a red border appears around the relevant input field and we are presented with an appropriate error message let's apply the required validation rule for the last name field the email field and the gender field let's apply a special rule for the first name property where the user must enter at least two characters for this field and not be allowed to enter more than 100 characters into this field we can use the string length attribute to enforce this rule let's apply the same rule for the last name property let's declare the email address attribute against the email field to ensure that the user enters an email address that conforms to a valid email address format you can of course create your own custom validation attribute by creating classes that inherit from the validation attribute base clause this functionality is beyond the scope of this course but it is easy to implement you can then apply your own custom validation attributes to the relevant properties so you are able to apply whatever validation rules that are required to any input field within the syncfusion data grid the sync fusion data grid allows a user to export the data displayed within the data grid to an excel spreadsheet you are able to automatically export the data displayed within the syncfusion data grid to an excel spreadsheet or a pdf document with minimal additional code so to enable the user to export the data in the data grid to an excel spreadsheet let's first add an appropriate toolbar button to our datagrids toolbar like this then within the sf grid element let's include the allow excel export property and set its value to true then we are able to hook into an event that is fired when the user clicks a button on the toolbar by setting the on toolbar click property within the grid events element to an event handler method that we'll create in just a bit the implementation for our event handler method is really simple so if the user clicks the excel export button run the sync fusion data grids export to excel async method and look at that excellent let's allow pdf export and let's implement the appropriate code in our toolbar btn click handler event handler method let's of course include a pdf export button on the datagrits toolbar great let's say we wanted to include a button on the data grids toolbar that when clicked executes custom functionality let's say for example we wanted the data in the grid to be exported to a special xml format we can easily achieve this we can create our own custom buttons on the datagrids toolbar using the item model type which resides within the syncfusion.blazer.navigations namespace like this in the interests of time i'm not going to write such xml custom functionality but i'll demonstrate how we are able to include a custom button on the datagrid toolbar and how custom functionality can be executed when the relevant custom button is clicked by the user great we are able to create columns that contain command buttons within our data grid say for example we wanted to execute the edit and delete operations from buttons that appear at the end of each row within our grid rather than through the relevant buttons on the data grids toolbar we can include the grid command columns element within an appropriate grid column element to achieve this we can then include the appropriate grid command column elements within the grid command columns element and style them appropriately like this so now we are able to use these buttons to edit and save our data and we can use this button to delete relevant data excellent we are also able to include our own custom command buttons within the data grid like this we must of course wrap the grid command column elements within the grid command columns element like this excellent and if we choose to handle our updates and delete operations using the command buttons we can remove the relevant buttons from the toolbar great the default mode for our grid is normal mode in normal mode when we edit a row of data in our data grid we edit the relevant fields directly within the data grid itself when we add a new record to our data grid while in normal mode a blank new row appears at the top of the grid and we can input the values for the relevant fields directly within the data grid we are able to edit or add our data using two other modes dialog mode and batch mode let's first discuss dialog mode using dialog mode when a user edits a row in the data grid or adds a row to the data grid a dialog is presented to the user with the relevant editable fields so the user is able to perform the edit or add operation using a separate dialog rather than applying the relevant changes directly to the data grid so to indicate that we want the user to add and edit data using a separate dialog rather than performing these actions directly on the grid for this purpose we must set the mode property of the grid edit settings element to the edit mode dot dialog enum value now when a user adds a record or editor record a new dialog pops up and the relevant operation is done using this dialog we are able to customize the dialog for example we can disable certain fields for add or edit operations like this we can customize the header for example we may want a heading on the dialog to reflect the action that is being performed to customize the header for the dialog we must add the header template element to the grid edit settings element like this then we are able to implement our code to handle the relevant customization functionality great we are also able to customize the footer of the dialog and for example change the captions on the buttons based on the operation being performed then we can hook into the relevant button events and ensure that the appropriate functionality is executed like this the cancel button simply closes the dialog the save button executes the relevant save functionality and then closes the dialogue great you are also able to include the template element within the grid edit settings element to customize the fields and layout of the fields displayed to the user within the dialogue please consult the sync fusion documentation for comprehensive information on how to do this batch mode so let's look at what we are able to achieve using batch mode when our data grid is in batch mode we are able to perform more than one operation on multiple rows of data before saving our data for example a user can add a new record edit a different existing record and delete a record before pressing the update button to save the effects of all three actions at once in batch mode the user's add edit and delete operations can be executed in a batch all at once so to run our data grid in batch mode we simply set the mode property here to the edit mode dot batch enum value let's include the update and cancel buttons within the toolbar of the data grid once again because in batch mode we are going to be able to edit multiple rows so performing the save operation once a batch of operations have been performed by using the appropriate toolbar button seems more appropriate you can see that once we have edited a field and the field loses focus that the background color of the relevant cell is set to green so at a glance the user is able to see which fields in the data grid have been modified before the user saves the relevant data then once the user has finished the batch edit the user can press the update button on the toolbar to save all of the user's changes however this action at the moment will only save the changes to the data grid and will not make the relevant changes to our database so to propagate the changes through to the database we are able to hook into an event triggered by the user's action to save a batch of changes made to the data grid so to do this within the grid events element let's set a property named on batch save to the name of a method that we are going to write which will handle the on batch save event and you can see via intellisense the method definition or method signature if you like of the event handler method that we need to write to handle the on batch save event so let's create this method and let's appropriately name it on batch update handler so through the args argument passed to the on batch update handler method we have access to the records that have been added changed and deleted the logic for our code simply traverses these records and executes the appropriate operations excellent and then of course as demonstrated earlier we are easily able to include functionality like paging in our syncfusion data grid like this if we want to include a maximum of six rows of data per page let's adjust our page size to five we can also easily include grouping functionality into our data grid by including this code in our datagrid component we can include basic filtering functionality for each column in our data grid by including the allow filtering property within the sf grid element and setting its value to true great and we can include more sophisticated filtering functionality for each column in our grid by including the grid filter settings element within the sf grid element and setting the type property for example to syncfusion.blazer then we are able to filter our data by either filtering on one column or a combination of columns in a variety of useful ways excellent so in this part of the course we have demonstrated how we are able to use the data grid for providing sophisticated functionality to the user and we've been able to integrate the sophisticated functionality with ease into our sales management application with clean and easy to read code we have been able to customize the data grid to suit our application's requirement please explore the comprehensive documentation and demo source code provided by syncfusion on their website where you'll be able to delve even deeper into the vast amounts of functionality that can be leveraged through the use of the syncfusion datagrid component so the developer is able to provide extremely rich and powerful functionality with minimal declarative code through the integration of the datagrid into an application please see the code on github for what the code should look like for our particular requirement so in this section of the course we are going to create a facility where sales reps can for example log on to the system when they are on site with a client and order products for the relevant client from a product catalog so for example an outdoor excellence sales rep regularly visits clients of outdoor excellence a client could be a buyer for a retail outlet that specializes in selling outdoor and sports products the sales rep presents a product catalog to the client and the client is able to instruct the sales rep on which products the client wishes to purchase from the product catalog the sales rep can then using the sales management app simply check the check boxes next to the products that the client wishes to order through the app and press a button to order the checked products details of the order are then processed by the system and data is captured regarding for example the order price products date of the order the employee id of the sales rep responsible for the order the client id of the client that instructs the sales rep to make the particular order the location of the retail outlet etc a little bit later in the course we are going to use syncfusion charts to display useful metrics gleaned from the order data that is captured when a client makes an order or multiple orders through the sales management application so in this section of the course basically we are going to create functionality for displaying a product catalog and also facilitate a basic ordering system so that a sales rep can create an order directly from the product catalog for the relevant client so let's first create the display product catalog functionality so let's first create a razor component named product catalog let's use the at page directive to set up the appropriate routing information for the product catalog razer component let's include a link to our new razor component within the nav menu razer file great before we write the frontend code to display the products to the user let's create a products database table and a product categories database table using ef core code first migrations as we have already discussed the products table has a manytoone relationship with the product categories table for example the product category named camping can contain different types of tent products as well as different types of air mattresses the mountain bikes product category can contain many types of mountain bikes so the relationship is one product category too many products or conversely many products to one product category okay so let's create the product entity within the entities folder great let's create the product category entity great let's add the appropriate db set properties to our sales management db context class great let's create a migration and name it add product tables let's run our migration by typing in the update database command and pressing the enter key excellent so let's seed our product categories table and products table with data i've already prepared product related data offscreen so that we can see that database with appropriate product category data and appropriate product data please copy the relevant product seed data code from the github web page at this location a link to this webpage has been included below in the description so let's open the seed data class from within the data folder and let's add a static method named add product data then let's copy the relevant code from the relevant github web page and paste it into our new add product data static method then we can call the add product data method from within the on model creating method of our sales management db context class let's add a migration named seed product data great let's update the database by running the update dash database command excellent so you can see we have an image path for each product row stored within the products database table i've prepared images for each of the products off screen please download these images from this location on github a link to the location is available below in the description of this video then let's create a folder within the www root slash images folder named products and paste the images that we have just downloaded from github within this products folder great so we can now create the database related functionality to retrieve the data related to our products before we create a service for this purpose let's create a product model class this class will serve as the type for each product object displayed on the ui in our product catalog razer component let's create an interface within the contracts folder named i product service let's create a definition for a method that will be responsible for retrieving product data from our database let's create a class named product service where we'll implement the logic for the method definitions defined within the i product service interface let's create a constructor that accepts an argument of type sales management db context an object of type sales management db context will be injected into this constructor at runtime let's generate a field to reference the relevant sales management db context object so before we implement the logic for our get products method let's create an appropriate convert extension method for the purpose of transforming a collection of product objects to a collection of product model objects great we can pass in the sales management db context object to our extension method so that we can join to the product category entity in the relevant link query by doing this we are able to include the product category name in our list of product model data that will be returned to the calling code oops we have a little typo to fix here so let's go to the product model class and fix the issue not decryption but rather description then the code for the get products method is simply this great we want to use the syncfusion list view component to display our product data on the user interface to do this we first need to install the dot syncfusion.blazer.list new get package i see during the development of this application a new version of the syncfusion components has been released we have currently been using version 20.1.0.58 of the syncfusion components so to be consistent let's install version 20.1.0.58 of the syncfusion.blazer.lists nuget package we can always update our installation of our syncfusion components to the latest version at a later time great let's include a using directive that references the syncfusion.blaser.lists namespace at the top of our code in this razor component our code is going to refer to types within the sales management app.entitiesnamespace the salesmanagementapp.services.contracts namespace and the sales management app dot services namespace so let's cut the relevant directive code from the employee management razer component and paste this code within the underscore imports.razer file this means that these directives will now be applicable to all of our razor components let's write code so that a product service object is injected into our product catalog razor component at run time let's create a parent div tag that contains a bootstrap class so that this div represents a row within the bootstrap grid system let's create a div element that contains a bootstrap class to indicate that the content within this div should take up all 12 columns of the bootstrap grid within this div let's create declarative code to include the sf list view component appropriately within our razer component let's write code to override blaze's uninitialized async lifecycle event handler method let's create a variable that will reference the data that we'll use as a data source for our syncfusion list view component this data source will of course contain items of type product model to store the product data retrieved from our database then we can use our product service functionality to retrieve our products data from the database and assign this returned value to the private variable named product data that we will wire up as the data source for our syncfusion list view component so let's appropriately set the data source property of the sf list view element to the product data variable actually let's change our products data variable into a property and capitalize the p in product data great let's not forget to register our product service type for dependency injection great let's include a list view field settings element within our sf list view element like this let's set the t value property within the list view field settings element to product model let's set the id property to id and the text property to name so here we are telling the sync fusion list view component as it were which property denotes the value of a list view item and which property of the list view item which remembers of type product model should be displayed on the ui and there it is our products are displayed neatly within our list view component so of course we are able to customize our sync fusion list view component so that it suits our particular requirement firstly let's say we want our products displayed so that they are grouped by product category we are able to do this by setting the grouped by property in the list view field settings element to the property of the product model type by which we want our list of products grouped so we want to group our products by product category so we can achieve this by grouping by the category name property of the product model type like this great we are able to customize the look of the grouped field through the use of the list view templates component so let's include the list view templates element within the sf list view element let's set the t value property to the type of objects stored in the data source that we have wired up to the syncfusion list view component then we can include code to specifically target the field by which we are grouping the data to do this we can include the group template element within the list view templates element then we can use the context object to reference a particular list item and of course each list item is of type product model we are able to include basic html like this to style the category name property of the product model type and that looks pretty good we can include the template element within the listview templates element to style the list items within the template element we can use html and css to style the fields we want to display to the user for each list item in the list view the sync fusion list view component makes each product model list item available to us in code through the context object so we are able to include which fields from the product model type we want to display in our template using the context object notice that we are using certain sync fusion css classes to style the list view items so before we continue let's use the tostring and net globalization functionality to force the currency to be displayed as u s dollars like this let's set the css class property of the sf list view grid component to sync fusion's elist dash template css class for more detail on the css structure in the blazer list view component please check out syncfusion's documentation regarding this topic at this location a link to this webpage has been included in the description of this video let's also include a class named list view dash template we can customize the style for our list view using appropriate css code let's run the code and i think that looks pretty good so i want to include a checkbox next to every list item so that the user can easily select the products from the product catalog before placing an order to include this functionality all we need to do is add the show checkbox property within the sf list view element and set its value to true excellent with each order made on behalf of a client by a sales rep we also need to include relevant client information so we want to include a combo box that is populated with a list of clients the sales rep can then choose the client on whose behalf an order is created from the combo box before placing the relevant order so firstly let's create a csharp class named client within the entities folder like this to represent the client entity great let's also create a csharp class named retail outlet and include these properties within the retail outlet class this csharp class represents the retail outlet entity the client entity has a onetoone relationship with the retail outlet entity a client works for a retail outlet and serves as the point of contact for an outdoor excellence sales rep let's include the relevant dbset properties so that ef core will include code within our next migration to create the corresponding database tables within our database let's generate the migration code and let's update the database great let's seed our clients and our retail outlets tables with data please copy the relevant code for seeding these tables from the github web page found at this location a link to this page has been included in the description of this video so within the seed data class let's create a static method named add clients let's paste the appropriate code that we have copied from the relevant github web page into the add clients method ok so to be consistent let's rename our add clients method to add client data let's then call the add client data method from within the on model creating method within the sales management db context class let's create a migration named seed client data great let's update the database with our client data by typing in the update database command and then pressing the enter key excellent before we create a service responsible for our client functionality let's create a csharp class named client model within the models folder great let's create an interface named i client service let's create a definition for a method that will be responsible for retrieving client data from the database let's implement the logic for the get clients method within a new class named client service before we do this let's create an overload for the convert extension method that converts a collection of client objects to a collection of client model objects we want to join our client entity to the retail outlet entity within our convert extension method so we must also pass in the sales management db context object within our link query let's join the clients collection to the retail outlets collection so that we can include location related information within the returned list then our code logic for our get clients method is very simple great let's go to our product catalog razor component let's write code to include a syncfusion combo box within the product catalog razer component let's create a property that will reference the data source that we are going to wire up to the combo box let's write code to retrieve the client data from our database within our override method of the uninitialized async laser lifecycle event handler method in order to access an object of type i client service we must write code to inject an object of type i client service into our razor component at runtime we must of course remember to register our client service type for dependency injection within the program.cs class like this then let's set the data source property within the sf combobox element to the client data property let's set the t value property to end and the t item property to client model the t value property setting tells the syncfusion combobox component as it were what data type is used for the value of each item included within the combo box the t item property setting tells the syncfusion combo box as it were the type of each item that is included within the combo box then we can use the at bind dash value attribute to bind the value of the selected combobox list item to a property that we are going to create so let's create a property for this purpose named client id and initialize its value to one we must include an element named combo box field settings within the sf combobox element and then we can define which property of the client model type we wish to display to the user by appropriately setting the text property we can also declare which property denotes the value of the items contained within the combo box by setting the value property to an appropriate property in the client model type let's run the code great and the user is able to type in text that alludes to a particular retail outlet into the combo box and the sync fusion combo box will navigate to a matching item in the list great let's appropriately style our layout and our combo box great let's create a csharp class within the entities folder named order great let's create a csharp class within the entities folder named order item great the order entity has a onetomany relationship with the order item entity one order can contain one or many order items let's add the necessary dbcontext properties so that the order entity and the order item entity are used for creating the corresponding database tables in our database let's create an appropriate migration and let's update the database by running the update dash database command great we don't need to see the data for these tables because we are going to generate the relevant order data through our application let's create a class named order model within the models folder let's create an interface named i order service within the contracts folder let's create a definition for a method that will be responsible for creating order data within our system let's create a csharp class named order service and implement the code logic for the create order method so firstly we need to add an order to the system so let's create an order object and get its property values from the order model object passed into this method as an argument for now we are hard coding the employee id for our orders to nine which is the id of the employee named benjamin lucas who is a sales rep one of the last things we are going to do in this course is integrate microsoft identity authentication and login functionality into our application as part of the login functionality we'll be able to retrieve the id of the loggedon employee so we'll be able to get the appropriate employee id field at this point based on the logged on users details for now while we test our functionality let's simply hard code the employee id field where necessary then we can create code to add the order to the system like this and the add async method returns the order entity saved to the system and this is how we are able to reference the id of the order that has just been added to the database the order entity has a onetomany relationship with the order item entity the order item entity has an order id property which is a foreign key from the order entity so we must insert the order entity into the database and reference the id of the newly added order entity that has just been added to the database this must be done before we add the orders relevant order items to the database each order item must reference the order's id before we add the relevant order items to the database each order item must contain an order id value pertaining to an order that has been added to the database let's create a private method that returns the order item collection where each order item contains the relevant order id value then we can use the add range method to add the relevant order items to the database we also need to sum up the price of all the order items pertaining to the relevant order and sum up the quantity of items that were included for the order like this great so these summing operations are done before the order is added to the database and subsequently the order items are added to the database so let's go to the product catalog.razer file and write code so that an object of type i order service is passed into the product catalog razer component at runtime let's register the i order service type for dependency injection let's include a button that a user can click to create an order in the system based on the product items that have been checked in the list view let's wire up an event handler method that we'll create in a bit for the purpose of handling the relevant button click event in this case the logic for the event handler method will entail collating a selected list of products i.e the products that have been checked in our list view and passing the list of products which denotes the order items in the client's order to the relevant order service functionality so let's create the create order event handler method so in order to get the selected product items from the list of products we need to be able to reference the sf list view component in code so we can use the at ref attribute for this purpose when the create order button is clicked by the user our code for creating the order is fired so let's write the code for the relevant buttonclickeventhandler method that carries out the task of creating an order in the system we are able to use a variable of the generic type selected items that is strongly typed with our product model type to reference the objects of type product model that pertain to the items in the list view that the user checks which means these products will become part of an order when the user clicks the create order button we can use our sf products lv object that is referenced within the sf list view element to get the checked list items by calling the get checked items async method on the sf products lv object each of the checked product items will become the basis for an order item we can use the order model type to create an object that contains relevant order information and the relevant order item collection note that each checked product is the basis for an order item then we can pass this data as an argument to the create order method like this let's test the code great but the order id in the order items table is zero for our order so it doesn't correctly relate to the order that we created which is incorrect let's investigate what went wrong here oh i can see what the problem is we must include a line of code to save our changes when we add an order to the system so this is ef core functionality whereby the save changes async method must be called after an entity is added to the database table so we must call the ef cause save changes async method like this after the code that adds the relevant entity to the database is executed so i'm going to delete the incorrect data that we have just inserted into the orders table and the order items table using the sql truncate table statement within sql server management studio by using the truncate table statement instead of simply deleting the data the primary key columns will be initialized back to zero so let's try again excellent we now have the correct order id value being inserted into the order items table however the date for the order dates time column is not correct so let's truncate the orders and the order items table again let's go to our order service class and we can easily correct this issue by setting the order date time property here to date time dot now which denotes the current date and time so that's great we are able to create our order but currently the user has no way of knowing if the user's order has been successful so we need a way to notify the user as to whether the user's order has been successful or unsuccessful let's use syncfusion's toast component for this purpose so once a user places an order we want a message to pop up like toast informing the user whether the user's order has been successful or unsuccessful so to install syncfusion's toast component let's rightclick the dependencies node in visual studio's solution explorer window and select manage new get packages in order to invoke the new get package manager window let's go to the browse tab and search for toast the syncfusion.blazer.notifications new get package appears in our list and this is the package we want to install so let's install version 20.1.0.58 there is a later version but we can always update our packages to a later version at a later stage let's keep our package versions consistent and install version 20.1.0.58 let's add a using directive that references the syncfusion.blazer.notifications namespace to our product catalog razer file so in the syncfusion demo documentation at this location i've found the functionality that i want to incorporate into our application so i'm simply going to copy the code from this syncfusion documentation and integrate it into our product catalog razer component let's copy the code for the sf toast component from the syncfusion demo code here and paste it into our code here let's include this code that has a variable that we'll use to reference our sf toast component and a variable used for positioning our toast object on the screen let's include the code here where a list is created containing various toast types for example for success and error scenarios let's grab all of this code used for the styling of our toast and appropriately paste it into our product catalog razer file then we can create the code for showing our toast within our create order method like this so if our code reaches this line here it means the order has been processed successfully so let's write codes to pop up the toast that represents success note that off screen i have changed the success message to a message more appropriate for our requirement so this message now reads your order has been created successfully let's test the code excellent let's include the code that represents that our order has failed within the catch section of our try catch block to test this error scenario let's include a line of code that forces an exception to occur and we are now handling the exception with our toast so we don't want to throw the exception here so let's comment out this line of code here let's test the code excellent let's remove the line of code that we have included to force an exception to occur the last piece of functionality i'd like to add for our product catalog razer component is so that the user is able to filter the products in the catalog while typing in text within a text box above the list view component so let's include a syncfusion text box in a row just below our syncfusion combo box here in our code like this let's bring in the namespace of where the syncfusion text box resides the syncfusion.blazer.inputs namespace to filter our list view by product name as the user types text within our sync fusion text box we can use the input property in the sf text box element and wire it up to an event handler method that we'll create in just a bit let's first create a variable named product collection filter that will be used to filter our product list let's write code to assign the list of products stored within the data source of our sync fusion list view component to the product collection filter variable within the uninitialized async method and the code for our on input event handler method should look like this our code is filtering the product collection filter list every time a user enters a character into the sync fusion text box then we are assigning the result of the filtering operation to the data source of the syncfusion list view component which is the list stored in the product data property and that's great all works as expected but there are certain layout and styling concerns that need attention so let's address these issues just a reminder the full code is available on github a link to the relevant repository is available below in the description of this video and that looks great and let's press f12 while using our chrome browsers to see how this looks on different screen sizes great our front end code is fully responsive excellent so at this stage in the course we have created functionality where sales reps can place orders on behalf of their clients this order data that is being captured can be very useful for sales reps team leaders and the sales manager for analytical purposes for example from the captured data a sales rep can see how well the sales rep is performing and see which products are generating the most sales a team leader can see how well each of the team leaders team members are doing relative to one another and see how well the team leaders team is doing overall the sales manager can see how well the sales department is doing overall the sales data can be aggregated by location and over a period of time as developers the challenge is to present the relevant analytical data in a human readable way to the user so the user can derive useful knowledge when analyzing the relevant data sync fusion has created excellent chart components that address the issue of presenting analytical data in an aesthetically pleasing and human readable way it's like the old adage says a picture speaks a thousand words these charts are highly sophisticated and easy to implement they are easy to integrate into our code so in the first part of this section of the course we are going to create a razor component that displays three basic charts using appropriate syncfusion chart components this is so that we first gain a basic understanding of how a developer can harness the power of the syncfusion charts in a razer component we'll then progress further and create a dashboard for each type of employee in the sales department each dashboard will be implemented as a razer component we'll create a dashboard for the sales reps that presents three sync fusion charts with data that is relevant to sales reps we'll create a dashboard for team leaders that presents three charts with data that is relevant to the team leaders and lastly we'll create a dashboard for the sales manager that presents three charts with data that is relevant to the sales manager we'll implement code for three different types of popular charts bar charts donut charts and line charts before we build the dashboards let's create a temporary razer component so that we can gain a basic understanding of how to use the relevant syncfusion charts in this razor component we'll implement the code for three types of charts a bar chart a donut chart and a line chart so let's create a razor component named charts let's create an appropriate link within the nav menu razer component before we implement code for our charts it would be a good idea to consolidate our order reports data into one database table so we are going to create a denormalized table in our database to store our analytical data i.e the data we are going to wire up to our charts let's see what wikipedia says about denormalization denormalization is a strategy used on a previously normalized database to increase performance in computing denormalization is the process of trying to improve the read performance of a database at the expense of losing some right performance so for the transactional database tables where the tables are written too frequently our database designed for these tables is based on the strategy of normalization which we briefly discussed earlier so basically by creating a denormalized table for storing the analytical data we are eliminating the need for creating a lot of joins when implementing our link queries for the purpose of retrieving the relevant analytical data from the database to be displayed within our charts by querying a denormalized table we eliminate the need for these joins and our link queries will be a lot simpler our code will be easier to read and the process of retrieving the relevant data will be a lot more efficient the technique of denormalization is often used in olap online analytical processing applications the details of olap are beyond the scope of this course very briefly in olap applications data can be organized into data cubes which makes the retrieval of aggregated data derived from multidimensional criteria efficient the data does not need to be retrieved from the transactional database tables that have been designed using normalization so basically this eliminates the need for including joins within the queries for retrieving the relevant analytical data from the database so our application is not an olap application but some of the principles that are used in the creation of an olap application are relevant to how we are going to implement our analytical functionality in our application we are essentially going to organize the data that will be displayed on our charts into appropriate shapes using appropriate link queries that will be used for querying our denormalized table i.e the sales order report database table the relevant results of the link queries will then be wired up to the relevant syncfusion chart components if this is unclear to you at the moment don't worry this will become clearer as we create the relevant code so say for example we want to create a report for total sales quantity broken down by state or location the aggregated data quantity of sales is derived summed up by the location dimension so within our data we have the concept of dimensions and measures the dimension here is the location and the measure is the quantity of sales which is aggregated summed up by location so if we add another dimension this will of course effect the aggregated data for example a period of time could be our other dimension for example we could further aggregate the data by the months of the current year displaying such data in a chronological order by months shows progress or lack of progress in terms of sales performance over a period of time per location so the aggregated data is the quantity of sales the measure and the dimensions of the data are the period by month and the location by state so let's create the code for generating our denormalized database table let's create a class within the entities folder named sales order report this model is going to have quite a few properties so just a reminder you can copy the relevant code from github if you'd prefer rather than follow along with me as i create the properties for this class and you can see that we are including fields from the relevant transactional database tables each row in the table we are about to create will denote an order item in each row in this table in addition to the order item information we are also including for example the relevant client information i.e the client responsible for the order the employee information i.e the sales rep responsible for creating the order in the system the order date time the location where the order was initiated etc any information that we may wish to include in our analytical data is being included in this table the table is denormalized a lot of the data is going to be redundant in other words the data is repeated in each of the rows whereas in a normalized structure the normalization process serves to eliminate data redundancy and increase data integrity great so we have created our class that represents the sales order report entity let's create the appropriate db set property within the sales management dbcontext class let's generate a migration and let's update the database the next step is to appropriately include code to add relevant order information to our sales order reports table when an order is created note that in an olap application relevant analytical data wouldn't necessarily be captured in the database in real time i.e as the order is created in an olap application the data may be collated from for example the relevant transaction databases and transferred over to a separate database in a separate process that runs for example once a day in the early hours of the morning the data for analytical purposes could for example be stored in a data warehouse for the sake of simplicity in our example we are simply going to capture the data into our sales order reports table at the time at which the order is processed let's create a private method for inserting the relevant data into the sales order reports table in the interests of time i'm going to paste the relevant code that i've prepared offline into our private method please feel free to copy the code for this method from the relevant github web page then we can call our update sales order reports private method after the order data has been inserted into the relevant transactional database tables i.e the orders table and the order items table so we could run this in an ef core transaction so all three processes i.e inserting data into the orders table the order items table and the sales order reports table are executed in one process i.e if one process fails then all processes fail i won't implement this code as a transaction at this point but this is something that can easily be done here using ef core functionality i have however included the relevant transaction code in the version of the code that resides in the github repository that stores the code for this application please see a link to this repository below in the description so let's run the code to see if our order data is being captured in our sales order reports table excellent before we create the code for our charts in our razor component let's remove the data from the sales order reports table the order items table and the orders table so let's create report related models that will serve as the types for the objects that store the data for specific reports let's first create a folder within the models folder named report models within the report models folder let's create a class named grouped field price model this model represents the type for an object that stores aggregated price data for a particular grouped field that will be specified in the relevant link queries used for querying and shaping the returned analytical data let's create an interface named i sales order report service let's create a method definition for a method named get employee price per month that is responsible for returning analytical data for a particular sales rep and show the employees gross sales broken down by month for the current year the first chart we are going to create will be a bar chart that displays the gross sales value per month for the logged on employee the sales rep we are only going to create the relevant login functionality toward the end of this course so for now we are going to hard code the relevant employee id to nine which is the id for the sales rep named benjamin lucas in our employees database table let's implement the code logic for our i sales order reports service interface in a class named sales order report service so in the get employee price per month method let's create a link query that returns the gross sales per month for benjamin lucas note that i haven't specified the year in this query we are going to assume that the data in our database only applies to the current year note that i have included the relevant filter code in the where clause in the version of the code that resides in the relevant github repository ie to filter the relevant data by the current year great and that is our query we are ready to create the code for our first chart which will be a bar chart so let's go to our charts razer component let's first install the relevant nuget package so in order to use the syncfusion charts we must install the syncfusion.blazer.charts nuget package let's choose version 20.1.0.58 to keep consistent with the versions of the other syncfusion components we can always update our components to the latest version at a later stage let's include an appropriate using directive at the top of our code to reference the syncfusion.blazer.charts namespace let's create a div container element where our sync fusion chart will reside let's override the uninitialized async blazer lifecycle event handler method let's create a list property that stores objects of type grouped field price model the grouped field price model type resides in the sales management app.models.report models namespace many of the types that we'll create within the sales management app dot models dot report models namespace will be used across other razor components so let's create an appropriate using directive that references the sales management app dot models dot report models namespace within the underscore imports.razer file let's write code so that an object of type i sales order report service is injected into our razor component at runtime let's appropriately call the get employee price per month data method on the sales order report service object and assign the returned data to the appropriate property let's register the i sales order report service type for dependency injection within the program.cs class let's create the code for our first syncfusion chart let's give the title property of the sf chart component a value of sales gross forward slash month let's include the chart primary x axis element within the sf chart element let's set its value type property to syncfusion.laser.charts.valuetype.category let's include the chart series collection element within the sf chart element let's include a chart series element within the chart series collection element we are about to set the data source property for the chart series element but before we proceed with this let's rename the property that stores the data source data to a more appropriate name right let's set the data source property of the chart series element to our grouped field price data property let's set the xname property to the grouped key field property name of the group fieldpricemodel type let's set the yname property to the price property name of the grouped field price model type lastly let's set the type of our chart to bar chart we can do this by setting the relevant type property like this let's run our code and that is what i would expect seeing as we don't yet have any data in the sales order report database table so we are now able to insert data into the sales order reports database table through our application so let's do that let's click the products nav menu link and let's use our ordering facility to place an order great and let's now invoke the charts razor component and the relevant data is now displayed on our bar chart we don't have a lot of data yet so our chart is not displaying a lot of information let's create a few more orders to generate more report related data in our database to make our data more interesting let's go into sql server management studio and modify our order data so that our data reflects that some of the orders were made in different months of the current year great and our bar chart looks a lot more interesting now great so we have created our first chart which is a bar chart let's create a donut chart i love these charts but in particular i love doughnut charts let's first create a model in our report models folder let's name this model grouped field qty model let's create a new method definition within our i sales order report service interface named get qty per product category that will be responsible for returning data reflecting the quantity sold by an employee for each product category let's implement the code logic for the get qt wiper product category method as you can see we are grouping the data by product category here in our link query we should include a where clause that filters the query by the employee id of 9 benjamin lucas's id but these sort of specifics don't matter at the moment because everything currently has been done by benjamin lucas as we have hardcoded this id for the order capture functionality so we are assuming benjamin lucas has logged onto the system and is viewing data pertaining to his sales let's go to our charts.razer file let's create a property that will be the data source for our donut chart let's use our sales order service object to return the data for our donut chart from the database to our razor component so let's create the code for our donut chart so in order to do this let's include syncfusion's sf accumulation chart element in our code like this as you can see the code is very straightforward we include the appropriate elements declaratively in our code with the appropriate settings regarding how we want our donut chart to look let's set the data source property to our grouped field qty data property we can then declaratively set the dimension for our analytical data we must set the xname property of the accumulation chart series element to the grouped field key property of our grouped field qty model type we must set the y name property to the qty property we are able to customize our chart through various settings please view the comprehensive documentation provided by syncfusion for more detail on the chart components we are just scraping this surface here you are able to customize your charts in various ways the functionality in the sync fusion charts is very sophisticated and as you can see syncfusion has made it very easy for developers to leverage the sophistication of the charts through the implementation of simple declarative code let's run the code and see what our donut chart looks like excellent and we can at a glance see how many products benjamin lucas has sold for each product category great let's create another type of chart a line chart so let's first create the functionality to retrieve the data for our line chart let's create a definition for a method named get qty per month data which will be responsible for retrieving data representing the quantity of products ordered through benjamin lucas and the data is broken down by months of the current year we can reuse our grouped field qty model type for the objects in the list returned by this method let's implement the logic for our new method so the code structure for our new method is very similar to the code structure for the get employee price per month method so let's start by copying the code in the get employee price per month method and pasting it into our new method so we are grouping the data by month and summing up the quantity of sales made for each month this analytical data applies to the sales rep benjamin lucas so we are filtering the data by his employee id of nine let's go to the charts razor component and wire up the line chart with the data retrieved using the sales order service object let's rename the data source for our donut chart to a name that is more descriptive and let's name the property that will store the data for the line charts data source qty per month data let's also change the name of the property that stores the data for the data source of the bar chart to a name that is more descriptive okay so let's write the code that retrieves the data for the line chart and assign it to our new property qty per month data so the code for our line chart is very similar to the code for our bar chart the first chart we created note however that we are setting the type property in the chart series element to chart series type dot line to make our data more interesting let's place a few more orders let's go into sql server management studio and alter the months of the order date time field for some of our captured data so we have a better spread of our data as it were across more months let's look at our charts and that data looks a lot more interesting let's look at our line chart excellent our line chart looks great you can see the quantity of sales made by benjamin lucas broken down by the months of the current year excellent so these charts look great but our layout for the charts could use some attention let's build our first dashboard for the sales reps where these charts will be presented in a great looking layout appropriate for a dashboard we are going to use syncfusion's sf dashboard layout component to implement the layouts for our dashboards let's create a razor component named sr dashboard the sr stands for sales rep let's create an appropriate route directive at the top of the razor file using the at page directive let's include an appropriate link within the nav menu razer component if we navigate to this syncfusion web page that can be found at this location a link to this location has been included below in the description we have the source code for a layout that would be appropriate for our requirement so if we click the source tab here let's copy this code and paste it into our sr dashboard razer file we don't have a sample base component class and we don't need this inherits sample base component line of code here so let's remove it for our requirement we don't need the using theme helper line of code either so let's remove it and you can see that we need to install syncfusion's sf dashboard layout component so let's invoke the new get package manager window from within visual studio let's search for syncfusion.blazer.layouts and this is the package that we want to install let's install version 20.1.0.58 let's run the code great so these are obviously not our charts but are the ones that are provided in the syncfusion demo documentation so the next step is to replace the charts currently displayed within the sr dashboard razer component with our charts so let's appropriately copy the chart related code from our charts razer component over to the sr dashboard razer component let's first override the uninitialized async method and copy and paste the code for retrieving the relevant data from our database ie of relevance to the sales reps analytical data right so let's appropriately replace the code for the charts with our charts code let's start with the bar chart okay so we have a few chart references in the sample code here let's include a reference to chart 1 within our bar chart component to fix this issue great let's modify the heading in our layout pertaining to the bar chart to something more appropriate let's copy and appropriately paste the code for the donut chart into our sr dashboard razor file great and lastly the line chart let's include a reference within our line chart to chart two as the sample code that we have copied from the syncfusion demo documentation uses a reference to chart 2 in code excellent if you have missed a step during this section of the course and something isn't working as expected please refer to the code in the relevant github repository and look at how easy it has been to generate a sophisticated dashboard using the appropriate sync fusion components and we can now watch our charts change appropriately as we place more orders through the system excellent and let's remove the data related code that is not relevant to our functionality that we copied from the syncfusion documentation we are now of course using the data from our database for our charts we have effectively created the dashboard functionality for our sales reps and we can now delete the chartsrazer component from our project great so we have removed the chart.razer component note that offline i have changed the employee management link label to admin so we have just created a dashboard for our sales reps let's create a dashboard for team leaders all of our dashboards will have the same layout but of course the charts will be different depending on whether the logged on user is a sales rep team leader or sales manager so each employee will only see one dashboard when the employee logs on to the system when a sales rep logs onto the system the sales rep will see a link presented within the main menu of the sales management application that points to the sr dashboard component when a team leader logs on to the system they'll see one dashboard link in the main menu but when their dashboard link is clicked the tl dashboard razer component will be invoked we are going to create the code for the tl dashboard raiser components in this section of the course we'll then create the sm dashboard which will only be made available to the sales manager so let's first create the data retrieval functionality for the reports relevant to team leaders let's open the i sales order reports interface and create a definition for a method named get gross sales per team member data which will be responsible for returning data containing the gross sales value for each team member the data retrieved by the relevant method will be displayed on a bar chart let's implement the code logic for this method definition so i'm just going to move this method to the bottom here so as to separate the team leader related data retrieval functionality from the sales rep data retrieval functionality so the reports pertaining to team leaders will relate to data related to their team members so let's firstly create a private method that returns a collection of employee ids pertaining to each team member that is a member of the logged on team leaders team let's name our method get team member ids and this link query simply returns a list of relevant employee ids to the calling code so let's call our get team member ids method from within our get gross sales per team member data method then we can filter the data so that the data is only relevant to the logged on team leaders team members in the where clause of our link query for now we are hardcoding the team leader's id to 3 which pertains to the employee henry andrews so for now data will only pertain to the team members that belong to henry's team note that benjamin lucas is part of henry's team so when we create orders under benjamin lucas henry andrews will as it were be able to see the relevant changes to his analytical data let's group the team members by their first names i know that this is not ideal because you may have special cases where two or more team members have the same first name for the sake of the example we are going to assume that team members have unique first names let's go back to our i sales order reports interface and create a definition for a method named get qty per team member data responsible for returning the quantity of sales for each team member the data relevant to this method will be displayed on a donut chart let's implement the code logic for this method in the interests of clarity i'm going to copy the code for our new method just below the other team leader related method the code for this method is similar in structure to the previous method we wrote so let's copy the code from the previous method that we wrote related to team leader analytical data and paste it into our new method and then let's change the bits that are different the aggregated data in this case is based on the sales quantity rather than gross sales value the summed up quantity value is of type integer and not decimal so we can remove the code here where we are rounding off the relevant value to two decimal places lastly let's create a definition for a method named get team qty per month data this method will be responsible for retrieving the quantity of sales pertaining to the team itself overall and the data will be broken down by the months of the current year the data for this will be displayed on a line chart let's implement the logic for the get team qty per month data method let's create a razor component named tl dashboard we are going to use the same layout for all three of our dashboard razer components so let's start by copying the relevant code from the sr dashboard component and pasting it into our tl dashboard razor component like this then let's change the code so that the data for the team leader related reports data is retrieved using the sales order report service object the first two charts the bar chart and the donut chart are very similar to the first two charts that we created in the sr dashboard razor component so let's adapt the existing code for these charts for the data pertaining to a dashboard appropriate for team leaders like this for now let's focus on the two charts and we'll implement the code for the line chart the third chart in a bit so before we run the code so as to look at the bar chart in the donut chart for team leaders let's delete the line chart we'll deal with the line chart appropriately in a bit right let's run the code the last chart had a at ref attribute pointing to chart two so let's remove the reference to chart two from our code for now let's run the code great the charts are displaying data for only one sales rep at the moment because the data is reflecting the fact that only benjamin lucas has created orders in the system for the team leader henry andrews let's modify the data a bit within sql server management studio to reflect that other members of the team led by henry andrews have also created orders in the system so to do this let's go to sql server management studio and modify the data in the sales order reports database table accordingly if we look at the employees we can see that olivia mills benjamin lucas sarah henderson and noah robinson are members of the team led by henry andrews the report's two empire d field contains the value of three for these employees which is the id value pertaining to the employee record for henry andrews so let's open the sales order reports database table within sql server management studio and update the data so that it looks like the other team members have also created orders within the system great let's implement the code for the line chart here like this this is essentially the same code implemented for the line chart in the sr dashboard file the only difference is we need to change the data source property to point to the relevant team related data so let's change the data source property appropriately for the line chart let's run the code excellent let's create an order through our application and see how this affects our charts excellent let's create the data retrieval functionality for our sm dashboard razor component so we are creating the dashboard functionality for the sales manager so the bar chart and the line chart are going to be more complex for the sales managers dashboard we are adding another dimension to the data this means we need to create appropriate new model classes for the sales manager reporting functionality so let's create a model within the report models folder named location product category model so we are going to group by location and pivot the data so that the quantity of sales can be reflected on our bar chart for each product category so to do this we first include the column by which we are going to group the data then we can include columns denoted by properties for each of the product categories in our system so mountain bikes road bikes camping hiking and boots let's create a model named month location model so with this model we are shaping the data where the relevant collection of data is grouped by month of the date when the relevant orders were made and as it were pivoting on the location of where the orders were made let's open the i sales order reports interface and create the relevant method definitions let's create a definition for a method named get qty location product cat data this method will be responsible for retrieving the summed up sales order quantities by location and product category a bar chart will be used to display this data let's create a definition for a method named get qty per location data this method will be responsible for retrieving quantity of sales data grouped by location a donut chart will be used to display this data let's create a definition for a method named get qty per month location data this method will be responsible for retrieving quantity of sales data grouped by month and location great let's implement the logic for each of these methods great let's create a razor component named sm dashboard let's start by copying the relevant code from the tl dashboard component and pasting the code into our sm dashboard component like this let's remove the current chart related code from our sm dashboard.razer file let's appropriately update the data retrieval related code so that the appropriate data is retrieved for our sm dashboard component so you can access the code for the sm dashboard razer file on github at this location we are going to add the code for each chart one at a time so we can copy the relevant chart code from this github web page and paste it into the sm dashboard.razer file when appropriate let's start with the bar chart so let's paste what we have copied from the relevant github web page here please feel free to copy the code from the relevant github web page a link to the webpage has been included below in the description let's include a width property for our bar chart you can see here that each chart series for our first chart pertains to a product category so for each chart series element we are setting the xname property to location this is the property on which our code is being grouped the y name property is set to the relevant product category so we are declaratively telling the fusion chart component as it were about the dimensions of our analytical data we can adjust the maximum property so that it suits the sales quantity values that we currently have saved to our system we could bind this property to a calculated value so that the chart adjusts appropriately in response to greater quantities of sales saved to the system then we are also able to set the interval for the yaxis here again this property could be set to a property value that is calculated on the fly so that the chart automatically adapts appropriately in response to the values saved to the database i've appropriately altered the data through ssms a bit offline don't be afraid to play around with the data in the sales order report table to see how the data affects the charts the code for the donut chart is fairly basic the code for the donut chart is structurally the same as the other donut charts that we have implemented in this course great so i'm just going to paste the code in here for the line chart please feel free to copy the code from the relevant github webpage for the implementation of the line chart and look at that that is excellent let's alter the data a little bit so that the relevant order data pertains to more months of the year excellent please consult the sync fusion documentation for more details about the charts we are only scraping the surface here these charts are fantastic and can be customized in many ways to suit your requirements syncfusion has provided excellent comprehensive documentation on how to customize the charts there are also many other types of charts that can be used in your applications so please dive into the syncfusion documentation i think you'll be amazed as i am as to what can be accomplished using the syncfusion chart components and you can see that the syncfusion layout component and the chart components are fully responsive on smaller screens excellent in this section of the course we are going to integrate syncfusion's diagram component into our application through the syncfusion diagram component we are going to implement functionality so that the sales manager is able to see the hierarchical structure of the sales department each node in the diagram contains a profile picture of the employee as well as basic information about the employee to create this functionality we'll integrate the syncfusion diagram component into a razor component the sales manager will be able to invoke the relevant razer component from the main menu of the application and at a glance see basic information about each employee and the employee's position within the organization the sales manager has admin privileges so is able to access the employee management component and can use the syncfusion data grid to change employee details so the sales manager can use the data grid to shuffle around team members for example change who a particular sales rep reports to ie change the team members team leader the sales manager can then invoke the razer component containing the sync fusion diagram that displays the organizational structure and the change made to the organizational structure using the data grid will be reflected in the diagram component so let's start by creating a model named organization model within the models folder this model supports data for relevant employee details and provides a way for each object in a list of objects derived from this class to appropriately reference other objects of the same type in a way that a list of objects of this type can represent a hierarchical structure for example the reports2id property will either store an empty string or an employee id if the reports2id property stores an empty string this means that the employee that the relevant object represents is the head of the organization and doesn't report to anyone when the reports to id property for an object stores an employee id this means that the relevant employee that this object represents reports to the employee whose employee id is referenced by the reports to property of the relevant object so in this way each object of type organization model stored in a list of objects of this type can be appropriately related to one another to form a hierarchical structure in a bit you'll see how we are able to wire up a list containing appropriate objects of the organization model type to the sync fusion diagram component and the syncfusion diagram component does all the heavy lifting as it were to display an aesthetically pleasing hierarchical structure containing all the employees of the organization to the screen let's create an interface in the contracts folder named i organization service let's create a definition for a method named get hierarchy that will be responsible for retrieving data representing the employee hierarchy for the sales department ie will return a list of objects of type organization model let's implement the code for the get hierarchy method let's first write an appropriate convert extension method within the conversions class so to be explicit i'm going to name our extension method convert to hierarchy this extension method simply converts data retrieved from the employees database table which is appropriately joined with records retrieved from the employee job titles table to a list of objects of type organization model then the implementation for the get hierarchy method is this simple code here let's create a new razor component named organization let's provide the appropriate routing information at the top of the razer file and an appropriate link within the nav menu.razer file so let's navigate to this webpage in the syncfusion documentation here we have the organizational tree structure that we want to implement within our application so let's go to the source code for this demonstration and let's copy the relevant code to our clipboards let's appropriately paste the code copied to our clipboards into our organization.razer file so we can see lots of squiggly lines this is because we haven't yet installed the syncfusion.blazer.diagram nuget package so let's do that let's install version 20.0.1.58 so as to be consistent with the versions of the sync fusion components that we have currently installed excellent let's write code so that an object of type i organization service is injected into our razor component at runtime let's make sure that we register the relevant eye organization service type for dependency injection let's write code to override the uninitialized async blazer lifecycle event handler method let's create a property for storing the data retrieved from our database that represents the organizational structure for the sales department then let's write code within the uninitialized async method using our organization service object to retrieve the relevant data from our database and now let's wire up the data source property appropriately in the data source settings element to the organization data property that stores a list of organization model objects retrieved from our database let's let the sf diagram component component know as it were which property in the data source contains the id value and which property in the data source contains the parent id value the parent id represents the id of the employee that the relevant employee reports to the id of the relevant employee in the data source is set to the employee id property so this is how the syncfusion diagram knows as it were about the parentchild relationship that represents the employees in the organizational structure which is of course essential information for displaying the relevant data structure as a hierarchical structure the next step is to define what information about the employee will be presented in each node on the hierarchical tree structure so within the node template element let's include the following information the employee's first name the employee's id the employee's job title we want each node to contain the employee's profile image we don't have a sample based component base class so let's remove this line of code at inherits sample base component then let's remove the code within the node template element that we brought over from the demo code provided in the syncfusion documentation that is not relevant to our requirement like this let's run the code that is awesome we are able to navigate around the diagram that represents our organizational structure and view the individual nodes more closely we can use the control plus and control minus keys to zoom in and out so that we can get a broader view of the organizational diagram or zoom in for a closer view of for example the individual nodes i.e the information of the individual employees within the organizational structure excellent we don't necessarily need to display the tree from top to bottom like this we are able to configure our sf diagram component component to display from left to right by adjusting the relevant setting like this and we can go over to the employee management razor component and pretend we're the sales manager and use the sync fusion data grid to change the hierarchical structure of our organization excellent let's clean up our code and remove the data related code that we brought over from the demo source code we are now using our own data within the organizational tree structure that is displayed through the sync fusion diagram component excellent we have been able to harness the sophisticated functionality provided by the syncfusion diagram component easily and efficiently all we needed to do was wire up an appropriate data structure as the data source to the syncfusion diagram component let the syncfusion diagram component know as it were about the specifics of the parentchild relationship in our data structure and customize the nodes presented by the diagram component to the ui we are just scraping the surface of what can be achieved using the syncfusion diagram component please check out the comprehensive documentation provided by syncfusion to further explore what can be achieved so let's say we want to integrate functionality for the employees of the sales department so that they can for example schedule appointments with other employees or for example schedule client meetings to implement this functionality we are going to integrate syncfusion's scheduler component into our application let's start by creating a razor component named appointments let's install the syncfusion scheduler component so to do this let's install the syncfusion.blazer.schedule nuget package let's install version 20.1.0.58 so that it is consistent with the versions of the other nuget packages that we have installed great let's navigate to this url in our browsers here you can see we have demo source code provided by syncfusion that demonstrates some of the core functionality that we can leverage using the syncfusion scheduler component let's go to the source code of the demo and copy the relevant code like this into our clipboards let's paste the code copied to our clipboard appropriately into our appointments.razer file let's open the navmenu.razer file and include an appropriate link to our appointments razor component and when we run our code and navigate to our appointments razor component we can see that right out of the box we have sophisticated functionality already operational we are already able to add appointments to our scheduler at a date and time of our choosing we can of course edit and delete the appointments too let's modify the current date for our scheduler to today's date so you are able to add an appointment to the scheduler by invoking the most basic dialog by clicking an appropriate cell representing a date and time i.e a date and time at which you wish to schedule an appointment you are able to doubleclick a cell to invoke a dialog where you are able to enter more detailed information about the relevant appointment you are able to easily change the view of the scheduler for example you may wish to see all your appointments for the week you may wish to view your appointments in an agenda format you may wish to view only appointments for the work week monday to friday or for the month so right out of the box we can harness some very useful functionality at the moment however we are only able to save our appointments to the scheduler component where the data only exists in memory we need a way that we can save our appointments to our database through the functionality provided to us by the syncfusion scheduler component we are able to apply our own custom code that will execute when certain events are fired based on user actions performed by the user using the syncfusion scheduler component so we can for example implement code that handles crud operations so for when a user performs certain crud operations our code can hook into certain events as it were triggered by user actions and ensure that our custom code runs when these events are triggered in this way we are able to persist any changes made regarding appointments on the user's scheduler component appropriately to our database so to do this let's start by creating an appropriate table within our database we are of course going to use codefirst migrations to achieve this so let's start by creating an appropriate csharp class within the entities folder let's create a class named appointment let's create the relevant properties for our appointment class these properties are appropriately included for our appointment database table based on the structure that is used by the syncfusion scheduler component to represent an appointment in the scheduler component so we want our code to be able to easily retrieve the data for an appointment created by the user through the scheduler and save the relevance data to our appointments database table note that some of these properties are nullable this is important because this gives the user the ability to fill in data for the relevant fields regarding a particular appointment and other fields that are not relevant to a particular appointment can be set to null let's include the appropriate db set property within our sales management db context class let's create a migration and let's run the update dash database command great let's create a class within the models folder named appointment model we can simply copy the properties from the appointment entity to our appointment model class let's create an interface named i appointment service let's create a definition for a method named get appointments responsible for retrieving all of the appointments for the logged on employee let's create a definition for a method named add appointment responsible for adding an appointment created using the scheduler component to the database for the logged on employee let's create a definition for a method named update appointment responsible for updating the data for an appointment modified using the scheduler component in the database for the logged on employee let's create a definition for a method named delete appointment responsible for removing the data for an appointment removed using the scheduler component from the database for the logged on employee let's implement the logic for a method definition in a class named appointment service let's include a constructor in the appointment service class and ensure that our constructor includes a parameter of type sales management db context so that an object of this type is injected into our constructor at runtime let's also create a private readonly member variable that references the injected sales management db context object oops we have a typo here let's remove the extra e from delete appointment first from our i appointment service interface and then from the appointment service class let's first implement code for the add appointment method firstly let's create a convert overload extension method within the conversions class that as it were converts an object of type appointment model to an object of type appointment then let's write code within the add appointment method to first convert an argument passed into this method of type appointment model to type appointment and then let's write code to add the converted object to the database through ef call functionality like this before we create the code for the get appointments method let's write a convert overload extension method that as it were transforms the list of objects of type appointment to a list of objects of type appointment model then the code that we need to implement for our get appointments method is simply this line of code then let's implement the following code for the update appointment method and the delete appointment method note that we have not yet implemented the login functionality for our application so for now let's hard code the employee id to nine which relates to the sales rep benjamin lucas to simulate that benjamin lucas is the current logged on user we need to update the convert extension method that converts as it were an object of type appointment model to an object of type appointment this will ensure that when an appointment is added to the system that at the moment the appointment will as it were be made by benjamin lucas we must also include a wear filter like this within the get appointments method to filter the retrieved appointments by the employee id of benjamin lucas let's open the appointments.raiser file let's write code to override the uninitialized async blazer lifecycle event handler method let's write code so that an object of type i appointment service is injected into our razor component at runtime let's make sure that we appropriately register the appointment service type for dependency injection let's create a property that will serve as the data source for our scheduler component let's write the code within our uninitialized async method to retrieve the relevant appointment data from our database let's appropriately set the data source property for our scheduler component let's set the t value property of the sf schedule element to tell the syncfusion scheduler component as it were about the type of objects stored in the relevant data source let's also update the tvalue property of the schedule events element to the appointment model type let's remove some of the code that we don't need for our requirement and tidy up the code a little bit so now how do we hook into an appropriate event so that our crowdrelated code fires when the relevant event is raised by the scheduler component this is actually very simple within the schedule events element we can set the on action begin property to an event handler method that we are going to create our method will of course contain the code that we want to execute when the relevant event is raised we can also write code that we want executed when our code within the method that handles the on action begin event has completed we can do this by setting the action completed property to an event handler method that we are going to write so let's first write the code for the method that handles the on action begin event firstly let's write an if statement to check what type of action has been executed by the user of the syncfusion scheduler component so if args.actiontype equals to the actiontype.eventcreateenum value we know that the user is adding an appointment so we are able to retrieve the appointment data entered by the user with this line of code and then we can add the relevant appointment data to the database using our appointment service object like this then let's create the code for the method to handle the event that is fired when the code within the on action begin async method completes so we only want code in this method to fire when the user creates an appointment let's set the at ref attribute to a property that we'll create so that we are able to reference the syncfusion scheduler component in our code using the relevant property let's create the relevant property then let's write code to retrieve all appointments for the logged on employee and let's also write code to refresh the scheduler component let's run the code and add an appointment firstly through the basic dialog we can launch this basic dialog by clicking on one of the cells let's check our database excellent so now let's write code so that when a user updates an appointment that the changes are saved to the database the code for this is really intuitive let's test the code excellent we are able to update any of the fields associated with an appointment and our changes are now saved to the database let's implement code so that we are able to delete an appointment from the database using the scheduler component excellent and you can see that we are now able to perform crud operations through our syncfusion scheduler component and any changes we make are persisted to our database so at this point we have written all the functionality for our application however for certain functionality we have hardcoded the logged on employee id to imitate a particular employee being logged onto the system we want certain functionality in our application to be available based on the context of who is logged onto the system we want certain razor components in our application to be available to certain employees when they are logged into the system conversely we want certain razor components to not be available to certain employees when they are logged into the system for example we only want an administrator to be able to access the data grid whereby an administrator can perform crowd operations on employee data the sales manager has been given administrative privileges in our system so the sales manager is therefore able to perform crowd operations on employee data through the use of the data grid component we only want sales reps to be able to create orders in the system on behalf of clients so only sales reps will be able to access the product catalog razer component we want a dashboard displayed to the logged on user based on the relevant user's position in the sales department i.e based on whether a user is a sales rep team leader or the sales manager for example we want sales reps to only see those charts in their dashboard that are of relevance to sales reps the diagram that displays the organizational hierarchy will only be available to the sales manager the scheduler is available to all employees but only the appointments added by the loggedon employee will be available to the loggedon employee so how can we achieve this contextual behavior for users logged on to our application the answer is through providing appropriate login functionality where our application can authenticate the user when the user logs onto the system and authorization can be granted for the logged on user to be able to access certain functionality in the application conversely the loggedon user may be unauthorized to access other parts of the application so to achieve this we are going to integrate microsoft identity functionality into our application very basically microsoft identity provides an infrastructure for registration and login functionality using the microsoft identity technology will make it easy to add login and registration functionality to our application and provide the authentication and authorization functionality that we have just discussed so at the point at which we created our blazer server project we could have chosen to integrate microsoft identity into our application we chose not to integrate microsoft identity into our application at that point but we are still able to integrate microsoft identity into our application even if we choose not to do so at the point of creating the initial project for our application in this section of the course that is exactly what we are going to do we are going to go through each step that needs to be performed in order to integrate microsoft identity into an already existing blazer server application that does not yet have the microsoft identity technology integrated for the performance of login registration authentication and authorization functionality let's go through this step by step so the first step is to make our sales management db context class inherit from the generic identitydbcontext class which accepts the identity user type as a type argument we are doing this because we are going to house the microsoft identity database tables within the same database as where the database tables of our application reside we could create an entirely new dbcontext class for our microsoft identity functionality but our application is selfcontained and monolithic so in the interests of simplicity let's simply create the microsoft identity tables within the database we are already using for our application as you can see we have a red squiggly line here if we position our mouse pointers appropriately and press ctrl period we can see that we are missing the installation for an essential nuget package microsoft dot asp.net core dot identity dot entity framework core we can install the latest version of this nuget package at this point by clicking on the find and install latest version menu option presented to us through visual studio so let's do that and visual studio has done the appropriate installation and has also included the appropriate using directive to the relevant namespace at the top of our code microsoft.asp.net core dot identity dot entity framework core great the next step is to add the identity templates representing the functionality that we wish to integrate into our application for example login registration and logout functionality so to do this let's right click on the project node in our solution explorer window and select add new scaffolded item select identity on the left here click add you can see that we are presented with a variety of files that we can integrate into our application identity provides a suite of rich functionality but we are currently only interested in registration and login functionality so to include the appropriate identity features into our application let's check the check boxes next to account slash login accounts log out and account slash register the next step is to click the plus button next to data context class our application has a monolithic architecture it is a selfcontained application so we are going to integrate the identity database tables into the same database as the database where our application database tables reside so in the dialog that has just popped up let's enter the name of our already existing dbcontext class sales management db context let's click the add button on this dialog then let's click the add button on the main dialog at this point if you haven't followed the steps where we made our sales management db context class inherit from the identity db context class an exception will be thrown we have made our sales management db context class inherit from the identity db context class so we have no problems we must however make some adjustments to our program.cs class so let's go to the program.cs class visual studio has added in code add db context which is causing duplication of code so let's remove this add db context code here let's paste our original connection string related code over the connection string code that visual studio has added to program.cs then you can see here that visual studio has added code to program.cs that is appropriate for integrating microsoft identity into our application we must have the add default identity method being called here for simplicity let's modify this code here options.signin dot require confirmed account equals true to read options.signin dot require confirmed account equals false by setting this to false we are telling the identity system as it were not to include functionality where the user has to confirm the user's identity by clicking a link sent to the user's email address great so let's create a migration that will generate the necessary code for generating the identity tables in our database great let's run our migration code by running the update database command excellent the next step is we are going to create code to register certain employees with the identity system whose records exist within the employees table through our code these employees will be put into certain roles for example the sr identity role will contain employees who are sales reps the tl role will contain employees who are team leaders the sm role will contain the sales manager the admin role will contain employees who are able to perform cred operations on employee details the sales manager will be included in both the sm role and the admin role so firstly let's generate a migration notice that this migration class doesn't contain any code logic but just the structure for a migration class so we are going to create the code for this migration class to register certain employees with the identity system and add the employees to their appropriate identity roles in the interests of time i've already prepared the code for this off screen so we are going to copy the code from this github location a link to this location is available below in the description of this video and paste the code appropriately into our migration class here so each user and each role in the identity tables must be associated with a unique gurd global unique identifier in the identity tables guides are used as primary key values so let's generate new goods for these constant string values let's replace the goods that i generated for this sample code with newly generated goods an easy way to do that is to navigate to this url we can then type in the number of goods we would like to generate so we want 11 goods we can then generate the goods and copy them to our clipboards let's paste the goods into our code here and comment them out then let's replace the existing goods assigned to our constant values with the new goods that we have just generated great let's paste the code in for the up method like this notice that for the sake of simplicity the password for each of the employees that this code will register with the identity system will be password one with the p capitalized and an exclamation mark character so password one exclamation mark is the password let's bring in the microsoft dot asp.net core dot identity namespace let's copy the code for the private methods that are being called from within the up method and paste these private methods appropriately into our migration class let's copy the code for the down method and appropriately paste the code into our down method here let's paste in the code for the private methods that are being called from within the down method let's invoke the package manager console window and run the update database command let's view our database within sql server management studio excellent so in order to include identity role based functionality in our application we need to include the add roles method like this here within our registration functionality regarding identity we must also include a call to these methods in our program dot cs class so that our application knows as it were to include this identity middleware in our application so please appropriately include the following code app.use dot authentication authorization the next step is to ensure that an antiforgery token is passed to the client this antiforgery token can then be passed to the server with each client request the benefit of this is that our code will be able to verify that the client accessing our code is a trusted client we don't want just any client to be able to access our code we only want trusted clients accessing our code one of the ways that hackers can overcome our security is through crosssite scripting so the next step is we need to include antiforgery token functionality in our application to do this let's first add a class named tokenprovider to our data folder let's include string properties within our token provider class the xsrf string property and the refresh token property so let's open the underscore host dot cs html file and write code so that an object of type microsoft dot asp.net core dot anti forgery dot i anti forgery is injected into this page at runtime this is where we are going to generate the token and pass the token into our application let's write code to use the injected object to request a token let's create an object named tokens derived from our tokenprovider class and then assign the returns token to the xsrf token property of our tokenprovider object within the component element let's add a property named param initial state and set its value to the tokens object this is how we are passing our token to our application we are passing the tokens object to the app razer component let's appropriately update the app razer component let's write code to inject an object of type token provider into our appraiser component at runtime let's include a using statement that references the namespace of where our tokenprovider class resides within the underscoreimports.razer file the cascading authentication state element wraps the router element we need to change the root view element to an authorized root view element we can remove this line of code here so when the appraiser component loads up we want to assign the initial state parameter that we are passing down from the underscore host dot cs html page and we are going to set the xs rf token property of the token provider object injected into this razor component at runtime to the xsrf token property of the tokenprovider object passed into the initial state parameter next let's create our own login display component note that if we had included identity functionality at the point when we created our blazer server project a file for the login display component would have been generated for us by default in our particular scenario we are going to create our own login display component so let's create a razor component named login display let's write the code for our login display component so here we have code that is responsible for injecting a token provider object into our component at runtime our html code is wrapped in an authorized view element if the relevant user is authorized a welcome message and a logout button are shown to the user if the user is not authorized a register button and a login button is presented to the user notice that we have a hidden input field included in the html code our token provider object's xsrf token property is stored within the hidden text field then we need to reference the log and display eraser component appropriately within the main layout raiser file next let's add a razor component to our shared directory named redirect to login let's include this code within the redirect to login raise a file as the name suggests this code is used to redirect a user to the login page and that is basically it let's see if we can log into our application oops what have we done wrong we have not registered our token provider type for dependency injection let's go to the program.cs file and write the code for this let's run the code great we are presented with the default login screen provided by identity let's log in as one of the employees who is a team leader henry andrews great but we haven't created any authorization functionality in our application yet so by default anyone can just access any functionality within the system so we can click the log out link to log out of our application like this let's write code so that the links to our razer components are only accessible to relevant employees so let's restrict the visibility of the link to the tl dashboard razor component within the nav menu razer component so that it can only be seen by members of the tl role tl of course stands for team leader we can achieve this by wrapping the relevant link in the authorized view element we can then set the elements roles property to tl like this note that if we wanted to include more than one role value within the roles property all we would have to do is separate the relevant values by a comma so we would provide a comma delimited string containing the relevant roles let's run the code you can see that the tl dashboard is not visible when we first launch the application however if we log in as henry andrews who is a team leader and therefore a member of the tl role we can now see the link to the tl dashboard razer component in the main menu excellent the moment we log out the link to the tl dashboard razer component is no longer available if we log in as benjamin lucas who is a sales rep and not a team leader once he has been authenticated we still can't see the link to the tl dashboard component because he is not a team leader and therefore not a member of the tl identity role let's restrict the link to the sr dashboard razor component so that only sales reps ie members of the sr roll can see this link so if we launch the application we can no longer see the link to the sr dashboard razer component if we log in as a sales rep there it is great if we log in as henry andrews a team leader he is not able to see the link to the sr dashboard raise a component because he is not a sales rep and not a member of the sr identity role so in order for the correct data to be added to the system and the correct data to be retrieved from the system pertaining to the logged on employee let's write code to replace the hardcoded employee ids for relevant functionality with the employee id of the logged on employee so how can we do this so the data we have registered in the asp.net users identity table contains employee email addresses which of course are unique and they match up to the relevant email addresses saved for employees in the employees table our code is going to use the email address retrieved through identity when a user logs on to the system to query the employees table in order to as it were retrieve the logged on employees employee object then the employee's id can be read from the relevant employee object and we can use the employee id value appropriately in our code rather than a hardcoded value to do this let's create an extension method within the conversions class named getemployee object this first parameter is of type system.security.com principle this will allow our code to call the get employee object extension method on the user object of type system.security.claims.claims principle that will be available to our code once a user has been authenticated after the user logs onto the system we'll look at the user object in just a bit so we can use the user objects identity.name property which returns the email address registered in the asp.net users identity table for the employees that we registered through running the relevant migration that we created earlier we can use this email address which is also the user's username to query the employees table and return the appropriate employee object to the calling code like this great so let's first change the code in the order service class so that the relevant employee id is no longer hard coded to the employee id pertaining to benjamin lucas so we need to be able to access the user object which is an object that will be available once a user is authenticated to gain access to the user object let's first create a parameter within the constructor of the order service class of type authentication state provider let's create a member variable to reference the injected object let's create a private method that first gets a reference to the user object like this and then we can call our get employee object extension method on the user object and return the relevant employee object to the calling code like this within the create order method let's call the get logged on employee method to reference the employee object of the logged on employee and replace the hardcoded value of 9 with the logged on employees employee id great let's create the same logic for the sales order report service class like this and let's do the same for the appointment service class when we ran our migration that registered certain employees we registered the following employees within the identity system we registered bob jones the sales manager as a member of the sm role and the admin role we registered henry andrews who is a team leader and a member of the tl role we registered all the members of henry's team i.e the sales reps benjamin lucas olivia mills sarah henderson and noah robinson so now if we log in as henry andrews great the hardcoded employee id 3 is no longer used to retrieve the relevant data the id for the logged on employee is instead used excellent the same is true for benjamin lucas excellent let's login as olivia mills and we don't have much data for olivia mills but the system is reflecting the correct data for olivia mills who is a sales rep let's login as sarah henderson great and you can play around with the data in the sales order reports table to create more interesting data for the sales reps let's go to the nav menu razer component and appropriately write code so that only the functionality appropriate to the logged on user is available to the relevant user excellent let's log in as bob jones the sales manager and operate the application from his perspective excellent and you can see we have now appropriately integrated microsoft identity into our application where appropriate authentication and authorization functionality has now been implemented we are currently appropriately making the relevant links in the main menu visible to logged on users based on the roles to which they belong at present however a user could currently still access any razor component despite not having the appropriate privileges by simply typing in the url of the relevant razer component so to prevent this we can also restrict access within the razer components themselves one way of doing this is by appropriately including the authorized attribute within the relevant razor component like this and now access to these razor components are prohibited for unauthorized users excellent just to add an air of authenticity to our fictional company i've created a basic logo very quickly in photoshop for our fictional company outdoor excellence or oexl for short you can download the image from this location of course you're welcome to create your own company and company logo for the application but if you'd like you can download the one i created from this location on github to present the logo to the user when the user first launches the application let's include this code within the index raiser component please feel free to copy the code from github let's also include the logo within the nav menu razer component let's open the login display razer component and style the buttons for the login logout and registration functionality let's remove the about link from the main layout razer component let's include the login display element appropriately within the nav menu razer component so that the login and registration related buttons are available on mobile screen sizes within the main menu note we are including the d sm none bootstrap class in the container element that contains the login display razor component reference so that the relevant buttons only show up in the nav menu razor component when the app is running on mobile devices i.e when the app is only being presented on small screens let's add some meaningful icons provided by font awesome to the links in our main menu ie in the nav menu razer component let's include an appropriate font awesome link element within our underscorelayout.cshtml page which will give us access to the font awesome icons font awesome cdn is the easiest way to get font awesome on our web application let's search the font awesome website like this for some appropriate icons and appropriately include them within our nav menu razer component for our links great and lastly i want to import the quicksand google font from within the site.css file and reference this font in the fontfamily css property for our pages html and body elements excellent and that's it that is our application finished i've thoroughly enjoyed creating this course and i hope you've enjoyed going through it with me if you have gone through the whole course congratulations you are now able to build a sophisticated blazer server application using sophisticated syncfusion components and microsoft identity i hope to see you again soon thank you and take care