hey and welcome to this free course on the css grid layout module css grid is actually a whole new way of creating website layouts it'll give you more flexibility than any other layout system or framework and it's also pretty intuitive to learn before we jump into the course i want to point out that what you see in front of you now is not a normal video it's an interactive scrimba screencast and that means that you as the viewer at any given time can jump into the code and change it you can for example head over to the index.css and change the color value for the h1 tag to let's say black then see how your changes affected the output in the simulator window here so feel free to do this whenever you feel the need for experimenting with the code so that you make sure that you properly understand what we're going through okay so why do you want to learn about css grid well first of all because it makes your life a whole lot easier when it comes to creating two dimensional layouts which basically almost all websites consist of secondly as you'll see it'll make your markup significantly simpler it'll also give you a lot more flexibility when it comes to changing the layouts for example through responsiveness and it'll also enable you to actually skip frameworks like for example bootstrap and finally css grid is now supported by all the major browsers and the support amongst global website traffic is climbing quickly to learn exactly how many percent at the time you're watching this screencast check out this url here now let's kick off the course by looking at the benefits css grid has over a framework like bootstrap here we have created two mockups for a website this one is done using css grid and this one down here is done using bootstrap the layout contains a header a menu content and footer the markup is found in the examples.html here you can see the html for the bootstrap example and here we have the html for the grid example and we can instantly see that the css grid markup is significantly simpler than the bootstrap markup because gone are all the unnecessary row items and the ugly class names so as i mentioned css grid will make your markup cleaner benefit which of course would become much more apparent if we were to turn these two examples into fullblown websites however this of course doesn't tell the whole story as the grid example of course needs css which you can see here in the examples.css here is the css needed to create our grid example conceptually what's happening here is that instead of trying to define the layout which is the columns and the rows in the html we're rather defining everything in the css and this brings us to our next benefit which is that this separation gives you a lot more flexibility let's say that you for example want the menu here to appear up besides the header when it's being viewed on mobile to make this happen in our css grid example we simply create a media query and then we target the items which we want to change according to the new layout which is the header the menu and the content and then simply give these their new values and the result is that when we shrink the page and if you look at this css grid example you can see that boom there the menu item jumped up to the top row the header moves all the way to the right and the content took up the entire second row we can change back boom like that now if we were to try this in bootstrap we'd quickly realize the downside of having the layout defined in the html because what you want to do here is to make this menu item jump up to the first row up here however that's not trivial because the menu item is already trapped in the second row down here and in order to move it up to the first row we actually have to change our markup we have to cut away this element down here and paste it in up here that's not something you can do based upon a simple media query in css you can of course do it in javascript but that's hacky and more complex so what you want to do instead is learn css grid and i'm going to teach you that in this course so just sit tight and we'll start the next lecture right away hey in this screencast you're going to learn how to create grids through defining its rows and columns a grid consists of two main elements there's the container which we have here and then there's the items which are the elements inside the container in our case six divs which display the numbers from one to six now without any grid layout this results in six divs stacked on top of each other i've also given them a little bit of styling but that has nothing to do with the grid layout itself to turn this container into a grid we're going to target it and give it a display of grid if we run the code that won't result in any layout change yet because we haven't defined how we want our grid to look like so by default it only has one column and thereby it looks like we've just stacked six divs on top of each other in order to specify the columns we'll give the container a grid template columns will define how many columns and how wide we want them to be let's set the first one to a hundred pixels the second one to auto and the third one 200 pixels as well auto in this case means that the column will take up whatever remaining space there is in the width let's also give the grid a couple of rows with template rows and let's give both of them a height of 50 pixels so in the grid template columns property you define the width of the columns and in the grid template rows you define the height of the rows and as you can see we have a nice little grid here as expected it contains three columns going from top to bottom one two three and two rows going from left to right one two since the second column here is set to auto this grid is also responsive in order to make the grid look a little bit nicer i want to give it a grid gap property and set it to three pixels as you can see that gives a nice little gap between the items now let's say we don't want our grid to be three columns wide and two rows long but rather two columns wide and three rows long then we simply need to remove a column we can remove this last one here for example and add a row 200 pixels down here if we run the code you can see that we have a completely different grid two columns one two and three rows one two three the two first rows are 50 pixels tall however the third one is 200 pixels and the grid is still responsive as the second column is set to auto so in the next screencast i'm going to show you a few more ways of setting these values inside the template columns and grid template rows but before we jump on to do that i would recommend you to jump into the code here and play around with the values so that you're 100 sure that you understand the relation between what's going on here in the css and how that plays out in the simulator over here so go ahead and do that and i'll see you in the next screencast hey there in this screencast i'm going to teach you a better and more powerful way of defining columns and rows as you can see we're now working in the index.css file and not directly in the html file that's because doing it in the index.css gives us the benefits of automatic updates in the browser window so we have this very simple grid here which you probably recognize from the previous cast it got three columns the first one being 100 pixels wide the second being auto and the third is set to 100 pixels as well so this grid is responsive as the second column grows and shrinks with the width of the container we also have two rows which are 50 pixels each now the first thing we're going to do is change the responsiveness of the grid because let's say that we want all three columns to grow in size as the container grows in size we want them to be equal regardless of the width in order to achieve that i'm going to teach you a new value which css grid brings with it it's called fraction unit and it's written like this one fr let's set all three columns to be one fraction unit each we'll do one fr for the second one and for the third one and now as you can see they all grow and shrink equally so what happens here is that the grid splits the entire width into three fractions and each of the columns take up one fraction unit so if we change the second one here to two fraction units you can see that it'll always be twice as wide as the first and third column because now the grid has split the entire width into four fraction units and the second one takes up two of those while the first and third column take up one each okay so let's go back to having each of the columns equally wide in this case we could actually write this in a simpler way we could do repeat times one fraction units as you can see it gives the exact same result so the first parameter of the repeat function is the amount of rows or columns and the second one is the value which is the height or the width of the rows or columns so let's say we want six columns instead then we can simply change this number here to six instead and as you can see now our six items fill up only one row as we have six columns and six items in this grid so let's go back to three we can also do the same with the rows of course it two times 50 pixels finally i also want to show you a simpler way of defining the rows and columns because we can use the shorthand method for this so i'm going to copy the rows value here and remove that line and also remove the dash columns i'm going to paste in the rose value forward slash and then let the column value come after that and that'll give the exact same result so grid template is the shorthand method for grid template columns and grid template rows and it can be a bit hard to remember which one of rows or columns goes first and which one goes last and the rule i use to remember this is to think of it as drawing an l you start at the top and go downwards across the rows and then you go to the right across the columns start with the rows and then the columns so in the next screencast you're going to learn how to adjust the size and position of the items in the grid so stay tuned and i'll see you there hey in this screencast you're going to learn how to adjust the position and size of the items on the grid which is critical to know in order to create realworld websites with css grid we're going to create a mockup for website and here in the index.html you can see the markup for that as you can see we're targeting each of the items using a class name header menu content and footer to start with we have this 2x2 grid each of the columns are one fraction unit so they're responsive as you can see and each of the rows are 40 pixels tall for our website though we're going to need three rows as we want the header to take up the top row the menu and the content to be on the second row and the footer to be on the third row all the way at the bottom so let's create a third row here let's place it in between the two existing rows and give it a height of 200 pixels as you can see now the header head render menu is on the top row and the content on the footer in the second row and our third row is blank as we haven't filled it with content yet since our items only take up the first four grid cells so let's change that we'll start by targeting the header and making it span from the left hand side all the way over to the far right hand side to achieve that we need to head into the dot header and give it a grid column start set that to 1 and also give it a grid column end at three as you can see now the header spans across the entire first row and what we're saying here is that we want the header to start at the first column line and end at the third column line and you might wonder why we have three column lines when we only have defined two columns well that's because the first column line goes from top to bottom on the left side of the grid the second column line is the one that separates the two columns and the third is the one that goes from top to bottom on the far right hand side of the grid so when you have two columns you have three column lines and you can write that like this alternatively though we can also use the shorthand method which i prefer let's remove this line here and also remove dash start and rather do one forward slash three as you can see that gives the exact same result let's also do the exact same thing with the footer like that now the footer also spans across the entire width alternatively we could have written this in a different way we could have done we could have done one forward slash span two that'll give the exact same result what we're here saying is that we want the footer to start at the first column line and span across two columns and finally there's also a third way which is to write 1 that'll target the very last column line now that we know that we want our footer and header to span all the way to the last column line we can do that with both of them and take the advantage of the fact that in the future we might not know how many columns we're going to have in this grid as we can change that however we want so this is a nice little trick when you don't know exactly how many columns the item will span across in the grid and to prove that point for you i'm actually going to change the amount of columns we have in the grid right now because we don't want the menu here and the content to take up an equal amount of space in the width that doesn't make sense we want the menu to be a narrow sidebar on the left hand side here and we want the content to take up much more space now we could do this without adding more columns by simply doing one fr for fr for example now you can see that the content takes up much more space since the second column is four fraction units and the first column is only one fraction unit however this is not a very flexible way of doing it because now we're still stuck with two columns on a website layout and you normally want a lot more columns than that in order to have the flexibility to shuffle around and change the content so what i'm going to do instead is use repeat give it 12 columns each of one fraction unit now the menu and the content take up one fraction unit each in other words one column each and they're actually forcing the columns to be as wide as they need in order to display their content which is the two descriptions we've added inside items in order to make this look nice again i'm going to head into the content class and give it a grid column we know that it starts on the second column line two and we want it to go all the way final column line like that so we're gonna do minus one and now we have a 12 column layout instead of a two column layout meaning that we have much more flexibility if we want to shuffle around on stuff and notice that the footer and the header still spans across the entire width which is solely because we're using the minus one here if we had stuck with the three here and here that wouldn't have worked at all so let's change it back to 1 now let's also look at the grid row property as we're going to need that if we for example want the menu here to span all the way to the top in order to do that we first have to change the header though as we need to make the space here available this little grid cell here needs to be available for the menu so we'll change it to two now we have a blank cell here meaning that we can head into the menu class and give it a grid row and set that to one slash three meaning that it spans from the first row line to the third row line as you can see took up the spot here in the top left corner because this is the first row line this is the second and here is the third the fourth then is of course the the bottom line okay so before we jump on to the next screencast i would recommend you to for example try to make the menu span all the way to the bottom or alternatively make it appear on the right hand side instead of on the left hand side then in the next screencast i'm going to show you a really cool way of defining layouts which gives you a lot of flexibility in terms of shuffling around on the content and experimenting so stay tuned and i'll see you there hey in this screencast you're going to learn a really cool feature of css grid called template areas which allows you to change an experiment with layouts much more easily than with the techniques you learned in the previous cost this feature is ideal for creating prototypes of layouts quickly we're using more or less the same example from the previous screencast our grid has 12 columns and 3 rows the columns are just as they were in the previous screencast however for the rows i've changed the second one from 200 pixels to auto that means it'll take up whatever available space there is left in the height and combining that with setting the height of the grid container itself to a hundred percent this will result in the grid being responsive in the height as well as you can see if we make it taller the second row grows with the grid now we're still using the grid column property to adjust the position and size of the items what we rather want to do in this screencast is use something called grid area and to be able to do that we're going to have to give the container a grid template areas property and the syntax you're about to see now might seem a bit weird it'll be a visual representation of the grid and the way it works is that we'll create a string for each of the rows and in those strings we'll create a cell for each of the columns so let's add the letter h 12 times in the first string we have to give it exactly 12 characters that has to match the amount of columns so we're not actually defining the columns or rows here we've already done that up here we're just naming them so that we can refer them using these names later on in the second row we'll add one m and 11 c's like that in the third row we'll add 12 f's what you have here is a visual representation of how we want our grid to look like and as you might have understood the age m c and f refer to header menu content and footer so now let's remove the old way of positioning the items like that and build up the grid over again we'll give the header a grid area of age as you can see as a result the header takes up the entire top row just as we've defined here we'll give the menu a grid area of m content grid area c footer grid area of f as you can see our layout is just the way we want it to be and it's responsive now the reason this technique is brilliant for creating mockups is because now i want to make the menu span all the way to the top like we did in the previous screencast we can just replace this age here with an m and as you can see automatically the menu popped up to the top if you want to make it span all the way to the bottom let's do the same thing here as well and just as easy as that we have changed layout without having to fiddle around with the values in the item classes you can also use dots which will result in blank cells like that there there and there and now we have this weird experimental layout where all the corners are blank now one thing you need to be aware of is that the areas will only be valid if they are rectangled try and match this to an f so that the f footer goes like that and then up you can see it breaks the entire layout so you have to use rectangles as you understand this is a super simple way of experimenting with the layout so i'd recommend you to play around with these values here so that you make sure that you properly understand it and once you've done that you have finished the first section of this course so congratulations you now know quite a lot about cs grid however there's still a lot of stuff to learn so in the next section i'm going to teach you some more advanced stuff and we're going to create even more responsive grids that'll be super cool so i'll see you there hey and welcome to the second section in this css grid course in it you're going to learn more advanced concepts you've already learned about responsiveness but now we're going to take that to a new level so here we have the setup for a grid which you can see in the browser window as well it's got six columns and two rows and that's defined here and should be pretty basic to you by now both the columns and rows have a value of 100 pixels in width and height so this grid is not responsive now as you can see but we know from previous cost that we can turn it into responsive grid by doing one fr instead now the columns will grow and shrink with the width of the container however you wouldn't necessarily always want your columns to be six like now they're very squeezed together and at this point they're suddenly very wide what you perhaps rather want to do is for example only have two in with when the example is being viewed on a mobile and six in width when it's viewed on a normal screen so let's make the amount of columns vary with the width of the container we'll first go back to having 100 pixels here instead and then rather than hard coding in six columns we're going to use something called auto fit now what will happen is that it'll vary the amount of columns with the width of the grid as you can see it simply tries to fit as many columns as possible into the container and when it gets 100 pixels extra space on the right hand side it'll boom add a new one so on a very narrow screen it'll only show a couple of columns however this doesn't give us the responsiveness we want as the amount of hundred pixel columns rarely add up exactly to the width of the container then we get a situation like this here where we have quite a lot of space left on the right hand side though not enough to add a new column that doesn't look nice now you might think that we could rather do autofit 1fr however that'll only give us one column because autofit tries to fill up the grid with as many columns as possible until there's not enough space to add a new column so when you use fraction unit it starts by adding one column however then all the width is used up immediately because at that point both the width of the entire container and the first column are set to one fraction unit so to get the behavior we want we're going to use something called min max and we'll set our columns to be minimum 100 pixels maximum one fraction unit now you'll see that the columns will always fit the entire grid regardless of whether or not the container exactly adds up to 100 pixels so what happens here is that the columns will always be at least 100 pixels but if there's more available space it'll simply distribute that equally across all the columns so now they are more or less 100 pixels if we make the page a little bit wider you can see that it stretches all of the columns so now the width of the container is something like 550 pixels or something however when it reaches 600 pixels there it uses the minimum size for the columns so that it can fit in six columns so it prefers to use the minimum however when it doesn't add up to exactly 500 or 600 pixels it uses one fraction unit instead so now we also get a nice view on mobile like that and a nice view on a very wide screen okay so in the next screencast i'm going to tell you about implicit rows so stay tuned and i'll see you there hey in this screencast we're going to continue with the grid from the previous one as it still has an issue we need to fix because if we make this grid narrow like this and have a look at the rows that are created beneath the two rows we defined we'll see that they're not acting the way we want them to they're not 100 pixels in height which we defined here they're only as tall as the content inside of them force them to be and that's because they are implicitly created because as you can see here we only explicitly created two rows however with our current defined behavior for the columns we are going to need somewhere to place these items which can't fit in our explicit grid up here so from five and onwards we need to create new rows automatically in order to display our items and as we haven't told our grid how we want to style rows that it has to add to the grid itself it just has to decide for itself how these rows are going to look so let's fix this because we can target these rows by simply doing grid auto rows and set the value to 100 pixels now as you can see they're just how we want them to be you can see that as well grows and shrinks nicely with all rows always being 100 pixels tall and now that we've defined this one we can actually get rid of this one like that now all rows will be created implicitly and they'll always be 100 pixels tall so in the next screencast we're going to tie all the concepts you've learned up until now together and create a super cool image grid so i'm looking forward to see you there hey and welcome to the final screencast of the second section here we're going to take what you've learned up until now and use it to create really cool image grid i've already created the setup we're using the technique for responsiveness which we talked about previously using autofit in combination with min max which gives us a nice responsive grid that varies the amount of columns and the rows are implicitly created and are 75 pixels tall in the index.html you can see that i've added an image to each of the items in the grid that's of course the images you can see here and this is already i'd say a pretty cool grid however not all of these images fit the frame they're given equally well some of them might be more horizontal while other images might be more vertical i also have a few favorites which i think deserve a little bit of extra attention you can see that i've actually given some of these item classes like vertical horizontal and big these are the images which i don't think fit well into only one grid cell so let's go ahead and make the horizontal images twice as wide we'll head over to the css to the horizontal class and we'll set the grid column property now previously we do something like 1 that's the starting value and then for example to span two so that they'd span across two columns however as you can see that'll force all the horizontal images which is this one and this one for example to start on the first column line if we enlarge the grid you'll see that they'll but they'll still stick to the first grid column line which amongst other things leaves open spaces in the grid which is something we're going to talk about later on so what we rather want to do is swap out this one here with auto now you can see they start on whatever column line they were given initially this one starts here and these two now happen to start on the first column line but if we change the width you can see that the horizontal images start on various grid lines and not just one what we actually also can do here is remove this entirely and just do grid column span 2. so the grid column and grid row properties can take a lot of different values and combinations and at this point this is the simplest we can do however i wanted to show you the various alternatives okay now let's do the same thing with the vertical images the ones we want to make taller than the rest of the images so here we'll use grid row and set that to span 2. as you can see this one and this one they're now taller than all the others and now we've gotten a few blank cells throughout the grid and we're going to talk about that in a minute however let's first make the big images the ones we want to highlight twice as tall and twice as wide as the normal images grid column and two and grid row span two now you can see this image here and this one here and this one here are really getting the attention they deserve but we need to fix these blank spots here because that doesn't look nice so why do these blank spots appear to understand that let's look at how the grid lays out each of the items starts up here in the top left corner lays out the first item second third fourth fifth and then it needs to continue on the next row which is here and it tries to fit in the sixth image however when it's about to lay out that one it can't fit it as it only has one grid cell available here however the sixth item is a big one it's this one here let's double check that in the html one two three four five six and that is indeed a big item so what it then does is that it continues on looking at the next cell that's already taken so it jumps onto the next cell again and here it actually has enough space to lay out the big item and then it simply continues laying out the next item here here and then one here leaving that spot here blank wouldn't it be great if we somehow could fill these spots well we can and to do that we're going to use a property called grid auto flow it's by default set to row meaning that it'll lay out the items one row at a time just as we talked about starting here and going across the first row and then jumping next to the second row and continuing on like that however if we set it to dense we'll use socalled dense packing algorithm which attempts to fill the holes in the grid if there are holes in the grid and smaller items come up later then it'll move those up to fill the blank spaces so if we go back to row we see that this space is blank and the next item in the grid which could potentially fit in here would be not this one the sixth item but the seventh item of the waterfall here so let's look at what happens when we change the dense and indeed the waterfall image has now jumped back to this position and filled that hole and this works regardless of how wide the screen is as you can see we have a super cool image grid now which looks really hard to create actually however we've done it simply using these 20 lines of css and finally i want to mention that this dense feature here is an example of source order independence which is a huge win for css it means that the grid can arrange the items regardless of how they're laid out in the markup here we simply use the markup for what it's supposed to be used for markup for content and we're using the css for what it's supposed to be used for styling and we're not limited to whatever order we laid out the images initially so source order independence gives you a lot of flexibility so this marks the end of this section you now know quite a lot about building advanced css grid layouts however be sure to check out the bonus material if you're hungry to learn even more thank you hey in this screencast you're going to learn a new way of positioning and sizing the items on the grid using something called named lines so we've defined our normal grid here which is the website layout you should be familiar with by now though in this case we're defining it in the very simple way of only having two columns one being one fraction unit and one being five fraction units so we're not using the flexible 12 column layout here as this setup makes it easier when using named lines so to brush up a little bit the grid has column lines and row lines the first column line is the one on the left hand side the second one is the one separating the two columns and the third one is the one on the far right hand side and our content item for example is defined to span from the second row line to the third row line from here to here in our code that will be from the line that goes in between here and until the line that goes here so what we now can do is we can add a square bracket in between write content start for example and on the third line and write content and like that now what we can do is we can swap out the number two here with content start and the number three with punch and end like that and as you can see that works fine if we wanted to do the same thing for the header we'd have to give a name to the first line as well up here let's call that main start so now the header spans from main start to content end however i actually want to call this line main end as well because there might be a case in the future where we want to reference the main end explicitly not use content end as a proxy for it so so let's just add a new name here main end like that just give it a space and then the new name now we can do main art main end as you can see works perfectly fine the footer can get the exact same layout like that now let's also name the rows using the exact same convention we'll do main start i'm just going to copy them under and start end and main end like that now you might wonder why we've been using this dash syntax here and that's because they give you a little bit of magic now given that we've called this line here for content start and this line here for content end the grid knows that this is the content column or columns if that was the case so you can actually set the grid column to just content like that and as you can see it works now the header and the footer spans from main start to main end so we can do the exact same thing there as well just use grid column main and to take this even a step further actually we can also use grid area in one of these cases that'll be in the content case because let's have a look at the content lines both the row lines and the column lines so we know we have the content start here and the content end here though we also have a content start here the second row line first second so this one here and we have a content end on the third row line the third one here meaning we have boxed in an area with content lines here here here here and here and now we can actually use grid area which you which you might remember from section one of this course by simply doing grid area and set it to content like that and it still works however you might be tempted to try and do the same thing down on the footer though that wouldn't work because it has to be boxed in by four main lines though the main start row line is the one that starts up here not down here above the footer so here we have only kind of boxed it partially in we have the main start column line here which is the start of the footer and the main end row line which is the bottom of the footer and the main end column line which is the right hand side of the footer though the top of the footer is the content end line so we can't use grid area main here as you can see it breaks the entire layout so be careful and make sure that you have properly boxed in an area before you start using grid area okay that was it for this bonus screencast thank you hey in this screencast i'm going to show you how to justify and align the entire content of a grid i've added here a black border around the grid container so that we can see its edges we've also made sure that the grid is fully responsive and that there's a little bit of space around it so right now our grid items only occupy a tiny part of the entire grid container and that's important in order to learn about justifying and aligning the content so let's start with the justification which defines and distributes space between and round the items along the row axis from left to right so if we set justify content and set that to end as you can see that'll shuffle all the content over to the right hand side to the end of that axis the row axis the default value here was start you can also do center like that that'll center it along the row axis so let's combine this with a line content as well and do end for example i'll push all the content down to the lower end of the grid because aligning controls the content along the column axis the vertical one which goes from top to bottom if we do center here as well we'll fully center the items in the grid now let's comment out this one and have a look at the other values you can use here because there's a couple of cool ones if we for example want a lot of space in between the items we can do space queen now we have as much space as possible in between the items along the row axis we can also do space evenly like that which distributes the items evenly throughout the row axis so the items have an equal amount of space around them finally there's also the space round this one is pretty similar to space evenly though each of the items have a half size space on either end meaning that if you have two items besides each other that'll give a full size space between them though here in between the first column line and the first item you only have a half space as this item forces a half space on this side though the grid line itself doesn't force the grid to create any space for it though in between these two both of the items forced the grid to add a half space in between them resulting resulting in full size space so that was the basics of justifying and aligning the content thank you hey in this screencast i'll teach you how to justify and align the items on the grid so here we have our classic website layout it contains 12 columns in the width each are one fraction unit and three rows where the second one is auto so this grid is responsive in both width and height as you can see we have defined the width of each of the items using the grid column value so for the header for example we're saying start at the first column line which is this one and end at the last one which is this one over on the right hand side so it's kind of stretching from the start point to the end point and this axis here the row axis is the one you control with justification so if we do so if we do justify items that'll be by default set to scratch however if we for example want each of the items to rather center itself as much as possible and not stretch all the way from the left hand side to the right hand side we can use center as you can see now each of the items are centered at as much as possible you can also use start that'll squeeze all of them towards the left hand side and end is the opposite of this that'll squeeze all the items to the right hand side now let's comment out this a little bit and use the line items property that'll do the same thing though along the column axis so the vertical axis from top to bottom so if we do center here you can see that each of the items are now squeezed together towards the center though not on the left to right row axis but on the top to bottom column axis we can do end that'll squeeze all them to the bottom or start that'll squeeze them towards the top now let's do center again and combine this with center here now all the items just a tiny rectangle in the center of the grid cells which are originally occupied fully now i have no idea why you'd want to create a website layout like this it's really weird but that's besides the point of this screencast finally let's finally let's comment out these two get back to the original layout and look at how you can do the same thing though only targeting one of the items let's head into the content for example then you can use just justify self and do center and now only the content is entered you align off as well undo end and now the content is squeezed down to this tiny little box in the bottom center of the huge space it originally occupied a little bit sad actually to see the content to see the content being turned into a shadow of itself like that so let's give it back its original space like that okay so that was it i hope you learned something and feel free to play around with this yourself thank you hey in this screencast i'm going to explain the difference between autofit and autofill so here we have two different grids using one or the other you can see them on the page here and i'm assuming that you understand the basics of this complicated expression here where we're basically repeating with autofit as many columns as we can fit into the grid given these constraints here they should be minimum 100 pixels and maximum one fraction unit and that as you probably remember from the screencast in the second section will give a nice responsive behavior where the amount of columns grows with the size of the grid like this if we enlarge in this page boom there the grid crossed the 300 pixel threshold meaning it could fit three columns in instead of two and as we make it more wide the columns become one fraction unit until it reaches the next threshold which is 400 pixels and boom then autofit and auto fill adds another column to the grid since we now can fit 400 pixel columns into the grid however there's a slight difference between the two and that'll be apparent if we try to enlarge the grid even more like this now but you can see that auto fill actually added a fifth column even though we don't have a fifth element to add there whereas autofit made sure that the four items we have actually fit the grid now under the hood what's happening here is actually that both of them add new column tracks though autofit actually collapses those new columns to zero pixels in width so that the current items you have in the grid when defined like this with a maximum size of one fraction unit actually will fit to the grid regardless whereas auto fill at every 100 threshold like there and there and there it'll add new column tracks which basically are empty so that was the difference between autofit and autofill in this example i will show you how you can use css grids to create an article layout so in this example i have a plain article that i've written i wrote it originally in markdown and then i generated this html using a markdown compiler so it's not so it's pretty nice it has ul's it has some piece and there's a div here for the code highlighting and a fixture a figure tag for the image and just basic html and i'm just going to go straight ahead and turn this into grid and then i will explain what i'm trying to accomplish with that so oh it looks now we have a grid which is very funky move everything where i want it i want them to be and there we go so now i've defined the grid which has three columns there's the first column that's 80 pixels then there's a main column that takes one fraction of the space and then there's the right column that takes 80 pixels and i have this rule here which says that every element inside the article should start at the grid column line number two so remember that the grid column line one goes down here two goes down here then we have three over here and four over there and by setting grid column 2 we say that every element should start in this column and we need to set the min width to 0 to actually allow it to shrink if we don't set this you will see that it goes all the way over there now right now this is just a way of adding some spaces on the side but since this is a grid we can now do some things very easily since i now want this figure take the whole width and that was all and let's add some space on top of it right so what did we do here i set the grid column to start at line one and end at line minus one which is the last one so this is the way i was saying make the element take the whole width and this is just radically simple then any other way to accomplish the same thing if you don't have a css grid you end up having to say that these elements here should have a margin and standard margin and this should not you need to cancel out the margin you set by default and often this is very tricky because you often end up having to have custom html uh just to handle where things should when they should be narrow and when they should be white and it's can be really tricky deciding where to put things so another thing that we can do is to add another element i'm going to call it aside and here i'm going to just write some texts includes so now we have this new paragraph over here and now i can style it and now i want to style it like this i want to say it in the third column i want it to have like a gray color and like that and smaller font size this seems like a good time to add gap spacing between so yeah and if i wanted to be on the left side i can just set it to grid comes three one and trust me if you're trying to do this without a grid it's it's so hacky uh i can't even begin to think like because you have this element here which originally has a margin and then maybe if you put both of these elements inside the same div maybe you can do like position absolute and set left 100 or something yeah i don't know i don't really know this is just something i don't know a clean way of doing in plain css uh and especially not in the way where you can have no changes in the html basically now there is one thing you need to know and that is this is actually a separate grid so this is becoming a grid row that goes here and this is a separate grid row and this has the consequence that you often end up with this spaces you might in this case want this space to be gone and then this text to go down further to the right side of the header but that's currently not possible with css grid that's just a limitation that you can't really avoid and whether it's good or bad i don't really know in this case i don't think it's that bad because this paragraph belongs with this paragraph and here we have a header which starts a completely new section so it's not that big of a problem but if we had like another paragraph over here it can be a bit confusing that you have these big spaces which isn't quite optimal but other than that i find that using css grid for this type of article layout makes the the html much cleaner you can basically just take the output from a markdown parser and dump it straight in you don't need to do anything special to support either having things in the left column or the right column or in in full width and the styling itself it's 20 lines and even here i haven't touched anything like block quotes but here's the quote maybe you also want that to be in the full width oh we should remove the margin at the side and maybe we want to set a color once again and maybe like border to the left is cool thing as well and notice that i can just add padding add borders i just set the column to be from one to minus one and everything works i don't need to worry about negative margins or or or knowing what the wind of this column is so now if i want to set the left column to be 17 instead or maybe 40 and the right column to be 40 that works perfectly fine and all is just very very good thanks hey in this screencast i'm going to talk about the difference between flexbox and grid and i'm also going to show you how you can use the two together so we have a header here which is built using flexbox and a page layout which is built using css grid here is the html for the grid example and the html for the flexbox example and the css is located in the index.css file here and we're going to look at this code in a minute however let's first look at the examples themselves because you might actually be able to guess the main difference between flexbox and grid just by looking at these two examples because flexbox is built for one dimensional layout like this one it goes in one direction from left to right being just a single row whereas css grid is built for two dimensional layouts like this page here it has three rows the top one the middle one and the bottom one that actually has 12 columns though we can only see two of them visually here due to how we've laid out the items so if you're going to create layout which has a direction either row or column then use flexbox it's great for aligning content within that container and gives you a lot of flexibility however if you're going to create a more overall layout with both rows and columns then you should definitely use css grid as it'll give you much more flexibility and simpler markup than if you were to for example try to use flexbox to create twodimensional layouts okay there's also another overall difference which is that flexbox takes basis in the content it's so called content first whereas grid is layout first it takes spaces in the layout now this might seem a little bit abstract so let's look into the code because that'll make it a bit more clear so the flexbox header here is turned into a flexible box by simply giving it a display flex we don't have to do anything else we then let the content make most of the decisions of where they're going to be placed throughout the container for example you can see the third child here the log out element simply adds a margin to its left hand side and thereby shoving itself all the way to the end of the container now let's look at how we create our grid layout first of all we can't just simply give it a display grid and then start shoving content into the container no we also have to define either columns or rows or both as we're doing here we're giving it 12 columns each being a fraction unit wide and three rows and just by doing this you can understand that grid to a larger degree takes basis in the layout first you're constrained by the layout you define here whereas we could have added as many items in the width on this single row in our header here we're now constrained with 12 columns in our grid example here and also we need to place the elements according to the layout for example this menu item here this one which you can see on the left hand side here we're not placing it here by giving it a margin on its right hand side like we do on the log out we're taking bases in the layout and saying that we wanted to span from the first column line to the second column line and thereby it places itself how we want this layout first versus content first is a bit abstract and it's not something you think about when you develop though it's nice to be aware of it so finally let's actually combine the two because that's what you want to do you want to combine css grid with flexbox and then get the best of both worlds so now what we're going to do we're going to take this header here move it down into our age layout so let's head over to the html and take the three elements here copy them and add them here like that so what we now will do is we'll turn the header here into a flexbox giving it a display of flex now let's run this code as you can see we have the items laid out like this what we now can do is we can use for example justify content do for example space evenly like that as you can see they change accordingly however let's do what we did in the flexbox layout target the third child log out button margin left arrow as easy as that you've combined css grid with flexbox now this header here this item in the grid container is actually a flex container itself which then again has three items within itself so i hope you learned something from this and that you'll start using grid and flexbox together from now on thank you