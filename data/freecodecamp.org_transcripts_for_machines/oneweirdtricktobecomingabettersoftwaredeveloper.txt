well welcome everyone so next up we have esther nam speaking on one weird trick to becoming a better software developer let's help welcome here okay all right thank you all for coming i'm here because i would like to be a great developer someday i've been a software developer now for about seven years and in my relatively short career i've worked out a number of companies and between work the socal python meetup i helped to run and coming to conferences like pycon i've had the good fortune of knowing at least a few developers whom i consider great i've been trying to figure out what they have in common because i don't believe that developer greatness is a fixed trait i take the growth mindset and believe that by working hard and practicing the right habits i too can achieve greatness but what exactly do i mean by a great developer i'll explain by way of a few illustrations meet goofus goofus is a developer who's been working at acme widget co for six months she nailed her whiteboard interview with the most elegantly written algorithms the team had ever seen her first project involved building a slingshot prediction machine and she was excited because she'd built something similar at her previous job so she knew exactly how the machine should be designed goofus worked really hard for two weeks but when she was finished the product manager found that goofus had made some assumptions about the specs that weren't quite correct goofus worked hard without complaint to make every change but but the project ended up taking several weeks longer than expected goofus has a coworker named gallant gallant has been working at acme for only a little longer than goofus has the gallant already has a process in place for new projects she sets up a very short daily meeting with the designer and qa lead so that they can give and receive feedback on features and change requests right away one day gallant went to lunch with the company's marketing analyst who mentioned that a part that gallant was building could be useful for another company project by adding some tracking gallup found she could easily add tracking within the current project scope and this offhand feature request ended up doubling acme widget company's revenue for the year a final story goofus was tasked with developing an internal tool leading two junior developers on the project goofus was excited at the chance to teach the newbies how to code as well as she did and designed a framework that was really elegant and efficient however the junior developers had trouble even setting up their development environments in a way that let them start working on the project soon the junior developers stopped going to goofus with more of their dumb questions instead they started going to gallant for help because goofus had been too busy with optimizations and test cases to write any docs gallant had to message goofus constantly for more clarification on the architecture both senior developers ended up spending way too much time helping the junior developers on the project and the delivery date went further past the original deadline and even worse gallant had trouble meeting her own deadline on her own project because she'd been so busy helping out the others these stories are greatly exaggerated but i bet most of you have seen or experienced similar situations in your own jobs what are the qualities of developers like gallant that set them apart from developers like goofus well most of us tend to think first of technical ability when it comes to developer greatness this is from stack overflow's annual survey with responses from around 64 000 developers in 2017. it can't be denied great developers must have a solid foundation of technical skills also great developers ship the right project at the right time often the emphasis is on the on time part but the right product is just as important there's no point in writing software with perfect code and 100 test coverage if nobody ends up using the darn thing now you may or may not find the top trait surprising and one metric that's not on here that i always come back to is if i worked with someone like gallant and they told me they were leaving the company would i consider following them how many of the other developers would feel the same way why do we want to work with great developers well they make good software they help us become better developers because we learn so much from them they make our jobs easier maybe even more fun we software developers usually work as part of a team so thinking about the qa person testing our software or the devops person helping us package up our code to deploy to prod or the product manager who wants to show off cool new features to the company clients if we code with their needs in mind we'll be the developer everyone wants to work with and it turns out empathy skills are what help great developers be so great so let's talk about this one weird thing called empathy first let's make sure we all understand what empathy is here's a simple definition that i like empathy is the experience of understanding another person's condition from their perspective you place yourself in their shoes and feel what they are feeling empathy is marked by a distinction between oneself and another there are two types of empathy one is emotional empathy which is not just about feeling compassion or being nice for example if your coworker is upset because they're hungry and this meeting you're all in is running late you may feel sorry for them that's sympathy but if you feel their hunger or you remember yourself being hungry in long meetings and it moves you to take action to help your coworker maybe you'll sneak them a snack or suggest out loud that we cut the meaning a little short you're feeling empathy there's also cognitive empathy which is the ability to understand something from the perspective of another cognitive empathy is tied to the concept of theory of mind which is the understanding that others have mental states that differ from one's own and it's not just enough to imagine yourself in other shoes because what if your assumptions about the other's perspective are all wrong to use a trivial example you are a slack power user so whenever you need to ask a coworker something or to give them a heads up about some kind of change you fire up slack and you shoot them a message and you go your merry way but if you really wanted to make sure your coworker got your message you might take a second to check first does this coworker use slack the way i do or do they prefer email or even a facetoface interaction assuming they would want what you yourself prefer would not be the most empathic choice you should instead make an effort to learn what their preference actually is if you don't truly take another's perspective what you're really doing is called projection rather than empathy you've heard the golden rule due to others what you'd have them do you but the golden rule isn't about what you do putting yourself in someone else's shoes means fully imagining yourself as that person you treat them as they would want to be treated rather than the way you yourself would like to be treated while the two types of empathy are related to each other cognitive empathy activates different areas of the brain from emotional empathy a deficit in one doesn't necessarily mean a deficit in the other regardless empathy isn't easy for most of us it requires effort a lot of patience and a certain imaginative ability for us to place ourselves in somebody else's shoes especially if the other person is dissimilar or unfamiliar to us yet empathy is often seen as merely a soft skill we tend to undervalue soft skills in tech and so you may believe for this reason or another that empathy is not worth the effort to practice but i don't think that's true if our brains can learn how to write complex algorithms or cook up layer upon layer of abstraction over a set of arbitrary business rules why couldn't we also learn to get better at seeing what others see or feeling what they feel to do our jobs better also research has shown that soft skills are surprisingly important for building productive successful teams microsoft recently released a paper entitled what makes a great software engineer they claim to have identified 53 attributes of great developers but thoughtfully provide a much shorter summary which i'm going to quote here there's a lot of good stuff but what i want to emphasize is the last bit the part in red which i mentioned resonates with me so how do we practice empathy to get better at understanding how others think and feel i've got five ideas relating mostly to cognitive empathy they may not all work out for every one of you but i hope everyone finds that at least one of the suggestions works for them i'm going to start by suggesting one baby step where the other in the self other distinction i described earlier is actually still you so how many of you have looked at some code that you found absolutely unreadable you ran get blame and discovered that the terrible coder was in fact yourself this is code you'd written a year ago but it's almost as though somebody else entirely had written it someone stupider the problem is not that past you is actually stupid it's because past you had a completely different set of knowledge assumptions and context from which they were working so going the other way when current you writes code or documentation take a few minutes to consider this we'll future you who has a completely different immediate context and working knowledge be able to understand or follow your code when you see it again one of the best ways to practice this is when you're adding logging to your code let's say we have a function and it handles a request and you've already thought through the ways in which your code could break so you have this exception handler but imagine how future you so that's you a year from now with no memory of writing this function or what it does or why how would you understand a log message that looked like this not that helpful wouldn't future you appreciate some hints as to why this function might have failed or what the parameters even mean think about what information future you would need to be able to trace and debug the issue as quickly as possible let's add some more verbose logging some better error handling and messaging now when you see this log the stack trace you've got action level data the same goes for documentation thinking of future you may help you write better docs when i deploy a project or handle an incident or even run a socalled onetime script i open up a text file and write down one line for every step that i just took so that the next time i have to do this i don't have to remember or relearn everything that needs to be done or its context i almost always find myself the next time i do this deployment thanking past me so thinking of future you as someone else you can empathize with is one baby step way to practice getting better at empathy and in so doing you will become a better software developer but guess what you can't practice empathy all by yourself empathy is by necessity a social reaction so you depend on others to practice it one step further than trying to put yourself in your own shoes would be to try to put yourself in another's shoes and since it's easier to feel empathy for someone who is more similar to you if you really want to level up on your empathy skills you should try the following during your next project or even for just a day make time to learn the job of a coworker who is not a fellow developer maybe join the qa team or the devops team to see the kinds of issues they face on their side of this project you're all working on this will benefit you in several ways first off the more you work with someone the more familiar they'll become to you and the easier it'll be for you to start seeing what they see feeling more empathy for them you'll notice how the code you write affects those who are required to test your code or to make sure the serverless functions in the cloud running your code don't error out with mysterious bugs that wake people up at three in the morning so then maybe you'll be more conscientious about updating the dependency list and the package you're about to deploy to prod or maybe you'll find and handle more edge cases because you'll have thought to ask the qa team what those might be before they get to work testing them in the best case scenario you'll ship your project more quickly because you'll have shortened the feedback and iteration cycle that you need to finish the product as a bonus you'll become more familiar to your coworkers and it's more likely they'll come to feel more empathy for you to generalize even further you can improve your empathy skills by exercising something all the great developers i know have in spades which is curiosity not just about other people but about new projects ideas and experiences the great developers i know constantly seek new things to try or novel ways to tackle a problem we all naturally gather tons of experience as we progress through our careers but seeking out different kinds of experiences and exploring new ideas will accelerate your progress exponentially because you can integrate your experience with a bunch of new perspectives you'll also gain a wider view of the systems you build and work in as a whole and in some cases by better understanding the problem and seeing a more complete picture you might find that the best solution is actually to solve a completely different problem altogether some companies like google already know the benefits of having engineers try on other hats they have programs that let people do just that but even if you don't work at google that doesn't mean you can't sit down next to a coworker to shadow them for a day or even just have lunch with someone just to get to know them a little better speaking of new experiences another way to improve your empathy for other developers and your users is to read code written by others you want to do this anyway to deepen your understanding of the libraries or languages you work with but another benefit is that you observe the great variety of ways a given problem might be solved you might have an inkling of this from whenever you search the python packaging index or library to use one very simplified comparison if you work in python and you want to store and retrieve data from a relational database you'll come across the django orm and sql alchemy both libraries allow you to access data from a database but one creates almost a direct onetoone mapping between an object and a row from a database table using the active record pattern while the other separates logic having to do with objects from the logic underpinning database operations using the unit of work pattern as you look into these and the many other solutions that exist they'll show you how the author of each library chose to make sense of this problem of data persistence maybe it'll present for you a new perspective that will help you find the right solution for your own problem or maybe you'll notice shared patterns in the way solutions are written by multiple developers and you'll understand why these patterns exist in both django orm and cqlogamy retrieving the number of all the rows in the table is a method called named count which is a lot like what you'd write in raw sql so that would require less mental overhead for developers who are trying to learn either library and that's what the famous principle of least astonishment is about when designing a component it should behave the way users expect it to behave well to know how users might expect a component to behave you need first to figure out who the users are and then you need to see your component through their eyes building an interface in general is a really good exercise of cognitive empathy when you write an api you need to consider who is the typical user of this api what are the most common arguments that users will send over when they call your method in what order are they likely to send them in other words what are your functions dependencies are there common default values for some of these arguments when the user calls your endpoint what do you think they'll expect to get back from it what return type or response i find tests really useful for figuring out how to build these layers of abstraction because your test cases are really just instances of a client using your function or your library let's say you have a brilliant new startup idea it's okcupid for dogs so neat for your clients you need to write a function to find a dog so we have our test case and let's think about how we want this function called find dogs to work by writing a test for it so we most likely want to find a pet by relationship status and we expect a json object with a list of dogs that match that status so that means we want our function to get us a list of dogs and to do this it needs to make an api call and now you have this function but probably to call this api you need some kind of authentication right so we're going to add some username and password parameters and of course now we have to change our test to add the same things okay so now you have this function and it gets you a list of dogs but looking at this fine dog's function again doesn't that look kind of weird why does a function that's supposed to just find us some dogs need to know anything about a username or password that's a hint that we should separate these bits out but even if we find that find dogs should not accept a username and password specifically as parameters the find docs function does need access to them somehow in other words this username password authentication bit is a dependency of find dogs maybe we can encapsulate this username and password implementation into some sort of class like the off dog api object let's call it and find aux can now call this api object going back to our test we now can fix our params but you know to be honest that looks a little strange still again if i'm looking at a function called find dogs i don't expect to need to pass in any kind of off dog thing right but what if i made a very small change so instead of this i could do something like this and then maybe have a clearer name for it now this to me as a user of this api client it looks familiar and it makes sense to me i hope i still feel this way or future me still feels the same way a year from now but with find dogs encapsulated this different way i can see this component for what it is which is an api client to get dogs and that's what the client looks like malta oh a developer who wrote a javascript framework that powers google photos google plus google drive and some other very obscure tiny websites said this at a recent talk he gave at jsconf australia the way i would talk about myself as a senior engineer is that i'd say i know how i would solve this problem the next level is that i can say i know how others would solve this problem what this means and this is malta's conclusion as well is that it takes both experience and empathy to create the right kinds of abstractions for your application now you saw how cognitive empathy helps with naming things which is one of the famous hardest problems in computer science clear specific and descriptive names make code more readable to other developers at certain scales it's more important to write understandable code than it is to write performant code consider that a bug in your code may cost the company hundreds of dollars a month but if it takes two developers one extra week to debug the problem because they had so much trouble understanding the code or what it did that's thousands of dollars more similarly an optimization you write for your program might save you thousands of dollars a year in cpu cycles saved but if the code makes it risky to introduce changes then those cost savings might just be wiped out by the development time required and the missed opportunities so software must be written not just for the computer executing your instructions but also for the humans who need to maintain or change your code programming is really another form of communication which is why cognitive empathy will help you become better at it another reason why empathy is crucial to effective communication is that it lets you establish grounding not to get too technical but grounding is sort of the tcp handshake of human communication it's a set of mutual assumptions knowledge and beliefs that get coordinated between you and the person you're talking to to ensure both of you are on the same page establishing grounding can be as simple as nodding while you're listening to someone to signal that you follow what they're saying or making a quick request for clarification like huh most of us already practice grounding in everyday conversation but one way to get better at grounding is to teach something to someone else imagine how you would explain to a threeyearold why dinosaurs don't exist anymore now imagine how you'd explain the same thing to a 23 year old we intuitively know that for a young child we might need to describe things more simply and at a higher level than for an adult but it requires more effort for us to do this well when we're among adults we all know someone who claims to love teaching but assumes we have base knowledge about the topic that we don't this person will explain things in a way that goes right over our heads or that's effectively meaningless to us or on the other hand they'll assume we know too little and waste a lot of time teaching us things that we already know all they had to do was spend just a few minutes to check first that they understand what we actually knew in order to do a much better job of teaching us something relevant and understandable but even if teaching is not your thing you can still practice grounding beyond everyday conversation let's say you're in a product meeting to go over some requirements when it ends take a few extra minutes to ask the other people in the meeting to describe the main takeaways from their points of view if their main takeaways are different from yours then you clearly require more grounding the more you communicate or even over communicate the more knowledge and context you'll share and the more cognitive empathy you'll share in fact it's been theorized that empathy evolved for exactly this purpose to improve coordination between members of a group so that they can respond more effectively to potential opportunities or threats context is also important because decisions are made under constraints and sometimes we rush to judgment on decisions without seeing the bigger picture so it's important to ask questions to fill in that context great developers don't hesitate to ask questions even if it means admitting they don't know something and one question that's very effective at gathering context is why why did you pick this library over other libraries that might do the same thing why do we need to collect user data in this manner if there's an alternate way to get the same data why do you want this button to go here instead of over there now why is an easy enough question to ask but the hard part is actually listening to the answer if you have a preconceived idea of what the other person is about to say you might not actually listen to the answer because you're busy thinking up a response of your own you'll talk right past each other active listening is making a conscious effort to give your full attention to the person speaking so that you hear and understand the complete message being conveyed listening is especially difficult if you're feeling angry or defensive so it's especially important to practice active listening when you're feeling negative emotions for example if you hear criticism in a code review one thing you could practice is active listening don't respond to the comment right away first stay silent suspend your judgment temporarily gather more information before responding by paraphrasing or asking for followup questions to demonstrate you fully understand the other person's argument there's a rule in communication theory called miller's law and it's this to understand what another person is saying you must assume that it is true and try to imagine what it could be true of let's say a developer comes up to tell you that a library that you wrote is broken now this might make you upset and maybe you could ask them why do you think my library sucks but that puts them on the defensive you're questioning their premise and implying the problem is with them alternatively you might stop and think okay assume my library is broken this person can't do their job what are our options you might ask some clarification questions what are you using this api for what is it lacking that you need could there be another way to get you what you need by withholding judgment you're showing that you're on their side and by asking clarification questions you're more likely to gain context for what they're actually trying to do this is a goal of active listening and it'll lead to you're having more empathy for the person you're talking to a friend of mine once asked me do you know what you call someone who's always complaining about existing code being terrible all the time and the answer was junior i think of this often i remember earlier in my career when i would see something that we might derisively call legacy code and i would judge whoever wrote it as maybe not being not that good at writing code i'd spend a lot of time trying to refactor it but what i didn't do so well was to invest time in understanding the code to see why it might have been written the way it was we could apply a version of miller's law to legacy code when i find code that works but is unreadable to me i first imagine that the developer who wrote it must have started out with good intentions and clear designs i try to see what sorts of constraints existed that maybe haven't been documented so i can't see them or what edge cases i haven't encountered that this code might be addressing in other words just because i couldn't easily understand the code doesn't mean that the code is bad or that the developer who wrote it was dumb now to be clear if the code is broken or buggy judge away but if the code's already in prod and it works giving it the benefit of the doubt will help you resist the urge to refactor which is good because refactors can become very difficult and costly i can tell you to sum it up the purpose of developing software is to create things that other people want to use the best software developers excel at this for several reasons they understand what their users want they write code efficiently and ship it on time and they make it easier for those with whom they work to do their own jobs well so that the whole team can deliver a quality product i hope i've convinced you that empathy is important for all of these and a worthwhile thing to practice and here in convenient list form are the five exercises to help us become better at empathy i hope this will help you to write better software work better in teams and give your career trajectory a boost i would love to hear what you have to say not in the q a but outside in the hallway or on twitter you're free to contact me by email as well my slides are posted on that link and i want to thank a bunch of people who helped me to write this talk in one way or another so here they are and of course i want to thank the whole python community and i want to thank you all for coming to my talk okay