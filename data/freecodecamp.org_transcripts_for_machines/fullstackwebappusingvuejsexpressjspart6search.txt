hey everyone this is cody and welcome to part six of building a full stack web application using vue.js and express.js so in this part what we want to do is we want to add a panel up here which has like an input box where we can search or have a user search for artists by name title genre or whatever they like so let's go ahead and get started on doing that so to start off let's go ahead and go to that client and go to that view so if you remember here we have this songs file which is basically responsible for rendering that view here i think this file is going to get kind of large over time so let's go ahead and make another folder called songs and we can just click and drag that songs view into that and i'll rename that into index then we can go to our router and we can go down here so wherever we're recalling songs before i think we need to import it from song slash index so refresh the page make sure that's still working and it does so at this point i would like to kind of pull the two different panels so we're gonna have a search panel and we're also going to have a um the display panel so i'm going to say songs panel now view and that's going to contain all of the information related to the songs so in fact i could probably just copy and paste that right so basically what we want to do is have the songs panel fetch the songs from the database or from the back end and display them instead of having it done in the index so if we were to just go over here and i'm going to kind of refactor all this and remove stuff we don't need so we just want it to be a panel here which means we can get rid of all that and unindent so just to kind of link this up let's go ahead and go down here and import the songs panel from i'm going to do a relative path this time from songs panel and of course i'm going to add that to our components so then i should be able to just delete the previous thing we had there and say songs panel go ahead and close off that panel there that dom element and then it should just render as before so that should make sense as to how and why we refactor that and the second panel we need i'm going to add a new file called song search panel dot view go ahead and scaffold that up and this panel is going to basically have again we're going to have a panel so oops and this one's going to say search and if i go back to the index i want to go to song search panel and include that one also include it as a component and make sure that something renders for that i don't think i actually added it yet so like say songs search panel and then again close off that dom element um so we're getting an error saying panel did not register correctly and what i'm starting to notice is that almost in every single view we have the panel thing included in the components so what we can do instead is i think i said at the beginning it's not good to have for globals but i think in this case we're having a lot of globals everywhere so i'm going to go ahead and just make a new file or folder called globals and i'm going to put that panel.view into that globals file and inside our app.view or sorry our main we can just go ahead and say import panel from and i'll say component slash global panel and here if you wanted to define a global module that you can use in your entire application you can say view dot component pass it the name and then pass it the actual component object so if i were to save this i think a lot of stuff might crash because i moved the location of panel so while i'm at it i'm just going to go ahead and find any instance where i have panel and in fact there is a lot of instances so instead i'll do import panel and basically anywhere i have import panel i'm just going to go ahead and remove and i'm going to just remove it from the components too so bear with me really quick as i do this really quick refactoring task and then this will make our code a little bit easier to manage because obviously if you're using this panel on every single component why exactly are you importing it as a local all right so there's like five more to go almost done bear with me sometimes it's it's fun to just listen to music and do these boring repetitive tasks when you're programming but oftentimes it's also not fun to do something like this so so at this point i think it's been removed from everything except for this main file where we included it so if i were to go back to our app and refresh the page let's just kind of do a quick check to make sure nothing broke yep seems like everything's working that's fine so what we just did there is we pulled out the panel component and we made it global so that now when we make new stuff we don't have to import a panel every single time so going back to what we were doing before if we go to components and go to songs and go to the index let me go ahead and close some of these other things uh first things first i'm just going to add a little bit of margin top to that panel so that it gets pushed down from songs add a little bit of space there so in our song search panel what we want to do is if i go to register i can just go ahead and grab an existing text field and i'm going to go ahead and just put it right into the song search panel and call the label search and the model will also be searched which means that we need a data which has some blank string for the search model and basically this whole search thing if i were to save this when we search through this we want to do something to filter the results by artist album so in fact i'll say search by artist album genre sort by song name ooh song title because that's what we're actually using in our data or genre let's make sure this looks good all right so the first thing that i want to do is as someone searching through this we want to keep track of what they actually typed in and how it's changing so in view you have the ability to create a watcher so i can say watch as an attribute on the main view component and then i can say watch as search changes let's just go ahead and print out the value of search so now if i were to say modest mouse we see that it prints out the modest mouse string down here that's pretty cool so what we want to do is as a user is typing inside this search panel i want to go ahead and create a query string such as like search equals modest mouse and basically i want to store this information the query string so that people can easily bookmark and share their you know latest searches with other friends or whatever because if you were to try to store this state in ux or just internally inside the scope and passing around with props there's no way to like bookmark that so that's why i'm taking the approach to do the router link up here so the first thing to do is as we type in the search value changes we can basically just keep on pushing a new route so i'm going to say cons to route is equal to name of songs and i'm going to say this dot search is not equal to an empty string so basically we don't want to add money sign or question mark search equals if there's nothing to add so if as long as this is not equal to an empty string we can say route.query is equal to a search this dot search which will basically put the key search and the value that we're doing inside that route.query and then finally we can say this dot router that push and then go ahead and push that route in so if i were to save this search panel now and say modest mouse you see how it's changing the query string for us dynamically so that's pretty awesome now the next step is if we were to let's say refresh this so i say control refresh notice that it didn't set modus mouse here in the search text box even though it's up here in the query string so we can kind of handle that by going down here and we want to go ahead and add a watcher to the search query string and we want to say this is immediate so basically when this value is initialized whatever it may be if it's undefined or an empty string or whatever it's going to go ahead and call whatever our handler is so in this case i'll say handler value and then i can say this dot search equals value so if i were to save this now and change this to hello world and hit enter see that it changes our search and vice versa we can type in and then if we don't have anything in the text box the entire query string search goes away all right so now at this point what we want to do is made it or we can edit this songs panel down here and we want it to kind of read that query string that we've been creating to fetch the song is using whatever the search parameters are so if we were to go to in this case the songs panel and let's see basically when we're going to do something similar so whenever that query string changes remember we can just do a watch and just say listen to when that query string dot search value changes we want to go ahead and do the same same thing so again immediate so right when this component has a value defined in that we can just go ahead and invoke a handler and we can say this dot songs equals await song service dot index and we can just go ahead and pass a value and of course do not forget the async here um so instead of mounted we don't need that anymore because immediate should kind of do justice it should do the same thing and one thing you'll notice is i'm passing a value to song service index which we don't really handle right now so if i were to go to services and song service and go to index i could go ahead and just do search and then here i can say i'm pretty sure i could just pass params search search call and search all right so basically we're passing in some search parameters and we're going to put it on the query string as we type so in fact if i were to go over here and just do network tab and type an extra character like two if you see here it did a query or it did a um an ajax request to this endpoint and it appended that query string of search equals modest two and that's because we defined it here so if i were to say like some random key equal search again as i change that value it's going to say some random key is equal to modest 2 3. and then another thing i should note is that if i were to change this to an empty string i think actually everything works fine it's just an empty string right so now we have all that logic set up to kind of like query the back end based on what you type in and i notice that all my songs over here kind of it's kind of vanished so let me go back to my song panel and try to figure out why that went away and of course the same issue i keep on doing is this needs to be data so go ahead and refresh the page and i thought it needs to be data hold on let's see what's going on there we go alrighty um so now if we were to go to our songs controller in the back end so find our server and go to the songs controller what we want to do is add a little bit of new functionality so to the index method basically we want to check if that rec dot um query.search is set so if search is in the query string we want to do a search a certain way and otherwise we just want to do the original search that we were doing which is a limit of 10. so up here i'm going to say let songs equal to null so that we can assign it based on which path we take and then here we're going to do something a little bit complicated so we can say songs is equal to await song.fine all and we want to find all the songs which match any of these criteria so there's going to be an or statement that we can do in sqlize and basically we want to see if any of these cases are true so in this case we can say title artist genre or album dot map and i'm gonna go say key and just map that to an object here and then we could do this cool little feature where we can just say that and inside here i'll say con searches eagletorec.query.search and i'm going to abstract that and do this and boom hopefully this all works i'm not sure why this is some reason this is white there might be something wrong with the code here um well i guess i could save it see what happens so now as i type mo yeah there's definitely something wrong i'm missing a am i missing ah let me just end that with another parentheses that's why that was not colorized so again let me just refresh the page so i can kind of demonstrate what's going on so as we type i'm going to say d it's going to do a request to the back end for mod and it's going to search for search equal mod it's going to do the response is in energy string right now and basically this is an issue right now because i actually forgot to do this i need to search where like is so basically in sqlize you can do a a like search and what we want to do is just find anything actually let me uh change that i think i have my order backwards so for each key so for title for artist for genre for album we want to create a giant array of objects which is why we're doing this map put it into this money sign or and then for each key we simply want to search that key to see if whatever we provided is existing so now if i were to refresh the page you see that it's returning modest mouse and so if i wanted to search for let's say alternative it's returning only alternative i go here our response only has a single results which is alternative i could search for an exclamation mark which only returns that float on with exclamation mark i can search for modest where the server is going to return to responses so awesome at this point we can search on any of these keywords and i don't know if this is the most performant way to do it but it works for now um basically optimize it later on if it's just too slow or something is crashing your server but at this point there's one thing i want to kind of point out so basically if for whatever reason your user were to type in extremely fast let me just demonstrate this you see that kind of like froze up the page a little bit and is doing all of these requests to the backend which is not that great so what we can do is if we go to the client and we do an mpm install and go ahead and install a library called lodash they have a lot of helper methods which we can use for looping over objects or arrays or collections but the thing we're interested in is called debounce so inside the song search if i were to just get rid of the server now inside the song search panel i can simply just do import underscore from low dash which will bring in the load hash module and we want to refactor the search method a little bit so that instead of just calling a method each time we want to cal the debounce method so i'm going to go ahead and pass in an async function with value and down here i can go ahead and pass it something like that so very very similar logic nothing much has changed but now if i were to save this and type in modis mouse is awesome notice that only after 700 milliseconds after the user is done typing well it would do that server request so it's just kind of a little bit of optimization just so it's not so like bad when you're doing searches um yeah look in the d bouncer looking the low dash if you want more cool like live library function you can use but cool i think that's pretty much all set up we have the search panel it's searching to the back end the backend is doing queries against the database and it's returning data that is filtered based on what you're searching all right so before we go on implementing more functionality there is one thing that i have you know someone left a comment on one of my the videos about how to do routes so basically if you remember if i were to go to like one of my files where i'm navigating so let's go to header and if you remember that i'm doing this whole navigate to method i actually don't need to do this instead i could just simply do let's say what's it called navigation oops navigation link or sorry it's called a router link so i could do router link and then instead of doing this whole click thing i could just say tag is equal to a span which will just kind of replace whatever this is with a span tag and then in that case i could just do two equals and then pass it in object instead of doing what i was doing before so i were to save this now and go up here notice that i can go to the root by clicking that now so i don't need to use this whole navigate to throughout my entire application so if i were to just go ahead and search so find in folder i'm going to search for navigate to i just want to go ahead and remove any instance of navigate to and do something else with it so same thing with the v button in beautify if you look at the docs they give you the ability to pass a again an object to it so i can say do this and i can go to down here same thing in this case i'm just going to go ahead and copy and paste this here and go to login same idea with register so at this point i can just go ahead and get rid of navigate to and the header all the links in the header should work as they did before so that was just kind of a little workaround that i was doing with navigate 2 inside the methods object instead of just using some features that i did not see in the documents but i was aware of them now so let's just go ahead and go through anywhere we can and just remove that navigate to so like in this case i can say two equals again name is songs create and get rid of the navigate to click go down here i could say two is equal to again that object awesome and let's see where else i'm doing it i don't need to use navigate to here so i'll delete that here again i could say 2 is equal to the string of the navigate to object make sure that's all working and then in methods i can just remove that and i think if i were to go to songs go to the console i get the strange this uh warning or missing prams thing and basically i'm passing down a props to this panel right here and so at when the page first mounts or when the the main view page or component mounts song is undefined and it gets passed down to edit which means that song id is also not defined so instead of right here instead of doing params equals an object we can have it equal a method which returns an object so that it will dynamically change that id so i'll go ahead and refresh the page just to show that the error message no longer comes up so dynamically change the id as we go through our application it looks like there might have been a bug on the edit page but we can kind of figure that out later on all right so a couple of other things i want to kind of change up a refactor is if i go ahead and just put bogus data inside the login panel notice how this has an ugly background color so i'm going to go ahead and just try to fix that up really quick so i can go to the login page and instead of having error i could do danger alert and just remove error from that just to make that look a little better i think the same thing is happening with register danger alert and remember danger alert is kind of defined as a a global css style so and i think actually create song or edit song may be doing the same issue no we have danger alert there what does edit song have danger alert okay so now that's all good to go i don't think there's anything else that maybe we could uh refactor in the spare time i think actually when you register and login it doesn't redirect you so just to kind of demonstrate that uh i think testing gmail.com actually i'm not sure what we should use i'll say hello gmail.com go ahead and give it a password and hopefully it should register me and it does but it didn't redirect me to anything so on the register page we want to go ahead and say this dot router.push name and i'll say songs so after you log in just go ahead and just push the user to the songs page and we want to do that same functionality for the login view our login component so if i go back to sign up and say something random register takes us to the songs page log out and go back to how do we remember what the username i created was i think it was hello yeah i'm pretty sure it's hella white gmail so i'll try hello gmail.com you know pass it that password and again login has now taken us to that songs page and then lastly there's there's this hello component which takes us to this welcome to your vue.js app page and i don't even want that anymore so first i'm going to go ahead and delete the hello view i'm going to go to my router and i can go here and just delete hello i can delete root we don't need a root anymore and down here we can just have a default path so we can say i think it's path is star and then we can say redirect to songs so basically if you try to hit a path that doesn't exist let's just go ahead and redirect that user to songs let's see no trailing spaces with router index right here's a trailing space so notice now if i were to just go to some arbitrary route it takes us to that and then i think we have a couple components that are going to that root thing so name instead of root let's just say songs so if we long out log out it's going to go ahead and take the user to the songs section and make sure this goes to songs so i'm gonna go to add song go back to that takes us to there i'm gonna log in with hello gmail.com and make sure that logout takes us back to songs whoops might help if i went to a different route before i log out so i'm on the add or crate song click log out it takes us back to songs awesome all right so at this point the ui is looking a little bit pretty good i mean it's looking pretty good we've got some decent functionality going hitting a couple of back and end points now i think at this point i'm gonna try to add a new piece of functionality where we can bookmark songs so to start off before i actually get into doing that i kind of want to do some changes to the back end so that when we add a new model we don't have to clear the database and keep adding that data to the database manually so one thing we can do is if we go into the server folder i'm going to go ahead and create a seed folder and create a new file called index.js and inside this file basically it's just going to be a script which populates our database so if i were to first go into let's see how we do it in our app we bring in sqlize so we're going to do something very similar to that bring in sqlize and we're going to go ahead and call sync and make sure we call force a true and then once sync is done running i can go ahead and just bring in some of those models so like in this case i can bring in the song or i can bring in the user model and what we want to do is have some precreated json files so i'll say like user.json which has an array and i could do songs on json which also has an array and inside of those we could simply just say s const songs is equal to require a relative path to songs.json and then same thing with users and i'm also going to include bluebird which i think we have installed on the backend already let me just ignore this i don't want the linter to run anymore i can kind of fix those lent issues later on so we don't have to get bogged down with that but basically we're loading in those json files we should just have you know a collection of users and whatnot and the reason we brought in this promise library because we want to make sure that we finish inserting all the users and all the songs before we do some other stuff so what i can do is i can say promise dot all and i could say await in fact i'm going to change this to async function instead of that fat arrow so wait promise not all and i can do i simply do let's say do the songs first or maybe the users first users.map and that's going to take a user object and it's going to return or it's not going to return anything it's actually just going to run something so we can do user dot create and let's go ahead and pass it that user object so basically it's going to run through that json array and for each one create a new user object so it wasn't not that complicated and we want to do the same thing for the songs so song song.create awesome so if we were to assume that we actually have some songs in here and we can kind of populate those so let's go ahead and go to the songs request just get all the response back go over here you can just format this and just go ahead and put that data into our songs json so we have something that's ready to go and then as far as user if i were to log in with testing gmail.com one two three four five seven eight hopefully this lets me log in uh no what was it again hello all right so hello works so let's just go ahead and snag that user and go ahead and format it and we just want to grab that user information there and put it right there and we don't want to put the id because that's going to be auto incremented by the database and we don't care about having a hash for the password so i'll change that to a real password there and i'll change that to testing so that should create when we run this seed function it should create that user called testing at gmail.com with that password and then we should also create all these songs and again we don't want to include the ids so i'm going to remove the ids and we do not care to include either created at or updated at so at this point i think this function should be pretty good to go and before i run this i think one thing we want to do is inside this config file let's go ahead and change where we're saving the storage path because now we're having two different files try to load in that configuration so it may this is going to be relative to where i think running your your process so we want this to store into the same location so in here we can do cost path is equal to require path and then here we can say path.resolve der name so get the actual directory that this config file is and then go up to i think go up to let's see config go up to yeah i think that should work so now i think if we were to run this seed function hopefully everything is good in fact let's not run it yet because we want to make an npm script to do it for us so let's make a new script called seed and basically he's just going to run node of seed cool so at this point we can go make a new tab to the server go into that c project and simply run our seed uh unexpected token hmm totally forgot to add that so let's try it again can i find models and that's because we need to go up a level we need to go into source and we need to go into models i think model says index awesome run that cool we get all of our data dropped and then readded as we need it so now again whenever we want to run that seed function we can do npm run seed and it will just go ahead and run that seed script drop everything that's in our database and reinsert it so this is really good if someone for your team to just come in and you can make this part your build or your setup to just spin up the database or clear it out as needed all right so now we're getting into the domain of building more complicated models that have associations between them so in order to get our system set up to do that let's go into our models index file and add a little bit of logic to kind of run the associations over our models if they exist so basically we say object.keys db for each function model name and then for each model that we find check if it has an associate method if it does we can just go ahead and call model name dot associate and then pass it the db object so as of right now this doesn't really do anything because we don't actually have any associate methods declared so for instance what can we do with this well if we wanted to add that new feature which was bookmarking songs we need to add a new model called bookmark.js i'm going to rename this one to be song instead of songs but basically if we have a model called bookmark so bookmark and this one is actually going to have nothing in it it's just a default object and we're basically using it for the associations what we want to do is inside we can say bookmark dot associate is going to be a function which takes in a list of models and then what we can do is start associating that bookmark to some other model so we can say bookmark belongs to models.user and bookmark belongs to models.saw because basically we're building an association between the user and the song as a bookmark go ahead and save this and i think that should be all we need to do object.keys i think i need to do keys type that wrong let's see if it works alrighty so now since we made that new object called bookmark it makes sense to go to our seeds let's create a bookmarks.json file let's go ahead and require it and let's go ahead and make it in a way a weight promise so the main takeaway here is make sure that this await to promise all for bookmarks comes after your songs and users because you need them to exist before you try to build up an association so if we go to bookmarks and make that an array we could do a song id is one and a user id is one and that needs to be wrapped all right so basically we're associating user id of one with the song of id of one um so go ahead and run my seed function hopefully it all bookmark is not defined uh here i forgot to define it as bookmark okay so at this point there's not really a good way to grab um the bookmarks so i think we need to start working on the next piece of functionality which is an endpoint to access the bookmarks for a particular song so if i were to go in the routes and i go into here i can say book marks controller and i can say app dot get bookmarks that's going to be the index method of that controller and we can kind of refactor this routes method in in a little bit starting to get a little bit too complicated imagine this having like 50 or 100 routes but anyway if we go to the controllers now we can add a book marks controller.js go ahead and copy songs we need book mark here we need an index method let's not worry about the other ones at this moment all right so what we want to do the first step is we want the ability for or we want the user to have the ability or the ui to search for a particular bookmark based off of the song id so if we were to just allow the user to do like something like this so if i were to go to here and say do a get request on bookmarks and do song id is equal to one so like if we wanted to be able to do that let me save this all right so obviously this is not going to return anything because we don't have uh bookmarks yet but if we did we want to be able to grab that song id in the query string so i'll just say song id here and say if up here we can say song id is rec dot query dot song id in fact i'll just do that and go ahead and just cut out some of this stuff so we could do cost book mark is equal to await bookmark.find1 because you should only ever have one bookmark that correlates the user to a song you can't bookmark a song a thousand times you can only have one of them so we're just going to use find one here we're going to do where we're going to do where song id is equal to song id which is passed in in the query string and i can go ahead and just kind of delete all this other stuff and return bookmark there right so if the user has a bookmark for a particular song this will return that bookmark otherwise it will return an undefined so to test that out we can go over here and say give us the bookmarks for song id one and this will give us one bookmark back for that song id and we're gonna have to have the functionality to also do a query for the user id and i'll go ahead and just hack in something for right now so if i did like user id is also required so user id user id basically if we were to just pass in that and use your id is equal to one boom we get a result if we do two we don't get anything back uh but i think we probably should get at least something back so what is bookmark actually set to set to null so i think maybe we want to return an empty object instead makes a little bit more sense than just returning a null object well maybe not we'll keep it as null maybe null makes more sense all right so if the bookmark doesn't exist we return null and in the ui we can kind of use this endpoint to say hey i'm on song six have i already bookmarked it and if i have let's go ahead and display a bookmark in a certain style and if i haven't display it in a different style and allow the user to click on it to actually bookmark or unset that bookmark on the song all right so now that we have an endpoint to get back the bookmarks and we have a way to easily spin up a database or refresh it with some good fresh data let's go ahead and go back to the ui and let's try to add a section to the song view page which allows a user to bookmark a song so if i were to go to song metadata which if you remember song metadata looks like this panel right here basically we want to be able to add a bookmark link here so what we can do is right next to this button we can just create a yet another button and it doesn't need a two but it does need a click callback and we can say bookmark in fact i'll just say set as bookmark and i'll say bookmark um yeah so down here i can go to methods and set as bookmark it's going to be a method make sure we have clicked it so every time i click it it's printing out bookmark and so first of all we're gonna have we could just have two buttons i guess we could have one button which is used for bookmarking the song and the other one for not bookmarking so i'll say bookmark and unbookmark let me just let me just change these to bookmark and on bookmark all right so we have these two different functions one of them should just simply unbook mark or song the other one should do the opposite and bookmark the song and first of all we don't want to display this if the user isn't logged in so i'll say store dot state that is user logged in so only displayed if the user logged in and we can probably refactor this in a little bit to do map state um in fact i'll just do that now so kind of jumping around but we can import something called map state from view x which allows us to inside the computed if we do comp computed is an object where we can do map state of i think we can pass it let's say is user logged in i might have to look up the docs for this one but i'm pretty sure what this does is if you pass it whatever state variables you want it'll just go ahead and put them right on this computed function so instead of having to do stored on say that is user logged in we could just do a shorthand just say that um let's try this out it doesn't work i'll look up the docs right so we're not logged in the buttons do not show up so if i go here and so hello gmail.com and go to that man shoot let me just register something oh it's called testing not hello oops my bad all right so we're logged in now we go to view boom the bookmarks and on bookmarks show up so that's kind of just showing how you can do map state to just grab something from the store and put it as a computed method i might go back through my other files and do that as well not sure if this is better for doing like a map state or maybe you can do a mixin there's also something called mixes mixins in view um we haven't really covered that in this tutorial yet but it might be nice to look that up and see if we can find a use case for using a mixin but in this what we're trying to do now is we only want to show the bookmark or the unbookmark if the user doesn't already have it so basically when this component is mounted we first let's say we can import a book marks service from services book marks service and if i go to services and i go to copy that and i go to rename this to book marks service again we only have one method so far in the bookmark in point bookmarks and i'll just go ahead and say this requires a song id and a user id i'll just say params for now keep it simple all right so what we have now is the ability to call that bookmark service pass it some params so if i were to go to mounted and say actually async mounted and say const bookmark is equal to await bookmark service index and we can pass it song id of one and pass it user id of one just temporarily we can see if it returns true or not so i'll say bookmark and go ahead and print that out all right so now when the page loads or is mounted we get this bookmark back and be sure to wrap that and get back data so you see here we got a bookmark back for song id1 user id one so if that's the case because remember the other case is um let's say we were to do like use your id of 10 just go ahead and refresh the page that should return null right remember the back end returns null for that so if that's annoying at the relogin huh if it returns null we need to show which button we need to show the bookmark button so i can say if the user is logged in and if this dot bookmark is actually defined or if it's not defined actually um in fact i'll just go data up here i'll go say data and just return a data object and say is bookmarked is equal to false and i'm going to set it so this dot is bookmarked is equal to bookmark and just cast it to true or false if it's defined so up here i could say v if it is not bookmarked and then over here i can say v if it is bookmarked and i think that should work let me uh where is that make sure to put this there in the method all right so in this case remember bookmark returned false so we have the ability to click bookmark to set it as a bookmark and then if vice versa if i were to change this back to user id of one save it we should get the unbookmark button awesome so now at this point we actually want to use some of the real data that's returned so if you remember back then a while back and like i don't know which part of the tutorial was but we have access to the user id by doing this dot store.state.user.id so we can dynamically set the user id there and the song id of course is inside of the route so i should be able to just copy and paste um where do we do that view song oh it's actually passed in i think we pass it in as a prop right so what we can do is just say song dot id so now we're gonna do a request for that particular song that we're at using the particular username that we have and save this and see what this does okay so if you remember in that whole seed stuff that we created we went ahead and set that to true and that's why song of id one and the user i'm on is user one this is already bookmarked for us all right so now for the next part we want to be able to click and unclick this button and change the state of the bookmark right so we're going to need to implement these so i can just go ahead and get rid of this and let's go ahead and change those to async methods and the first thing we want to do is we can say post to the bookmark service with song id and user id and i don't think we care to um well i don't think we need the information back so i'm just gonna go ahead and get rid of that but one thing we do need is for whatever reason let's say the endpoint returns an error we want to go ahead and catch that we're gonna try catch and just go ahead and print out in here for now and then same ordeal with unbookmark but instead of post let's just do a delete let's see i think it would make more sense to wrap this again in a try catch just in case our back in for whatever reason decides to fail out and i'll just print out the error all right so now in bookmark service we don't have a post and we don't have a delete so let's go ahead and add those so add in um yeah add a post add a delete and here we can do a post to bookmarks and delete we can actually do a bookmark id bookmark slash bookmark id we don't need the past parameters in fact instead of prams i'm going to say bookmark just so it makes a little bit more sense okay so now we have these extra methods but we don't actually have endpoints to process them so if we go back to the server now we can go back to our bookmarks or should we go back to routes first and of course let's just go ahead and create two more routes so we need a way to post a bookmark and we need a way to delete a said bookmark so i can say book mark id that's going to be a delete method so here if i go to bookmarks controller now let's just go ahead and create those endpoints so post and delete so for post on the body we should have the bookmark so we could just do bookmark physical rec dot body and of course we can say cons to bookmark or just say await bookmark dot create bookmark and then send back the bookmark when it's done creating and these aren't final we're probably going to come back and change these a little bit when we add put a passport and do some more user authentication with the jwt token but i think these are a good start and then for the delete method if we were to come down here and say book mark id and that's going to be from the prams what we can actually do is we simply want to find the bookmark by an id so i can say find by id we can say bookmark id constant bookmark is equal to that and we simply want to call await bookmark.destroy and that will go ahead and delete the bookmark from our database and for what we send back we could just say send back um yeah i guess just this select the bookmark that was destroyed if it was successful all right so just a quick recap let's just make sure this is a work posting we grab the bookmark from the body we create that and then we send back the exact same thing that they sent in and then arrows occurred trying to create the bookmark and then for delete find the bookmark by id go ahead and destroy that bookmark and then send it back to the user if it was successful and then an error has occurred trying to delete the bookmark let me rename this one so assuming all is well if we were to uh refresh this page i saw an error i'm not sure if that's can i read property id of null um it's probably this is not all so i can say if the user isn't logged in we don't even want to do this logic so if this dot is user logged in if they are not logged in let's just go ahead and return for now so that we don't get that error when they try to mount that page cool so one thing that's really starting to get on my nerves is that every time this page refreshes we kind of lose our state or login state so there is a view local storage view x component that we can use it's called ux persisted data so if i were to just go ahead and install this one npm install save boom oh wait there we let's see so install that persisted state and then tell you how to use it until you just go ahead and go to your main file and import it and then go ahead and pass it to your store so actually this needs to be in my store not my main so if i go to the store file and then i go to where i create the store which is line seven i go ahead and pass in plugins create persisted state so the great thing about this is whenever the page um refreshes or whatever it's just going to store or refresh whatever state you had in ux because that's all stored in local storage so notice that i'm already logged in and basically any state such as the user token is user logged in boolean and the user object is going to be grabbed from local storage and put into my view store on initialization so now we can kind of start like debugging and make sure this is working i think there's a little bit more work we need to do but so the first part if we were to click bookmark we noticed that it makes a post request to bookmarks and that returns a response back but one thing i'm noticing is that you can click it multiple times which obviously doesn't make sense and then secondly this bookmark thing is not changing so the first thing i want to do is go to the database side or the server side and make sure that we can't try to bookmark the exact same song more than once so if i go to the server down here and just go ahead and dive down into that bookmark service or bookmark controller so again we're hitting the post method and we need to add a little bit more logic to this to be able to support that so if you were to think if we were to hit the back end with a post endpoint we need to first check if the user already has a bookmark for that song and if they do we can throw back some type of error so um first thing we're going to do is i'm just going to refactor this a little bit to be song id in book or user id so grab those from the body object and put them into song id and user id and we want to first check if that bookmark already exists in the database so we can say cost bookmark equals await bookmark.fine1 and then of course where and we just pass those two criteria so song id and user id and i don't know if i mentioned this but in the model when you do relationships or associations it's going to give it um this type of format capital s and then id at the end so capital song id or capital user id and you can overwrite that to be like camel case if you wanted to but i'm just kind of going with whatever the defaults are for sqlize it's not that big of a deal so again we get the request information we check if there's already one in the database and if one exists so if bookmark we can go ahead and just return a 400 error and just give a you know useful message saying like you already have this set as a bookmark so again sending back a 400 status the bookmark already exists and then otherwise we're going to create a new one here so let's go ahead and save this and see how that works out so now when i click bookmark it's getting back an error now because that bookmark already exists before i go further i think i added like before i added a bunch of bookmarks so i'm just going to go ahead and clear out the database so that remember we do npm run seed just to get rid of all those extra bookmarks that we don't really want so i'll refresh the page now and then i can go ahead and just click bookmark and this one's already bookmarked because remember in the seed code we told it to bookmark song one for user id one and i think we're on user id of one right now okay so that should make sense um the second thing we want to do is when we create this bookmark down here we're not actually currently associating it with any song id or user id so we first need to grab the song actually in fact i think i could just do this so i could just say set song id is equal to song id and user id is equal to user id so then when we save it into the database it's going to actually associate with the song id and user id and then we'll have a correct association set up so let's go ahead and try that just to make sure again this shouldn't work all right so i think our post endpoint should be okay if not we'll come back and fix any issues um our delete endpoint again just takes a bookmark id finds that bookmark by the id and then destroys it and sends back whatever so let's go back to our song metadata view and i want to just go ahead and kind of change some of the logic so instead of saying is bookmarked we're just going to keep track of the bookmark so we can have like an id reference and stuff so i'm gonna change those to bookmark and bookmark and then here i'm just gonna say unset as bookmark maybe just unsaid bookmark and then set as bookmark and set as bookmark for the click method and then unset as as bookmark i'll just keep it consistent so let's go down here and rename those methods so remember we had set as bookmark and unset as bookmarked there and then of course for the data instead of having this boolean what we want to do now is we can just keep track of the bookmark that's returned from the backend so instead of saying cons bookmark and then setting this i can just say this dot bookmark and keep track of that bookmark that's returned from the database if there is one and then down here set as bookmark of course would just do the same thing set this.bookmark equal to whatever the backend returns go ahead and just wrap this and return data there and then unsaid as bookmark is going to do a delete method or a delete request to the backend where we're going to say this.bookmark id and then of course when the delete method is done running we'll just set the bookmark to null so let's save this and see how this works so now we have unset as bookmark we click it we see that it makes a delete request to bookmark id of one seems like it worked fine we click says bookmark makes a request and that should be updated so i can just keep on clicking this to unset it or set it as a bookmark to make sure it stays persistent when i refresh so i noticed that this one bug when the page load loaded um we actually got a bookmark back from the uh service i think let me see let me just refresh this one more time all right so we actually are having an issue when we try to post so if i were to go back to our post endpoint here let me just make sure that we're posting the right stuff so i think we are see click post sending song id and user id that's fine i think the issue is here we're only doing a request for user id and we should be doing for both so a little fix for that is instead of having this on the mounted thing because i believe we're passing in that song id reference in a prop if you notice here we're passing in song as a prop so when this is mounted it might not actually have that prop defined yet so instead of doing this in the mounted logic we could say put this in the watch logic so i can say async song and then go ahead and just run this code inside that watchlogic instead okay and then get rid of mounted go ahead save that okay so now it's actually doing the correct request for song id1 and user id1 and we should just be able to keep on alternating at this point let's see unset as bookmark make sure that persists click set as bookmark so whenever your refresh is say unset as bookmark all right so everything is working for the bookmarks now and i think at this point we can kind of wrap up this part six and stay tuned for part seven where i'm probably going to start displaying those bookmarks on the main page and again feel free to subscribe to my twitter if you want notifications when i make new videos alright thanks for watching