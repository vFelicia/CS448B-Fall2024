hi my name is ed and i'll be your instructor for this reacts fundamentals course in this series we'll be creating a simple react bar single page application which will allow us to search and investigate through popular tv series we will cover such topics as gsx components and containers state props conditional rendering react router and much much more what you'll need is some knowledge of javascript html and css the course will contain some es6 and es7 syntax but don't worry i'll explain everything along the way i will not be assuming that you know anything about react so each and every line of code will be explained with great detail in this course you will not only learn how to write react code but you'll also find out how to maintain and organize your code base to keep your code as clean and readable as possible so pick up your id and try to code this app from scratch along with me in this reacts fundamentals course we will be using an official react boilerplate created by facebook's team you also need to install node.js on your local machine i already have it so i'll skip the installation part but you can download it on nodejs.org let's go back to the github page and first of all what you need to do is you need to npm install create react app with the global flag and this will take a few seconds now that we have it installed uh you can go back to create react app github page scroll down a little bit and here you can see the quick overview um i don't need to use this npx so i'll just copy create react app paste it in and the first argument is the folder name i can actually show you if i remove the folder name if i press enter it will say that i need to specify the project directory for example create react app my react app and i'll do just that and i'll name my app tv series app so this will probably take a while a minute or two now that our app has successfully been created i'll change directories to the tv series app and i'll type in npm start press enter and this should spin up the development server if you're spinning it up for the first time it will probably take a while and congratulations on setting up your react environment what you're seeing right now is the boilerplate that create react app provides us let's open up the code editor and see what's inside i'll be using adam but any other ide will work just fine the gold for your app lives inside the src folder so we will be spending the majority of our time here the main file is syntax.js so let's open that up and here we can find find five imports let's talk about each and every one of them the first one is the react library itself without it you wouldn't be able to create react elements the second import is reactdom which initially was part of react library but was split into its own eventually it works as glue between react elements and the dom and usually you will just use it to render your app as we're doing here the third import is an index.css file so nothing too interesting going on here just a simple css file uh fourth import is the app component which we're currently rendering you can open that up don't worry if you don't understand what's going on here eventually you will after a couple of lessons and the last import is a service worker which will let the app load faster on subsequent visits in production we won't be looking into it as it's out of the scope of this course but i will provide a link below and you can read about it if you like so let's talk about reactdom rounder method it can take up to three arguments the first one is the react element that we want to render the second one is the dom container in which we want to render our react element and the third one is an optional argument you can provide a callback function to it we won't be doing that but there you can store whatever logic you want and if you're wondering where this root element lives it's under the public folder index.html file i've already changed the title to tv series app you can do that if you like and here you can find the root element i mean the div element with the id of root so let's close index.html and let's try to create our own react element and render it to the dom so i'll create a variable with the name of greeting and all assigned create element to it and also this method takes up three arguments the first one is the tag that we want to use i will be using an h1 tag oops the second argument is the props that you want to provide to your element don't worry if you don't know what props mean you will find out in later lessons but for now i'll only provide an empty object and that will work just fine and the third argument is the string that we want to use inside our h1 tags and i'll just say hello world take the greeting variable pass it into the render method save index.js and now we're seeing our newly created react element with hello world greeting attached inside app.js we're seeing a different kind of syntax this bit of code also creates a react element but it's using a syntax extension to javascript which is called gsx as you can probably tell this looks a lot cleaner and readable so let's refactor our newly created react element to use jsx syntax wise it's really similar to plain javascript so just open up h1 tags and type in hello world save it and the result on our page hasn't changed one bit under the hood create react app is transpiling jsx element to react elements with the help of transpiler called babel if you're interested how the transpiling works i will provide a link below and you can read more about it if you like gsx also fully supports javascript so you can embed expressions inside of it let's create a simple function which will just return the current date inside of it create a data object and let's just return the current date okay so we can refer to this function inside our greeting variable um jsx uses a special kind of syntax which let the gsx parser know that it needs to interpret javascript expressions instead of a string and let's just type in current date and use this special syntax which is just the curly braces and let's refer to the function here save it and our page is now rendering the current date awesome also if you're interested uh this is just known as an arrow function so essentially it's identical to this kind of syntax again the end result hasn't changed at all so congratulations on using jsx the first time we already have an example component created for us by create react app let's render it back inside index.js file we can delete the code that we've written in the previous lessons we will be using it anymore and let's refer to the app component inside our render method now if you're wondering why we're using a different kind of syntax which looks more similar just to regular html that's because we're rendering a fully functional react component instead of just a simple variable with some gsx assigned so save index dot js file go back to your page check if everything is working correctly and it is so let's open up back the app.js file and we can see that we have a class created with the name of app which is extending uh class component provided for us by react and inside this class we have just one render method which is returning the jsx that will render inside our page so nothing too much difficult is happening here and we can easily make the changes to fit our needs so first of all let's delete the image and we can also remove the import here save it go back to our page and the image was successfully removed but we have a big gap under the title so open up app.css and find app header class and change the height instead of 150 pixels change it to 60 pixels save it this looks much better okay let's change our title to tv series list and instead of this intro text we will be creating our own first component so let's create a variable with the name of intro and assign the arrow function to it which for now will just only return this copied jsx here so be sure to add one argument with the name of props which is sure for properties in the upcoming lesson you will understand what that is and change the text to our first functional component and refer it here save app.gs and we have created our first functional component so both intro and app are identical from react's point of view although app has additional features since it's extending the component class provided by react we will discuss those additional features in the upcoming lessons functional components are called functional because they are literally just javascript functions which return a react element in our case we're just returning a simple gsx it's really important to have your own custom component capitalized since that's the syntax convention that gsx uses lowercase names will refer to builtin components so it will be just considered as simple html tags and capitalized names will refer to your custom components now that we have written our own react component we can make app.js a bit cleaner and create a separate file for the intro component under the src folder create a folder with the name of components inside the components folder create a folder with the name of intro and inside the intro folder create a file with the name of index.js let's copy our intro component from app.js pass it back here and remember to import react library since we're creating react elements inside this file all that we need to do is export the intro component and we're good to go by the way if you're wondering why we're using a sort of different syntax here this is just known as a shorthand syntax for arrow functions so what goes after the parentheses is returned from this arrow function and also one good thing to know is that if you're passing only one argument into your arrow function you can delete the additional parentheses here save it go back to app.js and let's import intro from components intro save app.js and nothing has changed on our page but what happens if we want to use a different message inside intro component ideally we want to reuse this component but right now it will always return just the same message that's where properties get in think of them just as functional arguments to your components so inside index.js we have one argument passing in into the intro component and here we can use those custom properties with the help of the props object so props is just a simple javascript object with all of your custom properties combined inside that app.js let's create a custom property to our intro component with the name of message and here we will add a string which we'll say here you can find can find all of your most loved series save up.gs and inside the intro component let's delete this string and just access the message property inside our props object save and as you can see we are rendering our intro component with uh custom property by the way you can pass anything you'd like so not only a string works you can pass in a boolean a number array or even functions it's time to start adding additional functionality to our app component components that extend react component class have additional features and one of them is state but what is state think of it just as plain javascript object to which your component reacts and renders whatever is needed let's create our state object and add a property to it with the name of series and for now this will only be just an empty array we can access the series array inside the render function by simply getting it from our state object so just to be sure that everything is working fine let's print out the length of series array to our page this state dot series dot length save app.js and the length of our series array is rendering to the page which is zero and that is correct so just to keep our project a bit more organized we already have components folder created so let's add another folder to it with the name of app and move everything that is connected to the app component to this folder so app.css app.js and app.test.js since we moved it to a different folder we need to change the directory for our app component so just like that also we need to change the name of our app component since we already have a folder name for it so just to make it easier i'll just rename it to index.js that way we can import it just like our intro component and we don't need to specify the additional javascript file okay so everything is done inside our app folder so what's left is just to change the import inside index.js so since we move this to components folder let's add components save index.js and we have the same page rendering once again react class components have accessed the socalled life cycle hooks which you can wind your code when a particular component mounts unmounts receive new props and many other situations let's take a look into a method called component that mount it will be immediately invoked after the component has been rendered what do we do inside this method is completely up to us but for now let's create an additional array with the name of series which will hold only two elements for now and the first one will be let's say vikings the second one will be game of thrones let's use a set timeout function which will take two arguments the first one is just a function and the second one is the delay after which your function will be invoked inside the function let's use a set state method which will take an object as its first argument so what setstate does it tells react that this component and its children need to be rerendered with the updated state so let's take the series property of our state object and assign to it our newly created series right save index.js go back to your page and the length of the series changed after 2 seconds let's go back to index.js and i want to show you a trick so inside your object if you're using the same names of your property you can actually delete this bit of code and this will just take the series properly and assign our newly created series array to it so save index.js go back to your page refresh it and the length of the series should be two after two seconds in order to send requests to the server first of all we need to install a library which will let us do it there are a lot of options out there but i personally love to use fetch we can install fetch with node package manager i'll just copy this bit of code and pass it into the command line press enter okay after installing fetch let's open up our app again by typing in npm start okay so we have our app running back again so let's go to the code editor and open up index.js file inside our app component and let's import fetch and let's just send out the request to the api whenever our app component renders uh obviously we want to do that inside component.mod method let's get rid of this bit of code and type in fetch which will take a url as its first argument we will be using a service called tv maze api which will let us obtain different kind of information for various tv series right here i'm just searching for tv series with the name of vikings and fetch returns a promise so obviously we need to resolve it and in order to do that we'll need to chain in that method which takes up a function as its first argument and inside this function we will have access to the response object so for now let's just console.log the response object and go back to our page open the console and here we can see that we're getting back the response object what we need to do right now is parse the results and get the json from this object it's really easy to do so what we need to type in is response json and this will just return the json from the response object obviously so what's great about promises is that we can chain that methods and what we're returning from this line will get back here so we'll get back the json and let's for now also just console login okay save it and we're getting back uh 10 items and let's take a look into few of them so the show id uh the url and the name of the series and we have a lot more going on inside the show object um so what we can do inside this method is that we can actually set the state of our app so let's use this set state and let's add in our series to the series property of our state save index.js go back to the page and we're getting back the length of series already 10. okay that's exactly what we wanted and just to be sure let's refresh it one more time and yes we're getting back the response from the api right now we launch an api request every time our app component renders but if you think about it does the app component really need to know about the tv series array or when and how the call will be launched the answer is definitely not we want to keep our app as modular and as simple as possible that means creating separate components when it's logical to do so in react there is a common pattern used known as presentational components and container components the idea is very simple inside your presentational components you would be concentrated on how things look you wouldn't specify how the data is loaded or manipulated and inside containers you would have all of your functionality that means how things would work how data is fetched and manipulated most of the time containers will be stateful that means they will use state to serve data to our presentational components okay so let's create a containers folder under the src folder inside the containers folder let's also add another folder with the name of series and inside the series folder let's add an index.js file import react component from react create a class with the name of series which extends component and let's render for now only a dev let's type in series container export default series okay inside our app component let's import series from container series and let's render it under our the length of all right message save index.js go back to the page and we're rendering the series container okay so what we need to do right now is we actually need to copy this code and let's paste it into the series component and we also need to get this message let's also paste it inside our div here let's save the series file then the component file and let's go back to our page once again and nothing has changed so we're seeing exactly the same result as we had at the start of the lesson but now we have divided the logic between separate components in the next lesson we will introduce a series list presentational component which will list our series inside an unordered list now that we have our series array return from the api call it's time for us to create the series list component which will render the tv series so under the components folder create a series list folder inside that folder let's add the index.js file import import react from react for now let's just create a functional component which will return uh just the div side that div let's type in series list component let's export defaulted and that way we can import it inside our series container okay now that we have that let's render it under the message of our series story length and i'll add in the list property to the component we'll get this list properly inside our props so i'll just pass in this state series uh here save index.js go back to the page see if everything is rendering accordingly and it is so let's go back to the series list component and we can delete this message let's add an unordered list inside that list now that we have our list property let's type in props list and we'll use a map function inside that function let's get the series and let's return a list item and inside that left side and what we want to do is show the name of our series so save that go back to your page and we're getting every single show name from our series all right good um so we want of course uh to look a little bit better we don't want these dots around flowing out here so what we can do is add class name and let's type in series list inside the series list folder we can create a index.css file and let's type in series list and less style type none now that we have that we of course also need to import it here so import index.css save that and we're not seeing the dots floating around on the left side also i don't like the padding on the left so i'll just remove that as well now this looks centered awesome one thing that's left to talk about is we're actually getting uh this warning from react so it says that each child in array or iterator should have a unique key prop so what we need to do is on our list item we need to add a property with the name of key and let's type in series shell id just to make a little bit cleaner okay save that uh open up the console and we're not seeing the warning anymore so what we did is we add a key to our list item so keys help react identify which items have changed or have been added or removed so the best way to pick a key is to use a string that uniquely identifies a list item harmonic siblings most often you will have an id for that to use your data as key but when you don't have a stable id for your rendered items you may want to use an index as a key just as the last resort just know that it's not recommended and you should always try to use an id that's unique for your list item it is possible to create additional components inside a component which will not be available outside of it this makes your code a little bit more readable and a little bit more semantic and it's just a good practice to use so let's create a a new variable with the name of series list item we'll of course pass props to it and let's return whatever we have inside our series list on order lists item and right here we can return series list item now let's pass series to it by the way we can also destructurize our props variable inside our series list item so we can just open up parentheses and type in series this will just take all of the properties whichever you want from your crops object so i'll save index.js go back to our page and literally nothing has changed so for now it may seem redundant that we're creating just a new component for a list item but later on in upcoming lessons we will be adding a little bit more information to it and then it'll be just a lot cleaner and simpler to understand in the previous lesson we were factoring series list component what we forgot to do is add the keep property to the newly created component let's go back to our code editor and copy the key property from the list item and paste it into the series list item component save index.js and the error is gone let's open up containers series index.js and right now we're only fetching series with the name of vikings but of course we want to make this process a little bit more dynamic under the length of series every message i'll open up a diff and inside of it i'll create an input with the type of text and i'll also assign an unchange handler to it so what this handler does is that whenever our input value changes it will fire an event to whatever method we assign to it i'll create a method inside the component with the name of on series input change we will be getting an event object from the unchanged handler and i'll cancel that log the event object and i'll also console.log the value of our input let's take on series input change and assign it to our input save index.js and let's type in something so i'll type in game of thrones and i'm getting the value of our input and i'm also getting the event object what we can do with that is we can actually copy the code from component and mount and let's paste it into the on series input change essentially what we want to do is make this part dynamic we can do that with the help of string interpolation inside javascript it's used with a very interesting symbol called grave accent it looks like this and i agree the naming is a little bit weird we need to wrap our url inside these symbols and let's take out the vikings the hard coded series name and what you want to do later is type in a dollar sign open up curly braces and let's copy the value of our input and paste it to the fetch url save index.js we're not getting anything from our series array and that is because uh we remove the component and mount method so if i type anything into the input let's say i'll type in the same vikings we're getting the same length of our array and we're getting the series dynamically it's time to add some conditional rendering to the page we only want a lawyer spinning up under the input whenever i type in something and we also want a friendly message which will say that no tv series have been found if the api does not give back any results with the given value of the input let's open up series container and we need to add a few more properties to the state the first one will be series name i'll just assign an empty string to it and it will just help keep track of whatever we have inside the input because currently we're not doing that and i'll also add an is isfetching property and i'll set it to false and this will help us know whenever we're fetching something from the api let's get all of these properties inside the render method i'll just get those from this state and the first thing that i want to do is i want to set the value of our input to the series name so right now it will only be an empty string i'll also make it look a bit better let's save index.js go back to the page and now whenever i type something into the input it will show the results but it shouldn't show anything inside the input and that is because i'm not actually setting the value and we need to do that inside the on series input change method let's type in this set state and i'll set the state of series name to the target value and i'll also make the fetching true and of course after the actual fetching is done let's set this fetching to false now that we have all of our state management done we can actually go to the page and check if everything is working fine and let's go back to the render method and we can now actually add the conditional rendering to the render method uh first of all let's remove uh the length of series array message we don't need that anymore and just under the second diff i'll open up curly braces and here i want to check if the series length is zero then we will know that no series have been returned from the api and if the series name string i'll also trim it is equal to an empty string now we know that nothing has been typed in and the series all right is equal to zero so we don't have anything to show to the user so then we can type please enter series name into the input and let's open the second curly braces and whenever the series length is also equal to zero but we actually typed something in into the input then we know that nothing has been fetched from the api and we can tell that no tv series have been found with this name let's save index.js go back to the page let's double check to see if everything is working correctly so we're seeing the the message right now and if i type something into it the message is gone and let's type some gibberish and we're getting that no tv series have been found with this name good um okay so last thing that i want to do is i want to check whether we're fetching um something from the api so let's open up the curly braces again and i'll type in if is fetching is true then for now let's just show a loading message and if fetching is false i'll just show the series list again save index.js go back to the page and we should get the loading message whenever we type something into it and yeah we're actually getting it it's just fairly hard to see because the response from the api is fairly quick in the previous lesson we left a little bug whenever i type something into the input even though i'm still waiting for response from the api i'm already getting uh the message that no tv series have been found and that is because uh we didn't specify that we actually shouldn't be fetching whenever we want to show this message and the same goes for the message above save index.js and we're not getting that bug anymore the last thing that i want to show you is how to add an image with react so i'll create a folder with the name of loader inside of it i'll just add index gs import react create the loader component export it and i already have a loader gif inside my assets folder you can use whatever loader icon you'd like it doesn't really matter so what you need to do is you need to get the source of the loader and i'll just name it loader src from assets lower gif so essentially you're just importing the source and what i want to do here is create an image and i'll add in the src like this and we also want to provide an alternative property because react will give up warnings if you don't do that i'll just type in loader icon save your newly created component go back to the series container and let's import it from loader whenever we're loading we're not showing that old message anymore we want to show the loader component save index.js go back to the page and we're actually seeing the loader popping up inside our page i also want to do it make it a little bit smaller because right now it's really big and i want to show you how you might want to do that on an element level maybe you don't want to create a new style sheet for that yeah it gives you an ability to add styles to an element and you want to provide an object to it i'll say width will be 75 pixels and i'll save the loader component go back to my page and the loader icon is looking a lot better react router is the standard routing library for react i i've opened up the mpm page for react router and here we have a short explanation how we need to install this library into our app so it's saying that if we're writing an application that will run in the browser uh you should install instead react router dom so let's do that open up your command line and let's type in npm install of course we want to save it react router dom now that we have rack router dom installed on our application open up index.js and import browser router from react router dom and we need to wrap around our app component inside this component and this will keep track of your ui in sync with the url save index.js and let's open our containers series index and what i want to do next is copy the intro code i'll just delete it from our app component and paste it into the series component just above the input of course don't forget to import intro from intro save series container close it and we don't need the intro anymore here as well save that we're seeing the same result but we just made our app component a little bit cleaner and move the intro component into the series container okay the next step is to create an additional component we'll call it main and here we'll have all of our routes so i need to import react from react i also need to import the switch component and also the route component from react router down then i'll create the main component passive props and i'll return the switch and inside that switch for now i'll have only one route exact path and the component will be series let's export the main component and of course i also need to import the series container from from series container okay save index.js and inside our app component uh let's delete the series container so we won't be actually rendering it inside the app component but it will render the main component from main okay and i'll copy and paste it here save the app component go back to the page and nothing has changed um but right now we're actually using react router dom to render our series container and in the next lesson we'll add an additional page and then you'll see how we can render different pages with react router dom we want to show multiple pages on our application but right now we only have one container so i need to create another one i'll call it single series this container will show a series with a little bit more information than what we have on our series container and for that i'll need react and this will be a class component so i'll need component class single series extends component render return diff and i'll just type in single series inside the paragraph and export default great go back to the main component and import single series from containers single series and we want to add an additional route the path will be series and an id this idea will represent the idea of the series that we want to show and of course it will be dynamic well we will be getting it from the series container and i also need to add in the component to the route and it will be single series save index.js let's try and go to our newly created container so i need to write series and let's say one two three we're getting back the single series message that we just created it would be nice of course to get this id and we can try and look inside the props save that open up the console and what i'm looking for is the match property and inside the match property we have another object and it's called params and here we have the id that we want to show so i can actually just type in the show id will be this props and if i recall it correctly match params id match params id save that we don't need this anymore and we're getting back the id from our url whenever i type something in into our input i'm getting back the results that i want but i want the results to be linkable and i just show up as a simple string and for that we need to open up series list component we need to import link from react router dom and we need to add the link into the series list item and as the name implies this component that works just as a simple link and i want to link it to series series show id i'm just making uh the link dynamic and it will always show the correct id and link to the correct show with the id attached of the shell so save that go back to the page and i'll type in same series vikings and click on that and i'm getting the single series result with the id that i want with help of that id i can go back to the single series container and we will be fetching the series from the api with the id and since we will be fetching something i want to have the loader and i want to create state for the single series add one property to it it will be show and i want to fetch the show from the api i'll just copy the fetch from single or sorry from the series container and i want to fetch it to a different url of course because i will be getting only a single tv show and this is the dynamic part so this is the id that i want to use for my route i can get it back from the props i'll create an additional variable id and i'll destructurize the match params object get the id back and paste it into the url of course i also want to change the set state method because i don't have series or fetching properties anymore i want to have it set state to show to be json and now whenever our component mounts we will be getting back the show to our container uh so the first thing i want to do inside the render method i want to get the shell from the state and whenever the show is equal to null i want to be showing the loader and whenever the show is not no for now i'll just show a message that show has been loaded add it into paragraph tags and i'll also console.log the show for now just to see what it have it says that the show has been loaded and i'm actually getting back the object from the api um i'll reload it one more time so they can see the loader popping up yeah it's there just not showing um for a more lengthy amount of time okay so now that we have the show object we can start and showing the information that we want into the page so i will be showing the show name then i also want to show the premiere that will be inside shell premiered then i want to show the rating i'll be showing the rating average then episodes and that is a little bit more difficult one it's living inside the embedded property ah so hard to copy show embedded episodes length so i'm just showing the length of the array and that will be the count of the episodes and lastly i want to show the image alternative will be show and the source for that will be show image and i think that i want to get the medium sized one medium save that go back to the page and we're getting back the info that we want and just to be sure that it works okay uh let's go back to the main page and type in game of thrones which is also an awesome series so click that and we're getting back the results that we want we can close the console and if we are thinking that you can create an additional component for this html you're probably right but i won't be doing that and i encourage you to try it yourself this is the last lesson and i hope that you really like the series and i'm waiting for your feedback and please tell me if something was wrong and if you love the series just leave a good rating thanks and good luck working with react