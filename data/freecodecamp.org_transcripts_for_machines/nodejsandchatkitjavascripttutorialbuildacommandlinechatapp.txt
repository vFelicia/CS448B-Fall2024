hey there in this video we're going to build a command line chat application my name's alex and i normally run a youtube channel called codecast you can find a link around here somewhere the other day my friend hugo and i we built a little command line chat application and wrote about it over on medium and i thought it would be a really pleasant casual project to teach you how to build step by step here on the free code camp youtube channel in terms of prerequisites or what you need to know already it would be good if you had some basic javascript and node.js knowledge already but you might benefit from seeing some things you haven't learned yet so i'll leave that up to you a big component of our app will be a tool that i'm helping to build over here at pusher called chat kits chat kit in a nutshell it's a hosted api that makes it easier to build chat functionality into our applications functionality like realtime messaging typing indicators read indicators which in turn we can use to power unread message counts and read receipts that kind of thing you might get the idea and if you don't it's okay one of the best ways to learn is by doing so on that note let's jump in and create a chat kit account to do that head over to pusher.com chat kit and hit sign up i already have an account so i'll click sign in instead and log into my existing account from here we can create a new chat kit instance by clicking on create new i'm going to call mine command line chat and for now that's all we're going to do in the dashboard we'll be coming back here in a second to make some updates but for the time being i'm going to switch back to the terminal and make a new directory called command line chat tutorial and run npm init dash y to initialize my package.json file the first thing we'll want to do for this project is create a chat kit authentication server which sounds complicated and it really isn't in fact it's something that's so common when you use chat kit i've created a little snippet here that we can copy and paste to kickstart this project so head over to the description to find this link copy and paste it real quick and in a new file called server.js we can paste it at the top here you can see we import some thirdparty npm modules which we'll need to install so let's quickly install express the express body parts middleware which allows our server to pass request bodies to get their data because express middleware which can enable crossorigin resource sharing and of course we'll need to push a chat kit server node or client sdk as well speaking of which if we scroll a little bit below the imports you can see that we instantiate the chat kit server sdk and as we do so we pass down an instance locator and a secret key both of which you can access from the chat kit dashboard so head over there and under the keys tab copy your unique instance locator and paste it in place of the placeholder you'll also want to grab the secret key and replace the placeholder with that as well i won't explain this file in too much depth but we basically set up that middleware we installed and then creates a route called slash users which in a nutshell accepts a username and then creates a chat kit user with that username if a user with that username does not already exist if a user with that username already exists it basically does nothing it just returns a successful response to the client in a real world application obviously two users with the same id or username can't exist at the same time and so the logic would likely be different but for our fairly simple application this is good enough similarly down here we create an authenticate endpoint which is a little bit contrived as well the authenticate endpoint is your opportunity to validate that a user is who they say they are however in this particular case we're not really going to authenticate users we're not going to ask them for a password or anything like that so this function is fairly like i say contrived it simply returns a token no matter what and that's okay for the purposes of this application at the very bottom we obviously set up the server as well make sure it's running and that's pretty much it for the server application we could run it now but there wouldn't be much to see we'll come back and run it later when it's more useful next let's create a new file called client.js and in here i'm going to start by creating a new function called main and this is going to be an async function that we pretty much call immediately and the reason why we do this is so that we can use the await keyword within the main function if you're not too comfortable with the async and away keywords then i highly recommend this talk by westboss over here on the free code camp youtube channel now the first thing we'll want to do when the user runs our application is ask them for their username we'll subsequently use this username to create a chat kit user via the server we just created now to ask the user for their username i'm going to use an npm module called prompt now the way prompt works simply is that you install it and import it just like you would most npm modules you call a function called start to initialize the module and then most interaction happens via this get function to which you firstly pass some options we'll explore this in more detail in a second as well as typically a callback function which is called when the user successfully or erroneously enters an input we might tweak this a little bit to use promises but let's start off with the basics by installing prompt so if i head over to the terminal and quickly run npm install save prompt and then just like we saw in the npm docs we can write prompt.start and whereas we would normally call prompt.get what i'm going to do is import another module called utel i'm going to create a new function called get i'm going to set it equal to you tell the promisify prompt.get now instead of calling prompt.get which takes a callback function we're going to call get this local variable instead which is equal to a function that returns a promise now which is going to enable us to use get with the await keyword like this like i skimmed over earlier the get function takes an options argument really this is a schema which is quite an overloaded term in programming but basically it's an outline of what we expect from the user this will be the username schema the description is basically what you want to present to the user so we'll say enter your username and then we specify the name by which we want to reference the user's input later so i'll write username then it's really just the case of creating a result variable and awaiting the results of get username schema on this result we can access the username which is basically the name that we supplied above right in fact we can do this in one step just by using object restructuring like this and just to make sure everything is working nice and fine let's log out the username to the console as you can see when we run the client it asks us for our username i write booker and booker is written to the console one thing i don't really like is this like prompt text at the beginning of my description the way to disable that really simply is to set prompt.message i think equal to an empty string yeah and now you can see when we run that we don't have that black prompt text never mind this error i just killed the application in fact yes come to think of it we should probably wrap most of this function inside of a try catch block if an error happens we'll write it to the console and call process.acce with the status code one this will just make things a little bit easier to debug if things go wrong this is also a good time to mention but you might notice at times that when i write my code it's kind of indented all over the place or maybe it's not as optimal as it could be for example i have superfluous parentheses or something like that yet when i save my file everything gets nice and tidy that's thanks to a javascript tool called prettier which i have integrated in my editor super cool tool check it out if you haven't heard of it already but yeah now we have this username down here we're going to want to send it to the server where we can create a chat kit user and to do that i'm going to use a thirdparty mod module called axios so let's bring an axios real quick and i'll create a separate function called create user that takes a username it's going to be in a sync function and then we're going to send a post request using axios to http localhost port 3001 i think i'll double check in a second slash users and then we'll specify the body to be equal to the username and again we should probably wrap this in a try catch block just in case something goes wrong let me quickly check server.js for the port number as you can see it's 3001 perfect um so but down here instead of printing the user to the console we can write create user and we'll actually need to await that result right there let's test this out real quick so let me create another splits here where i'll run the server remember i said it wasn't really useful to run before but now it is if i run the application and i enter the username booker we should see in the server output and we do that a user called booker was created if i run the client again and i try and essentially log in as booker again now the user already exists we see that written to the server as well pretty cool right you know else is pretty cool connecting to chat kits while i'm here i'm going to install the pusher chat kit client sdk the reason why i say it so slowly is because it's important to realize that earlier we installed the server chat kit sdk and now we're installing the client chat kit sdk often these would happen in different projects but because we're kind of condensing them it might seem a bit confusing at the top here we can import chat kit in fact specifically we're going to want to bring in the chat kit chat manager and the chat kit token provider and then down here just beneath the call to create user i'm going to initialize chat kit or more specifically the chat kit chat manager i have a handy little snippet for this because i do it quite often the first thing you need to do when initializing the chat manager is specify your instance locator now this is the same instance locator we copied earlier from the dashboard so let's copy it again or copy it from your server file it's the exact same the user id in our case is going to be equal to the user's username this can be a string or a number in our case it makes sense to use the username because that's all we really have and just like we specified the user's endpoint up here down here we need to specify the authenticate endpoint so let's do that now localhost port 3001 slash authenticates in that same snippet i call chat manager.connect and assign the result to a variable or a constant sorry called currentuser now this represents the current user we should be able to come here and print the current user to the console and we can poke around to see what is available on that current user spoiler most interactions with chat kit happen on this current user for example we'll call current user dot send message and so on but actually i can tell you right away that this is not going to work if we run this application now it would blow up and the simple reason is that the chat kit client sdk this module we import up here doesn't work with nodejs out of the box like i mentioned at the beginning of this tutorial i work on the chat kit team and when we started building this client sdk it was mainly built against the web browser which means internally it uses some functions which exist in the web browser but not in node.js so to use the chat kit client in node.js we basically need to for lack of a better word trick chat kit into thinking it's working in the browser to do this we can use an npm module called js dom which we'll need to import and then we'll create a function called make chat kit node compatible this is a snippet i defined for the sake of this screencast because otherwise i wouldn't have remembered the details what it really boils down to is creating this global.window property that chat kit needs internally we'll need to make sure to call this function and then once that's all set up we should i think be able to connect to chat kit and view our current user so let's run the server so we have something to connect to once that's running we'll run the client and connect as booker and see what happens as you can see once we connect we get i mean this input's hard to read obviously it's a lot of tax and a pretty big font and you can get an idea of the kind of functions and properties available on this current user we won't spend too much time looking at it actually because it's quite hard to discern the useful stuff from the uh sort of prototype output and stuff but you can see for example we have like the user's name here so we can access the current user's name by writing currentuser.name and so on you know we'll see this all in action soon enough let's allow the user to choose a room to join and the way we'll do this firstly is by creating a variable called joinable rooms and we're going to set this equal to the result of current user dot get joinable rooms then we'll create a variable beneath it called available rooms i'll explain the distinction in a second but in a nutshell we take the current user.rooms property and the joinable rooms constant we just defined and we merge these two arrays now what's happening here because it seems like we're conflating two ideas um i say that we're going to allow our user to join a room but then we have two concepts joinable and available rooms well in chat kit basically you have this concept of a joinable room it's a room that jacket user is eligible to join they have permission to do so and the room exists but they haven't yet joined once they join that room it's said that the uh user belongs to that room and so you can access an array of all the rooms that a user belongs to um viver's current user.room's property now there's a difference between how you represent this in our code and how we present it to the user the way we'll present it to the user is that all rooms are joinable even if the user has already joined the room this might sound complicated so it might be a bit easier to see in action once we have this available rooms property what we'll do is we'll write them all to the console so write available room stop for reach we'll take the um room and we'll take the index and we'll print that to the console uh so we'll print out the uh index and then we'll print out the room name you know if we run this right now we wouldn't actually see anything because we haven't created any chat kit rooms we have to do that ourselves and there are two ways of approaching this we can either create rooms programmatically using one of the sdks and this is the recommended way and in any real application this is likely the only way for example imagine you're building an application similar to slack or similar to messenger when someone creates a new group you know you're going to need to write some code that creates that group dynamically invites members dynamically all that kind of stuff because we kind of know our parameters here because this is a tutorial we're going to use the second approach which is to use the chat kit dashboard and more specifically the jacket dashboard inspector inspect your inspector here we can create an admin user and then create a room i'll call mine general in fact i'll create two i'll create one called general and i'll create one called free code camp which can be a chat room that people can come to to talk about free code camp now we have those two rooms i would expect that if i run the server and if i run the client and connect it as booker we should be shown a list of available rooms and we probably are we are actually but this is a bit this is a bit broken and let's debug this together first of all the output's a bit messed up because we're still printing out the current user let's fix that the second problem i think is that we see the room index zero and it says it's undefined and i'm trying to think why that is um oh i know why it's because in addition to um destructuring the current use of the room's property will also need to destructure the joinable rooms constant and if you're not familiar with destructuring i should have mentioned this earlier i'm going to make sure to link a tutorial in the description it might be a confusing concept as i even myself got confused just then apparently um but in a nutshell enables you to join a raise let's try this again hopefully now we see a cleaner input and the expected input no less as you can see we have the option to join the general room or the free code camp room next let's prompt the user to choose one of those rooms and so let me just bring this up a little bit and then we'll create another schema this time we'll call this room schema the description is going to be select a room and we'll call this um input chosen room we'll come down here and type kant's chosen room equals a weight get this is the same get function we defined earlier remember this guy and then we'll pass in the room schema once we have that we can actually pull down the room using the index which is essentially what the user supplied right they enter the number zero or one in this case that will correspond to an index in the array in that available rooms array that i'm highlighting right now and and so we can write available rooms chosen room and then it's time to subscribe to that room i have a snippet which can help me do this called subscribe or sub because i'm lazy and i do this a lot the room id is going to be equal to room.id in fact let me take a step back here this subscribe to room function takes a few different options firstly it takes the room id namely the room to subscribe to in this case it's going to be whichever room the user selects then we have the opportunity to specify some hooks the idea of hooks might be familiar to you but it might be more easy to understand if you think about them as events and event handlers for instance whenever a new message is sent in our chat room this on new message function is going to be called this function is going to be called when the current user sends a message that happens in real time which is fairly unimpressive right calling a function on the same client that caused that function to be executed but the place where chat kit really comes in here is that if we distribute this chat application to a bunch of our friends or a bunch of users as they send messages in the same room this all new message function is going to get executed in real time with their messages here we can write the messages to the console we'll want to include the uh message dot sender id which is essentially their username in our case as well as the message text itself and actually we're only going to print this message if the message dot sender id is not equal to our username because if we're the person who sent the message we don't need that to be relayed to ourselves because we're going to see it in the terminal input anyway there's no need obviously to notify the current user but they sent a message of course they know this is tricky to demonstrate because whilst we can subscribe to messages we can't actually send messages yet let's do that now we'll want to capture the user input repeatedly right so we'll want the user to be able to send one message and then another and so on now we could probably adapt the prompt npm module to do this but there's actually a much more suitable module called redline which i'll install now so i'll write npm install dash save redline actually i did notice this when i started recording this screencast but it seems like in note 10 there's another module called line by line that might be a bit more suitable i'll leave that up to you to look into i'm going to use reline because it's what i know and what i know about redline is that you need to import it well i know more than that that's pretty pretty obvious i would say but yeah we'll import redline and then down here beneath our call to subscribe to a room we're going to want to create a constant called inputs that we're going to set equal to redline dot create interface and we call create interface we specify an input option which is going to be equal to process.stdn stdn is like a fancy word for the terminal input basically we often refer to the output as std out as well which you might find interesting if you didn't know already then we can call input.on line and then we'll create an async callback function which gives us that line or that text basically and from here we can write current user dot send message when we call send message we need to specify the room that we're sending that message to all messages have to be sent to a room so that'll be equal to room.id and then the message itself which is going to be equal to the text property that looks good let's test this out i think this should pretty much work how we expect and as ever i'll run the server then connect with the client in fact you know what you know what let's create a new window here first we'll run the server then we'll run one client and then we'll run another client so when this first client will say my name is booker and this client i'll say my name is hugo hugo cowrote the tutorial with me awesome dude and we'll both join the free code camp channel so i'll join the free code cam channel and then i'll join the free code camp channel for hugo and then to be honest as i'm doing this now it would be nice to have some indication as to when we've connected right now it just feels a bit laggy but if i write hello we should see in the other console on the right there the book has said hello and we don't which is really sad let's figure out why so we get an error here which says expected room id to be of type number but was of type undefined and that's quite strange because i really don't see why room would be undefined here which line did that happen on line 85 so yeah right here um ah so what i'm doing is i'm looking up here where i access room.id and i'm sure this worked and so room.id can't be undefined that wouldn't make sense to me anyway but i'm looking at the wrong side of the assignment what i'm actually doing here is assigning a property called room id and down here i'm assigning it to a property called room and what i'm meant to write is room id let's save that and try again so let's just kill these clients real quick and rerun them i'll connect this booker then as a new user let's call that new user bob we'll both join the free code camp room and here i can write hello and as i write hello we should see that in the other window booker said hello bob can then say hi back and we can see in the other window that bob said hi you know obviously these two clients are running side by side on the same machine in the same terminal but we could equally send this file to a friend you know hugo lives in australia i live in london we can both communicate on completely different machines across the ocean um such as the internet which isn't that impressive but i just want to reemphasize that even though this is happening locally it would also work remotely but yeah that pretty much wraps up the tutorial in summary we built a chat application where we can create users create rooms join rooms then send and receive messages there's so much more we could do to this application if we had time from both a chat perspective and a terminal perspective right so we're barely touching the surface of what chat kit can do we're barely touching the surface of what you can build in the terminal one cool idea hugo and i had was if we could list a list of online users as well as users who have joined the chat previously but aren't online that'd be such a cool terminal interface and it would use a feature of chat kit called chat kit presence basically we could even show typing indicators and read receipts so many cool things but like i say we need to give it a rest for now if you'd be interested to learn more if you want to see a continuation of this application of part two if you will please let us know in the youtube comments or in the comments over on medium you might also want to check out the medium post because in addition to what you've just seen me build right here we also outline how to add a loading spinner to your application which is a really nifty way to make your application feel faster um as well just as well just for a bit of fun right but yeah thank you so much for watching please do make sure to subscribe both to the free code camp youtube channel as well as myself over on the codecast youtube channel you can also follow myself on twitter i'm at booker codes thank you