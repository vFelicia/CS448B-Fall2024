foreign almost ready how's everybody doing today all right what's up everybody uh i am sam from python basics uh we are going to be continuing on with our little series of uh studying python an introduction to python a really indepth allencompassing glad to have everybody here today sorry about throwing everybody a curveball last week had uh life going on and uh couldn't um couldn't really get back quite in time and get all or uh in order but we got some admins uh in place uh we do have open chat today so this is gonna be uh a little bit different than the last ones but super excited so all right let's just go ahead and jump into it so today we're going to be looking at a little board game i'm really going to be focusing on lists and a couple of yep i that's that's one of the things is if you want to you want to make a joke tell tell life you have a plan okay but here here's the little layout that we're going to do and so basically a little board of circles or zeros i think it's o's it's actually o's and then there are some hidden x's and we have a twodimensional choices so we have a lot to do here but some little cleanup work that i want to do is there were some questions hanging out there about any and all so i thought now would be a good time before we got into that to go ahead and handle that and also then in turn that is going to lead us into some list comprehension with conditions and i realized that i did not go over how to really handle conditions and list comprehension if anybody can remind me jan or cardinal did we did we do those i don't remember and then we also need to uh talk a little bit about strings because we're going to use that in our board all right so all right all right so list comprehension with conditions now this is where it gets a little odd so we're going to look at this right here and when we bring this in and we look at it so we have a list then it has some a string okay an ant another string in string and a string all right now let's just say that this got handled wrong i want to also show you this about uh strings i don't think we looked at is numeric so python has handled this for us actually i you know i may make my kid laugh and yes thank thank you cardinal if uh if anybody's look if anybody's acting up uh because we have open chat we just want to be having uh a discussion and making sure that everybody is uh on on task with python so like i said we have some admins here to clean up clean up anything all right so all right so like i was saying string uh python has handled some things for um strings to be able to tell if it is numeric so let's just look at it is str dot is is lower is numeric here we go numeric boom return true return true if the string is a numeric string so basically python can understand that here we go so that minus one is numeric boom true so python is able to look and see and realize that this is a value and it is a number so now now let's look at some list comprehension with some conditions and this took me forever to really wrap my head around so if you give it one condition you have to lay it out a certain way and then if it's two conditions you can lay it out a separate way sorry name false but i hope everybody has been doing good it has been now two weeks since we've been together in x if str i dot is numeric boom boom so all right what did i do so i did my normal loop i just need to bring chat up so we can see how everybody's doing today all right for i for i and x then i'm wanting to return false if i analyzing i string is that right yeah is numeric so let's run this oops and yeah that doesn't need to be right there there we go all right so name yeah name boom so false false false now let's say i wanted two conditions so like i said if you're passing one the condition needs to be at the end now if i were to be cut actually i don't want to do that name false if str dot i dot is numeric else true for i and x all right so let's see the difference so if it's one condition the f goes at the end but this is if you look at this here's my eye for i and x do either one of these and you can put these at the beginning so if this do this else do this all right so we can comment that out or not because this will be the last thing that name will be so now we have our true false true false true false so there and there so now now we're going to take into account and now we want to look at any and all so basically these are two more functions from let's do any builtin function module uh from builtins from the builtin module return true if boolean x is true for any of the iterable for any so basically remember how we had and or so this is a function for an iterable so if you had two conditions true and false true or false you got true but if it was true and false it's false any and all is the same for a group all right so now name any name is true are any of them true yes true are all of them true false so now i think if so if we were to go and change that scenario but actually yeah let's do this let's get true and then all so names should be all true right so all name now that's true so all right does that make sense to everybody all right we do have a lot of comments we got a lot of folks here today um so all right that was that now all right so we looked a little bit more into some strings um cardinal and jan have we done join for string uh the function uh the join method i can't remember all right so let's look at help str dot join so all right this one was a little odd for me to wrap my head around of why why this wasn't in the um list or iterable function or things like this so all right so join is a method it is it concatenates any number of strings so the reason why it is a string method is whatever you pass it is the glue so actually i'm getting ahead of myself we need to first look at the difference between list and split so like i said we got we got a lot to do so hello hello everyone how are you so all right so i just made took a simple string and assigned it to uh to hello now if i do hello dot split i get a list of everything it is splitting on whatever i pass it typically without anything being passed yes split the delimiter what it separates on is a is a white space there it is any white space so now i can pass it a value and go through but this automatically it splits typically into whole words awesome okay so we we will go over okay we did use zip all right so join is the glue of how it's basically the reverse of split so split goes it operates on a list excuse me uh on a string to go to a list then you pass in a iterable typically a list to join with the glue so all right so now the glue so we have uh let's let's change here we go hello split all right cardinal is has everybody calmed down with the spamming and yes this is for beginners so when this is our and jan and cardinal you'll have to remind me uh this is our what ninth one i think so so there are the this is our ninth video in the series and beau has done an awesome job and yes this will be posted immediately right after uh bo with free code camp does an awesome job and we have our own playlist so you can go back and watch all of these in consecutive order and for just admin purposes all of these videos are redone of the first videos on my channel so this is basically a recap with some different variations and some different consolidations that i've learned to make sure we group things together so all right hello dot split so then hello split so all right so now i have this and it was separated on my on our white spaces so now here's where the glue comes and since this is a so since our glue is a string this is why join is a string method so now when i pass i use the glue use the join then i pass it our iterable i get this we are we are i just want to make sure we go over because we're going to be using all of these things here momentarily and that was just something that we needed to go over that that was asked about with any and all so all right uh we'll we'll expand upon this shortly so let's just go ahead and get get to it all right so we have we have quite a few challenges to to overcome first we need to build an array here a list of lists so we're actually going to use a nested list comprehension so let's just go ahead and get into it so we're gonna we got our array and just like i like to say we're gonna go for i in range so we got what one two three four five six range six close this out so our i all right now we want that six times but now we want six across so guess what for i in range six and then we just want letter o's capital letter o's all right anybody lost so far yeah i i think will be maybe a touch over uh an hour i think that's about uh as much time as all this will take and all this stuff can be pretty complicated and i don't want to overwhelm anybody so all right does everybody see what i did here all right so so let's print this out for i in array print i boom okay so i just made that six yeah boom six six six by six now that doesn't look like this so now what i need to do is i need to line this up yes you can do this in pycharm i just know for beginners i don't want this to be anything over complicated that's why i still use the shell in the script because it is satisfactory for what we're doing we're not bringing in complicated modules and we're not doing anything sophisticated enough to need that so that's why we're still here because i don't want to scare anybody away that's the whole point of everything that i do so we need to neaten this up we need to put this we need to put this together so all right so we need to go print uh did to do to do dot join well first we need to go through one at a time for in array print so we're going to use our join and then we're going to pass it i right cool all right so building blocks and that's one of the things that you'll hear me talk a lot about is that to go very very slow incremental at a time and um and make sure we can do this so now now we need to handle our our uh i guess our equivalent of our x and our y so are because this is map coordinates a and a numeric value so now we're going to use the tools that we have at hand all right so we have string import string everybody remember this i think we touched on this a while ago so we're just going to use the as key strings so der string because excuse me so as key lower as key so str for loops go a certain number of time the length of an iterable a a range function but an iterable while is until that condition changes and we're going to be using a while loop in our example and as you can see here the length of this is six times so it comes down here until it's exhausted until the iterable is exhausted that's basically the difference between the two good question all right string dot as key dot lower case oops boom forgot that's an attribute you're very welcome uh was that sebastian i love it thanks john all right so now we're just gonna use the first six so then we're not going to import everything from string import as key lowercase as i think what i think i think i like doing this as letters yep as letters all right so then letters oh yeah we're just going to use a through f equals so then since this is going to be a string we're just going to chop this off right here first six so letters then yep six so we'll bring this in and i'll show you so a underscore f f boom just like this so then if i wanted to just like we learned a little bit ago because so the difference between split and list is split changes it splits it on the white spaces or whatever the delimiter we choose list changes everything so let's do hello again uh list equals oh yeah hello everyone this is good enough so when i do list on hello every single item in the iterable is broken out and that will become handy and we will use that very soon in our example so now so now a underscore f which is our first six letters we're gonna wrap this in list so now a underscore f so now i have my abcd efg stopping at f sorry all right everybody good you want to print hello okay boom well i just ran that up here so that's hello just makes it nice and pretty and there's actually a uh way to print things even prettier in python but those are the awesome skills that we have all right so now we have this so we are getting very very slow so now we need to take and get our numbers over here so now we need to set this up so num equals list range dot six now is that right how's this out so we got num right 0 through 5. that's not going to be right because we want one through six because we know we could have it be zero through five but the user will probably not want to tolerate that and i don't know why i keep doing that so start stop exclusive so now let's run this again let's call num there we go one through six so now now let's see if we can get this board to get the letters and the numbers at the top so right now we just need the letters first okay so print we have our list okay print a underscore f let's just start here all right so that's not right so oh yeah we need to put this in a string that's right we're using join oh here we go but now why why don't we make that's not that's not pretty we need to make that capital don't we shouldn't we don't we want to so uh how do we do that anybody remember how do we take a letter and make it capitalized any takers oop so let's see to be honest i guess i can't find out where i did this do i have this all in upper i wonder if i have this in upper somewhere else ah why don't we do this this will change it right here let's get rid of this i thought i found all this there we go so let's see what i did here so this brings this string in as letters right so all these are lowercase i slap an upper at the end of it converts all of it and then i'm slicing it so that's why this works right here and like i said i can't find this anywhere else in my main program to see where i convert all those ah i had this as upper case so let me show you two ways to do this so all right let's make sure i didn't lose anybody all right is everybody okay with this right so that's uh no when i had it down here because that's working on a list so i did this here but i did not look at my notes so all right you can have this is upper and then also and inside uh let's see import string dir on string it has upper upper case right here so upper oops clean that up there we are so you have one of two options so it's if you want two if you want to have them base is lowercase and then you want to come back or you can also come and pull this in uh i guess i thought i yeah but we probably won't get the flask for a very long time we have we have months before we'll get to that and then you could argue that django's better than flask because then you don't have to do as much setting up because flask is very very very very bare bones very very lightweight django has a little bit more you have to do a little bit more heavy lifting but boy does it take care of a lot of stuff for you all right we can have that discussion later all right uh so now we have now we need to handle our numbers on the side so all right i want to show you something remember how we did uh iterables and iterators so all right we're going to turn this into an iter and you might ask why so we don't have to deal and count and do things and we can just interject so we got num and we don't have to overthink this so we can literally just drop in this and we don't have to fight and we don't have to change this and do anything over complicated we can just go grab our next drop it in and not overthink and not have to count and have an index and do anything crazy so we can just go num now we do have to handle an issue here all right all right so now we caused another problem so we have our one through six but we're off a little bit here so we got boom boom let's see if that solved it off a little bit perfect so here we go yes absolutely you can go back and search for inside free code camp and type in python basics or you can go to the playlist and you you can see um all the other videos all right enter let's let's go over that real slow again so if the reason why i changed that that list to a iter is because if you're trying to go through two functions excuse me two iterables at the same time because i'm using this as a marker i would have to then take this as an index and i would have to change and go through and have some count but when i turned it into an iter i can just go and grab each of these next one at a time and i don't know where okay great great question we probably have a lot of new people here today so so right here inside the print function shoot is this at the bottom all right i think i have this scaled right okay good all right so end what does it do at the end of the print it defaults to new line this character right here backslash n is newline what i'm doing is i'm reassigning it and i'm suppressing that newline function so see right here i have end is get a new line i'm telling python suppress go to a new line and conti stay on that same line that's why this basically is on this line right here then after this line is executed then a new line happens on my channel in the link down below there's a link to my channel you can go and look at number shapes triangle uh triangle numbers reverse triangle there's a whole series they're just about five videos on number shapes and it goes real in depth of what this end uh suppression does right here the end argument inside the print function so all right it is very handy to do a variety of things so great question i love having a bunch of new folks here and i'm glad we have chat open so i want to tell bo and quincy thank you for doing that all right so we are getting very very close now we need to handle some logic of how to go about doing this so we're going to need to put this in a while loop so let's come up with a true and then we also need to then take in some input oh and i think my favorite part is this right here well actually we also need to come up with some hidden values so all right there's a variety of ways to do it but i'm a very excuse me i'm a very simple guy so what our goal is is we're gonna when we guess where an x is we're going to have the o get removed then show that x in location then if the guess is not a has an x it goes and just becomes a blank space so we need to we have we need to handle a lot of things right here all right so first we need to indent this so i'm going to show you oops and boom boom all right so what i did and i did not do tab uh i did indent region because if you get into the tab issue you will have all kinds of uh all kinds of issues don't ever pick one do it i'm not going to sit here and be just do spaces just do tabs whatever your preference is but don't mix them you will have a headache and you'll want to you'll go nuts so all right uh let's see we have our we have our um everything right here but now we need to come up with our guesses so now we're going to randomly so we need to we need to look at random import random because we want the game and it's just a simple game and yes it's 100 um uh true all this is is to get you to think about how to do how to handle the things that we already know all right so we're going to look at choice inside random so well first let's look at it let's see what our choices are for random random all right and we have choice right here so what does random choice do random. choice choose a random element from a nonempty sequence so basically that's going to go but now we're actually literally going to mix and match we're going gonna take a choice out of each of these and we're gonna come up with four so now we need to go through four times and pick four hidden so we're gonna have a list of we're going to have a list of choices here and this is going to determine how many we have left so i know it's really simple but i remember the first time i learned how to take basically examine and have this change each time you guess correctly i don't know like i said i'm uh i'm a pretty simple guy all right so now we need to look at some more list comprehension so for i in range four we just want four guesses so now now let's throw this inside of a list so we have our list of letters and our iterable of numbers our iter right there iterator our iterator of functions our iterator of numbers excuse me so we have choice and then we're just going to go a underscore f because we want that one to be first now and then we're going to do let's see choice we need to handle another problem here if i can type today sorry everybody and oh i know what i did here helps if i spell correctly let's bring this over just a touch so we can see everything and we are just going to clean this up so we can have complete control because you cannot choose because you have a iterator you cannot pull out that was and do all right and we have one more problem here so if this is a number so if i wanted to concatenate a string because this is a this is a list of letters that's a string and this is going to be a number we can't concatenate we cannot concatenate a string and a number all right everybody good with this uh yes there's actually yes there is a seed function in um and there's a there's actually a video on my channel that is actually quite popular it's very interesting seed is repeatability for random numbers so basically if i were to tell you that um i made a random list of 50 000 numbers and i started with the seed of two random dot seed two you and i could have the same list of random numbers it's actually one of the very cool things about uhoh am i buffering did i just drop out all right am i back up okay looks like i'm back up so if you were to concatenate and i would want to have a letter and a number like string a is numeric string i have to convert it to a string and there's two ways to do this longhand and shorthand so you wrap it in the string function so now i'm going to come over here str and wrap this up so basically i'm we're going to look at this yes this is a lot here but i want you to look at this so that over here is my for i and range that's our our regular uh for loop and then right here is a concatenated very simple see how i did oops and what did i forget i left something out let's see where it is i have an extra suppress set of parentheses i need one more there we go and i forgot a while play there we go we don't need this right now all right so now let's look at hidden i don't know why everything is freezing up on me forgive me guys all right that go through oh no is it messing up the stream i don't think i have too much running but it i maybe let me close some stuff down sorry guys whoa i don't have the best computer but i also don't have the absolute slowest computer either i thought i shut everything down but guys i am so so sorry i am in the dark right now with what i have running i can't see you i have no idea if you can see me i can't get to x it appears that the stream is good i can't see chat so i'm just going to keep going all right i'm shutting this down all right let's rerun this okay from random import choice all right let's get this resized so i usually restart my modem before the stream looks like i'm going to be restarting my computer before the stream too all right there we go okay we're good okay good all right yeah sorry guys everything was just locking up i guess i don't know what i had running in the background all right okay so now here are my random choices we're going to instead of so this is what i want you to think about instead of us over complicating this and going okay we're going to assign and then have it hidden and this and that nope we don't care what this is we're just going to see if they type in values that match these so we're going to take input so we're going to the board is going to look like this and then when these are either met or not met then we're going to do something does that make sense if these conditions are met or not met all right so now now we need to come in here and we need to do handle our while loop oops so basically uh because we don't we if we were to just let this if we were to do this right now run this what would happen it would just run over and over and over and over and over and over again oh no it wouldn't i forgot that was the also built up back in so you run out of next it stops but we can also control this by our um let's see and now the other thing is is then we need to run this down here each time through so numer then range one through seven there we go all right and then we need to take input from the user after we print our little our little map so move guess so we're just going to do move input 1 2 3 because we want multiple multiple lines q to quit enter move and then just like that so q2 quit and come down here enter move eg example of a five one two three all right and i forgot to close that out all right so now we need to handle this if move dot lower equals q then we take then we change play to false to kick out false and to a dyslexic person that looked exactly right all right so let's see how close we're getting okay here we go all right everybody follow along along so far all right cool so we have our top coordinate we have we have our uh x coordinate we have our y coordinate and then if we type in q we get out so all right so now we need to handle how we are going to handle the guesses and what we're going to do so now we need to do a lot of a little thinking so we covered indexing with lists jan cardinal can you remember if we've done if we've done that before because i don't want to jump directly into it if we haven't so it's actually some pretty oh we need to handle this right here so that is going to print each time through our while loop and to test this we're going to we're going to put our hidden so we can test and make sure right okay so here are hidden here's our hidden information because we do want to see it so that we can test and make sure that it's working properly that is probably the biggest thing that i can i can say is that you also want to test the positive scenario or the scenarios that you're expecting i always love teaching young people when they say it didn't work or it didn't do it right because they're expecting something and something else came out and they couldn't dare be wrong so it has to get uh it has to be the computer it couldn't be the program that they wrote so all right so we're going to work off this in a minute all right let's get let's get out of here no no no no i'm sorry let's go over lower and low and lower case for just a second lowercase is from lower case and upper case is from the string module as key lower and what i did with lower lower is a method from as a string and it's right here so i run dur on my object and i get a list of all the methods and then i come in here and i do str lower i run help on str lower and it returns a and it tells me what it actually does and how to use it so return a copy of the string converting to lower case and this is vital if it's in place returns none or what it returns if you haven't seen me talk about that this is very important to understand the actual functionality of the method so this this one returns a copy so it will not do it in place so right here we'll do sam then i go lower so here let's just go let's let's m all right name so all right so now i go name.lower all came out but it did not change name so if i were to go lower then name dot lower name still same stays capital lower because i'm returning something i'm creating something return is a very important word in python i cannot say that enough so this creates something return creates something so now if i'm creating something i have something to assign something to so i'm taking this return value which is a copy of the lower of the original string assigning it so that's why now i have two variables right there all right all right is that good okay so all right we're almost an hour in so let's see if we can run through this real fast so we have our if so now let's do an else so now basically what we're wanting to do uh pass let's bring this in not to scroll up so we are wanting to go and take let's in this over i guess we don't need to be able to see that anymore we know what that did there we have all that all right so now we're going to take and we want to check and see so right now well that that's going to change in a minute but the hidden will stay the same once once we're in our for loop so oh i guess we can do this right here so all right so what the goal is is if i match one of these i want something to change and also if i don't match it so if i match it i want it to change to an x and if i do not match it i want it to change to a blank space so we got some stuff to do so now actually we need to talk about n we know n is in our um when we do our range uh when we do our for loop have i explicitly talked about in jan uh cardinal have i talked about those you guys uh if i explicitly talked about that all right so right now i have hidden right so i have f f4 c6 c6 ooh do i handle this i got i got c6 twice and a4 so let's see if i handle that to see if oh that would be later at another date because we are going to handle this guesses in a minute so let's rerun this all right we'll use we use this hidden i did not think about that when i was building this originally so all right let's look at in the in the end keyword anybody remember how to get to keywords because especially since we got a lot of new people here today help in all right so let's look at what n does well it'd be 30 would it be 36 to 1 i guess to repeat would that be 36 times 36 to 1 all right so n basically is a keyword it's a membership test operation is it a member so let's rerun this and get one back in here so i have no way check that out f's all the way across so just like when i did name sam stay consistent sam in name all right so is basically whenever you see something like this i always like to tell new people to put the word put the question is in front of it is s in name true so now let's go f2 in in hidden true f lowercase f2 in hidden false so we're going to be doing a comparison so we're going to be taking user information user input right here and are we going to and we're going to match it so is it in this and if it is do one thing if it's not do another that's basically what our comparison our membership test is and anytime you can't remember exactly because i hated that it it took me probably two years and not a lot of places well i stumbled across it i don't think i've ever written seen anybody you can run help on any function and method but the only way to get to a keyword is through the help prompt all right and the as you can see with the help prompt it is you can end up going down a rabbit hole so there is a ton of information and like i s and then you can lead to other you end up going down a rabbit hole keywords boom so just like this and you can just start and you can go from there all right so let's quit out of here so now we have our two scenarios that we need to handle if it is in and if it's not in so let's get after this so we're actually gonna have like i said two if move in hidden pass then else pass it's all right and the reason why you use pass is you know it's going to be there but you don't want it to throw up while you're kind of looking at it so now now we need to and maybe at a later time we can go in and we can uh look at how to handle and only have certain guesses because i'm going to give you a hint of how to handle this so again like i was talking about we're going to start doing more with lists um pop the pop method for a list have we done that yet i don't think we have all right so we're going to do help list dot pop it's a very interesting method i think we did do it so it does and if you and i think we have a lot of new people here today so we're going to go over it real slow does two things and you know it does two things because it tells you it does two things right here remove and return so basically we did do it in the horse example awesome thank you jose so and you guys are this is why i love doing uh these live streams especially with chat and everybody coming and going um awesome and for you guys who are hanging out here and have been around a long time thank you you guys make my life a lot easier and i appreciate you guys being admins too all right so it does two things it's going to remove it from the list and if necessary you can then assign that value because it returns it so you can have it come so as you pull it out that that method is removing it and then that that that value that popped value can be assigned to a new value if you want it to move someplace else especially moving from one list to another that is uh i can't remember there's a good example i have some somewhere floating around but yes this is probably one of the coolest ones because it can do two things at a time and it defaults to the last item so all right let's keep moving like i said we're already an hour in i don't want to go over too long because uh you guys are you guys are up late i think okay so if it matches we want to have it convert the zero o to an x and if it does not match we're going to convert the capital o to a blank space uh shoot that just made me think of something that i don't think i handled ah we need to talk about this this array so the array is this for i in array and we need to talk about this for a minute if i can type all right so i want to change this one right here so it is the first uh row and then the one two three column so i want you to think about that so python goes zero one two three four five zero one two so zero and zero one two so since we know that lists are mutable because this is a list of lists i can change lists so i'm going to change this one right here to a blank space so what i say 0 0 1 2. for i in array print i so i said i wanted this one right here to be a blank space and i did it alright does everybody follow that okay everybody good with that because this is our building block of how we're going to go about doing this so it's my it's a list of lists so i have my first my first list index first one and then my second one all right when we go over that again all right so if i index my zero index is my first row and then zero one two three four five so now zero i'm going to change the last item the fifth one to a x boom so because this is a list of lists right so my type for array is a list then type for array index 0 is also a list then my type array zero and really any item but we'll just do zero zero type is a string so whole thing list first index list second layer of indexing string all right all we're doing is kind of just laying out a very simple i mean it is a very very rudimentary uh battleship but the reason why i like this example is because you have to use um lists of lists list comprehension uh choice from the random library uh a little bit of logic a little bit of planning throwing in some uh some new line suppression and uh things like this it is just a huge conglomerate of everything that we've been learning so far so all right i love that find a game of finding uh hidden nexus i love that oh we could call it treasure hunt there we go i guess it's like uh what an old version i'll really show my age here in a minute uh uh minesweeper that but it's also uh not as complicated so all right first all right so we have hidden right here now we need to get this i love that f2 5 f2 f5 f6 f4 so now we need this each time through we need to get this to print out how many how many are left how many x's are left so let's do that so print f dot find the when of hidden oops bracket and hidden hidden x's so all right let's go over what i did here so i have a string and each time through i'm having this count how many how many do we have in here so each time we find one of course our hidden list will get smaller and this number will change so the user will know how many two that he's got that they have to find left all right now we need to deal with this so if the guess if the move if your move is in this list so if that move is in the list hidden dot pop hidden dot index that we need to look at index all right we looked at pop i did not i can't remember if i asked you guys if we did index so hidden what that does is then help on list dot index okay return first index of value so basically what this is is so i want to find where this is all right and then i want to take that and i want to remove it all right uh let's see because i want to there we go take that out and then i'm gonna then slice i need to slice up my array so this work right here this is our building block let's see then move equals list because remember how we took our information and if i pass oops a5 i separate it because this is important because then i'm going to match these and pull these out because i have my row and my column all right and then my array and here's my location right int move one now why am i going to need to subtract i need to tweak this a little bit and why and we'll go over this in just a second i need to type and concentrate move zero and wrap that up equals x all right now you remember how we adjusted this we know in python that it's a zero index so when we wanted to change our first our first one but it's the zero index zero and what we changed that one right there zero and then zero one two and that was the one we changed so we are subtracting one because of the zero indexing effect the user won't tolerate this being zero they want it one through six so they know it's the sixth row they're not going to put up with going so we need to adjust our logic and our planning and so we subtract one now all right let's test this and we're gonna go a five so see that i don't know why i typed a5 it clearly says a4 boom so two things happened we removed actually i guess three because we have this self so here's our hidden list it was a4 i typed a5 because apparently i can't read so then we redid it it jumped back out so i typed in a4 removed that from the list then adjusted this and said hey you have three more left which all that is taking the len then changed our zero to an x all right so let's make sure that that works all right so now i'm just going to guess wrong b6 okay but that didn't do anything so now we need to quit and now we need to handle what happens when oops all right now we need to handle what happens when the move is wrong move equals list move so say same thing exact same thing and then what happens is we go and you know i'm not a big fan of copying because too many things can go wrong all right so here we are so we're going to test b two b two cool now let's do b1 okay good f6 okay good so it's just going blank then let's do this one c4 oh no it's on our list let's do c3 c3 okay now c4 awesome so there we go guys this is just a wonderful little tool for us to really start laying these out and you can take this and you can make this more sophisticated less sophisticated whatever you want to do so we're about uh 77 minutes in a great little stream back so glad to be back love the uh love the help and the support from you guys ooh that is a much bigger delay than i thought so i am i am very so well either battleship or i think somebody commented back uh fine find the four x's i i love that treasure hunt or however but just a wonderful little tool of the things that we have learned and in a small little span of time that it just really gets you thinking uh the one with all the indexing uh oh sure the one with all the indexing all right so what i'm doing absolutely so right right here is that the one yeah absolutely all right so the indexing so what i'm doing is i'm finding the location so move zero let's look at some move let's go over this again real slow oops so i i just quit so up here move c so we have a underscore f let's bring this over great question so what i'm doing is right now so move so i kind of have this in reverse because again we have to handle these issues that the user yes i have it over on my github i have this continued all of the code all right two things i'll jump back i'm just using shell and the the the idol from uh from from python so all of this so i i add to this every time and then i've actually gotten to where i saved the shell in its own file with today's date so all right that was uh that was a little admin there so all right so let's go over this a little bit so i take move and it's c equals c4 all right so then i take move let's go over this real slow great question list move so now move is a list of two items two strings and i'm doing them in reverse here because this is this way python goes rows then columns so that's why i'm going in reverse so row then column and you're more specifically asking um about the indexing so i'm finding the index i'm having to adjust this by one to find the proper because in python that's zero index so if the user's this is actually 0 1 2 3. that's why i subtract 1. now the index effect i'm not having to do any adjustment i'm using the tools that i have i'm using my second index and allowing python to find that for me and fill it in so i'm taking my underscore dot index and i'm passing it c let's be consistent passing at c and that's where i'm getting my two so i know that this is zero one two so that's filling in so it's row then column so that's what i'm doing there with the index all right did that answer that but that was a fantastic question that's again very much why i like these streams and especially with the chats but fantastic everybody so all right a great stream today we will be continuing on and if you guys ever want to review anything that we've gone over of course uh there are all the previous streams and then over on my channel which is in the link down below each video each one of these topics has its own micro video very small the average video um uh is and again it's the github link is on every single one of my uh videos over on my channel you can just jump over there and get right to it but we are right here with this all these are micro videos three to four minute videos you can just go buy search any of them i think today's video will be 780 so there are there are tons of things for you to be able to go and get caught up on but i just want to always take a minute to say thank you to everybody who spends their time here today to bow and quincy i really appreciate the opportunity and to jan and cardinal i appreciate you guys being admins and uh taking the time to help and keep us on task so as always guys appreciate you watching don't forget to hit that subscribe button and the notification bell and the like button give this video a thumbs up and uh we'll see you guys next week bye guys