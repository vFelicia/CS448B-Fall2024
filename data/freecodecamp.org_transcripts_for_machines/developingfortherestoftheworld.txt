hi my name is eric i'm a software engineer at twitter um so when i was thinking about what i wanted to talk about i wanted to think about what was something new that related to my experience at twitter and what's something that's not being talked about typically at tech conferences and i kind of thought well you know twitter's goal is to reach every person on this planet and the thing is we can't do that effectively if we don't consider our users language their culture and then the environment they live in so this talk we're going to go over like how to localize your app and make the app feel native to your users and so you can grow your app from your local audience to an international audience um these are some of the products i've worked on i worked on digits which is now part of firebase auth and you know we served 217 countries and we supported 34 different languages i also worked on twitter can this allowed developers to embed tweets into their apps so this is how we kind of grow the reach of twitter about beyond just our users inside the app and then i'm currently working on the twitter for android platform and i'm working on emerging market performance so as we improve performance our top line metrics will improve and i'll talk a little bit about that on my slide too all right so the first topic is like localization so like i said you want your app to feel native to the users users and so when we talk about locales generally there's like two components to a locale there's the language and then there's the geography so and this is because for example oh that's mine so like spanish speak spoken in mexico isn't the same as spanish spoken in spain and there's also some cultural differences between spain and spanish and how we display dates and times and number formats so that's why there's these two components to a locale so this app this is mostly focused on android and how to do it but these same things pretty much apply web android and ios so okay you want to get started you've decided you want to grow the reach of your market so what what's kind of the first step the first one is you want to like identify your market opportunity so you want to go ahead and look like what's the relative wealth of that region you want to target what is the penetration of smartphones and what's the population size you know you want to make sure if you're going to go through all this effort you get the biggest bang for your buck the other thing is you want to consider your competitive landscape if you have a music streaming app and you want to come to the united states you're gonna have a lot of competition you know there's spotify there's title there's pandora there's amazon music there's google music so maybe the united states isn't the best place to start and then also just the financial and regulatory factors of the region you want to operate um like clickthrough rates in india are far lower than let's say in the united states so you need to take these financial considerations into play and kind of the regulatory regimes of each country so here's an example in the united states we have 37 million native spanish speakers so these are people according to the census bureau that speak spanish at home every day and for context like the united states population is about 320 million so about 10 of the population and 2.8 million chinese speakers so this is mainly mandarin and cantonese and these groups in the united states control 2.1 trillion dollars in household spending so this is actually a big opportunity in the united states for example to just take your app and localize it into spanish and here you're reaching these users who and you're making the app feel native to them in their own language so like how do you get started so very big i mean these are basic steps to get you started and get your app ready for it translation um i'm not gonna really go over like how to select a translating company or where you can go but basically you go find these services online they usually charge something like 8 cents to 18 cents um per word translation and you know it goes from just native speakers translating professional translators and then you have professional translators and then they'll have someone double check to work and the goal here is once we have a vendor we want to have high quality translations we want a quick turnaround and we don't want a lot of back and forth you know we want to avoid uh i always hate it when i get a jira ticket from my translation team and saying hey we don't understand what's going on here or we need more context and so that takes back and forth and then it delays my feature shipping because i haven't translated everything i need so like how do we go about doing this so you've probably all seen these warnings in android studio they've been in since like android studio two um just make sure any string literals you have you can just convert them into uh string resources um there's like a quick fix tool tip you just click extract resources you get this little dialogue um you just decide where you want your default value is set and that's it you should have something like this everything should be in a string resource so this is your file this is what's going to be sent to the translation center um let's hold on for a sec and the goal here is to get something back that's translated and it's high quality and hopefully you haven't done too much back and forth so what can we do so how can we go about doing this so you want to provide like context for your declared strings you want to think um so in this case my app is called demonstration and demonstration in english is what's a homonym and so these words that are spelled the same and they sound the same but they have different meaning and so when they go translate into other languages it might not be clear which meaning you mean so in these comments section provide that context to your translators so in this case my app is demonstrating how to translate things so this is a practical and you know explanation of how something works so make sure you include that inside of your description and you know other languages have similar things there's like heteronyms and there's also homeographs so these are like words are spelt the same but are um but sound different like a bow and arrow or the power of a boat also include like where are these strings going to be kept and so that gives in context of the translator you know do they need to keep the strings shorter um do they need do they have more room to work with things you know if they need to if it's a resource constrained space maybe they can choose a different synonym for the word ins that's shorter and so some of these things you know like buttons they're usually more space constrained so they know to be really short with their the language um like app name it's limited to 30 characters so make sure your translators know of these limits so that they can keep to them and then of course mark the things that you shouldn't be translated you don't want to waste time and money having things that are translated that shouldn't be so brand names typically are translated so twitter isn't going to be translated into chinese it's not going to be translated into spanish certain proper names placeholders and special unicode characters obviously urls you don't want your urls going to 404s and then code and also here you can see this is the placeholder syntax so this is um xml localization interchange file format and you can add placeholders so when you preview the string inside your layout preview it'll show true as a default so that's a fun little trick so okay you've gone through you've translated everything but now what about dates currency and numbers these are things that generally don't vary by language but they vary by the region you're located in and so android android ios and a lot of backend systems they provide a lot of these tools and they're all backed by the ibm icu library it's the international components for unicode it's basically c c plus plus library and it has like a java wrapper and it supports a lot of internationalization and localization functions for you um and showing the correct time and date and format um really helps your users recognize what's going on you know for example i landed here i got off the airplane i like i really needed a coffee and i looked at the price it said ten thousand and i was thinking wait a minute that can't be right and then i realized wait they just used the com as a as a decimal place holder here where in the united states to use the period but you know as a as a us user um i was initially confused it took a while for me to think about that and process so one of the things on android they have a fun little feature it's called best get best date time pattern unfortunately it's only available on jelly bean mr2 plus and what this does is you can use these unicode date patterns you know the mm for the twodigit month day and year and what happens is the order and the separators for the dates are irrelevant so you give it what you want and then it'll return the correct format for you so here i can give it month day year and for you for ukraine it'll turn me day month year with the periods in between and so like here are some easy examples um in the united states we do month day year uh france uh day month year with the slash you know japan uh starts with the year and then here in the ukraine so that should look familiar to all the ukrainian developers i hope uh also like i mentioned there's also helpers for decimal points too so in the us we use the period as a decimal point and we use a com as a thousand separator so like when i saw a number that's why it was like initial confusion for me as a us user and so by displaying these numbers correctly you know your users will feel like this is a native experience to them and same thing with currency there's currency helpers so don't make sure that the currency symbols are located in the correct place um one thing i learned with digits is that phone numbers are actually really hard um it's a very hard problem to solve and there's a lot there's actually one really good library out there it's like lib phone number and android uses this phone lib phone number from google to provide you some uh formatting features and android so what you can do is you can store all your phone numbers in one common format so there's like an itu standard e164 and this kind of describes how you can format international numbers but what happens is you're not users local users probably want to see a number uh in their national format is what it's called and so you can give it the string that you save maybe in your database and then when you display the string to the users you know it'll be formatted in a way that they expect to see it so like same again us france ukraine and uh the uk also you notice i used a bunch of these constants originally i hadn't used some constants and i thought uk uh was a country code but it's really gb so use some of these constants and it'll be helpful um another issue like i ran into within congratulation digits is we wanted to display a whole list of countries so you wanted to select your country code and we had a list of countries but when we internationalized things strings weren't sorting in the correct order uh you know as a usbased developer uh this will work right because they're all as key characters but what happens is when you start to introduce um unicode characters or you look at other languages um like the n a n and n a in spanish you want to make sure they're sorted in the correct order and then also some languages like spanish also have the double l um czech has like the ch so these are called digraphs so there's a lot of these other characters that you want to make sure things are sorted correctly and if you're sorting things by the code point um it won't work so uh don't do this for sorting and what you want to do is use this collateral feature so this is also provided by the icu library and here what we're going to do is excuse me we want to look we're going to set a strength and what happens is we set primary and so it's going to sort based on primary differences so capital a and lowercase a are actually secondary differences so they'll sort in the same order and also like in spanish uh with the double l uh spanish is actually adapted to like technology standards so now the double l is actually treated as just two individual l's in sorting and so it'll help it'll provide these functions to sort everything for you so now you know when you go to my drop down list and we have the localized list of countries i go ahead and i use this collater and the sort things and now everything's sorted based on the correct locale so other considerations when localizing things is machine to machine interactions generally you want to keep you don't want to use the default locale for machine to machine transactions um you want to specify the locale that you're using um like if the date is a day is 17 but i in the us you know the parsing of that date is going to fail because there's no 17th month of the year so making sure that the locale matches the locale of your api and then translate that into the future you need units of measure are another thing in the united states um we use the imperial system we're only one of three countries that do that so that's pretty easy to solve and then other domains some specific domains have like conventions that don't match the locale so if you're doing like a scientific application generally it's used in metric right so no matter if you're in the united states or europe or the rest of the world you would still continue to use metric system and in android 24 plus now they have some new apis provided by icu just to make you aware of them so if you're packaging the icu library it's pretty big so now it's included as part of android so you can create like an apk split 24 plus you can use the builtin icu libraries 24 and below you could just you'd have to package your own but this way your apk would be smaller so rtl um so not all users read from left to right some users also go right to left and so these common languages arabic hebrew prussian and urdu are the biggest languages so here's an example there's 160 million arabic speaking users on the internet and there's 80 percent of phones shipped in the middle east support android and but there's only 8.8 of web content is in arabic so if you're like an uh let's say the arabic spotify um you have this huge audience you can reach now if you have this content in the arabic language and so like how would you go about you know localizing your app for these languages so a little history um android 40 was localized in arabic and it also included an arabic reshaper so you might ask what's a reshaper arabic is kind of like a curse of language and so without a reshaper up top you see all the characters are in its isolated form um and each character is rendered the same regardless of its surroundings and so as an arabic reader you know it's going to be slowing that you down it's kind of like cursive you know when if if i wrote cursive and i spaced everything out you would be confused and you would have yours your comprehension of what you're reading would take a longer time so with the reshaper what happens is it reshapes the characters according to the surrounding characters for you and so that'll be more natural for your arabic speaking users um in android 4.1 they have a bidirectional text support for text view so what happens is the text will automatically detect the language and decide whether to display things left or right but it wasn't very smart it would just look at the first character say it's an rtl and shift things right to left or left to right in 4.2 you got layout mirroring and some better fonts and then 4.3 we they improved bidirectional support so now they include some heuristics so if you have a mixed content like arabic and english it'll go through you can apply various heuristics and it'll decide whether to display your content right to left or right left to right so here's an example of bidirectional support so here i have english or fake english whatever that is and then it's going to lay everything out left to right and then i just switch my device or i switch the text to arabic it detected this it was arabic and it was a right to left language no work he didn't have to do anything rtl mary so what happens is you want your right to left users to experience the app the same way you do so as you scan the app you see my profile then you see like my username and then you see the text as you go across so you want your users to have that same experience in the right to left so what you can do is you have to go to your manifest and save that your app supports rtl so you have to go ahead and just enable rtl support and then what we can do is going to find you see these you know um layout to the left of well instead of left you could do end of and what happens is in a left to right the start is the left side of the screen and the end is the right side of the screen but when you're in rtl mode the start is at the right side of the screen and your end is at the left side of the screen so you can define these parameters and then when you switch it everything will be out laid out correctly the padding should be correct and if you're targeting 17 plus you can just get rid of these left to right things all together and there's actually lint warnings in the tools that'll kind of tell you this so there you go you switch it to your rtl language and now everything's laid out and your right to left late language speakers experience the app the same way as you left to write language speakers uh one thing i found out is that viewpager does not support right to left languages so it doesn't automatically so you might be scrolling um to the right but your you know right to left language are going to want to scroll to the right so this is a longstanding request by the community but there's a lot of other developers that have created solutions for you so one of these is rtl view pager by duolingo and then also um there's drawable mirroring in some cases you might want to just flip the image to mirror it um i've never had a use for that and then but the one useful feature i find is that the force rtl option so you can go into settings force rtl and it'll take whatever default locale you're on already but just lay out everything right to left and that helps you find bugs and it's really useful because before i'd have to switch my phone to arabic and then i couldn't find the setting to get back to english so that was a little troublesome so i had an opportunity to talk with some developers in the middle east and india and one of the things they told me was you know for uh sorry for the arabic language like you need to make the font bigger and i was like well i wonder if google's thought about this they must have so i went to the material guidelines and read through them and they basically uh make the scripts into three different categories so there's like the english like ones which are latin greek and cyrillic you know the dense ones like chinese and then the tall ones which are some of these middle eastern languages and the guides basically said hey for these other for dense and tall you should make these uh characters bigger to make them more readable so you know kind of what i'm hearing from developers and users you know google's already incorporated into some of these guidelines so these material guidelines will be very helpful in making sure that your users and everything's readable and laid out so the other thing is testing how do you you know what are some of the things you want to look for when testing your localization so you know you want to have a test environment set up you can look for common um issues and then you know at twitter we're a pretty large company and we hire people from all over the world we have people that speak ukrainian you know we have people that speak russian we have people that speak english we have people that speak spanish so you know these are people that can help give you feedback on your app and how it feels um so here's a list of some common issues i mean worst case your app could crash because maybe you have a placeholder out of order or something but a lot of these things a lot of the obvious things are caught by the linter for you but you know you can go through the app manually you can see that things are sorted correctly look for untranslated text you know look for poor line wrapping and stuff for those rtl languages you know you can go to the settings screen and force the rtl layout and then look at it you know is it basically a mirror of your left to right you know is the padding correct are are the elements where you expect them to be um but i found that to be kind of slow right i hated switching between um uh settings and my app and back and forth so one of the things is on twitter kit i had a bunch of timelines i used for testing and it was just a little simple test app i display different timelines and so what i did is i just created a right to left timeline and what i can do is i can on resume when i started that activity i just set the locale to arabic or set the language to arabic and then on pause i just set the default back so here just one click in my test app i could click i could see that everything was being displayed quickly and then continue on just going around playing with my app so i found that really useful in speeding things up oh i had a video here so this is basically the dubai airport twitter feed the other one tool i found was from fastlane this was developed by fabric and one thing is screen grabs so you can generalize localized screenshots of your android app so here's an example you set up a simple script you tell it what locales you want and then it'll run through and take screenshots for you and so you can go through all your screens and then you can quickly visually look at your screenshots and say hey this is correct or my designer always says hey eric can you send me screenshots and so you know i can just run one script take all these screenshots ship it off and it's very easy and then supply also one thing about localization think about you know the play store and those assets in there you want those to be localized so when the user comes to your play store you know they see something and it looks familiar to them and they go hey i want to download that so i found these tools pretty useful so another common theme um when you're looking to grow your app beyond these like western markets is handling payments so an example is like the middle east um there's only two percent of users or people in the middle east actually have credit cards um in the united states we all have credit cards i probably got six credit cards in my wallet right now um 82 of them are unbanked so they just live day to day with cash um i probably have three or four bank accounts and then the other thing is like things like paypal paypal you know is available everywhere but they only have about a five percent market share in the middle east if you want to rely on them for payments so like i said paypal it's available in all country but there's limited penetration and generally you need to have a credit card or a bank account to take money to pay and then strike which is very popular um is it even available in the middle east so what are some solutions here um so some solutions are carrier billing uh in this case uh you know let's say you want to donate to something or whatever and you do the sms short code what happens is it'll attach a charge to your bill and perhaps generally a carrier charges a processing fee but these are usually only for digital goods these are things that you can just kind of like take it back if they don't pay their phone bill it's generally not used for physical goods although this is becoming a thing um prepaid cards are actually very popular in north africa and the middle east these are or just young kids without credit cards you can just go into the store you know buy like a gift card and you can keep loading money on that you just bring currency and it gets added usually there's a fee associated with like adding value to the card or processing the payment um i was going to go back some other things is like uber in india they accept cash airbnb if you want to go book an airbnb in cuba what they do is they take your credit card process it and then they have a courier in cuba that'll take the currency and deliver it to the host so there's a lot of other solutions some other options are uh t pay me which is uh carried a direct billing provider um they're big in the middle east and north africa you know charge things to their doorbell another thing is like cashew these are just like i said prepaid cards and you can see skype like i said it's popular games and voip providers so skype takes some of these cards uh the final thing is performance performance matters especially when you're looking at emerging markets when you're looking at places like brazil mexico the philippines um and india and what happens is if when you pay attention to performance um twitter and a lot of other companies have found out like if you increase the performance of your app you will increase the bottom line metrics you will sell more products you will have more engagement people will view more tweets or instagram posts so this is why performance matters so much so one thing let's look at india here india there's about 300 million wireless subscribers but only one million of them actually have access to 4g networks so the majority of your users are either on 3g or 2g networks and even the lte even the 4g and 3g networks there are slower than in most of the western countries and they uh have a lot more errors right the error rate is higher in these countries so um one thing twitter did is we endeavored to improve our how we load images because images would be slow and they wouldn't load and if you don't see an image or nothing shows up your user doesn't have an opportunity to engage with that content you know they're not going to like it they're not going to click on the tweet and look at other tweets and so by improving image loading we believe that we could increase our top topline metrics which is you know how often are people engaging with our tweets so the first thing we looked at we looked at two technologies and the first one was webp this is developed by google it's built into android so you had native support and you know one thing we found is a 28 reduction in size compared to pngs and it also support its transparency and we also look at progressive jpeg so progressive jpeg takes multiple scans of your image and loads it progressively so what we found is like the first scan was only 10k so it would quickly load that first image it may be fuzzy but at least the user sees something that they might be able to engage with and then over time it'll load the higher res image so what happens is the image is compressed in multiple passes like i said uh the only thing downsides is there was no transparency support so what we did is we did transparency detection on the image so we looked to say does it have an alpha channel and then we look even if it uh had an alpha channel we checked to make every pixel and see if every pixel had an alpha channel and if there was no alpha channel defined we would just make it a progressive jpeg otherwise we leave things as a png and the other thing was there's just no native support on android and one of the useful things we found was this fresco library it's an image loading library from facebook you know it supported progressive jpegs out of the gap box and the things that had uh no no noticeable feature gaps like in supported all the things you wanted from a low image loader so i had caching and progress bars and scaling and resizing so it supported everything we needed so we used fresco as part of our experiment and the results were really good um so what we decided we ended up going with progressive jpeg when you use twitter today that's what you're loading um we found that images were 25 percent smaller when compared to pngs of the jpegs we saw a 9 decrease in p50 load times so the image loaded faster we saw a 74 decrease in error errors and most importantly we saw an increased engagement especially in the emerging markets we wanted so it improved our top line metrics by just improving how we load images and the other thing we do at twitter is you know you want to generate that user empathy we want to feel like what it's like to actually operate in these 2g networks and what happens is we have 2g day occasionally so we throttle all the accounts uh employees twitter accounts it's on ios and engine only and so we see how long things take to load and so you know we're obviously motivated to fix things and we also do like cost notifications so what happens is as you go through and you're scrolling each day it'll say hey that same amount of data you use on your unlimited plan here it would have cost you five dollars in mexico you know that's a lot of money so that kind of gives you a feel for like how much data we're using that's it thank you i hope you learned something you