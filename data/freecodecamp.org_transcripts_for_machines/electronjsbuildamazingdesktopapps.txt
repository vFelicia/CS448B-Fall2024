so electron how many people have heard electron besides good how many people have used electron all right awesome hopefully i won't put you to sleep the rest of you hopefully you'll enjoy the journey so why am i here um i have a slight mental defect i actually like standing up here and talking to people secretly wanting to be a teacher then i saw teacher pay ux software pay okay uh we know our career path um i recently wrote a coauthored a book for a press with my good friend leif wells on electron from beginner to pro i actually have a copy here we'll figure out a raffle as well um it's an interesting book we took a different approach in writing it you actually really don't build a nap in there because how many people have like gotten the technical books and like how many people have done the to do app you know there's real value in the todo app i'm not going to throw that away but there's an issue with electron that you'll understand as we go through of why we didn't have you build an app in there so i'm going to teach you what i thought um i'm still an adobe community professional mostly working in phonegap cordova as well as experience design i am actually ux lead for a home automation security company down in carlsbad so driving north wasn't so bad it wasn't coming from downtown san diego um i have a couple courses on linda and i've also written a book on the ionic framework for o'reilly so what is electron well it was actually released back in 2013 so we're talking it's a fiveyearold system where it's just about to hit the 2.0 release so it's been chugging along it was actually written by uh xing zhao he actually worked on another project called nwjs node webkit js and then actually moved over and then basically it was the foundation for the atom editor so how many people use atom okay how many people use vs code okay all right there's a reason those are all electron apps so the idea behind electron is it's actually a blending of technologies it's a blend of node.js it's a blend of chromium which is basically the actual engine inside of chrome the browser so chrome is the browser with all the things like bookmarks and all that the actual web rendering engine is chromium these two things together are what sort of make electron magical i was going to do the darkening thing by stop a lot of the apps on your computer are probably built with electron i almost when i do i only talk some of those things saying same thing it's like a lot of the apps on your phone are probably actually written in phonegap you don't know this a lot of the apps probably on your computer are also now written in electron so obviously adam github was drinking their own champagne and built the atom editor that was the foundation of their bs code my favorite editor who would have thought hey i'm i'm a little old i got some great guess your grade like would be saying yes i like a microsoft product it's hard to say but it isn't you know though actually they're both great editors um you mentioned slack here's another electron based app uh github desktop another one postman if you're not familiar with that which is a great um api remote inspector the wordpress desktop app and the list goes online you can actually pull up that url and just keep scrolling all the apps you've never heard of but it's a great solution because it allows the development community to again have that one language that one set of tools and now come to the desktop it's very similar to almost like the sales pitch that i give about phonegap and cordova same idea one code base multiple platforms so what does electron bring to the table what does it give us as a desktop app building solution automatic updates so in this age of agile development and always adding new features because there are no bugs just new features you know we have a way to you know push updates to our users um native menus so if you've been doing some web app development there are hard walls fine i have this beautiful web app but i have the chrome menu bar the firefox media bar i have to somehow fake some sort of interior menu bar that's clunky closure doesn't fully work right now i'm trying to hack in and override keyboard shortcuts to try to make no we can get that notifications things we have that sort of an engine so i say hey you know we all use slack slack notifications hey you just got a new you know dm or whatever crash reporting okay yeah there might be bugs you might want to know about them profiling windows installers mac installers on and on so it actually brings the table a lot what you would need in your utility built to make a desktop app because most people don't write desktop apps they're a rarer breed than say even like trying to find someone to write a native desktop app it's harder to find as someone who like oh can you find a swift developer can i find a you know a a java developer to do something for android that's not people a little harder beauty is you can ship to all three of the platforms so i can write roughly with one code base ship for the mac ship for windows and even ship for those penguin loving people out there in the world as well so and this has a lot of value especially when you start thinking about the enterprise world where if you i used to work at qualcomm you step behind the firewall into the land of it and all of a sudden you know here are hundreds of these web apps and applications to make the backend world oh wait i can start doing some stuff that i can't do and really provide some value so how does this all work talked about no talk about chromium real fast electron is really built upon two silos it's built upon this main process silo and it's built upon a renderer silo these two processes run simultaneously and this is probably the biggest sort of mental shift going from a web app development world into an electron development world because these two friends have a way to talk to each other but you have to explicitly tell them to the main process that's really where you're going to mostly interact with that node component of electron that's where you're going to pull in a lot of your node modules this is what's going to allow you all the cool desktop stuff that you can't do in a browser when you start to do some browsers are getting better but if i want to talk to the file system write to the files launch other applications put up native dialogues things like that that's going to live over in this main process which is mostly a node mostly where i think it was that's where my node stuff lives the renderer process this is that ui layer this is all living in that chromium side of the world this is what i paint on the screen to show my users something and those the two parts now the interesting thing is you actually don't have to have this part you don't have to have a renderer you have something that's just a main process so if you've got some little batch job or something you can actually make a headless faceless electron app and do something with it so let's face it we're software developers we're lazy if we can find a way to automate a process we'll do it and you can start doing doing things like that you know making your life easier that's what it's all about that ui layer i mentioned it really briefly it doesn't have one this is actually sort of the hard part of electron that is a blank web canvas just like your web apps are you have to make some informed decision about some framework somewhere to come up and develop a ui layer just like cordova cordova is a blank slate it doesn't care if you're using framework 7 ionic onsen your own same thing over here so depending on what the background you have you can pick your technology to render that ui layer so you know the angular people of the world a little more in the angular world we can use angular if you're a react fam boom you want to play around with ugis great backbone number heck you know if you're old school you want to go jquery ui you can do that roll your own heck you can even use ionic which i've done it's the real challenge that's why we actually didn't have you build an app in our book because if i wrote a sample after to do an angular guess who i just pissed off the reactive view people and if i did react people i'm going to piss the angular people off so we actually just kept rather just plain simple javascript and really didn't go too deep because like all right how many times do i want to write that to do app and you know try to come up with some artificial so that's the one big challenge with electron is that ui layer what are you going to pick because what you do in electron isn't necessarily that hard setting meaning some dialogue some things like that it's still the hard engine is the business logic the ui side that's where the sort of the challenge of electron development comes in so installing it heck everything's npm boom drop it real simple now they have a little quick little kick starting this is actually command actually we'll hop out and do a little more demos in a minute basically clone their starter has a few things change the directory reset the get flags mtm start boom you got your initial electron app and it looks really sexy you know hello world um there's some interesting stuff that actually goes on if you actually will walk through the gets here we'll do it up here so you literally have six files six files basically and then the node modules start and create my desktop application and even less because you know who cares about the license we always forget which one do we want you know mit whatever we have an index.html a couple json files and a package.json that's the start now in reality you're probably going to start you know having directories and making things a little nicer you know you're probably going to start putting everything inside of an app folder you're going to have a build folder a disk folder things of that nature the git ignore so the main js so the main js file this is what electrons going to point to well by default the package json points to main.js if you want to change convention you can't but just maintain yes this initial javascript file is what electrons are going to boot up from and the nice thing is since we're living on top of some modern stuff we can actually start to write in a little more modern fashion now we're going to be writing the main js in js the renderer side you know if you want to live over in the land of typescript or something else you can do that but over here you're basically running es6 basically pull in electron we define a browser window do things like path url eventually we're going to call and create a window and say hey make me a new window i went at this height this wide tell it what to load up in there not a lot to it to get started now remember it's chromium so all those skills you have like that chrome dev tools we have it built in it's there for us so everything that you kind of gotten used to working with as part of that muscle memory of figuring out starts to be there now unfortunately because you're moving out of the browser into a desktop app some of the responsibilities start to move back onto you like cleaning up after yourself when windows close and listening to all these other events so some of the things you've never had to worry about before now become your responsibility so like going from being a teenager to like a young adult like what do you mean i gotta pay rent and do laundry my twins are 17 were in that phase oh um so we have a on ready event so all of us who have lived in the land of you know document ready or cordova developers device ready we got ours yeah because this is still going to take you know a few moments to boot up and things and splash screens and you got to deal with that world the html side is pretty straightforward it's just html so the nice thing is even though we're just barely getting to 2l with electron there's lots of little minor updates they actually keep the chromium engine really really really really really fresh like within a day or two and they basically you got a new one so whatever is getting poured into the latest version of chromium in terms of support for new features and the evolution of you know html5.1.2 etc etc all the new javascript is available to you and the nice thing is you're locking that inside of your electron app so you know what you're going to get you're not beholden to mismatches so you could actually make electron even say your enterprise company says thou shall use only ie or something you know i mean there's it's not as bad as it was but you know you may be trapped in a legacy system where heaven forbid you know they're still running windows 7 or something in ie11 with electron basically you have a captive browser so you can use the new stuff that you want to use that makes life a whole lot easier so it's a nice thing there but now we have our script engine here so we have another script engine also so we can figure out processes so this is what actually wrote that you know hey what version of chrome i'm running chromium really my version electron my version of node over there real exciting and then i basically can pull in this render.js file so windows so not the operating system but the actual application window we actually have a whole lot of parameters so out of the box that first one just had width and height we actually have a whole bunch of attributes we can set up on our window and we're not restricted to one window i'll show you an example so second windows how to make a fake splash screen sort of thing show you that so we can say whether it's window to be shown or not our background color we can restrict the width and the height to the thing so you know we can only make it so small because as a ui person there's a point where like um yeah i know you can shrink down the window but i can't refactor the ui of this app to that point i need a minimum of this you know it's a data table i can't make any smaller um i can make it not movable so if i actually was making some sort of you know dashboardy thing i could you know walk all these things in positions and not have anyone like muck them up i can have it always be on top i can change the title um lots of capabilities i can actually make frameless windows so if i don't want the window chrome i don't have to have the window chrome i can also make my window transparent if i want it to um that was a lot of fun that was an interesting one i don't know if anyone has used this i don't know what it's written in but i've seen some web measurement apps that you can fire up and will act as overlays on top of the browser you're trying to take screen measurements and that sort of thing that's what you could use this potentially for so yeah so here's a transparent one so yeah there's the attribute transparent true if i wanted to be transparent i'd see the stuff through this the content in the html is there but the window itself is transparent you can do interesting things mentioned this earlier menus this is obviously one of the big differentiators between the browser world and the desktop world and when you launch any sort of application you have a menu bar that has all the things that you want to do with it not what chrome wants to do or firefox wants to do we have that capability and this is actually usually winds up with being the bigger blocks of code in my electron apps because you have to define all those menu items and the structure and it becomes something about this long ten times longer for a fully fledged menu so basically we tell it to build from a template we set the application menu and away we go what does that template look like well is basically a big long nested messy json file so we give it a label and the first label that's what's going across the top of the menu bar then the sub menus are the things underneath and you can have sub menus in there add infinite item ahead of time now you can update this on the fly you can change what things are enabled so all everything you think you need to do with the menu you can do it's not a hack now what's nice is they have both accelerators and roles because when you're stepping into the land of the desktop world there are lots of conventions you know copy paste etc etc you don't need to rewrite those they understand that those are sort of core functionality and that's where that role comes in so they sort of automatically handle that for you by adding that role they know what you want to do now you can't override it so if you put that in your you basically have a contract with electron that this is how it's going to work so if you have something custom you're gonna have to call your own function but we can also define our accelerators those are the keyboard shortcuts and you'll see that first one you know command or control hey i can deliver to both platforms as mac people it's you know command c the windows focus is control c it handles both of those worlds for you it knows what os it's running on and we'll adapt to that so here's an example screenshot of a menu being instantiated so there are you know my modifiers up there here's a submenu i have a check mark under there all that is within my electron control so as i'm moving things in and around i can do all that contention wins how many people tried to do a contextual menu in their web app one or two yeah it was fun wasn't it you know you just it was probably one of the most hackiest things you'd ever attempt and yeah and you still probably got jira tickets from qa saying it didn't work estj is over there remember like send charges yeah yeah yeah so we get them as well so this is just basically another variation of the menu element so we can have os proper contextual menus in our application and we can either set them globally or on an item by item basis so depending on what your app needs to do so again to the end user they have this is all the right set of tools they have no idea what this is written in so here i have a contextual menu building it from a template um usually the contextual menus are a little simple without all the nesting in the menus custom functions right in here and then i just set it right here to a window event listener so this one would just anywhere i clicked inside my application this would show up but you know if i it on a specific button or a specific element you know i just move where i attach that event listener to and see you know we get nice things you know fat arrow functions so all the cool things you're learning like here at fuse you know all great this is the magic between the two worlds so it's talking about those two silos you got that main silo you got the renderer silo they don't talk to one another kind of like my twins i have boy girl twins they don't talk much usually yelling who's emptying the dishwasher ibc so like us like me and my wife with parents we're communicating between these two the ipc this is the channel between these two processes because basically these are kind of sort of segregated there is a way to actually call functions within each other you can but what i have found in talking with other developers it tends to get a little messy messy that way they really do like to sort of keep ui stuff over here really separation concerns and stuff that's really sort of ose over on the main but a great example of where that baton handoff would be was i click on a button over here then i want to open like save dialog save dialog is over in the os side of the world so i need to tell it hey go from the dialog and then the dialog needs to tell say my ui oh here's your file path and oh okay i'm done now do this or whatever it's the ipc that allows us to talk back and forth ipc actually comes in two flavors it comes in a synchronous portion version as well as an asynchronous version so this is the sync version so pull it in and you know they're really cryptically named if you see render ipc main usually keep them straight unless it's two in the morning and your chapter's due um basically here we're attaching it to a button to have on my ui click and basically send synchronous this message with that and over here so this part right here that's sort of the name of my token that i'm sending over and over in the renderer it says hey if i get an ipc message with this basically as the message header then pull these targets and do this and then i can basically send back the return value now it's all locked up synchronous we may want something asynchronous very type is similar hey we're going to send over and then same idea so depending how your ui your interaction because sometimes you may want to lock something up until it's done um sometimes you may not or may run so a great place where this gets used is actually pulling up and kicking off dialogues so you know we have some files we're starting to get more and more file access with our browser but you know the native alert dialogue in a web browser is on a scale of one to ten what about a one i mean it's you know it's funny it's actually like one of the first things you actually show then one's done any cordova work same thing you pull up you make a phonegap app you have a javascript alert and it says your index.html and we're like oh well that's not nice so the first thing you do is like okay you're gonna get a name dialog same thing here how do you give a name dialog well we got them we actually have several variations of them so we have a file open and file save we have a message box which is really sort of your alert info box we also have this special alert box sometimes the naming in github kind of i love to hit that wayback machine because calling these boxes i don't fully get i'd love to like have that one who lost the bet you know um an error box is something you can fire off very very very very fast in the start of your application if something went horribly horribly wrong but but the cool ones are like the file open so this basically is where that ipc stuff starts to come into play again so here we have a dialog we're going to say hey go open the directory dialog boom go do this and then we're going to get a nice looking file dialog we have a lot of opportunities with the open so we can actually filter on the file the directory multiselection if i want to need to be able to create a directory so all these capabilities you would want in a desktop application or there i can even you know show the hidden files it's like oh you know you're writing a text editor oh yeah that dot did ignore that you actually need to go edit i can show that to you because it's hidden um and actually there's a nice thing on windows we can actually prompt create so here's a little more here's a save you know hide extension a lot of things are all there for us so message boxes these are really dialog boxes in my world um very similar except now we start to define our buttons whose default what the cancel is because remember as you start moving in the desktop world you have to you know really do you think about keyboard interaction accessibility those sorts of things so when i hit you know escape to cancel who am i talking to what am i working with message in detail there are four variations so an info an error a question and a none on the mac side they're all the same there really there is no visual difference between them windows actually does something with those variations so depending on my type you know i can get different icons in there and have different little bit of elements of how they lay out now you are not bound to the default icons you can actually have your own custom icon your own custom image so basically we have a module in there called native image tell it where our little icon is and then we can just pass that in as an icon so you know your visual designers crafted a beautiful application icon and then you plop the warning triangle on the corner and make it look nice and pretty or something else i was talking earlier that that ui layer was all about chromium we have all of these web content events that we can listen to and hook into and start to do something with so depending on what your application usually do you know did the cursor change should i do something um if the dev tools were open do something um did i fail the load did i you know media started playing plugin crashed uh you can actually run flash inside there just just so you know if you actually needed to um you will navigate all these things these are all events and things you can start to listen into if your application needs to work with them all right let's talk about some of the sad parts of the world debugging because i know everyone in this room you know writes flawless code but your coworkers may not you know how do you handle that well the regular process actually we have chromium's dev tools right there for us so we have our console log we can go in look at the html why is the css misbehaving what's going on i can go at it from there the main process actually is a little harder because this is a little bit inside the land of node we actually can implement and use vs codes code tools it's debugging to get them there and if you are a node person you're familiar with node inspector you pull that in and start playing it over on that end of the world because those two silos are are truly silos you may be putting console logs over there but you're not going to see them in the console log that you would see over on the renderer side so there is another extension actually a devtools extension called devtron it has some interesting stuff i used a little bit it didn't knock my socks off it's kind of like okay it's there um but it the only thing i would say is it does help a little bit on some of the ipc communication this stuff going back and forth because it's really that one part of the world where you're living in two worlds at the same time all right how many people test write unit tests share more hands more hands fix that um i'm a prototyper a friend of mine wrote a job description for me one time in a talk says i get paid to write spaghetti code for a living so it's awesome um i'm a ux i'm prototyper it literally is like it's got to run for 12 people for usability study and it never sees the light of day so but i know in the real world testing is important they actually have a tool called spectron which you can use to leverage and actually run proper unit tests with mocha and chai or whatever and actually begin to test your application which is probably rather important especially if you start thinking about in fact this is desktop application a lot more security starts to come into play because you have access to everything in here you know you can say i'm going to erase your hard drive you know a lot of power a lot of responsibility comes in writing an electron app and you want to make sure it's it's working well um real simple installation boom so let's talk about building your application and we'll get to some demos at the end so you need to somehow sort of compile all these bits into something distributable something that may go into the mac app store the windows store on a server that looks and smells like a real application the preferred tool is this module called electron builder and really it only takes a little bit of change to your setup so like i was mentioning earlier that's why you kind of throw some stuff in the app folder like that it's going to start writing stuff out to the build and distribution folder it's a very well maintained project that's always that question you should ask yourself with any sort of open source tool how wellmaintained is it you know am i going to be ending life you know two months from now when the critical bug hits and i'm completely in trouble so it's just nice to have a good maintained library it will build for all our platforms it will build for our various architectures so if you have to deal for you know back into 32bit or 64 mac windows it will do all that for you basically in that package json file we need to update our scripts to basically tell it to run build what we want to build for and then we need to define a whole bunch of properties these are actually very well documented we have to give an app id everyone needs an app id um that's how the world you know keeps itself straight copyrights you know the name is going to be what elect version of electron i want to package in there um category from putting this in the app store for mac where it's going to live what kind of installer for windows um what i want to do for linux how i went straight there app icons etc etc all start to put them all in here those are the things you start to define in here if you like i said if you ever worked with cordova this is sort of the equivalent of the config.xml file just they have to use json because it's not 10 years ago so really you know you just basically have to point to where that new starter is it's all good to go make your appt icons in there you have to go a little further like for the mac you know you probably have opened dmgs disk images and you've probably seen something you know really nice like this you know okay take this icon this app put it over here in this you know alias applications folder and that's the extent of the installer well you have to tell it where this graphic is and how big it is and what those things are and it will create that dmg for you make the zip and there they're your bits same thing with windows it will make your windows installers i don't know if anyone's ever tried to make a windows installer but oh they're so much fun so it really does take a lot of the pain out of it there are a couple variations on the two types of windows installers out there this or not um but you get to define this is the real simple one you can have a more formal one and you can start to define sidebar graphics and header graphics and make make it look you know like a real software developer knew what they were doing when they made this installer really nice auto updating this was a hard part this was actually more interesting than i thought i almost kind of feel like they got to the point i'm like oh we just got to add it and move on um it is built into electron however the amount of additional work with the default electron auto update system really left my head scratching because they're not even on top of the same worlds so for mac os it's going to use the system called swirl dot mac which is different than the squirrel for windows and linux actually your starter outlet completely but for the mac one to work you got to have your own server up and running sending back a json file when requested to then send the update around and all this like i said i'm a prototype i'm a frontend guy i'm like what server what 200 response with what package oh oh please um help me help me um so instead there's a lovely alternative package out there called electron updater and there's actually a sort of what i call a thirdparty group uh it's electron user line i believe they actually have written quite a few so that electron builder tool i mentioned earlier it's the same group also has done this mostly not an electron forge which we'll talk about a second this is an alternative to the electrons builtin updater and the nice thing is it doesn't worry about the whole server response sort of stuff so you just basically drop this in as a replacement and life is good again so you pull in their auto updater not electrons and then you can basically listen onto various events it goes out to a url it asks some stuff and then check if there's an update not update download an error so you can have it do a silent install a prompt install so all that updating you see inside of real vs code stuff like that it's all living on this much much simpler than like standing up your own heroku instance and uploading stuff and hoping you did it right and that sort of thing so but yeah it is electron user land they also started another project which i was just playing with toward the end of the book this thing called electron forge which is really an electron cli it's almost a whole collection of tools to make all this even simpler um it was just getting off the ground so i'm like oh we don't want to rewrite the book we're already late so let's mention at the end so that's the book um that's me let me show you some demos all right so make a little bigger so before i actually run this thing so here's the package.json file you can see we're a little testing got distribution in there a few keywords some more dev dependencies build script type stuff let me just go ahead and run this now it's wait it's right over here quit that wrong project oh that's right i moved it that's what i get for cleaning up before i start there we go hurry right yes oh if they are red um you may have noticed that presentation i just gave you was electron app actually that was just reveal js that only just dropped into the quick start replacing the existing files and was just an electronic so it literally is that easy to take a web app and slap it into electron app now i didn't do anything to deskify it oh that's a real word um things like you know what with a keyboard you know putting up a proper menu keyboard saying you know command h would do this et cetera none of that was done but it's literally as simple as it was so here's electronics so those are the chrome tools i was talking about right there um i forgot to pull in the npc render but that's okay you know i can pull up my my dialog box and then you know i can see what we have down here i can choose a directory all these things that i want test out my processes there's you know console logged back and forth and this is all that code i was talking about through the presentation so pulling a few modules i basically go find the document again keeping it vanilla and you know contextual menus so if i come back over and control click you know i get a real contextual menu inside my html and do something with it my custom menu there's my custom menu pulls that out so oh and there's a reason why the buttons are purple look up rebecca purple um but here are the things back and forth just what i was showing you to think i'll just simply put up inside the thing inside there over the main.js you know here's where i'm creating the window a little bit of the menus you said the menus can get a little larger this is where some of that uh file management loading in would be probably advantageous generate the icon custom functions and that sort of thing so that is you know kind of the start of electron and here let me show you what's possible it should be right there so here's ion generator so we have that splash screen and then here we have this application right here this is an electron application and not in the app store it's assigned to go that far the ui actually is the ionic framework so even i've taken a mobile framework and actually pulled into the desktop so i have the ability to go through here and the idea is if you've worked with ionic it comes with a cli i can never remember all the parameters and it actually doesn't do everything that you would need to set up your ionic application things like adjusting the manifest json file for progressive web app updating the fig.xml file if you were deploying it to a native mobile app pulling in the various plugins the cordova plugins this actually was i said well let's just play around with this so i can go through and start to define my manifest json over here come over to cordova yeah i know there's no platform start to pull in things a lot of flying splash screens things i would do in a cordova application yes i know i didn't pull it in i can start having these scrolling lists pulling in plugins i can pull in lock testing and eventually have it execute the cli in the terminal on my user system so i don't even paste that like no don't copy this into a terminal it would actually run and build bionic application all through gui so if you have a bunch of command line tools lying around you could actually write a ui making a lot more friendly a little more safeguards and actually just use electron to actually run those headless things for you and go from there but that is a brief look at just you know just the top veneer of what electron is sort of a sampling of what the tools it can give you the hard part is you know writing all the application logic you know it doesn't solve that for you but it really gives you a nice other solution to take that web app take that idea out of the browser you know where you probably had to say to your boss oh the browser won't let me do that only a desktop can well now you can so with that that is electron so i guess we can open up to some questions if there are any hey i'm vj thanks for coming to the meetup today i'm the organizer for javascript la i wanted to just personally thank you for watching this video if you found it useful i'd love for you to subscribe to our channel we're slowly but surely making lots of little video content for you guys to enjoy and soak up especially if you want to get better at programming i'd love for you to be on our slack channel too over 800 users the link is right here js join jsjo.in if you forget it's really simple if you have questions for this meetup or you know questions you didn't get to ask or because you couldn't make it we'd love to have you just post it on our slack group so if you're a newbie don't worry it's a good place to go there's a lot of great engineers all connected around la and orange county so i hope to see you there