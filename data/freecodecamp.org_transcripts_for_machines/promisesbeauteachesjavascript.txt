promises A promise is a proxy or placeholder for a value that you may not know when the promise is created you don't know exactly when an asynchronous method is going to finish in your program promises allow you to do something as soon as an asynchronous method or action does finish instead of immediately returning the final value the asynchronous method returns a promise to supply the value at some point in the future a pending promise can either be fulfilled with a value or rejected with a reason or error at this point the associated handlers will be called one way to create a promise is is with the new promise there are other ways to create a promise such as the fetch API but here is here's the basic usage you put new promise and then you're going to pass in a function with resolve and reject at this point in the promise you're going to do an asynchronous task so we don't know for sure when it's going to end and then it's up to the developer to manually call resolve or reject from within the body of the call back based on the result of the given task if the asynchronous task was successful you're going to call resolve and you're going to pass in whatever you want say success else you're going to call reject and you're going to pass in whatever you want such as failure so this that's how you set up the promise and then down here is what we call the promise and the then function is whatever you're going to do after the asynchronous task in the promise completes so as soon as this completes this task up here it's going to call the then function and it's going to do something with the result and so this function will not be called until whatever the asynchronous task is resolves if there's an error it will go down to the catch function and it's going to do something with the error this was just the basic usage of a promise now I'll show you another example that does a little more so let's scroll down here so this was created to show exactly what's happening when you use a promise so in this example we're going to create a few different promises and we're going to keep track of how many promises we have this is the function test promise and you can see we're going to call this three times at the end so we can create three different promises to see how they resolve and each promise we create by running the function is going to have a different number associated with it here this promise count equals Plus+ promise count so first we're going to console.log This Promise count so if it's the first one it's going to say one started sync code started so we're going to see all this in the console over here and then we're going to create the new promise inside the promise we're going to console that log that the promise is started and the async code is started and then right here it says this is only an example to create asynchronism so in this example function we are going to create it to be asynchronous by setting a timeout for a random number of seconds to simulate that it's asynchronous and we don't know it's when it's going to be resolved so then we're going to resolve this promise count so that means we're going to send out what number promise this is so let's go down here P1 that means the promise that we created up here then so once this P1 promise it resolves it's going to run this then function and it's going to have a value that value comes from up here when we resolved and we sent this promise count into the then function here and now we're going to console.log the value that's what number promise we're on remember there's three promis that we're going to create down below and it's going to say promise fulfilled async code terminated and if there's an error it's going to console.log handle rejected promise and it's going to tell the reason and after this promise is run it in our code it's going to console.log the promise count and that the promise made in sync code is terminated so let's run that to see exactly what happens now let me move the console log out a little bit so you can see console one started sync code started One Promise started async code started One Promise made sync code terminated now one thing interesting about this is that the promis made sync code terminated is toward the end of our code and it hasn't done the promise fulfilled async code termin terminated yet but that doesn't happen till well down at the very end of our console it says One Promise fulfilled async code terminated it's going to run this line of the code promise made sync code terminated before it runs this code promise fulfilled async code terminated because of this promise with the random number it's going to take a random amount of time before it can fulfill the promise but if you look back over at the console you see we have one one one and the next one isn't till the very end so then we're going to do the second promise 2 2 2 3 3 3 and all these are in order started promise started promise made started promise started promise made started promise started promise made but then they fulfill at different times so first the second one is going to be fulfilled then the third one's going to be F fulfilled and then the first one is going to be fulfilled this is because of the asynchronous nature of this function well I hope this helped you to understand promises a little more check the links in the description to learn more about promises and to see where I got some of the code Snippets in this video don't forget to subscribe and remember use your code for good