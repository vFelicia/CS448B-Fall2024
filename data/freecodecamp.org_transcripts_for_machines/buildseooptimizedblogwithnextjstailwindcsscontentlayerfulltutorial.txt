this is a great project to improve your frontend skills you will build an SEO optimized blog with nextgs content layer and Tailwind CSS codebux created this course he has created many Great Courses on his own channel and we're excited to share this course with the free code Camp audience the course is designed to be a OneStop resource for Learners who want to create their own personal blog website with a bunch of features including SEO optimization dark and light themes responsive design and markdown based blog rendering let's start learning hope you are all doing great today we are going to create something very useful in our developer Journey there are multiple options where we can share our learning through writing such as hash node Dave medium Etc but I always like to have my own blog as a developer where I can customize anything I want so today we are going to create this amazing blog using next.js and content layer so as you can see right now Let me refresh this and so we have this minimal navigation bar which has uh you know just for options one is the theme switcher and other two pages are the about and contact and on the right side we have this social media icons and the logo on the left now uh in the cover section uh I'm displaying the latest blog that I have published we have category block title and a small description and the cover image now let's uh scroll down next section is for the featured post this section is manually customizable by you so that you can show posts that you wanted more attention or you think it's uh best for visitors and the next is the recent post section where we are going to show the last six post at the end we have an uh really simple footer uh that has this input and a submit button now in this input you can connect any third parties services that provides you the subscription and stuff also we have a site map as well now let's check out this blog page now in the blog page we have this cover image title and the category now here we have details about the blog such as publish date total views and reading time and the category let's scroll down so on the left we have a table of content by clicking on any of this link you can just directly go to that section also we can close this Toc as well so uh this is the blog element that I have customized for the purple color so here is the code block now this image will use the image component of the next GS so that it loads faster now I have used the markdown to render this blog now let's open the category page so this is the category page that contains uh blogs relevant to certain categories so let's click on the productivity so it will contain three blocks and uh all three blogs have the productivity as their main category or tag let's click on the JavaScript so in under the JavaScript tag we have only one blog and let's click on this all button so it will show all the blocks that we have right now now let's check out the about page and as you can see we have this insights going from right to left and text on the right and this cute little image on the left now this image is generated by Delhi using a Bing search and here are the skills you can list your skills right here just a small hook to reach out this link will open the contact page so let's click right here and we have this minimal contact page now on the left we have this cute little animation by Lottie animation and on the right we have this form so I have created this form in a way that you know looks like a paragraph you just have to fill in the blanks now let's go to the home page now in this website I have implemented a really good SEO techniques so that your article can rank better on Google and other search engines let me show you uh how the SEO will help you let's go to the Google and type OG preview online now OG is an open graph that is an Internet Protocol to standardize the use of metadata within a web page to represent the content of a page so uh you can you know consider that as whenever you share some blog or any link on the social media it will preview the content of the link in a beautiful manner so let's open this first link copy this URL paste it right here and let's click on the check website now on the right you can see the preview so whenever we are going to share this website on Facebook it will look like this on Twitter on LinkedIn and in the Discord as well and here we have some details that will be shown on the Google search Pages such as title description and image let me open any blog let's copy this link and paste it right here let's check it so whenever we are going to share this Vlog there will be a title small description and the cover image so I have implemented all the required meta tags in this website as well let me close this let me show you the responsiveness of this website so let's go to the home page open the dev tools and click this device toolbar and let's select iPhone 12 Pro Let's uh keep the iPhone SC now as you can see here uh we have logo and hamburger menu so let's click on this and it will open this mini nail bar now uh unless you close this with uh by clicking on the hamburger menu this never will keep at the top so it's uh convenient for users who want to keep it this way scroll down we have WeChat post section with three blogs and recent post section with all the other blogs and the footer uh let's open the about page and it looks great on the phone as well let's open the contact and looks great now let's open this blog now we have a table of content on the top and after that we have this blog let's go to any of this title so it will scroll down to that heading let's open the category page foreign and it looks great now bear with me throughout this whole tutorial I'll be your guide every step of the way breaking down complex Concepts into easy to follow pieces so whether you are a tech newbie or an experienced developer looking to try building their own blog then this tutorial is for you so now let's get started now let's open this link uh you will get this link from the description of this video and in this repo I have put all the required project files and the starter code so let's go here and copy this make sure you have a uh node.js installed in your system and GitHub as well so let's go to the project folder if you are on Windows you can just open the command prompt by going to the address bar and type CMD and here we have command prompt let me use the git command git clone and paste the URL so now cloning is completed uh let's open this folder by going to the so now cloning is completed so let's change the directory by using the CD command and copy this folder name and paste it now let's use the npm install command to install all the required libraries and press enter once uh it install all the dependencies then let's open this repo in the vs code for that you just have to write code and Dot now let me show you the list of libraries that we are going to use so we are going to use this Lottie player to render the Lottie animations we are going to use the Super Bass uh to capture the total views of each blog we have Tailwind CSS and content layer we have GitHub Slugger to generate slugs for the blog and we are also going to create generate the sitemap let me just show you that if you go down and click on the sitemap let's copy this URL and paste it right here so other sitemap will show each and every URL each and every blogs now this sitemap is uh very useful for the search engines so that they can index each and every uh one of the blogs from your website let's go to the vs code and we will use react hook form to get the response from the form and we have reading time to calculate the reading time of each blog and we have few plugins of rehype and remark now this plugin will help us to form it and make the content look much prettier and for the CSS part we are going to use Tailwind CSS so let me close this first let's uh open the Tailwind dot config.js file and here you will find the colors object uh where I have put every color which we are going to use so let's copy this and first let's remove this we don't need it and paste it right here let's uncomment this uh now uh for those who don't know about this trailwind.config file now in this file you can create your customized theme and add your variables so uh in this colors we have this five variables that we are going to use so I forgot to show you the dark mode of the website so let me just show it to you scroll up and click on this theme switcher so it will turn the theme into the dark mode and as you can see uh now for the slide theme uh I have used this purple color as an accent color but for the dark we'll use this yellow this combination of yellow and black looks uh really great let's open any log as you can see here in this blog uh it has a yellow color instead of the purple now you can also customize this code block so they will also change these colors based on the theme light or dark let's open the about page and contact page let's go to the home page let me show you the project files uh so if you go to this project files folder you will find all the assets that we are going to use for uh in this project we have blog images and blogs that are already written now in all this blog uh I have just uh added the Tailwind documentation text and all the svgs and we have this Lottie animation as well and some icons and site metadata and all the text that we are going to use to create this website now let's open the development server so go to the command prompt and just write npm run div so this will open the development server at Port 3000 let's copy this and open the browser and paste it right here now let's remove this stuff go to the SRC and the app directory open the page.js file and let's remove all this except the main div and just write hello world let's save this and check the server and here it is now those of you who don't know anything about app directory then you don't have to worry about anything I will explain each and every concept so uh let me start with this page dot JS file you can consider this page or JS file as a UI that is you know unique to every route so uh for this this page.js file is directly under the app directory so whenever you open the slash part I'm in the home page it will uh always load the hello world uh this page.js file now let's uh open this layout.js file so those of you who knows the basics of next.js in the Pages directory we we have a underscore app.js file and underscore document.js file so similarly layout.js file is also do the same work so uh this layout.js this file will be shared across all the routes so if I create any route in this app directory it will also have this HTML and body tags and class names so anything I write here or any component I render right here it will be also rendered across all the routes because this is the root layout file you can also create a different layout files and different routes that we are going to do later on so first let's set up the phones and we are going to use this layer.js file like like this so uh we are going to use two phones one is the enter for the blogs and another is the main rope let me just copy this and paste it let's change its name to main rope and instead of enter let's import the rainbow as well from the next slash font slash Google and let's set display and this font configuration to swept and let's add the variable name for this enter fonts for that you have to type dash dash font and any name you like uh let's just type in let's let's copy this and paste it right here now for the main row we will change the variable to Mr now uh we are not going to use this class name instead we are going to use this variable because uh we are using the Tailwind CSS so let's remove this and instead Let's uh use both of these fonts let's open the pack text and and the currency symbol open the brackets and write this variable name Dot variable and do the same for the menu up as well so uh this way uh any component inside there is children can use any of this variable names let's save this and open the Tailwind CSS here we also have to configure the fonts so after the colors press enter and write font family uh now uh we have two fonts with two variables called Mr and I in now Mr stands for the a menu and here we have to add the variable name by using the VAR same as we do in the CSS just write dash dash font Dash Mr and copy this and paste it right here do the same for the inter fonts let's save this now we can use any of this font by just writing a class name such as font Dash in for the enter and font Dash Mr for the manual let's go to the layout.js file so I'm going to use the main drop fonts for the whole website unless we have any component that uses the enter fonts let me change this to main group Dot variable let's save this and also let's add some classes in this body tag so we are going to use Font Dash Mr which stands for the menu and set the background to light which is the white color and for the dark we are going to change the background to start so that's it now instead of using this brackets every time we want to use the variable uh there is a different method that we can use so in the SRC folder create one folder called utils which is for the utilities let's create one file called index.js file now here we are going to create one helper function so just write export const c x and in this function we will pass the class names now we have used this spread operator to get all the values of class names and let's use the arrow function from this class name let's use filter and the add the Boolean right dot join by space let's save this and let me explain what this function do now here uh we are going to use the CX function to add multiple classes instead of using uh the parenthesis this function except the class names are the array of class names now we are using this filter with the Boolean now why Boolean now this filter will filter all the falsy values so it can be an empty string null are undefined and then we are going to join each class name with one space so let's use this function go to the layout and let's create another class name here just write c x to import the CX function from the utils let's open the parenthesis and let's add the classes first we have entered our variable then mandrope dot variable then we have this three class names so let's pass it as a string let's remove this and save it now let's create the uh navigation bar let me close this let's remove this image and this classes as well so let's write Flex Flex slash column items do Center justify to Center as well now I'm getting the suggestion of this classes uh from this extension here is the extension called Tailwind CSS intellisense so make sure to install it in your vs code and also there is uh one more extension here it is now this extension will help us to create the area component faster so make sure you install this as well so let me close this now in the SRC folder let's create one folder called components and inside the components folder let's create another one called the header and press enter now in the header folder let's create one file called index.js now let's use the extension to create the react component just write r a f c e and we have this a small component let's rename this to header and Export as well let's save this now uh as we have seen in this blog we are using the same header and the same folder across all these pages so let's move this header and footer to the layout so that it can be shared across all the pages so in the layout before the children let's add the header component make sure you uh import this from the components folder let's save let's save this and check it out and we have some errors and the header and here is our header component Let's uh remove this black background go to the global.css and remove all this let's save it and here we have SIMPLE black background now let's start creating the header use the header HTML element let's add the class names keep the display to full padding Dash four pairing X and Y two let's keep it to 10 and display to flex items to Center and justify between let's save this so here is the header part let's remove this black background as well for now open the layout.js file and remove this class save this so here is the white background now let's create the logo component so inside this header folder create one file called logo dot JS and write r a f c e to create this logo component here we will use the link component as the parent make sure you import it from the next slash link in the azuref just write slash and in this logo we are going to use one image and the text so let's add one do and import the image tag from the next slash image in the SRC we are going to import the image from the public folder so make sure you have stored your logo in the public folder for now you can open the project files and copy this profile image dot PNG and paste it inside the public folder now any files that you file such as image or videos that you want to use in the next years and if you are using it locally then you must have to uh pass all those files into the into this public directory otherwise it will not render those files so let's import the profile image from at slash public slash profile Dash image dot PNG let's use this image in the SRC and for the alt you can just write your name and for the class name let's keep the width to full and H2 Auto and rounded to full as well let's close this image now after this do add one spawn tag and just write code Lux let's save this and let's import this logo component inside this header let's save it I think we have some issue in importing this file let me check the name of this file again go to the logo it can be because of this internet notation for that you can just go to the Json dot config file so this at the rate slash will replace uh itself with the dot slash SRC slash so instead let's remove this and this so that we can access every folder such as a public SRC Etc let's save this and as you can see here here is our profile image let's add some classes and the image container let's add class names keep the width to 12. let's keep it to 16. round it to full overflow hidden border border type 2 solid and Border color to border Dash dark let's save it and it looks great now in this link let's add the class name set the display to Flags items to Center set text color to text Dash dark now in this spawn element let's add class name set font to bold and text size to text Dash extra large let's save this and it looks great now uh so let's uh add some space between this image and the logo go to this image container do right margin right two four save this and looks much better now let's create the center part of this navigation bar let's go to the index.js file so after the logo let's create one nav element and inside this now we are going to use the link so make sure you import it right Edge ref slash close this and right home copy this and paste it for two more times write slash about for the about page and do the same for the contact page as well let's save this and so we have those three links and after this navigation bar we are going to have one more to do and this will contain the Social Links and let's add classes let's keep the bit to the maximum and padding top and bottom to three padding left and right to eight and set border border Dash solid and Border color to dark set rounded to full font to medium capitalize all the text and display to flex items to Center now let's add class in the link set Emoji right to 2 same for the about margin left and right two and for the contact as well and let's add one button which will be the theme switcher for now just write T let's save this and it looks great now if you see closely this navigation part is not at the center of this page but instead it is on the right so let's use the fixed uh position so in the class name add position to fixed and set top to six right to 1 by 2 that means right to 50 and let's Translate X to 1 by 2 as well so that uh it uh comes at the center of the page let's save this and it looks great now let's also add the backdrop effect so that it looks uh blurry on scroll for that first let's add the background and set the opacity of the background to 80. and use the backdrop class so setback Doppler to SM and save this for now you won't be able to see anything but on scroll or whenever some content goes under this navigation bar uh you can see the different blurry effect now let's add the social media links so remove this and add the link element here we are not going to use the link element from the next.js because uh here in the Azure we are going to pass the website that opens in the new tab or are the external links so first is the LinkedIn then Twitter and GitHub and the last one is the triple you can add anyone you like for now let me just write example.com let's save this now instead of this names let's add the icons so you will find all the icons from the project files folder and the SVG folder now uh we are going to use a different approach to render the SVG files so in the components folder create one file called icons dot Js now in this file we will store all the svgs so first open the LinkedIn SVG copy this and in the browser open svgr playground and open this first link so this will convert this simple SVG to an react component so let's paste our SVG file and copy this whole component and paste it inside the icon start JS file let's export it let's name it as Link in icon and we can manipulate this SVG by passing different class name from this props so instead of props let's open the curly braces and write class name and the rest of the props so instead of props just write the rest and remove this field none and let's add the class name let's use CX utility inside the CX function we will pass we will add the class name that we have passed inside this component and with this class name let's add another class set width to full and height to auto and let's add the view box because uh it is important when you resize the SVG element just write 0 0 width which is 42 and height which is 43 let's save this and import it inside the header element so instead of this just import LinkedIn icon let's save this and it is not defined so its size is bit bigger let's add a class name inside this anchor tag set width to 6 height 2 6 as well margin right 2 4. let's save this and it's still bigger let's add the display to inline lock and it looks better so uh this way we are going to convert all the SVG files to a react component now uh instead of doing uh this for each and every icon I have already done that and you can get all the icons from this icons.js file which is in the project uh files folder let's copy all this and inside this components and inside this icons dot JS file paste everything so we have Sun icon Moon icon for the themes feature LinkedIn Twitter GitHub and dribble as well let's save it close the icons.js file and let's use this icons make sure you import it from the slash icons thank you and copy this class name add for each and every link let's save this and it looks great now we have this scale up and down animation so let's add it as well in each icon we are going to add the same glass so let's uh select this and press Ctrl d again and again this way we can write the class name in each line add class name Set uh on Hover we will use scale Dash zero five and set transition Dash all is and duration to 200. let's save it let's increase the scale to 125 let's save it and it looks much better now let's add the icon for this themes feature and this button let's add the sun icon for now later we will add the condition on a theme switch and add the moon icon as well let's save this and here we have the sun icon so our header part is completed now let's see how we can use content layer to render the MDX blogs in this Nexus application now let's uh open the content layer website go to the content layer dot dot Dave now uh why we are using the content layer to render the markdown files if you directly use the markdown in your Nexus project then you might have to do more configurations but if you use the content layer it will directly transform the markdown content into reusable data objects that can be imported in the JavaScript files and content layer makes it easy to edit the markdown file since you don't need to reload the page to you know see these changes now as mentioned here content layer is a Content SDK that validates and transform your content into typesafe Json data that you can easily import into your application now if you want to know more about the content layer you can just go through this website and read more about it for now let's go to the documentation section and in this environment select next.js so we have already installed the next Dash content layer and content layer as well now uh as mentioned here we have to make some change in the next dot config.js file let me close this open the ABS code let's close each tab and open the next.js.config file now if you want to directly open any file in the vs code just write Ctrl p and type the file name and here is the next dot config.js now let's go here copy this and paste it right here now we are already exporting uh using this but instead let's import like this and any Nexus configuration can be uh in exported from here let's save this now uh whenever we edit the index.config.js file we have to restart our development server let's start it by using npm run Dev and there is some error so this is a simple module related uh issue uh let's change this import statement to something like this const let's get let's get with content layer from the next content layer using require let's copy this and paste it right here and instead of this let's just write module dot exports equal to with content layer and let's use the spread operator uh so that any configuration we pass here can be exported from here let's save this and start the development server let's reload this now uh Let's uh go to right here so we have done this configuration let's go to the source files and as mentioned here this module provides the method for working with the local files as your current content Source uh now for this tutorial we are going to use the locally stored blocks so as a engineer there are three primary functions in the content layer first is the make Source uh second is a defined document type and third is the Define nested type so let's click on this make source now as mentioned here make Source provides the content layer with the schema and configuration for your replica application the code calling make Source should be placed in contentlayer.config.js file so let's uh copy this name and create one file let's close this now uh in the root directory create one file called contentlayer.config.js now let's copy this code and paste it right here now let's uh add the required option in this make Source function so first is the content directory path so let's uh copy this and paste it right here uh we are also going to use the content folder to you know store the blocks let's just make one create one four in the root directory called content and inside the content let's add one more folder and let's name it as Vlog dash one now block dash one is going to be the title of that blog so press enter and create one file called index Dot MDX file now MDX stands for the markdown uh uh actually there are two formats one is MD and MDX is the newer form uh of the markdown MDX lets you include the jsx uh into the markdown so that you can use the react components inside the markdown files uh now uh those of you who don't know uh how to write in markdown it is uh really easy I mean uh let's say for uh admin tag you just have to write hash and type this is the H1 element same for the H2 just write two hash and this is the H2 element so uh there are multiple uh different markdown uh techniques that you can use create a different content content now there are different ways you can import the images in the background as well let's just uh save this file and go to the contentlayer.config.js file so after the content let's check the documentation now this is the content it will include we don't need this this is for the exclude uh now let's check this document types click on this uh Define document type now as mentioned here uh Define document type defines the schema for one particular document type often referred to as a model or content type so let's copy this and paste it before this make source and make sure to import this from the content layer slash source files now instead of Doc let's write blog for the name uh let's keep the blog now for the file path pattern we have slight different pattern because in the content folder uh first we'll go to the block dash one folder and then we will get the index dot MDX file so let's add one more and Slash and add one more so this is the pattern that is suitable for our content Android MDX now uh in this fields we will add all the required fields that we are going to render on the website and that we are going to need in our blog so let's go to the documentation so there are multiple options first is the name and second is the fields and if you click on this field type so there are different fields available that you can use so first we are going to use the string like this one so title with the type string we already have one now let's uh go to the date because we are going to need this published date let's paste it right here paste it for one more time here we will uh use the updated at on so whenever you update your blog then uh you also want to update this date as well uh let's uh keep it required fill so just write required to true let's do the same for the title and the updated ad as well now let's add one more field for the block description that uh you want to display somewhere or you want to add it in the SEO so just add description keep the type to string and require to true now let's say for the cover image we are going to use the image for now I don't think there is any type for the image let's search it let's click on this row local files and as mentioned here we can use this field to store the URL of the image so let's copy this and paste it right here let's uh keep it as a required field now after the image uh let's add one more field call the Boolean copy this and paste it after this let's rename it to is published so whenever this is true that means the blog should be rendered on the website and if it is false that means the blog can be a draft or it can be old so you can just make this field false and that's how you don't have to delete the whole block file let's set the default to true let's copy this and paste it for one more time here we will add one field called author so uh for this project I'm going to include only one author that's why I kept it it's a field to string but uh if uh you have a Blog uh where uh there are multiple authors then you can uh keep this type to list and let's uh add the list type for the tags so go to right here copy this and paste it here so the tags are the type of the tags is list and and each element in this list is uh of type string so I guess uh this is it this are the all fields that we are going to need for this project let's uh save this now uh let's go to this Define document type and check out one more option called computed Fields now as mentioned here computed Fields can be calculated on the Fly rather than being read directly from the content source so let's say you want uh any other fields that that required some data from the blog and then you can calculate something out of that data and you want to display that so uh for example here is the URL path so uh the type of this computed field is going to be string and this is one is the resolve function that that passes the document uh markdown document and from that document you can get the data and you know manipulate that data and return it to this resolve function so in our case uh let's uh create one completed file for the URL so let's copy this and after the fields paste it here so instead of URL underscore path let's just write URL now so in this resolve function we will get the whole markdown document now as mentioned here they have used the flattened path so let's copy this and remove this now we are going to render our blogs at slash blog slash blog title so just uh write the back text right slash blogs slash and the uh currencies uh symbol and curly braces paste the talk dot underscore row dot underscore flattened path and let's say this I think there is some error let's add the curly brackets let's save this now here we have to pass this Define document type so just click on the enter and write document types and add vlog that's it just save this and let's go to the here I think there is some error I guess it is because we change this import here we have made some changes so before uh there was an SRC so let's go to the layout file and here just write SRC slash utils and do the same for this header as well slash SRC slash components let's save this and here is our website now uh let me restart this development server now if you see uh there will be some details about the content layer now you will get this warning that content layer might not work as expected on Windows so there is some reference error that string is not defined because we have no any information uh defined in this blog so let's uh do that now if you want to add the information about the blog such as blog title tags Etc then you can add it inside the section of the block called front matter so for that you have to go right here write dash for the three times press enter and let's add the title uh let's add blog one title and next is the description so this is the description for Vlog one next is the image uh for this image we are going to use any image available in the public folder so let's open this project files go to the blog images let's copy this folder inside the public directory and rename it to vlogs enter so let's import the image let's open the public folder slash blog slash select any image you like after this let's uh add the published add date now these are all the fields that we have declared right here so we have to fill all these fields so copy this paste it here Let's uh change it to published at and let's add the date today is 2023 0 8. 28. let's copy this and same for the updated at next is the is published let's keep it to true and next one is the tags so for tags we are using list so press enter and to add the list items you have to write a dash write the tag name such as productivity all right C CSS so these are the two tags and now close this front matter now after this you can start writing your blog from here so let's save this and check this right here and we are getting this reference error called the string is not different let's see that let's check all the fields one more time type string required to type date date string out here there is a mistake we have to add string and double quotes let's save this and now it says missing required field for one document so it will skip the document we have author is missing so let's go right here and after the updated add add author just write your name save this and as uh as you can see here it says generated when documents in the dot content layer now if you go up and here is the folder that is generated and this folder contains all the generated documents in this generated folder so in the blog here you will find this block dash one dot Json file now this Json file contains all the details about this blog so let's see how we can render this let me close this and this as well now let's open the page.js file and so now we uh want uh we want to get this blocks that are generated from here so open this index dot MJS file and as you can see here it is exporting all the blogs files as in all blogs so let's import it import all logs from let's go out and click on dot content layer slash generated Let's uh log this all blocks save this and let's open the console this component is server side component so it will log all the values in here so uh here is an array that contains this one blog and all its details such as title published ad updated at and the body of this blog in the body there is two of formats one is the raw format and other is the HTML format now uh here are multiple information now we have already used this underscore raw and flattened path to generate the URL field which is right here so it is slash blog slash block title uh in this case it is block dash one so this is how we can generate uh different uh blogs now let's see how we can render this so so in the documentation go to the files and click on this generated data so as mentioned here this is the file location and this is the data structure that we uh we already saw this let's click on the MDX and here is the usage index.js so this is how uh we will render the all all the blogs all right so let me go right here go to the project files and that is already a lot of blogs available so just copy all this into the content folder select one by one copy and paste it inside the content folder now as you can see the content layer has generated the required files for all the blogs each block will contain this informations such as title and Etc so and we will use this poly tag and all the content inside this body tag so there are different types such as Raw and HTML and that's it now instead of writing this uh we can shorten this import so let's uh open the Json copy this and paste it right here let's write content layer slash generated and instead of this let's write in double quotes dot slash dot content layer slash generated so we just have to write this and note the whole thing let's save this and instead of this just write the content layers less generated let's save this and we are getting the log so let's uh create the cover section now this blog uh we have three sections one is this cover section next is the feature post and last one is the recent post so let's create this uh go to the components folder let me close all this in the components folder create one more folder called home and in this home folder let's create a home cover section file let's use rafce to create this component and let's import it in the this page.js file so instead of hello world let's import this and let's uh pass all these blocks so just write blogs and just like this let's save it and from here let's get all the blogs and uh we are going to render the latest blog in the cover section so for that we have to short all the generated blogs so let's create one function in the utils so open the index.js file from this utilities folder and let's create one more function let's use export const short blogs pass the blogs and this will return logs first let's use the slice and then we will use the short now in this short or let's pass to elements of an array let's pass to block log a Block B and let's compare its uh date so for that we are going to use the compare descending from the date Dash FNS library that we have already installed so in this function we have to pass the dates so this function will compare the dates uh let's use parse ISO and for the blogs date for the blog a date just write a DOT published at and then fires ISO B dot published at so this function uh will return an array which are shorted from latest date to the oldest one so let's copy this go to the Home Cover section let's create one more variable called shorted logs equal to Let's paste the short blocks function make sure to import it from the utils let's pass all the blogs now for this cover section we are going to uh select uh the first log so create one more variable called The Log and from the shorter blocks select the first block now let's see how we can render this blog so we will use the article element now let's uh render the image so before that uh first let's see how we are getting the image from the log so here is the image so uh here we are getting the URL of an image but instead of this string uh let's get more data of the image such as a width height etc for that we have to change the type of the image from the content layer dot config.js file so instead of string just write image Let's uh remove this required to let's save this and check the logs let's find the image element and here it is so uh as you can see there are multiple uh information that we are getting from this image type uh such as a file path relative file path format height width aspect ratio uh blur hash data URL Etc so uh for this uh image we are going to use the uh file path this one and uh as you know anything that is in the public folder can be accessed by just a slash so we will replace this dot slash public and just keep this rest URL as it is so let's add the image make sure you import this image from the next slash image and in the SRC let's write block blog dot image Dot file path and from this file part we will replace the dot dot slash public string do uh nothing and let's add blur in the placeholder or for the more props of this image component you can visit the next.js documentation uh let's add the blur data URL just write blog dot image Dot here it is blur hash data URL so this blur data URL I will get this blur hash data URL and it will help help to uh you know load the blurry effect whenever you load the website for the first time and for the alt let's just use the block title and let's use fill so that image will fill out the whole container let's close this and add the class name set width to full height to full since we want to expand the whole image for uh for the whole div let's set object position to Center and set object to cover set its radius to rounded uh 2 3 XL that's it now inside this article let's add a class name set display to Flags Flex direction to column items start justify at the end because uh at the end of this whole component we want to show the block title Etc set margin left and right to 10. and set position to relative height to let's keep it D5 viewport height so let's write with to full and we are getting this whole image instead of this let's create one more div and and for this do let's give it width to full and set its display to inline block and remove this width let's save this and now it looks great now let's add uh overlay on the half side of this blog so that whenever we add the you know title like this so it can be visible for that for that inside the article let's create one div and close this div add a class name set display to Absolute top to zero left to zero as well bottom to zero and right to zero Now set height to full and let's add the gradient so uh for that we will use BG Dash gradient to bottom and from we will start from the transparent color and from zero percent position to dark and let's set its uh radius to rounded 3XL as well and let's save this Let's uh add this add index to 0 minus a dash 10 let's save this and here is the overlap now as you can see the uh lower part is a bit darker than the upper one let's add the block title after the image let's create one do and let's add the class name set width to full R for now set width to three by four that means width is 75 percent let's set padding to 16. display Flex Flex Dash column items from the start and justify to Center and let's keep this add index to zero first let's uh render the category for that we will use the link element and inside this lecturer let's write first let's open the backtex then write slash categories slash we will add blog dot tags and let's select the first tag that's it now close now close this link and inside this link Let's uh add the name of the tag so just copy this and paste it right here make sure to import the link from the next and let's do let's add the text color to text dash light let's save it and here is the category uh let's uh add the title so after this link let's add title in H1 tag so just write blog blog dot title and after the title let's use a P tag to add the block description so just write blog dot description let's save this and here it is now uh we are going to use this category in uh different components so let's create uh one separate component for that so just go to the components folder and create one folder called elements inside this elements let's create one file called tag dot Js let's create the tag component and let's copy this link and paste it right here make sure to import the link now instead of this href let me get the link from the props let's see if uh no uh nothing is passed we will use the hash then the name and rest of the props inside this href remove this add link and instead of this blog dot tags just to write name and in the class name let's use the CX so first we will add the display to inline Dash block and let's pass props dot class name if we pass any class name to this Tech component let's save this and instead of this link let's import the tag component for the link we will pass this and for the name we will pass this one let's remove this and save it and here is the link let's style this let me minimize go to the tag now let's add more class names set padding top and bottom to three adding left and right to 10. background to dark and text to light let's save this all right let's make it full rounded so just write down it down date Dash full capitalize it increase your font weight to font semi bold let's add the Border border Dash solid and border Dash light now let's increase the Border width so just write powder Dash 2. and it looks great let's add the animation on Hover let's scale it to 125 let's keep it to one zero five and add transition all ease with duration 200 and it looks great that's it now let's uh add siding for this H1 element set font way to font dashboard capitalize text Dash light text Dash 4XL let's save this all right let's add H1 tag inside this link so that whenever someone click on the log title it will open the blog uh in the href let's add the blog link by using log dot URL now in the link let's add one class let's add margin top to six and on Hover on of this title Let's uh add the effect the underline for that let's use the spawn tag so just copy this add spawn and inside this Pawn add the blog.title let's add the class name so first we will use the gradient so just write BG Dash gradient Dash 2 Dash right so gradient to write from the accent color which is purple to accent color now let's uh change the background size by just writing BG Dash length to 0 pixel and 6 pixel let's save this actually that should be underscore between 0 pixel and 6 pixel now as you can see here the background size is 0 pixel and 6 pixel now on Hover let's change this background size so just copy this paste it right here and instead of 0 pixel Let's uh change it to the 100 percent let's add BG Dash left Dash bottom so now this class is for the background position to left bottom so this will start animating from the left let's add BG no repeat let's add transition this time we will not use the all but instead we will use uh background size because we are animating the background of the spawn element and set the duration to 500 let's save this and as you can see it looks much better now let's uh add The Styling for the description set display to inline block margin top to four text to text Dash base Let's uh text to text Dash large let's keep it to extra large and font uh to enter so just write font i n let's save this and it looks great now uh this uh this is rendering the first blog and the first block does not have much data so instead of that let's render the another block so just change it this index from 0 to 1. and this looks great let's reduce the overlay so for that go to right here and add the opacity to 90 and now it looks almost the same now let's uh create this featured post section so let's open the components folder and inside this home let's add one component called featured post dot Js let's create a simple component and render it inside the page.js file same as we did for the Home Cover section and we are going to pass a blogs same as this let's save it let's get uh all the logs from the props and as we did for the Home Cover section let's use the short blogs function make sure you import this function let's start with the section element now inside this section let's set width to full margin top to 16. let's keep it to 32. and padding left and right to 32 as well set display to flex direction to column items to Center and justify to Center as well now inside the section let's add the H2 element and just write featured post Let's uh increase the text size first let's set width to full set display to inline block and font to fold let's capitalize it and set text to for excel let's save this and check it out so here is the featured post section let me close the steps now in this feature post section we have two layouts of the blog uh one as this layout one let's call this layout two and in the recent post uh in this column manner we have third layout so let's create all these layouts so after this H2 element let's create one new and in this still we will use the display grid Let's uh keep the grid calls to two and grid Rows 2 2 as well set cap to 6 and margin top to 16. now in this table let's add one article element here we will use the log layout one let's add the class to this article element uh this article element will use two columns so write call sorry it will use one column and two rows so row spawn Dash to set the position to relative let's copy this article and paste it again for two more times now uh uh both of these blocks will cover one column and one row so let's just replace this to one and one is well so this will be layout 2 and here it is layout 2 as well let's save this so this will cover the blog layout one and here is block layout 2 and 2. so let's create all the layouts inside the component let's create one folder called blog and inside this blog let's add one component called log out one dot shares let's import the blog layout one right here now we will pass the uh next blog so in the blog pass the blog as sorted blocks and in the arrow blogs uh let's keep the index to 2. let's save this and from the blog layout one let's deconstruct the blog let's set set the class name to inline block set overflow to Hidden and rounded to excel now inside this do uh we will use the overlay that we have already used in the Home Cover section so just go to the Home Cover section and copy this overlay uh let's copy this whole thing copy this and up to the article and paste it right here now uh in the image uh instead of fill let's use height and width so right width right log dot image Dot width and do the same for the height as well let's import the tag let's import the link as well and we won't be needing the paragraph tag because we will not display the description let's save this uh also let's import the image first and let's save this now let's make this absolute so go here and remove all these classes let's set display to Absolute bottom two zero and padding two uh let's keep it to 10 and set set index to 20 let's keep its width to full as well let's save this and it looks uh bit strange let's change the radius so rounded 3XL to just Excel now let's change the color of this text so in the H1 let's replace it with H2 and instead of text Dash 4XL will keep it to 2XL change the text color to text dash light let's add margin margin top to four now let's uh change the style of this tag as well so let's add the last name foreign left and right to let's set it to six text to small ing top and bottom to two and instead of water Dash 2 set it to border so it will set the border to one pixel instead of two now uh this will override this this class should override the Border Dash 2 class that we have defined in the tag component so for that let's add the important keyword and in Tailwind you just have to write the exclamation mark so it will add the important keyword let's save this and looks much better now let's uh remove this we don't need it instead let let's set set index to 10 for this overlay and for this do let's keep this at 2 20. now similar to this let's create a the blog layout number two let's save this and import it right here just like this and in the blog let's change the index number let's deconstruct the block now let's use the grid so grid grid calls to 12 set cap to 4 items to Center and text to dark so there will be two part one is for the image and we will add the image inside this link so in the link uh let's uh add the blog dot URL for the class name let's let's add the image make sure to import it from the next and import this link as well and the image SRC let's copy it from the first layout just copy this image and paste it right here now let's add different classes set aspect ratio to square with two full height 2 full object to cover set object position to Center so we have 12 columns and this image will take the four columns so right call Dash spawn Dash four and set height to full rounded to Excel and overflow to Hidden let's save it and it looks better now after this link we will add all the other information let's copy it from the log layout one just copy this div and paste it right here let's change the class names set it to cold as 18 width to full now instead of this tag we will use the spawn element and inside this one let's add this tag let's remove this tag element now for this one set the text to upper case and text color to text Dash accent font to semi bold text size text Dash SM now for the link class let's remove the margin top 6. instead add the display to inline block and set margin top and bottom to one let's keep the font to semi bold and text to LG let's remove this classes and looks better now for this let's decrease the opacity so go to the spawn and in the from accent add the opacity of 50 do the same for the two dash excellent now it looks much better let's add the date so after the link add this one inside this pan we will use the format function from the date Dash FNS Library so make sure you import it now in this function write new date so we will use a Blog Dot published at date let's add the format of the date so we want the whole month date and whole year let's save it I think this here should be in small letters let's save it and here it is let's add the class names capitalize set text color to bit Gray font to semi bold and text to base and looks much better we can also try the gray color well it looks more darker so let's keep the dark slash 50. now let's create this recent post section copy this close all in the home folder create one section called reset post dot JS and paste it right here instead of featured post let's keep the recent post let's remove this this whole div and instead of featured post just write recent post let's remove this import let's save it and go to the page.js file and let's import the recent post make sure you pass the Vlog as well let's check it out so here is the recent post now here uh with the recent post title we have this view all uh link that uh goes to the slash category slash all let's add this and add all these blogs let's copy this create one div and paste a H2 element along with the link set href to slash categories slash all and right view all in the class name let's add display to inline block font to medium text color to text accent underline and underline offset 2. to and set text to text Dash LG now in this div let's add the display to flex width to full and justify to space between let's import this link let's remove this with full save it and it looks much better after this leave let's create one more dough in this day we will use the display grid and set grid calls to 3 set Gap to 16 and margin top to 16 as well now in this div let's display all blocks so we will display only six blocks so we have already displayed four blogs so we are left with the rest of the blogs so let's use the sorted blocks dot slice now uh the first Vlog was the block dash one and after that we have displayed four blog so we will slice this array from 5 to 11 to get the uh five uh sorry six blocks so dot map so this last method will give us the 5 6 7 8 9 and 10th block slice method will not consider this last boundary let's use map get the plug and index let's return the article and here we will use the blog layout three let's add the class name to this article element set cold spawn dash one and row that's fun dash one as well and set the position to relative Also let's add the rows as well so three rows and save it so we have one two and three four five and six blocks let's create the third layout let's add blog layout three dot Js let's save it and import this right here make sure to import it in the blog let's pass the log element let's deconstruct the blog now this layout will be almost the same as the layout too so let's go to the layout 2. copy the whole thing and paste it right here just change the names and let's uh change some classes so now uh let's not use the grid instead we will use flex Flex Dash column items to Center now let's remove this call spawn4 keep everything as it is let's change this aspect Square two four by three and after in this do let's remove this and set Flex to flex Dash call with two full and margin top to four let's save this and it looks much better now as you can see this header is going under this blogs so let's add the set index go to the header now in this header element let's go to this new set Z to 50 and it looks much better now let's add the hover animation let's go to block layout 3 and in this image first let's add one class called group right here and and this image let's write group Dash hover we'll scale this image to 105 set transition to all is and duration to 300 let's save this and looks much better now for this one Let's uh add the group over instead of just hover so in the spawn let's add the group Dash over now it looks much better let's do the same for this elements as well copy this copy this and open the layout to add in the image at the group class and let's add group Dash hover in this part and it looks great let's do the same for the layout one as well close all this open layout one add the image let's add the group class and group Dash hover let's add cursor to pointer for the image and this looks much better looks great let's compare this with the demo I think we have to add a little bit padding here go to the header so we have MR2 MX2 let's add the MX2 instead of MR2 and looks almost same now let's add the footer now same as we did for the header let's create one more folder called footer and add index.js file let's name it as footer let's save it and import it in the layout after this children component so here is the footer now let's use the footer element inside this footer let's add text in the H3 and another text in the paragraph now go to the project files and open this website content.txt file here you will find the text for the footer copy this paste it right here and copy this paste in the paragraph tag so after the paragraph We have one form now for this form we are going to use the reactor hook form so let's go to that website react hook form open this website now react to form as mentioned here is a performance flexible and extensible forms with easy to use validations so this is really create Library if you are dealing with forms in react for now just go to the tools and click on this form Builder and let's see how many fields we will require so for this we will only required input and this submit button so let's delete all the other fields let's edit this it's not the first name it is an email and type select it to email if you want any other validations you can write it from here let's update and here is the code first let's copy this and import it right here copy the form and after this paragraph tag and copy all this and paste it right here for now let's save this and check it out so as mentioned here here create context only works in client components so we have to make it as a client component and to convert any server component to client component we just have to use this use client and save it so here are all the text and the form let me just type anything code box at gmail.com let's click on the submit let's check the log so we are getting the object and this object will contain the email first let's style this and then we will see how this form is working I had class to footer set margin top to 16. rounded to 2XL VG dark margin to then Flex Flex direction to column items Center text light let's save this now for the H3 let's add margin top to 16 font medium text to Center capitalize and text size to 4 Excel padding left and right to four save it and looks great now for the paragraph tag let's set margin top to 5 pairing left and right to 4 text to Center width to full let's set width two three by five font to light set text size to base looks better now for the form let's add the class name set is in top to six let's set minimum width to at least 384 pixel set display to Flags items to stretch VG to light padding Dash 2 set rounded and margin left and right to 4. let's save it and looks much better now let's use the Tailwinds form plugin for that let's open the railway in CSS plugins let's scroll down click on this forms so we have already downloaded this forms plugin we just have to add it in the tailwind.config.js file so copy this open the Tailwind and in the plugins let's add it let's save this so this will apply the basic style to this form that is uh let's add class to this input let's set width to full set background to transparent set text to dark now on Focus we want the border to be dark and on Focus set ring to zero we don't want any border now set border to zero and set border to bottom which is only want the bottom border set margin right to 2 padding bottom to one and let's save this and it looks better let's change this placeholder to enter your email let's save it and add the glass for the submit button right down to the dark text to light cursor to pointer font cited to medium rounded pairing left and right to Phi padding top and bottom to one and let's save this and it looks much better so let me tell you how this form works first let's see what is this use form hook so this use form Hook is to manage the forms uh and it gives us different uh functions and values such as a register now this register method allows you to register an input or select an element and apply different valuation Rules to This input like this we have used register method to register the email input and here are some validation rules now next is the handle submit method now this function will receive the form data a form validation is successful now this form state is an object that contains information about the entire form such as errors and it also gives us different values such as is loading or is submitting it's submitted Etc so that you can create interactive forms and this is simple on submit function that gives us the data now as you can see here this handle submit function will take the under on submit function so once the validation is done then it will call this function and Returns the data so there are lots of function in this react hook form then we are currently using but I suggest you to go to the API and check all this different functions and methods let's add the social media links for that let's go to the header and let's copy this whole div and paste it after the form so in this do let's add the class name set display to flex items to Center and margin top to eight let's save it we have to import all these icons let's import it import LinkedIn Twitter icon GitHub icon and triple icon so here are all the icons let's change the color of this GitHub let's add one more class called fill dash light and now it looks much better now after this do let's add one more dough add one more spawn right Ampersand copy for the copy symbol go to the website content and copy this paste here let's use the link set href to slash sitemap dot XML and write sitemap dot XML after this link add one more div and right made with right Ampersand hearts bye let's use the finger tag and inside this anchor title let's write code box for now let's add the link of my blog website called Dave dreaming.com let's save this and here it is so in this do let's add the class name set with to full margin top two uh 32 or let's say 24 position to relative font to medium let's set the powder top border Dash solid and Border color to border dash light set padding left and right two sorry top and bottom two six running left and right to eight set display to flex Flex Direction too row items to Center and justify face between let's save it now for this this one let's use text Dash Center and for this link let's add the class name set text Dash Center underline and that's it for the still let's add class name text Dash Center in the anchor tag let's keep the underline and that's it let's remove this padding left so just write opening left to zero and this input and now it looks much better let's remove this extra white space open the recent post so instead of this three by three grid let's write three by two let's save this now it looks much better so our homepage is completed now let's uh create this blog page let me close all this close this as well thank you let's open the blog page now in this URL as you can see there is slash blog and slash blog title Now to create a such URL and to create uh all the pages for all the blogs we are going to use the dynamic routing so let's write Dynamic routing next Js click on this Dynamic routes make sure you are in the app router now as mentioned here Dynamic segment can be created by wrapping a folder's name in square brackets for example ID or slug so Dynamic segments are passed as the params prop to layout page route and generate metadata functions so let's see how this works let's open the app folder and inside this app folder create one more folder called vlogs and inside the blogs let's create one more folder called slug for the blog slug now inside the slug create one more file called page dot Js now uh whatever we passed after this URL so slash blog slash Blog name this Blog name will be passed as a slug to this page.js file and we will use the use that slug to display uh the data for that particular block so let's see how we can get this log go to this documentation and let's copy this instead of page let's just write blog page and remove this part and let's save this open the website click on this blog as you can see in the my post it will give us the slug which says building Progressive web apps bringing the gap between web and mobile so it is same as this part of the URL let's click on the another blog and here is the same as the URL so let's see how we can use this lug to render the blog so in this blog page let's get the log first let's import the all blocks from the content layer slash generated so all blogs dot find let's pass each block and let's compare it with vlog dot underscore Raw dot flat in path which will be the URL is equal to the params dot slug let's see this flattened path go to the CMD and here you can see the flattened path is the slug of the blog now uh how this is this going to be the slug of the block because this is the file name for this particular blog open the content folder and as you can see all these file names are working as the slug so make sure that this file names are unique and not the same so this will give us the blog uh that has this same slug as the flattened path now let's render this blog add the article element let's add one more div and this div we will add the tag make sure to import this tag component and the tag name let's add the tag so blog dot tags first element then link add vectrix slash categories slash long dot tags and 0. let's add the class name as well set padding left and right to six text to small and padding top and bottom two two let's close this tag so after this tag let's add the H1 element which contains the blog dot title let's add class name set display to inline block margin top two six point semi bold capitalize text dash light text size to 5 XL leading to normal leading that means the line height set position to relative and width to let's keep it as 5 by 6. so it does not span the whole uh area let's save this so we have this H1 tag right here let's add all the other classes so in this first day we have text but in the second view let's add the image add one do and let's add the class name now this uh will be the absolute one so write position to Absolute top 0 left 0 right 0 bottom 0 as well height to pull PG dark slash 6C opacity and inside this do let's add the image for image you can use layout to copy this whole image and paste it right here make sure to import the image from next slash image we don't need any animation here that's it let's save it let's decrease its height so let's uh go to the first div and add the classes set margin bottom to 8 text to Center relative width to full and height to 70 VH set VG to dark let's save it and it looks much better now for the second deal let's add the class name set width to full set index to 10 display Flex Flex direction to column items two Center justify to Center as well and set absolute and let's set it to the center so top dash 1 by 2 left dash 1 by 2 that means left 50 percent and negative translate X to 1 by 2 and negative Translate Y 2 1 by 2 as well let's save this as you can see this div is in the center as well let's check for the other blocks as well and it looks great actually we have to close this div because it will work as an overlay let's delete this and save this and now it looks much better let's add this block details so in the blog folder create one component called log details dot Js now this blog details will have blog slug let's import it right after this do pass the blog and the slug as well let's remove this and add time so inside this time element we will render the date so just write format make sure to import this function from date Dash FNS Library and use parse ISO add blog dot published published at and for the format let's format it right l D for the date and Y for the year let's import this blog details and we have to pass slug as params.slug so here is the date now next is the view so for now let's just write spawn and just write 10 views next let's add one more do to add the reading time now we have to compute compute this reading Time by using the library called reading dash time which we already have installed right here so let's go to the contentlayer.config in the computed Fields after the URL let's add reading time and set its type to Json and let's use the resolve this function will give us the dock and let's call reading time function from the reading dash time Library and in this function we will pass the talk dot body dot dot Raw let's save this and check it out let me just lock this blog now if you check right here that is this reading time so it has different format it has text which says 10 minutes read in minutes in time and in words so there are 1882 words so let's render this so just write blog dot reading time dot text and after this do let's use the link element this will link to slash categories slash log dot slug zero let's close this link and use this variable let's add hash before this let's add class name set margin to 3 let's do the same for this div as well this Pawn and for the time now for this div and let's set padding left and right to dash 10 background to Accent color text to light padding top and bottom to two display Flex items Center justify space around Flex wrap and text size to extra large font medium and set margin left and right to Phi let's set it to 10 let's make it rounded up to LG now it should be tags not slug let's save this and looks much better so after this uh block details we have two elements one is the table of content and another is the blog details so let's render them so after the blog details let's create one more div let's add the class name set display to grid grid calls to 12. set cap to 16 margin top two eight and padding left and right to 10. so next one is the div for the table of content let's use the call spawn Dash 4 and another do for the log details this will use correspond Dash 8 let's create another component to render the block details so inside the blog folder create one component called render MDX dot Js let's import this MDX component let's remove this and instead we will render this component so this component will use the blog prop so make sure you pass the blog let's save this and deconstruct the block from here and as we have seen right here we'll use this use MDX component copy this paste it right here copy this as well and copy this let's save this and check it we have yet to import this it should be blog not the post let's check this all right I think we are not getting the uh blog.body.code let me check the content layout.config I think uh there is one more field that we have to add that is called the content type now let's set it to MDX let's save this all right now in this blogs I have used the Nexus image so it is uh telling me that there is no image component is imported so let's uh go to the render.mdx and let's create one uh variable called MDX components and here we will add the image component let's pass this as the components inside this MDX content make sure you import the image from the next Js let's save this now it says cannot access image.prop Types on server so we have to convert this component into a client component so let's use use client let's save this and as you can see it is rendering this uh log details let's add the class to this div set call spawn two eight and font to enter let's save this as you can see we are getting all this content so how we can style this so for that we have to open the Italian CSS plugins again go to this typography plugin and we have already installed it so let's import this in the tailwind.config file let's save this now uh let's apply the class name now in here uh as I mentioned here we can use the pros classes to add sensible typography styles to any vanilla HTML so we have to write just prose class so let's just write pros and Save and here it is it will apply all the necessary classes to the block elements H1 tags H2 tags Etc and by just adding one class it looks really great now let's set its width to full and also increase the pros class to Pros Dash LG let's save this now it will increase the font uh size let's set width to Max so max with to Max content and now it looks much better now still there is some format is required so for that you can visit this website and and there are multiple classes available multiple themes you can use now if you want to change any element we can use this class let's say you want to change the style of the H1 element then you can use Pros Dash H1 class so let's use it for the block code so just copy this and paste it right here now for this block code I want to change its background to purple and set opacity to 20 let's save this and as you can see in this block code element that is purple in the background let's add the padding set clock or padding two two and padding left and right two six let's save this looks much better now let's change the Border color of this block code element to border Dash accent and now it looks much better Also let's make this uh normal fonts instead of this italic so in the block code changed to not italic class and this looks much better foreign for that you can use rounded for the right side to LG so this will add the powdered top right radius to 0.5 RAM and Border bottom right radius to 0.5 M as well now as you can see both of these Corners are rounded let's change the color of this Ally markers for that you can use froze Dash Ally and use the marker change the color to text Dash accent and now it looks great now this is the table but it is not formatted well so for this we have to add a remark and rehype plugins so what is remark and rehype so remark is a markdown processor while the G hype is an HTML processor so let's see which plugins we are going to use but before that let's uh go to this documentation and click on the make source and click the MDX now here we can add different plugins for the rehype and remark as well so let's open the content layer go right here type MDX and let's add the remark plugin and inside this array let's add remark gfm make sure you import remark gfm from remark gfm let's save this and check this blog now we can see this table and very formatted way so how this happened let's check what is remark gfm let's click on this link now let's scroll to the Bottom now as mentioned here this remark plugin is support the gfm that means the it supports Auto Link literals footnotes strikethrough tables task list Etc that are written in the markdown files like as you can see in this example uh for footnotes you can write like this and for the strikethrough you can use this till this this is the table format in the markdown and this is the task list now let's uh add the rehire plugins let's add rehype plugins and in here first we will use the rehigh slug so let's see what is this and make sure you import this rehive slug from this rehype Dash slug let's open this so this rehab plugin adds an IDs to the headings so let's open the inspect element click on any heading as you can see there is an ID about this plugin now we will use this ID to Target this heading now let's add one more plugin this plugin called V hype Auto Link headings make sure you import it like this Import rehive Auto Link headings from rehab Auto Link headings let me remove this let's save this and let's uh check this heading again now as you can see here inside this H3 there is a link and in this link there is an href that that is the ID of this element so uh this plugin will create a automatic links to to The Heading so let's say we go to the URL and add this ID and press enter so it will scroll down to this heading so whenever you want to share this blog or part of this blog too and even you can share this URL so this will start from this heading let's see more details about this plugin let's see the options so uh we have different type of behavior option in prepend it will inject the link before the heading text a pen will inject the link after the heading text wrap will wrap the whole heading text and before and after will insert the link before the heading or after the heading so we will use the append Behavior so to add this option go to the content layer let's import this in an array and let's create one empty object let's add the Behavior option and set its value to append let's save this and check this heading element now here is the link after the heading text now let's add smaller hash for this so this link has a spawn element and it has icon space icon Dash link last names so let's open the global.css file first let's set the HTML scroll Behavior to smooth then let's use H1 to link to dot icon dot icon Dash link so we are going to Target this spawn element now let's use the V4 sudo class we're going to do this for the H1 H2 H3 that's it let's write H2 H3 and add the content to hash and font size to 0.8 Ram let's save this now as you can see there is this small hash for each H1 H2 and H3 tags on click on this it will scroll to this element and also it will change the ID of this URL now let's remove this underline for that we have to do H2 a link then H3 a link and set text decoration to none let's add important keyword and now it looks great now let's see uh how to add different code themes for this code blocks so let's uh open the free hype pretty code go to this website now as mentioned here rehi pretty code is a rehi plugin powered by the Shiki syntax highlighter that provides beautiful code blocks for markdown or MDX and it's fast since it avoids runtime syntax highlighting by executing it build time so this is a really good plugin to highlight the code syntax let's see how we can use it so go to the installation we have already installed this plugin and the Shiki syntax highlighter as well and let's use this go to the content layer and here let's use this foreign pretty code and let's write code options so just write const code options and inside this code options we will pass the theme let's see the options so we have theme option so the default theme is GitHub dark dimmed and Shiki has a bunch of prepackaged theme which can be specified as plain text let's go to this prepack themes so here are all the themes that you can use you just have to write in the plain text so we will use the GitHub theme so which is right here GitHub Dash dark so just write GitHub Dash dark let's save this and as you can see uh now it has a color now there are a lot of options that you can use such as Showing Line highlighted lines are line numbers or word highlighting inline code highlighting let's use this now as mentioned here CSS counter can be used to add line numbers so let's copy this and paste it inside the global.css file let's save this now to show the line numbers on the blog we have to add an option now to show the line numbers we have to add an option like this let's open right here now as you can see there are line numbers let's open this part in the markdown file so we are in the building process Progressive web apps blog go to the content and open building Progressive web apps let's go to the code part so this is the code so I just have to add the show line numbers right here now let's say if we want to highlight any line let's check out so highlight any specific line so this should highlight line one two three and fourth let's add this option let's save this and that is nothing because we have to add the CSS let's open the inspect element click on this line one now as you can see uh in the first four line there is one data attribute called Data Dash highlighted dash line so for that we have to add the CSS so let's go to the global dot css4 file and after this let's add this attribute and add the required styling so for the background color I will use rgba 2.55255255 and set the opacity to point one and add the important keyword let's save this now as you can see uh background color is changed for this four lines Let's uh add the padding to 2 pixel padding left to zero padding right to 4 pixel and border radius to 2 pixel let's add bottle left so border left to 2 pixel solid and let's copy the accent color from Tailwind config copy this and paste it right here let's save this and as you can see there is this accent color on the left now let's see uh how we can highlight the characters for that we have to use just slash let's go to the blog let's highlight this signs let's highlight this science word save this and let's check this one now as you can see in the inside the spawn element there is new attribute called Data Dash highlighted Dash characters so let's copy this attribute and add the styling now let's increase the opacity to do pairing to 2 pixel and Border Radius 2 2 pixel as well let's save this and as you can see it is highlighted now let's see what other features it has it has group highlighted characters by ID highlighting inline code it also has the titles let's add the title let's go to this let's add the title let's keep it as index dot HTML and let's save this now here is the title of this code block let's style this before that let's get its attribute which is right here data dash rehype dash pretty code title so let's go to the global.css file and let's style this set position to absolute right zero background color to the accent color set text color to White padding to 4 pixel from the top eight from the left and right font size to 1 Ram and border and start radius to 4 pixel let me show this to you so here is the title it is not exactly at the right position so let's open the code block element so in this div we have one uh data attribute called Data rehab critical fragment so let's add relative position to this attribute before this let's add the data attribute set position to relative let's save this now as you can see this title is inside the code block and it looks great now let's see what next we have the caption so let's style this as well go to the blog and add caption so this file contains HTML code let's save this here is the caption let's get the data attribute for this caption which is right here and let's style this set the position to Absolute top to 100 percent width to 100 as well text align Center font size 2. 1 and let's set its color to gray so it is 7 4 7 4 7 4 let's save this and looks much better that's it so this rehype pretty code has a lot of features that you can show such as highlight title you can change the language as well and show the line numbers and this caption as well so this is pretty good for your blog let's close this so I think uh this block part is almost completed let's see how we can create the table of content component now let's check this Toc component from this blog now in this table of contents we have different labels of this heading elements so this one is the H1 but this is the H2 now H2 is the subheading of this H1 so it is uh as the child of this H1 tag same for this now on click on this it will uh it will scroll the page to that certain heading because of this ID which is uh in this link now uh we are using the content layer and the structure of content layer is a bit different so we are going to use computed field to compute the whole table of contents and for that I found a really good solution from one of the blog so let me share that link with you right table of content from content layer and this one is the link which is by Yusuf and the solution is really great so let's implement this for now we don't require this blog let me close all these tabs now let's go to the content layer let's close all this open the content layer dot config.js file and right here after the reading time let's write the TOC let's keep its type to Json and let's change this resolve function let's make it async for now let's return true now let's uh check how this headings looks in the Raw format so if you check right here what if we stack headings so uh this uses the two hash that means this is the H2 element and this heading uses the three hash that means it should be the H3 element so from this whole raw data we have to extract such headings now there is a common pattern between these headings such as it can have hasher hashes space or new line characters Etc so for that we are going to construct the our regular expression so let me do that create const regular EXP and let's start with the slash first let's do this for the new line let me write the whole regular expression then I will explain each each and every part of that expression so let me explain this a regular expression now this slash it marks the beginning of the expression and slash n which matches the new line and now this bracket is the named capturing group named Flag where it matches the hash character and this one to six that means it specifies that there should be between 1 and 6 hash characters uh now same as this flag this is also another name capturing group called content at the DOT matches any character except the new line and plus specifies that there should be at least one or more characters so this is at the end of the exploration and in between this name capturing groups we have a slash S backslash s that matches one or more white space characters so let's see if this regular expression can grab this type of content so let me just copy it's from here up to this and let's go to the browser let me open a new tab and in the console first let's uh create one variable called post and paste all the strings now in the post as you can see here is the whole string now let's uh try to use the regular expression to grab this headings so let's use post dot match first let's declare the regular expiration paste it right here now let's write post dot match all sorry post dot match all and inside this function let's pass the regular expression so we got this iterator let's use the array let's use array Dot from this iterator and now we got array within two elements so first element contains the content that we got using this regular expression and that is this groups and in this group there is flag it has two hashes and in the content we got the content of the uh of the heading and in the next element we have three hashes inside this group and the content for the third H3 heading as well so this is how we will capture the groups for each heading and then we will decide the depth of this heading so let me close this Let's uh Define the headings array Dot from post dot body dot Raw dot match all with this regular expression and then we will use the map now inside this map we will deconstruct the groups from this array first let's uh get the flag value from the group dot flag now this question mark is an operator which checks if group exists and if it exists then it will check the flag value do the same for the content group and let's return first we will return the label so if there is flag then check the length of the flag if it is one then it should be the one label if the flag dot length is 2 then it should be two else it should be three so this will uh create the table of content for H1 H2 and H3 tags now for the text set the content and for this log let's use the GitHub Slugger to generate this log from the content for that we have to import it so import GitHub Slugger from GitHub Dash Slugger now to use this first let's define it right here right cons Slugger equal to new GitHub Slugger and let's create this log from this content so use Slugger dot Slug and pass the content now before that let's uh put a condition if there is content then create this log else it should be undefined so that's it it Returns the headings now instead of this post let's use the dock let's save this now we got an error it says group is not defined let's say it should be groups let's save this and here is the TOC component as you can see there are different heading with the label such as 2 3 2 3 1 Etc so let's uh see how we can render this Toc so open the block page we will use the details HTML tag now in this details let's use this summary to show the table of content heading after the summary let's use another list and let's uh map the blog dot doc dot map so here we are getting heading so let's get the heading now we will return the Ally element in this alloy element let's use the anchor tag in the anchor tag let's add one span and this one right heading dot text and in the href let's add the ID so add back text hash then use a currency sign and brackets to add heading dot slug let's save this now as you can see we have all the headings listed here let's go to this and it's working great uh now let's see how we can style this first let's add the class name to this details set border to one pixel order solid border dark set text to dark rounded to LG pairing two four keep it sticky and top to six Let's uh set max height to 80 VH overflow hidden and overflow y to Auto Also let's keep this table of content to open so in the details uh element just write open prop let's add class for the summary set text size to text LG font to semi bold capitalize and set cursor to pointer let's save this and it looks much better now for the UL let's add class name set margin top to 4 font two enter text to base now in the alignments let's add the key first write back text then hash then inside the braces right heading dot slug and add class name set py finding top and bottom to one and looks much better now let's uh use the data attribute to style uh different depth of this headings so just write data Dash label and write heading dot level let's add the class name now if data Dash label equal to 2 then set the padding left to 0 if data dash level 2 then set pairing top to two if data label are equal to 2 then set the Border top HD let's add border solid border Dash dark to 40. let's save this now as you can see uh it will uh create Parts between the uh whole uh headings so now if data label is three then set padding left to 4 let's save this now as you can see that is space on the left of this child label headings let's add more space up to six and display Flex items to Center and justify to start let's save this and it looks much better now let's see how we can add this dots let's put condition before the spawn element if heading Dot level is equal to 3 then add one span element else display null so inside the spawn just write Ampersand and PSP this will add one this will add one space and in the class name write flags with to 1 High 2 1 rounded to full and BG 2 dark set margin right to two let's save this and now it looks much great now let's uh underline this heading on Hover for that go to the spawn and class name on Hover set underline and this looks great so this blog page is completed now let's create the pages for the categories now uh same as the slash blog we will create the dynamic routes for the slash categories so for that uh go to the app folder and create one more folder called categories inside this category let's add one more folder called slug now in the slug let's create the page dot JS file so now let's create the const category page and here we will get the params which stands for the parameters and let's return the category name here it is parents dot slug so let's save this and click on this link fold export is not react component let's export this export default category page so here we have web development category now uh there is this space so let's check this out now if you see in this link there is a space in the category so we have to slugify this category as well so go to the blog page and here is the tag so go to the tag here we are using the link passed from the prop so we have to modify this link we can use slug from the GitHub Slugger and just pass the blog dot tags copy this paste here let's not paste here just keep it in the link so now it is web Dash development Let's uh check for the home component there is also space so we have to do this for the Home Cover section make sure you import this lug from the GitHub Dash Slugger and we have this in the log layout one log layout one let's paste this now in this Vlog there is also another tag right here let's change it as well let's open the log details let's change this and make sure you import the slug actually there is similar names so let's change this to log slug let's save this and it is working so let's click on this web Dash development it will give us the category name so let's see how to render the category name and all the list of categories along with the blogs go to the categories page.js file now here first let's get all the categories available so create one variable call all categories equal to an array that contains one category called all that will uh display all the blogs and let's get all the blogs all blogs dot filter so let's get individual blog and let's return a Blog right dot tags dot sum and for some tag first we will slugify the tag so just write cons logified equal to slug tag then if all categories does not include sluggify tag then we will push this slugify tag to this all categories array so all categories dot push this sluggified tag now if params Dot slug is all then return to for all the blogs so uh it will return it will filter all the blogs else return sluggified equal to parents dot slug so let me explain this again so uh we want to filter all the blogs as per the params.log and also we want to create the array for all the categories so here uh in all blogs first we will filter each blog and uh for each tag uh we will use this some function now uh for each tag we will uh first we will slugify this tag using the slug function and then we will see if this sluggify tag is already in the all categories Aries or not if it is not then we will push it and if the params.slug equal to all then let's return true else we will return sluggified equal to penance.log so let's say if the Penance dot slug is web development and slugified uh tag is also web development so it will filter all the blogs that has the web development tag so uh the process is same for all the uh tags except the all now for the all it will return true so it will display all blocks that's it so let's create an article tag and inside this article let's create one do this day will contain H1 tag with the params dot slug that represents the category name and after the H1 there is one spawn tag that will display the text called discover more categories and X1 your knowledge now after this do we will display all the categories so for that let's uh create one component called categories inside this blog folder create get a queries.js let's import this component right here and also pass the categories so pass the all categories as a prop now also create one more prop called active which you which will have the current slug make sure to import this let's deconstruct the categories and active so let's uh keep this device as it is inside this div uh we will render the category now let's create an individual component for the category as well same as we did for the tag so just copy this and inside the blog create one more component called category dot JS paste it instead of tag let's change its name to category that is uh one thing that we will add which is the active prop now let's uh add one class so now let's add one conditional class name so when active the background should be dark text should be light otherwise the background should be light and text should be dark remove the background from here and text color as well let's save this for now and inside the categories let's import it so let's map the categories dot map so we have category which will return this component first let's write the key then link use backticks slash get a curries slash cat then for the name pass the get and for the active now here we will check uh to match the current uh Slug and the this category now let's add the active let's change its name from active to let's just write current slug save it and let's change it here as well so let's uh compare so current slog it should be equal to sluggified category so if this matches it will change the style of the active category otherwise it will keep all the category as the same let's uh save this category is not defined let's define it so here are all the categories Let's uh change its style in the categories view let's add the class names set pairing left and right to 20 margin top 2. 10 border top to two text dark border bottom to two border solid and border color to dark let's set pairing top and bottom to four display Flex items start Flex wrap and font to medium set margin left and right to 10. let's save this and it looks better let's add The Styling for this category let's change this py2 to let's change the Border color to border Dash dark let's save this let's add margin M Dash 2 let's open the category pages and compare it looks great let's not capitalize and add the hash now it looks much better so as you can see here it is changing the URL let's add The Styling for this foreign set margin top to 12 display S Flex direction to column text Dash dark now for this blue let's set padding left and right to 10. let's set it to 32 display Flex Flex direction to column now for this H1 set margin top to six font to semi bold text to Phi XL let's save this and it looks great now for this Pawn element let's add margin top to 2 and set display to inline block now it looks much better Let's uh let's change the font weight from font semi bold to font Dash medium or let's just keep the font as it is font Dash normal now it looks much better now let's uh render this blogs as per the uh category name so after this category create one div and Let's do let's add the display to grid grid calls to to let's set it to three let's set grid rows to two set cap to 16 and set margin top to 24 set padding left and right to 32. now in here let's map the blocks so blogs.map blog and index return the article element and inside this article let's use the log layout 3 make sure you pass the blog in the article let's add the class name to call that spawn dash one call Dash sorry row Dash spawn dash one and set the position to relative also don't forget to add the key let's save this and is displaying all the blogs let's go to the productivity code quality CSS web development JavaScript and it looks much better now let's uh delete this block one so go to the content and there it is block dash one now it looks much better so the categories page is completed now let's create the about page now before we create about and contact page I want to uh show you something uh let's check this generate static params function from the next.js documentation now as mentioned here the general static params function can be used in combination with Dynamic route or segments to statically generate routes at a build time instead of ondemand at request time so uh in our blog we have static data so there is no need to generate any page on demand we can statically generate all these routes so it is better to use this function so let's copy this and go to the categories page and before this page let's paste this function now uh this function generates uh different routes as per this log that you pass right here so let's remove this now let's create one more one array called categories and one array called paths now path will have one params with slug all now from the all blogs Let's uh map each blog now for each block let's put a condition if block dot is published is true then we will check the uh tags for the blogs so write blog dot text Dot map for each tag let's slugify the tag now here we will use the Slugger so let me just open its documentation now instead of using slug directly we should use uh like this because this way uh the Slugger will uh keep an eye on each slug so uh there is no same slug generated so let's uh use this import the GitHub Slugger then we will use Slugger Dot slug inside this log let's pass the tag now uh we will check if categories does not include the sluggify tag if it does not include it and let's push it now this logic is almost same as we done here but instead we we will return the paths from this function so paths dot push arms slug sluggified let's replace this to slug all and instead of this let's return the paths so this will eventually generate routes for each slug such as all web development Etc so if you have a static data in your website then it is better to use the generic generator setting params function to generate the all the roots at a build time so it will load the website much more faster so let's do the same uh for the blogs as well let's copy this function open the blogs page and here let's paste it now here we just have to use this inside the return paste this and inside of fine we will use the map function copy this and here we will return the slug with the this value now in the categories actually we should just pass the slug not the paramps so let's remove this and this as well so let's save this now we are on the development server so for the development server it will always create the ondemand request but whenever we build our website it will create all the routes and then sell the website more faster that's it now let's create the about page open the app folder create one more folder called the about and inside this about folder create one file called page dot JS let's create the function export default function called about this will return let's use the fragments about details now in this about page first uh let's Design This cover page so and the components folder create one more folder called about here let's create one file called about cover section dot Js let's import this make sure to import this one this component let's add a section element set class names set with to full and height to 75 VH set border Dash bottom two powder solid and Border color to dark set display to flex Flex direction to column let's skip Row for the desktop size and set items to Center so I'll justify to Center as well set text color to text Dash dark now after this section element Let's uh add one div this day will contain one image let's use the SRC Alt now for this image I have generated this using the binge search and daily 2 so you can generate a different image you like for now let's use this go to the project files and here is the character dot PNG copy this paste it in the public folder let me import this import profile character from slash public slash character dot PNG let's use this on the alt just write your name foreign add width to full height to pull object to contain object position to Center now in this div let's add a class now set the width to 1 by 2. H2 full set border Dash right dash 2 model that's solid border Dash dark display to flex and justify to Center let's save this there is some issue in the Imports let's directly import it go to the public slash character dot PNG and it looks nice now after this do let's add the text content create one more div and h2 tag and next is the paragraph tag open the web website content copy this for the H2 and this paragraph for the paragraph tag now in this new let's add class name set width to 1 by 2 let's play Flags Flex direction to column text to left items to start and justify to Center set padding left and right to 16. now for the H2 let's set font to bold capitalize set text size to text Dash 6xl now in the paragraph tag add font way to medium capitalize and set margin top to 4 and text to base let's check the width again here it is 1 by 2 and here is the typo let's save this and it looks better now let's add the skills for that let's create one component inside this about folder called skills dot Js let's import the skills now first let's get the skill list from this website content.txt file copy this paste it right here now let's use the section add class name set width to full Flex Direction 2 Flex Dash column padding to 20 modern Dash bottom Dash 2 order Dash solid border Dash dark and text Dash dark as well let's add one spawn tag that's right I'm comfortable in let's add class name set font to semi bold text to 4 XL text color to text accent after this one let's use the another list now there's another list let's add the class name display to flex Flex wrap margin top to eight justify to start now here we will map this skills from the skills list skill list dot map get the item and index so let's return the Ally element inside this all element right item let's add the class names font to say my bold display to inline block capitalize and set text size to text Dash to excel set padding top and bottom two let's set it to Phi and pairing left and right too 12. set border to order Dash solid and border Dash dark set rounded margin right dash six and margin bottom dash six as well and on Hover let's scale it to one zero five add transition all is and duration to 200 and add cursor Dash pointer let's save this Also let's add the key let's save this let's add more padding on left and right so we have adding two let's keep it 12. and now it looks much better after this skills let's write this message open the about page after the skills let's add H2 and go to the website content copy this paste here and instead of this here let's add a link which sends the user to slash contact let's add the class name set margin top to eight onto semi bold text to to excel self start and not in the center margin left and right do 20 text Dash dark that's it now for the link let's add the class name set the underline and line offset two two let's save this and it looks great there is no underline let's add the important tag and here it is now this looks much better so the about Pages completed we will add this after creating the contact page so let's open the contact page right now we don't have this page so let's uh go to the app create one folder called Contact and add the page dot JS file let's create one function write export default function contact return one section that says the contact here it is now in this contact in the first view we will render the Lottie animation and the second deal we'll use the contact form so let's add the class name to this section set width to full H2 Auto let's keep it to 75 viewport height set border Dash bottom Dash 2 2 border Dash solid order Dash dark set display to Flags set Flags direction to flex Dash row items to Center justify to Center as well set text color to text Dash dark let's save this and here we have audio animation and contact form so first let's create one component for that in the components folder create one more folder called Contact and here let's create Lottie animation dot JS file now before this let me give you the link if you open the website content.txt file there is this link for the Lottie animation that I have used so open this link now I have downloaded this dot Lottie it is a compressed format that works with the dollar players so make sure you download it from here then we are going to use this Dot Low T slash react dash player so let's open it as well go to this GitHub repo now click on this let's copy this code and paste it right here let's change this app to Lottie animation now uh once you download the animation.json file uh send it to the public folder so here it is copy this and send it to the public folder so on slash it can access this Lottie file so just copy the name thank you and paste after the slash let's remove the controls we won't be needing that let's remove this div as well save this let's import this let's add some class name set the display to inline block with two Let's uh set it to 2 by 5 . and set height to full border let's write to to model solid and Border color to dark let's save this so uh for this Lottie animation we have to use the use Clan directive let's save this and it looks great now for the second div let's add the class name set width to full set width to three by five display Flex Flex direction to column items to start and justify to Center set padding left and right to 16 and padding bottom to 8. first let's uh add the H2 and write let's connect set font to fold capitalize it text size to 4XL and let's save this looks great now let's create the form component now for this form component we'll be needing one text email phone number and one text area so let's close all of this and open the react hook form.com go to the tools open the form Builder and here instead of email Let's uh write the name type select text and update let's add one more for the email set its type to email let's create let's create one more for the telephone you can just write phone number and set its type to tell create now for the last one let's create uh for the text area let's name it as a project details and select the text area and click on the create now let's copy this code and create the contact form component inside this contact folder contact form dot Js and paste the code now here we are going to use this use form hook so we have to convert this component into a client component so write use client directive and also change this name to contact form let's save this and import this contact form right here after the h2 tag so here is the form let's style this foreign let's write all the text so before the first input right hello my name is then keep the one space and before the second input right and I want to discuss a potential yeah project you can email me at so this is the email and before the phone number right or reach out to me on this phone number then before the text area right here are some details about my project that's it let's save this now let's style this input now inside this form let's add the class name set margin top to 12. text size to excel font to medium and leading to relaxed and set font to font enter now for this first input let's add the class name set outline to none border to zero padding to 0 as well set margin left and right to on Focus Let's uh keep ring to zero and for the placeholder set text to Center let's save this now this looks much better let's increase the placeholder text size set text to LG then add border bottom watercolor to border Dash Gray let's save this and it looks great now on focus it is converting the color to Blue so let's change this set Focus order Dash Gray and background to transparent let's copy this class name and add in the email as well as the phone number and in the text area let's save this now we have to change some classes for the text area let's add rows and keep it to three set width to full and after this project add one VR now this is much better Let's uh add the placeholder that says my project is about Dot let's remove the text Dash Center for the placeholder let's change the placeholder for the name as well your name you're at email thank you your phone and let's save this and this looks much better now let's uh style this submit button and the class name let's add margin top to eight font wait to font Dash medium display to inline block capitalize it text size to let's keep it to excel padding top and bottom two three padding left and right two uh let's skip it border to two powder solid and Border color to dark let's keep it rounded and set cursor to pointer that's it let's change its value to send request instead of submit foreign so after the type add value and write send request now this looks much better now let's create this inside role that goes from right to left now this inside rule uh does not change even though I change the about page but it gives the animation State the same because uh it is uh shared by the about and contact page so let's see how we can leverage the layout functionality and share share this same component in both of these pages so that it will not rerender whenever we change this page so for that let's check out the next JS groups route groups now let's scroll down as mentioned here a raw group can be created by wrapping folders name in parenthesis so uh as mentioned here even though routes inside marketing and Shop share the same URL hierarchy you can create a different layout for each group by adding layout.js file inside their folders now here this layout.js file is shared with account and card pages so let's do something similar like this first let's close this and inside this app folder let's create one more folder called about make sure you use the parenthesis and in this group we will add the about and move this contact as well and inside this about let's create one file called layout dot chess now let's export default function called about layout make sure you don't use a root layout because root layout is uh for the app folder only now this layout will have the children prop ER let's return main element here we will display the insights and then that is this children and the main let's add the class name set with to full display Flex direction to column items two Center and justify space between save this and check this out as you can see here that is insights right here and in this about page as well so let's create this role for that let's create one more component inside this about called insight row dot Js let's import this right here now let's go to the website content copy this insights and paste it inside the layout let's pass this and the inside role component now from this component let's deconstruct it now in this insights you can add any information about yourself such as years of experience uh multiple number of clients and any achievements that you have achieved in recent years and this now in this do let's add the class name set width to full background to accent set text to light and white space too no rap set overflow to Hidden and that's it after this do let's create another view this div will contain all the text set width to full padding top and bottom to three Flex display to flex items Center justify to Center as well and capitalize set font weight to semi bold and tracking to wider here the dragging that means lattice spacing between the letters set text to base here let's map the insights so inside start map text return one live and write the text also with the text add one span and in this one we will add the pipe symbol add the class name set button left and right 2 4 that's it let's save this and this looks great now let's uh animate this for animation we can customize the keyframes in the tailwind.config file so go to the tailwind.config.js file now after this font family let's add animation and create one animation called roll we will use roll keyframes for 24 seconds linear manner and for finite time now let's uh add the keyframe the name of the keyframe is row now for the zero percent Let's uh use transform translate X to 100 percent copy this and paste it right here and for the hundred percent let's transform it to minus 100 percent let's save this and use this animation uh to use that animation you just have to write animate and name of the animation which is roll let's save this and here it is you can see that whenever I change the page but uh inside role is same so this is a really great benefit of next Js you don't need to rerender every component let me close all this website and that's it uh our website is almost completed for the desktop version let's change the index of this blog go to the Home Cover section change from 1 to 0 save this and in the featured post change this to one two three save this and in recent post change from 4 to 10. now uh we have to do this because we have removed the block dash one let's add the key right here let's save this now let's see how we can store the total view numbers for each blog now for this we are going to use the supervis now if you don't know Super Bass it's okay uh you don't have to learn more about it because we are going to use only a simple function and one table to show The View count so let's go to the supervised.com and create your account and login so after the login you should see a screen like this now let's create one project by clicking on this new project and if you don't have any organization create organization let's name it as code bugs now here you can add the project name let's write developer log now for the password let's generate the password let's just copy this and store it somewhere safe for the region I'm in India so I will select South Asia and create new project now this will take few seconds to initialize the project in the meantime you can copy this and on public key now this key will be used to authenticate each and every request from your application to the super base and if you don't want to copy it right now we can copy it later from the project settings and the project is initiated so let's uh go to this table editor I think there is some problem with the super base for this particular page Let's ignore that and create a new table now let's write the name of the table let's write fuse the description you can just say this table contains log views uh let's skip this check and these are the columns uh keep the ID and created at as it is add one column let's name it as slug and for the data type let's select text let's keep it as null and let's add another column write count and here we will store the total counts and let's keep its type to integer 4. and let's save this so here is our table now let's go to the SQL editor now here we will create one function in postgresql so before that we have to Grant the permission so that we can create such a function and different schema so for that uh just write Grant Grant create on schema public to Anon that's it and let's run this and it is Success so after this grant access we can create the function so let's write create or replace function called increment increment is the name of the function let's write it now we will pass the slug uh the last part of the URL for any blog into this function so uh in the table we will store that Slug and we will increment the counter so in the argument type slug underscore text and type of this argument will be text and this function will returns nothing since uh we don't want anything from this function this function should only increment the number in the views table and write void as dollar sign so this line declares the function named increment that takes a single parameter that is this log text of type tags and returns void so the function definition starts with this double currency sign indicating the beginning of a block of postgresql now press enter and let's declare one variable called view underscore ID and type of the variable is integer now this line declares a local variable named view ID of type integer and let's begin now this begin marks the beginning of the function's main block let's write select ID into view underscore ID variable from views table where slug uh remember that column we have defined it is a slug equal to slug text and let's limit it to one let me explain this line so uh this statement retries the ID from views table where the slug is equal to the slug text so let's say uh there is a Blog which has a slug which is ABCD and it has five counts so uh let's say if you want to increment that view for that particular block so we'll call increment by passing the ABCD as a slug text and now this line will first compare if there is any blog available with the slug ABCD and if there is then it will get that ID of that particular row and store it into the view underscore ID variable now let's add a condition so if view underscore ID is not null then we will update the view count so write update view stable and set count column to count Plus 1. now where ID of that row it should be same as the view underscore ID so uh let me summarize this so first we have declared this variable and we will select the ID of that row which has this slug for any particular Blog then if there is ID available that means the row is available in the table then we will update at that particular row so we have write update views table where set column named count to count plus 1 and where ID is equal to view underscore ID so this this is how we will update the particular row else now code runs into the as block because view ID is null that means there is no row available with this particular particular blog slug so for that we will create new row so write insert into views table for the slug and count column and we will add the values the past slug text and now for the count column let's add one that's it let's end the if statement so n if and let's end this main block of this function and let's end the function definition and let's write language PL ql now uh this last line that marks the end of this function definition block and specifies that this function is written in the postgresql language so let's uh format this now let's run this function and it has some error let's add semicolon in here let's add semicolon here as well let's run this and we have a success so this will create a one function called increment and you can see that in here click on this database and if you go to these functions so we have this increment function and you can edit function or check the API Docs so let's uh check if this function works or not go to the SQL editor let me create a new query and to run any function you have to write select function name which is increment and here let's write slug ABCD let me use single quotes let's run this and we have no result but let's check the table and as you can see here there is a one row with the slug ABCD and count to one now let's run this function again let's keep the slug to ABCD let's run this Let's uh run this query again and let's uh run it for one more time let's open the table and as you can see account is increasing so let's see how we can connect the super base to our blog and you can also refer to this uh API Docs you can click on this views table and this is how you can select edit update or delete any row and here is the function now this is how we can call the function so let's open the vs code let me close everything now if you open this dot ene dot example you will see there are two way variables that we are going to use one is the supervised URL and one is the Anon key so let's copy this or just change it's a name from Envy dot example to EnV dot local and let's add uh values to this variables go to the settings and click on this API now here is the project URL so let's copy this and paste it right here let's copy this and on public keys and paste it right here so let's save this now open the SRC components folder and go to the blog and let's create one more component called view counter dot Js let's write one save this and go to the blog details and instead of this 10 views let's add the view counter let's save this you can say it says one so first uh we are going to update this uh counts on the client side so let's make it a client component for that let's add use client directive now here to connect the super base we are going to use super bass slash auth helper slash uh Dash nextges so if you open the package.json file and here is the library that we are going to use so first uh let's uh create the Super Bass instance for that create const super base equal to create client component client make sure you import that from this Library now uh here we are going to get slow of the blog then let's uh add one more which says no count so if you don't want to increment the account uh let's say you want to display this view counter component in the home page or to show the total account or total views of any Blog then you just have to pass no count equal to false so that it does not increment the counter whenever it reloads and let's add one more prop called show count and let's keep it to true Let's uh add one more state so just write you state make sure to import that from the react let's name it as views for now let's skip it to zero now uh if show count is true then we will return this else we will return null now in this do let's render this dates called views and write views let's save this and here it is so for now there is zero views now let's uh create one use effect make sure you import that from the react now in this use effect let's create one function call const increment View let's make it async now we are creating this function inside this use effect because we are not going to use this function anywhere out outside of this use effect so let's first write the try block inside this try block let's get the code to call the function let's open this API Docs click on this increment function and let's copy this code and paste it right here now after this try block let's add catch pass the error and we will use cons console dot error and let's write an error occurred while incrementing The View count let's pass the error now let me explain this code so this will uh call this function increment and if it passes the slug underscore text which in this case it is Slug and then if this function returns anything that it will store into data and if there is an error then it will store this that message into this variable so if uh there is any error we will log it so if there is any error let's use console.error and let's write error incrementing view count inside try block we don't need this data so let's remove it let's copy this function and if no count is true so just write exclamation mark right no count and then we will call this function and in this use effect dependency let's write slug and no count uh before we save that let's go to the blog details and pass the slug so here is the blogs log let's save this and save this as well let's reload this and we are getting the error it says incrementing you count inside try block new row violets row level security policy for the table views so for that we have to add a different policy in this database so go to this Authentication and click on this policies so we have no policies created for this views table let's create the new policy click on this get started quickly now this is the template to enable read access to everyone let's use this template now uh we are going to enable the read access not for all users but for Anon users that uses that public key that we have stored in the EnV variable so for the Target rules let's select Anon and let's keep this expression to true let's review this looks great click on the save policy now let's create another policy to edit or insert select this enable insert use this template now enable insert for and on users only instead of authenticated select and on and review let's save this now let's uh add one more policy for the update click here let's use this template and let's change it to and on users let's select the Anon now let's remove this expression and just write true and true let's review this and save the policy so we have three policy insert read and update for all and on users Let's uh refresh this let's refresh this again let's check the table and here it is now as you can see here we have two counts for this blog and here is here is the slug now let's try for the another blog let's click on this and as you can see here it has uh created one row for the JS Frameworks comparison blog now let's see how we can get this views so go to the API Docs and click on the views table now let's see how we can get the view count so this is the code let's create a almost same use effect let's change this function name to get views and instead of that let's copy this so uh here we are first selecting the table from table let's select the count column now let's use uh another condition and after that we will use dot match let's match the slug column with the given slug value if there is a match let's return the single row and once we get this views Let's uh set this date so right side views and pass the views now before this first let's log it let's remove this views and keep the data let's log the data save this and instead of calling this let's call get views we don't need this condition and no count as well let's save this now here is the data we are getting four count so let's set the state if there is data then set data dot count otherwise set 0. let's remove this log save this and as you can see here it says four views let me reload this and it says five views so it is working great now let me close this tab so this is how you can create a view counter and store its value to the supervised you can use supervised to add different functionalities as well now let's learn one of the important part of this blog that is the SEO now before that let's open the next.js docs make sure you are in the app router and go to the optimization click on the metadata now there are two ways by which you can add the SEO a one is by defining this metadata object and in this object you can add different information such as title description Etc and you can add this metadata in the layout.js file as well so that this SEO will be shared across all the pages all the routes and next is the dynamic metadata that uses the generate metadata function so uh this function is uh usable for the dynamic Pages such as blogs and categories for blogs and categories we are not creating Pages individually for each and every blog instead we are using the page.js file and we are using the dynamic routes so for that we are going to use the generate metadata function so let's add this metadata constant foreign let me close this now go to the app directory and open the layout.js file well there is already one constant called metadata so let's uh add the required SEO inside this metadata so that it will be shared across all the routes now let's edit this metadata so first let's add the URL now before we add any data into this metadata object first let's create one file called site metadata so go to the utils and create one file called site meta data dot JS now in this file we will create one constant called site metadata here we will add all the required data that that are important for our blog you can go to the project files and open the site metadata.js and just copy this and paste it right here now in the side method data we have title of this blog other Adder title uh description language theme site URL uh for me it is this URL that I have hosted on the virtual so you can change this whenever you host your blog we have a logo social Banner now this logo and social winner you should have uh both of this PNG files inside the public directory so in the project files let's copy the social banner.png and this is just a screenshot of the website and paste it inside the public folder now I already have this profile Dash image so let me copy this and paste it inside the public directory again let me change its name to logo let me close all this and then we have email Social Links and local so we are going to use this site metadata for the SEO let's close this open the layout now let me open the next.js docs click on the static metadata object so here are all the fields that we can add into this metadata so first let's add the metadata base now as mentioned here it is an option to set the base URL so let's copy this and paste it right here now inside this we will add the URL first import the site metadata object then write site URL make sure to import that it should not be from the project file so let me import this again from YouTube's let's save this now let's open the title so here is the title you can uh add the title as simply as that or we can use the template so uh click on the template as you can see uh template has percentage s for the string and Acme is the website's name so uh whenever we pass let's say in the blog route we will write the blog title and at the end it will add this website's name so let's use this template copy this and instead of this let's use the template and default in the default let's get this site metadata Dot title and in the template as well copy this and instead of Acme write the currency symbol and parenthesis and paste this make sure uh these are the backticks so in different routes whenever we pass the title it will be right here and after that title there will be a site title let's save this and we load this now as you can see here we have the site title now after this we will add the description let's use the site metadata again dot description now let's add the open graph images so that it will help social media to preview our blog let's click on this open graph let's copy this and paste it right here now in this open graph let's add site metadata dot title in this title and for the description as well for the URL we will use this now for the site name let's keep the title now for this images let's just pass site metadata dot social Banner which you can see that is this URL let's keep local a as it is and type 2 as it is as well now let's go to the robots let's copy this paste it right here now uh it says false but if you write true it will it will enable your blog to be indexed by other search engines and this is for the Google board let's delete this you can add or update any settings you want from this and let's scroll down the viewport is automatically set with the following default value so we don't have to add this let's add Twitter copy this and paste it after this robots for the title we will use site metadata dot title let's keep the card type 2 as it is let's remove the description site ID creator Creator ID and for the image we will use social Banner let's save this and let's open this now inside the inspect elements open the head now you will see all the metadata that we have added now here is the OG URL site name local image type and Twitter card title description and here is the description of this page and title as well so this metadata will be common across all the routes so this is completed now let's see how we can add the metadata for dynamic routes let's go to the documentation and click on this generate metadata function let's just copy this and let me close all this open the blog page after generate generate static params let's paste this and here we will add all the SEO related to the blog so first let's get the data for individual blog we can copy this and paste it inside this function so this is how we will get the block data now this function will have params object so that it can access this log and all other information and let's say if there is no blog return nothing now first uh let's add the log dot title then the description as well now let's uh copy the opening graph let's go to the open graph let's copy this and paste it right here now for the title let's use block Dot title and description as well for the URL we will use site metadata make sure to import that from the utils Plus add slash blogs Plus add params Dot slug that's it or you can just write blog dot URL that we are getting from here and this is the URL but this will start from the slash blogs so we have to eventually add the site metadata Dot site URL oops it should be here all right now for the site name let's add the site metadata Dot title now let's add local and type right here and type set article now for the article there is a more Fields such as published time so let's calculate this publish time and date create one variable called const published at and let's use new date pass the blog Dot published at and let's convert this to to ISO string let's do the same for the updated as well let's change this name to modified add and here change it to updated at r let's just write blog dot date do we have that field let me check this once again we have blog dot image author text body we don't have a date instead we can use this publish date if there is no updated add date so let's copy this paste it right here and next field is the modified time let's copy this and paste it right here now there is one more field for the image so let's create uh one variable to store the image list so in this array first pass the site metadata Dot social Banner and let's check if this Blog has the cover image so okay let's put a condition says if log dot image then let's add it to the image list image list equal to first we will check the type of blog dot image Dot file path So eventually we are checking this it should be string file path if it is string and let's add the this image URL so for that we will use site metadata Dot site URL Plus log dot image dot file path and let's replace uh this dot dot slash public dot replace dot dot slash public Within empty string so this will add the log image else let's just set the image list to blog dot image now in this images we have to pass the URLs of each image so let's create one more variable called OG images equal to image list dot map this will give us the image and let's return the URL so return one object write URL and let's add a condition if this image includes http then return the image as will create this URL with using site metadata Dot site URL plus the image actually we don't have to do this condition but still it is better to be safe than sorry let's copy this and instead of this array let's add the OG images now let's add the author so for the author let's create one variable called authors equal to let's say if block has the author then return one added and add block dot author as we will use the author from the site metadata dot author in our case it is code bugs let's copy this and add one more field called authors if authors dot length is greater than zero it should be authors and then others else add site metadata dot author that's it now let's add the Twitter card go to the layout and let's copy this and paste it right here we have card and state outside metadata.title at blog dot title and let's add the discussion as well now for the images let's add image list uh this OG images let's save this and let's check it out let's open this blog now as you can see on this tab it has the title of the blog let's open the elements open the head and here are all the meta tags here is the publish date and modified date and here is the published time and modified Time author let's check if it has the OG image and here is the Twitter image so first we have the site URL from the site metadata then slash blog slash this image which is the cover image of this blog so everything looks great let me close this let's add SEO for this categories page let's open the categories page.js let's copy this and paste it right after the generate static params let's remove this we don't need this as well let's move everything accept title and description if you want different images for the social media you can just modify this for the title let's use backdicks and right currency symbol and parenthesis let's add the category name which is parents dot slug then just write vlogs and in the description let's add back text let's write learn more about let's add params dot slug that is the category name learn more about XYZ category through our collection of expert blogs and tutorials let's save this and here is the category name and blogs now let's remove this Dash so dot slug dot replace all replace steel Dash with once space let's save this let's reload it again and actually I should do this and the title and it looks much better now uh for the all category this does not look much better for the description now as mentioned it says learn more about all through our collection so let's add one condition here let's say if firearm starts lug equal to all then just write web development else let's pass the category name that is params Dot slug so let's save this and now it says learn more about web development through our collection of of expert blogs and tutorials now this looks much better now let's uh add the metadata for the contact and about page let's open the contact page open the layout let's just copy this now in this contact page we don't need to use the generate metadata function because this is not dynamic let me remove this Twitter open graph and this title as well let's remove this now in the title let's just write contact me and in the description let's just write this contact me through this form are email me at Let's uh just write your email instead of this let's use backdicks paste this and let's get the email from site metadata which is right here so just write site metadata let's import this from the utils DOT email that's it let's save this copy this and open the about page and paste it right here or the title let's just use about me here are some details about myself that's it let's save this and check it out go to the contact and here is the title and in the description it says contact me through this form or the email email me at uh codebox27 gmail.com let's open the about and this looks great let me change this like contact me through this through the form available on this page or email me at this and much better let me close all this now our website is almost completed now for this social media links let's get the URL from the site metadata so open the header and here are all the URLs so instead of this open curly braces import site metadata from utils Dot first let's write LinkedIn then there is Twitter then we have GitHub and retriever so if you open the site metadata here are all the social media links let's copy this and do the same for the footer links so instead of example let's replace this with this change this to Twitter GitHub and triple let's save this we should import the site metadata from utils and this is pointing to the right URL all right now let's implement the theme switcher button let's go to the components folder and create one folder called hooks and let's start creating the use theme switch hook right use then switch make sure to add use keyword before you create any react hooks let's write choose Clan directive and let's export one function called use theme switch and this function first let's uh get the preferred dark query so let's write prefer dark query or we can also say preference theme or something like that so this is one of the median queries that prefers color schema to dark we will use this media query if there are no user preference available and we will use the local storage to store the theme so for that just write storage key and set it to Tim that's it now let's create a function to toggle the theme so const toggle theme let's pass the theme if theme is equal to equal to dark then we will add the dark class in the HTML so just write document Dot document element which is the HTML and let's add dot class list dot add and add the dark class now else we will remove this dark class so just change this add to remove now after that let's uh add the theme in the local storage so just writing window dot local storage dot set item storage key that is the theme and for the value use the past theme so after this function let's initialize the theme so let's uh create one function that check if there is any user preference or not so const get user preference so in this function pause let's create one variable called user pref and first let's uh get the theme from the local storage so just write window dot local storage dot get item and pass the storage key now if there is something in the local storage so that means the user has some preference then return the user preference it can be dark or light as let's return the system preference so for that we are going to use this media query so just write window dot match media and let's add this query dot matches if this query uh that says prefers color a schema to Dart that means the system uh preferred color schema is dark then we will return the Target also we will return the light now after this functions let's initialize one use State make sure to import that from the react let's name it as a mode you can also set its name to theme let's set this to dark now let's use both of this function in an use effect so Let's uh import this from react okay now in this use effect first let's get the media query we will use this media query to check the system preference right match media and copy this query and paste it right here now after that let's create one function called handle change and let's get the user preference using this function copy this let's write one variable called new mode this variable will store the user preference so after that let's uh set this mode pass the new mode and after this let's toggle the theme let's copy this new mode right here and let's call this function so now whenever this page reloads it will run this use effect and first it will run this function and get the preference of the user then it will set the mode and toggle the theme as well now after that when the page is already loaded and let's say user click on the theme switch button then we have to detect that change and make a change in the theme as well so for that we will add one event listener on this query so just write media query dot add event listener write change on any change we will call the handle change function so that's it now let's uh close this event listener on return so right media query let's just copy this paste it right here and just add remove event listener let's remove this after this user file let's return the mode and set mode function let's save this and let's use this hook inside the header now we are going to use this user in this header so we have to make it as a client component so let's use mode and set mode from the use sim switch hook make sure to import it now in this button let's create one function called on click on click on this button Let's uh use a set mode function so if mode is equal to the current mode is equal to light then set the value to Dart I'll skip the value to light that's it let's save this and test this hook let me click on this actually let's go to the layout and let's add uh one class for the dark mode click on the dark set the bg2 DOT let's save this and as you can see it is working great let me click again and it is not working let's check the hook so we have on use effect uh when the page reloads but we don't have anything that handles the change in the mode state so let's create one more use effect now in this use effect this will run whenever any change happens in the mode and calls the toggle theme function by passing the value of this mode let's save this now let's go to the Tailwind config here we have to add the dark mode let's open Tailwind CSS click on the dark mode and here it is now we have to set this configuration right here let's save this and check this and it's working great let's reload it it is uh changing from light to dark so that is not good now let's scroll down and we have to add the script on the page load so let's copy this go to the layout and before the header and inside this body let's use the script tag to add the script make sure you import that from the next slide script Let's uh add one curly braces and Matrix and add the script now it will check if the theme is dark and that is theme in or that is theme in local storage and mesh media query and if this all matches then it will add the dark class as it will remove the dark class now this script is necessary because whenever we reload the page this should run and check the local storage before it loads all the elements so let me just modify this let's just write local storage.get item theme and it should be dark let's add one more single code let's let's save this and we format it and it looks great now let's uh make this website responsive and add the dark dark class whenever required first let's start with the logo thank you now here it is text Dash dog now for the dark set text to light let's save this and this looks much better let's change the Border dark to border light for the Dark theme change border to light let's save this and much better thank you let's decrease the font weight for this code books for the dark set font weight to semi bold and looks great let's make it responsive now we are going to use the minimum width query if you search the responsive design here it is now this Tailwind use minimum width for the SM it is 640 and for the 2XL it is a 1536 pixel let's use all this now in the logo Let's uh decrease the width to width dash 12 for the medium screen so just write MD set with 212.