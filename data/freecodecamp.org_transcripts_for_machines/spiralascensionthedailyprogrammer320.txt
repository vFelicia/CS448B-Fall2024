Hey freeCodeCamp and welcome to another The Daily Programmer webseries video and in this video We're going to talk about a problem called spiral ascension which is number 320. So let's go ahead and look at the problem and read it on the subreddit alright. So this is the problem that we're going to be solving in this video. It's challenge number 320 it's called spiral ascension and I'll go ahead and just read it off, it says the user enters a number. Make a spiral that begins with 1 and starts from the top left going towards the right and ends with a square of that number. So some examples they give you is a 5 and if you see here you have a 2d a grid or 2D array where you have it going from 1 to 5 on the top row and it just clockwise keeps counting up until you reach the last number which is n times n 25 and then again another challenge and input is 4 where you just print out this grid down here. So that's basically the problem that we're trying to solve it's super straightforward given one number print out a grid that's n by n which follows us like fashion, right? So the hard part is trying to mimic that or how do you kind of simulate that in the computer. So again let's go ahead and define this problem on the whiteboard before we break it down with my solution Ok so in this problem, you're given an n and using that n you're supposed to build up an n by n matrix or grid. In this case we'll just say n is equal to 3. So if n is provided and it's 3 we need to build a 3 by 3 grid and then the goal is to print out a matrix with spirals in this fashion. So if you notice that the center number is just n squared and your goal is to print out starting at one going in a clockwise manner until you reach the center. All right, so now that we understand the problem that we're trying to solve let's try to work it out where n is equal to 3. So a few takeaways is; if n is equal to 3 we know that we're going to keep putting values until we reach the final value of n squared which is 9 right. So we know that in our code we could just do some type of loop and loop until our variable, so for instance, x is created a nine because nine is the last element we're going to place. So that's one takeaway that we can kind of get from this problem Another takeaway is we need to start in the top left corner so if we were to represent the rows and the columns as integers we know that the top left corner is going to be zero zero so we can go ahead and just place the first value, which is 1, in that top left corner. Now the next part that you kind of have to realize is you need to set some type of direction so each iteration we're going to be moving in a certain direction either to the right, down, left or up. So in this case, we're going to represent that with a positive or negative 1 and using the variables d row or d column. So for example if d row is equal to 1 that means we need to move in a down direction or if d row is 0 that means we don't move up or down and instead if d column was set to 1 that means we need to move in the positive right direction, so d row and d column are the variables we're going to use that kind of figure out the direction in which we're going to move and then also when we get to certain spots we're going to move the direction in a clockwise manner. And if finally row and column is the particular spot in the matrix that we're at that current iteration. So working through this let's go ahead and we put the first value of 1 in the row 0 column 0 And then we need to check to see if the direction we're about to move has an element or slot that we can move to so if we do row plus d row which is 0 and then column plus d column which makes column equal to 1, we say is there an element here like is this out of bounds or have we already put something there? And if so we need to go ahead and change direction. But in this case none of that is true there is a blank slot there so we can move in that direction. So we can just go ahead and increment the value of x to 2 and place that 2 in whatever row and column element that we're at that current part of the iteration. Alright, so now we just do that again, right? We check if we were to add d column to column and d row to row, would that put us in bounds and in fact it would give us an element that hasn't been seen yet? So we can go ahead and do that same operation where we increment x. We increment column by adding d column to it. So now, we're at 0,2 and we can put a 3 there Now for this third iteration or the next iteration, if we were to move to 0,3 we'd be out of bounds right. So we know that we need to move in a 90 degree clockwise fashion to go down now. So one thing to take away is to kind of switch directions, we can just swap the values of d row and d column right because we need to go down positive 1 which means that d row will just become whatever d column is and then d column will just become whatever d row was and we can negate it and I'll go over that in a second when we get down to going left. So again, we do the same process where we add a d row to row which gives us a 1 here we go ahead and increment x we're at 1,2 place the value increment x we're at 2,2 again and place the value and then if we were to move in the same direction one more time we'd go out of bounds which means we need to do that same operation where we switch these. So d row becomes 0 which would become the value of whatever d column was d column is going to be equal to what d row was which is 1 but then negate it which allows us to go left. So then in this case when we add d column to column this will become 1 which puts us at 6, same process, this becomes 0 this becomes 7 and again if we're to move in the negative d direction we go out of bounds, so we need to swap these again so zero becomes negative 1, negative 1 will come 0 which if you look at this that means that we're going to be going up again. We can increment the 7 here to an 8 add d row to row to make this a 1 instead of 2 and now we check if the next element we're going to go to is already existing. We again just do the whole swapping mechanism, so this will become positive 1 this will become a zero increment this to a 9 and add d column to column so we're left with 1,1 and we built up our grid. And this same process will work for bigger and bigger grids as long as you just keep checking if you're about to go out of bounds or if you're about to go to a slot that already has a value. We just go ahead and swap d row and d column and negate d column add it to row and column, place the value and then increment x by 1. Alright, so that's the solution on the whiteboard let's go ahead and implement this in Javascript. All right so start off, let's go ahead and create a function called create grid which is going to take one parameter called n which is going to be how big are n by n ascension grid should be. And I'll go ahead and say const grid is equal to an empty array, and then return that down here and this will be the array or grid that we're trying to build up. And then down here I'll go ahead and console.log create grid of 5 so we can kind of work towards a solution using n of 5. So the first step is we need to create a n by n blank grid or array which, I found this little implementation on Stack overflow which can be used for building up a n by n grid. And all this is doing is creating a grid that's n and then for each element inside there, putting another array which is length of n. So now that we have a blank 2x2 or n by n grid we can go ahead start declaring those variables like we used on the whiteboard example. So starting off I can say let number is equal to 1 which is going to be the first number that we start off and it's also the x that we used on the whiteboard. We can say let row is equal to 0 let column is equal to 0 which are going to be used for representing the exact element location that we're at in the grid. We can say let d row is equal to 0 and let d column is equal to 1 which is going to be the initial direction which will be in the right direction or going from left to right that we need to traverse the grid in. So we've declared all of our kind of starting initial variables that we're going to use for the iteration the next step is we need to loop x amount of times until we reached n times n as our final number, so if you remember we need to go until number is less than or equal to n times n. So in the 3x3 example this will go until we reached 10, or one more than 9 So that should make sense as to you know the while loop we're doing and why we have to loop to n times n. The next step is we need to place our current number inside the grid at the current location that we're at. So if we say grid of row column is equal to number that will place a 1 in the top left spot. And then we need to again increment number by 1 so I'll go ahead say number plus plus here and like we talked about after we place a number we need to check if the next location we're going to is out of bounds so I can say if column plus d column is equal to n. Which means are we going out of bounds on the right side of the grid? I can say if row plus d row is equal to n. Meaning are we about to go out of bounds on the bottom of the grid? So I can say if column plus d column is equal to negative 1 that's checking if we're about to go out of bounds on the left side of the grid and then finally we can say if we've already seen the location that we're about to go to so grid of row plus d row and then column of column plus d column. If that's already defined this is where we need to do our whole swapping logic or you know turn by 90 degrees clockwise. So to do that what we can do is just declare a temp value and set it equal to d row we can set d column equal to d row. Actually, sorry set d column equal to the temp of d row and then d row is going to be equal to d column. So the exact logic that we did over there, we just set the row equal to d column we set d column equal to d row negated, but we need to use this kind of temp variable to keep track of it because we're going to overwrite it on line 17, so we need to bring in another constant called temp so we don't overwrite. And then lastly we just need to increment row by the direction of the row that we're trying to go so row plus equals d row which will increment our row in the correct direction and then same thing with column we can just say column plus equals d column which will increment column in the correct direction. So that basically wraps up implementing the solution that we did on the white board in Javascript. You see here at the bottom of the console log it's printing out the correct row where it's all spiralling in a clockwise fashion from 1 to n times n so if you notice it ends at 25 and the n that we started with was 5 so 5 times 5 is 25. Yeah, so hopefully this one wasn't too hard if you have your own solution or you have any questions feel free to place something in the comment section below. Just a heads up the next one I'm going to talk about is called talking clock and that is number 321 and I'll put a link to it in the bottom of the description of this video. So if you want to work on that now, and then in a couple days, I'm going to post my solution to that problem. So just a heads up and again be sure to like and subscribe to freeCodeCamp and this video if you thought this is a good tutorial Alright stay tuned for the next video. Thanks for watching.