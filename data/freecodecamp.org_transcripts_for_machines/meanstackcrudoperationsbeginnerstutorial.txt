quick demo of this video tutorial this is a mean stack beginners tutorial in this tutorial we will develop a mean stack application from scratch to implement credit operations insert update and delete in order to insert a new employee you can do this now click on submit so here we have inserted a new employee inserted employees will be listed inside this table here in order to update a record you can click on this pencil icon here instead of uk i will update lender now click on submit so here you can see the dos message updated successfully here we have updated in this tab list also so these employer codes are inserted into this employees collection in mongodb here if you want to delete error code you can click on this delete icon here it will ask for confirmation are you sure to delete this record or not click on ok so here we have deleted the record for fiona agree so from this tutorial you can learn how to develop an enterprise application in mean stack so please watch till the end of this video tutorial so here is my vs code editor i will be using this ide for the application development you can use any ide as you wish basically in mean stack application we will have node.js api in server side and as a server we will use npm package express for database we will use nosql mongodb and finally we will have the client side it will be implemented in angular 5. before starting this project we have to ensure that we have a working means stack development environment first of all we need node.js itself for that you can go to this website nodejs.org then you have to download the installation file as per your operating system in my case i have windows operating system with 64bit so we have to download either of these two files here we have this table version and here we have the beta version better download this table version 8.11.1 node.js installation is so simple you can complete the installation process by pressing a bunch of next buttons in the installation wizard after installation just open command prompt then type the command node space minus v hit enter so here you can see the latest installed version in my system i have already installed node.js 8.11.1 after node.js we have mongodb first of all go to this website mongodb.com then click on download here then go to community server then select the installation file as per your operating system in my case i have windows so i can download this msr installer file installation of mongodb is also simple you just need to go through few next buttons after installation we need to start mongodb for that we need to know the installation directory where we have installed mongodb in my case i have windows operating system so it will be there in programs files so here is my c drive inside that we have programs file and here we have the mongodb folder server 3.6 bin folder here we can see the file mongod.exe in order to start the server we have to run this application from our command prompt so let's look how we can do that in order to start the mongodb we have to navigate inside this folder for that in command prompt you have to run this cd command after running this command we will be inside this uh folder directory here bin folder from there we have to run this mongod.exe file using this command in order to run this file we have to pass this command line argument db path here we have a folder path to a folder hyphen dot data you can name the folder and you can keep the folder anywhere you wish basically inside this folder mongodb will store the files related to the database that we have created okay in my case it is here hyphen dot data so whenever we want to work with mongodb we have to start the server using these two commands here in order to make the process more simple i have saved these two commands in a notepad then go to file then save as then name the file here finally you have to add the extension dot b80 then click on save in my case i have already saved this file in my desktop you just need to double click on this file so that it will start the mongodb so here we have started the mongodb with this batch file so here we have installed and started mongodb server now we need a management tool in order to work with mongodb in latest versions of mongodb it comes with a default management tool here it is mongodb compass or you can use this uh software robomongo okay so in my case i'll be using this one default management tool mongodb compass community double click on it in order to connect with mongodb we have a connection wizard here it is already filled with default configurations since we have no change from default configuration you just need to click on this connect button here as a first step towards the application development let's create a database for that you can click on this create database button here then you have to name the database i will name this database as cred db to create a database in mongodb combust management tool we need to have at least one collection so i will name the collection as employees okay if you are not familiar with nosql database collection means tablets in sql database table rows in sql database is treated as a record in nosql database column in sql database is treated as a field in nosql db so here we have the collection employees inside that we will have a number of records related to each employee now let's create the database click on create database so here we have the newly created db for now we don't have any record inside this employees collection now back to required softwares for mean stack app development here we have the angular cli for angular 5 development we need to install angular cli in order to install the package you can use this command npm install minus g then angular cli so that's it here we have a mean stack app development environment now back to vs code editor first of all we will create a server side app with node.js after that we will implement the client side using ankula 5. so i am going to create a mean stack application from scratch inside this project folder so first of all we have to open this folder in my vs code editor so let me copy this folder path from here then back to the vs code then go to file open folder then paste the directory here hit enter then click on select folder now let me create a new folder for node.js application i will name this folder as node.js then go to this folder node.js we have to open command prompt inside this folder directory for that you can use the shortcut hold shift then right click on mouse then click on this open command window here in order to create a node.js application first therefore we have to have a package.json file in order to create the package.json file you can use this command npm init hit enter then it will ask configuration details about the project package name will be nodejs hit enter then version description entry point test command leave it as it is hit enter so here we have created a package.json file it is filled with these default configuration is this okay type yes here then hit enter so you can see the newly created package.json file here in order to work with this node.js application we need some npm packages we need npm package express to act as a server then we need mongoose it will act as a mongodb or arm finally we have body parser it allows us to send json data to node.js api so let's install these packages npm in store first of all we have express mongoose after that we have body hyphen parser now we need to save these dependencies inside package.json file for that you can do this hyphen hyphen save hit enter so here we have successfully installed these three packages mongoose express body parser now let's start coding inside this application we have already created a db cred db here now we are going to connect the database from this node.js project for that i'm going to create a new file here i will name this file as db.js in order to connect mongodb we will use npm package mongoose that we have already installed so first of all we need a request statement for mongoose so here it is here we have a constant mongoose it requires mongoose package after that we can make the connection using the object mongoose by calling this function connect as a parameter for this function we can pass the mongodb connection details here we have mongodb protocol then localhost we have installed this package inside this default port number 27017 after that we have the database name creditdb after the mongodb connection we can call a callback function like this it has a single parameter err it stores possible errors while connecting the database if there is no error we will print this message into console window mongodb connection succeeded if there is any error we will print this message error in db connection with detailed error object we have called this json stringify function in order to convert this object into a string with indentation of two space character most of the case we need to establish mongodb connection outside this db.js file so we need to export this constant mongoose for that we can do this module dot exports is equal to mongos now let me save this file then open command prompt here in order to run this db.js file we can do this node space db dot js hit enter sorry here we have created this db.js file outside this node.js folder now let me move this file into this node.js folder then back to command prompt let me run this command again hit enter so here you can see the message mongodb connection succeeded now if we change something inside this node.js project we have to rerun this application inside this command prompt using this node command i'm going to add two more dots at the end of this mongodb connection succeeded message in order to see these updates you have to rerun this application for that use the shortcut ctrl c twice then run the command again so here we have the updated dots now let's check how we can avoid this execution restart after application update for that we have to install this npm package nodemon in order to install this package globally inside your system you can use this command npm install minus g then node mod now let's look how we can use node mode now let me quit the current execution for that you can use the shortcut ctrl c twice then run this application using nodemon instead of node node mod then db dot js hit enter so here we have started this node.js project using node mod from now onwards we don't want to restart this execution after any updates inside this node.js project let me remove these two dots from here then let me save this so here you can see that nodemon already restarted the application for new changes now let's create the root javascript file index.js first therefore we need request statement for express and body parser so here it is here we have a constant for express and one for body parser also in order to make a connection with mongodb we have to execute this db.js module for that we can add one more required statement for db.js file here it is always recommended to separate local import and package import like this so here we have a constant mongoose it will store the mongoose that we have exported inside this db.js file here we have used destructuring syntax from es6 suppose if you have an object or with these properties p and q in order to retrieve value of these properties into a local variable p and q you just need to use this restructuring syntax like this so that is what we have done inside this project also inside this db.js file here we have exported mongo's property in order to retrieve that we have used mongoose with these structure in syntax with this import we will establish a connection with mongodb in order to work with express package we have to call this core function express like this so here we have called the express function result will be saved inside this app variable here now we have to configure express middleware in order to send json data to this node.js project for that we can do this we just need to call this app.use function inside that we can pass the result of this function executionbodyparser.json now in order to start the express server we can call the function app.listen as a first parameter we have to pass the port number where we want to start this application after starting the server this callback function will be invoked inside that we have a message for console window server started at port number 3000 now let me save this index.js file then open command prompt here i want to run this application using nodemon not monspace index.js hit enter so here we have started the express server at port number 3000 and we have successfully connected to mongodb now we are going to implement credit operations insert update delete and read or view using post update delete and get web methods respectively for that first of all we have to create a model using mongbo's package so let me create a models folder here models inside that i will create a new file employee.js first therefore we need a request statement for mogus so here it is here we have a constant mongoose for mongoose package now let's create the model employee for that we can call the function mongoose dot model inside that first of all we have to pass the model name employee here after that we have to specify the schema or structure of our model so inside this application we will implement correct operations using employee details like name position office and salary and here we have specified the corresponding field types all of these fields will be string except the salary field finally we have to export this employee like this module dot exports is equal to employee now in order to insert new employer code into mongodb we just need to create an object of employee and call the function save from the object it will insert the new record into this employees collection that we have already created so we have not specified in order to insert the record into this employees collection anywhere inside this model by default mongoose will insert the neural code into a collection with name employees so it will use the plural version of model name that we have passed here you don't have to create the collection manually in management too like we do in sql databases mogus will automatically create the collection as per our model without using the plural version of this model name you can pass a third parameter here suppose i want to use a collection with name emp for this employee so we can pass emp as a third parameter here for now we will use the employees collection now it's time to implement actual card operations insert update delete and retrieve for that i'm going to create a new folder controllers here controllers inside that we need to create a new employee controller employee controller dot js inside this employee controller we need to implement router from express for that first therefore we can add the require statement for express and then here we have created a local variable for express router by calling this router function from express constant inside this employee controller we may need to work with mongoose model employee that we have created here so let's add a request statement for this employee model also so here we have the request statement and inside this employee variable we will store the exported employee from this file now let me add a router in order to retrieve all employees from this employees collection for that we can create a get request here so here we have the route for this get request when you so make this request we will call this function with these two parameters request and response inside the function we need to retrieve all the codes from this employees collection for that employees.find function can be called it will retrieve all the employees from this employees collection after retrieving all those records we will call this callback function with these two parameters error and docs so first of all we will check if there is any error or not if there is no error we will return the documents that we have received from this employees collection back to the response for that we have called this send function from this response object by passing these documents that we have retrieved if there is any error we will print this message in console window error in retrieving employees and here we have concatenated the stringified version of the error object that we have received inside this callback function like this get request we have to add few more routes inside this employee controller so we have to configure these routes inside the root file index.js for that we have to export the router object that we have created here module dot exports is equal to router now back to index.js file here first therefore we have to add a request statement for the employee controller that we have added here so here we have the request statement for the controller with this employee controller variable now in order to add router from employees controller into this application we can do this we will call the middleware function app.use and we have the base url for this controller employee so basically in order to execute this get request we have to make a get request like this localhost 3000 forward slash employees in order to access routers from this employees controller we have to append this employees to the base url localhost 3000 now let me append list into this router then in order to make this get request we can do this employees forward slash list so here we have appended employees to the base url and then here we have the route that we have specified here for now we don't need this list we will keep a single forward slash for retrieving all employees from the collection now let me save all of these files here sorry inside this model we have a small modification we have to export an object like this employee is equal to employee since we have same identifier on both sides we can use the es6 shorthand method we just need to pass employee here now let me save all of these files here then you don't have to restart the program inside the node mod it will automatically restart after making any update inside this node.js project now let me try to make this request inside the browser let me copy this and let me open one more tab here hit enter so basically with this get request it will retrieve all the employees from this employees collection unfortunately we don't have any record inside this employees collection so that is why we have an empty area here so next we are going to insert new employer code into the db collection for that we can define one more route with post request like this uri for this post request will be same as that of this get request here in order to make this post request you can use the same uri like we have done in get request during this post request we will call this function with these two parameters request and response first of all we have to create an object of employee model class like this so here we have created an object of employee model class as emp inside that we have filled details of the employee from the request body basically for this post request we will send a json data containing details of new employee so using that json data we have filled details of employees using request dot body object so in order to retrieve the value of name property from the send json data we can do this request dot body dot name in the same way we have retrieved other properties also so here we have created an object of mongoose model employee as emp it is filled with details of new employee now in order to insert the neural code into mongodb we can call this save function from the mongoose model object after saving the record it will call this callback function with these two parameters error and document so if there is any error it will be passed through this parameter if the operation is successful mongodb will return an object containing details of newly inserted employee with these properties using this dock parameter along with these properties it will have an extra property underscore id mongodb will use this underscore id property to uniquely identify a record from a collection it's like primary key in sql databases but it won't be in a sequence like 1 2 3 instead instead it will be a 24 hex character string in length so first of all inside this callback function we will check if there is any error or not if there is no error we will return the newly inserted dock back to the response if there is any error we will print this message into console window error in employee save with the detailed error object now let me save this file nodemon will automatically restart the program here now we have to make this post request we can't make the post request from the browser like we do for get requests for that we have to use a special softwares like postman so in my system i have installed postman as an extension for google chrome browser inside that here i am going to make a post request we can select post from this drop down then here we are going to make a post request into this url so that we can copy this url from here itself url will be same as that of get request so let me copy this and paste in here now open body then select draw we are going to send a json data here so here it is here we have an employee details of ashton cox position will be senior developer office london then we have salary now click on send here so here you can see the response from the node.js application here so here we have the details of new employee that we have passed through this request and here we have the underscore id from mongodb for this new code now let's check mongodb for this new record so here we have the employees collection just click on this refresh button here so here we have the new report for ashton cox so now we have error code inside this employees collection now let me make this previous get request it should return all the employees from the employees collection so let me reload this page here so here we have the newly inserted employee details in your browser you may not see this much intendation for the response in my system i have installed json formatter so that's the reason we see this much indentation here in your browser you may see this response like this now i am going to add one more get request into this application so that it will retain a specific employee with given underscore id if we pass this id we can retrieve this whole employee details for that we are going to make a get request like this for slash employees then id that we have saved here for that back to the vs code editor now let's make a get request here so here it is router dot get and here we have the uri for this stop in order to make this get request along with this uri you have to pass the id underscore id for the corresponding employer record when we make this get request we will call this function with these two parameters request and response like we have done for the previous routes first of all we have to make sure that the id pass through the uri should be a valid mongodb id for that first of all we have to import object id from mongoose as we have done here first of all we will check whether the id is valid or not in order to retrieve the value of this id from uri you can do this request object dot params then id so here we can check whether this id is valid or not for that we just need to call this function is valid from this object id if it is not a valid id we can return status code 400 and we will send the message no record with given id if the given id is valid we can retrieve the corresponding employee from the db for that we just need to do this employee dot find by id here we have used the function find and here we have used find by id so first parameter should be the id that we have received through this uri here as a second parameter we can pass this callback function with these two parameters error and dock if there is no error we will return the document back to the response if there is any error we will print the error message in console window now let me save this now let's try to make this get request so here we have the id for this new employee let me copy this we're placing this id here then hit enter so here we have the employee details of the newly inserted employee so here we have the employee details with given id now we have to add two more routes for update and delete now let's try update operation for that we have to use put web method so here it is router.put function can be called and here we have the route force id parameter as a second parameter we will call the function with these parameters request and response inside the function first therefore we will check the id pass through the uri is valid or not like we have done inside this get request here okay if the id is not valid we will return the message no record with given id if the id is valued we can continue with update operation for that first of all we will create an object like this during update operation we will send a json data containing new details of employees with that json we have created a normal object here it's not an object of the employee model that we have done in post request instead it is a normal object emp now in order to update the employee with given id here we can do this for that we need to call the function find by id and update as a first parameter we have to pass the id that we have received from this uri here then we have to do this it tells the mongodb we have to update an employee with this id with these new informations inside this object as a third parameter we can pass an object with options like this i will tell you what we meant by this property here later as a last parameter we will call the callback function like we do in other mongoose operations so here we have the callback function with error and dock parameter inside that we will check if there is any error or not if there is no error we will return the dog back to the response if there is any error we will print an error message in console window so with this new option we tell the mongodb whether we want to return all data of employee or updated data of employee back to the response so if new is equal to true this callback parameter doc will have the value of updated employee details otherwise it will have the old value of the corresponding employee finally we have delete operation for that we can add a new route like this router dot delete function for this route we have the uri like this so when we make a request delete request like this we can call this function with these two parameters request and response inside the function first of all we will check whether the id pass through this uri is valid or not otherwise we will delete the record by calling this function find by id and remove so first parameter should be the id for that we can do this request.params.id after delete operation we will call this callback function inside that we can do this if there is no error we will return the deleted employee details back to the response otherwise we will print the error message in console window so here we have completed with node.js project inside that we have implemented all corrupt operations using put post delete and update now let's create angular application for that we can use angular cli commands in command prompt since we have already opened two command windows for mongodb and node.js application i'm going to use integrator terminal from this ide for that you can go to view then integrated terminal here in order to create an angular 5 application you can use this command ng new then application name i will name this application as angular app hit enter so here we have successfully created a clientside application as part of that here we have a folder angular app inside that we have a brand new angular 5 application now let's run this application for that first of all we have to navigate inside this folder so we can use the cd command cd angular app hit enter in order to run an angular application you can use this command ng serve double hyphen open hit enter so it will compile and open your application in your default browser so this is how the fresh angular application looks like by default angular applications uses this port number 4200 in order to design this application we will be using materialized css for that we have to include these references stylesheet and javascript file in our application along with that we need few icons for that we will use material icons so back to the application here then open index.html here so first of all we have the style sheet for materialize css after that we have style sheet for material icons before the body end tag we can add script file for materialized css now open styles.css inside this style sheet we can add global css rules for the application for now i will copy paste the required css rules for this application development inside this style sheet so here it is now let's create required components model and service classes inside this application for that we need one more terminal so you can click on this plus button here then navigate into the angular application folder angular app now in order to create angular component you can use this angular cli command ng g4 generate c4 component i will name this component as employee hit enter newly created component can be seen inside this app folder here now we need to add one model and service class for that inside this app folder i'm going to add one more folder i will name this folder as shared now open one terminal from this folder for that right click on this folder then open in command prompt here now let's create a model class for that you can use this command ng g4 generate and we need to create a class in angular cli there is no specific command to create a model in angular application but we can create the model class by adding few tweaks inside this class generation command here we are going to create the employee model class so i will name it as employee then we have to add this command line argument type is equal to model hit enter newly created model class can be seen here employee dot model dot ts after that we need to create a service class also for that you can use this command ng g for generate s for service we need to create employee service class so i will just need to type employee here hit enter now we can start with employee model class so here it is empty.model.ts inside this model class we need to add properties corresponding to this mongodb collection fields so we can add these properties here id name position office and salary now open employee service class first and foremost i'm going to add import statement for this service class here here we have added import statements for angular core packages and rxdx along with that we have imported employee module from this employee.model.tx file here now let's create two variables inside the service clause so first of all we have selected employee it's of the type employee model class and here we have an array of employee as employees so inside this employee's array able to save all employees from the mongodb collection with this selected employee property we will design a form for insert and update operation that we can do in employee component html default design of angular application is rendered here and this view is rendered from the default component html which is app component html here so i'm going to remove these default html codes from here instead i will use the employee component selector so here is the component type script file i will use this selector let me copy this then back to appcomponent.html and i will add a tag with this selector here now let me save all of these modifications here then back to the browser here you see this angular application is already restarted whenever we make changes inside this angular application we don't need to use external packages like we have done in node.js with normal angular cli watch files inside this angular application whenever we make a changes inside them it will restart the program here so here we have the paragraph employee works from employee component html now inside this component we are going to design a form using the property employee selected employee from employee service class so first therefore we have to inject employee service class inside this employee component typescript file here we have the typescript file employee.component.ts for that first of all we have to add an import statement for employee service class so first of all let me add a line break here so that we can separate local import and builtin import so here we have the import statement import employee service from shared folder employee service ts5 in order to inject the service class we have to add the class inside the component providers array for that we can do this here we have the providers array inside that we have employee service after that we need to add a constructor parameter for employee service like this private employee service itself the type employee service class now let me save this file then back to employee component.html file now we can design a form using this employee service property selected employee here we will wrap the employee form inside a card component from materialize css we can see examples for card component here now back to vs code editor now let's replace this default paragraph with a card component so first of all we have a div with class row and here we have the grid system from materialize css it is almost similar to bootstrap grid system inside that we have a div with class card inside that we have another div with class card content apart from that we have one more class white hyphen text so this will apply white color for text inside this div inside that we have a div row now we can use grid system from material as css we want to divide this duo into two parts with five columns and seven columns so here we have the first due and second due inside this deal this first deal we will design the employee form inside the second view we will show employees list that we have inserted into the mongodb collection here so first of all i will design employee form inside this div so here we have the form form here we have the local reference employee form is equal to ng form and here we have wired up the submit event using ng submit attribute it will call this function on submit and we will pass the local reference employee form into that function inside the form first of all i will add a hidden field inside this control we will store the object id from mongodb so i will name this control as underscore id then we have the local reference underscore id is equal to ng model and finally we have to add the twoway data binding here ng model is equal to employee service that means injected object of employee service inside this component here then we have selected employee inside this employee service class and inside that we have the property underscore id from employee model here now we need to add input text box for remaining properties for that you can see some examples from the materialized css documentation here we will be using label text box pair like this we have the label here and we have the text box here now back to the vs code editor first of all we need to add a dual with class raw inside that we will have another deal with classes input field called s12 so it will take the entire width inside this div row then we have to add input control like this input it's of the type text we can use this control to end the employee full name so i will add the name property here name is equal to name and then here we have the local reference name is equal to ng model then we have the twoway data binding and g model is equal to employee service dot selected employee dot name so here we are designing this form using template driven approach after the ng model we have to add placeholder placeholder is equal to and full name after that we have to add the label here so here it is label inside that we have name i want to make this input text box as manatee to indicate the mandatory fields we will use a red asterisk mark for that i will add a nested label inside this name label so here it is here we have a label with class red text so this astrix mark will have red color we can add label text box for remaining properties position office and salary for that we can do this so here we have the label text box pair for position and then we have label text box pair for office then finally we have the salary text box so here we have designed employee form using template driven approach in order to work this approach we have to add forms module inside appmodule.ts5 so first of all we can add the import statement for forms module here import forms module from angular forms now we can add this forms module inside the imports array here now let me save all of these modifications and back to the application here boom that's it here we have an employee form as per our design now we need to add a submit button and reset button into this form for that back to the component html here in order to add these buttons we can add one more due before the form and tag here so here it is we have a div with class row and we have another div with input field called s12 inside that we have two buttons this is for reset operation and this is for the form submit button for these two buttons we have classes btn from materialize css then we have the custom class which we have defined inside the stats.css btn hyphen custom in order to align these two buttons in the right side we have added this right class now let me save this and back to the application here so here we have added submit and reset button first of all i will implement form reset operation for that back to the component type script file here employee component dot ts for that we will define reset form function here it has a single parameter form it's of the type ng form in order to use this class we have to import import ng form from angular forms we may need to call this reset form function from various parts of the application in some cases we cannot pass value for this form parameter so that is why we made this parameter as nullable so first of all we will check whether we have a value for this form parameter if value for this parameter is passed we can reset this form by calling the reset function like this form dot reset after that we have to manually reset these form controls since we have designed this form using selected employee property from employee service class we can do this this dot employee service dot selected employee here we have set the selected employee property with an object containing empty or null value for those properties id name position office and salary now we can call this reset form function inside this ng on a life cycle hook ng on it life cycle hook will be invoked whenever this component is fully loaded so initially it would be better if we can reset this form here for that we can do this this dot reset form from this ng only life cycle hook we can't pass value for this form parameter here so let me save this and back to the application here now we can wire up this reset form function to this reset button click event for that you can open the component html here then we will add a click event for this reset button here so here it is we will call the reset form function into that function we will pass the local reference for this form here okay now let me save this and back to the application here now let's check how this reset operation works for that i will enter some random text inside these text boxes here now click on reset button here so here we have successfully reset this form into its initial state now let's implement form validation as we mentioned employee full name is a required field for this form submission so that is why we have added a red astric mark here in order to make this text box as required field we have to add required attribute into the corresponding input text box here so we can add required attribute here required now let me save this and back to the application here we can implement form validation using ng classes from angular initially if you inspect this text box here you can see that it has classes ng pristine and ng invalid ng pristine means we have not modified its initial value ng invalid clause indicates that this field is already invalid now keep an eye on these classes here while we update this text box you can see that its classes are modified ng pristine is replaced with ng dirty and ng invalid is replaced with ng valid if i clear this text box we can see that it has two classes ng dirty and ng invalid we are not looking at ng touched class currently we have ng dirty and ng invalid class applied to this text box so that is why we have a red bottom border for this text box we have defined this style inside the styles.css file here if there is any input with these two classes ng invalid and ng dirty we will apply the bottom red border now back to the application whenever this form as a whole is not valid i want to disable this submit button so disabled attribute will be applied whenever this form as a whole is not valid employee form is the local reference for this form here now let me save this and back to the application here initially this text box is empty and thereby this form as a whole is not valid so we have applied disabled attribute to this submit button if i enter something inside this text box you can see that this submit button is enabled now let's implement the form submit even we have already added a function to this form submit even here ng submit we will call this function on submit now we have to define this function inside the corresponding typescript file here on submit function for this function we have a single parameter form it's of the type ng for inside this on submit function we have to insert a new employee into mongodb for that we need to consume post request from the node.js api here so inside this employee controller in our node.js api we have created this post route we need to consume this post route from this angular application here from this employee component in order to consume the post request we will create a function inside this employee service class i will name this function as post employee for this function we have a single parameter emp it's of the type employee model class in order to make the post request we have to make an http request into the node.js project for that we can use http client so first of all we have to inject this http client inside this constructor here private http it's of the type http client in order to work with http client we have to import http client module inside this app module.ts file so first of all i will add the import statement for http client module and then i will add this class inside this imports array here now back to employee service class here now we need to make the post request into employees route for that let me create a readonly variable here so here we have the base url variable it is initialized with the uri for the employee controller in our node.js project now we can make a post request for that we just need to call the post function from http client object as a first parameter we have to pass the uri so here it is then after that we have to pass the json object emp containing details of new employee so here we have returned the result of this post function back to the code so basically you can see that this post function returns an observable here so we can call this function inside the employee component.ts file here now inside this component typescript file we can call this employee service function post employee for that we can do this this dot employee service dot post employee into this function we have to pass an object of employee containing details of new employee for that we can do this here we have the form object in order to retrieve value of form elements we can do this form dot value so it will be an object of employee itself as i told you this function post employee will retain an observer so we can subscribe to that observable here inside the subscribe function we can define a callback function like this it has a single parameter response so it will have the response returned from the nodejs project so first of all inside this function after inserting a newer code i want to reset the form for that we can call this reset form function by passing this employee form object now i want to show a toast notification saying insertion is successful for that we can use toast from this material icss go to javascript there you can see toast here in order to make a toast request we just need to do this m.toast inside that we can pass this html object okay now in order to make use of this m object inside this angular application first of all we have to declare m before this component declaration here so here it is okay we have declared m it's of the type any now back to the function here now we can make a toss request like this m.toast here we have the html saved section in order to apply round border you can use this class rounder now let me save all of these modification and back to the application here as you know we have a node.js project running at port number 3000 in order to retrieve all employees we can make this get request from this angular application we are going to consume a post request from this node.js project where we have a problem in order to make the request we have to enable course inside the node.js project course means close origin resource sharing that means without course enabling any web application node.js or any web application will block request from another web application which is hosted in a different domain or port number now in order to interact with these angular and node.js project we have to enable course inside this node.js project for that first therefore we have to install this npm package course so back to the command prompt here currently it is running node mod let me stop this execution for that you can use the shortcut ctrl c then type y in order to install the package you can use this command npm install course and we have to save this package in our package.json file so we have double dash save hit enter so here we have successfully installed the course package now back to the node.js project here open index.js file inside this file first of all we have to add the request statement for course package so here it is after that we can use the middleware function app.use for that we can do this app.use inside that we have passed this function course so this will allow request from any port number or domain we have to be specific we need to allow request from this angular application which is running as port number 4200 in order to enable course for the angular application we can pass an object inside this function like this so here we have the origin property inside that we have to enable codes for this port number which is running at localhost okay now let me save this and back to the application here now let me save these modifications here then back to the command prompt now we need to run this node.js project using nodemon now back to this uh angular application here i'm going to insert a new employee here i will name this employee as fiona green then we have position it will be junior developer then office will be in canada and we have salary click on submit so here you can see the stores notification saved successfully now if you check this mongodb here now we are inside the employees collection click on refresh button here so here you can see the new record for fiona green now inside this second you here i want to display all employees from this employees collection here for that back to the angular application here then open employee component html here inside this view we can add a table to list employees in order to design the table i will use the employees array from employee service class here okay we have already injected this employee service inside the employee component typescript file here so we can make use of that array inside this html here for that first of all we will add a table here for this table we will apply two classes from materialize css so first of all we have responsive table after that we have highlight class inside the table first of all we will add the table header for that we have thead inside that we need a row with columns for each properties from the employees collection after t hat we can display exact content from employees collection for that we have a tr element here here you can see the ng4 directive here it basically allows us to i trade through the employees array from employee service class with this emp variable okay so using this emp variable we can displace data from this employees collection for that we can do this first of all we have the employee name in order to display employee full name we have used string interpolation or one directional binding after that we have position and office here inside this employees area from employee service class we have to fetch all employee reports from this employees collection for that we can define a new function inside this employee service class here so function will be something like this get employee list here we have made a get request into this node.js project into this route here this one first route so it will return all employees from employees collection now we can call this function from this angular component employee component here for that i'm going to define a new function here function name will be refresh employee list inside the function we can call this function get employee list for that we can do this this dot employee service dot get employee list it basically returns an observable from this get function here so we can subscribe to that observable here so we will call the subscribe function inside the subscribe function we can define a callback function with a single parameter response now inside this response parameter we will have an array of records from this employees collection so we can assign that array into this employees array here for that we can do this this dot employee service dot employees is equal to response here you can see a red squiggly line because we are assigning an object into employees array so we have to cast this response as an employee array for that first of all we have to add an import statement for employee model like this then we can cast this response like this as employee array now i will call this function inside the ng only life cycle hook here this dot refresh employee list now let me save all of these modifications here then back to the application so here you can see the employee list that we have inserted into this mongodb collection now i want to add one more column into this table for some action buttons like edit and delete so back to the component html file here so first of all i will add an empty column inside the table header like this then inside this tr element we can add an extra td like this inside that we will add a button for delete operation like this so it has a class custom class action btn it is defined inside the styles.css inside the element we have a material icon for edit operation so it will show a pencil icon after that we need to add an angle element for delete operation so here it is we have the custom class action btn and here we have the material icons for delete operation so it will be a trash icon now let me save this and back to the application here so here you can see those two buttons here edit and delete operation now let's implement the update operation in order to update a record you so want to click on this pencil button here then we will show the corresponding record details inside this form here after making the update then user can submit before so first of all we have to implement the click event for this pencil button here so let me add the click event here when we click on this angular element we will call this function on edit by passing this emp object from the iteration now let me define this function inside the typescript file here on edit it has a single parameter emp its of the type employee model class inside that we just need to set this employee object into the selected employee property of employee service class so that it will update this form with selected employee content so we can do this this dot employee service dot selected employee is equal to emp now let me save all of these modifications and back to the application here if i want to update this record for fiona green you can click on this pencil button here so here we have populated details of employee fiona agree we can edit the employee details here then submit the form we have already implemented submit event for this form using this on submit function here so inside this function we have to deal with insert and update operation but we will decide whether we want to do update operation or insert operation based on the value of this input hidden field here underscore id if underscore id has an empty string then we will go for insert operation otherwise we will go for update operation for that we can add an if close here form dot value dot underscore id if it is equal to empty string we will do the insert operation here in the else part we have to do the update operation for update operation we have to consume put route from node.js project in order to consume the request i'm going to add a new function inside this employee service clause here so here we have the function put employee it has a single parameter emp it's of the type employee in order to consume the put route from node.js we can call the put function from http client object as a first parameter we will pass the uri here here we have concatenated underscore id into the base url like this as a second parameter we have passed the x at employee object now we can make use of this function inside this employee component typescript file here it would be same as that of this post employee function invocation so let me copy this and pasting inside this else part here then instead of this post employee we have put employee function inside this toast success function we can show updated successfully after insert or update operation we have to refresh this employee list inside this table for that we can call this function refresh employee list so we will do this this dot refresh employee list function can be called same function can be called inside this function also let me save all of these modifications here then back to the application i'm going to update this fiona agreement the code now click on this pencil icon here then instead of canada i'm going to update that with uk click on submit so here we have the success message updated successfully now back to the mongodb compass management tool here you can see the old office of fiona as canada if you refresh this list it should be updated to uk finally we have to deal with employee delete operation for that we will be using this delete icon here so we have to wire up an event for this button click event back to component html here then i will add a click even for this delete button here we will call this on delete function into that function we have to pass two parameters first of all we will pass the underscore id for the mongodb object and then we will pass the form object employee form because we have to reset this form after any delete operation now we need to define a function inside this employee service class in order to consume delete route from node.js project for that we can do this we have the function delete employee it has a single parameter underscore id we will make this delete request by passing this url inside that we have appended this underscore id now back to the component typescript file here now we can define this on delete function here function name will be on delete it has two parameters underscore id then four delete operation is a loss of data so we have to confirm the operation from client side for that we can do this we will have and if clause inside that we will confirm the operation by asking this question are you sure to delete this record or not if you so confirm this operation it will return a true value so inside this if close we are safe to delete the record for that first of all we will call the function delete employee from this employee service class function into that function we have passed this underscore id value this function will return an observable so we can subscribe to that function here inside the subscribe function we will have a callback function with a single parameter response after deleting an employee we have to refresh this employee list here for that we can call the function refresh employee list then we will reset this form if there is an employee selected for update operation for that we can do this with this dot reset form function can be called with this form object finally we have to show the toss message m.toast inside that we will show this message deleted successfully now let me save all of these modifications then back to the application here i'm going to delete ashton cox record for that you can click on this trash icon here then it will ask for confirmation are you sure to delete this report click on ok so here we have successfully deleted the record if you check the mongodb combust tool you can refresh this list here so here we have deleted ashton cox record so with this mean stack application we have implemented curb operations so let's wind up this means tag tutorial for business you can download this project from the git hubling given in video description please like and share this video with your friends and colleagues so that they can benefit from this have a nice day bye