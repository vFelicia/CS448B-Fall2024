we're going to take a look at a little look at debugging and kind of just the state of debugging with node.js and to give you a little bit of context um i work on google chrome i i work on the chrome devtools but i've been invested in devtools and just generally tooling for a long time um i found this like recently 10 years ago i made this stunner right here a nice little like cheat sheet of keyboard shortcuts for our best friend firebug uh so good but you know like even then i was just really excited to understand what kind of capabilities tools uh offered us because i was like i can i can learn one more thing and i can be more productive save my time and save my stress and we now have some good tools we have one tool in particular that is you know our trusty friend go to console log we all use it we love it it's reliable it's everywhere uh you want to know what a value is hey console.log's got you back no problem so that's great um but you know while it is useful like console log debugging printf debugging there are more powerful capabilities so i wanted to touch on a few of those a year ago at google i o the chrome team introduced some of the work that we'd done to introduce the v8 inspector component into node bringing some new debugging capabilities uh to the node project uh we actually announced a pull request uh rather than like you know something shipping but hey you know it landed and and now it's now it's in there so that's fine um i'm going to quickly walk through kind of just the basics of how this works uh you have a little hello world script you can run it like that obviously um but you can run inspect how many people have used inspect or something good yes great okay do this return the debugger also dash x inspect will run it turn on the debugger and pause it on the very first statement of the script i find this is really useful with you know utilities other things where it's going to happen really fast and you want to break at the very beginning to make sure any sort of breakpoints are in place now when you run this uh you'll get some output that looks like this hey the debugger is on uh it's listening to a websocket and um here's some docs uh this is a little different than it was before in previous node versions you saw something like this a bit more text and a big long url that you felt compelled to like copy paste and it's kind of awkward anyways don't do that anymore it's a little bit better and so this is kind of a good approach to take so once you've turned things on uh head over to chrome new tab type in about inspect it'll bring you to a page that looks a little like this um and these are some inspectable targets uh you'll see your the node script mentioned right here but click on this guy right here the dedicated dev tools for node this is going to pop up devtools it's just for your node now another approach to do the exact same thing is if chrome's open and a dev tools window's already open and then you go and you take your script and you start inspecting it uh in dev tools now um and this is new as of uh it's shipped to chrome stable as of this week uh right up in the top left corner we'll add a nice bright green shiny node.js icon click that guy and that'll bring up the dedicated window for you so um just you know dedicated window obviously it has less tabs than your typical chrome dev tools because we're just dealing with node and its capabilities but the dedicated window is great because if you're working with no if you're working with your application then you make some changes so your control scene your application and then you rerun it this dedicated window is going to automatically reconnect to the node that is now there so it's just there so it's going to automatically reconnect whenever there's a new one all right so those are just kind of the basics um but i want to show a little bit of how this works uh in action so we have a little web server app um and when i run it yeah okay yep internal server error great so we do have some problems the console is telling me problems great uh over in chrome inspect i'm going to open this guy up okay so this is the app uh 40 lines of stuff internal server error is right here and so one thing that i know happens uh it's a little you know it's it's kind of confusing so we're trying to do this we catch so we got some exception and then at this point we emit an air event uh that actually gets heard up here when we're listening up on this guy and then this arrow function is emitting its own air event passing along uh the data now i really want to know what this exception is right here because i'm not getting it out on the console but one thing that i can do is i'm going to place a break point well i don't actually want it here i want to break inside of this arrow function so i place it this guy but then turn on this column break point right here so now all right now we go over here we reload and i paused inside of the arrow function and you can see data is inspectable and so we're paused inside this guy it's really cool works phenomenally well with arrow functions with asynchronous code it's super useful now i this guy comes down here where i say problem and i'm losing the details about this exception somewhere between there um i don't know where exactly i might start out with like a step in see what happens but i step in on emit i'm inside of uh you know node's core events module which honestly i like i don't want to walk through this so i'm gonna right click and i'm gonna black box this guy um and with black boxing it's just saying hey you probably you know uh you're just gonna avoid stepping through this so we can see now in the call sack it says that a few call frames are completely black boxed and so now when i step in we step directly to my own uh event handler for the exact same thing so just bypassing all that um right well we got that under control and e is telling us uh well this string we still don't have our exception open up the console let's just be like this arguments yep there it is okay there are two arguments right okay that string and then the actual exception so i was just being silly so what we can do just take this guy control d for multiple selection comma spread good and um i'm gonna hit control s uh control s is a live edit it's kind of like a hot module reload but at the at the v8 level and so now uh when i refresh the same guy i'm so paused i'm still paused hey now when i refresh yeah there we go okay so i was just getting the logs before and now yes the actual exception made its way through nice thing here is i didn't have to like restart node the live edit meant that i'm able to just keep that running make some changes and then see what happens all right so thank you i'll show you just a few things here column break points black boxing live edit all this good stuff that's been available when you're debugging chrome now all available when you're debugging uh with node as well all right bring it back to these guys so um if you've done this before and you feel like it takes a little bit of work just to bring up that window there are some tools that uh help with this to make it like a one action thing hey i want a bug window there's a chrome extension called nim project called spec process another one called rocket just makes it kind of a single action uh to get that up and running really what they're doing is opening this url um we just need the devtools url with the websocket kind of hooked into it but because it's a kind of a fancy url you can't open it in normal ways so that's that's it's just kind of the under the covers all right i want to briefly touch on four kind of other approaches uh apart from those basics one situation you might find yourself in is uran node normally no flags no anything but you've reached a state and you're now like i really want to debug it profile i don't know you want to start inspecting it is it too late it's not too late no no you can do it process debug process and pass it just to process id as a as a number you can run this in a completely different uh node process and it'll just flip on debugging and your target really cool um that works if you want to do debugging and you're more of a terminal kind of person and you want like a gdb style interface you can use the existing cli debugger this has been a node for quite some time but the back end was recently redone to be sitting on the new implementation um but you just work with the script uh here on the command line with some short commands it's pretty great now another approach is via the devtools protocol now as you saw there's this websocket port and that just speaks json rpc with the devtools protocol this right here what we're looking at is a script that attaches to chrome or chrome headless and just captures a javascript profile just automatically if we wanted to take this script and have it run against node instead we just change the port uh to connect to node's debugging port otherwise the rest of it works um the entire devtools protocol that chrome uses is obviously bigger than the set of what node is using but there's some great overlap um around profiling debugging console and the runtime all this so you can do this over here over the websocket another approach is to use the new core inspector module that was added i think is new in eight um and here you just set up a session and you talk the same exact same protocol profiler enable start stop same thing as we were doing the last one but this is happening inside of your node process instead also a decent option with debugging out of the way i want to quickly touch on tracing because there's some cool stuff now tracing is a very powerful collection of tools on the chrome team we use this to understand what is happening in the browser this is a two seconds of loading a page on wikipedia and on chrome we use this to understand what is happening anything that's taking time we go to a trace that is the ground truth um and so much stuff is instrumented there and this is like the most basic looking thing it can get a lot more involved but we're going to skip over that traces are really really powerful and the great thing is now this whole capability is available in node it is still early days but this is how you can do it uh run with trace events enabled and after you run this it's gonna spit out a json file of the trace and you can open that up in chrome in about colon tracing just drag it in and you'll see something like this this is one that i captured with a node just the other day so there's a few things going on here and it gets really interesting in this area in the middle i'm not going to zoom in and explore it too much but i've selected this whole region and down at the bottom we see some of the results we have that we know how much time v8 spent executing compiling parsing doing gc work uh total time self time and the on cpu time so some nice breakdown around the timings of what's happening on that thread and then above it is some really fascinating stuff and this is actually showing me here kind of a breakdown of where my latencies are between dns and tcp connection and the rest of the network request really helps in this case identify where the the certain latencies are i will point out that this aspect is sitting on top of the new async wrap implementation in node core and this part isn't yet in uh isn't yet landed in node there's a good looking pull request really good stuff um that when landed will enable this still the the kind of detail in here uh in the trace um it's uh there's a lot more opportunity so i'm really excited to see a continued investment in instrumentation and understanding all sorts of things and what's happening inside node like understanding when the event loop is doing work or whatever this is a great solution to instrumenting all that and building tools around it yes good a basic trace looks like that but there are some off by default categories which give you more detail at the cost of a little overhead uh this would be the magical incantation that turns on all those categories um yeah there you go so that's about going to wrap it up for me um one last thought i want to leave you with is just explore and think what is beyond the console law thank you guys very much