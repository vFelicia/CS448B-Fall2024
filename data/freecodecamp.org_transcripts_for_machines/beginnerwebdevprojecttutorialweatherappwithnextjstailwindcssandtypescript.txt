learn to build a weather app using nextjs Tailwind CSS and typescript in this HandsOn tutorial this is a great project to understand how all these Technologies work together you'll create a responsive Dynamic app from scratch with react components utar developed this course in this today's video we are going to build a simple weather app using next gs14 and open Weather API this is the fully functional weather app and uh let's see the features of this uh weather app so basically here we are getting the today's date and temperature and hourly wise temperature and weather icon and weather data and here is the weather description and uh there you will find some additional details of our weather like uh visibility humidity wind speed air pressure sunrise and sunset and after that you will find a 7 days forecast data and here is the main feature of our weather app here we will also get a search SS suppose for example if I will search for Delhi so now you can see that we are getting a proper SS for our location and if I will select for any location and uh click on that search button so we will get a data for our that uh location so now you can see that the weather report of our daily location here we are getting the temperature and description and some additional details and uh obviously 7 days forecast data suppose I want to search for Surat and if I will press enter so this will search for that location and here we are getting the location name So currently which location is applied and if you haven't seen there uh suppose if I will search for another location so we are also getting a proper skeleton loading components so on the meantime our when our data is on the loading state so we will get a proper skeleton loading if I will refresh my page or we can also say that on the first loading what we will get so if I will refresh my page so now you can see that we are getting a proper loading State there also and after that we will see our data and I have also added a additional feature for our weather app here is the button and when I will hover over our button here you can see that we are getting a title like your current location and when I will click on that button so this will search for the current location So currently my location is made it so firstly this will ask us uh permissions for our locations for our location and after that uh this will search for that location and suppose if I will go to the another location suppose I want to see a weather report for Pune location and uh see there we got the location and again if I will click on that current location button so now you can see that we got a current location data and uh currently I'm living on the mered city so that's why we are getting the city name here so I guess you are very excited to build this uh weather app before that let's see a additional feature that is this application is also fully responsive suppose if I go on the mobile screen so you can see that on the mobile screen this will look like this and obviously we can check our data by scrolling there like that and on the desktop this will look like this so I guess you are excited to build this weather app so let's get started so to build this weather app we are going to use a next GS so first of all we will go to our browser and search for nextjs so we will go on that first website and uh here we will find the installation command to install a next CH so I will copy the command from there and uh go to the place where I want to install my nextg app so here I will create a new folder and give that folder name is weather app and after that go to inside that folder and open a CMD on that location and after that paste your command there and uh after pasting your command add a do do there so with the help of dot we don't have to give any project name this will install our project inside that folder and after that this will ask us a few questions like what do you like to use type a script Tailwind CSS and etc etc so what we will do we will just press enter enter and install all the default options so I'm just pressing enter there uh for the es lint also yes enter for the T CSS enter and uh this is asking like would you like to use Source directory so yes I want to use Source directory and after that app router obviously yes and uh for the input allies no now our uh next CS is installing so this will take a little bit of time maybe 1 minute or 2 minute so I will es skip that part so now our next GS project is successfully installed so let's open our project in vs code so for that we will type code dot there and press enter so this will open a vs code on that location so now we will uh run our project and see the output so first of all we'll open a terminal so I will open a terminal with the help of control J and after that on that terminal I will write npm run da so this will open my project on Local Host 3001 but in your case this will open your project in Local Host Port 3000 because on my port 3000 my previous project is running so that's why this is opening on Local Host Port 3001 so let's go to the browser and uh search for local host for 3001 and here currently we are just getting a default styling by nextjs so let's again go to the code and uh from here we will go to the source folder and inside that Source folder we will go to the page. TSX and inside that page. TSX we will remove all the default code from there like that and for now I'm just printing hello and uh we will also go to the global. CSS file and from there we will remove all the default stying from there also and now let's save your code and see the output So currently we are just getting hello now let's see the final output what we need to create so here first of all we will create our Navar and after that we will create other components so let's go to your code again and on the source folder we will create another folder name components and inside that components folder we will create our components and inside that component we will firstly create our na bar. TSX file and inside that we will create our naar component so I will just type TS RFC so this will create a format function for our component and now here we will uh write a code for our naar component so first of all let's style our naar component so I will take uh this div as a nav and inside that we will pass the class names that is sadow SM sticky top zero left zero Z50 and bz White so with the help of this sticky we will get our naar always top so this will stick on that position for always and with the help of this top zero and left zero we are giving the position for our Nar and after that we will again create another Dave inside our naar and here we will give the class name for this Dave and inside that class name we will give the height of our nav bar is 80 pixel and uh width will be full and uh this will be the flex justify between and items Center and Max width will be 7 XL and padding X will be three and obviously margin X will be Auto so with the help of this margin X Auto what this will do this will automatically Center our container or anything on the xaxis so that's why we are giving this MX Auto and inside that Dave we will create a one paragraph tag and on that paragraph tag we will give the class name of this that is flex items Center justify Center Gap two and we don't need border and uh while I'm adding a paragraph you can see this in a second and inside that paragraph we will add a S2 styling for that S2 is text Gray and text 3 XEL so if I will save my code and first of all I need to import my naar component in page so first of all I will import it there like that and uh if you will see the final output there so here we are getting our background color uh a little bit gray so for that uh we will give the class name on our D tag and inside that we will give these class name that is flex and flex column and after that we are giving a gap and BG gray 100 so with the help of this BG gray 100 we will get our background color gray and we are also giving a minimum height of screen and inside that we are passing our na bar and uh if we will see our output so now you can see that currently we are getting our Navar something like this so let's go to the nabar again and here we don't need this nabar keyword and now let's save it again and see so now you can see that currently this is looking like this and now if you will see there so for the logo we are using icon so for the icon I'm using a react icons so first of all we need to install a react icons in our project so we will go to the another Tab and search for react icons and uh we will go to that first link and first of all we need to install our react icons so here is the installation code so I will copy the installation code from there and uh come to my code so I will open a new terminal with the help of of control shift and back Tex and after that I will paste my installation command there and uh press enter so this will install my react icons and after that again we will go to that react icons and uh now we need to search for our icon so our icon is Sun so I will just search for Sun and if you will see the final output so here our sun is looking like something this one so we need to search for this icon so here you can pick any icon that you want but I already know the name of that icon so I will just directly search for the full name so our icon is this MD WB Sunny so I will just click on that one and here I will click on this so this will copy icon in the form of component and uh after that uh we need to go to the code and uh paste our icon there like that and again go to the browser and uh click on on that import code so this is the import code for our icons and after that uh we will paste our icon there now we have successfully imported our icon but here we need to style it additionally so here I will use a class name for that and on that class name we need to give a text size of 3 XL and on the margin top will be one so I need to give the margin top inside the class name and after that we need to give a color for our icon so we can give the color for our icon easily with the help of text property so I need to give a color of text yellow 300 and uh when I will save my code and see the output so our icon will look like something this and now we have created our logo or icon something like this one now let's create our search bar component so for that I will create another section and inside that section if you will see there in the final output and after that we have just a location icon and after that we have a search bar component so first of all let's import these icons and after that uh we will create our search bar component and let's style this section also so this will be the flex Gap 2 and items Center and inside that we have our location icon and for for the icons I will again go to that website that is react icons and uh search for location icon so here we got our location icon so I will just simply click on that one and uh after that I need to click on that so this will copy my icon in the form of code and after that uh go to your code and simply just paste and after that we need to also import our icon so for that again go to your browser and uh click on that import code and uh paste your import code there like that and uh let's style your icon so so to style your icon again we will use a class name and inside that uh class name we will give the text of 2XL and text will be gray 400 and on over we have a opacity off and this icon we have also a cursor pointer and let's see the output so here we got our location icon like this now let's add a another icon uh this is also a location icon so for again we'll go to the browser and uh see we have already searched for location icon but uh we need a different icon for our location so for now I just know the exact name for our location icon so I will just search for that name directly but you can choose any icon that you want so in my case my icon name is this one so I will just click on that one and again do the same process and here I will paste my icon and uh now I need to import my icon so you can also import your Icon by just uh clicking on control space and after that you will get a proper Solutions and after that just press enter so this will import your icon in your location and now let's style this icon also so for that we will again give the class name and on that class name we will give the we will give this size of X 3XL and now let's see the output so you will get your icon something like this so now we need to make this proper so here was the spelling mistake so that's why we are not getting a proper so I need to give this Flex now this is proper and now we have to also uh show our location there so for that uh we will use a paragraph tag there and we have to also style our paragraph tag so I will give the class name of this this is text slate 900 and 80 means we 80 means I'm giving opacity of 80 and after that I have given a text SM and on that place I'm just writing a India and in future we will change this location name with our API data and for now let's save and see the output so we got our location there and now it's time to create our uh search bar so for that again we will create another section so for that again I will create another div and inside that we have our search bar component so so here I will give this search box there and uh we will create our search boox component separately so here I will give this file name searchbox TSX and inside that we will create our sample component with the help of tsfc and now we will style our search component so if you will see there on my search component so what I have done something like uh when I will press enter so this will also for our location so for that we will use a form tag so with the help of this form tag easily handle a summit logic we don't have to create any additional state or anything we just have to use a form so for that I will use a form tag there we don't have to import a form from anything this is form and now let's give the styling for our form tag so this will be the flx and relative items Center justify Center and height will be 10 and inside that we will create our input tag and uh after our input tag we have our icon so icon will be inside the button so I will take a button tag and inside that we have our search icon so again for the search icon we will go to that react icons and search for search so we need to search for search and here we need to search for exactly this search icon in a small letters so this is our search icon so again we have to do the same process just need to click on that icon and uh click on that component so this will copy that component and come to your code and paste it there now import your icon so to import again come to your browser and uh click on that import code so this will copy the import code from there and now just paste your import code there so your icon is successfully imported so first of all uh let's import our uh search bar component in our nabar on that place and let's import it like that and see the final output so here we are getting a error because I guess I haven't saved my search bar component so let's save this and now see we are not getting any error so here is our input and search icon so let's make it side by side our code and output so we can see easily what's going on there so now let's style our input tag so first of all let's give a placeholder and on that placeholder we will just simply give a search search location like that and uh so yeah we got our placeholder there and after that uh let's give a class name so on that class name we will give a padding X of four padding y of two and uh width will be 230 pixel and uh we are also giving a border and Border will be gray color that is border gray 300 and uh we are also giving a rounded left MD we are just only giving a rounded on the left hand side and on the focus outline will be none and on the focus we are changing the background color from Gray to Blue that is uh blue 500 and the height will be full so we are giving the height full there but here we are giving the height 10 so this will apply the height of that search boox component according to this and when I will save my code so we got our input style something like this now uh let's style our button also so again uh here we will use a class name and on that class name we will pass a padding X of 4 padding y of 9 AIS BG will be blue 500 text white rounded and uh if you will notice there so here we are passing a rounded right and here we are passing a rounded left so on this one we are just giving a rounded left and on that button we are giving a rounded right so that this will look like this are joining together and after that we are giving again on Focus outline will be none and on who we are giving a BG blue 600 and uh we don't need this wh space wh space no app and height will be full now you can see that our button will look like this and we have also added a h effect there and there also now it's time to add a props for our search component so so here uh first of all we need a value prop and on change prop and uh on submit prop like when the user submit or click on that button so for that we will use on submit prop and our value will be string type and uh so what will be the type of our on change so for that we need to write on change there and after that we need to H over that on change so here you can see that they have given the type for our on change so we just have to Simply copy our type from there so I will just copy from there and paste it there simply like that and for on submit also again I will hover over there and here you can see that they have given the type so I will just copy it from there and paste it there and uh if you will see there carefully so they are just simply using a a change event handler there and after that HTML input element and on that one react do form event handler and HTML form element and uh after that here we need to pass uh props like that and uh we need to pass the values of our props there so here we need to write props dot on submit for submit and for on change which need to write props do uh onchange like that and for the value we will write value there and props do value and uh here we need additional property that is class name prop so I will just copy the class name from there and uh the type of our class name will be the string and uh this will be the conditional so maybe sometimes we need a class name or maybe sometime we don't don't need a class name so that's why we are passing our class name with the help of this question mark operator and let's save this but here we have defined the class name on the props but we are not using there so to use this we have to pass our class name on that place on that parent form class name so for that we will use a additional function that is called CN function so I have already created a video on that topic how to use or how to create a CN function I will give that video link on my description below but uh don't worry if you don't know about CN function I will also explain a CN function in this video so now let's create a CN utility function so for that we will come to the source folder and inside that Source folder we will create a utils folder and inside that utils folder we need to create a CN function so here first of all we will create a CN file with the help of of cn. TS and uh we need to export our CN function so first of all I will write export function CN and like this and uh after that we need to return our logic from there so to create our CN function we need to install our two libraries so first one is a Tailwind merge and second one is a clsx we will use a Tailwind merge to merge our Tailwind classes and uh we will use a CSX package to pass a conditional classes first of all let's install these two packages and after installing these two packages first of all we will import a delin merge there and inside that Tailwind merge we will pass our clsx package there and if I will hover over that so you can see that what uh we can pass inside that clsx so I will just copy it from there and uh whatever we need inside that clsx we also need the inputs on that CN function also so I will paste it there and uh we need to import this class value type so I will just press control space so this will show me the SS from where I need to import so let's just press enter or click on that s so this will import that uh class value type from clsx and let's copy this inputs and pass inside that clsx now we have uh successfully created our CN function now let's copy this CN function and uh come to your search box component and now what you need to do cut these classes and put a curly bracket there and inside that Curly bracket we will use our CN function and add a parenthesis there and pass your default classes and after that we need to pass additional classes with the help of this class name so we will write it like that props do class name so if anyone will pass additional class names there so this will add our classes in that place but in some cases if someone try to pass uh same class for example we have already applied a height 10 and I'm trying to pass a additional height for example height 20 so this will only overwrite that height and whatever we pass in last this class name will apply now here we have completed our search boox component and let's see the output so there's nothing changed in the output now we will see which API we are using and how we can fetch the data from that API and everything so for that we will go to the browser and you have to go to the open weather map.org and there here first of all you have to login and uh if you haven't created your account on open weather so first of all you have to create an account for your open weather and after that login on that open weather and after that click on that your username so there and after that you have to click on my apis and uh after that click on that and here I have created two API keys and uh if you want to create your new API key just give the name there and click on generate so this will create a new API key for you and after that copy your API key which you want to use and there we will create a new file that is env. local and inside that we will paste our API key so for that I will give that name next public weather Key and after that I will paste my API key there so currently what I'm doing I'm just pasting my API key there and after that I can use it globally anywhere I want and we are storing our API key in EnV file so that uh our API is so that our API is not exposed publicly and now let's come to the main page and first of all we will test our API so this is our API and here we have to replace our API key with our key so for now I'm so for now just let's remove this one and on the place of this I will copy my API key from there and paste it there and on the place of place I'm just writing a uh like punee I want to see the weather report for Pune location and let's copy your API and uh go to your browser and just paste it there like that so now you can see that currently we are getting all the weather data all information of punee location here you can see that if I will open on a different browser here I've installed an extension so that's why this is looking uh like this one and here now you can see that we are getting a data for our weather and uh on that here we are also getting the country and location name and coordinates and population all of and like sunrise and sunset so what we need to do first of all we need to create a type for our data so what I will do here on my API key and uh in that one I am passing a 56 so this will return us a uh maximum 56 uh like lists of data we are getting a 56 weather reports data with 3 hours of difference for example if you will see there so currently on this list so if you will see the time for that data currently there now you can see that this is 1200 but on that second one we are getting the time for that like 15 so on that data we are getting a 3 hours of difference so what I will do here for now I'm just uh getting a two data so now you can see that currently we are getting a very less data so what I will do I will copy all this data from there and go to the chat GTP and what I will do I need to create a type for our data so I will just paste this data there and tell that chat GTP to create a type for that data like that and whenever press enter so now you can see that this created a type for our data so what we need to do we just have to Simply copy this type from there and uh come to our code and we just have to paste it simply there so we have uh successfully created our types for our data and now we will see how we can fetch our data so to fetch our data we are going to use a react query so to use a react query first of all I will go to the browser and search for react query and uh here we will get the official TCH query react query website so we will go to that website and uh we will click on that read the docs and first of all we have to install that react query so I will copy the installation so I will copy the installation command from there and come to my code and firstly let's install the react query like that and now again come to that browser and click on that overview here they have given the proper example how we can use a react query so first of all we have to wrap up our main container with this query client provider so in our case layout. ESX is the main route of every file or our main or every project so what we will do we will first of all we will import query client and query client provider on that place so I will copy it from there and paste it there and uh what we need to do we need to copy this one and wrap up our body with this query client provider and we have to also use this query client so I will copy this one also from there and paste it there like that so now our error is gone and when I will save my code and uh see the output so now you can see that we are getting error because we are using a create context and uh create context only works in client component and here this component is or this file is a server component so what we need to do we need to convert uh this page in a client component so for that I will use a use client like that and save my file and and uh now we are getting another error like uh you are attempting to export a metadata from component marked and basically this is saying that uh we have written a metadata and we can only use a metadata on the use server components so for now we don't need a metadata so I will comment it there and this one also so now you can see that we are not getting any error and now our next step is to gain see there so on that example they are using API like that so I will copy this code from there and uh come to my code and we have to go to the page file and here I will paste that code and let's also import a use Query from react query and after that replace your API so I will copy this API from there and replace it with this one like that and uh we have to use the async function because we are fetching the data from the API or basically a weather API so maybe this will take a few seconds or delay so that's why we will use a async function there so to use a async function here we will write a async like that and inside that async we will fetch our data with the help of exos so let's see how we can use exos with react query so first of all we will install a exos so I will install exos with the help of npmi exos like that and if you're using a exos then we don't need to use a Fetch and we also don't need to convert this into a Jon with the help of exos this will handle it automatically so let's see how we can do that so inside that first of all we will uh store this in a variable so I will make this data or here we are using uh async so that's why we need to write uh a wait keyword and after that exos do getet inside that get we have to pass our URL or API link that we have to fetch so I will paste it there and we have to pass it with the help of this Str string like that and after that we have to return a data from there like this and now we have to give the type for our weather so the type for our weather is weather data and this will be like that and now if we will check our data so I will copy this data from there and let's console log the data so here I will write console.log and this is the data and let's see our data there so here we are getting error here because again here we are again using a create context in our page and we haven't defined our page as a use client so we have to use a use client there so here I will write a use client like that and now our error is gone and if we will see our output so let's see the data so here now you can see that we got our data properly there that uh we need now what we need to do we need to replace our API with that EnV API key so I will remove this API from there and here we need to use a btic and uh like that and on that back Tex first we need to pass our API key like uh process. EnV and after that go to your EnV file and copy the variable name from there and come to your code come to your code again and pass your variable there like that and if I will save it again and see the output and let's refresh so now you can see that we got our data again and uh why we need to type for data suppose if I want to additional data so I just just have to press Dot and now you can see that I'm getting an automatic Su like I want to see the city so I will just simply write city. country Dot and uh city. country and let's save and see the output so now you can see that I'm getting a in so in means India and let's see something else so uh let's see data do City do name so now you can see that we got our city name that is punee and now we don't need this code so let's remove this one now let's also create our loading full page loading component when our data firstly load so how it will look on the loading state so for that we will create a div and inside that div we will pass these class names that is flex items Center minimum height will be screen justify Center and uh inside that we will pass our loading text so this will be like that and uh inside that we have to pass our class names class name that is animate bounce and if I will save my code and see the output so now you can see that this will look like this now let's create these UI so here I will create a main tag and inside that main tag we will give the class names and the class name will be padding X3 and and uh Max width will be 7 XL and MX will be Auto and uh this will be flex and flex column and GAP will be N9 and width will be full and I'm giving a padding of 10 and padding top will be four and inside that div inside that div we have two sections if you will see the final output so first section is like today data so from this container to this container we have a 2day data and after that we have a 7 days forecast data so for that uh we will create a section tag and we have a two section tag so first section tag will be today data 7day forecast data so first of all let's create a today data so here inside that we will take another div and this div denotes to this container so this will contain this date and and this data so if you will see there so inside that we have also a two div or two container so here I will take uh like first one is a S2 and after that uh so let's first of all style this S2 div so inside that S2 div we have a flex and uh gap of one text will be 2 XEL and items Center so why I'm taking this uh Flex because if you will see there so firstly we are getting a day and after that we are getting a data so these two will be in a separate div or container so that's why I'm taking like this so for that uh take a paragraph tag there and now first of all we have to show a day so if you will see the data there that uh we are getting from our API so let's uh go to there and just write data there so now you can see there we are getting our lists and inside that list we are getting our date but uh with the help of date we need a but with the help of date we need a day and uh let me tell you another thing uh in that array we are not getting any forecast data from the back end uh we are just only getting the data by hourly wise hourly wise means we are getting all these list uh differentiate with 3 hours for example they are getting uh weather of like 1200 and after that 300 p.m. and after that 600 likewise we are getting all these data so we have to make some logic and uh differentiate with the differentiate with 7 days forecast data so here first of all if you will see on the UI on that place we need to show a day and date of first list of data so for that we will separate our first list data so for that I will create a variable uh like uh First Data and inside that first data we have a data do list and we need a first list like that and let's check that date so from that date we are not getting a day in the form of like Monday Tuesday Wednesday so what we need to do we need to convert this date into a day so for that we will use another Library that's name is date FNS so let's go to the browser and uh search for date FNS so there you will get that npm website and go to there so now you can see the use case of that date FNS but don't worry I will also show you the use case of this Library so first of all copy this installation code and uh come to your code and install this library and after installing our library we have to show a day on that place so what I need to do I need to use a format from date FNS so I will import it first like that and after that uh we have to use par ISO and we have to also import uh import this par ISO from date FNS date FNS like that and uh inside that par ISO we have to pass our data so our data is First Data do date like that and maybe we don't get sometime our data so for that case we will pass this empty string because we must have to pass something there otherwise this will show us a error and after that put a comma and after that we have to pass a second parameter of format like uh which type of format we want so to show a day we have to pass a e e four times like that so here we are still getting error so I've tried so many things why I'm getting error so I find out like on that latest version this is not working so we have to use a previous version so for that I will again go to that library and uh I will click on that versions and I will use that 2.3 version so when you will click on that one so here on the right hand side you will get that installation command for that 2.30 version so I will click on that one and uh open a terminal here and install this version so we have successfully installed this version now our error is gone so you can see that our a is gone and our code is working fine and if I will save this one and uh see the output so now you can see that here we are getting a Tuesday and uh let's see there now we need a date so for the date uh we will again go to the code and here we need another paragraph and inside that paragraph We will pass our code like that we will use again same as it is like format and inside that we will use par ISO and uh we are passing that date and after that uh we need a format like dd. mm do after that YY y so when I will save this one so now you can see that we got our date like this format and let's also give the class name there and I will give this text LG and this text will be 2XL and this will be LG and when I will save this so now this will look like this now let's create this component or this container so if you will see there so here one thing is common so here for this one I have created a common component and uh now I'm using a same component in this one this one this one and and this one also so what we will do we will create a separate component with the name of container and after that we will use this in that place so let's go to the code again and on our components folder we will create a new file with container. TSX again let's type tsfc so this will create a normal format function for our component and here let's style our Dave so by default we will pass with full and BG will be white and Border rounded Excel and uh we will also pass flex and uh padding y will be four and Shadow will be SM and uh now what we need to do we need to pass a children there and we also need a like if user want to pass a extra classes so they will pass easily so before that first of all we will use a div props like if the user maybe pass like any on click or any something so what we will do we will pass all these props there so let's see how we can do that so for that here we will just simply write props and what will be the type of that props this will be the react. HTML props div element so why div element because here we are using a div so that's why we need to pass a stml div element there and after that here we will use a triple dot or we can also say that rest operator and on that place we will pass our uh props like that so with the help of this props we will get all these possible props on that place and now we also don't need this container and extra div we can just simply autoc close so this will also like uh accept or give us a child props and now we need to pass extra classes if the user want to pass a extra class name so I will cut this class name and use a curly bracket there and here we need a CN function again and on that one we need to pass our default classes and inside that default classes we will use props do class name like this and here we have successfully created our container component and we don't need this type props so let's remove this and copy this container from there and uh now we need a container in that place so I will import it there like that so for that I will use a control space and press enter so this will import the container so on that container what we need we need this temperature and like feels like and this minimum and maximum temperature so here first of all let's give the class name there because we want to pass extra classes so here I'll just write simply class name and now you can see that we are getting all the possible props for our da with the help of uh this rest operator that we are using and inside that class name we have already passed a flex so we don't need to give a flex and after that we need a gap and we need a padding X of six and items will be Center so why I'm doing this one because if you will see there here we have a three elements first one is a temperature and uh this is Fields like temperature and after that uh we have a minimum and maximum so this will be in the form of column and if we will go to there again so on our left hand side we have our temperature and on our right hand side we have our weather icon and uh time and temperature so first of all we will uh create this one and after that uh we'll create this one so for our temperature let's give a div and uh inside that div we need this class name that is flex Flex column padding X4 and after that we need a temperature so if I will console log there and uh see the data so let's go to the our data so here on our main but here is one problem that uh we are not getting our temperature in Celsius we are getting our temperature in Kelvin so what we will do we will create a function that will convert our Kelvin data to a Celsius so let's go to the code again and uh on our utils we will create a new file and give that file name to convert Kelvin to celsius. TS and we need to export this function and we need to use this code so here we are accepting a Kelvin temperature and after that uh we are from that Kelvin temperature we are minusing 273.15 and after that we are using a math do floor to remove all the decimal parts and uh keep the integers maybe you don't know how to make this function like convert Kelvin to Celsius so what I have done there I have just simply go to the chat GTP and uh tell that J GTP like I'm getting the temperature data and I need that data into the form of Celsius so chat GTP understood and uh he just simply create a function for me so just I'm just using their function and this works perfectly fine so let's come to the page again and here what uh we will do here we will pass this function there and uh we also need to import this function and inside that function we need to pass our first data Dot main do temperature like that and here we are also getting an error because this function is not conditional and uh maybe from our data sometimes or maybe this is loading uh maybe this is on the loading state so we must have to pass something there so for that we will use a double question mark so it means like uh suppose on the left hand side our data is not coming so this will pass this data so for now I'm just passing this one but you can also do one thing you can pass a default temperature there so in that case what I will do I will just copy that temperature from there and uh pass it there like that and now we need a this temperature text that is uh something circle like that and when I will save and see the output so we are getting an error so let's see why we are getting error so I guess because I haven't saved this code now I I have saved all of this file with the help of control K you can see that I have pressed control K there on my uh this Bottom bar I have pressed save so with the help of this all of my pages are saved now see there here we are getting a 23 degree and also maybe you will not get this uh degrees text so you just have to Simply go to the Google and find for degree so you will get it from there or anywhere from there any any anywhere from the Google just copy it from there and uh use it on the on your code and now what we need to do we need to add this Fields like and this and this will be inside the span tag and the class for this span tag is will be the text will be 5xl and this will be inside that span tag and now let's create another paragraph tag and inside that paragraph tag uh we need to pass this class name that will be text extra small and Space X will be one so Space X means this will give a space of four pixel and after that I'm using a white space no app so with the help of this white space no W this will not break the line and uh inside that uh we will use text that is called Wheels like and after that we have to pass our Fields like temperature like this one and let's see the output so we will get our output something like this one and after that paragraph We have to take another paragraph tag and inside that paragraph tag we have to pass our minimum and maximum temperature so first of all let's give the class name for this paragraph tag so this will be the text extra small and Space X will be two and inside that we will use a span tag now we have to pass our minimum temperature and maximum temperature like this one so I'm again using that function and on that I'm just passing a First Data do mean. temp Min so we will easily get this data from our API suppose if I will press a back button so now you can see that I'm easily getting also a proper SS there and uh after that we have to put this degree sign and this Arrow text so you will easily get that arot text from Google and now let's save and see the output so now you can see that we are properly getting our minimum and maximum temperature and now if you will see there so we are not getting any space between this date and this container so let's give the space so for that here uh we will add the space on that place on the section and on that Dave that uh will contain our H2 that will contain our H2 and uh this container so let's also give the space there so here we will give the space of space y of two and let's see the output so here we got our space now let's create this so for that come to the code and here and after that we have our time and uh weather icon right so what we will do for that so for that again create a new div and inside that div we will add a class name so let's add these class names this is flex and we need a gap of 10 and on the SM screens we have a gap of 16 so uh by default on the mobile screens we will Gap we have the gap of 10 so 10 means 40 pixel and uh when this will come to the SM screens so we will have have the gap of 64 pixels and what we are doing if there is Overflow or more data so for that we are writing a overflow X Auto so with the help of this we will get our scroll bar and after that we are giving a width full and justify between and padding right and you know what is the mean of justify between with the help of justify with WIS and after that here comes our main part we need to map our data so here uh we are getting our data from our API from there so I will uh write data there so this will be the data and after that we have to map our list so so for so after that we will write data. list do map and uh parenthesis inside that Arrow function inside that Arrow function we have to create our main part uh we have to show show our main like weather icon and temperature so for that uh let's create another div there and uh first of all let's pass a key otherwise this will uh give us a error and here first of all we are getting a d means data and second parameter is a index and inside that key we will pass a i and after that let's give a class name for that div so for the class name we will use a flex and flex column so we are using a flex column because we have to show our data in the form of columns So currently we are working on that part so first of all we will show the time after that weather image and after that obviously temperature and uh after that we are giving a gap items Center or text small or font semi Bol and now first of all we have to show our time so for that again we will use a paragraph tag and uh inside that paragraph tag will pass our time so for the time first of all we will use a format from our date FNS Library so for that I will write a format and inside that format first of all we have to pass so again we have to use a parse ISO and uh now we have to pass our time so time will be T do DT text so with the help of this we will get the exact date from our data and after that we have to pass a format of our data so here I will write H do mm and a so with the help of a we will also get AM or PM and now let's save and uh see the output so yeah currently you can see that we are getting the time of 300 p.m. 600 p.m. or like 1200 a.m. like that so if you will see there so currently this is getting in a two lines but uh what we need we need in a single line so for that we will pass a class name that is called wh space no app and let's save this and uh see the output so yeah we got our data in a single line and now let's add a weather icon so before that first of all let's add a temperature and after that I will show you how we can add a weather icon so for our temperature let's again take a paragraph tag and pass our temperature like that like we have done before D do mean and temp means temperature and uh if we are not getting any temperature so by default we will pass zero and after that uh this is the degree text and let's save this so we will got our time and temperature now we have to show our weather icon so for the weather icon here we have to create another separate component and uh so let's see how how we can create our weather icon component so on that uh components folder here I will create a new file with the name of weather icon. TSX and let's write tsfc to create a sample format and inside that we have to use a image tag so I will import image from next image and here we have to remove scarly bracket and after that we have to pass our Source there so what will be the source of our image so I for this I have another API of open weather so let's go to your browser and see this one so now you can see that with the help of this API we will get our weather icons just we need to replace this like 01 D so if I will pass 02d so we will get a different icons with the help of this so we will use this link so in the place of source we will pass our uh API Source like that and uh after that let's style our image so here uh let's pass uh height and width for image so width will be 100 and height will be 100 and let's also pass alt so on the alt we will pass a weather icon and we have to also pass a class name so for the class name I will use a absolute there and height will be full and width will be full and uh here on that div let's use a CN function suppose in that case if we need uh if we need to pass any extra class names so again we will use a CN utility function there and inside that uh we will pass our default classes so our default classes is relative and inside that relative we have to pass a H2 H20 so h0 20 means height will be 20 and width will be 20 so here our height and width will be full and what is the mean of this height and width so with the help of this height and width this will load that much of our image on that quality means uh this will load 100 pixel width of height and 100 pixel of width this will load and after that we are customizing our height from there so mainly this height will apply and uh with the help of this we are getting that much of quality image and now we have to pass our icon name props there but here we also need uh all of our props there so in some case if we need to pass any extra property there so on that case what we will do here uh we will write props and after that what we have done for our container component so I will go to The Container component and I will copy this props from there and and paste it there like that and now we need additional prop that is called uh icon name so that I am passing there so I will pass it there like that and this will be the type of string so I will write it like that and we need a single end operator now this is fine and on the place of Icon we have to use a props do icon like that and here uh we need all of our props so here I will write uh props like that so with the help of this I am passing all of our props on that da now we have successfully completed our weather icon component so let's save this one and copy this component and come to our page and we need our uh weather icon component on that place so I will paste it there and just simply import my weather icon component there and uh we need to pass a icon name so if you will come to that data so I will press uh F12 and let's see the data and inside that data go to the weather and inside that uh weather you can see that we are getting our icon we are getting a value of 04n so this is the icon name that we need to pass in our icon component so here I will write it like uh D do weather and on that weather we need to access a first property and after that we need to pass a icon like that and let's save this and see the output so here we are getting a error because here we are using a open Weather image API so we need to configure this in an xgs so to configure this so first of all let's click on this one and uh after that uh copy all of this code and uh come to your code and go to the next config file so I'm just pressing a contrl p and finding a finding with the help of this next config and replace all of your code with this code now what you need to do come to your output again and uh see there that's what error I'm getting so this is saying that I have I haven't configured that host name so just let's copy this host name from there and replace it with example host name and uh we don't need this path name and port and let's save all of our files and reload this page now you can see that our error is gone and uh we got our images with the help of our API and here one thing also like if you will see there so currently I'm getting all of our images same uh because from our API we are getting uh these images but on that weather image API on the place of D if I will write n so now you can see that I'm getting a night image so what we need to do we need to create a function to like uh to separate our data like uh currently we are passing a night image or uh Day image so here I will create another function like get day or night icon and on that icon we will pass our current date and time and our icon name so what this will return us so if it is before 600 a.m. time so this will return a night icon and after 600 a.m. this will return a day icons so let's go to the code again and on our utils we will create another function so here I will come to the utils folder and create another function that is called day or night icon. TSX sorry dots yes and inside that uh we will use this function so this function will accept our icon name and uh date and time in the form of string so here what we are doing we are just checking there like uh if our time is less than 6 less than or equals to 6 a.m. and if our time is greater than equals to 6 so basically what's we are doing we are checking our like it's time between our 600 a.m. or 600 a.m. to 600 p.m. so this means our daytime so here we checking like it's the time if this is the day time so we are returning a day otherwise we are returning a and there so this function I have also created with the help of chat GTP so I will just copy this function and uh come to that code again so for now just copy this one and comment this above and here first of all let's use this get uh deite icon import this function and inside that let's pass a d dot weather and uh first of all we are passing our icon so dot icon like that and second parameter will be our date so for that put a comma there D do DT txt like that and let's save this and uh see our output so on that night and day we are getting a same icon because for n night and day we have a same icon so for example if I check for the icon so now you can see there we are getting our same icon so that's why here we are also on our output we getting the same icon and let's see the final output again so here basically we have done our main parts this today's date and temperature now let's create a UI for our 7 days forecast data so now we will create uh this UI so let's again come to your code and uh come to the page. ESX file and there we have created another section for our 7 days forecast data so inside that first of all we have a paragraph tag and inside that paragraph tag we have to write 7day forecast so this will be like this and uh let's also style this paragraph so this will be the class name of text 2XL and we have to also give the class name for our section tag so on that section tag we will give the class name of flex and width will be full and flex column Gap will be four now comes our main part if you will see the main app so inside that uh there is a same component that is repeating seven times so what we will do first of all we will create this component so let's come to the code again and uh give this component name called forecast weather detail and uh now let's come to the components folder and inside that we will create that file that is called forecast feather detail. TSX and now we will write TS RFC to create our sample component and now inside that uh we will create our forecast now we will create our forecast detail component so if you will see the final output so this component is wrap up with our container component so first of all we will use a container there so I will write container and uh we have successfully imported our container component and inside that container component but before we make this weather forecast I forgot one thing we have to also create this section so first of all let's create this section and on that section we have to show a description there and uh extra details on that place so let's come to the code again and we need to go to the page and after that we have to create another Dave and inside that Dave we have our two containers so first of all let's give the class name for that da uh that will be the flags and uh Gap will be four and inside that we have our two containers so first one will be our left and second one is our right so I'm just commenting it there and after that uh let's import our container there and inside that let's pass a class name so we will use this class name that is width will be fit according to our content this will uh resize our width and after that we are just passing a justify Center Flex column and ping X will be four and items Center and uh inside that we have to show a weather description so first first of all we will take a paragraph and after that we have to show a weather icon so what we have done there for our weather icon so I will just copy this one and uh simply paste it on that place but uh here on the place of data we have to write a First Data and on that place also we have to replace D with the help with First Data and this is giving us a error like uh this may be undefined so what we will do we will use this double question mark and here we will pass a empty string and we will do the same for this one also so this means in some case if we don't get a data so this will pass a empty string there and uh on the place of paragraph We have to show a weather description so we will what we will do we will uh show a first so we will show a description of our first data so here I will again use use a First Data dot weather and on that weather we have to select first element and uh we have to show a description of our first element like that and if we will see the output so this will look like this one and now we have to style our paragraph so here I will give this here I will give this capitalize and text Center like this one so this will look like something this now let's create uh this right da so for the right da we will again use another container so again I will just write a container like that and inside that container we have to change our background color so for that let's use a class name and we have to use a yellow color so I will pass a BG yellow 300 like that and this will have the opacity of 80 and after that padding X will be six and uh Gap will be four justify between and overflow X Auto and when I will save this So currently we will just get this output now what uh we need to do we need to create a separate components to show our weather details and if you will see there these components and these components are the same so what I will do I will create a same component for this one and uh after that we will use this component on that place also so now we will create a weather details component so let's go to the components folder again and here we will create a weather details. TSX file and inside that uh here uh we will write TS RFC now let's create our weather details component so on that weather details component we won't use any div because we are styling it from parent container so let's again come to the weather details and for our weather details component we have to create another component that is called single weather detail so here we will create a single weather detail component so here I will write function single weather detail and let's also create a type for our single weather detail props and here we will write a function like that and uh we will pass our props and props will we have this type like that and here we need a return and on that return we will currently we are creating uh this div that D will contain this description or after that image and uh this value data so that's why I have uh taken here three props that is information icon value so first of all let's create a parent T there on that parent Dave we will give the styling of flex Flex call justify between Gap two items Center and text extra small and uh font semiold and text PL and I'm passing a text PL with 80% opacity and inside that we need another paragraph that will contain information so I will use it like that class name and uh I'm using a white space no WP so with the help of this white space no wrap this text will not break into a separate line this will show our data in a single line and here uh we have to do like props do information and uh now I have to show icon on that place so here I will also pass icon from our props so I'm just writing it like that and here we will use a props do icon for the icons we will use a react icons so that's why I'm passing there text 3XL so this will apply all of our icon that we will pass on that component and uh now we have to show a value so for the value we will use a props do value like that now we have uh successfully completed our single weather detail component now what we need to do we have to just simply use that uh single we component on that place and uh we have to pass all these props so on the first prop we have icon and on the second one information and on the third one we have a value so if you will see there this data will be always same like visibility humidity wind speed air pressure or Sunrise I mean that information and icon will be always same for like you can see there I'm getting the same information there and for this one this one same same same same like humidity humidity wind speed wind speed so I will pass these data manually and uh we have to pass these values in our props so how we can do that so if you will see there first of all we need a i image and like and likewise here we are using a drop image and after that wind image and likewise here we are using a m image so for our I we will use this icon Lu I so for the I we will use this Lu e e icon and we and we will import this icon from react icons so I already know what is the icon name but uh you can simply go to the react icons and uh search for your icon suppose if you want to search for I icon so just simply go there and search for I like that then you will get uh your icon then you just have to click on that icon and and uh click on that component then you will automatically get copied your code but in that case I already know the icon name so I will just import import my icon so to import my icon I will just simply import it from react icons like that and here I have to import it from Lu like this one and now we have to create a props for this one like uh see the final output so we have to create our props for visibility humidity wind speed like that so what we will do we will create our props like this and uh this so this component will have these props like visibility humidity wind speed air pressure sunrise and sunset let's copy this props type from there and uh paste it there and now let's write it props there and here we have to write props do visibility and likewise and likewise we have to also do it for like humidity so I will just copy this one and uh change the name from visibility to humidity and I have to also change the icon so I already know the icon name so the icon is fi droplet and I have to also import that icon so I will import my icon like this one and likewise I have to import all of our icons and uh all these possible props so I will just copy and paste from my previous code and here what we will do we will pass some default values if like suppose if we are not passing any values from the API so for that what we will do here we will create another variable and on that variable we will destructure all of our props from our props and uh we will pass our default values and after that we will pass our values on that component like that and let's copy this weather details component from there and now we have to use this weather detail component on that place and let's also import our weather detail component here so here we have to pass all of our props so first is air pressure so for the air pressure if we will go to our data so let's press F Well there and uh see the data so on the main you will find that pressure so this is the air pressure so we have to just show it exactly like that so first of all we have to show a visibility so let's come to the visibility so when you will click on that City so on that list you will get the visibility there so it doesn't matter what uh you will pass on that component first this will apply all these in that manner that uh here we are passing now on that firstly let's pass uh visibility so for the visibility what we need to do so for all these data we have to select first data and uh from that first data we have to show all these additional data so here if you will see in our data so we are getting our data in a meters and if you will see the final output so we have to convert uh this data into a kilometers so for that again we will create another uh utility function that is meters to kilometers so let's go to the utility fun FES and here we will write me. 2 km do DS and inside that we will create this function that is called meters to kilometers and this will accept uh visibility in meters and after that this will convert this into a kilometers and I have also created this function from CH GTP so if you are stuck in any place so you can just simply ask to the chat GTP like I want to create this function or component or anything so let's just copy this one and uh we have to use this on that place so let's pass this function there and import our meters and now we have to use a first uh data inside that first data we have to pass a visibility and in some case if our visibility is not coming so we will pass our default visibility that is 10,000 that we are getting from our data by default and let let's also pass a air pressure so for the air pressure first of all let's use a back tix there and inside that back tix we will use a dollar symbol and inside that we will pass our first data do main do pressure so we will get our pressure and after that we have to write a HPA and when I will save and see the output so here we are getting error so I guess I have imported components two times so let's check there so there is something wrong in weather details component so let's check it there so here I have created this component on that place and I'm just importing it so let's remove it from there and now you can see that our error is gone and uh we are now getting another different error so I guess I haven't save this meters to kilomet function so let's uh save all of our files so now you can see that our error is gone and we are getting our data so here you can see that first of all we are getting our visibility and uh this 108 HPA pressure and we are also getting our others data so we are getting our others data because if you will see on that here we have passed our default values for our props so that's why we are getting our default values there now let's go to the code again and pass other datas so other data will be humidity so for the humidity again we will do the same here we will use a back tiex curly bracket and dollar symbol inside that inside that humidity so again we will use a First Data and Main dot humidity and we have to show a humidity in the form of percentage so so so that's why I'm writing a percentage there so we got our humidity 43% and uh after that we have to use uh we have to set a sunrise so for the sunrise so if you will see there on the data we are getting a sunrise and sunset of that City so here we are getting some values for the sunset and uh Sunrise so we will convert these values in a time so for that again we will use a date FNS function that we have downloaded previously uh so let's see how we can do that so here we will write a format and inside that format we'll use a format we will use a from Unix time and we are importing a uni time from date FNS function and uh inside that we will pass our date we will pass our data do City do uh so first of all we have to pass a sunrise and and after that uh we have to pass a format so format will be H do mm and here we are getting error because we have to pass some values so what I will do I will copy that value from there and because we must have to pass some values so that's why we have to pass it like that and we have to pass this in the form of string so there it means we are passing our sunrise data there and in some case if we don't get any Sunrise data or we are getting undefined values so we are passing this instead of this and let's add another parameter so we will do the same for Sunset so we just have to add a sunset there and uh after that uh let's add a wind speed and for the wind speed so if you will see there in the final output so we are getting our wind speed in a kilometer per hour but if you will check that data and here let's check the First Data do wind here we are getting our speed in m/ second and we have to convert this speed into a kilm per hour so for that again we will create another utility function so let's come to the code again and uh go to the utils file there and here we will write a convert wind speed dots and uh we will and we will create this function so with the help of this function this will accept speed speed in me/ second and uh what this will give us this will give us a speed in speed in kilometer per hour and let's save this and copy this function and uh use this function on that place and let's also import this function there and inside that first of all we have to use this and inside that function we have to pass a First Data dot uh wind do speed and if this is undefined so we have to pass uh some sample data so I will use this one and let's save this and see the output so now you can see that currently we not getting any error in this page and everything is fine and uh we got our UI like this now let's create a UI for our forecast 7 days so here what we will do for this one we will create a separate component and after that we will map this component according to our data so first of all let's create uh forecast weather detail component so here we have already created our file and now let's create this component fully so on that component firstly we have to use a container tag there and ins inside that we have another section and inside that we have two sections so first section will contain this weather detail I can and these data and another section will contain these data so let's create a section tag there and inside that let's pass a class name and let's also give the class name there so this will be the class name and uh we have already applied a flex there so we just have to pass a gap four and in our first section firstly we have another Dave and inside that da we have a weather icon component so let's import our weather icon component there and on that we have to pass our feather icon props for this component so what props we need first of all if you will see there here we need a weather icon and date and day and after that we need a temperature and feels like temperature and uh obviously minimum temperature maximum temperature so we need all these data and we also need all these props that is visibility humidity wind pressure so what we will do we will get these props from our previous component so let's see how we can do that so firstly we have created a props for our these data that I have told you before like icon date icon date day temperature all these and now we need all these props also so for that we will use a extend keyword and which type we need we need these weather details we are already exporting these props from that place so I will just copy it from there and uh come to my weather forecast detail component and I will just paste it there and let's press control space and import so this will import and extend these props so I will use this on that place and let's give this name a props like that and what I will do I will pass some I will pass some default values for these props so what we have done for this component that is weather details we will do the same for this forecast weather details so this will be something like this and now first of all let's pass our now let's pass our props there so here we need a icon name and on that icon name we will just simply pass a weather icon and uh after that uh and after that we have a paragraph inside that paragraph we have a date and after that date uh another paragraph and inside that graph we have a day but uh our day will be something small so I will give this text SM like this so if you will see in the final output So currently we have just created this part now let's create this UI so for that again uh use another div and uh inside that div we will use a class name and this will be the flx and uh flx call and padding X will be four and first of all we need a temperature so here we will use a span tag to show our temperature and obviously we need to convert our temperature into Kelvin to Celsius so that's why I'm using this Kelvin to Celsius function there and now we need our paragraph tag inside that paragraph tag we need to we need to show our Fields like temperature so this will be something like this this will be text extra small and space between these fields likes and temperature will be 4 pixel so that's why I'm passing like that and uh I'm passing also white space no wrap so this will not breaks into two lines and after that let's show the description so for the description we will just simply write description so this is our description for our weather data and now we have completed our this uh left section now let's now it's time to create a right section so for our right section again we will create a section tag there and inside that we will use these class names that is Overflow X Auto and flex justify between Gap 4 padding X4 width will be full padding right 10 and inside that we will use our weather details comp component so this is our weather detailed component so let's copy this one and import this component on that place and now we need to pass all these props all these props of this one so here is a one trick like uh we can also pass it by one by one like uh here we can do like props do air pressure something like that but uh here is another trick what we can do we can just simply write curly bracket there and triple Dot and simply we can write props and we can simply write props so this will automatically get all of props on this one with the help of this and uh that's it for this component that is forecast weather detail component and let's save this and copy this component and uh come to the main page and we need this component on that place and here we have to pass all these props that uh we need there but before that we need to do one thing that is uh if you will see on our final data so on that object here we are getting a 40 arrays so what we need to do we need to make some logic and uh we need a one data for every single day and on that 40 data we are getting four or five data for the same day so what we will do we will create some logic and with the help of that logic we will only filter out a single data for every day and store it in a separate array and after that we will map that array so let's see how we can do that so for that we will use this logic and before that here we are getting an error because I'm using a set so if you are getting any error while using a set keyword so you have to go to the ts. config file and here you have to write instead of es5 that is you have to write es2015 and let's save this file and uh now you can see that now we are not getting any error regarding our set and let's understand this logic So currently what's going on there this is filtering our data date wise so with the help of this logic we are getting a unique dates and after that we are mapping that unique dates and from that unique dates we are extracting the data here we are filtering a daytime data like after 6 a.m. and uh before 600 p.m. so let's copy this array and uh we need to map this on that place and uh let me tell you one thing I have created uh this logic from chat GTP means I know what to do I have just explained the chat GTP like I need to create some variable in that way that uh this will get the data in the DA for that this will UniFi the data and uh give a single data from every day something like that and let's copy this data and uh now we need to map it there so let's use a cly bracket there and after that use a map inside that map use Arrow function and inside that Arrow function let's map this component and first of all let's pass a key so here firstly we have to import this components so that's why we are not getting a stion for our key so now you can see that we are getting all SS for our props so firstly let's pass a key and uh inside that key before passing the key let's pass uh D and I so d means data and I means index so in the key we will pass uh I and after that we will pass our all of our props so I'm just uh passing all of our props like that so if you will see there I have passed a description with the help of D do weather and on that weather I'm selecting a First Data and after that I'm passing that description and for the weather icon I'm just doing the same and for the date what we have done previously I'm just converting that date in a proper string format but on that time we need our date in in that format so that's why I have written a dd. MM likewise we are passing all of our props that uh we have previously passed I haven't done anything new there so that's why I have just copied this code from my previous project and paste it there and now let's save this and uh see the output so now you can see that we got our UI like this but uh there is something wrong this is not in the proper Center so let's go to the code and see what is the issue so here on that name we have to pass our class name that is flex Flex call and GAP will be one and items Center and now you can see that we got our data in a proper form and now there is two things left when the user will search so we have to apply a search functionality and when the user will click on that button so we need to show the weather report for that current location so first of all we will create our search and after that we will create this functionalities when the user will click on that button so this will show the weather data for that current location so let's go to the code and uh we have to go to the Navar component so I will click on that Navar and now we are inside the naar component and here what we need to do if you can see there on a final output so when I'm start typing like Delhi so now you can see that we are getting a su so firstly let's uh implement this functionality so for that we will create some use States so first of all we need to create a state for this value and on change so here uh we will give this value name to a city and set city state and we have to also import our use state so we will import our user state from react like that and uh we have to also create our error State like uh if we will go to the final output and suppose if I am typing something typing anything and uh this place is not exist and when I'm trying to press enter so we will get this error like a location not found so for that we will create a error State like that and now we will create a use state for our sessions that will store our sessions and another state to show our SS or not so this first state will store a array of our like SS and uh second state will store a like bulling true or false our SS is open or not and on that search value we have to pass a city and uh for we have to also pass on Sumit so so we will pass it later and we have to also pass a on change and uh for the on change we will create another function to handle input on change so we will create uh this function there handle input change and after that this parenthesis curly bracket open and first of all what we will do when user is start typing and first of all this function will be the async function because uh on that on change we will get a SS from our API so we have to make this as a async and here first of all when the user will start typing on that input box so we have to set a city so I will use a set City there like that so this is the set City and uh we have to pass that value that we will get it from that function and the type of that value will be string so let's copy this one and uh pass pass my function there and we will use e and we will pass our function like that and here we will pass our value like e. Target do value like that and here we will get our value so now we have to pass our value like that there and now on that place we have to check a condition if our value do length is greater than three then we have to fetch our SS data so we will write it like that like uh if is equals to or greater than three so we will search for our SS and on that if we will use a try catch block and on that try we will uh fetch our data so here first of all we will uh write our uh create a variable like const response and uh this will be await because here we are using a async and a wait means if this operation will take some time so so that's why we are using a wait so it means if this will take a time so this will wait and uh after that here we will use xos to fetch our data xos doget and now on that place here we will pass our API and uh we are getting this value from there value on the place of value we are passing a place like whatever the user will type so this will search for that location and now we have to pass the API key so what I will do on top of that function I will store that API key in that variable and with the help of this process. env. next public weather Key and I have shown you before from where we are getting this uh process. env. next public weather key so we have to go to that file that is uh there on my left hand side this is env. loal and here I have defined my API key now inside that try block let's create another variable that is called sus and this will be equal to the response do data do list do map and uh after that uh here we will use Arrow function and for now I'm just using a item and this will be the type of any now what we need to do we need to store a name of that place that will match so here I will write a item do name so this will map over there and store all of our Su in a s variable now we will use a set suggestions there and inside that set suggestions we will pass our suggestions and here we will set our error to null if everything is okay so we will set our error is to empty and after that here we will also uh open our s box so for for that here I will write a set so SS that is true and inside that our catch block what uh we will do we will set our SS to a empty array and we will also hide our s box or S container so for that again we will write like set s SS and here we will set it false and now comes to the else part so here I will WR uh else and inside that else we have to do the same that uh what we have done for our catch block so I will copy it from there and uh paste it there and we are using a user State there so we have to also make this component as a use client so here we will write a use client on top of our file and now we will come on the UI and on the UI we have to show our session so what I will do for the SS I will create another component so I will write a function there and this will be the s box and here we will use a UL tag and inside that uh UL tag we have our suggestions so for the suggestions I will use a Alli tag so first of all let's style our uh U tag so for U tag we will use a margin bottom of four B white absolute border or top 44 pixel left zero so here we are using absolute so we will use our session box there on that place so here we will use a class name and uh we will pass a relative class name there so this s box will be relative to that container so that's why we are passing that like uh top 44 pixel and left zero so this will Define the position of our session box and after that we are passing our simply border gray 300 rounded MD and minimum height will be 200 pixel and flex and flex call Gap one padding y padding y two and now let's also give the styling for our Alli so for the lii we will use a cursor pointer and padding will be one and this will be some rounded this will be the rounded of 4 pixel and on H this background color will be PG gray 200 and now let's create a props for our s component so these are the props of our s box component first one is associations so with the help of this we will toggle our s box and uh with in that SS this will contain the array of our SS and uh with the help of handle s click click so when the user will click on that uh button like if I will search for any country so now we got our sessions and if I will click on that button so here on that place we are applying a handle session click and after that if we are getting any error so we will also pass that error with the help of that prop so now let's use empty fragment and wrap up our code with with that empty fragment and here we will use uh some conditions to show our SS conditionally so firstly so firstly we have to write sociations is true or not and after that we have to check the length is greater than one or not so for that here we will write uh cations do length is greater than one or otherwise if our error is true so so again we will show our s box because we have to show a error on our s box and we will again wrap up our code like that and here again we will use a end operator and on that end operator if this condition is true so now we have to show this code and if I will format so this will look like this and now what we need to do inside that uh UL tag if our error is true so here we will use a curly bracket and we will write error and end operator and sus do length is less than one it means our s is zero or we are not getting any SS and end operator so what we need to do so we have to show this Ali and this Ali will contain a error and here I have also passed a text red 500 and padding one and inside that we are passing our error and uh after that we will pass our s with the help of map so again use a curly bracket and suggestions. map inside that Arrow function and uh inside that Arrow function we have our lii and obviously this will contain a key and first parameter will be D and second will be I so let's take this item and on that key let's pass a I so I means index and inside that Ali we have to pass our item uh we can also say that location name or place name and let's save this code and uh and when the user will click on that particular SS so we have to use uh on click there and and on that on click we have to pass our handle s click so we will use Arrow function there because we have to also pass our icon so first of all let's take a handle s click and inside that uh we have to pass our item like that and we are getting our item from there and let's save this and on that s box we have to pass all of our props so here we can pass our props so here you can see that for the error City and S and so SS I have already created a user state so we can simply pass it but uh for the handle SS I haven't created any function so let's just create a function for handle s click so this is our handle s click function so this function will accept a value or string so what we will do when the user will click on that uh handle click but button or we can say that uh particular s so we will set that our city to that value so that's why we are using that set City that value and after that we will hide our s so that's why we are passing this set Association is false and there is a one trick uh that I have that I'm using lots of time like uh we can simply also pass our data like error equals to error or like handle s equals to like uh copy this and paste it like that we can also pass our data like this but here's another trick that we can do just simply copy all these data and uh put a double curly bracket there and use a spread operator there and paste your props there so now you can see that we are not getting any complaints or error there and now let's create a function for our onsubmit so we will create a function that is handle submit search so I will just write here function handle submit search and inside that function this will accept a parameter like e what will be the type of e so you already know what is the type of e like uh if I will go there and simply type and simply write my function with the help of using Arrow function and when I will H over that so now you can see that I got the type for that uh e so I will copy that type from there and paste it on that place and first of all when the user will submit so what we need to do first of all see there when I will click on that so this is our current application so when I'm clicking on that one so now you can see that our whole page is refreshing so we have to avoid to refresh our page so for that here we will use a e do prevent default so with the help of this this we can prevent our page from refreshing so I will copy this function from there and use my function on that on submit like that and let's save our code and uh when I will click on that so I'm clicking and pressing the enter but my page is not refreshing and let's write a further code there so here we will write a condition if our suggestions do length is is equals to equals to Zer so it means uh we are not getting any sus so what we need to do on that condition and I have clicked on that button so we have to show a error state so here I will write a set error and on that set error we have to pass like location not found it means on the else condition means our soltion length is greater than zero so here uh we will remove remove our error so for that here first of all we will set our error like uh set error and our error will be empty and uh after that we will set our city and here we will also set our like set suggestions is false and uh when I will save my code and uh when I'm searching anything so now you can see that I'm getting a proper sessions and when I will click on that one so my search box is working perfectly fine but see there when I'm clicking on that one so this is not working perfectly that uh we want so here what we need to do whatever the city name we are getting here we need to pass it from our uh this level to page level so if you will see on the code so if I will come so let's firstly close all the files and uh let's firstly come to the page and on that page page here we need to change our city So currently I'm just passing a Pune but here we need our city whatever we are getting on that navbar search so for that we have to do something like we are setting our city from our naar component this will somehow we have to get our city on our page and after that uh if our city if our city is changed so this API or data will again call and after that we will get our data so for that we have to use a global state so for that we will use a jotai so let's see how we can use a jotai global State Management so let's go to the browser and search for jotai and uh here you will get the official website of jotai so this is the global State Management solution so first of all let's install a jotai so let's copy this npm code and uh and come to your code and install the ji like that and after that in your app folder let's create a new file that is called atom. TS so here we will create our atoms or we can also say that here we will create our state and after that uh we will Import in this file and in our navare file so on our atom file there is a main State and we are just import it uh into a page and Nar so this will work so let's see how we can do that so first of all we have to create a place atom so what we will do we will use a export keyword and here we have to create a variable so I will just simply give that const and uh variable name that is place atem so currently we need a atom for our place or location so that's why I have given this name as a place atem and let's also import our atom so we need to import our Atom from jotai and uh here like we here like we use a use state so we have to pass some default values So currently I'm just passing a default place that is Republic of India and now what we need to do let's copy this place atem and uh come on the navbar component and after that here what we will do we will exactly use it like we use a US state here I will just simply create a US state snpp it and uh after that on the place of second we have to use our place atom and on the place of use State we have to use a use Atom from zai and now we can give any name that we want but uh we have to give a name like we give as a user state name so we can give any name but here we need a place so I will give this place and here uh you need to give a set place like that and now what we need to do we need to set our place when the user will click on that submit button or like enter button so we need to pass our set place there and here we need to set our place so our place is City so this is the city and when the user will click on that button or this button So currently I'm getting error so let's save our file because I haven't saved my ATM file so that's why we are getting error so now our error is gone so I'm talking about this city when the user will click on that button so what this will do this will store that uh City on that variable now we are using this as a global state so what I will do I will just simply copy this one and come to my page and paste it there like that and uh we can give this any name that we want this uh doesn't matter the main thing is that this value should be same that uh we are giving there so we have to firstly import this one and after that we have to import use atem from chai and this is coming from that atem from there and uh now we have to do it like uh we do for like we do as a for user state so we need this place on that uh pun so here uh we will use a curly bracket and dollar symbol and we will pass our place like that and uh when I will save my code and see the output so let's refresh and search for like Del and click on that one and search so now you can see that this is not working so this is not working because when any data will change so we have to refetch that data so for that on that uh use Query we are getting another parameter or prop that is called refetch and we have to call that refetch when anything will change so for that we will use a use effect so let's write a snipp it for our use effect like this and let's also import our use effect so let's copy this one and uh write here import use effect from react like that and after that we have to pass this refetch function there and here on that place we have to pass a parameter so the parameter is place when our place state will change so we have to refetch our data and here we have to also pass a second parameter like when our refetch will change so we have to also refetch that data and let's save this one and uh let's search for Val and click on that so our data is changed like if I will search for so now you can see that currently here we are getting 13° temperature and let's search for my location that is Merit so let's click on that and click on that one so now you can see that our data is changed but currently we are not getting any loading State and uh our name is not also changing on that place so first of all let's change the name and add a loading state so to change the name on our Nar we will pass our name from there so let's go to the Nar component and here let's create uh one prop that is called location and let's import our location there and uh now what we need to do here I have written somewhere India so in the place of India we will uh write it location and again we will go to the page and on that page we have a prop of location and on that location we will use a data do City do name and let's save this and now you can see that we are getting our city name there uh let's search for any other city like uh if I will search for Pune before that see the current temperature for merit and let's click on that button so now you can see that our data is changed and we are getting currently 18° temperature and here name is also changed but uh the main problem is that we are not getting any loading state so for that again we will create another state and this state will be also the global state so for that again come to the atom file and here we are creating a loading City atom and by default our loading will be false so let's copy this loading State loading City atom and uh come to the name bar and like we have done for this place item we will do the same for our loading so here in the place of place item we have to pass a loading item and let's import this one and on the place we don't need a first parameter so we just write it like that and uh for the loading State we also don't need a loading there we just need to set a loading from that place so I will just write it like that and uh for this on the place of set place I will give this as a set loading like this and here we are getting error because these two are same so let's give this a place and now this is different so that's is fine and now we have to handle our loading state so whenever the user will click on that handle submit button handle submit button so we have to control our set loading so first of all when the user will click on our button so we have to set our loading will be true and uh when we are inside that condition like uh our length is equals to zero our s length equals to zero so we will just simply make it false like that and on that else condition we will also make our loading will be false it means our like data is fed and we have to make it false and what we need to do we need to perform these three operations after like5 second so that we can see a loading State because our data is uh getting like too fast so that's why we are not getting any loading state so for that we will use use a set timeout and inside that set timeout we will pass our uh these three parameters and here we have to pass our time so I will pass it like 500 so 500 means. 5 Second and uh let's save this and uh we have to also use this variable in our page so I've copied from there and let's use it on that place so let's also import our loading City atem on our page and if you will see on our final output when I'm clicking on that so we are getting a skeleton loading components so we have to also create this one so let's come to the code again and uh here what I have done I have uh just simply copy all of my code from there from Main and uh go to the chat GTP and uh I have told the chat GTP to create a skeleton loading component for me and here now you can see that what output I'm getting so this is the function that uh chat GTP gave me I have just told him that uh I need to use a animate pulse because I already knew about the animate pulse so with the help of that animate pulse we are getting our div in the form of like a pulse and uh now we will use this skeleton component in as a conditionally so what we will do here uh we will use empty fragments and on that empty fragment we will pass this one and uh if our loading city is true like that so we have to write it like a loading City there and we don't need a set loading on that place so this will be like this and now if our uh loading is true so so we have to show this weather skeleton loading component so I will copy it from there and paste it uh like that and if our loading will true so this will show our loading component otherwise this will show our main data so I have to put a c bracket there and here I have to put a columns now our error is gone and let's see the final output and if I will search for any data like um Delhi and click on that so this is our main app that we are currently working on and now you can see that we are getting a proper loading skeleton component and uh now this is looking good and on that place we are also getting a proper name for our location now only one thing is left or not one thing that is there's two things is left firstly uh let's create a function for our like when a user will click on that button so we will get our current location so let's go to the code and go to the Nar and uh here we have already created a icon for our current location so first of all let's add a title like your current location so what is mean by the title so when anyone will hover over that so you can see that we are getting a title like your current location and now we have to create a function like uh when anyone click on that uh function when anyone click on that button so you have to show a current location so in that case we will give that function name that is handle current location and uh let's create current location function on that place and on that handled current location function first of all we'll check the condition like if Navigator do geolocation is true then then uh we have to use a navigator do geolocation do get current position and here inside that we will use a async function so here I will write async or after that Arrow function and inside that parameter we will use a position so this will gives us a position so let's give the any name so I want to give a position name and inside that let's ract our longitude and longitude so for that here we will write a const curly bracket and from where we have to extract so we have to extract from position this will be equal to position dot C and what we need to extract we need to extract uh latitude and longitude and after that we have to use a try and catch block so inside that try we have to set our uh like when I'm clicking on that button the we need to set our loading is true so for that we will write like set loading city is true now we have to fetch our uh data with the help of longitude and longitude so for that we have to write our API in that form like weather or question mark and after that we have to use a let parameter in and this will be equal to that longitude and after that use end and and uh pass a l and Lawn it means we are passing a longitude and after that pass your API key like that and here after that again we will use a set timeout and we will make our loading false and uh on that set place that before we are setting our place with the help of that handle submit before that we are setting our place with the help of that handle sessions on click so now we need to set our place and we are getting our place name from our this data and on that cat block if we are getting any issue so we will make our uh set loading state to the false and let's save this one and see the output so when I will click on that button so this will ask me the permissions to allow your location for the first time so I will allow this one and now this is searching for my location and and uh this is my current location and now we I'm getting the current location data now again let's click on that Delhi so so search for Delhi and now if I will again click on that uh location current location so now you can see that I got my current location there now we have completed our search box and this current location but uh one thing is left like if I will go to the Mobile screen so now you can see that our Navar is not responsive so let's make our Navar responsive so for that let's come to the code again and here on that da we will hide it on mobile and uh show on MD screen so for that we will use a class name that is hidden so by default this will be hidden on Mobile screen and this day will show on MD screen and uh after that here we will use uh this empty fragments like that and after that nav we will use this again same da there so I will just copy it from there and paste it there but uh here we have to change some conditions and we have to also create a parent uh container for this da so for that I will create another section and uh wrap up this code with this section and this section will contain the maximum width of 7 XEL and padding X will be three and on the mobile screens this will show but on the MD screen this will be hidden and uh we don't need this code like hidden or MD on that place and now everything is fine there so let's save this and now you can see that on mobile our UI will look like this one and uh let's see on a proper mobile So currently we are checking our UI in like iPhone XR and uh now if we will see on uh different screens so this will look like this so our application is fully completed and uh this is fully responsive so that's it now our weather app is fully completed so don't forget to like share and uh if you are new to my channel so don't forget to subscribe my channel because I upload videos regarding next year's Tailwind CSS and typ script until then I will see you in next one