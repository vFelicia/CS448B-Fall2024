learn how to build a fully functional Google Drive clone with larvel and vue.js you'll learn how to implement functionality such as uploading files sharing files searching for files and more and at the end you will learn how to deploy to a custom domain on a production ready environment zura the kolic developed this course he has over 11 years of experience as a develper and has created many popular courses hello everyone in this video we're going to build fully functional file manager type of application with laral and inera with vue.js the application will be very similar to Google Drive we're going to implement some basic functionalities such as creating unlimited depth folders uploading files and uploading folders searching for the files or folders but we're going to also Implement some Advanced functionality such as sharing files and folders to another users in this application by email we're going to implement fully functional trash system you can easily move your files into trash and recover them later or delete them permanently we're going to also Implement favorite files page you can add your desired files into start section and then you can easily find them in the future at the end of the video we're going to deploy our project in production ready environment with a custom domain and we're going to also connect to awss 3 packet and Implement uploading files into a WS S3 bucket I'm going to show you how you can set up your AWS account how you can create a role in policy how you can get your access token and key and configure your Lal application to use the access token and key for uploading files I have been working on this project for more than three months you can check the entire source code on my GitHub and you can even find that the initial comet is made more than three months ago if you find this video helpful please give it a like who am I my name is zura last 11 plus years I have been working as a professional web developer and have built dozens of projects around PHP and laravel if you're interested more laravel PHP and JavaScript related content you can check my YouTube channel the Cod holic or my website the cool.com where you can find some premium courses such as building and ecommerce website withal VJs and tyon CSS before we jump I would like to say big thanks to free code camp for doing such an amazing job and providing free educational content for everyone all right no further Ado let's start building our project before we start building the project let's have a look at the quick demo the entire application is running with a larel sale for local development environment so we have this email sending service so whenever you open the website you see login and register buttons right there there as soon as you register you will receive an email in this email sending service mail pit you whenever you confirm your email then you can log in or you already will be logged in I'm going to click log in and when you log in you will see the following screen on the left side we see different types of pages my files shared with me shared by me or trash and this is the main area where we see all the files which are in that specific folder in this case my files and we have uh infinite scroll implemented right here so if I start scrolling down below more files and more content is simply loaded we have possibility to search our files or folders through this main S search area we also have possibility to uh search only files which I have added in my favorite section at the moment I don't have anything but if I add two files in the favorite section I can click on these I see only only those two files and we have possibility to download files as well if you select multiple files let's select this and this and when you click download it's going to create zip out of these multiple files and just download that if you select only one file and click on download it's going to start downloading those this only file okay obviously we have possibility to delete um selected files and I'm going to right now delete these two files okay selected files have been deleted and we can see those files under trash as you see right here we have possibility to select everything in the trash and click delete forever or we can click restore which will obviously restore the just deleted files if you go in my file section we have also possibility to create new folder and upload files and upload folder okay I'm going to upload um single folder right now let's upload this ecommerce products upload okay and six files have been uploaded so whenever you upload file or folder there's a background process running at the very same time okay so we immediately see the feedback that the file and the folder was successfully uploaded but the background job starts working which uploads those files into awss 3 okay so we save all files into awss 3 and so that we don't want the upload process first from the browser to the server and from the server to the awss 3 it it will take much more time so we immediately show the user hey we took your file and it has been uploaded and then simply in the background we upload that on awss 3 okay so we have possibility to obviously share the files and folders to another user so when you click on share you have to enter the email address of another user in the same system and as soon as you do this and click on submit the folder will be shared and then the user will be able to see that under shared with me section and you will be able to see this under shared by me section because that's going to be the file you shared let me try to share this to a user if I remember correctly I have this in the system marry example.com I'm going to click on submit selected files will be shared to Mar example.com if the email exists in the system so if the email doesn't exist this obviously it will not be shared okay that's the main thing but we don't get um the error if the email doesn't exist if I go in the shared by me I don't see that probably because the email does not exist in the system but believe me this is the functionality that exists okay so here I just registered with another user Mary and I got the email in the mail pit and I'm going to click this verify email address and I am authorized now in my Incognito browser with user Mary okay so I can just collapse this and now try to share these screenshots to Mary at example.com I'm going to click on submit okay I get the same notification and if I go in the shared by me now I see that screenshots actually is shared by me to someone else and if I check this Incognito browser I just reload the page under shared with me section I see screen screenshots and I can just click on the screenshots and just download it if I want um or or actually I don't have any other actions except that download so if something was shared to me I can easily download that and when you share file or folder to Mary Mary actually gets an email that files hello Mary user Zur shared the following files to you obviously the template doesn't look very nice but the main thing is that the function functionality is there and we send the email when the file or folder is shared to Mary the functionality is basically that but believe me there are many many things to learn while building this application now let's start working on the project and the very first thing is to install a laral project I'm going to open the laral documentation and go to the installation section and I'm going to click getting started on Windows this particular approach basically requires Docker in wsl2 make sure you have Docker in wsl2 installed on your operating system Windows in this case if you are on Linux or Mac you don't need wsl2 you just need Docker now if you scroll down below we have the following command curl you need curl command also in your terminal I'm going to open now my Ubuntu which I actually have inside my Windows operating system and right here I'm going to copy and paste however generally I put all my projects under www folder inside my ubun operating system so I'm going to paste this comment right here and I'm going to only change the application name in this case the example app is not good for me I'm going to call this file manager so I'm going to hit enter that's going to take some time it's going to first download the lateral project then run all its depend Tendencies then it's going to spin up the docker images so download those images and start the containers as well if you are running this very first time in your um terminal uh if you are running this project very first time using Docker in your terminal it's going to take some time after waiting for a couple of minutes here it asks me my Ubuntu operating system pseudo root password I'm going to provide the password and here it goes so it actually downloaded the project and run then downloaded all the docker images and uh then we have the project actually set up and ready we just need to go inside file manager folder which we just named and then from inside I'm going to execute vendor Bean sale app if you're new to Docker there's no need to learn like Basics or anything about Docker we just need to start the application using Docker and stop it whenever we don't need and we're going to also go inside the containers and run Artisan commands from inside the container okay I can execute this vendor Bean sale app but I'm going to actually open the project right now in PHP stor and continue from there first I need to open the file explorer so I'm going to just type explorer. XA and specify the dot as a current directory then it opens the following directory uh this is the file manager which we're going to open I'm going to right click on this file manager and open folder as PHP storm project it's going to take few seconds until this is opened it will ask you if you want to trust this uh folder I'm going to trust project and here it is opening all right now let's open Terminal and from the terminal of PHP storm I'm going to execute the command to start the project and also go inside the container if you are not using PHP torm and you using like a vs code for example it's going to be pretty straightforward we code obviously has its integrated terminal and you can execute the commands from from there all right just make sure from the vs code you switch to WSL terminal because any comma needs to be executed from inside the Ubuntu right now I am inside the Ubuntu operating system and the terminal basically supports any command that Ubuntu operating system terminal supports all right now let's execute vendor Bean sale app and I'm want to specify also DHD to start the processes and spin up all the containers in a detached mode let's hit the enter it's going to take a few seconds if you're running this very first time all right the containers are created and they are starting and they are started now we need to go inside the container there are a couple of containers I'm going to just type Docker PS and hit the enter we have the following containers we have the main container which is for the application we have some selenium for testing we have this maele search container MySQL obviously we have also Ries and we have this mail pit which is for fake mail sending we need to go inside the app container and execute any commments from there so I'm going to type vender being sale bash now I am inside the main container and from here I can execute any Artisan commments like like PHP artisan del and as we see Artisan is available and it's right there and anytime you want to execute your Artisan command you should do it from here now let's run mpm run Dev and let's also open browser by default the we need to check this on Local Host because we just started the project and it's on Local Host when we run mpm run there we don't see anything because we haven't run mpm install but the application is right there let me zoom out slightly and this is the L welcome page and now let's execute mpm install Okay npm install was completed and now we are going to install laravel Breeze to install laral Breeze let's open the documentation of laral Breeze and if we scroll down below we're going find the installation instructions first we need to require it as a Dev dependency in the project so I'm going to copy this command and paste it right here until this is installed let's have a look what we need to do we need to execute Breeze install command to install all the necessary U like files and assets then we're going to execute uh Artisan mic rate and mpm install and npm run Dev all right let's follow it step by step and I'm going to copy this PHP IGN brief Breeze install Breeze was actually already installed using composer now let's execute PHP RM Bree install here it goes it asks which stack we want to install and in this case we are going to use a view JS so I'm going to choose um number two right here would you like to install Dark mode support I'm going to type no in this case would do like type typescript support no in this case as well you like to install inertia server side rendering no in this case as well and no here as well all right now it's U installing all the necessary packages like inertia and every package that is dependency of the inertia actually and it's also automatically running mpm install and mpm run T so whenever this command finishes working we will have a vue.js inertia configured and working in our application mpm run um Dev will be also running there actually mpm uh run build was run and we have those build files but if we want to start the development mode we need to execute mpm run de let's check this first in the browser so if we reload the page on the right side we see login and register if we click on register or login on anything else we see that the URL uh changes is but the full reload doesn't happen because that everything happens through vue.js right now all right now we have this in a built mode but because we're going to actively work in modify layout we need development mode so mpm run Dev hit the enter all right here we have that up and running now if I reload the page something is broken that is kind of issue when you run your uh mpm run Dev command with uh Docker so it doesn't see basically the following um following uh address so in this case we're going to open Vite config file right here and maybe before plugins we need to add server HMR host to be a local host okay so we configure that the hot module replacement host is a local host we save this and I believe it's going to be automatically reloaded if I just reload the page I see login page and now our development server is up and running we can go on the homepage and register and it's there it's good now we need to execute myig great command PHP Artis and migrate to run all the necessary migrations so I'm going to stop the vi server and execute PHP Artisan migrate okay so the migrations have been applied however I'm going to make small change in the example we see that the DB connection is my SQL and the host is 1271 in thein file which was automatically created by the command crl command we have the DB host to be MySQL so that happens because we are running the application from inside the docker container and the other service to communicate as a database is called MySQL so we just need to change it's a good um it's going to be good to just change this into MySQL because if you are going to install this project at a later stage and copy example into you need to have MySQL right there as well okay just small thing but it's just good to make a change now we because we already have Bree installed we can actually already register on the website and the only thing I'm going to add is email verification at the moment the registration doesn't require email verification as soon as the user is registered U he she will be able to log in immediately but I'm going to open user.php this this uh the model app modules user.php and I'm going to Implement an interface called must verify email all right and I save this and right here in this console we see errors that happens because the Vite server is not running so we need to execute mpm run Dev command and now we just reload the page and we don't see any errors and let's now try to register I'm going to type my name email some password and hit the enter all right now we see right here the following message thanks for signing up before getting started could you please verify your email address how to check where the email is received by default because we are running and that's the beauty of the docker and that's why I love to setting up my projects through Docker we have a couple of services and we can see the services under Docker compos yml so this is the main application larel test we have the MySQL server service and this is exact same name what we have inside to connect so if this would be called like a test we would write test right here as well okay I hope this makes sense all right and we have r as well which we don't care at this moment we have mail search we have mail pit and this mail pit is exactly the fake mail client soal it so that we can check all sent mails right here in this mail pit and in the file as well if we scroll down below we see this mail mailer is MTP host is mail pit Port is 1025 and so on so the rest of the things are not actually necessary okay here we have two main ports exposed 1025 this is just for email sending and 8025 this is the client where we can check all the received emails now in the browser I'm going to type Local Host port at25 and we see our nice looking mail client for fake email sending as you can see right here the receiver is zura example.com so basically Zur example.com received the following email and when we click on this button our account is activated and now I am logged in and I can reload this page and I'm logged in right here as well so I can close this and and from now on I will have this mail client open so whenever I register or password reset I can immediately see received emails right here I'm going to have this application right here and always documentation open because I will be constantly checking things in the documentation before we start generating modules and migrations let's talk about the schema uh right here we're going to have three the most important tables files file shares and start file files obviously the schema can increase and you can add much more features but for the basic functionality like creating files and sharing and making as a favorite files this will be enough and let's start with the most important one files right there we have the name and path we have left right and pent ID left right and pent ID is um necessary for having a like a nesty data we're going to talk more about this left write in parent ID in just a few minutes okay we have is folder as well we have um this is folder identifies whether the current file is a folder or just a file we have M type we have size created it updated uh add created by updated by very obvious we have also deleted at and deleted by we're going to also keep track uh we're going to have soft delete so that the file if it is deleted or folder we're going to still keep that um in the database so the file shares right here indicates that this particular file was shared to that particular user we might also add uh in the future like a permission whether the file was shared through read permission only or read and write just the table is right there and we can add few more cols if we need that and we have start files that this particular file was starred by that user all right and we have also the time when that happened so that's just basic now let's talk about this left and right in P ID I'm going to open Now browser and type nested set nested set model so that's a very common data structure mechanism to save a hierarchical data let's click on the very first link from the Wikipedia and let me open the following in image right let's open this on a full screen so nested set modu the idea is the following that the perent every record in this nested set model has left and right and the parent element in this hierarchical data the left coordinate of this parent element is always less than any of its children left and the right of the parent is always more than greater than any of its children right so in this case let's imagine that we have this clothing category and inside there we have men's category and women's category and inside men's category we have suits and inside women's we have dresses and inside men's suits we have slacks and jackets and inside women dresses we have everything and so you get the idea and now this clothing has left one and right 22 men men's category has left two and right nine women has left 10 and right 21 so that gives you not only like a structure to save hierarchical data but it gives you also proper ordering like you can order this by left coordinate and you can simply get in a proper order for example we want the men's to be always before women in this whatever like list of the subcategories so if the men's has like two here then it is before women's however if we change this from like a two would be here and instead of 21 this would be nine then the women's will be in front of so we have this numbering from one to whatever is the largest 22 in this case and just like this we're going to save our files we're going to have the Parent Directory which will have left and right coordinates and any of its children files or folders will have similar left and rights like men's and women's and in the same way we're going to have deep nested of the file system and why is that good why we simply cannot have a parent ID and that's it why do we need left and right so if If You observe this you can easily identify which subcategories or sub subcategories or any nested level of categories in this image uh can be easily identified from a appearent category let's say I want to um I want to understand and find out the number of files in our example let's go in our example let's say I want to identify how many many files I have in my specific folder but not only how many files directly inside the folder but also in a deep nested level of the main folder Target folder in which I'm interested so this is a little bit tricky to achieve with only pent ID right because pent ID only gives you access to the parent but it doesn't give you access to its perance parent or grandfather or grand grand parent or whatever right and in the same way you can always identify using parent ID which are your direct children but you cannot identify which are your grandchildren or grand grandchildren but if we have left and right we can easily do this so in this case if I want to select how many categories I have in inside clothing I would select all the records which has left greater than the clothing left and which has right less than clothing right and that would give me totally whatever 1 2 3 4 5 6 7 8 9 10 10 subcategories inside clothing no matter how deeply nested is that okay I hope this makes sense so now if we check in the database we have this left and right which exactly identifies what we want and now we can open HP storm and start generating migrations I'm going to stop the server and let's create now three main tables PHP artisan make model file and let's specify DM for migration we're going to create a file sheare I hope that's the correct name file sheare let's hit the m and start file that's it all right we hit the enter obviously on this schema we also have users but that's pretty obvious we have this um user table available already right there and one additional thing to this user table is this t storage size so this kind of storage limit what is the limit for that specific user and by having this by the way as a nested set model we can easily also understand what is the total size of the files for this specific user if we have size in the database we can just sum up all the sizes of those records which has left greater than specific folder all right so we have created uh three models in three migrations now let's open go into database migrations and let's open this create files table I will try to speed up the process a little bit so I'm going to copy and paste the table records right here and simply go through and explain we have ID obvious we have string name uh 1,24 we have path 1024 which is nullable we have nested sets so that method is available if we install the proper nested set package which we have not installed yet but I'm going to write migration and then we can install that package we have this Boolean is folder we have this m type which can beable we have the size nullable we have the time stamp such as create that and update dat we have for IDs for the created by and foring IDs for updated by and we also have soft deletes all right so this is the files now let's open second migration and that's file sheares here we will add two more columns file ID which is inullable and it is constrained by um files and and we have also user ID which is constrained by users actually those two columns should be required whenever we are sharing something we need to share what file is shared to which user so let me actually remove this so they are actually required perfect and let's now open the third migration file which is start file and we add two columns right here foring ID file ID which is constrained by files and user ID which is constrained by users it's pretty similar to uh file shears so we have those migrations ready and these down methods are also implemented properly so let's bring up the terminal and execute PHP Artisan migrate uh okay this will throw an error because we have not installed this nested set model package so let's open the browser and I'm going to search for let me actually close this let's search for nested set model and let's actually search for laravel nested sets there are couple of packages on Lal for nested sets some of them are not free but we're going to choose the one which has proper license to use for free okay here we have a couple of options this uh Cal list n set it's not actually free and let's che check this lazy Chaser I believe this is the one what uh what's good for you good for us it's a free and we can easily use that so let's go in the installation instructions and we need to execute composer require whenever we execute that and the package is installed then we can already use nested set function inside migration and if we want to drop that we can execute drop nested sets as well all right now let's execute composer require U caloi nested sets let's hit the enter okay that was downloaded and already installed now let's execute PHP Artisan migrate let's hit the enter all right so those three migrations have been successfully applied now I'm going to connect to the database through PHP Storm's uh database client from here uh if you are not using PHP storm you can use any client any mycle client like mycol workbench or there are some extensions in vs code as well to connect to my SQL so I need to constantly check the status for the database so I'm going to choose where's my SQL here it is we have to provide host to be Local Host Port 3306 the user is actually sale and the password is lowercase all lowercase password let's click test connection right here and we have successfully connected let's go on under schemas and let's actually click okay first and then click settings and schemas and I'm going to choose this file manager default schema now I'm going to expand the file manager and we have the following tables right here files file shares start files and everything else that was already right there so we have actually successfully created models and migrations now let's have a look at the project and because we are using inertia there will be some changes different from what you have seen previously when you have built LEL project let's focus on the resources folder because right here is the key differences between Lal and just inertia with Lal inside resources we have views normally which are plate files but this is something we don't need in this particular project we need JS folder and inside there we have this Main appjs which is responsible for initialization of this iners application as well as the vue.js application so it Imports this create inertia app then calls that inside the it configures the title and some uh how to resolve the components and inside setup it just creates a vuejs component the main component using Create up which is imported from view so this is the main file main Javascript file and we also have pages each page is associated to a rote in this case we have the dashboard and welcome we have profile page as well and inside Al folder we have this login register sign up password reset and so on inside layout we have two main component files one is the authenticated layout and second is the guest layout you probably guessed those are for guest user and for authenticated users and inside components we have many components comes out of the box box when you install this inera we have the logo and checkbox and danger but button and drop down and model and so on like we are developing we will create new components or modify these components or if we don't need at the end of the project we can obviously delete those components as well all right now let's start working on the layout this is the main thing what I'm going to do I'm going to open this authenticated layout and let's first check by the way the pages and dashboard so the dashboard is what is rendered right now when you log in and if I just remove everything from this template we will see simply an empty page by the way we have automatically reloading so whenever you change something it's going to be affected in the browser but there are two components inside the dashboard one is head which is the native inertia head component and by the way let's open inera documentation as well inera Js all right and we can explore I'm going to have this documentation open as well because probably I won't remember everything uh by heart and if we observe this under the title and meta section we will find this head component this is the main head component which will be converted into an HTML head tag okay and if we provide title right here as a prop it will be simply a title tag of this HTML document head component component we can have it in a different way as well and provide some meta tags if we want however um I'm going to Simply um like a we can remove these we are not building something which needs to be very SEO friendly so we are building an application a file manager application we don't hear SEO in this particular type of application so we can leave this head we can remove it really doesn't matter I'm going to remove it and inside authenticated layout this is uh where I'm going to work uh here we also have this U slot for header which is outputed right let's actually save this which is output it right here and then we have this main um your logged in card all right so I'm going to remove this and let's have a look in the authenticated layout this is what I'm going to adjust uh actually I will try to I'm going to get everything and create new scratch file vue.js scratch file and paste everything here and I'm going to build uh this layout from scratch but I'm going to use I will use certain components from here and extract into a new components probably which finally will be used right here so basically I'm going to split this file into multiple small components modify the layout and finally we will have our own new authenticated layout all right so we're going to start with the um main div I'm going to create and let's give it um I'm going to give it full hate uh H let's give it h screen uh I'm going to give it also BG gray 50 let's give it flex and W full and let's give it cap 4 okay so this is the main D um I I want to have like a left side navigation and on the right side we're going to have the main content for the section so I plan to create a separate component for the left side navigation which I will try to use right now so navigation like this and I can already go ahead and under components I can create new navigation component it's going to be VJs component by the way I have configured my vue.js template whenever I create new new vue.js um view file viw file uh it will write the following comments for me so this is how I'm going to structure my code inside the script tag all right so let's write just T at the moment and navigation all right and let's close it we have this main navigation which I want to import so I'm I'm just going to simply delete the last um last uh letter and hit control and space in my PHP store and it will autocomplete that for me and put that navigation under the script tag and by the way I also have like my own coding style so that I prefer to have templates at the top and scripts at the bottom okay so I can remove those Imports just like this I can remove this as well don't care at the moment while I will be just typing I will be importing them as far as I need so now I have navigation and I'm going to Define main this main will have display Flex let's give it also Flex column I'm going to give it Flex one let's give it padding horizontal four and some overflow overflow hidden all right so that's going to be the main section inside there we will have couple of De components because we have this Flex col colum we're going to have the top section for the search and Below section for the actually displaying the table so I'm going to create one div for the top section let's give it flex and items Center I'm going to give it also justify between and W full that's going to be for the um search form and some user dropdown and I'm going to actually I will assume that I already have search form or I I can actually create just like I did for the navigation so I'm going to go under components and I'm going to actually create right here a component called search form. VI and I'm going to create let's actually use first of all search form search form just like this and the second component I plan to create is the user settings dropdown so I'm going to call this exactly like this user settings drop down let's create this component as well user settings dropdown perfect let's creative user settings let's save this so they are used under inside this authenticated layout so we need to import them however we have these component and I don't want this components folder to become very giant with hundreds of files so we have here like very small tiny Atomic components like a model and this nav link and primary button which can be used across uh not only this particular application but the other applications as well okay so that I can easily copy the model component if I want into another application so I just want to create some kind of structure of my vue.js components so I'm going to create new folder called app and put my components which will be specific to my application like a navigation uh search form and user settings St down so I understand that this is a kind of subjective thing it's not a standard you can apply it's just a my prefer choice of um structuring my components I know that I can search those inside up and other very very like core components will be inside the components directly okay in the future I'm going to create some components inside up and some components inside components depending on how I'm going to use them all right we just have to modify these import path so because they were moved under up will just add up right here so now we have this navigation and search form and user settings so I'm going to save this and let's have a look so we have this navigation on the left side we have the search form and we have this user settings now let's create inside main let's create another div which will be for the main content let's give it class uh Flex one flex and flex column and overflow hidden as well I want basically to disable scroll on every element except that the files table itself only files table is something which needs to be scrollable in my opinion so I'm going to create slot right here and let's call up the left side so let's save it and if we check right now dashboard and if we just undo what we had previously now we see our layout and the component comes right here okay now let's start working on the navigation let's open navigation. View and let's delete this I'm going to change this from div into nav and let's give it also minan WID to be like 200 pixel uh not 100 but 200 pixel okay inide there I'm going to create one div element and I'm going to give this eight like eight pixel this will be container for me for the logo so 80 pixel needs to be inside square brackets we need some horizontal ping let's give it flex and items Center and let's give it gap of three all right inside there I'm going to use Now inertia's link component if you don't know how to use that no problem let's go in the documentation uh and you can find link right here under links section the documentation is not overwhelming it's very simple and there are not that many links to get lost so you can easily figure out what you're looking for this is the link component we can use and it needs to be imported from inertia JS U SL view3 in our case if you're using a different framework obviously it needs to be imported into from a different package okay so I'm going to use now this link component uppercase L uh like this okay and I'm going to provide right here colum hre to be a root and this root will be the main root what we are going to have what we're going to Define well at the moment I'm going to leave this as a just a slash because we have not defined any kind of um roots in our application all right uh now I'm going to use application logo which is something that was previously in authenticated layout and we moved this entire authenticated layout into scratch file so we can have a look here's the application logo so I'm going to get this and put in our navigation let's move this navigation on the left side so I'm going to paste this right here and I'm going to Simply import this application logo component which was imported right here but I'm going to move this above under Imports section okay perfect so we have this logo defined the classes let's leave them and have a look and let's give it name some name to our application I'm going to call this Lara storage okay why is this closing link not highlighted into red uh let's just type link yeah strange it's not highlighted into red by PHP stor but I'm going to leave this as it is okay now this is the like a header section of the navigation for the logo we're going to have another div obviously where the main menu items will be let's give it some horizontal pting and I'm going to have like a drop down to create new content in our application and the drop down will have options to create new folder or upload new file or upload new folder or something else if we decide to add in the future okay so I'm going to create this new component under app that's going to be uh let's call it create new dropdown okay again I'm just going to give it a create new text at the moment let's close this and let's use create new dropdown that was automatically imported if something is not automatically imported and if you see some kind of error if I delete this import for example you will see um error right here or simply let's open developer tools always have your developer tools opened and you will see these warnings right here like uh link if this is a native custom element uh the link was not actually imported that is the one problem and second problem is this uh fail to resolve component create new dropdown okay so this is something we need to we need to take here um if we go in the right here and we need to import link from uh inertia JS SL view3 now we have this link and the color was highlighted as well and let's import this drop down as well perfect now we have this create new which in the future will be converted into a drop down all right and down below we're going to have another div with actual menu items let's give it some uh vertical ping and inside there I'm going to use nav links so we actually have this nav link component available which was used pre previously in the header so I'm going to modify this nav link component but first let me use it right here now link okay uh we are going to have few menu items like my files and let's duplicate these few times we're going to have files shared with me we're going to have files uh shared by me and we're going to have uh trash maybe we're going to also add start files in the future okay we obviously we need to Define roads for each of them but we because we don't have roads at the moment I'm going to leave all of them into slash and we're going to also make these files active uh depending on which is clicked but let's leave them at the moment as they are and I'm going to open this now link and mod ify this a little bit uh before we modify let's see how that looks like okay so this is how it looks like and that is probably because it has inline flex and I'm going to change this into just Flex okay we need to adjust a few other things um this is flex side navigation uh okay if props active Flex yeah here we need to also change it into Flex okay that's good um let's go back it has border bottom so I'm going to remove this border button no need for that uh let's increase this a pting I'm going to set this into five let's give it also vertical ping pting Y 2 let's save it okay not bad let's give it also some um text color and hover color as well I'm going to also change this text color uh from 500 if the link is not active from text Gray 500 into 700 and and if it is active let's give it also different text color like we have text Gray 900 I'm going to change this into text Indigo um 700 and maybe let's give it also BG Indigo 100 okay let's have a look now none of them is active so that's fine however if we go in the navigation and I'm going to give this one for example active true this is how it looks like let's inspect it okay it has a different pading at the top pading top one okay let's remove it that's good and let's also give it uh rounded LG okay that's fine by me at least for now so let's test on the second one to be active obviously we are not going to have too many items active at the same time but just to have a look how active looks like I think this pretty good so we have created this uh let me remove the active as well and go in inside this authenticated layout so I think think we finished working on the navigation at the moment we don't have these rules defin so we can leave that let's go in the authenticated layout and we have this search form okay I'm going to work inside the search form right now inside there I'm going to create a form let's give it w 600 pixel let's give it a h height of 80 pixel like we have on the logo let's give it also flex and items Center and inside there I'm going to use text input the text input is a core component which comes uh with the inertia so I'm going to use text input component here let's give it type text and let's give it also class uh block and W full I'm going to stretch this on full width and let's give it margin to margin right to and this model value is something I'm going to remove instead I'm going to give it a v model form. search I'm going to Define this below as well and let's give it autocomplete as well auto complete I think this component might not exist in the text input but we're going to add that and I'm going to give it also Place holder which will be search for files and folders okay I'm going to move now these properties on a new line like this and let's have a look inside text input Define propes it only accepts model value so we're going to uh we're going to pass couple of components couple of props probably from here okay so those autocomplete placeholder they will be automatically given because inside the template we have the only component we have is the input and because we're are passing those props to the component text input they will be just delegated to the input let's actually move this above script okay so those will be given automatically let's define this uh form inside uh uses I'm going to use I'm going to create form equals use form that needs to be imported from inertia and we are going to provide search the only property will be search as an empty string at the moment and this text input component needs to be imported that let's move this right here okay just like this let's have a look here is the search input that looks pretty nice and on the right side we are going to define the user settings let's open user settings dropdown and let's open this scratch file and right here we probably have this user settings here's the settings drop down and it is using the dropdown and template and everything what it needs however instead of the dropdown which is which comes with inertia I am going to create a new I'm going going to install headless UI and use its own drop down let's search for headless UI and it has a couple of JavaScript components but the main thing of the main idea of this headless UI is that it provides only functionality unstyled and we can style it according to our needs so we have this menu and tabs and list box and let's have a look the Headless UI itself uh the menu what exactly I want to use uh the reason why I am going to install this headless UI is that first it gives you possibility uh to customize it as much as you need but it also has much more components then whatever comes with this inertia like it comes with the drop down and model but that's basically it and I found the dropdowns for the Headless UI is more configurable and like maybe it's a personal preference but I found it um more easy to use okay if we go under GitHub and this is how we can install that and I'm going to also Install hero icons probably so let's have a look uh I'm going to stop this mpm run Dev running and then execute this mpm install headless UI view latest well probably the best will be if we install this table version what ever is this 1.7 something because if you're watching this in the very future the latest version will be something which probably contains some breaking changes and it might not work so I'm going to specify 1 Point um 7 something let's try anything above 1 Point 1.7 let's hit the enter okay that was installed and if we check page Json we should see headless UI right here as well okay perfect now how we can use that I'm going to go in the documentation of headless UI let's go back we can find some documentation right here as well but better to go on the following link and this is the drop down example so I'm going to get the code this is it this is the react version let's switch to VJs version where's that this is react version okay from here we need to switch to view version let's get the code I'm going to copy that go under user settings dropdown and I'm going to paste it oops it looks like we copied the whole template and script as well well I'm going to replace it and now we have two script text which obviously is something we don't want so I'm going to get those Imports and put them right here now this uh this drop down also uses hero icons okay and it is possible to install hero icons and then use the components like this or the second way which I generally prefer is to open hero icons.com search for the icon what we need like the first one for example and I generally copy SVG and then put in the HTML in the place I need the obviously the markup is good is large but in this case you don't need to install any third party package and that's it okay it depends uh what is your prefer choice so in this case because the hero icons is used by this dropdown like we can install it and this will simply work or I can search for Chevron Chevon down icon and this will be where is Chon down here it is so this will be SVG I would copy that put this right here and it would do the exact same thing okay let's try to install uh these um hero icons because it will be probably it will make our code probably more readable uh mpm Install hero icons SL view archive icon duplicate icon those are the icons we don't need we don't use so I'm going to just remove them hero icons we're installed mpm run Dev and now the underline disappears we have this chair icon down available and let's save this user settings dropdown and let's have a look here okay here is the drop down and this is how it looks like but I'm going to change some Styles and we only need to leave too many items uh one will be profile and second will be log out so let's modify this first let me check what is this SVG this is the SV I past it I'm going to remove that this this is the SVG what I had so I'm going to remove it I'm going to remove this Steve as well let's okay this is how it should be on the right side perfect now let's start with the options so it should not be options instead it should be the currently authorized user name and if we check this dropdown this is the usern name page props out username okay this is what I'm going to put paste okay now here we see zoraa let's scroll down below and let's adjust remove menu items uh what did we have previously so that was drop down and we have profile and we have log out well I'm going to get just texts we have this edit icon we have another menu item which is duplicate icon and those two menu items are grouped in its own div and there is another div so those are like sections inside the dropdown and this good to understand because we might need and we will probably need to create structure uh of the same layout the drop down okay so in this case will remove those things we will have just one div and inside there we will have profile and we will have log out however it should not be duplicate icon uh log out should be something else let's check sign out log out okay maybe Arrow let's search for some Arrow I don't see anything that might be a log out Arrow okay let's leave it I'm going to just remove the icon and I'm going to remove the icon from here as well let's save it we have profile and log out the color is something we need to adjust as well okay I'll try to save some time and I'm going to copy and paste those menu items final version so that we can focus on more uh on Lal side rather than on markup so we have these menu items as we had previously I'm using responsive nav link which is the component which comes with inertia uh installation responsive nav link that's basic component similar to navlink uh the only difference is that it's um for uh responsive as well and that needs to be imported responsive Now link and the root this is something uh which generates which will generate uh the root for the f root name and this root inside vue.js is available uh through inertia and if we check the documentation in the routing section right here you will find how to uh how to define those roots with JavaScript okay so it will probably be somewhere right here under redirects or I don't remember actually by Hardware it is but I'm sure that this is working so I save that reload the page and this is the profile and log out now we can adjust the tiles a little bit I'm going to move up and this one has gray this is menu button where's the gray color let's check it it has text white but black okay it has black with some opacity BG black and BG opacity I'm going to remove that and I'm going to change the white color into maybe gray 800 and I'm going to change the color text gray 800 as well and I'm going to remove this border this is this comes from responsive Now link let's search for border border left four let's remove it okay and it probably has also with full and it has like the width is too much and right here it has the width 56 and we can remove this or set this into a lower value like this and this is the profile page okay so now we have this drop down which I guess is is looking exactly how I want it okay and the last thing is this create new uh drop down which should be slightly easier because now we have this dropdown component from the user settings drop down so I'm going to copy this menu and go inside this create new drop down and I'm going to paste it and let's adjust a few things okay so this should be called create new and this Chev drop down is icon we can remove this menu button should be imported so those Imports is something we need I'm just deleting the last letter and hitting the control and space or we can also hit alt and enter in PHP stor and that's going to Auto Import that uh here are the Imports this responsive nav link is something I'm going to remove we have this menu item and inside there we're going to have new folder and I'm going to duplicate this by the way now this is the case where we need like a two groups so new folder will be its own group and we're going to have two more menu items um upload folder and upload file so I'm going to duplicate this upload files good now this div can be removed as well I save that and I don't see the drop down instead I see an error menu button okay where is this problem menu button is missing on parent menu component is that coming from the user settings no that's not probably coming from user settings because it was working that's coming from probably navigation I'm going to remove this create new dropdown and let's check if I return this spec yeah we have problem here well I think the problem is that the menu is not imported so we need to import menu from headless UI save that and here we go so we see this great new when we click however we got the error passing props on template the current component menu item is rendering a template okay we have this menu items which is which is imported if we remove everything create new click on that it opens something the menu item I think that this menu item needs not a text but some kind of uh HTML element okay so if I put this in a tag I think that should fix the problem let's have a look here we go obviously this does not look pretty nice we can apply some styles to that uh let's give it well this can be active in theory okay in our case it will not probably active let's give it text uh text Gray 700 and block and pting X4 and pting Y 2 and text small uh I'm going to get this and and replaceing other places as well and we have this menu items which has right zero I'm going to change this right zero into left zero so that we have it fully visible like this okay I think that's looking good actually obviously on Mouse it doesn't do anything we can add those Styles as well but it's fine so far in this create new we can give some Styles here as well I'm going to actually copy some styles of this create new button and replace the current button okay and if we have a look this is create new and let's give it also with a little larger width Maybe be full width uh that should be block okay so we have this create new new folder upload files and upload folder that's perfect now let's define couple of roads and I'm going to create a file controller for that let's stop I'm going to stop this mpm run Dev and I'm going to create new controller PHP artison make controller file controller and let's hit the enter file controller was created uh we can even specify check we can even specify that I want this controller to be resource based but in this case it's fine we're going to have custom U custom actions it's not like a standard crud okay we are going to have my files here which which will return inertia render and the component name so under under resources under JS and Pages I'm going to create new files my files. VI and that said there I'm just going to type the current page slurl okay now let's call this my files semicolon now let's open web.php and in the roots for authorized users so we need to allow this only whenever the user is um authorized right here not right here well actually we're going to create now group uh with middle wear out and verified this is this dashboard is something we don't care so I'm going to change this into root controller file controller middle wear out and verified and then we group it like this okay and inside that group let's move this down excuse me and inside here we are going to have Ro get my files or we can uh put this as a default as well do we have default the default is welcome at the moment uh does this do anything okay this is the welcome um let's leave the welcome as it is let's give it my files and the action will be my files which is already defined and we can specify name here as well which will be my files okay so I'm going to save that and if we go now in my files my Dash files uh okay we have this error unable to locate file and that's because we have stopped the V server mpm run Dave PR the page and this shows now my files we can put this in our authenticated layout as well and now here's my files and in the same way we can Define other roots and other VJs Pages like shared with me and shared by me but we are going to focus at the moment on my files so that's why I'm not going to define the others at the moment however if we open now navigation we can link this to root called root my files okay and right here as well we can get this and specify my files okay and how to test that if I go in the profile page and then click on the logo and by the way let's put this inside the link as well this large storage like this okay we need to give this flex and item Center and G three and everything probably on the link itself not the div like this if I click on this it goes to my files and same way if I on the profile and click these on the left side my files it opens my files now let's make these my files active in the left side uh I'm going to Define active here which will be if page. URL equals to um my Dash files then this will become active and if this is active it will have different classes Let's test this here we go so this is now active if I go on the profile this is not active anymore I click on that this gets active and in the same way others will become active whenever we will Implement them okay so now we have defined the layout and we have defined the main rout and let's move on on the next part now if we check the data base inside files we don't have any record right there and in the users we have only one user so I want whenever new user registers there should be a root folder created for that specific user and every file then the user uploads will go inside the root of that uh user okay so that's why I'm going to open up HTTP controller South uh registered user controller and right here after the user is registered and after the user is logged in I'm going to create the file instance let's import the up modules file and let's specify it name the name in this case I'm going to make it user email because I know that it's going to be unique so that's fine I'm going to specify that the file is older equals one and this file needs to become root so there is a method actually called make root and let's call Save on that make sure that this file has the proper trait used in order to be able to call this make root okay for this we need to check the documentation uh check the following documentation somewhere there should make root how to make that root however we need to use a trait called uh I believe it's called node trait inside the model to be able to call this make root so inside this file model we have this has Factory um I'm going to provide node trait here and I'm going to also provide soft delet because this is something I I'm going to use also when the file is created I haven't specified the created by who created that file in the database of the files we have this uh Fields created by however I haven't specified and I'm going to create one more tra which will do this automatically for me under app folder I'm going to create new folder called trades and inside there I'm going to create new trade called um has Creator and updator something like this okay so this will indicate that whenever I use that trade this will be an indication for the model that this model has created by or updated by and we just need to manage that so I want to Define protected function here protected static function here called boot has Creator and updator I think I made a typo updator okay and then I'm going to call static this boot has Creator and updator um is in like a special name coming from the eloquent so that whenever we call creating from here we pass function and we have inside the function we will accept a model then model we call created by and that's going to be currently authorized users ID and let's import this out from facade created by is this and also updated by is the same whenever record is created I'm going to duplicate this and on updating we only change updated by okay now let's use this has Creator and updator trait right here let's import that and and then should be good boot has create or updat okay perfect now whenever the file will be created it should have this created by we are going to try a registration the redirect by the way uh on the home URL is still dashboard so we can change this into my files now let's try registration I'm going to log out uh I can actually even and try to delete the current user yep now let's register s at example.com register okay let's check the email click verify I was able to verify my account and if I reload and if I reload I am logged in now let's check files here we see okay the record was made the name is email we have left right we have we don't have parent ID because yeah it should not have parent ID this is the root is folder M size is only for files created updated that created by and updated by okay here we see that and deleted that okay now whenever new file or new folder is created they should be children of this rout and a single user will always have a single root and that's the whole idea this is how we're going to proceed now let's start working on folder creation whenever we click create new in the new folder it should bring up the model we type the folder name hit the submit button and it's going to send the request and the folder needs to be created okay but let's start first from the backend we have file control and right here I'm going to create function called create folder I'm going to also open web uh web.php and inside this uh Au and verified group for the controller let's create new rout and let's actually call this root create folder how however we can even uh we can even do like this folder slash create okay or let's let's leave create folder the moment now there going to be create folder and then we have folder. create here I'm going to also change this into a folder SL create I think that's more logical okay so we have this create folder perfect and I'm going to create now a form request uh we have this npm run de running so I'm going to bring up the new terminal and go inside the container vendor being sale bash and then PHP artisan make request and let's call this store folder folder request hit the enter let's now open store folder request uh we can change this authorized into true for now but we're going to have more logic right there and then we need to focus on the rules okay whenever the file or folder is created it will create it will be created either in the root folder or inside some folder we're going to implement the navigation as well going inside the folder and we're going to have also nested folders so we can go inside nested folders and create new folder right there or upload new files right there so we need some kind of identifier whether the current request is inside the root folder or inside the Ned folder that's why we will probably need prent ID here obviously we need name the name is something which um needs to be required whenever folder is about to to be created but as I mentioned we will need P ID as well and this P ID is something that we will need in other form requests as well that's why I am going to create a new form request let's call these parent parent ID base request okay we are not going to directly use that in the controller although we will be able to use it but instead we will just extend from this parent ID base request so inside store folder request I'm going to extend this into from pent ID base request and if I go in the parent ID base request I'm going to Define right here uh parent ID okay and the parent ID is something which let's start writing rule it must exist in the table uh files ID uh we can even specify right here file class uh that needs to be string ID and we we need to add additional we closes right here function we need a q Builder Builder like this quy and we are going to return cury where is folder equals one so we basically the parent ID needs to be faltered for sure whenever this comes in the request and also it must be owned by the currently current user okay so we're going to add additional we here created by needs to be out out ID like this okay so whenever parent ID comes um it must exist in the table whenever it's there it must exist in the uh file stable inside ID column and it must be folder and the current currently authorized user must be the owner of that folder okay that's absolutely logical this is something we need to we need to always do now I'm going to Define file public file right here which uh can be nullable as well if the parent ID was not given and right here inside the authorized I'm going to select this parent equals file query where ID is the given um parent ID so this is going to be this input uh parent ID okay and I'm going to get first and then I'm going to check if the parent ID uh we are going to only allow if the parent ID exists and if this is owned by the current user so basically if the parent exists and it is not root this parent is root returns false and if this is not root then it means that the folder needs to be a normal regular folder created by that user okay if this is a regular folder and the folder um does not belong to the current user I'm going to actually create helper method inside the file uh to easily is owned by and I'm going to provide user ID here the purpose of this function is to Simply return if the current um current modu is owned by the currently authorized user so I'm going to Simply return this created by equals to the given user ID okay and the the return type will be Boolean for this function okay now if I go in the request if this pint is owned by Al Al ID if not owned by Al ID okay then we are going to return false otherwise we will return true so again let's double check so we select the parent file based on the ID if this is null or incorrect uh then the parent will not exist okay if the parent ID does not exist so that's the that's the important thing if the parent ID does not exist if this is null then we will assume that the user wants to create something something in the root okay and then we will simply return true from here but if the parent ID exists and if this is not root and if this is not owned by the currently authorized user then we will simply return false I think we can even remove this portion because even if it is root it still is owned by the currently authorized user because this is how we implement it right so that's why I think we can remove that okay now we have this parent ID base request ready and if we go in the store folder request we extend this from parent ID base request and this one now here we don't need authorize anymore so I can completely remove that because it will take the authorized from appearent and right here under rules I'm going to call array merge and I'm going to merge uh rules of these two form requests so first I'm going to call parent rules and then we will have our own rules like this the name must be required and also it must be unique so I'm going to Define new rule right here unique inside file class inside name but we need to add extra we closes as well so it must be unique inside file table but only for current user currently authorized user and only inside the given parent ID okay so we have to provide only when the created by is out ID and when parent ID is the given this parent ID and also the other re will be if it's not deleted so if the for example if the test folder is created and then deleted then we should be able to create new test folder right so if deleted it we deleted at is uh now so probably we should write where now created it okay so we have this store folder request ready I'm going to also customize public function mage mes return uh name. unique I'm going to give it a custom message folder whatever um input folder input already exists like this okay so we have request ready we have ready we have controller which is not yet ready so let's in the controller uh I will accept the request right here store store folder request excuse me store folder request then I'm going to get validated data from here and this request is a store folder request and it also has parent model okay we selected this in the parent class it should be available right here so whenever we want select we kind of caching it so that we don't have to select it second time we will need this right here so that was also one idea why I created it like this and then uh let me assign this into parent variable so I have parent and I'm going to also check if the parent doesn't exist if not parent then erent equals this I'm going to create new function get root so I want to get the root um root file for the currently authorized user so probably right here I'm going to Define get root and I'm going to return file cury where uh created by is the currently authorized user and we we we we want to get basically where it is root so I think there is a query for that uh where is root here it is where is root so I want to get root for the currently authorized user and I'm going to call first or bail like this uh let's actually move this right here where is root yeah it doesn't autocomplete but it is there and it should work okay so I call this get root if the parent is not given then we get the parent and then I create file is new file we provide is folder equals one or true we provide also name equals data name and then on the p I'm going to call append node which is a method from this nested set model file okay so from the request we get the data we get the parent model if it doesn't exist we get the root then we create the folder and append this inside the parent okay I think now the back end is ready and we can move on the front end side let's create uh let's open create new dropdown and here we have this new folder whenever user clicks on this new folder I wanted to open new model and type the name right there and then hit the submit so first I'm going to add H right here to show cursor basically and then on click with prevent uh I'm going to call a method show create folder model so that's going to be the function which I'm going to Define down below let's scroll down below under methods create um show create folder model and I'm going to create a model as well so under components app I'm going to create new component called create folder model okay I am going to use this base model which comes with inertia installation model but I'm going to adjust few things right here let me import this model first from here okay uh this model requires show property and I'm going to Define how I'm going to do this so I'm going to I want to create like a twoway data binder in for the model model value so I want to have this show to be a twoway data bound property so I'm going to use model value right here now let's define props const model value equals Define props model value and that needs to be Boolean okay then from this create new dropdown I'm going to use this create uh create folder model and then inside there I'm going to provide V model to be a new reference const show const show uh create folder folder model but I have the name Collision okay let's just call this create folder mod that's going to be ref by default it's going to be false whenever this method is called show create folder model I'm going to set the value to be true so I show the model then using V model I'm passing this create folder model which will be accepted right here as a folder model and model value and then I can use this model value right here um create or show model let's just write like this let's open the browser now let's bring up the terminal just in case we have some errors and hit new folder and this shows this show model okay we need to apply some Styles let's create div with pading six inside there I'm going to create H2 let's give it text LG and font medium and let's give it text gray um 900 okay that's going to be create new folder that's the title okay then I'm going to have the body for the model let's give it margin top and inside there I'm going to have the input label and input text I think we have input label and text input as well so let's just use it input label and input input text or text input text input like this to import that and let's provide inside the text input type to be text we provide ID to be folder name uh by the way this input label should be for folder name uh the value is to be folder name and I'm going to move this now down we are going to have the model uh we will Define form right here so that's why I'm going to use form Dot uh form. name let me collapse the left side then we're going to have some classes let's give it um margin top one and block and W full let's give it form. errors. name so if there is error inside the name then we're going to going to give it some red border that's going to be border red 500 and on Focus we give it also border red 500 and also on Focus we give it ring red 500 okay if there is some kind of error otherwise we will leave this empty okay and let's provide Place holder as well Place holder to be folder name and we provide we listen to um enter as well key up. enter and we call method like create folder okay whenever the we hit the enter on this input it will call this create folder and down follow this text input we we're going to show input error as well and basically we can find that information that uh like input label text input Inside Out login as well so if we check the template for out login here we see input label text input and input error okay so now we let's use input error and the message we provide inside input error will be form. errors. name and let's give it class margin TP two now let's define a few things I'm going to Define this create folder which will be under methods FN create folder okay console log create folder let's move these Imports here const form equals use form and we provide name only to be an empty string there are other Imports as well which I'm going to move up as well okay so what now we have this input and label and I think we need now buttons class margin tops six and flex and justify and I want the buttons to be at the right and I'm going to use now secondary button which is again comes with inertia there is this secondary button and there's primary Button as well so I'm going to use those buttons secondary button uh let's give it a cancel text and whenever this is clicked I want to call a method called close model so let's define this function close model which will basically uh emit the value um and updated value for the model value so emit by the way we need to Define emits as well const emit equals Define emits and we provide right here up update column model value so this event name is necessary for twoway data binding okay and now we will emit that that event name which will internally um change the value of this create folder model okay so this is how we're going to do the twoway data binding and then I'm going to call also so on on the form clear errors if there are some errors when we close the model they should be cleared out and I going to reset the model as well when the model is actually closed okay so what else I think we are good now let's test this okay so model is opened uh folder name this is camel case this value that should be older name we can even I think that should be screen reader only okay like this and I want to reduce the width also for the model this model has Max width by default it's two Excel and there are other versions as well and I'm going to provide Max width to be small okay that's more like it that's acceptable uh where is the prim button okay we don't we haven't added primary button this is it I'm going to call this submit and we need to let's give it uh margin left and on click we're going to call create folder we already have that function defined and I'm going to also disable this button if the form is in processing form. processing and just like this the button will be disabled if the form is in processing and we can also give it a different slightly different color or opacity when the form is in processing so again I think we will find this in the login as well exact ly okay so we give it opacity 25 when the form is in processing state so that it gives us more like a disabled feeling okay here we see this model that's perfect now whenever we click this we see create folder right so from here from the create folder we need to make request or we can call form post and provide right here root folder. create and that should send a post request to the following URL however uh that again this is a something U from the inertia and we can find this in the inertia documentation as well and we need to preserve the scroll so preserve scroll I'm going to specify true and on success whenever the folder is actually created uh we need to close model we need to call form resette and maybe in the future we're going to show success notification however if there is some kind of error on error we need to focus maybe inside the input to focus inside the input I'm going to give this input ref uh folder name input okay and then right here folder name input. value. Focus however only this will not be enough we need to Define this folder name input inside refs as well const folder name input equal ref by default we can specify null here this ref is something we need to import and and what else and uh whenever this model is displayed uh we need to also Focus inside the input and I have the feeling that the model has Show event let's check it again I'm going to move this template above the script this confuses me because I'm very used to have the template before script uh let's search for Emit let's search for Emit from everywhere okay we only emit close but we can actually implement the show on the model Show event and when whenever it is displayed then we can we need to listen to that show event because we we're going to have like a reusable mod model component it's going to be good to have this uh possibility to listen to the uh show okay let's go inside the model and I'm going to Define two more events right here show and hide and we are watching on props show and whenever props show is true on the body we call overflow hidden this means that we need to show the model and we can call AIT show and right here we need to AIT hide it's as simple as that and if we go in the create folder model we can now listen to show event and on show let's call this on show function let's define it right here on show and whenever uh we whenever this is called we need to focus inside the input now let's test all that new folder we have an error errors are good read property on null create folder okay we have this ref specified folder name input okay what is this folder name input let's check that so this ref might not be immediately available so I think we need to we need to wrap that because the content is displayed when the model is displayed is shown we check the model we have show here and we have the main slot which is displayed when the show is set to want to um the show is set to true so this ref might not yet be available whenever we are trying to focus I'm going to import next tick and inside next tick I'm going to try to focus make sure that the next TI is imported so if I save that refresh and open now uh there's Focus okay so that's perfect that's good uh if we go in the network and type test here and click submit the request was made the post method is not supported okay we probably need to change this into post save now let's create test submit okay so the response looks like it was successfully completed we have errors as an empty object and we need to check the database let's open files and we see test folder right here which is a child of the parent we see left and right so the right was increased now this basically is a parent of this and it has left less than its child and right greater than its child and this this one also has a parent ID of this this folder is true on both of them and we have updated created by and updated by as well so that's perfect now we have implemented creating folders now let's create documents submit um images let's hit the enter as well and something okay there it's perfect the drop down is not hidden when we open the model hold on when we click cancel it is hidden but when it is saved it is not hidden okay that's weird but we we will figure this out okay how many folders did we create documents images something saved and so on okay that's perfect now let's implement this path because that's going to be the place where we're going to save the parent and basically any ancestors paths as well and in the future we're going to select the folders based on the path so I'm going to open file.php and down below I'm going to create protected protected um static function boot uh I'm going to call parent Boot and then static creating whenever we are creating static creating we accept a model here and if the model here in if that doesn't exists which means that if this is root we don't do anything okay the root can have empty path however if this is not root then Model A needs to be equal model parent if the models parent okay we don't have model parent at the moment so we need to Define couple of relations right here we have this is owned by only method at the moment so let's define public function user first of all belongs to so we return this belongs to user user by the field created by okay in the same way I'm going to Define heent we provide file here and we provide heent ID okay okay that's good now right here at the bottom we can provide if model parent is root we also need to define a method called is root let's define it here return if this heent ID equals null then obviously this is root so if model parent is root if this is not root basically and if this is a normal folder then we need to take model parent path and then we need to um the model's path will be like this and plus we need to so basically the idea is the following we're going to take the appearance path and prefix it to the current modu path if this is not root so in this case if this is not root we take its path uh we prepend and then right here we have the model uh model name however I'm going to convert this model name into slug okay if this is a appearent if this is a root then nothing empty string will be prefixed to the model name uh I think that should work I'm going to save that and try to create a new folder and let's call videos click submit in the database we see video path okay now let's create one more folder with two words we see this as a path whenever in the future we create folder inside the videos or two words uh the inner folder will be videos slash the inner folder inner folder name okay I hope this makes sense now let's create the table in the HTML table and and render created folders right there so I'm going to open my files. view and this this is the place where we're going to render the table uh but let's open file controller first and right here we have this my files and I want to cure now files I'm going to Define folder and this will be get root I'm getting the root in the future this endpoint uh will support also uh rendering content for child folders as well and then we will simply modify this but at the moment we only display content for the root folder that's why we get the folder file cury where parent ID equals um I think this equals is not necessary folder ID next we is to get content only for currently authorized user created by his Al ID and we also want to get files which is not deleted but I think by default by default because it's it has soft deletes right there it will exclude uh deleted files and let's order by uh order by is folder descending first I want to show folders first and then files and then the second order by will be created at descending and I'm going to call Page inate let's show only 10 at the moment all right so we can assign this into files and then pass the data into files now if we open my files we will accept inside props so I'm going to Define props or we can D structure props and take out files equals Define props and files will be an array probably it might be even an object I don't know we will see if we reload the page we see an error created by I have a typo created by reload okay we need to print now the data let's print files and here we see that and it is an object it is not array so we provide object right here that's perfect and the data is exactly what we want so we need to now render a table table let's give it um mean with full we're going to have t head which will have BG gray uh 100 and Border button TR and th each th will have text small and font um medium and text Gray 900 and pting x uh six and pting y4 and text left okay so this is the first column is probably name and let's duplicate this few times we are going to have um owner who is the owner of the file we're going to have last modified and we're going to have the file size okay let's leave it like this at the moment tbody inside tbody we will have TR and we need to iterate now inside our files. data so file off off files. data we need to provide also e here to be file ID and inside we will have TD with BG white order button transition let's give it um duration 300 and Easy in out some animations and on Hover we're going to have PG gray 100 and I think that's it um okay but I think this needs to be on the TR not the TD like this as for the TD we will have just pting X6 pting y4 white space wh space no wrap white space no wrap and we're going to add text small and font medium text Gray 900 blacks and items Center okay and I'm going to Output file. name here okay so here we see the folders that's perfect let's duplicate these three more times the second will be owner but we don't have owner the third will be last modified which will be updated it and then we have size okay something is broken yeah probably I missed some CSS class so I'm just going to get the classes for TR which looks like correct in Ford which looks like correct okay what is wrong okay this is this is this is funny we have normal TDS like this so if I just remove move them now we see them properly aligned so what's wrong maybe I need to zoom out t one Med text item Center uh let's remove this flex and item Center okay okay and now I'm going to Define resource to return these updated it in a more readable way as well as the owner and some of the information um in a more in a way that is uh printable to the user so I'm going to create new resource PHP artisan make resource let's call it file resource now we open file resource and let's just return an array from here so here I'm going to paste what I want to return I'm returning an ID named slug the the slug is something path okay so I'm returning path uh pent ID is folder M size I'm returning an owner which is something we're going to Define right now and we have created it and updated it created by updated by and deleted it so we have this uh created and updated it uh as a carbon instances that's why we can call diff for humans and this will give us more human readable uh formats so if I save that and go in the file controller and then change files pass this into file resource collection then we see last modified is more human readable let's go in the file and Define the owner as well uh I'm going to Define owner is a property public function owner um we return new attribute get function mixed value and we get array of attributes as well and we return from attributes created by so if the created by equals to the out ID then I'm going to return me as the owner otherwise I'm going to return this user name okay you probably have a question when will be when will I be able to see a content of another another user uh so that we're showing this user me uh in most cases in every case we will have me right because we have only our files whenever we Implement sharing functionality and we will be able to see content of someone else then we will need these part but right now I agree the created by will always be out ID so let's import this attribute I think this attribute is eliminate database eloquent cast attribute so I save that and we need now this new is not necessary that was that was the problem okay so we reload now let's specify that this must return an instance of attribute save and reload and we see successful result now what's the owner owner is me every time what about size size is probably null because we never said this because we are dealing with folders so far folders don't have um size so that's perfect now we have rendered we can zoom in we have rendered the data we just created now if I create new folder let's call this test uh two click submit we see test two at the very top one second to go if I try to create new folder test two again I was able to create that as well however I think we have some kind of validation and that should not be allowed so let's search for store folder request name required unique oops here we have this error it should be created by not created at so if I save that actually tested this couple of times and created many test folders and all of them were created now let's try to create test now we see that test already exist as well as test two already exists all right so I think that's good right now now let's Implement opening file opening folder and uh we're going to basically see a content of that specific folder and I want to also Implement bre crumbs apologies for the sound okay first of all I'm going to delete all these test folders which I have just created we have a lot of test folders so all of them are yeah all of them can be easily deleted okay just like this uh and I'm going to change the right coordinate of these because whenever you manually delete something you might mess up uh like mix up the uh left and right coordinates that's important to know and the right coordinate needs to be the highest child coordinate plus one in this case I'm going to set this manually on 16 okay or like to be absolutely safe we can delete everything and set this right to two save reload the page we don't have any files and folders and by the way we can also display there are no files um text something like this so let's open my files and uh below the table well we can put this table inside if statement if uh files data length if that exists we render the table otherwise we show some some kind of text uh well we can even remove this and we can put this right here so the table headers can be rendered they can be there but if the length doesn't exist we show there is no data in this folder something like this let's give it also ping Y8 text Center text large and text Gray 400 okay that's good now let me expand this table and on this TR I'm going to add double click whenever we double click on the row it's going to uh open the folder so I'm going to call function open folder and pass the file right there the Open folder function does not exist yet but we're going to create that I'm going to scroll down below under right here open folder we accept a file here first we're going to check if the file is folder if that's false we simply return okay so if we are double clicking on a file not a folder otherwise I'm want to call inertias router visit and we're going to provide rout right here which will be my files but we're going to provide an extra folder parameter right here which we're going to accept in this rad Define and accept very soon so the path will be file. path okay however this path will be some kind of string which contains slashes right there as well now if I open web. pH PHP and check right here we're going to accept Bolder as an optional parameter right here okay but in order to be able to specify that this optional parameter might even include slashes we need extra where here where the folder can be anything in this case we can provide regular expression. and asterisk and symbol okay now this gives us possibility to go in the file controller my files and we can accept right here file call it folder because we call this folder we can accept the folder right here and let's just try to dump the folder here and by default it can also be null so we can provide null here and now let's check it if I reload it is now okay now let me comment this and I'm going to create new folder called videoos the enter videos is there now I'm going to comment this and let's provide videos here hit the enter okay it shows not found because that does not exist okay to make this working there are two ways one way is to change the model's Road key name into a path but that's not what I like instead I'm going to assume that I'm going to accept string basically right here and I'm going to also validate check if the folder user is trying to open belongs to the current user okay so if the given folder exists then the folder equals file query where uh first of all we need created by to be out ID and extra we will be a equals to the folder given folder and then we either get first or fail in this case we can even fail if that doesn't exist or doesn't belong to the current current user okay and whenever we get this folder then before we call this get root we're going to check if the folder doesn't exist then the folder will become root okay now let's actually dump and die this folder reload the page and we see something this is a file attributes and the name is videos so the folder right now is videos that's perfect if I simply remove Slash from the URL hit the enter we see null and the folder right here will be root okay now let's reload now we see videos if I double click on that we have some kind of error router is not defined yep router needs to be imported let's open my file from inertia view3 this needs to be imported reload double click on that and look at this now we are inside videos and we don't see any data right here uh this is large and this is too much in my opinion okay that's better okay that's so cool now we have videos if I double click on that I go inside there now I open this TR and I'm going to give it um cursor pointer that's good double click perfect now let's Implement bread crumbs as well so that we see um if I go inside the folder and if I have like multiple Nest folders I see brecs right there and we're going to also Implement creating folders inside videos right now so impl creating folder inside the nested folder let's open create folder model and in this form I'm going to Define pent ID which is something we already expect on the back end by default this is going to be null but before we send request right here form. parent ID will be uh from page and this page uh we we will use it right now from page we get props then folder and then ID however let's follow step by step this page is something which comes from inertia again you can find this inertia documentation and we can get this from use page okay that's one step then from the page props we can get the folder however the current page is these my files and my files has only one prop that is files and this files prop is given from the file controller all right so from here we need to pass folder the current folder which we already have selected here so then this folder will be available through page. props folder and then we can get the ID however in theory this folder might be um even now or it might not be let's think about it um if the folder doesn't exist we always get the root so it will never be actually now so that's why we can just get the par ID and just like this we will pass the pent ID now let's have a look if we just reload the page create new folder test now hit the submit button and we see test by inside video if I go into my files I see only videos if I double click on the videos I see test if I double click on the test I see nothing and I can create uh nested folder right here as well look at this videos test and nested that's perfect we can create Now new folder documents oops documents here and we see it okay this drop down doesn't disappear we we need to fix that as well but now we have successfully implemented um creating folders inside subfolder now let's Implement bread crumbs I'm going to open this file controller and from here like we are passing files and folders We need to pass the list of the ancestors for the current folder to display it in the view okay so down below let's select um ancestors equals I think I have a typo equals uh for the current folder I'm going to call ancestors I think there is ancestor something like this from this nested set model so I'm going to search for ancestors let's search for category ancestors yeah we can definitely access ancestors property accessing ancestors like this okay so we can access that uh but we also want inside the brid crumbs we want all the parents all the ancestors plus the current folder okay and basically anything that is returned from here I want to be inside the file resource I want it to pass the file resource so that we have the same type of response as we have defined in the file resource so basically I'm going to call file resource collection and we are going to pass an array here we are going to destructure like use this three dots operator to for incestors and we're going to pass uh also f folder okay and just like this we are passing ancestors and the folder uh so far we already have the ancestors what we need but I'm going to uh pass the uh folder into file resources as well so folder equals new file resource and pass folder right there just like this now the ancestors and fold will be available inside my files right here as folder object and anour is a probably and we can use that anour above the table to render red crumbs let's have a look if we have ancestors here we see that so this is actually the root older but if we go inside let's comment this out if we go inside then uncomment that now we see two folders right there okay so now let's render red crumbs I'm going to use nav and let's specify classes uh flex and I need items Center and justify between and pading one and margin bottom three okay then um I need order list and let's provide inline flex and items Center and space um space X1 and MD space X3 as well okay inside there I will need link Le um elements and then I'm use V4 NS of NS stores. data and we have to provide key here as well n. ID and let's provide some classes here as well inline flex and items Center okay and then I can use a link which is the link from inertia uppercase l like this and the link needs to be obviously imported so let's scroll down below and import link from inera view3 this rotor needs to be moved up we also have some other import at button okay so we have this link L now and I'm going to check if the parent ID doesn't exist so basically I don't want to render these root in a bread crumbs so if ancestor parent ID does not exist only in this case we render this link okay otherwise we simply render div and the div can be like um home icon probably so I'm going to copy icon what I already have chosen and paste right here and I'm going to also have a link I'm going to copy that link as well and that's going to be uh that's going to have a rout to my files the folder will be the path and just like this let's specify classes uh that's going to be under V else okay and flex and items Center okay for this link we have to provide hre root into my files okay let's understand now this so if the parti doesn't exist that means that this is is the root okay and if this is the root we need different styles so let's give it some Styles some t one CS classes and then I'm going to paste the icon what I have chosen from hero icons my files have a look okay here we go so this is the home icon and we have documents now we are inside documents if I reload the page we don't have any errors in the console if I click this my files now we are inside the my files and that indicates the root folder if I double click on videos I am inside videos if I double click on test I'm inside my files videos test if I double click on Nest it you get the idea and we can easily uh go to the desired folder what we want like videos for example or my files or whatever okay I think this is awesome and again you can find these hero icons from the hero icons.com and if you just search for home you can get the home or you we can even use the icons because we have installed hero icons package if we just start typing uh home okay let's search for uh right here in this hero icons documentation if you click on documentation scroll down below I want to show you a different ways of uh doing the same thing browse a full list of Icon names if I we click on this we have the icon names right here if I search for home we see home icon and I can type home icon like this but I need to now import that from um from um hero icons which is something um like that takes time so and I just have svgs like we want to go into an import section and write something that we probably have in user settings dropdown something like this like I need to copy that part and put this right here that should be home home icon and then if I save this now we have two home icons this one and we have to provide also classes uh with six and hate six it's too much maybe before okay so this is how you you can use this hero icon home icon from the hero icon package not in svi but again like for me it's really easy to just grab open the documentation right here just type what I want copy SVG and paste it that's super easy for me okay so we have now breadcrumbs also implemented and working awesome now let's start working on uploading files and uploading folders as well we're going to allow uploading folders and we are going to have uploading files through this drop down menu item and folder and I'm going to also Implement uploading files through drag and drop from our file system into the browser okay so we're going to have pretty rich functionality and let's start with these upload files so uh I'm going to open this upload file menu item or how do I call that let me check this under resources components up okay we don't have this component which I am going to create right now let's go under JS components and we have this create new dropdown and inside there we have this upload files and upload folder so so those two menu items I'm going to move into their own separate components and under up let me create new component call that file upload menu item and the second one I'm going to call this folder upload menu item all right let me grab this and put this in the file upload menu item and the second one will go in folder upload menu item okay first we need to import this menu item from headless UI and that was imported at the very bottom of the script tag I'm going to move this up and I need the exact same import right here we format the code and then let's use here uh file upload menu item and folder upload menu item this should be lowercase I I think or no I didn't correct name it correctly file upload menu item so it was uppercase I I changed it into lowercase i and now inside Imports we need to change this as well into lowercase i here and here otherwise we just don't follow the conventions of naming and here we go so we have those into a separate components now from here whenever user clicks that button not a button but an anchor link we're going to ask the user to choose a file so for this inside this a tag first of all let's give this hre and just a hashtag so that it shows cursor basically and and then inside we're going to create input type file that input type file should be should have position absolute and let's give it left zero top zero bottom bottom zero and right zero and I'm going to give it also uh cursor pointer all right now let's have a look so I save that and in the browser we see this um input type file uh let's give this parent position relative or maybe we should give it to this a tag relative all right now it's inside this menu item and I'm going to hide this so I will give it opacity zero so we have this now hidden uh this cursor pointer doesn't seem to be working but yeah it's not a big deal so whenever we click on this upload files it asks us to choose the file okay that's perfect whenever we choose the file now we want to start the upload process okay we are going to have a very similar logic in this layout the main layout from which we're going to implement the drag and drop functionality so if I open right now authenticated layout so I will create I will add these events to this main tag whenever we Mouse over on the main tag then we will be able to drop files right there and they will be uploaded so because I don't want to have this duplicated logic inside this file upload menu item and inside the authenticated layout because we need uploading files from both components I am going to uh pass chosen files from this file upload menu item into authenticated layout and basically the only place I'm going to implement that uploading functionality will be inside the authenticated layout to transfer data from file upload menu item to authenticated layout I'm going to use event B bus methodology so let me search for the package um meet MP TM package this is what I'm going to use and I'm going to explain it in a second okay it's pretty popular package over like almost 3 million downloads uh per week so let's go into installation section we're going to install in the following way and this package basically is a central place on which we can trigger some events and from other place we can listen to those events and basically from the file upload menu item we are going to trigger the event upload started event pass the chosen files uh from here and inside the authenticated layout we will listen to this event and whenever this event is triggered we will get those files and start the upload process okay first of all let's install this meet let's bring up the terminal uh on the first top I have this mpm run Dev so I'm going to stop this and execute mpm install that was already installed npm run Dev that's perfect and now inside the JS folder where I have uh all my JavaScript files I'm going to create a new file new Javascript file called this event DB okay so this the syntax is the following we're going to import and we're going to Simply uh create um emiter in the following way and then we can listen to certain events and then obviously execute our own code uh we can listen to all events and we can AIT this event so basically we need these two uh lines of code uh to implement the functionality we are basically looking for so let's import this actually let's do like this inside even bus I'm importing the meat creating the emiter and let's delete this and right here so whenever I emit an event like like a f for example the event name I can I can do this as a string but the good practice will be to create constants for these event names so I'm going to export and Define constants right here like file upload started okay and that's going to be let's give it the same name whatever is the name I'm going to put the same thing in the string okay and okay uh I'm going to leave this file right now as it is and from this file upload menu item when the change happens we're going to listen to change and let's call uh files chosen or on file change or simply on change let's make it simple on change all right now inside method let's create this onchange we get right here an event and first of all let's just print event Target files Target okay so whenever we choose the file we can print them and let's give this one also multiple attribute because uh we want to allow uploading multiple files okay now inside the let's choose the file load files I'm going to choose just one file and we see this right here okay let's choose another files like maybe multiple files and click open and we see the chosen files right here okay now from this place I'm going to import the emiter basically we need to also export this emiter from here export const emiter then I will start typing emiter and that needs to be import right here then on emiter I'm going to call Emit and let's pass the constant file name file upload started that also needs to be imported somewhere right here we can manually write the import file upload started and then we are emiting the following event and we're going to pass event Target files now let's go in the authenticated layout by the way we don't have these comments right right here so let me copy these comments paste remove JavaScript and we have everything what we needed and inside hooks I want to call now unmounted hook and on mounted I'm going to import emiter and listen to file upload started event and that be needs to be imported again right here and whenever this happens I'm going to call the function upload files which doesn't exist yet so let's define this function upload files and we get files right here so we can print files right here and from file upload menu item we can remove this console log save that and now let's test this so I'm going to choose couple of files click open and we see conso right here but that comes from authenticated layout all right previously that was coming from this file upload menu item but now this comes from authenticated layout okay so far so good now if we go in the authenticated layout we need to listen to drop event right here as well drag and drop events as well so on this main um let's listen to drop and I'm going to also call prevent right here let's create let's assume that we will create like a handle drop function Okay let's listen to drag over as well and we need to call prevent as well on drug over and the last event I want to listen is drug leave prevent on drug leave all right now on uppercase Tru and uppercase L leave now we need to Define these functions so I'm going to copy all three Nam names let's come down below and maybe before that okay let's create multiple cursors and FN oops actually let me try one thing so FN and tab okay yeah it creates three functions paste the function names and now we need to do a few things right here here I'm going to Define one ref const drag over let's call it like this I'm going to import the ref and the default value will be false whenever uh the mouse will be the file will be dragged over on the container on this main element I'm going to set this drag over. value to be true whenever on drag leave I'm going to set this into false okay uh I'm going to move this down because that's going to be the largest function all right so we have those functions let's C up them and on handle drop we're going to accept an event and the files basically will be under event data transfer. files okay those will be the files that will be dropped inside the HTML element so const const files equals that and also when we drop the files we're going to set uh drag over. value equals false and we're going to also check if no files are dropped for example if you drop a folder uh basically there will be no files dropped or if you just drag and drop something right here inside uh then it's going to also uh call this drop event but no files will be there so we're going to test that we can print this files but we're going to check files if files. length does not exist let's put exclamation here then we simply return but if that exists then we call upload files and we pass those files okay but why do we need this drag over this drag over is a flag kind of um indicator that right now we are Mouse overing we're just dragging files on that element and we need to um change some Styles we probably need to write WR a text drop files here to upload or something like this so that's why inside this main I'm going to create my template and um inside the if if the drag over is there so if we are dragging right now let's give this some classes like text text Gray uh 500 and text Center and pting Y eight and text small and inide there let's just write drop files here to upload and I'm going to create another template and wrap with v else and wrap everything what I had so far inside this template okay we have this drug over now let's save this and test this uh I'm going to now bring up a window where I have the images here I have this window uh I think I need to reduce the size of that all right and I'm going to just drag and drop my file here and as we see drop files here to upload so this screen is visible I'm going to move this on the right and here we go so drop files here to upload however the styles are not perfect definitely so let's let's give this one class if drug over is true I'm going to add a class called like a drop zone otherwise nothing will be added inside classes and let's scroll down below and under styles do we have styles here uh no we don't have so let's Define style and inside style let's give it um scoped okay and insde style under Drop Zone we are going to give it like um let's give it width 100% hate 100% uh let's give it um color some gray color I want to give it like eight I have this color eight um d uh D 8 d8d like this let's give it all also border 2 pixel dashed gray let's give it display Flex justify content Center and align align items Center okay let's save it and try to drag and drop okay now that's much better so we have these drop files here to upload we can even go uh like a step step further and add those events not to main but right here as well not sure if this is going to be the great idea but if we can try it and we can observe what's going to be the result so we save that uh uh uh it's not ideal definitely okay let's return this pack obviously let we can experiment with that and apply some CSS Styles but I think that's fine so we the main is that we're going to implement drug and drop functionality and that's going to be fine so whenever I drop now I'm going to release Mouse okay and we see right here files and I guess this is printed two times isn't it yeah this is printed two times once from here and second from here but whenever there are no files like a folder okay let's try to drop a folder not sure what will happen but let's try when I drop something okay this is a folder okay let's try to drop folder which has files inside there this was probably an empty so let's grab this drop here okay so that is a folder and yeah we can handle this case if we are dropping a folder we cannot actually read the files uh we can identify that this is a folder and maybe don't do any action because we can't actually take the files and send those files to the back end because that's simply a folder if we drop a file it has different uh properties there it has the name the name is here as well by the way it has Type list now here we don't have type all right now in any case now we have those files and we need to send those files to the back end so for this we are going to Define form right here const uh let's call this file upload form equals use form okay we need to import this use form and let's define files so we're sending files right here and I'm going to also Define parent ID okay so that is very important we need to send also to the packet in which folder I am uploading files right now because at the moment I'm inside the nested folder if I go in the my files I in the main folder folder and I'm uploading files right here okay so that's important that's why we're going to need PR ID here and if we scroll down below we have these upload files and inside upload files we are going to send the request we have this file upload form and let's set parent ID here and that will be page and again we need to use the page const page page equals use page use page needs to be imported from inertia and then right here on page props folder ID okay we always have this uh props folder so that's why we take its ID and we also need to assign files obviously file upload form. files equals files chosen files and just like this we can send request right now file upload form. poost and we're going to send that into a route which we don't have yet so let's open web.php and let's define this rout I'm going to collapse the left side and right here I'm going to Define New Road Post file store and let's give it name file. store now let's open file controller and we need to Define store here public function store okay we also need to define the request the form request class PHP artisan make make request colum here make request um store file request okay that was created and let's go inside store file request right now and I'm going to extend this from base parent ID base request okay because this will also need parent ID okay I'm going to remove this authorized and inside rules I'm going to Define now files files. Asic so I'm indicating that files will be list not a single file and then for each file we are going to have the following rules each file needs to be required uh and then it must be valid file and I'm going to also add like a custom validation function here let's accept right here attribute and value and also fail which going to be the function which we're going to call uh whenever the validation will be failed all right so why I need this custom function I I want to restrict uh ability to upload files with the same name inside the same folder so basically this value will be uploaded file so I'm going to write a query like file query where the name of the file equals to Value let's define let's um let's add right here annotation for hore value is an instance of um excuse me VAR value is an instance of uploaded file from illuminate HTTP now on this value I can um call the method get client I could actually call the method obviously without this annotation just whenever I add this annotation now PHP storm autocompletes that for me get client original name and then I call where created by is the current user Al ID and I also call parent ID um parent ID is this parent ID remember we have this parent ID defined in the parent ID base request right here so we obviously can access that parent ID and I'm going to also exclude those which is deleted so we have to specify we are now deleted at and simply we're going to call exists okay and let's assign this into file single file and then we check if the file exists that's a problem let's put this inside parenthesis if the file exists then I'm going to call fail and let's give it a message like file in the file name in this case value get client original name file um already exists and let's put the original file name into double quotes all right let's save this and basically whenever um whenever the validation will passes inside file controller um excuse me store file request excuse me file request we get this request and let's just get data equals request validated data and now I'm going to dump and die entire data so we save that and let's choose now file from here let's justo three files open now let's see we have an error H undefined reading H okay let's check the request was not made okay let's reload the page and just choose one file we see error right here upload files oh obviously we don't pass the URL that's the problem so let's call root and we're going to pass the root name and this going to be file store file. store let's save it and let's choose a file okay let's reload again choose the file okay now the request was made that's perfect however deleted a is something typo inside store file request deleted it we save it and choose another file and now we see data we see files which is uploaded file and if we choose multiple files we see five files right here awesome if I go inside documents and then upload files like multiple files I see files only do we pass perent ID let's check it inside payload we see parent ID as an empty okay maybe we don't pass parent ID let's go in the authenticated layout page props folder ID okay let's check what is Page props reload and choose files page props has a folder there and the folder has data ahuh that is the case okay we can get this from folder. data but I'm going to actually try to disable this data file resource let's give it rra equals false if we do it like this now let's have a look okay Network parent ID that was passed however we don't see this parent ID right here under validated data why is it not there probably because we lost that rule we obviously obviously lost that rule because we over um overrode the rules method we're going to call array merge right here called parent rules and then merge it with our own rules now once again if we try to upload files now we see parent ID here as well which is awesome and fantastic all right that's great now we have the data inside the file controller however before I proceed and implement this store file request I want to um I want to implement also uploading folder because it's going to be very similar to uploading files but we're going to make some modifications in the um store file request and prepare this finalize this and then went into the file controller and implemented right there okay now let's try to choose the file we have this folder upload menu item so that's going to be pretty similar so I'm going to copy this uh paste here let's give it um let's give it hre hashtag and hre hashtag and relative okay we can listen to onchange however we need to specify uh something right right here and that will be directory we have to provide that this needs to be directory and web kit directory as well however we're going to search basically uploading directories upload directories um HTML JavaScript something like this so basically this is not a standard uh mdn let's search for mdn n okay webkit directory this is exactly what we are going to use however I think that is not implemented in every browser but that actually works here I remember when I was like um um preparing for for this project I came across to an article or something that um it is not kind of standard and it might not work in every browser but it works in Google Chrome it works probably in um Firefox as well in like the Evergreen browsers probably hopefully it will work okay so that's great this is exactly what we wanted we have specified this directory and webkit directory now let's define this on change function and on change and we accept an event here and obviously we are going to get even Target files from here and I'm going to also use emiter and emit file upload started plus event Target files event Target files is the emitter imported no it was not imported okay so that is that is awesome now we save it and have a look upload folder okay now we have ability to choose folder upload upload and here we go so we see parent ID and we see files and the files there are 26 files inside the folder which CH so we we see all the files however there's one tricky thing if I upload a folder which contains subfolders right there the content which will be created right here in our file manager needs to reflect the uploaded folder structure so if there are folders it needs to also create folders right there but whenever we upload a like a folder and let's do like this this ecommerce product inside there we have folder another folder so if I choose this ecommerce product upload it shows me that there are six files totally however if we check these ecommerce products there are three files here and then a folder and inside there we have three another files okay and by the way these are the ecommerce files uh from my um premium course building a lot Lal Ecommerce file if you want to check this course you can check my website thecode holly.com you will find like about 23 hours content and I'm working on the update as well on that course all right so we need some kind of um modifications so that reflect the structure which is inside the folder we we're uploading and that needs to be done on the client side because as soon as those files are submitted there is no way to understand and realize on the backand in which folder those files were located so when we choose those files let's go in the authenticated layout and we have the props I'm going to remove this and we have upload files and these are the files which I'm going to print right now and we are going to observe that okay let's choose the folder ecommerce products upload now let's have a look six files and if we expand them we see webkit a relative path okay so this file keyboard.jpg is inside ecommerce products so this is inside ecommerce products this is inside ecommerce products however cheer is inside ecommerce products SL test/ cheer and this one is inside ecommerce products test um then this is the name okay so this web kit relative path is something that is the only way to identify inside which folder the file is located so we need to pass that information to the back end to PHP side and then construct the proper tree of files and then where necessary we're going to create folder in this case we're going to create folder of ecommerce products then inside there we will create three files those files keyboard and MX Masters and this and we're going to also create one folder inside this ecommerce products and the folder name will be test and inside there we're going to create um three more files okay this is right here three more files this is the way we're going to do so we need to pass that webkit relative paths for all uploaded files to the back end let me open now uh my authenticated layout and inside this form I'm going to add a property called relative relative paths all right and that's going to be an array and right here not here let's remove it and right here when we set files I'm going to also set these relative paths which will be to map each file I'm going to call files map however I am um using this rest the spread operator to basically destructure these files and create new array because the files itself is not an array and I cannot directly call map on the files in this case I want to call map and each file needs to be mapped its own web kit relative path so F web kit relative path and now finally I will have relative paths right here which we can easily test if we choose this we can easily check this in the network we see relative paths right here okay so we have that information but we need that information now on the backend side now backand knows uh where each file should be located in terms of in which folder it should be located now we're going to open this store file request and we're going to prepare the data properly right here I'm going to Define method right here prepare prepare for validation and from this relative paths so I have this these relative paths and I want to well I want to also filter these relative paths because it might be an empty array as well uh it might be list of empty arrays if we are for example choosing multiple files in this case relative paths will be list of empty arrays and if this is the case we're uploading files and we we need to also detect that we are not uploading folder we are uploading files and that's why we need to do it differently so I'm going to call array filter right here on this uh if this relative paths for some reason does not exist we can take it as an empty array just a small extra security check and obviously we are going to write a filter function if F does not equal to n I'm going to use right here um just exclamation mark and equal sign by the way this symbol this strange symbol right here is done through the because of the theme I'm using but actually I have written exclamation mark and equal sign and it automatically displays that um okay I am not using double equal right here exclamation and double equal because this might be an empty string as well so I want I don't want it to check also types okay perfect now we have these paths and I want to call merge and pass this file paths which will be paths okay and I also want to create one extra property called folder name and that's going to be that's going to be the folder name um which I am uploading so even if I'm uploading um like a folder name behind we still submit multiple files all the files which are located inside that folder right but in this case if we if I'm uploading folder folder is the key if this there exists a folder with the same name inside the folder I uploading then it should be prevented for example if I'm uploading this test folder right here inside documents um and I choose this test from here finally it will give me three files and it will send those three files to the back end but the key right here is the test I need to check if the test already exists inside the documents folder then I need to show an error to the user that there already exists test folder however if I'm uploading those three files without uploading the folder then those three files will be directly available right here and displayed right here and then I need to check if those three files one of those three files by their names is already available right here okay I hope this makes sense now right here I'm going to call a function nonexisting function right now but I'm going to create that function detect detect folder name okay and I'm going to pass paths right there okay and down below I think I need to zoom out slightly maybe yeah down below I'm going to create this detect uh folder name function public function detect folder name we accept paths right here and if paths doesn't exist if this is an empty array or it doesn't exist we return now which means that there's no folder we are not uploading folder okay however if the paths exist then we need to do the following we are going to call explode and split the very first path path zero we're going to take the very first path split that and there going to be parts right and then I'm going to return Parts at zero the very first part again if we have a look right here so we're going to split that the very first path and take the first part and that's going to be the folder name the folder name which I am uploading all right now since we have that folder name I can write a rule inside rule section for folder name and that can be nullable that's the first thing we need to specify and it must be string and I'm going to create similar custom validation function with some difference so right here the value will be the folder name oops the value will be the folder name so in this case I'm going to check um file query where the name equals value itself we are created by is the currently authorized user um parent ID is this uh deleted that is this and exist I think that looks correct we can optionally add extra check if is folder equals one however if there exists a file with name test for example or test. jpg let's Skip and don't allow creating folder test. jpg as well okay so we basically don't care if it is file or folder if for the current user there exists in the current directory not deleted file then we need to show an error in this case the error will be folder uh let's remove this folder for example test already exists however however we need to do this only in case when folder name exists and it is not null or an empty string so let's add right here if value exists we do this only in this case VI Versa we're going to do right here we're doing this validation checking every uploaded file every uploaded file pay attention so we have asterisk right here we're going to check every uploaded file if that is unique inside the current folder for the current user only in case when folder name is not uh when it is empty when it doesn't exist because if the folder name exists it means that we are uploading folder not individual files and we need validation for that folder okay I hope this makes sense so if this folder name does not exist I'm using exclamation here if the folder name does not exist then I'm doing I'm applying this validation okay that's perfect that's good I think we have the validations ready and I'm going to make a quick test right now I'm going to go inside this my files and I'm going to create new folder called test okay I submit that now I have test right here and now I am uploading files those three files click okay and I see this code which comes from file controller we have folder name now parent ID and files now I'm uploading a folder test folder click upload upload and let's have a look let's have a look we have some kind of Errors let me reload the page and upload folder my files okay here we see inside preview under props and errors we see folder test already exists so that proves that we have implemented validation let's close this where is this store file request we have implemented validation properly and now we have the data correctly available in the file controller however there is another one however the data we are sending right now is flat even if we are choosing this ecommerce products folder which has nested folder inside there the data that is right there is still flat okay and we need to construct a tree type of structure so that inside the controller we will accept that tree type of structure and simply iterate over this tree Traverse the tree and then create files and folders According to which one is necessary okay in this store file request I'm going to create one more function which will be past validation okay that's the uh reserved name function and as you see right here small indicator that indicates in the phorum that uh that overwrites the method in the parent class okay and right here we are going to call the method replace uh file tree okay well replace probably is not the ideal name in this case because we aren't actually replacing but we are setting the file tree right here uh and let's get the validated data that function by the way will be called only when the validation is passed so in this case I'm getting validated data and I'm going to create now a function called build uh file file tree like this and I'm going to pass these file paths and I'm going to pass data files okay so these file paths is you know what this is so we have set these file paths and those are the paths we sent uh from the front end okay uh we don't see payload for some reason right here but um previously we saw that the file path and the data files is the actually uploaded files and now the key thing is this build file tree so at the very bottom let's create this maybe private function build file tree we accept file paths and we accept files right here okay and first of all uh we're going to check if the file paths and files are actually the equal size array okay and this is important and let me explain why so if I create uh folder for example entire pictures folder click upload then under files we see this uh 86 files okay we should not have right here 86 files and by default when you upload uh files by default the default setting um is 20 files so basically PHP will only take first 20 files and the rest of the files will be simply forgotten okay while I was like preparing for this project I changed some configuration in the docker container and now it uploads 500 files so this is we're going to also see and learn how to make those changes but right now I'm going to revert those changes and right here we will only see 20 files when we upload more than 20 files okay I'm going to pause the recording just revert those change and then we're going to see 20 right here okay I reverted the change in the container Docker container which I made and whenever it's time we're going to redo this change and you're going to also see how you can increase the number of files and load files to be uploaded or how you can increase the file size when you're running your application in the docker container using blal sale in this case let's choose upload folder and I'm going to choose entire pictures and let's have a look now as you see we have only 20 files right here however if we observe the payload we see see okay this is something else hold on okay so we sent uh actually my bed um all files were sent and all relative paths were sent but the files got lost and the relative paths will probably be available and will be right there but the point is that inside relative paths we're going to have much more records than inside files and I think the ideal case will be to demonstrate this right here I'm going to dump and die file paths and files that will be much better to show let's click upload okay now let's have a look so we have 86 file pack as you see but we have only 20 files so this is something we need to consider when we are building the tree because even though we might increase the number of allowed files from 20 up to 500 user might still upload more than 500 and then we just need to match the file paths uh length to the length of of the files that's why I'm going to do the following file paths equals array slice from file paths zero is the um starting position and count of files will be the ending position in this case if I just dump file paths and files we can see both of them will be 20 this is 20 I'm uploading the same thing hold on from file paths okay this is what we need to do okay file paths and files perfect now let's build this tree this file paths is something which I'm going to call also array filter because if we are uploading files not a folder then each file path will be an empty string so let me actually get this from here uh file paths equals filtering file paths where each of them is not null or is not an empty string and now let's build tree tree is an array and for each file paths is we need all also an index right here in the file path okay now I'm going to split explode the file path using slash okay and we will have Parts like this and now I'm want to create a variable called current node which will be uh which will be tree and we can take take this trip by reference we should take this by reference because we are going to modify this current road we're going to put something inside there and that should be inserted inside the tree okay and now I'm going to iterate over parts we have exploded and I'm going to also take I right here as an index now let me explain this clearly let's say we have folder called test and inside there we have one dot jpg okay jpg as simple as that we're exploding this with the slash so inside Parts we're going to have two um two array Two element array test will be one and one. jpg is will be second so here I'm checking if the current node or the part in this case for test if that does not exist so we're going to do this using is set if that does not exist then I am setting this current node or part equals an array okay so finally I'm building um something like this so I will have um an array inside there I will have test which will be an array okay and inside there I will have one.jpg so that indicates that there's a test folder and inside there there's one jpg so this is my final goal how I want to do this okay and I also want to uh right now I'm working on the file paths and finally I will have a least a tree of file paths but not an actual files so I'm going to check whenever this is the index from these parts whenever the index is the last index which indicates that this is a file not folder anymore okay so whenever I equals count of Parts minus one so this is the file now inside current node or the given part we are going to put an actual file and that will be from files from files on the given index in right here okay remember we now match the length of the file paths to files and we receive them in the same order in the same order because we this is how we send from front end we have files and then we map each file into its own path so finally the the element from this relative paths at index for example 10 will be path Four Element from this files array at index 10 they will correspond to each other so from these files I will take uh the element from the same index I am iterating inside these file paths all right and in El's case current node will be current node for given part and let's take this as a reference game and let's discuss this else case if we have path like test/ test two something like this then we will have folder okay let's take my example we have ecommerce folder inside there we have test folder and then we have some images Ecommerce okay so in this case in the first case uh this doesn't exist so that will be created like this ecommerce okay so this is the first iteration then the if statement will not be satisfied because we are here we are not on the last index the else case will be taken and the node the current node will become this okay not this anymore initially the current node was this but now it will become this let's remove this one at a moment okay now current node is this now the loop finishes and the I becomes one and we are just looking at the test so this if will be satisfied and that array that array will be created okay and this if will not be satisfied and then current node will become this and then I will increase that I will be here this will still be done so inside there something like this will happen 1. jpg this will happen but because I will equal to the parts length minus one then this will be replaced by an actual uploaded file and finally we're going to have U the following structure tree okay I hope this makes sense I cannot explain better than this and I think you will uh understand when you see if if there is something you haven't understand um understood you will see that when we actually print that tree and which I'm going to do right now I'm returning this tree and I have this file tree uh replaced after past validation so basically in the file controller inside store I should be able to access this file tree okay file tree equals request file tree and let's print file tree we save it now we upload uh let's upload my ecommerce folder let's have a look so this is clear that was previously but this is interesting so we have ecommerce products we have four items inside there we have three files like this and one folder inside this folder we have three more files and this is exactly what we wanted to have now let's implement this function okay and this is the last thing we need to Implement so we get the data we get the file tree let's also get the parent from this request and I'm going to also get the current user um do any the user well I need the user ID which I can get it or let's just take the user maybe we need it not sure it doesn't hard if we just take the user now I'm going to check if the parent was not received then obviously the very first thing what we do is the parent will become this get root okay now we have the parent we are sure that we have a pent now I'm going to check if the file tree is not empty okay not empty file tree then we're going to save the entire tree so I will create a separate function for this but right now I'm going to call save file tree and we are going to pass file tree we are going to pass parent in in which folder I want to create that file tree and the current user as well perfect however if the file tree is empty then we have these data files which we probably can see here as well okay if the file tree is empty it means that we have have not uploaded folder instead we uploaded files multiple files one or more files and we we just need to iterate over our data files so for each data files like this and then in this case we just need to create um file instance let's call this model equals new file and that should be file from Up models file like this we are going to provide we are going to provide um is folder equals false we will need also name to be file get client something okay I don't remember the name by heart I can obviously copy this from here but what I generally like is adding annotation like bar not model but file is an instance of uploaded file okay whenever I do this now the a completion works like a magic and model dot model. mime oops mime equals file get mime type and model do size equals file get size okay and we are going to call on parent node append node model however here's one important important thing we actually don't save a file on a file system yet and this is something we need to do so on that file I'm going to call um store and provide the path and let's provide like files I want to save everything inside files but I'm going to also provide um user ID as the folder user ID like this and that will be the path where the file will be saved okay and I also want to save that path inside the files table in the database if we check the these files database table we have path right here but that path is actually a different path uh I'm going to create new column and call that like a storage path okay PHP artisan make migration Ed storage path to files table let's try like this add storage path to files table okay so we have this table uh the storage path will be string storage and the length will be like let's give it 2,000 okay and in this down I'm going to drop column storage path okay let's apply migration PHP PHP Artisan migrate storage path okay I want to roll back phpr do migrate roll back D step equals one and I want to add this after path migrate perfect let's check now database and we see path and storage path and this is now at the moment okay right here on this model I'm going to specify now storage path equals the given path okay so this is something that is not implemented yet I'm going now oh s mistake closed file controller I'm going to now upload files not a folder and test the else statement okay how this works let's r the page upload files I'm going to choose these three files click open and attempt to read property ID on now and that happens on user ID okay okay why does this happen because I have request ID right here do you have idea why I did that no okay I don't have idea as well why I did that stupid thing all right so now let's upload files and do you see that that means that we have uploaded files if we just reload the content is there and now let's check the storage go under storage app files the current user ID and then we have those uploaded files with some random names and those storage will be available in the storage path as well right here that is already big success okay so we have that it's amazing first we have folders these are the folders and then we have files we need also to add icons right here which we will do but now let's focus on saving the entire tree this this file tree okay at the very bottom I'm going to create that function uh save file tree we are going to accept file tree we are going to accept parent and user let me now iterate over my file tree and we're going to have name and we're going to have an actual file however that file might be sub tree so I'm going to check if is array that file if this is an array okay it means that this is a folder it has a sub tree right there so right here I'm going to create folder equals new file folder is folder equals 1 or true no matter and folder name is the given name and on the parent we're going to call a pended child folder so here we are going to call this save file tree again this save file Tree in this case we pass it subtree and subtree will be the file we just we just created folder so this will be now sub tree and the parent will not be this parent anymore the parent will become the folder we just created okay so this is the parent and the user obviously will be user and just like this it will iterate over our tree for every folder and create the folder and then call this for basically um sub tree however if this is not an array this is the case where we need to save it as a file and we can get this code from here at the moment I'm I'm going to just um copy and paste and we need to copy this part as well so we have this file and we store this in the following path we create this file and specify storage path is folder everything everything is exactly as how it should be however like we have this code duplication here and there so probably I'm going to select this hit control alt and M and that will will be separated into its own method like a extracted method and we can call this save file and PHP sh detected that there's another code fragment in this file that can be replaced with the call to extracted method would you like to review and replace it I'm going to type yes replace now both places we replaced save file here inside the store method and save file here here as well inside the save file tree however I need a slight modifications formatting okay that's perfect now we should be able to upload folder as well upload folder let's choose my ecommerce products click upload upload okay file append child append child is something uh something not correct it should be up in the node reload the page upload upload okay storage path doesn't have a default value okay we should probably make storage path nullable right so let's come right here and make this nullable because for folders it should not be required okay I made this nullable and I can now run roll back and migrate again and let's upload this eCommerce products once again and here we see ecommerce products okay so the folder was there it was uploaded now let's double click inside the folder we are inside this folder we see test and those three files okay if I double click on the test I see the other three files as well if I check the database right now I see those three files those three files that's perfect and on the file system we see totally nine probably so we see nine because they we previously other three as well which doesn't exist in the database anymore so we probably can delete delete that but that's not a big deal okay so this is the implementation of uploading files we have uploaded files through upload files functionality uh let's choose settings okay now let's have a look it looks like it was uploaded but maybe somewhere right here okay it was uploaded not inside ecommerce products but outside let's check I want to upload settings okay what is this it triggers this multiple times okay okay let's see expected array cut object for ancestors okay let's fix that I don't like warnings because one warning might causing absolutely different problem and you have no idea about that okay object is not that should be uper Cas so object okay I want to upload settings folder settings file right here but it does not seem to be working okay all those settings we are uploaded in the root now we have three settings in the root okay we obviously have something wrong in validation uh or not in the validation but probably in uploading in a proper place let's open file controller let's check this part this is the problem exclamation mark is missing if the pr doesn't exist in this case we get the root okay now let's go inside Commerce products and I'm going to upload settings and I see settings right here I reload and settings is still there I can go inside any of these images I go inside test and I upload download for example it's there now let's test one with drag and drop so here I have it and let's upload this logo my logo release it and we see that isn't it awesome yeah so it is awesome really awesome the files are being uploaded like a charm if you look at the size column right here we see that the column is displaying bytes if we go inside the folder we see bytes right here we should change this and probably display in more user readable format such as kilobytes or megabytes or gigabytes okay so let's try to implement this for this let's open file.php model and right here I'm going to create a function method basically a public method let's define it right here public function get file size okay and I'm going to Define r here units which file size we're going to have we're going to have BTE and kilobyte and megabyte and gigabyte and we can go uh even farther but I'm going to stop right here and let's define power so this size if this size is more than zero in this case I'm going to call Floor to round this everything basically um down and let's write else casee as well so I'm going to round everything down and I'm going to use a log function for logarithm so this size 124 1,24 okay so this will give me the power and now I'm going to return number format I'm going to give this size decided using the power function 1024 which is the number of btes in a single kilobyte uh in power and yeah I think that's it so we can specify extra uh two that we want two decimal points and I'm going to specify right here that the decimal separator needs to be Dot and this thousand separator needs to be comma okay and we also need to provide what should be the units so from units I am going to take so this is why we calculated this power so from the units we are going to take whatever is the power okay if we explain the following part so what does this actually do so this is pretty obvious I think that if the size is more than zero then we need to calculate something otherwise we just take power to be zero okay but why we create this power or what what is the magic rate here so the logarithm obviously is a mathematical function which calculates in which power we should take uh 10 24 in this case to receive this size for example if we assume that this size is 5,000 bytes okay so when we calculate log 5000 with a base of uh 1024 okay this will give us roughly roughly it's not exactly 1 228 okay so this means that if I take this 10 and 24 and take this in power 1. 228 it will give us roughly 5,000 okay and then why why we do this so obviously if this size is 5,000 in this case this the selected section will give us 1. 1228 but we are rounding this down so finally when after we round this down we will have just one so this expression will return one and why do we do this so we have the power one right right here and then we call the power function to take this 1024 in the calculated power so because we round down now this power 1024 in power one will obviously give us 1024 okay and then when we calculate this size divided on 1024 this will give us uh roughly 4 something right and because this is 4 point something um we will have 4 point we also have decimals right here 4 point whatever something and from the units we also take what is the power so in this case the power is um the index from the units and the power is one so we take 0 1 2 3 4 5 so we take in our specific case the power will be one so we take kilobyte so finally this calculation for 5,000 this size 5000 will give us uh 4 something x x kilobyte okay so this is the whole idea it's a kind of magical but it's a that's a formula so you can take the logorithm for for these size then you round down and then you again call the uh Power so basically these log and the power are um inverse functions okay but the difference is that we also call floor right here to reduce the actual value and then we call power on this reduced value so if we increase this and if we have like 5 million then obviously this will be much larger and right here the power will be changed and it will be two and then finally we will have something like a 4 point something megabyte not kilobyte anymore okay I hope this makes sense so if I save this right now and open file resource we have size right here and I'm going to call get file size if we open my files so the size is already outputed right here here so there's nothing to do so if we just reload in the browser we see formatted values so test in this case is a folder and we see Z byte which is fine the folder by itself doesn't have any size and now this is 400 something this is 150 and I hope this makes sense okay so we have the perfect output let's try to upload larger file if we have one upload files uh do we have larger file like this one is 2 megabyte okay so I'm going to click open and look at this so we have 2.90 megabyte right here okay perfect now let's do something which is fun so we're going to add icons to the files and folders so I have used the following website flat icon . I searched for the icons such as word for example and I downloaded those icons for word excel image video and so on so obviously I don't have all the possible file types but I just downloaded few of them and I'm just going to open this with you uh to see which files we have here is the icons so we have um this is uh just an standard file so if we don't know what type is that that uh I think that's that's for it or maybe this is just an icon of the button anyway so we have audio Excel image PDF text file video word and zip and pro maybe this is just as I said extra file which is not supported which is not one of these so I'm going to get those icons now and go in pH stor and put them under resources and we should put them probably right here actually we should put them under public under public let's create folder called images and paste the entire icons folder inside okay so now we have this then under resources and under JS components and maybe right here I am going to create let's put this inside up I'm going to create a component called file icon okay and then right here based on the file type I'm going to display a different icon so first of all inside the scripts under props I'm going to define the file which will be passed right here as prop const file equals uh Define props I give it file which must be object okay then I'm going to create under maybe under JS I'm going to define a folder called Helper and inside the helper let's create one extra file called file helper so I'm also trying to define the folder structure which will be scalable so I just introduced the helpers section and inside right there I'm going to export a couple functions is image for example and this accepts a file and we are going to return uh I'm going to basically do a regex right here and if uh I'm going to test the file mime type okay so let's define the Rix so the mime should start with image and it should have then any word characters right there and then this should be the end of the mime type and then let's call test file. mine okay so is image now let me import that inside file icon and let's define right here the um template I actually already have templates so let's open hero icons and let's get the folder from here I would uh take like word and image files from here as well but there are not every file type so let's get the following SVG which is just for the folder so I'm going to paste this right here and let's add let's add the if let's wrap this inside the span okay and let's give this SVG the if the file um is folder so this is the if this is the folder we show The Following SVG okay so we have else case as well we can put this under template and you will understand why I'm putting this template because right here I need to have many different types of images for different um different extensions different types so if if this is image and now this is the case when we want to import this is image right here okay and that was automatically imported from the file helper let's move this under import section so if this is image then we have to provide source to the image so images uh icon slash image.png okay we can check this public images icons okay that should be under icons uh image do PNG okay so this one will be displayed whenever the file is actually an image okay let me remove everything else and let's go in the my files and let's maybe before the file name let's use file icon okay and we have to provide file right here and the file icon needs to be also imported okay that was automatically imported now let's check the browser okay it looks like we have some kind of error reading M can read properties find and find reading mine is image okay we have this yeah I'm not F passing the file obviously I need to pass that okay let me save this reload the page okay and we see we see icons so we see for the folder as well as for the image however we need some CSS okay let's define some CSS for the image first I'm going to give it Max with full okay and on this pan I'm going to Define so with 8 88 inline flex and item Center and justify Center and margin right two okay let's reload the page not too bad however I don't really like how this is a line so this is good but I don't like how this is aligned so let's open my files and check this okay maybe we need maybe we need items flex and items Center here as well so if I specify okay that's much better and as you see right now we have proper Styles well this one is much larger than this one we can actually adjust this a little bit so if we just reduce the size for that maybe like this okay it's much better let's go inside ecommerce products we have only images actually we don't have any anything else okay let's try to upload any other file uh this is also image let me open this from documents like surveys. SQL we see we don't see any icon because we don't handle this this case but it's good that um it is not there because we have to implement it right now okay so in the file icon I'm going to duplicate this okay multiple times and let me actually first Define the functions right here okay so to save some time uh I searched in in the internet the MIM types the most common M types for different file uh file types so I'm just going to copy and paste okay let me copy and paste this part okay so we have image defined then I am pasting The Following part okay so if export function is PDF and we specify if the MIM type is one of the following application PDF xpdf acrobot vnd PDF whatever okay if one of those includes file mine then this is PDF and we have the exact same approach for is audio is video is word is Excel is zip and is text file okay so we have all of them defined right here and inside file icon I'm going to also copy and paste this part and this is PDF needs to be imported his audio needs to be imported his video so is word is Excel is zip is text so we have imported all of them and we have V else case where we just show attach file so normal file and those are right here imported so if I save this right now and reload we see surveys SQL okay um yeah this this is icon and we have inside icons let me actually change this into icon the folder then we change this into icon as well now we have icon everywhere I save that reload the page and we see that the survey is actually type of text okay and if we upload like um this file it will become as a zip if we upload what is the bu file it is also zip let me upload one video now this this has a video type okay so that's cool now we display the icons okay now let's display the progress indicator when we start uploading files somewhere maybe at the bottom right corner of the screen let's display the progress okay so let's open authenticated layout because this is the place from which we handle upload okay and we have this file upload form which is what basically is the main object in this case inertia object form which handles this this upload part and this file upload form actually has the uh progress IND Ator right there so if we just print somewhere let's put this at the bottom maybe we have the navigation we have the main section and let's put this right here okay this form uh needs to have an indicator to progress if I remember correctly but we can also progress okay let's check this if I upload something let's upload a video okay we saw something right so that was a progress and the progress is an object which has percentage percentage so I save that and let's try to upload uh okay we see 100 right right here so but I think we we just uploaded the same file file which we already have uploaded and we should uh this is different type of error uh let's let's see so yeah when we try to upload the same file which already exists we need to display the errors as well right let's first finish the progress displaying the progress and then we can implement this displaying the proper error inside the components uh I'm going to create maybe inside the app I'm going to create a component called form progress form progress okay so this form progress should accept a prop called form so Props Define props we accept form which needs to be an object okay now let's define the template let's make it div standard div element and this div should only be visible if form. progress exists okay let's define some CSS on that D so it must have position absolute let's give it border Gray and 900 let's give it border as well let's give it right8 and bottom um bottom four BG white shadow LG and let's give it rounded and let's give it also flex and flex column and let's give it fixed with like 240 pixel okay inside there I'm going to create one div which will display text uploading uh form files length files okay how many files we are uploading we display it right here and let's give it text extra small margin buttom to and we need another div which in this case will be progress okay so let's give this one eight three PG gray 100 let's give it rounded rounded MD and inside there another D which will be an actual progress indicator which will be filled let's give it eight hateful BG gray 900 and rounded MD and transition all okay and this one should have a style which will be dynamically bound okay the width should be calculated based on form progress percentage okay and let's suffix with percent as well so if I save this and go in the authenticated layout and at the very bottom let's include form progress and we have to provide form which will be file upload form I save that reload we have an error awesome I love errors because when I fix I have that feeling of satisfaction okay authenticated layout I think that is coming from here so we just need to remove that okay that's perfect let's click upload files and choose one file click open and look at this did you see that progress uh let's slow down AIT Network slow 3G and let's choose I think image will be enough as well maybe a large image this one look at this so we have this progress well I don't actually like that it doesn't have any any padding so we probably need to provide so the form progress some kind of ping ping three maybe okay okay not bad let's reduce ping two okay so we have that progress okay as soon as the file is uploaded then the progress disappears because form progress does not exist anymore okay so let me go inside no throtl Ling and upload maybe a video okay the progress is there and it's very obvious now let's Implement displaying the error dialogue with the proper error message when there is some kind of error when creating folder and if the folder already exist or uploading files I'm going to also open de developer tool so that we see an eror immediately and whenever we try to upload a file which already exists under props errors we get the following error message file create whatever already exists okay now let's go inside authenticated layout and right here when we call uh post on the form we can specify a second object which is is a configuration and we can configure a couple of uh events as well so I'm going to also open inertia documentation here we see these and if we go under forms we can easily find that section uh let's scroll down below okay as you see we can uh provide preserve scroll and success and the options what what we can pass right here here supports all the typical visit options so if we click visit options we can find out what options we have right there on progress on success whatever and the form submit supports all those options so in this case we need on success on error and on finish so on success when everything is okay we need to show um some notification I'm going to leave this as it is right now I'm going to implement it later after this so inside on error I get I accept errors okay and I'm going to define a message so let message equals an empty string now I'm going to check if object is SS dot length is more than zero okay uh hold on need like this so if this is more than zero then message equals from the errors object we take object his errors at position zero okay so if these errors uh we need like this like this okay so if this is this errors which should be an object if it contains something okay then we take the very first key and take the message and assign it to the message okay that's perfect however if the keys is empty then we can define a general message error during file upload please try again later okay and now from this point we need to show this error dialogue okay so we have defined event pass and inside the event pass we have only one event at the moment show um file upload started okay so I'm going to Define another event export con show error dialogue and let's specify the same name right here show error dialogue and for Simplicity we can export function show error dialogue message like this okay so I can actually because I'm emiting I'm exporting from here emiter I can actually import emiter here and call trigger however I'm going to Define this show error dialogue which accepts a message and then on emiter I can call emit actually I need to write this I can write this here okay let me write this down below let's move the functions down okay I'm calling Emit and the key will be show error dialogue and we pass message inside an object now I need to open this um authenticated layout and I'm going to actually first create this error dialogue under components let's create error um er dialogue okay I'm going to use model we already have that component defined so here's the model I'm providing show it needs to be displayed if the show is true and I'm going to Define this show as well and let's specify Max width as well which needs to be MD okay so inside there let's define let's give it um like pting of six H2 that should be an error let's give some classes TT two Excel margin buttom two text red 600 and font semi Bol let's collapse the left side and then we will have a div with margin top six let's give it flex and justify end so this will be just a button and inside there I'm going to put primary button which will be okay and we can listen to click if we want and call close and we click okay now we we need to Define few things like show and close let me move these Imports up first like this and let's Define function close and I also need to Define and refs con show equals ref uh false okay and let's import this ref perfect now let's define message as well const message equals ref which by default will be an empty string okay and I'm going to Define also uh Amit Define Amit and close okay what else do we need this is a show uh on close basically we call show. Value equals false and message. value equals an empty string and let's put inside hooks on mounted un mounted I need to start listening to the following event show error dialogue okay so I'm going to import emiter on show error dialogue and whenever this happens we will accept message here uh and I'm going to set show. value equals true in I'm going to set message. value okay so here's the problem so we have message defined inside refs and message as a um as a variable inside the local function the structured um variable of this object so I'm going to destructure and take out MSG okay so I'm taking the message but assigning it into a variable MSG so in this case the message right here will be my ref so message do value will be MSG the emiter needs to be imported okay okay perfect if I open our authenticated layout right here let's import error dialogue okay and we don't need to pass any prop right there because everything basically will be done through event bus mistakenly closed authenticated layout okay I save that and let's now try to upload file okay we obviously it didn't work we don't see this error and now let's figure out what's going on this this is the form we have this on error h i don't call show error dialogue obviously and I don't pass message as well okay we import this show error dialogue from um event bus here it is so I save that and upload the file and look at this so we have error and we should have some sort of message but the message is probably not outputed here so let me actually create a paragraph with message and now we see file whatever already exists now let's try to create new folder called test this will return error but will not display the error no it actually displays because we handle this type of error slightly differently okay what if I try to upload a file with drag and drop uh if I go inside this ecommerce and we have settings right there and I search for settings and I try to drop here we get this message because every file upload whether it's uh using the file upload button or using drag and drop uh is handled through this authenticated layout from from here here so it will display an error okay let's add one more thing right here which will be onfinish so whenever this is finished no matter if it was successfully finished or not successfully file upload form we're going to call clear errors and on file upload form we're going to call reset as well okay that's just one extra thing and now let's try to upload a folder I will try to upload um ecommerce okay let me go back and try to up load from here ecommerce load okay folder ecommerce products already exist and obviously this is coming from store file request but this is the case when folder name exists okay folder whatever already exists okay so that's perfect so we have implemented displaying the error message when we try to upload file which already exists in our uh file storage now let's Implement one very useful and important feature and that's going to be loading data while we are scrolling okay at the moment as you see we don't even show SC scroll okay this is something which needs to be probably added on this on this element which is above the table which has overflow hidden so not sure we're going to experiment and we're going to see let's open my files and we have this table and I'm going to put this table in zone div okay and I'm going to give this div uh FL X1 but overflow overflow Auto okay let's put this table now inside save it and as you see now we have the scroll okay however nothing is loaded while we're scrolling and by default we are displaying how many maybe 10 10 records right here obviously if I open let me close everything if I open file controller and find this place we have page8 10 if we increase this into 50 and reload the page we see 50 items we don't probably have 50 but we we're going to see as much items as many items as we have at the moment okay I'm going to set this back into 10 and we are going to implement the scroll let's go under my files and at the very bottom of my files I'm going to add H called unmounted okay so when this happens I'm going to Define observer which will be new intersection Observer and this will accept a call back okay and this callback will be triggered when uh the intersection actually happens okay so in this case let's specify um third argument here as well that's going to be the margin okay so let's specify root margin minus uh 250 pixel Z pixel 0 pixel 0 pixel okay so whenever there is negative 250 pixels remain so this the the goal basically for that is whenever the scrollable area this area scrollable area is 250 pixels um whenever the edge of the scrollable area is 250 pixels below this part okay then we need to load the content okay while I'm scrolling okay the edge is obviously so this is The Edge so we have the keyboard jpg in the um like bottom bottom edge of this keyboard jpg is the edge of this entire scrollable area okay and whenever this keyboard's Edge okay bottom Edge is 250 pixels close less than or 250 pixels close to this part okay this is the idea it is not yet implemented but this is how I'm going to do that when it is that closed then we are going to load more content okay so I'm going to also Define a one riff uh right here and that ref should be the load more intersect okay so let's define const load more intersect it will make a total sense believe me right now okay so we Define this ref now I am going to create uh right here here I'm going to create hold on which part is the scrollable area so this is the scrollable area right so I'm going to move this closing div at the bottom and put this inside the scrollable section and inside the scrollable element I'm going to create one div which will have this ref L more intersect okay so now this is the element load more intersect now let's scroll down below and I will implement this call back in a second on Observer I'm going to call observe load more intersect dot value okay so this is the element so the I'm I'm configuring The Observer to observe these load more intersect value and I'm also specifying that the root margin whenever it is minus 250 pixel then the Callback needs to be executed so inside the Callback we get entries and on each entry we can actually test if at least one of them is intersecting okay and again if we check in the browser at the moment we have an error so intersection Observer so we can check the documentation from the mozilla.org mdn if we scroll down below we can find some examples here and here the example of entries we Define the Callback the entries and each entry describes an intersection change for one observed Target element and each entry has the following uh properties like bounding client rectangle is intersecting this is something which we are interested okay so in our case I am going to iterate over my entries entry and I'm going to do the following if entry is intersecting okay if at least one entry is intersecting then I am going to load more content and I need to define a function to load more content so I'm going to Define it load more at the moment I'm going to write just load more as a console lock but right here I'm going to call this load more okay now I save this and let's test test everything go in the console and if I start scrolling and I when I reach the last section I get this load more okay so again I reached the last part and this load more is printed and that's the place from which we need to uh make requests to the back end and get more content so if we have a look inside props we have uh files and folder and ancestors okay defined right here the files is what we are using and if we check at the top we see file files. data but the files has something else as well so it has pagination information as well and imagine that when we are loading more and more data the number of files or folders totally on this page will increase like we are loading and loading and loading more data okay so this is not standard pagination the standard pagination is that if you have a page size set to 20 you you always load data of 20 and you always display data of 20 okay so this is how standard pagination works and if the following function the following action will be executed this will always return um 10 items so we need some way to accumulate the data returned from the back end into the following component and then when the next page data is returned it's going to be accumulated and appended to the existing um data and and so on so what I'm going to do is Define under RS I'm going to Define all files okay so we have the files which will always return data for specific page okay now let me Define all files and there going to be ref and this will have data inside which will be props files. dat and we're going to have also next which will be props files. links. next however the props is not available right here isn't it so what we can do is set this into well actually let me do like this I'm going to copy this part and I'm going to set the data to be an empty array and next to be null we have all files and then inside hooks I am going to listen on updated hook and whenever update happens all files. value is an object and then while inside this on updated hook uh we will yeah we will get updated props so in this case let me Define props right here and instead of having a direct access on files dot whatever we are going to use all files and do we have files somewhere else that should be all files because that accumulates the data okay files always contains one page data but all files contains the data from previous um page as well okay now let's implement this load mod what are we going to do so standard inertia approach is the following that when you access the endpoint it is actually rendering this is returning the data and passing this into view component okay but in our case we need to do it slightly differently okay we are going to make xhr standard request and just get the data using xhr so first of all let's define what is all files. value. next because this should be the next page URL we just reload the page we don't see anything which is okay props and we have all files. data okay let's see what is uh here we see ancestors as well uh which is okay and we have props okay let's print all files okay we see all files data dot data as well here we go okay now if we iterate over our all files we shouldn't have any problem okay whenever I reload it doesn't seem to be working okay the reason what might be the reason because we listen only on updated and unupdated is not triggered let's just print one one when updated it is not triggered and all files does not have the information regarding files so if we just take this and do the same thing on mounted then it's obvious and it is working again if I comment the mounted section then it doesn't seem to be working also what we can do is when defining this uh we can take props dot whatever but I think think that not going to work because props are not defined at this stage so in this case we have to move these all files down let's just try this what is this variable might not be initialized okay hold on okay so what how how does this work like props do files props is defined obviously right here that's really strange so if I Define const a equals 1 and then console. log a before defining that that will give me an error for sure reference can say before initialization okay how am I accessing props okay maybe this props is kind of a magically defined at the very beginning of this script composition API script and it is available everywhere anyway if that works okay that's fine um let's take the next from here and now if we reload the page we see everything if we scroll down we see load more in undefined that undefined is all files value okay we need to take it like this Rel load scroll down and we see so this is the URL from which we need to fetch the data okay and we're going to make request on the following URL inside load more so let's do a check first if all files. value. next if that equals null okay if there are are no more pages then we simply return we don't do anything otherwise we are going to make an HTTP request I'm going to Define now another helper under helpers and we can call these HTTP helper maybe something like this inide there I'm going to export function HTTP HTTP kit okay we're going to accept an URL right here and I'm going to use the fetch API to make request and I'm returning a promise from here so fetch on the URL we pass pams if we have those params we just pass them okay um actually we accept par pars right here by default it's an empty object and we pass params um and we need to pass also okay we don't need params at the moment so let's just remove it and let's just pass an object and with headers we are going to provide content type to be application SL Json and accept will be application application SL Json okay and inside then we return response response resp response. Json like this if I go in my files I need to import this HTTP get and passing the all files. value. nextt so this should return the next page excuse me next page files and we need to call then we get then we get the result and how we're going to get the result so that's another thing let me import this HTTP get first and test if we make request and I assume that the result will contain links and data in the same way the files right here contains so what I will do is all files all files. value. data will equal to destructure all files use the um spread operator to take out all files value. data and use the sprad operator for result. dat and all files . value. will be equal to res. links. nextt okay however that's not going to work as we expect and let's see what what will happen uh let's go under Network and scroll down below the request was made however the request actually is trying to return inertia type of content okay so this is not what we want we want to return normal Json response so if we go in the file controller and maybe right here um well it should be should be right here since we have the collection okay since we have the collection we're going to check if the request do we have the request uh no we don't have the request so let's try to accept request here and I'm going to check if the request want Json okay and once Json means that we are requiring accept application Json okay if the request wants Json then we will simply return file okay and this will be returned as a Json otherwise the rest of the code will be executed and inertia uh view will be rendered and this will be executed when you are opening the page and this will be executed when we are loading more content now let me inspect this load everything is good I will scroll down below and look at this the content was loaded you see that that reload the page again scroll down below and the content was loaded pay attention to the scroll this is it if I go in the file controller and change this into five we will see even more content actually it doesn't change to five why not sure our page yeah I think it was changed uh that was not actually changed but we can we can figure this out why this why this is happening but yeah this is how we implemented the scroll right so uh let's upload uh the entire folder of the ecommerce products we see that okay uh we we haven't uploaded that let me upload multiple files from pictures settings already exist okay okay settings already exist and probably I want to delete that settings yeah we have to implement delete as well but for now this is this is working okay go back scroll down BL the content is successfully loaded now let's do one very amazing thing by default PHP allows you to upload only 20 files and there is also very small limit for the number of um the total megabytes you can upload and what's going to be the post size so let's actually observe this I'm going to open file controller and let's print PHP info let's go in the my files Echo P HP info and let's exit from here okay awesome let's open the browser reload the page and we see the following output now I'm going to search for Max file uploads which is 20 that indicates that we can only upload 20 files in a single upload and we also have Max file size I believe upload Max file size which is 100 megabyte in this case set by default and there's also host Max size which is also 100 megabytes okay I want to now customize this and if we open now laravel sale documentation click on this link and scroll down below in the customization section we are going to execute the following comment um PHP Artisan sale publish or we can even execute sale Artis and publish I'm going to bring up the terminal because right now I am already inside the main container I can execute PHP Artisan sale publish however if you are not in the container you can execute sale Artisan um sale publish however in our case if I just exed from the container I just don't have sale globally available so I cannot execute sale Artisan sale publish I need to execute vendor Bean sale Artisan sale column publish okay that should do the same thing for me as you can see now it published sale Docker assets copying directory vendor Lal sale run times into Docker so if we go let me clear this and if we go now under vendor not the vendor excuse me under resources no under Docker here we go so under Docker we see multiple versions and right now we are running our application on PHP 8.2 so if we expand 8.2 we see multiple configuration files right here so this is the docker file using which the image is built okay and right here we see all the PHP extensions that is installed by default if you want to customize this and if you want to uh install some third part party packages for example unicor which is a very powerful package to convert uh documents from one format into another okay you should do this right here if you want to install some other third party uh image manipulation or fmpg for example you can do these things right here okay so I'm not going to cover everything from here I just explained what is what the file is for so I'm going to close this and PHP is obviously what we're going change right now and as you can see the default configuration is post Max size 100 mbes upload Max file size 100 megabyte and we see right here variables order as well okay and we see the start container how the container should be started and we see supervisor com which is uh more for um actually I don't know what is this for I'm going to be honest okay so by I can figure this out what what is this supervisor dcon for I can figure this out okay so now what we are going to do is okay excuse me I just didn't want to uh just continue like this I wanted to figure out what was this supervisor decom so I paed the recording and figure this out and I also want to show this to you so that basically is a right here this is the the uh highlight highlighted section so the supervisor is the process manager in LEL which suggests to use as a process monitor for Q workers okay it will automatically start the Q worker in the background even after the system has been booted and will automatically restart the worker if the worker exceeds unexpectedly okay I hope this gives you a little like a brief what is this not very much details but at least we know roughly what this is for okay in apologies if uh like my explanation was 100% accurate about this supervisor D okay so now we're going to make some changes in this PHP in file so first of all I'm going to increase this post Marx file size into like a 2 gigabyte I'm going to also change the upload Max file size into 2 gigabyte and I'm going to also add Max um what's the name exact file name exact parameter name Max file uploads which by default is 20 but I'm going to increase this into like 500 okay but just saving this and reloading right here doesn't make any changes okay even if we stop our server if we exceed if we execute vendor vendor Bean sale uh stop okay it's not going to take effect because using the docker the image is already built okay so what we are going to do is execute sale build no cash as well and that will take the latest modifications and create the new image okay so let's try to execute this vendor vendor Bean sale build let's hit the enter it will probably take some time um I'm going to pause the recording because it generally takes few minutes and to Finish the build and create Now new image with the new configuration option so I'm going to pause the recording and just get back when this is done image was built and now we are going to start the container again so I'm going to execute vendor be sale up in detached mode Let's open the browser reload the page uh okay starting okay they started reload the page okay let's log in and now let's have a look so what's going to be the max file uploads we see 500 uh what about Max file size that's going to be 2 gigabyte and we have also post Max file size also 2 gbyte okay so we made that change successfully from here you can add and override as many configuration options in this PHP file as you want to change every possible uh php's configuration option what you see right here which is awesome now I will go in the file controller and I will remove this PHP uh PHP info and just like this now we have possibility to upload um more than 20 files uh well I don't have mpm Rand de running vendor be sale bash mpm run Dev okay here we go and if I try to upload a very large file which is more than 100 megab and I can also upload the my entire um upload folder my entire pictures maybe which contains I don't know much more files than 20 so I can just select on the pictures click upload actually before I upload that um I'm going to check I'm going to check in files in the database okay we have 42 total files right there so I'm going to click upload on that and you you see we just uploaded 86 files and if I just reload the page uh we see that was 42 okay 1035 minus 42 minus 42 yeah roughly 93 993 new entries we are added and obviously there we 86 files uploaded but totally 93 new entries we are created because they are we folders as well like roughly seven folders so the pictures is one folder two three four five six and probably there is another folder somewhere this is seventh okay just like this we have uploaded my entire pictures folder and even we can try to upload would like even larger folder like the entire my documents okay but I'm not going to do this I just demonstrated how you can increase the number of um a load files to be uploaded in our application now let's start working on deleting files and folders so I'm going to create new action right here probably call it destroy I'm just going to collapse all of them and probably at the bottom of the public functions right here let's define new public function I'm going to call this destroy we're going to accept request right here but I'm going to actually create custom request class for this and it should be destroy okay so at the moment let's just die and dump I'm going to accept rate here request request well actually let's let's create um Artisan well that should be vendor be in sale bash then PHP artisan make request request and I'm going to call this destroy destroy files request okay destroy files request that was created destroy files request we get it right here request validated so we're going to get the validated data and just print that so this destroy files request should extend from my custom base request pant ID base request let's provide this right here so we actually need to take the pent if we are deleting a folder or file which is inside another folder not inside the root directory we are going to get the parent also we need the proper authorized uh logic right here uh the rules for pent ID will be the same so I'm going to delete the authorized completely and for these rules I'm going to call array merge and provide right here Cent rules and then my rules will go right here okay perfect let's now open web web.php and let's define Define what is this okay and let's define um action will be destroy and the name will be delete or destroy let's call it delete okay file delete uh that should be delete not post okay so we have the um Road ready we have created action and created uh these request as well however we need to implement rules properly right here so here we are going to accept uh two main properties I'm going to write rules for two main properties one will be all so from the user interface we're going to have possibility to select all the files and that will be a flag true or false so if all files are selected then we're going to delete everything inside that folder okay so that all can be nullable but it must be Boolean as well okay and we're going to have also IDs specific IDs of the files or folders that we want to delete and in this case I'm going to write um exist rule so from the validation I'm going to call exists and each ID must exist inside the file table column ID but I want to add extra wear conditions right here here so I'm going to pass function quy and let's also use the currently authorized user which will be this get user okay so we are going to accept user here hold on okay like this and then I'm going to execute we query we created by is the currently authorized user ID or simply I think it's going to be much easier to use uh out ID like this in this case I don't even need user I think that's easier so basically the I idas will be a list of integers and each integer must be an ID of the file table and I also should be the OWN owner of that specific file or folder which I am trying to delete which kind of makes sense because I I should not be able to delete someone else's files or folders right okay before we move on the front end side let's actually implement this file controller as well so let's get the data and this going to be request validated let's get the p as well from request Cent If data all if that exists then we get the children will be parent children uh but as a property not as a method okay and then I simply iterate over children as a child and on the child I'm going to call delete okay so I basically iterate over the entire list of children of the given parent if that parent exists and if the data all is selected and deleting all of them okay in um in other case like if a data IDs is provided okay it it should be else right here as well like else for each but I think we will will either have all or either have data IDs okay we aren't going to have both provided but in any case I think it doesn't hurt if we just rubp this inside the else okay if the data ID does not exist for some reason let's take the empty array just to avoid any kind of Errors right here so we get the ID and then I select the file equals file uh find by ID and then on the file I'm going to call delete and finally I need to return to root and to root is the Alpine JS function uh sorry not Alpine JJs inertia to root is inertia function we provide my files the road where I want to be redirected and I also provide the folder which needs to be parent path okay so this is the folder inside which I want to be um redirected okay so what do we need to implement right now we need to open file.php and right here I'm going to write static a similar way like we have creating here so we are going to write deleting or let's let's use deleted so whenever the record is deleted we accept file model here and if model is folder if it is not folder more specifically if it is not folder from the file system we ALS also need to delete uh storage delete and we are going to provide uh storage path which is the actual path let's open the storage path which is the actual path which holds where the file is located in the file system okay so in our case we save everything locally in the local file system and in the following way if the model is not a folder if it's a folder it doesn't have any files associated in the file system if it's not a folder and if it's a file then we delete that specific uh file from the file system here is one thing which I want to give you as a challenge okay so if I'm trying to delete a folder only one only one folder which has files and folders inside there and the subfolders also have their own files okay according to our implementation we get the direct Children of the given folder let's say as an example I think our um our pictures example uh ecommerce example will be ideal okay so if we have the following ecommerce products folder and I want to delete that so I'm deleting this particular folder or maybe everything inside it let's let's do like this everything inside it so data all is Select will be selected in that case and we are iterating over children and deleting one um one by after another okay so the first one is the folder so if we try to delete the folder there will be files inside there and it will deleting the folder will call the following function and because this one is a folder this if will not be satisfied and nothing will be deleted from the file system okay so the problem is that from the database this particular folder record and all its children records will be deleted but in the file system there will be uh actual files remaining for the corresponding files okay so at the moment I give this challenge to you so you need to figure out the way how you can also delete the files which will be children of that specific given folder okay I hope this makes sense a very quick recap so whenever we try to delete everything from that specific folder the children will give us a Four Element array so we delete child delete four times thus this function will be executed four times for the first one this is not a file it is folder so nothing will happen inside the function for the rest of the files from the storage the corresponding storage path files will be deleted for for those files it is okay however because this is a folder the entire folder will be deleted with its children however the actual files will not be deleted from the file system okay so you need to figure out how you can delete the actual storage uh files from the file system okay so that's perfect now we are going to move on the and also let me know in the comment section if you have implemented that challenge because that's going to be really interesting to see that um yeah okay let's move on on the front end site and I am going to open my files okay so let's have a look in the browser I'm going to create checkboxes right here inside the header as well as for each file and whenever we click on the checkbox I'm going to highlight the row and I'm going to also Mark the record as selected if if we check resources section and by the way from the stalker folder we can delete the previous version folders we don't need that okay actually let me delete okay if we go under resources JS components here we have this checkbox okay now I'm going to use that checkbox component inside my files so in the header I'm going to create one additional th let's give it the same CSS classes and now let's use checkbox okay we have to provide whether this is checked or not at the moment let's give it false and that should be with two column and let's create one TD right here with the similar checkbox inside and and similar tnd CSS classes okay if I save this and have a look okay we see checkbox we see checkbox right here as well um let's remove this flex and item Center okay perfect let's reduce the width of that specific column so in this th I'm going to give it width to be 30 pixel and Max width to be 30 pixel as well and let's reduce the pting right as well okay I think that's that's better so we reduce the size we can even reduce even more pting right was the pting right okay we should give these classes to TD as well okay that's that's better now I'm going to Define two refs so this is the TD and it should have V model um I want to Define now selected object and all selected property so let's actually Define it I think it's going to be um it's going to be better so inside revs const all selected will be false and we need const selected which needs to be object so then right here I want to provide selected for the file ID so we have file right here and select it will be an object where the key will be file ID and the value will will be whether that specific file ID is selected or not and in the checked we need also selected file file. ID okay however if the if this selected file ID does not exist because by default selected object will be an empty object okay and if it doesn't exist then we need to use all selected okay if all is selected we need to also select that specific record let's move up and right here we need to provide all selected and that should be not checked that should be probably V model or we can do like this V model and Che checked all selected and let's use now change whenever we change this we want to select everything so I'm going to create new function on select all change maybe so I'm going to copy the name and define that function at the bottom under under functions methods uh right here okay FN on select all change and I want to now iterate okay how should I do that I want to now iterate over all my files which what is rendered right now here and I want to mark all of them as selected and even when I scroll down below and load more content the others should also be selected because select all obviously means not only what we see but even those files and folders which we don't see but that is there when we scroll down below and appears okay so this is how we are going to do so we obviously have right here um all files right which is this const a by the way what why do I have this here okay let me remove okay so we have all files now I'm going to use all files value and that has data let's check yeah that has data and now inside there I want to hold on come on ph storm for each okay and for for for each file inside these all files um in the selected value for the F ID I want to um give it the same value whatever is the all select. value okay let's let's test so far I'm going to bring up the developer tools just in case we have some errors we need to know it about it immediately so I click all and now it selects everything okay however if you scroll other content okay the other content is also selected which is awesome but how is that selected by itself because all is selected okay here's one important thing it looks like everything is selected right now but actually if we print let's print it right here what is selected okay reload and we see right now I think only 10 records and again we can check this uh 10 yeah we only see 10 if I click on all selected we see 1 2 3 4 5 6 7 8 9 10 if I scroll down below we see more than 10 is selected but this still shows a length of 10 and if we try to now get the IDS of selected records it's not going to give us the um correct um it's not going to give us the correct IDs however in that specific case we have all selected and all selected is what we are going to send to the back end right so if I untick that all selected becomes false and in this case we need to send whatever is actually selected now let's try to select one two records and as we see now those will become true okay this is awesome now let's also highlight let's also highlight the row which is selected so right here uh I'm going to give it some like light gray color uh to the row whichever is selected so maybe I need to Define class class here and if selected for that specific ID is true um or maybe all selected is true then we are going to give it BG blue 50 um otherwise we're going to give it BG white um and that's it yeah let's remove this PG white okay if that specific row is selected or all rows are selected then we give it p uh BG blue okay let's have a look okay we see it has this uh BG BG blue however on Mouse over it changes into into gray so what I'm going to do is change this on Hover from BG gray into maybe BG blue 100 okay I like I like this now I select all and all records are selected so we have implemented actually selecting selecting rows selecting files and we have now two variables one is all selected and second is the selected object where we have this uh key which is the file ID and the value whether that specific file is selected or not now let's add two more additions to this selection system whenever we click on the file we it should also select that specific file okay double click opens the folder single click should select that file or folder because that's the easier way to Mark the file selected we can just click on them and they will become selected okay so let's go in the checkbox and I'm going to U listen to The Click event on that checkbox or maybe um okay let me think now we need to listen to The Click event of this row so whenever we click on the row uh let's get event right here and I'm going to execute the function and let's call the function uh toggle file select and we're going to provide file here okay that function doesn't exist we are going to create that let's scroll down below under methods and create that I toggle file select we accept file here and under selected value for the given file ID we're going to set the inverse whatever is already there for that specific ID in the selected Okay so Let's test this when I click on this it gets selected when I click again it gets deselected okay this is what we have just implemented and if we print selected here we will also see that the actual value gets true and false um just respectively another thing what we might need to do is whenever we start selecting files and we select all the files which is there and let's let's open this ecommerce products okay and test maybe yeah here we only have like six uh six files so if I start selecting and select all of them select all should become selected as well okay so how we're going to do this so I'm going to listen to change um on select checkbox change and we create that function or we accept file do we pass file no we don't pass so we accept an event right here call the function and pass file okay and and then I'm going to check if selected value for the file ID if that uh if that doesn't exist okay uh if we set this into false we are going to set all selected. value into false as well okay if everything was selected or even it doesn't matter so if we marked that specific row as not selected then obviously all selected should be false as well and that is particularly useful if we opened and selected all and now all selected is true and we are going to print all selected and selected so that will give us good understanding okay I selected everything and we see all selected is true however ever if I just unselected one we see that this is false however this is still true and because of that that reason we still see this row selected okay even though it has actual internal value false so that's why if we scroll down below we are going to um set that all selected value to be false however why that didn't work unchange if selected value for file ID if that is false then we said okay let's try to debug this click everything and then click on that okay okay that makes sense so we have added the change listener and we are not actually listening to the click of the row if I just click on checkbox then the debugger is triggered and we see all is false this is also false and using the checkboxes I can easily disable that however clicking on the row should do the same thing toggle file select okay whenever this happens uh I'm going to call this same method and pass file below the page select all and then click on the row and voila now we see that all selected is false and I'm going to remove the debugger select all and then dis select and we see all selected is false and now we whenever we make request to the back end we're going to send IDs not these all selected false okay that's perfect however what should we do in else case whenever we just marked the row as selected okay so if if if this is the case when we just selected the last unselected record in this folder we should Mark all selected true as well so let's do a very simple operation let checked equals true let's assume that everything is checked and now we're going to do a simple Loop if file of all files value. data we iterate our all files and if not selected uh do value or the file ID if at least one of them okay so we iterate over all selected files and if at least one of them is false I said checked to be false and I break immediately L and at the end of the for Loop I'm going to set all selected. value equals checked now if I select everything then I unselect one of them and then I select again that makes all selected true again or if I just start um selecting everything that selects all selected true as well however we should also keep in mind that um we don't see all the records okay so if I selected all the records I see well obviously I won't be able to select all the records what I see right here because as soon as I try to reach the end of the scroll section it's going to load additional files okay so it is not possible me to select all the records right here while also having other records in the database behind which is not loaded yet because I will not be able to reach the end of the scroll okay this is my point so actually if I manage and select everything right here then this will Mark all selected true as well okay so here I'm going to give you additional Challenge and just uh spend time on those CH challenges because these challenges will give you like a a huge huge understanding so you might have some struggle implementing those challenges but believe me these challenges will teach you a lot so whenever you select one record and then you select shift you just hit shift on your keyboard and select click on here for example it should it's right now highlighted just a marked selected texts but it should select the these three records as well okay and hint will be you need to keep track on the indices of the selected records more importantly you need to keep track on the last selected record indise index so in this case the last selected record index will be documents which has index 4 or if we start counting from zero it's going to have index three okay and then whenever you just select try to select new record and also you have shift on your keyboard hit selected then you need to uh Mark every other record in that range from this index to this index the last saved index uh also selected uh you should also consider the case when you select the first the record below and then the record using shift above okay that should Mark those four records selected as well okay just few hints and good luck on implementing this particular feature now let's try to actually send request and delete the selected files and later we're going to also Implement downloading files and we're going to use the exact same selection mechanism down for downloading the files okay so let's remove this preex and I'm going to um Define uh right here a button maybe to delete selected records but let's have a look in the UI so we have this bread crumbs and I'm going to put those buttons next to the great breadcrumbs right here so the breadcrumbs are inside the nav we have o and let's define let's create one div right here and inside there I'm going to Define this delete button however I'm going to create new component for that under up and let's call these delete files button okay um I'm going to actually copy uh the component the button CSS classes okay that should be normal button with some T SES classes so I I just didn't want to type that so that is something which I also copied so it has some positions and paddings and um also it supports this dark mode as well which I copied also from the uh from the official documentation okay and we need the the most important thing is that we are going to listen to click of this button okay we can add prevent but we actually don't need in this case and on delete click let's call this function on delete click in the methods we have this on delete click at the moment let's just uh print a console log delete inside this button I want to have a trash icon so I will open hero icons I will type trash here I didn't type trash I copy the SVG paste right here okay let's also write text delete save that uh we don't see the button because we don't include this button so delete files button is here so I save that and we see delete button right here okay that's perfect however this delete um delete files button needs to accept two main properties okay so under props let's define const props equals Define props and we're going to have uh Delete all and that's going to be it's going to have type of Boolean and default value will be false and the second prop will be delete IDs which by default will have type of array and required will be false and let's make this required uh false as well so this is good and I'm going to Define also emit Define emit delete okay when whenever files are actually deleted I'm going to emit this event delete okay now we have this delete all and delete IDs which we need to pass from here delete all will be um just IDs okay IDs from the selected object so here we have that selected object and we want to get only IDs from there for this I'm going to Define inside my files um one computed property called selected IDs let's call computed and we have the selected object again you remember how that looks like so we have ID like one corresponds to True two corresponds to false whatever so I'm going to call object entries so I'm going to convert this um object into an array okay so I pass selected. value and these object entries will give me the following array okay one true and two false so now I have this array and I can call filter on this array okay I have the element and then this a corresponds the following sub arrays so I'm going to filter those records which has a at position one to be true okay so if here we have true then I need this ID if here we have false then I don't need this ID so I'm filtering where the second element inside this array is true and finally I'm I'm going to map this into a at Z so by the by calling the following the selected code this will finally will give me the following array and then I'm mapping this array into just an ID okay so finally this will return this ID this array the final result of selected IDs will be this so I can get these selected IDs let's delete um my junk work uh we have the selected IDs and I need to pass the selected IDs right here uh White does underline type string array is not to type oan okay this is delete all so we have to pass all selected here and we have delete IDs then that will be selected IDs but I also want to print what is selected IDs so let's have a look reload the page here we see so if I just unselect now this is an empty array so I select multiple records I unselect and the elements inside this array are added and removed perfect if I go in the delete files button we can also print um delete all and all um delete IDs delete IDs right okay false and empty array if I select records this array increases now let's Implement an actual delete but we also want to add confirmation right now if I just click click on delete I get this delete and right here we can also print what is um all how it's called delete all and delete IDs but we to get this from props delete all and props delete IDs if I just click on that we see false and empty array if I select few records click on that we see IDs if I select all click delete we see this true right here okay we need confirmation whenever user clicks on the delete let's first show are you really sure you want to delete those files because the operation cannot be undone or something like this in this delete files button I'm going to create uh well we don't actually have this confirmation dialogue don't we uh no we don't have this confirmation dialogue so in these components I'm going to create confer confir dialogue um here we're going to use Modo which is already um some the component what we have already used and we need to provide show right here if the modu needs to be displayed or not uh we also need to provide Max WID I'm going to provide MD in this case let's give some ping let's give it H2 we have some dialogue don't we we have error dialogue so I can copy these tiles however I need to remove this text Red also this error should be like a please confirm and I need one paragraph where we will display message I need footer section as well let's give it margin top six flex and justify end and inside there I will have secondary button and whenever we click on this button uh we need to we need to emit cancel let let's accept event and call emit cancel let's give it text cancel as well and we need uh danger button as well which which will be um red button let's give it margin left three and whenever we click on that I want to emit uh confirm however let's define emit Define we need cancel and confirm Also let's define props show which will be Boolean and message which will be string let's move those Imports top emiter is not necessary we have now this delete files button and the component confirmation dialogue and I can display this confirmation dialogue right here however we need to provide show to be show delete dialogue as a true false variable so I refs const show delete dialogue will be by default false let's import ref let's put at the top we need to provide also message message will be are you sure you want to delete selected files okay and we need to listen to cancel on delete enel and confirm on delete confirm okay so what do we do on delete cancel um we need to just hide the model right uh let's put this right here until it cancel uh show show delete dialogue. value needs to be false whenever we click on the button on delete click we need to show delete dialogue. value to be true so we need to show the confirmation uh and we need on delete confirm as well which will be actually deleting records now let's check this in the browser so I click delete uh we don't have text inside the confirmation dialogue so that should be confirm okay perfect I click on confirm and we see this console loog so that's great I think that's great because now we can make request from here to actually delete the records so for this we need to define the form so in the refs or maybe in the uses uh I need two things I need page use page uh where's the import let's move Imports here and I need um delete files form as well use form so we said all to be null and we set IDs to be an Mt okay so all and IDs needs to be the exact same names what we have given in the request up HTTP request destroy files request under rules okay so make sure you have the same names and we also need parent ID uh and we give it to null okay now whenever we are about to confirm um right here I'm going to give parent ID to be uh page props uh folder. ID and I'm going to check if props delete if delete all exists we set delete files form all equal equals um true otherwise delete files form. IDs equals props do delete IDs then on that delete files form I call delete and root file. delete so we we have the following rout while the delete so we're going to make delete request on the following endpoint and we need to listen also the success uh callback on success uh first we're going to hide the dialogue value equals false and I'm going to AIT an event delete and we also need to show success notification later okay what else I'm going to do here on delete click I'm going to check so if props delete if props Del it all is false so and all also props uh Delete IDs do length does not exist okay if no select all and no ID is selected then we're going to probably show error dialogue uh please select at least one file to delete and I'm going to return from here immediately let me import this show error dialogue from event Pass Perfect reload the page click on delete button I see error please select at least one file to delete I select this file I'm going to open now Network and click delete I get the confirmation I sure want to delete selected files I'm going to click cancel the module Heights nothing happens I click confirm the request is made and we don't have any errors and the file disappears as well so let me try to delete okay uh that file let's reload that file was actually deleted now pay attention so this is here delete confirm okay that disappeared select delete confirm okay call to member function delete on N now let's have a look okay um in the IDS we pass two IDs and that happens because the previously deleted record ID is still inside the IDS array from these my files so here we have this selected let me explain this clearly reload the page we see an empty object I select this file we see um 89 I click on delete confirm and look at this so This 89 is still there it is still there and if I click another one now we have two IDs and whenever we click delete and the request is made uh the back end tries to still delete this 89 which does not exist okay and that's why we get this error so we can add extra check on the back and we open um destroy function right here uh when we select the file we can do an extra check if the file uh exists only delete in this case if the file doesn't exist don't delete that and that will I guess fix the problem however we can fix the problem on the front end as well so we have this delete button and we can simply listen to delete event right there and whenever that happens we can clear the selected let's listen to delete and whenever this is triggered on delete scroll down below under methods we can set all selected. value equals false and selected IDs do value equals an empty array uh empty object that should be an empty object okay reload the page select one click on delete click on confirm uh that was deleted but it is still there okay um how that happens uh was that triggered selected IDs that Valu Oops I did something wrong it should be selected select delete confirm and now this gets an empty object so whenever we click on the other file and click on delete it will only make make request with one and only one ID okay let's go inside ecommerce products and I'm going to go inside test let me remove this selected go back click on ecommerce products and test and I'm want to click now select all and let's bring up the terminal again and I'm going to click delete and confirm now that send request all true and this is exactly what we wanted and on the back end everything inside that folder was deleted that is awesome and that is perfect okay so we have implemented deleting the files however now I gave you challenge earlier and now I'm going to recall on this challenge under storage up files and under user two okay let me open this in Explorer okay so we have like 108 items so that's too much we shouldn't have that much but anyway we are testing and we're building so it's okay there are more files than then we should have that so we have 108 files here if I come and click on one file and click on delete and confirm the file was deleted from the database and if I simply refresh that now we have 107 items so that shows that we have successfully deleted file not from only the database but from file system as well however if I go inside these ecommerce products or maybe just select this ecommerce products okay and also I want to check the database so we have 135 rows I selected only one item and click on delete and confirm now I'm going to check the database and in database now uh okay my bad uh that was deleted however we have soft deletes and that's why um the actual records we are not deleted so let's filter this by deleted at is not null well it should be is n i want only those files which are not deleted um and let me upload now this my ecommerce products folder okay folder eom products already exists uh hold on why does it exist uh why did it exist okay let's delete this test um we have this ecommerce products uh something is wrong inside the uploading and I just I just caught in pag but I need to reproduce this pag but again let's get back to the what I was trying to show to you so we have these ecommerce products and inside there we have this test okay I want to focus on this test folder right now in the database we have 126 non deleted records in the file system we have3 items selected now I'm going to delete this particular folder okay and from the database now we have four less records because inside that folder there were three files in one folder and three files were deleted successfully okay however if they check the file system and I'm going to refresh we still have 113 items right there okay that is actually right now correct so the challenge I gave to you and hopefully you have implemented uh because you would learn a lot of things while implementing that that challenge is not um not what we want right now okay so we are going to have a trash trash system so we have files marked as deleted and later we are going to implement recovering those files from Tres and those files which are still on the file system should stay still on the file system because we want in the future to recover them however in the future if we delete those files uh like permanently from the uh trash we would obviously want them to be deleted from the trash okay so this is what I wanted to mention right now everything works as it should work when we delete the folder it is marked as deleted from the database uh but the files are actually deleted from the file system which is something we need to fix right here so this is what we have implemented and this is what deletes the actual file from the file system but I'm going to comment this part of code uh I'm commenting this because uh I might activate it later okay but at the moment I don't want any files from um from the file system to be deleted because in the future I might need to implement the trash and recover them from the trash okay so that is the whole idea about the deleting files now let's start working on downloading files we're going to implement downloading a single file as well as downloading multiple files in a zip format or downloading a folder in a zip format so I'm going to open file controller and let me create new action um under all the public actions public functions right here so let's call this download okay so we want to accept some form of request and the request we're going to accept is very similar to this destroy files request so the whole idea is that we are going to have all as well as IDs right here so if all is selected it obviously means that we're going to download every file if IDs is provided it might be a single folder or a single file or just maybe multiple files so I want to use the this destroy files request but obviously the name is does not describe exactly what we want so I will try to rename these destroy files request into something like um files action request okay so we are doing some sort of actions in the future you can Implement other types of actions such as move into another folder or uh we already have or copy maybe I don't know so this is just more generic request uh class okay so the class name and the file name was also renamed the usage right here in the destroy was renamed as well and now let's accept right here files action request here we have the request and now what we are going to do so first we're going to get the data let me copy these parts so we need parent we need data I'm going to copy this part and now I'm going to uh get all as well from data all if that doesn't exist let's assume it is false and let's get IDs data IDs if that doesn't exist let's assume it is an empty array okay now let's check so if all is true or let's do first if uh let's actually return immediately if all is false and if IDs is empty empty IDs so I'm going to return message please select files to download okay now let me check now if all is true we are going to uh generate zip obviously if all is true it means that we have to download everything what we see right here and that means we have to create zip so I'm going to create a function a private or protected function in this class uh and I'm going to call this create zip okay so that's going to be the uh main function which will generate the zip but in this case I will just assume that function already exists so create zip and I'm going to pass the children of the current folder okay and the current folder is this parent so parent children I pass all the children to this and I assume that this function create zip function will create an actual Z and return the URL from here and I want also want to create a new variable called file name which will be the download file name of this ZIP and let's give the file name to be parent name uh dot zip okay so if I go if I go just a second my keyboard stopped working I have wireless keyboard and stopped working for some reason so here we generate the file name okay so if I just open the browser and if I go inside the pictures and I try to download everything I want the downloaded zip to be pictures. Z because I'm inside the picture okay I hope that makes sense um okay let's consider the else case obviously so if all is not uh true then obviously we we have IDs now let's check if count of IDs equals one okay if there is selected only one file or folder okay for example for example this one okay or this one but let's assume that it is folder first so we need all we have also two cases if we're going to select the file first what I did file find so we are going to find the file and then I'm going to check if file is folder so again I'm going to download zip but again let's make one additional check if file file children count equals zero okay if there are if the user selected only one folder but there are no files or folders inside that folder we are going to return with message the folder is empty however if there are more than Z zero children right there so if there are some something inside that folder then I'm going to create zip and give it a file name okay so let's create the zip in this case I'm going to give it file children because this is the file we want to download so let's imagine that this is the file I want to download and I'm going to give this create zip function the children of that file folder in this case so when I say file uh sometimes because we save everything in the files table in the database when I say file sometimes I also mean folder okay so all of them are records um these and these as well are all records from the database table files okay what about the name so name in this case will be file fil name. zip okay so we have URL and file name and this is what I am going to return from this function um at the end of this function basically okay if it is not a folder then obviously it is a single file okay if the count is one and if it is not a folder it is a single file and I want to uh download that single file okay so in this case I'm going to move that file into web accessible place so every file at the moment what we have is under storage app files okay everything is right here but none of the files are accessible in the browser so we can't actually access through this file name uh in the URL we canot do this because all of them are are not um web accessible what we need to do is to move them or copy them inside the public directory okay and then download from there so in this case I'm going to Define path which will be public actually let's do like this public slash and I'm going to copy into the following path okay the actual uh file so I'm going to use path in info of the file storage path that is the actual path where the file is saved and we can check this in the database as well have a look so here we have this storage path and we're going to take that path and I want to get the base name okay whatever is after the last slash for slash so this is the base name so I'm getting the base name and moving this the base name is actually unique so we are going to copy let's create a new destination uh and actually let's call this destination directly okay now I'm going to call Storage copy from file storage path into destination so I copy that then I need to get the URL of this copied file so I'm going to create a variable URL which will be asset storage URL let's give it destination that's going to be the path and the file name that actually only accepts URL why do I need to give it a file name I think I don't need to give it okay so we have only URL but I need file name right here file name equals file name all right in the last case will be if number of IDs is more than one okay so it means that we have to again generate zip from those from those given files so in El's case we are going to select files which will be file uh cury where ID um actually we need to call we in because IDs will be an array called get on this this will give us the whole list of files and URL equals this create zip and we pass files here and the file name again will be parent name doz okay so finally at the end of this function I'm going to return an array and we have URL here and we have file name so we have this action ready now let's create this function called create zip at the very bottom I'm going to create that function create zip we accept right here files and it should return string now I'm going to define the path to the output zip file so that's going to be called zip path zip and Slash and I'm going to create a random name St Str random doz okay I'm going to also Define the public path oops public slash uh actually let's use double quotes here uh ZIP path okay so that's going to be the public path where we are going to actually create the U zip and now let me check so if the directory to this public path does not exist we are going to create that okay so if that zip doesn't exist basically we're going to we're going to create that so if not is directory and we're going to pass um deer name right here to the public path so if that doesn't exist we are going to call Storage make directory and dear name public path okay so we create the directory next let's get the the zip file storage path okay so we we're going to get the absolute path so so far we have a relative path right here okay but calling storage path will give us the absolute path of this public path okay now we can already create the archive so zip equals new zip archive and now let's open the zip oops zip open we're going to provide right here the um file name so in this case it will be zip file and we're going to provide also Flags right here so zip archive we want to create if that doesn't exist uh or we can also overwrite let's collapse the right side uh okay why is this giving me okay so we're going to check if the open happened successfully so if that equals true then we are going to write inside the Z but why this this is giving me can't use square brackets for reading zip archive okay zip open file name and flex we have something messed up okay let's continue and see if this red underline uh disappears because sometimes just PHP stor I think this is the reason yeah that was the reason okay so this add file so I'm going to create another function in the very bottom and I'm going to call this um add files to zip so we accepted uh in instance of the zip we accept files and and I'm going to also accept right here ancestors and I'm going to explain what is these ancestors okay so add files add files to zip let's provide zip right here and provide files okay so whenever we open the zip for reading we add files to the zip and we pass this ZIP and pass the files okay so this is now is the main method we should add all our given files into the zip whenever this finishes the work we need to call on zip close and I'm going to return asset uh ass set from here here storage URL zip file okay so zip path actually so we want to return URL from this method because this is what we expect uh let's have a look in the create zip okay this is what we expect everywhere uh where we are using this and right here I also have assert that should be asset so now let's implement this so we accept files so I'm going to iterate our files as file and I'm going to check if if file uh is folder then I am going to call add files to zip in this case but for the children of the given file okay and this is the case where stor is actually necessary so let me call this add um add files to zip I'm going to pass zip and I'm going to pass Children of the file okay and I'm going to pass also the prefix of the ancestors okay because right now we are adding everything in the root of the zip we don't pass anything so it's it's an empty string okay but right now we are going to add every children every children of that given file as a inside a subfolder of this file name so the prefix in this case will be existing prefix concatenated with file name okay and we also need slash right here if it is not a folder on the zip we simply call add file and pass storage path okay and that's going to be file storage path and we can also give it okay so this is the actual file we want to add inside the zip but at which location inside the zip that file should be added in this case it's going to be ancestors concatenated with the file name okay so this is where my files will go now let's understand this if I try to download uh test okay so I'm trying to download um okay let's try to download this ecommerce products and when we try to download this particular folder then we will select all the children and give those children's right here as files okay then we start iterating and if the file is folder which is the case right here okay then we call it files to folder but pass Children of the given file so we're going to pass those three childrens as a children inside this a files to zip and we also pass a prefix ancestors in this case um the the ancestors is empty string so we pass test slash right there so whenever we try to add those three files we will have test SL as prefix so those three files will be added inside the test folder okay if you mix something right here you are going to basically create those files in another folder in a r folder probably okay but if we are adding files those files will be added inside the root of the zip with their file name so with that being said I believe we have this action ready and what we can do is first Define the rout web.php and let's define so we are going to have uh get on file slash download the action is called download and the name will be file download okay so we have this um ready as well now let's go to the my files and I want to create uh here a button to the um download button basically basically in the similar way how we have this delete button so I'm going to go under components let's open this delete button actually and let me create now or maybe we can copy and paste these uh delete files by turn let's call these um download files button okay we have ton of classes right here I'm going to actually use prime primary button primary button okay great uh let's remove all the classes uh whenever we click on the button I want to call a method called download uh I'm going to change this download icon as well and let's write here download Okay so let's get the icon while we are here down download uh that is fine or this is fine let's put this okay great uh we don't need confirmation dialogue so I'm going to remove that and let's define this download delete files form I think we don't need or maybe we need uh but we need a download files form so let's call this download files form form or maybe as simple as form uh show delete dialogue we can remove that props I believe we need these props okay but in this case I'm going to call them all and IDs to make it more generic and we are not going to emit anything and let's create function called download and I'm going to just print download okay let's remove those functions okay we can remove the Imports as well and now let's go under my files and I'm going to import that download files button and provide all to be all selected and IDs to be IDs selected okay I think this looks good let's now go to our application and we have this download uh actually that's looking good let's give it class margin right two that's good and also let's give this SVG icon margin right right to as well we can even reduce the icon but that's fine let's open the developer tools and click on download yeah it calls download okay so we have to work a little bit on responsiveness but let's focus on the main functionality at the moment okay so we have this download and now I'm going to make request to get the URL into the file name for the um for the file downloaded file I'm just thinking if I missed anything uh I would like to just double check everything before I test it okay so it looks good okay in the download so let's first of all check if props uh all doesn't exist and also uh props do um id. length equals zero I'm going to return oops okay now form parent ID will be page props folder ID now I'm going to make request to get the URL okay I'm just thinking so this form right here is the inertia form if we submit that form call get or post on that this will return inertia response but what we want is a like plain Json type of response so probably having this form is extra and we don't probably need that so we probably need to make a simple HTTP get request and provide file. download as a URL but we also have to provide couple of query parameters such as all and IDs and maybe parent ID so what I'm going to do here instead of populating this parent ID on the form let me check if props all exists let me actually create um P to be like new URL search Rams okay so if props do all is true then inside P I'm going to call append I'm going to provide all and I'm going to provide uh props doall if else P append um okay I have to append this inside the loop because props ID will be Loop so for let ID of props IDs P append we have to append IDs with square brickets indicating that this is an array it has an array value provide ID okay so we're going to call this upend multiple times so finally these IDs will be an array okay perfect so we have if else and finally we're going to make request let me import this HTTP get and we are going to give it this t. to string as a quy okay and because this is our function this will return a promise so I'm going to then here we get the response and let's put debugger and see what's going to be the response and maybe maybe log this response okay so let's save it let's save it and have a look so if I just click download nothing happens because we don't send request nothing is selected if I select one file and click download the request is made but we have error 500 okay array to string conversion okay what was sent okay IDs were sent file controller line 160 let's check 160 is right here is this really array to string conversion yeah I I forgot to provide right here path info base name uh okay let's click on download again okay it returned something it returned the file name and it returned the URL if I check first under public folder uh we should see something in the public folder Public Storage let's try to reload okay if we don't see something that's not good although we copied in the public I think we don't have storage link created okay we can easily test this if I copy and open okay that doesn't doesn't work so basically we need to create a link so we're going to execute PHP Artisan storage column link okay okay now public storage link was created and that is connecting to storage app public so if we go under storage up public now this um this folder which has only one file inside there and this is our keyboard file what we just Tred to download is also should also be available if I just reload should also be available here but I don't see it for some reason maybe PHP storm doesn't show that to me but anyway let's try to download again and I'm going to get this and open now we see that okay now we see that and if I go in the Explorer and we can check oblique okay it does not show that let's check it let's check it through the terminal okay so we see storage which is probably because it is a symbolic link uh our PHP storm and also Explorer doesn't show that to us but as you see we have this storage link which refers to storage up public so now if I go in the download files button where I have this response and we can check the response in the console as well because we are logging that response so I need to download this first let me check if the U res. URL does not exist uh then I'm going to Simply return let's write this in a single line then I'm going to create document create element a a download equals res. file name so this is what we return from the back end and I'm going to give a do hre equals res. URL and on a I'm going to call click method so now it's the moment of magic we click on download and it starts down downloading the keyboard uh okay let me save this and open if it's really there and here we see this keyboard that's perfect now let's try to download a test as a folder click on download we see test.zip awesome let's open that test.zip let's click inside and we see three files right there okay and all of them are working none of them are broken as you see also file sizes that's perfect now let's download three files click on download okay we have an error attempt to read property name or null on file controller 170 okay let's check 170 okay is the parent now do we pass parent ID I think we don't pass parent ID and that is the reason if I go in the download files button right here I created this p and let's append p. append parent ID and that's going to be props uh actually it should be page. proops do folder. ID and now now I am confident that I don't need this form so I can remove that save let's select those three files and click on download okay here we see ecommerce product zip I'm going to click on Save let's open that double click and here we see those three files okay isn't that amazing so that's really good so let's go into my files and select everything and click on download now we have have something broken the all field must be true or false what do we have okay so we have it as true but it is actually it is actually string true okay and we expect it to be true or false as Boolean to validate Boolean um request types uh L actually uses one of the following formats so uh I'm going to go in the actually and scroll down so instead of passing right here um props all which is an actual Boolean Lal uses the following formats like true as an actual Boolean false it has zero and one as integers and zero and one as string so those those are the inputs and if you send those inputs and you configure the type of that property in the rule section to be Boolean the validation will be passed because those are treated as booleans but in this case because we use form right here as a eural search params so our sent value props URL is actually true or false as string and those are not treated as booleans those are treated as strings so if we change this and if that is true then we send one otherwise we send zero that should fix the problem okay so we save that and let's download everything okay we still have an error but def error argument number one path must be type of string null given that happens somewhere okay where does this eror start that starts in the file controller 230 230 it comes right here okay file storage path that is probably null and if this is null that is is probably for old files yes for this as an example it doesn't have it's a file but it doesn't have the storage path we can check is folder is false so that is the problem actually what if I delete everything I don't want to have kind of broken data so I'm going to delete everything and let's set left and right to be correct and I'm going to also go in the storage files and for my user I'm going to delete also every single file right there okay so I'm just starting my um testing process from scratch also I have right here zip and inside zip I have few zip files I can delete those as well and these as well so we also need to create kind of background script job the files which are generated under this public folder whether they are zip or they are just files copied from another directory they need to be deleted after some time okay as soon as they are downloaded probably they just need to be deleted so we have to create job for that as well in my case if I just reload now I have everything empty let me try to upload a folder upload ecommerce and let's upload few files as well okay perfect now if I select everything and click on download I see this um zip and this is now my email. Z because this is the actual name of the folder what we have here but I think that is fine if I just click save and then expand this and check we have all the files right there and I think this is exactly what we wanted let's select few files click on download download starts immediately L now let's add um success notifications whenever we upload new file folder whenever we delete something we want to show user that the operation has been completed successfully let me open now my PHP storm let's close everything and I'm going to create under resources views resources JS components and uh under components actually let's create a component called notification I'm going to Define um ref right here which will be show to show notification or not so let's provide false and let's import ref under import section okay and now uh let's actually Define message as well const message equals ref an empty string now I'm going to copy and paste markup which I already have prepared right here so we also have transition enter active class and enter from class sorry about my voice enter to class leave active class leave from class and leave to class okay so those are the classes which will be added to this element on certain actions so from is whenever the animation starts to uh is the target where the animation goes okay leave active classes whenever um whenever it is leaving in the process so this will be the classes added and leave from class is from this uh CSS properties it needs to go to this CSS proper property okay and we also have show with some um fixed positions and I'm going to show this at the bottom um left corner of the screen and we also have a type and I need to Define type as well because I'm going to have two types of uh notifications success and error and based on that we're going to show different color so let me Define type here as well which by default can be success okay now I'm going to open Event pass and just like we have show error dialogue I'm going to Define two functions export function show uh show success notification we're going to provide only message here and the second one will be show error notification okay I'm going to Define one constant which will be show notification as a generic constant and on the emitter I'm going to emit shown notification and I'm going to Pro provide type here to be success and down below I'm going to provide hpe to be error okay so now I'm going to go in the notification and unmounted hook I need to listen to whenever this is emitted show notification is emitted so emitter we have this with single M emiter on show notification we accept here an object okay which has type and message so I'm going to get type and message and assign it to local type and message however I have like a name Collision on the variable so I'm going to get the type and assign it into a local variable T and I'm going to get message and assign it into MSG show. value equals True type. Value equals T message. value equals MSG and that's basically all so using this approach the notification will be displayed however I'm going to use also um if the notifications are displayed um okay if you display one notification and after two seconds you display another notification U it should only show only one the latest one I also want to close the notification after 5 Seconds seconds uh let's actually do this set time out and I'm going to call close and let's define this method close here we're going to set show dot value equals false show um type. value equal T and message. value equals an empty string and that should be an empty string as well uh okay now let's go in the my files and let's try to delete show success notification okay show success notification so selected files have been deleted let's import this show Suess notification and now let's test it so I selected the keyboard click on delete click on confirm and nothing happens why because probably we haven't included this notification let's go in the authenticated layout and I'm going to include this notification here so that it will be displayed every time I need that what is this uh okay I put this outside of the template my mistake okay so we have this notification here so let's try to delete one more file delete nothing happens there's an error show notification is not defined okay so the constant is not defined that is not imported right here good select click on delete click on confirm and we see selected files have been deleted however uh it was automatically disappeared it automatically disappeared after 5 Seconds however if I just delete one file and after a few seconds I delete another file the latest notification should stay 5 Seconds but actually the timeout is taken from the first shown notification so basically after deleting the second file in about two seconds it disappeared so what I want to do is to define a timeout maybe right here let time out and then time out equals set timeout but before that I'm going to call if time out exists I'm going to call clear timeout so the previous timeout will be cleared and this function will not be executed but the new one will be planned so we provide time out here now let's test I'm going to delete one one 2 3 I'm going to delete the second now one 2 3 4 5 so obviously now the time was taken from the second and deleted notification okay so now it's very simple so we have created that schema that skeleton and reusable components and if we go in the my files I'm going to copy this go in my files uh where we have these we have this in the authenticated layout actually to upload files and where's that where is that coming from that's coming from side bar or navv navigation create new dropdown and we have this file upload menu item but finally it comes down to this authenticated layout isn't it here it is uploaded files we have on success okay so this is the place from where we need to show notification um okay how do we do so let's get the files length and then how many files are uploaded let's do like this files. length files have been uploaded select files let's select two files open two files have been uploaded if I select a folder we get ation 26 files have been uploaded okay I think that's not bad now let's move on to the next part in which we're going to implement the trash page we already have file or folder delete functionality and at the moment they are simply um not deleted they are marked as deleted in the database using this deleted at flag and as well as using this soft delet trait we are using so if you don't know what I'm talking about let me open file.php and right here we have this soft delit Strait and if we check also the database we will see that we have files which have a deleted yet so those files are still in the database and also we don't delete actual files from the file system so now we're going to create the trash page and we have the data which was actually deleted and we will implement the functionality to recover the files from the trash and move into my files section or just completely delete those files if we completely delete them in this case um this record will be completely deleted from the table and also the actual file or folder um not folder but the actual file or files will be deleted from the file system all right now let's start with defining root let me close the database and I'm going to open web.php and we have this um let me Define this right here not right here excuse me so wrote get on trash URL we are going to have a trash action okay and let's give it also name trash now let's open file controller let's scroll up and maybe up after my files I'm going to Define public function trash we are going to obviously accept request right here and I'm going to return inertia view inertia uh excuse me it should be render uh provided trash the file name and we're going to provide the files which needs to be rendered so which files should we select right here let me start curing so I want to uh select only trashed files okay and only trashed is the predefined method in laravel which selects the files that comes from the um pay attention to this tool tip it comes from the soft deletes trait and this only will cury those records which has deleted at not null value so we want only trashed we are going to also provide the value that the current user needs to be author so created at created by should be out ID and let's also order by um is folder so first let's show folders by the sending and I'm going to also order by created it created it um deleted or maybe we can even order by deleted Ed so the latest deleted file will go at the top like this and we will need pagination so I will call paginate with a value maybe 10 or 20 whichever we want and I'm going to call this files and finally I'm going to create the collection from the files so I'm going to use a file resource collection and provide the files and finally I'm going to pass these files as a view parameter right here files so we have the method ready and now let's go to the front and side under resources JS and we have Pages here I'm going to copy my files and paste because trash will be very simp similar to my files in in terms of the layout there will be a table and the bons as well but we're going to obviously modify many things right here like I'm going to remove this pagination we don't need that at all well we don't probably need those all Fields right here I'm going to only leave name and I'm going to create another column called path so that's going to be the actual location for the the file anything else I think can be deleted so right here I'm going to Output the name and I'm going to Output path uh just let's make sure that path is something that is returned in the uh file resource and we see this path right here okay so anything any item any file right here is an instance of this file resource and if we don't have power defined right here then we won't be able simply to Output it right here okay so this looks good however let's change let's change a few things so I'm going to scroll down below so we have these all files that's good we're going to also have infinite scroll down below open folder we don't obviously need to open anything okay so we can search for this open folder and I'm going to remove double click so delete this function as well load more this is something we need but we are going to uh make request yeah that's correct so we're going to make request to um all files value next that's good as well on select all change we do this that's good toggle file select that's also necessary on select checkbox change that's also good on delete okay so we don't have actually I deleted the whole breadcrumb and also we had in this now we also had these pattern so I want to delete only bread Crums not button so I'm going to copy this now again go into the trash and right here I'm going to paste I'm going to delete this ordered list because that is the breadcrumbs and let's give it justify justify end and we don't need download files pattern or delete files patteron I'm going to create two new buttons one will be called to delete forever and uh second button will be to restore files okay just wait so that's good let me delete this let's go to the trash but we need to link the uh menu item to the trash page so I'm going to open navigation here we have this trash let's provide row like this okay now let's click on the trash and it opens trash page 1 2 3 4 5 six so we have six files deleted let's check now into the database if the data is accurate six okay we don't have anything else that's awesome that's good if I go into my files and just delete one more that was deleted I I will go in the trash and now we see seven items right here okay that's good so select works it should work um we don't have folder deleted let's delete this screen Ally folder completely okay that has been deleted I will go in the trash and we see a folder right here if I double click this folder is not actually opened okay first of all let me make this trash active menu item I will go in the navigation and just like we have this active property I'm going to add that right here um I mistaken we deleted that not deleted but closed uh the URL should be trash awesome now we see that the trash menu item is active now I want to check one thing in the database so now we deleted scre scen live folder just one folder but if we check the database we see multiple files have been deleted okay so here is the folder by itself this one but anything that is inside this folder has also been deleted okay and that happens because if we check let me collapse unnecessary methods to make this more readable so if we check this destroy so we see that we call Child delete and the delete is a LEL method which basically looks at the if the trait soft delites trait is configured it's going to Simply make a soft delete and instead of deleting it will just set deleted at if the Soft delete is not there that's can to actually delete however we are using this nested set package as well which is overriding that delete and it's also deleting every children of that child but in this case the delete is not an actual delete but the nested set is marking all the children as deleted it that's why we see a lot of uh deleted at records right here and also when we check right here we see that the screen line is a folder that was deleted and it has the following path as well but we also see uh the children items of this screen line as you can observe okay so those are the children items uh by the way why this scroll doesn't work we we're going to check the scroll as well in a moment so what I want to do is that I just want to show screen lie and not the children of the screen line okay and anything else obviously which is an actual deleted file so in ideal case I want whenever a folder is deleted this is the folder I want its children not to be deleted and they should have null values okay they should stay active but we won't be able to access those files because the paring folder is actually deleted so now I set uh them to now manually and if I reload I will see only screen line not children of the screen line okay I hope this makes sense okay so how to implement that only the um actual folder to be marked as deleted and not uh the children of it okay I'm going to open now file controller and in the destroy instead of calling an actual delete um I will create a new method in this file PHP and use that method and let me call this method um maybe move to trash move to trash okay and we will do very simple thing I'm going to set deleted it to be carbon carbon is the package uh to manipulate dates carbon now so I will simply set deleted at to be now I'm marking this particular record deleted and I'm going to return this save I'm calling save as well so now if I use this move to trash in this file controller right here and right here as well instead of calling an actual delete that will only Mark deleted the parent which we are actually trying to delete not the children of it so I'm going to open files again and I'm going to remove this deleted at on the screen lie now screen lie will be gone from trash if I go in my files I will see a screen line right screen lie right here if I double click obviously it has files inside if I select the screen lie and click on delete and confirm now I check the trash and I only see screen lie I don't see screen lie children in the trash which is exactly what we wanted and if I refresh the database I will see that only screen light is marked as deleted okay this is awesome this is exactly what I wanted now when I Implement restore I will simply restore that particular item obviously I don't have to restore its children as well and by the way I checked and the nested set package whenever you call delete on the file the nested set package is deleting all the children's but when you call Restore um the N set model does not restore its children okay that is probably something you should also know and probably would be good if the N say model would do that as well okay so now we are good we are just deleting one record and we will restore that one as well okay I think now we should create the restore functionality now let me open file controller and let's define two methods let's scroll down below one will be restore and second will be delete forever okay we are going to accept some type of request and I'm going to create new request specifically for those two actions because they will need the similar type of request PHP artisan make request trash files request let's hit the enter okay that request was created trash files request let's open that and well um I need rules very similar to oh it's called to here in ID base filter no not this one not this one basically files action request okay I need all and IDs but what I don't need is the parent ID so we have this parent ID defined in the rules obviously if I have trash opened I don't have I am not inside any particular folder so this is a general trash area and I don't need par ID so what I'm going to do is just copy rules these all end IDs uh I'm going to close this let's open this uh trash files request put this okay let's format the code uh let me set the AL authorized to be true okay and I think yeah I think that's it so now let's go in the file controller and let's use this trash files request right here when we are trying to restore or maybe when we are trying to delete forever first let's get the validated data like this that's going to be our uh data oops then let me check if data all is set to true I'm going to delete everything that is inside the trash so children will be file only trashed get okay then I'm going to start iterating over my children as child and on child I'm going to to call uh restore so this is this is the restore functionality so I'm going to call Restore uh okay also some uh in L's case I obviously have the IDS so I'm going to copy this part but change how I am selecting how I am selecting my records so I'm going to select it with here let's call cury we are in we are in we need column ID to be in IDs okay let me create IDs variable here there going to be data IDs if that does not exist we can take an empty array okay and I will provide IDs here and then I can call get then I start iterating over my uh children and I will call Restore perfect and finally I'm going to um just redirect to rad Uh current road basically which will be trash okay this is for ReStore now let's go into trash and I'm going to create this button um restore files button let's go in the here we are in the components in the app and I'm going to actually copy and paste delete files button and call restore files button okay let's call this restore um let's go into trash and first I'm going to try to use that restore files button and I'm going to provide uh I'm going to provide all so we have a delete all okay so here's what I'm going to do this delete all is specific for delete button what I'm going to do is just make some changes in this restore files button instead of delete all I will simply have all um all selected maybe okay I'm using this in four places so I'm going to replace all of them all selected and obviously now I can use all selected property instead of delete all and I'm going to pass uh all selected here and then we have IDs delete IDs which I'm going to replace as well delete IDs I'm going to replace it with um selected IDs okay let's replace all then I will use selected IDs like this again I will go in the restore files button and I will search for delete so we have many delete Words here first of all the form delete files form we don't have that many forms in this component actually we only have one form in this component so I will simply call this form okay so we have file delete which I'm going to call Restore we don't have Road created yet which I'm going to do and create and we are also emitting that it has been restored we don't actually need emitting anything but like we can do if we need in the future uh selected files have been restored okay console log let's remove console log completely let's search for again word delete on delete click okay I'm going to change again this instead of on delete click let's do on click because that's more generic and that's also good enough and we also have show delete dialogue which I'm going to call uh show confirmation dialogue replace all are you sure you want to um restore selected files on delete cancel this is something I'm going to also replace on cancel and on delete confirm uh let's call this on confirm okay do we have any delete Words here uh yes Define any let's change this into restore please select at least one file to restore and I think there's only one matching form delete uhuh so we are actually um we are actually deleting we are going to make a post request I think right here okay because we're going to restore and delete method is not what we want now let's open web.php and we have this file delete and maybe after delete I'm going to create uh restore the URL will be restore uh the method should be post the action will be restore we have already defined the action and the name will be restore okay let's have a look so we have this restore but obviously I'm going to change the icon as well so what icon should we use uh let's search for ReStore okay let's use this icon restore files button SVG replace it in my opinion the button the icon is a bit larger so I'm going to reduce and let's give it margin right to as well as well okay perfect now I select the folder I click on restore I say the confirmation I shown to restore selected files let me open the network so I need to have a look what's the uh what request will go and what's going to be the response and I'm going to click confirm okay we have an error entry properties of undefine reading ID restore files button ahuh we are just taking the parent ID from this restore files button which is obviously not related to us so we can delete this line completely okay let's make request again selected files have been restored okay okay okay so let's just reload the page we still see screen light here it does not look like it is restored probably because we need to uh let's check here so we are calling restore seems like we are doing it correctly uh but let's check if anything is selected here okay so let's use dump and D IDs let's save it select restore confirm we see IDs right here okay now let's select if children is selected I'm doing the Cy correctly confirm uh children okay it looks like I am not curing it correctly ahuh because I need to call only trashed okay that's the point only trashed okay let's click okay now we see one item inside there and now it should work I'm going to remove this uh let's clear the network click confirm it was deleted the file disappeared from here I see this access notification selected files have been restored and if I go into my files I see screen Li back into my files this is awesome this is perfect um now let's Implement Force delete which will be slightly easier because now we have this very generic button we don't have many restore or delete keywords right here and now look at this so I'm just going to copy and paste this delete files pon and I'm going to call this delete forever forever button okay now I can use the delete icon here let me get this SVG icon inside a delete forever button we call this delete okay hold on hold on I I just copied and pasted I think a wrong wrong component uh Delete forever button let me delete this I need to copy and paste paste restore files button and I'm going to call these uh Delete forever button okay and let me copy this delete files icon okay and the text should be delete uh and instead of restore I will change this into delete well I I obviously could just copy and paste this delete files button but why I did this from restore files Buton because this restore files pton is much more generic we don't have like a specific um we don't have specific names like instead of show delete dialogue we have the show confirmation dialogue in our case like it's it's true that we are actually doing delete so show delete dialog would be uh ideal for our case but um I don't know why I actually took this from restore okay I don't know why um instead of restore obviously we need to change this into delete and I think everything else is good I will go into where's trash and let me use this delete forever button okay I will use all selected and I will use selected IDs let's have a look going to trash uh we see this delete button let's change its size with an eight in margin right to and let's give margin right to the button itself from the trash from here class margin right two oh it doesn't seem to be working delete forever button it does not seem to be working yes let's do this from here margin right three something like this okay now we have this uh let's give it text by the way delete forever okay now let's go in the file controller and Define this delete forever method let me copy and paste this down below let's accept these trash files request okay so we we get the request um we select only trashed and instead of restore I'm going to call um delete forever delete forever and this delete forever is something which I am going to create in the file but let me check this part it looks like correct okay let's now create this public function delete forever okay now this is the interesting thing when we deleting file whever we also need to delete the file from an actual file system okay so I'm going to do uh I'm going to call two methods from here first um first one will be to delete files from storage and let's create that function delete files uh from Storage okay and the second method will be to force delete that particular record for delete like this now let's create these delete files from uh storage okay we're going to accept Okay I'm going to call this method recursively for the children imagine that I am deleting a folder which has subfolders inside there okay I want to delete files for every item that is inside the the main folder or inside the sub folders so I want to call these delete files from Storage recursively on every children which is a folder okay so I will do the following I will accept right here files for which I want to delete the files from the storage and from here I'm going to pass an array this okay because I'm accepting right here in Array I'm going to pass right here in Array only this so I want to delete files for only this now I start iterating over my files and I'm going to check if the file is folder then I'm going to call this delete files from storage and I'm going to give file children okay now you know the answer why I did why I accepted an array right here okay because from here I'm going to pass an array as well inside else case uh I will write storage delete and I'm going to pass file storage storage path okay this is good this is good now let's go in the let's go in storage up files and we have a bunch of files here let me actually open this in the Explorer and let's move the Explorer in the recording window and how many files we have we have 51 items in this folder now whenever we call a force delete or delete forever there should be much less files right or less files in general depending how many files we are deleting okay let's um let's make request but uh do we have the root no we don't have root so let's define delete method uh Delete or ever the action will be delete forever and the name will be file delete forever as well then from the delete forever button when we make the request we're going to make delete request the road will be file delete forever okay we are emitting delete and the notification will be selected files have been deleted Ed forever okay let's check this I select this file um is this file actually something that exists on the file system I need to check this as well uh okay me Hero Let's download this okay the file is working this is my file okay I'm going to move this file into trash go into trash I know that there is a file system actual item for this and I will call delete forever click confirm selected files have been deleted forever and now if I just refresh this page I see 50 items only here okay so this is awesome let's delete now more than one file three files delete forever confirm okay here's something here's something we have an error selected IDs is invalid okay select it two is okay something is wrong one of the IDS is invalid okay let's try this again and then detect why it is invalid okay now it is not invalid hold on hold on and it was also deleted successfully let's make sure that this works fine now we have uh 47 items perfect now I delete the first one and I delete now first two forever okay uh I think if we have a look in the payload what data to do we send I think we are sending the previously deleted ID as well why it doesn't show me what data I'm sending there was a payload tab uh probably because I am sending oh here is payload okay I was looking at the wrong place delete forever payload look at this so we we are sending uh three three IDs and this is not what we want so on success I need to okay I need to clear the IDS so also what is the s selected IDs props selected IDs okay let me print this let's have a look it's an empty array I delete okay there's only one delete forever click confirm okay this is still here this is still here if I select one now we have two items okay this is obviously wrong uh I need to go to trash okay how we are doing this in my files we doing this correctly and let's use existing method okay we are listening to delete and when this happens we are doing this so what I'm going to do go to trash we are going to listen when the action completes uh we have different events we have delete and restore so let me write delete here on on delete uh but for restore the event will be called restore and maybe I'm going to call this reset form reset form whenever this is called I'm going to call reset form let's scroll down below and let's create this function okay here is on delete let's call this reset form and I'm resetting it perfect now I select the first hold on let's go in the delete forever and I'm going to print the IDS okay I select the first one we see IDs I click delete forever that is deleted and I don't see the previous ID here this is awesome and now I select and delete forever okay something is wrong we select only one ID in this case but the problem ID zero is invalid okay hold on why it is invalid let's delete two more files going to trash okay so we have three files deleted and I'm going to check also okay let me filter deleted that is not null what are the IDS okay 169 175 176 I select the first and click delete forever 175 confirm okay now I reload the page and 175 was deleted now I select this 176 and click delete forever confirm that was also deleted Okay click on keyboard delete forever confirm H 176 okay it still sends 176 176 why does that do H let's remove this console by the way okay okay so we have uh key to be file ID delete forever we have selected ideas to be um to be modified UNC confirm uhuh okay so whenever we click on this it looks like all is selected now we have this all true and whenever there's all true we actually don't care IDs isn't it so whenever this all is true that form ID is remembers the previous state okay when this happens when all is true we can set this an empty array this is what we can do okay awesome I think that's good now uh I'm going to move your files into trash awesome go into trash delete forever delete forever and now let's delete all of them and that was deleted awesome it it sent now all through and IDs and if we have a look in the file system there are now 38 items now it's time to delete the folder entire folder okay I'll will go into trash we have only one folder and delete forever and now let's check how many files we have here we have a 12 as you can guess like roughly 26 items we are deleted now from the file system because we deleted files forever okay I think this is awesome let's just go into resore button or delete forever button and just remove this selected IDs and just like this just like this we have implemented let's delete everything we have implemented uh moving files into trash okay I want one one thing to test let's upload multiple files open 26 files that has been uploaded okay I scroll down below and the data is loaded in my files if I go into trash okay let me delete all okay if I go into trash and scroll down okay the data is not loaded and we have an error doct type is not valid Json uhu because we need to go into file controller and we need the following check like we're doing in my files so if if a request wants Json we return files scroll down below and right here if request wants Json we return files reload the page scroll down below more data is loaded down below more data is loaded and just like this and if I click right here if you want to like empty the entire trash like we can add a new button empty trash okay we can do this and what you need to do whenever this empty trash button is clicked you need to make the uh this delete like uh the request we are making from the delete forever and you're going to pass form all equals true that's going to delete all the files inside the trash okay but simply selecting everything right here means that I want to empty a trash so I'm not going to do a dedicated button for that I will click delete forever click confirm everything is deleted and in the file system we have like zero files as you can see okay so we have absolutely empty file system from the database Point as well we have only hold on we have only one record which is our root and from the file system we also have nothing right there that is good that is good so let's upload those files let's upload the entire folder and yeah we have implemented the trash functionality successfully now let's Implement new functionality which will be to start the pages as not the pages but the files in folders as like a favorite um favorite files or folder so that in the future you can easily find which files are your favorite files okay so to implement the functionality we're going to go with the tradition approach whenever you select something uh we're going to create a button right here click on the star button or favorite button and it's going to save those items into the database we already have table for that and this is called start files and we have the following Fields so we have the primary key obviously we have the file ID we have the user ID and we have date when that was created uh to be honest this updated dat is something we don't even need Okay so who the user inserted those file this file in its favorite area and when okay so let's start from the user interface and I'm going to open my files let's scroll up we have this download button let's go to the download button and um actually let's copy these restore files button okay restore files button and I'm going to call this um star star files button okay we need to change the SVG icon so let's go into hero icon and search for Star let's copy this paste let's give this one with 484 modin 2 instead of restore let's call this star or maybe add to favorites okay now if we go into my files I am going to include that file star files pton and we are going to provide um all selected all selected and selected IDs uh selected IDs like this okay and I also want to listen to the action and then just like on delete we are resetting the selection we need to do this similar thing right here okay um I think we don't need to do this because this is necessary whenever you delete something and whatever is deleted disappears from the current list okay if it disappears from the current list there's no point saving the IDS that's why we we do this but even though we move the files into start section not not we we are not moving actual file we're just marking the file as a start okay let's have a look in the browser so we see this at favor um listen I think we need to reduce the icons for the other two buttons as well download and delete files button margin right two okay and this star files button needs to have also margin right something like three okay so when I select I click add to favorites it's going to send request now let's scroll down below let's change this restore um let's start from the beginning so are you sure you want to um maybe the confirmation is not necessary so you select something click add to favorites and that's it if you mistakenly addit something into it favorite it doesn't hurt anything it is not castrop so we can simply undo that so the confirmation is extra whenever the button is clicked whatever is written in unconfirm that should go inside on click so we don't need this variable let's remove this confirmation let's remove this here here on Console we can delete on confirm whatever is the body of this function needs to go inside on click just make sure that we have something selected okay if something is not selected we show this dialogue otherwise we execute that file restore uh no it should not be restored it should be file stars star maybe or add to favorites let's call this a to fa favorites okay and just to avoid any confusion in the future uh let's call this file as well add to favorites button something like this okay go in my files and add to favorites button scroll down below and we have the old import somewhere star files button which we can remove okay that's good a to favorites this doesn't exist we're going to create that but let's have a look please select at least one file okay let's remove this to restore um we are going to emit okay nothing is necessary to be emitted so I can remove that selected files have been added to favorites a it we can delete that I think that's it um parent ID okay we need this parent ID we need this parent ID and we are going to send this P ID so if I go in the delete files button um um where is this parent ID here it is so we are using this parent ID so I'm going to add this here as well because let's paste let's call this form because if we are inside the screen light folder and I click all and click add to favorites obviously I want to add everything into favorites and we need also here and tidy everything in which folder okay that's why we need this uh pentti okay a favorites this is something um which doesn't exist so let's open web.php add to favorites now let's open file controller scroll down below and create this function a to favorites uh the function will need the same type of request as we have for example for download where's that so files action request okay and then we get the IDS and date so I'm going to copy this paste we need files action request we have parent ID we have all and we have IDs now we check uh let me actually copy this part as well so if all then we need to take the appear and children otherwise we select by IDs right if all okay so we're going to make requests uh insert requests into start files obviously here in children is the items we are going to add into start so that's going to be children if uh we don't have all and if we have IDs uh in this case children will become file uh find and provide IDs okay so let me dump and die children I select something click it to favorites support method delete okay I made a mistake uh that should be post and we're making post request okay that's fine select something it to favorites okay we see two items that's perfect we have the items and now I can iterate over my items and just insert into the database uh one by one or I can create prepare everything and do a patch insert insert okay I think bch insert will be more optimal because we're going to do everything in one um database C database insert command so first we need to prepare the data okay that the data will need to be an array of associative arrays and we're going to have file ID inside there which will be something I'm just showing you the format and we're going to have user ID as well something and we're going to have created it uh which will be carbon now and updated it okay and we're going to have multiple such type of request as as many such type of inner arrays as many um items we have inside the children okay so I start iterating over children and inside data I push the following array so file ID is Child ID this dot needs to be removed we need a user ID which will be Al ID we have created it which will be carbon hang on carbon now and updated it so I prepared the data and now let me call um start file insert and provide data and whenever the data is inserted we are going to uh simply ref fresh the current rote so my files to wrote my files it's called my files not sure um not the render but let's check what's the rout name my files camel case okay to wrote my files okay start files let's check it is empty I select two files click at to favorites selected files have been added to favorites refresh we see two items here okay I select one more that was added okay now we see aha now we see this and this is Ed twice because we sent probably three IDs we need to go into at to favorites and on success we need to set form IDs equals an empty array like this now I need to delete these two items refresh let's add uh now we added the same item second time this is something we need to also consider and and maybe remove this item uh from from the from the start files okay we also need to Output which file is start and which not maybe we should start from there let me show you what I mean I will go in my files and let's create one more column um it doesn't need any label probably okay okay let's duplicate this and I am going to put right there icon uh okay we need two types of icons uhuh we have solid as well okay good so we need outline icon and we need solid icon like this okay so I'm going to give this one text text yellow or text orange I don't have the AOC completion text yellow 500 let's check it okay I see that which is good let's remove this item Center and Flex from here here no need okay good and we should display one or another not both so um I want to return from the backand if that file is added into favorites for that particular user okay now imagine that this property already exists okay so here's what I'm going to do I'm going to open file resource and from here let's say from here um is favorite I'm going to return true okay let's say that every every file is a favorite file so then from here I'm going to do the if file is favorite then if it is um if it is not favorite then we show outline icon in else case we show a solid icon so in this case we see all solid icons because all files are considered to be favored files um we can reduce the we can reduce the width of this particular column I think no not like this let's give it like a Max width of 60 pixel maybe even 50 40 think it is not reducing but that is fine white space no rra can be removed okay so this is this is more or less okay I will go in the um file resource and I will say is favored equals false okay now this means that none of the files FES our favorite files so we see this type of a star right there for every file now the point is that based on the start files we need to decide whether this file is favored or not and return the corresponding data inside this file resource to do this in the most optimal way um I will create a relation from the file PHP like we have here um belongs to and has many relations we don't have as many relations right here but obviously uh we can create public function um how should I do start okay let's call this start and I'm going to return this um has one relation will go to start file okay and then from the start files foring key will be file ID corresponds to my ID okay and based on this criteria the uh foring key is file ID corresponds to my ID it's going to return turn many records because one particular file like this particular file in theory in theory if this file is let's say shared to multiple users this particular file can be starred by um by multiple users okay and this will return um only first one because we have one but it might return a record of a different user so that's the point let's say if I have here another record this file but for user one then from here we're selecting the start file but if we are logged in as a user to it might quer for the user one so we need to add a custom we condition for the currently authorized user so we can add this wear condition right here or write when we do the join okay so I think in this case we can even do here file user ID corresponds to out ID now this now we have the guarantee that this will always return uh one and the correct one or the currently authorized user if there is no starred file if this particular file is not starred for the currently authorized user then this will simply return null all right now if I go file controller to create kind of like Optimal solution uh we need to add with right here with starred so I went to Q file with star files let me select this uh and let's go into file resource and just let's just print this this start okay for the first one we see null um okay let me return if if this start exists let's take the Boolean value out of it um okay um maybe we can just call Double exclamation to cast this into Boolean okay now look at this this seems to be working so this is added into favorites and it has this solid version to have other others this is also added and and that's it so we have only do we have only one and two files maybe one is inside here okay so here we have two more do we have four files now we only have three files why this is considered to be start both of them hold on one two three and four it's a bit too much uh there is some sort of bug and those items those items even should not be there okay let's debug this make sure we have the correct implementation I will go into my files and I will output file ID as well now let's check we have 268 269 and 241 241 that should be start okay so we have 241 twice here 2421 is twice uh how this is possible possible how this is possible hold on 2 6 six if we go inside 268 269 268 269 okay so we have duplicated data and that's why we see it twice why do we have duplicated data probably that's a fault of the pagination if I just reload and if I scroll down below then the data is loaded for page two let's check the data the data starts from 275 but we still see this 200 and 268 okay how many total records do we have I think we found different print problem let's output all files we have all files. dat. length if I reload we see 10 I scroll down below we see 20 but 1 2 3 4 five six 7 7 8 9 10 11 12 13 14 15 um how is this possible 268 here okay maybe it's a because of this start section and we maybe we didn't have bug previously so I'm going to remove this start and go in the file resource and just comment this line and pay attention that this is the file name which is duplicated so I'm going to copy the file name we see this file name twice on the page so I will refresh the page now we see this only once I will scroll down below now I see this twice obviously the problem is not in the start section and our implementation uh what we just did so the problem is in something else 268 hold on hold on go to file controller 268 is here for page two if I simply reload the page uh the data we see IS 268 69 70 71 2 3 4 five 6 and seven and then the rest of the data is loaded it looks like it is not considering pagination or anything like this I want to print the SQL so let's dump into files SQL or um let me search for how to LEL quy tosql string tosql so we have these files to SQL why it doesn't seem to be working collection okay so we have files to be collection because we called paginate on that that's why it is it is collection without page in eight we see the CER so I was thinking that maybe you have to provide the page ID but LEL doesn't take to long need the page ID to write explicitly in the qer because if we have provided let's remove this if we have provided the page parameter if I scroll down below and we have provided page two page three LEL takes that automatically we have file is definitely duplicated this is twice this is twice this is twice and that is inside the screen Li let's go h okay how many items are inside there so this is its left and right so let's select where left is greater than 54 and right is less than 107 we have 26 items okay what if I change the order by and let's order by ID okay it starts correctly from to 68 now it loads the correct data now it loads the correct data I think I know the reason so the dates are identical so we are sort in uhuh now I get it so we are sorting this by uh first we're showing folders but in that specific case we don't have any folders so then we are ordering by created at descending and because created at is identical so we are selecting it is selecting the first 10 like this and then it should technically select the next 10 but well the update it or created it is identical so it is sometimes selecting the exact same records so what should I do here is that first we need folders then we need by dat descending and then then we need ID descending like this reload the page we see the records it's not going to be duplicated it's not going to be duplicated now okay I got scared a bit what was wrong now let me uncomment this as favorite I will go in the file controller and uncomment this with as well and now let's reload if I scroll down below now I will see two files added into favorites and this is inside the screen line let's also remove the this length and if I go back I should see one file somewhere here okay now we have totally three files starred into the database and this is one this is two and this is three okay so now I can select this and click it to favores and this will get starred but for some reason it disappeared uh it disappeared because we we are inside the folder if I go inside the folder select and click Start then it is redirected to the URL without the folder just like this so now I will need to provide here folder which needs to be parent so I select click it favorite uh okay maybe I did something wrong so let's search by camel case older appearing path okay let's provide path click okay good perfect okay so now I was thinking and maybe a separate button is not ideal solution uh because we can simply click on this and it will send request like this okay what do you think about this it's bad that I cannot know your opinion right now about this immediately um I would do as as like a majority of you would decide but yeah like um having a button right here is kind of confusing because if you selected uh this file and this file and clicking the set of favorites what should happen should both become favored should both become unfavored or should this become unfavored and this become favorite that's why probably putting clicking right here is a better solution so I will go into my files remove the ID here and let's wrap these two svgs in a d probably and let's add click listener on that whenever we click on this let's call stop and prevent add um add remove Favorite like this and we're going to pass the file as well so I want this particular file to be added or removed from favorite now let's create function for that and if I go into at favorites pattern this is um this is not necessary anymore uh what I need is the form so I can create this form directly here and I need this request okay so I create the form I don't need all I need PR ID do I need par ID no I think I don't need the pr ID if I don't need all I don't need PR ID as well so I just need IDs that's perfect so I will provide IDs um make request right here selected files have been added to favor it in then form IDE is this will be something that is reseted but even reset is not necessary because this form is created whenever we click on the button so this is not necessary okay however we're going to have a problem when we do this because the back end expects P an ID and all flag as well so if I just click right here the request is made and and look at this please select files to download why doing download uh yes please select files okay did we send IDs no we didn't send IDs okay we need to send IDs so when whatever file we're clicking we have the file here and we're going to provide that file do ID so I click on that now we send this uh attempt to read property path on null okay so uh this error comes from here probably because we don't have pint anymore okay so we don't even need to to do a redirect so in this case we just need to do a standard axio request probably and whenever whenever we insert the record we just need to return like a success success true or simply simply a response with empty content in status code 204 so it means that yeah the the response was successful completed um but um no response is actually required okay if I go into my files uh I need to change this into axios so I think I have an axio example here let me search this in the project in the Js where is that maybe I don't have AOS and I have fetch example HTTP get okay I need HTTP Post in this case so I will duplicate this let's change this into HTTP post um let me change this first so this should be HTTP poost and we provide the road and we need to provide the IDS as well so we're going to delete this form and we're going to provide data like IDs is this and we accept uh data here which we should pass inside body Json stringify data okay if I remember correctly we should do it like this now if I click on this we have an error request with get head method cannot have body uh okay we need method as well method to be post click on this okay what happens is we made post unknown status to uh 419 um unknown status csrf token mismatch okay so we don't pass csrf token okay I'm going to justest one thing what if I um what if I return this and send the previous request using inertia form submission but from the back end instead of response uh yeah from the backend I will just return the following response what will this do let me check so I click on here and this is the response well we don't need to return anything so I don't want the model or anything to be displayed okay what if I call here a redirect back let's check this okay this looks like working let's uh let it disappear Okay click here okay this looks like to be working now we need to implement removing from the favorites so I will go in that file controller and I'm going to also modify this part because right now I am accepting a list of it and this is something uh which will be hard to use when we want to remove from the favorites so I'm going to make it simpler and I'm going to create new action which will be a to favorit action not the action but the request so PHP artisan make request add to favorites Aid to favorites okay a to favorites request add to favorites request uh we have another request mistakenly created here add to favorite so I'm going to remove this and now from files action I just need to get single ID nothing else true here I will just need one ID exist uh inside files ID for the currently authorized user that's fine it to favor its request let's open now file controller let's import this we have the request we don't need parent so I can remove this we have the data and we have the ID so I'm going to just get the ID remove everything else we are just working with a single file right now and we're going to prepare the data that will be we are going to select the file file will be file find uh by ID then we pass the file ID we pass the user and create an update that and then we call create passing the data it's going to uh return the result the model it created and then we don't actually need the result and then we redirect back okay so this is how we do and I need to test this now click on this okay now let's check undefined area key ID uh we pass IDs this is something we need to change as well we just need to pass single ID uh file ID to be feelable okay you're right those fields need to be ented into aable like this updated and created it I deleted something mistakenly now we added this into star and if we go into file controller uh now I'm going to do the following so when when I get the ID and I have the user ID as well let me extract into user ID variable I am going to select star start file to be start file C where file ID is file ID and where uh user ID is user ID and I want to get the first let me move this on its own line so I'm going to get the first or I will assume that there already exists a start record if that exists then I need to simply delete that which means that remove from favorites okay I will delete that in else case I will create that we don't even need a separate variable we we can directly pass this into create if that exists I will delete if doesn't exist I will create and I will redirect back now if I click an existing button that should be removed we have 14 records here click on this it deleted but why this get start uhuh I know why it gets start um why does it get started hold on click on here click on here okay look at this because we call redirect back if we are at the very bottom if we have scrolled down below somewhere and click on something think pay attention to the scroll so it um it like uh reduces and then it increases if I have scroll down below and then scroll up and click on this now the scroll increased and we only have 10 records so it completely refreshes the page which is not what we want that's why I think I was just experimenting right now but I think we should make http post request to the following URL we are going to pass ID to be file ID and we don't have on sucess we can have promise and then and then we can show the access notification selected files have been added to favorites or have been removed from favorites depending on what action we are doing but let's make sure that this request works first we need to pass the csrf token we had this problem earlier so when I click on this uh we have this assf token mismatch and why do I see this access notification I should not see that what's the status code I'm going to do like this response if response status code if that is more than or equal to 200 and response status is less than 300 we can return response Json we assume that this is successful response otherwise we're going to throw new error and we can pass the response to the error so const error equals new error error response equals entire response and then we call throw new error not new error but throw error now let me check I click on this okay we don't see success notification which is good we we are in uncode uh in promise error so if I go here and then call catch and I will print something like one to three it will come inside one to three so I catch this and I can also I have an error probably here let me check uh click on this uh one to three and I should have an error so this is the entire response so here's the error and I can get the actual response from here error. response here's the response and from the response I can get get what is the body and Json const body equals error. response. body Json so this is a promise so we call a wait on that let's change this into a sync and let's print the body that's going to be an actual result whenever we want to Jon Jon is another function what is it if it's no function readable stream and we have A8 in front of it okay let me make slight modifications um here I'm going to return new promise resolve and reject so then we can move this inside here and then instead of status code I can also check if the response is okay then I'm going to return uh not the return but I'm going to call resolve uh response Json in L's case I will reject um before I call reject uh I need to call response Json again and in then I need to call reject with the data so that's an actual um response and maybe we can pass the entire response here in the data or maybe this will be like an error okay let's try let's try this uh go in my files let me print the entire error we have the response and actual error okay so even though um I might not use this message since I've toen mismatch right here so it's good to know how you can get an actual response when the error is not when the request is not successfully completed so in this case we have this error um if I want to display the error I would do like um this is a response or um this is an actual error so error dot response or error. data is the actual hold on error. error. message will be the actual text here it is CSF token mismatch and you can display this in the catch if you want we need to f fix the csrf token issue because right now we aren't able to send a post request to add this into a favorites so what we're going to do is first open the handle inertia requests and if we go in the share that is the global variables that is available inside The View files so I'm going to create csrf token a variable here which will be csrf csrf undor token and now I will be able to access the csrf token inside uh my files so if I will just print uh page do I have page here or do I have props I have props so I can just write props page uh let's check this whenever I click this button okay let's just print props okay those are our props um I want to use page okay let me use page const page equals use page and then instead of props I will use page it should be inside the page uppercase x csrf dash token and that's going to be our token okay so we need to provide this token from here um so I can either pass this is a token here or or I will try to use page const equals use page here and then I will take the page propes I token let me print this page propes I've token here as well and I'm going to remove it I actually have removed it from here okay so let's check this part I click on this and we see save token and and the request completed successfully so I click on this okay it looks like it is working now let's check the database and we see 13 records I click on this and we see now 12 I click on this here and I see now 11 if I just reload the page I see that those are excluded however it doesn't affect it it doesn't affect immediately so what I will do is on success I will set file is favorite equals whatever is file is favorite inversed let me check now I click on this it gets removed I click on this it gets added and we see success notification in HTTP helper we have this console log here and here which we can remove and now this looks fine okay it looks like we don't need this Ed favorites button uh so we can simply we can simply delete that okay there's some error it to favorite P okay this this is used somewhere so let's go into my files probably it is used here okay now one thing what we might need to do is that filter the uh files or folders by is favored okay I'm going to add checkbox um right here next to download I want to remove this as well do we have this used somewhere else no we don't okay so let me get these checkbox and put this right here let's give it some label I'm going to actually put this inside the label and give it text um only favorites okay this change is something else show only favorites um what we need to do is probably redirect user to different URL where we put in the URL like question mark favorites equals one and when this happens we will simply show only favorites so if I go in the file controller uh let's get this cury parameter favorites it's going to be request get favor and let's dump make sure that it is there it is one okay and we can assign a default value uh which will be null okay and what if we provide zero it's going to be string zero right so we need to par uh we to cast this into an integer value let's print and then cast into an integer now we see a zero here and if we provide one we see one and now we check if favorites equals one then we need to only show favorites records so I will do this down below I will will remove this paginate and call files pinate here but we need to add a join to the start files so files left join uh well actually we need inner join if we're going to show only favorites we can call also inner join on start files we are start files file ID equals files ID and we need an extra condition uh where start files user ID equals Al ID let's just write join okay now create that is ambiguous uh here so that should be files created that that should be files ID uh I think we need to select everything from files we don't want to select uh start files uh I think we need to assign the result into files back inside the files actually I think this should be called uh cury and this should be called files okay and when we have favorit one we only see favorite files if we open my files uh if I just remove this uh let's give it Flex Flex item Center margin right three what does it move above plus Flex okay so let's give this one margin left to REM model so we can we can give it another another value instead of all selected that should be only favorites okay and whenever we click only the favorites then we are going to um just change the url so I want to add uh this favorite cury parameter in the URL so but uh there might be in theory some other Q parameters in the URL right so how we're going to get the existing Q parameters and then merge my e favorites let's just execute window location uh window location where's that search exactly so there is this variable in JavaScript called um new Eur search Rams and if we just provide window location search there and if I assign this into a variable called s then this s will have entries there um s dot get all let me call this get all get allall how to get now if I call to string okay here here is the that so what we need to do is to convert the existing search into URL params and then we're going to call set let me actually do this right here so um const proms equals new URL search params window location search then inside the params I'm going to call set favorites and we're going to provide the only favorites. value if this is true we're going to provide one if not we're going to provide zero okay and finally we need to convert this into string and just do a redirect maybe so we can do also window location um search equals forams do to ring if that's if that's going to work if I choose that we see that the URL actually changes uh however we don't need this full reload so we need to be able to do a like um rotor rotor visit or something like this so instead of window location search we should probably call um rotor which um should be imported do we have rotor yes we do have rotor so we are going to do rotor. getet um we need to get the current route the current route actually will be window window location uh not H what other things we have path name window location path name window location path name and then we provide these pams to string let's check this I click only favorites well we should remove that I click only favorites and we don't see the full reload in the browser and we only see filtered results now what we need to do is this only favor is to be marked as well if in the URL we have only favorites so these URL search programs can be done um unmounted maybe uh I just need to Define a variable here con not const but L params equals null in then on mounted do I have unmounted I do have on mounted I will assign pams equals new eural search pams and only favorite. value equals if params get favorites if that exists more specifically that equals one then only favorites value will become true let's use requal here and I'm going to also print what is the Pam get favorites okay as you see this is marked so if I click on this that uh favor turns into zero I refresh it and it disappears we can also remove move completely this only favor so I can check if only favor value is true we're going to set this as one if it is not true then we can completely um delete the favorites from the URL so now there's zero I click on this it turns into one and we see only favorite it Ms if I just click on this it's get removed from the URL okay and just like this we have Implement filtering if I go in my files uh and I filter only favorites I see only one item right there this is only favorite item if I remove this go in the screen line I see um only faor it's I see multiple items right here okay so uh I I'm not sure maybe this is not 100% ideal solution maybe a separate page of uh all the favorite items will be good because right now I have like five items selected five items marked as favorites but if I just select only favorites I see only one right here okay if I want to see the all the favorite items in my entire um file file manager then I should probably have a separate page for that okay but this is something um I'm not going to implement I will leave this up to you because we have already created U many similar type of functionalities like filtering and we Weir closes and this trash page you can Implement something similar to my files and just filter uh with only favorites yeah the my favor page should be similar to trash because you are not going to have um you don't need to go inside the folders you just need to have a list of all the favorite files and folders directly even if one folder is a favorite and its child is a favorite you need to see them in a single View and this is how you are going to create that new page now I'm going to start working on sharing files into another users of the same application so we're going to create one button right here when you select file click this share button it will show a model where you have to provide the email of the user you want to share this file email or emails maybe and on the back end we're going to send emails to those users that uh zura in my case my name is Zur Zur has shared um the selected files to you and the users can go into the system and see uh those files under shared with the me section and I will be able to see those files under shared by me section okay so shared by me will be the files which I shared to someone else and shared with me will be files which which someone shared to me let me open now uh my files and I'm going to go under components app and let me copy and paste this maybe restore files button and just call these share files button okay let's choose the icon sheare let's get the SVG put this right here let's provide correct withth eight margin right two share okay we don't need confirmation whenever we click um on share we can immediately show the dialogue where users can just provide the um provide the email addresses so this confirmation dialogue is not actually necessary however we're going to show dialogue something like a new folder okay so you are going to share the selected files to and write down emails so we want something like this let's go under app and we have create folder model let me copy and paste this create folder model and call all these share files model okay let's give it title share files the text input will be just a single email or comma separated list of email addresses we want to share the files so let's just give the this one uh we have the form let's have a look in the form as well so in the form we are going to provide emails uh and it it's going to be an array and we're going to have file IDs which is going to be an array as well now right here we're going to have uh V model will be form emails uh as for the errors I think we can forget at the moment uh enter email addresses let's remove this error section at the moment um key up enter instead of create folder we should probably call this share okay and now let's use this model we we are going to probably make some changes here okay let's finalize this uh model so folder name input let's re name this and call this email email input ID will be folder name we can call this uh Shear email enter email addresses and now let's use these share file files mode mod in the same way we are using this uh create folder model if we go in the create new dropdown we have this create folder model which has this V model create folder model which is probably Boolean value right here so I am going to copy not copy but create in the same way we need share files model and the only thing we need is V model uh show confirmation dialogue No it should not be confirmation dialogue it should be something else but let's rename this confirmation dialogue into show emails model okay and whenever we click on this uh we it shows show email it sets the show emails model to true we also have check that um all selected please select at least one file to share okay let's leave this as it is right now let's go into my files and before the checkbox share files button let's provide all all selected and IDs selected IDs okay we have this share button let's give it margin right three and when I click on this I get this error when I select something I click on share I get share files enter email addresses okay we probably need to provide some hint as well that um well you know let's just implement this sharing um to a single user okay let's let's not make it too complex at the moment and just make it to a single email address obviously it's going to be easier um it's going to be also possible and Easy in the future to just convert this into multiple IM address but for Simplicity and so that you get the idea I'm going to just implement this for a single email address okay sheare model OKAY enter your email address so we're going to do this in plural and that's going to be form email instead of emails just like this okay Enter email address now whenever user provides the email address and clicks on submit we are going to uh make a post request to some root and there going to be file. share road which doesn't exist yet and we're going to create that okay when the share happens we close the model we reset and we show the success notification by the way it looks like we don't show the success notification when the folder is created yeah we don't do this show success notification the folder and let's use the name form dot name the folder let's use btics form. name oops was created and make sure we have this show success notification imported I'm going to save this and let's quickly test this uh zoraa hit submit folder okay okay ahuh so I need to first show the notification and reset Zora 2 click on submit folder okay what's going on form. name Let's test this Surah 3 it has name empty it has name empty form. name is it empty before making requests as well Z 4 no it is not so let's just get the name form. name maybe it resets even before form reset I don't know but I'm not going to spend more time on that 05 click on submit folder 05 was created okay fine let's close this model let's focus on this so we have this on the road file share let's go back and let's implement this file share let's call the action share file share now let's open file controller and let's Implement share okay so we are going to accept um we are going to AC accept IDs and yeah let's accept the same type of request files action request what we're accepting for download like you can share everything inside that specific folder or just a specific IDs so we get the um same action let's have a look the usage of that this is the destroy this is the download I'm going to copy this from download please select files to share and down below we are going to send an email and save also data inside file shares inside file shares we have we have the user user ID and the file idid okay so this means that this file was shared to that user this is how we are going to do that this file was shared to that user okay perfect so let's prepare the data to insert into the database file share let's add aable here here we're going to have file ID we're going to have user ID created it and updated it uh okay let's call file share create we will provide file ID but the file ID can be more than one like we have um all or we have IDs a list of uh list of IDs so what we are going to do if all is selected we're going to get files equals parent children else files equals file find IDs so now we get the files we can uh iterate our our files and insert one by one into the database or we can just do a bch insert I'm going to prepare the data using bch insert so let's iterate over our files inside data let's just push file ID file ID to to be uh file ID okay and and we need user ID the user ID is something which we are going to accept from the request uh so we have an email and we have file IDs based on the email we are going to select the user to which we are going to share okay so we can put this uh we can create new request class and put this email address inside the files action however um I don't want this to be well I want this to be defined in the rules but I don't want to prevent I don't want it to be required okay let me explain what I mean clearly I I just don't feel it I don't explain it very clearly okay so here we have this files action request which is very generic we are using in multiple places uh I think I'm going to create new request anyways so let me do this PHP artisan make request uh F uh file files or share files share files request okay now let's open share files request let's extend this from files action request okay remove authorized inside files action we have all and IDs and everything from the pr ENT which is okay which is good we can have that uh let me copy this array merge portion to save a few seconds and right here I need email okay so this must be valid EMA it it can be nullable no no it must be required so it must be required and it must be email address okay I can also add additional check right here and this is exactly what I I was meaning I can add an extra rule right here additional rule that the email must be a string and based on the email the user must exist in the database okay and if the email does not exist in the database we can immediately show user a message that hey the email you provided doesn't exist in the database um and so you need to probably provide different email address okay we can this is one way how to do second way is just that we will accept that email address even if it doesn't exist in the database and we will show a generic message to the user if the provided email address exists in the database uh the user will receive an email of sharing files if it doesn't exist you no one obviously will receive any kind of email so we are not giving specific information to the user that hey you are sharing this file to user and the user does not exist in the database or exists in the database we just don't say that okay so I don't know that's a maybe a small but kind of security small security thing so that when you are sharing file to someone else you might share a dummy file one like a damor msum file I try to uh type right there some email addresses just to understand if the someone else is registered in the same platform you are registered okay so I'm doing something similar like when you're doing a password reset so you provide the email address someone else's email address just to understand if someone else exists in the system and there are two ways one way is the website will tell you the provided email address doesn't exist in our system or second is that the password resit link will be sent to your email email address if it exists okay and I found that the second approach is what is more common nowadays and um I'm going to do something similar I hope I explained clearly so we will just accept um email right here and then in the file controller let me get this email uh I'm going to select the user if the user doesn't exist we are not going to do anything so let's do this right here user equals user Fury we email equals email and let's get first then we do the check if the user does not exist we return um what do we do shall we return or shall we just let's actually return redirect redirect back okay so this is what we do if the user doesn't exists we simply return if it exists we continue we select the files and now we have the user ID here already we provide created at Carbon now and updated it and here we need to provide insert method with data in this case we just did the share and we need to send an email address let's leave it to do here send email addresses address actually and return uh redirect back and right here we are going to use cheer file request now I'm going to save this uh I think we should delete those folders okay I'm going to select this screen line and click on share and provide email address well I need to select an email address let me select first uh the email which doesn't exist like bread at example.com click on submit please select files to share okay okay what happened um we see file IDs we don't send file IDs let's go into file shares model okay we don't pass we don't pass IDs to the model on share we immediate L send request we have we have share files button but what we can do is listen to confirm and then do the rest on confirm file share if I go inside the model on share okay which one would be better to make requests from the model or UNC confirm I think making request from the modal is good idea because if something is wrong we can show this error into the model before it get gets closed so I'm going to undo this and we actually unclick we show the model however we don't do anything on cancel and we don't do anything on confirm however we need to pass um all end IDs so if I go in the props section I think we don't have props section or we do have we do have so we need all selected is a Boolean and selected IDs is an array now we are going to provide all selected equals all selected and selected IDs equals selected IDs now when we before we make the request uh we need to Define we have file IDs well let's actually change this into IDs and let's provide all to be false and we need parent ID as well to be null now we provide the Pint ID we provide all to be all select Ed and let's do with IFL statement if all selected do value hold on here let me copy this and here we need this all selected and selected IDs if all selected I think it doesn't need value because it is is not uh ref if all selected then form all equals true and form IDs equals an empty array otherwise form. IDs equals selected IDs now let's check this select and click on share uh bread at example.com click on submit okay uh there are there are no IDs so we sent all and parent ID in email but no IDs form IDs oh let's print selected IDs and all selected let me actually click submit immediately selected ID is an empty okay I selected something but it is empty okay let's provide all selected and selected IDs inside share okay we see that now click on share selected IDs let's print this selected IDs we see that on shear that's very strange we see that in the template but not but not inside the share selected IDs okay so in the previous places like in when we are trying to uh Restore for example so we have props we have model value as well we D structured previously the props and use the model value uh here I'm using this model value okay let me change this into props and this is the only place where I'm using model value I can use prop. model value now I can use I have a feeling that this might be the problem so Props selected IDs props all selected props all selected and props selected IDs now let's test this I select click on share click on submit now I get the ID okay now let's have a look we didn't send anything in the email and we got the error email field is required okay now it's the time to uh show proper validation or similar to we are showing in the create folder model so right here we have this class let me copy this share files model form errors email if that exists we're going to show that and the input error as well email okay select something click on share click on submit email field is required now I'm going to provide nonexisting uh not a valid email address click on submit I see that the email must be valid email address so far so good I provide bread at example.com and click on submit okay now I got successful response okay it looked like it worked first of all let me remove this printing here as well and if I go in the share files model we are going to show success notification as well so success notification uh let's import this selected files have been shared to and the email address let's change this into back again form. email not sure if this form. email is available at this stage but let's try this red at example.com to now okay so let's get the email right here const email equals form. email share a paste submit okay so that seems like like that was shared however if we check in the database we don't see anything file shares that's because uh the bread at example.com doesn't exist in our database probably we should also change the message selected files will be shared to breed example.com if the email exists in the system like this good now do we have another user in the database no we don't have now let's try to create new account read it hold on what I'm doing where sign up come on red red at example.com let's open 1025 or it was 825 okay now I am bred I bred in incognito mode and the email address actually exists now if I open non incog version and select this file and click on share I will provide bread example.com click on submit and we see the same message in the database file shares we see the file was shared to Brett this is awesome this is awesome so the record is there okay let's add a few improvements first of all if the file is already shared to specific user let's don't do this uh again so right here we are doing PCH insert well probably be before we do the PCH insert we should check if the file exists in the database or not so for Simplicity I'm just going to change the page insert into a select and insert obviously like u in the previous approach we can also achieve this we can select the file shares by the provided file IDs and the user ID and if that exists we we're going to skip that we simply don't um insert that second time in the database but uh I'm just going to do it very quickly right here uh file um we're going to call find well we actually have file we're going to do file Shear uh cury we well in you know what I don't like writing Qs in the loop uh I don't like just I want to hit myself on hands when I do this so what I prefer to do is to uh collect all the file IDs uh what I have here so I can use array collection um array Helper and I think I'm going to do plug provide files and ID I just want to get the IDS uh and if I remember correctly this will give me IDs let me actually test this so I select two files click on share um red at example.com okay here I got the IDS now I want to quy file shares quy well uh yeah F sh query we will provide we in file share we are in uh file ID in the given IDs and another we will be user ID is the given user ID so I'm selecting basically every file that is received to share to the user and I'm selecting if they are already shared to the given user okay this is the shared and I need to convert this into into a map or simply I can get the again plug on that maybe I want to get the file ID okay so this will finally give me existing existing file IDs this will finally give me the IDS if I receive 10 IDs to share you to the user existing file IDs finally will be those that are already shared to the user so that I'm sure I won't make uh record in the database second time okay and in this case I'm going to do a check if in Array so if file ID is already in the existing file ID's array plck in then I'm going to call get uh hold on then I will continue and continue and don't add this into the array okay so without this if just have a look so we have this file 2 six7 Shar to the bre user so I will click on submit again uh two few arguments to fun okay and do we need get key is missing okay let me check what is this existing yield IDs now this is actually giving me a nested um like an array of arrays which I don't want I just want a normal array so what I would do is I'm going to call Key by um first I'm going to call get and I think then I can call plaque um for file ID let's check what this will give me or I can do Key by Key by file ID and then inside the collection it will have this key let's actually check this existing file IDs for some specific key right let's check if there exists this key it exists okay so this is exactly what I wanted instead of in Array maybe we can call array key exists inside here and if it exists it's not going to make uh record second time if I comment this line then I click on submit in the database we are going to have this and this repeated okay I'm going to delete this now and uncomment this code and click on share and provide the email click on submit argument to array must be type of array collection given okay if it's a collection we can call a method has e right there file ID that was shared but no more records were made so if I select these two and click on share and provide bread at example.com click on submit nothing is added right here because those two files are already shared to bread if I add one new file and provide the email then one file will be added right here however if there's a new user and I will provide an email address for that new user the record will be created right here for that new user okay just like this we are doing um sharing the file now we need to send the email address so for this we should probably create a mail class PHP artisan make make how did I write make come on make mail um share files mail probably something like this share files mail so now let's search for share files mail PHP class here we have this envelope and content here we have the view name provided okay and let me put this to send mail to we need to provide the user send new sheare files mail and we are going to provide some data into sheare files mail let's try to make sheare again okay view name not found obviously that's what I always expected we have this view name here we need to go on under views and inside the blade views we're going to create mail folder and let's inside create new blade file and call this share files. blade. PHP hello test now let's provide here mail. share files let's do sharing again okay that has been shared if I go in mail pit we see hello test sheare files mail okay awesome so we have this blade file and we just need to render the files we are going to share to the user and some text as well right so let's create table because in most cases we write um Mals with with TDS to be compatible with uh everything including Outlook um so we have this table and first let's write hello and the name so here we need user name hello bread user uh in this case will be author another user user zura for example shared the following files to you and then we're going to have list of files so now let's use for each we have files as file and let's just output file name um what else do we need anything else I think we can skip anything else and we don't even need probably table we just need a paragraph maybe but we have to provide files author and user inside sheare files mail we need to to pass in the Constructor some identifier or some information if I go in the file controller I'm going to provide the user to which we are sharing something we can provide the current user as well out user and we can provide the files we are sharing okay good now let's accept those here public uh user public instance of the user is user public instance of the user is author and public uh we can't use an array notation here um it they are files simply files okay now these three variables should be available inside the view because those are public properties inside the class and lets to sharing once again R example.com return okay hello bread user Zur share the following files to you screen line blah blah and the folder uh we need some formatting obviously that should be paragraph it should be another paragraph and this is the file name and this is the folder name let's provide a prefix like if file is folder then we show folder else we show file let's do sharing once again oops hello bra user zura shared the following files to you file screen L folder screen L okay um we can also add a link to open to share it with me section but we haven't created this link yet let's put this in bold and this in Bol as well and let's put HR here okay so we have implemented email sending and now the main thing is to display those shared files under shared with me or shared by me section so for this first open file controller let's remove this too and shared with me now let me copy let me copy um maybe trash I think I need to copy trash paste here okay instead of only trashed we need Q we want to select non Tred items uh this is shared with me so created by we is not relevant we need to join files into file sheares okay we file shares. file ID equals to files ID inside where we're going to put file sheares user ID is the currently authorized user ID okay so we want to see files that are shared with me through these file shares a single file can be shared to single user only once so this will not duplicate the records we're going to order by folder uh and we're going to order by uh not deleted it but created Created it or maybe maybe we just need to order by file file sheares created at descending and I want to also use order by uh files ID descending because remember we had this problem earlier this order by files ID by the way needs to be probably added into trash method as well so if two files are deleted at the very same time if many files are deleted at the very same time then the pagination might not work properly so we need this order by ID as well um okay so we want to accept request because if we are trying to load more then this is still relevant and instead of TR crash we want shared with me and we will provide files okay while we are here let me create shared by me as well shared by me we still join to file shares because the file needs to be shared but inside we we add file created by is the currently authorized user so I want all the files that are shared to someone else but the author of the file is me obviously only author should be able to share the file okay and maybe in Sharing uh right here we also need to check if the file the uh user is trying to share belongs to the current user and I think this is done in the uh share files request in the files exchange request more specifically so we have the IDS and all and each ID uh we check that the um ID belongs to the currently the the author of that file so this is the security done um is done on that side okay go back to the file controller uh scroll down below shared by me uh that is good I think we only need to change the view shared by me okay and now let's go into JS pages and let me copy and paste trash and call these shared with me okay and before I do any change um I want to remove this I want to see the result immediately so we have sharing but we don't have Pages get shared um shared with me shared with me and shared by me now let's open navigation and provide Road here files shared with me and that's going to be files shared by me let's add also active indicator if the URL is files maybe we can just remove this files shared with me and shared by me I would love in inertia to be possibility to get the current page Uh current road name but unfortunately there is no direct possibility for that that's why I have to compare it by URL which which is something not ideal uh shared with me and shared by me okay now we have all that let's check my files broken files shared with me is not in the road list let's open web it is not files it is file shared with me no data in this folder there's an error in shared by me in order close order by file create it yeah here D is missing shared shared by me created Created it okay there's n uh shared by me that doesn't exist okay shared by me doesn't exist but why I don't see anything in the shared with me I have this file shared ah because uh this file is shared by me not shared with me if I open now my incognito mode shared with me should show something to me okay here I have another error uh fixed it save reload shared by me um shared with me okay created it okay here I see something interesting so those are files that are shared with me someone shared that file to me and I probably need a download button obviously I shouldn't be able to delete anything but I should be able to download those uh files if I if that file is shared to me okay so let's first Implement shared by me as well maybe I can use the exact same uh view let me try shared with me shared by me is empty however if I open zoraa user shared by Me shows those files uh double click doesn't do anything that's good well if I Shar something to someone else that someone else should be able to download at least right so we need to show download button I'm going to open my files copy download button go into shared with me and paste it here okay this is shared with me if I select something and click on download uh let's have a look download files button okay uh um we don't there's no folder at the moment page props folder ID okay if I search for this inside the download there is no folder if there's no folder that's fine we can pass the parent ID to be now or we can use a question mark here if the folder doesn't exist that will be passed as now so let's save this and reload click on download now there is another error that error comes from the back end uh the selected parent ID is invalid what is the parent ID undefined okay so we don't we should not even send parent ID uh if it is undefined so we only send it if it exists select and click on download now let's have a look now we have this problem selected IDs uh zero is invalid and that's 100 person correct because if we check now action download or simply download method uh this uses the files action request and we have IDs here and each ID um must exist in the files table and the current user currently authorized user must be the owner of that file okay so this is the Restriction how we have implemented at the moment and we should probably change this okay uh let me think what's going to be the um easiest way to change that so I'm going to write a left join um we have a we and we have a Cy okay so what I'm going to do I'm going to write a lift join uh can we add The annotation that the uh quary actually it should be a variable query is um query builder left join uh file shares file shears file ID equals to files ID so we do the shear and then I'm going to write a we uh again I'm going to accept cury here a to uh the created by we can provide here files files. created by should be the currently authorized users or we file shares. user ID is the um out out out ID so let me double check so uh the ID must exist in the files and we had an extra we so we left join this into file shares left join because uh we don't use inner join because um if the file is not shared to anyone but is owned by me when you do an inner join uh the file will not be selected so we do the left join and then we do where the file created by needs to be the currently authorized user or from the file shares user ID needs to be currently authorized user in this case it should be able to download let me now check this I'm going to click on download let try it doesn't seem to be working we have an error file shares unknown column file shares in okay what's going to what's the Q select count as aggreg from files S ID we ID okay so we should probably do a left join here if it supports if it supports we should do it there uh let's try it it does not support um okay does it support something like uh Cy or join or okay what does it support when is well in this case we just need to write a custom validation rule like we did um where we did that store folder request was that no store file request yeah I think this is this is how we how we're going to do that okay let's open files action request and I'm going to leave the old rule that ID must exist and then we're going to have additional uh function here it must be a function attribute value and fail so we get these three values there and the value will be an array right so let's just uh value well we can call this IDs uh let's TR try download four okay so we have this IDs uh is is it an array or just a it is it is a single value if I provide now we have so it looks like this is called multiple times for each ID fine so we are going to do file quy then we do left join and then we do this we file left joint file shares where the files created by is the current user or file shares user ID is the current user that should return something file and then we check if file exists if file doesn't exist then we call fail and we can use the value or just show some sort of error invalid ID and that should be ID not IDs but ID uh I think we is missing where ID is the ID so I'm just selecting one file invalid ID now let's test this download okay the file is invalid still get this error it must exist in the files ID so it exists it will will definitely exist okay what is inside parent rules okay there's also parent ID but this is not the reason why it is failing ID is at zero okay let me remove the rules exist attempt to read properties folder or n okay so here's the problem the download these download it's very hard to use this download for both for my files and um shared with me files now it expects pent ID here because uh because if you are in my files there definitely exists parent ID if if you are downloading everything from my files um you you need you you definitely have a pent and you need the P because you need to select every child of the parent okay so we need to do it slightly differently it's not going to work um in the way we had that implemented so we either need a separate method or a big modific ations in the download modifying an existing function will be definitely tricky thing uh so I'm going to create tricky and even maybe not good idea and even not possible uh well it's going to be probably possible but we're we are not going to have a good solution so I'm going to copy this download and create new one download um shared okay so here we don't have pint at all so we can remove this pint we are not going to have all flag as well well we can technically have all but all simply means download all shared and when we are trying to download all shared um it means that yeah we also need a differentiation um shared with me or shared by me so let's do like this download shared with me so when this is all obviously if all it doesn't exist and uh if I this is empty please select files download okay good if we select all then we need to select the files okay so files will be all files that are shared with me without pagination so we have this shared with mury without pagination and we are going to um we're going to just get this Q I don't want the Q duplication so I will go in the file and create get shared with me so I will get this get shared it should be static static get shared with me okay return file quy and we are returning this so we are good now I am going to do let me actually do this for shared by me as well as well get shared by me it should be static return file cury okay get shared by me perfect and if all selected then I'm going to call file get shared with me call get I want to get everything and then I'm going to pass files here which will create the uh ZIP and the URL to zip and the file name should be something like shared with me zip okay if the IDS exist then we then we find by ID each file and create if it is a folder actually so if it is only one if it is a folder I think this logic well if only one is selected or even if multiple files are selected this logic stays the same the only difference is the file name right here if more than one file is selected we're going to give it a name right inside shared with me so that should be shared with me okay again I don't really like code duplication so what if I extract this part of code um can I do that and what what should this return it should return URL and file name okay so I'm going to use list or maybe I can use this notation as well URL and file name equals this um get download URL okay this get download URL doesn't exist so let's create private function get download URL let's paste this here okay what information is missing so we need IDs which must be an array okay good what else and and we need the zip name so I'm going to remove this and call zip name we are going to return URL and file name let's accept here zip name and from get download URL we're going to pass IDs and I'm going to pass zip name which will be shared with me I can actually create separate variable for that zip name like this and I can use that zip name here as well so now my download shared with me gets very small so I get all and IDs and if it's all then I get every every shared with me file and create zip out of that if there are specific IDs then I get download URL um for that IDs we have the code dupc code duplication which is fine so I will find the second piece of code this uh which is from the download method and I will replace it so we're we're going to have URL and file name this get download download URL we provide IDs and we provide parent name now we don't have code duplication and I like that now in the same way I can create in the same way I can create shared by me but let's first test this shared with me download shared with me uh I need uh root to Define so we have Download Here download shared with me okay and if I go in the download files pattern uh this pattern is the same for my files for shared with me and for shared by me so either we need to create a separate component uh or we need to pass some property here that this is for my files or this is for shared with me or this is for shared by me okay let's try to accept prop uh shared with me equals false and shared by me equals false so before the detecting the URL let URL equals this if props shared with me is true then URL will become download shared with me else if props Shar by me is true then the URL becomes shared by me and then we make the request and the rest of the thing is the same now let's go in the Shar with me I select the file I click on download first let's check the URL it's still accesses the download because I don't pass shared with me if I go in the shared with me I'm going to pass shared with me to be true click download okay now we it makes correct request is folder on now this happens on file controller 4 432 line 432 file okay so we accepted the ID and we just want to download that but that was not found okay so I need to dump IDs in file just to test this we have the IDS and file okay if we check files we don't do we have id4 we don't have id4 okay why is there id4 I think I know I go in the file controller and select shared with me this is it uh we are joining to file shares and in the select we are selecting everything from file files as well as everything from file shares and the ID for is the ID from file sheares this one not ID from files so we need to add select here everything from files we don't want to select obviously file shares let's add this selecting shared by me as well now if I reload select and download we see different ID here and we see a file select Ed now let's remove this Tamp okay now download worked let me click on Save and let's open here we see the file so I was able to actually download shared with me file okay I'm going to click on this and no let me open non incognit version for Zora go into my files and I want to get just one ID um like 255 okay I want to hardcode this ID in download files button here we are passing so I'm going to put right there this ID 255 okay and and now I'm going to open bread and I go in shared with me select and click on download okay what id was passed 255 is this file shared no file 255 is not shared okay then why was that file selected and why the download triggered okay we have some security thing uh when open file actions request actually we made big modifications here which I'm going to undo everything because that was uh for download so let's undo it how was it okay this is where local history is amazing this is it how it was before okay now it doesn't work okay selected as invalid this is good this is good uh no this is not good this is not good because now it doesn't allow me to download shared with me file okay this is not good okay let's try this file not found import file okay download works it should work okay it should work however no it should not work because we have this hardcoded 255 okay and I yeah and this 255 um is not shared I think I have this kit or first this is the problem okay this is good Integrity constr viation column ID and we CL ambigous okay we are files ID in quals ID click on download and now we have this validation rule what I was expecting for so long so I have this invalid ID 255 okay because right now we have hardcoded um ID on which I don't have access uh and I'm trying to download I will always get this message okay obviously from the user interface you won't be able to uh trigger download if you don't manipulate the console and things like that but the main thing is that we are secured on the back end so I'm going to click on download both of them and it's not going to work now let's go on the download files button I'm going to just revert the change and now I will select both and click on download and this is downloaded with shared with me click okay that was opened one file and another file just like this we have download functionality in shared with me section we don't have anything else if I select all and click download it's going to trigger download and we have screen line inside there with all the files awesome that works fine if I go in shared by me now that's the that's the thing the remaining thing uh and I'm going to open now Zora's page shared by me and if I select and click download um it's not going to work because it is making a request on download uh and we have this internal server error well it it can make request to download however um it's not going to work because uh in file controller we probably wait for parent let's open this file controller 189 file controller 189 809 yeah appearing the appearing doesn't exist so it should make request into shared by me how should we do that well I think we should create separate view we have a bunch of kind of duplicated views at the moment shared with me shared by me and we have these uh trash in my files all of them are very similar the selecting functionality is there as well it can be combined it can be combined but for now I will just create shared by me and inside shared by me I will pass this shared by me to be true and inside the file controller I will change this view name into shared by me so I will save that and I'm in shared by me click on file and click on download okay there was an error shared by me is not in the list okay let's open web.php duplicate this download shared bu me select and click on download we have internal server error download shared by me doesn't exist okay download shared with me that exists so let's duplicate it shared by me okay the zip name will be shared by me and the actual content will be shared by me if everything is selected okay awesome and the file ID is what is passed right here we're we're just blindly selecting the file uh and don't uh just consider if that file belongs to the current user or if that file is shared to the current user but this is done inside the request okay if I open this action file action request we check that the file must exist and that ID must be either created by me or must be shared by me and that gives the permission to the user that whenever ID comes right here we are sure that that ID the current user has per mission to that ID to download awesome now let's test download and here it works so this is shared by me that was downloaded and let's select everything and the zip is called shared by me I open that and we see all the files okay we have trash we have shared by me we have shared with me and we have my files now let's start working on searching for files so we have this search bar from the very beginning but we haven't implemented that yet so we are going to implement the search for only the content for only the page the user has opened at the moment so I have the idea that maybe when I type something it's starts searching everywhere like inside shared with me inside trash as well shared by me shared by me obviously is the same as my files but I decided finally to have a separate search Fields um for every page so when I search for something like 16 right here and hit the enter it's going to filter inside my files obviously it's going to search for recursively as well inside folders if I want to find file which has 16 inside the file name I would go in the shared with me and type 16 right here and in the same way if I want to search for a file inside a trash I will go in the trash and type 16 right here hit the enter and it's going to find those files from the trash okay so this is the idea how I am going to do let's go in the default layout or how it's called authenticated layout and where is the search bar I don't remember where's the search bar so let me search for search for it is a search form but where is that used inside the authenticated layout I couldn't find that for some reason okay so here's the search form now let's listen to key up enter and call method search uh do we have V model here we have form search we don't actually need form in this case uh because what I'm going to do is just the change the url and put the um search cury parameter right there and then the rest of the thing will be handled by inertia so what I need to do just Define const search equals rev import ref and we will just provide um search V model here and because I named this search the method should be on search so on search I will get the search. value and I'm going to do like a rotor doget let's use window location uh path name and then append the search parameter um however this is what I'm going to do I'm going to show this to you uh but this is not ideal and I will explain why equals plus search value okay I type test hit the enter uh search do value okay let's check uh I know the reason so we need to to call prevent prevent test hit the enter let me change this form into div because because this is a form it triggers the standard submit let's type test in the enter okay now we see that now imagine the case that we have only favs filtered okay let's do like this only favor filtered and now I want to search inside only favor so I would type test hit the enter and those only fav wordss get lost okay this is not what I want so I would do the following const params equals new URL search param I'm going to pass window location search and then inside params I'm going to set search equals search. value and then then I'm going to pass uh here plus uh params to string now if I go on homepage then filter only favorites and then type test I have both favorites and test in the URL okay now we need to open file um file controller but before I make some changes in the file controller uh when I reload the page I want test to be written here as well so I will create this param variable um inside the component not inside the function let me make it empty string then then on mounted on mounted I will populate that and I'm going to set search search. value equals arms get search now if I reload the page I will see test right here if I just change something in URL like uh zura hit the enter we see Zur right here okay now let's go in the back end and let's start with my files I'm going to get the search request get search okay so whenever I search something in the um in the search field I want to find any file that matches the search criteria uh by name so I don't care about whether it must be the child of the current folder or not so this is something we need to forget so right here we have this pent ID so that we are sure that we are going to only cury um which has the parent ID this but this is something I am going to remove so I'm going to remove it and if search is provided then um I need to do the search in L's case I will provide that uh P ID filter okay now let's focus on the search uh I'm going to call where uh name like and we need to provide the percentage and then the search okay let me dump search and have a look so here we see the search criteria and if I reload the page I see only one and what is this I think this is root obviously we need to exclude root and we can exclude root um in a always in any case we uh there should be some kind of root flag or left is one indicates that this is a root we _ lft uh does not equal to one reload the page we see empty okay let me remove the search and we see everything okay uh as you see we have only scre ey scre ey okay we have only scre ey files I'm going to upload Now new folder ecommerce upload we have the Ecommerce products inside there we have this MX Masters 3 and keyboard and we have headset and Dell XPS and chair okay fantastic now I'm going to search for Dell hit the enter okay now I see Dell awesome now let's search for um keyboard okay I see keyboard right here okay so the filtering looks like working let me upload entire entire pictures if it's not too much okay 59 files are being uploaded pictures and we have many things right here okay if I search for keyboard now let's have a look so we have multiple keyboards and we also need parameter the path where the keyboard is located so I will go in my files and I will create this path column how however however I will only display it whenever search criteria exists okay so let's give it path then we have here file path now this is displayed always but I'm going to hide it based on the search criteria if it's not available I'm going to hide it okay so let's go in the refs or uses or even just create uh con search No it should be let search equals an empty string then um we'll go in unmounted we have the params I'm going to remove this console loog and we have search equals harams doget search pay attention that right now I just Define the search without ref okay because I Define without ref I can directly assign it whenever I Define with ref I need to assign it with DOT value and I think I can use this search steel right here so okay if search and where if search okay now I don't see path if I search for keyboard hit the enter um okay now unmounted didn't happen um something was changed the URL was changed okay I need to listen to search the search happens from here so I want to use event pass or emiter dot emit let's open Emer let's create new constant on search search okay now I'm going to emit on search and I'm going to pass also search. value let's import the amiter okay aome now I'll go in my files and on mounted I will listen to uh emiter do on on search I will get the um value of the search value and then search equals value okay so this is not necessary anymore let me no this is actually this is also necessary so when you reload the page then you need this as well but you need to listen on ser as well so let me import this on search I think this looks good now if I just reload the page unmounted happens but the parms get okay um let's just print search search looks hold on search is there okay that is probably let me check if this search is available in the component it is available if I just reload no it is not available why it is not available okay I'm going to make this riff um I will avoid such problems an empty string scroll down below search. value equals this and search. value equals value so I save I reload the page and now I see keyboard every time let's remove this okay whenever I have something searched and I will open this I will see the path the location where it actually lives and if I change the search keyword call like Max hit the enter then this path stays here and if I delete that hit the enter then this path disappears because uh simply search doesn't exist now I search for keyboard again hit the enter and I see path obviously if I zoom out slightly then this works perfectly okay so this is this is implemented and now we can go into shared by me and implement the same thing right here and shared with me and trash so that's going to be pretty pretty straightforward I will open file controller uh okay just like I did inside my files uh I need to listen to emiter No Maybe I don't even listen don't need to listen to emitor because in shared with me shared by me in trash we always show path okay so it is not necessary to listen to emiter the only thing we need to change is the back end so here we have these my files now let's check trash uh this pagate needs to be called later um files equals cury Agate and I'm going to call this cury and I'm going to get the search request get search okay and if search exists then y we name like search here we go this is trash let me delete now what should I delete let me go in the pictures and delete Z example.com zip go in the trash and I'm going to search for zura uh okay I see everything because every file has Zur right there okay example hit the enter okay now I see only only that okay this is awesome so the that that that's all for our trash we don't need to do anything else and I will move the other methods like shared with me and shared by me Methods at the top so that we have the methods which return the data at the very top this create zip those are all like functional methods not returning data okay here we have this shared with me and shared by me so let's move these two methods at the top here now let's get the search parameter here let's get it here as well and let's copy this search we are close as well now shared with me okay so let's call this Cy files equal quer paginate and if search exists in the quer we add this search so I copy this and put this here as well that should become cury and files equal your paginate and this needs to obviously go after the search we is added now let's test this shared with me and shared by me inside shared by me let's search for screen light hit the enter it leaves only one let's search for this number hit the enter it only finds one and let's open second window window inside which I am logged in with a different user and I have shared with me and when I paste this number hit the enter and this is shared with me okay and do we have any Earths resource CH event pass doesn't exist on search event bus doesn't provide hold on maybe that is a different error like the error from the old version okay just like this as easy as that we have that implementation okay one thing whenever I search for something like again uh I will go in my zoraa account and search for keyboard so the menu is not highlighted anymore because we have this full URL detection activated so let's open navigation and see if there is possibility to fix that if there is like easy way to fix that okay so we have props error out okay props are out we have CSR token and we have Z key which has URL P defaults RS through those are all the roads we have registered we have files folder and stour and URL the URL is full URL I'm curious in one thing if I open um how it's called up HTTP middle we handle inertial request okay and I will provide right here roadcore name I'm just curious if I get the current road um how to get the current road I forgot LEL get current road name let's import this road uh it should be facade okay Road name I save this and now let's search for Road name here we see Road name okay that's that's good now if I go in the trash what's going to be the road name rad name will be trash so what we can do now is go to the navigation instead of page URL we are going to use page props wrot name so let me change this into props rcore name and obviously we need to change this into name so that's going to be my files um let's get this it's going to be file shared with me it will be shared by me and it's going to be simply trash so let's remove the page oh we are in trash no I in my files if I select only favorites the menu item still gets activated okay previously that was lost and if I search for something like keyboard obviously I don't see anything but the menu item is active I remove only favorites and I see uh keyboard this is awesome so we have now implemented this functionality as well I search for example and the menu item is still active now I want to connect my laral file storage application into awss 3 you're probably familiar what is awss 3 it is the biggest um Cloud uh file storage service provided by Amazon okay so we're going to first register on AWS so we're going to open AWS console you can just type in the Google AWS console and the very first link will give you the console link but you need to be logged in in order to be able to access the console obviously so we need to create an account so click create an AWS account right here you have to provide your root user email address and your account name then you will verify your email address and then you need to follow the registration steps there are multiple Pages uh make sure you provide them you have uh free trial for certain products however this requires you to provide credit card information um and make sure your credit card is also working it will take just a nominal amount one dollar whatever $1 or one Euro and then it will obviously return it back but whenever you're using the paid services or whenever you will start using more than what is offered by free then it will start uh charging uh from your credit card but it will not charge from your credit card if you don't don't use those paid services this is important okay so don't be afraid to entering your credit card information on AWS so the biggest uh Cloud um hosting service provider okay so I am already registered and logged in um in my AWS so instead of just going in the registration steps I'm going to go and try to log in at this stage you have to provide your root user you are not I am user so you are root user so I'm going to provide my email I have two Factor authentication enabled as well so I'm going to provide my two Factor authentication code here and now I am in AWS console okay so what do we need to do so the idea is the following we need to create S3 bucket S3 bucket will be the container where we will put our files our File Manager application will be connected to that specific S3 packet and whatever files are are uploaded right here they will be uploaded on the S3 packet we configure okay uh the next thing is to get the API credentials from AWS uh console okay so we want want to put those uh credentials secret and access token in our laral application in order laral to be able to communicate uh to AWS services and in this case to S3 service to upload files right there okay let's start with these steps and I'm going to go in the S3 so you can search all your services right here actually I'm going to type S3 right here and here's the service we can click on that I already have several buckets but I'm going to create a new bucket right here so let's click create bucket and I'm going to call this file manager you can choose the AWS region in which you want the backet to be created I'm going to leave this into London um okay in terms of ownership I'm going to leave them as it is right now uh but we're going to do uh the ownership we are not going to actually do the ownership but we're going to create a new I user um and only that user will be able to uh communicate with the S3 entire S3 service okay so I'm going to click this create bucket did I miss anything okay it already exists let's call this laravel I literally have like a few okay so one important thing make sure that the bucket name is unique so the bucket name needs to be unique not only for your account but it should be unique for the entire uh S3 service across the world okay so that's the Restriction because those bucket names are used in multiple places so we're going to name it something different like larel larel manager the code hold it you can name it whatever you want it's it's just a name which is not visible to um anywhere you can even give it some random text like a file manager um some random text okay that's going to be also fine but let me call this laral manager the code holic uh sorry file manager the code holic let's click on create backet okay so the backet was created now we're going to create policy and then we're going to create user and assign the policy to that user so I'm going to go in the IM section from where we can actually manage policy and users and groups so I'm going to go in the policies and just like I already have this laravel file manager policy I'm going to create something similar so I'm going to click create policy the other one was created for um testing purposes okay so we can provide some policy configuration through the visual editor or through the Json if we switch to the Json we need to put um we we can actually configure this Json right here and provide the services so actually we are looking for S3 service if we search for S3 we can click on that and we can tick all the actions so by ticking this all the actions I am allowing whoever whichever user or whichever group will have that policy assigned they will be able to communicate to the S3 service with without any limits okay so they will be able to connect to any backhead delete file from any backhead and so on so while you're doing this make sure you know actually what you are doing and make sure you really want this okay considering that you have brand new AWS environment then you okay to do this but if you have other projects on your S3 you should not probably give uh particular APA credentials access to every uh your S3 packet okay I hope this makes sense okay so then let me actually remove this and I'm going to search for S3 again and we can see what other options we have so here we can have a look at the individual access level permissions like list access list access points for object Lambda list all my buckets and so so on obviously we can have a look at this and choose only the um permissions we might need in our application but again this going to take um a lot of time to choose exactly what we need and to be honest I don't even know all the permissions what they are doing internally like for example I don't know what is delete storage lens configuration okay so in this case I'm going to choose just everything right here um and let let's have a look uh okay where is this is three all actions to scroll down probably and click next why is it not chosen right here okay it was eded ah I think we need to click add hold on next doesn't seem to be working no I don't want it to be removed I want next okay let me click add resource here and choose we can specify bucket name right here specific bucket name as well uh in our case that's going to be file manager the code hoic okay so using this approach we have specified that I'm giving all permissions to that policy but only to that specific packet but I have a question why it doesn't allow me to click next now it does now it does okay so I do have that configured file manager the code holic that's going to be the bucket name on which I'm giving the following permissions to this policy and I'm going to click create policy let's provide the name file manager uh the code Hol policy oops okay let's click create policy file manager the code hoic policy was created awesome now let's go in the user section and I already have this lateral file manager which I created for testing purposes I'm going to click um new Ed users and I'm going to call this file manager the code holic okay provide user access to AWS management console okay so this is optional you can turn this on if you want this user to be able to log in in this um in this interface I don't want that so I'm going to click next then permission groups add user to group okay attach policy directly so I want to directly attach the policy and the policy I have created is the code toic so file manager the code toic this is the policy I'm going to click on next then what else do we have so we're going to click this create user okay so now we have this user uh file manager the code holic and I'm going to click on this user and I want to get the security credentials for that user because that security credentials is the credentials we are going to put in our Lal application to be able to upload or download files from S3 so I'm going to click this create access scheme and where we're going to choose the use case so in our case we want application running no this is not we want third party service we can even choose this application running outside AWS okay okay right here it gives us this alternative recommended warning but I'm going to um I understand that and I'm going to just Skip and the description will be uh for okay space okay for um file manager the code holic create access key okay I have just created the access key and this is the access key and this is the secret key so I'm going to get this access key and now let's open the project let's go in the en okay here we see this AWS access key ID and I'm going to paste my access key here and we have this secret I'm going to copy that and put this right here so make sure you don't show your secret to anyone I'm going to actually delete these access key and secret key after I finish the recording so you won't be able to do anything with this um access key and uh secret key okay so we have to provide the region and the bucket name region in my case is the London so EU West 2 and the bucket is file manager the code holic so I'm going to save that that but before I start using um and modify my code to upload to S3 I'm going to test if my credentials are actually correct and if I am able to upload files to S3 so for this I'm going to use AWS CLI uh but before I go that let me open the bucket here is the file manager the code holic I'm going to click on the bucket now I'm inside the bucket and everything is empty let me zoom out slightly okay so there are no files now let me search for AWS CLI Ubuntu I'm searching this Ubuntu because we are running our application in um wsl2 with Ubuntu so we can actually uh install this inside wsl2 Ubuntu okay so let's click this Linux and let me collapse those we don't need and let's follow the steps so we're going to get this and then run install Okay so this is the the very basic thing and then it is explained right here okay so let's do let's get this and now let me open ubun 2 so here is the Ubuntu I'm going to paste this and it already started downloading let's have a look so it's take it will take some time that was downloaded and let's hit the enter okay so it tells me that there already exists this AWS rmy um and I actually already have that inst if I want to replace or whatever I want to do I'm going to click replace yes hit the enter I'm going to click yes right here and it will ask me this for all so I'm going to choose all okay now let's check AWS okay so we have this command we can provide some option test version and here we have that install so by following these instructions you will be able to install AWS CLI and now it's time to connect to uh our backet and actually um upload some file through the CLI to make sure that our credentials are working so for this I'm going to search for um AWS CLI uh upload to S3 and let's open the very first link I want to we can list buckets and objects as well we can try AWS S3 LS okay whenever we do this probably it will give us an error because we need to also configure the APA credentials the AWS uh command will use so in my case I already have that configured and I'm going to show you how you can do this in the home directory there is this AWS folder and inside there there will be the credentials file uh what's going on com found oops I need to open this so I'm going to type uh cut okay hit the enter so here are the API credentials so this is probably different from what I have generated and inserted in my project okay different from this one because this is the old one I was testing but the idea is the following so you create this aw folder inside there you create credentials and then uh using the following text you define your um access key and your secret key okay and whenever you do this let me actually take those two values and I'm going to open this using Nano okay then let's put this right here uh let's put this here and the other one we need to put right here okay so I'm going to save this and exit from here uh in order to save an exit from Nano you just need to hit control and O hit the enter Then control and X will exit from there and now if I open these credentials we will see that now we have the credentials which we have also in our application okay so now let's run AWS Comm AWS um LS for example and this will give us probably all the services but we want AWS S3 LS S3 LS okay so it looks like we don't have access okay now let's provide AWS um S3 LS in the uh packet name so file manager the code holic yeah we don't have permission because when we created the policy we provided that that policy is only for uh file manager the code holic packet okay now let's have a look there's nothing actually okay so it didn't return anything but if I go in the file manager uh in this uh S3 and if I just create one folder probably call let's call this test here we see that and now let's check if this returns anything here we see that it returned test so the connection through the API tokens actually work successfully we can even try to upload files and uploading file is very very easy let's see what files we have we have the sample TT which we can easily upload so what um we need to do is just to run probably copy Comm sample text needs to be uploaded into file manager the code holic colum I think to sample text I'm going to remember this but let's have a look now let's search for CP command source and Target so we have an example S3 bucket name this is it so the local file needs to be uploaded on S three bucket name so we will provide right here S3 in the bucket name let's hit the enter okay so we have access denied okay that probably indicates that we either have the uh error in the policy configuration or we just didn't provide the correct bucket name let's have a look if you just provide incorrect bucket name it will give you another error no such bucket I see but in this case this tells us that we don't have enough permission one calling put object operation let's hit the enter okay so we don't have the policy configured correctly so I will go in the policy section again I um like the this doesn't cover all the detailed configuration of AWS and um what is possible right here through policies and eems so I will make it simpler and I will go in the policy and I will just simply remove the service the resource if I click on this here we have this file manager the code holic file name okay let me edit this and I will simply remove the resource okay so I B I'm basically giving the all the actions on S3 not to any specific resource let's click on next it does not look like is allowing that to me but now I'm going to add S3 packet no S3 all resources here we see all the resources okay now let's click next and save changes okay I just updated the policy and the user for which we have this access key and secret ke taken is already using that policy isn't it file manager the code did we assign the policy to the user here's the policy yes yes we did okay now if I try to upload this file again that worked as you see and if I go in the S3 uh file manager the code hoic we will see sample TT right here which was uploaded through this um comment okay if I just make um an incorrect if I just open the credentials and make some changes here or here then I won't be able to do that so now we are sure that we have security credentials which connect successfully to file manager the code holic S3 packet and is able to upload files right there now it's time to modify our code so that instead of saving files on a local file system it actually uploads them on the S3 packet okay so I have deleted the folder and the file from this S3 packet and now let's Implement uploading files to S3 packet actually from our application I'm going to open the documentation and show you one thing if we go in the storage section file storage section so here you will find out that we have possibility the LEL has possibility to actually use multiple different types of storage uh providers for example we have these AWS compatible file systems um if we scroll up where's that let me actually find the proper place so we have this public uh the local driver we have the public driver and I think this is in the configuration here it is driver prerequisites okay so in order us to be able to connect to awsn upload files through the standard um laravel um approach we need to install the following package uh fly system awss 3 version 3 okay so this is what we are going to install so I'm going to copy this command and open the project let me go inside the container vendor Bean sale bash and then I'm going to execute the following common composer require whatever let's wait until this downloads and installs meanwhile let's have a look in the documentation again so here we have many different driver configuration options like FTP we can connect to FTP we can connect to SFTP and uh we can even configure the readon and scoped file systems okay but in all cases you have to separately install uh additional composer packages in order to be able to adapt this and use it like this okay so what we are going to do and you then you can um just get the disk and call put for U specific disk what you going to configure I'm going to also show you what this are already configured uh this is still is yeah this is finished it was installed let's go in the project and in the config and in where's that file system okay so the default is actually what is written inside the en file so if I open en file and search for this file system disk it tells me that the default is local if this is not available then the default will be local but in any case okay what we're going to do is the change that the default needs to be S three y S3 and not for example AWS S3 because S3 is already preconfigured dis right here look at this so it has discs and inside there we have the those configured local public and S3 and that S3 is actually using correct AWS credentials fromen file so I'm going to set this in to S3 save that and then let's have a look again AWS access uh key ID we have that configured we have this secret we have this region we have this bucket as well and there are others like AWS URL and endpoint which in our case don't need okay okay perfect so now we have configured our Lal application so and we also change the default disk into S3 because we changed this uh right here so whenever now we call the default methods on the um file storage the storage facade it's going actually use the default dis which will be as three in our case okay now let me tell you the whole idea what I'm going to do uploading of files on in our application will consist into two steps first obviously the files needs to be uploaded into uh the Local web server where Lal application will be running and then those files needs to be uploaded into awss 3 as well by the way just to give you a little bit more information there are there is possibility to directly upload files from your browser to AWS but in this case you need different approach you need to generate preshared uh private key and not the key but the preshared private URL that URL will contain a secret token inside there and then through that URL the JavaScript AWS JavaScript SDK will be able to upload files directly to S3 that's that is a like a very big change in our application so I don't want to go with that approach at at least right now and in this case we are going to Simply upload the files to our web server just like we were doing this earlier but I will create a background job which will take those files and upload them into S3 okay and I will also need a flag on the database level if I check the database and the files inside the files for each file I want to add that flag which will Mark if that specific file is already uploaded on S3 um or not uploaded on yeah Cloud I will call this a more generic name not upload on S3 but uploaded on Cloud for example because you can configure the FTP or Dropbox if you want and just try to upload files through on Dropbox or FTP whatever okay now I'm going to create the migration PHP artisan make uh migration let's give it Name ID um uploaded on cloud column to files table okay let's open and on the table I'm going to call Boolean uploaded on cloud this will have default to be one let's mark every existing file let's say that all of them are already uploaded on actually default should be let me think let me think yeah default can be whatever because in any case we're going to set this manual so I'm going to leave this default to be one then after I'm going to want to I'm going to add this after for example size so let's provide size here and then let's Implement down as well that will be drop column upload it on cloud just like this now let's apply PHP Artisan migrate hit the enter okay the column was added we can open the database uh after size we see uploaded on cloud every file was marked as one which means that they it seems like they are already uploaded but now I'm going to create a background job okay and I also want to change the uploading process um slightly um okay let me do like this I'm going to uh open file controller um I'm going to find the method called save file not save file tree but save file and right here when we call store this uploads the file into default disk okay in our case we can provide the second argument which will Define uh the another disk if we if we don't want the default dis to be used for uploading this file in our case Now the default dis is is S3 okay whenever the file is uploaded I don't want it to be immediately uploaded in S3 because this will take this might take um several seconds mean it's depending on the file size uploading file on this three so what I want is that upload this file locally so I will provide the disk to be local because we already have this local configured so I'm still uploading this on local and then uh let me also Mark this uploaded on S um uploaded on cloud this is what we called to be zero okay and then right here here I want to start the background start background job for file upload okay and then I will start the background job which will upload this file to S3 okay why I am doing this again if the file is too large uploading that file to S3 will take several seconds several minutes depending on the file size and we don't want user to just sit and wait until the file is uploaded on S 3 to start interacting with the file or with the entire File Manager application okay so I'm quickly uploading the file on local file system telling the user that hey your file has been uploaded and you can start interact interaction with that user but that file will be marked uploading on cloud false and why do I need this whenever user wants to download that file I know that this file does not yet exist on S3 so if you want to download it I need to run a different logic okay but if the file is upload on S3 and user wants to download or for example user wants to download it as a zip I will download that file from S3 into local disk create the zip and then download that zip to the user okay so this is the approach I am going to do and now let me create this um job file so I'm going to call this let's open PHP artisan make job let's call this upload file to Cloud job upload file to Cloud job okay so that was created successfully let's go into upload file to Cloud job and and what I'm going to do is that let's let me actually already use that uh right here upload a file to Cloud job I'm going to call dispatch on that and pass the argument in our case the argument will be model okay so I want to uh accept this model inside the Constructor so I will create this public property um or it should be actually protected let me actually create protected uh we can do something like this protected file let's import this needs to be model okay now we have this file available here and inside the handle which is the main method we need to run the following logic okay so um let me think okay I'm going to create a model variable this file then I'm going to check if the model is not uploaded in S3 on upload on cloud if not then we run the logic if it is already uploaded on cloud there's nothing we need to do for that specific file okay but let me actually get the local path so I need the local path that will be a storage disk local and we provide path here that will be a model storage path okay so every model has a storage path even though if that file might not be uploaded on S3 on cloud it will still have this storage path so I will get this model storage path here I'm going to call UPS the right side so I get the local path okay um also I'm going to write logs just to make sure that my script is working so I will use um where is log facade and let's write some debugs for example um uploading file on S3 and and let's provide local paths so this is the file I'm uploading on S3 and then inside the TR catch um I'm going to actually do the upload inside TR catch because uh there might be cases when uh connection doesn't work or something is broken and I don't want this error uh to be unhandled so that's why I'm properly handling this storage put whenever you call put put on storage uh you know that it's going to use the default dis the default dis is S3 so I just need to provide the path in my case that's going to be model uh storage path but I need to provide also the local uh file path okay so I will use storage uh dis uh local and then I'm going to call get so I'm actually getting the entire file through this storage disk local and then um I'm going to upload it to a three storage path okay so here is one restriction which I came across from this AWS um PHP SDK if the file is large when you call get on that it starts to stream this file okay and while streaming there is um the incompatibility problem in this uh SDK and it doesn't work on the latest PHP versions like in my case it is 8. 8.2 okay we're going to probably see this error if we try to upload large file but let's follow this okay storage put I want to put the file on the following location in the S3 then I get the file from local perfect uh let's let's assign it into a success variable and if it is uploaded let's write log debug um uploaded uh updating the database and on model I will set uploaded on cloud to be one and I will call model save if it is not successfully run then I will write uh error unable to upload files to S3 okay and in the catch uh instead of throw I'm going to do log error exception get message okay those log files can be seen in the storage logs L log which I want to make it empty save that and now I think we have everything to test this so so I'm going to open my application and upload one file I will upload small file in this case let's go in the pictures and I'm going to just choose one picture click open the file has been uploaded okay perfect in the logs look at this uploading file on S3 we see the file path and uploaded updating the database okay there's nothing to check in the database actually if that works then we go right here and refresh it and we see files inside there we see the user ID inside there we see the actual file okay that is so awesome in the database if we check the very first file created um created at descending this is the very first one um which has uploaded on S3 one by default this is one by the way um but yeah we see that file is actually right here okay okay so this is perfect now let me show you the error I was talking about if I try to upload large file I will go in the videos and choose this one for example I think it's large enough here we see the error okay de clearing of AWS hashing stream seek must be compatible with PSR whatever whatever okay this comes from the following problem that this is the interface which was mod which was moved to the latest PHP standards and it is using the typed typed properties right here int offset and int W but the actual AWS hashing stream implementation this one uh still is using the old approach offset and w and not sure when will they fix this uh I want to show this on gab as well I spend quite a lot of time on this problem um LEL uh give me a second AWS SDK PHP uh Gab and the file must be somewhere here here it is Hing stream let's have a look hold on okay and this method has seek right here okay and that seek doesn't have types right here I know it's not a b big deal um we can even Fork this particular repository and make it compatible uh and just uh modify a few things and then install this repository from our version this is all possible but this is probably a topic of different video um so far the small files are being successfully uploaded to S3 and the larger files uh are not working as smooth or are not completely actually working um the link which I found um is this one and they are talking about this problem all the time and recently like 5 days ago uh they have the following fix now sure if this works I was facing the same issue although all my computer Pages were up to date uh okay what HTTP message version do we have installed maybe if we downgrade our HTTP version that's going to start working if we go in the composer Json uh we don't have prob HT Mage here inside composer lock HTTP message we have 2 point zero HTP message installed okay if I go in the composer Json and install this PSR HTTP message uh to be something above 1.0 okay not 2.0 and then execute composer install compo or composer update it should be composer update or I can execute composer require require PSR HTTP message above 1.0 okay it is downgrading to 1.1 from 2.0 okay it has been downgraded successfully now if I open application maybe that stream interface was changed before I execute this I want to check it PSR HD message vendor that's it and it has the sck method no it's still has the following it it still has the types does it still have this okay I'm going to delete this HD message completely from the vendor and then I'm going to execute this once again HTTP message Source stream interface right now it's still has this one point uh sorry uh the in and type so the types are still there so it probably will not work we can try upload files by the way this still is installation process okay good let's choose Now video that already exists well the point is that that was actually uploaded to the local file system and in fact we see this file right here and we can even download this file um no we cannot we cannot because we have not modified download if we modify the download properly this file is saved on a local file system and it can be downloaded from local file system which we're going to do right now but let me try to upload another file meanwhile it is thinking was it is there something failed which is in pending for quite some time let's open storage so those are the okay did it work I think it worked but okay um let's check here we see this MP4 okay so it looks like it worked now let's try larger file this one while this is an uploading process let me check what's the status of that file in the database uploaded on cloud is zero so probably something is working behind because this is in uploading and now that was uploaded and if I just reload I see one right here okay so it seems like downgrading this HTP message into 1 point something fixes the problem I'm going to try this once again for a larger file but now the problem is that the file upload is not actually um a synchronous okay so when we call this attach or uh dispatch excuse me so that should be a synchronous that should be in the background right now the request is pending and it doesn't finish user doesn't see a success message uh but the file is in uploading process it looks like if I check this right here we see two large files the other one which was which was already uploaded here it is that was actually also uploaded okay now we're going to make this a dispatch to run in the background and then we are good to go first let's open this upload file to cloud and we have this dispatchable interacts with Q Cable in serializes modules okay this looks like we have correctly configured okay so if we have a look in the en file uh right here we have this Q connection okay by default this um job is connected to to the que and then it is simply running from the que the que connection is set into sync if we want this to be run in the background then we have to change this because the sync actually means that this script needs to be finished in order the response to be sent to the browser okay so we need to change this into something like database okay this will indicate that a lot of application needs to use database for the Q management but to be able to use that we need to uh create the proper database table as well so we're going to execute the commment called PHP Artisan Q table hit the enter migration created successfully and we can check in the database migrations here we see this cre create jobs table okay and then we need to execute this PHP Artisan U migrate and if we just now refresh it we see jobs table right here okay now the table exists we set this into database and it should run this in the background okay now let's try I'm going to open my application upload large file 120 megabyte uh click open we see now immediate success notification which is exactly what we want and it seems like for me as an end user everything worked it's there it's perfect it's working but if we check in the database in the files we see that it has uploaded on cloud to be zero and in fact the background process needs to be working here we see that okay so here is the payload of that and the default whatever so whenever this is finished then we will see this uploaded on cloud I'm going to just pause the recording and just keep refreshing right here until this turns into one and then we will see that file on the S3 packet as well actually this will not be processed by itself if we don't EX cute Q listen so something was added in the queue but nothing is at the moment looking at the queue PHP Artisan uh Q colum listen okay if we hit on this it starts listening and it's now just found that one job uploaded file to cloud and it is running now this is running we see attempts is one reserved at which means that this is already allocated and another cu should not take um that record for processing and it is in the running process if we check in the LEL we see also uh uploading right here uploading file on S3 okay and it will take a few minutes I'm going to pause the recording um okay and here we see it did not work at actually it timed out um after 60 seconds because it it has its own time out so I'm going to open the documentation from the Lal q and we can uh increase the timeout here is um everything what you can found regarding cues and I want to specify the timeout we can configure the number of tries and where's the time out we try until okay here's the timeout we can provide this timeout when we run Q listen but I want to provide the it into a single job probably that should be configured on a q level okay so when we run this Q listen if you provide timeout to be the Q work basically is an alternative command for Q listen but the difference is that Q work does not look for the file changes and if something is changed you need to stop this Q work and then restart it okay so Q uh listen is better in our case um the time oute is actually let's set it into 120 seconds okay so the previous one was failed now it has okay this is gone it didn't change it is gone okay uh we should probably set also tries the number of times the job have been attempted let's set into um I don't want to actually implement the Q tce okay let's provide it to try three times okay and now let's upload let me delete this file first now let's upload the same file let's wait the file okay it has been uploaded now the job was created and it is running here we see that the latest one this was deleted but it is moved into trash instead okay so let's wait um few seconds now as you can see it was completed and uploading cloud is still zero if we check jobs we don't see anything there okay what's going on if we check on the S3 we see this file right here which was uploaded just a one minute ago however why is this marked a zero we need to check our lock okay updating the database column updated by cannot be null now let's try to find out where this problem is coming from we are obviously calling save on the model level um right here and this is triggering the updating event so if we just open file.php this has has Creator and updator trait and if we check right here we are listening to the updating and we're setting the updated buy to be out ID and in this case when the file is saved from the queue the out ID doesn't exist so in our case maybe we need to completely disable all kind of events even don't update the probably dates or um create by and update by so we can easily do this if we just call Save quietly okay so I'm going to save that now let's open the browser come here and upload any file basically any file no matter the size of the file will work so I'm going to click open we can check the script is running we can check the database as well the script was done and we see uploaded on cloud was set to one to the latest one so that was successfully uploaded and also the database was updated successfully so we did it we made it uh we can check in the L logs we see uploading file on on S3 here's the file and uploaded okay now let's try download on the files how download works I'm going to click on download and as you see we have this access denied problem because the URL right now is coming from um it's coming from Amazon so we need to do it um something differently and also if I'm trying to download multiple files H click on download it should generate a zip and download the Z but I can't obviously generate Z on the server itself so I have to download the files those selected files locally create a zip then create a URL which will be from the local disk public disk and just return that URL okay so let's open file controller because we have to work there here's the file controller let's open download here we go and now what do we do so if all is selected uh then we create the zip and return that URL otherwise we call get download URL okay what does this return get download URL for if all is selected we do this for all but if some of them is selected we just pass the IDS and again right here if we selected more than if the count ID is equals uh one if there's only one to download if this is folder we are again creating zip and right here in the else case we are also creating zip okay so the only place where we don't create zip is this place okay so we copy from Storage path into destination and destination is public okay however this is not going to work in our case so we have to download this from S3 cloud and then put this in the local disk and then we can return the um local URL okay so let's do like this this is the destination and uh we can actually remove this public I think we're going to test this and then on storage I'm going to call uh first get to get the current uh file storage path content so I'm getting the content and then I'm going to call disk on the storage because I want put this on uh on public and then I can call put I will put um on the destination the following content okay so this will save the file locally in the public directory so uh we can already check that public um maybe files we're going to see that we are going to see that the public is actually a symbolic link but we can check under storage app public okay right here we will be able to see that uh we were are right here so we put this on the public and then we're going to return the public link so again I'm going to call uh disk right here and then a URL disk but dis should be public okay so I save this and let's try to download single file and if we have some URL we will be able to see that okay we obviously have some error what's the error we don't see the error right here let me open developer tools go to network click on download what's going on uh it doesn't trigger it doesn't say anything here we go download it is probably downloading the file locally here we go here we go perfect so it actually downloaded the file put that on the public storage probably and fed than the download process I'm going to save this under downloads I'm going to click on that and the video okay and video actually opens Perfect by the way these are the video tutorials which I created for my LEL react fullstack application project you can check this on my YouTube channel okay so let's have a look here we see this video that was downloaded it has a random name so it doesn't conflict to any other video that was downloaded uh and whenever we have that downloaded uh after some time probably like after 1 hour we should probably clean up those uh public files because that will collect and finally just run out our space or even maybe five minutes so we have this this is a download link okay so under public and we can actually delete the download leags after some time but now let's try to download zip let me close everything else and probably leave only file controller like this okay so single file download Works let's go under zip and what do we do here so so here we create the zip in the public folder and if the directory doesn't exist we create that um here is the zip creation process then we open and then we call add files to zip and we provide the files so this is the interesting at this stage the files are located on AWS here for example if this is a folder we're going to call this recursively but if this is a file here we see that uh the file path is will be taken from the awss 3 because this storage path um actually indicates uh the default disk so probably what we want to do here is download that file locally first and then provide the path right here but let me try let me try to download zip I'm curious what will happen in such case let's open developer tools click on download and here we see the error unable to write file at location public zip error executing put object on AWS exactly okay so whenever we create the zip it happens right here make directory even make directory calls on the default dis so I need to call Disk first to be public and then call make directory this is the first thing and not sure if we really need this public because we everything everything is done inside the public disk so let's leave it like this then we try to get the path but we want to get the path from the disk uh public disk we want to get the path okay then we open the zip and it files to the zip okay let's see so far how this will work click on download it file no such file or directory okay so we call something on it file but that file doesn't exist and this is coming from here exactly so we can die and dump dump and die click on download and this is this is the file path which doesn't exist but the file path actually is coming from AWS so what we need to do is to download this locally let me search for download get download URL and right here we made this modification like this these two lines probably no these three lines let's take it is exactly what we want now let's go back into Ed file I'm going to paste this right here we have this uh path so we get the local destination we get the content and put this locally on the destination and then on the storage path we can actually put destination let me actually print what is uh destination as well and let's open the public area as well save it click on download and wait it is probably downloading right now those two files one is 120 megabytes okay it's going to take some time it is probably downloading now those two files and then it will dump the destination right here for the first file because yeah it's can do the for for the first file okay so the request was paining for quite some time probably something was not working so I just refreshed the page the pending request was stuck for some time so I had to reload the entire page and I'm going to try first on smaller size files and I'm going to choose two files right here okay one of them already exists let's choose something else here we go so we have two files and let's make sure those two files are uploaded on AWS S3 if we check the database we see the latest two files roughly same size has uploaded on cloud one however uh we should also consider the case when the file is not yet uploaded on cloud maybe due to um the reason that the user uploaded too many files and they will be put in the queue and if the then the user is trying to download the latest one um which is not yet uploaded on S3 we need to download this from local uh local file system okay so right here we need to also have a look at the path so let's do like this local path equals uh storage path file storage path okay like this however now let's check if the file uploaded on cloud equals 1 if this is uploaded in Cloud then we need to get the destination then we need to download the file and then I'm going to put the file locally so this is the just the file name and then I will put this under destination in the public that's good and finally I'm going to return the local path equals storage dis public path provide the destination okay and finally I will pass local path right here now let's have a look now both of the files the latest files I just uploaded are uploaded on S3 if I select them so this will satisfy and it should download local path and put them locally and we will be able to see them right here we can clean up the existing local files we don't need them click on download let's wait uh okay so so they have been downloaded and zip was generated but the zip URL was returned from the S3 which is not obviously correct so what we should do is go back go back when we call create zip we have multiple places for that actually this is the URL and we immediately return URL okay let's go in the create zip and instead of calling storage URL we need to do storage disk local and then URL okay let's try this once again let's go back we have those two file selected let me actually refresh it and click on download okay now zip download has just started if we save this and open it we see two files in Insight that is awesome so we have implemented this now I want to try I want to try case when the file is first on a local disk and try to download like this so I'm going to open this Q listen and just kill the queue okay so it will the files will not be uploaded on S3 so let's reload the database let's try to upload two new files let's choose those two files okay they have been uploaded if we just check the database we see uploaded uh on cloud is false for both of them and if I click on download here on the first individual file we have this problem okay the file doesn't exist on the remote that's why we have this problem so we need to open download as well and get download URL and this is the changes uh what we made in this area so we probably need to indirectly return actually I'm going to quickly undo just to avoid any kind of buck so I'm going to save everything and hit the control and Z for a very long time uh here it is undoing the change oops too much okay so this is how we head it earlier right from file storage path we were putting this on the destination and then we were returning this okay perfect so I'm going to actually copy this code and then redo everything again what I have done for a to files it files to zip and so on read do until the very end now let's search for get download URL find that place and I'm going to write an if statement if file uploaded on cloud if this is uploaded on cloud we need to download it okay else we just copy from the existing path into public okay and finally we have this URL and file name in both cases uploaded on cloud okay this is integer so we don't need actually to write equals one but this is also fine so I'm going to save this now and I know that this file is not uploaded on cloud so I'm going to click on download here and it is still returning the S3 URL why first of all let's check yeah right here because we need to provide the dis needs to be public and then URL so let's save it go back click on download I think it didn't send uh we're going to refresh the page click on download okay and it actually downloaded the file so this is the case hold on hold on there's no file failed the no file okay that's not good storage copy aha because we are using storage right here we need to again provide that we want to copy from um we want to work with a local dis more specifically not local but public and before the file goes into public I think the file is inside the files right so we actually want to move from local this is the local dis from local into public okay this is what I want so we have the file storage path so I want to actually let's do like this storage disk public H uh the path will be destination and the content will be storage disk local get and the path storage path I think that's that's good so we are actually getting the storage path from local and putting that into public this is extra let's let's check this and finally we're going to return the public URL on the destination URL now let's see once again reload the page select the file click on download a trigger download click on Save and the file seems like the file exists and here is my file and by the way this is my laral ecommerce course which you can find on my website the code holly.com 140 videos 23 Plus hours okay awesome so this is how we download single file let me try a second file trigger download click open it opens successfully and now let's check how it works on zip case okay we have this problem no suchar fileer directory 314 this is the line 314 let's go to 314 line local path okay so it looks like the local path does not exist so in our case the file is not uploaded on cloud the last two files so what we are getting is the path from local path okay so let's print the local path click on download okay okay so this is the local path but I think we need absolute path we need absolute path why isn't that absolute path okay give me a second I'm going to try another file which is uploaded on S3 okay now this is this is the local path which uh which was downloaded which was downloaded from S3 this one but in our case h i see because we again need to call local or disk local here okay the default is is always S three right now and if we want to interact with another dis we have to explicitly provide on which dis we want to interact so in our case I'm going to select those two files which are on locally but not awss 3 first and click on download uh and yeah the URL looks correct let's remove this dump and die and click on download again and now the zip is downloaded okay awesome and there are two files I think both of them if they have size probably they they are working and now I'm going to try those four files two of them are on S three two of them are not on S three okay so now when the uh script comes right here for those files which exist on this three will run the following code and download locally but the other ones um simply will be um will be used from uh as from the local path I was thinking right now that uh we need to write the script to clean up those public files as soon as possible actually actually and why do I have two times public here not sure we can figure this out um click on download four files okay all of them we downloaded we can open the zip and we see four files right there okay so this is so awesome now if I execute Q again those two jobs will be handled in the database we can see that uploaded on cloud was set to one and if we just try to download on the same four files but two of them now uh are also on S three we can see that they are working as well okay awesome I'm going to do now one final test I'm going to clean up everything from public and I'm going to run um few tests first let's download those four files actually I don't need to download I will see zip and four files here and now I'm going to download a single file which is nowhere here okay let's try to download this once again save okay it exists we don't see this on public okay uh one last thing I'm going to just kill the queue and upload one additional file this one which will be saved under files for now and then I'm going to try to download this from files it was moved this is the case it was moved into Public public so we're going to search for uh public slash here we see that um if the fil is uploaded on cloud this is the get download URL okay if the fil is uploaded on cloud we do this let's actually remove public from here and now the destination is the same so we can move this up remove from here so we get the file name we either download it from S3 or download it from locally by the way these code is very very similar so as you can see in any case finally we have these two things in common as well so the only difference is that in one case let's actually put this right here in one case um we download file from the default disk in second case we download files from local disk and in both cases we put this in the um in the public you know what we can even get this code but this down below and here we can type content uh content and then content here equals this I'm just trying to speed up the process and that's why I'm making mistakes typ holes and here we will have content equals that perfect so now this is the only difference uh for whether the file is uploaded on cloud or not we have very similar logic in both cases and I'm pretty sure we can do the same thing in create zip or it files to zip right here yeah we can leave this as it is right now that's fine now it's time to deploy our application on production ready environment with custom domain for this I'm going to use hostinger shared hosting Services I have been using hostinger services for quite some time and I genuinely think that they have the best shared hosting Services out there however if you are going to build a website and with which should serve thousands of users simultaneously if you're doing something extraordinary and large don't use shared Housing Services shared hosting services are ideal for small to medium type of projects okay so I'm going to talk more about hostinger Services because this video is not sponsored by hostinger I'm I mentioned this because I use it every day uh for my websites and I'm going to show you how you can set up your account right there and deploy this project on a custom domain with hosting or shared hosting Services okay so we need to go to the um actually let's scroll down below right here they have plans you need to choose the the one you want the um the most popular one has everything what you need basically so I'm going to click this add to cart then you will go to the um checkout page right here you just need to choose um for the period you want to purchase the domain and hosting of course if you CH if you choose the 48 months you're going to have huge saving and down below you will see that you will pay um $191 for two uh for um four years shared hosting plus one your domain okay so the most common one probably is to just take it for 12 months because the domain basically comes with 12 months as well so if we scroll down below we see that the price is $59 for the entire year for the hosting as well as for the domain and it also includes the free SSL certificates unlimited number of databases it also uh includes the free email and there are a few others okay so if you decide to just take the hosting or shared hosting services and go with that then you can use the coupon code right here the code holic and this will give you additional 10% discount on the price right here however if you want to choose a different hosting provider no problem about that we are going to clone the project using SSH and make sure your hosting provider has access um on SSH terminal so that you can log in and clone the project and run composer commands and so one okay so this is what you need to be able in order to follow this tutorial and be able to set the project on your custom domain okay so if you decide to go with the hostinger this is all what you need to do you choose the period you choose the plan you provide the coupon code the code colag and click submit secure payments whenever you do this your uh you will have to just provide the credit card information obviously and click submit secure payments but you also need to sign up with your email address or through Facebook or Google and if you don't have an account you obviously need to create an account first once you do all these steps you will be redirected to hostinger age panel okay so I have obviously already have an account and I have I used hosting or service uh Services quite like multiple times in the past and I have been using this since now and this is my hosting rage panel okay so right here I have my hosting my personal website is hosted on the hostinger I have been using the pH following emails as well my blog is hosted on hostinger as well so and right here you will have this uh premium web hosting as well as domain okay so in this case I have this very old domain which I was going to set up earlier but I just didn't finish that so I can um just finish the setup of this domain you will have extra um like fresh brand new domain right here and you will click set up okay then you will have to choose the domain I have already made this decision and this is uh the domain I have chosen and by the way I have chosen this domain to just create a tutorial how to deploy larl on Virtual private server not on shared hosting now this video is already available on my YouTube channel you can check that if you want to see how you can deploy this particular project on laravel VPS not L uh on um sorry on VPS servers not on shared hosting okay you can check this um on my YouTube channel um okay this is the domain you can choose whatever you want make sure this is available then you will have to choose the region um where you want um your hosting basically to be and right here you have to provide your um profile and your just details address and email and phone all that is necessary for domain registration and then you will click Phenix registration okay this will generally take few seconds few minutes depending on many things let's wait until this is done okay this is finished I'm going to click continue here okay and here I have this larel on VPS domain again this domain can be anything just make sure that this is available okay I'm going to copy the domain and open in a new tab okay I'm going to close the other tabs and right here you see that the domain is working you will see the hostinger default page which indicates that you have successfully set up your domain also make sure that uh we need to um set up the SSL as well right now you see that the domain has not secure we don't have SSL set up so let's go under domain right now we have set up only domain not hosting if you have purchased the premium shared hosting the way I showed to you you will have the possibility to set up everything the domain and hosting together in my case I'm going to set up hosting separately okay so your approach will be pretty straightforward you just need to follow the instructions so I'm going to click these premium web hosting setup okay so right here I'm going to skip this I'm going to skip this again and now I have to choose the website for which I'm going to set up the uh domain I can use an existing domain or choose the one which I have right here I can also buy a new domain I'm going to choose this Lal on VPS and click on select this is the place I have to choose the region I want my server to be located uh The Logical will be to choose the uh region which will be closer to the audience for which you are creating the website okay so if I'm creating my website for USA Market I'm going to choose the north americ car region uh if I create something for friends um I'm going to choose friends or you get the idea okay so I'm going to leave this into North America and I'm going to click change so I have the domain um for which I'm setting up my shared hosting and I have the location I'm going to click finish setup this will take few minutes let's wait until this is completed okay this is completed and I'm going to click on on the control panel manage site I can click this view website which will basically open this and this is already working I'm going to click this manage site this will open my uh premium web hosting control panel so I have the domain the website name this is Lal on VPS and I have a lot of configuration options right here okay so we have the hosting section we have performance security email domains my favorite one is actually advance so if you go in the advance we see multiple things right here and um I'm going to go into PHP info actually and this will give you the current PHP version and everything what is configured in this uh shared hosting we have S access which I'm going to um just get back really soon and we have this PHP configuration as well from which we can change the PHP versions and enable disable PHP extensions and configure some PHP options this is a actually pretty uh awesome I'm going to go under domain and actually I'm going to search for SSL so I'm looking for security and SSL and I'm going to check if SSL certificate is properly installed right now you you see I got the notification SSL is installed okay so whenever you set up your web hosting SSL needs some time to be set up okay right now we see that domain lalon VPS the domain I have chosen has the status active for SSL so if I open my domain and refresh in the browser actually I'm going to open this in Incognito because browser actually caches the SSL status okay so error certificate transparency required okay let's have a look I think I know the reason I think I know the reason this is the issue on my personal computer uh for some reason I don't know why when I restart my computer it actually changes the date into uh UTC time so this is the UTC time and I'm actually in toi time zone so the my time the real time is 11 uh 8 p.m. but this shows 78 p.m. and due to the time mismatch this SSL certificate doesn't actually work okay so what I'm going to do is just it's weird that I'm going to installing um I'm installing the SSL and I have to change the time again this will not be an issue on your case because you will probably have correct time I just don't have it so now my time is correct if I just reload the page again let me actually close this and reopen it okay let's wait for a few minutes I believe this will be set up if not we will get back to this uh here we go here we go okay so it started working we are in incognit mode we see that the connection is secure okay so the certificate is valid so let start it working okay and it's it's not going to work probably in the standard browser because the browser has it cached but if you check in in cognito it's working okay so now we are already ready to clone our project and set it up but before I do this I'm going to go into advanced and PHP configuration and I'm going to change this into PHP h u 8.2 this is what I want I'm going to click update confirm uh if we go in the PHP extensions uh if you are using like um image manipulation or anything which is not ticked you can easily take that if you are using like mcrypt or ldap or anything uh you can easily activate that um I'm going to leave everything what is left by default okay so we see that Max file uploads is 20 uh we have increased this for local uh development and I'm going to increase this right here as well into 500 now we need a post Max size this is set to this is like 100 gab uh sorry um the 1 gab 1.5 gbyte okay I'm going to leave this as it is it's pretty large large enough uh where's the postm size that was actually post Max size and this is the upload upload Max file size this is also fine I can however I can just type it something manual like 4 gabes uh but no it has some predefined options and I can choose only what is pretty find which is fine so the size is pretty large okay so I have the PHP config configured properly um if you want to check the file manager you can check that right here again I'm going to go into advanced and I'm going to click on SSH access okay so first of all I'm going to enable SSH access click on this right here then I'm going to change the password and make sure you set something very secure or you can also generate uh public private keys on your operating system and add that public private key right here and then Au authenticate through the public private Keys okay how to generate public private Keys that's pretty straightforward you can just um search in the internet for that uh in this case I'm going to use just password way approach however again I should mention this that if you are doing something for production uh the approach for uh public private Keys is much more secure and recommended way to go with you know what let me open uh my Ubuntu on Windows this is my Ubuntu and I'm going to open my SSH ID RSA dop so this is my public key okay I'm going to just take my public key I'm going to copy that click add public key and paste this right here okay so this is public key so I okay if you see that that will be um Laptop Windows something like like this Windows WSL Ubuntu I'm just giving it a proper name to describe add SSH key again I'm going to search uh for you generate uh SSH key the very first link probably will be what you want you just need to follow the instructions you you're going to call this SSH key again provide the um algorithm for which you want to generate this is the old algorithm which I still use it Legacy system um okay so using this approach you will be able to generate it and then you can get that um like like I got it okay now I have added my public key so I'm going to copy the following comment I have also enabled SSH status so I copied the following command which includes right there let me paste paste it here uh copy paste okay so this is the port this is the username this is the IP if I hit the enter uh then I have to just take the fingerprint I'm going to type yes here and look at this so I was able to log in in my um in my hosting premium shared hosting server so right now I am in my home folder and here if I type ls La I will see that I have this public HTML this public HTML is the folder which contains the main file which displays the following domain okay so if I go inside this public HTML which by the way is a symbolic link on domains lalon vps.com public HTML okay so this is just a symol link if I navigate inside this public HTML and then just type PWD this will show me that I'm inside public HTML and if I type ls laa I have this default PHP and that default PHP is what you see right here you can access the same file from the file manager if we just click on the file manager um let's wait for a few seconds here we see we see this public HTML if I double click on that I'm inside and I will see this default PHP which I can edit or delete or do whatever I want okay so in this case I'm just going to close it because I'm used to working with terminal and I want you guys if you don't have experience with the terminal to get familiar with that as well so again I have this default PHP which I'm going to delete so I'm going to call RM default PHP because I deleted that now if I the page I'm not going to see this default page in sayate I forbidden because there's no file which needs to be returned and again now we have this um secure connection connection is secure perfect actually I don't need anything inside the public HTML so I'm going to go back and now I'm inside my home directory and I'm going to go inside domains okay and inside domains we have the only domain we have assigned to our premium shared hosting so I'm going to navigate in inside my domain lalon vps.com and here I have this public HTML this public HTML however is empty because it had this default PHP inside there and we deleted that so what I'm going to do is even delete this public HTML so I'm going to execute rmrf uh why I'm executing with RF because I want to delete the uh folder okay so rmrf public HTML and now I don't have anything inside laravel on VPS now it's time to clone my project okay so if you uh if you just have been following the tutorial and if you have just create the project now it's time to push your project on uh GitHub or somewhere like bit packet or gitlab make sure it is pushed in the Version Control System um remotely okay okay so I'm going to go into repositories and just get the where is L file manager okay the codic file manager this is how I called it okay probably it is private so I'm going to Now log in okay so I have logged in my account and I see that the repository is actually private okay so you can make the repository private and just uh click this local and then you need to clone it okay so uh if you want to clone through SSH then you need to generate public private keys on the server as well just like I showed to you how you can generate it um on your local but just to make it easy I'm going to just clone it uh through https so I'm going to click um copy right here here and then I'm going to execute git clone and then just type the URL however I want to clone it inside the current directory okay if I don't specify anything after the URL it will clone inside the following folder but I want it to be cloned inside the current directory so I'm going to provide dot right here so just clone it inside the current directory if I hit the enter Because the repository is private it will ask me to enter my username name and my password okay you can provide this however I still I am still going to make my repository public so instead of providing email and password I will just go and make the repository public danger zone change visibility change to public make this repository public okay now this is public so I'm going to execute kit clone again it doesn't ask me username and password instead the project was cloned and if I type ls laa I will see all the files and folders that are in the repository okay now the first thing after we clone the project is to run composer install Okay however if I just type composer d d version we see that the composer default version is 1 point something okay this is we are going to change uh LEL tan actually needs the composer version too so I'm going to just type in the Google composer version two download composer latest so we are going to copy the following command okay and I'm going to clear up everything and just paste okay hold on so I will get the following code and paste it here it is downloading the composer then I'm going to hit the enter and finally what I have here is the composer far that was downloaded okay and to execute this composer far which is basically a composer we're going to do like com uh PHP composer excuse me PHP composer far D version now this gives me composer version two so what I need to do is just execute PHP composer far install we're going to wait it will download all the packages and just install that and after that we need to create file okay so here inside the project we have example so I'm going to copy example into and since I copy I'm going to open this using Vim vm. hit the enter here I inside the Vim I just need to type I on the keyboard to go in insert mode I so then we can give the project name like let's put this in the double quotes laravel storage or we call it actually Lara storage okay the environment I'm going to set this into production APA key is something that needs to be automatically generated so I'm going to leave this empty debug I'm going to disable make sure you disable it when you go in the production up URL will be htps in the domain we have decided to take LEL on VPS vps.com okay so then I'm going to scroll down below we have this MySQL connection host we have not created the mySQL database so I'm going to leave everything opened and go in the browser then I'm going to go in the um H panel and I'm going to search for database right here and as we see here we have this management section and we are about to create new database so let's call this Lara uh storage and let's choose the username to be L Storage as well for the password I just want to generate some random password so this this will be okay I'm going to copy the password and click on create so I have password already copied I'm going to open my terminal and go in the password section and paste my password here then I'm going to copy the user and paste right here and I'm going to copy the database and paste right here okay so then if we go in the broadcast driver we don't need anything I'm going to go in the Q connection and I'm going to change this into database because we have changed this into database if I scroll down below I'm going to leave everything as it is right now however for mailer we don't need this local mail pit okay we need a valid SMTP credentials for email sending okay however I'm going to go to I'm not going to go too deep and show you how you can set up your sntp uh for production because that's absolutely different story what I'm going to do is just to use fake email SMTP credentials okay so I will open mail trap which I generally use for um email sending so I will quickly log in with my Google account okay here I inside um this is my actual inbox so I will go inside the Inbox and I will get the following uh credentials so actually I want Lal 7 plus something so I'm going to uh copy that and where is this mailer actually actually let me paste this here here we see everything and it ended with encryption so basically I need to delete these lines because I have now correct credentials so I can easily delete that by just hitting the Escape right now I'm in in the insert mode so I hit the Escape make sure the insert mode is gone then I hit the D on my keyboard two times D okay d two times and I delete it all then I hit I again to go in the insert mode if I want to change something okay this is the email from address we can leave this right now because we have actual fake SMTP credentials right there but we need to provide correct AWS access key ID and secret key ID so I will open my phor I will open my enan and I'm going to copy this a access key ID and secret key ID actually let me copy just values paste value paste okay let's choose the region which will be EU West 2 and the backet will be file manager the codeo so I'm going to paste the backet right here okay so everything else can be left so I'm going to hit escape on my keyboard again make sure the insert text is gone then call on W to write everything and Q to quit from this B so I have configured my Ian properly and now we're going to execute migrations PHP Artisan migrate okay as you see everything was applied and we see head storage path to files table create start f it uploaded okay okay what probably I have not pushed is the latest migration let's go in the database migrations create jobs table okay this is something I have not pushed so that's good so I will push this right now I have actually edit the migration and pushed on the GitHub and now I'm going to pull the changes and this way you can also see how you can update your project whenever you make some changes in your repository okay so right here I'm inside the repository so I'm going to execute kit pull this will pull the latest versions here I see create jobs table and I will execute migrate again PHP Artisan migrate and here we see that create jobs table has been applied okay so this is awesome one last thing what we need to do uh before I do this let's check in the browser we should not see anything so if I check this it's it shows not found which is understandable uh the hostinger basically is looking for public HTML folder inside this domain name and then inside this public HTML there should be index PHP or default PHP okay so in our case laral doesn't have public HTML but it has public folder there okay so what I'm going to do is create a symbolic link of public folder into public HTML so I'm I'm going to execute Ln d s to create D uppercases to create simol link public into public HTML I'm not sure if I'm doing this correctly actually it should be vice versa so I want to create symbolic link which I'm going to call public HTML and that should reference to public folder I'm going to okay it should be lower cases probably let's type ls LA and hold on it didn't create symbolic link so okay I think I did it incorrectly here we see that so we should basically execute ln s so I want to create um from public into public HTML symbolic link but we we just need a lowercase s lowercase s so that created public HTML uh symbolic link which references to public and now if I navigate in to public HTML it's navigatable and inside there we have this um index um index PHP U not sure why this what is this but I think we can completely remove that public HTML from inside the public HTML can be removed hit the enter we don't need that the main thing is that we have now index PHP inside public HTML and this is exactly what the server needs so if I reload the page I I see this 500 error which indicates that the laral started working but we have actually the laral error okay we don't see these Trace because we just disabled the debug mode if I go back and just open the and then hit the I to go in the insert mode then I I go up and in the debug I will enable that then Escape colon W let's reload uh okay this is something what I have missed now colon and Q to quit from here PHP Artisan key colon generate di okay we didn't have that key set in the so we need to generate the key Now application key was set successfully and if I reload the page uh I see a different error okay so this is something else which uh we need to do so it is looking for this build manifest okay and this happens generally because we don't have assets compiled and assets are not available on the server so there are two approaches to do that one is to run mpm run Dev uh not Dev excuse me mpm run build on the server but we cannot do this because as far as I know shared hosting doesn't provide mpm in nodejs okay so what I will do is just execute I have this mpm run Dev running so let's close this and I'm going to execute mpm run build okay so this will build those pages and create JavaScript and CSS files and those are the build files a public build assets okay and if I just open public build assets so this is the build files however in the G ignore we have them ignored in the G ignore uh public Bui okay so this is ignored okay I'm going to remove this from get ignore so this is the the case I want to remove it from G ignore because I want this build directory to be committed and pushed okay so here I am commenting the get ignore change this line has been deleted and all those build files as well okay add build files let's comment that and push everything now let's go in my terminal and want to execute G pull this will pull all these build files and now let's check in the browser reload the page and we see our application is up and running we have SSL certificate as well which is awesome now let's click log in actually we don't have an account to log in so I'm going to click on register and now I'm going to provide my name I'm just going to provide dami email and just click on register okay let's wait now the email was sent however because we don't have an actual SMTP configured we and also we indicated fake email address so here we will have that email a few seconds ago verify email address as you see I'm going to click verify email address right here and now I am inside the application okay this is getting awesome so we are inside the application and now we can start testing test let's actually open developer Tools in case there's some kind of error click on submit the folder was created okay double click we are inside there the routing works fine if I reload the page I am inside there now the main thing is that we need to upload the files and that needs to go into um S3 AWS S3 however we don't have that Q command running okay so this is something we need to configure as well so I found the following link which I'm going to share right now how to keep laral Q system running on the server okay so here are different approaches one approach is to install some supervisor but we cannot install anything here because this is shared hosting we don't have sud sudo to install anything but if no hop is available okay missing operant this looks like no h is the command is available and this is what we are going to execute so I'm going to just copy that and just paste this NOA phpr design before I execute this I'm going to type PS D um X and then type and GP Artisan for example I'm just checking if there is any Artisan Commander running okay ps a x this will just list the commments and then we are grapping the Artis okay there are no commands running so I am going to execute the following command and hit the enter ignoring input and appending output to no hop okay so this was started and this should be its process ID and now I'm going to execute this ps ax script Artisan again and we see that there is background common PHP Artisan qyw work time running okay perfect now I'm going to check the database as well so here we have this PHP my admin this is my database I'm going to click to enter in PHP my admin it's going to take few minutes and I'm interested in the files table let's click on the files and we see one which is the root and second which is the folder okay now let's go in the project we actually have verified so if I just reload I am inside the system uh I can close this and now I'm going to upload a file let's upload not so small and not so large file so I will upload this let's go actually in the videos and I will upload this 18 megabyte video so I'm going to click open it is uploading on the server we see success notifications and right now if I just reload this I see record right here and let's scroll on the right and we see uploaded on cloud is actually one so this means that it has already been uploaded to Cloud which is actually really awesome and we can check this in lot of logs as well so we are logging so tailf I'm going to go into storage then double tab and we see logs double tab ll. log okay and let's have a look uploading file on S3 uploaded updating the database so that happened successfully now I'm going to hit enter multiple times just to create an empty area and I'm going to upload another file right here in this case I'm going to make it larger like 51 megabyte I'm going to click open this is uploading first it is uploading on the server okay on our hosting server and that's going to take some time I'm going to actually pause the recording here I'm going to unpause the recording and bring up the terminal as well let's wait we see the Suess notification and look at this so we got these two comments uploading file on this three uploaded updating the database uh it's actually strange how does it manage to upload files on this so fast I am not actually sure maybe it is not actually uploading on S3 but instead giving us the message that it uploaded I think I am right because we have not changed one thing in we have not changed file system dis and it is actually uploading this on a local that's the problem so we're going to change this into S3 hold on so equal S3 then Escape column and W and Q we quit from here okay that was changed this is this is awesome uh I'm going to open this L log again and in this case I'm going to upload smaller file let's choose an image open that that was uploaded here we see that uploaded final three updating the database but I'm going to actually check check if that is uploaded on S3 uh actually the best check will be if I just choose again a slightly larger file like uh like this one which has 10 megabyte okay I'm going to open this okay so we should see that uploading file on is three then we should not see uh this uploaded for some time for a few seconds and then we should see it okay so it actually will be approv that the file is in uploading process let's wait okay we see this uh very fast so in the same second so what I think is that probably the changes which I made in the enan is not affected by the commment so I'm going to execute this ps ax grip artisan and I see this process ID here so I'm going to copy the process ID and execute K9 and the process ID and hit the enter okay so this will kill the process process and now if I execute P ps ax we don't see this Artisan command running okay and I'm going to execute now this command Artisan command again okay and this is the now the process ID and we will see that the command is actually running and I'm going to open now logs again tailf and now I'm going to upload one file again again and hopefully this time it will work as expected uh 7 mgab video Perfect okay that was uploaded let's wait here we see uploading file three then we had two second pose and then uploaded in updating the database okay this is exactly what I was expecting let me actually choose slightly larger file like 34 mgab and I'm going to also check the S3 here we see okay here we see the error which actually uh which actually um was a problem for me uh and I think the reason is that I have not also pushed that composer Json updated version if I check the composer Json I don't see this PSR message right here so this is something I need to push again okay so here is the updated composer Json and here we have that um PSR HTTP message right there so I'm going to comment that change PSR HTTP message package version I'm going to push that then open my server and I'm going to run P okay now my script because of the exception which happened inside the script this qor has been failed and it has been just quit so if I just type ps A we don't see that running so we're going to start that diamond again and now we will see that running here we go and now I'm going to open that lar a log again and I'm going to upload file testing is the key whenever you deploy the application you definitely need to test it very carefully okay so while this is in the process uh or is it proceeding fast let wait actually we will see the output and the dates as well so it's not going to be a problem so I'm going to go into AWS console I just want to make sure that the file is uploaded let's check in the my bed again so I'm just trying to speed up but I'm making mistakes so we pulled but we haven't run composer install we are going to run composer install by executing PHP composer far because this is the composer version two so composer install okay required package is in the lock file as 2.0 but that doesn't satisfy your constraint understood so we probably need to push composer lock as well I have pushed the composer lock and I need to execute git pull first now this will pull the composer lock and I'm going to execute now PHP composer for install and it is downgrading this PSR HTTP message this is exactly what I wanted to happen now if I execute ps there's no Artisan command running so I'm going to execute that Artisan command awesome then I will open uh Lara log again and I will upload the file uh let's choose smaller one like 19 megabyte click open and we should see right here logs however I'm going to check the file was actually already uploaded and there was a 3 second difference and I'm going to check now in the S3 if uploading on S3 Works successfully so file manager the code ho go inside files we have um today is July 14 so this is the user and we see two files right there okay 19 megab and 7 megabyte okay I'm going to upload one more but let's choose smaller one that has been uploaded refresh now we see three files Okay so uploading on S3 Works successfully and we have that background process running which um basically will check if there is any new file that's going to take that file and upload it on S3 so that's the end of this deployment phase we have deployed our project on custom domain on shared hosting on which we have actually a lot of flexibilities we have FTP access we have SSL certificates we have unlimited number of databases we have email client as well and we have much more additional security as well we have possibility to manage Crown jobs as well for example you can create a crown job which will clean up all the downloaded files which have been downloaded for um Z purposes actually we haven't tested if download works fine so I'm going to just click on this download jpg and let's wait here it started download click on Save uh as you see it has been failed and it has no file right there okay so it looks like download is not working it is trying to download that click on Save but there's no file so it wasn't able to download download it again let's try to download file which we know for sure is on S3 and again let's upload a new file I'm going to go in directory one we have three files let's upload one file that was uploaded here we see four files select this one and click on download then click on Save and we see this no file if I click on that nothing happens to find out what was the actual problem I started debugging it I did couple of logs right here log debug getting the file content from the file path and here I'm just printing the whether the content exists or not so I'm just taking one or zero as an in value of the content if the content doesn't exist that's going to print a zero if it exists it's going to print one okay so then I'm inserting the content into a public dis so I'm just writing that insert it in public disk here is the destination where I inserted and here is the success status whether this is zero or one again if this is one it means that it successfully inserted the file into public disk okay and then finally I'm printing the loging URL which should be returned to the back end so I have made those changes and then I log in in my SSH uh and I just made a pull git pull origin uh main or master and then I open the log files and now I'm going to actually try to download and have a look at the locks so I have already tried this but I'm going to try this once again so I just select the file click on download and we can have a look right here so getting file content and this is the actual file path inserted in public disk and we see that this is the um destination for the public disk and then success returns one so it successfully inserted into public disk what's the problem so Ling URL so this is the URL which does not exist for some reason and having a look at this URL now I know what is the problem okay so the problem is that storage does does not exist in the public folder so this obviously corresponds to public folder and storage doesn't exist there so I think I have not created a storage link ls LA Public let's check it there is no storage mentioning in the public folder so I'm going to execute PHP Artisan storage link let's hit the enter link has been connected so now see that Public Storage link has been connected to app um storage app public and if I execute right now ls LA Public I see storage right here okay and now if I execute uh let me try this and if I execute download now and click on Save I see that it has content failed no file we don't see something similar here if I click on this it's going to open and here is my logo I can download this second image as well let's click on that it opens on my second screen here it is and we can even download both files as a zip download and showing folder and we can click on that and we see two files right there and all of them have some size which obviously means that they are valid files okay just like this so uh this is a very small lesson how you can start debugging your problem okay so we needed to understand what was the actual problem why the no file content was displayed whether the file was not actually uploaded on AW ss3 or the file was not successfully downloaded so we started writing logs and more logs you write more information you're getting where the problem might be and finally having a look at the logs we just understood what was the problem right here all right my friends that's it for this video and I hope you learned something out of it if so please hit the like button and check my YouTube channel the code toic as well thanks again and I will see you in the next time