in this course you will learn how to build crossplatform desktop applications in Python that can run on Windows Mac and Linux this course will teach you the fundamentals of working with QT to build GUI applications using pi side 6. Daniel gakuaya developed this course Daniela is an experienced software engineer and he's the creator of our most viewed course of the last year hello guys and welcome to this new course on Pi side sex in this course I will show you how to use Python and Pi side 6 to World great graphical user interfaces that run on desktop that's Windows Mac and Linux and you will be writing your code once and all you have to do is to run your python application on a different operating system and that's going to run seamlessly so that's the point of the course here building crossplatform graphical user interfaces applications using QT under the pi side sex umbrella Pi side 6 is really a technology that allows you to mix up Python and QT to take advantage of the foundation that QT provides and I may hear some of you asking what is QT well QT is a crossplatform framework to build a graphical user interface applications but it is originally written in the C plus plus and the pi side 6 is a project that aims to give us the ability to to take advantage of what QT provides using the Python programming language and this is really cool if you are a python developer you can take advantage of what QT offers without needing to learn C plus plus and that's a huge Advantage you might want to take advantage of in your career as a python developer so this course aims at giving you the ability to build applications like notepad here you see it is a graphical user interface it has a bunch of menus and toolbars we have a status bar here we can type text here this is one of the applications we will get a chance to build and this is going to give you a foundation to really build any kind of application you might want in your career as a python developer another great aspect of this course is that we try to take advantage of every opportunity to teach you how to use the documentation so if you want to search for something for example Pi site 6 and Q widget okay you can come to your favorite search engine and search here you will have the information on this component and you can learn about it we will be doing this a lot in the course and I hope this is going to give you the ability to even learn more on your own because I can't really show you everything in a course like this but this is going to give you a great Foundation to build your own work on top of the requirements for the course are not really that bad all you need is a basic python understanding if you can work with variables functions if you can work with basic object oriented programming if you know things like classes inheritance you will have a good time with the course the most important thing is really the strong drive and willingness to learn so if you have a roadblock for example if there is something you don't understand you should have the drive to actually try and go in a search engine put that in a search bar and really try to understand what is going on once you understand that you can come back to the course but you are not on your own we have a community on Discord you can join to be together with other people that are going through the course if you post a question there I will try and help the best I can and if you go through this course you will have a strong Foundation to build graphical user interfaces using pi side 6. this is going to give you the ability to build graphical user interfaces for your existing python projects so if you are an existing python developer this is going to be a great asset for your career another thing is that the knowledge you get in this course is transferable so if you learn to build the graphical user interfaces using buy side sex the knowledge you gain is going to also be useful if you later choose to use another toolkit for example there is another project which is called the pi cutie which also allows you to build the QT applications using python so if you go through the course here you will have the ability to take advantage of that framework pretty fast because the API is the same but the ideas on graphical user interfaces aren't really tied to a single graphical user interface toolkit so once you've learned the foundations you can use other toolkits fairly easily okay so now that you know a bit about the course let's talk about myself here my name is Daniel acquire I am a software engineer I have been using QT for a lot of years and I happen to have a few courses on QT on udemy most of these courses are using C plus plus but I release the new course which is using cute for python but don't feel pressured to take that course if you want you can take it but this one on YouTube is going to give you enough to build a lot of things and once you have that knowledge you can go on and use the documentation to even learn more than I can tell you in a course like this this is really all I had to share in this lecture so let's stop here and start learning about pie side sex in the next lecture go ahead and finish up here and meet me there I would like to welcome you in this course and congratulate you on taking a step to become a better cute for python developer cute is a crossplatform application development framework you can use it to write applications for Windows Mac Linux Android iOS and even embedded devices the way QT works you write your code once and recompile it for your Target platform so for example if you write your application on Windows if you wanted to generate a Linux binary what you need to do is to recompile your code on a Linux machine and that's going to give you a binary that can run on Linux you can repeat the process on the Mac and that's going to drastically reduce your development time because you basically write your code once and run it or recompile it for whatever Target where you want to run your application now python is one of the official languages we can use to develop cute applications the main language for QT is currently C plus plus but python is quickly catching up under the umbrella of QT for python or Pi side 6 as it is currently known again going through python you can write applications that are crossplatforms that run on Windows Linux and Mac but currently support for mobile and embedded is in development I wouldn't really use this in production but there should be good progress in this area in the future now if you talk about Pi side sex some people are going to mention Pi QT what about by QT piquity is another Library which is available to let you write QT applications using the Python programming language and it can mostly do the same things we can do with pi side 6 but Pi side 6 has probably a better future because it is under the official QT project so you can expect support for things like Android and iOS to go faster than Pi QT another thing is that to use piquity in a commercial application and you need to buy a separate license for pi QT and you also need to buy another license for QT so if you really want to drive your cost down it is beneficial to use Pi side because you will be buying the license once which is going to include the QT and Pi side sex so that's something for you to consider but I'm going to leave the decision to you whether you use Pi QT and Pi side this course is not going to cover up iqt but the good news is that once you have Pi side 6 mastered it is going to be very fast to pick up Pi QT because the apis are mostly similar what's going to change is what you import in your python files and you will be basically able to do the same thing so whether you use 5qt or Pi side 6 that's going to be your choice but we will be focusing on Pi side 6 and the API should help you to pick up iqt if you happen to need that now let's head over to the QT page on Wikipedia and see some information about QT it is a crossplatform application development framework you can use to write applications for Android iOS Linux you can see a lot of things here you can write applications for using QT it was developed by these two guys Harvard and Eric and it is currently developed by the QT Company the company owning licenses of QT it is written in C plus plus and what I want you to see is a bunch of applications that are written in QT to kind of give you an idea of what you can do if you learn a QT properly if you go down here you see Autodesk Maya which is a popular application for building 3D stuff we can go down and find the Creator here which is a design software you can use to do painting and drawing things like that you can say Mathematica if you are a scientist you must know this you can see OBS here which is what I am using to record this video you can see Cube bit torrent you can use to download torrents and things it's like that there are really powerful applications that are written in QT you can see VLC media player you can see WPS office which is really cool if you wanted to do some office stuff and if you go down you will find a bunch of organizations that are using QT and there are some big names in here you can see AMD you can see blizzard you can see DreamWorks you can see Panasonic Phillips you can see CMS and Samsung you can see Tesla there's a lot of big companies using QT and this should give you an idea of how powerful QT really is and you can be in the same league as these companies and these pieces of software if you learn to develop applications with QT properly and this course is a perfect starting point if you want to use Python to develop cute widgets applications okay one thing I want you to know is that there are two apis when it comes to developing QT applications there is the cute widgets API AI which provides components you can use to build graphical user interfaces for desktop this is mainly targeted for desktop platforms mainly Windows Linux and Mac but there is a new API which is called qml which also includes new devices like mobile devices and embedded devices and you can use this to build Dynamic and fluid graphical user interfaces that look modern and really feel like they are from our time here but make no mistake qml applications can also run on desktop so you will need to do some research to decide whether you want to use cute Widgets or qml but if you exclusively want to Target a desktop I would still recommend using cute widgets because it is a mature API it is tested it has been in use since the 1990s and it is really powerful so use that if you don't care about mobile or embedded if you want to Target mobile and embedded please use qml in it is best suited for that and one thing I want to point out is that this course is about cute widgets if you are interested in qml please check out other courses we have on qml because this course is not talking about qml I wanted that to be super clear now if you decide to use QT to build your applications regardless of whether you are using widgets for Q amount you will be writing your logic in some programming language and the two official languages that are supported by the QT company or the cute projects in general is python which we will be covering in this course year and C plus plus but this course as I said is about using python to develop cute widgets applications so this is going to be our Focus here using python to write cute widgets application that can run on Windows Mac and Linux another thing I would like you to know is that cute is not just about graphical user interfaces many people can mistake it for that cute can can be used for much more if you happen to be using QT already for a graphical user interface you still have a window to take advantage of even more things from the QT framework you can do networking you can do threading you can write database applications you can use tons of other utility classes that are provided by QT so if you are already using QT take some time to see some other things you can take advantage of in this course I will touch on some networking and show you how you can do some basic HTTP stuff but that's not enough to really call yourself a network developer using QT if you want to really go deep you will need to do more research but this course should give you a good foundation on which to build even more cool stuff now this course is going to be a perfect starting point for you if you want to build graphical user interfaces in Python using pi side 6 obviously but I think it is even going to give you a good foundation even if you plan to use them out if you are new to the QT ecosystem I usually recommend shredding by cute widgets which is what we cover in this course and from there you will grasp the fundamentals of how to use QT to write crossplatform applications and that's going to really be easy for you to do that because you will be writing your applications on desktop you will be able to generate applications that run on the same machine where you are sitting once you have the fundamentals you can Venture into qml and the same fundamentals you get from cute widgets are going to apply more or less in qml qml is a declarative language and that makes it easy to pick up by designers but this course is about cute widgets using Python and it is going to give you the fundamentals that are going to help you out even if later you decide to use qml that's the point I am trying to make here now I will be preparing this course on a Windows machine but that's not going to be a problem because Python and high side 6 run where both on Windows Linux and Mac so you can watch what I do on Windows and try to adapt that to your operating system and that's going to work really well don't worry about that this course is going to work for you whether you are on Windows Linux or Mac the requirements for this course are not really that hard all I require is a basic understanding of Python and the basic understanding of objectoriented programming in Python if you can use things like classes objects inheritance and polymorphism you will probably be fine with the course using python here the most important thing in my opinion is the strong drive and willingness to learn which is going to go a long way if you come along problems you won't give up easily you will keep trying until you get to the thing running here but I will do my best to explain everything I use in the course if you need a refresher on python please note this course is going to assume you already know python so make sure you learn python first before you take all discourse now this is all I had to cover in this video here I hope you found it interesting and you are encouraged and excited to learn about Pi side six we are going to head over in the next lecture and show you some of the cool applications you get to build as you go through the course here go ahead and finish up here and meet me there in this lecture we're going to see how you can get the most out of the course here and there is really no magic build you can take to get to the knowledge from the course Detroit and true way is to follow along watch the videos try to practice the things I do in the course try to modify the code and make it yours and that's really how you are going to get the mask out of the course here another thing I would recommend is to use the QT examples so if you go to the browser for example and search for QT examples I think they have a lot of examples you can browse to this link they will show you tons and tons of examples and this is a way you can get full running applications you can try out most of these are going to be for C plus plus but once you have the fundamentals in this course you will have the necessary Basics to try and understand what is going on here if you go down you see examples for acute widgets for example if we open the text editor example here all the model view example people you will see that you can build something like this and this is something we even built in our course here but that's going to be in Python you can learn about the model view architecture you can really do all kinds of prison things through these examples here so if you have an idea come to the QT examples see if there is something similar try to build on top of that this is the best way I can recommend to even learn QT by yourself without even needing a course like this but if you are a beginner the documentation like this can be hard to understand you still need the basics this course is going to give you the basics to allow you to take advantage of this but start trying to browse through these examples now see what you can pick up or even identify the things you need to focus on in the course here once you have the knowledge you can come back and use it another thing I recommend is to use the source code that is going to be provided in the course here the link is going to be shared at each lecture so if you want you can go to the lecture download the source code and use that however you want another thing I would recommend is asking questions if you get stuck the course platform will provide a mechanism to ask questions so you can ask a question I will try to respond as best as I can so take advantage of that if you get stuck we also have a bunch of groups on Facebook and Discord you can join and help each other out that's a really good way to learn and to find people who are going through the same thing take advantage of all these channels to make the most out of the course here I want you to be successful in using pi site 6 to build crossplatform desktop applications now that you know this it is time we headed over to the next lecture and started setting up the environment for building Pi side 6 applications in no time go ahead and finish up here and meet me there in this video we are going to set up the environment that is going to allow us to build cute for python applications or Pi side 6 applications and the tools we install should work on Windows Mac and Linux because that's the essence of QT QT is a crossplatform framework that allows us to write applications once and be able to build them on different platforms and in this course we are interested in building for Windows Mac and Linux so here are the tools we are going to need we will need an installation of python once we have python we will install Pi side 6 and we will need an editor through which we will be typing python or Pi side 6 code later in the course we will need QT designer but I am going to show you how to install it later at that time for now we will get into the process of installing python Pi side 6 and the editor that we are are going to be using in this course here another thing I should say is that you don't have to use Visual Studio code it happens to be an editor that I prefer because it's free it's crossplatform it looks and feels the same whether you are on Windows Mac and Linux and I expect a lot of students to be watching this course on a different operating systems so visual studio code is a good choice here okay so let's start with python here if you go to your search engine and type python install we will go to the python.org website and you will find binaries you can download for whatever operating system you are on so if you hit download here you will download it and install it like you install any other application and when you are done installing python you should be able to go to your terminal whatever terminal you have installed and say Python and if you see a message like this it means that python is installed on your system now we have python installed let's set out of this accept okay we are done here now that we have python installed okay now that we have python installed we need to install Pi side six and to do that it's really simple all you have to do is to open your terminal here and use the PIP package manager for python we will be using version three here so let's say pip 3 install Pi side six type this on your terminal if you hit enter the tool is going to go to work and it is going to download and install Pi type 6 on your system and at this point we will have python at Pi side 6 installed on our system the next thing we want to do is to install an editor and as I said we will be using visual studio code in this course here so let's go back to our search engine and say Visual Studio code download this should spit out a link to the website or Visual Studio code and you can download and install for for your operating system I am on windows at this moment so I can download and install it on Windows but you can do the same whether you are on Linux or on a Mac once you have this installed you will need to open it up if you open it it's going to look something like this and the first thing I want you to do once you have it installed is to install a python extension that is going to make our life easier when working with python code and all you have to do is type a python in the search bar here let's make sure it is highlighted so everybody can see it so we have this guy here and I want you to choose the one that says python here and I want you to choose the one that says python here okay the one from Microsoft if you click on it it's going to say intellisense the LinkedIn debugging for whatever in a visual studio code you will click on install and wait for it to be installed and at that moment you will be ready to start using Visual Studio code to develop cute for python applications using pi site 6. okay now that we have this installed it's time to test it and see that it actually works what we are going to do is to open a folder on our system let's go somewhere on my drive here I have a folder it is an empty folder you can name it whatever you want and if you go in you're going to see that it is an empty folder what we are going to do is to drag and drop this on top of Visual Studio code and this is going to open the folder inside videos video code we are going to get a window that says do we trust this folder yes I trust this because I created it so yes trust the authors and we will have something on the left here and this is going to be where we see our files and this section here is going to be the editor in which we're going to be typing stuff so nothing special here let's go on the left and hover over these buttons here you see we see one that says new file another says new folder we want to click on the one that says new file and in this window we will type main.py for python if we do that we will create a python file here and all we need to do is to put in Python code that is going to attempt to use the pi side installation we just brought into our computer here okay so what we are going to do is to put in some code to test things out I don't really expect you to understand everything we do here all we want to do is to make sure that the environment works we will have a chance to learn about all the things we see in this piece of code and even more so let's put in an import statement and this is just going to import Q application and Q widget and these are classes we're going to be using to create our widgets application after that we can go down and say import sys and this is going to import a facility that allows us to work with command line options in Python if you know python you probably know about command line options we can go down and create a variable app and we're going to say Q application and assists args and after that we will create a window and it's going to be a q winner we will show the window and after that we will start the application by calling the exec method okay now that we have this we can try to run it but before we do please make sure you have exactly the same thing as I do here I would even recommend going to the GitHub repository for the course and copying and pasting this entire code here because at this point you may not be familiar with these things like Q application Q widget and some people are going to introduce typos and have unnecessary frustrations so I do recommend using the code AS is here so you can copy from the GitHub repository and paste in here okay once you have the code in make sure you save so you can control s on this or file and save and after this we will open a terminal window we're going to come to view and say terminal and it's going to open a terminal window inside Visual Studio code in our current folder here which is a bit convenient and we will type python main.py and if we wait we're going to see a window popup and this is confirming that our installation of both Python and Pi side 6 is working and we are ready to start learning about cute for Python and this is really cool this is really all I had to share in this lecture and again the goal was to set up a development environment we can use to do what we do in this course here we have Python 3 installed we have Pi side 6 installed and we installed the editor that we will be using throughout this course here don't worry about QT designer at this point because we're going to need it later in the course and when we get to need it we will install it and you're going to see how cool all this is we are going to stop here in this lecture and I will see you in the next one in this lecture we are going to try and understand what is actually going on here in the last lecture we blindly typed in the code to make sure the environment is working but now is the time to try and get an idea of what is going on here before we do that we are going to go to where we saved our code and we'll copy the code from the last lecture and rename this zero to understanding the code I think that's going to work better and it's zero two not zero one so my body here and I am going to drag and drop this on top of Visual Studio code to open that project if I hit on main.py here you see the exact same thing we saw in the last lecture we have syntax highlighting now and the first thing I want you to do that is going to save you a little bit of time is to come to file and the toggle or to save okay you're going to click on auto save here and now things are going to be Auto saved as you type things and you won't have to hit Ctrl s or come here to say save that's going to save you a bit of time now let's try to understand the code but before we do let's make sure it actually runs so we can come to view terminal and hit the app arrow and this is going to bring back the command we typed the last time we run a visual studio code this is really cool if you want it you could uh type this python main.py and hit enter and uh python let's type that correctly and if we run we're going to see our window popup here now the code here the first line is importing the components that we need for this code for this project we need Q application and Q widget and these are part of the cute widgets module that comes as part of the pi side installation that we did so this is really important the components we need and here you could either import CIS or not import it but I just wanted you to see that it is possible if you want to process command line arguments okay so since is a module that is responsible for processing command line arguments and once you have them they are going to be picked up by the queue application instance you have here and you will be able to process them in your QT application so that's what the system here does okay once we have our assist thing here we can create our application and an application is really like a wrapper that is going to be in globing everything you do in your QT application so it is going to be the thing responsible for running your application and waiting for things to happen as you interact with your application for example if you click on a button all those things are going to be happening under a wrapper that is this app object here this is as simply as I can explain it after we have our application we will create our widget and we name it window in our application here and by default Widgets or Windows in qt are hidden so we need to show show it and after we show it we will call the exec method on our application to start the event Loop and the event Loop already is a while loop something that keeps looping around waiting for things to happen so for example if we run our application let's bring back our terminal and we run it again so for example if we run it and it happens to be a button in our application here if you click on the button the event Loop is going to be the thing that catches that click you do on the button and it is going to respond I realize I am jumping around here trying to go as deep as I can but that's the gist of what is happening here the exact call here is going to start the event Loop so let's say that here okay and this is really all that is happening here another thing I want to say is that if you have been working with python you may have seen things like this calling the exact method with an underscore after the C and let's try to run the code with this so let's bring back our terminal and try to run again and you're going to see that it is going to work but you see a comment saying that this thing will be removed in a future versions of python and they are recommend demanding using exec instead and this is coming because of older versions of python that had problems with the exact command here in Python 3 I believe this is going to work well so the convention we will be using here is not to use the underscore we will be typing exactly like this and you will see the same things on the print function you have in Python so if you wanted to print something you can say print and it is going to print that but you can also use an underscore again this is something that comes from older versions of python but in this course we won't be using these underscores here another thing I want to point out is that you can use the documentation to learn about everything you want about Pi side 6. so for example if you want to learn about this widget thing we are using here you can go to your favorite search engine and say Pi site sets and say kill with it and this is going to pull the documentation for acute for python if you open this you will have all the information about that thing so let's see what they say here you can click on more and you can increase the size of this because I like larger text and it is the atom of the user interface it is a base widget on top of which you can build a lot of other things I do recommend reading up on this if this is your first time with QT so you can create a widget a widget can have a bunch of components you can create other widgets on top of this but we will have a chance to learn about all these things as we progress in the course but it won't hurt to take a moment and read about this and how you can use this in your python applications so this is all I had to share in this lecture trying to shade some more light on what is going on behind the scenes we are going to stop here in this lecture and the next one we will try and organize our code in separate files so that things are easier to work with I will see you in the next lecture in this lecture we are going to organize the code in classes to make things a bit easier to work with in the last lecture we did something like this even if we didn't use cumin window but the code looks strikingly similar and here we will be using everything in the global scope so we will be doing things in a single file you see we are importing this here to be able to process command line arguments we are creating a window and this is a different kind of window that can have menus toolbars and things like this and we will have a chance to learn about this later you're going to see how it looks in a minute another special thing about this kind of widget or window is that we can give it a central widget and that's what we want to do here to be able to use buttons so we have the window here we are going to give it a title using the set window title method and after that we will set up a button which is meant to leave inside this window here a button is something you can click on you can give it the text and once you have your windows set up again we have the window let's try to draw this here we have a big window inside the big window we will have a button and this button is going to have text here press me and this button is going to be within this window because of the setting we are doing here that's how these things work after we have the window we will show it and we will start our event Loop and the application is going to work now someone would argue that putting all the logic for these buttons and things in the same file is really bad and we need to organize this the first level of organization we're going to do is to extract the logic for the window in its own class and we do that using the code you see here so we will create a class in Python the class is going to be named button holder as you see right here and it's going to be inheriting from Humane window we will give it a Constructor and if you know python objectoriented programming this is not new to you so we will have a Constructor and in the Constructor we will be doing the things we were doing in our main python file you see we are setting up the window title we are setting up the button and we are telling the button to beat the central widget for this button holder class once we have this class setup we will create an object of it in our main python file again we have the application object we created a window notice what kind of window it is it is button holder and this is going to create an instance of the class that we just set up on top here once we have the window we're going to show it and kick off the event Loop and this is going to extract the logic of setting up the window and doing all kinds of crazy things in this class here someone would argue that this is still not maintainable it is bad we see the logic for the buttons and the windows in our main python file well we can do even better and create a version 3 of our application in which we are going to extract the button in a separate file so we can do something like this we can create a file and name it buttonholder.py and inside that file we will put in the code to create our buttons and windows and all kinds of crazy things now in the main file what we are going to do is to import the things we need to use we will Import Sales import application import button holder and after that we will be able to use button holder even if the details of this battle holder class are not in this file here and our main adopt py file is going to be a bit easier to look at and this is the main goal of this lecture here making it easier to organize or code in classes to make it easier to work with now that we know this we're going to head over to visual studio code and play with us a little more okay here we are in Visual Studio code and here is the code we will be using here organizing code in classes if you go in you're going to see that it is a folder with the main python file so we're going to be starting from there let's drag it and drop it on top of Visual Studio code or to open it and if you look it is the same thing we had in the last lecture let's clean all this up and we will put in the code for this lecture here we will go on top and put in version one of our code and to save on time I am just going to paste in the code here and take a moment to explain it because typing it would really waste our time I will type when I see that it is going to add value but for now we just want the code here in our editor so we are importing the things we need we need queue application Q main window and Q push button and now that you see these new classes that you don't know about it is a good time to go to the search engine and try to learn as much as you can about them so we can go to our search engineer and say Q main window okay Q main window and if we go and click here and again I do recommend reading as much as you can about this this is a main window that provides a framework for building and applications user interface and one thing that is special about this class is that it allows you to set up things like menu bars toolbars dock widgets status bars and things like this and it is a really cool thing to have in your application if you need these kinds of things so we are going to be using a basic version of this but I don't recommend reading as much as you can about this so let's come back to our editor so we have a main window object we are creating that is going to allow us to set up menu bars status bars and all kinds of crazy things we are going to give it a window title and down below we are creating a button Q push button and again this is a good time to come to your search engine and look for a q push button so let's do that okay come here you should really drill this Habit in your workflow because it's going to allow you to learn more things than I could even tell you in a course like this so the push button or command button is perhaps the most commonly used widget in any graphical user interface so you can click on it and things are going to happen and this is really how it works this is how you create it and you can connect slots to it and you can do all kinds of crazy things with this button component here for now we are just interested in making it show up in our user interface because it is easier to work with after we have the button we will tell our main window to use the button as it's Central widget once we have the window we will show it and we will kick off the event Loop by calling the exact method here this is all we are doing now that we have this remember this is going to auto save because of the setting we did here you see autosave is toggled on we can show our terminal okay and we can hit up to bring back our Command and let's make sure it is highlighted so everybody can see it this is the command we have right here python main.py if we hit enter with this this is going to show a window and if we resize just a little bad I want you to notice some of the things we did we have our window title on top here okay you can see it right here and we set it up using this line here and we have a button in the middle of the window right here this is our button and it is saying press me you can see the text here and it is the text we set up here and I really want you to make sure you understand the relationship between the code you type and the things you see when you get to run your application because this is going to give you a firm understanding of how Pi side is working to give you the user interface you are seeing here now we have the application here but some of you might argue that it is really not well organized to save the list to have the window and button logic in our main python file and we will try to improve on this what we are going to do is to comment out our version one here and I am going to put in a pair year of block comments in Python this is how you do it in Python you have three double quotes and three double quotes and in the middle you're going to put in your code and that's going to be commented down and I can copy what I want to comment down okay so let's put my code in here and leave the comment on top this is a one line comment in Python this is how you do it and we will do version two and in version two we will be creating a separate class but the class is going to still be living inside our main python file here to do things in steps we can go down and do our Imports these are the same things we have been doing for a long time we will go down and set up our class class battle holder and it is going to be inheriting the Q main window we will set up our Constructor and it is going to be calling the parent Constructor and it is going to be calling the super Constructor or the its parent Constructor now this class is going to be inheriting from Human window so it is also going to be some kind of human window in other words it is going to have access to methods we have in Q main window what that means is that we can say something like self set window title and we will be we will be stealing this method from cumin window and being able to use that in our button holder class this is classic inheritance in object oriented programming so I don't need to say much about this so let's put in our text after that we will set up our button because we have q push button imported here so let's say button equals Q push button press me and the next thing we need to do is to set up the button as our Central widget again we have access to descent Central widget method because this is a main window it is inheriting from Human window again that's what you should understand here so we're going to say self set Central widget and we will pass our Button as the central widget okay now that we have this we can go down and do the usual thing we did on top for example we can even copy from what we did before okay so we can create our application objects we're going to go all the way to the bottom we're going to create our application we want to create a main window now we are going to be creating a button holder so what we can do is go on top and say button holder so we will have our button holder here and we will take out the line to set the central widget because we are doing that in our button holder now that we have this I think we are ready to start running this thing again we have our class which is going to be wrapping around the logic to show the window and put in the fence inside the window and we are doing all this in the Constructor of our button holder class this is really cool let's bring up our terminal window and make sure we can run this and if we run this huh what is the problem here I think it is the selftent we are passing here so let's try to run again and now you see that we see the same thing we saw before but now we have extracted the logic for a button holder and setting up the window and putting things inside the window in its own class and this is really cool now again we can do better than this by moving this button holder class in its own separate class or its own separate file I should say let's do that we are going to comment out this let's put in our blog comment section and we are going to move everything we don't want in here from this section into our comment and what we will do is to create a new file let's copy the code for the button holder class here and I'm going to copy that let's go to the left and create a new file call it button holder Dot py and inside this file we are going to paste in our class again nothing special here we don't need the queue application here because your application is used in our main python file but we need the Q main window and Q push button we don't need this imported here okay now what we need to do is to just copy the part that instantiates the button holder fan okay we can do that and for this to work we need to import Q application so let's do that we can copy the line that does this here and says think we need CC I think we also need the sales imported let's do that and now we need to also import the battle holder class we are going to say from button holder import button holder and this is going to give us access to these things and you see that all the Dirty Work to set up the main window and put fence inside the window is moved in our button holder file and this is really cool this is what I wanted you to see and we will be doing things this way going forward in the course to make our organization a bit easier let's show our terminal window and run to make sure everything still works I think we still have something running here let's run let's say python Main and if we do that this is going to run and we see our thing here and our code is organized in classes and this achieves what we set out to do in this lecture here in this lecture we are going to learn about signals and slots in queued and the signals and Slots are a mechanism that QT provides to connect things in other words when something happens we want to respond in some other part of our code suppose on the left here we have a push button and we want to do something when that button is clicked the way we do that we set up a piece of code that is going to respond to the right here and when the button is clicked QT is going to emit the signal this signal is going to be picked up by whoever might be interested in this button being clicked and they are going to respond the mechanism QT provides allows us to connect signals to slots and when you have made this connection when somebody clicks on the button the method that is responsible for responding is going to respond and do whatever it is you do in the body of that method suppose we are operating a message whenever you click on the button we are going to print a message whenever you click on the button we are going to print a message and QT provides a simple syntax to allow us to do that let's look at that here I have a piece of code and what I am setting up here is a simple button you can see that right here and we want to respond when this button is clicked we say that we want to respond in this piece of syntax you see here so we say button the name of the variable we say that and then we say the signal that we want to respond to in this case the Signal's name happens to be clicked and once we do this we are going to call the connect method on this and when we say connect we are going to specify the method that is going to respond to this button being clipped Within These parenthesis here in this case it happens to be button collect if you look on top here we have this method we are defining it and in the body of this method we are just saying a message you clicked on the button so this is what we are doing here we are connecting a slot or a method that is going to respond when this button is clicked and this is what does this connection here so some of you must be asking Daniel how did you know that we have this clicked signal on our button and this is another instance of where you need to use the documentation so we are interested in the Q push button component we want to see which kind of signals this component emits let's go to our search engine pretty fast so let's close all of this here and we are going to say Q push button or QT for a python and if we do that we will have the documentation for a q push button if you click on more it is going to tell you everything about this component but what we really want is to see the signals that this component emits and if you go down in here we see synopsis functions virtual functions slots so this is a slot you can activate if you want to do something like this but we don't see any signal from this component and this is because all of these signals are coming from a parrot class of this push button component and that happens to be what you see here this little thing called the two abstract button the documentation for cute for python is not really good for example we can't scroll around to see the things that are cropped off but we are lucky in this instance we can see Q abstract button if you click on this this is going to open the documentation for Q abstract button if you click on more it's going to tell you what this does it is going to implement an abstract button and all kinds of buttons we have in qt are going to be inheriting from this button here but again what we are interested then are the signals that might be emitted by this component again we see functions if we scroll down we're going to see virtual functions if we go down we're going to see slots we can activate if we go down we're going to see signals and this is what we are interested in so the Q push button component can emit a signal to let us know that it is clicked it can emit to let us know it is pressed it is released it is toggled and we can do all kinds of crazy things we can even grab these arguments or these parameters and use them to do things in our QT for python applications so let's go back to our slides now that you know where I got to the information that we have this clicked signal so we have connected to it and then after we do this connection and start the application when we click on the button we're going to see the message from our method here and this is going to be really cool so we are just responding when we click on the button and we know the syntax we use to do that and this is really cool we can go even further and grab the parameter that is emitted by the signal for example if you go back to our documentation in the browser you're going to see that the clicked signal can emit a parameter to let us know whether the button is checked or not we're going to take advantage of this and show you how to handle parameters and signals we can go back to the slides and what we are doing here after we set up the button we're going to make it checkable and this is going to make it toggle its state whenever we click on it so if we click on it first it's going to be checked if we click on it again it's going to be unchecked and it is really going to be simulating the behaviors we have with check boxes if you click on the checkbox it's going to be checked you click on it again it's going to be unchecked and it is basically going to be titling between these two states that's what we are simulating here with our Q push button component but we are doing this because we know when it emits the clicked signal it can also give us information whether it is checked or not and we are going to be printing that state in this print statement here so we are just going to say print and we are going to print the data parameter that we get in this function here and we are just doing the usual connection we did before notice we are saying button clicked connect and we are activating the button clicked method whenever this button is clicked and that method happens to be on top here so this is something we can do we can respond when something happens and grab the data that was sent to us by the signal and use that in our method and this is really cool let's look at another example before we head over to visual studio code and play with us here we are going to use a slider so we will set up a slider component and again this is something we have in QT this is going to be something like this where you have a slider that you can slide around to increase or decrease values we are going to give it a minimum a maximum and a value and whenever we move the slider the slider is going to emit signals that its value is changing and because I checked the documentation I know that the slider has a value changed signal let's go to the documentation and really show you this you should be able to find things out on your own in the documentation let's say Q slider and if we open this up in another tab we are going to see all about this component you can read about this here but we are interested in signals that it might Emit and we don't see okay if we go down here we're going to say that this slider is going to inherit a comprehensive set of signals and among these signals we have a value changed okay if we click on this we are going to see that this signal is going to pass a value to us and we can grab this value and do things with it in our QT for python applications so this is what we are doing in the slides here we are grabbing that value okay and printing that out in our print statement here and all this is happening because of the connection we did here so whenever the value changes we want to call this method to respond to the slider moving and we will grab the current value from the slider and do things with that now that you know all this and again I realize it is a lot of information but we're going to go through the step by step in Visual Studio code and I hope you are going to understand so let's go there and play with this okay here we are in a visual studio code we have an empty folder in which we will be doing our thing let's grab and drag on top of Visual Studio code to open this and we will create our main python file main.py and this is going to give us our starting point the first thing we are going to do is to put in version one of our application here and again I am not going to type all this we are just importing the components we need we are setting up a method that is going to respond when the button is clicked we are setting up our application object the button and we are doing the most important thing here let's take out the line and do the connection ourselves so we are saying button whenever the button is clicked and you see that we don't have autocomplete here so we have to auto complete the signal and then connect that's what we do and we want to specify the thing that is going to respond when this button is clicked so that's going to be button clicked here now we have the connection made and we are just going to show the button here notice that all we have in our application here is a simple button so this is what we are going to see when we run this application here let's bring up our terminal window and we will simply run this just like we did other applications and when we do that we see a little window pop up that is saying oppressed me so this is our button inside this window here and if we click on it you see it's going to print the message and it is doing that because of the connection we did here let's close this and comment out this connection to show you that if we don't make the connection we won't see this message when we click on the button because there is no connection between this button whatsoever to this slot here or this method if I can say it like that let's run it again to see this going on we have the button and if I click on it a thousand times I'm not going to see a single message here unless I come back in my code and activate the connection and run the application again then we will see the button and if we click on it we're going to see things happening as a response to the connection that we did here this is really the syntax again how do I know we had this clicked signal I use the documentation let's go down and show you that you can also handle parameters or arguments coming in your signals let's comment this up so we have this done here and we will put in version two of our code let's go down and uncomment this let's take out my blog comment here and again notice that we have a parameter in our slot here and we don't have any mention of that parameter because the clicked signal is going to send it anyway it is our decision to decide whether we handle it or not that's what we are doing here so we have the parameter and we're going to be printing the checked State and to be able to toggle between the checked and not check the state you have to enable that on your button component and that's what we are doing here setting checkable to True once you have this you can run the application and you are going to see that as you click on the button it is going to be constantly toggling between the chat and unchecked Stage let's run this we can go to view and a terminal and run this again but before we do I think we need to kill the application that was running earlier so let's clear and bring up our application if we click press me it is going to check it is going to say checked true we click again checked false we click again checked true this is happening because a behavior that is built into this battle component is that if you click on it while you have this property set to true it is going to be constantly toggling between a checked and unchecked that's what we can do here and again the real intent in this example is to show you that you can handle parameters that come in your slots and at the syntax you use to connect doesn't really change you decide whether you handle them or not by putting the parameter here if you put the parameter in here you can handle it in your application depending on the data inside this data parameter if you decide not to handle it you can just take this out and you're going to fall back to what we had in our previous example so let's run again so we can show our terminal and kill the application that was running and I started again now if you click you're going to see that we are just going to see the message but we don't see the state because we're not handling our parameter here if we put it back in and say data okay and run again I think we can run again now we are going to see the checked State because we are handling that in our slot here I hope this makes sense and I did the best I could to put in a bunch of understandable comments so that you can really understand what is going on here let's comment this out and give you another example using a slider because that's a bit more interesting so let's put our code in the comment block here and we can go down a bit long and put in our code and again we are just going to be importing the components we need okay notice that we are importing the QT named space if I can say it like that we have our slot which is going to be handling some data but the slot is going to be responding to a slider being removed and again we talked about this in the slides we have our slider we want it to be horizontal if you want you can make it vertical but it's not going to be beautiful we have the minimum set again I know about these methods because I am familiar with QT for a lot of years but if you are just getting started your best bet is use the documentation to read about all these things for example again if you go back to slider I think we have that somewhere here you can see the methods that it has okay so we have a maximum method to get the maximum we have a method to set the maximum you can read about all these methods to see things you can do with your UI components in your QT for python applications and again after we have the slider we are connecting to the value change signal and we want our method to be activated whenever the value changes and whenever the value changes we are going to grab the current value which is sent to us as part of this signal and we will be printing that right here if this is not making too much sense maybe we can run the application so let's go to terminal and run it and this is going to give us a slider here okay and if we move it you're going to see things happening here again you see that it was starting at 25 if we move it up it's going to go to 27 28 29 it's going to go all the way to the maximum which is 100 or we can bring it all the way to the bottom which is one okay and we can move things around you can use this component in your application and it is going to work really well but again in the meat of this lecture here is to let you know how to make connections between signals and slots and I hope you know how to do this right now this is really all I had to share in this lecture I hope you found it useful we are going to stop here in this one and I will see you in the next lecture I would like to welcome you in this new chapter where we are going to be exploring cute Wizards and widgets are really the basic components you use to build your user interfaces and in QT these are going to be coming from the cute widgets module we will have a chance to look at Q push button q line edit and all these widgets you see here and they will allow you to build cool user interfaces without waiting anymore let's head over to the next lecture and get started in this lecture we are exploring the Q widget component we have in the QT framework and this is a fundamental component in builtin user interfaces in that it is going to give you a base window on top of which you can do all other things so for example if we set up a q widget component and show it we will have a pair window and on top of this window we can really build any kind of structure to have all kinds of crazy user interfaces we might wish for in our QT applications and to use this it's really simple now you have the fundamentals of how you do things in q24 Python here I am going to show you a simple example and this is a class that is going to be living in its own file the class name is Rock widget it is going to be inherited from Q widget and Q widget is really the base class that we can use in our QT applications it is going to have a Constructor and in the Constructor we're going to be doing our basic work here another thing I am going to show you in this lecture is how we can use layout to lay things out nicely this is really not the place to introduce layouts but we really need them to have the flexibility to lay things out flexibly inside our widget so that's why I am doing that here you also see that we are having a bunch of components we have a bunch of buttons we are doing connections to slots and we want to respond when these buttons are clicked and in our code we will also set up these methods that are going to respond once we have the widget we are going to display it in our main python file and here you see that we are doing the usual we are importing the file that contains our Rock widget class and we are setting up a widget which is an instance of our Rock widget component we are showing it and kicking off the event Loop to have our application show up now that you know these things we are going to head over to visual studio code and play with us step by step okay here we are in our Visual Studio code editor I have an empty folder which is going to be containing the source code for our example here let's drag it and drop it on top of Visual Studio code to open it and I can create my main python file and in here we can do the usual we can import the things we need we can also import sys set up our application object and we are going to say window equals Q widget we are going to show the window and we are going to say up exact okay to start our application here notice that we say it's the windows here and we don't have q widget imported and we can import that here Q widget it is part of the widgets module in pi side 6 and if we do this and run the application we should see a widget popup let's show our terminal so that we can run the application easily and we can go up until we find the command to run this and you see this is going to pop up our widget nothing special here what we are going to do is to move the logic to set up the widget inside a separate class and have that widget as a base on top of which we can build other things so let's do that we are going to create another file we are going to call it Rock widget and in that file we are going to import Q widget from PI side Q2 Edge yet so let's do Q widget and we'll set up our class the class is going to be named The Rock widget it is going to be inherited from Q widget and it is going to have a Constructor so let's make sure we put that in and for example we can give it a window title let's say self set window title and we are going to call this rock widget and now that we have this notice that we did just the minimum we needed to have this be a valid python class here so we can come back to main.py and import we're going to say from from Rock widget import Rock widget and we want to create a q widget component this time we will create a rock widget you can do something like this now that we have this we can run let's see if this actually works and if we run we should see the same thing we saw before but now this is not an instance of Q widget it is an instance of rock widget which itself inherits from the Q widget class now that we have this we can start doing all kinds of crazy things on top of this curated component what can we do for example we can set up a bunch of buttons let's do that we will also import Q push button okay we already know Q push button let's say button one equals Q push button and say button one you can do this if I can type what are we going to see when we run this application let's try to run it we are instantiating an object of rock widget in main.py remember and we want to see where this button is going to show up in our user interface that's a question you might have let's try to run and if we do this you see that we don't see our button but we set it up in our code the reason this is happening is that this widget doesn't know where to put the button and to put things inside our widgets or our window we need to use layout and the layout is a way let's try to draw this so that it is really easy to understand now we have our widget component and we put our button in our code here to attempt to put some kind of button in our user interface but this widget component doesn't know how to lay them out there is a way in QT you can tell a widget to lay things out either vertically okay something like this or horizontally from left to right and you do that using layout let's start with a horizontal layout to start out we have a class which is called qh box layout and it is a way we have to lay things out horizontally in our class and to do that you set up a an object of that class we are going to say layout or button layout okay we can do something like this and it is going to be a qh box layout component okay once we have the layout we can add events to this layout so let's say button layout add the widget and you see we have a bunch of methods you can add other layouts inside this layout you can add the trial to widget but in this case we are just interested in adding the widget which is going to be our button one so please make sure you really understand the flow of things here we have our parent widget and we want to put things inside this widget using this layout here once we have our widget in the layout now we can call the set layout method on the widget to let it use this layout component to lay things out inside the widget component here so we're going to say self set layout and we are going to say button layout we can do this now if we run we should see our button inside our widget and if we do this you see that we have button one here and this is really cool now that we have this infrastructure in place we can add other buttons so for example we can go down and copy this I think we can do that Ctrl alt down this is going to copy this in Visual Studio code and we can name this two button too okay and we can add a widget again Ctrl alt down this is going to copy the line and we can say button 2 here and now we can go down and try to run we should have two buttons button one and button two and you can keep going putting in as many buttons as you want another thing I want you to see is that you can lay things out even vertically so we can change this to be a vertical layout let's do that QV box layout and we can change this to be a QV box layout this is all we need to do and because this is a vertical layout now when we add these buttons here they are going to be added in vertical order let's try to run button one should be on top button two should be below let's run again and we have this here and this is really cool now you can see that we can use this widget and this is really the idea I was trying to convey here as a base on top of which we can build as a complex user interfaces and we will be doing a lot of that in the course here right now we are just laying the foundation so that you really understand what is going on under the hood now that we have these buttons we can really do all kinds of crazy things for example we can set up a bunch of slots that are going to be activated whenever we click on these buttons now you already know how to do this lens but now we are going to be putting in these methods as part of this class they are going to be methods of this class here so for example you can say def button one and when it is correct we are going to print a message saying button one clicked okay we can do something like this we can even copy this method code I think we can do that okay so let's do that and do that for button tool clicked and we are going to say button two collect and we can connect signals to these slots that we are setting up here the way you do that you come down say button one you already know this if it is clicked okay we want to connect to a signal to a slot that's going to be self button one clicked we have this for button one we can duplicate this button too so we can select the line shift alt down this is going to copy the line in Visual Studio code that's why I love Visual Studio code and we can put the code here to duplicate it and we are going to say button 2 click now we have the connection from this buttons to the slots we have down here if you click on button one you should see this message if you click on button two you should see this message let's view terminal and we are going to try and run again but we have the previous application instance running so we can kill it and run again and if it runs Watch What Happens below here okay so let's click on button one button one clicked what is going on here ah the problem is that we are setting these methods up as methods of the class but we're not telling these methods that they belong to this class here you do that by passing in the self argument sorry for that so let's do self and I think at this moment this should work let's clear and run again and if we click on button one it's going to say button one clicked if we click on button two it is going to say button to clicked if you wanted you could change this to be laid out horizontally by using q h box layout that is going to lay out thanks horizontally if you run again they are going to be laid out horizontally if you click button one clicked if you click button to clicked this is really all I wanted you to see in this lecture again if you don't know what qh box layout and the QV box layout to do I invite you to use the documentation let's do that QV box layout and you are going to have a lot of information about these things you can really read this if this is your first time you are going to pick up a lot of information and this is going to be very helpful in your career as a QT for a python developer we are going to stop here in this lecture and I will see you in the next one in this lecture we are going to explore the Q main window class this is a class that allows us to work with things like menus toolbars status bars actions and it is really cool what this is going to give us is a window like this but a window that has little parts or components that we can customize for example in many applications at least graphical user interface applications we have something like a toolbar or a menu bar on top and below that we might have a toolbar that contains things we can click on to make things happen after that we are going to have something like a main or a central widget and in that widget we are going to put in the main component of our application if it is an editor or a text processing application users will be able to type things in this component and things like that we might even have a storage bar or something we can use to show some messages or whatever you can design your applications reusing this components that are built into the Q main window class that you can instantiate in your QT applications so this is what we are going to do here we will create a class that is going to be building on top of Q main window and on top of that we will be doing our own things and you're going to see that we will have the ability to add menu bars toolbars status bars and that's going to be really cool once we have this class inherited we can add menus like we see here so we can call the menu bar function on Humane window and this is going to give us a menu bar object that we can manipulate once we have it we can add other menus for example you see here we are adding a file menu and the add menu method is going to give us a menu object that we can use to manipulate our menu here for example we can add actions to our menu and we are doing that right here and this is going to give us an action we can manipulate later here in our QT applications I realize this is a bit convoluted but actions are a thing that you can use to manipulate a user doing something in your application suppose we have a quick action like this and we want the user to be able to trigger this either from the menu bar or the toolbar so the user could go in a file menu and select quit or they can go on the toolbar directly and click quit the way QT does this it adds in an intermediary step through which you can go to trigger this action and this is what this action is an action is an object that you can either add to the toolbar or the menu bar and when the user tries to quit either through the menu or the toolbar all these things are going to go through the same action and you can connect this action to a method that is going to do things in your QT application and you don't have to duplicate your code either in the menu bar or in the toolbar I am going to show you this when we hit Visual Studio code if it is not making sense yet but this is a really good design when it comes to the QT framework so we have the action here and this is the action that we will be connecting slots to for example you can see whenever this action is triggered this is a signal that is emitted by Q action you can go in the documentation to take to check this out when this actually is triggered we will call a method called quit and this is going to quit our application as you are about to see again the meat of this here is to show you how you can manipulate menus in your QT applications once you have the menu bars you can add menus to that menu bar and once you add the menu you will have a menu object you can add actions to we are repeating the same process here we are adding an edit menu and in this edit menu we will add actions to copy cut paste and do and do and we will be seeing these things in our user interface and if we really want it we could grab these actions and connect slots to them to do things in our application and I think we will even do an application like this later in the chapter here so stay tuned for that down here you see that we have a bunch of other menus we have Windows settings help we can do this next another thing we can do is also manipulate the toolbar and you do that by setting up a toolbar object like you do here once you have the toolbar you're going to add that to the main window using this method here and you can add actions to the toolbar you see we are adding an action we are adding an action and before we add the action we're going to create it so this is how you create your action you can put in a bunch of things and you can connect slots to the action this is really what we are doing here another thing I want you to see is that you can even pass an icon when you create the action and this icon is going to show up wherever ever you add that action in your user interface and this is really cool down here we are adding a separator in our toolbar and we are even adding a push button in our toolbar you can do that if you want it is possible let's see how you can also use storage bars to use this notice bar you set the status bar on your main window using the setting we have here and we are creating a status bar object in place and passing that in down below you see that we are doing a button that is going to be showing up as our Central widget and once we showed this we are going to see the entire application here and this is really cool down here we have our methods that are going to respond whether we click on buttons or things in the toolbar all the menu bars and you see the method here you also see the method to quit and once you have distance your application is going to work now that you have this we can head over to visual studio code and play with us step by step okay here we are in our Visual Studio code editor we have an empty folder that we are going to be using to do whatever we do in this lecture here let's drag and drop this on top of Visual Studio code and we will create our main.py file on top of this we will also create a main window file let's do that and this is going to be where we create our main window class the first thing we want to do is to make sure we have the correct Imports so we are including queue application and Q main window we will need to pass an application object to this window to be able to quit you're going to see how we wire these things up but for now just put Q application here let's go down and set up our class it is going to be nothing really special the class is going to be called main window it's going to be inheriting from Q main window let's make sure you can see that it is going to be inheriting from cumin window here we are doing our Constructor then and we have a member which is called app which is going to be the application instance that created this main window here and we will be using this application member to quit the application again you will see how we use these things in a minute now we have a main window object I think we can go in the main py file and try to use this so let's go down and put that in here it is not going to be anything special we have q application imported we are importing main window from our main window file the class we just set up here and we are creating the window which is main window we are showing it and we are kicking off the event Loop nothing special here so let's show the terminal window to be able to run this and we are going to say Python main.py and if we do this we will see a window popup here but you may think this is a normal widget to Daniel why all the fuss around two main window let me show you we are going to go back to main window here and we are going to put in a piece of code like this okay so this is going to be setting up our menu bar so we will call the menu bar method on our main window object and it is going to give us a menu bar that we can use to add menus to our main window object here and again how do I know this the documentation let's go back to our browser and we can say Q main window here Q main window and if we look here we can see a method called menu bar you can see that right here and they are going to say whatever this method does it is going to return the menu bar for the main window this function creates and returns an empty menu bar if the menu bar does not exist so we are going to create it and we can go through these menu bars to add menus to our main window this is really cool right so we are calling add menu to our menu bar object again we can go to the documentation and see what we get from this guy this is going to return the Q menu bar okay and uh this is why I don't like the documentation for cute for python there should be a link for a q mini bar you can click on to go there but we have to go back and search here so let's do Q menu bar and we can open this in our browser once you see this you're going to see that we can do a lot of things and one of these is add a menu and this is what we are using in our application here to add a menu called the file on our menu here let's run and see our menu live let's clear properly and run python main.py if we do that look at what we have here we have a menu we can click on it to do things but it doesn't have anything inside yet but we're going to fix this in a minute let's close the application first but what we can say for example is file menu okay file menu add action and we are going to say something like quit if we do this and run and come back to our window here if we click on file you see we have a credit we can add menu options in our menus and this is really cool okay another thing we can do is actually grab this action and use it to respond whenever the user triggers this action for example you can say quit action okay we can name this quit action and we can connect to it and make a slot respond whenever this action here is triggered and this is really cool so let's go down and Define a quit method so let's go down here and say def quit app for example and it's a method so we need to pass a self here and down below we are going to say app quit and can we quit we're going to say quet autocomplete is not helping here but I think this is going to work so let's go with this and once we have the action we can connect this slot to it so we can say create action trigger connect and we will connect the self method that is called quit app let's see what happens if we do this and this is really cool if it's going to work let's clear and run the application now we have our file menu and if we hit quit the application is going to go away let's try it again file quit it is going to go away and this is really cool we can add a bunch of other menus now that you know how to work with ADD menu and add actions on menus so to populate this I am going to add an edit menu and let's take out these unprisoned symbols because we don't want to go into that here they have some use in QT but we're not going to go into that here now we have another menu added to our menu bar and we are going through this menu to add a copycat paste and do redo menu options and we will see them in our user interface if we run the application let's go to view terminal and a clear and run our application if we do that we have an edit menu this is really cool if we click on it copy cut paste and do redo and this is really cool you can do this things using the Q main window class in cute for python let's add a bunch of other menus to make this a little bit interesting we have window we have settings we have help and let's add a comment here if we run let's see if we can see these things showing up on our user interface and we see our thing here and this is really cool now I hope you know how to work with menus and many options and you even know how to respond when one of your many options is triggered now let's focus on toolbars the first thing we do is to create a toolbar object and a set a few properties on that and before we create the toolbar we need to import the toolbar and the queue size class here we are using to give it the icon size the size object here is coming from cute core so let's put that n and if you want to know how I knew that how did I know that queue size is coming from cute core well you have to use the documentation and if we go back to our browser I really want you to be familiar with using the documentation because it is an invaluable skill queue size for acute for python or Pi side 6. and if we look for it they should tell us where this thing lives cue size you see it lives in the cuticle module that's how I know this lens because I don't memorize them so we have this imported I think we can import Q toolbar from cute widgets because that's the module where it lives we don't even need the Q application imported here because we don't need this so let's take this out I think this is going to work and we can go down and keep working on our toolbar here once we have the toolbar we can add in a bunch of actions so to start let's say toolbar add action and add in our reduction how about that we can add the quit action to the toolbar and you do that by saying toolbar add action and let's say quit action because I think we have it on top create action where is our quit action I think we have it right here we can copy it and put that down below here I think this is going to work let's see what happens if we run this application this is going to be really interesting and this is going to explain why we have two actions in QT so let's see our toolbar you can see our action right here here and if we go in file you are also going to see that we have a quick thing set up here but we are managing what happens when a user triggers this action in one place whenever this action is triggered we are going to call the quit app but we can trigger this action from different places in our application and we can either do that from the menu or from the toolbar if we create from the menu the application is going to die if we quit from the toolbar the application is going to die and we have one single method to respond to all those possible sources of this action being triggered and I really hope this makes sense so let's go down and keep playing with our toolbar here another thing we can do is create our own action just like we do here action one Q action we are giving it some information and apparent because its Constructor requires this information again I know this because I read the documentation so go in the documentation read the information for Q action and you will know why we need to do things like we do here now we need to import a few action Q action leaves in the cute GUI module so we will import that like we do here and if we go down our application should be happy now that we have the action we can pass a lot of information for example we can pass a status tip and this is something that is going to pop up when you hover over your action we can do something like this you can respond when this action is triggered and this is going to be a method we set up in our application and after we have the action ready we can add it in our toolbar just like we added our quit action on top here and this is really cool before we run let's go down and actually set up this method so let's copy and say that and we will pass self as a parameter we will go in the body of the method and we can print a message saying action one trigger okay can do something like this now that we have this let's make sure it is the same name we are using here option one triggered yeah or we can use it or we can even say action triggered this is going to do let's run the application okay we have some action added to our toolbar if we click on it we're going to see that our action is triggered so you can respond to things happening in your toolbar and this is really cool we can even set up another action but before we do let's go to the place where our source code is and we will add in an image because we want to pass an icon to our action here and make it show up in our user interface you can download the source code and have access to this short image here okay so you can use this let's go back to our code and we can go down and set up another action this action is going to be taking up an icon and I think icon is coming from the cute GUI module so let's say Q icon I think we have that imported here here so we can do this and if we set up this then we can pass our start PNG icon it is in our project we just pasted this in here and we can pass the icon on top of the other pieces of information that we passed earlier so we have some text that we pass in our action we have a parent we can pass the status tip message here and we can respond when this thing is clicked and again this is going to activate our slot here that we set up we can make this thing checkable and to be honest I don't remember what this does but we're going to figure this out when we run this and we are going to add this to our toolbar let's try to run this and see what the checkable thing does okay so we can run this and we have our theme showing up here we see this thing is triggered and the checkable thing is not helping out in this moment I think we can comment it out and see what happens this is how you learn about distance okay so let's recite this and if you click you see this thing is triggered I think the checkerboard then here is working in the same way as we saw for a push button so we're not going to be talking about this anymore here if you want to see the signals that are sent by a q action again we can go to the documentation and look for queue action let's do that Q action in cute for python you can read all you can about this class if we go down hopefully we're going to see the signals that it emits you see it has a triggered signal and it can pass a parameter which may be useful if you have set the checkable state here I think that's the use for that so you have this now you can read the documentation on Q action and know all you can do with it now I think we know how to work with toolbars let's see how we can work with the status bar and the starters bar is this little section below your window I think we should show this it is this little thing Below in which you can show a bunch of messages and we're going to show how this works in a minute so let's go back to the code but before we go to status bars I just remembered something I didn't show you we can add a separator to separate lengths in our toolbar and we can even add a widget something like button in the toolbar and this is really cool if this is helpful for whatever you are building with QT for python please take advantage of that let's import Q push button for that to work so Q push button and let's go down and make sure we have no more squiggles so we have the thing here let's run and see what this gives us and you can see that you can even add a button okay if you look closely you're going to see that we have a separator here so you can separate things in your toolbars now let's go and work on status bars and all you have to do to work with the status bar is to set a status bar object to your main window so we use the set throttle support method here and we will create the object in place and set that as our own status bar status bar is in the cute widgets module so let's add that here kill status bar and once we have it we can start showing things in the status bar what we are going to do is to set a message to the status bar so let's go in our slot so let's go in our slot that responds when the toolbar button is clicked so we're going to say Self Storage bar and we are going to say show message this is a method you can use to show a piece of message and you can pass the message so message from my app let's say that and you need to specify a timeout you can specify you can leave this empty let's first see what happens if you leave this empty so let's do that if you click it's going to say message from my app and you can see that if you click on this the message in the status bar is going to change and another thing that is wiredate QT is that if you hover over something that has a tooltip message that tooltip is going to show up in the status bar that's what you see here but if you click you see that my message is going to show up and it is not going to go away it's going to stay there as long as you are hovering over the thing you can pass the timeout parameter here so let's say we want to wait for this for three seconds three thousand milliseconds this is what we mean here so we can run the application again if we run it and click on our thing the message is going to show up but it should go away in three seconds and it does go away so click one two three and it is going to go away after three seconds and these are the things you can really do with your Q main window class we saw that we could use it to play with menus and menu bars we played with toolbars and we later played with service bars another thing you can do with our application to make it a little less boring is to put some button in the middle as the central widget and we are setting up the button here and we are going to set up a method that is going to respond when this thing is clicked when the button is clicked here so let's make sure this is aligned properly and we wanted to respond when it is clear effect so let's put our method here we are going to define a method let's say Def and we are going to give it a name and we want to go inside and put some message out clicked on the button you can do something like this and this is going to be our Central widget and we want to mark this as a method and if we show the terminal and run we're sure to see a button in the middle of our application and if you click on it you're going to see the message here and this is really all I wanted you to see in this lecture I apologize it turned out to be really long but Q main window is really interesting now you know how to add menus to your application you know how to work with the toolbar and you know how to add status bar messages to your application the toolbar is very flexible I think you can even move it so you see you can move it around in your application you can play with us it is really cool we are going to stop here in this lecture and I will see you in the next one in this video we will learn about the Q message box class and this is a class that allows us to set up transient temporary message Windows like this you can see something like this it has a title it has a message inside and we have two buttons one to accept and one to reject and it can really be any kind of message and Q message box allows us to set up something like this in QT there are different ways to do this and we will start by looking at the hard way to do this and here is a simple function that is going to do this we will set up a q message box object and through a bunch of method calls we will apply a bunch of properties to our message box object so we can give it a title we can give it the message to show we can really do all kinds of crazy things but one other good thing I want you to notice is that you can control the type of message box this is going to be by changing icon here so you can make it a critical message box you can make it a warning message box you're going to see what all these things mean here another thing you can do is specify the buttons that are going to show up on your message box so in this case we want to see an okay and cancel button but it is also possible to put in other buttons if you want to you can just keep ordering those types of button in these parentheses and they will show up we will also set to the default button so the OK button is going to be on by default or it's going to be highlighted if I can say it like that once we have the message box object set up we will show it and we show it by calling the exact method this is going to make it pop up on the screen and we will grab whether the user pressed OK or cancel through this return variable so if the value of this is Q message box okay we will know that the user chose okay if it is something else we will note that the user has chosen cancel and if you pop up this message box you will see all this kind of information here I know this may be cryptic if this is the first time you work with something like this but I will show you how this works in a minute when we hit Visual Studio code so this is the hard way to do things QT provides a bunch of static methods you can call on Q message box to show different kinds of message boxes and it's really simple to trigger all you have to do is say cue message box critical this is going to give you a critical message box you can pass in the parent you can pass in the title the message and the kinds of buttons this vent is going to show okay once this thing shows up and the user chooses either of these buttons you will know through this return variable that we are setting up here and we will do the usual check we do to know whether the user pressed OK or cancel so this is one kind we can also have information message boxes and and you can really see that what is changing here is the method you call if you call the information method you will get an information message box if you call the critical method you will get a critical message box and we can keep going on really going through them all we have a warning one we have an about message box and here you see how you can trigger those message boxes what we will do is set up a bunch of buttons in our user interface and whenever you click on one of these buttons we're going to trigger a different kind of message box so this one is going to trigger the message box we set up the hard way the second one here is going to trigger a critical message box and we will keep going until we hear to the about message box as you see down here and here is how our buttons are going to look so nothing complicated here but one thing you should notice is that we are using a vertical layout to lay these guys out how you see them here so we're going to do this in a minute when we hit the visual studio code so let's head over to the editor and actually do this so here we are in our editor Visual Studio code we will set up a new project and we will be working in this folder called message box you can see that it is an empty folder we can drag it and drop it on top of Visual Studio code to open it here and we will create our main profile and we need a widget file that is going to be containing our widget we will set up our widget class like we do any other widget so we will import the components we need and we will set up a widget class here once we have this we can head over in our main dot py file and put in the code that is going to trigger that widget I think at this point we can actually run to see that our application actually works and then we can start building other things we need let's clear and say python main pi and if we do this we should see a window popup here and we will build our user interface on top of this the first thing I'm going to do in our widget class is initialize the buttons that we will be using in our Constructor so let's do something like this and I am going to just put them in and we will be looking at the meaning of this as we go through the lecture here so we are setting up a window title for the widget here and we want to set up a bunch of buttons we have a hard button that is going to trigger the message box we set up the hard way we have a critical button a question button an information button a warning button and an about button and each of these buttons is going to be triggering a different kind of message box to kind of learn about all these things here once we have the buttons if we run the application remember we're not going to see them because we need to tell this widget class how it's going to be laying out all these buttons here but let's try and show you what is going to happen if you try to run the application at this point if you do it's really not going to work but here it is just complaining about the slots that we don't have in place but the point is that this is not going to show the buttons the way we wanted them shown so we needed to use a bunch of layouts here and you can see that I imported a v box layout because I have a purpose for this okay so let's go down and set up our layout you already know about layouts here we will set up a vertical layout and once we have the layout we will be adding all these buttons to the layout then we will set the layout to the current widget here this is how we are doing this let's say that we are setting up the layouts here and let's see if we try to run we are probably going to get a problem because we don't have the methods n but we can set up all these methods here so what I am going to do is copy this and go all the way to the bottom so this is a Constructor we can go down below and set up the method and I am going to duplicate this one two three four five times so let's do one two three four five okay and this is going to be critical let's do that okay the second one is going to be critical the third one is going to be questioning I am doing this live so that you guys don't have a problem with what I am doing here so let's do this together question information let's do this so let's go down and do information we're going to paste this in and this is going to say information and we're going to go to the warning button so this is the slot we need to set up after information let's do this warning and we need to go to the last one which is going to be about okay so let's deal about and this is going to say about and let's try to fix our indentation here because python is very serious about this so we need to use one tab space after the line of the functional definition here let's go to view and show terminal and if we do this and run again this should run now and it is going to show our buttons we have done the signal slot connections after the definition of each button so at this point if we click on hard we should see hard if we click on critical we should see critical if we click on question we should see question and let's make sure that everything is working here and about is about now we need to show a bunch of message boxes and we will start by the hard way here so let's take out the text we have in our function or method and I will go on top and say that we are doing things the hard way here and I am going to put in my function definition what this is going to do it's going to create a message box object and you can check this class out in the documentation you already know how to do that but let's do it together anyway so let's say Pi side 6 Q message box this is going to open the page for this class in the QT documentation and you can click on more to read on what this class does this is going to display a primary text to alert the user to a situation and you can really read all you want about this this is how it looks on the Mac this is how you set it up and it is what we are basically doing in our example here okay let's come back to our code we will set up the message box object we will give it a size we wanted to have a minimum size of 700 and width and 200 in height this is the meaning here you can give it a window title we can give it the text to show we can give it some informative text we can give it an icon we're going to make it a critical message box and we can give it the buttons that it is going to show and after this we will specify the default button and the critical thing here is to show the message box okay and you do that by calling the exact method on this once you call the exact method the method box is going to show up and when the user clicks on either of the buttons we will know which button the user clicked on through the return value here so if the user clicks on OK we will get a number representing the OK button if they click on cancel we will get a number representing the cancel button this is how these things work now that we have this I think we can run and see it in action we're going to show our terminal window and we will run okay we are going to click on the hard button and if we do that we're going to see something pop up here so we have a message box here and if we click back on our code let's make sure you see what all these things mean you see the title we set up is showing up here okay you see the informative text is showing up here and the message we set up is showing up here and you see the buttons we set up to try and play with us you can play you can click on cancel it is going to say user choose cancel if you click on OK you can see that we know which button the user clicked up on but you can even play with this for example let's take out the cancel button in our standard buttons here so let's check this out and if we run let's run again okay and click on hard we're going to see that we only have the OK button okay so and this is really cool now you know that you can use these standard buttons to control which buttons show up in your message boxes and this is one way to set up a message box if you want you can do it this way but QT provides a rather easier way to do this because all the work here is really repetitive it is just setting up these messages the title The text the informative text and really the differentiating factor is the kind of Icon you apply to the message box let's change this to warning for example to show you that you can do this so we can change the icon to change the kind of message box this is going to show let's try to run again so we can run and if we hit this is going to show a different icon let's cancel out of this and change this back to what it was was let's hit Ctrl C to go back there it was a critical one let's try again and if we hit hard we're going to see that we have a different icon so they are different in which icons they show the rest is really the same so because of this reason QT provides a bunch of easier to use static methods that you can call directly to get this then show up without doing all the repetitive work here we will start by the critical one because it is what we have here and I am just going to put in the code all you have to do to get this to work is to say qmessagebox dot critical and called the critical method on the Q message box class and then you pass in the parent to the title the message you want to show and the buttons you want the message box to have this is really all you have to do the rest is the same we will check which button the user clicked through the return value of the critical method here and if it is equal to the number that represents Q message box okay we will know that they also chose okay if it is another value we will note that the user didn't choose OK and they chose cancel because we only have two buttons here or they just closed the message box so that's another option too let's run and make sure we see what is happening here we will click on the critical button we can show our terminal and run again and if we click on critical you see that we have a really good message box here again you can see the title we set on top here you can see the message and you can see our buttons here let's go down and try the other ones if we choose cancel you see that it is cancel if we choose OK you see that it is okay down here and this is working exactly as we want the rest is really the same all we are going to be changing is the kind of method we call so we can go down and do the question one let's put some space in here and put in the code for the question message box and we are calling the question method the value is going to be captured in the return value and we will check which button the user chose here let's run and see this running so we can show this question asking the question we can click Ok We're going to know if we click OK we can click on cancel on question and we will note that we have chosen cancel I am just going to go down and put in the rest of the methods then I am going to show you this running so that you have a full working example on these guys here okay so let's go down and put in the information one so we call the information method we can go down and put in the warning one let's do that and we can go down and put in the about message box here all these are things you can do I think it is better to also document this let's say about here we can go on top here and say warning we can go on top here and say information and on top here we will say question and we will go to the top and say critical and here the hard way was critical as well okay we have the thing and now if we run all these buttons should work let's bring up our terminal window we can clear so that we have a clean slate here if we run we should see our tank show up if we click on hard we will say message box we click on critical we see a message box we click on question we see a message box we click on information we have an information message box and be careful to look at the different icons that show up because that's really the main differentiating factor we have a warning one and if we click on about we will have some method here and we can click OK and really run this so the last one doesn't really need to capture the return value because it's just going to give the user a message so the user can just close the thing that's why we are seeing a cancel even if we click on OK because the okay we click on is not meant to give us a return value that's how this link works so this is really all a habit to share in this lecture again if you want to learn more about Q message box you are welcome to read the documentation here you see the documented the kinds of message boxes you can look at but I think we have a good starting point to work with us throughout this lecture here I am going to stop here and I will see you in the next lecture in this lecture we are going to look at the Q push button class and you might say haven't we used a lot of Q push buttons enough by now well we're going to look at it again because I want you to see more on the signals you can process in your QT applications on the Q push button component here so you can process the clicked signal you can process the Pressed signal you can also process the release decision depressed and released signals are going to become increasingly important if for example you are doing a drawing application in which you want to know if the user has pressed it down and moving without having pressed the release button so that's why I want you to know about these signals here and we will set up an application like this so we will have a button that says click we will connect to these signals and we will be processing these signals in these slots that we set up below here and here in the middle you see that we are setting up a layout to have this button show up better in the widget that we are building here now that you know this we can head over to visual studio code and actually do this here we are in our editor Visual Studio code we have an empty folder in which we will be working for this project here you can drag it and drop it on top of Visual Studio code when we do that we will create a main.py file and we will create our widget file once we have the widget file we will put in our starter code we will import the components we need and we will set up a class that inherits Q widget nothing special here we will also go into the main file and put in our boilerplate code if I can say it like that it is going to create the application object and we will create an instance of our widget object here we will show it and kick off the event Loop you already know this let's go to the widget and set up our button and connect to the signals that we are interested in but before we do that we can go to the documentation and actually read a little bit about these signals here so we can go to Q message box now we want to look at Q push button sorry for that let's go to Q push button and if you remember we didn't see the signals that this thing has because most of these signals are coming from the parent class of Q push button and that happens to be the Q abstract button class so we can click on this thing here we will get to the documentation and if we go down we will see the slot but we are interested in the signals and if you look here we have the clicked signal we have used like a gazillion times by now but we have the Pressed signal and the released signal that we are interested in playing with in this lecture here another one you can play with is the toggled signal that is going to be triggered with after you change the state of the button when you have set the button to be checkable like we have done in a bunch of previous lectures but we won't be using this signal here you can play with it if you want let's go back to the code and actually do what we want to do we will come back to our widget class and put in our Constructor code The Constructor is going to set the window title it's going to set up our button and we will be connecting to different signals from this button here and you can see that we are trying to process the clicked signal the Pressed signal and the released signal and we're going to see how this work to be able to see this in action we need to implement these slots here so let's do that so we can go down and Implement these slots as methods of our class and we have the clicked slot which is going to be triggered when you click on the button we have the Pressed slot which is going to be triggered when we press and down below we have the released slot which is going to be triggered whenever our button is released here and we have all the code we need now that we have this in place we can show our terminal window and we can clear and run the application if we do we should see our button here and once we see it we can press on it you see we we see pressed once we go out of the window of our widget we're going to see that the system is going to think that the button is released but if we click again and release you see that we have two signals when we release the button we have the release signal but one thing worth noting here is that the clerk is both depressed and the released signal so a click is going to be triggered when you press and release but if you want to do things only when you press you can use the Pressed signal if that is making any sense that's the meaning of these signals here and I really wanted you to be aware of this if you really want to learn more about these signals you can come to the documentation and see what the official QT guys are saying about this but this is the gist of it this is really all I had to share in this lecture I hope you found it interesting we are going to stop here in this one and I will see you in the next one in this lecture we are going to look at the Q level and the q line edit components in the QT framework and these are components that allow us to set up a component like this in which you can type a single line of text so this is a queue line edit and the label is something you can use to set up some level text something like the full name you see here and if you need these kinds of things in your QT application you will be using Q level and queue line edit the thing we have down here is also a level and in the middle we have a button that we will want to be using to show the capabilities of q line edit here to set these things up all you have to do is to create these components wherever you need them in your QT application you can create a level just like you do here you have a variable label and you call the Constructor Q level and you pass in whatever the label text is going to be you create a line edit component like this and we can do all kinds of crazy things down here you see that we are trying to connect to a bunch of signals from the line edit and we will be playing with this thing but what I wanted to draw your attention on is how we are going to lay things out to make the user interface show up like this and what we are going to do we will first have an in globing vertical layout okay that's what we're going to do then we will take the full name level and the line edit here and put them in a horizontal layout so this horizontal layout is going to show up somewhere like here and then we will set up a vertical layout which is going to be this one and add these components to that vertical layout so the vertical layout is going to have the horizontal layout added to add and after that we will add the button and add the level you see down here I want you to keep this idea in mind because this confuses a lot of people starting out with QT now that we notice we can look at the signals that we can play with for a q line edit for example we can know when the text in the line edit changes we can know when the cursor position changes we can know when the user finishes editing and this mostly means the user hitting enter we can know when return is pressed which is also enter I don't know why QT provides two signals for this maybe the reason difference but I didn't care enough to go investigate that we can know when the selection is changed we can know when the text is edited we can do all kinds of crazy things with these components end we will set up the methods that are going to be triggered by the signals and you have all of them here we will play with them in a minute when we hit Visual Studio code but I do recommend pausing the video and looking at each of them before we go there so that you have an idea about what we are about to do now that we have this out of the way we are going to head over to visual studio code and play with us a little more here we are in Visual Studio code we are going to be working on this folder here which is empty as you can see we can drag it and drop it on top of Visual Studio code to open it and this is going to open our project in the folder let's create our main python file and our widget file and in the widget file we will create our class like we always do make sure you see the Imports we do here because we will be using all these components we can head over in the main file and put in our code that is going to trigger the widget showing up and and we can try this to see if it actually works so let's do that if we show it we're going to have an empty widget and now we can put in a bunch of line edits and labels before we do let's go to the documentation and read as much we can about these guys you can look at Q level if we open this in our browser this is going to tell you what this component does it is used for displaying text or an image we will talk about images later for now we are concerned with text and if you go up you will see a bunch of methods you can call on this to really do all kinds of crazy things but this is mostly used to show text in your QT user interfaces we can also look at queue line edit and pay Special Care on the signals that this component has so if we click on more we're going to see it shows something like this in your QT application you use it to type a single line of text and you can do all kinds of crazy things but for now we will do the basics one thing I want you to see is the signals that this thing has because they are the most interesting thing if you think about it you use a line edit like this if you want users to type text n and you may be interested in different aspects of how the user is putting in text for example you may be interested in tracking the cursor position you may be interested in knowing when the user has finished editing so that you can do something with the text you can do all kinds of crazy things and we will be playing with a bunch of these signals if you see some of that interest you I do recommend clicking on them and seeing what they do to really have an idea about these things here and make sure you read this detailed description to really know about this component even more Ghana can tell you in a course like this the documentation is your weapon when it comes to working with QT and QT happens to have one of the best pieces of documentation I have known in my career as a software developer so let's come back to our code and do what we need to do the first thing we are going to do is to put in our label and line edit component before we do that we will set up a window title to make this selfdescriptive and we create a level like this you can see that there is nothing special about this and we have our line added we have made our line edit a member because of the soft failure and we do that because we want to be accessing this in Our member variables if we don't make it a member like this we want to be able to access it in our methods I mean okay we have this in place I think we will also need another level which is going to show something like this let me show you we need another label that is going to show the text here and we needed the button so we can go down and put in our button and make sure it is aligned properly and we can even go down and put in our label once we have these components the next job is to lay them out we know that we want the level and the line edits to show up in a horizontal layout so we will have the levels in something like this then after that horizontally we will have the line added so for this we will be using a horizontal layout once we have this horizontal layout we will use an including vertical layout on which we will be adding the button okay so let me display it like this and at the level like this so this is the user interface we want to set up and we will first set up this horizontal layout here so let's come down and set up our horizontal layer it is going to be a qh box layout we already know that and on this layout we will be adding our label which is on top here and the line edit once we have this we will set up a vertical layout which in turn is going to contain everything in our user interface here and we will apply the vertical layout on the entire widget let's do this so we can go down and put in our vertical layout QV box layout and to be able to do this you need to have imported all these components here so we add our horizontal layout to make it show up first in our vertical layout so if this is our vertical layout the first thing is going to be the horizontal layout the second thing is going to be the button and the last thing is going to be the text holder let people here once we have the vertical layout we can apply it to our widget and to do that you say self set layout and we will be using V layout here once we do this we should have our user interface and the next thing will be to play with our line edit component here let's show the terminal window so that we can run the application if we run we should see our user interface here let's make sure you can see it because I just closed it by accident you can resize it okay we have the full name on the left because it is what we say in our horizontal layout here we have the line edit here we have the button and we have our level here which we are going to play with in a minute you can play with the line edit and really type in whatever you want you can say the sky is blue my friend and you can really do all kinds of crazy things one thing you might be interested in when you have a component like this is to grab the data and we will be grabbing the data in our line and edit and printing that to the console when the user clicks on the grab data button here so the first thing we're going to do is come back to our code and set up a method and the method is going to be at this level so let's make sure we take this to the correct indentation in Python so this is going to be triggered whenever the user clicks on our button that says grab data and what we are going to do we will grab the text in the line edit notice that we are saying self line edit and this is going to be grabbing this component here the line edit that we set up in our user interface and we can call the text method to grab whatever text is currently in the line edit component so all we need to do now is to do our connection we can say button select net self button required we already know this must be becoming second nature here let's run and see this in action we can open the terminal we can run the application it is already running I think so let's close it we're going to run it again to run the new version of the application and we can say this guy is blue if we grab data we will see that the full name is the sky is blue but we can put in something like John snow and if we grab data it's going to say full name it's Jon Snow you can see that we can grab data in our line edit component this is really cool if you want it you can take this text and actually apply it to the other line edit we have down below here let's play with this to really show you that you can do that so we can close and we will grab the name of the other line edit and what is that text holder level so we can do this okay we can copy it and go in our method and we can say set text on this guy and the text is going to be what we get from the line edit here so we can copy this and put that in here this is something you can do you can really play with this things and I do encourage that let's make sure the application is not running we can run again have and if we say Jon Snow in our line edit and grab data we will see this print on the terminal because we are printing here but we will see that the text T now are as the level here is also going to change to John's now you can keep playing with this let's say Daniel gray and grab data it's going to say Daniel gray and it is really working this is one way you can use a line edit you can grab the text in the line edit and use it to do whatever it is you want to do in your QT application let's play with the other signals we have on our component here for example we can respond whenever the text in our line edit changes let's go back to our line edit which is down here let's put in some space so that we can easily spot it we are going to set up a connection we are going to say whenever the text changes in our line edit what we are saying here we want to trigger the 10 text changed method and we can grab the correct text and show it before we do that to though let's go in our other thing and comment out to the line that prints the text because we are going to be printing a lot of links we don't want to be confused by this let's go and put in the slot that is triggered whenever the text changes so we can go down and actually do that okay we have our text changed slot and it is going to be triggered whenever the text changes you see we commented out to the print line here we just want to see the changes in our user interface this is okay let's show the terminal and run and if we say Daniel gray in here you see whenever we type something we will be notified and we will be responding in our slot here and this is something you might be interested in doing if you want you can even uncomment the line that prints something and run again if you do that you will see the changes both in the user interface and on the terminal here because that's where we are printing with the print statement here this is what the text changed signal does we can comment out to the connection here because we still have a lot to play with so let's do that we might also be interested in knowing when the cursor position changes and we can set up a connection like this to be notified and we need to set up this slot that is going to respond the slot right here the cursor position method is going to have two parameters one is going to be the old position the other is going to be the new position and how do I know this well the documentation let's go back to the documentation or queue line edit and we can see cursor position changed you can see that it has two arguments one is the old position the other is going to be the new but the QT documentation didn't care enough to name these things properly him on uqt this is bad you should name these things properly let's go back to our code though so we will do better old new we will know that this the old position and this is the new position and because of the connection we did here we will have access to these guys when this slot is triggered so we will be printing this lens here let's make sure we don't have anything else we don't want to see printed we have the Auto Connection commented out I think this is going to do what we want let's go up and run so we can run this and if we do you see the crucial position changing as we add events if we go back you see the cursor position is also changing this is really cool and at each trigger of the method we have the old position and the new position and this is really cool this is something you can do with this method here let's go up and comment it out we might be interested in knowing when the editing is finished this is another signal we have on the line edit component we will put in this method here so we can go all the way to the bottom and put in that method and let me extra we remove spaces we don't need and we have the connection and this is going to be triggered whenever the editing finishes and this is going to be mostly when the user hits enter on the line edit after typing in some text let's show our terminal window and we can go up and run and if we say DDD and hit enter this is going to say that editing is finished you see this is triggered when you hit enter this is all you can do with this signal here we also have the return pressed signal let's put in the connection for that and comment out what we had before okay and this is going to do the same thing as editing finished again I don't know why QT provides these two maybe they have a difference but honestly I don't know that difference yet let's put in this method implementation that's going to be return pressed we can go to the bottom and put this in return press if we run we should see that if we type DDD or whatever you type in your line edit and you hit enter you will know that return is pressed and again it's when you hit enter after you finish putting in some text in your line editor another interesting signal is one that lets you know when the selection changes in your line edit you might be interested in this in your QT application so when the user does something like this and selects okay you will be notified of the current selection and this is interesting in some applications so we have the connection and all we need to do now is put in the implementation for this method here so let's do that we can go all the way to the bottom and put in the method implementation selection changed we have the connection whenever the selection changes we call the selected text method to know the currently selected text and this may be important in your QT application so let's do that we can run this and whenever we can type in something let's say for example Jon Snow and if we select John you see as we select more things the currently selected thing is going to be shown here we just selected John if we select to know we will see that in our QT application here if we select the entire thing even backwards I think that's going to work you see we have Jon Snow selected and this is really cool this is something you can do in your QT applications the last signal we are going to process is text edited and as the name says it is going to be triggered whenever you have text changed in your line edit and I think it also provides two arguments showing the old text and the new text to be sure you can check the documentation for now I am just going to put in the implementation here let's go to the bottom looks like it only gives the new text which is yeah it's useful so we will be printing the new text here which is going to be passed to us in this signal here and this is really cool let's try to run we can clear and run I think this is going to conflict with other things now this is going to do you see whenever we change we have the new text show up and this is really cool let's type in something meaningful instead of this junk here so we can say Jon Snow you can see that whenever we change the text the changes are going to be reflected in our application here because of the connection we did and you can go on and play with more signals I think I gave you enough examples in this lecture here again the goal was to be able to play with q line edit and Q level Q level is going to be used when you want to show a piece of static text in your user interfaces something like this you can use q line edit when you want your user to type in a line of text and this may come in handy for example if you are setting up a form to collect information from the user the first name is the last name the address the job they do whatever you can collect all these things in your QT applications and do things with them this is all I had to share in this lecture I hope you found it interesting we are going to stop here in this one and I will see you the next one in this lecture we are going to look at the Q text edit component and this is a component that allows you to type multiple lines of text in your user interface or something like this and I am sure you have seen this in a lot of graphical user interface applications so what we are going to do is to set this up in a demo QT application using pi side of course and we will be able to type in the text get the current text in this component like we did for q line edit but we can do much more for example we have the capability to copy text to cut text to paste text we can undo and redo something you see in a lot of text processing applications and this is going to be really cool to set this up it's nothing really special all you have to do is to use the Q text edit component you will set this up in a widget that we will set up in a short while when we hit Visual Studio code and we will set up a bunch of buttons that are going to allow us to manipulate things in our text edit component one thing I want you to see is that for example to copy text from our text edit component we are not going to go through separate slot methods like we did before what we will do is take advantage of the fact that the text edit component itself already has a slot that is going to copy data so instead of delegating to a custom slot that we set up in our own application we will immediately call the copy slot in our connection here and this is something you might want to do in your QT application apart from that it is standard stuff we have been doing all along and it's really not going to be anything complicated now that you know this we can head over to visual studio code and play with us a little more here we are in Visual Studio code we have an empty folder that we will be playing with in this lecture here let's drag and drop it on top of Visual Studio code we will close this and create create our main Pi file Ty I mean let's do that and we will create our widget file like we always do and in our widget we will put in our starter code this is going to create a starter widget which is empty and notice the Imports we do here for the things we will be needing here so it's quite a lot make sure you put these things in once we have this in we will head over to our main file and put in the code that needs to be there it's just going to be creating an instance of our own widget and showing it nothing special here we can come back but before we do anything it is my Habit to try and run the code to make sure that I have no problems in there so let's do that we should see an empty widget popup and it does here now what we are going to do is set up our text edit component together with a bunch of buttons that will allow us to play with that the first thing we do here we are putting in a window title because this is a cute text edit demo we set up our text edit and if you go down for now you can ignore the connections we are doing here the first thing we are interested in is laying things out so that we can see them in our user interface we will talk about all these connections later so we have a copy button we have a cut button we have a bunch of buttons all the way to the clear button here now that we have them we need to lay them out and the way we want to do things we want all these buttons to show up in a horizontal layout that is going to be on top so these are going to be our buttons and below the buttons we will be putting our text edit component if I can draw it here so this other big thing below is a text edit component so this is going to be a horizontal layout and this is going to be our text edit component and they are going to be laid out in a vertical layout so we will set up this horizontal layout and add horizontal layout to the vertical layout after the horizon Auto layout decided we will be adding our text edit component I hope this makes sense so let's go down and put in our layouts we can do something like this we will set up our horizontal layout which is going to be an instance of qh box layout after that we will be adding our buttons to copycat paste and do reduce set plain text set HTML and clear after that we will set up the vertical layout which is going to be containing our horizontal layout and the text edit and notice that the text edit is set up as a member because of the self plan here and we are doing this because we will be needing accessing this in a bunch of slots that we will set up later the let's take out this connection because I think it might give us problems because we don't have this slot in yet and now that we have the vertical layout we can go below and say itself set layout and pass and this vertical layout I think with this we will be able to run our user interface and be able to see our text edit component along with the buttons that we set up here so let's clear clear properly and run the application and what is pro the problem here set plain text we don't have these guys yet I think we have a connection that mentions that plain text let's comment this out because we don't have this n yet and we can try to run again and if we do this is going to show up and the meter of this lecture really is to play with the Q text edit component that we have down here what you can do with it you can type text you can say the sky is blue I am and my city something like that you can really do all you want you can put in a lot of text and this is what you can do with something like this and you can see that using this as a business you can really set up something like the Notepad application you see in Windows here you can do something like this you see it does exactly the same thing now that you know how to work with Q main window you can set up a two main window object and put in these files and menus and whatever you can copy and edit you can do all kinds of crazy things you can see that now you even have the knowledge to be able to set up a status bar you can set up toolbars you can do all kinds of crazy things so now that we have this in place I think we need a way to play with us so the first thing I am going to show you is that we can copy the text in here and paste it but I think the most basic thing is to grab the text we have in our text edit component but before we even do that I forgot to tell you that you should use the documentation to learn about these fans so let's do qtext edit here okay so we can come in here and look at this and you can click on more to go down and learn all you can about this let's go to see the methods that this thing has so we have a clear append cut we have a bunch of signals we can play with this on this and I think we have a method called to play with text we can use to get to the current text in our text edit component here that's what I was looking for so what do we do I think we need to add another button unfortunately so let's do that I think it's going to be the first button so we're going to say current text button okay it's going to be a push button and it's going to say current text so we can put it in and we're going to connect click connect and we want to set up a method that says current text button clicked so we will go down and set up this method this is the usual thing we do we can go all the way to the bottom to the level of our Constructor we will Define this method it's going to be a member we can say a print the current text so what do we do we say self text edit to plain text this is something that is going to print the current text in our text edit component here and this is something we can do so let's run and see this in action and we can see this and if we say this guy is blue I love my city we don't have the thing in the layout so let's go back and add the current Button as the first thing in our horizontal layout we forgot that no problem we can fix that add with it and we're going to make this show up as the first thing in our horizontal layout now we can run if we do and type the sky is blue and put in some other text here if we get the current text you see that we can see this so we are able to grab the text in our component here now that we can see this we can play with the copy method or the copy slot if we go to the documentation for a q text edit let's go to the top again and look at the slots that we have available on this component we will see a coffee slot we can call it and what it's going to do it's going to copy any selected text to the clipboard any selected text from the Q text edit component here let's go down and play with us so we can open this up in our editor go to the point where we declare the copy button and what this is going to do it's going to call the copy slot and this is what I meant when I said we can avoid to set up our own slot and immediately forward the work to copy to the copy slot of the text edit component we can do it like we do here so this is going to work right away we can run the application and if you go down you see that we can also catch because we are forwarding The Cutting work to the cut slot of the text edit component here let's show our terminal and we can do something like this and run now we can say the sky is blue I think I don't need to type my text all the time I think we can copy from the QT documentation here to have some text show up in our text edit I mean we can paste here so once we put in some text we can select something and copy it okay how do I know it's copied it's going to be leaving on my clipboard I can even paste this in another application so let's open notepad and paste I am going to select and paste you see that I am able to copy from my QT application to another application this is really cool so let's cut because the cat feature is also going to work because again it is forwarding The Cutting work to the cut slot of our text edit component if we cut the text is going to go away if we cut the text is going to go away if we cut the tax is going to go away but we can't paste yet why because our paste button doesn't have a slot that can immediately paste connected let's do that to be able to really play with us so we can say self text to edit paste and this is going to forward the work to the paste slot that we have available in our text edit component again if you go to the top you can you see that we have a paste slot right here let's make sure it is highlighted so everybody can see it you can see it right here if you want you can click on it and you can see all about this slot here let's go back to our application and clear and go up and run again we can still copy from the QT documentation we can grab all this no problem so let's come back to our application and paste in and if we want we can um okay we can copy the entire thing here and we can go below here and hit paste and you see that we can paste text in here and this is really cool I can't tell you how excited I was the first time I could do this with QT but it wasn't with pi side at the time it was with C plus plus but the excitement is the same so we can copy cut and paste another thing I want you to see is that if you want you can set up your own paste slot so for example we can say something like this okay we will be calling our own paste slot and if we set it up we can copy and go down and set it up can say Define paste and it's going to be a method now once we are in the body of this method we can say self text edit and call the paste slot ourselves because we can do that this is something you can do and it is going to behave exactly the same way so let's do the paste button make sure it is working it should be let's go up and run we can paste in the code from what we have in the clipboard we have something from our editor don't want that so let's grab from the website here and we can copy the entire thing okay we click on the copy button here and if we go down we can paste again we can hit the paste button to paste if we want we can even cut so we select something we cut it out it's going to go away we select something else we cut it out it's going to go away and we can keep pasting and really playing with this to have as much fun as we can with our application here another thing you can do is undo and redo and I think again these are forwarding the work to undo to the slots in Q text edit if you go to undo you see it here if you look at redo you can see it here so I think we can even undo if we hit and do this is going to undo the operations we did before if we redo this is going to be redoing and you can do something like this let's look at set plane text set HTML we have the connections then but they are disabled because we don't have the correct slots implemented let's Implement these slots here so we can go all the way to the bottom and put these M and let's take out the space here set plane text is going to call the set plain text method so this is the method you can look up in the documentation and we will just put in a bunch of text that I stole from somewhere set HTML can say it HTML formatted text to your plain text edit component and you see I have a few things with a few HTML headers we have the BR tag we can set up a list and you can see it right here this is basic HTML if you happen to know something about HTML let's show the terminal and we will play with that a little bit and we can run okay if we do set plane text this is going to put in the text if we say set HTML you can see that our HTML is going to show up here we have a header we have an unordered list here and we have something this is something you can do in your application another thing you can do with Q text edit is to clear the text and you do that by calling the clear slot that we have in our text edit component if we go back to the documentation again that's the best source of information for you so let's look at the slots that we have we have a clear slot which is going to delete all the text in the text edit let's go back to our application and see that clear the text goes away set plain text clear the text goes away we can undo we can redo we can do all kinds of crazy things this is really all I had to share in this lecture showing you how you can play with Q text edit have as much fun as you can with this component and then we are going to stop here and I will see you in the next lecture in this lecture we are going to see another use for the Q level component and that's using it to show an image what we want to end up with is something like this we will have a level component contained in our widget window and that level is going to be displaying an image let's look at how we can do this it's really simple here we have our class implementation we will set up an image level that's going to be the name of the variable it's going to be a q level component and we will call the set Pixma method.net and give it the image that it is going to be displaying this image is going to be living in our project under the images folder and we will access it and display it in all level once we have the level we will add it in the layout and apply the layout to our widget and this is going to show the application that we see here now that you know this we're going to head over to visual studio code and do this here we are in our editor we are going to be working in this folder here if you look in it is an empty folder so let's drag and drop it on top of Visual Studio your Cody here and we will do the usual setup our main dot python file we're going to set up our widget file and in our widget file we will set up our class which is going to be inheriting from Q widget let's make sure you see all the Imports that we have here we're going to be needing a lot of these and we can go in our main file and put in our starter code which is going to instantiate our widget object and show it nothing special here now that we have this we can try and run it to make sure we have no problems so let's do that clear and run this should give us an empty widget and before we do anything let's make sure that our image is in the folder so what I am going to do I am going to grab an image that I have lying on my drive here I am going to hop over in my project that contains my main python file and paste in that folder I am going to share this project on GitHub so you can download this project and grab this images folder and use it inside you will find my image here called Minions and it is a PNG file now that we have this we can set up our level component let's go back to the widget file I mean we will set our window title in and set up our label component that's what we are doing here after we have this we need to set a pixmap to our level so let's go back to the label documentation we can go back there I really want you to see these things in the documentation so let's do Q level and if we go to the documentation it should have a set Pixma method set Pixma but we have that we have a pixmap method which is going to give us the pixmap which is really a representation of the image that is displayed in the level but I can't find the set pixmap function not shown here don't know why we have it as a slot so we have set pixmap here and if we go in okay we see set pics map this property holds the level Peaks map setting the Pixma clears any previous content and you can see all the information here so this is what we do with this you can look at the qpix map class itself let's go to the top they say what this class does it provides a way to show an image basically and all the information here you can read if you want for now we are going to come back to our project and say Image level set Pixma and we will build World a qpix map object in place and you build it by giving it a path to the image that it is going to be displaying in our case the image leaves in the images folder you can see here and it is called minions.png let's do that minion dot PNG and that's going to be our offend now what we need to do is to set up a layout so we can say layout equals Q you can use any kind of layout you want let's use QV box layout why not we will add thanks to the layout so we will be adding the widget that's going to be our Image level and after we do that we will set the layout to be applied to our widget here set layout this is the flow you have to drill in your mind if you want to work with layouts with them your QT widgets let's pass in our layout here and I think we have everything we need hopefully let's show our terminal window what do we have here the application is still running we can kill it and clear and run again and if we do look at what we see here we have our minions image showing up this is really how you use a level to display an image and this is really all we set out to do I hope you found this lecture interesting we are going to stop here and I will see you in the next one in this lecture we are going to look at cute size policies and stretches and this is a concept we use to decide how our widgets we have if the user interface grows or shranks we will start by talking about sites policies and a science policy is a property you can apply to your widget to decide how that widget is going to behave if the user interface grows or shrinks for example if we resize the in globin window here we have the option to let the level here and the line edit grow at the same time so the sound so the label is going to grow and the line edit is going to grow or we can choose to say the level is not going to grow it's going to say to the same width but the line edit is going to grow and we can control these things using size policies I know this concept can be hard to grab but you are going to see what this really means when we get it to run this in Visual Studio code in a minute another concept to that I wanted to cover before we head over to the editor is the concept of stretch and the stretch is a property that says how many units each widget is going to occupy in a layout what do I mean here if you look at our buttons.org in a horizontal layout I set them up in a way that the button that says one has twice the width of two and three here and you can set up by setting up a stretch so what I really did I said the button saying one here is going to have a stretch of two the two bottle is going to have a stretch of one the three button is going to have a stretch of one and at any point when the user interface grows horizontally the button saying one is going to be occupying twice the size occupied by either of the other buttons this is how you can say it using stretches and you can use these Concepts in your QT application if you happen to need that here is the code that is going to allow us to do these things here for example we have our level okay and the line edit and we can set the size policy you can say I want my widget to expand horizontally or vertically when the user interface that includes my widget resizes and if you want to expand horizontally you pass that as the first parameter of the set method here and if you want to expand vertically you pass that as the second parameter here in this case we are saying we want to expand horizontally for a design edit and we don't want to expand vertically so vertically we're going to be fixed this is how you say it if you want to be expanded in both of directions you can say it like we do here and this is going to work down here you see that we can do the same on the level component you're going to see the behavior of this when we hit the editor in a minute down here we have the layout the usual thing you already know now we can look at switches and a stretch again is specifying how many units each component is going to be using in the layout in the example I showed I had an example where the first veteran occupied twice the space occupied by each other button here so let's make sure I can at least try to visualize this so suppose the first button here has two units okay it occupies two units and each other one is going to be occupying one unit you specify your stretch as the second parameter to the add widget method so we are saying that button one is going to have a stretch of two button two is going to have a stretch of one and button three is going to have a stretch of one and we can add these guys to the layout to show them in our user interface now that you know this we're going to head over to visual studio code and see this in action here we are in our editor Visual Studio code we have an empty folder that we will be using for this project here we can drag it and drop it on top of Visual Studio code once we have this opened we can create our files the main python file and at the widget python file once we have the widget python file we can put in our starter code we have that right here and we just set the window title this and we can head over to the main python file and put in our code which is going to import the components we need we are going to set up our widget and we are going to show it we can try to run this to make sure we have no problems so let's show our terminal here and clear if I can type and we can show the application we have our widget here everything is working as expected the first thing I am going to do is to set up my components so that I have my full user interface once we have it we will play with size policies and stretches so we have the level and the line edit we will go down and set up the layout that is going to be containing our line edit and level and this is nothing complicated so what this is going to do is to set up a horizontal layout and it the horizontal layout is going to be containing our level and our line edit this is what we want to do here we also want to set up another layout which is going to be containing three buttons and these are going to be laid out like this this is the goal we have using stretches so the first button is going to be occupying twice the space occupied by the other buttons let's go down and put in the buttons let's put in the buttons here I am going to paste them in to save on some typing time here button one button two button three and we will add them to their own layout once we have this we will set up a vertical layout on which we will be adding these layouts here to have them on separate rows each one being horizontal if that is making any sense okay we have our vertical layout we can add in our horizontal layouts and we set the layout to the widget here okay now that we have this I think we can actually take out the second parameters for add widget here because we will add them when we want to play with stretches for now we want to see our user interface and I think we have it set up again if you are confused we have our label component the line edit we are laying them out horizontally so the label is going to be to the left the line editor is going to be to the right after that we set up our buttons one is going to say one two two and three they are going to be saying one two three here and we laid the buttons in a horizontal layout as well after that we will be setting up a vertical layout which is going to be containing those two layouts again to the top we will be having our line edit and our level so the level is going to be to the left and the line edit is going to be to the right down below we will have our buttons so at this point we don't have any stretch applied so they will have the same size as I can roughly draw here this is what we intend to see when we run the application let's go to view and the terminal and we can run again if we do we should see our user interface and let's try to play with it and see what is happening here so if we resize the user interface horizontally you see that the level which is saying some text here is not growing but the line edit on top is occupying all the space down below we can see that the buttons are all growing horizontally at the same rate and this is the default Behavior we have for buttons in the layout let's try to expand vertically and see what happens you see the buttons don't expand and the line edit and the level don't expand vertically so let's try to use size policies on the line edit to simulate the behavior we have by default so what we can do is go to the line edit component here we can say line edit set size policy because this is the method that is going to be setting our size policy and we can tell that Q science policy horizontally I want to expand so it's going to be expanding horizontally we can say it like this but vertically it's going to be fixed so let's do that Q size policy fixed you can say that here and this is going to be simulating the default Behavior we just experienced in a minute let's try to view and the terminal and try to run if we do and we try to expand horizontally you see nothing changes because we are simulating the defaults if we're trying to expand it vertically we're going to see that we're not going to expand vertically but if we want we can set the size policy fixed even horizontal let's see what happens if we do that so we're going to say fixed here if I can type that and we are going to run the application again now we have the application and you see that if we expand horizontally the line edit is going to have a fixed size it's not going to grow whatsoever and this is a setting you might want to do if this makes sense for whatever you are designing your user interface for I am going to turn this back to expanding but another weird thing I want you to see is that you can set your line edit to expand even virtue so we're going to say it's random here and if we try to run again we will see that it will try to occupy as much space as possible vertically you can shrink it it's going to go down but if we go up we're going to see that it's going to be growing vertically and it is still a line edit even if it doesn't look like so so this is where you shouldn't really do that I am doing this to show you the effects of size policies in your applications let's turn this back to fixed you can also apply size policies to the level for now the label is not expanding either horizontally or vertically but we can play with us and really make it to do weird things so let's shift alt down to copy the line we're going to make this apply something on the level and the level is going to be expanding as well horizontally because that's the setting we have here let's see what happens and we can run and it is level with lowercase I think that's the problem here let's run again now it's going to run and you see that the level now is occupying space all of this space you see down here which is gray is occupied by the level and it is growing horizontally as well we can also set it to grow vertically but we're not going to do that you can play with it if you want my intent here is to show you how to use science policies to your advantage and the main intent for size policies is to Define how your widgets are going to behave when the user interface grows or shranks if the user interface grows your widget may decide to grow horizontally or vertically and you can control these properties using site's policies now that we have this out of the way we can focus on stretches stretches control how much space is occupied by each widget in the user interface for example if we run the application again let's do that we see that our buttons are occupying the same space so you can say that each widget is really occupying one unit of space because they are all occupying the same space to kind of simulate the default Behavior we have we can specify a stretch as a second parameter to the add widget method as we saw but we will be using a stretch of one okay so the unit is going to be one and each of these widgets is going to be occupying the same space in the layout this is something we can do let's scale the application here and run it again you're going to see that it is going to be doing exactly the same thing but now that we know about stretches we can decide to choose one widget and tell it to occupy however many units we want so the unit is one but we want the first widget to for example occupy three units with this setting button two is going to have one unit button Loop 3 is going to have one unit but button one is going to have three units let's try and run we expect button one to occupy three times the space occupied by button 2 and button three that's the setting we have here and if our user interface grows you see that that's going to be three times if you measure this you're going to find that out I think it is easier to see it if we set button one to two so let's do that and as we grow now button one is occupying two times the space occupied by the other buttons here you can see that right here this is really all I had to share in this lecture showing you how to play with size policies and stretches use this if it makes sense in your QT applications we will stop here in this lecture and we'll see you in the next one in this lecture we are going to look at the cube read layout component in your QT applications and this is a component that allows you to lay out widgets in a grid and it's really likable so you have a table here which has three rows and three columns as you can see here and the first thing here is going to have an index of zero zero so it's going to be at row 0 column zero this is going to be at Row one column one that should be this thing here if you target this linear it should be at row two zero one two and column two you use these kinds of indexes to Target where you want your widget to show up in the grid layout now that you have the idea let's see what we can achieve with this in this lecture we will be setting up a user interface like this this is going to be a grid but you see that we have the ability to tell a component to occupy more than one row or more than one column and we do this with a property called row span or column span and we do that in code as you see here so here is an example we have our buttons we are setting them up button one all the way to button seven we set up a grid layout component and we specify the location where the buttons are going to leave for example button one is going to be at 0 0 so the first one is the row the other one is the column button two is going to leave at 0 1 button 3 is going to leave at one zero button 4 is going to leave at 1 1 and all the way to button 7 which is going to be leaving at 22 and you might be asking what are these additional parameters you pass when you set up button two and button three well this is because we want to set up a structure like this so suppose we have three rows and three columns let's try to do this as evenly as I can and we want button one to occupy slot zero zero that's going to be this guy here zero zero zero zero column that's the minion and we have button 2 occupying zero one so this is going to be button two button two is way to occupy one row okay the additional parameters are going to be specified the row span and the column span and this button is going to be spanning one row and two columns so button two is going to show up throughout here okay this is what we want to do for button three it is going to be at index one zero so that's going to be our three here but it is going to take up two slots vertically the rose band is two that's what we see here and down below this should be three two if we go to button four it's going to take one one so one one that's going to be our button four and you can keep completing these things as you see but the main idea is that button 2 is going to occupy two columns because we have two as the column span and button three is going to occupy two rows because we have a row span of two hopefully this is making some sense and if you go to the top you see that we are setting up a size policy for button three because we want it to expand in all directions to occupy as much space as possible and that's going to allow us to have a user interface like this that we are after now that you notice we can head over to visual studio code and play with us a little more okay here we are in our editor the current project is going to be living in this folder here grid layout we can grab it and drop it on the Visual Studio code editor and we are going to create our files main.py as usual and we want to do widget that P1 once we have this we will put in our code for the widget usual stuff really make sure you see the Imports we have here you can see them all but we will be needing some of these and we can head over to the main file and put in our starter code make sure this runs so let's bring up terminal and run this and we should see an empty widget now that we have this running we can come back to our widget and actually set up our buttons remember the user interface we are after we have a bunch of buttons so we have button one all the way to button seven here they have names one through seven and we are going to use the grid layout to show them in this widget here so let's go down and make sure we set up our layout here it is going to be a grid layout to be able to use this you need to have imported Q grid layout I don't think we need the horizontal layout here we don't need the vertical layout here if we need them we will import them back but if you have Imports you don't need you can take them out here so do we need to line edit we don't I think let's remove that and we will need the size policy in a minute okay now we have the layout and one thing I want you to see is that we specify the location where the widget is going to show up in our grid layout using indexes like this so we have the row position and the column position after that you may also specify the rows panel like we do for button 2 and button three in this case button 2 is going to take up one row and two columns button three is going to take up two rows and one column and that's going to give us the user interface we want once we have this we can set the layout to the current weather layout and it's going to be grid layout you can do that and I think we can run the application and see our user interface in action let's go to view and terminal and run if we run we will have our user interface you can see that button 2 is taking up space for two columns okay and button three is taking up space for two rows but we can't see this because we didn't instruct this button to expand in all spaces as much as it wants so let's do that we are going to go back to the code and enable this line that sets the size policy to expand in all directions once we do that our button is going to expand and fill as much space as it can and you can see that it is working to our advantage now this is really all I had to share in this lecture showing you how you can use grid layout use it if it makes sense in your QT applications we are going to stop here in this lecture and I will see you in the next one in this lecture we are going to look at the Q checkbox and Q radio button components in your QT applications and these are things you use to let users choose options in your applications for example you may want your users to choose an operating system that they like and you may want to give them the option to choose multiple choices so you can let them for example choose windows and Linux or either of these options another option is to let them only choose one and if you want to do that you may do something like this using radio buttons if they choose one the other is going to be disabled and at any point they will only be able to choose one thing so they can either choose a b or c but they can't have a and b enabled at the same time and this is what we call an exclusive button if you want you may also set up a checkbox to be exclusive and I will show you how to do this in a minute but this is what we are after in this lecture here we will build a user interface like this using qradio button and Q check box here is a simple example of how you can set up nonexclusive checkboxes in your application and the main message I wanted to convey here is that if you want to group a bunch of check boxes you will put them in a group box this is something very crucial to be able to work with these components so we will set up a group box for the operating system that's what I'm in here and we will set up our check boxes we have a Windows checkbox we have a Linux checkbox and we have a Mac checkbox and we are doing some connections here to know when the user toggles the checkbox but for now let's worry about laying these things out once we have the group box we will set up a layout that is going to be shown in our group box and we will be adding these check boxes to the layout this is a bit convoluted but this is really what we have to work with in QT so again we have a group box we have our check boxes and we will be adding the check boxes to the layout that is going to be shown in our group box so we will be adding the windows Linux and Mac checkboxes to the layout and after that we will be applying this layout to our group box this is what we do here and once we do this our group box is going to be kind of wrapping around our checkboxes and treating them as a single unit you can move around if you want to do that and we will see that we can add this group box to other layouts to really have a complex user interface in our QT applications here you see the slots that we will be using to know when the user toggles our checkboxes if they toggle the windows checkbox this method is going to be activated if they toggle the Linux one we will activate this if they tackle the Mach 1 will activate this nothing special here if we go down we will see that we can also set up exclusive checkboxes and the meat of this is to set up a button group again that is going to be logically grouping these buttons together and once you have this button group you can say that you want them to be exclusive by calling to set exclusive and passing in a true value and this is going to make these buttons exclusive once you do this you want to have the option to choose multiple options again we may have something like this for checkboxes and once they are exclusive you can only have one chat you can't have more than one selected and that's the behavior you have with the exclusivity here if you wanted the default exclusive Behavior you can use radio buttons and again they work the same we can have our group box here once we do that we set up our radio buttons we will be adding the radio buttons to a layout okay and we will be applying this layout to the group box that we have here using the line here now that you know this I think we can head over to visual studio code and play with us a little more okay here we are in our editor the folder we will be using is right here so it is an empty folder we can drag it and drop it on top of Visual Studio code this is going to open it up we are creating our main python file and the widget file and we put in our starter code for the widget we can head over to the main file and also put in our code and let's see if this actually runs before we do anything else this is my habit if we run we will have our empty widget and we can start doing our crazy things here let's come back to the widget and remember we are after a user interface like this the first thing we're going to do is to set up this group of check boxes we can do that by coming up in our Constructor and setting up that group I am going to put in the code to save on some typing here and I will do my best to explain this so this is going to first to set up a group box okay as I said it before you can think of a group box as a container of check boxes okay in this case we are interested in check boxes suppose we have three checkboxes in here we are going to put them in a group box and it will be this group box that we move around but to have it set up we have to actually set up our check boxes that's what we do here we have one for Windows one for Linux one for mac and once we have the check boxes we will set up a layout that is going to be within this grouper box here so this is going to be our layout and we will apply the layout to the grouped box this is the setup we have here take a moment to really understand this it is a bit convoluted but once you understand this it's going to be a piece of cake to work with checkboxes and radio buttons in your QT applications okay we have our checkbox but we can't really see it yet let's see what I can do to be able to see this and increase the complexity of our user interface as we go I think this is going to be a good exercise what we can do is set up a layout so let's say layout and we are going to say QV box layout it's going to be a vertical layout we will add our operating system group box to the layout add the widget I want to get autocomplete here because I am lazy so we want to add OS which is a group box and we want to set the layout to the current widget here so we're going to say self set layout and we want the layout applied I think if we run we should see our checkboxes showing on our user interface so let's do this we're going to show the terminal and run and what do we have here no attribute Windows tackled so we have connections that are not working yet let's comment this out because they are going to just give us a hard time here and we can try to run again and if we do notice what we see we have our group books and we have our check boxes and we can check them all if we want or we can check two or we can check one because this is not exclusive so you can have multiple ones selected and once we have these we may be interested in getting the information out of these guys for example if the user checks windows we want to do something in our application to take into account that the user choose the window checkbox here and by connecting to the toggled signal so we're going to set up these slots here let's activate these connections that we did here and I think we can put a space in here to make it easier to read and let's put in these implementations so let's go all the way to the bottom where we have our Constructor defined and we are going to Define our 2 or 3 method implementations notice that we have a parameter how do I know we have a parameter well I read the documentation for the signals for checkbox let's go there to do this together so that you can really see what is going on here let's do Q check box but it is the same thing you have for Q push button so it's kind of a repetition here but I am going to show you that anyway if you look you see that we don't have the signals the same behavior we saw for the Q push button but we can go to the parent class and what this says is that really 2 checkbox has a lot of things it shares with Q push button it just happens to display differently but because it inherits Q abstract button it shares many behaviors with Q push button I want you to keep that in mind let's go to Q abstract button if we go to signals we will see that we have a toggled signal that happens to send a parameter and this is what we are going to catch and to decide whether the radio pattern is checked or not checked this is really cool let's come back to our code and we can look at our method here if checked we will so that it is checked if it's not checked we will say that it is unchecked the same applies to Linux and Mac here we have done the connections so this should work if we run the application let's show our terminal window clear and take out all this garbage we have here and we will run if we check window cells Windows is checked if we uncheck windows it's unchecked let's do the same for Linux you see it works let's do the same format you see it works this is really how you can process this information in your QT applications now that we have this we can set up an exclusive set of check boxes let's go down and do that and I think we can go down below here and say exclusive checkboxes and this is going to be allowing the user to choose ranks this is what we do as an example here and what we do here we will set up a group box okay just like we did for check boxes and we will set up a beer checkbox a juice checkbox and a coffee checkbox we will set the beer one checked by default you can do this programmatically adjust the left in this line to be able to show you this and we will set up a logical grouping of these buttons so that we have the ability to set them to be exclusive so this is how you make them exclusive once you have this you will set up the layout like we did for the other checkboxes we will add them to the layout and we will apply the layout to the drinks group box here once we have this we can add this to our user interface but we will have to change the layout a bit for example we can change this to be a horizontal layout okay we can do this and after this we will add the other group box which is going to be containing our drinks let's copy the name here because I tend to forget these things and mess up so let's do layout add widget and we will be adding our drinks group box if we run we should see this showing up on our user interface let's do terminal and run you see we have our drinks and because this is an exclusive set of check boxes we can only choose one at a given time unlike what we can do with the other one for the operating system so you can choose whatever you want in your QT applications let's show you how to work with radio buttons and the behavior is really going to be the same so we can go down and set up a set of radio buttons let's do that I am going to go down here and do that we have our radio buttons here again we have a group box which is going to group them together we set up the radio buttons we set one to be checked by default and we will set up a layout that is going to be applied to the group box we added things to the layout and we apply the layout to our group box here and if we want we can add this to our I think we put our code here in the wrong spot so let's cut this out we don't want to mess up our layout here so we just go below the group for exclusive check boxes and we will put our code in here sorry for that if it was confusing and we will go down and add this to the layout so we can say layout add Twitter and that's going to be answers I think so let's do that answers and if we run okay we can run the application we will have our fan here if you want we can even achieve what we saw in the slides here so all we have to do is set up a vertical layout and add the radio buttons to the bottom of the vertical layout we can do that we already know how to do that let's come back to our code so what we need to do is to take this guy here out of our horizontal layout and we will set up a vertical layout that is going to be the actual layout of the user interface so let's say we layout equals QV box layout and we will name this horizontal layout to be selfdescriptive here I don't want the code to be confusing good names are really important you should focus on that make sure the names describe what you are doing in your user interface we have the vertical layout so what we do with the vertical layout we will add the horizontal layout so let's do V layout add layout and we will be adding the H layout that we have set up in our code and after this we will be adding the answers group of radio buttons so let's do the layout add widget answers answers and we will be setting V layout as our layout here I hope you can understand this if you don't please go back to the point where we talked about layout in a bunch of Widgets or you can even ask me I will do the best I can to help you out let's view our terminal and we can clear and run if we run we will have our user interface and ladies and gentlemen this is what we set out to do in this lecture I hope you found it interesting we are going to stop here in this one and I will see you in the next lecture in this lecture we are going to look at The Cue list widget component this is a component that allows you to lay out things in a list in a widget so for example you can set up a widget like this and we have a list of things we have one two three we can even add more and we will see how to do that and you can really use it if you need this kind of list in your user interface in this lecture we will see how to set it up so we will set up a class and set up our widget we will see how to add items we will see how to remove items we will see how to get how many items are in our list we will see how to get selected items and we will get the list of items and print them out to really give you a foundation on using this component in your own QT applications this is how we're going to set it up we will have a list widget component and this is going to be our variable once you have it you can choose to set the selection mode and what this really means is whether you allow users to only select a single item or to be able to select multiple items and you can control this using this setting here you can add items using the add item or add items method and you can connect to a bunch of signals to know whether the current item has changed or whether the current text has changed and you can check the documentation to see other signals that are offered by this component down below we are setting up a bunch of buttons to be able to play with this component and you can see that we can also set up a bunch of methods that are going to be triggered when we do things in our list widget for example this method is going to be triggered whenever the current item changes we will be able to print the new current item we will be able to respond when the current text changes we will be able to call this method to add items and really all these methods to do all kinds of crazy things now that you know this we are going to head over to visual studio code and play with us a little more here we are in our editor this is going to be our current project folder it is empty as you can see now let's drag it and drop it on top of Visual Studio code here this is going to open our project and we can create our files so we needed the widget file and we will put in our starter code which is going to give us an empty widget with a title here we can head over to the main file and put in the code that you are familiar with by now and we can view our terminal to try and run the application to make sure this is working as we want let's run it this will pop up our empty widget here the first thing we want to do is to set up our list widget and we have the needed components imported if you go to the top here you see that we are importing Q list widget we can go down and create a variable for this which is going to be a member of this class here because of the self thing we are doing here this is our list widget we need to give it a parent and we say that we want to be able to select multiple items using this setting here once we do that we are going to add items you can either add a single item using the add item method as you see here or you can use the add items method once we have this I think we can set up a layout let's use a vertical layout so we are going to say V layout QV box layout and we are going to say V layout add the widget add the widget that's going to be self with list we get and we will set this layout to be used by the current widget here so we're going to say self set layout and we will use vla out here and I think if we run we will see our list widget with the three items of data that we have added so let's view terminal and run this and if we do this you see that we have one two three and this is what you can do with a list widget now that we have this we can connect to a bunch of signals from cue list widget but before we do that I think it is a good idea to come back to the documentation so let's say Q list we get here and we can look at what it has to offer I do recommend reading as much as you can on this especially if it is the first time you use this component here so come to more look at what you can do with that if you go to the top you're going to see a bunch of signals you can use if we can find them you see we have a lot of signals that we can play with we have a lot of slots we can play with make sure you look at those that interest you and read the documentation to really know what these things do let's come back to our application and we will put in a bunch of connections here once we have the list widgets set up we will connect to the current item changed signal and the current text change the signal and if you want to know what these signals do again use the documentation to your advantage current item changed let's see what happens here current item changed if we go to the signal this property holds the row of the current item they don't say anything about this signal here and this is a bummer this is really bad because QT should say at least something about this but they don't this is going to be triggered when you change the current item in your list widget if you wanted to see a good documentation for QT for example if you think that the documentation for acute for python is lacking in some way you can use the C plus documentation and all you have to do is say queue list widget and say qt6 for example this is going to give you the C plus plus documentation okay I think I should have said this somewhere I will update the course to be able to say that so we have cue list widget if we go down we see the properties let's look at the signals current item changed and at least they say what the signal does this is what I mean when I say that the python documentation is still lacking so if you want you can use the C plus documentation like I do here or you can use the python documentation we have been using all along let's come back to our project and we need to set up these methods that are going to be triggered when these signals are fired we can go down and put in our method definitions you can do that we have current item changed and you see the signal is going to give us the current item the new item if I can say it like that and the current text change the signal is going to give us the new text let's try to run this and see what happens so view terminal and run this and I think the application is still running but no big deal we can run it again let's go to okay so let's run and if we click on one this is the current item if we click on two we see current item and we can click on three to see the current item and they tell you that the current item text has changed so you can use these signals if you want in your QT application okay now that we have this working we can add a bunch of buttons that will allow us to manipulate our list widget for example we might want to add a new item to get to the current item count and things like that let's do that so we will create a bunch of buttons here and I also put in the connections to be able to connect to the slots directly to save on some time once we have this we will add these buttons to our layout so let's do that we will say video add widget add widget should type that button add item this is the thing we can copy this shift out down to copy the line the other is going to be button delete item let's do that delete item we can copy again line that's going to be button item count button item count and the last one is going to be button selected items and once we have this we should see our buttons in the user interface let's see if we actually see them view terminal run the application and the button add item clicked connect itself add item what is going on here we don't have the the method implementations for the slots we are connecting to our signals so I think it is a good time to add them here so what we can do we can come down to the bottom and I think it is a good idea to actually separate this method definitions okay so let's do that this one is going to be triggered when we want to add a new item and you can see how we are adding a new item we are just calling the add item on our list widget component if we wanted to get the item count we call the count method on our list widget if we want to delete delete an item okay we will call the take item method on our list widget and we will give it the character row okay and this is going to remove the currently selected item this is how we are doing these things here if you want you can Loop through all the selected items and you get a list of selected items by calling the selected items method and you can Loop through this list printing each item's text this is how we do this so let's try and run the application now we can clear and run now the application is going to come up okay if we add item you see we are adding a new item this guy is going to be triggered let me make sure you can see this if we click delete item this is going to delete the currently selected item let's make sure the currently selected item is 2 here if we delete two is going to go away if we click one is going to go away and if we delete new item is going to go away and you see that we have a problem because now current item changed is not going to find the current item to print so this is a problem you might want to fix but we're not going to handle errors here you can handle them in whatever way you usually handle errors in your python applications this is really all I had to share in this lecture showing you how to use the list widget component you can use it if you want to show a list of items in your widget applications and you can check the documentation to see more things you can even do then I had a chance to tell you about in this lecture here I am going to stop here in this lecture and I will see you in the next one in this lecture we are going to look at the queue tab widget component this is a component that allows you to set up a user interface like this in which you have multiple parts of your user interface that you want to tell go through for example here we have the same widget shown in two states the first report is going to show this information here the second part is going to show these buttons but you can toggle between these by clicking on these titles here so if you click on information it is going to show this little widget if you click on buttons it is going to toggle to the state down here and you are able to toggle between different parts of your user interface this is good if you want to set up settings for your application for example and there are many uses for this kind of widget we are going to see how to set it up in your QT applications and we will see how to add tabs and how to use components inside separate tabs the first step to working with this is to create an instance of it in your python application so that's what we have right here and after that we will create our sub widgets if I can call them like that the first one is going to show information it's going to be an instance of Q widget and we will put things inside okay so we have a level and we have a line edit and we will set up a layout that is going to be containing this level and the line edit as we do here and we will apply the layout to our widget here we also set up a bunch of buttons so button one through button three We'll add the buttons to the layout and we set to the layout to the widget here once we have these sub widgets we will add them to our tab widget by calling the add tab method as you see right here once we do that we will specify the widget we want to add and the title information for that widget once we do that we will set up a layout that is going to apply to our container widget and we apply the layout to our widget here and once we finish this setup we can run the application and we will see something like this popup now that we notice we can head over to visual studio code and actually do this okay here we are in our Visual Studio code editor the project is going to be leaving in this folder here 12 Hue tab widget you can drag it and drop it on top of Visual Studio code here the first thing we want to do is to create our files so that's going to be mainly.py and the other one is going to be widget.py let's do that we can go in our widget and set up our starter code for the class it's going to be inheriting from Q widget as usual make sure you see the Imports we have here so these are the things we're going to be needing once we have this and we can go to our main file and put in our starter code if you don't want to type this code you can copy from the resource section of the lecture you're going to find the code here you can even download from GitHub if you want to have all the code for the course in one place on your local drive you can use the course however you see fit let's go to terminal and run this and we can run the main file and this is going to give us an empty widget on top of which we can start setting up our qtab widget before we even do anything I think it is a good idea to go to the documentation and look for qtab widget Q tab widget so we can open it for a cute for python here and if you go to more you're going to read all you can about this okay so make sure you read this if it is the first time you use this component here you can see it has a bunch of signals it has a bunch of thoughts you can really do all kinds of crazy things let's come back to our project here in our widget file and we will set up our tab widget so let's do tab widget equals Q tablet and we will pass a current after that we will set up our sub widgets just like we showed in the slide so I am just going to put in the code here first one is going to be information which is going to take the full name of a person and we will store that in the memory of our application after we have the components set up we are going to add them to a layout that we will then apply to our widget here this is going to set up our widget here we will set up another sub widget which is going to be a widget containing a bunch of buttons one two and three here we are just connecting to the button to show you that you can respond to this clicked signal from this button and once we have these guys we can add them to our tab widget so let's go down and do that we are going to say add tabs to widget and we will say tab with it add tab we can do that you see that you can really add a lot of things you can even add action if you want to you know what this method does please use the documentation for now we will just add the tab and the first one is going to be widget form let's do that and the text is going to be information we will add another one tap widget add Tab and that's going to be widget buttons and we can say buttons here you can really put in whatever text you want so why do we have this squiggle here it must be Visual Studio code getting confused now that we have this we will actually set up the layout let's do that so layout equals QV box layout it's going to be a vertical layout because that's what I prefer we will add the things to the layout and what we add is going to be we need to put a comma here okay let's make sure we do that and we put in a closing double coot now we can do add widget and add our tab widget once we do that we will set the layout to be used by our entire widget here so self set layout and that's going to be our layout here if we have this and run the application we should see our tab widget let's make sure we view our terminal and to make sure we can run this but before we do I know a problem we're going to have we have a connection to a slot which we don't have defined yet so let's go down and do that before we actually try to run So Def we Define the slot it's going to be a member and in the slot we print button clicked we can do that now we can actually try to run the application the code is going to auto save now you see we have our tab widget exactly like we saw in the slides you can resize this if we want this is going to be the minimum size by default we can type in something the first let's say John snow or we can change to the other thing click on button one you see our slot is responding if you want you can also connect to these other buttons but again the main point is to show you how to use qtap widget in your QT applications and this concludes what I had to share in this lecture I hope you found it interesting I will see you in the next one in this lecture we are going to look at the Q combo box component this is a component that allows for the user to choose between a selection of items and it is easier to show it than to talk about it so the component looks like this when you click on this little icon this is going to pop up allowing the user to choose something and if they choose something that's going to be the current item in the combo box here this is how you use it you can get to the camera diagram and use the data to do things in your QT application let's see how you can set it up and here is the code you created by using cucumber box just like we do for other components this is going to give us a variable that we can work with in our application once you have the variable you can use it to add items to the combo box and these are going to be the set of things the user can choose through we will use a bunch of buttons to play with combo box for example we can get to the current value we can set a new value to the combo box we will see how to do that and this is really going to set the current value and we will get the values in our combo box we can do things like this and down below we have a bunch of buttons that are going to help us use this and let's take a look at the slots that we will be using to get to the current value we will be calling the current text method and we can also call the method to get the current index if you need that in your QT application we can also set to the current item by passing in the index so we will say the current item is the second item in the list or the item that is at index 2 and because indexes start at zero this is going to be the third item in the list you need to be careful about this if you want you can even get all the values in your combo box and here we set up a simple Loop to Loop through the items printed each item at an even index in your combo box now that you know this we can head over to visual studio code and actually play with us here we are in our working folder the current project is Q combo box you can see that it is empty here let's drag it and drop it on top of Visual Studio code and we will create the files that we need we have main.py the python file the main python file and we have widget Dot py and we will put in our starter code we can also go in the main python file and put in our main code and once we do that we can bring up our terminal window and try to run the application to see if we see our trusty empty widget here we have it let's go back to widget here and we will go down and set up our combo box it is really nothing special you already know how to do that from the slides so we will create create our combobox component we are using self here because we want it to be a member of this class and that's going to give us the ability to call it from methods because we are using a bunch of methods here that are going to be manipulating our combo box so let's do that we have our thing here okay now we have the combo box we have a bunch of buttons that we can use to manipulate the combobox now we want to lay things out so we will set up a layout and use that layout on this widget here let's go down and do that we will use a vertical layout as we always do let's align this properly so we will have our vertical layout we will add our combo box we will add our buttons and we will set this layout as the layout for the current widget let's run and see view terminal like we always do if we run we should see our thing here and now you can look at what a combobox says it is this thing on top which says Earth if we click on this down error we will have an option to choose one of the planets here for example we can choose Mars but we can also use these buttons to manipulate things in our combo box on top here let's put in the methods and I am going to explain them one by one because now you are a master at using QT so many of these things I don't need to explain line by line by typing each one so let's go down and put in our methods the first method is going to be getting the current value and it is going to be using a bunch of methods on the Q combo box class let's go to the documentation and actually show you the documentation for this I really encourage you to use the documentation as much as you can kill combo box and we open this up you can read more you can see the methods the slots the signals you can use to play with us you can really do all kinds of crazy things let's come back to our project so you can look at current text and current index we will use the Set current index method to set the current index and we can Loop through the values in our combo box printing the text and the current index we might be at in our Loop let's view terminal and run the application to see this running we will see our user interface here and if we get the current value and you see that the current value is Earth we can select Mars for example if we print current value it's going to say Mars at index 2 we can select proton if we get current value it's going to say the current value and the index and we are able to do that because of the current value method we have set up here we can set the current value to be something at index 2 and that's going to be Mars if we get to the current value we're going to get Mars we can print all the values we have in our ascent and the indexes and this is working exactly as we want this is really all I had to share in this lecture I hope you found it interesting we are going to stop here in this one and I will see you next time in this lecture we're going to see a way you can design layouts and user interfaces without hard coding them in your python code like we have been doing so far and we will be using QT designer QT designer is a tool that allows us to build user interfaces just by dragging and dropping components and that's going to give us a cool user interface we can just Import in our python code and use it right away the user interface is going to look something like this this is just a simple introduction we will have time to install this tool and see how to use it but you can see the idea here for example to set up this button I did here all I had to do was to drag and drop this UI component on my formula here and that's going to give me a format you can use and you can see we can do all kinds of crazy things on top here you can see we can do a bunch of layouts we can really build all kinds of crazy interfaces using cute designer so this chapter is going to be about using cute designer we will see how to install it we will see how to create these UI files and we will see different ways we have to import this user interface files into our PI site 6 applications and that's going to be really cool once you design your UI files what you will get out of QT designer is a DOT UI file and it is this kind of file that we will be importing in our PI side application one thing you should know is that we have two way to get access to QT designer you can use the QT designer application that comes bundled into your QT installation or you can use cutecreator one thing I have to say which is a bit inconvenient is that we don't have immediate access to these tools when we install Pi side like we have done so far so what we will do in this lecture is install QT which is going to give us access to the these design tools we will install the C plus plus side of QT that's what we are going to install here and that's going to give us access to QT designer and cute Creator to install QT all you have to do is come to your browser and say QT download that's going to give you a length looking something like this let's open it okay once you are at the QT website you can see we are at qtio slash download once you are here you will click on download try and on this page here we can scroll all the way to the bottom and say download for open source users because we are just interested in the open source version of QT so click on go open source here and once you are on this page you will scroll all the way to the bottom where it says download the QT online installer and you will click on this button they are probably going to detect your operating system once they do you will come all the way to this the location here and hit download and this should start to download in the QT for you here you can see that it is downloading from me but I already have this so all you need to do is to wait for this to download open this file and let it install QT once you have that file downloaded you will double click on it or click on it to start installing QT once you do that you will get a user interface like this asking you to login so if you don't have an account you will create it once you have your account and your credentials you will just hit next here and you will go through a series of steps helping you install QT one thing I should say is that if you get a list of options telling you what you should install make sure you click on custom installation that's going to land you where we are about to go in a minute I can't really show you the exact steps because I already have QT installed on my system here so I am going to do the best I I can to guide you through this but if you choose custom installation and then hit next you are going to land in a place like this once you are here I want you to click on QT and if you click on that you are going to get a series of options make sure you choose the latest version the latest version at the time of this recording is qt640 as you see here that's what I am going to choose I am going to expand that and I am showing you the steps here for Windows and they are going to be similar for Linux and Mac once you are here on Windows you can either choose minty W here or msvc I do recommend using minty W because it is hassle free it's going to be easier to install this if you use msvc here you will need to have the Microsoft Visual Studio IDE installed so if you don't want the visual studio thing just use mintyw here it is going to give you everything you need if you are on Linux you are probably going to see a GCC version here if you are on a Mac you are going to see something saying clang or whatever so make sure you check one just like I have minty W checked here and you are going to click on this button that says next door install or something once you do that you will keep hitting next until you start installing you will age for QT to be installed and at the end you will have a QT installation on your system one thing I should say is that mine is installed in cqt which is going to be the default suggested by QT so after you install QT you will have a cutie folder in your C drive or wherever you instructed the installer to install your QT files on your system okay once you have it installed on your start menu you will have an option to start QT creator you can see I can start it here let's start it to show you how it looks okay this is how QT Creator is going to look if you start it up you can do all kinds of crazy things but at this moment we are interested in using QT designer which is bundled into QT Creator if you start QT designer we also have the option to start it let's say designer and if we do we will have designer whatever the version you have installed so if we started we will have it pop up on our screen and we can start using it and this concludes what we set out to do in this lecture here introducing cute designer and showing you different ways you can have access to it you can either use QT designer or QT Creator and we were able to get access to these things by installing QT just like we did in this lecture here we are going to stop here in this lecture and I will see you in the next one in this lecture we are going to see how to work with QT designer and we have access to this because we installed qt in the last lecture which gave us access to either QT designer or acutecreator what we will be doing in this lecture is to try and create a user interface like this it's a simple form allowing the user to type in their full name and occupation once they do that they can click on the submit button and we can grab all this information and use that in our python application or a pi side application whatever you might want to call and once you have this information you can use that in your Pi side application so let's start the QT designer to start it you come to your starter menu whatever start menu you have on your operating system we can type QT for designer I think that's going to give us access to this once you start it it should show up like this it is going to show you a window that lets you create a form we may choose not to use this because I wanted to show you around so I am going to click close on that and what I want you to see is that we will be storing our files into this folder in our source code saying using QT designer so make sure you have a location where you will save your user interface files and to create a new form all you have to do is come to file new and you see this is going to give us back that user interface we had so let's see the options we have down here so we can create a dialog with buttons at the bottom we can create a dialog with buttons to the right we can create a dialog without buttons or we can create a main window or a widget you can see that we can create a lot of things I think I am going to go for the dialogue without buttons because we will be putting in our own button remember the design we are going after it is something like this so this is just going to be an empty form a dialog without buttons on top of which we will be building our own user interface let's come back to designer okay we're going to choose this so let's click create Metro you have dialog without buttons selected here and you will click on create here so let's come back it's going in our dialogue without buttons create this is going to create our file and once you have this thing created uh we don't want to create a dialogue for what we want because if you go back to our user interface here this is not a dialogue really we want this to be some kind of widget so let's go back and make sure we create a widget because it is important which class you start by so let's discard the changes that we had and we want to create the widget sorry for that make sure you create a widget here and come back here and say create that's going to give you a widget and one thing that is really important when you create your user interface files like this is to remember the object name for your top level widget here and in this case you can see that it it is called the form we want to go back and call this widget just like I did here make sure you name yours with it and we can start doing our thing if you remember we have a bunch of levels and line edits in our user interface that we are after here you can see that the thing we have on the left here is a level and this thing is a line edit and it is the same on the second line here and this is a button let's make sure we add these things into our designer user interface if you want to search for a component you can type the name here we are looking for a label so you see if we type a lip here we're going to get level you can drag two levels because they think we just need the two you can close here by clicking on the X that's to the right of this component here and down below we can grab the button and put it on our user interface we also need a line edit let's type line edit and you see we have it right here we can drag one here and we can drag another one here and we have everything we need in our user interface we can name these things so let's say full name okay we can type in whatever we want and the other one is going to say occupation if I remember correctly down here we are going to say submit in the text and I am just double clicking in these components to have the ability to type text so nothing really complicated here and now that I have my components here the next important thing is to name the components that I think I will be using on the python side of my application here and I will be using these line edits and the submit button so the user will be able to type text in here and I want to be able to grab that text on the python side and I want to know when the user clicks on this submit button here so let's name our thanks I am going to click on either of these and come to object name in my properties to the right here so this one is going to be named full name line edit okay so the other one is going to be occupation line added and the other thing I need to name is my submit button okay make sure you remember these names and at any point you can open this file here and look at this if you click you're going to see the object name to the right in the Tuple here so you can see your object name here if we click the other one we can see our object name right here if we click on the button we can see our object name right here and as I said before make sure you name your top level widget in this case it is named widget here and this is going to be important when we get to the point where we load this on our python side so this is really important once we have this user interface I think we need to put in a bunch of layouts and it is really easy to use layouts from QT designer for example we wanted the full name and the line edit here to be laid out horizontally so we can click on full name and our line edit while having control selected so we can select them all all or we can even click and drag and make sure we have them selected here we can do something like this once you have them selected you can come to the top here where you have these buttons the first one is going to help you lay things out horizontally the second one is going to help you lay things out vertically we want to lay out horizontally so we can hover over this button you see it says layout horizontally if we click on it these guys are going to be aligned horizontally in a layout we are going to do the same for occupation and the line edit to the right of that we are going to put them in a horizontal layout and we want to click on the form here and lay everything out vertically because that's the user interface we are after so click somewhere empty on the form come to the button that says layout vertically if you click on it things are going to be laid out vertically and we can resize our user interface to make it really look nice here I think this is good and we have our user interface so you can come to file and save it and you are going to choose the location where you want to save yours okay this is where we want to save our file we will give it a name let's name it widget dot UI we can do something like this and if we save it is going to be saved and we are done with our design of our user interface here okay now that we are done with this we are going to head over in the next lecture and show you how you can do the same from QT Creator and after that we will worry about importing this user interface for use in your Pi side application that's going to be really cool so I will see you in this lecture in this lecture we are going to look at how we can load our user interface files into a python application there are different ways to do this as I mentioned in a previous lecture probably but we will be looking at a class called Q UI loader which helps us do that let's go to the documentation and actually see what this class does you can come to your research engine and say hi site sucks loader if I can type today this is going to give us a link we can click on and if we go there we're going to learn or we can about this class here they show a little example of how you can use this we will be running a version of this example in our PI side application but make sure you read about this class to know what it does let's come back to the slides and really look at how to use this so to use this class you have to make sure you have imported Qui loader like we are doing here once you do that you will create a loader object just like we do here once you have a loader object all you have to do to load your UI file is to call the load method just like we are doing here so the first parameter is going to be your UI file and what this says is that in this example here we will be putting our python file in the same location as our user interface file if your user interface file lives in another folder you will have to tell your python file to go to that location and find the UI file that's something you need to know and once we call the load method here we will get a widget that we can then use in our application like we use any other widget another thing worth mentioning is that to access things into our UI file we we will be using the notation here notice that we are saying full name line edit because it is the name we used in our UI file remember the object name that's the name you have to use here and then we say dot and access properties of this UI component you see we are doing the same for our occupation line edit to access the text another thing we can do is connect slots to signals coming from the user interface for example here you see that we are saying whenever somebody clicks on the submit button in our window object we want to respond in our do something slot that we have defined on top here and once you have this you will show the window you will call the exact method to kick off the event Loop and your application is going to show up and do things one thing I wanted to warn you about is that the loading that we are doing here is happening at runtime and what that means is that your application will be paying a performance penalty every time the user runs your application that's why I am really not in favor of using Q UI loader to load your user interface files because the penalty is going to be on your users and you will be wasting their time there is a better way to do this and I will show that in the next few lectures but for now you need to be aware of Q UI loader I think Q UI loader can be useful if you are prototyping and things like that but in a production application you shouldn't really use this at least that's my opinion here okay make sure that you know that q u i loader is going to make your users pay the price every time the application runs now that you notice we are going to head over a 2o editor and play with us a little more okay here we are in our editor which is Visual Studio code this is the folder where we will be doing our things here the first thing I want you to do is to make sure that I put my UI file in this project here we can either use the one from QT designer or QT Creator let's grab the one from QT creator doesn't really make a difference they are the same so I am going to put in my UI file and once I do that I will open this project in Visual Studio code let's do that okay the project is opened you can see that we have our UI file what we want to do is to create our main Pi file first thing we want to do is to make sure we import the components we need and we import cute widgets because we will be using the widget that q u i loader is going to load we create our daughter object nothing special here next we go down and create our application instance so it's going to be a queue application object that we call app here we will have a widget or a window that we get by loading our our user interface file it is not called user data UI it is called the widget.ui so let's make sure we correct this a little bit once we call the load method this is going to give us a widget that we can manipulate in our application here we can go down and Define the function that is going to respond when the user manipulates things in a user interface so this is a do something function again it is going through our window object to access the components we have in our designer form let's make sure we open designer because ah we still have this opened in QT Creator so if we go to the line edit again you can come to the object name here and see the object name this is what we will be accessing from our python application so let's make sure we know that let's close out of QT Creator here and we are setting up our window type title on our window object and hopefully this proves that this is a real widget that we can manipulate like we have been manipulating the widgets that we have created ourselves and this is really cool okay let's go down and finish this up we will connect and respond when the submit button is clicked then we will show our widget here and kick off the event Loop so the real meat of this is where we create our daughter object this is how you create it and the other thing is where we load our widget UI file and that's the line here what we call the load method we will be getting a window object which is really a widget and we can do things we are used to do on other widgets for example we can set window title we can access things using the dot notation like we do here and this is really cool now that we have this we can actually try and run the application here let's show a a terminal window like we always do hopefully this is going to work it's not going to blow up in our face fingers crossed and we can go up and try to run our python file and look at this look at what we have here full name occupation let's put in Daniel gray for our full name occupation let's say I am a farmer and if I hit submit Daniel gray is a farmer let's say I am a plumber Daniel gray is a plumber and this is really cool we are able to use our UI file from our python file but again every time the user runs the application notice what's going to happen you know this widget UI file is going to be transformed into Python and the python is going to be loaded into this file here all of that Machinery is going to be really going on when your application runs and this is going to make your users pay a performance penalty whenever they run your application so this is really not good but you need to be aware of this in case you have a logical use case for this this is really all I had to share in this lecture I hope you found it useful before I go make sure you remember your object names it is through these object names you go to access components from your UI file in your python application here this is really cool in the next lecture we will try to reorganize this code in a separate file to make it really easy to manage and play with this a little more so I will see you in the next lecture in this lecture we are going to reorganize our code using Q UI loader and Export that into a separate class so that our main python file is a bit cleaner we're not going to do anything special really it is the same thing we did in the last lecture but here is our loader object that we create in a separate file we will set up a class that we call user interface that is going to be inheriting Q object because we need to connect signals to slots that's why we need to do this and then in our Constructor we will be doing our loading we will set up a UI object that you see here which is a member of this class this is really going to be a widget that we get by calling the load method like we did in the last lecture once we do that we set our window title we do our connection to the button and we set up our slots that is going going to respond and this is really all we need to do here another thing is that we have a show method that we are going to call to make this user interface show up nothing special here once we have this class we will import it in our main python file you see we are creating an object of it like we do here and we are showing it and once we created the wire end to the actual UI file is going to be done in the Constructor by the time we call the show method here the entire window is going to be set up and we will see it pop up on our screen nothing really special here we are just reorganizing what we already had in the last lecture but let's head over to our editor and actually do this okay here we are in our editor we will be working in this folder here you can see that it is empty before we do let's head over to the lecture where we created our widget file and steal it and put a copy of that in our current folder here once we have this we will open this up in Visual Studio code and we will create our main python file so let's make sure we do that okay plus main.py we also need the user interface file let's say user interface dot py which is going to be doing the heavy lifting and bringing in our user interface file that we got from cute designer in this case I am just going to paste in the class because you already know most of these things we will be importing Qui loader once we have it imported we will go in our Constructor and load our user interface file in this case our user interface file is named widget.ui okay so make sure you correct this a little bit we will give it a window title we will make the connection to the button that is coming from our user interface file again we know it is named submit button because that's what we set up in our designer file so let's bring up designer because I think I really need to show you this okay let's close out of this and we will open our current location we go in we can drag our widget file and drop that on top of designer if we go to the submit button it's object name is submit button just like you see here it is this exact name that we have to load in our python file so this is submit button if we go back in designer submit button if you go to the full name line edit the object name is right here so if we come back to our file we should be using that exact object name in our file make sure you really follow this if you mess these names up you're going to be in for a lot of trouble now that we have this we can head over in our main python file so let's do that okay we can put in the code and we will be importing Pi site 6 and we will be importing our user interface class from our user interface file once we have all these in we create our application object we will create our window and it is going to be an object of our user interface class this line is going to trigger a call to the Constructor that we have here and the Constructor is going to be doing the heavy lifting to load our widget UI file and give us an object called UI that we can manipulate in our application here again the loading here is still happening at run time make sure you know this this is going to incur a performance penalty to your users and you don't really want to do that unless you have a really good reason to use this way of loading your user interface files now that we have this I think we can try to run the application and see how it behaves we can show our terminal and we can clear and if we run our python file we should see our thing here exactly like we did in the last lecture if we put in our full name and our occupation let's say we are farmers farmer submit we have farmer if we put in Plumber just like we did in the last lecture we will get to the same thing and this is really all we set out to do in this lecture now that you know how to use Q UI loader we will head over into that structure and show you how we can actually compile our user interface file into python code and that's going to really take the performance penalty and put that on you the developer so you will take your user interface files and turn them into python file and their users will be loading those python files when they run the application and that's going to be much better let's head over to the list lecture and do that in this lecture we are going to see how to compile our user interface files into python code that we can directly Import in our python project and the command to do that is really simple it is what you see here we have a tool that we have access to because we installed Pi site 6. the tool is called Pi side 6 Dash UIC once you call it you will give it your widget user interface file and you got this file from a designer or QT Creator you will put in this arrow and then you will specify the output file name and at the convention I like to use is to say UI Dash and say the name of the file that I got from designer or QT Creator so in this case it's going to be UI Dash widget dot Pi file and this is going to be the file that we get out of this user interface compiler you can say you IC stands for user interface combiner so if we run our designer file in UIC here we will get a file named exactly like this and this is a convention I use to make it easy for me to manage these files especially if you have a really big project it can be really hard to keep track of this so make sure you understand this naming convention once you understand it you can modify it to suit your own needs another thing I would like to warn you about is to remember the name of the top level widget you have in your user interface file in our case we named that widget exactly like this and when we do that the user interface compiler is going to generate a class that we can then load in our own python code and the conversion the UIC compiler uses is to say UI Dash widget this is going to be the name of the class and this is what we will try to manipulate populate in our own python code and make sure you really drill this in your brain because if you don't you are going to have mismatching names either in your user interface code or in your python code make sure these things match up another thing I noticed when using this in Visual Studio code is that the files that I get out of my user interface compiler were encoded in utf16 and the visual studio code would not understand this I will show you how to bypass this but I just want you to be aware of this if you face this problem here and if you are using a different editors you might have to do research on how to get around these problems and again make sure you remember the convention we are using here the widget that UI file is going to be what we get from QT designer or QT Creator the design file once we pass that file into the user interface compiler we will get a you I Dash widget.py file this is a file generated by the user interface compiler you have no business manipulating it manually and our widget.py file is going to be our own class which is going to be trying to reuse code that was generated for us by the user interface compiler make sure you really understand this convention I will be going through this convention again when we hit Visual Studio code in a minute but I just want you to be aware of this once we have our file generated we will set up our own widget class like this and again this is just a simple widget we are creating this is our own class name it is going to be inheriting both Q widget and the UI widget UI widget is the class that the user interface compiler is going to generate from your UI file again this is going to work because our top level widget that contains our user interface is named widget let's go back to designer and actually show you that I think we still have designer opened if you manage to click around on the lobbying form here you will see that our object name is widget and the user interface compiler is going to pick this up and generate a class that is named UI widget and it is what we are trying to inherit from here I really want you to notice this if you have problems with us it might be really hard to debug so once we have inherited the correct class we will go in our Constructor and because we are inheriting from UI widget we have the things that UI widget has and those things are our submit button we can access it like this our full name line edit we can access it like this and our occupation line edit and we can access it like this again we know the object names because they are what we set up in our designer file let's make sure we open this in designer if we go to the full name line edit the object's name is right here if we go to the occupation line edit the object's name is right here if we go to the submit button the object name is going to be right here for everybody to see make sure you really know these things I don't want you to face problems if you went through this course to learn about Pi side 6. okay once we have events set up we will also set up our slot which is going to respond when the user clicks on our button and the connection is going to make sure that whenever somebody clicks on the button we will be called and this slot here nothing complicated so far and one benefit of doing this is that this is going to be making it easy for your users you went through the trouble to transform your user interface files into Python and the user is not going to be paying that price you the developer will be paying that price and it is really good because you develop your application once and your users will probably be running the application a thousand times or even a million times depending on how successful your application is so if you move the price at the developer time you will be really saving your users a lot of time with the Q UI loader every instance of your application that runs would pay that price but now we are paying that price once when we develop the application that's the benefit of doing things this way okay now that you know this we can head over to visual studio code and play with us a little more okay here we are in our project this is going to be our project folder here it is empty so what we need to do is to steal the UI file that we will be using for this demo here so let's put this in place and I think we can directly open this in Visual Studio code so let's drag this and drop on top of our editor here this is going to give us our project we need to create a few files remember our Diamond convention we need a python file which is going to be the main python file let's do that we will also need to set up a widget dot py file which is what is going to be important things generated by our user interface compiler now that we have the UI file the first thing we need to do is to compile it to python you already know the command because we saw it in our slides but I am going to show that again right here so let's show our terminal and make sure you see everything here let's clear I am going to paste it in the command but you can type it if you want the command says Pi side 6 Dash UIC after that we will specify the input file which is going to be our user interface file that we have here in our folder we will specify an angle bracket facing right this is how we use this tool and you can say the output file right here in our case it is going to be uiwidget.py once you have this typed in correctly you can hit enter the tool is going to go to work and it is going to generate a uiwidget.py file that you see generated here if you want you can even open this in Visual Studio code so let's make sure we click on it and you can see the things that are generated for you by the user interface compiler they say that this file was created by the cute user interface compiler this is the version they warn you that changes to this file may be lost to the next time in the user interface combiner is run but you can browse through it it is really a simple class it's just doing the heavy lifting of generating these layouts and things for you so that you don't have to worry about it if you go in you will see our object names for example you see full name line edit we see occupation line edit if we go down I think we will find our button and these are things we will be loading in our python code one thing I want you to notice though is that this was generated in a UTF F16 encoding Visual Studio code is using utf8 if I try to run this I will be into problems so I will fix this in a minute when I show you the problem but I just want you to notice this here okay we have our UI widget Pi file again in a dynamic convention we are using files we name like valves are going to be what we get as output from the user interface compiler files we named like widget.py like this are going to be our own code that uses what we got from the user interface compiler make sure you really understand this and widgets that UI is going to be the file we got from UI designer I know this may be confusing but once you do this a couple of times this is going to become second nature let's set up our own widget Pi file and I am just going to paste that in here because I don't want to waste your time typing this it is going to be a class that inherits both Q widget and UI widget this is super important we set up our Constructor which is going to call the set UI method and this is a way QT provides to wire to the class that was generated for you you don't have to worry too much about this just make sure you put in this call once you do that you will have access to everything we had in our user interface file for example we can set up the window title because this is a widget we can access the submit button like this we use the self thing here because now that's part of us because we are inheriting from UI widget and UI widget is named like this because our object name is Widget the top level widget is named widget if we go back to designer that's what we should see here let's click on the top level with it again make sure you see this object name here this is important this has to match what you have after the UI Dash here this is how the user interface compiler is going to do things so once we have everything we will set up our slot and everything is really going to work once we have this we can go to our main main dot python file and we will put in the code which is not going to be anything new so we will create our application object we will create an instance of our own widget this is really important so notice the class is named widget we are creating an instance of it and this is going to show our user interface because we did the wiring in the Constructor of our widget class here now that you have all this done we can try to run the application and a warn you it's not going to work at this point but let's try to do that so we can say python main.py and if we try to do that we will have an error what is it saying uh source code strength cannot contain null bytes and this is happening because our UI widget Pi file was generated in any coding that is different from the one that is being used by Visual Studio code here so what we need to do in our case we can click on this utf16 thing down below once we do we will have a menu on top here in Visual Studio code and what I want you to do is to click on save with including and we will be using utf8 here once you do that the thing below here make sure you see this it's going to change to tf8 and now if we run the application it should work let's come down play yarn and run our thing and now it is working we are able to compile our user interface code into python code and loading that python code in our own application and this is really cool we can put in our full name to make sure that our connection to slots and signals are working Daniel gray occupation is going to be a farmer and if we submit you see he is a farmer if we change to plumber he is going to be a plumber and this is working exactly like we want and again the mid of this is to be able to call the user interface compiler the command is what we have here make sure you remember it or have it typed somewhere where you are able to access it easily once you have your python codes generated make sure it is in the correct encoding at least if you are using visual studio code once you have it in the correct encoding you can import the code in your widget.pi file and create your class like we do here once you have your class you will do the necessary connections to manipulate the user interface components remember these are the objects names we have in our designer file once you have your class you will create objects of it and you will play with it however you want we are going to stop here in this lecture and I will see you in the next one in this lecture we are going to look at how to use the cute resource system and this is a powerful system that allows us to bundle files into our python application so that they can be found easily without having to need to put them where our main python binary or script is and we will explain this concept using this little application here so we will have a minus button and a plus button when you click on minus we will decrease the number that we have here when you click on plus we will increment the number and this is going to be a spinbox component I don't think we had a chance to talk about it but you're going to see it as we go in this chapter here the main point is to be able to load the icons for minus and plus here from our QT resource system in this lecture we will be doing things manually from QT designer to show you how to work with this and here is a simple piece of text saying the same thing I just said here but one thing you should keep in your mind is that the files in your resource files are going to be compiled into python code and that's why it is possible to directly find them where your main python script is without having to need to browse through the file system where your python code is running and this is really important but again it's going to incur a price on you the developer to have to compile your resource file into python code and you're going to see that it is really easy we use a QT resource compiler and it's really easy you just have to call the command and you will get a python file that you can then load into your Pi side project the workflow we will be using here is to create the resource file of course you also need to create your user interface files you're going to be needing we will compile the resource into python code we will import the python resource file into our own python application and we will be using that in our application here here I am showing you how we will be doing this in designer so once you have designer opened you will click on this button here this is going to pop up this little widget in this widget you can create a resource file using the menu here and you can add the files to that resource using the menu here I will show you how to do this in a minute when we hit our designer instance once you have your resource file created the file is going to be named resource.qrc this is an extension that Designer understands QT designer I should say and you will run this command Pi side 6 Dash RCC you will give it the resource file you will say that your output file name is resource underscore RC Dot py and it is important to follow this naming convention because other tools like QT designer are going to be looking for it so make sure if your file is resourced to name the output python file resource underscore RC you basically have to add an underscore RC on this then here and this is going to work once you have your python file that you generate you will need to import that in your python project and all you need to do is say something like this and you will be able to use it notice that this is our own class named widget it's going to be inheriting from our UI widget file and it will be accessing the buttons so we are making connections to our buttons just like you see here and we will be setting icons to these buttons and you see we set up the icons like this and the mid of this is what we do here to access our images notice the syntax we use colon backslash images backslash plus this is because our images are going to be leaving in a folder named images and once you follow this convention here everything is going to work we have the plus icon we can set it to our button and our user interface is going to show up exactly like we want okay now that you know this we are going to head over to visual studio code and play with us a little more okay here we are in our project the project we work on is going to be seven resource manual designer and this is where we're going to be playing with this the first thing we need to do is to create our user interface in designer so let's make sure we have designer opened open it if it's not opened for you and we will be creating a new project or a new file it's going to be based off widgets here so let's create this is going to create our user interface we will be creating our user interface a lot of times here because you need to be familiar with us so let's do this we need two buttons the first one is going to be on the left the other one is going to be to the right we need a spin box and we will be using a regular spin box why not we will have the button to the left named minus button so we need to change the object name here and we name the other one plus button okay the one on the left is minus we can change the text let's say minus and say plus to the right here let's look at the object name for our spin box it is named spinbox let's name it spin box with an underscore because this is our naming convention and make sure the object name for the top level widget is widget because this is our conversion layer widget and we have our user interface I think we can apply a horizontal layout immediately by clicking on the empty form and clicking this button here and we can resize this okay to something like this and we have our application here okay we have our file here we can save it let's say file save and we will browse to a location where we would like to save this it is in our project here so we will name it resource or widget.u I not resource sorry for that so we save this on our drive and we have this thing saved once we have this saved we will also create a resource file and we can close this now we don't need to close it because we need an active resource file to be able to create our resource file this is unfortunate in a designer so let's open this again we can go where we saved it sorry if this is a bit convoluted but it is what we have to work with so let's bring this back once we have this created we can head over to our designer we will have a little button like this okay make sure you see this I am going to click on it it is going to pop up another window and on the left here we have the option to create new resource files so let's click on this button here that says new resource file it's going to browse into my system where I want to save my resource file I am going to choose this location here and name it resource.qrc I think the extension is going to be put in automatically when I save the file is going to be saved if I go back to my location I am going to have my file where is that where is it where did I put that file let's try to hit OK and see if this is actually going to save my resource file or I put it in the wrong location yes we have the file here because we closed that so it must be designer that was having problems saving my resource file now that I have the resource file created I can move over to the right here okay and add the prefix a prefix is really like a logical grouping of files into your resource system for now don't worry too much about this click on ADD prefix and take out everything to have a default prefix that is to the root of where your resource file is that's what we are doing here so let's hit enter this is going to give us a no prefix then and once we have a prefix we can add new files I am going to click on add files and this is going to browse it to my location I can go in my images folder don't worry I will be giving you this images folder you can use it in your project you can actually download the source code and you will get that as part of what you download select everything here and open and these things are going to be added in your resource file once you hit OK you will see that these files are going to show up to the right here and you can right click and copy path okay and this is going to give you a path that you can use in your python code so let's make sure we open notepad and paste that here so that you can see it you can see the path we will be using in our python code okay now we have two things we have a user interface file that we need to compile it to python we also have a resource file that we need to compile it to python now we can come out of the editor the designer editor and come back to visual studio code and what do we do we can go to where our project is number seven here and we can load it into Visual Studio code and the first thing we need to do is to compile our user interface let's view and show the terminal I think we still have our Command to compile our widget UI into python it is right here I just got it by hitting up up if you don't have it you can type it if I run it's going to compile my python file that you see here and remember to turn this to utf8 if you are using visual studio code so let's do that you already done this from the last lecture so we are ready to do this and we need to compile our resource file into python as well again I will be giving you the command here I am going to paste it in pi side 6 Dash RCC you get to this as part of your Pi side 6 installation and I will give it the resource file you need to compile you will say Dash o and say the output file name the naming like this is important because your other tooling like designer are going to be looking for that so make sure word that you attach an underscore RC to whatever name you have for your resource file here and once you have this you can hit enter this is going to compile the file this is the output python file you can see that this is binary representation for the files that we have in our resource file now that we have this lens we can actually create our python files we will need a main python file main.py as usual we also need a widget py file I will put in my widget py file immediately here because I don't want to type all this you can type this if you want but you can also download the source code and use it as is here the main point is that you know how to work with resource files in your python applications so notice that we have a squiggle because our widget file starts with an underscore okay so UI widget.py that's what we are importing from we will create our own widget which is going to inherit Q widget and UI widget we will set up a window title we will access our plus button and minus button and we will be setting up our slots that are going to respond whenever something changes in spin box let's change this to say self spin box because I think we named our thing using let's go back and open recent forms that's going to be widget UI and our spin box is named user and underscores make sure you don't mix these things up so spin underscore bucks that's the name spin underscore box that's going to be our thing here and whenever you click on plus we will be incrementing the value in our spin box whenever you click on minus we will be decrementing the value in our spin box that's what we are doing here but the main thing is that we are setting up an icon that is using things in our resource file and we are able to do this because we imported our resource underscore RC file that we got as a result of compiling of a resource file into python make sure you really understand this now that we have this we can create our main python file and it is not going to do anything special it is just going to import things from our widget file which is named with an underscore let's make sure we change that and we will set up our application object we will create our widget and we will show it and everything should work at this point here before we do that let's make sure that our UI widget Pi file is in utf8 it is so let's try to run this we are going to go to view and show terminal and we can go down and go up up up until we see our Command to run the code and let's see what we have here we have a mismatch for a spin box with camo case here where is it in our widget Pi file line 12 so let's go there widget.py line 12 is trying to use the wrong name for our spin box let's make sure we fix this and uh let's try to run again view terminal and we can clear and try to run and if we run you see our application is up here if we click on Plus and we still have problems with our spin box sorry for this but it is something you come across so no problem here the important thing is that we can fix it spin box and let's make sure we run again clear and run it's going to run if we click plus we are going to increment if we click on minus we are going to decrement and everything is working and the meat of this is to be able to load these files from your resource system and some of you might think why go through the trouble to use the resource system it is really important because you don't have to provide these files where your main python file is if you deploy this application to your users and this is really important make sure you take advantage of this in your Pi side applications we are going to stop here in this lecture and I will see you in the next one where we're going to be using QT Creator to create these resource files here so I will will see you there in this lecture we are going to see how to use resources in the QT resource system from your user interface files and this is going to save us from doing what we did here for example by having to manually set the icons to buttons we can avoid this kind of thing and do it right from our user interface files in this case we will be using designer so let's head over to visual studio code and actually set up a project that is going to help us do that and another thing I should point out is that you don't even have to manually import this file in your python project because you will have done this from the user interface file but make sure that you still have your resource file compiled into python because the UI file is going to be looking for that and it will be looking for a name in conversion like this from your resource files so let's head over to visual studio code and do this okay here we are in our editor we will be loading resources from our user interface file and we will be working in this folder here I think we can still code from the last project and use that as our starting point here okay we have the UI file and the resource file we also need these images so let's copy that and put that in our nine project here once we have this we can bring this into Visual Studio code by dragging and dropping here and what we want to do is to go to our python file and take out the import we are doing here we don't need this anymore and we don't need to set the resources like we are doing here because our user interface file is going to take care of that so let's open our designer file and again make sure that you do this once you have a resource file like the resources that Q RC file we will open our user interface file in designer so let's make sure we have designer up and running designer and we can run it and we will hop over to the current project on my file system number nine and drag and drop the design file here so once I have this I can click on this button and I will have a bunch of properties for this button here but before I do that let's make sure that I have a resource file applied to this UI file so what I can do is come to add a resource file let's open a resource file that is already existing so I am going to browse to the location of my project here on my system let's do that let's go there designer number nine that's the current project and we have a resource file that we can open here let's open if we open it it's going to show the images that it has and this is going to work just fine let's hit OK and once we do that we will be seeing our images and the current UI file is ready to start pulling resources from this resource file here that's why we need to do this connection here once we have this we can click on our minus button I think we will have an icon property we can even search by going to the top here and say icon okay we will find icon here and once we have icon we can click to the right here click on the three dots now we don't need to click on the three dots we can click on the downward error here and we can choose resource once we do that we're going to click on images and we can click minus once we do that the minus icon is going to show up we're going to repeat the same process on the plus button click on the down arrow choose resource click on images and on the right here you can choose plus and this is working because we made the connection between the widget UI file and the resource file that we have on in our path here once we have this we can save so let's save this again and because we just changed our user interface file we need to recompile this into Python and this is something I want you to be aware of every time you change your things in your user interface files you need to recompile them into python files so that the python side of your application can pick up those changes so let's come back to visual studio code we can really close out of QT designer here we don't need this anymore we can come back to visual studio code view our terminal okay and we can clear and go up up to compile our user interface file into our python file and we will be using the user interface compiler notice that we don't even need to recompile the resource file because we already had that but if you don't have a resource file or if it is the first time you set up your resource file you will need to compile that into python code I am going to show you why in a minute once we see our newly generated UI widget that Pi file if we go there the first thing I want you to notice is that the the encoding has changed back to utf16 because this is a newly generated file so let's make sure we go back and change this back to utf8 okay we need to do that and another thing I want you to see is that this file is going to be doing the import for you because it is the one that is doing the setting of the icons on our buttons so make sure you still have your resource file compiled into python code and make sure you use this name and conversion here you see that QT designer or the user interface compiler to be exact is looking for this and you need to follow this conversion for things to fall in place and work so our python file should be clean now it is not important things it is not setting icons but our application should still work let's go to view the terminal and clear and run if we run we should see this coming up here if we click on plus it's going to increase comment if we click on minus it is going to decrement and everything is working as we want this is really all I wanted you to see in this lecture how to connect your user interface files with the resource files make sure that whenever you change something in the user interface file you recompile to python for the python side of your application to pick up the changes and use them I am going to stop here in this lecture in the next one I will show you how to do the same from cute Creator I'll see you there in this lecture we are going to design a slightly involved Q made window application which is going to be using resources intensively we're going to have a chance to play with the menus and toolbars and we will be able to use the images that are coming from a resource file that is going to be attached to our user interface file we're going to be building something like this so this is going to be our application here you can see that we have a bunch of menus we have a toolbar here and we are using icons that we will be pulling from our resource file down in the middle this is going to be a central widget for our main window and it is going to be a text edit component and we will set up this entire user interface in q2designer and use it in Visual Studio code on the python side so let's do this here we are in our working folder we will be working in this folder number 11. you can see that it is an empty folder the first thing we want to do is to open cute designer and actually set up our user interface in this place here let's do that QT designer and it is going to be a main window project that we want to set up so make sure you select main window here and create and this is going to give us a main window that we can play with make sure you know the name of the top level widget in this case it's going to be named main window this is okay and we want to add a bunch of menus just like we saw so we can say file here by clicking and typing let's look at our design we have a file edit and help let's do that we're going to say edit and help let's see what we have in our file menu in the file menu we will have a quick action so let's put in quit okay and you can see that when you double click on the place that says type here you're going to be adding in an action let's go to edit we will put in copy cut paste we can undo but before we do let's add the separator and then undo and redo and help we can say about and about QT I am going to show you how to pop up a bunch of dialogues that show information here and I think we have our user interface if we come down I think we can say add toolbar this is going to give us a place where we can drag and drop thanks so let's go down here in the user interface where it says action editor and in here we can actually add a bunch of actions so you can see that we already have many actions so we have action quit copy cut and paste what we want to do is to but before we add icons to these actions we actually need to add a resource file so let's go to Resource browser here and click you already know how to add the resource we will be adding a new resource file to this project it's going to be saved and let's go somewhere on a drive here 11 here that's the folder the name of the file is going to be resource nothing complicated here dot QRC and that's going to be our resource I am going to copy a folder of images that I will be using in this project here it is going to be available once you download the source code for this lecture here so let's go in the current project and add in our images folder and we can come back to designer and once we have the resource we will be needing to add a prefix click on ADD prefix here take out everything like we did earlier and now you can add files if we go in images we are going to select everything and add all these files here and if we hit OK these files should now be available for a use in the project here now we can come back to the action editor and double click on action quit if we do we will have the option to set an icon let's choose resource and go in images and we will choose the quit icon here so let's hit OK and if we do okay again the icon is going to show up let's do the same for copy let's choose resource images copy where is the copy icon it is right here so let's select that hit okay we are going to go to cat and do the same choose resource images cut icon that's what we want and hit OK we want to paste choose resource images paste and okay we want undo resource images and do where is undo undo is right here let's select it and hit OK we want to redo resource images redo icon after that we have about let's click OK first about let's go choose resource images about that's going to be this icon here which is black we hit OK and about QT let's go to Icon choose resource images and about QT the orange one and we can hit okay now that we have this we can actually drag and drop actions on the toolbar and this is going to be really cool you see it shows up here you can right click and say add separator okay and then we can do copy cat and paste okay this is something we can do once we do this we can even add another separator okay and after we do that we are going to do undo and redo okay we can do something like this another thing we can do is to add the text edit component okay we can drag it and drop it here and we can click in some empty space and use a vertical layout for example to make the text edit fill our user interface and at this point I really think we have everything we need for our user interface file and because it is automatically loading the resources we don't need to manually import the resource file all we need to do is compile our user interface to Python compile the resource to Python and we will be able to set up a main window python file that is going to be using these things on the visual studio code side or the pi side if I can say it like that so let's save this file here let's save and we will be given the option to choose where we want to save it it is going to go where we are saving out of files so let's go to that location and choose this guy the name is going to be main window in lowercase dot UI and if we save it should be available in our current working folder we have the resource file we have the main window file we can close out of designer if we want but for now what we want to do is to load this guy into Visual Studio code so that's going to be our project here so let's drag and drop inside of Visual Studio code we will have our thing here and we want to compile these guys so let's show a terminal window and we can hit up up to go into our Command history we will see how to compile our user interface file we just need to change the name here I am going to change this to main window to UI main window main window this is what we want if I do this this is going to generate my main window file let's go up again and try to find that I wanted to compile the resource file we have a resource.qrc we don't really need to change anything here this is going to compile our file we need to go to the main window python file and change the encoding to utf8 if you remember correctly so let's change this to utf8 and now we have everything we need we can start creating our python files we can create the main python file we can also create the main window python file and now that we have this and what we will do is just put in the code to use our generated python file main window or UI underscore main window Pi file we are importing the file here and we are going to be inherit from that file as we do here in the Constructor we do really nothing special here we are just taking an application parameter and that's going to be what we use to kill the application when the user triggers the quit action and down here you see that we do connections to our actions so we say action quit when it's triggered we are going to quit the application when the action to copy is triggered we will be running our copy slot which is what we have here and we do all these connections here there is really nothing special and in about we will be putting out a message box that is going to say something that is just going to be saying something here and when the user triggers the about cute action what we will do is show a message from our Q application class here this is something you can do the main thing here is ready to be able to build your user interface from designer and be able to bring those files into use in your Pi site application like we are doing here in Visual Studio code now that we have our main window we can go to the main python file and bring everything together nothing complicated we are just importing our main window file the main window cluster is in there we are creating an object of it and showing it and kicking off the event Loop here again let's make sure that we compiled our resource it is we compiled our UI main window python file it is using utf8 this looks good let's show our terminal and try to run the application and if we are lucky everything is going to work and it is going to be really cool let's try to run okay so it seems we don't have an action named about underscore cute let's go back to our designer file and make sure that our action is named about QT yes it is named about QT and it seems we are doing something bad in our main window python file so let's go about QT let's take out the underscore let's try to run again terminal clear if we try to run now it is going to run if we quit we should be able to quit the application if we run it again we should be able to see it you see we see our icons in our toolbar if we go to file and quit it is going to go away you already know how to work with Q main window by the way if we edit we can copy cut paste and do redo and for example we can DDD here and do it's going to go away we can copy let's say the sky is blue you can copy this through the toolbar and we can even paste and paste and paste and paste this is going to work we can undo it's going to go away we can redo it's going to come back we can even cut out everything here and paste you see we are really able to use this application and this is really cool let's use the help menu about it's going to show a message box that we triggered in our code if we do about QT it is going to show information about the QT version that was used to compile this application this is really cool and this is all we set out to do in this lecture showing you a slightly practical way to use the resource system to your advantage and again this is going to be really cool because all these resource files are going to be available to our application without having to recopy these images when you deploy your application and this is really cool I am going to stop here in this lecture and I will see you then this one congratulations on hitting the end of the course here you have learned a lot in terms of using qt4 python to build cute widgets applications that you can run on Windows Mac and Linux now that you have these fundamentals you may be asking what's next well you just scratched the surface when it comes to using Q2 widgets to build applications that can run on different platforms and a few other topics I would recommend is learning about events the graphics view framework which allows you to build interactive applications this is actually one of my favorite topics intuitive you can learn about networking you can learn about databases you can learn about threads there is really no shortage of things you can learn about in QT another thing you can learn about is qml which is another API to build a graphical user interfaces that are fluid and dynamic to run on mobile and embedded this is a really hot topic in QT and I would recommend taking a Twist a moment meant to look at this because if you are serious about QT you are probably going to run into qml so that's something you might want to look at we have a few courses on qml if you are interested you can check them out and really what I would recommend is to try and think about things that interest you the most or things you think that you are likely to meet in your career as a developer focus on those things learn how to do those things in QT and your learning experience is going to be much better this is really all I had to share in this lecture again congratulations on hitting the end thanks for giving me the opportunity to be your instructor if you are interested in many of our other courses be sure to check them out I am going to stop here in this lecture and I will see you next time