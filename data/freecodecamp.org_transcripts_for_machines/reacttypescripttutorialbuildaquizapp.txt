welcome to this tutorial i'm thomas webenfart a developer and instructor from sweden i created this tutorial for free code camp and free code camp is great i also want to tell you that i have my own youtube channel wabenfalk but for now let's get started with this all right this is the quiz that we're building in this tutorial so we can start and we get some questions here and we have four different choices to choose from so if we press here you can see that it showed me that i answered incorrectly and it also showed me the correct answer and then we can move on through the questions here and this is all built with react and typescript so that's what i'm going to show you in this tutorial so this is the finished application all right so let's get started we're going to bootstrap our application with create direct app and we're going to set it to use typescript so if we check the site here create dash reactapp.dev we can see that they have they have an option for adding typescript so we can use mpx create react app and the name of the application template and typescript and this will install everything with typescript support for us so we can do that so let's go inside of our console clear it and then we type in mpx create dash the react dash app and then our application is going to be named reactquiz in this case we type in template and typescript and we wait for it so this will install everything with typescript support for us so we just have to wait and it will be bootstrapped for us okay that went smooth let's see what we've got we have a react quiz folder so we can navigate inside of that one cd react dash quiz and then i open up the code editor we're going to clean up our product a little bit as you can see if we look in the folder here we have some files here and inside src folder we can actually remove some stuff that we're not going to need setup tests service worker the logo the index.css the app.test.tsx and the app.css remove those files like that and then we're going to do some refactoring here in the index.tsx file we can remove this one where we ins where we import the css file we can remove this one to import a service worker and also remove it down below here and this should be it save the file and then in the app.tsx file we remove the css import and the logo and for now we're just going to say quiz inside of here and do some auto formatting and save it then we're going to use star components to style this one i'm going to style it at the end of the tutorial so we're just going to build the functionality first but we can install the dependency for the star components and we can install it by typing mpmi style dash components and as this is in typescript we're going to do this application we also have to install the types for this one and we can grab those ones from at types forward slash style dash components like that so we first install the style components library itself and then we install the types for the style components and we do it in one go so press enter all right then we can just start this up to see that it works mpm start and we can go to localhost 3000 and you can see that it says quiz here and that's great we know that it's working so localhost colon 3000 that's the dev server that this one creates for us and you can see you can also just click here and it will open up in your browser hopefully all right so that's the dependencies we only need to install style components for this one as a dependency but we have to do some more stuff here first we're going to have this nice little summer background image and i grabbed that one from on splash.com and i found this image down below here it's not adnan that has photographed this image so that's the one that i'm using so we can just download this one or if you want to use another image you can use that also so if we check out this image it should be in the downloaded folder and you can see i actually have two of them here because i've already downloaded it before so let's go inside the code editor again and inside the src folder we're going to create another folder that we call images maybe overkill for this one as we only have one image but i like to have a good structure on things so images and then we grab this image and drag it inside of there and i can actually rename it also because it has this strange long name we keep the name of the guy that has taken the photo all right so that's the images we're also going to need a couple of google fonts so go back to the web browser and i open this one up for us i'm going to use the font that's called catamaran i don't know if i pronounced that correctly i'm going to use the weight of 700. so select this one i already selected it here and i'm also going to use a font that's called fashionnate inline so these are the two fonts that i'm going to use so i've selected that one also so you can browse the fonts you can search for them here and then you add them and then we get this embed link here so copy this link go back to our code editor and we're going to navigate inside of the public folder and we have the index.html and in this case we're going to paste it in here so we import it in this index.html this is the file that is run when the application is built so we can import it here just like in a regular html file save it and this will make sure that we have those fonts all right so that's the fonts i can close this once and then we can just briefly check out the api that we're going to use for the questions so i found this open trivia api as you can see we can configure it we can select which category we want i'm going to use the any category we can select difficulty i'm not going to implement to select difficulty in the ui but i'm going to implement it in the app itself so you can change it in the code and we can also change to have multiple choice or true or false we're going to have multiple choice and we're going to use the default encoding and if we click generate the api url it should generate the url for us up here so this is the url and this will give us a json response with the questions and the answers as we just get this object it will be really easy to sheet if you want to do that because you can always check the questions and answers in the code because if we want to make a serious quiz game we probably have to create the proxy api or already use an api that won't show us the answers in the client so we have to make a request to a server and then it will get a response with answers and stuff like that but in our case for example if you have a react dev tools you can just check the state and you will see all the questions there and the answers so it's a very simple implementation of a quiz game and that should be it for the setup let's move on to create the logic for the application and then last in the tutorial we're going to create the ui the design for the application okay make sure that you have the application running by typing in npm start in the folder that we created with create dragged app and it will hopefully show quiz for you and it's also a good idea to have the console open so we can open that one up like that and then move back to our code editor the first thing i'm going to do now is to create a couple of new files and a folder because we are going to create a component for our question card so inside our soc folder i create a new folder that i call components and then i'm going to create a file inside of that one that i call question card dot tsx capital q capital c question card dot tsx and we can just scaffold this one out for now so we import react from react and then we create the const question card and an error function and for now we can create a div that says question card and we export default question card do some more formatting and save it so that is our question card component we're going to come back to this later and then inside of the src folder we're going to create two more files so first we have a file that we call api dot ts capital letters on api and then we have another file that i'm going to call utils.ts like that so the api file is going to be used where i create the logic for fetching data from the api and the utils file is just going to keep a small function that we're going to use to randomize the answers to the questions all right and we're going to come back to those also and then later we're going to create more files here because when we create the styles with a style component i like to have the styles in a separate file so we're going to create separate files for those also but we do that when we've created all the logic for this quiz game so let's start off in the app.tsx file this is going to be the main file for our application and if you want you can change this one to an arrow function i like to have error function but this is highly what you call it highly subjective if you don't like arrow functions you can use regular functions so it's okay this is the main component in our application so if we start scaffolding this one out we're going to have one function that we fire off when we start the quiz so const start trivia or start quiz start trivia i think that is fine this one is going to be async because we're going to make the api call from this one so we can already know mark it with async so we leave it empty for now then we're going to have one function that we're going to trigger when the user selects an answer it's a const check answer equals this one is going to take in the event like this and you can see that it complains you know because this is typescript they're telling us we haven't specified a type for this one so it's implicitly set to any and we should set a type for it so the event is going to be a mouse event and we can specify it even more so we specify to html button element and we end it with a angle bracket like that something like that and of course we need to have a colon here also and as we're in react i guess we have to tell it react dot mouse event also like that so react.mouseevent and then we specify it even more by telling it it's from an html button element so that's how you type this event then we're gonna have a function that will trigger when the user click for the next question so const next question equals and in this one we don't actually need the event so we just create an empty error function like this so this is all the functions that we need for this trivia and of course we're going to come back to them in a second but first we're going to scaffold out our jsx here in the return statement so we wrap it in a parenthesis first like this and then we have the repetitive that's called app now we're going to rename these ones also later when we create the star components but for now they will be divs with class names and first we're going to have an h1 tag with a header for the quiz and we call it react quiz like that then we're gonna have a button to start the game so we create a button with a class name of start and we set the on click handler to the function that we created start trivial like that and it can just say and it can just say start inside of it so that's the button then we're going to have a paragraph with a class name of score and this is the one that's going to hold the score so for now we're just setting score like this then we're going to have a paragraph with a class name that is telling us loading questions you could of course implement a spinner or something if you want to do that instead and then we're going to have our question card so we can import that one up here i mark it with components and import question card from it's in our components folder and then we have the question card like that so down below here we create the question card like that and the last thing we're going to have is a button below everything of this that is used to click to the next question so button class name equals next and for this one we have an on click handler next question like that and we can just type out next question and do some order formatting so you can see that we're using the next question and the start trivia here this one here is going to be sent in by props to the question card component so we can create the question card component now so let's go inside the question card dot tsx file just as before we create parentheses here we can make an implicit return on this one so we don't have to have a return statement and as we're in typescript now we have to type the props for this one so we create a type call it props you can call it whatever you want it doesn't need to have the name props first we're going to give it the question and this one is going to be a string the question is always going to be a string then we're going to give it all the answers and the answers is going to be an array of strings so string array this is how you type an array of strings then we're going to give it a call back and for now we can just set it to annie and we have the user answer that's the answer that the user is going to give us it's also going to be a string we have the question number it's going to be a number quest number like that then we have total questions that one is also going to be a number so these are the props for this component but how do we specify it to use these props first of all we have to specify this one to be a functional component so just after the name here we have a colon and from react we have something that's called fc so dot fc these are the types from react itself so it will tell typescript that this is a functional component and if we want to specify props we do that inside of angle brackets like this so we tell it that we want to use these props that we created up here and then just as usual we can just structure out the props so we have the question we have the answer you can see that we get this nice auto completion here where it tells us what we've got we have the callback we have the user answer we have the question number and we have the total questions i'm going to do some order formatting here because i have this insanely large font because i want you to be able to see what i'm typing but it's hard to work with it actually so these are the props that we have now and now we can use them inside or our component so this div is going to be a repetitive i'm going to create parentheses here again so we have the repetitive we have the ending parenthesis remove some stuff there so this is the repetitive we're gonna display the current question that we're on so we can do that in a p tag with a class name of number and then we can type out question colon and then from the props we're going to grab the question number like that and then we do a forward slash and then we grab the total questions like so because we're in jsx now so when you want to grab a javascript variable or create a javascript expression we do that inside of curly brackets all right so that is going to indicate what question the user is on and then we have the question itself and in the response from the api we're going to get some html in react we have something that's called dangerously set inner html that we can use when we want to render out some html and it's called like this because it is dangerous to use because you never know what can be injected here in our case we know that it's safe so we can use it here so we create a p tag and we use dangerously set inner html and we have curly brackets then we have a new set of curly brackets because it's an object and we have underscore underscore html and we're going to give it the question no it shouldn't be the question number it should be the question like that all right then we're going to have a repetitive for all the answers to the question and we're going to map through the answers because we have all the answers in this prop here it should actually be called answers with an s and not answer so we can change that one answers with an s so down below here in the wrapping div we create curly brackets and we have the answers dot map so we map through them we have an answer like that we create an inline arrow function we can use implicit return here also so we create parenthesis and then we have a wrapper for our button so we create another set of divs and inside of there we create a button it's going to be disabled depending on if the user has made a choice if the user has answered something so we set to disabled equals user answer this one is going to be a boolean so it will be disabled if this one is useful i set it to string you can see that typescript complains here now because i said it's the string it will complain we will make sure that this will get the true or false value later so we have to change this one now so it should be a boolean instead you can see that it won't complain anymore so this is one of the great strengths with typescript it will tell you when you code if you do something wrong and you can correct it before the bug even happens all right then we have an on click handler on this one and this is going to call the callback like so we close it i'm going to have some text for the button also and this one is also going to get the text in html format so we create a span and dangerously set inner html equals curly brackets and we have the object with another set of curly brackets underscore underscore html and we give it the answer in this case and then we selfclose the span do some auto formatting see that everything works i think it is working yeah save the file but now you can see inside of the app.tsx file if we go back to that file so you can see that it complains now because it wants the props and we're going to give it the props also but first i'm going to create the states that we're going to use for this application and we're going to have six of them actually because i'm going to split them up that's great with hooks node you don't need to have one big state we can have a few of them instead so up here first we import use state like that and just down below here in the component at the beginning we're going to create our states first we're going to have a loading state so const loading and set loading like that and we use state we set it to false as a default then we're going to have the questions like that and set questions and we use state and we give it an empty array for now we're also going to specify this later and give it a type but we can't do that yet because i'm going to create a type when we create the function for the api then we have a state with a number and set number and this is going to be the number that the user is currently on the question number so use state we're going to start at zero then we're gonna have a state for the user answers and set user answers like that and use state and we give it an empty array as initial value and then we're gonna have the score and set score and use state and this one is zero as initial value and then i also gonna have one that's called game over and set game over so that we can keep track on when the game is finished so you stayed and we set it to true initially okay so let's give this question card it's props first we have the question number and this one we're going to get from number but we're going to add one because the number is going to be used for the array and the array starts at zero and we don't want to start our questions with a zero so we add one to this one because that will make the first question to have the number one okay then we have the total questions and for this one we're going to create a const up here const and we have capital letter total underscore questions equals 10 and this one is because it will be easy to just change this for us if we want to modify the total questions so total questions is going to be the total underscore questions like that then we're going to have the question itself and we're going to grab this question from our question state and we have the question stated here it's going to be an array of questions so if we want to give it the current question we can do that with questions and then we grab from number and then we give it the question itself and you can see that it complains now because for now typescript doesn't know that it exists so it complains here to us we're going to give it the answers and we have our answers also in the questions number and in a property that's called answers like that and then we're going to give it the actual answer from the user so user answer equals and then we check if we have some user answers we create a turner operator and if we have some answers in the user answer state user answers we can grab the correct answer by specifying the number otherwise we just give it undefined like that and you can see here yeah it should say user answers and this one will complain now because i realized that if we go back to the question card you can see that tell this one that it's a boolean it's actually not so we set it to annie for now go back to our app.tsx file and you can see that it won't complain now and the last one we're going to give it is the callback and it's going to be the check answer like that and now you can see that it won't complain here because we're giving it all the props it will just complain here because it doesn't know that these properties exist but we'll fix this soon so i think we have everything set up now actually and we can move over to the api.ts file and create the function that will grab the data from the api so we export const fetch quiz questions like that and this one is going to be async and we're going to have a couple of parameters here because we want to be able to specify how many questions that we want to grab so we can create a parameter amount it's going to be a number and then we have another one that we call difficulty and this is going to be easy medium or hard because we can't grab this from the api so we should be able to set it here how do we specify this because it can only be easy medium or hard and in typescript we have something that's called an enum so export enum we call it difficulty like this and we can specify the constants inside of here we have one that's called ec and it's going to equal ec then we have the medium one and it's going to of course equal medium make sure you have a coma after these ones also and then we have hard and it's going to equal hard and i actually want to have a capital d on difficulty so we can specify this parameter as the enum difficulty all right and this will make sure that we only can use these values and it won't accept anything else that way we won't make a mistake of typing something like this for example because then the endpoint won't work so that's the parameters for this one then we want to specify the return type it's going to be a promise of yeah i can actually remove this one for now because we're going to console.log out what we get from the api first and then we can see what type we're going to specify for this one so inside here we create a const with endpoint i create a template literal with backticks so http s colon forward slash forward slash open tdb dot com forward slash api dot php question mark amount and then we have an equal sign and then we can grab this variable here amount so we create the dollar sign curly brackets and give it the amount and this one that i'm typing in now is of course from the api so we could of course just also copied it then we have an ampersand and we're going to give it the next variable here so difficulty equals and then we have a dollar sign curly brackets and we give it the difficulty argument and the last one we have another ampersand and we set the type equals to multiple so as you can see you can configure this as you want in this case i'm just making sure that we can change the amount and the difficulty but you could change the type and stuff like that and really customize it how you want it to be we end it with a semicolon all right so that's the end point then in a cons that i call data i'm going to await because we are going to hit that endpoint now so i await and then i have a parenthesis i await again i get a lot of questions on why i'm using double weights and that's because first we await the fetch itself and then we're gonna wait when we convert it to json so await fetch parenthesis we give it the end point like that and then here we have dot json and we call that one so this will await the fetch itself and then it will await when we convert it to json and for now we're just going to console log out the data like so we're going to come back to this one go back to the app.tsx file and i'm actually going to comment out this one for now so we don't have an error and up here we can import that function that we created so import fetch quiz questions from dot forward slash and we have it in the api.ts file like so and what i want to do now is to try this function out to see what we've got so we have this function here fetch quiz questions really hard to say for me and we can call it here the console.log fetch with questions like that and we need to give it two parameters now you can see that it complains expected two arguments but got zero so this is also great with typescript it's telling us all the time if we're doing something wrong so first we're gonna give it the total questions and then we need to give it easy medium or hard and if you remember in the api.tsi we created this enum here that i also also export so that means that we can import this one in the app dot tsx file so i'm going to mark this one with types and i import difficulty from dot forward slash api like so and that means that we can use it here so in our console log as the second argument from difficulty we're gonna grab the easy one save it back to our browser you can see that we have everything here now and here is the response you can see that we have a response code of zero and we have the result so this is what we care about here we have the ten questions here and now we can see the structure of the object the question object here by looking at this one here we can actually create the type for this one so we have a category the correct answer and difficulty these are all strings then we have the incorrect answers in an array and then we have the question and the type so let's move back to the code and inside of the api.ts file i'm going to specify the type for each question so type i'm going to export this one also export type question equals it's always good to export stuff like this because you never know when you need it in your application so first if we go back to the browser you can see that by the category correct answer difficulty incorrect answer question and type so now it's just a matter of specifying this here category this one is going to be string we have the correct underscore answer this one is also going to be a string we have the difficulty it's a string we have the incorrect underscore answer and this one is going to be an array of string so string and an array we have the question itself it's going to be a string and then we have the type it's also going to be a string but one thing i want to do here also because i want to modify the state that i get back here because in this case we have the correct answer in a separate property and we have the incorrect answers in a separate array i want to have them in the same array because what i want to do later is that i want to map through this array and create the answers in the ui in the jsx so it's easier to have them in one array so we can have both the correct answer and incorrect answers in one array instead so i'm going to add a property in the object that we return here from the api and we also have to specify that with typescript of course and how do you do that well i'm going to create another type i export type and i'm going to call it question state so first i grab the question that i created here but i want to add something to this one so i create an ampersand and then i have an object i'm going to create a new property that's called answers and this one is going to be an array of strings so like that do some more formatting so this will use the types from the question but add this property to it and it will create this question state type instead so we're all good to go now we can return the correct data here in the fetch quiz questions yeah it's actually misspelled here questions it cell and then i need to change it in the app also like so and also here yeah something like that go back to the api dot ts file all right so we know that we get our data then we have to return some things so i return and from the data dot results i'm going to map through all of them and add this property that i talked about it's a map we have a question and now we can specify it as a question from our type question like that we make an implicit return we have a pair of curly brackets because we return an object and then we spread the question we want to use all the properties that we get from the question and you can do that with es6 syntax that's called spread so that's what we're doing here and then we add the new property of answer and there's actually one more thing i want to do because i want to shuffle the array here otherwise the correct answer will always be on the same place and that's why i created this utils.ts file so move inside of that one and we create another small function here export const shuffle array and this one takes in the array and it can be of any type in the array this one we have an error function so this array that we give this function i'm going to create a new array by spreading it inside of a new one this is also es6 syntax spreading it inside of here creating a new array and then i use sort give it an inline error function and use math dot random minus 0.5 do some auto formatting and this is kind of a quick fix for creating a randomizer function it's not completely accurate but in our case it will do so this yeah this have to do for now this is not a tutorial about creating random functions so this will do the trick for us this will do the job so save it and go back inside the api.ts file and up here at the top we can import this one so import shuffle array from dot forward slash and utils like so so go back below here where we create the object and inside the answer property i'm going to call the shuffle array and give it the array that i want to shuffle so yet again i use es6 syntax i create an array i spread from the question dot the incorrect answer you can see here typescript gives us all the properties that's available for us so the question dot incorrect answer and then from the question dot correct answers correct answer so we spread all the incorrect answers and the correct answer and then we shuffle it with this function here do some more formatting and it will look something like this yeah and before we do anything this one should be incorrect answers like so i keep forgetting these esses i don't know why but i keep forgetting them make sure that it says incorrect answers with an s and also change the type to that one save it and this one goes also here this property here should be called answers with an s yeah because it says answers here also so keep forgetting those ss add them to these ones otherwise it won't work all right save it go back to the browser reload it and you can see now we have a promise here but we can see that it's resolved and if we look at the question here you can see that we have the new property with answers here so we can see that the correct answer for this one is bull we have that one inside of here and the incorrect answers it's bad horse and snake and we also have these ones so this is exactly what we want now we have an easy way to map through all the answers when we do that all right so let's get back inside of the code this is the api.ts file it's finished now and also the utils.ts is finished so back inside the app.tsx file so in the types we're also going to use the question state the question state that's the one that we created we import that one also here and now we can set this one is going to be an array of the type question state so we can specify that one here inside of the angle bracket question state and an array like that then typescript will know because we're sending this to an empty array it can't really know what this is going to be but by specifying it like this we tell typescript that this is going to be an array of question state so we have to create this type for the answer object also just below here we create a new type we don't have to export this one because we're not using it in another component answer object equals and the answer is going to have a property with a question it's going to be a string we're gonna have the answer and this is a string we're gonna have a correct that's the boolean like so and then we have the correct answer and it's a string so the correct will tell if the user answered correctly and the correct answer will have the correct answer and then we have the user answer here and we also have the question and this is good to have a complete object like this because if we for example want to extend our game and show all the questions in the end when the quiz is finished we have them nicely in this array that's called user answers we're not really going to do that now but i created it this way so you can kind of extend from here if you want to do that now we can specify these user answers so we create angle brackets and answer objects and an array so then we have all our types for the states save it and just make sure that it still works it does so that's great so we're going to implement the start trivia function now so that we can start a game so inside of that function we have to do some stuff here first when we click the start button we're going to trigger the api fetch and that means that we're loading something so we're going to set the loading to true that's the first thing that we do and we're also gonna set the game over to false because when we start a new game it's not game over so when we've done that when we set the loading and the game over we can hit the endpoint so we create a const new questions then we're going to await and recall the fetch quiz questions and we're going to give it the two arguments that it needs it needs the total questions and just as before we give it the difficulty dot easy as the second argument all right so that will grab the new questions and put it in this const here so when we awaited this one and we have all the questions we can set the questions with the new questions like that and hopefully we have all the questions in this state and in this tutorial i'm not doing any error handling so you could of course use a try or catch block and if you want to catch the error or something like that this video is already getting long so i won't go into that here but you should of course always do some arrow handling if you have an error all right then we're also going to set the score to zero because we're starting from scratch now so it should be reset and we set the user answers to an empty array so we're kind of resetting everything here so set number we're also setting that one to zero and then when we're done all of this we hopefully have our questions in our state and everything is working then we can set the loading the false because we're not loading anymore and this is it for the start trivia function so save it go back here and click start you can see that we get the promise here but that's because we're console logging it out here we can remove this one here and actually just console log out the questions instead go back to the browser press start you can see that we have all the questions inside of here and you shouldn't worry because you may wonder why whoa it renders a lot of stuff here but that's fine there's no performance issue here that's because we have a lot of these states that will trigger a rerender but it will only rerender stuff that is new for each render so you shouldn't worry too much about that especially not in a small app like this all right so we know that we have our questions in the state that's fine it's working really nice but for now also you can see that it just says loading questions we want to display the questions and the answers here also so we can modify our jsx here so first this button here to start the game is only going to be displayed if the game is over or if the user has answered the last question so we create curly brackets we check if game over or we have double pipe user answers dot length equals total questions then we know that we're on the last question and then we're going to display this button it can get a little bit messy here now so we have parentheses around that one otherwise we return null we have the ending curly bracket there like so i think and you could also do a regular short circuit without this turner operator if you want to do that but i think it's great to return at least null and as you can see now it displays the button but not now when we press it so that's working okay that's the start button and then we want to show the score we only want to show the score if we're not in a game over mode for this one so curly brackets not game over we have another toner operator and otherwise we show null and we have the end curly bracket like so and the loading questions is only going to be shown when we load something so curly bracket loading like so and now yeah it may be better to just have a short circuit i can do it like this for this one so if it's loading it's going to show this one save it and we can see what we've got so we have start and next question we start you can see that the loading was showing and we showed the score so this is working also go back to the code and now we're going to bring back the question card and the question card is only going to be shown if we're not loading and if we're not in game over so we create a curly bracket not loading and not game over yeah i do a short circuit here a little bit messy here again something like that do some more formatting so if we're not loading and if it's not game over we're gonna show the question card save it go back to the browser start you can see that well the question and the answers here so that's sweet now we have the next question button also but we haven't implemented those functions yet all right that's the question card and then we have the next button and this one is only going to be shown if we're not in a game over and we're not loading and the user answers dot length equals number plus one and by doing this we just want to show the next question when the user actually has put in an answer so that's why we check it here if the user answers dot length equals number plus one so we don't show it if the user haven't given us an answer yet and the last thing we want to check if we're not on the last question so number not equals total questions but we have to modify this one also because we have to set it to 1 and then i have a question mark parentheses this is really messy here now i'm going to move up the button inside of there and down below here colon and null yeah it should just be two equal signs there of course and do some order formatting and i think that this will work go back to the browser yeah so now it's not showing because we have to give an answer first before we showing that one yeah and it's telling me that it should have a key prop here we're going to fix that one also and that one is in the question card because here where we map through these ones we should have a key and we can give it answer as a key and this will make this arrow go away or this warning all right so this is working now go back to the app.tsx we're going to implement the other functions now and then the game will work and then we can move on to create the style for this one so inside the check answer first we're only going to run this function if we're not in a game over so if not game over then we get the user's answer const answer equals and we get that from the e dot current target dot value because this is when we press that button here so you can see that we're calling this callback on click and that's why we also have to set this value on here so value we give it the answer like this otherwise we won't be able to read the values so it's very important to set the value also on the button here on the question card in the question card component like that go back to the app dot tsx so from e dot current target dot value we get that value and that's gonna be the answer then we're gonna check answer against the correct value or the correct answer so const correct equals and from questions we have the current number that's the question that we're on we have the property that's called correct underscore answer and we check if that one equals the answer then we know if if it's correct or not so this will give us true or false add score if answer is correct so if correct set score and we have the previous score and we add it by one like so all right so that's if it's correct then we add to the score and then we're going to save the answer in the array of answers here and we have this answer object we're going to give it a question answer correct and correct answer so that's what we're setting here so save answer in the array for user answers something like that const answer object equals and we create an object question and from the questions number we grab the question and then we have the answer and then we have the correct and this is also es6 syntax if this one is the same this is exactly the same as typing out answer when these two are the same we just need to type it out once like this and then we have the correct answer and from questions and the number we have the property that's called correct answer do some order formatting and this will make sure that it creates this object with the data about the answer and then we need to put it in the answer array so set user answers we have the previous state and we create a new array spread out the previous and we give it the answer object auto format it and save it and this should be it for the answers go back to the browser see that it works reload it start yeah you can see the next question is showing up also but it's not working now because we haven't implemented this function but it seems to be working so we just have to implement that function also and then we have a fully working game but it will look like crap because we haven't styled it yet so we have the next question function here move on to the next question if not the last question so we have to check if we're on the last question the const next question equals number plus one because the question we're currently on is the number and then we add to 1 and then we can check if this is the last question or not so if next question equals total questions we know that that one is the last question because total questions is always going to be one number ahead of the number because we're using this for the array that starts at index zero and this one doesn't do that so we have to add one so when we check the next question with the total questions that will give us the answer if we're on the last question and if we're on the last question we set game over to true like so else we're not on the last question so we can set the number to the next question like so order format it and save it and go back to the browser reload it just to be sure and start select and answer which of the following was not one of the magnificent seven oh i really don't know actually next question and you can see it will move through the questions we can't see the correct answer now because we haven't styled it but it seems to be working let's see what it does when it's on the last question yeah you can see it displays the start button when we're on the last question and it's not displaying the next question so we can restart the game and it's working quite nicely i think but as i told you we can't really see if we put in the correct answer because we do all that stuff with the styling and that's what we're going to do next we're going to use style components to style this quiz all right before we move on with the styling for this one i'm going to fix these types because i forgot that we had these annie types here and if we can fix it we should do that so we can type this correctly and we're going to change this callback and the user answer so for the callback we already have the types for that one in the app.tsx file if we go down here to that function this check answer function we're already typing this one here so we can just copy this one like that copy that one go back to the questioncard.tsx file and replace the annie with this one instead and we're going to return void for this one we're not returning anything so we can specify it as void so that's the callback and the user answer we actually created a type for this one also in the app.tsx file we have this answer object i think i said that we didn't need to export this one but we have to export it because we can use it in the question card now to specify that type so add an export to that one and then we can import it in the questioncard.tsx so add an export save the file and then go back to the questioncard.tsx and up here we can mark it with types so import answer object and we import it from dot forward slash app something like that so we have the type here now for the user answer so instead of any we can use answer object but it can also be undefined so we create a pipe and specify it as undefined like that save the file and there's also one more thing we have to do now because down here this one disabled it wants a boolean and this one is not a boolean now so if we want to convert this one to a boolean value we can use double bangs double exclamation marks or we can specify it like this with a turner operator if we have the user answer we set it to true otherwise we set it to false so it's up to you you can use whatever you want but just make sure that you give this one a boolean value otherwise it won't work so this is it this is all the types now we don't have any any type now except in this utils function because this one can take an array with any value so make sure to save the files and i'm also going to check so that it works go back to the browser reload it and it still works and that's great so that's the types let's move on with the styling okay we're going to give this quiz some styling but first we have to also make sure that we display the score i forgot that one so we have the state with score so move down here to the jsx in the app.tsx component just somewhere here yeah here where we set the score we're actually not showing anything there now so we're gonna add that one here so we have curly brackets and we show the score like that this will make sure that we show the score to the user and you should be able to see yeah yeah i've had a score one there yeah so you can see that it's displaying nice all right so we're going to create a new file now we're going to create some styling for the app.tsx file first so inside the source folder the src folder create a new file app.styles.ts and we're going to import some stuff from style components so import styled coma and then with the structure out create global style like that from dot style components so style is the regular thing that you import and we're also importing create global style i think it is self explaining we're going to create some global styling with that one so that's the first thing that we're going to do but first we also want to import our background image bd image you can call it whatever you want from dot forward slash images forward slash and then we have that i really don't know why it can't find it yeah and this one is complaining because i removed the test file before i think that shouldn't matter but this is strange i think we just created ts ignore for this one for now something like that i think it will work we'll see if it work later so export const global style you can call it whatever you want you don't need to call it global style but we call the create global style with double back ticks and we can create a global styling first we set the html i'm going to set the height to 100 on that one and just as usual when i style stuff like this there are some room for optimization i think i just did these styles really quickly so there probably will be more effective ways of doing stuff here but i'm in a summer vacation mode now so this will probably be one of the last videos before i take a welldeserved vacation so that's why i actually didn't think i was going to do this before the summer but then i felt yeah why not so that's why i created this one all right so we have the body we set the background dash image to the url and then we can grab this url with dollar sign curly brackets pd image like that and then we set the background size to cover i set the margin to zero the padding is going to be 0 and 20 pixels i set the display to flex and justify content to sender so that's the body and then i have an asterisk i'm going to set the box sizing book sizing to border box and then i'm also going to set the font on every element on this one so font family catamaran and sans riff as a fallback font all right so that's the global styling i'm actually gonna import that one in the app component now to see if this background image works so go back to the app.tsx file and up here i mark it with styles i import global style from dot forward slash app.styles and then when you create a global style with style components we get the regular component here so we can use that one down in the jsx we can put it somewhere here at the top so i create a fragment because dsx can only return one element i close it here and then we can use the global star component like this do some order formatting and save it go back to the application yeah and the image works i don't really know i complained there so if it complains just add that little comment there that i created to comment this one out i don't really know because it worked in my other application when i created this example so don't really know why but that's the global styling and then we can do some styling in the app itself so export const i'm going to create a component that i call wrapper style.div double backticks it's going to be displayed as flex flex direction is going to be column and the align items is going to be center like so then i want to style the p tag in this wrapper so i created a forward error and the p to just style the p tag in this app wrapper i don't want it to be styled on all the p tags so i set the color to white so that's the p tag then i'm gonna have a class that i call score and that's of course the score table i set the color there also to white we could of course specify some css variables for the colors if we want to do that that's one way you can optimize this css i set the font size to 2rem the margin is going to be 0 on this one all right so that's the score class then we have the h1 tag and this is going to be this one up here that's going to be the actual logo that i'm styling with css all right so the font family is going to be fascinate inline not impact inline like that then i set the background image and this one is going to be the linear gradient so linear dash gradient and inside it's going to be 180 degrees 180 deg i set the first value to white and the second one is going to be 8 7 f 1 f f and to be able to show this linear gradient in the font we also have to set the background size to 100 and the background dash clip is going to be text then we can also set all the webkit stuff here for this one so webkit dash background clip it's going to be text webkit dash text fill color is going to be transparent and we have the moss door dash background clip it's going to be text and we have the moss text fill dash color it's gonna be transparent double dash maybe all right now we're gonna have some drop shadow on this one so we set the filter to drop dash shadow and 2 pixels 2 pixels and the color is going to be 0 0 8 5 a 3. the font size is going to be 70 pixels text line is going to be center and the margin is going to be 20 pixels on this one okay we're not really finished yet but we can import these styles inside of here in the app.tsx file just to see that this one works so we import the wrapper and below here we have to change our jsx because now instead of this div with class name app we're going to use the wrapper component and make sure to also close it down below here save it go back to the browser and you can see that it's not quite working here and i don't know why i think it's those app.styles i think maybe these ones should be just one and i also want to set the font weight to 400 on this one save it go back yeah and now it's working so there's a little bit of trouble doing stuff like this as you can see there's a little bit of special syntax here to get it to work if you don't like to do it this way you can save that logo as an svg file instead and that will also work just fine all right then we have a couple of more classes here so we have the start and the dot next class i'm going to set the cursor to a pointer i'm going to set the background on these ones as a linear gradient 180 degrees on that one also i set it to white and the second color is going to be ffcc 91 so that's the start on the next button we set the border to two pixels solid and the color is going to be d3 eight five five eight like so i'm gonna have a box shadow zero pixels five pixels 10 pixels and then i set the rgba 000 and 0.5 now 0.25 on the box shadow i set the border radius to 10 pixels and the height is going to be 40 pixels the margin is going to be 20 pixels 0 and the padding is going to be 0 40 pixels like so and then i want to do some special styling on the start button so max dash width is 200 pixels order format it and save it go back to the browser and this should be it hopefully start you can see that the next button is also style here but we're not styling the actual question card now so that's what we're going to do next all right so inside the components folder we have our question card to create a new file question card dot dot and for this one we import style from style components then we export const wrapper style.div you can see also that in this tutorial i just create a wrapper and then i have regular classes you can of course create a style component for each little thing if you want to do that but sometimes i think it's overkill so it's just enough to have this wrapper and i create classes in this case i'm also going to have a bottom wrapper on this question card so i create two components for this one but it's fully legit to just have a wrapper and then you have your classes inside if you don't want to create a style components for every little thing in your application all right we set a max width on this one to 1100 pixels i set the background to ebf e f f i set the border dash radius to 10 pixels i set the border to 2 pixels solid and the color is going to be 0 0 8 5 a three the padding is going to be 20 pixels and i have a box shadow on this one also so box shadow 0 pixels 5 pixels 10 pixels rgba 0 0 0 and 0.25 and the text line is going to be center right then i start the p tag for this one we're gonna set the font size to one rem like that so that's the wrapper component then we have the bottom wrapper so export const button wrapper equal style dot div and this one is actually going to take in some props and how do you do that in style components well we can create a type here for example type bottom wrapper props and it's going to take in two props correct that's going to be a boolean and use the clicked that's also going to be a boolean all right and to use these props in the style components we create angle brackets here and we specify the bottom wrapper props and then we have double back ticks and then we can go on just as usual here and on this bottom wrapper i'm going to set a transition i'm lazy i'm just turning it to all 0.3 seconds and is the hover is going to be i set the opacity to 0.8 when we hover over the bottom and then we have the button itself so button i set the cursor to a pointer the user select is going to be none i don't want the user to be able to select the text the font size is going to be 0.8 rem the width is 100 percent the height is 40 pixels the margin is 5 pixels and 0 on this one then we're going to set the background and this one is going to be a nested ternary because we want to change the background depending on if we're showing the correct answer or if the user put in the wrong answer so we set the background and in style components we can grab the props by dollar sign curly brackets and then i can destructure out them like this so we have the correct prop and the user clicked prop and then we have the inline function here so first we're going to check if correct if that one is true i have a toner operator then i set the linear gradient to 90 degrees and the color is going to be 5 6 ff a4 as the first color and the second color is going to be 5 9 bc 8 6 like so so that's the first linear gradient so that is if it's the correct answer then it's going to show in green then we have the colon and then we have a nested toner operator here so if not correct and the user clicked so the user clicked is going to tell us if the user clicked on that specific button so we have a nested ternary operator here so we have another question mark and i can actually just copy this this one here paste it in and i just changed these values here this one is going to be ff5656 and this one is going to be c1 six eight six eight and we add in the last one here so colon and we have the last linear gradient so this one is gonna be 5 6 ccff and 6 e a f b 4 do some auto formatting but i have some mistake here yeah that's because that question mark shouldn't be there so order format it and that's the background then we have some few more properties to set here i'm going to set the border to three pixels solid white i'm gonna set the box shadow one pixel two pixel zero pixel rgba zero zero zero and 0.1 all right almost finished here with the styling border radius is going to be 10 pixels on this one and the color is going to be white and the last one is the text shadow zero pixels one pixel zero pixel rgba zero zero zero and zero point two five and auto format it so that's the styling now we just need to implement it in the component itself so optimize it if you want to do that at least it works now but it may not be the most optimized css so go back to the questioncard.tsx file and up here at the top we first gonna import our styles import wrapper and bottom wrapper from dot forward slash question card styles like that and then we have to modify our jsx here a little bit so first we have this repetitive that of course is going to be the wrapper make sure to end it with the wrapper also then there's nothing here to change this one is the bottom wrapper so this one is going to change it's going to be the bottom wrapper and if you remember we're going to send in two props to this one also because it's complaining now you can see it wants two props so the key is correct there that's fine but we're going to add in the props here so correct that's the prop we're going to check the user answer and here i'm using something that's called optional chaining in typescript so i create a question mark dot and the correct answer and i check it if that one equals the answer we should have triple equal sign so if i remove this one we don't actually know if we have a value here but if we use a question mark this one will not throw an error it will make this undefined if we don't have an answer here so that's why i'm using optional chaining then we have the user clicked so user answer yet again i use the optional chaining dot answer equals answer auto format it so if we don't have this one here it will throw an error if we don't have a user answer but by specifying like this it won't throw an error and i think this actually should be it so save it go back to the application we try it out start and yes we have our question here that's what okay that was right i didn't actually know that one all right the next question so as you can see i answered wrong but it's given me the correct answer here so everything seems to be working fine yeah and that's the last question and then it gives us the start button again so the quiz is working and that's super sweet so this is how you build a fairly simple little quiz game with react and typescript there are room for improvement but hopefully this gave you some insight in how it is to build an application with typescript and react so if you like this kind of tutorials make sure to subscribe and support me i will put out these tutorials regularly on my channel and hopefully i see you in another one