beat is a build tool and development server designed specifically for modern web development it helps with fast and efficient building and bundling of JavaScript applications hey folks my name is isagan I help developers to learn frontend Technologies you should also check out my Instagram where I post tips tricks code Snippets related to web Technologies so talking about learning objectives what we are going to learn in this tutorial is we will start with what is wheat the very Basics and then we will move on to why to use it what makes it fast and what are the reasons that you should pick feed as compared to any other front end too and then moving on we will learn about what are the features that we offer and then how to create a static JavaScript project using wheat how to initialize view react and sweat projects using the predefined templates also how to integrate teguin into your JavaScript and react.js applications how to use environment variables in wheat how to apply your wheat projects to GitHub Network file and Versa lastly how to configure your vgs projects so all of this in this just one single video and if you want to skip to a specific part for example you have the basic idea of it but you want to learn about configuration so you can simply jump to the configuration part and skip the rest of the tutorial or if you want to learn about deployments so you can jump to the deployment section so with that let's get started foreign wheat can be used as a replacement for your create react app that is because wheat is quick to set up it takes a few seconds blazing fast keyboard regardless of the app size support for multiple Frameworks such as view sweat Etc out of the box support for typescript jsx and CSS and many more features in terms of technical knowledge this course is for beginners having a greater understanding of Technologies such as create react app react View and angular is more than enough to use wheat you need to have the node version of at least 4.18 however this depends on the templates some require a higher version of node.js but for most of them you can go for 14.18 and keep in mind that this minimum requirement of 14.18 is at the time of making of this video maybe in the future it may change to some other version and another example is let's say we actually has used a new version and the minimum node requirement is version 15. so in that case you will need version 15 and not 14.18 wheat is known for being super fast especially when it comes when you compare it with create react app that is because create react app will download many dependencies including webpack which takes a lot of time comparing that to wheat it takes a few seconds because wheat only makes the project structure to install dependencies you have to do npm install but the good thing is with wheat there are only few dependencies making the process quick which means no webpack we have seen bundle Skype webpack and parcel helping us with our projects however as our project size increases we notice degrees when spinning up our developers development server or hot recording that is because of the increasing dependencies resulting in the bundle doing the heavy lifting and taking the time to spin up servers all hot record them this quickly affects the developers productivity which makes very good use of the browser features such as the native JavaScript modules in the browser to skip the bundle part and and use the browser support to make the process fast to understand this more here is how it works in create react app so in this case everything is Blended together and served to the browser and by everything I mean all of the gloves and modules this is very time consuming and makes a hot recording very slow on the other hand when working with wheat only the required code is served and processed wheat uses the dynamic import and on the records the gout and modules that needs to be reloaded this technique makes wheat project fast regardless of the app size so now that you have the basic idea of what feed is what are the features of it and what makes it different or fast as compared to the other front and tools like create react app let's type into the HandsOn and see how can we create projects using wheat how can we deploy them to GitHub to pulsar and to notify and how can we configure our wheat projects all right let's talk about how to create a static server just a simple plain JavaScript and HTML website using read first thing first that we need to do is to add wheat in as a project dependency so for that what we need to do is npm install beat all right we have wheat install and if we go to the project.json we can see it here so with that let's create an index.html file here and add something here so for example hello world save this and now we want to start the server um so for that we need to go to package.json this should be add add scripts and in the scripts for now we only need one script that is Dev which stands for development so this is to start a development server so for that we will do weight Tab and that's it so now let's try this and for that npm gun Dev and over server is started so let's see that in the browser all right we have our server started and running and as you can see this here in the browser let me also open the inspect agreements uh and maybe console so yeah with that um so we have our server started so next thing is let's try to add JavaScript here so let me make main.js and for now let's simply go with console log hello world save that and then go back to index.html and then here one thing to keep in mind is uh to make things simple and to remove extra editors I am not adding a lot of tags that I need to do when I'm actually working on a project for example you had text body tags uh those HTML tags Etc that is to make things simple and to remove extra details but when you're working on an actual project you need to add those details or add those extra tags not extras add those compulsory tags and necessary tax so with that uh next thing is we need to add script so you know this that in JavaScript in in HTML if you want to link a Javascript file we go with the script so here it in the usual way is this main.js but we're not going to do it with this one and also there is one attribute that we need to add here otherwise this we do need few things that will not work um Let me let me show you that right now before we fix this and add that one attribute that we need so here this works right now as you can see Hello word but let's say that we have multiple files here so let's say file.js and we export something from this file um maybe an object and we call this we have a value inside that that is hadak Dev and save this so save this and then uh let me resize this uh a little bit so yeah we save this and then go to Main and High import file from dot slash file we save this and you can see cannot use import statement outside a module so why is that that is because this module import will not work until unless we set the type to module for this script and that is very simple and easy thing to do so type equals to module save this and now we go back to the main.js and add concert.org file and save this and now you can see this works so we have our uh we have our value equals to correct F so that that that so that type equals to module makes it work and another way is even if you do not want to go with this one there is also another way just to show you so that is import dot slash main.js or maybe just main.js uh oops yeah that will not work so Dot scratch main.js and now this is behaving the exact same way as it was when we add Source like this so both ways work um basically this portion between this section between the script starting in the ending tags this is uh about uh this section is for JavaScript so we can either add JavaScript here or we can add our JavaScript here so both ways work for but for now let me let me let me add it here and then eventually we can move out of that to the main and also I do not need the file so let me delete the file for now and let me also remove it from here all right uh so that is about how you can add uh how you can connect Javascript file with your index.html so that is about JavaScript and index.html but what about CSS so for that let's uh make something here with name star.css and H1 here and then here equals to Blue uh not Blue Tomato for some reason I like tomato using in using tomato in tutorials and then go back to index.html and something we already know and been using this so link CSS and style save this and we can see now this is working if I now go to sources Nar sources if I go to elements and how about on this click on this and you can see the style tomato and then here we have star.css so this is the this is that style but yeah so this is yeah so this is uh to add style to add CSS to your project but if you have worked way to react.js you may know the concept of mod use like CSS modules and the concept of of CSS modules is sometimes we may have a lot of uh CSS classes and since we are using we have reusable components and uh we are doing a lot of imports exports Etc we might end up with similar classes and that may might give us conflict so to fix that we have a concept known as CSS modules um but if you know if you already know about that so nothing much to explain here and so that's the guy let's see how can we do that so for that style Dot module.css and then here I am going to copy the code from star.css paste it here save this and then go back to my index.html and then here I cannot do like this module dot CSS this works but this is not what you want um for example let me show you what what I mean by this works but this is not how we want it so rather than H1 we give it tighter we save this and then go back here and then give this class equals to Tita you see this is not working but if I go here and then add dot writer here save this and then go back to HTML and remove dot module and we save this now this works so which means that it works for start.css but it does not work for style dot module.css okay so why then we are using star dot module so let's talk about that and let's fix that so we will comment this code and then go to the JavaScript section and here import classes from style dot module dot CSS and keep in mind classes is not a keyword this could be anything depending on whatever name you want to give it to for example I can also give it to styling I can give it the name starting or start classes or anything anything works and Technical status data reserved keyword so with that save this and then do console.gov glasses and when we save this and we go to the console we can see this here that it has this object here title and this value here so what exactly that is so that is this title and here that this title stands for the class name and then we have a unique sequence and then the guide number so this one stands for the guy in the um to here is another example so body and maybe anything here because we are not using this blue save this and now here we have another value another property body that is equal to body the class name a unique sequence and then the guy number that is five all right and uh now the question is how to use it so unfortunately we cannot use it like this uh as you can already see we have that writer but this is not working here and like one way is to like for example if I refresh this if I keep refreshing this it's always um the number the unique number is I was same for the title um so one way is to like if I copy this and if I paste this here let's see if that works save this and yeah it worked but when we are making an application we cannot do this this is not a uh an applicable solution we cannot save this and console work the classes and then check for that and then copy that and then paste them here this is not something that we need uh this is not something that will work so what we need to do here is we remove the class here from here and we can add the class dynamically in using JavaScript so for that document dot very selector and then we select over H1 tag and then class name equals to classes Dot classes dot tighter and we save this and we have it here hello now if I go to the arguments if I go click on this you can see here we have that Dynamic regenerated class name and here we have style so if I click on Style it gives me this style which is this star dot module.css so that is how you can dynamically generate classes class names and then and and then add them to your HTML and connect them with your customers so of course you need a JavaScript for this but that is how it works and yeah so that is the basic idea or and that is a very basic server now we can copy all of this except for the first import main copy this we move this and then here we can just simply do source that would be main Dot that would be main.js and save this go back to console we have however that works perfect and then just simply add these two things and of course import should be odd at the top and let's just do some effecting all right now this is working so this is a very basic uh static server uh just a simple JavaScript HTML and CSS now you may be wondering if there is a quick way to start with this project like if there is a template to spend less time on configuration and starting with the ball upgrade so yes the answer is yes there is a template that you can use and let's see how we can use the vhci to generate something similar to this so for that let's move to the next section where we can talk about how can we use a CI to generate similar template without starting from scratch all right we have our new project here and this is a completely empty folder nothing here as you can see here and the project name is vinegar dot dash feed so what we need to do here is we type npm create weight and enter this now it's going to ask us a few questions so first thing is Project name so since we are already in the project we made up project so if I go with wheat project it will create a new product for us but what I want is I do not want a new folder what I want is to create to create the project inside this folder here so I will remove this and I will just add dot so dot means that it should be generated in this folder without creating a new folder and then here we have the options of which for which project we want to we will discuss some other options but for now we are going to we are going to go with vinegar and JavaScript and that's it so we have that same process generated here and first thing first that if we need to do is you can see we have the dev dependency read but there is no node modules so which means that if I try these commands this will not work as you can see npm1 Dev this does not work and the reason for that is we do not have the notebook use this problem this dependency is not installed so let's simply and quickly install this npm install so now if if I do it again npm gun Dev this will work now as you can see here um but if before opening this let's uh get a good idea of what files we have so index.html something we had previously we created from scratch and then here script type module Source main.js exactly the way that we did and then we have the main folder here which is like importing Styles um so it's not using the modules but still this we we also did something like this if you want to convert it to modules we will be doing um classes and then style dot module and then we also have to fix the name here in here but uh there should be four but for now let's not do this because you already got the idea so yeah and and if you if we have to do this we have to make uh multiple changes here so then we have the index.html and then we have the public folder which has the assets so in this case it's uh the SVG of the V so let's uh start server and let's we already have started this particles all right so here is the server and this is the server generated using the create other template so that is how you can start with your boy upgrade uh using the template that is given to us by wheat and feel free to make any changes depending on your project so that is it for this section uh with that let's move on to the next section on uh how can we skip those all of those questions we had that was the project name and uh the type Etc and if there is a way to quickly generate this project or the power create uh the template without going through all of those questions and yes there is a way so let's let's learn that so what we need to do uh is we type npm create white and then my Js app then dash dash template now if you're using npm 7 plus version 7 plus you do need some extra dashes here if you're using npm 6.x then it is fine you do not need need these dashes but if you are on version 7 or above you do need these extra dashes and then template and then the template should be vinegar and we have our setup here so let's open this and see what we have inside code mygs app and here you can see we have the exact same setup so we just skipped all of those questions similarly we we are going to talk more about this but if in case Cuts you want to go for uh make a view JS application so for that npm create feed my view app again extra dashes and then template View and let's see this so maybe just go inside this in the terminal and let's see uh we have index package.json Etc uh let's see the practice.json here and you can see here it has view in it so that is how you can use the templates without going through all of those questions by just using some extra arguments in the command guide all right now we already know about the template CLI commands um so let's try to use that for uh making a react chess application so for that I again have a new folder and a new project and that is a computer empty project with the name react.wipe react dash feed so what I need to do here is one way is to go with npm create create feed but what I will do here is npm create wheat Dash Dash and dashes template again notice that I've add a DOT here otherwise this should be like my app or something and then last thing here is let me add a DOT and then the last thing here is the template should be react and let's see yes we have the package and this is a react application and if I do npm install so this is the last step and once we are done with this we have our react application all set up and see how notice how easy it is to create a react application with v and like create reactive which takes almost a Whole Decade to create a basic project so we have this our setup and uh this will not work because this is from the previous project um that we created but gets Sky npmgun Dev and let's see what we have here and yeah we have our uh wheat plus react application so that is how simple it is to make over uh basic react application um so yeah with that uh let's move on towards understanding how we can integrate tag event uh we are going to first try with the simple vinegar JS application the static application and then we are going to move back to this project that we just created and add event CSS to this one as well so uh let's uh open that other project that we created previously so this is a web project and what we need to do here is uh we first need to start the dev server um so that I can refresh this and here you can see this so to add payment here what we need to do here is first thing first uh we will again we will stop the server for now clear this and then here we need to add a bunch of things here so first thing is npm install we basically need to install a bunch of dependencies um so of course Taiwan CSS and then post CSS and then Auto prefix so let's install this and once we install these dependencies then we need to do npx David CSS init which stands for initial guys and net P so this adds this divin.config dot CGS now we are almost set up uh another thing that we need to do is um so this is something you can get from the table and CSS website but we need to import the payment components uh the table and classes so go to this go to the style.css uh any of your CSS class and then add these tablet base different components they should replace different components and then they went utilities and that is it so now we are done with this um then it's almost set up so let's try let's let's see if this works npm gun Dev notice that we have a warning and then there was slight change in the structure let's see if the CSS components of David is working so for that I need to go to the main.js because we have something here and then get me Chi cross equals to text Dot Maybe 2xi and save this and you can see it did not work if I even if I go for 6xi it's not working um maybe I can try pg Dash black and text Dash white nothing works and the why is that um the reason for that is if I again start the server there is this warning the content option in your table and CSS configuration is missing or empty so let's go to the time in config so this content should have are the files where we want to apply our Styles so let's add that let's for now we have this index.html and we don't have anything here but we will also include this file so index.html and then for now it depends on how you want to use this but for now I am going to include all of my JavaScript files so uh dot slash stag.js and save this and the moment I save this you can see the change happened here so I have a bit with the background black background and white text and if I go back here and then if I change this to let's say 3xi this works but 6xl looks pretty good then we add some padding just to show you so PX 4 and py2 and we can see it has spreading so yeah that is how it works and we have successfully integrated and added tape and CSS to a vinegar are static um website app so with that let's move on to a reactor supplication and let's see how we can add it there as well it's it's almost exactly the same but let's see how we can do that all right back to react.js application created with wheat um npm1 Dev and refresh this and we have this uh so let's see how we can integrate turbine into this so for that again I'm going to stop the server for now and then again install all those packages so they went CSS post CSS and auto we fix it it's a side thing a side note uh this this documentation is already available on the table and CSS official website so you can also check it out from there as well and then we have this installed so let's also go with Degen CSS init Dash p which we install the tavin config file here and again we need to add our configuration we need to and again we need to add the files that we want to be included for the classes so here it's going to be index.html and then another one is going to be Source forward slash extract and then static Dot Dot and then we have to include multiple extensions here so that is JS DS jsx and TSX depending on what extensions we are using so this one is all about GSX so we can remove typescript extensions and even to be more specific we can also just include dot jsx but it depends on how what are what are the extensions you're using but this basically means that go to the source and then maybe something that exists here or maybe something that exists in a file and then Dot GSX uh static jsx means that anything dot TSX so that encodes app.jsx as well as main.jsx so with that let's uh uh yeah one more thing that we need to do is to import the classes for uh the index dot to to the index.css so go to the index.css and then again tag event base components and then the event utilities and that is it save this and now let's start the server and be I'm going to Dev we see the change in the in the images so that means that something happened here um we have no utility classes were detected in your source file so let's see a what exactly is happening here uh yeah this should be the Google practical entertainment so in wagon so maybe let's fix this and that is what it wants us to do stop the server start it again let's see if this work if it does not then maybe we can just remove this one so maybe add it here um again for the H1 BG dash pack let's see if it works yep it is working so yeah text white and text Dash 6xl or maybe 5xl and yep that is how we can add our HTML classes um and and yep that is how we can add our different classes and maybe I can go to my index.css uh maybe yeah so we move the padding so I maybe remove all of these values and we have we can then just go with different classes but that is how it works um and then that other warning you can ignore that for now so yep that is how you can integrate CSS into your react yes application so with that let's move on towards the next section all right let's understand how environment forgiveness Works in wheat and to do so let's first understand the theory behind it in wheat there are multiple environment variables and fast for example a simple dot EnV file loads in all cases and uh dot EnV dot local also goes in all cases but is ignored by git simulator.env dot mode on records in a specific mode in this case the mode stands for development of production and r dot env.mod.co also loads in a specific mode but is ignored by git so let's see that in action so for example we create this new file dot EnV now this file is the file that environment variables that we have in this file we got in all cases for example if I type something here and also to keep in mind that whenever you are adding an environment variables you need to have a prefix that is white underscore test otherwise this will not work I will give you unexpected issues the next thing is we have this another environment for you by that is env.goker there is not much difference between this dot EnV and Dot EnV local except the except that this dot env.hoker will be ignored by gate 4. so for example if you have some sensitive data let's say some API key or something similar so you can add all of that here for example here we can add DB name and then some something here and then under white and wheat and score DB pass and then also add something here password and save this now the question is how can we use this in uh in our JavaScript for example if you use node.js so it's in node.js it's something like this node underscore process underscore node underscore EnV but in case of Feed the way to use it is import dot meta dot EnV and if I save this and I go back to my console and in the console I can see these things here so let me resize my window I'll get a bit so here I can see uh we test as run and then wheat DB name something and we DB uh pass something now and I also have some other variables that is Dev Mode God Etc um let's talk about that in a second but in this case if I commit this and push this to GitHub this we test wheat underscore test will be sent to GitHub and committed by kit but the wheat underscore DB name and wheat underscore DP password big no because that exists in this env.worker let's talk about these Dev mode dot SSR Etc so these are some properties and we can use that to get an idea for example if I want to see that if this is a development server or a production server and based on that decision we want to make some decision so we can do something like this so let's say we do console log solo is running in and then import dot meta dot EnV dot mode I believe this is mode uh yes but this should be mode and save this so you can see Server is getting in development similarly we can also do something like if if you want to let's say check that if based on like the mode we want to make a specific decision if it's in development server we have a specific scenario and we want to make a specific decision and if it's a production server we want to make another specific decision so for that case import dot meta dot EnV Dot Dev and then console.org this is Dev server and also let me do console log import dot meta dot EnV and save this so like you can see this here this is Dev server that is because this is two because we are in the dev server open this and in this case Dev is to go because we are using wheat Dev if we do weed build so that will be production and then in that case mode will be production and this period will be true and this one will be fast so these are exactly opposite when Dev is to God is false and when God is 2 Dev is fast um so similarly the base URL is the base UI in SSR stands for server side again so this is pretty simple now let's move on to another example um so let's say we have EnV Dot plot dot dot local and this should be dot EnV and let's say that let me see why this did not work EnV dot dot dot okay so maybe we can change this for now for testing uh we can change this to dot Dev and let's see this so white underscore sum underscore key equals to uscon and let's test this now so if I open this do we have it do we have it nope we don't have it let's remove this and then check this again all right um this is probably because we are writing it wrong so this should be in V Dot development and let's see this again and now we have it white underscore read underscore sum underscore key equals and similarly if I change this to dot local and then save this again refresh this this also still works we didn't score some underscore key equals to run now if I change this to production and close all of these messages and save this now in this case we still don't have anything that is because this will work for the production but this does not work for environment figures and it's uh to get these values it's the same as import.meter.env and underscore something so maybe change it here dot uh read underscore sum underscore key but this will not work for production so let's revert it back to development and once we save this we flash this we have some key here we have a second here uh that is the value of v d underscore sum underscore key so the the way to get it is the same as the way to get anything from dot EnV the only difference is the file name so that is how it works for uh the different modes now talking about learning priorities in EnV variable for a specific mode takes a higher priority than a generic one so to show you that for example we have this here and I'll copy this and do this again here but in this case I change the Swagger to haddock and save this now let's see what we get here we still get S1 that is because this one will take and has higher priority as compared to this one or this one because this is more specific so the more specific will give us takes higher priority than the generic ones moreover uh variables added the script have the highest priority for example if I go to my package.json and then here I type something let's say white we again go with the same key white underscore sum underscore key and set this to uh attack Dev and save this and stop the server start it again so let's see what we get there so now we get product F that is because this one has the highest priority and then the more specific environment variable sketch the higher priority and then the US priority is for these generic environment variables so that is how you can use environment variables in wheat and all of the different modes and how of the different priorities for the variables in wheat so with that let's move on to what's the next section alright folks let's talk about how to deploy our applications and in this section we are going to talk about how to deploy it to GitHub how to deploy it to netifi and also how to deploy it to versa so let's start with GitHub the first thing that you need to do is you need to have a project and in this case I again created a new template and this is a vanaga JavaScript template which means that this is a static website so first thing first I am going to do is I will do npm install to install other repositories other dependencies and once we are done with this uh before we move on towards deployment section there is one thing I want to talk about and that is how to make a build so for that what you need to do is if I go to package.json there you can see there is a build and a preview command so bit stands for making the production version so if I do npm build you can see a desk folder so uh if I want to check this so what I need to do is I want to I need to do npm gun preview and this will start the server for us so if I open this you can see this server and you can see this website um something we already know and we did this before so let's get back and one other thing is let's say I do not want this 44173 port so what I can do here is I can give it a custom Port that is port 8080 save this and then again do npm1 preview and this will give us the Goku host with 8080 so uh that is how to test it so once you're done with testing your website locally testing in the build version then the next part is to deploy it on GitHub pages so for that what I need to do is I have to make a GitHub reposit and for that I will go to my GitHub and there create a new repository here so maybe go here and then click on new Repository and then I will name this wheat GitHub and select myself here nothing to do here and then click on create capacity so we have a simple repository what I need next is I need to push out the code to GitHub this is pretty simple these are pretty simple steps you already know this I assume so I'll clear the console and then initialize git and then add all of these and then last thing is initial commit all right now the thing is if this was uh so in this case this is going to be wheat GitHub but uh which means that this is going to be eventually uh dot attack dot GitHub dot IO forward slash wheat Dash GitHub so this will be our repository um this will be our depart website but if this was not the case and we had something like this product.dev.github.io which means that this capacity was named as productive so in that case we do not need to do anything but in this case this is going to be uh V Dash GitHub so that is the repository name so for that we need to also change our path so that when it uploads and when we deploy the server when you deploy the website it is zipcard at it is deployed in we Dash GitHub so for that what we need to do is to have wheat config file so that is feed Dot config.js and then here I need to do Define config here and then export default Define config this is a function and then this function accepts uh object so objects so first thing here is base so base stands for the base path where this path will be so in this case by default the base path is this which means that nothing uh just a simple scratch so the reason uh that you do not need to modify it if if this is forward sketch product Dev so that will be eventually this one hotel dev.github.io so nothing here and that is the default part but in this case it is going to be wheat Dash GitHub so which means that we have to modify our base path to make sure that everything work so what I need to do is this should be read GitHub and also have forward slash so save this and if I now again do npm1 build and let's see this so npm1 preview and now you can see this that the path is totally different so it's sweet GitHub so let's go there now here is the problem uh we have the JavaScript logo working but the wheat Coco is not working so a quick fix for this is and this is something to keep in mind when you have in a different path and so this currently it has aggregate of path and this will not work because the reason for this is this is if I click on this and open this in a new tab this is basically not using wheat Dash GitHub here so the issue here is the long path and the fix for this is if I do V Dash GitHub and then forward scratch now this works so to fix this what we can do is we can make this an absolute path like this and save this we start with server uh make the build again and then again do preview and let's see this now so now this works so that is to keep in mind that it should be absolute path not the greater path and the reason that JavaScript Coco works is that because we are using import here we just tested our build version locally so everything works good so let's stop this get add and then we just updated the path rated path and then get push origin Main uh get push origin mean whoops get push origin mean yeah this is because we did not copy this so we have to set this and then get personal reason Main now let's go back here refresh this and we have our project here so let's uh talk about how can we now make a GitHub page here so go to settings and then go to pages and then here we are going to go with GitHub actions and here in this case since this is a static HTML file so we will go with this option static HTML configure now here are we have to do a couple of things here and if in case you forget this you can always get this in the whatever changes I'm making you can always get this from read documentation but what we need to do here is uh this is just setting pages and uploading artifacts and all those things but the thing here is this is a wheat project which means that there are some dependencies if this was a simple HTML project then we do not need to make any changes here but this is a wheat project and it has some configuration basically npm install and read build and read preview that you can see here so we need to add these things so for that what we need to do is let me Zoom this a bit so that we can see this maybe just a little bit more and yeah so what we need to do here is we need to add a few more actions here so steps here so for that I will add a new name and this one is going to be set up node and then here it is going to be uses actions forward slash setup Dash node at V3 and then the next thing is with that so the width basically means that with which node version I want it to be so this is going to be 18 and then cash equals to this one is npm then the next thing is we have install dependencies so once we set up our node version we need to install dependencies and the command for this is npm install and then once we install dependencies so something we already did in our local server so then the next thing is we need to build the dependencies build the project so this one is going to be build project uh a bit so the name is basically the action name what a step name what we are doing and it could be anything it's up to you how you define it and then this one is Run npm Gun build and I believe that is it so yeah we need to build it and then we need to set up Pages Etc now one other thing is if I go back to the server uh if I go back to the visual studio code when we do npm gun bid it makes the project in the dist folder so we need to also change that here so upload entire apostrophe path is going to be forward slash dist and that's it so that we save this we don't do anything here because this is just a test file and save this and then go to actions and here we have the action so let's go there and let's see what's happening and click on deploy it's gonna take a few seconds so I will fast forward this all right it looks like something is not working and let's see that so setup node unable to find node version 18 comma for platform index now I know what the problem is so we made a small mistake here so let's go back to the GitHub actions workflow and then static.yaml and the problem here is let me edit this the problem here is this is not no 18 comma this is just 18 otherwise it will create it as 18 comma and that is not what we what version we want so save this and then let's go back to GitHub actions update static.camwell and then click on deploy and let's wait for this all right the deploy has been successful so let's go back to the actions and click on this update actions and then click on this link and here we can see our web page and this is successfully working and we also have the wheat Google as well as the JavaScript that is how you can deploy your wheat application to GitHub using GitHub actions and GitHub pages so now let's move on towards the net KFI version all right let's talk about how to deploy our code to network I just like we did it on GitHub and for this I made a new project and this is again uh and this is again a template and a static JavaScript project so for that what we need to do first is I have to install I have to initialize git and I have to commit all those files so initial guys uh I may be initial commit and whoops I have to put codes all right with that let me go to my GitHub and uh make a new Repository I will call this uh no template product Dev and this is named as Network let me see what name I have here so this is sweet net cafe so wheat Dash net cafe and create repository all right copy this and simply push the code so this is get not get just paste this and then get push origin Main all right so we simply post the code so this was the very simple step we press the page and we can see things here all right so for the next thing what we need to do is uh we need to add we need to add net file CLI this is the npm package that we need let me Zoom this bit so this is the package that we need and I think I have already installed this but let me try installing this again so and and keep in mind that you have to install this um I'm going to install this with Dash G which means that it's a globally installed so I can access this anywhere so for that it's npm install Network C and this might not work so I am gonna do with sudo command and I will add my password and this will install this so let's uh wait for the installation and once installation completes it can move on with the next steps all right it is installed so let's try Netflix I init but before that what you need to do is you need to do Network file login um if I just do Network I it will probably give us commands so it's going I will have to do sudo notify because I installed this using sudo so yeah it gives us other commands that we can use so first thing first is that you need to use Network file login so that it can log into your account and for that it will open the browser for you and you have to login your account I think I since I already installed this so I am already logged in so I am not going to do that step but I will go with netify init which will initialize Network app project here so connect this with uh to a new to an existing rectifier directory Network site nope create and configure new set yes because I want to create a new set um so in my network file this is my team and site name so I'm gonna give this blank so that Network generates its own domain and and the link for me and that will be line up so select that uh nothing here and create it so um yeah we have these links here we can see that but let's first finish the setup your bit commands um so by default it's going to be read built and yeah that is that is exactly what you want uh depart to the current directory dist so yeah that will be test and known that if I detected what you like one just simply yes and which means that we don't need to make any changes here to keep things simple we have it so let's uh go back and let me go to network.com and login here and let's see what we have it so uh if I move back we have so you can see here site created and the URL is this adorable style guides if I open this I can see Hello wheat and this is perfectly working everything is working and if I go back to my uh if I go back to my Netflix I can see that here adorable guides and you can see ghost published was 11 21 so yeah which means that we have successfully deployed our application to network file and this is very simple as compared to uh GitHub using GitHub actions and GitHub pages so yeah our website is live and here it is uh if you want you can also change the domain for this one and for that you need to go to The Domain settings and add your domain here but that's out of the scope of this so we are not gonna do any changes here and if I go to site settings and then if I go for build and deploy you can see currently policy this is the capacity that we have in this one and another thing is uh build command is wheat build purpose directory is dist and or production branch is me now one another good thing is if I make any changes here if I push any let me Zoom this a bit if I push anything to my GitHub repost key to we destined foreign get up actions for me and it will update um it will update this for me so which means that I do not need to manually update this just like we had in GitHub action so every time we make any changes the GitHub actions guns and it updates our website for us so similarly in net profile as well it will update us it will update it so yeah that is how we can deploy our application to net profile we can deploy our wheat application to network with that let's move on to Virtual and let's see how can we our project to us all right again another new apostrophe and another new project that is static static JavaScript so uh I am again going to repeat those same steps that is get in it and then commit this and then push this code so this will be initiate commit I am fast forwarding this because we already just did this twice um so let me create the browser so be it Versa and create the capacity and then copy this and then push the code so get push origin mean all right we just pushed the code and if I refresh this uh we have the code here so with that uh what we need to do is uh we for the previous Network example we installed Network file that was 95ci but for this I am going to install Voice um and that is like this uh net KFI npm install Versa G and I think I have already installed this but let's try this again and probably this will not work because I have to do this with sudo but let's see if this is installed or does this work okay so this is not working and that is because I have to give sudo here um so let me I think I already have installed this but let me just do this again so I will add my password here and get me then fast forward the video all right now what we need to do next is we just simply do sudo versus and set up and deploy yes we have to deploy this so this is the path uh and yes this is y and then which scope do you want to deploy it to contact f going to an existing project nope I want a new project what's your what's your project name wheat person and in which directory is your code located so this is the current directory so I will not add anything here setting up your project all right I want to modify these settings nope because these settings looks pretty good because output directory is disk yep install commands npm install deployment we test a spot part and bid command feedback so yeah all things go good no all right it created this get ignore and as well as this sourcer and we have the production here and get let's click on this open this and we can see our web page so with that let me go to versa and let's see if we have our website there so Versa and then here we have it so this is the website if I go back and here we can see the website waitverse if I click on this and here this is if I go back um this is the link read Versa and here to confirm this we have V Dash versus dot app and this is the same link meet Dash versus DOT log dash dot Versa dot app so yeah that is the same thing and this was created one minute ago by me so so that is how to deploy your website to Versa and uh pretty simple pretty easy and very straightforward so that was about uh deployment all right so by now we have covered a lot of things that includes how to start your server how to make your projects and what exactly is feed and how to deploy your projects and a lot of many things but there is one other important thing that is configuration so we are going to talk about how to configure your wheat project I have again made a new content and uh first thing first I am going to install all the dependencies and again this is a static JavaScript project and I am using that project I chose that project to make things simple so no reactors few JS Etc so I installed my packages and if I do npm um oops not npm install if I do npm Dev it starts the server for me and yeah everything is working so I clear this and I stop the server and clear this all right um so to con so to add configuration what you need to do is you need to activate a new file and with the name feed dot config dot Js and um maybe I can zoom in um and yeah so let me let me size some windows okay so this is the in empty file and this is the configuration file and other configurations should be in this file so what we need to do here is the very simple and the most basic config should be export default and course and uh that is a start course attacks brackets and if I save this and if I do npm1 Dev everything works and this is uh technically this is uh similar to not having this file at all because there is no configuration at all right now and and if I and if we move back to the deployment specifically the GitHub deployment using GitHub Pages we talked about base and we talked about how to deploy our project when the path is not just the username dot github.io but username.github.io forward slash repository name so in that case what we did was we added a base URL we added base so in that case if you remember we used uh something that is known as Define config so but if in case you do not want to go with that and I am going to also talk about that why we use that there are what is the difference between that and this one the basic one so we can also use base for example I add base and I do wheat and save this and then clear the console and then again do npm1 tab so notice here we have working host 5173 and then read so wheat is now the base path and that is because we change the base so which means that it works it's it works exactly the same way but I am will stop the Server create the screen close this and all right um so close this and this and I'm going to remove this and rather than this what I will do is I will use import Define config from wheat and then export default Define config and brackets and then again brackets and then here if I type base I can see Visual Studio code giving me suggestions so the reason are the point of using Define config are comparing this Define config with the most basic config which was export default and default and this so writing it like this um it should be wheat so getting it like this or getting it like this this is both of these does the similar job the difference is in this basic we do not get any Integrations so if I type base nothing nothing happens the space is because we already declared it once but in this case if I don't have the base and I type Bas it gives me the base and also helps me with the what exactly is the base so it is base public path when server and deployment and development of production and then it can be a string or it can be undefined so if I now again do chords and then wait save this and then again npm1 def I can see 5.73 forward slash feed so stop this Server create a screen and uh minimize this so which means that it the difference here is with defined config things get pretty much easy uh things get super easy because we have the integrisens giving us giving us suggestions all right so uh which means that um in this case we uh in this tutorial we are going to use the Define config but feel free to go with the other uh basic configuration as well it's totally up to you all right so uh we already discussed base and um base is something that you already know um and if in case you have skipped that part and you're just watching this video for configuration so base is basically for if in case you do not want your file uh your project to be hosted on the main on the home page which means like localhost 3000 I'll go okay host 5173 and you want it to be hosted on at say Google host with 3000 forward slash feed so in that case the base should be wheat okay so that is the base now with that um maybe you want to do something some configuration uh some specific things in your development server um so let's say you want your project to be if it is going in development if it is going to production then you want the base to be wheat but if it is in development in in Dev mode you do not want the base path um so you can also do that and for that what we can do here is I will remove this and then uh what I am going to do here is I will again um add make this more like a function and then here uh this accepts uh an argument and a single argument which is basically an object and then that object has um consists of three properties command mode and SSR bid now all of these consist in one argument but I desstructured that here in this object so uh we can get all of these here so if I do console log command mode SSI bit so let's see what it gives and then I can talk about uh what exactly it is and how to how to use and this will not work so if I if I do the npm grandf this would probably not work yes this will not work and that is because now we converted this into a function and it must obviously done something so what we can do is we can just for now we can return an empty object and then clear the screen and then again npm gun Def and this should work now so let's open this and with that we have this and let's see what do we have in if I go to inspect and maybe I can dock it or attach it to the bottom and then go to console refresh this uh nothing happens here that is because this is not going to appear on the website this is going to appear here in the terminal and that is because this is the configuration this is not the main.js that appears or that is rendered on in in the browser so what we have here command mode SSI bit so the command itself mode is development and SSI build as far so what does self mean so self stands for Dev mode a development server and build stands for production so if this command is saved so that means that this is a Dev mode and if this is built then that means that this is production maybe we can check that as well but that is the general idea so the mode is for now development and that makes sense if this is if we change this and go to window production so this will change and then SSI bit stands for server side grinding um and as of now in version 3 this is an experiment uh property so with that let's drop the server let's see what happens when I do npm1 build and do we have anything here uh yes so now you can see this is build command turns into build and more turns into production and SSI again is fast and let's see now npm gun preview what we get here again self uh because that is now again in a development mode uh we are just trying to uh see the development uh so we have the production version yet anyway just doing the preview so that is why this itself because we are in the dev board uh we are in the dev and production because this is the production version and then again SSR is false so with that uh now that you have the basic out of these properties um what happens if I if I do so what we can do about the base part so let's say um I can do is if not maybe command if mode equals to so what modes we have one is uh so one more that we have here is production and the other one is document so what I want is if this is in production what I want is that base should be this should be done with the base of power slash beat but if this is not then we just simply do this now let's see what happens here if I do npm gun Dev what we get here so you could host 5.73 but if I stop the server and then npm gun build and then npm can preview now what we see here is this this file so if I click on this and open this so now this is working and again this video is not working and this is something that we have already fixed in the GitHub deployment paper when we were going for GitHub deployment so we have already fixed that but just to quickly let you know how why is that happening and how to fix this if you want to know why is that happening you can refer back to the GitHub deployment section but to fix this we can just remove uh this read from here and then npm1 build and then npm gun preview and this should work now have I refresh this yeah so again if you want to one if you want to learn more why why is this working this way and why not um like this you can refer back to the GitHub deployment section so if I stop the server and if I do npm gun Dev this is now not on the not on the forward slash wait this is on this path and here everything is working um so with that mode and command Etc you can uh add some conditional conditions so but I'm going to remove this um maybe I should also remove this because we do not need this and also remove this and save this let me know if just to make sure everything works fine and yes everything works fine um and that's it so yeah that is about conditional config and based on these settings are based on these modes you can uh do conditional things all right um the next thing is uh async config so you can use async config for example calling a third party API to get some data that can be used in configuration and how exactly to do that so that is um what you can do here is you can make this function async so basically you pass the function in this Define config and then here uh you restructure this again so that is command and mode and then here uh you do const data equals to await and then what uh some async function that you have um already defined somewhere so you get that and then based on that you return um other information and then use this data so you can also this is pretty much the same thing that we did before right this command and mode and SSI bit so we did that but we just made this function async and that means that uh you can also have some async uh configuration here and make this configuration in async function make this function in async function so if you have something some thirdparty configurational you have to access third party fault configuration you can also do that and simply make this function async by just adding async here and then using a weight here um you already I'm I am assuming you have the you are familiar with async await concept so with that let me remove this again and this as well and save this all right um so to make things simple because and and also we do not need async at the moment are these commands and modes so with that uh another thing and by the way um there are a lot of configuration that you can check on the on the dogs in the docks of uh vidges but in this tutorial I am going to go few of the most important Accenture the most used configuration uh to give you a good idea of how to get started with uh configuration I'll have to do the basic configurations all right let's talk about how to load environment variables in our configuration file so for example if we need the files for some reason so let's see how can we do that for that maybe first thing is we need to make an environment variable file r dot EnV so that we have something to import and here I can do V Dot DB name equals to DB name and not wheat underscore name DB name and then wheat underscore pass equals to DB pass and save this maybe I can do DB um just a name and then go back here and for that to load them we need an import to import something that is about EnV and then here we need to again convert this to a function so this function and we need uh two things here that is uh maybe not two things one a one and that is mode but uh let's stay that's a import a command and mode and this should be in the brackets these brackets because we are destruction in them and then here constant V equals to your dnv and then mode and then crosses dot CWD so the CWD method Returns the current working directory of the node process so this means that this in this case it's a returning this target key and then we have empty codes and that third parameter if we set that to empty codes uh this means that to load all the environment for viewers regardless of wheat underscore prefix so this means that we will get every uh applicable environment for you but and you can see that in a few seconds so with that let me do console.log and then EnV and then uh maybe here I can do return and then empty so let's see what we get here npm gun Dev and oops we have an unexpected area and let's see why we have that um the path argument must be of a type scanning so yeah this should be like this and let's uh see it again so yeah this work now and let's see what we have here so you can see that we have everything here and if I scroll to the top we will be able to see what we are looking for that is wheat underscore name wheat underscore pass so let's see if I can adjust access with name and pass by just doing this and let's try again I don't know if this will work but let's see and Yep this works so this is a this is for the prefix so if I type this this means that we only get uh other variables that start with V so that is how you can access that and then you can use them here so that is for the environment variables and then let's talk about some of the options and for the options we do not need to have this object we can again convert this to um a simple object we don't need the function and then here we already talked about the function let's talk about so another important one or a simple one is so if you have noticed whenever we do something here it clears the screen so for example if I if I save this and if I create a console um if I run npm1 Dev you see the screen is good and we get this but if I get safe I do not want this other it's technically it's not cleared if I scroll to the top I can see either data here but let's say I do not want that so what I can do here is I can do clear screen equals to fast this is 2 by default so if I do screen first and then stop the server and let me resize this npm and Dev and now you can see this is not clear and if I make a small change here and save this you can see nothing changed here uh I mean the previous log is still available on the screen so that is a very small property that is a very simple property that you can use and then apart from that um in the environment for you by the default prefix is sweet underscore that is what what is expected but if you want you can also change that so let's say I want this to be uh rather than wheat I want this to be app and for this one as well app but for that we need to figure configure that in vid.config and this is EnV prefix and then here I can I can do app underscore and save this so now we will have app underscore name and app underscore password hide this so I go here and then I type console.org import dot meta dot EnV so that is how you can import environment for your bus we already talked about this before so I saved this and I go back I refresh this up this is not the server the server should be the server should be 5173 so five five one seven three and I go to the inspect and uh go to console and we size this refresh this and then here you can see app and it's called name and app underscore pass so this works now all right so that is for uh so so that is to change the environment for variable prefix now make sure that you do not set it to this because that again we might return an error and also this means that you will be expecting a lot of and unexpected issues so we do not need this so let's get back to app and let's go and then next thing is a source map so uh if you are working with the let's say scss then when you load your website and when it appears on your browser it's uh the browser do not understand the CSS assess or any other preprocessor it you need to use uh you need to use something to convert all of your code to CSS and then that CSS is loaded here but sometimes that CSS in in the in in the arguments in the arguments that CSS might be a minified version so uh to D to make it easy for yourself to debug the issue so what you can do is you can do CSS and then in CSS you can do Dev Source map and you can turn this to two so this means that you will have the source map if you want to enable The Source map property if you do not know about the source Maps basically the browser can map C CSS generated by a p processor such as SAS back to the source file so it means that you will be able to trace that specific property back to its CSS scss SAS version so that is the property that is the functionality of uh Source map so if you enable this you will be able to go back to that SAS scss file and exactly get that line number of the property in scss in the browser so that is for the source map but for now since we are not using this so let me skip this uh maybe comment this and then another thing is if let's say I want is um so there are two things one is the server and one is the preview so the server is when I let me show you this so if I do server and then if I do if I want to let's say change the part number if I do part 3000 and then if I do preview and then part 80 80 and save this I need a comma here save this and then refresh this clear screen and npm and build I make the build and then npm and preview so let's see what we get here we get 8080 that is for this one now let me so we get the ETD that is for the preview and for the preview we already set the power to 8080. so if I stop this and if I now do npm gun Dev what we get here we get 3000 so what do you understand from this um the understanding here is that this server uh has a pod that is set to 3000 and then we have preview which has a part of 8080 so this means that when we ever we execute npm gun Dev it will use this port and whenever we do nbm and preview it will use this part now it may be possible that a port is already taken by something else and in that case what it will do is it will take the next available port and um that whatever that is so that will be automatically detected and it will take it but let's say you do not want that and you want it to be if that Port is taken so just close the app so what you can do here is you can add strict pot equals to true so if you do this um this means that if this 8080 is not available so do not search for the next spot and just exit uh close the project across the server um so yeah that is uh what it means so maybe what I can do is I can start another server in the background and then we can we can try this again all right I started another server with the port 3000 and uh let's see what happens here so if I do npm gun Dev um we can see now 3001 started because 3000 is already taken but what I if I do strict pot equals to 2 and save this and stop the server here uh this might take a time so if I can stop this and stop this and this is not working so let me just open a new terminal and then let's try this so if I set this to save this and npm I'm going to have uh you can see what we get here um Port 3000 is already in use but if I comment this which means clickbot is equals to 2 save this and then High npm gun Dev now we have Port 3000 is in use trying another one and then 3001 so we get three thousand one all right so that is uh how you can how you can State the port number uh if you want you can leave it and by default it's far so which means that it will get the next part number and with that in other thing is uh the log level so let's say in server um if I change if I do uh not in server this is not a server a previous password command so this is General command so if I do log level and turn this to silent and save this and let's say I set this to 2 as well stop this so let's me let me save this and then let's try something here so npm.dev and uh let me maybe stop pause this because I was expecting it it did not work so let's do npm gun Dev and we do not get anything here but what exactly is happening so if I um try to if I try to open my browser and if I do and Google host 3001 it is working but we do not get anything here that is because the log is set to sign in so basically you can choose what messages to see in the logs by using Google which has four options that are info one error and second out of which the default is info if you set it to 1 you will get the warning messages if you set it to error you get the error messages and if you get set it to silent so you will not get any kind of messages and then um for now let's set it back to info we can comment this as well but with that you can also change the environment directory um as as well by using EnV directory this one and uh we can maybe set it to the EnV um and setting the part to that folder where you have environment variable so what I mean by that is let's say we have this environment variable here but uh maybe I can make a new folder here and name this the EnV and then again here make another folder dot EnV copy out of this paste this here and then type here new add new so now we have two environment variables one is this and one is this I need to add a comma here so what do you think which app name and password we got it this one or this one so let's see that if I go back here and since we already have this here and in vgs config with config.js we said environment environment directly to the EnV which is this one and then in that we have NV so let's see what we get um if I go to console and uh if I refresh this this should be if I do npm1 Dev oops and BM1 Def and then go here you flash this now you can see DB name new DB Pass New so this means that uh we set when we set the EnV so it takes the high priority and whatever values we have that will be using out of the environment variables will be taken from this one let's also try um app underscore test equals to test and let's see if this is used so if I refresh this and if I see we also do not get that here because now this means that only the environment for you was that are presented in this file will be taken so by default this is um this is the root folder so which means that anything that is here that that works so I will comment this with EnV and yeah all right um another thing that we can do here is let's say I am fed up of running development npm gun Dev and then going to my console or going to my browser and then typing the UI so what I can do here is I can in the server all in the preview so what I can do here is um I can do open and then type index dot dot HTML and save this so now in this case if I again do npm gun Dev it will automatically open uh or start the server and open the browser for me so it already open and it opened in in this tab which is not in the view so maybe I can try this again and maybe it shows up here on the screen so if I again do this and yep you can see this it automatically switch switch uh the focus to the Chrome browser and to that specific tab so and you can also set this here as well um you can set the open here as well with index.html or whatever file you want to use and with that uh that is those are the basic commands for those are the basic configurations for vgs there are many other configurations which I did not cover so if in case you are interested in those you can visit vgs.dev and then go to config and then here you can find eye of the configurations so with that again I just discovered maybe just 10 percent of these um of 15 percent of these commands so with that that is it for this section all right so that is it for this V tutorial I hope you liked the video If you do so please make sure to follow me on other social platforms such as Twitter and Instagram and give this video a thumbs up and please make sure to subscribe to the channel also let me know what would you want to learn next are what is something that is missing in this tutorial and you want me to cover that as well so hope to see you again in the next video