learn how to code a chess game that can be played against another person or a computer using the stockfish API this course from Robert uses angular but you can still follow along if you're new to angular hi and welcome to this comprehensive tutorial where I'm going to teach you how to build a full chess application from scratch using angular even though you may not use angular I will explain everything in detail so it will be easy for you to follow and implement it using your preferred language and framework application consists of two two parts playing against friend in the same browser where we implemented correct piece moves we also implemented special moves like aasad capturing also implemented check detection Pawn promotion and castling as well here we have game history component which shows us moves that have been previously played if we click on one of the move it will simulate how that position looks like when that move has been played finally we are going to use stockfish rest API in order to be able to play against computer in our application click on play against computer button dialogue shows us to choose between different levels of stockish strength and also to choose color for our pieces we are waiting for computer to move and as we can see everything works fine if that sounds interesting let's start with tutorial before we start writing any code my goal will be to First clarify how things should be done and then we will move on to the writing code part because if we know exactly what needs to be done writing code is the easier part although the code is written using angular and typescript if you understand the basic logic behind the application it will be clear to you how to implement it using other languages and Frameworks so let's first start with the objectoriented model for our chess application on the one hand we will have the chess board and on the other hand the pieces for the chess board we are going to have several basic properties like chess board which is two dimensional Matrix of pieces player color which is color of the player which turn is now and chessboard view which is getter that represents board as two dimensional Matrix of characters from which UI can print the board for pieces we will have fanch which is short name for piece for now you don't need to worry about fan rotation we will talk about that later also piece color which can be either white or black and directions in which piece can move represented as array of coordinates here are fan characters for each type of the pieces for both black and white pieces as you can see fan CH is simply first letter of piece original name and for white pieces it is represented as uppercase letters and for black pieces in lowercase letters here is the coordinate system for our chess board X represents board Rank and Y represents board file and finally I want to make difference between piece save squares and pieces directions as we can see both queen and king have same directions but Queen can move multiple squares along One Directions while King can move only one square at the time if we don't counting castling as move in terminal create new angular project chess game and once it is completed open Visual Studio code and we can start with coding we are in Visual Studio code in app folder create chess logic folder then pieces folder and declare piece. TS file now declare abstract pie class that has protected abstract property fan character which is of type fan character that we are going to Define later also protected abstract property for pieces directions which is type of array of coordinates and through Constructor Define private property color which is type of color now we need to Define Getters for those properties so first let Define getter for fan character now Define get for pie directions and finally Define get for p color now in chess logic create models .ts file and here we are going to declare those types so firstly Define a numeration for piece color color could be either white or black Define type for coordinates which is object that has X and Y property both type of numbers and finally Define enumeration fan Char and here we are going to Define fan character for each type of pieces for both black and white colors white pieces are represented as uppercase letters while black pieces are represented in low overc case letters so now just copy white pieces and change white to black now in pie class import those types and finally after we are done with that we can start implementing those abstract class for each type of piece now we are going to create Bishop TS file declare Bishop class that extends base piece class now Implement inherited properties Bishop could move in four directions all of them are diagonally as you can see in the picture now specify Bishop color through Constructor now called the super Constructor and implementing fan character that depends on the color of the piece so if piece color is white then fan character white Bishop otherwise fan character black Bishop now create Knight DS file then declare KN class that extends base piece class Implement inherited properties Knight can move in eight directions as you can see in the picture now we are specifying all of them now specify piece color through Constructor call the super Constructor and Implement fan character property that depends on the piece color again if P color is white it's fan character White Knight otherwise fan character Black Knight now create Queen TS file declare Queen class that extends Base pce Class Implement inherited properties Queen can move in eight directions now specify piece color and again call Super Constructor and Implement fan character property so if P call is white then it's fan character White Queen otherwise black queen now create Rook TS file declare Rook class that extends base piece class Implement inherited properties Rook can move in four directions now specify Rook color through Constructor call Super Constructor and Implement fan character property if the color is white then it's fan character white Rook otherwise character black rook and now we are going to have one additional property has moved which signalizes if Rook has moved and that property is important because castling can't be done if one of the Rook has moved and here declare get for HMO property and also Setter that takes no arguments and it just sets has mve property to true now create King TS file declare King class that xense base pie class Implement inherited properties King can move in eight directions same as Queen so now we are copied directions from Queen and paste it in King class now specify King color again call Super Constructor Implement fan character property King also have private has mode property same as rook and now from Rook class just copy getter and Setter for has move now create pawn. TS file and declare Pawn class that extends base piece class Implement inherited properties and now for Pawn directions we are specifying all possible moves for white Pawn later we are going to create method to change those directions if Pawn is actually black pawn call Super Constructor Implement fan character now Define private method set black pawn directions that changes directions if Pawn has black color we just need to change X property to x * minus1 for black pieces now if piece color is black we need to call set black pawn directions method and also need to declare private has moved property private has moved property is responsible to manage if pawns have ability to move two squares straight because initially they have that option but after each move we need to restrict that so firstly copy getter and Setter from R class and paste it in Pawn class and now copy directions so when Pawn has moved we need to update directions by restricting that coordinate that says that pawn can move to square and now if Pawn is actually black pawn we need need to call Private set black pawn directions method now create chessboard TS file in chess logic folder and declare chessboard class declare private chessboard property that is two dimensional Matrix of pieces or null where null representing empty Square Define player color which is color of current player initially white is firstly playing and in Constructor implementing chessboard property Define first White Rook then White Knight then white Bishop then White Queen White King then Bishop again Knight and Rook now specify right pawns need to copy that seven more times now need to specify four empty rows and finally Define black bonds and black major pieces so here just change white color to Black now Define getter for player caller and finally Define public getter chessboard view which is responsible to printing the board so here we are looping through chessboard and for each row we need to see if that row contains Square which has piece or it's empty Square so if piece is instance of piece we need to return its fan representation otherwise we are returning now import fan character now close all the tabs and open Terminal and generate component that is responsible for rendering chessboard in the browser in modules folder and Skip all the tests now open chessboard component TS file in modules folder and here instantiate chessboard class as private chessboard property Al declare chessboard View and also declare public getter for current player now open tboard component HTML file and here declare div with class of chessboard all of the CSS will be provided in the GitHub repository so you don't need to worry about that now declare another div and here we are looping through each row of chessboard view also declare x coordinate and give it class of row so ang4 for let piece of row also declare y cord coordinate and give it class square and for now just set coordinates for each Square so we can see in browser how our board looks like now open chessboard component CSS file and here paste all of the CSS from GitHub repository and now you can see what chessboard row and square class repres present and now in terminal start the project our project is live on Port 42,000 now in style CSS paste some basic CSS and open up component a HTML and here remove all of the default HTML and just include our app chessboard component now in square class append border and background color because background is initially set to Black let's see how our board looks in the browser so every coordinate is placed well and if we compare that with original board we can see that first row has first Square black then light and second row has opposite so in order to get desired view we need to apply certain CSS classes we are in chessboard TS file and here declare public static is square dark method that takes X and Y coordinates as arguments and return type is Boolean so if both X and Y coordinates are either odd or even then square is dark now open chessboard component TS file and here declare public e Square dark method that takes X and Y as arguments return Boolean and it calls static method of chessboard class now in chessboard component HTML delete x and y coordinate and for square append new class so append dark CSS class if square is dark but if square is not dark it means that we need to append light CSS class those class are just different background colors as you can see in chessboard component CSS file now our board looks perfect we applied dark and light squares correctly and now we need to append pieces to the board now under the source and assets folder you have piece folder with all of the images for each piece in sfg format now open Chess logic folder and in models. TS file we are declaring the piece image Parts constant that is read only object that for its key has fan character a for Value has PA to this image now implement it by adding missing properties and now we need to specify part to each image so it's under the assets and pieces directory in order to speed this up you can copy this object from GitHub repository now open chessboard component TS file and here declare public piece image paths property and now in drbo component HTML file add image St T that exist only if piece is different than null and append Source tag that has value piece image parts of piece and also declare alternative tag and add class of piece and P class is actually just setting width of 50 pixels now all of the pieces are on its correct positions and now we need to create functions that allows us to move pieces and play game so now we are going to discuss how we can achieve that our goal is to implement a function that returns all possible save squares for the current player so we can display save squares when user clicks on certain piece initially we Define find save squares function that takes no arguments and return type is map of the player available squares that map is is in format string for each key which is in format X+ comma + Y where X and Y are initial coordinates of the piece and for Value we have array of coordinates which represents piece save squares initially we Define empty map for the player available squares now we are looping through each of the pieces for current player Define empty list of coordinates that represents piece save squares now we are looking through each direction of the piece directions declare new X and New Y coordinates if those coordinates are out of range we can't continue along this direction now declare piece on new coordinates as new piece which can either be piece or empty square if that piece is not empty Square as has same color as initial piece we need to continue because we can't put piece on the Square that already contains our our piece now we need to check if that position is safe after that move we are going to see later what is meant by safety of the position then if the position is safe we update piece save squares list after we done with traversing all of the pieces direction we are checking for special moves like ampasant and castling if piece has any save squares we are appending that to initial map for the player a available squares and finally we return that map of the player available squares now to determine if position is save after move we firstly need to simulate how that position would look like after the move has played and now if the player who just moved piece creates position such that he's in check now position is then unsafe we need to restore that position and return safety of the simulated position position now let's see this position in that position white is on move and white Rook has only three available Square let's say that it doesn't so if he's moving on the one square that we are not specified he will create position that he is in check now which means that this position is unsafe so if white creates position or black creates position in which he left his own king in check that position is considered as unsafe position to determine if King is in check look at this position to determine if black king is in check we need to Traverse through all of the white pieces and see if any of those pieces attacks black king So firstly we are checking for white Rook eight doesn't attack black king then for queen queen also doesn't attack black king same for The Rook for the king bishop and finally we see that white knight attacks black king which mean that black is in check now so here's the pseudo code to determine if one side is in check look through each piece of the opposite color to determine if black king is in check we are looping through all of the white pieces and if one of the attacking Square contain PS King with the opposite color so in this case black king then position is in check if no such a square exists there is no check and finally just one exception that pawns are attacking in diagonal directions here in justb TS file and here Implement public is in check method that takes player color as argument of type color and returns Boolean we needs to return f in case that position is not in check but to see if position is in check we need to Traverse the board so here writing two Ned for Loops as you can notice we here hardcoded eight now we're going to store that in private readon chessboard size property and now we need to see if that square is actually empty square or contains piece so declare piece variable that is either piece or null and here we are checking if pie is empty square or piece color is same as player color if it is true we need to continue but now we need to Traverse to all of the piece directions and now declare new X and New Y coordinates in order to see if those coordinates are in range we need to create new method private R chords valid that takes X and Y as arguments returns Boolean and if both X and Y are greater or equal than zero and less than chbo size coordinates are valid but now if coordinates are not valid we need to continue now we need to check if p is either instance of Pawn Knight or King and here decare attacked piece which is piece or null which is square at new X and New Y coordinates in the board and here we need to check if attacked piece is instance of King and here has same color as player color argument of easy in check method if it does we need to return true here I've wrongly typed false but we'll correct that later and if pie is instance of Pawn and Dy is equal to Z we need to continue because pawns are only attacking diagonally and here I'm also leaving comment now if pieces are Bishops Rooks or Queens they can move multiple squares along One Directions so we need to Traverse all of that possible squares along each Direction here we also need to check if attacked piece is instance of King and has same color as player color argument so copy that from previous if statement and paste it but now we also need to check if attacked piece is different than now if it does it means that we need to stop traversing along this direction because we reach certain piece and Bishop Rooks and queens can't move over the other pieces and finally we need to update new X and New Y coordinates by incrementing them for the X and Dy now we are going to implement a method that checks if the position is safe after move declare private is positioned save after move method that takes couple of arguments first is piece and others are previous X previous Y and new X and New Y coordinates and return type is Boolean firstly declare new piece which represents piece or empty Square on new coordinates and we need to check if that new piece is actually piece and has same color as the initial piece that wants to move if it does we need to return false because we can't put our piece on the Square that already contains piece of our color also I'm leaving comment here and now we need to simulate how that new position would look like at previous X and previous Y coordinates we need to put empty Square that's the reason why we are setting null and at new X and New Y coordinates we are putting that piece now we need to check if that player is in check by declaring his position safe Boolean so position is safe if that player is not in check after he moved piece we now need to restore position at previous X and previous y will be piece and at new X and New Y will be new piece and finally we need to return is position safe Boolean we are in chbo TS file and here implementing private find save squares method that takes no arguments and return custom type save squares which we are going to declare in models. TS file which is basically map that for each key has string in format X Plus comma plus Y where X and Y as we said are initial coordinates of the piece and for Value has array of coordinates then import save squares type declare that initial map and also return that map now we need to Traverse through the board to be able to find those safe squares now we need to check if piece is empty square or piece colar is different than the color of the current player if it is we need to continue also declare piece save squares which is initially empty array of coordinates and now look through all of the pieces Direction now specify new X and New Y coordinates now we need to check if those coordinates are valid because if they're not valid we cannot process further also declare new P which represents square at the new X and New Y coordinates which can be either piece or empty square and now we need to check if new piece is actually piece and has same color as the piece that wants to move if it does we cannot process further because we can't put our piece on the Square that already contains piece of our color now we are checking if piece is either Pawn Knight or King now we are checking if position is save after move and we are passing piece x y and new X and New Y coordinates and if position is safe it means that we can append those coordinates to piece save squares appending new X and new y now we are checking for other pieces Bishop Rooks and queens can move multiple squares along One Direction that's the reason why we are having this while loop because we need to Traverse all of the possible squares along each Direction here also declare new piece and checking if that new piece has same color as piece that wants to move if it does we need to break the V Loop because those pieces can't move over the other pieces now copy this if statement if new piece is actually different than null we also need to break for the same reason that I mentioned couple seconds ago and finally we need to increment new X and New Y coordinates by DX and Dy after we traversing all of the pieces directions we need to check if piece has any save squares if it does we need to append those save squares into the save squares map and finally we need to restrict Pond movements in certain directions because for example pawns can only take pieces diagonally but can move forward if there is piece in front of them so now we are going to address all of that cases pawns can't move two square straight if there is pieace in front of them we are checking at the same time for both black and white pawns if DX is equal to two it means that we are checking for white pawns otherwise we are checking for black pawns also I'm going to leave comment what we did here in in case someone watches code at GitHub repository also now we need to do the same thing if Pawn is moving one square straight so same principle again checking for both black and white Pawns also I'm leaving comment for this situation and finally we need to restrict pal movements diagonally if that square diagonally is empty or has the piece that has the same color as the pawn that wants to move also I'm leaving comment for this situation as well now open chessboard component DS file and declare private property selected Square which is type of selected square that we are going to Define now so create models. TS file in chessboard directory and declare type for square with piece which is object that has piece of type fan character as property as well as X and Y coordinates of that square now Define type Square without piece that is object that for piece has null value and finally declare type selected Square which is discriminated Union between those types now import selected Square initially no square is selected and declare private property piece save squares which represents save squares for selected piece as array of coordinates which is initially empty array now open chessboard component HTML file and declare click event for selecting piece selecting piece function takes two arguments X and Y coordinates of that square and in jbor component TS file we're going to implement that method return type is void here we are declaring piece on that square which can be piece or empty Square so if it is actually empty Square we need to return from the function as we doing now and also we need to update private properties for selected square and piece save squares so firstly update selected Square by setting piece and X and Y properties and we need to update piece save squares now but before doing so open chessboard TS file and we need to declare property that holds save squares for the current player so here Define underscore save squares private property and we are going to assign value in Constructor by calling find save squares function we also need to create getter for that private save squares property and now go to chessboard component TS file and declare public getter for Save squares and now finally update piece save squares we are going to apply certain CSS classes in case that square is selected or Square is save for selected piece in order to achieve that imp public e Square selected method that takes X and Y coordinates as arguments and return type is Boolean if no square is selected return false and here we are checking if X and Y from E Square selected method are equal to selected Square X and Y properties also Implement public e Square save for selected piece method that also takes X and Y coordinates Ates as arguments and returns Boolean and here we are checking if piece save squares actually contains x and y coordinate now open dasboard component HTML file and apply selected Square class if square is actually selected and also create new div and give it class save square if that square is actually save for selected piece now you can notice that if I click on a square with a piece it marks that square as selected and highlights its save squares so for now everything works fine but however as you can also observe I can select squares with black pieces even though it's white turn so we go on address that bug and also we need to create functions that allows us to move pieces now we're addressing bug for selecting piece with wrong color so Implement is a wrong piece selected method that takes piece as fan character as argument and returns Boolean declare Boolean that says if white piece is selected so if piece is equal to piece to uppercase it means that white piece is selected and now we need to return if white piece is selected and player color is black or black piece is selected and player color is white in that case this method returns true and now we are going to call that method in selecting piece to prevent selecting piece with wrong color if I try to select black pieces when white is on move you can see that I couldn't select them which means that our method is working well and bug is resolved we are in chessboard TS file and implementing public move method that takes for our arguments previous X previous Y and new X and New Y coordinates and return type is void now we need to check if those coordinates are valid if they're not valid we need to return from the function now decare piece variable which is type piece or null that represents item on previous X and previous Y coordinates in the board and now we are checking if piece is actually empty square or has color that is different than color of the current player if it does we need to return from the function also here declare piece save squares that we are going to get from Save squares property and now we need to check if new X and New Y coordinates are actually in those piece save squares if they are not we need to return from the function because they are not safe squares so if those coordinates are not safe throw an error and now update the board at previous X and previous Y coordinates we are setting null and at new X and new y coordinate set piece also update player color variable so if player was white now it's black and vice versa and also we need to recalculate save squares after each move if piece is Pawn Rook or King and hasn't been moved we need to set has moved property to true now open chessboard component TS file and we are going to implement placing piece method which is private method that takes two arguments new X and new y coordinate and return type is void here we first need to check if square with piece is actually selected also we need to check if new X and New Y coordinates are safe coordinates for selected piece now we are destructuring previous X and previous y property from selected square and now we are going to call move function with previous X previous Y and new X and New Y coordinates and also update chessboard View now create public move method which takes X and Y coordinates as arguments and call both selecting and placing piece functions after calling both methods go to chessboard component HTML file and there instead of selecting piece call move function now you can see that our move fun function is working but there is bug because save squares remain still even though after I played move also I couldn't take aasan also I couldn't Cel and as you can notice when I check black king we should have some signalization to mark that King is in check so now we are going to address those bugs now Implement private unmarking previously selected and save squares method that takes no arguments and return type is void so here for selected Square say that no square is selected and also set piece save squares to empty array and now we we are going to call that method each time we move the piece we successfully removed bug that showed previously save squares after we moved piece now we are going to fix bug that happens when we click on the Square that has already been selected so here we are checking if same square is clicked so if selected square piece is not null and selected Square X is equal to X and selected Square Y is equal to Y it means that same square is clicked if it does we need to return from the function but previously we need to call Private unmarking previously save and selected Square method to unmark that square and save squares for that selected piece now if I click on square that is already been selected it is unmarked so everything works fine open models. TS file in chest logic folder and declare last move type which is object that contains previous X property previous y property as well as current X and current Y coordinates and also piece that has made move now open chessboard DS file and here after each move we need to update last move property but first we need to Define it declare privatecore last move property which is type of last move or undefined because it is initially undefined and here Implement getter for last move property now scroll down to move function and update underscore last move property set previous X previous Y and for current X and current y set new X and New Y and also pass piece we need to Define property that tells us if King is in check we have is in check method that returns if King is in check so somehow we need to update that property in that function but let's firstly see when that function is called that function is called in is position save after move method but on simulated position so so we need to have some argument that tells us if we called that on simulated position or on the real one so Define checking current position Boolean in E position save after move call it with false and firstly in models Define type King check which is object that has is in check set to true and also X and Y coordinates of the king declare type King not check which is object that has is in check property set to false and declare check State type which is discriminated Union between King checked and King not checked types and now in jbo TS file declare private property underscore check state which is initially set to King not checked import check State type and now we are going to implement getter for that prop y after we implemented getter foror check state property in e in check function here when we returning true we need to update the check state property if we are checking current position and also don't forget to return true now we are going to do same for Rooks Bishops and queens and finally if king is not in check but we are checking current position we are also updating the underscore check State Property by setting is in check to false and scroll down to move function after we changed player call property we need to call is in check method for current player and for checking current position we are passing true now open chessboard component TS file and declare private properties for both last move and check state we are going to apply certain CSS classes in case that King is in check or Square is actually either starting or end Square for the piece that last made a move in order to do that we need to create two functions firstly Define public is square last move that takes X and Y arguments and returns both firstly we are checking if last move is undefined if it does return false otherwise we need to firstly destructure previous X previous Y and current X and current White properties from last move and here we are checking if x is either equal to previous X and Y is equal to previous y or X is equal to current X and Y is equal to current y now Implement method is square checked which also takes X and Y coordinates as arguments returns Boolean and if is in check property of check state is set to true and check State X is equal to X and check state Y is equal to Y it means that King is in check so in placing piece after we called move function I want to update check State and last move and now go to chessboard component HTML file and here here append class last move if square is actually last move and do the same if King is in check append king in check CSS class now as you can see those classes just set different box Shadow for that square we can see that last move class is implemented well as well as king in check that is working good but you will notice that I still don't have option to Castle so we are going to work on that we are in chessboard dots file and here we are going to implement method can Castle here I have wrongly typed can capture but can Castle met takes King as argument as well as king side Castle bullion which signalizes if we want to Castle King side or queen side firstly if King has been moved we are returning false here specify King X and Y position King position X actually depends on the color of the king so if King color is white king position X is zero otherwise it's seven declare King position Y which is four declare Rook position X which depends on the color of the king but is same as king position X Rook position y depends on the king side Castle bullion so if it is King side it's seven if it's Queen side it's zero so Rook should be on Rook position X and row position Y coordinates at the board now we are going to check that now if Rook isn't instance of Rook or Rook has been moved or King is currently in check it means that we can't Castle so we're returning false now Define first next king position why which is coordinate of Y Square through which king needs to pass here we are declaring for both king and queen side castling also declare second next king position y that Kings need to cross in order to Castle now we need to check that both of those squares need to be empty if either one of them is is not empty Square we need to return false in case that three wants to Castle Queen side we also need to check that chess board at King position X and one need to be empty finally we need to check if those squares over which Kings need needs to pass our save squares so that's the reason why we are calling is position save after move function on first next king position Y and second next king position y for y coordinate and for x coordinate King position X after we implemented K Castle method we need to call that method in find save squares function so after we Traverse all of the pieces direction if piece is instance of King we need to check for both queen and king side castling so if King can Castle King side append to piece save squares x coordinate and for y set six now we need to check if King can canel Queen side if it can to piece save squares append X and for y append two now let's play couple of moves to get in the position where King can Castle now you see that I have option to Castle but if I Castle castling is done incorrectly because Rook didn't move at all so this is the bug that needs to be resolved also you see that black hasn't option for casting because white Bishop attacks that square over which Kings need to cross in order to fix bug for castling in move function we are going to call another special function that updates the board Implement private handling special moves method that takes five arguments first is piece that has been previously moved and others are its previous X previous y new X and New Y coordinates return type is white here we are checking if pce is instance of King and if absolute difference between its previous Y and New Y coordinates is exactly two if it does it means that castling has happened but if New Y is bigger than previous y it means that we Castle King side otherwise Queen side now declare Rook position X which is same as previous X declare Rook position Y which depends on the side where we Castle so if if it's King side it's seven if it's Queen side it's zero now Define Rook that we are going to get from board at Rook position X and the r position Y coordinates also declare Rook new position Y which also depends on the side where we Castle so if it's King's side it's five but if it's Queen side it's three and now finally we need to update the board so at chess board Rook position X and Rook position y we are setting n because we are moving Rook from that position and at chess boort Rook position X and Rook new position y we are setting that rook and also set that Rook has been moved now we are going to call that function in move method now play couple of moves just to get the position where both King can Castle now you can see that I implemented King side castling well as well as Queen side castling now we are going to discuss whether ampasant capturing can occur we observe that in the given position White last move involved moving upon pawn two squares and now black pawn has the option to capture aasan in order for the ability to capture aasan to be present certain conditions need to be met and these are previous player moved upon two squares our pawn and the opponent Pawn are on the same Rank and also pawns need to be adjacent to each other and finally position must be save after capture is completed if you look at this position even though black moved pawn two squares White PA hasn't option to capture aasan because if he has he will create such a position that he's in check now which means that this is unsafe position we are in chessboard TS file and now Implement private can capture ENT method that takes Pawn as argument as well as Pawn X and pawn Y coordinates and returns bullan if last move is undefined we need to return false now the structure properties from last move object and now in that if statement we need to check if amband can actually happen so if piece isn't inst of Pawn or Pawn color is different than color of current player or absolute difference between current X and previous X is different than two also if Pawn X is different than current X or absolute difference between Pawn Y and current Y is different than one so if any of those conditions are met we cannot capture ampasant now declare P new X position for both black and white pawns now declare Pawn New Y position which is same as current p and now we need to simulate how that position would look like so at current X and current y we are setting null because we removed Pond from that position now we need to check if position is safe after that move we need to restore position back and finally we need to return is position safe Boolean now go to find save squares function where we need to check if aasan can actually be completed so if p is instance of Pawn and can't capture ound we need to update piece save squares here we are going to handle for both black and white pieces at the same time we created position in which white has option to capture aasand but if he captur we didn't remove black pawn so this is the bug that we need to resolve in handling special moves function as we did for the castling now in handling special moves function we need to check if ENT capturing has occurred so if piece is instance of Pawn and last move isn't undefined and last move piece is instance of Pawn and absolute difference between last move current X property and last move previous X property is exactly two and also if previous X is same as last move current X and finally if New Y is same as last move current y it means that aasan has actually happened and now we need to update the board so now chess board at last move current X and last move current y will be null if fight Pawn captures a passant we remove black pawn successfully and bug is resolved but however there is another bug about Pawn promotion so if white Pawn takes a rook we should display promotion dialogue from which white player can choose in which piece he wants to promote his Pawn now we are going to work on that in chessboard TS file Implement private promoted piece method that takes one argument promoted piece type of type fan character and returns one of the piece in which we can promote our Pawn which is either Knight Bishop Rook or queen and now if from oted P type is either F character White Knight or Black Knight return new Knight and for callor pass Coler of the current player so now we are going to do same for Bishop rook and queen so if promoted P type is either white bishop or black Bishop return return new bishop do the same for rook and finally for queen go to move function and add one more argument for promoted piece type which is fan character or null and here we need to check if promoted piece type is different than null if it does it means that promotion is happening and we need to update the board so at new X and New Y coordinates we are not going to to set piece but rather result of the function promoted piece because if we set piece we will place Pawn on that position and we don't want to do that so here call promoted piece for promoted piece type and if promotion doesn't happening we need to place piece at new X and New Y coordinates now open chessboard component TS file and we are going to declare properties for p promotion first decare property is promotion active which is bullan that signalizes if promotion dialogue should be open and initially set to false also private promotion courts property which is type of coordinates or null and initially set to null and promoted piece which is type of fan character or null and by default is set to null and create function public promotion pieces which returns array of fan character so if the color is white it will return array of fan characters for white pieces in which we can promote our pawn and those are fan character White Knight fan character white Bishop white rook and White Queen and just copy that array and change white to black color now we need to fix bug because move function now takes five arguments and for a promoted pie type for for now just pass null and here we are going to handle promotion so firstly declare is Pawn selected Boolean so if selected square piece is actually fan character of white Pawn or selected square piece is black pawn now we need to check if that pawn is on last rank so if Pawn is selected and new X is equal to 7 or new X is equal to zero it means that pawn is on last Rank and now we need to check if we should open promotion dialogue so declar should open promotion dialogue bullan and if promotion isn't active and pawn is on last rank it means that we need to open promotion dialogue so set is promotion active to true and also update promotion coordinates and now we need to return because now we wait for player to choose in which piece he wants to promote his on now open chessboard component HTML file and now we are going to display that P promotion dialogue so here we have one div that is displayed only if promotion is active and give class of promotion dialogue and now we need to look through the result of promotion pieces function and to display each of the promoted piece add Source T and also create button to close the D dialog in case that we don't want to promote our Pawn but for now remove NG if condition to display dialogue when his promotion active is said to true because we want to show how the dialogue would look in the browser now you can see how that dialogue looks like if I move white pieces it changes color to Black and again changes to White now in chor component HTML file display dialogue only when is promotion active is set to true now if I want to take a look dialogue will be displayed and it will display me all of the pieces in which I can promote my pone but there is a bug because safe and selected squares are now also marked and I need to create a function when I click on a promotion piece it will place that piece on the board and also another bug when I click on another piece dialog Still Remains open so we need to correct that in chessboard component HTML file declare click event for each promotion piece and pass promoted piece function that has one argument and it's piece of type fan character now in chbo component TS file we're are going to implement that method return type is void and here if promotion cords are null or selected square piece is now we need to return from the function also update promoted piece property and set it to piece now we need to destructure properties from promotion chords now the structure previous X and previous y property from Ed square and now we need to update the port so we should call placing piece function but we don't need to check for those if statements so I'm going to create another function private update board method that takes previous X previous y new X and New Y coordinates return type is void and I'm going to copy code that updates the board and remove it in placing piece function and just call update board and copy that method and call it in promote piece method let's correct is position save after move function here I don't need to pass piece as argument but rather I will read it from board at previous X and previous Y coordinates and if p is null we need to return false and now every time that we called is position save after move function with five arguments we need to change that and call it with four now go to unmarking previously selected and save Square method and check if is promotion active if it does set is promotion active to false also set promoted piece to null and set promotion cords to null in update board method when we call move function instead of passing null we need to pass promoted piece property now if we want to take a R and P promotion dialogue opens we still have bug because save squares are highlighted also we need to create function to close the dialogue and if we don't remove save squares when dialogue is open we have option to place PA on Square even though we didn't choose in which piece we want to promote our Pawn so now we are going to address that bug in chessboard component HTML file declare click event to close the dialogue and in chort component TS file we are going to implement that method public close pawn promotion dialogue takes no arguments and return type is void and here we just need to call unmarking previously selected and save Square method in order to remove save squares when dialogue is open in placing piece function in if statement where we check if we should open promotion dialogue we need to set that piece save squares are now empty array and finally declare public method that will check if Square is actually promotion Square so in that case we can signalize which Square we clicked when we want to promote our Pawn so if promotion cords are null we need to return false and now we need to check if promotion courts X is equal to X and if promotion courts Y is equal to y now go to chessboard component HTML file and here upend class if that function returns true for that coordinates so append promotion Square class now if we take a rook save squares for Pawn are now not highlighted anymore and which signalizes our promotion Square close PA promotion dialog function works well if we click on another P when dialog is open dialog will disappear and if we want to take a rook we see that now we can put Pawn on its previously saved Square which means that previous bug is resolved and now if I want to promote into a queen everything works well I couldn't move a bishop because blacking will be in check now decare properties that will signalizes if the game is over so first let Define privatecore is game over Boolean which is initially set to false and also privatecore game over message which is string or undefined and now Define gets for both properties and also getter for game over now let's Implement a method that checks if game is finished private is game finished method takes no arguments and returns bullion and here if player doesn't have any safe squares it means that game is over and we need to check if it is a Checkmate or stalemate so if is in check property of check State object is said to true it means that player lost via Checkmate so here declare previous player if current player is white it means that previous player was black and vice versa and now update unor game over message property and set previous player one by Checkmate otherwise update game over message and said that this is State and return true otherwise we need to return false and finally go in move function and after we calculated save squares we need to update e game over property we are going to handle situations in which draw is happening to a 50 move rule basically this rule states that if no capture has been made or no Pawn has moved in the last 50 moves game is declared as draw so here we are declaring private 50 move rule counter and set it to zero and scroll down to move function declare is p taken Boolean and if square at new X and New Y coordinates is different than empty Square it means that piece is taken now we need to check if piece is taken or piece that is last moved is actually Pawn if it does we need to reset the counter to zero otherwise we need to increment it by 0.5 and now go to E game finished method and we need to see if 50 move Ru counter is equal to 50 if it does update game over message and set draw do a 50 move roll and return true now we are going to talk about insufficient material positions a position is considered insufficient material position if neither site can mate the other there are couple of those position and we are starting with King versus King position also if one side has exactly one minor piece knight or Bishop it is also considered as insufficient material position if one side have two knights and King versus King it is also insufficient material position if both sides have exactly one Bishop of same colors it is also considered as insufficient material position and finally if one side have multiple Bishops of same color position is also insufficient material position we are not going to implement insufficient material function because it is Trivial function and I don't want to spend time on it I'm going to paste the code and we can see what we did in that method so now we have private insufficient material method that takes no arguments and returns bullion now we declared white and black pieces as array of object and that object has piece X and Y properties we need to have X and Y because in some cases we can have Bishops that are on same color now we are traversing the board and see if piece has white color if it does append it to White pieces otherwise append it to Black pieces and now we are checking if white pieces has length of one and black pieces has length of one which means that this is King versus King position and we are returning true now we are checking if one side has King and minor piece against King so if white piece length is equal to one and black piece length equal to two we are checking if black pieces has either Knight or Bishop we are doing same for white pieces now here we are checking if both sides have Bishop of same color so if white piece has length of two and black pieces has length of two now we are checking if both sides have Bishop if it does we need to check if those Bishops are on same color so we are calling is square dark method so if both white and black bishops are either dark or light we are returning that Boolean now we are check checking if one side has two knights and King against King for the sake of that we Define player has only two knights and King method which simply filters the piece and see if that piece is actually night and if the length of that filtered array is equal to two and finally we are checking if one side has only bishops of same color against King so we declared function and we're filtering Bishops and now we need to see if all of Bishops are on same color for the sake of that we declared set and we mapped Bishop's array to see if square is actually dark and if the size of that set is equal to one It means that all of the Bishops are on same squares and now we need to see if Bishop's length is equal to pce length minus one because of King and if all of the Bishops are on same color and finally we are returning false if neither of these cases return to True finally we need to call insufficient material method in E game finished method update underscore game over message property and say draw do a insufficient material position and return through we are in jbo component TS file and here declare get for game over m message property and go to chessboard component TS file and now we want to display that message if game is over so if game over message is different than undefined we need to display this message and give class game over message go to chessboard component TS file and now I want to prevent selecting and placing piece once game is finished so here we are checking if game over message is different than undefined if it does we need to return from the function and by doing so we we cannot call placing piece method because we can't select square and set piece save squares and hence placing piece function will never be executed and same is for promote piece now go to chessboard TS file and in move function if is game over property is set to true I need to throw an error that says that game is over and we can't play Move let's play a couple of moves just to see if Checkmate detection is working and it does game over message is displayed and you can see that now I can't select black pieces because game is over now we are going to see that stalemate detection is also working stalemate game over message is displayed now let's check for insufficient material position detection and King versus King position is successfully detected insufficient material position for King and minor piece against King is detected insufficient material position detection is working in case that we have two knights against King and it is also working in case that we have multiples Bishop of same color and finally it is working in case that both sides have Bishops of same color before we start to implement fan converter class we need to Define private full number of moves property which is Sixth and last part of the fan string which is initially set to one and now scroll back to move function and after each move when white is on move we need to increment that counter so here we are checking if player color is white if it does then increment number of full moves by one now we are going to talk about fan notation which will help us in implementing method for detecting if same position is occured three times during the game and also we will use it when we want to receive move from stockish rest API to be able to play against computer so we're in Wikipedia page and for fan says that it is a standard notation for describing a particular board position of a chess game the purpose of fan is to provide all the necessary information to restart the game for particular position here we have fan string that consist of six parts separated via slash character so first part actually represents position of the board but starting from the reverse so we are first looking through black pieces and black pieces are represented in lowercase letters and if we have numbers it means that those numbers are represented empty squares like now we have firstly four empty squares then we have white pawn and another three empty squares and rows are separated via SL character second part of the fan string represents player on the move which can either be W or B for white and black pieces third part represents right for castling so K means that King has right to Castle King's side while Q means that King has right to Castle Queen side and uppercase letters are for white player and lower case are for black black player and if neither side have ability to Castle we need to return Dash fourth part is actually represent aasan Target Square so if there is no option to capture Pawn in aasan we return Dash and fifth part is actually represent half move clock which is the number of half moves since the last capture or Pawn Advan is made and finally last part represents full move number which is number of the full moves it starts at one and it is incremented after black move now create new file fan converter TS and declare fan converter class and now we are implementing method that converts current board position to Fan string that method takes couple of arguments first is board which is two dimensional Matrix of pieces or null also player color last move which is last move or undefined 50 move roll counter and finally number of full moves return type is string and here declar that fan string as an empty string that we need to return from the function now we need to look through the board and get first part of the fan string which represents position of the board and we are doing that from reverse because this is how fan is defined now declare fan row which represents row of board as fan string and initially set to empty string and also declare consecutive empty squares counter and set it to zero now we need to look through each square of the row if that square is empty we need to increment consecutive empty squares counter and continue but now if consecutive mty squares counter is different than zero in Fen row string append that value for consecutive mty squares counter by string and also we need to reset the counter and append piece fan character property to Fan row and now we also need to check if consecutive empty squares counter is different than zero which means that row ends with empty square and now also append consecutive empty Square counter as string to Fan row string and finally we need to update defend string so if I is equal to zero it means that it is last row fan rows are separated via slash character but that doesn't count for last row now we finished with first part of the fan string now Define player color so if player color is white then second part of the fence string will be W otherwise would be B now create private method castling availability that will tells us if white and black king have rights to Castle both King side and queen side so here we are passing board return type E string here declare casting possibilities function let's take scholar as argument and return string here declare castling availability as an empty string that we need to return in order for King to have ability to Castle it has moved property must be set to false so here firstly get King position X which depends on the color so if the color is white it is zero but if it's black it's seven and here get King from the board King is at King position X and for y4 now we need to check if King is actually instance of King and if hesm property is set to false now we need to get a rook position X which is same as king position X now declare King side Rook which is at Rook position X and seven for y and declare Queens side Rook which is at Rook position X and zero for y now we need to check if those Rooks are actually Rooks so firstly for King side Rook checking if it is instance of rook and if it has no property set to false if it does in Cas link availability append K also doing same for Queen side Rook upend lowercase q and finally if the color is white we need to present caselink availability in uppercase and finally we need to return casting availability Now call Cas possibilities function for both black and white king now we need to check if castling availability is actually empty string which means that neither side have right to Castle if it does we need to return Dash otherwise we are returning castling availability and as we declared casting availability method now we need to do same for ampasant possibilities so here declare private impossibility that takes last move as argument which is type of last move or undefined and also takes color which is color of the current player and return string so first we need to check if last move is undefined if it does return Dash otherwise we need to the structure properties from last move now we're checking if last move involved moving upon two squares so firstly check if p is instance of Pawn and if absolute difference between new X and previous X is exactly two which means that there is possibility to capture that pawn in unass some firstly declare a row of that Target Square which depends on the color so if the color is white it is six if it's black it's three and now we need to return that Target Square so first we need to Define columns in models. TS file which represents Columns of the board from a to H and here we need to return exactly coordinates of that square as strings so we are returning Columns of previous y plus string of row if that square doesn't exist return Dash and now we need to call casting possibilities and aasan possibility function in convert board to Fan so firstly a p to fend player which is second part of the fan string and fan parts are separated via space character so third part is actually casting availability string fourth part represents ampasant options fifth part represents 50 rule move counter multiplied by two and last part is actually number of full moves we are going to implement a method that detects if same position is occured three times during the game for the sake of that declare private property three fold repetition dictionary which is map that for each key have string and for Value has number and also declare private threefold repetition flag property which is initially set to false after each move we need to update threefold repetition dictionary for the sake of that Implement private update threefold repetition dictionary method that takes one argument and it is fan string and return type is void here declare threefold repetition fan key which represents first four parts of the fan string because if they are same it means that position is repeated and now we need to see if that key actually is in map now we are checking if threefold repetition value is undefined if it does we need to update threefold repetition dictionary map and for threefold repetition key set value of one and now if that key is present in map we are checking if this value is equal to two which means that now we are repeated position three times and set threefold repetition flag to true and we are returning from the function otherwise we need to set value for threefold repetition key to two now go to is game finished method and here we need to check if threefold repetition flag is set to true if it does we need to update underscore game over message property and return true so set draw do threefold repetition and return true we need to have some property that holds board position as f string for the sake of that declare privatecore board as fan property which is string and here I pasted F string for the start position of the game now instantiate private property fan converter we now need to implement getter for underscore Board San property now scroll down to move function where we need to update uncore board sent property after each move so here we are in move function cut this line and paste it at the end of the function and finally update uncore board s Spen property by calling convert board to Fan method of fan converter class and here pass chess board as first argument then player color then last move also 50 move rule counter and number of full moves and finally after we updated underscore board Spen property we need to call update refold repetition dictionary and pass underscore board s Spen as argument now we are going to repeat same position three times just to see if our method is working well and if we can see it does draw do three fold repetition rule message is displayed we are in chbo component TS file and now we are going to implement a method that will rotate the board so firstly declare public flip mode Boolean which is initially set to false and now Implement Flipboard method that takes no arguments and return type is void and it simply inverts the flip mode property now go to chessboard component HTML file Place Pawn promotion dialogue outside of the PR board div here declare button that flips the board and append click event and for function set flip board and now we are going to append rotate CSS class in case that flip mode is set to true we need to do that for div chessboard and also for each piece now in chessboard component CSS class firstly set width and height for chessboard class and also declare rotated class that simply rotate the board for 180° now we can see that Flipboard function is working I can successfully rotate the board open Terminal and generate computer mode component in modules folder and Skip test now generate stockfish service in computer mode folder and also skip tests now go to app module TS file and here import HTTP client module from angular common http now go in computer mode and in stock with service TS file inject HTTP through Constructor now let's take a look at stockish rest API website that we are going to use in order to be able to create mod toplay against computer firstly I need to say that while I was recording this tutorial version of this API has changed and now you don't need to create multiple requests to get best move evaluation and top Engine line initially in the video I used all API but later you can find part where I make certain changes and application is now compatible with the new version of API now if I click on send get request I receive response from the stockish and in docs we can get more information about that so here is the end point for this API method is get we need to send two parameters to that method first is Fen string that we want to anal second is depth for engine to go which is integer below 16 for Success we can either have true or false and if value is true we receive object that is look like this so first we have evaluation which is number that is evaluation of the current position that we get from stockfish mate is null unless there is force Checkmate in the given position best move is in this format where first part is best move string then we have space character second part is computer move where first two letters represent starting coordinates of that move and coordinates of that move and that second part can sometimes have five letters where last letter represents piece in which computer wants to promote his phone and finally we have top Engine line now create private readon property for API endpoint and here I pasted version of the old API then in computer mode folder create models. TS file and here I'm going to declare type for stockfish query params which is object that has fan as property which is type of string depth which is number and third parameter which is mode but later we will see that we don't need to have that mode property now go to stock with service TS file and we are going to implement method to get best move from the computer that method takes fan string as argument return type is observable of chess move which is custom type that we are going to Define now so now go in models. TS file and here declare that chess move type which is object that has previous X property which is number previous y as well as new X and New Y and also promoted piece which can be fan character or null now go back to stock P service and now import both chest move and observable here declare query param object that we are going to send with get request so pass fan for dep say 13 and for mode set best move because this is old API create HTTP params object and append query params to that now go to Model Ts file and here declare one more type which is stockish response that is object that has success of type bullion as property as well as data which is of string now we are sending get HTTP request now import switch map operator and we want to create new observable from that response now declare best move that we will get from response data but we need to split that via space character and to get second part of that and best move is type of string in format B6 B7 and we need to convert that string into chest type that's the reason why we are implementing now private move from stockish string method that takes one argument move of type string and returns chess move but because this response is in format B6 B7 we need to have another function that will convert that letter to y coordinate now we are implementing that method takes one argument of type string returns number and we need to subtract chart code of that string with Char code of lowercase a declare previous X previous X is actually number of second character in move string minus one here declare New Y and we also need to call conver column lad to y coordinate for thre ladder declare new X and finally if you remember best move from stock which can sometimes have five letters and that fifth letter represents promoted piece so we need to handle that situation as well that's the reason why we are implementing promote piece method that takes piece as argument of type string or undefined and returns than or null so if piece is undefined we are returning null but if piece is equal to lowercase n we need to return fan character Black Knight now we are assuming that computer plays with black pieces but later we are going to change that so if piece is B we need to return fan character black Bishop if piece is equal to R return fan character black rook and finally return fan character black queen now declare promoted piece and call promoted piece method for last letter of the stockish string and return chest move type now after we finished with move from stock with string we need to call that function in get best move so here we are returning new observable of result of the move from stock with string function now open computer mode component TS file and here computer mode component class extend chessboard component class and also for HTML template set HTML template of chessboard component and also use CSS from chessboard component and also we can delete just mode component CSS and HTML files now open Terminal and they want to install angular material choose custom team we don't want to use typography Styles and also don't include animations now generate now menu component and Skip tests now we are going to implement routing in app folder create a routes folder and in routes folder create up routing module TS file for now declare empty arrays of imports and exports then declare up routing module class and now declare routes we will have two routes first is to play against friend and second is to play against computer also adds title and now in Imports add router module for root route in exports add router module and here open up module TS file and in import include up routing module class now go to nav menu component open nav menu component TS file and here mark it as Standalone component and import mod toolbar module as well as bottle module now we need to import mod toolbar module and M bottle module from angular material Now open up module TS file and here we need to correct error because now menu component is now Standalone component and it to be included in Imports array and now go to nav menu component HTML file where we are going to declare basic HTML for nav menu component we will have two buttons and add router link to against friend mode and also add another but to play against computer also add router outlet and then in N menu component DS file we need to import router module and finally go to up component HTML file and remove up board component and append up nav menu component this is how our application looks now so we have now menu component and two buttons for play against front and play against computer but for now play against computer component is same as play against friend component and now we are going to work on that now go to computer mode component TS file and here we want to inject stockfish service through Constructor also we need to call Super Constructor now Implement NG on it now we are going to subscribe to chessboard State behavioral subject from chessboard service because after each move is played we want to see if computer is on move and then to call get best move method from stockfish service but first open chessboard component TS file and Mark chessboard Service as protected we receive fan as response and now we need to check which player is currently on move this is second part of the fan string now if player is white we need to return from the function because we initially said that computer is always playing with black pieces and now we are going to call method to receive best move from stockfish string pass F to get best move function and this type is observable of chess move so now we need to convert that observable to promise using first value from rxjs operator and also Mark that function as a sync now we are going to destructure stockfish move before we call update board method in computer mode component we need to mark it as protected and then we are going to call update board method and pass previous X previous y new X New Y and promoted piece then declare private subscriptions property that is going to hold all of the subscriptions that we declared in NG onit method add Jabo State subscription to subscriptions now Implement on destroy life cycle hook and in Ng on this dry method we are going to unsubscribe from those subscriptions we are in computer mode component and after I play Move I receive move back from computer and now as you can see everything works fine now open Terminal and generate play against computer dialogue which is component that will all allows us to choose to play with black or white pieces against computer and also skip tests now go to play against computer dialog component Mark component as Standalone and here import mat dialogue module mat button module and common module then declare public property stockfish levels that represents different levels of stockfish strength also declare current stock which level that we choose which is initially set to one now we are going to implement HTML for play against computer dialog component now declare title for dialogue then we need to display stockish levels from which we can choose to play now we are looking through all stockish levels add class strength de also add button that is going to close the dialogue now go to app module and play against computer dialog component is Standalone so include it in Imports array open play against computer dialog component CSS file and here I pasted code for CSS that you can find on GitHub repository then open play against computer component HTML file and here I'm going to create two images for black and white king so when I click on one of those image I can choose color for my pieces also set dragable attribute to false well to nav menu component DS file and here we are going to implement a method that will open the dialogue once we clicked on play against computer mode button so here import M dialog module then go to now menu component HTML file remove router link and here add click event and add play against computer function that takes no arguments now we are going to implement that method return type is void when need to inject dialogue through Constructor and open the dialogue in play against computer method correct typing mistake for CSS class dialog component is working well but now we need to create functions to choose level of stockfish and also to choose player color now declare click event for stockfish levels select stockfish level method takes level as argument now we are going to implement that method return type is void and here update stockfish level property now go back to HTML file and here we are going to add CSS class that will signalizes if that level is selected so app selected CSS class if level is same as stockish level then declare click event for both Kings we're going to have play function that takes one argument which is either W or B now let's Implement that method return type is void and here we need to go to Model Ts file in computer mode component and declare a new type which is computer configuration which is object that holds two properties and first is color of type color and also level of stockish which is type of number but now we also need to map that levels to stockfish depth for the sake of that we declare constant stockfish level which is read only object and here just map levels to stockfish depth go to stock with service TS file and here declare public behavioral subject property that is of type computer configuration and for initial value set the color is black and for level set one now open play against computer dialog component TS file we need to inject stock with service through Constructor also we need to inject dialog component and now when we click play function we need to close all dialogues computer configuration behavioral subject needs to emit new value once we click play function here we are setting value for color here I have wrongly typed color white but should be color black if we choose to play with white pieces that mistake will be corrected later and for level set stockfish level also we are injecting router so once we click on play function we should navigate that to computer mode component and also create click event to close the dialogue theog is closed by default but we are going to navigate to play against friend component if we choose to not play against computer then Implement close dialogue method this takes no arguments and return type is void and we simply need to navigate to play against friend component then go to computer mode component TS file and here we are hardcoded that computer is always playing with black pieces now we are going to change that and now we are checking if player is different than computer configuration value for color if it does we need to return from the function because this is not computer move if we choose to play against computer with the black pieces I want to rotate the board so black pieces would be closer to us here the declare computer configuration subscription and they want to subscribe to computer configuration behavioral subject and now we need to check if computer configuration value for color is white if it does we need to call Flipboard method also we are going to append that computer configuration subscription to subscriptions property then go to stockish service TS file and here in get best move method you see that we hardcoded 13 but rather we are going to pass value from computer configuration behavioral subject for level now go to chessboard component TS file and Mark private tboard property as protected then go back to computer mode component TS file and here we need to check if game is actually over so if game is over we need to unsubscribe from chessboard State subscription and also to return because we don't want to generate computer move once game is finished then go to play against computer dialog component and fixed bug that we said earlier for computer color finally go to stockfish service TS file where we need to handle last bug you can see that private promote piece method is only handling situations when computer is playing with black pieces that's the reason we have now computer call variable that we get from computer configuration behavioral subject and now we need to check if computer color is white and then to return fan character white piece otherwise we are returning fan character black piece now we need to correct that for each Knight Bishop Rook or queen promotion now do same for Rook and finally for Queen now we fixed method we are going to make certain changes in order to make application compatible with new API firstly change API end point then remove mode property from stockish params object and also remove data from stockish response and instead of data we will have evaluation property which is type of number or null mate which is also number or null best move of type string continuation of type string then in stock with service TS remove mode and here we need to access response best move property and finally go to play against computer dialog component is file and here instead of passing stockfish level we need to pass stockfish levels which is map and access here stockfish level we can see that our application works well I can select different level for stock strength and also for color board is rotated automatically if I choose black pieces now open models. TS file in ch logic folder and here declare enumeration for different move types we have capture cast Link promotion check checkmate and basic move and append new property in last move object which is move type of type set of move type enumeration then open chessboard TS file scroll down to move function and you will see an error because last move now has one additional property which is move type so we are going to declare move type as an empty set of move type enumeration and now if piece is taken it means that capture is happening so append capture to move type set also add move type for last move object and here if promoted piece type is different than null it means that promotion is happening so also upend promotion in move type and also we need to pass move type as handling special moves argument go to handling special moves function and here if castling is happening at castling and also if aasan is happening add capturing again go to move function and here we need to check if if Checkmate or check is happening so if is in check property of check State object is set to true and if player doesn't have any save squares it means that is a Checkmate otherwise it is a check position and also if move type sa doesn't have any elements we need to append basic move now go to Model Ts file where we are going to declare type that is responsible to hold list of previous moves move list type is array of tles and first element of tle is string and and second is optional string now declare game history type which is array of objects and that object has last move property which is type last move or undefined as well as check state property of type check State and board which is two dimensional Matrix of f character or null elements then go to chessboard TS file here declare properties for those type so firstly declare privatecore move list which is of type move list and initial value is Mt array declare underscore game history property of type game history and we are going to assign value to that in Constructor now let's Implement gets for both last move and game history properties now we are going to implement a method that is responsible for storing move so here Implement private store move method that takes no arguments and return type is void now the structure properties from last move object declare piece name so in case that piece is Pawn piece name is empty string otherwise it's piece fan character property now declare move which is initially empty string and here we need to check if move type from last move object contains castling which signalizes that castling is happening if it does we need to check if it is actually King side or queen side castling in case that current Y is bigger than previous y it means that this is kingside castling and this is notation for kingside castling and for Queen side castling otherwise for move out piece name and also include initial coordinates of the piece so this is long notation later we will make certain changes and make it shorter or also we need to check if capture has happened if it does append X signed to move also include end coordinates we need to check if promotion is happening so upend promot Ed piece which is type fan character or null as stor Mo function argument and here if promoted piece is different than null append equal sign plus promoted piece to uppercase finally we need to check if check or Checkmate has happened so here we are checking if check is happened if it does append plus sign to move stre and if Checkmate has happened aen hash symbol to move now we need to store that move in move list property so here we are pending move for right and now for black then we are going to implement a method to update game history takes no arguments and return type is void now we need to update underscore game history property so for both board we are creating deep copy of chessboard view property now we need to create deep copy of check State object and same for last move but first we need to check if last move is undefined then go to move function and here we need to call stor move method and update game history method now open Terminal and generate move list component in modules folder and also skip tests go to move list component TS file Mark component as Standalone and now import common mode module mat button module and mat icon module go to move component HTML file and I'm going to paste basic HTML for navigating between moves so we're having navigate to First move to move before to move next and to last move also we need to correct error because move list is Standalone component and needs to be included in Imports array go back to move list component TS file and here declare input property move list which is the required property then open mov this component HTML file and here we going to render those moves from move list so create div and add class move list now we need to Loop through each move of move list Al declare move number which is index and aend class of Row first append white move and then we should check if black has play if it does we also need to append black move and we give class move for that div and also I'm going to paste CSS which you can find on GitHub repository then open transboard component TS file and here declare getter for move list now open tboard component HTML file and here we want to upend move list component and also pass move list property play couple of moves just to see how our move list component looks so far so this is long notation later we will change it to short notation but also we need to implement functions so each time I click on move in M list component it should render me that position and also to navigate using arrows in chbar component TS file declare getter for game history and declare public property game history pointer which represents move that we are currently on in move list component and initially set to zero so scroll down to update board method and each time we call move function we need to increment that game history pointer now go to Mo list component TS file and add another input required property which is game history pointer and initially should be set to zero here I have wrongly set it to one but we'll correct that then go to chbar component HTML file and add input binding to game history pointer then go to move this component HTML file and here also add move number which is move number + one and also we need to check which move we are currently on and to add class current move so here we are checking if move number * 2 + 1 is equal to game history pointer and for black pieces we are checking if move number time 2 + 2 is equal to game history pointer now we successfully added current move class go to move this component TS file and declare one more input property which is also required and it is game history length which is length of game history property of chessboard class and has initial value of one and now we need to make binding for those property so go to chessboard comp component HTML file and add input binding for game history length and say that this is game history length we are going to disable navigation buttons in move this component so disable navigating to initial game position if game history pointer is equal to zero also disable navigating to move before if game history pointer is equal to zero disable navigating to next move if game history pointer is same as game history length minus one and do the same for navigating to last move finally we need to declare output property which is event emitter that will emit new value after we click on certain move in move list component and that emitter will trigger function in chessboard component that will show us position of the board when that move has has been played so here we declared show previous position event output property which is event emitter of type number and here declare Show preview position method that takes move index as argument of type number return type is void and it simply emit new value for show previous position event amiter and now in move list component HTML file we need to call show previous position method for each of the navigation buttons and for both black and white moves in move list so firstly declare click event for navigating to zero move also to navigating to move before and pass for argument game history pointer minus one to navigate to next move add click event to navigate to game history pointer plus one and to navigate to last move call show previous position method for game history length minus one and now also call it for both black and white moves in move list call show previous position for move number time 2 + 1 if the move is white and call show previous position for move number * 2 + 2 for black move then go to chessboard component TS file and here declare show previous position method this Stakes move index as argument of type number and return type is void and here we need to update check state board and last move property and first we need to destructure them from game history at move index and now update chessboard view check State and also last move and finally update game history pointer and finally add output binding to up move this component now let's see how Mo list component looks now initially every navigation button is disabled and after playing couple of moves you can notice that buttons that navigates to next move and to the last move are disabled and also if I click on certain move in move list Position will be displayed when that move has been played and this is same for navigation buttons now we are going to implement a method that will convert long chest notation in short notation first we need to remove coordinates of initial Square then here Implement private starting piece courts notation which takes no arguments and turn string firstly we need to destructure properties of last move object then we need to check if current piece is instance of Pawn or King if it does we need to return empty string because we have only have one king and for Pawn we are handling that situation later and now we need to have array of coordinates that represents all pieces of the same type that have same Target Square as piece that just made the move so here for X add previous X and for Y at previous y now we need to look through the board and see which piece of same type has exactly same Target Square as initial piece declare piece on that square which is either piece or null and now if piece is null or X and Y are same as current X and current y this means that this is the same piece and we need to continue and now if piece actually has same F character as current piece we need to check if that piece had same Target Square now let's get save squ for that piece from underscore save squares property now we need to look through that save squares and see if that save squares contains coordinate that has X which is equal to current X and Y which is equal to current y and if it does we need to append those coordinates in same pieces qut if same pieces cords array has length of one it means that there are no pieces of same type that had same Target Square as piece that made the move hence we need to return empty string and now declare two more sets and those sets are important because from them we can conclude how many same type pieces that had same Target Square shares both X and Y coordinates so firstly we declared pieces file set that represents pieces that shares ycoordinate going to do same for x coordinate pieces rank set and now we need to check if pieces file size is same as same piece cords length if it does it means that all of the pieces are on different files hence we are returning columns at previous y index also I'm going to leave comment for that case now we need to do the same for pieces r so if pieces rank size is same as same pieces quarts length it means that all of the pieces are on different ranks for example 1 2 3 and so on hence we need to return string from previous x + one also I'm leaving comment for this one and finally if none of these if statements returns to true we need to specify both column and rank also I'm leaving comment for this case so that's the situation where multiple piece shares both Rank and a file now go to store move function and here call starting piece qus notation method also here when we are checking for capturing we need to see if Pawn is pieced at last move because if it does we need to include its previous column that's because in starting piece course notation method if current piece is Pawn we returned empty string and now as you may all already noticed there is a bug in this approach because in starting piece cord notation method when we get save squares for piece we use it save squares after they've been calculated for next player in move function as you can see right here so we called store move function after save squares are being calculated so we need to store save squares in some variable and update uncore save squares property after we called store move function and also in stor move function piece name f character should be uppercase now we are going to see if short notation method is working play couple of moves and now we will get in position where both B and F Knights can go to same square and we specified that this is B Knight so method is working we are in Wikipedia page that talks about chest notation and they provide some example where multiple pieces share either column rank or both and we are going to replicate that position so in our chess application we are playing same moves as they were playing and everything works for Queen We need to specify both initial column and the rank because multiple Queens share both Rank and a file now we are going to emit a sound after each move is played so we have sound folder that represents different sounds of each move type in assets folder and now open chessboard component TS file where we are going to implement a method that will emit new sound after each move here Implement private move sound method and declare basic audio element and for each Source set source of basic move that private method should take one argument and this is move type which is set of move type enumeration now we are checking if move type set contains promotion if it does we need to update source for move sound now we are going to check for both G link and capturing now we are checking for both Checkmate and check they have higher presence than promotion capture and cting sound here correct mistake and now finally we need to emit that sound in move sound function I have typing mistake because I double checked for checkmate should be for check you can see that we manually update check State and last move property in show previous position method and we are doing same in update board method but rather we are going to create method that marks check State and last mole so here implement private Mark last move and check state that method takes last move which is type last move or undefined as well as check state of type check State and return type is vo and here we are assigned last move to last move property as well as check state to check state state property and now we are going to a it sound so if last move is different than undefined we are calling move sound function and here pass move type from last move property and if last move is undefined it means that we are going back to first move so here just emit new set of Base move now we need to call Mark last move and check State method so here in update board pass chessboard last move and chessboard check State properties and do same in show previous position method pass last move and check state that we are D structured from game history now as you can hear move sound is emitted after each move it is working for basic move and for capturing as well as for check and for cast link also if I navigate between moves in move list component move sound is played also when I promote my Pawn different audio is emitted here is the sound of Checkmate now we are going to create a method to navigate between moves in MO list component using left and right arrow key so firstly Implement on init life cycle hook and here declare key event subscription so we are getting event from keyboard for whole document and even that we're listening is key up now we need to filter those events so we are only listening to right and left arrow keys now we are going to Define functionalities in top operator so we need to import it from rxjs and here declare switch statement so if we have Arrow right we are checking if game history component is same as game history length minus one in this case we cannot go any further so we need to return otherwise we need to increment game history pointer for left Arrow we need to check if game history component is equal to zero in that case we need to return otherwise we need to decrement game history pointer and finally we need to call show previous position method and pass game history pointer also we need to subscribe to that from event and we need to Define private subscriptions property that is going to hold all of the subscriptions defined in chessboard component TS file now add key event subscriptions in subscriptions property also we need to implement on destroy life cycle hook and here we need to call subscriptions unsubscribe now go to computer mode component TS file and here we need to call Base NG on it from chessboard component class also we have same subscriptions property so we need to rename it to computer subscriptions also we we need to override NG on in it and NG on Destroy in computer mode component class and also call Super NG on Destroy as you can see we Implement navigating between moves in move list component using arrows well so everything is working